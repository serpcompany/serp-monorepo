[
  {
    "owner": "pydata",
    "repo": "xarray",
    "content": "TITLE: Implementing Vector Norm with apply_ufunc and Core Dimensions\nDESCRIPTION: Demonstrates how to wrap NumPy's linalg.norm function using apply_ufunc with core dimensions to calculate vector norms on Xarray objects.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/computation.rst#2025-04-21_snippet_38\n\nLANGUAGE: python\nCODE:\n```\ndef vector_norm(x, dim, ord=None):\n    return xr.apply_ufunc(\n        np.linalg.norm, x, input_core_dims=[[dim]], kwargs={\"ord\": ord, \"axis\": -1}\n    )\n\nvector_norm(arr1, dim=\"x\")\n```\n\n----------------------------------------\n\nTITLE: Manipulating DataArray Values and Attributes in Python\nDESCRIPTION: This snippet covers accessing and modifying the values and attributes of an xarray DataArray object, enabling users to apply transformations  and set metadata such as units. xarray and numpy are the primary dependencies.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/data-structures.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfoo.values = 1.0 * foo.values\nfoo.name = \"foo\"\nfoo.attrs[\"units\"] = \"meters\"\nfoo\n```\n\nLANGUAGE: python\nCODE:\n```\nfoo.rename(\"bar\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Dataset from Multiple DataArrays\nDESCRIPTION: Shows how to create a Dataset that contains multiple DataArrays with potentially different dimensions and types.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/getting-started-guide/quick-overview.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nds = xr.Dataset(dict(foo=data, bar=(\"x\", [1, 2]), baz=np.pi))\nds\n```\n\n----------------------------------------\n\nTITLE: Reading Multi-File Datasets with Dask in Python\nDESCRIPTION: This snippet demonstrates how to open multiple NetCDF files in parallel using the Xarray library and Dask. It utilizes the `open_mfdataset` function to combine files into a single dataset, allowing for efficient memory management.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/io.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nxr.open_mfdataset('my/files/*.nc', parallel=True)\n```\n\n----------------------------------------\n\nTITLE: Initializing DataArray with xarray in Python\nDESCRIPTION: Demonstrates how to create a DataArray object in xarray, illustrating the use of data, coordinates, dimensions, attributes, and name properties. The snippet uses numpy and pandas to generate data and coordinate values. The primary dependency is xarray, with numpy and pandas needed for data and date range creation.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/data-structures.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport pandas as pd\nimport xarray as xr\n\nnp.random.seed(123456)\ndata = np.random.rand(4, 3)\nlocs = [\"IA\", \"IL\", \"IN\"]\ntimes = pd.date_range(\"2000-01-01\", periods=4)\nfoo = xr.DataArray(data, coords=[times, locs], dims=[\"time\", \"space\"])\nfoo\n```\n\n----------------------------------------\n\nTITLE: Creating Toy Weather Dataset with Xarray\nDESCRIPTION: Generates a synthetic weather dataset containing minimum and maximum temperatures over time across three locations. The data includes a seasonal cycle with random noise, structured as an xarray Dataset with time and location dimensions.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/examples/weather-data.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\nimport xarray as xr\n\nnp.random.seed(123)\n\nxr.set_options(display_style=\"html\")\n\ntimes = pd.date_range(\"2000-01-01\", \"2001-12-31\", name=\"time\")\nannual_cycle = np.sin(2 * np.pi * (times.dayofyear.values / 365.25 - 0.28))\n\nbase = 10 + 15 * annual_cycle.reshape(-1, 1)\ntmin_values = base + 3 * np.random.randn(annual_cycle.size, 3)\ntmax_values = base + 10 + 3 * np.random.randn(annual_cycle.size, 3)\n\nds = xr.Dataset(\n    {\n        \"tmin\": ((\"time\", \"location\"), tmin_values),\n        \"tmax\": ((\"time\", \"location\"), tmax_values),\n    },\n    {\"time\": times, \"location\": [\"IA\", \"IN\", \"IL\"]},\n)\n\nds\n```\n\n----------------------------------------\n\nTITLE: Combining isin() with where() for Conditional Selection in Xarray\nDESCRIPTION: Shows how to combine the isin() method with where() to conditionally select values from a DataArray based on membership in another array. This creates a powerful filtering mechanism.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/indexing.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nlookup = xr.DataArray([-1, -2, -3, -4, -5], dims=[\"x\"])\nda.where(lookup.isin([-2, -4]), drop=True)\n```\n\n----------------------------------------\n\nTITLE: Label-Based Indexing with xarray\nDESCRIPTION: Illustrates label-based indexing using the loc attribute in xarray. It selects subsets of data using date ranges and label values, highlighting xarray's speed and efficiency with pandas under the hood.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/indexing.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nda.loc[\"2000-01-01\":\"2000-01-02\", \"IA\"]\n```\n\n----------------------------------------\n\nTITLE: Loading a Saved netCDF File\nDESCRIPTION: This snippet illustrates how to load a previously saved netCDF file to create a new Dataset object. This is achieved using the open_dataset method, allowing access to the data saved on disk.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/io.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nds_disk = xr.open_dataset(\"saved_on_disk.nc\")\nds_disk\n```\n\n----------------------------------------\n\nTITLE: Applying Vectorized Function using xarray's apply_ufunc\nDESCRIPTION: This snippet demonstrates how to apply the vectorized function 'interp1d_np' to an xarray object 'air', using the 'apply_ufunc' method. The snippet handles dimensions appropriately, and includes exclusion of dimensions that should not change size. The input parameters are structured to facilitate proper dimensionality handling.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/examples/apply_ufunc_vectorize_1d.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ninterped = xr.apply_ufunc(\n    interp1d_np,  # first the function\n    air.isel(\n        lon=slice(3), time=slice(4)\n    ),  # now arguments in the order expected by 'interp1_np'\n    air.lat,\n    newlat,\n    input_core_dims=[['lat'], ['lat'], []],  # list with one entry per arg\n    output_core_dims=[['lat']],\n    exclude_dims=set((\"lat\",)),  # dimensions allowed to change size. Must be set!\n)\ninterped[\"lat\"] = newlat  # need to add this manually\nxr.testing.assert_allclose(expected.isel(time=0, lon=0), interped)\n```\n\n----------------------------------------\n\nTITLE: Writing Dataset to NetCDF/HDF5 File Using Xarray\nDESCRIPTION: Creates a sample dataset with random data and coordinates, then writes it to disk in NetCDF/HDF5 format using Xarray's to_netcdf method.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/io.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nds = xr.Dataset(\n    {\"foo\": ((\"x\", \"y\"), np.random.rand(4, 5))},\n    coords={\n        \"x\": [10, 20, 30, 40],\n        \"y\": pd.date_range(\"2000-01-01\", periods=5),\n        \"z\": (\"x\", list(\"abcd\")),\n    },\n)\n\nds.to_netcdf(\"saved_on_disk.h5\")\n```\n\n----------------------------------------\n\nTITLE: Complete Reusable Implementation with Optimized Numba Gufunc\nDESCRIPTION: This final implementation creates a reusable function for 1D interpolation with Xarray data. It uses the nopython=True option for maximum performance, wrapping the gufunc and apply_ufunc patterns into a clean, reusable function that handles dimension renaming and testing.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/examples/apply_ufunc_vectorize_1d.ipynb#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom numba import float64, guvectorize\n\n\n@guvectorize(\n    \"(float64[:], float64[:], float64[:], float64[:])\",\n    \"(n), (n), (m) -> (m)\",\n    nopython=True,\n)\ndef interp1d_np_gufunc(data, x, xi, out):\n    out[:] = np.interp(xi, x, data)\n\n\ndef xr_interp(data, dim, newdim):\n    interped = xr.apply_ufunc(\n        interp1d_np_gufunc,  # first the function\n        data,  # now arguments in the order expected by 'interp1_np'\n        data[dim],  # as above\n        newdim,  # as above\n        input_core_dims=[[dim], [dim], [\"__newdim__\"]],  # list with one entry per arg\n        output_core_dims=[[\"__newdim__\"]],  # returned data has one dimension\n        exclude_dims=set((dim,)),  # dimensions allowed to change size. Must be a set!\n        # vectorize=True,  # not needed since numba takes care of vectorizing\n        dask=\"parallelized\",\n        output_dtypes=[\n            data.dtype\n        ],  # one per output; could also be float or np.dtype(\"float64\")\n    ).rename({\"__newdim__\": dim})\n    interped[dim] = newdim  # need to add this manually\n\n    return interped\n\n\nxr.testing.assert_allclose(\n    expected.transpose(*interped.dims),\n    xr_interp(air.chunk({\"time\": 2, \"lon\": 2}), \"lat\", newlat),\n)\n```\n\n----------------------------------------\n\nTITLE: Broadcasting with DataArrays Based on Dimension Names\nDESCRIPTION: Shows how arithmetic operations intelligently broadcast based on dimension names, eliminating the need for dummy dimensions or matching dimension order.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/getting-started-guide/quick-overview.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\na = xr.DataArray(np.random.randn(3), [data.coords[\"y\"]])\nb = xr.DataArray(np.random.randn(4), dims=\"z\")\n\na\nb\n\na + b\n\n# Dimension order doesn't matter\ndata - data.T\n\n# Operations align on index labels\ndata[:-1] - data[:1]\n```\n\n----------------------------------------\n\nTITLE: Wrapping Custom Functions with apply_ufunc\nDESCRIPTION: Shows how to use apply_ufunc to wrap custom functions that support broadcasting and vectorization, allowing them to work with Xarray objects while handling alignment and coordinates.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/computation.rst#2025-04-21_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nsquared_error = lambda x, y: (x - y) ** 2\narr1 = xr.DataArray([0, 1, 2, 3], dims=\"x\")\nxr.apply_ufunc(squared_error, arr1, 1)\n```\n\n----------------------------------------\n\nTITLE: Creating Faceted Plots with Xarray\nDESCRIPTION: Demonstrates how to create faceted plots using Xarray, including simple examples with 2D data and more complex examples with 4D data. Shows usage of row and col arguments for faceting.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/plotting.rst#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nt = air.isel(time=slice(0, 365 * 4, 250))\nt.coords\n\n@savefig plot_facet_dataarray.png\ng_simple = t.plot(x=\"lon\", y=\"lat\", col=\"time\", col_wrap=3)\n\n@savefig plot_facet_dataarray_line.png\ng_simple_line = t.isel(lat=slice(0, None, 4)).plot(\n    x=\"lon\", hue=\"lat\", col=\"time\", col_wrap=3\n)\n\nt2 = t.isel(time=slice(0, 2))\nt4d = xr.concat([t2, t2 + 40], pd.Index([\"normal\", \"hot\"], name=\"fourth_dim\"))\n# This is a 4d array\nt4d.coords\n\n@savefig plot_facet_4d.png\nt4d.plot(x=\"lon\", y=\"lat\", col=\"time\", row=\"fourth_dim\")\n```\n\n----------------------------------------\n\nTITLE: Concatenating Xarray DataArrays\nDESCRIPTION: This snippet demonstrates how to concatenate Xarray DataArray objects along a specified dimension using the concat method. It shows how to manipulate slicing and indexing for both numpy-like and pandas-like approaches.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/combining.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nda = xr.DataArray(\\n    np.arange(6).reshape(2, 3), [(\"x\", [\"a\", \"b\"]), (\"y\", [10, 20, 30])]\\n)\\nda.isel(y=slice(0, 1))  # same as da[:, :1]\\n# This resembles how you would use np.concatenate:\\nxr.concat([da[:, :1], da[:, 1:]], dim=\"y\")\\n# For more friendly pandas-like indexing you can use:\\nxr.concat([da.isel(y=slice(0, 1)), da.isel(y=slice(1, None))], dim=\"y\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Weighted Seasonal Averages in Xarray\nDESCRIPTION: Outputs the resulting dataset containing the seasonally averaged data, with weights applied to account for varying month lengths.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/examples/monthly-means.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nds_weighted\n```\n\n----------------------------------------\n\nTITLE: Basic Vectorized Indexing with DataArray in Python\nDESCRIPTION: Demonstrates vectorized indexing on a DataArray using integer arrays. This allows selecting multiple elements at once in a manner similar to NumPy's advanced indexing.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/indexing.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nda = xr.DataArray(\n    np.arange(12).reshape((3, 4)),\n    dims=[\"x\", \"y\"],\n    coords={\"x\": [0, 1, 2], \"y\": [\"a\", \"b\", \"c\", \"d\"]},\n)\nda\nda[[0, 2, 2], [1, 3]]\n```\n\n----------------------------------------\n\nTITLE: Transforming Xarray Datasets\nDESCRIPTION: This code snippet demonstrates various methods for transforming xarray datasets, such as dropping variables and dimensions, and assigning new variables. It emphasizes the use of xarray's built-in methods to maintain clarity and performance.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/data-structures.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nds[\"temperature\"]\n    ds[\"temperature_double\"]\n    ds.drop_vars(\"temperature\")\n    ds.drop_dims(\"time\")\n    ds.assign(temperature2=2 * ds.temperature)\n    ds.pipe(func)\n```\n\n----------------------------------------\n\nTITLE: Opening Zarr Dataset with Xarray\nDESCRIPTION: This snippet illustrates how to open a Zarr dataset using Xarray, which then delegates array management to Dask for efficient handling of large datasets. The chunking strategy allows parallel access to chunks.\nDependencies: Xarray, Dask\nKey Parameters: path/to/directory.zarr - directory path of the Zarr storage\nExpected Inputs: Path to a compatible Zarr data store\nOutput: Dataset object with Dask-backed arrays\nConstraints: Requires Dask setup for parallel processing.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/dask.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nds = xr.open_zarr(\"path/to/directory.zarr\")\n```\n\n----------------------------------------\n\nTITLE: Xarray map_blocks example function requiring template\nDESCRIPTION: This example demonstrates a case where automatic inference fails in `map_blocks` because the function cannot be run on 0-shaped inputs. It showcases the use of the `template` kwarg to provide the expected result's structure, dimensions, shapes, and data variables to `map_blocks`.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/dask.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef func(da):\n        print(da.sizes)\n        return da.isel(time=[1])\n\n```\n\n----------------------------------------\n\nTITLE: Example of Interpolation on Real Data - Python\nDESCRIPTION: This snippet provides a real-world example of applying interpolation on a dataset, visualizing both raw and interpolated data.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/interpolation.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# Raw data\\nds = xr.tutorial.open_dataset(\"air_temperature\").isel(time=0)\\nfig, axes = plt.subplots(ncols=2, figsize=(10, 4))\\nds.air.plot(ax=axes[0])\\naxes[0].set_title(\"Raw data\")\\n\\n# Interpolated data\\nnew_lon = np.linspace(ds.lon[0].item(), ds.lon[-1].item(), ds.sizes[\"lon\"] * 4)\\nnew_lat = np.linspace(ds.lat[0].item(), ds.lat[-1].item(), ds.sizes[\"lat\"] * 4)\\ndsi = ds.interp(lat=new_lat, lon=new_lon)\\ndsi.air.plot(ax=axes[1])\\n@savefig interpolation_sample3.png width=8in\\naxes[1].set_title(\"Interpolated data\")\n```\n\n----------------------------------------\n\nTITLE: Dimension-based Aggregation Operations\nDESCRIPTION: Demonstrates how aggregation operations can use dimension names instead of axis numbers, which makes code more readable and less error-prone.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/getting-started-guide/quick-overview.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndata.mean(dim=\"x\")\n```\n\n----------------------------------------\n\nTITLE: Combining Along Multiple Dimensions with combine_nested\nDESCRIPTION: This snippet demonstrates using combine_nested to combine multiple DataArray objects along several dimensions while specifying their order, allowing for effective organization of parallelized simulation data.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/combining.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\narr = xr.DataArray(\\n    name=\"temperature\", data=np.random.randint(5, size=(2, 2)), dims=[\"x\", \"y\"]\\n)\\nds_grid = [[arr, arr], [arr, arr]]\\nxr.combine_nested(ds_grid, concat_dim=[\"x\", \"y\"])\n```\n\n----------------------------------------\n\nTITLE: Creating Various 2D Plot Types with Xarray\nDESCRIPTION: Shows different types of 2D plots available in Xarray, including contour, filled contour, and surface plots using the air temperature data.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/plotting.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n@savefig plotting_contour.png width=4in\nair2d.plot.contour()\n\n@savefig plotting_contourf.png width=4in\nair2d.plot.contourf()\n\n@savefig plotting_surface.png width=4in\n# transpose just to make the example look a bit nicer\nair2d.T.plot.surface()\n```\n\n----------------------------------------\n\nTITLE: Calculating Weighted Mean Temperature\nDESCRIPTION: Computes the area-weighted mean temperature across longitude and latitude dimensions using the weighted DataArray created in the previous step.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/examples/area_weighted_temperature.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nweighted_mean = air_weighted.mean((\"lon\", \"lat\"))\nweighted_mean\n```\n\n----------------------------------------\n\nTITLE: Merging with No Conflicts\nDESCRIPTION: This snippet illustrates how to merge datasets using the no_conflicts option in the compat argument, allowing non-overlapping coordinates to be merged.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/combining.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nds1 = xr.Dataset({\"a\": (\"x\", [10, 20, 30, np.nan])}, {\"x\": [1, 2, 3, 4]})\\nds2 = xr.Dataset({\"a\": (\"x\", [np.nan, 30, 40, 50])}, {\"x\": [2, 3, 4, 5]})\\nxr.merge([ds1, ds2], compat=\"no_conflicts\")\n```\n\n----------------------------------------\n\nTITLE: Arithmetic Operations on DataTree in Python\nDESCRIPTION: Shows how to perform arithmetic operations across all nodes in a DataTree, such as adding a scalar value to every dataset in the tree.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/hierarchical-data.rst#2025-04-21_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nsimpsons + 10\n```\n\n----------------------------------------\n\nTITLE: GroupBy Operations with DataArrays\nDESCRIPTION: Demonstrates grouped operations using a similar API to pandas, including calculating group means and applying custom functions to each group.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/getting-started-guide/quick-overview.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nlabels = xr.DataArray([\"E\", \"F\", \"E\"], [data.coords[\"y\"]], name=\"labels\")\nlabels\ndata.groupby(labels).mean(\"y\")\ndata.groupby(labels).map(lambda x: x - x.min())\n```\n\n----------------------------------------\n\nTITLE: Handling NaN Values during Interpolation - Python\nDESCRIPTION: This snippet showcases how to perform interpolation while dealing with NaN values in the data, illustrating methods for dropping or filling NaNs before proceeding.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/interpolation.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nda = xr.DataArray([0, 2, np.nan, 3, 3.25], dims=\"x\", coords={\"x\": range(5)})\\nda.interp(x=[0.5, 1.5, 2.5])\\nda.interp(x=[0.5, 1.5, 2.5], method=\"cubic\")\\n\\n# dropping NaNs\\ndropped = da.dropna(\"x\")\\ndropped.interp(x=[0.5, 1.5, 2.5], method=\"cubic\")\\n\\n# filling NaNs\\nfilled = da.interpolate_na(dim=\"x\")\\nfilled.interp(x=[0.5, 1.5, 2.5], method=\"cubic\")\n```\n\n----------------------------------------\n\nTITLE: Arithmetic Operations with Datasets\nDESCRIPTION: Shows how datasets support arithmetic operations by automatically looping over all data variables, and demonstrates various mathematical operations on datasets.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/computation.rst#2025-04-21_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nds = xr.Dataset(\n    {\n        \"x_and_y\": ((\"x\", \"y\"), np.random.randn(3, 5)),\n        \"x_only\": (\"x\", np.random.randn(3)),\n    },\n    coords=arr.coords,\n)\nds > 0\n\nds.mean(dim=\"x\")\nabs(ds)\n\nnp.sin(ds)\nds.map(np.sin)\n```\n\n----------------------------------------\n\nTITLE: Managing DataArray Coordinates in Python\nDESCRIPTION: Illustrates managing the coordinates within a DataArray object, showing how to access, set, and remove coordinates. This is crucial for dynamically updating data representations in an analysis pipeline. xarray is required for this functionality.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/data-structures.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfoo[\"ranking\"] = (\"space\", [1, 2, 3])\nfoo.coords\ndel foo[\"ranking\"]\nfoo.coords\n```\n\n----------------------------------------\n\nTITLE: Calculating Seasonal Weighted Averages in Xarray\nDESCRIPTION: Computes seasonal weights based on days in each month, verifies that weights sum to 1.0 for each season, and calculates the weighted seasonal average by multiplying the dataset by the weights and summing over the time dimension.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/examples/monthly-means.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Calculate the weights by grouping by 'time.season'.\nweights = (\n    month_length.groupby(\"time.season\") / month_length.groupby(\"time.season\").sum()\n)\n\n# Test that the sum of the weights for each season is 1.0\nnp.testing.assert_allclose(weights.groupby(\"time.season\").sum().values, np.ones(4))\n\n# Calculate the weighted average\nds_weighted = (ds * weights).groupby(\"time.season\").sum(dim=\"time\")\n```\n\n----------------------------------------\n\nTITLE: Datetime Indexing with Xarray - Python\nDESCRIPTION: This snippet demonstrates the ability to index a dataset in Xarray using datetime objects, both through string indexing and by using a slice object to select ranges of dates.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/time-series.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntime = pd.date_range(\"2000-01-01\", freq=\"h\", periods=365 * 24)\\nds = xr.Dataset({\"foo\": (\"time\", np.arange(365 * 24)), \"time\": time})\\nds.sel(time=\"2000-01\")\\nds.sel(time=slice(\"2000-06-01\", \"2000-06-10\"))\n```\n\n----------------------------------------\n\nTITLE: Creating a Weighted DataArray in Xarray\nDESCRIPTION: Creates a weighted DataArray object by applying the latitude-based weights to the temperature data using Xarray's weighted method.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/examples/area_weighted_temperature.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nair_weighted = air.weighted(weights)\nair_weighted\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable Function for Seasonal Averaging in Xarray\nDESCRIPTION: Encapsulates the seasonal averaging process into a reusable function that accepts any dataset with a time dimension. The function calculates proper weights based on days in each month and returns seasonally averaged data.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/examples/monthly-means.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Wrap it into a simple function\ndef season_mean(ds, calendar=\"standard\"):\n    # Make a DataArray with the number of days in each month, size = len(time)\n    month_length = ds.time.dt.days_in_month\n\n    # Calculate the weights by grouping by 'time.season'\n    weights = (\n        month_length.groupby(\"time.season\") / month_length.groupby(\"time.season\").sum()\n    )\n\n    # Test that the sum of the weights for each season is 1.0\n    np.testing.assert_allclose(weights.groupby(\"time.season\").sum().values, np.ones(4))\n\n    # Calculate the weighted average\n    return (ds * weights).groupby(\"time.season\").sum(dim=\"time\")\n```\n\n----------------------------------------\n\nTITLE: Explicit Broadcasting of DataArrays\nDESCRIPTION: Demonstrates how to explicitly broadcast Xarray DataArrays using the broadcast function, which returns arrays with expanded dimensions.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/computation.rst#2025-04-21_snippet_31\n\nLANGUAGE: python\nCODE:\n```\na2, b2 = xr.broadcast(a, b)\na2\nb2\n```\n\n----------------------------------------\n\nTITLE: Selecting Dataset Variables Using Coordinates\nDESCRIPTION: Shows how coordinates are shared across Dataset variables, allowing selection based on the same coordinate system.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/getting-started-guide/quick-overview.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nds.bar.sel(x=10)\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Function to Dataset Blocks using Xarray and Dask in Python\nDESCRIPTION: This snippet demonstrates how to use map_blocks to apply a custom function to dataset blocks. It defines a function 'func' that adds parameters to the input object, then applies this function to a dataset 'ds' using map_blocks.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/dask.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef func(obj, a, b=0):\n    return obj + a + b\n\n\nmapped = ds.map_blocks(func, args=[10], kwargs={\"b\": 10})\nexpected = ds + 10 + 10\nmapped.identical(expected)\n```\n\n----------------------------------------\n\nTITLE: Dataset Indexing in xarray\nDESCRIPTION: Covers how to apply indexing methods across an entire dataset in xarray. It showcases retrieving new datasets through dimension name indexing both with isel and sel methods.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/indexing.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nda = xr.DataArray(\n    np.random.rand(4, 3),\n    [\n        (\"time\", pd.date_range(\"2000-01-01\", periods=4)),\n        (\"space\", [\"IA\", \"IL\", \"IN\"]),\n    ],\n)\nds = da.to_dataset(name=\"foo\")\nds.isel(space=[0], time=[0])\nds.sel(time=\"2000-01-01\")\n```\n\nLANGUAGE: python\nCODE:\n```\nds[dict(space=[0], time=[0])]\nds.loc[dict(time=\"2000-01-01\")]\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Between DataArrays and Datasets\nDESCRIPTION: Demonstrates broadcasting in binary arithmetic between DataArrays and Datasets, and between two Datasets which matches data variables of the same name.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/computation.rst#2025-04-21_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nds + arr\n\nds2 = xr.Dataset({\"x_and_y\": 0, \"x_only\": 100})\nds - ds2\n```\n\n----------------------------------------\n\nTITLE: Applying Gufunc with Xarray's apply_ufunc and Dask Integration\nDESCRIPTION: This code applies the guvectorize-decorated interpolation function to Xarray data using apply_ufunc. It demonstrates how to work with chunked dask arrays, specify input and output dimensions, and handle dimension renaming in the result.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/examples/apply_ufunc_vectorize_1d.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ninterped = xr.apply_ufunc(\n    interp1d_np_gufunc,  # first the function\n    air.chunk(\n        {\"time\": 2, \"lon\": 2}\n    ),  # now arguments in the order expected by 'interp1_np'\n    air.lat,  # as above\n    newlat,  # as above\n    input_core_dims=[[\"lat\"], [\"lat\"], [\"new_lat\"]],  # list with one entry per arg\n    output_core_dims=[[\"new_lat\"]],  # returned data has one dimension\n    exclude_dims=set((\"lat\",)),  # dimensions allowed to change size. Must be a set!\n    # vectorize=True,  # not needed since numba takes care of vectorizing\n    dask=\"parallelized\",\n    output_dtypes=[air.dtype],  # one per output\n).rename({\"new_lat\": \"lat\"})\ninterped[\"lat\"] = newlat  # need to add this manually\nxr.testing.assert_allclose(expected.transpose(*interped.dims), interped)\n```\n\n----------------------------------------\n\nTITLE: Setting and Resetting Index in Xarray with Python\nDESCRIPTION: Covers the creation, manipulation, and restoration of multi-indexes from dimensions using set_index, reset_index, and reorder_levels in Xarray. Particularly useful for indexing and serialization of multidimensional data.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/reshaping.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nda = xr.DataArray(\n    np.random.rand(4),\n    coords={\n        \"band\": (\"x\", [\"a\", \"a\", \"b\", \"b\"]),\n        \"wavenumber\": (\"x\", np.linspace(200, 400, 4)),\n    },\n    dims=\"x\",\n)\nda\nmda = da.set_index(x=[\"band\", \"wavenumber\"])\nmda\n```\n\nLANGUAGE: python\nCODE:\n```\nmda.sel(band=\"a\")\n```\n\nLANGUAGE: python\nCODE:\n```\nmda.reset_index(\"x\")\n```\n\nLANGUAGE: python\nCODE:\n```\nmda.reorder_levels(x=[\"wavenumber\", \"band\"])\n```\n\nLANGUAGE: python\nCODE:\n```\narray = xr.DataArray([1, 2, 3], dims=\"x\")\narray\narray[\"c\"] = (\"x\", [\"a\", \"b\", \"c\"])\narray.set_index(x=\"c\")\narray = array.set_index(x=\"c\")\narray = array.reset_index(\"x\", drop=True)\n```\n\n----------------------------------------\n\nTITLE: Nearest-Neighbor Selection with Vectorized Indexing\nDESCRIPTION: Shows how to use vectorized indexing to select data from the nearest grid cells to specified points, which is useful for extracting model data at observation locations.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/indexing.rst#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nds = xr.tutorial.open_dataset(\"air_temperature\")\n\n# Define target latitude and longitude (where weather stations might be)\ntarget_lon = xr.DataArray([200, 201, 202, 205], dims=\"points\")\ntarget_lat = xr.DataArray([31, 41, 42, 42], dims=\"points\")\n\n# Retrieve data at the grid cells nearest to the target latitudes and longitudes\nda = ds[\"air\"].sel(lon=target_lon, lat=target_lat, method=\"nearest\")\nda\n```\n\n----------------------------------------\n\nTITLE: Simple 1D Plotting with Xarray\nDESCRIPTION: This snippet demonstrates how to create a simple 1D plot using the DataArray.plot() method, leveraging Xarray's built-in plotting functionality to visualize air temperature data at a specific latitude and longitude.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/plotting.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nair1d = air.isel(lat=10, lon=10)\n@savefig plotting_1d_simple.png width=4in\nair1d.plot()\n```\n\n----------------------------------------\n\nTITLE: Extracting and Plotting Location-Specific Time Series\nDESCRIPTION: Demonstrates how to extract a time series for a specific geographic location (London) using the sel() method with longitude and latitude coordinates, then plot the resulting time series data.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/examples/ERA5-GRIB-example.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nds.t2m.sel(longitude=0, latitude=51.5).plot()\nplt.title(\"ERA5 - London 2m temperature March 2019\")\n```\n\n----------------------------------------\n\nTITLE: Defining DataArray with Tuple Coordinates in Python\nDESCRIPTION: This snippet demonstrates defining a DataArray with coordinates specified as a list of tuples, where each tuple contains a dimension name and a corresponding coordinate array. This setup is useful for associating data points with specific labels along each dimension.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/data-structures.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nxr.DataArray(data, coords=[(\"time\", times), (\"space\", locs)])\n```\n\n----------------------------------------\n\nTITLE: Reordering Dimensions After Broadcasting\nDESCRIPTION: Shows how dimensions are reordered after broadcasting operations in Xarray, maintaining the order in which dimensions first appeared, and demonstrates subtraction between an array and its transpose.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/computation.rst#2025-04-21_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nc = xr.DataArray(np.arange(6).reshape(3, 2), [b[\"y\"], a[\"x\"]])\nc\na + c\n\nc - c.T\n```\n\n----------------------------------------\n\nTITLE: Applying Function to Each Group in Xarray Python\nDESCRIPTION: Shows how to apply a custom function to each group using the map method in Xarray. Requires a GroupBy object and a function to be applied. The example uses a standardize function that normalizes group data, returning a modified DataArray.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/groupby.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef standardize(x):\n    return (x - x.mean()) / x.std()\n\narr.groupby(\"letters\").map(standardize)\n```\n\n----------------------------------------\n\nTITLE: Different Ways to Index a DataArray\nDESCRIPTION: Four equivalent methods to index a DataArray: positional indexing, pandas-like location indexing, dimension-based integer indexing, and dimension-based label indexing.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/getting-started-guide/quick-overview.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# positional and by integer label, like numpy\ndata[0, :]\n\n# loc or \"location\": positional and coordinate label, like pandas\ndata.loc[10]\n\n# isel or \"integer select\":  by dimension name and integer label\ndata.isel(x=0)\n\n# sel or \"select\": by dimension name and coordinate label\ndata.sel(x=10)\n```\n\n----------------------------------------\n\nTITLE: Converting DataFrame to xarray Dataset\nDESCRIPTION: This code snippet illustrates how to create an xarray Dataset from a pandas DataFrame using the `from_dataframe()` method. Notably, after conversion, the Dataset's variables will have expanded dimensions due to the MultiIndex nature of the DataFrame.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/pandas.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nxr.Dataset.from_dataframe(df)\n```\n\n----------------------------------------\n\nTITLE: Multi-dimensional Interpolation using Xarray - Python\nDESCRIPTION: This snippet demonstrates how to perform multi-dimensional interpolation by accepting multiple coordinates for interpolation.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/interpolation.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# label lookup\\nda.sel(time=2, space=0.1)\\n\\n# interpolation\\nda.interp(time=2.5, space=0.15)\n```\n\n----------------------------------------\n\nTITLE: Fitting Exponential Functions to Data in Python with Xarray\nDESCRIPTION: Demonstrates how to fit complex functions using the curvefit method which utilizes scipy.optimize.curve_fit.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/computation.rst#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\ndef exponential(x, a, xc):\n    return np.exp((x - xc) / a)\n\n\nx = np.arange(-5, 5, 0.1)\nt = np.arange(-5, 5, 0.1)\nX, T = np.meshgrid(x, t)\nZ1 = np.random.uniform(low=-5, high=5, size=X.shape)\nZ2 = exponential(Z1, 3, X)\nZ3 = exponential(Z1, 1, -X)\n\nds = xr.Dataset(\n    data_vars=dict(\n        var1=([\"t\", \"x\"], Z1), var2=([\"t\", \"x\"], Z2), var3=([\"t\", \"x\"], Z3)\n    ),\n    coords={\"t\": t, \"x\": x},\n)\nds[[\"var2\", \"var3\"]].curvefit(\n    coords=ds.var1,\n    func=exponential,\n    reduce_dims=\"t\",\n    bounds={\"a\": (0.5, 5), \"xc\": (-5, 5)},\n)\n```\n\n----------------------------------------\n\nTITLE: Calculating Weighted Quantile in Python with Xarray\nDESCRIPTION: Shows how to compute a weighted quantile (median in this case) along a dimension.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/computation.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nweighted_prec.quantile(q=0.5, dim=\"month\")\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Geo Accessor Class\nDESCRIPTION: Example implementation of a custom 'geo' accessor class for adding geography-specific functionality to xarray Dataset and DataArray objects. Shows the registration of accessor using decorators and implementation of custom methods.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/internals/extending-xarray.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Dataset:\n    ...\n\n    @property\n    def geo(self):\n        return GeoAccessor(self)\n```\n\n----------------------------------------\n\nTITLE: Assigning Values with Vectorized Indexing in DataArray\nDESCRIPTION: Demonstrates assigning values to DataArray elements using vectorized indexing with both single indices and DataArray indexers. Shows how broadcasting works during assignment.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/indexing.rst#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nda = xr.DataArray(\n    np.arange(12).reshape((3, 4)),\n    dims=[\"x\", \"y\"],\n    coords={\"x\": [0, 1, 2], \"y\": [\"a\", \"b\", \"c\", \"d\"]},\n)\nda\nda[0] = -1  # assignment with broadcasting\nda\n\nind_x = xr.DataArray([0, 1], dims=[\"x\"])\nind_y = xr.DataArray([0, 1], dims=[\"y\"])\nda[ind_x, ind_y] = -2  # assign -2 to (ix, iy) = (0, 0) and (1, 1)\nda\n\nda[ind_x, ind_y] += 100  # increment is also possible\nda\n```\n\n----------------------------------------\n\nTITLE: Resetting and Setting Coordinates in Xarray Dataset\nDESCRIPTION: Demonstrates how to convert between data and coordinates using reset_coords() and set_coords() methods. Also shows how to reset coordinates while dropping them from the dataset.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/data-structures.rst#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nds.reset_coords()\nds.set_coords([\"temperature\", \"precipitation\"])\nds[\"temperature\"].reset_coords(drop=True)\n```\n\n----------------------------------------\n\nTITLE: Using DataArray Objects as Indexers for Orthogonal Indexing\nDESCRIPTION: Shows how to use DataArray objects as indexers, where the dimensions of the result are given by the union of the indexers' dimensions. This enables more flexible selection patterns.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/indexing.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nind_x = xr.DataArray([0, 1], dims=[\"x\"])\nind_y = xr.DataArray([0, 1], dims=[\"y\"])\nda[ind_x, ind_y]  # orthogonal indexing\n```\n\n----------------------------------------\n\nTITLE: Binning Multidimensional Data in Xarray Python\nDESCRIPTION: Demonstrates coarse-binning of multidimensional data using groupby_bins in Xarray. Requires a DataArray and predefined bin edges. The example bins 'lon' values and aggregates with summation.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/groupby.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nda.groupby_bins(\"lon\", [0, 45, 50]).sum()\n```\n\n----------------------------------------\n\nTITLE: Performing Exponential Moving Average in Python with Xarray\nDESCRIPTION: Shows how to compute an exponential moving average using the rolling_exp method, which requires the numbagg package.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/computation.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\narr.rolling_exp(y=3).mean()\n```\n\n----------------------------------------\n\nTITLE: Creating DataArray with Default Arguments in Python\nDESCRIPTION: Illustrates the creation of a DataArray with minimal arguments, only specifying the data parameter. The snippet shows how xarray assigns default dimension names when not explicitly provided.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/data-structures.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nxr.DataArray(data)\n```\n\n----------------------------------------\n\nTITLE: Creating a 2D Plot with Xarray\nDESCRIPTION: Demonstrates the default 2D plotting method in Xarray using pcolormesh. Selects a single time slice from the air temperature dataset and plots it.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/plotting.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nair2d = air.isel(time=500)\n\n@savefig 2d_simple.png width=4in\nair2d.plot()\n```\n\n----------------------------------------\n\nTITLE: Opening a netCDF File with Xarray\nDESCRIPTION: This snippet demonstrates how to open a netCDF file using Xarray's open_dataset method. The engine specified defines how the data is interpreted.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/io.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nxr.open_dataset(\"example.nc\", engine=\"netcdf4\")\n```\n\n----------------------------------------\n\nTITLE: Resampling Time Series Data in Xarray - Python\nDESCRIPTION: This snippet illustrates how to downsample a dataset from an hourly to a 6-hourly resolution using Xarray's resample method, demonstrating its similarity to the Pandas resample function.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/time-series.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nds.resample(time=\"6h\").mean()\\nds.resample(time=\"1h\").nearest(tolerance=\"1h\")\n```\n\n----------------------------------------\n\nTITLE: Calculating Weighted Variance in Python with Xarray\nDESCRIPTION: Demonstrates how to compute the weighted variance using the sum_of_squares method.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/computation.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nweighted_var = weighted_prec.sum_of_squares() / weights.sum()\nweighted_var\n```\n\n----------------------------------------\n\nTITLE: Nearest Neighbor Lookups with xarray\nDESCRIPTION: Uses nearest neighbor lookup methods in xarray with the sel and reindex methods. Demonstrates enabling inexact matches via the method and tolerance parameters.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/indexing.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nda = xr.DataArray([1, 2, 3], [(\"x\", [0, 1, 2])])\nda.sel(x=[1.1, 1.9], method=\"nearest\")\nda.sel(x=0.1, method=\"backfill\")\nda.reindex(x=[0.5, 1, 1.5, 2, 2.5], method=\"pad\")\n```\n\n----------------------------------------\n\nTITLE: Applying Unvectorized Function with apply_ufunc\nDESCRIPTION: This snippet demonstrates the iterative process of using xarray's apply_ufunc to apply the custom interpolation function to the dataset, explaining the purpose of each argument.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/examples/apply_ufunc_vectorize_1d.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nxr.apply_ufunc(\n    interp1d_np,  # first the function\n    air.isel(time=0, lon=0),  # now arguments in the order expected by 'interp1_np'\n    air.lat,\n    newlat,\n    input_core_dims=[[\"lat\"], [\"lat\"], []],  # list with one entry per arg\n    output_core_dims=[[\"lat\"]],\n    exclude_dims=set((\"lat\",)),  # dimensions allowed to change size. Must be set!\n)\n```\n\n----------------------------------------\n\nTITLE: Scatter Plot with Dataset Variables in Python\nDESCRIPTION: Creates various scatter plots using xarray Dataset variables with options for coloring by variable value and adjusting marker sizes.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/plotting.rst#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nds.plot.scatter(x=\"A\", y=\"B\", hue=\"w\")\n\nds.plot.scatter(x=\"A\", y=\"B\", hue=\"y\", markersize=\"z\")\n\nds.plot.scatter(x=\"A\", y=\"B\", z=\"z\", hue=\"y\", markersize=\"x\")\n```\n\n----------------------------------------\n\nTITLE: Spearman Correlation Calculation with NumPy and Xarray\nDESCRIPTION: This code defines functions for calculating Spearman's rank-correlation coefficient using NumPy and Xarray's `apply_ufunc`. It includes helper functions for covariance and Pearson correlation. The `spearman_correlation` function wraps `spearman_correlation_gufunc` with `xr.apply_ufunc` for parallel computation on Xarray DataArrays.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/dask.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport xarray as xr\nimport bottleneck\n\n\n    def covariance_gufunc(x, y):\n        return (\n            (x - x.mean(axis=-1, keepdims=True)) * (y - y.mean(axis=-1, keepdims=True))\n        ).mean(axis=-1)\n\n\n    def pearson_correlation_gufunc(x, y):\n        return covariance_gufunc(x, y) / (x.std(axis=-1) * y.std(axis=-1))\n\n\n    def spearman_correlation_gufunc(x, y):\n        x_ranks = bottleneck.rankdata(x, axis=-1)\n        y_ranks = bottleneck.rankdata(y, axis=-1)\n        return pearson_correlation_gufunc(x_ranks, y_ranks)\n\n\n    def spearman_correlation(x, y, dim):\n        return xr.apply_ufunc(\n            spearman_correlation_gufunc,\n            x,\n            y,\n            input_core_dims=[[dim], [dim]],\n            dask=\"parallelized\",\n            output_dtypes=[float],\n        )\n```\n\n----------------------------------------\n\nTITLE: Saving a Dataset to Disk as netCDF\nDESCRIPTION: This snippet shows how to create a Dataset and save it to a netCDF file on disk using the to_netcdf method. By default, the dataset is saved as netCDF4 format.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/io.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nds = xr.Dataset(\n    {\"foo\": ((\"x\", \"y\"), np.random.rand(4, 5))},\n    coords={\n        \"x\": [10, 20, 30, 40],\n        \"y\": pd.date_range(\"2000-01-01\", periods=5),\n        \"z\": (\"x\", list(\"abcd\")),\n    },\n)\n\nds.to_netcdf(\"saved_on_disk.nc\")\n```\n\n----------------------------------------\n\nTITLE: Label-based Pointwise Indexing with sel() Method\nDESCRIPTION: Demonstrates label-based pointwise indexing using the sel() method with DataArray objects as indexers, which allows selecting specific combinations of labels with complex patterns.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/indexing.rst#2025-04-21_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nda = xr.DataArray(\n    np.random.rand(4, 3),\n    [\n        (\"time\", pd.date_range(\"2000-01-01\", periods=4)),\n        (\"space\", [\"IA\", \"IL\", \"IN\"]),\n    ],\n)\ntimes = xr.DataArray(\n    pd.to_datetime([\"2000-01-03\", \"2000-01-02\", \"2000-01-01\"]), dims=\"new_time\"\n)\nda.sel(space=xr.DataArray([\"IA\", \"IL\", \"IN\"], dims=[\"new_time\"]), time=times)\n```\n\n----------------------------------------\n\nTITLE: Inspecting xarray DataTree with data and children\nDESCRIPTION: Creates a DataTree node that contains both data (Dataset) and children (DataTree nodes), then prints the node. This demonstrates how keys lists both the children and the data variables.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/hierarchical-data.rst#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n\n    dt = xr.DataTree(\n        dataset=xr.Dataset({\"foo\": 0, \"bar\": 1}),\n        children={\"a\": xr.DataTree(), \"b\": xr.DataTree()},\n    )\n    print(dt)\n```\n\n----------------------------------------\n\nTITLE: Creating Area Weights Based on Latitude\nDESCRIPTION: Calculates grid cell area weights using the cosine of latitude in degrees. This accounts for the fact that grid cells in a regular lat-lon grid have decreasing area as latitude increases toward the poles.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/examples/area_weighted_temperature.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nweights = np.cos(np.deg2rad(air.lat))\nweights.name = \"weights\"\nweights\n```\n\n----------------------------------------\n\nTITLE: Creating and Reindexing Subset DataArrays in Python with Xarray\nDESCRIPTION: Shows how to create subset DataArrays and use the reindex_like method to align them. This method is useful for selecting specific values or expanding to a larger shape with NaN fill values.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/indexing.rst#2025-04-21_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nfoo = da.rename(\"foo\")\nbaz = (10 * da[:2, :2]).rename(\"baz\")\nbaz\n\nfoo.reindex_like(baz)\n\nbaz.reindex_like(foo)\n```\n\n----------------------------------------\n\nTITLE: Creating MultiIndex Coordinate in Xarray\nDESCRIPTION: Shows how to create a DataArray with a pandas MultiIndex coordinate, which allows for multi-level indexing and access to individual levels as virtual coordinates.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/data-structures.rst#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nmidx = pd.MultiIndex.from_arrays(\n    [[\"R\", \"R\", \"V\", \"V\"], [0.1, 0.2, 0.7, 0.9]], names=(\"band\", \"wn\")\n)\nmda = xr.DataArray(np.random.rand(4), coords={\"spec\": midx}, dims=\"spec\")\nmda\n```\n\n----------------------------------------\n\nTITLE: Calculating Weighted Sum in Python with Xarray\nDESCRIPTION: Shows how to compute the weighted sum of values in a DataArray using the weighted method.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/computation.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nweighted_prec.sum()\n```\n\n----------------------------------------\n\nTITLE: Assigning Values using loc() Method with Dictionary-based Indexing\nDESCRIPTION: Demonstrates how to assign values to specific locations in a DataArray using loc() with dictionary-based indexing. This allows precise modification of array elements.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/indexing.rst#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nds = xr.tutorial.open_dataset(\"air_temperature\")\n\n# add an empty 2D dataarray\nds[\"empty\"] = xr.full_like(ds.air.mean(\"time\"), fill_value=0)\n\n# modify one grid point using loc()\nds[\"empty\"].loc[dict(lon=260, lat=30)] = 100\n\n# modify a 2D region using loc()\nlc = ds.coords[\"lon\"]\nla = ds.coords[\"lat\"]\nds[\"empty\"].loc[\n    dict(lon=lc[(lc > 220) & (lc < 260)], lat=la[(la > 20) & (la < 60)])\n] = 100\n```\n\n----------------------------------------\n\nTITLE: Using isin() Method with DataArray in Python\nDESCRIPTION: Demonstrates how to use the isin() method to check which elements of a DataArray are contained in a list of values. This is useful for filtering data based on value membership.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/indexing.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nda = xr.DataArray([1, 2, 3, 4, 5], dims=[\"x\"])\nda.isin([2, 4])\n```\n\n----------------------------------------\n\nTITLE: Accessing DataArray Properties\nDESCRIPTION: Shows how to access core properties of a DataArray including the underlying numpy array, dimension names, coordinates, and attributes.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/getting-started-guide/quick-overview.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# like in pandas, values is a numpy array that you can modify in-place\ndata.values\ndata.dims\ndata.coords\n# you can use this dictionary to store arbitrary metadata\ndata.attrs\n```\n\n----------------------------------------\n\nTITLE: Reading Zarr Store Using Xarray\nDESCRIPTION: Shows how to read back a Zarr dataset that was previously saved using Xarray's open_zarr function.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/io.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nds_zarr = xr.open_zarr(\"path/to/directory.zarr\")\nds_zarr\n```\n\n----------------------------------------\n\nTITLE: Persisting Data with Dask and Xarray\nDESCRIPTION: This snippet shows how to persist a computed dataset in memory using Dask's persist method, reducing future computation times on the same data. It’s very effective when working in distributed environments.\nDependencies: Xarray, Dask\nKey Parameters: ds - the dataset to persist in memory\nExpected Outputs: A persisted dataset\nConstraint: Requires a functioning Dask environment to execute tasks across the cluster.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/dask.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nds = ds.persist()\n```\n\n----------------------------------------\n\nTITLE: Accessing Dataset Variables and Attributes\nDESCRIPTION: This code snippet shows how to access variables and attributes stored in an xarray Dataset. It highlights the usage of dictionary-like methods to interact with the dataset's data and coordinate variables.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/data-structures.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n\"temperature\" in ds\n    ds[\"temperature\"]\n    ds.data_vars\n    ds.coords\n    ds.attrs\n    ds.attrs[\"title\"] = \"example attribute\"\n```\n\n----------------------------------------\n\nTITLE: Masking with where Method in xarray\nDESCRIPTION: Demonstrates the use of the where method for masking elements in xarray objects based on a condition, maintaining original data shape and following broadcasting rules.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/indexing.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nda = xr.DataArray(np.arange(16).reshape(4, 4), dims=[\"x\", \"y\"])\nda.where(da.x + da.y < 4)\n```\n\nLANGUAGE: python\nCODE:\n```\nda.where(da.y < 2)\n```\n\nLANGUAGE: python\nCODE:\n```\nda.where(da.y < 2, drop=True)\n```\n\n----------------------------------------\n\nTITLE: Reading CSV Files with Xarray\nDESCRIPTION: This snippet illustrates how to use the built-in Pandas library with Xarray to read a CSV file. It includes converting the DataFrame to an xarray Dataset after loading the data.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/getting-started-guide/faq.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport xarray as xr\nimport pandas as pd\n\n# Load CSV file into pandas DataFrame using the \"c\" engine\ndf = pd.read_csv(\"your_file.csv\", engine=\"c\")\n\n# Convert `:py:func:pandas` DataFrame to xarray.Dataset\nds = xr.Dataset.from_dataframe(df)\n\n# Prints the resulting xarray dataset\nprint(ds)\n```\n\n----------------------------------------\n\nTITLE: Constructing Advanced Rolling Window Operations in Python with Xarray\nDESCRIPTION: Demonstrates how to use the construct method for more advanced rolling operations with stride control.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/computation.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# rolling with 2-point stride\nrolling_da = r.construct(x=\"x_win\", y=\"y_win\", stride=2)\nrolling_da\nrolling_da.mean([\"x_win\", \"y_win\"], skipna=False)\n```\n\n----------------------------------------\n\nTITLE: Adding Plots to Existing Axes\nDESCRIPTION: This snippet illustrates how to add multiple plots to existing matplotlib axes, allowing users to visualize different characteristics of the same dataset side by side in a single figure.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/plotting.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfig, axs = plt.subplots(ncols=2)\nair1d.plot(ax=axs[0])\nair1d.plot.hist(ax=axs[1])\nplt.tight_layout()\n```\n\n----------------------------------------\n\nTITLE: Creating 2D DataArray with Gaussian Functions and Curve Fitting\nDESCRIPTION: Creates a 2D DataArray with two Gaussian functions plus random noise, then performs curve fitting using the curvefit method with a multi-peak function.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/computation.rst#2025-04-21_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nZ = gaussian_2d((X, Y), 3, 1, 1, 2, 1) + gaussian_2d((X, Y), 2, -1, -2, 1, 1)\nZ += np.random.normal(scale=0.1, size=Z.shape)\n\nda = xr.DataArray(Z, dims=[\"y\", \"x\"], coords={\"y\": y, \"x\": x})\nda.curvefit(\n    coords=[\"x\", \"y\"],\n    func=multi_peak,\n    param_names=names,\n    kwargs={\"maxfev\": 10000},\n)\n```\n\n----------------------------------------\n\nTITLE: Opening and Reading NetCDF Files with Xarray\nDESCRIPTION: This snippet demonstrates reading netCDF files with Xarray, specifying chunk sizes and enabling parallel operations. The approach balances I/O operations and memory efficiency when working with extensive datasets.\nDependencies: Xarray, potential netCDF backend (e.g., h5netcdf)\nKey Parameters: example-data.nc - file path to the netCDF file, chunks - specifying chunk sizes for parallel processing\nExpected Output: Loaded Dataset with defined chunks\nConstraints: For optimal performance, consider using h5netcdf engine when reading multiple netCDF files.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/dask.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nds = xr.open_dataset(\"example-data.nc\", chunks={\"time\": 10})\n\nxr.open_mfdataset('my/files/*.nc', parallel=True)\n```\n\n----------------------------------------\n\nTITLE: Cartographic Plotting with Xarray and Cartopy in Python\nDESCRIPTION: Demonstrates creation of map-based visualizations using xarray with Cartopy projections, including single plots and faceted displays.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/plotting.rst#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nimport cartopy.crs as ccrs\n\nair = xr.tutorial.open_dataset(\"air_temperature\").air\n\np = air.isel(time=0).plot(\n    subplot_kws=dict(projection=ccrs.Orthographic(-80, 35), facecolor=\"gray\"),\n    transform=ccrs.PlateCarree(),\n)\np.axes.set_global()\np.axes.coastlines()\n```\n\n----------------------------------------\n\nTITLE: Interpolating with Array-like Coordinates - Python\nDESCRIPTION: This snippet shows how to interpolate using array-like coordinates for label lookups and multiple interpolated results.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/interpolation.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# label lookup\\nda.sel(time=[2, 3])\\n\\n# interpolation\\nda.interp(time=[2.5, 3.5])\n```\n\n----------------------------------------\n\nTITLE: Using concat to Create a New Dimension\nDESCRIPTION: This snippet shows how to create a new dimension while concatenating DataArray objects. It demonstrates how to stack lower-dimensional arrays utilizing the concat method.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/combining.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nda.sel(x=\"a\")\\nxr.concat([da.isel(x=0), da.isel(x=1)], \"x\")\n```\n\n----------------------------------------\n\nTITLE: Performing NumPy-like Computations with DataArrays\nDESCRIPTION: Shows how DataArrays support numpy-like mathematical operations, including arithmetic, transcendental functions, transposition, and reduction operations.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/getting-started-guide/quick-overview.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndata + 10\nnp.sin(data)\n# transpose\ndata.T\ndata.sum()\n```\n\n----------------------------------------\n\nTITLE: Dropping Labels and Dimensions with xarray\nDESCRIPTION: Illustrates how to drop index labels and dimensions with drop_sel and drop_dims methods in xarray, allowing for variables with these dimensions to be removed as well.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/indexing.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nds.drop_sel(space=[\"IN\", \"IL\"])\nds.drop_dims(\"time\")\n```\n\n----------------------------------------\n\nTITLE: Customizing Axes Direction in Xarray Line Plot\nDESCRIPTION: Creates a line plot of air temperature data, demonstrating the use of xincrease and yincrease kwargs to control axes direction. Also selects specific time and longitude slices from the dataset.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/plotting.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n@savefig plotting_example_xincrease_yincrease_kwarg.png\nair.isel(time=10, lon=[10, 11]).plot.line(\n    y=\"lat\", hue=\"lon\", xincrease=False, yincrease=False\n)\n```\n\n----------------------------------------\n\nTITLE: Updating and Modifying Xarray Dataset\nDESCRIPTION: This snippet illustrates how to create a new xarray Dataset and add multiple variables and coordinates using traditional dictionary syntax. It also demonstrates the copy method for dataset duplication.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/data-structures.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nds = xr.Dataset()\n    ds[\"temperature\"] = ((\"loc\", \"instrument\", \"time\"), temperature)\n    ds[\"temperature_double\"] = ((\"loc\", \"instrument\", \"time\"), temperature * 2)\n    ds[\"precipitation\"] = ((\"loc\", \"instrument\", \"time\"), precipitation)\n    ds.coords[\"lat\"] = ((\"loc\",), lat)\n    ds.coords[\"lon\"] = ((\"loc\",), lon)\n    ds.coords[\"time\"] = pd.date_range(\"2014-09-06\", periods=4)\n    ds.coords[\"reference_time\"] = pd.Timestamp(\"2014-09-05\")\n```\n\n----------------------------------------\n\nTITLE: Fitting Polynomials to Data in Python with Xarray\nDESCRIPTION: Demonstrates how to perform polynomial regression using least-squares method in Xarray.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/computation.rst#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nx = xr.DataArray(np.arange(10), dims=[\"x\"], name=\"x\")\na = xr.DataArray(3 + 4 * x, dims=[\"x\"], coords={\"x\": x})\nout = a.polyfit(dim=\"x\", deg=1, full=True)\nout\n```\n\n----------------------------------------\n\nTITLE: Controlling Colorbar Properties in Xarray Plots\nDESCRIPTION: Demonstrates how to customize colorbar properties in Xarray plots using the cbar_kwargs parameter. Shows examples of specifying tick locations and using proportional spacing.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/examples/visualization_gallery.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nair2d = ds.air.isel(time=500)\n\n# Prepare the figure\nf, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(14, 4))\n\n# Irregular levels to illustrate the use of a proportional colorbar\nlevels = [245, 250, 255, 260, 265, 270, 275, 280, 285, 290, 310, 340]\n\n# Plot data\nair2d.plot(ax=ax1, levels=levels)\nair2d.plot(ax=ax2, levels=levels, cbar_kwargs={\"ticks\": levels})\nair2d.plot(\n    ax=ax3, levels=levels, cbar_kwargs={\"ticks\": levels, \"spacing\": \"proportional\"}\n)\n\n# Show plots\nplt.tight_layout()\n```\n\n----------------------------------------\n\nTITLE: Creating DateTime Arrays using Xarray - Python\nDESCRIPTION: This snippet shows how to create datetime arrays using Xarray's date_range method. It is similar in functionality to Pandas' date_range but specifically tailored for use with Xarray.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/time-series.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nxr.date_range(\"2000-01-01\", periods=365)\\nxr.date_range(\"2000-01-01\", periods=365, unit=\"s\")\n```\n\n----------------------------------------\n\nTITLE: Xarray map_blocks example specifying template\nDESCRIPTION: This code demonstrates how to provide a template to `xr.map_blocks` function. A template DataArray is created to resemble the desired output structure, which is then passed to `map_blocks` via the `template` parameter, resolving the need for automatic inference of the output structure.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/dask.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ntemplate = ds.temperature.isel(time=[1, 11, 21])\nmapped = xr.map_blocks(func, ds.temperature, template=template)\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Groups in Xarray Python\nDESCRIPTION: Shows how to iterate over groups in a GroupBy object in Xarray as label, group pairs. This example assumes a GroupBy object is available and illustrates retrieving each group and its label.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/groupby.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nlist(ds.groupby(\"letters\"))\n```\n\n----------------------------------------\n\nTITLE: Loading ROMS Dataset with Xarray\nDESCRIPTION: Opens a ROMS example dataset using xarray's tutorial dataset functionality with chunked processing for efficient memory usage.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/examples/ROMS_ocean_model.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nds = xr.tutorial.open_dataset(\"ROMS_example.nc\", chunks={\"ocean_time\": 1})\nds\n```\n\n----------------------------------------\n\nTITLE: Using Multi-dimensional DataArray as Indexer\nDESCRIPTION: Shows how to use a multi-dimensional DataArray as an indexer, where the result's dimensions are determined by the indexer's dimensions. This enables complex selection patterns.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/indexing.rst#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nind = xr.DataArray([[0, 1], [0, 1]], dims=[\"a\", \"b\"])\nda[ind]\n```\n\n----------------------------------------\n\nTITLE: Stacking and Unstacking Dimensions in Xarray with Python\nDESCRIPTION: Demonstrates how to use stack and unstack to combine or split array dimensions in Xarray. Highlights the usage of MultiIndex in stacking and differences from Pandas' implementation.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/reshaping.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\narray = xr.DataArray(\n    np.random.randn(2, 3), coords=[(\"x\", [\"a\", \"b\"]), (\"y\", [0, 1, 2])]\n)\nstacked = array.stack(z=(\"x\", \"y\"))\nstacked\nstacked.unstack(\"z\")\n```\n\nLANGUAGE: python\nCODE:\n```\nstacked = array.stack(z=[..., \"x\"])\nstacked\n```\n\nLANGUAGE: python\nCODE:\n```\nstacked2 = stacked[::2]\nstacked2\nstacked2.unstack(\"z\")\n```\n\nLANGUAGE: python\nCODE:\n```\narray = xr.DataArray([[np.nan, 1], [2, 3]], dims=[\"x\", \"y\"])\narray.stack(z=(\"x\", \"y\"))\narray.to_pandas().stack()\n```\n\n----------------------------------------\n\nTITLE: Performing Multidimensional Groupby Operation in Xarray\nDESCRIPTION: This snippet demonstrates how to use Xarray's groupby_bins function to calculate the mean temperature at each latitude. It creates latitude bins, defines labels, groups the data, and plots the result.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/examples/multidimensional-coords.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# define two-degree wide latitude bins\nlat_bins = np.arange(0, 91, 2)\n# define a label for each bin corresponding to the central latitude\nlat_center = np.arange(1, 90, 2)\n# group according to those bins and take the mean\nTair_lat_mean = ds.Tair.groupby_bins(\"yc\", lat_bins, labels=lat_center).mean(\n    dim=xr.ALL_DIMS\n)\n# plot the result\nTair_lat_mean.plot()\n```\n\n----------------------------------------\n\nTITLE: Using a Context Manager to Open a Dataset\nDESCRIPTION: This snippet demonstrates the use of a context manager (with statement) to open a netCDF file. The dataset is automatically closed after the block is executed, ensuring clean resource management.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/io.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nwith xr.open_dataset(\"saved_on_disk.nc\") as ds:\n    print(ds.keys())\n```\n\n----------------------------------------\n\nTITLE: Converting to NumPy Array using to_numpy()\nDESCRIPTION: This snippet shows how to convert the underlying array of an xarray DataArray to a NumPy array using the `to_numpy()` method. This method is strongly preferred over `.values` as it correctly handles various array types.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/duckarrays.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n\"s_da.to_numpy()\"\n```\n\n----------------------------------------\n\nTITLE: Converting Between Dataset and DataArray in Xarray using Python\nDESCRIPTION: Shows how to convert a Dataset to a DataArray, allowing easier manipulation and integration for certain functions, and vice versa. Includes handling of dimension broadcasting during conversion.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/reshaping.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\narr = ds.to_dataarray()\narr\n```\n\nLANGUAGE: python\nCODE:\n```\narr.to_dataset(dim=\"variable\")\n```\n\nLANGUAGE: python\nCODE:\n```\nds2 = xr.Dataset({\"a\": 0, \"b\": (\"x\", [3, 4, 5])})\n\n# the input dataset has 4 elements\nds2\n\n# the resulting array has 6 elements\nds2.to_dataarray()\n```\n\nLANGUAGE: python\nCODE:\n```\narr.to_dataset(name=\"combined\")\n```\n\n----------------------------------------\n\nTITLE: Renaming Variables in Xarray Dataset\nDESCRIPTION: This snippet illustrates how to rename dataset variables and swap dimensions in an xarray Dataset. The rename method updates variable names, while swap_dims changes the dimensional structure of the dataset.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/data-structures.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nds.rename({\"temperature\": \"temp\", \"precipitation\": \"precip\"})\n    ds.swap_dims({\"time\": \"day\"})\n```\n\n----------------------------------------\n\nTITLE: Reading Cloud Storage Data with GCS in Python\nDESCRIPTION: Example showing how to read data from Google Cloud Storage using xarray with zarr backend and gcsfs. Demonstrates use of storage_options for authentication.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/io.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nds_gcs = xr.open_dataset(\n    \"gcs://<bucket-name>/path.zarr\",\n    backend_kwargs={\n        \"storage_options\": {\"project\": \"<project-name>\", \"token\": None}\n    },\n    engine=\"zarr\",\n)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Seasonal Temperature Comparisons in Xarray\nDESCRIPTION: Creates a comprehensive multi-panel visualization comparing weighted and unweighted seasonal averages of surface air temperature. The plot shows weighted averages, unweighted averages, and their differences for each season (DJF, MAM, JJA, SON).\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/examples/monthly-means.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Quick plot to show the results\nnotnull = pd.notnull(ds_unweighted[\"Tair\"][0])\n\nfig, axes = plt.subplots(nrows=4, ncols=3, figsize=(14, 12))\nfor i, season in enumerate((\"DJF\", \"MAM\", \"JJA\", \"SON\")):\n    ds_weighted[\"Tair\"].sel(season=season).where(notnull).plot.pcolormesh(\n        ax=axes[i, 0],\n        vmin=-30,\n        vmax=30,\n        cmap=\"Spectral_r\",\n        add_colorbar=True,\n        extend=\"both\",\n    )\n\n    ds_unweighted[\"Tair\"].sel(season=season).where(notnull).plot.pcolormesh(\n        ax=axes[i, 1],\n        vmin=-30,\n        vmax=30,\n        cmap=\"Spectral_r\",\n        add_colorbar=True,\n        extend=\"both\",\n    )\n\n    ds_diff[\"Tair\"].sel(season=season).where(notnull).plot.pcolormesh(\n        ax=axes[i, 2],\n        vmin=-0.1,\n        vmax=0.1,\n        cmap=\"RdBu_r\",\n        add_colorbar=True,\n        extend=\"both\",\n    )\n\n    axes[i, 0].set_ylabel(season)\n    axes[i, 1].set_ylabel(\"\")\n    axes[i, 2].set_ylabel(\"\")\n\nfor ax in axes.flat:\n    ax.axes.get_xaxis().set_ticklabels([])\n    ax.axes.get_yaxis().set_ticklabels([])\n    ax.axes.axis(\"tight\")\n    ax.set_xlabel(\"\")\n\naxes[0, 0].set_title(\"Weighted by DPM\")\naxes[0, 1].set_title(\"Equal Weighting\")\naxes[0, 2].set_title(\"Difference\")\n\nplt.tight_layout()\n\nfig.suptitle(\"Seasonal Surface Air Temperature\", fontsize=16, y=1.02)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom 1D Interpolation Function\nDESCRIPTION: This snippet defines a custom 1D interpolation function using numpy's interp and tests it against xarray's built-in interpolation method.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/examples/apply_ufunc_vectorize_1d.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef interp1d_np(data, x, xi):\n    return np.interp(xi, x, data)\n\n\ninterped = interp1d_np(air.isel(time=0, lon=0), air.lat, newlat)\nexpected = air.interp(lat=newlat)\n\n# no errors are raised if values are equal to within floating point precision\nnp.testing.assert_allclose(expected.isel(time=0, lon=0).values, interped)\n```\n\n----------------------------------------\n\nTITLE: Managing Colormap Centering in Xarray Plots\nDESCRIPTION: Shows how Xarray automatically selects appropriate colormaps based on data properties, and demonstrates control over colormap centering. Includes examples of default behavior and manual centering configuration.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/examples/visualization_gallery.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nair = ds.air.isel(time=0)\n\nf, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(8, 6))\n\n# The first plot (in kelvins) chooses \"viridis\" and uses the data's min/max\nair.plot(ax=ax1, cbar_kwargs={\"label\": \"K\"})\nax1.set_title(\"Kelvins: default\")\nax2.set_xlabel(\"\")\n\n# The second plot (in celsius) now chooses \"BuRd\" and centers min/max around 0\nairc = air - 273.15\nairc.plot(ax=ax2, cbar_kwargs={\"label\": \"°C\"})\nax2.set_title(\"Celsius: default\")\nax2.set_xlabel(\"\")\nax2.set_ylabel(\"\")\n\n# The center doesn't have to be 0\nair.plot(ax=ax3, center=273.15, cbar_kwargs={\"label\": \"K\"})\nax3.set_title(\"Kelvins: center=273.15\")\n\n# Or it can be ignored\nairc.plot(ax=ax4, center=False, cbar_kwargs={\"label\": \"°C\"})\nax4.set_title(\"Celsius: center=False\")\nax4.set_ylabel(\"\")\n\n# Make it nice\nplt.tight_layout()\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading with BackendArray Subclass in Xarray\nDESCRIPTION: This snippet shows how to implement lazy loading in a custom Xarray backend by subclassing `BackendArray`. The `MyBackendArray` class overrides the `__getitem__` method and utilizes `explicit_indexing_adapter` to handle different types of indexing. It inherits from `xarray.backends.BackendArray`.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/internals/how-to-add-new-backend.rst#2025-04-21_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n\"from xarray.backends import BackendArray\\n\\n\\nclass MyBackendArray(BackendArray):\\n    def __init__(\\n        self,\\n        shape,\\n        dtype,\\n        lock,\\n        # other backend specific keyword arguments\\n    ):\\n        self.shape = shape\\n        self.dtype = dtype\\n        self.lock = lock\\n\\n    def __getitem__(\\n        self, key: xarray.core.indexing.ExplicitIndexer\\n    ) -> np.typing.ArrayLike:\\n        return indexing.explicit_indexing_adapter(\\n            key,\\n            self.shape,\\n            indexing.IndexingSupport.BASIC,\\n            self._raw_indexing_method,\\n        )\\n\\n    def _raw_indexing_method(self, key: tuple) -> np.typing.ArrayLike:\\n        # thread safe method that access to data on disk\\n        with self.lock:\\n            ...\\n            return item\"\n```\n\n----------------------------------------\n\nTITLE: Union-based Alignment in Dataset Construction\nDESCRIPTION: Shows how xarray aligns data arrays based on the union of labels when constructing datasets, automatically handling differently indexed arrays.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_88\n\nLANGUAGE: python\nCODE:\n```\nxray.Dataset({\"foo\": lhs, \"bar\": rhs})\n```\n\n----------------------------------------\n\nTITLE: Broadcasting DataArrays with Different Shapes in Xarray\nDESCRIPTION: This code snippet demonstrates broadcasting in Xarray by adding two DataArrays with different shapes. 'a' has shape (3,) and 'b' has shape (4,), leading to a 2D array shape of (3, 4) after the operation.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/terminology.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# 'a' has shape (3,) and 'b' has shape (4,)\na = xr.DataArray(np.array([1, 2, 3]), dims=[\"x\"])\nb = xr.DataArray(np.array([4, 5, 6, 7]), dims=[\"y\"])\n\n# 2D array with shape (3, 4)\na + b\n\n```\n\n----------------------------------------\n\nTITLE: Specifying Coordinate Functions in Coarsening with Python and Xarray\nDESCRIPTION: Demonstrates how to apply specific functions to coordinates when coarsening data.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/computation.rst#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nda.coarsen(time=7, x=2, coord_func={\"time\": \"min\"}).mean()\n```\n\n----------------------------------------\n\nTITLE: Displaying the xarray DataTree structure\nDESCRIPTION: Demonstrates how to print the entire DataTree structure starting from the root node (Abe) and how to print a subtree starting from a specific node (Homer).\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/hierarchical-data.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n\n    abe\n    abe[\"Homer\"]\n```\n\n----------------------------------------\n\nTITLE: Indexing Axes with Monotonic Decreasing Labels\nDESCRIPTION: Shows indexing of arrays with decreasing labels using sel and loc methods, ensuring that slice and loc arguments are arranged in a decreasing order as well.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/indexing.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nreversed_da = da[::-1]\nreversed_da.loc[3.1:0.9]\n```\n\n----------------------------------------\n\nTITLE: Indexing by Dimension Names in xarray\nDESCRIPTION: Demonstrates the usage of sel and isel methods to index data by dimension names, offering explicit slicing without relying on dimension order. It also shows dictionary-based indexing for both positional and label-based methods.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/indexing.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# index by integer array indices\nda.isel(space=0, time=slice(None, 2))\n\n# index by dimension coordinate labels\nda.sel(time=slice(\"2000-01-01\", \"2000-01-02\"))\n```\n\nLANGUAGE: python\nCODE:\n```\n# index by integer array indices\nda[dict(space=0, time=slice(None, 2))]\n\n# index by dimension coordinate labels\nda.loc[dict(time=slice(\"2000-01-01\", \"2000-01-02\"))]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Basic Xarray Operations\nDESCRIPTION: Examples of common operations in Xarray including dimension-based operations, label-based selection, and groupby aggregation, showing how labels simplify working with multi-dimensional data compared to raw NumPy arrays.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/getting-started-guide/why-xarray.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nx.sum('time')\nx.loc['2014-01-01']\nx.sel(time='2014-01-01')\nx - y\nx.groupby('time.dayofyear').mean()\nx, y = xr.align(x, y, join='outer')\nx.attrs\n```\n\n----------------------------------------\n\nTITLE: Converting Wrapped Type to NumPy Array\nDESCRIPTION: This snippet shows how to convert the underlying array of an xarray DataArray to a NumPy array using the `as_numpy()` method. This returns a new DataArray object wrapping a normal NumPy array.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/duckarrays.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n\"s_da.as_numpy()\"\n```\n\n----------------------------------------\n\nTITLE: Calculating Monthly Temperature Anomalies\nDESCRIPTION: Computes temperature anomalies by subtracting the climatological monthly mean from each observation. Groups data by month, calculates means, and then finds differences to remove seasonal cycles.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/examples/weather-data.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclimatology = ds.groupby(\"time.month\").mean(\"time\")\nanomalies = ds.groupby(\"time.month\") - climatology\nanomalies.mean(\"location\").to_dataframe()[[\"tmin\", \"tmax\"]].plot()\n```\n\n----------------------------------------\n\nTITLE: Creating FacetGrid Plot with Outliers in Python\nDESCRIPTION: Creates a pcolormesh plot with outlier values using xarray's FacetGrid functionality. Sets up visualization with specified coordinates and robust color scaling.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/plotting.rst#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nhasoutliers = t.isel(time=slice(0, 5)).copy()\nhasoutliers[0, 0, 0] = -100\nhasoutliers[-1, -1, -1] = 400\n\ng = hasoutliers.plot.pcolormesh(\n    x=\"lon\",\n    y=\"lat\",\n    col=\"time\",\n    col_wrap=3,\n    robust=True,\n    cmap=\"viridis\",\n    cbar_kwargs={\"label\": \"this has outliers\"},\n)\n```\n\n----------------------------------------\n\nTITLE: Customizing Xarray Plots with Matplotlib\nDESCRIPTION: Demonstrates how to use Matplotlib functions to customize Xarray plots, including changing colormap, adding titles and labels, and adjusting layout.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/plotting.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nair2d.plot(cmap=plt.cm.Blues)\nplt.title(\"These colors prove North America\\nhas fallen in the ocean\")\nplt.ylabel(\"latitude\")\nplt.xlabel(\"longitude\")\nplt.tight_layout()\n\n@savefig plotting_2d_call_matplotlib.png width=4in\nplt.draw()\n```\n\n----------------------------------------\n\nTITLE: Creating xarray DataTree from a dictionary\nDESCRIPTION: Demonstrates creating an xarray DataTree from a nested dictionary structure using the `from_dict` method, representing an evolutionary tree of vertebrates. This offers a concise way to build a hierarchical structure.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/hierarchical-data.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n\n    vertebrates = xr.DataTree.from_dict(\n        {\n            \"/Sharks\": None,\n            \"/Bony Skeleton/Ray-finned Fish\": None,\n            \"/Bony Skeleton/Four Limbs/Amphibians\": None,\n            \"/Bony Skeleton/Four Limbs/Amniotic Egg/Hair/Primates\": None,\n            \"/Bony Skeleton/Four Limbs/Amniotic Egg/Hair/Rodents & Rabbits\": None,\n            \"/Bony Skeleton/Four Limbs/Amniotic Egg/Two Fenestrae/Dinosaurs\": None,\n            \"/Bony Skeleton/Four Limbs/Amniotic Egg/Two Fenestrae/Birds\": None,\n        },\n        name=\"Vertebrae\",\n    )\n\n    primates = vertebrates[\"/Bony Skeleton/Four Limbs/Amniotic Egg/Hair/Primates\"]\n    dinosaurs = vertebrates[\n        \"/Bony Skeleton/Four Limbs/Amniotic Egg/Two Fenestrae/Dinosaurs\"\n    ]\n```\n\n----------------------------------------\n\nTITLE: Specifying Chunk Sizes in Zarr Storage\nDESCRIPTION: Shows how to customize chunk sizes for variables and coordinates when writing to zarr storage, including handling of multi-dimensional coordinates.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/io.rst#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nds = xr.tutorial.open_dataset(\"rasm\")\n\nds[\"Tair\"] = ds[\"Tair\"].chunk({\"x\": 100, \"y\": 100})\n\nds.to_zarr(\n    \"path/to/directory.zarr\",\n    encoding={\"xc\": {\"chunks\": (-1, -1)}, \"yc\": {\"chunks\": (-1, -1)}},\n    mode=\"w\",\n)\n```\n\n----------------------------------------\n\nTITLE: Computing Standardized Monthly Anomalies\nDESCRIPTION: Creates standardized anomalies by dividing the difference between observations and monthly means by the monthly standard deviation. Uses xarray's apply_ufunc method for element-wise operations.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/examples/weather-data.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclimatology_mean = ds.groupby(\"time.month\").mean(\"time\")\nclimatology_std = ds.groupby(\"time.month\").std(\"time\")\nstand_anomalies = xr.apply_ufunc(\n    lambda x, m, s: (x - m) / s,\n    ds.groupby(\"time.month\"),\n    climatology_mean,\n    climatology_std,\n)\n\nstand_anomalies.mean(\"location\").to_dataframe()[[\"tmin\", \"tmax\"]].plot()\n```\n\n----------------------------------------\n\nTITLE: Setting Metadata Attributes for DataArrays\nDESCRIPTION: Demonstrates how to add metadata to a DataArray using the attrs dictionary, including CF convention attributes like 'long_name' and 'units' that are used for plotting.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/getting-started-guide/quick-overview.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndata.attrs[\"long_name\"] = \"random velocity\"\ndata.attrs[\"units\"] = \"metres/sec\"\ndata.attrs[\"description\"] = \"A random variable created as an example.\"\ndata.attrs[\"random_attribute\"] = 123\ndata.attrs\n# you can add metadata to coordinates too\ndata.x.attrs[\"units\"] = \"x units\"\n```\n\n----------------------------------------\n\nTITLE: Opening HDF5 Files with Xarray\nDESCRIPTION: This snippet shows how to open an HDF5 file using the 'h5netcdf' engine with Xarray. It's essential to specify the engine since there are multiple backends for reading HDF5 files.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/getting-started-guide/faq.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport xarray as xr\n\n# Open HDF5 file as an xarray Dataset\nds = xr.open_dataset(\"path/to/hdf5/file.hdf5\", engine=\"h5netcdf\")\n\n# Print Dataset object\nprint(ds)\n\n# Using netCDF4 backend for HDF5 file\nds = xr.open_dataset(\"path/to/file.h5\", engine=\"netcdf4\")\n```\n\n----------------------------------------\n\nTITLE: Opening NetCDF Files with Xarray\nDESCRIPTION: This snippet demonstrates how to use Xarray to open a NetCDF file using the 'netcdf4' engine. It's important to specify the engine explicitly to ensure the correct backend is utilized, especially for files with non-standard extensions.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/getting-started-guide/faq.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport xarray as xr\n\n# use xarray to open the file and return an xarray.Dataset object using netcdf4 engine\nds = xr.open_dataset(\"/path/to/my/file.nc\", engine=\"netcdf4\")\n\n# Print Dataset object\nprint(ds)\n\n# use xarray to open the file and return an xarray.Dataset object using scipy engine\nds = xr.open_dataset(\"/path/to/my/file.nc\", engine=\"scipy\")\n```\n\n----------------------------------------\n\nTITLE: Comparing Manual Weighted Mean Calculation in Python with Xarray\nDESCRIPTION: Shows the equivalence between the weighted mean method and manual calculation using sum and weights.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/computation.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nweighted_mean = weighted_sum / weights.sum()\nweighted_mean\n```\n\n----------------------------------------\n\nTITLE: Merging DataArrays into a Dataset in Xarray\nDESCRIPTION: This snippet illustrates how to merge two DataArrays into a Dataset in Xarray. The arrays 'arr1' and 'arr2' are created with coordinates, then merged into a new Dataset, 'merged_ds', containing both variables.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/terminology.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# create two 1D arrays with names\narr1 = xr.DataArray(\n    [1, 2, 3], dims=[\"x\"], coords={\"x\": [10, 20, 30]}, name=\"arr1\"\n)\narr2 = xr.DataArray(\n    [4, 5, 6], dims=[\"x\"], coords={\"x\": [20, 30, 40]}, name=\"arr2\"\n)\n\n# merge the two arrays into a new dataset\nmerged_ds = xr.Dataset({\"arr1\": arr1, \"arr2\": arr2})\nmerged_ds\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Underlying Indexes in Python with Xarray\nDESCRIPTION: Shows how to access the underlying pandas Indexes used by Xarray for indexing operations. This can be useful for more advanced indexing or when interfacing with pandas functionality.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/indexing.rst#2025-04-21_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nda = xr.DataArray(\n    np.random.rand(4, 3),\n    [\n        (\"time\", pd.date_range(\"2000-01-01\", periods=4)),\n        (\"space\", [\"IA\", \"IL\", \"IN\"]),\n    ],\n)\nda\nda.indexes\nda.indexes[\"time\"]\n\nda = xr.DataArray([1, 2, 3], dims=\"x\")\nda\nda.get_index(\"x\")\n```\n\n----------------------------------------\n\nTITLE: Creating DateTime Arrays using Pandas - Python\nDESCRIPTION: This snippet demonstrates how to create datetime64 arrays using Pandas' to_datetime and date_range functions in Python. It showcases various applications such as converting strings to datetime and generating a range of dates.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/time-series.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npd.to_datetime([\"2000-01-01\", \"2000-02-02\"])\\npd.DatetimeIndex([\"2000-01-01 00:00:00\", \"2000-02-02 00:00:00\"], dtype=\"datetime64[s]\")\\npd.date_range(\"2000-01-01\", periods=365)\\npd.date_range(\"2000-01-01\", periods=365, unit=\"s\")\n```\n\n----------------------------------------\n\nTITLE: Aligning Datasets with Different Time Dimensions\nDESCRIPTION: This code shows that datasets with different time dimensions cannot be exactly aligned in Xarray.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/hierarchical-data.rst#2025-04-21_snippet_41\n\nLANGUAGE: python\nCODE:\n```\nxr.align(ds_daily, ds_weekly, ds_monthly, join=\"exact\")\n```\n\n----------------------------------------\n\nTITLE: Plotting Temperature Data with Cartopy Projection\nDESCRIPTION: Creates a map visualization of the temperature data for the first time step using Cartopy's Lambert Conformal projection. The plot includes coastlines for geographic reference.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/examples/area_weighted_temperature.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nprojection = ccrs.LambertConformal(central_longitude=-95, central_latitude=45)\n\nf, ax = plt.subplots(subplot_kw=dict(projection=projection))\n\nair.isel(time=0).plot(transform=ccrs.PlateCarree(), cbar_kwargs=dict(shrink=0.7))\nax.coastlines()\n```\n\n----------------------------------------\n\nTITLE: Creating and Indexing a DataArray with xarray\nDESCRIPTION: Demonstrates creating a DataArray with labeled dimensions and accessing elements using positional indexing. This snippet illustrates xarray's ability to maintain attributes while performing operations similar to numpy.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/indexing.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nda = xr.DataArray(\n    np.random.rand(4, 3),\n    [\n        (\"time\", pd.date_range(\"2000-01-01\", periods=4)),\n        (\"space\", [\"IA\", \"IL\", \"IN\"]),\n    ],\n)\nda[:2]\nda[0, 0]\nda[:, [2, 1]]\n```\n\n----------------------------------------\n\nTITLE: Labeling Bins in GroupBy Bins Operation in Xarray Python\nDESCRIPTION: This snippet shows how to customize bin labels when using groupby_bins in Xarray. Requires bin edges and optional labels for the bins. The snippet shows using float labels for bin centers.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/groupby.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nx_bin_labels = [12.5, 37.5]\nds.groupby_bins(\"x\", x_bins, labels=x_bin_labels).groups\n```\n\n----------------------------------------\n\nTITLE: Vector Field Visualization in Python\nDESCRIPTION: Shows how to create quiver and streamline plots for vector field visualization using xarray, with support for faceting across multiple dimensions.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/plotting.rst#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nds.isel(w=1, z=1).plot.quiver(x=\"x\", y=\"y\", u=\"A\", v=\"B\")\n\nds.plot.quiver(x=\"x\", y=\"y\", u=\"A\", v=\"B\", col=\"w\", row=\"z\", scale=4)\n\nds.isel(w=1, z=1).plot.streamplot(x=\"x\", y=\"y\", u=\"A\", v=\"B\")\n```\n\n----------------------------------------\n\nTITLE: Setting Values with Label-Based Indexing in xarray\nDESCRIPTION: Sets values in a DataArray using label-based indexing. This approach is similar to setting values in pandas, showing inclusivity in bounds and fast access.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/indexing.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nda.loc[\"2000-01-01\", [\"IL\", \"IN\"]] = -10\nda\n```\n\n----------------------------------------\n\nTITLE: Controlling Figure Size in Xarray Plots\nDESCRIPTION: This snippet demonstrates how to control figure size in Xarray plots via the 'figsize', 'aspect', and 'size' parameters, allowing users to create visualizations that fit their preferred aesthetic or layout.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/plotting.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nair1d.plot(aspect=2, size=3)\nplt.tight_layout()\n```\n\n----------------------------------------\n\nTITLE: Creating Line Plots with Multidimensional Coordinates in Python\nDESCRIPTION: This snippet illustrates how to create line plots with multidimensional coordinates using Xarray. It demonstrates two different approaches: using 'y' and 'x' as the hue dimension, respectively. This is useful for visualizing relationships across multiple dimensions.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/plotting.rst#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nf, ax = plt.subplots(2, 1)\nda.plot.line(x=\"lon\", hue=\"y\", ax=ax[0])\nda.plot.line(x=\"lon\", hue=\"x\", ax=ax[1])\n```\n\n----------------------------------------\n\nTITLE: Calculating Freeze Probability by Month\nDESCRIPTION: Computes the probability of freezing temperatures (tmin ≤ 0) for each calendar month by grouping data by month and averaging across time.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/examples/weather-data.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfreeze = (ds[\"tmin\"] <= 0).groupby(\"time.month\").mean(\"time\")\nfreeze\n```\n\n----------------------------------------\n\nTITLE: Creating Enhanced Geographic Plots with CartoPy\nDESCRIPTION: Creates a more sophisticated plot using CartoPy for geographic projections. Includes coastlines for context and displays the temperature data on a Robinson projection with a customized colorbar.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/examples/ERA5-GRIB-example.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport cartopy.crs as ccrs\nimport cartopy\n\nfig = plt.figure(figsize=(10, 10))\nax = plt.axes(projection=ccrs.Robinson())\nax.coastlines(resolution=\"10m\")\nplot = ds.t2m[0].plot(\n    cmap=plt.cm.coolwarm, transform=ccrs.PlateCarree(), cbar_kwargs={\"shrink\": 0.6}\n)\nplt.title(\"ERA5 - 2m temperature British Isles March 2019\")\n```\n\n----------------------------------------\n\nTITLE: Opening GRIB Files with Xarray\nDESCRIPTION: This snippet demonstrates how to read a GRIB file utilizing the 'cfgrib' engine with Xarray. Specifying the engine is crucial since there are multiple backends for GRIB files.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/getting-started-guide/faq.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport xarray as xr\n\n# define the path to your GRIB file and the engine you want to use to open the file\n# use ``open_dataset()`` to open the file with the specified engine and return an xarray.Dataset object\nds = xr.open_dataset(\"path/to/your/file.grib\", engine=\"cfgrib\")\n\n# Print Dataset object\nprint(ds)\n```\n\n----------------------------------------\n\nTITLE: Indexing Specific Group in Xarray Python\nDESCRIPTION: Demonstrates indexing a specific group within a GroupBy object in Xarray by supplying the label of the group. You need a valid GroupBy object to index a particular group, and it returns the data belonging to the specified group.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/groupby.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nds.groupby(\"letters\")[\"b\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Dataset from Pandas Object\nDESCRIPTION: This snippet demonstrates how to create an xarray Dataset by passing pandas DataFrame or Series objects directly as values. The resulting dimensions will align based on the DataFrame's index.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/data-structures.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nxr.Dataset(dict(bar=foo))\n```\n\nLANGUAGE: python\nCODE:\n```\nxr.Dataset(dict(bar=foo.to_pandas()))\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries for Xarray Visualization\nDESCRIPTION: Imports the necessary libraries for creating visualizations with Xarray, including Cartopy for map projections, Matplotlib for plotting, and Xarray itself.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/examples/visualization_gallery.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport cartopy.crs as ccrs\nimport matplotlib.pyplot as plt\nimport xarray as xr\n\n%matplotlib inline\n```\n\n----------------------------------------\n\nTITLE: Writing to GCS Storage with GCSFS in Python\nDESCRIPTION: Shows how to set up a GCS file system connection and write data to Google Cloud Storage using gcsfs MutableMapping interface.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/io.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport gcsfs\n\nfs = gcsfs.GCSFileSystem(project=\"<project-name>\", token=None)\ngcsmap = gcsfs.mapping.GCSMap(\"<bucket-name>\", gcs=fs, check=True, create=False)\n# write to the bucket\nds.to_zarr(store=gcsmap)\n# read it back\nds_gcs = xr.open_zarr(gcsmap)\n```\n\n----------------------------------------\n\nTITLE: Converting Xarray Dataset to Pandas DataFrame\nDESCRIPTION: Demonstrates how to convert an xarray Dataset to a pandas DataFrame for additional analysis. This conversion flattens the multidimensional structure into a tabular format.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/examples/weather-data.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndf = ds.to_dataframe()\ndf.head()\n```\n\n----------------------------------------\n\nTITLE: Writing Dataset to Zarr Store Using Xarray\nDESCRIPTION: Demonstrates creating a dataset with random data and coordinates and writing it to a Zarr store on disk using Xarray's to_zarr method.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/io.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nds = xr.Dataset(\n    {\"foo\": ((\"x\", \"y\"), np.random.rand(4, 5))},\n    coords={\n        \"x\": [10, 20, 30, 40],\n        \"y\": pd.date_range(\"2000-01-01\", periods=5),\n        \"z\": (\"x\", list(\"abcd\")),\n    },\n)\nds.to_zarr(\"path/to/directory.zarr\")\n```\n\n----------------------------------------\n\nTITLE: Visualizing Data on Latitude-Longitude Grid using Cartopy\nDESCRIPTION: This code creates a map plot of the 'Tair' variable using Cartopy to project the data onto a conventional latitude-longitude grid. It uses the 'xc' and 'yc' coordinates for plotting.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/examples/multidimensional-coords.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nplt.figure(figsize=(14, 6))\nax = plt.axes(projection=ccrs.PlateCarree())\nax.set_global()\nds.Tair[0].plot.pcolormesh(\n    ax=ax, transform=ccrs.PlateCarree(), x=\"xc\", y=\"yc\", add_colorbar=False\n)\nax.coastlines()\nax.set_ylim([0, 90]);\n```\n\n----------------------------------------\n\nTITLE: Stacking Different Variables Together using Xarray in Python\nDESCRIPTION: Discusses the method for stacking multiple variables in a Dataset with different dimensions using to_stacked_array, which avoids unnecessary data copying seen in to_dataarray. It returns a two-dimensional array apt for machine learning tasks.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/reshaping.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndata = xr.Dataset(\n    data_vars={\"a\": ((\"x\", \"y\"), [[0, 1, 2], [3, 4, 5]]), \"b\": (\"x\", [6, 7])},\n    coords={\"y\": [\"u\", \"v\", \"w\"]},\n)\ndata\nstacked = data.to_stacked_array(\"z\", sample_dims=[\"x\"])\nstacked\nunstacked = stacked.to_unstacked_dataset(\"z\")\nunstacked\n```\n\n----------------------------------------\n\nTITLE: Demonstrating NumPy ufunc support on Xarray Dataset (Python)\nDESCRIPTION: Shows how NumPy ufuncs can now be applied directly to Xarray Dataset objects using the __array_ufunc__ protocol. This example applies the sine function to a simple dataset.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_61\n\nLANGUAGE: Python\nCODE:\n```\nds = xr.Dataset({\"a\": 1})\nnp.sin(ds)\n```\n\n----------------------------------------\n\nTITLE: Advanced Pointwise Indexing with DataArray in Xarray\nDESCRIPTION: Demonstrates pointwise indexing by using DataArray objects as indexers, which allows selecting specific combinations of indices and mapping them to a new dimension.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/indexing.rst#2025-04-21_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nda = xr.DataArray(np.arange(56).reshape((7, 8)), dims=[\"x\", \"y\"])\nda\nda.isel(x=xr.DataArray([0, 1, 6], dims=\"z\"), y=xr.DataArray([0, 1, 0], dims=\"z\"))\n```\n\n----------------------------------------\n\nTITLE: Accessing Xarray Dataset Indexes\nDESCRIPTION: Demonstrates how to access a dictionary of pandas Index objects for each dimension in an Xarray Dataset using the indexes property.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/data-structures.rst#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nds.indexes\n```\n\n----------------------------------------\n\nTITLE: Creating a DataArray from Scratch with Dimensions and Coordinates\nDESCRIPTION: Creates a 2D DataArray with random values, explicitly defined dimensions ('x', 'y'), and coordinate labels for the x dimension.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/getting-started-guide/quick-overview.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndata = xr.DataArray(np.random.randn(2, 3), dims=(\"x\", \"y\"), coords={\"x\": [10, 20]})\n```\n\n----------------------------------------\n\nTITLE: Creating xarray DataArray from pandas Series\nDESCRIPTION: This snippet demonstrates how to convert a pandas Series back into an xarray DataArray using the `from_series()` method. This retains the original data structure while leveraging the efficient representation of xarray.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/pandas.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nxr.DataArray.from_series(s)\n```\n\n----------------------------------------\n\nTITLE: Filtering DataTree Nodes Based on Content in Python\nDESCRIPTION: Shows how to create a new DataTree containing only non-empty nodes by iterating over all nodes, checking for data, and rebuilding the tree.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/hierarchical-data.rst#2025-04-21_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nnon_empty_nodes = {\n    path: node.dataset for path, node in dt.subtree_with_keys if node.has_data\n}\nxr.DataTree.from_dict(non_empty_nodes)\n```\n\n----------------------------------------\n\nTITLE: Performing First Aggregation on GroupBy Object in Xarray Python\nDESCRIPTION: Demonstrates the first method to obtain the first occurrence of values across groups in a GroupBy object. It requires a GroupBy object and controls missing value skipping with skipna parameter.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/groupby.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nds.groupby(\"letters\").first(...)\n```\n\n----------------------------------------\n\nTITLE: Fitting Multi-Dimensional Functions with Multiple Peaks in Python with Xarray\nDESCRIPTION: Shows how to fit complex multi-dimensional functions with multiple peaks using wrapper functions.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/computation.rst#2025-04-21_snippet_27\n\nLANGUAGE: python\nCODE:\n```\ndef gaussian_2d(coords, a, xc, yc, xalpha, yalpha):\n    x, y = coords\n    z = a * np.exp(\n        -np.square(x - xc) / 2 / np.square(xalpha)\n        - np.square(y - yc) / 2 / np.square(yalpha)\n    )\n    return z\n\n\ndef multi_peak(coords, *args):\n    z = np.zeros(coords[0].shape)\n    for i in range(len(args) // 5):\n        z += gaussian_2d(coords, *args[i * 5 : i * 5 + 5])\n    return z\n\n\nx = np.arange(-5, 5, 0.1)\ny = np.arange(-5, 5, 0.1)\nX, Y = np.meshgrid(x, y)\n\nn_peaks = 2\nnames = [\"a\", \"xc\", \"yc\", \"xalpha\", \"yalpha\"]\nnames = [f\"{name}{i}\" for i in range(n_peaks) for name in names]\n```\n\n----------------------------------------\n\nTITLE: Expanding and Squeezing Dimensions in Xarray with Python\nDESCRIPTION: Explains methods to add a new dimension of size one or remove it from a DataArray or Dataset using expand_dims and squeeze, respectively. Useful for reshaping data to match input requirements of machine learning and visualization tools.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/reshaping.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nexpanded = ds.expand_dims(\"w\")\nexpanded\n```\n\nLANGUAGE: python\nCODE:\n```\nexpanded.squeeze(\"w\")\n```\n\n----------------------------------------\n\nTITLE: Accessing DataTree Nodes using Filesystem-like Paths in Python\nDESCRIPTION: Illustrates how to navigate DataTree structures using filesystem-like paths, including relative and absolute paths. This allows for flexible access to nested nodes.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/hierarchical-data.rst#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nabe[\"Homer/Bart\"].name\nabe[\"./Homer/Bart\"].name  # alternative syntax\n\n# access lisa's sibling by a relative path.\nlisa[\"../Bart\"]\n# or from absolute path\nlisa[\"/Homer/Bart\"]\n```\n\n----------------------------------------\n\nTITLE: Using Grouper Objects in Xarray Python\nDESCRIPTION: Illustrates employing grouper objects for grouping by multiple variables in Xarray. Requires importing grouper objects and setting them in groupby operations. The example combines BinGrouper and UniqueGrouper for sophisticated GroupBy operations.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/groupby.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom xarray.groupers import UniqueGrouper\n\nda.groupby([\"lat\", \"lon\"]).sum()\n\nda.groupby(lat=UniqueGrouper(), lon=UniqueGrouper()).sum()\n\nfrom xarray.groupers import BinGrouper\n\nds.groupby(x=BinGrouper(bins=[5, 15, 25]), letters=UniqueGrouper()).sum()\n```\n\n----------------------------------------\n\nTITLE: Handling Non-Multiple Data Lengths in Coarsening with Python and Xarray\nDESCRIPTION: Shows how to handle data whose length is not a multiple of the window size using boundary options.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/computation.rst#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nda.coarsen(time=30, x=2, boundary=\"trim\").mean()\n```\n\n----------------------------------------\n\nTITLE: Decoding CF Attributes in Xarray - Python\nDESCRIPTION: This snippet illustrates how to manually decode arrays for datetime attributes in a dataset using Xarray's decode_cf function. It demonstrates default decoding and custom decoding with CFDatetimeCoder.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/time-series.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nattrs = {\"units\": \"hours since 2000-01-01\"}\\nds = xr.Dataset({\"time\": (\"time\", [0, 1, 2, 3], attrs)})\\n# Default decoding to 'ns'-resolution\\nxr.decode_cf(ds)\\n# Decoding to 's'-resolution\\ncoder = xr.coders.CFDatetimeCoder(time_unit=\"s\")\\nxr.decode_cf(ds, decode_times=coder)\n```\n\n----------------------------------------\n\nTITLE: Pip Installation with Extras\nDESCRIPTION: Command to install xarray with optional dependencies using pip extras syntax.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_47\n\nLANGUAGE: Shell\nCODE:\n```\npip install \"xarray[extra]\"\n```\n\n----------------------------------------\n\nTITLE: Adding Plot Line Formatting Options\nDESCRIPTION: This snippet shows how to pass additional formatting arguments to Xarray's plotting methods to customize line plotting using Matplotlib's options. A specific format string is provided for line style and markers.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/plotting.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nair1d[:200].plot.line(\"b-^\")\n```\n\n----------------------------------------\n\nTITLE: Generating Dummy Data Using Hypothesis Strategies - Python\nDESCRIPTION: Utilize Hypothesis strategies to generate examples of Xarray data structures with arbitrary data using xarray.testing.strategies. Demonstrates how to create diverse test cases for downstream code validation by calling the .example() method multiple times.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/testing.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport xarray.testing.strategies as xrst\n\nxrst.variables().example()\nxrst.variables().example()\nxrst.variables().example()\n```\n\n----------------------------------------\n\nTITLE: Differentiating Data Using Coordinates in Python with Xarray\nDESCRIPTION: Shows how to compute derivatives by central finite differences using coordinate values.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/computation.rst#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\na = xr.DataArray([0, 1, 2, 3], dims=[\"x\"], coords=[[0.1, 0.11, 0.2, 0.3]])\na\na.differentiate(\"x\")\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Lines in 2D Plots\nDESCRIPTION: This snippet demonstrates how to use Xarray's line plotting function to visualize variations of a 3D dataset across multiple dimensions, specifically at different latitudes along a longitude.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/plotting.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nair.isel(lon=10, lat=[19, 21, 22]).plot.line(x=\"time\")\n```\n\n----------------------------------------\n\nTITLE: Accessing parent in xarray DataTree\nDESCRIPTION: Demonstrates how to access the parent of a node, confirming that Maggie's parent is correctly set to Homer.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/hierarchical-data.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n\n    maggie.parent.name\n```\n\n----------------------------------------\n\nTITLE: Importing Xarray and Required Modules\nDESCRIPTION: Imports the Xarray library and creates Xarray DataArray objects using specified dates and dimensions. Demonstrates the usage of non-standard calendars and conversion between calendars using methods like `convert_calendar` and `date_range`.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/weather-climate.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport xarray as xr\nfrom itertools import product\nfrom cftime import DatetimeNoLeap\n\ndates = [\n    DatetimeNoLeap(year, month, 1)\n    for year, month in product(range(1, 3), range(1, 13))\n]\nda = xr.DataArray(np.arange(24), coords=[dates], dims=[\"time\"], name=\"foo\")\n\ndates = xr.date_range(\n    start=\"0001\", periods=24, freq=\"MS\", calendar=\"noleap\", use_cftime=True\n)\nda = xr.DataArray(np.arange(24), coords=[dates], dims=[\"time\"], name=\"foo\")\n\nxr.infer_freq(dates)\n\nda.sel(time=\"0001\")\nda.sel(time=slice(\"0001-05\", \"0002-02\"))\n\nda.time.dt.year\nda.time.dt.month\nda.time.dt.season\nda.time.dt.dayofyear\nda.time.dt.dayofweek\nda.time.dt.days_in_month\nda.time.dt.calendar\n\nda.time.dt.ceil(\"3D\")\nda.time.dt.floor(\"5D\")\nda.time.dt.round(\"2D\")\n\nda.groupby(\"time.month\").sum()\n\nda.interp(time=[DatetimeNoLeap(1, 1, 15), DatetimeNoLeap(1, 2, 15)])\nda.interp(time=[\"0001-01-15\", \"0001-02-15\"])\n\nda.differentiate(\"time\")\n\nda.to_netcdf(\"example-no-leap.nc\")\nreopened = xr.open_dataset(\"example-no-leap.nc\")\nreopened.close()\nos.remove(\"example-no-leap.nc\")\n\nda.resample(time=\"81min\", closed=\"right\", label=\"right\", offset=\"3min\").mean()\n```\n\n----------------------------------------\n\nTITLE: Performing Multidimensional Rolling Window Operations in Python with Xarray\nDESCRIPTION: Shows how to perform rolling window operations across multiple dimensions simultaneously in Xarray.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/computation.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nr = arr.rolling(x=2, y=3, min_periods=2)\nr.mean()\n```\n\n----------------------------------------\n\nTITLE: Computing Weighted Rolling Sum in Python with Xarray\nDESCRIPTION: Shows how to compute a weighted rolling sum using weights defined in a DataArray.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/computation.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nweight = xr.DataArray([0.25, 0.5, 0.25], dims=[\"window\"])\narr.rolling(y=3).construct(y=\"window\").dot(weight)\n```\n\n----------------------------------------\n\nTITLE: Swapping Dimensions in Xarray Datasets\nDESCRIPTION: Shows how to use swap_dims to exchange one dimension for another in an xarray Dataset, which is useful for changing the primary dimension for indexing and alignment.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_86\n\nLANGUAGE: python\nCODE:\n```\nds = xray.Dataset({\"x\": range(3), \"y\": (\"x\", list(\"abc\"))})\nds\nds.swap_dims({\"x\": \"y\"})\n```\n\n----------------------------------------\n\nTITLE: Creating and Indexing DataArray in Python with xarray\nDESCRIPTION: Demonstrates creating a DataArray with dimensions and coordinates, then using isel_points for pointwise indexing.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_68\n\nLANGUAGE: python\nCODE:\n```\nda = xray.DataArray(\n    np.arange(56).reshape((7, 8)),\n    coords={\"x\": list(\"abcdefg\"), \"y\": 10 * np.arange(8)},\n    dims=[\"x\", \"y\"],\n)\n\nda\n```\n\n----------------------------------------\n\nTITLE: Integrating Data Using Coordinates in Python with Xarray\nDESCRIPTION: Shows how to perform integration using the trapezoidal rule based on coordinate values.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/computation.rst#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\na.integrate(\"x\")\n```\n\n----------------------------------------\n\nTITLE: Performing Block Mean Aggregation in Python with Xarray\nDESCRIPTION: Demonstrates computing block means over specified window sizes in each dimension.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/computation.rst#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nda.coarsen(time=7, x=2).mean()\n```\n\n----------------------------------------\n\nTITLE: Filling Missing Values in DataArray\nDESCRIPTION: Shows how to use fillna() method to replace NaN values in a DataArray.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_77\n\nLANGUAGE: python\nCODE:\n```\narray = xray.DataArray([np.nan, 1, np.nan, 3], dims='x')\narray.fillna(0)\n```\n\n----------------------------------------\n\nTITLE: Examining Filled and Missing Data\nDESCRIPTION: Displays the head of a DataFrame containing both the original data with missing values and the version with climatology-filled values for comparison.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/examples/weather-data.ipynb#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndf = both.sel(time=\"2000\").mean(\"location\").reset_coords(drop=True).to_dataframe()\ndf.head()\n```\n\n----------------------------------------\n\nTITLE: Combining DataArrays with combine_first\nDESCRIPTION: This snippet demonstrates the use of combine_first method to combine two DataArray objects, prioritizing non-null values in the calling object.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/combining.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nar0 = xr.DataArray([[0, 0], [0, 0]], [(\"x\", [\"a\", \"b\"]), (\"y\", [-1, 0])])\\nar1 = xr.DataArray([[1, 1], [1, 1]], [(\"x\", [\"b\", \"c\"]), (\"y\", [0, 1])])\\nar0.combine_first(ar1)\\nar1.combine_first(ar0)\n```\n\n----------------------------------------\n\nTITLE: Creating DataTree with Coordinate Inheritance\nDESCRIPTION: This code creates a DataTree with common coordinate variables (lat and lon) in the root group and time-dependent variables in child groups, demonstrating coordinate inheritance.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/hierarchical-data.rst#2025-04-21_snippet_44\n\nLANGUAGE: python\nCODE:\n```\ndt = xr.DataTree.from_dict(\n    {\n        \"/\": ds.drop_dims(\"time\"),\n        \"daily\": ds_daily.drop_vars([\"lat\", \"lon\"]),\n        \"weekly\": ds_weekly.drop_vars([\"lat\", \"lon\"]),\n        \"monthly\": ds_monthly.drop_vars([\"lat\", \"lon\"]),\n    }\n)\ndt\n```\n\n----------------------------------------\n\nTITLE: Calculating Mean of Groups in Xarray Python\nDESCRIPTION: Illustrates using the mean method on a GroupBy object in Xarray to compute the average over specified dimensions. Requires a GroupBy object and a dimension name. The example calculates means across the 'x' dimension.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/groupby.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\narr.groupby(\"letters\").mean(dim=\"x\")\n```\n\n----------------------------------------\n\nTITLE: Displaying xarray DataTree\nDESCRIPTION: Illustrates how to display the structure of the created DataTree object, showing the parent-child relationships.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/hierarchical-data.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n\n    homer\n```\n\n----------------------------------------\n\nTITLE: Checking Cached Data After Loading\nDESCRIPTION: Verifies that after data is loaded, the private _data attribute now contains the actual array instead of the lazy indexing class, showing the caching mechanism.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/internals/internal-design.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nvar._data\n```\n\n----------------------------------------\n\nTITLE: Viewing Group Indices of GroupBy Object in Xarray Python\nDESCRIPTION: Illustrates how to view the group indices of a GroupBy object in Xarray using the 'groups' attribute. Requires a GroupBy object obtained from a previous groupby operation. It returns a dictionary of groups with their corresponding indices.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/groupby.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nds.groupby(\"letters\").groups\n```\n\n----------------------------------------\n\nTITLE: Customizing Time Series Resampling in Xarray\nDESCRIPTION: Shows how to customize time series resampling with additional parameters like 'how' for specifying the aggregation method and 'label' for controlling the labeling of resulting bins.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_82\n\nLANGUAGE: python\nCODE:\n```\narray.resample(\"1D\", dim=\"time\", how=\"sum\", label=\"right\")\n```\n\n----------------------------------------\n\nTITLE: Converting DataTree Group to Xarray Dataset - Python\nDESCRIPTION: Illustrates obtaining a copy of an Xarray Dataset including inherited coordinates using the to_dataset method. It requires setting the inherit parameter to include or exclude inherited coordinates.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/getting-started-guide/quick-overview.rst#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nds_inherited = dt[\"simulation/coarse\"].to_dataset()\nds_inherited\n```\n\n----------------------------------------\n\nTITLE: Creating an Example Dataset in Xarray Python\nDESCRIPTION: This snippet shows how to create a simple dataset using Xarray with random values and coordinates. No external dependencies are required aside from numpy, pandas, and xarray libraries. It creates a dataset named 'ds' with dimensions 'x' and 'y' and random values for a variable 'foo'.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/groupby.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport pandas as pd\nimport xarray as xr\n\nnp.random.seed(123456)\n\nds = xr.Dataset(\n    {\"foo\": ((\"x\", \"y\"), np.random.rand(4, 3))},\n    coords={\"x\": [10, 20, 30, 40], \"letters\": (\"x\", list(\"abba\"))},\n)\narr = ds[\"foo\"]\nds\n```\n\n----------------------------------------\n\nTITLE: Specifying DataArray with Dictionary Coordinates in Python\nDESCRIPTION: Shows the creation of a DataArray with coordinates provided as a dictionary, allowing the inclusion of additional coordinates unrelated to dimensions. This method requires explicit dimension names, which can be accessed and modified later.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/data-structures.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nxr.DataArray(\n    data,\n    coords={\n        \"time\": times,\n        \"space\": locs,\n        \"const\": 42,\n        \"ranking\": (\"space\", [1, 2, 3]),\n    },\n    dims=[\"time\", \"space\"],\n)\n```\n\nLANGUAGE: python\nCODE:\n```\nxr.DataArray(\n    data,\n    coords={\n        \"time\": times,\n        \"space\": locs,\n        \"const\": 42,\n        \"ranking\": ((\"time\", \"space\"), np.arange(12).reshape(4, 3)),\n    },\n    dims=[\"time\", \"space\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Dataset from Random Data with Xarray\nDESCRIPTION: This code snippet initializes an xarray Dataset using randomly generated temperature and precipitation data, along with coordinates for location and time. The dependencies required are numpy and pandas for array manipulations.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/data-structures.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nnp.random.seed(0)\n    temperature = 15 + 8 * np.random.randn(2, 3, 4)\n    precipitation = 10 * np.random.rand(2, 3, 4)\n    lon = [-99.83, -99.32]\n    lat = [42.25, 42.21]\n    instruments = [\"manufac1\", \"manufac2\", \"manufac3\"]\n    time = pd.date_range(\"2014-09-06\", periods=4)\n    reference_time = pd.Timestamp(\"2014-09-05\")\n\n    ds = xr.Dataset(\n        {\n            \"temperature\": (\"[loc, instrument, time]\", temperature),\n            \"precipitation\": (\"[loc, instrument, time]\", precipitation),\n        },\n        coords={\n            \"lon\": (\"[loc]\", lon),\n            \"lat\": (\"[loc]\", lat),\n            \"instrument\": instruments,\n            \"time\": time,\n            \"reference_time\": reference_time,\n        },\n    )\n```\n\n----------------------------------------\n\nTITLE: Using the .dt Accessor for Datetime Components - Python\nDESCRIPTION: This snippet showcases how to access and compute various components of datetime objects using the .dt accessor in Xarray. It includes examples of extracting hour and day of the week from datetime arrays.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/time-series.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ntime = pd.date_range(\"2000-01-01\", freq=\"6h\", periods=365 * 4)\\nds = xr.Dataset({\"foo\": (\"time\", np.arange(365 * 4)), \"time\": time})\\nds.time.dt.hour\\nds.time.dt.dayofweek\n```\n\n----------------------------------------\n\nTITLE: Handling Zero Sum Weights in Python with Xarray\nDESCRIPTION: Shows how weighted operations handle the case where weights sum to zero.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/computation.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndata = xr.DataArray([1.0, 1.0])\nweights = xr.DataArray([-1.0, 1.0])\n\ndata.weighted(weights).sum()\n```\n\n----------------------------------------\n\nTITLE: Differentiating Multidimensional Arrays in Python with Xarray\nDESCRIPTION: Demonstrates differentiation on a multidimensional array along a specified dimension.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/computation.rst#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\na = xr.DataArray(\n    np.arange(8).reshape(4, 2), dims=[\"x\", \"y\"], coords={\"x\": [0.1, 0.11, 0.2, 0.3]}\n)\na.differentiate(\"x\")\n```\n\n----------------------------------------\n\nTITLE: Handling Mean with Zero Sum Weights in Python with Xarray\nDESCRIPTION: Demonstrates that weighted mean returns NaN when weights sum to zero.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/computation.rst#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ndata.weighted(weights).mean()\n```\n\n----------------------------------------\n\nTITLE: Generating Summary Statistics with Pandas\nDESCRIPTION: Calculates descriptive statistics for the weather dataset using the pandas describe() method after conversion from xarray.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/examples/weather-data.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndf.describe()\n```\n\n----------------------------------------\n\nTITLE: Plotting 2D Data on Map without Inferring Intervals in Python\nDESCRIPTION: This snippet demonstrates how to plot 2D data on a map using Xarray and Cartopy without inferring cell boundaries. It creates a PlateCarree projection, plots the data using pcolormesh, adds scatter points, coastlines, and gridlines.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/plotting.rst#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nimport cartopy.crs as ccrs\n\nax = plt.subplot(projection=ccrs.PlateCarree())\nda.plot.pcolormesh(x=\"lon\", y=\"lat\", ax=ax)\nax.scatter(lon, lat, transform=ccrs.PlateCarree())\nax.coastlines()\nax.gridlines(draw_labels=True)\n```\n\n----------------------------------------\n\nTITLE: Running Xarray Benchmark Tests\nDESCRIPTION: Command to run benchmark tests for Xarray using airspeed-velocity (asv) tool. This installs conda environments for testing.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/getting-started-guide/installing.rst#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nasv run  # this will install some conda environments in ./.asv/envs\n```\n\n----------------------------------------\n\nTITLE: Setting Global Options in Xarray\nDESCRIPTION: Examples of setting global options in xarray for file cache size and attribute preservation during operations.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_60\n\nLANGUAGE: python\nCODE:\n```\nxarray.set_options(file_cache_maxsize=128)\nxarray.set_options(keep_attrs=True)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Time Series Data with Pandas\nDESCRIPTION: Creates a time series plot of temperature data averaged across locations using pandas plotting functionality.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/examples/weather-data.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nds.mean(dim=\"location\").to_dataframe().plot()\n```\n\n----------------------------------------\n\nTITLE: Calculating ROMS Vertical Coordinates\nDESCRIPTION: Implements the ROMS vertical coordinate transformation equations for different Vtransform values, creating a lazily evaluated vertical coordinate system.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/examples/ROMS_ocean_model.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nif ds.Vtransform == 1:\n    Zo_rho = ds.hc * (ds.s_rho - ds.Cs_r) + ds.Cs_r * ds.h\n    z_rho = Zo_rho + ds.zeta * (1 + Zo_rho / ds.h)\nelif ds.Vtransform == 2:\n    Zo_rho = (ds.hc * ds.s_rho + ds.Cs_r * ds.h) / (ds.hc + ds.h)\n    z_rho = ds.zeta + (ds.zeta + ds.h) * Zo_rho\n\nds.coords[\"z_rho\"] = z_rho.transpose()\nds.salt\n```\n\n----------------------------------------\n\nTITLE: Dataset and DataArray Conversion Example\nDESCRIPTION: Demonstrates conversion between Dataset and DataArray objects including attribute and coordinate preservation.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_76\n\nLANGUAGE: python\nCODE:\n```\nds = xray.Dataset({'a': 1, 'b': ('x', [1, 2, 3])}, coords={'c': 42}, attrs={'Conventions': 'None'})\nds.to_dataarray()\nds.to_dataarray().to_dataset(dim='variable')\n```\n\n----------------------------------------\n\nTITLE: Accessing Inherited Coordinates in DataTree in Python with xarray\nDESCRIPTION: This snippet demonstrates how to access inherited coordinates in a DataTree. It shows how coordinates are automatically included when accessing lower-level trees through the dataset property or to_dataset() method.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/data-structures.rst#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ndt2[\"/weather\"]\n\ndt2[\"/weather/temperature\"].dataset\n\ndt2[\"/weather/temperature\"].to_dataset()\n\ndt2[\"/weather/temperature\"].to_dataset(inherit=False)\n```\n\n----------------------------------------\n\nTITLE: Accessing MultiIndex Levels in Xarray\nDESCRIPTION: Demonstrates how to access individual levels of a MultiIndex coordinate in Xarray as virtual coordinates.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/data-structures.rst#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nmda[\"band\"]\nmda.wn\n```\n\n----------------------------------------\n\nTITLE: Combining Datasets with xarray's combine_by_coords in Python\nDESCRIPTION: The code demonstrates using xarray's combine_by_coords to merge DataArrays based on their dimension coordinates. This process ensures datasets are combined correctly according to their specified coordinates rather than their order in the input list. The dependencies include the xarray library for handling the DataArrays. The function takes a list of datasets, potentially including different dimensions, and outputs a single, combined dataset.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/combining.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nx1 = xr.DataArray(name=\"foo\", data=np.random.randn(3), coords=[(\"x\", [0, 1, 2])])\nx2 = xr.DataArray(name=\"foo\", data=np.random.randn(3), coords=[(\"x\", [3, 4, 5])])\nxr.combine_by_coords([x2, x1])\n```\n\n----------------------------------------\n\nTITLE: Concatenating with New Dimension Names\nDESCRIPTION: This snippet illustrates how to concatenate DataArray objects using a new dimension name, inserting it as the first dimension of the resulting object.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/combining.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nxr.concat([da.isel(x=0), da.isel(x=1)], \"new_dim\")\n```\n\n----------------------------------------\n\nTITLE: Using pathlib.Path with xarray.open_dataset in Python\nDESCRIPTION: Demonstrates support for pathlib.Path objects in xarray I/O functions like open_dataset. The example imports Path, constructs file paths, and opens a dataset.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_64\n\nLANGUAGE: Python\nCODE:\n```\nfrom pathlib import Path  # In Python 2, use pathlib2!\n\ndata_dir = Path(\"data/\")\n\none_file = data_dir / \"dta_for_month_01.nc\"\n\nxr.open_dataset(one_file)\n```\n\n----------------------------------------\n\nTITLE: Plotting Multiple Lines from 2D DataArray in Xarray\nDESCRIPTION: Shows how to use the line plot method to create multiple line plots from a 2D DataArray. Demonstrates the use of the 'hue' parameter to differentiate lines and plotting against different dimensions.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/examples/visualization_gallery.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nair = ds.air - 273.15  # to celsius\n\n# Prepare the figure\nf, (ax1, ax2) = plt.subplots(1, 2, figsize=(8, 4), sharey=True)\n\n# Selected latitude indices\nisel_lats = [10, 15, 20]\n\n# Temperature vs longitude plot - illustrates the \"hue\" kwarg\nair.isel(time=0, lat=isel_lats).plot.line(ax=ax1, hue=\"lat\")\nax1.set_ylabel(\"°C\")\n\n# Temperature vs time plot - illustrates the \"x\" and \"add_legend\" kwargs\nair.isel(lon=30, lat=isel_lats).plot.line(ax=ax2, x=\"time\", add_legend=False)\nax2.set_ylabel(\"\")\n\n# Show\nplt.tight_layout()\n```\n\n----------------------------------------\n\nTITLE: Checking if node is leaf in xarray DataTree\nDESCRIPTION: Demonstrates checking if a node is a leaf node (has no children) using the `is_leaf` method. Also gets the list of leaf node names from the tree using the `leaves` property.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/hierarchical-data.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n\n    primates.is_leaf\n    [node.name for node in vertebrates.leaves]\n```\n\n----------------------------------------\n\nTITLE: Writing Data Regions to Zarr Store in Python\nDESCRIPTION: Shows different methods of writing data to specific regions in an existing zarr store using auto-detection and explicit slice specifications.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/io.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nds = xr.Dataset({\"foo\": (\"x\", np.arange(30))}, coords={\"x\": np.arange(30)})\n# Any of the following region specifications are valid\nds.isel(x=slice(0, 10)).to_zarr(path, region=\"auto\")\nds.isel(x=slice(10, 20)).to_zarr(path, region={\"x\": \"auto\"})\nds.isel(x=slice(20, 30)).to_zarr(path, region={\"x\": slice(20, 30)})\n```\n\n----------------------------------------\n\nTITLE: Plotting 2D Data on Map with Inferred Intervals in Python\nDESCRIPTION: This snippet shows how to plot 2D data on a map using Xarray and Cartopy while inferring cell boundaries. It uses the 'infer_intervals' parameter to calculate cell edges, which can be useful for certain types of data visualization.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/plotting.rst#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nax = plt.subplot(projection=ccrs.PlateCarree())\nda.plot.pcolormesh(x=\"lon\", y=\"lat\", ax=ax, infer_intervals=True)\nax.scatter(lon, lat, transform=ccrs.PlateCarree())\nax.coastlines()\nax.gridlines(draw_labels=True)\n```\n\n----------------------------------------\n\nTITLE: Creating a Complex DataTree with Coordinate Inheritance in Python with xarray\nDESCRIPTION: This complex example demonstrates creating a DataTree with multiple levels and coordinate inheritance. It shows how to set up coordinates, create fake data, and construct a tree with weather and satellite data nodes.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/data-structures.rst#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n# Set up coordinates\ntime = xr.DataArray(data=[\"2022-01\", \"2023-01\"], dims=\"time\")\nstations = xr.DataArray(data=list(\"abcdef\"), dims=\"station\")\nlon = [-100, -80, -60]\nlat = [10, 20, 30]\n\n# Set up fake data\nwind_speed = xr.DataArray(np.ones((2, 6)) * 2, dims=(\"time\", \"station\"))\npressure = xr.DataArray(np.ones((2, 6)) * 3, dims=(\"time\", \"station\"))\nair_temperature = xr.DataArray(np.ones((2, 6)) * 4, dims=(\"time\", \"station\"))\ndewpoint = xr.DataArray(np.ones((2, 6)) * 5, dims=(\"time\", \"station\"))\ninfrared = xr.DataArray(np.ones((2, 3, 3)) * 6, dims=(\"time\", \"lon\", \"lat\"))\ntrue_color = xr.DataArray(np.ones((2, 3, 3)) * 7, dims=(\"time\", \"lon\", \"lat\"))\n\ndt2 = xr.DataTree.from_dict(\n    {\n        \"/\": xr.Dataset(\n            coords={\"time\": time},\n        ),\n        \"/weather\": xr.Dataset(\n            coords={\"station\": stations},\n            data_vars={\n                \"wind_speed\": wind_speed,\n                \"pressure\": pressure,\n            },\n        ),\n        \"/weather/temperature\": xr.Dataset(\n            data_vars={\n                \"air_temperature\": air_temperature,\n                \"dewpoint\": dewpoint,\n            },\n        ),\n        \"/satellite\": xr.Dataset(\n            coords={\"lat\": lat, \"lon\": lon},\n            data_vars={\n                \"infrared\": infrared,\n                \"true_color\": true_color,\n            },\n        ),\n    },\n)\ndt2\n```\n\n----------------------------------------\n\nTITLE: Summing DataArray with Sparse Array\nDESCRIPTION: This snippet demonstrates how xarray automatically uses the numpy-like array methods when you call the corresponding xarray method.  It sums the DataArray along the 'j' dimension.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/duckarrays.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n\"s_da.sum(dim=\"j\")\"\n```\n\n----------------------------------------\n\nTITLE: Loading and Preparing xarray Dataset for Interpolation\nDESCRIPTION: This snippet loads an example air temperature dataset, sorts it by latitude, and selects a subset of the data for demonstration purposes.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/examples/apply_ufunc_vectorize_1d.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport xarray as xr\nimport numpy as np\n\nxr.set_options(display_style=\"html\")  # fancy HTML repr\n\nair = (\n    xr.tutorial.load_dataset(\"air_temperature\")\n    .air.sortby(\"lat\")  # np.interp needs coordinate in ascending order\n    .isel(time=slice(4), lon=slice(3))  # choose a small subset for convenience\n)\nair\n```\n\n----------------------------------------\n\nTITLE: Declaring Xarray Backend Entrypoint in pyproject.toml (Poetry)\nDESCRIPTION: This snippet shows how to declare an entrypoint for an Xarray backend in a `pyproject.toml` file when using Poetry. The entrypoint enables Xarray to discover and load your custom backend.  The `my_engine` name will be passed to `xarray.open_dataset` as the `engine` argument.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/internals/how-to-add-new-backend.rst#2025-04-21_snippet_3\n\nLANGUAGE: TOML\nCODE:\n```\n\"[tool.poetry.plugins.\\\"xarray.backends\\\"]\\nmy_engine = \\\"my_package.my_module:MyBackendEntrypoint\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Xarray and Plotting\nDESCRIPTION: This snippet imports necessary Python libraries for data manipulation, visualization, and working with Xarray datasets. It includes numpy, pandas, xarray, cartopy, and matplotlib.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/examples/multidimensional-coords.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%matplotlib inline\nimport numpy as np\nimport pandas as pd\nimport xarray as xr\nimport cartopy.crs as ccrs\nfrom matplotlib import pyplot as plt\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Xarray Time Series Analysis in Python\nDESCRIPTION: Imports the necessary Python libraries for data analysis and visualization: numpy for numerical operations, pandas for data manipulation, xarray for labeled multi-dimensional arrays, and matplotlib for plotting.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/examples/monthly-means.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%matplotlib inline\nimport numpy as np\nimport pandas as pd\nimport xarray as xr\nimport matplotlib.pyplot as plt\n```\n\n----------------------------------------\n\nTITLE: Accessing siblings in xarray DataTree\nDESCRIPTION: Demonstrates how to access the siblings of a node within the DataTree, showing that Bart and Lisa are recognized as siblings.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/hierarchical-data.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n\n    list(homer[\"Bart\"].siblings)\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents Structure in reStructuredText\nDESCRIPTION: This code snippet defines a table of contents (toctree) in reStructuredText format for the xarray documentation. It specifies a maximum depth of 2 levels and hides the TOC from direct display while listing the key sections of the getting started guide.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/getting-started-guide/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n   :hidden:\n\n   why-xarray\n   installing\n   quick-overview\n   faq\n```\n\n----------------------------------------\n\nTITLE: Sorting DataArray or Dataset using Xarray in Python\nDESCRIPTION: Illustrates sorting techniques for DataArray or Dataset based on specified coordinates in ascending or descending order using sortby in Xarray. This can be executed with single or multiple 1D DataArray objects.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/reshaping.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nds = xr.Dataset(\n    {\n        \"A\": ((\"x\", \"y\"), [[1, 2], [3, 4]]),\n        \"B\": ((\"x\", \"y\"), [[5, 6], [7, 8]]),\n    },\n    coords={\"x\": [\"b\", \"a\"], \"y\": [1, 0]},\n)\ndax = xr.DataArray([100, 99], [(\"x\", [0, 1])])\nday = xr.DataArray([90, 80], [(\"y\", [0, 1])])\nds.sortby([day, dax])\n```\n\nLANGUAGE: python\nCODE:\n```\nds.sortby(\"x\")\nds.sortby([\"y\", \"x\"])\nds.sortby([\"y\", \"x\"], ascending=False)\n```\n\n----------------------------------------\n\nTITLE: Importing and Computing with Xarray and Dask\nDESCRIPTION: This code snippet demonstrates how to import the Xarray library, open a Zarr dataset, and compute a result using Dask for parallel processing. Xarray, with Dask integration, simplifies handling larger-than-memory datasets by abstracting parallelism.\nDependencies: Xarray, Dask\nKey Parameters: ds - a dataset opened from a Zarr store, timeseries - the computed mean over certain dimensions\nExpected Output: Computed timeseries data\nConstraints: Ensure Dask is installed for optimal operation.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/dask.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport xarray as xr\n\nds = xr.open_zarr(\"/path/to/data.zarr\")\ntimeseries = ds[\"temp\"].mean(dim=[\"x\", \"y\"]).compute()  # Compute result\n```\n\n----------------------------------------\n\nTITLE: Filtering DataTree Nodes Based on Conditions in Python\nDESCRIPTION: Demonstrates how to filter a DataTree to retain only nodes that meet certain conditions using the filter method.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/hierarchical-data.rst#2025-04-21_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nsimpsons = xr.DataTree.from_dict(\n    {\n        \"/\": xr.Dataset({\"age\": 83}),\n        \"/Herbert\": xr.Dataset({\"age\": 40}),\n        \"/Homer\": xr.Dataset({\"age\": 39}),\n        \"/Homer/Bart\": xr.Dataset({\"age\": 10}),\n        \"/Homer/Lisa\": xr.Dataset({\"age\": 8}),\n        \"/Homer/Maggie\": xr.Dataset({\"age\": 1}),\n    },\n    name=\"Abe\",\n)\nsimpsons\n\nsimpsons.filter(lambda node: node[\"age\"] > 18)\n```\n\n----------------------------------------\n\nTITLE: Reindexing a DataArray in Python using Xarray\nDESCRIPTION: Demonstrates how to reindex a specific dimension of a DataArray using the reindex method. This allows for changing the labels along a dimension, with new labels being filled with NaN values.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/indexing.rst#2025-04-21_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nda.reindex(space=[\"IA\", \"CA\"])\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Plan View Plot\nDESCRIPTION: Generates a simple plan view plot of salinity using longitude and latitude coordinates without projection.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/examples/ROMS_ocean_model.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nds.salt.isel(s_rho=-1, ocean_time=0).plot(x=\"lon_rho\", y=\"lat_rho\")\n```\n\n----------------------------------------\n\nTITLE: Creating Step Plots for 1D Data\nDESCRIPTION: This snippet shows how to create step plots for 1D data using Xarray, illustrating how the argument 'where' can be utilized to control step placement in the visualization.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/plotting.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nair1d[:20].plot.step(where=\"mid\")\n```\n\n----------------------------------------\n\nTITLE: Accessing Inherited Coordinates in DataTree\nDESCRIPTION: This code demonstrates how to access coordinates defined in parent groups from child groups through coordinate inheritance.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/hierarchical-data.rst#2025-04-21_snippet_45\n\nLANGUAGE: python\nCODE:\n```\ndt.daily.coords\ndt[\"daily/lat\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Maps with Controlled Projections in Xarray\nDESCRIPTION: Demonstrates how to create multiple map plots with controlled projections, extent, and aspect ratio. Uses a LambertConformal projection and sets consistent map features across all subplots.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/examples/visualization_gallery.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nair = ds.air.isel(time=[0, 724]) - 273.15\n\n# This is the map projection we want to plot *onto*\nmap_proj = ccrs.LambertConformal(central_longitude=-95, central_latitude=45)\n\np = air.plot(\n    transform=ccrs.PlateCarree(),  # the data's projection\n    col=\"time\",\n    col_wrap=1,  # multiplot settings\n    aspect=ds.dims[\"lon\"] / ds.dims[\"lat\"],  # for a sensible figsize\n    subplot_kws={\"projection\": map_proj},\n)  # the plot's projection\n\n# We have to set the map's options on all axes\nfor ax in p.axes.flat:\n    ax.coastlines()\n    ax.set_extent([-160, -30, 5, 75])\n```\n\n----------------------------------------\n\nTITLE: Creating Pairplot Visualization with Seaborn\nDESCRIPTION: Generates a pairplot using seaborn to visualize relationships between minimum and maximum temperatures, showing distributions and correlations between variables.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/examples/weather-data.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsns.pairplot(df.reset_index(), vars=ds.data_vars)\n```\n\n----------------------------------------\n\nTITLE: Using Dataset.drop_dims Method in Python\nDESCRIPTION: New drop_dims method added to Dataset class for dropping dimensions.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_58\n\nLANGUAGE: Python\nCODE:\n```\nds.drop_dims(...)\n```\n\n----------------------------------------\n\nTITLE: Handling Missing Values in Aggregations with Xarray\nDESCRIPTION: Shows how aggregation methods like mean or median skip missing values by default in xarray, with the option to change this behavior using skipna=False.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_90\n\nLANGUAGE: python\nCODE:\n```\nxray.DataArray([1, 2, np.nan, 3]).mean()\n```\n\n----------------------------------------\n\nTITLE: Plotting Coordinate Variables using Matplotlib\nDESCRIPTION: This code creates a figure with two subplots to visualize the 'xc' and 'yc' coordinate variables using Matplotlib.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/examples/multidimensional-coords.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfig, (ax1, ax2) = plt.subplots(ncols=2, figsize=(14, 4))\nds.xc.plot(ax=ax1)\nds.yc.plot(ax=ax2)\n```\n\n----------------------------------------\n\nTITLE: Creating a Sparse Array from NumPy Array\nDESCRIPTION: This snippet demonstrates how to create a sparse array object (of the :py:class:`sparse.COO` type) from a numpy array using the `sparse` library. This is useful for representing nD array objects like sparse matrices in a memory-efficient manner.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/duckarrays.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"from sparse import COO\n\n    x = np.eye(4, dtype=np.uint8)  # create diagonal identity matrix\n    s = COO.from_numpy(x)\n    s\"\n```\n\n----------------------------------------\n\nTITLE: Defining Minimal Variable Interface in Xarray\nDESCRIPTION: Establishes core requirements for a new base variable class with minimal dependencies and clear structure\nSOURCE: https://github.com/pydata/xarray/blob/main/design_notes/named_array_design_doc.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass BaseVariable:\n    dims: tuple\n    data: ArrayLike\n    attrs: dict\n```\n\n----------------------------------------\n\nTITLE: Validating apply_ufunc Results\nDESCRIPTION: This snippet applies the custom interpolation function using apply_ufunc, adds the new latitude coordinates, and compares the result with xarray's built-in interpolation method to verify correctness.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/examples/apply_ufunc_vectorize_1d.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ninterped = xr.apply_ufunc(\n    interp1d_np,  # first the function\n    air.isel(time=0, lon=0),  # now arguments in the order expected by 'interp1_np'\n    air.lat,\n    newlat,\n    input_core_dims=[[\"lat\"], [\"lat\"], []],  # list with one entry per arg\n    output_core_dims=[[\"lat\"]],\n    exclude_dims=set((\"lat\",)),  # dimensions allowed to change size. Must be set!\n)\ninterped[\"lat\"] = newlat  # need to add this manually\nxr.testing.assert_allclose(expected.isel(time=0, lon=0), interped)\n```\n\n----------------------------------------\n\nTITLE: Using cross function in Xarray\nDESCRIPTION: Reference to the new top-level cross function introduced in v0.21.0 for computing the cross product of arrays.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nxr.cross\n```\n\n----------------------------------------\n\nTITLE: Setting Global Configuration Options with Xarray\nDESCRIPTION: This snippet demonstrates how to set a global configuration option for arithmetic join behavior in Xarray. The set_options function is utilized to modify the default settings across the entire session.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/options.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nxr.set_options(arithmetic_join=\"exact\")\n```\n\n----------------------------------------\n\nTITLE: Calculating Month Lengths for Time Weighting in Xarray\nDESCRIPTION: Creates a DataArray containing the number of days in each month for the time coordinate. This uses xarray's datetime accessor to automatically handle the calendar type (in this case 'noleap').\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/examples/monthly-means.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nmonth_length = ds.time.dt.days_in_month\nmonth_length\n```\n\n----------------------------------------\n\nTITLE: Using Custom Geo Accessor\nDESCRIPTION: Example showing how to use the custom geo accessor to access geographical properties and methods on a Dataset object.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/internals/extending-xarray.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nds = xr.Dataset({\"longitude\": np.linspace(0, 10), \"latitude\": np.linspace(0, 20)})\nds.geo.center\nds.geo.plot()\n```\n\n----------------------------------------\n\nTITLE: Grid Cell Grouping in Multidimensional Data in Xarray Python\nDESCRIPTION: Shows how to groupby each cell in a grid by stacking multiple dimensions in Xarray. Requires stacking/aligned DataArray. The operation is demonstrated through stacking, grouping, and unstacking operations.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/groupby.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nstacked = da.stack(gridcell=[\"ny\", \"nx\"])\nstacked.groupby(\"gridcell\").sum(...).unstack(\"gridcell\")\n```\n\n----------------------------------------\n\nTITLE: Xarray Code Import Example\nDESCRIPTION: Example showing use of Xarray core methods including date_range, cftime_range with frequency strings\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nxr.date_range(freq='D')\nxr.cftime_range(freq='-1YE')\n```\n\n----------------------------------------\n\nTITLE: Merging Datasets in Xarray\nDESCRIPTION: This snippet provides an example of merging multiple Dataset or DataArray objects using the merge method, ensuring that the merged dataset is aligned on the union of all index coordinates.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/combining.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nxr.merge([ds, ds.rename({\"foo\": \"bar\"})])\\nxr.merge([xr.DataArray(n, name=\"var%d\" % n) for n in range(5)])\n```\n\n----------------------------------------\n\nTITLE: Parallelizing Function with Dask for Efficiency\nDESCRIPTION: This code snippet demonstrates how to parallelize the application of the vectorized function using dask alongside xarray's 'apply_ufunc'. It specifies chunk sizes and output data types, ensuring proper handling of dimensions for efficiency in processing. The snippet concludes by checking that the outputs are as expected.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/examples/apply_ufunc_vectorize_1d.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ninterped = xr.apply_ufunc(\n    interp1d_np,  # first the function\n    air.chunk(\n        {\"time\": 2, \"lon\": 2}\n    ),  # now arguments in the order expected by 'interp1_np'\n    air.lat,  # as above\n    newlat,  # as above\n    input_core_dims=[['lat'], ['lat'], ['new_lat']],  # list with one entry per arg\n    output_core_dims=[['new_lat']],  # returned data has one dimension\n    exclude_dims=set((\"lat\",)),  # dimensions allowed to change size. Must be a set!\n    vectorize=True,  # loop over non-core dims\n    dask=\"parallelized\",\n    output_dtypes=[air.dtype],  # one per output\n).rename({\"new_lat\": \"lat\"})\ninterped[\"lat\"] = newlat  # need to add this manually\nxr.testing.assert_allclose(expected.transpose(*interped.dims), interped)\n```\n\n----------------------------------------\n\nTITLE: Binary Arithmetic with GroupBy and Dataset in Xarray Python\nDESCRIPTION: Illustrates performing binary arithmetic operations between a GroupBy object and a Dataset or DataArray in Xarray. It requires compatible GroupBy and Dataset/data arrays, using the unique grouped values as index coordinates.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/groupby.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nalt = arr.groupby(\"letters\").mean(...)\nalt\nds.groupby(\"letters\") - alt\n```\n\n----------------------------------------\n\nTITLE: Implementing 1D Interpolation Using Numba's Guvectorize Decorator\nDESCRIPTION: This snippet demonstrates how to create a guvectorize-decorated function for 1D interpolation. The function is compiled by Numba and can loop over non-core dimensions in parallel. It converts a standard interpolation function to one that modifies an output array in-place rather than returning a value.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/examples/apply_ufunc_vectorize_1d.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom numba import float64, guvectorize\n\n\n@guvectorize(\"(float64[:], float64[:], float64[:], float64[:])\", \"(n), (n), (m) -> (m)\")\ndef interp1d_np_gufunc(data, x, xi, out):\n    # numba doesn't really like this.\n    # seem to support fstrings so do it the old way\n    print(\n        \"data: \" + str(data.shape) + \" | x:\" + str(x.shape) + \" | xi: \" + str(xi.shape)\n    )\n    out[:] = np.interp(xi, x, data)\n    # gufuncs don't return data\n    # instead you assign to a the last arg\n    # return np.interp(xi, x, data)\n```\n\n----------------------------------------\n\nTITLE: Using Tolerance in Nearest Neighbor Lookups\nDESCRIPTION: Applies a tolerance constraint to the nearest neighbor lookups in xarray. It limits the distance allowed in inexact lookups to ensure precision.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/indexing.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nda.reindex(x=[1.1, 1.5], method=\"nearest\", tolerance=0.2)\n```\n\n----------------------------------------\n\nTITLE: Using open_mfdataset with optimized parameters for large file sets\nDESCRIPTION: Example of using open_mfdataset with parameters that avoid slow equality comparisons when working with many files that have aligned variables.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_51\n\nLANGUAGE: python\nCODE:\n```\ndata = xr.open_mfdataset(files, concat_dim='time', data_vars='minimal',\n                         coords='minimal', compat='override', join='override')\n```\n\n----------------------------------------\n\nTITLE: Converting DataArray to Masked Array\nDESCRIPTION: Example of creating a random DataArray, applying a condition with where(), and converting to a masked array.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_75\n\nLANGUAGE: python\nCODE:\n```\nda = xray.DataArray(np.random.random_sample(size=(5, 4)))\nda.where(da < 0.5)\nda.where(da < 0.5).to_masked_array(copy=True)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment for Indexing with xarray\nDESCRIPTION: Imports required libraries and sets a random seed for consistent results in xarray data operations. The code establishes a necessary foundational setup for the following indexing tasks.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/indexing.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport pandas as pd\nimport xarray as xr\n\nnp.random.seed(123456)\n```\n\n----------------------------------------\n\nTITLE: Comparing Weighted and Unweighted Seasonal Averages in Xarray\nDESCRIPTION: Calculates unweighted seasonal averages (simple mean) and the difference between weighted and unweighted results for comparison purposes.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/examples/monthly-means.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# only used for comparisons\nds_unweighted = ds.groupby(\"time.season\").mean(\"time\")\nds_diff = ds_weighted - ds_unweighted\n```\n\n----------------------------------------\n\nTITLE: Setting Global Display Width Option in Xarray\nDESCRIPTION: Shows how to set a global display width option for xarray Datasets using set_options function. This affects how datasets are displayed in output.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_80\n\nLANGUAGE: python\nCODE:\n```\nxray.set_options(display_width=80)\n```\n\n----------------------------------------\n\nTITLE: Merging Interpolated Data with Original DataArray - Python\nDESCRIPTION: This snippet merges the interpolated values into the original DataArray for specified time periods.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/interpolation.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nda_dt64.interp(time=pd.date_range(\"1/1/2000\", \"1/3/2000\", periods=3))\n```\n\n----------------------------------------\n\nTITLE: Converting xarray DataArray to pandas Series\nDESCRIPTION: This snippet shows how to convert an xarray DataArray to a pandas Series using the `to_series()` method. The conversion maintains the relationship between Dataset and DataArray, reflecting the same data in a Series format.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/pandas.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ns = ds[\"foo\"].to_series()\n```\n\n----------------------------------------\n\nTITLE: Changing Automatic Alignment Type with set_options\nDESCRIPTION: Demonstrates changing the default automatic alignment type from \"inner\" to \"outer\" using the set_options context manager.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/computation.rst#2025-04-21_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nwith xr.set_options(arithmetic_join=\"outer\"):\n    arr + arr[:1]\narr + arr[:1]\n```\n\n----------------------------------------\n\nTITLE: Shifting and Rolling Data in Xarray using Python\nDESCRIPTION: Describes methods to shift and roll coordinate labels on a Dataset using the shift and roll methods in Xarray. Useful for data reorganization without altering the raw values.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/reshaping.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\narray = xr.DataArray([1, 2, 3, 4], dims=\"x\")\narray.shift(x=2)\narray.roll(x=2, roll_coords=True)\n```\n\n----------------------------------------\n\nTITLE: Preserving Methods in xarray.Variable\nDESCRIPTION: This snippet shows the methods of xarray.Variable that are to be preserved for continued functionality, particularly focusing on sorting, NaN handling, lazy data handling, xarray-specific methods, and methods for reductions and numpy-like functionality.\nSOURCE: https://github.com/pydata/xarray/blob/main/design_notes/named_array_design_doc.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Sorting\n   Variable.argsort\n   Variable.searchsorted\n\n# NaN handling\n   Variable.fillna\n   Variable.isnull\n   Variable.notnull\n\n# Lazy data handling\n   Variable.chunk # Could instead have accessor interface and recommend users use `Variable.dask.chunk` and `Variable.cubed.chunk`?\n   Variable.to_numpy()\n   Variable.as_numpy()\n\n# Xarray-specific\n   Variable.get_axis_num\n   Variable.isel\n   Variable.to_dict\n\n# Reductions\n   Variable.reduce\n   Variable.all\n   Variable.any\n   Variable.argmax\n   Variable.argmin\n   Variable.count\n   Variable.max\n   Variable.mean\n   Variable.median\n   Variable.min\n   Variable.prod\n   Variable.quantile\n   Variable.std\n   Variable.sum\n   Variable.var\n\n# Accumulate\n   Variable.cumprod\n   Variable.cumsum\n\n# numpy-like Methods\n   Variable.astype\n   Variable.copy\n   Variable.clip\n   Variable.round\n   Variable.item\n   Variable.where\n\n# Reordering/Reshaping\n   Variable.squeeze\n   Variable.pad\n   Variable.roll\n   Variable.shift\n```\n\n----------------------------------------\n\nTITLE: Plotting Coarsened Regions using Faceting in Python with Xarray\nDESCRIPTION: This snippet shows how to plot the 9 coarsened regions created from the air temperature data using Xarray's faceting functionality. It creates a grid of plots to visualize how the regions relate to the original data.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/reshaping.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n@savefig post_coarsening.png\nregions.isel(time=0).plot(\n    x=\"x_fine\", y=\"y_fine\", col=\"x_coarse\", row=\"y_coarse\", yincrease=False\n)\n```\n\n----------------------------------------\n\nTITLE: Loading and Preprocessing Temperature Data in Xarray\nDESCRIPTION: Loads the air_temperature example dataset, converts temperatures from Kelvin to Celsius, and resamples the 6-hourly data to daily values using Xarray's time resampling functionality.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/examples/area_weighted_temperature.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nds = xr.tutorial.load_dataset(\"air_temperature\")\n\n# to celsius\nair = ds.air - 273.15\n\n# resample from 6-hourly to daily values\nair = air.resample(time=\"D\").mean()\n\nair\n```\n\n----------------------------------------\n\nTITLE: Configuring DataArray/Dataset Rolling in Python\nDESCRIPTION: Added an automatic_rechunk parameter to DataArrayRolling.construct() and DatasetRolling.construct() methods to enable automatic rechunking with dask.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nDataArrayRolling.construct(automatic_rechunk=True)\n```\n\nLANGUAGE: Python\nCODE:\n```\nDatasetRolling.construct(automatic_rechunk=True)\n```\n\n----------------------------------------\n\nTITLE: Shuffling xarray DataArray Objects with GroupBy in Python\nDESCRIPTION: Creates a DataArray with categorical labels as coordinates and applies the shuffle_to_chunks method to optimize grouped operations. This approach is particularly beneficial for chunked array types like dask or cubed arrays, as it can improve performance in parallel processing scenarios.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/groupby.rst#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nda = xr.DataArray(\n    dims=\"x\",\n    data=[1, 2, 3, 4, 5, 6],\n    coords={\"label\": (\"x\", \"a b c a b c\".split(\" \"))},\n)\nda.groupby(\"label\").shuffle_to_chunks()\n```\n\n----------------------------------------\n\nTITLE: Navigating xarray DataTree\nDESCRIPTION: Demonstrates how to navigate the DataTree structure using the `parent` and `children` properties to access specific nodes.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/hierarchical-data.rst#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n\n    lisa.parent.children[\"Bart\"].name\n```\n\n----------------------------------------\n\nTITLE: Performing Computations on DataTree in Python\nDESCRIPTION: Demonstrates how to perform computations across a whole DataTree at once, such as calculating mean values for time series data.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/hierarchical-data.rst#2025-04-21_snippet_31\n\nLANGUAGE: python\nCODE:\n```\ndef time_stamps(n_samples, T):\n    \"\"\"Create an array of evenly-spaced time stamps\"\"\"\n    return xr.DataArray(\n        data=np.linspace(0, 2 * np.pi * T, n_samples), dims=[\"time\"]\n    )\n\n\ndef signal_generator(t, f, A, phase):\n    \"\"\"Generate an example electrical-like waveform\"\"\"\n    return A * np.sin(f * t.data + phase)\n\n\ntime_stamps1 = time_stamps(n_samples=15, T=1.5)\ntime_stamps2 = time_stamps(n_samples=10, T=1.0)\n\nvoltages = xr.DataTree.from_dict(\n    {\n        \"/oscilloscope1\": xr.Dataset(\n            {\n                \"potential\": (\n                    \"time\",\n                    signal_generator(time_stamps1, f=2, A=1.2, phase=0.5),\n                ),\n                \"current\": (\n                    \"time\",\n                    signal_generator(time_stamps1, f=2, A=1.2, phase=1),\n                ),\n            },\n            coords={\"time\": time_stamps1},\n        ),\n        \"/oscilloscope2\": xr.Dataset(\n            {\n                \"potential\": (\n                    \"time\",\n                    signal_generator(time_stamps2, f=1.6, A=1.6, phase=0.2),\n                ),\n                \"current\": (\n                    \"time\",\n                    signal_generator(time_stamps2, f=1.6, A=1.6, phase=0.7),\n                ),\n            },\n            coords={\"time\": time_stamps2},\n        ),\n    }\n)\nvoltages\n\nvoltages.mean(dim=\"time\")\n```\n\n----------------------------------------\n\nTITLE: Selecting Data using Geographic Coordinates vs Dimension Coordinates\nDESCRIPTION: Example showing a DataArray with geographic coordinates (lat, lon) that span two dimensions (x, y), demonstrating the need for both geographic indexing and dimensional indexing capabilities.\nSOURCE: https://github.com/pydata/xarray/blob/main/design_notes/flexible_indexes_notes.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> da\n<xarray.DataArray (x: 200, y: 100)>\narray([[...], [...]])\nCoordinates:\n  * lon      (x, y) float64 ...\n  * lat      (x, y) float64 ...\n  * x        (x) float64 ...\n  * y        (y) float64 ...\n```\n\n----------------------------------------\n\nTITLE: DataArray Timedelta Methods in Python\nDESCRIPTION: Provides methods for time-based rounding and adjustment operations on DataArray datetime components\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/api.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nDataArray.dt.floor\n```\n\nLANGUAGE: python\nCODE:\n```\nDataArray.dt.ceil\n```\n\nLANGUAGE: python\nCODE:\n```\nDataArray.dt.round\n```\n\n----------------------------------------\n\nTITLE: Automatic Alignment in Arithmetic Operations with Xarray\nDESCRIPTION: Demonstrates how xarray automatically aligns index labels in arithmetic operations based on the intersection of labels, making manual alignment less necessary.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_87\n\nLANGUAGE: python\nCODE:\n```\nlhs = xray.DataArray([1, 2, 3], [(\"x\", [0, 1, 2])])\nrhs = xray.DataArray([2, 3, 4], [(\"x\", [1, 2, 3])])\nlhs + rhs\n```\n\n----------------------------------------\n\nTITLE: Defining ChunkManagerEntrypoint ABC in Xarray\nDESCRIPTION: Reference to a new Abstract Base Class (ABC) that can be subclassed and registered by alternative chunked array implementations.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nxr.namedarray.parallelcompat.ChunkManagerEntrypoint\n```\n\n----------------------------------------\n\nTITLE: Vectorized Indexing with isel() Method\nDESCRIPTION: Demonstrates vectorized indexing using the isel() method with a DataArray indexer. This provides a more explicit way to perform dimension-specific indexing.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/indexing.rst#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nind = xr.DataArray([[0, 1], [0, 1]], dims=[\"a\", \"b\"])\nda.isel(y=ind)  # same as da[:, ind]\n```\n\n----------------------------------------\n\nTITLE: Vectorized Indexing with loc() Method and Label-based Selection\nDESCRIPTION: Shows how to use vectorized indexing with the loc() method for label-based selection, using DataArray objects containing the target labels.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/indexing.rst#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nind = xr.DataArray([[\"a\", \"b\"], [\"b\", \"a\"]], dims=[\"a\", \"b\"])\nda.loc[:, ind]  # same as da.sel(y=ind)\n```\n\n----------------------------------------\n\nTITLE: Computing Monthly Averages with Resampling\nDESCRIPTION: Resamples the daily temperature data to monthly resolution (month-start) and visualizes the time series for Iowa. Uses the resample method with time frequency specification.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/examples/weather-data.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nmonthly_avg = ds.resample(time=\"1MS\").mean()\nmonthly_avg.sel(location=\"IA\").to_dataframe().plot(style=\"s-\")\n```\n\n----------------------------------------\n\nTITLE: Creating Enhanced Vertical Section Plot\nDESCRIPTION: Creates a more detailed cross-section plot using actual depths and geographical coordinates, with customized dimensions and color limits.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/examples/ROMS_ocean_model.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsection = ds.salt.isel(xi_rho=50, eta_rho=slice(0, 167), ocean_time=0)\nsection.plot(x=\"lon_rho\", y=\"z_rho\", figsize=(15, 6), clim=(25, 35))\nplt.ylim([-100, 1]);\n```\n\n----------------------------------------\n\nTITLE: Selecting Data from All Groups in a DataTree\nDESCRIPTION: This code shows how to select data from all groups at a specific latitude and longitude, and compute statistics across the tree.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/hierarchical-data.rst#2025-04-21_snippet_43\n\nLANGUAGE: python\nCODE:\n```\ndt.sel(lat=75, lon=300)\n\ndt.std(dim=\"time\")\n```\n\n----------------------------------------\n\nTITLE: Automatic Alignment by Coordinate Intersection\nDESCRIPTION: Shows how Xarray enforces alignment between index coordinates during binary operations, with the default result being the intersection of coordinate labels.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/computation.rst#2025-04-21_snippet_32\n\nLANGUAGE: python\nCODE:\n```\narr = xr.DataArray(np.arange(3), [(\"x\", range(3))])\narr + arr[:-1]\n```\n\n----------------------------------------\n\nTITLE: Installing Xarray with Pip\nDESCRIPTION: Command to install Xarray using pip package manager. This assumes required dependencies (numpy and pandas) are already installed.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/getting-started-guide/installing.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ python -m pip install xarray\n```\n\n----------------------------------------\n\nTITLE: Using pint Library Integration Example (Experimental)\nDESCRIPTION: Example showing how to install an experimental version of the pint library needed for integration with Xarray. This is part of the internal changes documented for Xarray development.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_48\n\nLANGUAGE: bash\nCODE:\n```\npip install git+https://github.com/andrewgsavage/pint.git@refs/pull/6/head\n```\n\n----------------------------------------\n\nTITLE: Reducing DataArray with Object Type\nDESCRIPTION: Example showing how the sum() method handles object-type arrays in xarray DataArrays, demonstrating the ability to handle boolean and NaN values.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_62\n\nLANGUAGE: python\nCODE:\n```\nda = xr.DataArray(np.array([True, False, np.nan], dtype=object), dims=\"x\")\nda.sum()\n```\n\n----------------------------------------\n\nTITLE: Assigning Values using xarray's where() Method\nDESCRIPTION: Shows how to use xarray's where() method to conditionally assign values based on coordinate conditions. This provides a flexible way to modify data in specific regions.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/indexing.rst#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n# modify one grid point using xr.where()\nds[\"empty\"] = xr.where(\n    (ds.coords[\"lat\"] == 20) & (ds.coords[\"lon\"] == 260), 100, ds[\"empty\"]\n)\n\n# or modify a 2D region using xr.where()\nmask = (\n    (ds.coords[\"lat\"] > 20)\n    & (ds.coords[\"lat\"] < 60)\n    & (ds.coords[\"lon\"] > 220)\n    & (ds.coords[\"lon\"] < 260)\n)\nds[\"empty\"] = xr.where(mask, 100, ds[\"empty\"])\n```\n\n----------------------------------------\n\nTITLE: Grouping DataArray by Multidimensional Coordinate in Xarray Python\nDESCRIPTION: Shows how to use groupby on a DataArray by multidimensional coordinate, such as longitude, in Xarray. Requires a DataArray with multidimensional coordinates. The example demonstrates summation and function mapping over groups.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/groupby.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nda = xr.DataArray(\n    [[0, 1], [2, 3]],\n    coords={\n        \"lon\": ([\"ny\", \"nx\"], [[30, 40], [40, 50]]),\n        \"lat\": ([\"ny\", \"nx\"], [[10, 10], [20, 20]])\n    },\n    dims=[\"ny\", \"nx\"]\n)\nda\nda.groupby(\"lon\").sum(...)\nda.groupby(\"lon\").map(lambda x: x - x.mean(), shortcut=False)\n```\n\n----------------------------------------\n\nTITLE: Converting Coordinates to Dataset in Xarray\nDESCRIPTION: Shows how to convert coordinates to a dataset object using the to_dataset() method on the coords attribute.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/data-structures.rst#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nds.coords.to_dataset()\n```\n\n----------------------------------------\n\nTITLE: Xarray DateTime Handling Example\nDESCRIPTION: Example showing precision casting of numpy datetime64 and timedelta64 values to nanosecond precision\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nDataArray.expand_dims()\nDataset.expand_dims()\n```\n\n----------------------------------------\n\nTITLE: Reordering Dimensions in Xarray Dataset using Python\nDESCRIPTION: Illustrates how to reorder dimensions of a DataArray or Dataset using the transpose method in Xarray. It allows rearranging an array's dimensions based on specified order, using ellipsis for unspecified dimensions.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/reshaping.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nds = xr.Dataset({\"foo\": ((\"x\", \"y\", \"z\"), [[[42]]]), \"bar\": ((\"y\", \"z\"), [[24]])})\nds.transpose(\"y\", \"z\", \"x\")\nds.transpose(..., \"x\")  # equivalent\nds.transpose()  # reverses all dimensions\n```\n\n----------------------------------------\n\nTITLE: Assigning Values to All Variables in a Dataset\nDESCRIPTION: Demonstrates how to assign values to all variables in a Dataset at once using different indexing methods. Shows assignment of scalars, coordinates, and entire datasets.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/indexing.rst#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nds_org = xr.tutorial.open_dataset(\"eraint_uvz\").isel(\n    latitude=slice(56, 59), longitude=slice(255, 258), level=0\n)\n# set all values to 0\nds = xr.zeros_like(ds_org)\nds\n\n# by integer\nds[dict(latitude=2, longitude=2)] = 1\nds[\"u\"]\nds[\"v\"]\n\n# by label\nds.loc[dict(latitude=47.25, longitude=[11.25, 12])] = 100\nds[\"u\"]\n\n# dataset as new values\nnew_dat = ds_org.loc[dict(latitude=48, longitude=[11.25, 12])]\nnew_dat\nds.loc[dict(latitude=47.25, longitude=[11.25, 12])] = new_dat\nds[\"u\"]\n```\n\n----------------------------------------\n\nTITLE: Behavior of Repeated Value Assignment in Xarray\nDESCRIPTION: Illustrates how repeated value assignment works in Xarray, similar to NumPy, where multiple assignments to the same location are processed sequentially rather than cumulatively.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/indexing.rst#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nda = xr.DataArray([0, 1, 2, 3], dims=[\"x\"])\nind = xr.DataArray([0, 0, 0], dims=[\"x\"])\nda[ind] -= 1\nda\n```\n\n----------------------------------------\n\nTITLE: Filling Missing Values with Climatology\nDESCRIPTION: Demonstrates how to fill missing values in a dataset using climatological values. Creates a dataset with artificial missing values and then fills them using monthly climatology with the groupby.fillna method.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/examples/weather-data.ipynb#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# throw away the first half of every month\nsome_missing = ds.tmin.sel(time=ds[\"time.day\"] > 15).reindex_like(ds)\nfilled = some_missing.groupby(\"time.month\").fillna(climatology.tmin)\nboth = xr.Dataset({\"some_missing\": some_missing, \"filled\": filled})\nboth\n```\n\n----------------------------------------\n\nTITLE: Generating Dimension Subsets with xrst\nDESCRIPTION: Examples of using xrst.unique_subset_of() to generate test cases for dimension names and dimension size mappings\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/testing.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndim_sizes = {\"x\": 2, \"y\": 3, \"z\": 4}\nxrst.unique_subset_of(dim_sizes).example()\nxrst.unique_subset_of(dim_sizes).example()\n```\n\n----------------------------------------\n\nTITLE: Indexing DataArray with Point-wise Selection in Python\nDESCRIPTION: Demonstrates usage of isel_points and sel_points methods for indexing xarray DataArrays by position and label.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_73\n\nLANGUAGE: python\nCODE:\n```\nda.isel_points(x=[0, 1, 6], y=[0, 1, 0], dim=\"points\")\nda.sel_points(x=[\"a\", \"b\", \"g\"], y=[0, 10, 0], dim=\"points\")\n```\n\n----------------------------------------\n\nTITLE: Performing Lazy Indexing Operations\nDESCRIPTION: Shows how indexing operations with isel() maintain the lazy loading behavior, changing the shape of the data without loading it into memory.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/internals/internal-design.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nvar.isel(time=0)\n```\n\n----------------------------------------\n\nTITLE: Computing Statistics on DataTree with Inherited Coordinates in Python\nDESCRIPTION: Shows how to compute standard deviation along the time dimension across an entire DataTree, where operations respect the coordinate system including inherited coordinates.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/hierarchical-data.rst#2025-04-21_snippet_48\n\nLANGUAGE: python\nCODE:\n```\ndt.std(dim=\"time\")\n```\n\n----------------------------------------\n\nTITLE: Creating Weighted Arrays in Python with Xarray\nDESCRIPTION: Demonstrates how to create and prepare data for weighted statistical operations using sample precipitation and weight data.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/computation.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ncoords = dict(month=(\"month\", [1, 2, 3]))\n\nprec = xr.DataArray([1.1, 1.0, 0.9], dims=(\"month\",), coords=coords)\nweights = xr.DataArray([31, 28, 31], dims=(\"month\",), coords=coords)\n\nweighted_prec = prec.weighted(weights)\nweighted_prec\n```\n\n----------------------------------------\n\nTITLE: Working with Datetime Shortcuts in Xarray\nDESCRIPTION: Demonstrates how datetime shortcuts like 'time.month' return a DataArray with a simplified name, making it easier to use the results with groupby and selection operations.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_91\n\nLANGUAGE: python\nCODE:\n```\ntime = xray.DataArray(\n    pd.date_range(\"2000-01-01\", periods=365), dims=\"time\", name=\"time\"\n)\ncounts = time.groupby(\"time.month\").count()\ncounts.sel(month=2)\n```\n\n----------------------------------------\n\nTITLE: Rechunking Time Data with TimeResampler in Python\nDESCRIPTION: Example showing how to rechunk time-series data using a frequency-based approach in xarray\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nDataset.chunk(time=TimeResampler(\"YE\"))\n```\n\n----------------------------------------\n\nTITLE: Declaring Xarray Backend Entrypoint in pyproject.toml\nDESCRIPTION: This snippet shows how to declare an entrypoint for an Xarray backend in a `pyproject.toml` file.  The entrypoint allows Xarray to discover and load your custom backend. The `my_engine` name will be passed to `xarray.open_dataset` as the `engine` argument.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/internals/how-to-add-new-backend.rst#2025-04-21_snippet_2\n\nLANGUAGE: TOML\nCODE:\n```\n\"[project.entry-points.\\\"xarray.backends\\\"]\\nmy_engine = \\\"my_package.my_module:MyBackendEntrypoint\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Selecting Data with Multiple Coordinates on a Single Dimension\nDESCRIPTION: Example showing a DataArray with river profile data that has multiple coordinates (drainage_area and chi) along a single dimension, demonstrating the current limitation in selecting data using either coordinate.\nSOURCE: https://github.com/pydata/xarray/blob/main/design_notes/flexible_indexes_notes.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> da\n<xarray.DataArray (river_profile: 100)>\narray([...])\nCoordinates:\n  * drainage_area  (river_profile) float64 ...\n  * chi            (river_profile) float64 ...\n```\n\n----------------------------------------\n\nTITLE: Calculating Weighted Mean in Python with Xarray\nDESCRIPTION: Demonstrates computing a weighted mean along a specific dimension using the weighted method.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/computation.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nweighted_prec.mean(dim=\"month\")\n```\n\n----------------------------------------\n\nTITLE: Combining Datasets with xarray.combine_by_coords in Python\nDESCRIPTION: Demonstrates how to combine two xarray Datasets with overlapping coordinates using the combine_by_coords function. This example creates two Datasets with partially overlapping coordinates in both x and y dimensions, then combines them to form a unified Dataset that preserves all coordinate values and arranges the data accordingly.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/terminology.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nds1 = xr.Dataset(\n    {\"data\": xr.DataArray([[1, 2], [3, 4]], dims=(\"x\", \"y\"))},\n    coords={\"x\": [1, 2], \"y\": [3, 4]},\n)\nds2 = xr.Dataset(\n    {\"data\": xr.DataArray([[5, 6], [7, 8]], dims=(\"x\", \"y\"))},\n    coords={\"x\": [2, 3], \"y\": [4, 5]},\n)\n\n# combine the datasets\ncombined_ds = xr.combine_by_coords([ds1, ds2])\ncombined_ds\n```\n\n----------------------------------------\n\nTITLE: Applying NumPy ufunc to Sparse Array\nDESCRIPTION: This snippet illustrates how to apply a NumPy universal function (ufunc) directly to a sparse array. In this case, it applies `np.sum` to the sparse array along axis 1.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/duckarrays.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n\"np.sum(s, axis=1)\"\n```\n\n----------------------------------------\n\nTITLE: Using Robust Color Scaling in Xarray Plots\nDESCRIPTION: Shows how to handle outliers in data visualization by using the robust parameter in Xarray plots, which uses percentiles to compute color limits.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/plotting.rst#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nair_outliers = airtemps.air.isel(time=0).copy()\nair_outliers[0, 0] = 100\nair_outliers[-1, -1] = 400\n\n@savefig plotting_robust1.png width=4in\nair_outliers.plot()\n\n@savefig plotting_robust2.png width=4in\nair_outliers.plot(robust=True)\n```\n\n----------------------------------------\n\nTITLE: Defining VariableArithmetic Class Structure in Python\nDESCRIPTION: Implementation of the VariableArithmetic class that inherits from multiple mixin classes to provide array operations functionality. The class sets array priority to ensure its operations take precedence over NumPy's native operations.\nSOURCE: https://github.com/pydata/xarray/blob/main/design_notes/named_array_design_doc.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass VariableArithmetic(\n ImplementsArrayReduce,\n IncludeReduceMethods,\n IncludeCumMethods,\n IncludeNumpySameMethods,\n SupportsArithmetic,\n VariableOpsMixin,\n):\n __slots__ = ()\n # prioritize our operations over those of numpy.ndarray (priority=0)\n __array_priority__ = 50\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Inherited Coordinates in DataTree Child Nodes in Python\nDESCRIPTION: Shows how to print a child node of a DataTree, which displays coordinates inherited from parent nodes with special marking to indicate inheritance.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/hierarchical-data.rst#2025-04-21_snippet_46\n\nLANGUAGE: python\nCODE:\n```\nprint(dt[\"/daily\"])\n```\n\n----------------------------------------\n\nTITLE: Evaluating Fitted Polynomials in Python with Xarray\nDESCRIPTION: Shows how to evaluate a fitted polynomial model using the polyval function.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/computation.rst#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nxr.polyval(coord=x, coeffs=out.polyfit_coefficients)\n```\n\n----------------------------------------\n\nTITLE: Printing Attributes of Coordinate Variables\nDESCRIPTION: This snippet prints the attributes of the 'xc' and 'yc' coordinate variables, which represent longitudes and latitudes in the dataset.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/examples/multidimensional-coords.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nprint(ds.xc.attrs)\nprint(ds.yc.attrs)\n```\n\n----------------------------------------\n\nTITLE: Calculating Weighted Standard Deviation in Python with Xarray\nDESCRIPTION: Shows how to compute the weighted standard deviation from the weighted variance.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/computation.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nweighted_std = np.sqrt(weighted_var)\nweighted_std\n```\n\n----------------------------------------\n\nTITLE: Testing with pytest for multiple data types\nDESCRIPTION: This snippet demonstrates the use of pytest to test conversions of data types in a DataArray. It uses parameterization to run tests under different data types and checks the expected output against the actual result.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/contributing.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\nimport numpy as np\nimport xarray as xr\nfrom xarray.testing import assert_equal\n\n@pytest.mark.parametrize(\"dtype\", [\"int8\", \"int16\", \"int32\", \"int64\"])\ndef test_dtypes(dtype):\n    assert str(np.dtype(dtype)) == dtype\n\n@pytest.mark.parametrize(\n    \"dtype\",\n    [\n        \"float32\",\n        pytest.param(\"int16\", marks=pytest.mark.skip),\n        pytest.param(\n            \"int32\", marks=pytest.mark.xfail(reason=\"to show how it works\")\n        ),\n    ],\n)\ndef test_mark(dtype):\n    assert str(np.dtype(dtype)) == \"float32\"\n\n@pytest.fixture\ndef dataarray():\n    return xr.DataArray([1, 2, 3])\n\n@pytest.fixture(params=[\"int8\", \"int16\", \"int32\", \"int64\"])\ndef dtype(request):\n    return request.param\n\n\ndef test_series(dataarray, dtype):\n    result = dataarray.astype(dtype)\n    assert result.dtype == dtype\n\n    expected = xr.DataArray(np.array([1, 2, 3], dtype=dtype))\n    assert_equal(result, expected\n```\n\n----------------------------------------\n\nTITLE: Error handling in xarray DataTree\nDESCRIPTION: Demonstrates how xarray handles attempts to create inconsistent tree structures, such as creating a circular dependency, by raising an `InvalidTreeError`.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/hierarchical-data.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n\n    abe[\"Homer\"].children = {\"Abe\": abe}\n```\n\n----------------------------------------\n\nTITLE: Converting and Plotting Temperature Data\nDESCRIPTION: Converts temperature from Kelvin to Celsius by subtracting 273.15, then creates a basic plot of 2-meter air temperature using a coolwarm colormap.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/examples/ERA5-GRIB-example.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nds = ds - 273.15\nds.t2m[0].plot(cmap=plt.cm.coolwarm)\n```\n\n----------------------------------------\n\nTITLE: Coarsening Large Arrays in Python with Xarray\nDESCRIPTION: Shows how to reduce the size of arrays through block aggregation along multiple dimensions.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/computation.rst#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nx = np.linspace(0, 10, 300)\nt = pd.date_range(\"1999-12-15\", periods=364)\nda = xr.DataArray(\n    np.sin(x) * np.cos(np.linspace(0, 1, 364)[:, np.newaxis]),\n    dims=[\"time\", \"x\"],\n    coords={\"time\": t, \"x\": x},\n)\nda\n```\n\n----------------------------------------\n\nTITLE: Creating DataArray with Non-Nanosecond Datetime in Python\nDESCRIPTION: Demonstrates creating a DataArray with a datetime of day resolution, showing Xarray's flexibility with different datetime resolutions\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nxr.DataArray(data=[np.datetime64(\"2000-01-01\", \"D\")], dims=(\"time\",))\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Duck Array Inline Representation in Python\nDESCRIPTION: Example implementation of a custom duck array class with _repr_inline_ method for formatted single-line representation. The method takes max_width parameter to control truncation length and should omit shape and dtype information.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/internals/duck-arrays-integration.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MyDuckArray:\n    ...\n\n    def _repr_inline_(self, max_width):\n        \"\"\"format to a single line with at most max_width characters\"\"\"\n        ...\n\n    ...\n```\n\n----------------------------------------\n\nTITLE: Demonstrating xarray.where function in Python\nDESCRIPTION: Shows usage of the new xarray.where function for conditionally switching between values in xarray objects, similar to numpy.where. The example creates a DataArray and applies where to it.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_63\n\nLANGUAGE: Python\nCODE:\n```\nimport xarray as xr\n\narr = xr.DataArray([[1, 2, 3], [4, 5, 6]], dims=(\"x\", \"y\"))\n\nxr.where(arr % 2, \"even\", \"odd\")\n```\n\n----------------------------------------\n\nTITLE: Updating DataTree Import Statement\nDESCRIPTION: Example showing the change in import statement from the old xarray-contrib/datatree to the new xarray implementation.\nSOURCE: https://github.com/pydata/xarray/blob/main/DATATREE_MIGRATION_GUIDE.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Old import\nfrom datatree import DataTree, open_datatree\n\n# New import\nfrom xarray import DataTree, open_datatree\n# or\nimport xarray as xr\n```\n\n----------------------------------------\n\nTITLE: Adding Nodes to DataTree using Relative Paths in Python\nDESCRIPTION: Demonstrates how to add new nodes to a DataTree using relative paths and the __setitem__ method. This allows for dynamic tree structure modification.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/hierarchical-data.rst#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nprimates[\"../../Two Fenestrae/Crocodiles\"] = xr.DataTree()\nprint(vertebrates)\n```\n\n----------------------------------------\n\nTITLE: Generating Sparse.COO Wrapped Xarray Variables - Python\nDESCRIPTION: Converts Xarray variables to sparse.COO arrays using a mapping function or directly generates sparse arrays with Hypothesis strategies, illustrating the concept of duck-typing in array handling.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/testing.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport sparse\n\ndef convert_to_sparse(var):\n    return var.copy(data=sparse.COO.from_numpy(var.to_numpy()))\n\nsparse_variables = xrst.variables(dims=xrst.dimension_names(min_dims=1)).map(\n    convert_to_sparse\n)\n\nsparse_variables.example()\nsparse_variables.example()\n```\n\n----------------------------------------\n\nTITLE: Parameterizing Tests Using Hypothesis - Python\nDESCRIPTION: Demonstrates how to use the @given decorator from Hypothesis to parameterize tests with Xarray strategy-generated variables, ensuring code can handle a wide range of variable structures and contents.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/testing.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom hypothesis import given\n\n@given(xrst.variables())\ndef test_function_that_acts_on_variables(var):\n    assert func(var) == ...\n```\n\n----------------------------------------\n\nTITLE: Creating Complex DataTree from Dictionary in Python\nDESCRIPTION: Illustrates how to create a nested DataTree structure from a dictionary of filesystem-like paths and corresponding Dataset objects using the from_dict() method.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/hierarchical-data.rst#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nd = {\n    \"/\": xr.Dataset({\"foo\": \"orange\"}),\n    \"/a\": xr.Dataset({\"bar\": 0}, coords={\"y\": (\"y\", [0, 1, 2])}),\n    \"/a/b\": xr.Dataset({\"zed\": np.nan}),\n    \"a/c/d\": None,\n}\ndt = xr.DataTree.from_dict(d)\ndt\n```\n\n----------------------------------------\n\nTITLE: Plotting Data Variable with Default Coordinates\nDESCRIPTION: This snippet demonstrates plotting the 'Tair' data variable using its default logical coordinates.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/examples/multidimensional-coords.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nds.Tair[0].plot()\n```\n\n----------------------------------------\n\nTITLE: Decoding Timedelta with Custom Resolution in Python\nDESCRIPTION: Shows how to decode timedelta values with a specific time resolution using CFTimedeltaCoder when opening a dataset\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncoder = xr.coders.CFTimedeltaCoder(time_unit=\"s\")\nds = xr.open_dataset(filename, decode_timedelta=coder)\n```\n\n----------------------------------------\n\nTITLE: Assigning child to xarray DataTree\nDESCRIPTION: Demonstrates how to add a child to the DataTree using the `assign` method, creating a new node (Herbert) and adding it as a child of Abe.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/hierarchical-data.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n\n    herbert = xr.DataTree(name=\"Herb\")\n    abe = abe.assign({\"Herbert\": herbert})\n    abe\n\n    abe[\"Herbert\"].name\n    herbert.name\n```\n\n----------------------------------------\n\nTITLE: NumPy Vectorized Groupby Reduction Example in Python\nDESCRIPTION: Example showing how to perform a groupby reduction operation using NumPy's vectorized implementation, which requires integer codes or labels as input.\nSOURCE: https://github.com/pydata/xarray/blob/main/design_notes/grouper_objects.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\n\n# array to reduce\na = np.array([1, 1, 1, 1, 2])\n\n# initial value for result\nout = np.zeros((3,), dtype=int)\n\n# integer codes\nlabels = np.array([0, 0, 1, 2, 1])\n\n# groupby-reduction\nnp.add.at(out, labels, a)\nout  # array([2, 3, 1])\n```\n\n----------------------------------------\n\nTITLE: Opening Dataset with Variable-Specific Parameters in Python\nDESCRIPTION: Example showing datetime accessor usage with xarray DataArray, demonstrating days_in_year and decimal_year attributes\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nxr.DataArray.dt.days_in_year\nxr.DataArray.dt.decimal_year\n```\n\n----------------------------------------\n\nTITLE: Shifting DataArray Values in Python with xarray\nDESCRIPTION: Shows how to use the shift method to offset values in a DataArray along a dimension.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_69\n\nLANGUAGE: python\nCODE:\n```\narray = xray.DataArray([5, 6, 7, 8], dims=\"x\")\narray.shift(x=2)\n```\n\n----------------------------------------\n\nTITLE: Rolling DataArray Values in Python with xarray\nDESCRIPTION: Demonstrates using the roll method to cyclically shift values and coordinates in a DataArray.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_70\n\nLANGUAGE: python\nCODE:\n```\narray = xray.DataArray([5, 6, 7, 8], dims=\"x\")\narray.roll(x=2)\n```\n\n----------------------------------------\n\nTITLE: Showing Version Information for Bug Reports\nDESCRIPTION: Demonstrates how to use xarray's built-in version reporting function to include the full version string of xarray and its dependencies in bug reports.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/contributing.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n```python\nimport xarray as xr\nxr.show_versions()\n\n...\n```\n```\n\n----------------------------------------\n\nTITLE: Xarray map_blocks example function\nDESCRIPTION: This example shows a basic usage of Xarray's `map_blocks` function. The `func` receives an Xarray DataArray subset to one chunk along each chunked dimension, prints the sizes of the input, and returns the time coordinate.  It highlights that the function is initially called with 0-sized blocks for inference.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/dask.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef func(da):\n        print(da.sizes)\n        return da.time\n\n```\n\n----------------------------------------\n\nTITLE: Attribute-Style Access for Dataset Variables in Python\nDESCRIPTION: Demonstrates the experimental attribute-style access as a shortcut for dataset variables, coordinates, and attributes in Xray.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_96\n\nLANGUAGE: python\nCODE:\n```\nds = xray.Dataset({\"tmin\": ([], 25, {\"units\": \"celsius\"})})\nds.tmin.units\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Multiple Trees with DataTree\nDESCRIPTION: This code shows how to iterate over corresponding nodes in multiple trees using group_subtrees and build a new tree from the results.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/hierarchical-data.rst#2025-04-21_snippet_34\n\nLANGUAGE: python\nCODE:\n```\ndt1 = xr.DataTree.from_dict({\"a\": xr.Dataset({\"x\": 1}), \"b\": xr.Dataset({\"x\": 2})})\ndt2 = xr.DataTree.from_dict(\n    {\"a\": xr.Dataset({\"x\": 10}), \"b\": xr.Dataset({\"x\": 20})}\n)\nresult = {}\nfor path, (node1, node2) in xr.group_subtrees(dt1, dt2):\n    result[path] = node1.dataset + node2.dataset\nxr.DataTree.from_dict(result)\n```\n\n----------------------------------------\n\nTITLE: Installing Xarray Development Version\nDESCRIPTION: Commands to install the most recent development version of Xarray directly from GitHub or from TestPyPI.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/getting-started-guide/installing.rst#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ python -m pip install git+https://github.com/pydata/xarray.git\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ python -m pip install --index-url https://test.pypi.org/simple --extra-index-url https://pypi.org/simple --pre xarray\n```\n\n----------------------------------------\n\nTITLE: Opening and Reading HDF5 Files in Python Using Xarray\nDESCRIPTION: Example of reading an HDF5 file using Xarray's open_dataset function with the h5netcdf engine. Shows basic file opening and optional group specification.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/io.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nxr.open_dataset(\"/path/to/my/file.h5\")\n```\n\n----------------------------------------\n\nTITLE: Basic xarray Usage with NetCDF\nDESCRIPTION: Example of using xarray to open NetCDF files with decode_cf=True flag for CF convention decoding.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_45\n\nLANGUAGE: Python\nCODE:\n```\nopen_dataset(file_object, decode_cf=True, engine='h5netcdf')\n```\n\n----------------------------------------\n\nTITLE: Handling Missing Values in Weighted Calculations in Python with Xarray\nDESCRIPTION: Demonstrates how weighted operations properly handle missing values (NaN) in data.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/computation.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndata = xr.DataArray([np.nan, 2, 4])\nweights = xr.DataArray([8, 1, 1])\n\ndata.weighted(weights).mean()\n```\n\n----------------------------------------\n\nTITLE: Creating Accessor Documentation Template in Jinja2\nDESCRIPTION: This Jinja2 template is used by Sphinx to generate documentation for Xarray accessor classes. It sets up the page title with proper underline formatting, establishes the current module context, and uses the autoaccessor directive to document the accessor.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/_templates/autosummary/accessor.rst#2025-04-21_snippet_0\n\nLANGUAGE: jinja2\nCODE:\n```\n{{ fullname }}\n{{ underline }}\n\n.. currentmodule:: {{ module.split('.')[0] }}\n\n.. autoaccessor:: {{ (module.split('.')[1:] + [objname]) | join('.') }}\n```\n\n----------------------------------------\n\nTITLE: Opening Zarr Datasets with Xarray\nDESCRIPTION: Example of using the open_dataset and open_mfdataset functions with Zarr storage, which is a new capability in this release. This allows working with Zarr datasets using the same API as other file formats.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_44\n\nLANGUAGE: python\nCODE:\n```\nopen_dataset(\"path/to/data\", engine=\"zarr\")\n```\n\n----------------------------------------\n\nTITLE: Examining How Indexing Information Propagates to Lazy Classes\nDESCRIPTION: Reveals how the indexing operation is encoded in the lazy indexing class through the private _data attribute, demonstrating deferred evaluation.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/internals/internal-design.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nvar.isel(time=0)._data\n```\n\n----------------------------------------\n\nTITLE: Adjusting Input Dimensions for Interpolation\nDESCRIPTION: In this snippet, adjustments are made to the 'interped' variable to ensure that all dimensions are compatible for interpolation. The dimension 'new_lat' is introduced to accommodate new data, and inputs are modified accordingly to maintain size consistency across dimensions.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/examples/apply_ufunc_vectorize_1d.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ninterped = xr.apply_ufunc(\n    interp1d_np,  # first the function\n    air,  # now arguments in the order expected by 'interp1_np'\n    air.lat,  # as above\n    newlat,  # as above\n    input_core_dims=[['lat'], ['lat'], ['new_lat']],  # list with one entry per arg\n    output_core_dims=[['new_lat']],  # returned data has one dimension\n    exclude_dims=set((\"lat\",)),  # dimensions allowed to change size. Must be set!\n    vectorize=True,  # loop over non-core dims\n)\ninterped = interped.rename({\"new_lat\": \"lat\"})\ninterped[\"lat\"] = newlat  # need to add this manually\nxr.testing.assert_allclose(\n    expected.transpose(*interped.dims), interped  # order of dims is different\n)\ninterped\n```\n\n----------------------------------------\n\nTITLE: Mapping Function Over Multiple Trees\nDESCRIPTION: This code demonstrates how to apply a function directly to paired datasets at every node using map_over_datasets.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/hierarchical-data.rst#2025-04-21_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nxr.map_over_datasets(lambda x, y: x + y, dt1, dt2)\n```\n\n----------------------------------------\n\nTITLE: Save DataArray to Zarr Format\nDESCRIPTION: Method to save DataArray objects directly to Zarr format storage.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nDataArray.to_zarr\n```\n\n----------------------------------------\n\nTITLE: Plotting Xarray Data with Non-uniform Coordinates\nDESCRIPTION: Demonstrates plotting capabilities with non-uniform coordinates by applying a logarithmic transformation to the latitude coordinate before plotting.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/plotting.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nb = air2d.copy()\n# Apply a nonlinear transformation to one of the coords\nb.coords[\"lat\"] = np.log(b.coords[\"lat\"])\n\n@savefig plotting_nonuniform_coords.png width=4in\nb.plot()\n```\n\n----------------------------------------\n\nTITLE: Indexing DataArrays without Coordinate Labels in Python using Xarray\nDESCRIPTION: Demonstrates how label-based indexing falls back to positional indexing for dimensions without coordinate labels. This allows for flexible indexing even when coordinate information is missing.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/indexing.rst#2025-04-21_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nda = xr.DataArray([1, 2, 3], dims=\"x\")\nda.sel(x=[0, -1])\n```\n\n----------------------------------------\n\nTITLE: Coordinate Handling in Arithmetic Operations\nDESCRIPTION: Shows how non-index coordinates are handled during arithmetic operations, demonstrating that they are preserved when there are no conflicting values.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/computation.rst#2025-04-21_snippet_34\n\nLANGUAGE: python\nCODE:\n```\narr[0]\narr[1]\n# notice that the scalar coordinate 'x' is silently dropped\narr[1] - arr[0]\n\n# only one argument has the 'x' coordinate\narr[0] + 1\n# both arguments have the same 'x' coordinate\narr[0] - arr[0]\n```\n\n----------------------------------------\n\nTITLE: Preserving Attributes in xarray.Variable\nDESCRIPTION: This snippet lists attributes of xarray.Variable that should be preserved to maintain core functionality and provide necessary information while working with variable instances.\nSOURCE: https://github.com/pydata/xarray/blob/main/design_notes/named_array_design_doc.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Properties\n   Variable.attrs\n   Variable.chunks\n   Variable.data\n   Variable.dims\n   Variable.dtype\n\n   Variable.nbytes\n   Variable.ndim\n   Variable.shape\n   Variable.size\n   Variable.sizes\n\n   Variable.T\n   Variable.real\n   Variable.imag\n   Variable.conj\n```\n\n----------------------------------------\n\nTITLE: Mixing DataArray Indexers with Regular Sequences\nDESCRIPTION: Demonstrates how to mix DataArray indexers with regular sequences, where sequences without named dimensions are treated as if they have the same dimension being indexed along.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/indexing.rst#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n# Because [0, 1] is used to index along dimension 'x',\n# it is assumed to have dimension 'x'\nda[[0, 1], ind_x]\n```\n\n----------------------------------------\n\nTITLE: Updated DataTree Constructor Usage\nDESCRIPTION: Examples showing the changes in DataTree constructor parameter naming, particularly the change from 'ds' to 'dataset'.\nSOURCE: https://github.com/pydata/xarray/blob/main/DATATREE_MIGRATION_GUIDE.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Old usage\nDataTree(ds=...)\n\n# New usage\nDataTree(dataset=...)\n```\n\n----------------------------------------\n\nTITLE: Using a Custom RasterIndex with Xarray DataArray in Python\nDESCRIPTION: This code snippet demonstrates how to use a custom RasterIndex with an Xarray DataArray. It creates a sample DataArray, drops the default indexes, and sets the custom RasterIndex for the 'x' and 'y' coordinates. It then shows how to perform label-based selection using the custom index.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/internals/how-to-create-custom-index.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport xarray as xr\n\nda = xr.DataArray(\n    np.random.uniform(size=(100, 50)),\n    coords={\"x\": (\"x\", np.arange(50)), \"y\": (\"y\", np.arange(100))},\n    dims=(\"y\", \"x\"),\n)\n\n# Xarray create default indexes for the 'x' and 'y' coordinates\n# we first need to explicitly drop it\nda = da.drop_indexes([\"x\", \"y\"])\n\n# Build a RasterIndex from the 'x' and 'y' coordinates\nda_raster = da.set_xindex([\"x\", \"y\"], RasterIndex)\n\n# RasterIndex now takes care of label-based selection\nselected = da_raster.sel(x=10, y=slice(20, 50))\n```\n\n----------------------------------------\n\nTITLE: Subsetting DataTree Nodes by Path Pattern in Python\nDESCRIPTION: Illustrates how to subset a DataTree by matching nodes based on common patterns in their paths using the match method.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/hierarchical-data.rst#2025-04-21_snippet_28\n\nLANGUAGE: python\nCODE:\n```\ndt = xr.DataTree.from_dict(\n    {\n        \"/a/A\": None,\n        \"/a/B\": None,\n        \"/b/A\": None,\n        \"/b/B\": None,\n    }\n)\nresult = dt.match(\"*/B\")\nresult\n```\n\n----------------------------------------\n\nTITLE: Merging Coordinates in Xarray\nDESCRIPTION: Demonstrates how to merge coordinates from different datasets using the coords.merge() method, which is useful for implementing custom binary operations on Xarray objects.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/data-structures.rst#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nalt = xr.Dataset(coords={\"z\": [10], \"lat\": 0, \"lon\": 0})\nds.coords.merge(alt.coords)\n```\n\n----------------------------------------\n\nTITLE: Using create_index Parameter in Xarray stack Method\nDESCRIPTION: Example of using the new create_index parameter in the stack method to optionally create multi-indexes.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_31\n\nLANGUAGE: python\nCODE:\n```\n# Example usage (not provided in snippet)\ndataset.stack(dim=['x', 'y'], create_index=True)\n```\n\n----------------------------------------\n\nTITLE: Xarray Named Array Methods\nDESCRIPTION: Example showing new NamedArray methods for dimension manipulation\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nNamedArray.expand_dims()\nNamedArray.permute_dims()\nNamedArray.broadcast_to()\n```\n\n----------------------------------------\n\nTITLE: Testing Variable Mean Reduction with Hypothesis\nDESCRIPTION: Property-based test that verifies xarray Variable mean reduction matches numpy array mean reduction across arbitrary dimensions. Uses Hypothesis for test case generation and numpy.testing for assertions.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/testing.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport numpy.testing as npt\n\n\n@given(st.data(), xrst.variables(dims=xrst.dimension_names(min_dims=1)))\ndef test_mean(data, var):\n    \"\"\"Test that the mean of an xarray Variable is always equal to the mean of the underlying array.\"\"\"\n\n    # specify arbitrary reduction along at least one dimension\n    reduction_dims = data.draw(xrst.unique_subset_of(var.dims, min_size=1))\n\n    # create expected result (using nanmean because arrays with Nans will be generated)\n    reduction_axes = tuple(var.get_axis_num(dim) for dim in reduction_dims)\n    expected = np.nanmean(var.data, axis=reduction_axes)\n\n    # assert property is always satisfied\n    result = var.mean(dim=reduction_dims).data\n    npt.assert_equal(expected, result)\n```\n\n----------------------------------------\n\nTITLE: Creating a Complex DataTree from Dictionary in Python with xarray\nDESCRIPTION: This snippet demonstrates a more idiomatic way of creating a complex DataTree structure using a dictionary of Datasets and DataTrees. It shows how to add nodes at different levels of the tree hierarchy.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/data-structures.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n# create a third Dataset\nds3 = xr.Dataset({\"zed\": np.nan})\n# create a tree from a dictionary of DataTrees and Datasets\ndt = xr.DataTree.from_dict({\"/\": dt, \"/child-node/new-zed-node\": ds3})\n\ndt\n```\n\n----------------------------------------\n\nTITLE: Creating Conda Development Environment for xarray\nDESCRIPTION: Shell commands to set up a Python development environment for xarray using Conda, with specific instructions for different operating systems\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/contributing.rst#2025-04-21_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n# Create and activate the build environment\nconda create -c conda-forge -n xarray-tests python=3.10\n\n# This is for Linux and MacOS\nconda env update -f ci/requirements/environment.yml\n\n# On windows, use environment-windows.yml instead\nconda env update -f ci/requirements/environment-windows.yml\n\nconda activate xarray-tests\n\n# or with older versions of Anaconda:\nsource activate xarray-tests\n\n# Build and install xarray\npip install -e .\n```\n\n----------------------------------------\n\nTITLE: Accessing Pint Units in Xarray\nDESCRIPTION: Example of using the pint-xarray accessor to access units and magnitude information from wrapped arrays. The .pint accessor provides convenient methods for handling unit-aware calculations in xarray.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/duckarrays.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n.pint.units\n.pint.magnitude\n```\n\n----------------------------------------\n\nTITLE: Defining a function with deprecation warning\nDESCRIPTION: This code demonstrates how to define a function that includes a deprecated argument. A warning is issued to inform users of the deprecated argument before it is removed in future versions. The `emit_user_level_warning` function is called if `old_arg` is provided while the current argument is `new_arg`.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/contributing.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef func(new_arg, old_arg=None):\n    if old_arg is not None:\n        from xarray.core.utils import emit_user_level_warning\n\n        emit_user_level_warning(\n            \"`old_arg` has been deprecated, and in the future will raise an error.\"\n            \"Please use `new_arg` from now on.\",\n            DeprecationWarning,\n        )\n\n        # Still do what the user intended here\n```\n\n----------------------------------------\n\nTITLE: Setting Local Configuration Options with Context Manager in Xarray\nDESCRIPTION: This snippet shows how to set a local configuration option for arithmetic join behavior within a context manager. It ensures that the specified setting only lasts for the duration of the block, allowing for temporary changes.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/options.rst#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nwith xr.set_options(arithmetic_join=\"exact\"):\n    # do operation here\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining a Vectorized Interpolation Function with NumPy\nDESCRIPTION: This snippet defines the function 'interp1d_np', which interpolates data along a specified axis and prints the input shapes for debugging purposes. The function takes three parameters: 'data', 'x', and 'xi'. It returns the interpolated values using NumPy's interp method.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/examples/apply_ufunc_vectorize_1d.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef interp1d_np(data, x, xi):\n    print(f\"data: {data.shape} | x: {x.shape} | xi: {xi.shape}\")\n    return np.interp(xi, x, data)\n```\n\n----------------------------------------\n\nTITLE: Accessing Variables in a Dataset\nDESCRIPTION: Demonstrates how to access individual DataArrays within a Dataset using dictionary-style or attribute-style indexing.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/getting-started-guide/quick-overview.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nds[\"foo\"]\nds.foo\n```\n\n----------------------------------------\n\nTITLE: Decoding Dataset with Custom Time Resolution in Python\nDESCRIPTION: Demonstrates how to decode a dataset with custom time resolution using CFDatetimeCoder, allowing specification of time unit during dataset opening\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ncoder = xr.coders.CFDatetimeCoder(time_unit=\"s\")\nds = xr.open_dataset(filename, decode_times=coder)\n```\n\n----------------------------------------\n\nTITLE: Removing mypy ignore configuration for Xarray\nDESCRIPTION: Example showing the configuration lines that can be removed from setup.cfg for libraries depending on Xarray that use mypy, since Xarray is now discoverable by mypy.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_50\n\nLANGUAGE: ini\nCODE:\n```\n[mypy-xarray]\nignore_missing_imports = True\n```\n\n----------------------------------------\n\nTITLE: Binning Data with GroupBy Bins in Xarray Python\nDESCRIPTION: Illustrates how to bin data into predefined intervals using the groupby_bins method in Xarray. Requires specifying bin edges. The example shows binning of 'x' variable and returning groups associated with each bin.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/groupby.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nx_bins = [0, 25, 50]\nds.groupby_bins(\"x\", x_bins).groups\n```\n\n----------------------------------------\n\nTITLE: Iterating Over DataTree Nodes in Python\nDESCRIPTION: Demonstrates how to iterate over all nodes in a DataTree using the subtree property, which yields nodes in depth-first order.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/hierarchical-data.rst#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nfor node in vertebrates.subtree:\n    print(node.path)\n```\n\n----------------------------------------\n\nTITLE: Building xarray Documentation Locally\nDESCRIPTION: Shell commands to create a documentation environment and build HTML documentation for xarray\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/contributing.rst#2025-04-21_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\n# Create and activate the docs environment\nconda env create -f ci/requirements/doc.yml\nconda activate xarray-docs\n\n# or with older versions of Anaconda:\nsource activate xarray-docs\n\n# Build and install a local, editable version of xarray\npip install -e .\n\n# Build documentation\ncd doc/\nmake html\n\n# Clean and rebuild\nmake clean\nmake html\n```\n\n----------------------------------------\n\nTITLE: Plotting Monthly Freeze Probability\nDESCRIPTION: Visualizes the monthly probability of freezing temperatures by converting xarray data to pandas and creating a line plot.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/examples/weather-data.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfreeze.to_pandas().plot()\n```\n\n----------------------------------------\n\nTITLE: Running Pre-commit Hooks on All Files\nDESCRIPTION: Command to run pre-commit hooks on all files in the repository. This ensures code formatting and other checks are applied before submitting a PR.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/contributing.rst#2025-04-21_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\npre-commit run --all-files\n```\n\n----------------------------------------\n\nTITLE: Updating DataTree In-Place in Python with xarray\nDESCRIPTION: This example shows how to update a DataTree in-place using Python's standard dictionary syntax. It demonstrates creating a new DataTree from scratch and adding various nodes and data to it.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/data-structures.rst#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ndt = xr.DataTree(name=\"root\")\ndt[\"foo\"] = \"orange\"\ndt[\"child-node\"] = xr.DataTree(\n    dataset=xr.Dataset({\"bar\": 0}, coords={\"y\": (\"y\", [0, 1, 2])})\n)\ndt[\"child-node/new-zed-node/zed\"] = np.nan\ndt\n```\n\n----------------------------------------\n\nTITLE: Wrapping a Sparse Array in an Xarray DataArray\nDESCRIPTION: This snippet shows how to wrap a sparse array, created using the `sparse` library, inside an xarray DataArray object. The DataArray is created with dimension names 'i' and 'j'.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/duckarrays.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n\"s_da = xr.DataArray(s, dims=[\"i\", \"j\"])\n    s_da\"\n```\n\n----------------------------------------\n\nTITLE: Handling NotImplementedError in Slicing with Method\nDESCRIPTION: Demonstrates the limitation of using the method parameter with slice objects in xarray, resulting in a NotImplementedError, and shows an alternative approach for inexact slicing.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/indexing.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Alternative approach for inexact slicing\nda.sel(x=slice(0.9, 3.1))\n```\n\n----------------------------------------\n\nTITLE: Using MultiIndex Level Selection in Python\nDESCRIPTION: Example of accessing multi-index levels as virtual coordinate variables with ds['time'] and using sel with time keyword argument.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_66\n\nLANGUAGE: Python\nCODE:\n```\nds['time'] # access time level of multi-index\nds.sel(time='2000-01') # select using multi-index level\n```\n\n----------------------------------------\n\nTITLE: Initializing xarray and related libraries\nDESCRIPTION: Imports necessary libraries: numpy for numerical operations, pandas for data manipulation, and xarray for labeled multi-dimensional arrays. It also configures numpy to set a specific random seed and printing options, and sets the exception handling mode to 'minimal'.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/hierarchical-data.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\n    import numpy as np\n    import pandas as pd\n    import xarray as xr\n\n    np.random.seed(123456)\n    np.set_printoptions(threshold=10)\n\n    %xmode minimal\n```\n\n----------------------------------------\n\nTITLE: Creating a DataArray from a pandas Series\nDESCRIPTION: Demonstrates how metadata from a pandas Series (including index and name) is automatically carried over when creating a DataArray.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/getting-started-guide/quick-overview.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nxr.DataArray(pd.Series(range(3), index=list(\"abc\"), name=\"foo\"))\n```\n\n----------------------------------------\n\nTITLE: Removing Attributes from xarray.Variable\nDESCRIPTION: This snippet details attributes that are recommended for removal from xarray.Variable to streamline its functionality and reduce legacy clutter.\nSOURCE: https://github.com/pydata/xarray/blob/main/design_notes/named_array_design_doc.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n   Variable.values # Probably also remove -- this is a legacy from before Xarray supported dask arrays. \".data\" is enough.\n\n# Encoding\n   Variable.encoding\n```\n\n----------------------------------------\n\nTITLE: Finding Relative Paths Between DataTree Nodes in Python\nDESCRIPTION: Shows how to find the relative path between two nodes in a DataTree structure using the relative_to method.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/hierarchical-data.rst#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nbart.relative_to(lisa)\n```\n\n----------------------------------------\n\nTITLE: Casting Datetime Objects to datetime64 Arrays in Python\nDESCRIPTION: Demonstrates how Xray automatically casts arrays of datetime.datetime objects to datetime64[ns] arrays when stored in an Xray object.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_94\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime\n\nxray.Dataset({\"t\": [datetime(2000, 1, 1)]})\n```\n\n----------------------------------------\n\nTITLE: Summing Sparse Array along an Axis\nDESCRIPTION: This snippet demonstrates how to use computation methods (like sum) on sparse arrays.  It calculates the sum of the sparse array along axis 1.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/duckarrays.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n\"s.sum(axis=1)\"\n```\n\n----------------------------------------\n\nTITLE: Accessing nodes in xarray DataTree with dict-like syntax\nDESCRIPTION: Demonstrates how to access child nodes using dictionary-like syntax (`[]`).  This provides a convenient way to navigate the tree structure.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/hierarchical-data.rst#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n\n    vertebrates[\"Bony Skeleton\"][\"Ray-finned Fish\"]\n```\n\n----------------------------------------\n\nTITLE: Opening Remote NetCDF Files with H5NetCDF in Python\nDESCRIPTION: Added support for directly opening remote files as string paths (e.g. s3://bucket/data.nc) with fsspec when using the h5netcdf engine.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nxarray.open_dataset(\"s3://bucket/data.nc\", engine=\"h5netcdf\")\n```\n\n----------------------------------------\n\nTITLE: Reading NetCDF Files with a Custom Transform Function\nDESCRIPTION: This snippet illustrates how to read NetCDF files and apply a transformation function to each dataset prior to combining them. It ensures robustness by using a context manager to close files and allows for selective processing of data.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/io.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef read_netcdfs(files, dim, transform_func=None):\n    def process_one_path(path):\n        with xr.open_dataset(path) as ds:\n            if transform_func is not None:\n                ds = transform_func(ds)\n            ds.load()\n            return ds\n    paths = sorted(glob(files))\n    datasets = [process_one_path(p) for p in paths]\n    combined = xr.concat(datasets, dim)\n    return combined\n```\n\n----------------------------------------\n\nTITLE: Grouping and Plotting Zonal Mean Temperature in Python with Xarray\nDESCRIPTION: Groups air temperature data by latitude bins, calculates mean and standard deviation, and creates a step plot with error bands. Demonstrates use of groupby_bins, plot.step, and matplotlib customization.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/plotting.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nair_grp = air.mean([\"time\", \"lon\"]).groupby_bins(\"lat\", [0, 23.5, 66.5, 90])\nair_mean = air_grp.mean()\nair_std = air_grp.std()\nair_mean.plot.step()\n(air_mean + air_std).plot.step(ls=\":\")\n(air_mean - air_std).plot.step(ls=\":\")\nplt.ylim(-20, 30)\n@savefig plotting_example_step_groupby.png width=4in\nplt.title(\"Zonal mean temperature\")\n```\n\n----------------------------------------\n\nTITLE: Committing What's New Section for Next Release\nDESCRIPTION: Git commands to commit the new what's-new section for the next release and push it to the upstream repository.\nSOURCE: https://github.com/pydata/xarray/blob/main/HOW_TO_RELEASE.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ngit commit -am 'New whatsnew section'\ngit push upstream main\n```\n\n----------------------------------------\n\nTITLE: Forcing Data Loading in Xarray Variable Objects\nDESCRIPTION: Demonstrates how accessing the public data property forces the Variable to load its data into memory, transforming the lazy representation into an actual NumPy array.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/internals/internal-design.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nvar.data\n```\n\n----------------------------------------\n\nTITLE: Original-based Alignment in Dataset Updates\nDESCRIPTION: Demonstrates how xarray aligns based on the original object when updating datasets or using __setitem__, preserving the original structure.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_89\n\nLANGUAGE: python\nCODE:\n```\nlhs.coords[\"rhs\"] = rhs\nlhs\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Duck Array Integration with Xarray\nDESCRIPTION: Example showing how dask arrays and sparse matrices integrate with Xarray Dataset creation and representation. Demonstrates practical usage of duck arrays with shape and dtype handling.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/internals/duck-arrays-integration.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport dask.array as da\nimport xarray as xr\nimport sparse\n\na = da.linspace(0, 1, 20, chunks=2)\na\n\nb = np.eye(10)\nb[[5, 7, 3, 0], [6, 8, 2, 9]] = 2\nb = sparse.COO.from_numpy(b)\nb\n\nxr.Dataset(dict(a=(\"x\", a), b=((\"y\", \"z\"), b)))\n```\n\n----------------------------------------\n\nTITLE: Module Declaration in restructuredText\nDESCRIPTION: Declares the xarray module namespace for documentation purposes\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. module:: xarray\n```\n\n----------------------------------------\n\nTITLE: Converting Xarray Coordinate to Pandas Index\nDESCRIPTION: Shows how to convert an Xarray coordinate (DataArray) into a pandas Index object using the to_index() method.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/data-structures.rst#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nds[\"time\"].to_index()\n```\n\n----------------------------------------\n\nTITLE: Installing Xarray with Optional Dependencies using Pip\nDESCRIPTION: Commands to install Xarray with different sets of optional dependencies for I/O, acceleration, parallel processing, visualization, or all optional dependencies.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/getting-started-guide/installing.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ python -m pip install \"xarray[io]\"        # Install optional dependencies for handling I/O\n$ python -m pip install \"xarray[accel]\"     # Install optional dependencies for accelerating xarray\n$ python -m pip install \"xarray[parallel]\"  # Install optional dependencies for dask arrays\n$ python -m pip install \"xarray[viz]\"       # Install optional dependencies for visualization\n$ python -m pip install \"xarray[complete]\"  # Install all the above\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Xarray Plotting in Python\nDESCRIPTION: This snippet imports the necessary libraries for plotting with Xarray. It sets default parameters for Matplotlib and imports DataArray and Dataset manipulation libraries, laying the groundwork for all subsequent plotting examples.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/plotting.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport xarray as xr\n```\n\n----------------------------------------\n\nTITLE: Adding Child Nodes to a DataTree in Python with xarray\nDESCRIPTION: This example shows how to add a second node to an existing DataTree, creating a parent-child relationship. It demonstrates creating a new Dataset, converting it to a DataTree, and adding it as a child to the existing tree.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/data-structures.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndataset2 = xr.Dataset({\"bar\": 0}, coords={\"y\": (\"y\", [0, 1, 2])})\ndt2 = xr.DataTree(name=\"a\", dataset=dataset2)\n# Add the child Datatree to the root node\ndt.children = {\"child-node\": dt2}\ndt\n```\n\n----------------------------------------\n\nTITLE: Deleting Remote Feature Branch in Git\nDESCRIPTION: Command to delete your feature branch on GitHub if it wasn't deleted through GitHub's interface. This keeps your remote repository clean after merging PRs.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/contributing.rst#2025-04-21_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin --delete shiny-new-feature\n```\n\n----------------------------------------\n\nTITLE: Plotting a DataArray with Automatic Labels\nDESCRIPTION: Shows how to visualize a DataArray with a simple plot method that automatically uses metadata attributes for axis labels.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/getting-started-guide/quick-overview.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndata.plot()\n```\n\n----------------------------------------\n\nTITLE: Broadcasting DataArrays in Python with xarray\nDESCRIPTION: Shows how to use xray.broadcast to explicitly broadcast two DataArrays against each other.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_71\n\nLANGUAGE: python\nCODE:\n```\na = xray.DataArray([1, 2, 3], dims=\"x\")\nb = xray.DataArray([5, 6], dims=\"y\")\na\nb\na2, b2 = xray.broadcast(a, b)\na2\nb2\n```\n\n----------------------------------------\n\nTITLE: Creating a Hierarchical DataTree Structure\nDESCRIPTION: Shows how to organize datasets into a tree-like structure using DataTree, with nested groups and coordinate inheritance.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/getting-started-guide/quick-overview.rst#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport xarray as xr\n\ndata = xr.DataArray(np.random.randn(2, 3), dims=(\"x\", \"y\"), coords={\"x\": [10, 20]})\nds = xr.Dataset({\"foo\": data, \"bar\": (\"x\", [1, 2]), \"baz\": np.pi})\nds\n\nds2 = ds.interp(coords={\"x\": [10, 12, 14, 16, 18, 20]})\nds2\n\nds3 = xr.Dataset(\n    {\"people\": [\"alice\", \"bob\"], \"heights\": (\"people\", [1.57, 1.82])},\n    coords={\"species\": \"human\"},\n)\nds3\n\ndt = xr.DataTree.from_dict(\n    {\"simulation/coarse\": ds, \"simulation/fine\": ds2, \"/\": ds3}\n)\ndt\n```\n\n----------------------------------------\n\nTITLE: Organizing Non-Aligned Data in a DataTree\nDESCRIPTION: This code demonstrates how to organize datasets with different time resolutions in a DataTree by placing them as siblings rather than in parent-child relationships.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/hierarchical-data.rst#2025-04-21_snippet_42\n\nLANGUAGE: python\nCODE:\n```\ndt = xr.DataTree.from_dict(\n    {\"daily\": ds_daily, \"weekly\": ds_weekly, \"monthly\": ds_monthly}\n)\ndt\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Vertical Slice Plot\nDESCRIPTION: Generates a simple vertical slice visualization of salinity data using the s-coordinate system.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/examples/ROMS_ocean_model.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nds.salt.isel(xi_rho=50, ocean_time=0).plot()\n```\n\n----------------------------------------\n\nTITLE: Using DataArray.coarsen and Dataset.coarsen Methods in Python\nDESCRIPTION: New coarsen methods added to DataArray and Dataset classes for coarse-graining data.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_56\n\nLANGUAGE: Python\nCODE:\n```\nda.coarsen(...)\nds.coarsen(...)\n```\n\n----------------------------------------\n\nTITLE: Grouping Dataset by Coordinate in Xarray Python\nDESCRIPTION: Demonstrates using the groupby method to group a dataset by the 'letters' coordinate in Xarray, returning a GroupBy object. This operation requires an existing Xarray dataset with a coordinate to group by. The example shows how to access the GroupBy object and its functionalities.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/groupby.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nds.groupby(\"letters\")\n```\n\n----------------------------------------\n\nTITLE: Generating List of Contributors for Release Notes\nDESCRIPTION: Command to run a Python script that generates a list of contributors for the release notes. Requires gitpython and toolz/cytoolz packages.\nSOURCE: https://github.com/pydata/xarray/blob/main/HOW_TO_RELEASE.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npython ci/release_contributors.py\n```\n\n----------------------------------------\n\nTITLE: Loading Sample Dataset in Xarray\nDESCRIPTION: This code loads a sample dataset named 'rasm' from the xarray tutorial. The dataset is loaded into memory using the load() method.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/examples/multidimensional-coords.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nds = xr.tutorial.open_dataset(\"rasm\").load()\nds\n```\n\n----------------------------------------\n\nTITLE: Initializing Dataset with Optional Coordinates in Python\nDESCRIPTION: Example showing how to create a Dataset without coordinate labels for dimensions, demonstrating the optional coordinate feature introduced in xarray 0.9.0.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_65\n\nLANGUAGE: Python\nCODE:\n```\nxr.Dataset({\"foo\": ((\"x\", \"y\"), [[1, 2]])})\n```\n\n----------------------------------------\n\nTITLE: Creating xarray DataTree with children\nDESCRIPTION: Shows how to create a DataTree node representing Homer Simpson, with Bart and Lisa as children. This establishes the parent-child relationship within the DataTree structure.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/hierarchical-data.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\n    homer = xr.DataTree(name=\"Homer\", children={\"Bart\": bart, \"Lisa\": lisa})\n```\n\n----------------------------------------\n\nTITLE: Displaying xarray DataTree\nDESCRIPTION: Displays the created `vertebrates` DataTree, showing the hierarchical relationships between different species and their common features.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/hierarchical-data.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n\n    vertebrates\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Xarray Operations - Python\nDESCRIPTION: This snippet imports necessary libraries including NumPy, Pandas, and Xarray for creating and manipulating time-series data. It sets a random seed for reproducibility.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/time-series.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\\nimport pandas as pd\\nimport xarray as xr\\n\\np.random.seed(123456)\n```\n\n----------------------------------------\n\nTITLE: Defining reStructuredText Gallery Section\nDESCRIPTION: Sets up a section link and header for the Xarray gallery/recipes documentation using reStructuredText syntax.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/gallery/README.txt#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _recipes:\n\nGallery\n=======\n```\n\n----------------------------------------\n\nTITLE: Scalar and 1-dimensional Interpolation using Xarray - Python\nDESCRIPTION: This snippet demonstrates the creation of a DataArray and showcases label lookup and 1D interpolation based on the time dimension.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/interpolation.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nda = xr.DataArray(\\n    np.sin(0.3 * np.arange(12).reshape(4, 3)),\\n    [(\"time\", np.arange(4)), (\"space\", [0.1, 0.2, 0.3])],\\n)\\n# label lookup\\nda.sel(time=3)\\n\\n# interpolation\\nda.interp(time=2.5)\n```\n\n----------------------------------------\n\nTITLE: Initializing Zarr Store with Metadata in Python\nDESCRIPTION: Demonstrates creating a zarr store with metadata without computing array values, using dask for dummy data initialization.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/io.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport dask.array\n\n# The values of this dask array are entirely irrelevant; only the dtype,\n# shape and chunks are used\ndummies = dask.array.zeros(30, chunks=10)\nds = xr.Dataset({\"foo\": (\"x\", dummies)}, coords={\"x\": np.arange(30)})\npath = \"path/to/directory.zarr\"\n# Now we write the metadata without computing any array values\nds.to_zarr(path, compute=False)\n```\n\n----------------------------------------\n\nTITLE: Accessing DataTree Contents in Python with xarray\nDESCRIPTION: This code demonstrates how to access the contents of a DataTree, including child nodes and variables. It shows how to use dictionary-like indexing to retrieve nodes and data, and how to access the dataset view of a node.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/data-structures.rst#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ndt[\"child-node\"]\ndt[\"foo\"]\n\ndt[\"child-node\"].dataset\n\ndt[\"child-node\"].to_dataset()\n\ndt[\"child-node\"].data_vars\ndt[\"child-node\"].coords\n```\n\n----------------------------------------\n\nTITLE: Fetching Previous Release Tags from Upstream\nDESCRIPTION: Command to fetch all previous release tags from the upstream repository to identify the version number of the last release.\nSOURCE: https://github.com/pydata/xarray/blob/main/HOW_TO_RELEASE.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngit fetch upstream --tags\n```\n\n----------------------------------------\n\nTITLE: Upsampling Time Series Data in Xarray\nDESCRIPTION: Demonstrates upsampling time series data to a higher temporal resolution, which inserts missing values at the new time points.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_83\n\nLANGUAGE: python\nCODE:\n```\narray.resample(\"3H\", \"time\")\n```\n\n----------------------------------------\n\nTITLE: Using Dataset.where and DataArray.where methods with keep_attrs parameter\nDESCRIPTION: Reference to the where() method that received keep_attrs support in Xarray, allowing attribute preservation when filtering data.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nDataset.where\n```\n\n----------------------------------------\n\nTITLE: Adding a child to an xarray DataTree\nDESCRIPTION: Shows how to add a new child (Maggie) to an existing parent node (Homer) by updating the children property. This demonstrates how to modify the tree structure after initial creation.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/hierarchical-data.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n\n    maggie = xr.DataTree(name=\"Maggie\")\n    homer.children = {\"Bart\": bart, \"Lisa\": lisa, \"Maggie\": maggie}\n    homer\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Xarray\nDESCRIPTION: This snippet imports necessary libraries including numpy, pandas, and xarray. It sets a random seed for reproducibility to ensure that the random numbers generated are the same each time the code is run.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/combining.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\\nimport pandas as pd\\nimport xarray as xr\\n\\nnp.random.seed(123456)\n```\n\n----------------------------------------\n\nTITLE: Handling Missing Values in Xarray 2D Plot\nDESCRIPTION: Shows how Xarray handles missing values in plots by creating a copy of the air temperature data and setting a slice to NaN values before plotting.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/plotting.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nbad_air2d = air2d.copy()\n\nbad_air2d[dict(lat=slice(0, 10), lon=slice(0, 25))] = np.nan\n\n@savefig plotting_missing_values.png width=4in\nbad_air2d.plot()\n```\n\n----------------------------------------\n\nTITLE: Calculating Mean Over DataTree Subgroups - Python\nDESCRIPTION: Demonstrates computing the mean of datasets over a specified dimension across all subgroups in a DataTree. This operation maps over all subgroups without additional dependencies.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/getting-started-guide/quick-overview.rst#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\navg = dt[\"simulation\"].mean(dim=\"x\")\navg\n```\n\n----------------------------------------\n\nTITLE: Displaying Available Benchmark Results with ASV\nDESCRIPTION: This command shows available benchmark results across different machines and environments using the ASV tool. It displays commits that have benchmark results, organized by machine and environment configuration.\nSOURCE: https://github.com/pydata/xarray/blob/main/asv_bench/benchmarks/README_CI.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$> asv show\n\nCommits with results:\n\nMachine    : Jaimes-MBP\nEnvironment: conda-py3.9-cython-numpy1.20-scipy\n\n    00875e67\n\nMachine    : fv-az95-499\nEnvironment: conda-py3.7-cython-numpy1.17-pooch-scipy\n\n    8db28f02\n    3a305096\n```\n\n----------------------------------------\n\nTITLE: Resampling Time Series Data in Xarray\nDESCRIPTION: Demonstrates how to resample a data array to a new temporal resolution using xray.DataArray.resample. Requires explicitly specifying the time dimension.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_81\n\nLANGUAGE: python\nCODE:\n```\ntime = pd.date_range(\"2000-01-01\", freq=\"6H\", periods=10)\narray = xray.DataArray(np.arange(10), [(\"time\", time)])\narray.resample(\"1D\", dim=\"time\")\n```\n\n----------------------------------------\n\nTITLE: Passing Chunks to Xarray chunk Method\nDESCRIPTION: Example showing how to pass chunks in kwargs form to the chunk method in Xarray.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_32\n\nLANGUAGE: python\nCODE:\n```\n# Example usage (not provided in snippet)\ndataset.chunk(time=1, x=100, y=100)\n```\n\n----------------------------------------\n\nTITLE: Accessing root in xarray DataTree\nDESCRIPTION: Shows how to access the root node of a DataTree from any node within the tree, using the `root` property.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/hierarchical-data.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n\n    maggie.root.name\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries for GRIB Data Analysis\nDESCRIPTION: Imports the essential libraries for GRIB data analysis: xarray for data handling and matplotlib for visualization.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/examples/ERA5-GRIB-example.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport xarray as xr\nimport matplotlib.pyplot as plt\n```\n\n----------------------------------------\n\nTITLE: Accessing Multi-index Levels in Xarray Python\nDESCRIPTION: Example showing that multi-index levels are now accessible through regular coordinates instead of virtual coordinates.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_30\n\nLANGUAGE: python\nCODE:\n```\n# Multi-index levels are now accessible through their own, regular coordinates\n# instead of virtual coordinates\n```\n\n----------------------------------------\n\nTITLE: Demonstrating DataArray Scalar Return Type Behavior in Xarray\nDESCRIPTION: This example shows how xarray operations return DataArray objects even for scalar results, demonstrating why explicit type conversion is needed when working with other libraries like pandas.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/getting-started-guide/faq.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\narr = xr.DataArray([1, 2, 3])\npd.Series({\"x\": arr[0], \"mean\": arr.mean(), \"std\": arr.std()})\n```\n\n----------------------------------------\n\nTITLE: Opening a Dataset with Xarray in Python\nDESCRIPTION: Loads a sample dataset from the tutorial resources using xarray. The dataset contains climate data from the Regional Arctic System Model (RASM).\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/examples/monthly-means.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nds = xr.tutorial.open_dataset(\"rasm\").load()\nds\n```\n\n----------------------------------------\n\nTITLE: Opening NetCDF/HDF5 File-Like Objects in Python\nDESCRIPTION: New ability to open netcdf4/hdf5 file-like objects with open_dataset. Requires h5netcdf>0.7 and h5py>2.9.0.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_54\n\nLANGUAGE: Python\nCODE:\n```\nopen_dataset(file_obj)\n```\n\n----------------------------------------\n\nTITLE: Attribute-like Access for DataTree Elements in Python\nDESCRIPTION: Shows how to select variables and child nodes in a DataTree using dot indexing, which provides an attribute-like access syntax.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/hierarchical-data.rst#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\ndt.foo\ndt.a\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for ROMS Data Analysis\nDESCRIPTION: Imports necessary Python libraries for working with oceanographic data, including numpy for calculations, cartopy for map projections, matplotlib for plotting, and xarray for data handling.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/examples/ROMS_ocean_model.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport cartopy.crs as ccrs\nimport cartopy.feature as cfeature\nimport matplotlib.pyplot as plt\n\n%matplotlib inline\n\nimport xarray as xr\n```\n\n----------------------------------------\n\nTITLE: Indexing a Sparse Array\nDESCRIPTION: This snippet demonstrates how to index a sparse array, similar to indexing a numpy array.  It shows accessing both diagonal (non-zero) and off-diagonal (zero) elements.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/duckarrays.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"s[1, 1]  # diagonal elements should be ones\n    s[2, 3]  # off-diagonal elements should be zero\"\n```\n\n----------------------------------------\n\nTITLE: Converting Xarray Scalar Results to Native Python Types\nDESCRIPTION: Two approaches for handling xarray scalar results: either explicitly specifying the dtype when creating a pandas Series, or converting individual values using .item() or float() constructor.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/getting-started-guide/faq.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npd.Series({\"x\": arr[0], \"mean\": arr.mean(), \"std\": arr.std()}, dtype=float)\n```\n\nLANGUAGE: python\nCODE:\n```\npd.Series({\"x\": arr[0].item(), \"mean\": float(arr.mean())})\n```\n\n----------------------------------------\n\nTITLE: Finding ancestors and common ancestor in xarray DataTree\nDESCRIPTION: Demonstrates how to find the ancestors of a node (primates), the root node of the tree, and the common ancestor of two nodes (primates and dinosaurs) using the `parents`, `root`, and `find_common_ancestor` methods, respectively.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/hierarchical-data.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n\n    [node.name for node in reversed(primates.parents)]\n    primates.root.name\n    primates.find_common_ancestor(dinosaurs).name\n```\n\n----------------------------------------\n\nTITLE: In-place Update of Xarray Dataset\nDESCRIPTION: This snippet shows how to update an existing Dataset in-place using the update method without checking for conflicts, allowing overwriting of existing variables.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/combining.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nds.update({\"space\": (\"space\", [10.2, 9.4, 3.9])})\n```\n\n----------------------------------------\n\nTITLE: Checking if DataTree is Hollow in Python\nDESCRIPTION: Shows how to check if a DataTree is 'hollow' (has data stored only at leaf nodes) using the is_hollow property.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/hierarchical-data.rst#2025-04-21_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nsimpsons.is_hollow\n```\n\n----------------------------------------\n\nTITLE: Covariance and Correlation with Complex Arrays\nDESCRIPTION: Methods for calculating covariance and correlation that now support complex-valued arrays.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nxr.cov\n```\n\nLANGUAGE: python\nCODE:\n```\nxr.corr\n```\n\n----------------------------------------\n\nTITLE: Dataset Assignment and Coordinate Assignment\nDESCRIPTION: Examples of using assign() and assign_coords() methods to add new variables and coordinates to a Dataset.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_78\n\nLANGUAGE: python\nCODE:\n```\nds = xray.Dataset({'y': ('x', [1, 2, 3])})\nds.assign(z=lambda ds: ds.y**2)\nds.assign_coords(z=('x', ['a', 'b', 'c']))\n```\n\n----------------------------------------\n\nTITLE: Computing Standard Deviation Across Groups in Xarray Python\nDESCRIPTION: Shows how to compute the standard deviation across groups using the std method in Xarray. The example demonstrates using ellipsis (...) for reducing over unspecified dimensions. Requires a GroupBy object.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/groupby.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nds.groupby(\"x\").std(...)\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Xarray Analysis\nDESCRIPTION: Imports the necessary Python libraries for data analysis and visualization, including matplotlib for plotting, numpy for numerical operations, cartopy for map projections, and xarray for multidimensional data handling.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/examples/area_weighted_temperature.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%matplotlib inline\n\nimport cartopy.crs as ccrs\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nimport xarray as xr\n```\n\n----------------------------------------\n\nTITLE: Split-Apply-Combine Pattern Implementation in Python\nDESCRIPTION: Pseudocode demonstrating the split-apply-combine pattern that GroupBy abstracts, showing both the manual for-loop implementation and the simplified GroupBy approach.\nSOURCE: https://github.com/pydata/xarray/blob/main/design_notes/grouper_objects.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresults = []\nfor element in unique_labels:\n    subset = ds.sel(x=(ds.x == element))  # split\n    # subset = ds.where(ds.x == element, drop=True)  # alternative\n    result = subset.mean() # apply\n    results.append(result)\n\nxr.concat(results)  # combine\n```\n\nLANGUAGE: python\nCODE:\n```\nds.groupby('x').mean()  # splits, applies, and combines\n```\n\n----------------------------------------\n\nTITLE: Creating DataTree with Different Time Resolutions\nDESCRIPTION: This code attempts to create a DataTree with datasets having different time resolutions, demonstrating the alignment requirement.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/hierarchical-data.rst#2025-04-21_snippet_40\n\nLANGUAGE: python\nCODE:\n```\n# (drop the attributes just to make the printed representation shorter)\nds = xr.tutorial.open_dataset(\"air_temperature\").drop_attrs()\n\nds_daily = ds.resample(time=\"D\").mean(\"time\")\nds_weekly = ds.resample(time=\"W\").mean(\"time\")\nds_monthly = ds.resample(time=\"ME\").mean(\"time\")\n\nds_daily.sizes\nds_weekly.sizes\nds_monthly.sizes\n```\n\n----------------------------------------\n\nTITLE: Using DataArray.dt.isocalendar() Instead of Deprecated weekofyear Attribute\nDESCRIPTION: Shows the recommended replacement for the deprecated weekofyear and week attributes. This method returns a Dataset with year, week, and weekday calculated according to the ISO 8601 calendar and requires pandas version 1.1.0 or greater.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nDataArray.dt.isocalendar().week\n```\n\n----------------------------------------\n\nTITLE: Creating and Converting xarray Dataset to DataFrame in Python\nDESCRIPTION: This code snippet demonstrates how to create an xarray Dataset and convert it to a pandas DataFrame using the `to_dataframe()` method. The resulting DataFrame structure will have each variable and coordinate represented as a separate column, except for indexes which remain as indexes.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/pandas.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nds = xr.Dataset(\n        {\"foo\": ((\"x\", \"y\"), np.random.randn(2, 3))},\n        coords={\n            \"x\": [10, 20],\n            \"y\": [\"a\", \"b\", \"c\"],\n            \"along_x\": (\"x\", np.random.randn(2)),\n            \"scalar\": 123,\n        },\n    )\n    df = ds.to_dataframe()\n```\n\n----------------------------------------\n\nTITLE: Opening Zarr Files with Xarray\nDESCRIPTION: This snippet shows how to open a Zarr dataset using Xarray's built-in detection for the engine, which happens automatically if the dataset is in a standard directory format.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/getting-started-guide/faq.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport xarray as xr\n\n# use xarray to open the file and return an xarray.Dataset object using zarr engine\nds = xr.open_dataset(\"path/to/your/file.zarr\", engine=\"zarr\")\n\n# Print Dataset object\nprint(ds)\n```\n\n----------------------------------------\n\nTITLE: Defining Git Attribute Placeholders for Version Control\nDESCRIPTION: These Git placeholders are used to embed version control information into files. They include the commit hash, commit date, tag information, and reference names. These placeholders are replaced with actual values during checkout operations when the export-subst attribute is set.\nSOURCE: https://github.com/pydata/xarray/blob/main/.git_archival.txt#2025-04-21_snippet_0\n\nLANGUAGE: git\nCODE:\n```\nnode: $Format:%H$\nnode-date: $Format:%cI$\ndescribe-name: $Format:%(describe:tags=true,match=*[0-9]*)$\nref-names: $Format:%D$\n```\n\n----------------------------------------\n\nTITLE: Implementing a BackendEntrypoint Subclass in Python\nDESCRIPTION: This example shows how to create a subclass of BackendEntrypoint with the required methods and attributes to implement a custom backend for Xarray.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/internals/how-to-add-new-backend.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom xarray.backends import BackendEntrypoint\n\n\nclass MyBackendEntrypoint(BackendEntrypoint):\n    def open_dataset(\n        self,\n        filename_or_obj,\n        *,\n        drop_variables=None,\n        # other backend specific keyword arguments\n        # `chunks` and `cache` DO NOT go here, they are handled by xarray\n    ):\n        return my_open_dataset(filename_or_obj, drop_variables=drop_variables)\n\n    open_dataset_parameters = [\"filename_or_obj\", \"drop_variables\"]\n\n    def guess_can_open(self, filename_or_obj):\n        try:\n            _, ext = os.path.splitext(filename_or_obj)\n        except TypeError:\n            return False\n        return ext in {\".my_format\", \".my_fmt\"}\n\n    description = \"Use .my_format files in Xarray\"\n\n    url = \"https://link_to/your_backend/documentation\"\n```\n\n----------------------------------------\n\nTITLE: Xarray Grouper Object Reuse\nDESCRIPTION: This code demonstrates the reuse of a `BinGrouper` object in Xarray's `groupby` method, allowing to group by multiple variables using the same grouper. The grouper instances will be copied internally for safe caching.\nSOURCE: https://github.com/pydata/xarray/blob/main/design_notes/grouper_objects.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n```python\ngrouper = BinGrouper(...)\nds.groupby(x=grouper, y=grouper)\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a DataArray with a Custom SpatialIndex\nDESCRIPTION: Example demonstrating the proposed syntax for creating a DataArray with a custom spatial index built from latitude and longitude coordinates, using the new 'indexes' constructor argument.\nSOURCE: https://github.com/pydata/xarray/blob/main/design_notes/flexible_indexes_notes.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> da = xr.DataArray(\n...     data=[[275.2, 273.5], [270.8, 278.6]],\n...     dims=('x', 'y'),\n...     coords={\n...         'lat': (('x', 'y'), [[45.6, 46.5], [50.2, 51.6]]),\n...         'lon': (('x', 'y'), [[5.7, 10.5], [6.2, 12.8]]),\n...     },\n...     indexes={('lat', 'lon'): SpatialIndex},\n... )\n<xarray.DataArray (x: 2, y: 2)>\narray([[275.2, 273.5],\n       [270.8, 278.6]])\nCoordinates:\n  * lat      (x, y) float64 45.6 46.5 50.2 51.6\n  * lon      (x, y) float64 5.7 10.5 6.2 12.8\n```\n\n----------------------------------------\n\nTITLE: Comparing Benchmark Results Between Commits\nDESCRIPTION: This command compares benchmark performance between two commits using the ASV tool. It sorts results by ratio, splits them into categories based on performance changes, and filters out changes below a threshold factor of 1.5.\nSOURCE: https://github.com/pydata/xarray/blob/main/asv_bench/benchmarks/README_CI.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$> asv compare --sort ratio --split --factor 1.5 -m fv-az95-499 8db28f02 3a305096\n\nBenchmarks that have stayed the same:\n\n       before           after         ratio\n     [8db28f02]       [3a305096]\n     <ci-benchmark-check~9^2>\n              n/a              n/a      n/a  benchmark_restoration.RollingBall.time_rollingball_ndim\n      1.23±0.04ms       1.37±0.1ms     1.12  benchmark_transform_warp.WarpSuite.time_to_float64(<class 'numpy.float64'>, 128, 3)\n       5.07±0.1μs       5.59±0.4μs     1.10  benchmark_transform_warp.ResizeLocalMeanSuite.time_resize_local_mean(<class 'numpy.float32'>, (192, 192, 192), (192, 192, 192))\n      1.23±0.02ms       1.33±0.1ms     1.08  benchmark_transform_warp.WarpSuite.time_same_type(<class 'numpy.float32'>, 128, 3)\n       9.45±0.2ms       10.1±0.5ms     1.07  benchmark_rank.Rank3DSuite.time_3d_filters('majority', (32, 32, 32))\n       23.0±0.9ms         24.6±1ms     1.07  benchmark_interpolation.InterpolationResize.time_resize((80, 80, 80), 0, 'symmetric', <class 'numpy.float64'>, True)\n         38.7±1ms         41.1±1ms     1.06  benchmark_transform_warp.ResizeLocalMeanSuite.time_resize_local_mean(<class 'numpy.float32'>, (2048, 2048), (192, 192, 192))\n       4.97±0.2μs       5.24±0.2μs     1.05  benchmark_transform_warp.ResizeLocalMeanSuite.time_resize_local_mean(<class 'numpy.float32'>, (2048, 2048), (2048, 2048))\n       4.21±0.2ms       4.42±0.3ms     1.05  benchmark_rank.Rank3DSuite.time_3d_filters('gradient', (32, 32, 32))\n\n...\n```\n\n----------------------------------------\n\nTITLE: DataArray Datetime Accessors in Python\nDESCRIPTION: Provides methods for accessing time-related components and performing timedelta operations on DataArray objects\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/api.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nDataArray.dt.seconds\n```\n\nLANGUAGE: python\nCODE:\n```\nDataArray.dt.microseconds\n```\n\nLANGUAGE: python\nCODE:\n```\nDataArray.dt.nanoseconds\n```\n\nLANGUAGE: python\nCODE:\n```\nDataArray.dt.total_seconds\n```\n\n----------------------------------------\n\nTITLE: Interpolating with Datetime Coordinates - Python\nDESCRIPTION: This snippet illustrates how to perform interpolation using a numpy datetime64 coordinate string in Xarray.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/interpolation.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nda_dt64 = xr.DataArray(\\n    [1, 3], [(\"time\", pd.date_range(\"1/1/2000\", \"1/3/2000\", periods=2))]\\n)\\nda_dt64.interp(time=\"2000-01-02\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic DataTree Node in Python with xarray\nDESCRIPTION: This snippet demonstrates how to create a single DataTree node with example data using xarray. It shows the creation of a Dataset and its conversion to a DataTree, as well as checking for parent and children nodes.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/data-structures.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nds1 = xr.Dataset({\"foo\": \"orange\"})\ndt = xr.DataTree(name=\"root\", dataset=ds1)\ndt\n\ndt.parent is None\ndt.children\n```\n\n----------------------------------------\n\nTITLE: Customizing Encoding for NetCDF Variables\nDESCRIPTION: This snippet details how to specify encodings for variables when writing NetCDF files using Xarray. It shows how to create an encoding dictionary that can control data types, fill values, and scaling factors to ensure data is accurately represented on disk.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/io.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nencoding={'foo': {'dtype': 'int16', 'scale_factor': 0.1, '_FillValue': -9999}}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom RasterIndex in Python for Xarray\nDESCRIPTION: This code snippet demonstrates the implementation of a custom RasterIndex class for geospatial, raster datasets in Xarray. It encapsulates two PandasIndex instances for x and y dimensions and provides basic functionality for label-based selection.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/internals/how-to-create-custom-index.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom xarray import Index\nfrom xarray.core.indexes import PandasIndex\nfrom xarray.core.indexing import merge_sel_results\n\n\nclass RasterIndex(Index):\n    def __init__(self, xy_indexes):\n        assert len(xy_indexes) == 2\n\n        # must have two distinct dimensions\n        dim = [idx.dim for idx in xy_indexes.values()]\n        assert dim[0] != dim[1]\n\n        self._xy_indexes = xy_indexes\n\n    @classmethod\n    def from_variables(cls, variables):\n        assert len(variables) == 2\n\n        xy_indexes = {\n            k: PandasIndex.from_variables({k: v}) for k, v in variables.items()\n        }\n\n        return cls(xy_indexes)\n\n    def create_variables(self, variables):\n        idx_variables = {}\n\n        for index in self._xy_indexes.values():\n            idx_variables.update(index.create_variables(variables))\n\n        return idx_variables\n\n    def sel(self, labels):\n        results = []\n\n        for k, index in self._xy_indexes.items():\n            if k in labels:\n                results.append(index.sel({k: labels[k]}))\n\n        return merge_sel_results(results)\n```\n\n----------------------------------------\n\nTITLE: Setting Xarray options to control flox integration\nDESCRIPTION: Example showing how to disable the flox integration for GroupBy operations in Xarray, which was introduced as a performance improvement.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nxr.set_options(use_flox=False)\n```\n\n----------------------------------------\n\nTITLE: Accessing DataArray with MultiIndex Coordinates in Python\nDESCRIPTION: This snippet shows how to access the created coordinates of an Xarray DataArray after it's instantiated with a MultiIndex. It demonstrates how to retrieve coordinate values and their structure, highlighting the automatic creation of dimension coordinates from a MultiIndex.\nSOURCE: https://github.com/pydata/xarray/blob/main/design_notes/flexible_indexes_notes.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> da.x\n<xarray.DataArray 'x' (x: 2)>\narray([('a', 0), ('b', 1)], dtype=object)\nCoordinates:\n  * x        (x) MultiIndex\n  - lvl1     (x) object 'a' 'b'\n  - lvl2     (x) int64 0 1\n```\n\n----------------------------------------\n\nTITLE: Breaking Changes in Zarr Operations\nDESCRIPTION: Example showing the new default mode for Dataset.to_zarr() when using regions, changed from 'a' to 'r+'\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_39\n\nLANGUAGE: python\nCODE:\n```\ndataset.to_zarr(region=..., mode=\"r+\")  # New default mode\n# Old: mode=\"a\"\n```\n\n----------------------------------------\n\nTITLE: Interpolation Methods in Xarray - Python\nDESCRIPTION: This snippet introduces the methods available within Xarray for performing 1D and multi-dimensional interpolation.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/interpolation.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nda = xr.DataArray(\\n    np.sin(np.linspace(0, 2 * np.pi, 10)),\\n    dims=\"x\",\\n    coords={\"x\": np.linspace(0, 1, 10)},\\n)\\n\\nda.plot.line(\"o\", label=\"original\")\\nda.interp(x=np.linspace(0, 1, 100)).plot.line(label=\"linear (default)\")\\nda.interp(x=np.linspace(0, 1, 100), method=\"cubic\").plot.line(label=\"cubic\")\\n@savefig interpolation_sample1.png width=4in\\nplt.legend()\n```\n\n----------------------------------------\n\nTITLE: Comparing Weighted and Unweighted Temperature Means\nDESCRIPTION: Creates a plot comparing the weighted and unweighted mean temperatures over time. This visualization demonstrates that the weighted mean temperature is higher than the unweighted mean due to proper accounting for cell area.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/examples/area_weighted_temperature.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nweighted_mean.plot(label=\"weighted\")\nair.mean((\"lon\", \"lat\")).plot(label=\"unweighted\")\n\nplt.legend()\n```\n\n----------------------------------------\n\nTITLE: Importing Essential Libraries for xarray\nDESCRIPTION: Basic imports required for working with xarray, including NumPy for numerical operations and pandas for data structures.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/getting-started-guide/quick-overview.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport pandas as pd\nimport xarray as xr\n```\n\n----------------------------------------\n\nTITLE: Initializing DataTree Persist Method in Python\nDESCRIPTION: Added a new persist() method to the DataTree class to allow persisting lazy data.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nDataTree.persist()\n```\n\n----------------------------------------\n\nTITLE: New Method Call Examples in Python\nDESCRIPTION: Examples showing various new method calls and features introduced in this release, including transpose, coarsen, and DataArray construction with dictionaries.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nVariable.transpose(missing_dims=...) \nDataset.transpose(missing_dims=...) \nDataArray(coords={...}) \nDataset.coarsen.construct() \nDataArray.coarsen.construct()\n```\n\n----------------------------------------\n\nTITLE: Reset Object Encoding Methods\nDESCRIPTION: Reference to new Xarray methods for resetting encoding in Dataset and DataArray objects.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nDataset.reset_encoding\n```\n\nLANGUAGE: python\nCODE:\n```\nDataArray.reset_encoding\n```\n\n----------------------------------------\n\nTITLE: Visualizing Original vs. Filled Data\nDESCRIPTION: Creates a plot comparing the original data with missing values to the data after filling missing values with climatology, showing the effectiveness of the filling method.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/examples/weather-data.ipynb#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndf[[\"filled\", \"some_missing\"]].plot()\n```\n\n----------------------------------------\n\nTITLE: Creating DataTree with Current Signals\nDESCRIPTION: This code creates a DataTree containing current signal data for multiple oscilloscopes and checks isomorphism with a voltages tree.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/hierarchical-data.rst#2025-04-21_snippet_38\n\nLANGUAGE: python\nCODE:\n```\ncurrents = xr.DataTree.from_dict(\n    {\n        \"/oscilloscope1\": xr.Dataset(\n            {\n                \"current\": (\n                    \"time\",\n                    signal_generator(time_stamps1, f=2, A=1.2, phase=1),\n                ),\n            },\n            coords={\"time\": time_stamps1},\n        ),\n        \"/oscilloscope2\": xr.Dataset(\n            {\n                \"current\": (\n                    \"time\",\n                    signal_generator(time_stamps2, f=1.6, A=1.6, phase=0.7),\n                ),\n            },\n            coords={\"time\": time_stamps2},\n        ),\n    }\n)\ncurrents\n\ncurrents.isomorphic(voltages)\n```\n\n----------------------------------------\n\nTITLE: Declaring Xarray Backend Entrypoint in setup.py\nDESCRIPTION: This snippet shows how to declare an entrypoint for an Xarray backend in a `setup.py` file using setuptools. The entrypoint allows Xarray to discover and load your custom backend.  The `my_engine` name will be passed to `xarray.open_dataset` as the `engine` argument.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/internals/how-to-add-new-backend.rst#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n \"setuptools.setup(\\n    entry_points={\\n        \\\"xarray.backends\\\": [\\n            \\\"my_engine=my_package.my_module:MyBackendEntrypoint\\\"\\n        ],\\n    },\\n)\"\n```\n\n----------------------------------------\n\nTITLE: Reindexing DataArray with Tolerance in Python using xarray\nDESCRIPTION: Demonstrates reindexing a DataArray with the tolerance argument for nearest-neighbor selection.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_72\n\nLANGUAGE: python\nCODE:\n```\narray = xray.DataArray([1, 2, 3], dims=\"x\")\narray.reindex(x=[0.9, 1.5], method=\"nearest\", tolerance=0.2)\n```\n\n----------------------------------------\n\nTITLE: Specifying OPeNDAP Protocol Versions\nDESCRIPTION: Shows how to specify different OPeNDAP protocol versions (DAP2 and DAP4) using URL schemes when accessing data.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/io.rst#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n# dap2 url\nds_url = 'dap2://gpm1.gesdisc.eosdis.nasa.gov/opendap/hyrax/example.nc'\n\n# dap4 url\nds_url = 'dap4://gpm1.gesdisc.eosdis.nasa.gov/opendap/hyrax/example.nc'\n```\n\n----------------------------------------\n\nTITLE: Reindexing Datasets and DataArrays in Python with Xarray\nDESCRIPTION: Shows how reindex_like and align functions work interchangeably between DataArray and Dataset objects, even with mismatched dimensions. This demonstrates the flexibility of Xarray's alignment operations.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/indexing.rst#2025-04-21_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nds\nds.reindex_like(baz)\nother = xr.DataArray([\"a\", \"b\", \"c\"], dims=\"other\")\n# this is a no-op, because there are no shared dimension names\nds.reindex_like(other)\n```\n\n----------------------------------------\n\nTITLE: Reindexing with Fill Method in Xarray\nDESCRIPTION: Shows how to use the reindex method with a fill method for upsampling data, allowing interpolation of values at new index positions.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_92\n\nLANGUAGE: python\nCODE:\n```\ndata = xray.DataArray([1, 2, 3], [(\"x\", range(3))])\ndata.reindex(x=[0.5, 1, 1.5, 2, 2.5], method=\"pad\")\n```\n\n----------------------------------------\n\nTITLE: Accessing Element in Xarray DataTree - Python\nDESCRIPTION: This snippet demonstrates how to access an element within a DataTree using a filesystem-like syntax. The method requires no additional dependencies and directly returns the specified data array.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/getting-started-guide/quick-overview.rst#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ndt[\"simulation/coarse/foo\"]\n```\n\n----------------------------------------\n\nTITLE: Chaining Hypothesis Strategies for Xarray - Python\nDESCRIPTION: Illustrates the customization of Xarray data structures by chaining different Hypothesis strategies, passing strategies as arguments to generate complex data structures.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/testing.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom hypothesis.extra.numpy import complex_number_dtypes\n\nxrst.variables(dtype=complex_number_dtypes()).example()\n```\n\n----------------------------------------\n\nTITLE: Adding data=False Option to to_dict() Methods in Python\nDESCRIPTION: New data=False option added to to_dict() methods.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_55\n\nLANGUAGE: Python\nCODE:\n```\nobj.to_dict(data=False)\n```\n\n----------------------------------------\n\nTITLE: Custom Array Strategy Functions for Duck Arrays - Python\nDESCRIPTION: Presents a function that returns a strategy for generating random sparse.COO arrays, allowing customization of array types wrapped by Xarray Variables using the array_strategy_fn argument.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/testing.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef sparse_random_arrays(shape: tuple[int, ...]) -> sparse._coo.core.COO:\n    \"\"\"Strategy which generates random sparse.COO arrays\"\"\"\n    if shape is None:\n        shape = npst.array_shapes()\n    else:\n        shape = st.just(shape)\n    density = st.integers(min_value=0, max_value=1)\n    return st.builds(sparse.random, shape=shape, density=density)\n\n\ndef sparse_random_arrays_fn(\n    *, shape: tuple[int, ...], dtype: np.dtype\n) -> st.SearchStrategy[sparse._coo.core.COO]:\n    return sparse_random_arrays(shape=shape)\n\nsparse_random_variables = xrst.variables(\n    array_strategy_fn=sparse_random_arrays_fn, dtype=st.just(np.dtype(\"float64\"))\n)\nsparse_random_variables.example()\n```\n\n----------------------------------------\n\nTITLE: Installing Xarray Pre-release with Mamba and Pip in Python\nDESCRIPTION: Commands to install the pre-release version of Xarray using Mamba to create a new environment and pip to upgrade Xarray.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\nmamba create -n <name> python=3.10 xarray\npython -m pip install --pre --upgrade --no-deps xarray\n```\n\n----------------------------------------\n\nTITLE: Multi-level Indexing in Python using Xarray\nDESCRIPTION: Demonstrates various methods of multi-level indexing in Xarray, including using tuples, lists, dictionaries, and keyword arguments. This allows for complex selections on multi-indexed data.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/indexing.rst#2025-04-21_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nmidx = pd.MultiIndex.from_product([list(\"abc\"), [0, 1]], names=(\"one\", \"two\"))\nmda = xr.DataArray(np.random.rand(6, 3), [(\"x\", midx), (\"y\", range(3))])\nmda\nmda.sel(x=(list(\"ab\"), [0]))\n\nmda.sel(x=[(\"a\", 0), (\"b\", 1)])\n\nmda.sel(x={\"one\": \"a\", \"two\": 0})\n\nmda.sel(one=\"a\", two=0)\n\nmda.loc[{\"one\": \"a\"}, ...]\n```\n\n----------------------------------------\n\nTITLE: Comparing Manual Weighted Sum Calculation in Python with Xarray\nDESCRIPTION: Demonstrates the equivalence between the weighted sum method and manual multiplication and summation.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/computation.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nweighted_sum = (prec * weights).sum()\nweighted_sum\n```\n\n----------------------------------------\n\nTITLE: Dataset Multi-dimensional Variable Example\nDESCRIPTION: Example showing usage of multi-dimensional variables in Xarray datasets that share names with dimensions, useful for finite volume model output\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nDataset.to_zarr(\"write_empty_chunks\": True)\n```\n\n----------------------------------------\n\nTITLE: Using map_blocks to apply functions with non-xarray arguments in Xarray\nDESCRIPTION: Example showing how xr.map_blocks() can be applied with non-xarray arguments. This functionality was fixed in v0.21.0 to properly handle such cases.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nxr.map_blocks\n```\n\n----------------------------------------\n\nTITLE: Resample Syntax Example in Python\nDESCRIPTION: Shows the transition from old to new resample syntax in xarray. The old syntax using how parameter is deprecated in favor of method chaining.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_59\n\nLANGUAGE: python\nCODE:\n```\n# Old syntax (deprecated)\ndata.resample('1D', dim='time', how='mean')\n\n# New syntax\ndata.resample(time='1D').mean()\n# or\ndata.resample({'time': '1D'}).mean()\n```\n\n----------------------------------------\n\nTITLE: Generating Array API Standard Compliant Xarray Variables - Python\nDESCRIPTION: Uses Hypothesis and Python's Array API to create strategies for generating Xarray variables that conform to the Python Array API Standard, ensuring compatibility with various array libraries.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/testing.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as xp  # compatible in numpy 2.0\n\n# use `import numpy.array_api as xp` in numpy>=1.23,<2.0\n\nfrom hypothesis.extra.array_api import make_strategies_namespace\n\nxps = make_strategies_namespace(xp)\n\nxp_variables = xrst.variables(\n    array_strategy_fn=xps.arrays,\n    dtype=xps.scalar_dtypes(),\n)\nxp_variables.example()\n```\n\n----------------------------------------\n\nTITLE: Specifying Dimension Lengths in Hypothesis Strategies - Python\nDESCRIPTION: Illustrates usage of mappings with st.just() to specify dimension names and lengths, providing more control over generated Xarray variable structures.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/testing.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nxrst.variables(dims=st.just({\"x\": 2, \"y\": 3})).example()\n```\n\n----------------------------------------\n\nTITLE: Adding Coordinates to New Dimensions in Pointwise Indexing\nDESCRIPTION: Shows how to add coordinates to new dimensions created during pointwise indexing, which helps maintain the semantic meaning of the dimensions in the result.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/indexing.rst#2025-04-21_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nda.isel(\n    x=xr.DataArray([0, 1, 6], dims=\"z\", coords={\"z\": [\"a\", \"b\", \"c\"]}),\n    y=xr.DataArray([0, 1, 0], dims=\"z\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Python Function References\nDESCRIPTION: Code references to new xarray functions and methods including combine_nested, combine_by_coords, rolling_exp, str accessors and others.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_52\n\nLANGUAGE: python\nCODE:\n```\n:py:func:`~xarray.combine_nested`\n:py:func:`~xarray.combine_by_coords`\n:py:func:`~xarray.concat`\n:py:meth:`~xarray.DataArray.rolling_exp`\n:py:meth:`~xarray.Dataset.rolling_exp`\n:py:func:`DataArray.str <core.accessor_str.StringAccessor>`\n```\n\n----------------------------------------\n\nTITLE: Defining an RMS Function for DataTree Mapping\nDESCRIPTION: This code defines a root mean square (RMS) function that can be applied to Dataset objects within a DataTree.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/hierarchical-data.rst#2025-04-21_snippet_33\n\nLANGUAGE: python\nCODE:\n```\ndef rms(signal):\n    return np.sqrt(np.mean(signal**2))\n```\n\n----------------------------------------\n\nTITLE: Dictionary-Based Indexing for Labeled Dimensions in Python\nDESCRIPTION: Shows how to use a dictionary for indexing with labeled dimensions in Xray, providing a safe way to do assignment with labeled dimensions.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_95\n\nLANGUAGE: python\nCODE:\n```\narray = xray.DataArray(np.zeros(5), dims=[\"x\"])\narray[dict(x=slice(3))] = 1\narray\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries for Xarray Testing - Python\nDESCRIPTION: Import necessary libraries like numpy, pandas, and xarray for setting up the context in which the Xarray strategies are demonstrated. These libraries are required dependencies for the examples provided.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/testing.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport pandas as pd\nimport xarray as xr\n\nnp.random.seed(123456)\n```\n\n----------------------------------------\n\nTITLE: Generating Variable Without Attributes Using Hypothesis - Python\nDESCRIPTION: Demonstrates how to generate Xarray variables without attributes by fixing the attrs argument to an empty dictionary using Hypothesis' just() strategy.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/testing.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nxrst.variables(attrs=st.just({})).example()\n```\n\n----------------------------------------\n\nTITLE: Utilizing Helper Function to Create Coordinates from Index in Python\nDESCRIPTION: This snippet illustrates the use of a helper function to generate coordinate and index dictionaries from an existing MultiIndex. It shows how to re-use an existing index in a new DataArray while highlighting the structure of the generated coordinate and index dictionaries.\nSOURCE: https://github.com/pydata/xarray/blob/main/design_notes/flexible_indexes_notes.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> coords_dict, index_dict = create_coords_from_index(midx, dims='x', include_dim_coord=True)\n>>> coords_dict\n{'x': <xarray.Variable (x: 2)>\\n array([('a', 0), ('b', 1)], dtype=object),\\n 'lvl1': <xarray.Variable (x: 2)>\\n array(['a', 'b'], dtype=object),\\n 'lvl2': <xarray.Variable (x: 2)>\\n array([0, 1])}\\n>>> index_dict\\n{('lvl1', 'lvl2'): midx}\\n>>> xr.DataArray([1.0, 2.0], dims='x', coords=coords_dict, indexes=index_dict)\\n<xarray.DataArray (x: 2)>\\narray([1., 2.])\\nCoordinates:\\n    x        (x) object ('a', 0) ('b', 1)\\n  * lvl1     (x) object 'a' 'b'\\n  * lvl2     (x) int64 0 1\n```\n\n----------------------------------------\n\nTITLE: Customizing FacetGrid Plot Titles in Python\nDESCRIPTION: Demonstrates how to modify plot titles and add annotations to a FacetGrid after creation using matplotlib functionality.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/plotting.rst#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\ng = t.plot.imshow(x=\"lon\", y=\"lat\", col=\"time\", col_wrap=3, robust=True)\n\nfor i, ax in enumerate(g.axs.flat):\n    ax.set_title(\"Air Temperature %d\" % i)\n\nbottomright = g.axs[-1, -1]\nbottomright.annotate(\"bottom right\", (240, 40))\n\nplt.draw()\n```\n\n----------------------------------------\n\nTITLE: Creating Discrete Colormaps in Xarray Plots\nDESCRIPTION: Demonstrates how to create plots with discrete colormaps using the levels parameter, custom color lists, and Seaborn color palettes in Xarray.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/plotting.rst#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n@savefig plotting_discrete_levels.png width=4in\nair2d.plot(levels=8)\n\n@savefig plotting_listed_levels.png width=4in\nair2d.plot(levels=[0, 12, 18, 30])\n\nflatui = [\"#9b59b6\", \"#3498db\", \"#95a5a6\", \"#e74c3c\", \"#34495e\", \"#2ecc71\"]\n@savefig plotting_custom_colors_levels.png width=4in\nair2d.plot(levels=[0, 12, 18, 30], colors=flatui)\n\n@savefig plotting_seaborn_palette.png width=4in\nair2d.plot(levels=10, cmap=\"husl\")\nplt.draw()\n```\n\n----------------------------------------\n\nTITLE: Controlling Display Width with set_options in Xarray\nDESCRIPTION: Demonstrates how to control the width of Dataset representation using xray.set_options. It can be used as a context manager for temporary changes or to set a global option with a default value of 80.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_79\n\nLANGUAGE: python\nCODE:\n```\nds = xray.Dataset({\"x\": np.arange(1000)})\nwith xray.set_options(display_width=40):\n    print(ds)\n```\n\n----------------------------------------\n\nTITLE: Standalone Variable Package Design Concept\nDESCRIPTION: Proposal to factor out xarray's Variable object into a minimal dependency package that supports multiple array-like objects and follows data-apis standards\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/roadmap.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass Variable:\n    # Supports wrapping multiple array types:\n    # - NumPy\n    # - Dask\n    # - Sparse\n    # - Pint\n    # - CuPy\n    # - Pytorch\n```\n\n----------------------------------------\n\nTITLE: Registering a ChunkManagerEntrypoint in setup.cfg\nDESCRIPTION: Example of how to register a new ChunkManagerEntrypoint subclass in the setup.cfg file. This allows developers to integrate their chunked array implementations with Xarray.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/internals/chunked-arrays.rst#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[options.entry_points]\nxarray.chunkmanagers =\n    dask = xarray.namedarray.daskmanager:DaskManager\n```\n\n----------------------------------------\n\nTITLE: Showing Detailed Benchmark Results for a Specific Test\nDESCRIPTION: This command displays detailed results for a specific benchmark test, showing timing information for different parameter combinations. It filters tests matching 'time_to_float64' pattern and displays results for a specific commit.\nSOURCE: https://github.com/pydata/xarray/blob/main/asv_bench/benchmarks/README_CI.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$> asv show -b time_to_float64 8db28f02\n\nCommit: 8db28f02 <ci-benchmark-check~9^2>\n\nbenchmark_transform_warp.WarpSuite.time_to_float64 [fv-az95-499/conda-py3.7-cython-numpy1.17-pooch-scipy]\n  ok\n  =============== ============= ========== ============= ========== ============ ========== ============ ========== ============\n  --                                                                N / order\n  --------------- --------------------------------------------------------------------------------------------------------------\n      dtype_in       128 / 0     128 / 1      128 / 3     1024 / 0    1024 / 1    1024 / 3    4096 / 0    4096 / 1    4096 / 3\n  =============== ============= ========== ============= ========== ============ ========== ============ ========== ============\n    numpy.uint8    2.56±0.09ms   523±30μs   1.28±0.05ms   130±3ms     28.7±2ms    81.9±3ms   2.42±0.01s   659±5ms    1.48±0.01s\n    numpy.uint16   2.48±0.03ms   530±10μs   1.28±0.02ms   130±1ms    30.4±0.7ms   81.1±2ms    2.44±0s     653±3ms    1.47±0.02s\n   numpy.float32    2.59±0.1ms   518±20μs   1.27±0.01ms   127±3ms     26.6±1ms    74.8±2ms   2.50±0.01s   546±10ms   1.33±0.02s\n   numpy.float64   2.48±0.04ms   513±50μs   1.23±0.04ms   134±3ms     30.7±2ms    85.4±2ms   2.55±0.01s   632±4ms    1.45±0.01s\n  =============== ============= ========== ============= ========== ============ ========== ============ ========== ============\n  started: 2021-07-06 06:14:36, duration: 1.99m\n```\n\n----------------------------------------\n\nTITLE: Concatenating DataArrays in Xarray\nDESCRIPTION: This snippet demonstrates concatenation of two DataArrays along a new dimension 'c' using Xarray. The arrays 'a' and 'b' are concatenated to form a new DataArray 'c'.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/terminology.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\na = xr.DataArray([[1, 2], [3, 4]], dims=(\"x\", \"y\"))\nb = xr.DataArray([[5, 6], [7, 8]], dims=(\"x\", \"y\"))\nc = xr.concat([a, b], dim=\"c\")\nc\n\n```\n\n----------------------------------------\n\nTITLE: Python Rolling Mean Example with xarray DataArray\nDESCRIPTION: Example demonstrating how to calculate rolling mean on a 2D xarray DataArray using the rolling() method with specified window size and minimum periods\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_67\n\nLANGUAGE: python\nCODE:\n```\nimport xarray as xr\nimport numpy as np\n\narr = xr.DataArray(np.arange(0, 7.5, 0.5).reshape(3, 5), dims=(\"x\", \"y\"))\n\narr\n# <xarray.DataArray (x: 3, y: 5)>\n# array([[ 0. ,  0.5,  1. ,  1.5,  2. ],\n#        [ 2.5,  3. ,  3.5,  4. ,  4.5],\n#        [ 5. ,  5.5,  6. ,  6.5,  7. ]])\n# Coordinates:\n#   * x        (x) int64 0 1 2\n#   * y        (y) int64 0 1 2 3 4\n\narr.rolling(y=3, min_periods=2).mean()\n# <xarray.DataArray (x: 3, y: 5)>\n# array([[  nan,  0.25,  0.5 ,  1.  ,  1.5 ],\n#        [  nan,  2.75,  3.  ,  3.5 ,  4.  ],\n#        [  nan,  5.25,  5.5 ,  6.  ,  6.5 ]])\n# Coordinates:\n#   * x        (x) int64 0 1 2 \n#   * y        (y) int64 0 1 2 3 4\n```\n\n----------------------------------------\n\nTITLE: Installing Xarray with Conda\nDESCRIPTION: Command to install Xarray and its recommended dependencies using conda package manager from the conda-forge channel.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/getting-started-guide/installing.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ conda install -c conda-forge xarray dask netCDF4 bottleneck\n```\n\n----------------------------------------\n\nTITLE: Importing Xarray and Setting Up Environment\nDESCRIPTION: Initializes the necessary libraries for Xarray examples, including NumPy, pandas, and Xarray itself. Also sets random seed and NumPy print options for consistent output.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/internals/internal-design.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport pandas as pd\nimport xarray as xr\n\nnp.random.seed(123456)\nnp.set_printoptions(threshold=20)\n```\n\n----------------------------------------\n\nTITLE: Dependency Version Table\nDESCRIPTION: Table showing updated minimum dependency versions for various packages used by Xarray\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_18\n\nLANGUAGE: text\nCODE:\n```\n===================== =========  ========\n Package                    Old      New\n===================== =========  ========\n boto3                     1.20     1.24\n cftime                     1.5      1.6\n dask-core               2022.1   2022.7\n distributed             2022.1   2022.7\n hfnetcdf                  0.13      1.0\n iris                       3.1      3.2\n lxml                       4.7      4.9\n netcdf4                  1.5.7    1.6.0\n numpy                     1.21     1.22\n pint                      0.18     0.19\n pydap                      3.2      3.3\n rasterio                   1.2      1.3\n scipy                      1.7      1.8\n toolz                     0.11     0.12\n typing_extensions          4.0      4.3\n zarr                      2.10     2.12\n numbagg                    0.1    0.2.1\n===================== =========  ========\n```\n\n----------------------------------------\n\nTITLE: Removing Methods from xarray.Variable\nDESCRIPTION: This snippet details the methods that are proposed to be removed from xarray.Variable, addressing redundancy and confusion with other libraries' functionalities.\nSOURCE: https://github.com/pydata/xarray/blob/main/design_notes/named_array_design_doc.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Testing\n   Variable.broadcast_equals\n   Variable.equals\n   Variable.identical\n   Variable.no_conflicts\n\n# Lazy data handling\n   Variable.compute # We can probably omit this method for now, too, given that dask.compute() uses a protocol. The other concern is that different array libraries have different notions of \"compute\" and this one is rather Dask specific, including conversion from Dask to NumPy arrays. For example, in JAX every operation executes eagerly, but in a non-blocking fashion, and you need to call jax.block_until_ready() to ensure computation is finished.\n   Variable.load # Could remove? compute vs load is a common source of confusion.\n\n# Xarray-specific\n   Variable.to_index\n   Variable.to_index_variable\n   Variable.to_variable\n   Variable.to_base_variable\n   Variable.to_coord\n\n   Variable.rank # Uses bottleneck. Delete? Could use https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.rankdata.html instead\n\n# numpy-like Methods\n   Variable.conjugate # .conj is enough\n   Variable.__array_wrap__ # This is a very old NumPy protocol for duck arrays. We don't need it now that we have `__array_ufunc__` and `__array_function__`\n\n# Encoding\n    Variable.reset_encoding\n```\n\n----------------------------------------\n\nTITLE: Verifying Git Remote Configuration for Xarray Repository\nDESCRIPTION: Shows how to verify that the 'upstream' remote is correctly configured to point to the main Xarray repository.\nSOURCE: https://github.com/pydata/xarray/blob/main/HOW_TO_RELEASE.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ git remote -v\n{...}\nupstream        https://github.com/pydata/xarray (fetch)\nupstream        https://github.com/pydata/xarray (push)\n```\n\n----------------------------------------\n\nTITLE: Creating xarray Dataset from pandas DataFrame with MultiIndex\nDESCRIPTION: This snippet shows how to create an xarray Dataset from a pandas DataFrame that uses a MultiIndex. It demonstrates how to convert a DataFrame with multi-dimensional data into a Dataset with appropriate structure.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/pandas.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nindex = pd.MultiIndex.from_arrays(\n        [[\"a\", \"a\", \"b\"], [0, 1, 2]], names=[\"one\", \"two\"]\n    )\n    df = pd.DataFrame({\"x\": 1, \"y\": 2}, index=index)\n    ds = xr.Dataset(df)\n```\n\n----------------------------------------\n\nTITLE: Converting to NumPy Array using values (Discouraged)\nDESCRIPTION: This snippet demonstrates the use of the `values` attribute to convert the underlying array of an xarray DataArray to a NumPy array.  It's shown for completeness, but `to_numpy()` is the preferred method.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/duckarrays.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n\"s_da.values\"\n```\n\n----------------------------------------\n\nTITLE: Running Pytest for Specific Xarray Files\nDESCRIPTION: Example command for running tests on a specific file in the Xarray project. This is useful during development to test only the relevant components.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/contributing.rst#2025-04-21_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\npytest xarray/tests/test_dataarray.py\n```\n\n----------------------------------------\n\nTITLE: Syncing Main Branch with Upstream Repository\nDESCRIPTION: Commands to switch to the main branch and pull the latest changes from the upstream repository.\nSOURCE: https://github.com/pydata/xarray/blob/main/HOW_TO_RELEASE.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngit switch main\ngit pull upstream main\n```\n\n----------------------------------------\n\nTITLE: Converting xarray DataArray to pandas DataFrame\nDESCRIPTION: This code snippet converts an xarray DataArray directly to a pandas DataFrame using the `to_pandas()` shortcut. It preserves the original dimensionality of the DataArray within the DataFrame structure.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/pandas.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\narr = xr.DataArray(\n        np.random.randn(2, 3), coords=[(\"x\", [10, 20]), (\"y\", [\"a\", \"b\", \"c\"])]\n    )\n    df = arr.to_pandas()\n```\n\n----------------------------------------\n\nTITLE: Fixing Arguments in Xarray Strategy Testing - Python\nDESCRIPTION: Uses hypothesis.strategies.just() to fix certain aspects of data structures like dimensions while allowing variation in other attributes when generating test examples.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/testing.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport hypothesis.strategies as st\n\nxrst.variables(dims=st.just([\"x\", \"y\"])).example()\n```\n\n----------------------------------------\n\nTITLE: Zarr Auto-Region Detection\nDESCRIPTION: Implementation for automatic region detection when writing partial datasets to Zarr, allowing automatic transpose when dimension order differs from original store.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nDataset.to_zarr(region=\"auto\")\n```\n\n----------------------------------------\n\nTITLE: Git Commands for Updating from Upstream\nDESCRIPTION: Commands to fetch and merge changes from the upstream xarray repository to keep a local fork up to date with the main project.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/contributing.rst#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit fetch upstream\ngit merge upstream/main\n```\n\n----------------------------------------\n\nTITLE: Pushing a New Branch to GitHub\nDESCRIPTION: Git commands to push a newly created feature branch to a GitHub fork, making it available for collaboration and pull requests.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/contributing.rst#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin shiny-new-feature\n```\n\n----------------------------------------\n\nTITLE: H5py Driver Integration\nDESCRIPTION: Support for h5py drivers (like ros3) through h5netcdf integration\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nh5netcdf.File(filename, mode='r', driver='ros3')\n```\n\n----------------------------------------\n\nTITLE: Flowchart Visualization of Xarray Help Resources using Mermaid\nDESCRIPTION: A mermaid flowchart diagram that illustrates the different pathways for getting help with Xarray. The diagram starts with a welcome node and branches into usage help, bug reporting, and contribution paths, with appropriate resources linked to each option.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/help-diagram.rst#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n        intro[Welcome to Xarray! How can we help?]:::quesNodefmt\n        usage([\"fa:fa-chalkboard-user Xarray Tutorials\n            fab:fa-readme Xarray Docs\n            fab:fa-google Google/fab:fa-stack-overflow Stack Exchange\n            fa:fa-robot Ask AI/a Language Learning Model (LLM)\"]):::ansNodefmt\n        API([fab:fa-readme Xarray Docs\n            fab:fa-readme extension's docs]):::ansNodefmt\n        help([fab:fa-github Xarray Discussions\n            fab:fa-discord Xarray Discord\n            fa:fa-users Xarray Office Hours\n            fa:fa-globe Pangeo Discourse]):::ansNodefmt\n        bug([Report and Propose here:\n            fab:fa-github Xarray Issues]):::ansNodefmt\n        contrib([fa:fa-book-open Xarray Contributor's Guide]):::ansNodefmt\n        pr([\"fab:fa-github Pull Request (PR)\"]):::ansNodefmt\n        dev([fab:fa-github Comment on your PR\n            fa:fa-users Developer's Meeting]):::ansNodefmt\n        report[Thanks for letting us know!]:::quesNodefmt\n        merged[fa:fa-hands-clapping Your PR was merged.\n            Thanks for contributing to Xarray!]:::quesNodefmt\n\n\n        intro -->|How do I use Xarray?| usage\n        usage -->|\"with extensions (like Dask)\"| API\n\n        usage -->|I'd like some more help| help\n        intro -->|I found a bug| bug\n        intro -->|I'd like to make a small change| contrib\n        subgraph bugcontrib[Bugs and Contributions]\n            bug\n            contrib\n            bug -->|I just wanted to tell you| report\n            bug<-->|I'd like to fix the bug!| contrib\n            pr -->|my PR was approved| merged\n        end\n\n\n        intro -->|I wish Xarray could...| bug\n\n\n        pr <-->|my PR is quiet| dev\n        contrib -->pr\n\n        classDef quesNodefmt fill:#9DEEF4,stroke:#206C89\n\n        classDef ansNodefmt fill:#FFAA05,stroke:#E37F17\n\n        classDef boxfmt fill:#FFF5ED,stroke:#E37F17\n        class bugcontrib boxfmt\n\n        linkStyle default font-size:20pt,color:#206C89\n```\n\n----------------------------------------\n\nTITLE: Using Non-Dimension Coordinates for X-Axis in Plots\nDESCRIPTION: This code snippet shows how to add a calculated non-dimension coordinate as the x-axis in a plot, utilizing a decimal day derived from time coordinates.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/plotting.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndecimal_day = (air1d.time - air1d.time[0]) / pd.Timedelta(\"1d\")\nair1d_multi = air1d.assign_coords(decimal_day=(\"time\", decimal_day.data))\nair1d_multi.plot(x=\"decimal_day\")\n```\n\n----------------------------------------\n\nTITLE: Creating xarray DataTree nodes\nDESCRIPTION: Demonstrates how to create individual xarray DataTree nodes, assigning them names.  These nodes, representing Bart and Lisa Simpson, are initialized without any parent-child relationships.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/hierarchical-data.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\n    bart = xr.DataTree(name=\"Bart\")\n    lisa = xr.DataTree(name=\"Lisa\")\n```\n\n----------------------------------------\n\nTITLE: Closing and Removing Example Dataset in Python\nDESCRIPTION: This code snippet closes the 'example-data.nc' dataset and removes the file. It's part of cleanup operations after demonstrating Xarray functionality.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/dask.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nds.close()  # Closes \"example-data.nc\".\nos.remove(\"example-data.nc\")\n```\n\n----------------------------------------\n\nTITLE: Generating Xarray Accessor Attribute Documentation in reStructuredText\nDESCRIPTION: This template uses Sphinx directives to create documentation for an Xarray accessor attribute. It sets the current module, then uses the autoaccessorattribute directive to automatically generate documentation for the specified accessor attribute.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/_templates/autosummary/accessor_attribute.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n{{ fullname }}\n{{ underline }}\n\n.. currentmodule:: {{ module.split('.')[0] }}\n\n.. autoaccessorattribute:: {{ (module.split('.')[1:] + [objname]) | join('.') }}\n```\n\n----------------------------------------\n\nTITLE: Jinja2 Template for Xarray Accessor Method Documentation\nDESCRIPTION: A Jinja2 template that generates Sphinx documentation for accessor methods in Xarray. It includes variables for the full name, underline, module path, and object name, which will be populated during documentation generation.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/_templates/autosummary/accessor_method.rst#2025-04-21_snippet_0\n\nLANGUAGE: jinja2\nCODE:\n```\n{{ fullname }}\n{{ underline }}\n\n.. currentmodule:: {{ module.split('.')[0] }}\n\n.. autoaccessormethod:: {{ (module.split('.')[1:] + [objname]) | join('.') }}\n```\n\n----------------------------------------\n\nTITLE: Implementing Test Skipping for Slow Benchmarks in Python\nDESCRIPTION: This Python code snippet shows how to implement test skipping for slow benchmarks in ASV. It imports the '_skip_slow' function from the benchmarks module and assigns it as the setup function for a benchmark test.\nSOURCE: https://github.com/pydata/xarray/blob/main/asv_bench/benchmarks/README_CI.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom . import _skip_slow  # this function is defined in benchmarks.__init__\n\ndef time_something_slow():\n    pass\n\ntime_something.setup = _skip_slow\n```\n\n----------------------------------------\n\nTITLE: Concatenating Variables in Multi-File Datasets\nDESCRIPTION: This snippet shows how to concatenate variables across multiple NetCDF files along a specific dimension, while selecting only the necessary data variables. It uses the `open_mfdataset` function and customizes the behavior through various arguments.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/io.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nxr.open_mfdataset('my/files/*.nc', concat_dim='time', combine='nested', data_vars='minimal', coords='minimal', compat='override')\n```\n\n----------------------------------------\n\nTITLE: Visualizing Original and Interpolated Geospatial Data with Xarray and Matplotlib\nDESCRIPTION: This code creates a two-panel figure comparing original geospatial data with its interpolated version. The left panel shows raw data with custom coordinate lines overlaid, while the right panel displays the data after remapping to new lon/lat coordinates. The figure is saved using Matplotlib's savefig functionality.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/interpolation.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfig, axes = plt.subplots(ncols=2, figsize=(10, 4))\nds.air.plot(ax=axes[0])\n# draw the new coordinate on the original coordinates.\nfor idx in [0, 33, 66, 99]:\n    axes[0].plot(lon.isel(x=idx), lat, \"--k\")\nfor idx in [0, 33, 66, 99]:\n    axes[0].plot(*xr.broadcast(lon.isel(z=idx), lat.isel(z=idx)), \"--k\")\naxes[0].set_title(\"Raw data\")\n\ndsi = ds.interp(lon=lon, lat=lat)\ndsi.air.plot(ax=axes[1])\n@savefig interpolation_sample4.png width=8in\naxes[1].set_title(\"Remapped data\")\n```\n\n----------------------------------------\n\nTITLE: Advanced Interpolation with Xarray - Python\nDESCRIPTION: This snippet demonstrates advanced interpolation techniques using two-dimensional arrays, allowing for complex coordinate systems.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/interpolation.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nda = xr.DataArray(\\n    np.sin(0.3 * np.arange(20).reshape(5, 4)),\\n    [(\"x\", np.arange(5)), (\"y\", [0.1, 0.2, 0.3, 0.4])],\\n)\\n\\n# advanced indexing\\nx = xr.DataArray([0, 2, 4], dims=\"z\")\\ny = xr.DataArray([0.1, 0.2, 0.3], dims=\"z\")\\nda.sel(x=x, y=y)\\n\\n# advanced interpolation, without extrapolation\\nx = xr.DataArray([0.5, 1.5, 2.5, 3.5], dims=\"z\")\\ny = xr.DataArray([0.15, 0.25, 0.35, 0.45], dims=\"z\")\\nda.interp(x=x, y=y)\n```\n\n----------------------------------------\n\nTITLE: Embedding Google Calendar with Timezone Script in HTML\nDESCRIPTION: HTML code that embeds a Google Calendar iframe showing the Xarray developers meeting schedule. Includes a JavaScript snippet that adjusts the calendar's timezone to match the user's local timezone.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/developers-meeting.rst#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe src=\"https://calendar.google.com/calendar/embed?src=59589f9634ab4ef304e8209be66cda9812dababca71eb8a01a6fa2d167f90d94%40group.calendar.google.com&ctz=America%2FLos_Angeles\" style=\"border: 0\" width=\"800\" height=\"600\" frameborder=\"0\" scrolling=\"no\"></iframe>\n<script>document.getElementById(\"calendariframe\").src = document.getElementById(\"calendariframe\").src.replace(\"ctz=local\", \"ctz=\" + Intl.DateTimeFormat().resolvedOptions().timeZone)</script>\n```\n\n----------------------------------------\n\nTITLE: Aligning DataArrays in Python using Xarray's align Function\nDESCRIPTION: Demonstrates the use of Xarray's align function to perform flexible database-like joins (inner and outer) between DataArrays. This allows for more complex alignment operations.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/indexing.rst#2025-04-21_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nxr.align(foo, baz, join=\"inner\")\nxr.align(foo, baz, join=\"outer\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Zarr Compression in Python\nDESCRIPTION: Example of setting up compression options for zarr storage using the Blosc compressor with specific compression settings.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/io.rst#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport zarr\nfrom numcodecs.blosc import Blosc\n\ncompressor = Blosc(cname=\"zstd\", clevel=3, shuffle=2)\nds.to_zarr(\"foo.zarr\", encoding={\"foo\": {\"compressor\": compressor}})\n```\n\n----------------------------------------\n\nTITLE: Accessing OPeNDAP Data with Authentication\nDESCRIPTION: Demonstrates how to access OPeNDAP data using requests Session with authentication. Shows usage of xarray's open_dataset with custom session object.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/io.rst#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nimport xarray as xr\nimport requests\n\nmy_session = requests.Session()\n\nds_url = 'https://gpm1.gesdisc.eosdis.nasa.gov/opendap/hyrax/example.nc'\n\nds = xr.open_dataset(ds_url, session=my_session, engine=\"pydap\")\n```\n\n----------------------------------------\n\nTITLE: Loading Example Dataset in Xarray\nDESCRIPTION: Loads the air temperature example dataset provided by Xarray's tutorial module.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/examples/visualization_gallery.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nds = xr.tutorial.load_dataset(\"air_temperature\")\n```\n\n----------------------------------------\n\nTITLE: Xarray Optional Dependencies Configuration\nDESCRIPTION: TOML configuration snippet from pyproject.toml defining the optional dependency sets for Xarray. This shows which packages are included in each optional dependency group.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/getting-started-guide/installing.rst#2025-04-21_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[project.optional-dependencies]\nio = [\n    \"netCDF4\",\n    \"h5netcdf\",\n    \"zarr\",\n    \"cftime\",\n    \"fsspec\",\n    \"pooch\",\n]\naccel = [\n    \"scipy\",\n    \"bottleneck\",\n]\nparallel = [\n    \"dask\",\n]\nviz = [\n    \"matplotlib\",\n    \"seaborn\",\n    \"nc-time-axis\",\n]\ncomplete = [\n    \"netCDF4\",\n    \"h5netcdf\",\n    \"zarr\",\n    \"cftime\",\n    \"fsspec\",\n    \"scipy\",\n    \"bottleneck\",\n    \"dask\",\n    \"matplotlib\",\n    \"seaborn\",\n    \"nc-time-axis\",\n    \"pooch\",\n]\n```\n\n----------------------------------------\n\nTITLE: Converting Air Temperature from Kelvin to Celsius\nDESCRIPTION: This code snippet demonstrates how to convert air temperature data from Kelvin to Celsius and copy relevant attributes for proper labeling in visualizations. It sets the 'units' attribute appropriately for future plotting.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/plotting.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nairtemps = xr.tutorial.open_dataset(\"air_temperature\")\nair = airtemps.air - 273.15\nair.attrs = airtemps.air.attrs\nair.attrs[\"units\"] = \"deg C\"\n```\n\n----------------------------------------\n\nTITLE: Using interp_like for Coordinate Alignment - Python\nDESCRIPTION: This snippet describes the usage of interp_like method to interpolate an Xarray object onto the coordinates of another Xarray object.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/interpolation.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nother = xr.DataArray(\\n    np.sin(0.4 * np.arange(9).reshape(3, 3)),\\n    [(\"time\", [0.9, 1.9, 2.9]), (\"space\", [0.15, 0.25, 0.35])],\\n)\\n\\n# interpolate da along other's coordinates\\ninterpolated = da.interp_like(other)\\ninterpolated\n```\n\n----------------------------------------\n\nTITLE: Optimized Workflow for Large Dataset Processing with Xarray and Dask in Python\nDESCRIPTION: This code demonstrates a simplified workflow for processing large datasets using Xarray and Dask. It includes opening a Zarr dataset with optimized chunking, selecting a time subset, performing daily resampling, and loading the reduced dataset into memory.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/dask.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport xarray\n\nds = xr.open_zarr(  # Since we're doing a spatial reduction, increase chunk size in x, y\n    \"my-data.zarr\", chunks={\"x\": 100, \"y\": 100}\n)\n\ntime_subset = ds.sea_temperature.sel(\n    time=slice(\"2020-01-01\", \"2020-12-31\")  # Filter early\n)\n\n# faster resampling when flox is installed\ndaily = ds.resample(time=\"D\").mean()\n\ndaily.load()  # Pull smaller results into memory after reducing the dataset\n```\n\n----------------------------------------\n\nTITLE: Accessing Variable Objects from DataArray\nDESCRIPTION: Example showing how to access the underlying Variable object from a DataArray using the tutorial dataset. Demonstrates that variables have dimensions, size, and dtype but their values are lazily loaded.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/internals/internal-design.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nda = xr.tutorial.open_dataset(\"air_temperature\")[\"air\"]\nvar = da.variable\nvar\n```\n\n----------------------------------------\n\nTITLE: Appending Data to Zarr Store in Python\nDESCRIPTION: Demonstrates how to append data along a dimension in an existing zarr store, useful for time-series or streaming data scenarios.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/io.rst#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nds1 = xr.Dataset(\n    {\"foo\": ((\"x\", \"y\", \"t\"), np.random.rand(4, 5, 2))},\n    coords={\n        \"x\": [10, 20, 30, 40],\n        \"y\": [1, 2, 3, 4, 5],\n        \"t\": pd.date_range(\"2001-01-01\", periods=2),\n    },\n)\nds1.to_zarr(\"path/to/directory.zarr\")\nds2 = xr.Dataset(\n    {\"foo\": ((\"x\", \"y\", \"t\"), np.random.rand(4, 5, 2))},\n    coords={\n        \"x\": [10, 20, 30, 40],\n        \"y\": [1, 2, 3, 4, 5],\n        \"t\": pd.date_range(\"2001-01-03\", periods=2),\n    },\n)\nds2.to_zarr(\"path/to/directory.zarr\", append_dim=\"t\")\n```\n\n----------------------------------------\n\nTITLE: Renaming Methods in xarray.Variable\nDESCRIPTION: This snippet lists the methods of xarray.Variable that should be renamed to enhance clarity and avoid confusion with existing numpy functions.\nSOURCE: https://github.com/pydata/xarray/blob/main/design_notes/named_array_design_doc.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Xarray-specific\n   Variable.concat # create two functions, one as the equivalent of `np.stack` and other for `np.concat`\n\n   # Given how niche these are, these would be better as functions than methods.\n   # We could also keep these in Xarray, at least for now. If we don't think people will use functionality outside of Xarray it probably is not worth the trouble of porting it (including documentation, etc).\n   Variable.coarsen # This should probably be called something like coarsen_reduce.\n   Variable.coarsen_reshape\n   Variable.rolling_window\n\n   Variable.set_dims # split this into broadcast_to and expand_dims\n\n\n# Reordering/Reshaping\n   Variable.stack # To avoid confusion with np.stack, let's call this stack_dims.\n   Variable.transpose # Could consider calling this permute_dims, like the [array API standard](https://data-apis.org/array-api/2022.12/API_specification/manipulation_functions.html#objects-in-api)\n   Variable.unstack # Likewise, maybe call this unstack_dims?\n```\n\n----------------------------------------\n\nTITLE: Coarsening and Constructing Regions from Air Temperature Data in Python using Xarray\nDESCRIPTION: This snippet demonstrates how to use Xarray's coarsen and construct methods to split the air temperature data into sub-regions of size (9, 18) points. It uses the 'pad' boundary option to ensure all regions are the same size.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/reshaping.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nregions = air.coarsen(lat=9, lon=18, boundary=\"pad\").construct(\n    lon=(\"x_coarse\", \"x_fine\"), lat=(\"y_coarse\", \"y_fine\")\n)\nregions\n```\n\n----------------------------------------\n\nTITLE: Creating DataArray with MultiIndex Coordinates in Python\nDESCRIPTION: This code snippet demonstrates how to create an Xarray DataArray using a pandas MultiIndex as coordinates. It illustrates how to define coordinates for a DataArray and shows the structure of the resulting DataArray with multi-level coordinate variables.\nSOURCE: https://github.com/pydata/xarray/blob/main/design_notes/flexible_indexes_notes.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> midx = pd.MultiIndex.from_arrays([['a', 'b'], [0, 1]], names=['lvl1', 'lvl2'])\n>>> da = xr.DataArray([1.0, 2.0], dims='x', coords={'x': midx})\n>>> da\n<xarray.DataArray (x: 2)>\narray([1., 2.])\nCoordinates:\n  * x        (x) MultiIndex\n  - lvl1     (x) object 'a' 'b'\n  - lvl2     (x) int64 0 1\n```\n\n----------------------------------------\n\nTITLE: Initializing DataArrays for Alignment in Xarray\nDESCRIPTION: This snippet creates two DataArray objects with specified dimensions and coordinates to demonstrate alignment in Xarray. The arrays 'x' and 'y' have the same dimensions but different coordinate values for 'lat'.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/terminology.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nx = xr.DataArray(\n    [[25, 35], [10, 24]],\n    dims=(\"lat\", \"lon\"),\n    coords={\"lat\": [35.0, 40.0], \"lon\": [100.0, 120.0]},\n)\ny = xr.DataArray(\n    [[20, 5], [7, 13]],\n    dims=(\"lat\", \"lon\"),\n    coords={\"lat\": [35.0, 42.0], \"lon\": [100.0, 120.0]},\n)\n\n```\n\n----------------------------------------\n\nTITLE: Implementing open_dataset Method for Xarray Backend in Python\nDESCRIPTION: This example demonstrates a typical implementation of the open_dataset method for an Xarray backend, including reading data, decoding variables, and creating a Dataset with proper close method.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/internals/how-to-add-new-backend.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef open_dataset(\n    self,\n    filename_or_obj,\n    *,\n    drop_variables=None,\n    decode_times=True,\n    decode_timedelta=True,\n    decode_coords=True,\n    my_backend_option=None,\n):\n    vars, attrs, coords = my_reader(\n        filename_or_obj,\n        drop_variables=drop_variables,\n        my_backend_option=my_backend_option,\n    )\n    vars, attrs, coords = my_decode_variables(\n        vars, attrs, decode_times, decode_timedelta, decode_coords\n    )  #  see also conventions.decode_cf_variables\n\n    ds = xr.Dataset(vars, attrs=attrs, coords=coords)\n    ds.set_close(my_close_method)\n\n    return ds\n```\n\n----------------------------------------\n\nTITLE: Documentation Table of Contents Structure\nDESCRIPTION: Defines the hierarchical structure of the documentation using restructuredText toctree directives\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/index.rst#2025-04-21_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n   :hidden:\n   :caption: For users\n\n   Getting Started <getting-started-guide/index>\n   User Guide <user-guide/index>\n   Gallery <gallery>\n   Tutorials & Videos <tutorials-and-videos>\n   API Reference <api>\n   How do I ... <howdoi>\n   Getting Help <help-diagram>\n   Ecosystem <ecosystem>\n```\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n   :hidden:\n   :caption: For developers/contributors\n\n   Contributing Guide <contributing>\n   Xarray Internals <internals/index>\n   Development Roadmap <roadmap>\n   Team <https://xarray.dev/team>\n   Developers Meeting <developers-meeting>\n   What's New <whats-new>\n   GitHub repository <https://github.com/pydata/xarray>\n```\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n   :hidden:\n   :caption: Community\n\n   GitHub discussions <https://github.com/pydata/xarray/discussions>\n   StackOverflow <https://stackoverflow.com/questions/tagged/python-xarray>\n```\n\n----------------------------------------\n\nTITLE: Creating Projected Map with Coastline\nDESCRIPTION: Creates a more sophisticated map visualization using Lambert Conformal projection and adds coastline features from Natural Earth.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/examples/ROMS_ocean_model.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nproj = ccrs.LambertConformal(central_longitude=-92, central_latitude=29)\nfig = plt.figure(figsize=(15, 5))\nax = plt.axes(projection=proj)\nds.salt.isel(s_rho=-1, ocean_time=0).plot(\n    x=\"lon_rho\", y=\"lat_rho\", transform=ccrs.PlateCarree()\n)\n\ncoast_10m = cfeature.NaturalEarthFeature(\n    \"physical\", \"land\", \"10m\", edgecolor=\"k\", facecolor=\"0.8\"\n)\nax.add_feature(coast_10m)\n```\n\n----------------------------------------\n\nTITLE: Writing and Reading Xarray Dataset with Zarr in Python\nDESCRIPTION: This snippet demonstrates how to write an Xarray dataset to Zarr format and then reopen it directly with Zarr. It shows the structure of the created Zarr store and the attributes of a specific variable.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/internals/zarr-encoding-spec.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport xarray as xr\nimport zarr\n\nds = xr.tutorial.load_dataset(\"rasm\")\nds.to_zarr(\"rasm.zarr\", mode=\"w\")\n\nzgroup = zarr.open(\"rasm.zarr\")\nprint(os.listdir(\"rasm.zarr\"))\nprint(zgroup.tree())\ndict(zgroup[\"Tair\"].attrs)\n```\n\n----------------------------------------\n\nTITLE: Declaring Xarray Backend Entrypoint in setup.cfg\nDESCRIPTION: This snippet shows how to declare an entrypoint for an Xarray backend in a `setup.cfg` file. The entrypoint allows Xarray to discover and load your custom backend.  The `my_engine` name will be passed to `xarray.open_dataset` as the `engine` argument.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/internals/how-to-add-new-backend.rst#2025-04-21_snippet_4\n\nLANGUAGE: CFG\nCODE:\n```\n\"[options.entry_points]\\nxarray.backends =\\n    my_engine = my_package.my_module:MyBackendEntrypoint\"\n```\n\n----------------------------------------\n\nTITLE: Loading and Plotting Air Temperature Dataset in Python using Xarray\nDESCRIPTION: This snippet loads an air temperature dataset using Xarray's tutorial module and plots the first time slice. It demonstrates how to use Xarray's plotting functionality to visualize spatial data.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/reshaping.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nair = xr.tutorial.open_dataset(\"air_temperature\")[\"air\"]\n\n@savefig pre_coarsening.png\nair.isel(time=0).plot(x=\"lon\", y=\"lat\")\n```\n\n----------------------------------------\n\nTITLE: Loading Xarray Tutorial Dataset in Python\nDESCRIPTION: Imports necessary libraries (xarray, numpy, pandas) and loads a sample air temperature dataset from xarray's tutorial datasets. This provides a starting point for testing issues or reproducing bugs with xarray.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/examples/blank_template.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport xarray as xr\nimport numpy as np\nimport pandas as pd\n\nds = xr.tutorial.load_dataset(\"air_temperature\")\nda = ds[\"air\"]\n```\n\n----------------------------------------\n\nTITLE: Creating DataArray from Pandas DataFrame in Python\nDESCRIPTION: Demonstrates converting a pandas DataFrame into an xarray DataArray. The snippet highlights how DataArray constructor fills in unspecified parameters using the DataFrame's indices and columns as coordinates and dimensions.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/data-structures.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.DataFrame({\"x\": [0, 1], \"y\": [2, 3]}, index=[\"a\", \"b\"])\ndf.index.name = \"abc\"\ndf.columns.name = \"xyz\"\ndf\nxr.DataArray(df)\n```\n\n----------------------------------------\n\nTITLE: Broadcasting with Sparse Arrays\nDESCRIPTION: This snippet shows how broadcasting works with sparse arrays. It creates a second sparse array of a different shape and then performs multiplication, which requires broadcasting.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/duckarrays.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\"x2 = np.zeros(\n        (4, 1), dtype=np.uint8\n    )  # create second sparse array of different shape\n    s2 = COO.from_numpy(x2)\n    (s * s2)  # multiplication requires broadcasting\"\n```\n\n----------------------------------------\n\nTITLE: Formatting Code Snippets with GitHub Markdown for Bug Reports\nDESCRIPTION: Shows how to format Python code snippets when submitting bug reports using GitHub Flavored Markdown. This helps others reproduce the issue.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/contributing.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n```python\nimport xarray as xr\nds = xr.Dataset(...)\n\n...\n```\n```\n\n----------------------------------------\n\nTITLE: Generating Accessor Documentation with Sphinx and Jinja2 for Xarray\nDESCRIPTION: This template generates documentation for an xarray accessor class. It sets up the module context, creates a title, and uses the autoaccessorcallable directive to document the __call__ method of the accessor.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/_templates/autosummary/accessor_callable.rst#2025-04-21_snippet_0\n\nLANGUAGE: jinja2\nCODE:\n```\n{{ fullname }}\n{{ underline }}\n\n.. currentmodule:: {{ module.split('.')[0] }}\n\n.. autoaccessorcallable:: {{ (module.split('.')[1:] + [objname]) | join('.') }}.__call__\n```\n\n----------------------------------------\n\nTITLE: Testing Tree Isomorphism with Different Examples\nDESCRIPTION: This code demonstrates various cases of tree isomorphism testing, showing that trees with different data or node order can still be isomorphic.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/hierarchical-data.rst#2025-04-21_snippet_37\n\nLANGUAGE: python\nCODE:\n```\ntree.isomorphic(simple_tree)\n\ntree_with_data = xr.DataTree.from_dict({\"a\": xr.Dataset({\"foo\": 1})})\nsimple_tree.isomorphic(tree_with_data)\n\nreordered_tree = xr.DataTree.from_dict({\"a\": None, \"a/c\": None, \"a/b\": None})\ntree.isomorphic(reordered_tree)\n```\n\n----------------------------------------\n\nTITLE: Checking Tree Isomorphism\nDESCRIPTION: This code shows how to check if two trees have the same structure (isomorphism) and demonstrates a case that raises TreeIsomorphismError.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/hierarchical-data.rst#2025-04-21_snippet_36\n\nLANGUAGE: python\nCODE:\n```\ntree = xr.DataTree.from_dict({\"a\": None, \"a/b\": None, \"a/c\": None})\nsimple_tree = xr.DataTree.from_dict({\"a\": None})\nfor _ in xr.group_subtrees(tree, simple_tree):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Broadcasting One-Dimensional DataArrays with Different Dimensions\nDESCRIPTION: Demonstrates broadcasting between two one-dimensional DataArrays with different dimensions, showing how Xarray automatically aligns and expands dimensions based on their names.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/computation.rst#2025-04-21_snippet_29\n\nLANGUAGE: python\nCODE:\n```\na = xr.DataArray([1, 2], [(\"x\", [\"a\", \"b\"])])\na\nb = xr.DataArray([-1, -2, -3], [(\"y\", [10, 20, 30])])\nb\n\na * b\n```\n\n----------------------------------------\n\nTITLE: Building Complex Dimension Mappings - Python\nDESCRIPTION: Shows how to use hypothesis.strategies.fixed_dictionaries to create complex mappings of dimension names to lengths, enabling tailored generation of Xarray Variable objects.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/testing.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfixed_x_variable_y_maybe_z = st.fixed_dictionaries(\n    {\"x\": st.just(2), \"y\": st.integers(3, 4)}, optional={\"z\": st.just(2)}\n)\nfixed_x_variable_y_maybe_z.example()\n\nspecial_variables = xrst.variables(dims=fixed_x_variable_y_maybe_z)\n\nspecial_variables.example()\nspecial_variables.example()\n```\n\n----------------------------------------\n\nTITLE: Dropping Variables and Index Labels in Xarray\nDESCRIPTION: Demonstrates how to drop explicitly listed variables or index labels using the drop method in Dataset and DataArray objects.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_93\n\nLANGUAGE: python\nCODE:\n```\n# drop variables\nds = xray.Dataset({\"x\": 0, \"y\": 1})\nds.drop(\"x\")\n\n# drop index labels\narr = xray.DataArray([1, 2, 3], coords=[(\"x\", list(\"abc\"))])\narr.drop([\"a\", \"c\"], dim=\"x\")\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries in Python\nDESCRIPTION: Demonstrates the import of essential libraries for data manipulation and scientific computing, including numpy, pandas, and xarray. Prerequisites include having these libraries installed in the environment.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/reshaping.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport pandas as pd\nimport xarray as xr\n\nnp.random.seed(123456)\n```\n\n----------------------------------------\n\nTITLE: Extracting Node Local Dataset in DataTree - Python\nDESCRIPTION: This code retrieves a copy of an Xarray Dataset showing only node local values by setting the inherit parameter to False. It outputs a new dataset limited to local node data.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/getting-started-guide/quick-overview.rst#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nds_node_local = dt[\"simulation/coarse\"].to_dataset(inherit=False)\nds_node_local\n```\n\n----------------------------------------\n\nTITLE: Checking Equality of Xarray Objects\nDESCRIPTION: This snippet demonstrates the usage of equality checking methods in Xarray, such as equals, identical, and broadcast_equals, comparing two DataArray objects.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/combining.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nda.equals(da.copy())\\nda.identical(da.rename(\"bar\"))\\nleft = xr.Dataset(coords={\"x\": 0})\\nright = xr.Dataset({\"x\": [0, 0, 0]})\\nleft.broadcast_equals(right)\n```\n\n----------------------------------------\n\nTITLE: Creating and Plotting Dataset with Distance Calculation\nDESCRIPTION: Shows how to create a dataset with coordinates, calculate distances, and plot the results using the where method.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_74\n\nLANGUAGE: python\nCODE:\n```\nds = xray.Dataset(coords={\"x\": range(100), \"y\": range(100)})\nds[\"distance\"] = np.sqrt(ds.x**2 + ds.y**2)\nds.distance.where(ds.distance < 100).plot()\n```\n\n----------------------------------------\n\nTITLE: Grouper Abstract Base Class Definition in Python\nDESCRIPTION: Definition of the abstract Grouper base class with the required factorize method that all Grouper implementations must implement.\nSOURCE: https://github.com/pydata/xarray/blob/main/design_notes/grouper_objects.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport abc\n\nclass Grouper(abc.ABC):\n    @abc.abstractmethod\n    def factorize(self, by: DataArray):\n        raise NotImplementedError\n\nclass CustomGrouper(Grouper):\n    def factorize(self, by: DataArray):\n        ...\n        return codes, group_indices, unique_coord, full_index\n\n    def weights(self, by: DataArray) -> DataArray:\n        ...\n        return weights\n```\n\n----------------------------------------\n\nTITLE: Performing Basic Rolling Window Operations in Python with Xarray\nDESCRIPTION: Demonstrates how to create and use rolling windows for aggregation in Xarray, including setting minimum observation requirements and using centered windows.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/computation.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nr = arr.rolling(y=3, min_periods=2)\nr.mean()\nr = arr.rolling(y=3, center=True, min_periods=2)\nr.mean()\n```\n\n----------------------------------------\n\nTITLE: Displaying DataArrayGroupBy Representation in Xarray\nDESCRIPTION: Example showing the result of the new representation for DataArrayGroupBy objects, which displays information about the groups created when grouping by season.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_49\n\nLANGUAGE: python\nCODE:\n```\n>>> da.groupby(\"time.season\")\nDataArrayGroupBy, grouped over 'season'\n4 groups with labels 'DJF', 'JJA', 'MAM', 'SON'\n```\n\n----------------------------------------\n\nTITLE: Basic ReST Documentation Example with IPython Directive\nDESCRIPTION: Example of using the IPython directive in reStructuredText to include executable code examples in documentation\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/contributing.rst#2025-04-21_snippet_10\n\nLANGUAGE: rst\nCODE:\n```\n.. ipython:: python\n\n    x = 2\n    x**3\n```\n\n----------------------------------------\n\nTITLE: Loading GRIB Data with Xarray\nDESCRIPTION: Demonstrates how to load GRIB format data using xarray's load_dataset function with the cfgrib engine. This example uses ERA5 temperature data for the UK.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/examples/ERA5-GRIB-example.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nds = xr.tutorial.load_dataset(\"era5-2mt-2019-03-uk.grib\", engine=\"cfgrib\")\n```\n\n----------------------------------------\n\nTITLE: Applying Vectorized Indexing to Dataset Objects\nDESCRIPTION: Demonstrates how vectorized indexing can be applied to Dataset objects, allowing selection across multiple variables simultaneously with the same indexing operation.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/indexing.rst#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nds = da.to_dataset(name=\"bar\")\nds.isel(x=xr.DataArray([0, 1, 2], dims=[\"points\"]))\n```\n\n----------------------------------------\n\nTITLE: Dictionary Conversion of Xarray Dataset\nDESCRIPTION: Shows how to convert xarray Dataset objects to and from Python dictionaries, including options to export schema without data.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/io.rst#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nds = xr.Dataset({\"foo\": (\"x\", np.arange(30))})\nds\n\nd = ds.to_dict()\nd\n\nds_dict = xr.Dataset.from_dict(d)\nds_dict\n\nds.to_dict(data=False)\n```\n\n----------------------------------------\n\nTITLE: Viewing DataTree Group as DatasetView - Python\nDESCRIPTION: The snippet showcases how to view a particular group in a DataTree as a read-only DatasetView. There are no specific dependencies and it returns a read-only view of the data.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/getting-started-guide/quick-overview.rst#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ndt[\"simulation/coarse\"].dataset\n```\n\n----------------------------------------\n\nTITLE: Testing Over Subsets of Dimensions Using Hypothesis - Python\nDESCRIPTION: Utilizes the xrst.unique_subset_of helper strategy to generate subsets of dimension names, providing a flexible approach for testing functions over varying input dimensions.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/testing.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndims = [\"x\", \"y\", \"z\"]\nxrst.unique_subset_of(dims).example()\n```\n\n----------------------------------------\n\nTITLE: Updating Local Main Branch After PR Merge in Git\nDESCRIPTION: Commands to update your local main branch after your PR has been merged upstream. This ensures your local repository stays in sync with the upstream repository.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/contributing.rst#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ngit fetch upstream\ngit checkout main\ngit merge upstream/main\n```\n\n----------------------------------------\n\nTITLE: Pickle Serialization of Xarray Objects\nDESCRIPTION: Demonstrates how to serialize and deserialize xarray objects using Python's pickle module with highest protocol for better performance.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/io.rst#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nimport pickle\n\n# use the highest protocol (-1) because it is way faster than the default\n# text based pickle format\npkl = pickle.dumps(ds, protocol=-1)\n\npickle.loads(pkl)\n```\n\n----------------------------------------\n\nTITLE: Shell command to run pytest\nDESCRIPTION: This shell command initiates the pytest framework to run a single test file with verbose output, allowing developers to see the results of their tests as they are executed.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/contributing.rst#2025-04-21_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n((xarray) $ pytest test_cool_feature.py -v\n```\n\n----------------------------------------\n\nTITLE: Error handling in xarray DataTree\nDESCRIPTION: Demonstrates that attempting to find a common ancestor between nodes that are not part of the same tree raises an error.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/hierarchical-data.rst#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n\n    alien = xr.DataTree(name=\"Xenomorph\")\n    primates.find_common_ancestor(alien)\n```\n\n----------------------------------------\n\nTITLE: Combining Resample with Aggregation Methods in Xarray\nDESCRIPTION: Demonstrates how to combine resample with aggregation methods like 'first' to get the first value when resampling to a new temporal resolution.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_85\n\nLANGUAGE: python\nCODE:\n```\narray.resample(\"1D\", dim=\"time\", how=\"first\")\n```\n\n----------------------------------------\n\nTITLE: Using Dataset.polyfit and DataArray.polyfit\nDESCRIPTION: Code showing how to reference the polyfit methods in Dataset and DataArray classes within docstrings as part of improving documentation.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_41\n\nLANGUAGE: Python\nCODE:\n```\n:py:meth:`Dataset.polyfit` and :py:meth:`DataArray.polyfit`\n```\n\n----------------------------------------\n\nTITLE: Using first Method with GroupBy in Xarray\nDESCRIPTION: Shows how to use the 'first' method on groupby objects to extract the first example from each group along the grouped axis.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_84\n\nLANGUAGE: python\nCODE:\n```\narray.groupby(\"time.day\").first()\n```\n\n----------------------------------------\n\nTITLE: Creating New What's New Section Template for Next Release\nDESCRIPTION: RST template for adding a new section in the what's-new.rst document for the next release cycle after the current release is completed.\nSOURCE: https://github.com/pydata/xarray/blob/main/HOW_TO_RELEASE.md#2025-04-21_snippet_5\n\nLANGUAGE: rst\nCODE:\n```\n.. _whats-new.YYYY.MM.X+1:\n\nvYYYY.MM.X+1 (unreleased)\n-----------------------\n\nNew Features\n~~~~~~~~~~~~\n\n\nBreaking changes\n~~~~~~~~~~~~~~~~\n\n\nDeprecations\n~~~~~~~~~~~~\n\n\nBug fixes\n~~~~~~~~~\n\n\nDocumentation\n~~~~~~~~~~~~~\n\n\nInternal Changes\n~~~~~~~~~~~~~~~~\n```\n\n----------------------------------------\n\nTITLE: Using fill methods with limit option on dask arrays\nDESCRIPTION: Reference to the ffill and bfill methods in DataArray and Dataset, which received support for the limit option with dask arrays.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nDataArray.ffill\n```\n\n----------------------------------------\n\nTITLE: Importing Necessary Libraries for Interpolation - Python\nDESCRIPTION: This snippet imports required libraries such as numpy, pandas, and xarray, while setting a random seed for reproducibility.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/interpolation.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\\nimport pandas as pd\\nimport xarray as xr\\n\\nnp.random.seed(123456)\n```\n\n----------------------------------------\n\nTITLE: Setting Upstream Reference for a New Branch\nDESCRIPTION: Git command that ensures the local branch is correctly linked to the remote branch when pushing for the first time.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/contributing.rst#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit push --set-upstream origin shiny-new-feature\n```\n\n----------------------------------------\n\nTITLE: Python Data Manipulation Methods\nDESCRIPTION: Code references to various xarray data manipulation methods including transpose, groupby, loading and IO operations.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_53\n\nLANGUAGE: python\nCODE:\n```\n:py:meth:`DataArray.transpose`\n:py:meth:`Dataset.transpose`\n:py:meth:`DataArray.groupby`\n:py:meth:`DataArray.groupby_bins`\n:py:meth:`DataArray.resample`\n:py:meth:`~xarray.Dataset.to_zarr`\n```\n\n----------------------------------------\n\nTITLE: Examining Lazy Loading in Xarray through Private Attributes\nDESCRIPTION: Shows how to examine the internal lazy indexing mechanism by accessing the private _data attribute, which reveals the lazy loading class used behind the scenes.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/internals/internal-design.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nvar._data\n```\n\n----------------------------------------\n\nTITLE: Using keep_attrs with Rolling Operations\nDESCRIPTION: Example of the new approach for passing keep_attrs with rolling operations. Instead of passing it to the rolling constructor, it should be passed to the applied function.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_43\n\nLANGUAGE: python\nCODE:\n```\nds.rolling(...).mean(keep_attrs=False)\n```\n\n----------------------------------------\n\nTITLE: Deprecated Features Removal\nDESCRIPTION: Code examples showing removed deprecated features including dim parameter in integrate() and keep_attrs in rolling() and coarsen()\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_40\n\nLANGUAGE: python\nCODE:\n```\n# These are no longer supported:\nDataArray.integrate(dim=...)\nDataArray.rolling(keep_attrs=...)\nDataArray.coarsen(keep_attrs=...)\n```\n\n----------------------------------------\n\nTITLE: Writing and Reading netCDF Files\nDESCRIPTION: Demonstrates how to save a Dataset to a netCDF file and then reopen it, preserving all data and metadata.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/getting-started-guide/quick-overview.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nds.to_netcdf(\"example.nc\")\nreopened = xr.open_dataset(\"example.nc\")\n```\n\n----------------------------------------\n\nTITLE: Reopening Dataset to Demonstrate Lazy Indexing\nDESCRIPTION: Reopens the tutorial dataset to start with fresh lazy-loaded data for demonstrating how indexing operations remain lazy.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/internals/internal-design.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nda = xr.tutorial.open_dataset(\"air_temperature\")[\"air\"]\nvar = da.variable\n```\n\n----------------------------------------\n\nTITLE: Selecting Data with Inherited Coordinates in DataTree in Python\nDESCRIPTION: Demonstrates selection operations on a DataTree using inherited coordinates, where selection by lat and lon coordinates works across the entire tree structure.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/hierarchical-data.rst#2025-04-21_snippet_47\n\nLANGUAGE: python\nCODE:\n```\ndt.sel(lat=[75], lon=[300])\n```\n\n----------------------------------------\n\nTITLE: Accessing DataTree Elements using Dictionary Keys in Python\nDESCRIPTION: Demonstrates how to access elements of a DataTree object using dictionary keys. This method allows selection of variables and child nodes.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/hierarchical-data.rst#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nlist(dt.keys())\n```\n\n----------------------------------------\n\nTITLE: Using opt_einsum for xarray.dot operation\nDESCRIPTION: New feature that utilizes opt_einsum library for dot product operations if installed. Aimed at optimizing matrix multiplication operations.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nxarray.dot\n```\n\n----------------------------------------\n\nTITLE: Git Commands for Setting Up a Development Environment\nDESCRIPTION: A series of git commands to clone a forked xarray repository and set up the connection to the upstream repository for development.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/contributing.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/your-user-name/xarray.git\ncd xarray\ngit remote add upstream https://github.com/pydata/xarray.git\n```\n\n----------------------------------------\n\nTITLE: Deleting Local Feature Branch in Git\nDESCRIPTION: Command to delete your local feature branch after your PR has been merged. Uses the -D flag because the branch was squashed into a single commit during merging.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/contributing.rst#2025-04-21_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ngit branch -D shiny-new-feature\n```\n\n----------------------------------------\n\nTITLE: Calculating Electrical Power with Tree Arithmetic\nDESCRIPTION: This code calculates electrical power by multiplying currents and voltages trees, demonstrating arithmetic operations between isomorphic trees.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/hierarchical-data.rst#2025-04-21_snippet_39\n\nLANGUAGE: python\nCODE:\n```\npower = currents * voltages\npower\n```\n\n----------------------------------------\n\nTITLE: Configuring DataTree NetCDF/Zarr Writing in Python\nDESCRIPTION: Added a write_inherited_coords option to DataTree's to_netcdf() and to_zarr() methods to control writing of inherited coordinates.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nDataTree.to_netcdf(write_inherited_coords=True)\n```\n\nLANGUAGE: Python\nCODE:\n```\nDataTree.to_zarr(write_inherited_coords=True)\n```\n\n----------------------------------------\n\nTITLE: Comparing New Grouper Syntax with Existing Syntax in Python\nDESCRIPTION: Code example demonstrating how the proposed Grouper objects syntax would be equivalent to the existing groupby_bins syntax in Xarray.\nSOURCE: https://github.com/pydata/xarray/blob/main/design_notes/grouper_objects.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nDataset.groupby(x=BinGrouper(bins=np.arange(10, 2))))\n```\n\nLANGUAGE: python\nCODE:\n```\nDataset.groupby_bins(\"x\", bins=np.arange(10, 2))\n```\n\n----------------------------------------\n\nTITLE: Polynomial Evaluation with Non-Standard Integer Coefficients\nDESCRIPTION: Reference to a fix for the polyval method when using non-system standard integer coefficients.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nxr.polyval\n```\n\n----------------------------------------\n\nTITLE: Converting Between xarray and pandas Objects\nDESCRIPTION: Demonstrates the conversion between xarray DataArray objects and pandas Series objects using to_series() and to_xarray() methods.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/getting-started-guide/quick-overview.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nseries = data.to_series()\nseries\n\n# convert back\nseries.to_xarray()\n```\n\n----------------------------------------\n\nTITLE: Creating Date Ranges with CFTime\nDESCRIPTION: Reference to deprecation of closed parameters in cftime_range and date_range functions in favor of inclusive parameters.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_28\n\nLANGUAGE: python\nCODE:\n```\ncftime_range\n```\n\nLANGUAGE: python\nCODE:\n```\ndate_range\n```\n\n----------------------------------------\n\nTITLE: Creating a Feature Branch with Git\nDESCRIPTION: Command to create a new Git branch for developing a new feature or fix, keeping changes isolated from the main branch.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/contributing.rst#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b shiny-new-feature\n```\n\n----------------------------------------\n\nTITLE: Setting parent in xarray DataTree\nDESCRIPTION: Demonstrates how to set the parent of a node (Homer), creating a new root node (Abe).\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/hierarchical-data.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n\n    abe = xr.DataTree(name=\"Abe\")\n    abe.children = {\"Homer\": homer}\n```\n\n----------------------------------------\n\nTITLE: Proposed Indexing Adapter Migration Strategy\nDESCRIPTION: Outlines strategy for migrating indexing adapters to support various array types and indexing methods\nSOURCE: https://github.com/pydata/xarray/blob/main/design_notes/named_array_design_doc.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nclass IndexingAdapter:\n    def __getitem__(self, key)\n    def oindex(self, key)\n    def vindex(self, key)\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Rolling Objects in Python with Xarray\nDESCRIPTION: Example of how to manually iterate through Rolling objects for custom window operations.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/user-guide/computation.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfor label, arr_window in r:\n    # arr_window is a view of x\n    ...\n```\n\n----------------------------------------\n\nTITLE: Using DataArray.integrate and Dataset.integrate Methods in Python\nDESCRIPTION: New integrate methods added to DataArray and Dataset classes for integrating along coordinates.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_57\n\nLANGUAGE: Python\nCODE:\n```\nda.integrate(...)\nds.integrate(...)\n```\n\n----------------------------------------\n\nTITLE: Refreshing Backend Engines in Xarray\nDESCRIPTION: Method to refresh backend engines in an active session, allowing for runtime updates to backend configurations.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nxarray.backends.refresh_engines\n```\n\n----------------------------------------\n\nTITLE: DataArray Plotting with BoundaryNorm\nDESCRIPTION: Reference to a fix allowing proper plotting with matplotlib.colors.BoundaryNorm type arguments in DataArray.plot method.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nDataArray.plot\n```\n\n----------------------------------------\n\nTITLE: Adding a DataArray to a Dataset in Python\nDESCRIPTION: Shows how to add a DataArray as a new variable to an existing Dataset using direct dictionary-style assignment.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/howdoi.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nmy_dataset[varname] = my_dataArray\n```\n\n----------------------------------------\n\nTITLE: Xarray Rolling Operations\nDESCRIPTION: Example of using rolling operations on DataArray/Dataset objects while preserving attributes and names.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_46\n\nLANGUAGE: Python\nCODE:\n```\nDataArray.rolling()\nDataset.rolling()\n```\n\n----------------------------------------\n\nTITLE: DataArray Resampling Method Deprecation\nDESCRIPTION: Reference to deprecation of base and loffset parameters in DataArray and Dataset resample methods.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nxr.DataArray.resample\n```\n\nLANGUAGE: python\nCODE:\n```\nxr.Dataset.resample\n```\n\n----------------------------------------\n\nTITLE: Installing Pre-commit Hooks for xarray Development\nDESCRIPTION: Commands to install and run pre-commit hooks to automatically run development tools during git commits\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/contributing.rst#2025-04-21_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\npython -m pip install pre-commit\npre-commit install\n\n# Run pre-commit checks manually\npre-commit run\n```\n\n----------------------------------------\n\nTITLE: DataArray DateTime Total Seconds Method\nDESCRIPTION: Addition of total_seconds() method to match Pandas API for datetime operations.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nDataArray.dt.total_seconds()\n```\n\n----------------------------------------\n\nTITLE: Using Python Coordinates Class\nDESCRIPTION: Example showing usage of the Coordinates class for creating coordinates from pandas MultiIndex\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nCoordinates.from_pandas_multiindex\n```\n\n----------------------------------------\n\nTITLE: Opening Custom Format Dataset in Python with Xarray\nDESCRIPTION: Example showing how to open a dataset using a custom file format engine in Xarray.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/internals/interoperability.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nxarray.open_dataset(path, engine='my_custom_format')\n```\n\n----------------------------------------\n\nTITLE: Running Full Test Suite Before Release\nDESCRIPTION: Command to run the full pytest test suite as a final verification before releasing.\nSOURCE: https://github.com/pydata/xarray/blob/main/HOW_TO_RELEASE.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\npytest\n```\n\n----------------------------------------\n\nTITLE: StringAccessor Methods Documentation\nDESCRIPTION: Reference to examples added to docstrings for StringAccessor methods.\nSOURCE: https://github.com/pydata/xarray/blob/main/doc/whats-new.rst#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nxarray.core.accessor_str.StringAccessor\n```"
  }
]