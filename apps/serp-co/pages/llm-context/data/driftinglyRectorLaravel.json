[
  {
    "owner": "driftingly",
    "repo": "rector-laravel",
    "content": "TITLE: Configuring Rector with Laravel Level Set\nDESCRIPTION: This PHP code snippet configures Rector to use a specific Laravel level set for automated upgrades. It uses RectorConfig to specify the desired Laravel version set, such as Laravel 11, ensuring that all necessary rules for upgrading to that version are applied.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/README.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php declare(strict_types=1);\n\nuse Rector\\Config\\RectorConfig;\nuse RectorLaravel\\Set\\LaravelLevelSetList;\n\nreturn RectorConfig::configure()\n    ->withSets([\n        LaravelLevelSetList::UP_TO_LARAVEL_110,\n    ]);\n```\n\n----------------------------------------\n\nTITLE: Migrate Laravel Model Accessors/Mutators to Attribute Casting\nDESCRIPTION: This Rector rule migrates Laravel Eloquent model accessor and mutator methods (using `getFirstNameAttribute` and `setFirstNameAttribute`) to the new Attribute casting syntax introduced in later Laravel versions. This modernizes the way model attributes are handled. This transform is useful for keeping up with the latest standards.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/docs/rector_rules_overview.md#_snippet_25\n\nLANGUAGE: diff\nCODE:\n```\n use Illuminate\\Database\\Eloquent\\Model;\n\n class User extends Model\n {\n-    public function getFirstNameAttribute($value)\n+    protected function firstName(): \\Illuminate\\Database\\Eloquent\\Casts\\Attribute\n     {\n-        return ucfirst($value);\n-    }\n-\n-    public function setFirstNameAttribute($value)\n-    {\n-        $this->attributes['first_name'] = strtolower($value);\n-        $this->attributes['first_name_upper'] = strtoupper($value);\n+        return \\Illuminate\\Database\\Eloquent\\Casts\\Attribute::make(get: function ($value) {\n+            return ucfirst($value);\n+        }, set: function ($value) {\n+            return ['first_name' => strtolower($value), 'first_name_upper' => strtoupper($value)];\n+        });\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Use Callable Syntax for Controller Route Declarations in Laravel\nDESCRIPTION: This Rector rule uses PHP callable syntax instead of string syntax for controller route declarations in Laravel. This improves code maintainability and allows for better IDE support.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/docs/rector_rules_overview.md#_snippet_50\n\nLANGUAGE: diff\nCODE:\n```\n-Route::get('/users', 'UserController@index');\n+Route::get('/users', [\\App\\Http\\Controllers\\UserController::class, 'index']);\n\n Route::group(['namespace' => 'Admin'], function () {\n-    Route::get('/users', 'UserController@index');\n+    Route::get('/users', [\\App\\Http\\Controllers\\Admin\\UserController::class, 'index']);\n })\n```\n\n----------------------------------------\n\nTITLE: Remove Dump Data and Debugging Code\nDESCRIPTION: This Rector rule removes `dd()` and `dump()` function calls from the code. This is useful for cleaning up code after debugging. This is configurable, so it won't be ran automatically unless configured. The code removes lines containing `dd('test');` and `dump('test');`.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/docs/rector_rules_overview.md#_snippet_36\n\nLANGUAGE: diff\nCODE:\n```\n class MyController\n {\n     public function store()\n     {\n-        dd('test');\n         return true;\n     }\n\n     public function update()\n     {\n-        dump('test');\n         return true;\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Refactor Model $casts Property to casts() Method\nDESCRIPTION: This Rector rule refactors the `$casts` property in Eloquent models to the `casts()` method. Using the `casts()` method is the preferred approach for defining attribute casting in modern Laravel applications. It improves code organization and maintainability. The rule transforms the property `$casts` to the method `casts()`.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/docs/rector_rules_overview.md#_snippet_27\n\nLANGUAGE: diff\nCODE:\n```\n use Illuminate\\Database\\Eloquent\\Model;\n\n class Person extends Model\n {\n-    protected $casts = [\n-        'age' => 'integer',\n-    ];\n+    protected function casts(): array\n+    {\n+        return [\n+            'age' => 'integer',\n+        ];\n+    }\n }\n```\n\n----------------------------------------\n\nTITLE: Convert Optional Helper Calls to Nullsafe Operator\nDESCRIPTION: This Rector rule converts simple calls to the `optional()` helper function to use the nullsafe operator (`?->`).  This modernizes the code and makes it more concise for accessing properties of potentially null objects. The rule transforms `optional($user)->getKey();` to `$user?->getKey();` and `optional($user)->id;` to `$user?->id;`.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/docs/rector_rules_overview.md#_snippet_30\n\nLANGUAGE: diff\nCODE:\n```\n-optional($user)->getKey();\n-optional($user)->id;\n+$user?->getKey();\n+$user?->id;\n // macro methods\n optional($user)->present()->getKey();\n```\n\n----------------------------------------\n\nTITLE: Convert Livewire Query String Properties to URL Attributes\nDESCRIPTION: This Rector rule converts Livewire component properties defined in the `$queryString` array to use the `#[\\Livewire\\Attributes\\Url]` attribute.  This modernizes the way query string parameters are handled in Livewire components. It removes the `$queryString` array and annotates the relevant properties with the attribute.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/docs/rector_rules_overview.md#_snippet_22\n\nLANGUAGE: diff\nCODE:\n```\n use Livewire\\Component;\n\n class MyComponent extends Component\n {\n+    #[\\Livewire\\Attributes\\Url]\n     public string $something = '';\n\n+    #[\\Livewire\\Attributes\\Url]\n     public string $another = '';\n-\n-    protected $queryString = [\n-        'something',\n-        'another',\n-    ];\n }\n```\n\n----------------------------------------\n\nTITLE: Convert Livewire Computed Methods to Computed Attributes\nDESCRIPTION: This Rector rule transforms computed methods in Livewire components to use the new Computed Attribute syntax. This simplifies the component's code and aligns with the latest Livewire best practices. The rule replaces methods like `getFooBarProperty()` with a method named `fooBar()` annotated with the `#[\\Livewire\\Attributes\\Computed]` attribute.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/docs/rector_rules_overview.md#_snippet_21\n\nLANGUAGE: diff\nCODE:\n```\n use Livewire\\Component;\n\n class MyComponent extends Component\n {\n-    public function getFooBarProperty()\n+    #[\\Livewire\\Attributes\\Computed]\n+    public function fooBar()\n     {\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Replace redirect() 301 with permanentRedirect()\nDESCRIPTION: This Rector rule replaces `redirect()` calls with a 301 status code to `permanentRedirect()`. This uses the more semantic function for permanent redirects in Laravel. The code transforms `Illuminate\\Routing\\Route::redirect('/foo', '/bar', 301);` to `Illuminate\\Routing\\Route::permanentRedirect('/foo', '/bar');`.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/docs/rector_rules_overview.md#_snippet_32\n\nLANGUAGE: diff\nCODE:\n```\n class SomeClass\n {\n     public function run()\n     {\n-        Illuminate\\Routing\\Route::redirect('/foo', '/bar', 301);\n+        Illuminate\\Routing\\Route::permanentRedirect('/foo', '/bar');\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Replace Static Validate with Request Injection in Laravel\nDESCRIPTION: This Rector rule changes the static `validate()` method call on the `Request` class to `$request->validate()` by injecting the `Request` object into the method in Laravel.  This promotes dependency injection and makes the code more testable.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/docs/rector_rules_overview.md#_snippet_46\n\nLANGUAGE: diff\nCODE:\n```\n use Illuminate\\Http\\Request;\n\n class SomeClass\n {\n-    public function store()\n+    public function store(\\Illuminate\\Http\\Request $request)\n     {\n-        $validatedData = Request::validate(['some_attribute' => 'required']);\n+        $validatedData = $request->validate(['some_attribute' => 'required']);\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Refactor JSON Method Calls to Explicit JSON Calls in Laravel Tests\nDESCRIPTION: This Rector rule updates Laravel test methods using `$this->json` to the explicit equivalents like `$this->postJson`, `$this->putJson`, etc. This provides better clarity and intention in test code regarding the HTTP method used in JSON requests. The rule replaces calls like `$this->json(\"POST\", \"/api/v1/users\", $data)` with `$this->postJson(\"/api/v1/users\", $data)`.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/docs/rector_rules_overview.md#_snippet_20\n\nLANGUAGE: diff\nCODE:\n```\n-$this->json(\"POST\", \"/api/v1/users\", $data);\n+$this->postJson(\"/api/v1/users\", $data);\n```\n\n----------------------------------------\n\nTITLE: Change Request Variables to Request Facade in Laravel\nDESCRIPTION: This Rector rule changes request variable definitions (e.g., `$_GET`, `$_POST`, `$_REQUEST`) to the `Request` facade's methods (e.g., `Request::query()`, `Request::post()`, `Request::input()`). This provides a consistent and Laravel-centric way to access request data.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/docs/rector_rules_overview.md#_snippet_47\n\nLANGUAGE: diff\nCODE:\n```\n-$_GET['value'];\n-$_POST['value'];\n-$_REQUEST['value'];\n-$_POST;\n-$_GET;\n-$_REQUEST;\n+\\Illuminate\\Support\\Facades\\Request::query('value');\n+\\Illuminate\\Support\\Facades\\Request::post('value');\n+\\Illuminate\\Support\\Facades\\Request::input('value');\n+\\Illuminate\\Support\\Facades\\Request::query();\n+\\Illuminate\\Support\\Facades\\Request::post();\n+\\Illuminate\\Support\\Facades\\Request::all();\n```\n\n----------------------------------------\n\nTITLE: Replace redirect()->route() with to_route() Helper\nDESCRIPTION: This Rector rule replaces `redirect()->route(\"home\")` and `Redirect::route(\"home\")` with the more direct `to_route(\"home\")` helper function. This simplifies the code and improves readability. The code replaces `return redirect()->route('home')->with('error', 'Incorrect Details.')` with `return to_route('home')->with('error', 'Incorrect Details.')` and `return Redirect::route('home')->with('error', 'Incorrect Details.')` with `return to_route('home')->with('error', 'Incorrect Details.')`.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/docs/rector_rules_overview.md#_snippet_34\n\nLANGUAGE: diff\nCODE:\n```\n use Illuminate\\Support\\Facades\\Redirect;\n\n class MyController\n {\n     public function store()\n     {\n-        return redirect()->route('home')->with('error', 'Incorrect Details.')\n+        return to_route('home')->with('error', 'Incorrect Details.')\n     }\n\n     public function update()\n     {\n-        return Redirect::route('home')->with('error', 'Incorrect Details.')\n+        return to_route('home')->with('error', 'Incorrect Details.')\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Convert Session Variable to Session Facade in Laravel\nDESCRIPTION: This Rector rule changes PHP session usage (e.g., `$_SESSION['key']`) to use the `Session` facade's methods (e.g., `Session::get('key')`) in Laravel.  This provides a consistent and Laravel-centric way to manage sessions.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/docs/rector_rules_overview.md#_snippet_53\n\nLANGUAGE: diff\nCODE:\n```\n-$_SESSION['key'];\n-$_SESSION['key'] = 'value';\n-$_SESSION;\n-session_regenerate_id();\n-session_unset();\n-session_destroy();\n-session_start();\n-unset($_SESSION['key']);\n-isset($_SESSION['key'])\n+\\Illuminate\\Support\\Facades\\Session::get('key');\n+\\Illuminate\\Support\\Facades\\Session::put('key', 'value');\n+\\Illuminate\\Support\\Facades\\Session::all();\n+\\Illuminate\\Support\\Facades\\Session::regenerate();\n+\\Illuminate\\Support\\Facades\\Session::flush();\n+\\Illuminate\\Support\\Facades\\Session::destroy();\n+\\Illuminate\\Support\\Facades\\Session::start();\n+\\Illuminate\\Support\\Facades\\Session::forget('key');\n+\\Illuminate\\Support\\Facades\\Session::has('key');\n```\n\n----------------------------------------\n\nTITLE: Replace Expects Methods in Tests in Laravel\nDESCRIPTION: This Rector rule replaces `expectsJobs` and `expectsEvents` methods with Facade fakes (`Bus::fake` and `Event::fake`) in Laravel tests, and asserts the dispatched jobs and events using assertions. This modernizes the testing approach.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/docs/rector_rules_overview.md#_snippet_41\n\nLANGUAGE: diff\nCODE:\n```\n use Illuminate\\Foundation\\Testing\\TestCase;\n\n class SomethingTest extends TestCase\n {\n     public function testSomething()\n     {\n-        $this->expectsJobs([\\App\\Jobs\\SomeJob::class, \\App\\Jobs\\SomeOtherJob::class]);\n-        $this->expectsEvents(\\App\\Events\\SomeEvent::class);\n-        $this->doesntExpectEvents(\\App\\Events\\SomeOtherEvent::class);\n+        \\Illuminate\\Support\\Facades\\Bus::fake([\\App\\Jobs\\SomeJob::class, \\App\\Jobs\\SomeOtherJob::class]);\n+        \\Illuminate\\Support\\Facades\\Event::fake([\\App\\Events\\SomeEvent::class, \\App\\Events\\SomeOtherEvent::class]);\n\n         $this->get('/');\n+\n+        \\Illuminate\\Support\\Facades\\Bus::assertDispatched(\\App\\Jobs\\SomeJob::class);\n+        \\Illuminate\\Support\\Facades\\Bus::assertDispatched(\\App\\Jobs\\SomeOtherJob::class);\n+        \\Illuminate\\Support\\Facades\\Event::assertDispatched(\\App\\Events\\SomeEvent::class);\n+        \\Illuminate\\Support\\Facades\\Event::assertNotDispatched(\\App\\Events\\SomeOtherEvent::class);\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Change Server Variable to Request Facade in Laravel\nDESCRIPTION: This Rector rule changes server variable access (e.g., `$_SERVER['VARIABLE']`) to use the `Request` facade's `server()` method in Laravel.  This provides a consistent Laravel-centric way to access server variables.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/docs/rector_rules_overview.md#_snippet_52\n\nLANGUAGE: diff\nCODE:\n```\n-$_SERVER['VARIABLE'];\n+\\Illuminate\\Support\\Facade\\Request::server('VARIABLE');\n```\n\n----------------------------------------\n\nTITLE: Convert Minutes to Seconds in Laravel Cache Calls\nDESCRIPTION: This Rector rule converts the cache expiration time from minutes to seconds in `Illuminate\\Contracts\\Cache\\Store` and `Illuminate\\Support\\Facades\\Cache` calls. This aligns with the updated cache API in later Laravel versions, where expiration times are specified in seconds.  It ensures consistency and avoids potential issues with cache duration. The code transforms `Illuminate\\Support\\Facades\\Cache::put('key', 'value', 60);` to `Illuminate\\Support\\Facades\\Cache::put('key', 'value', 60 * 60);`.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/docs/rector_rules_overview.md#_snippet_26\n\nLANGUAGE: diff\nCODE:\n```\n class SomeClass\n {\n     public function run()\n     {\n-        Illuminate\\Support\\Facades\\Cache::put('key', 'value', 60);\n+        Illuminate\\Support\\Facades\\Cache::put('key', 'value', 60 * 60);\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Replace redirect()->back() with back() Helper\nDESCRIPTION: This Rector rule replaces `redirect()->back()` and `Redirect::back()` with the simpler `back()` helper function. This streamlines the code and makes it more readable. The code replaces `return redirect()->back()->with('error', 'Incorrect Details.')` with `return back()->with('error', 'Incorrect Details.')` and `return Redirect::back()->with('error', 'Incorrect Details.')` with `return back()->with('error', 'Incorrect Details.')`.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/docs/rector_rules_overview.md#_snippet_33\n\nLANGUAGE: diff\nCODE:\n```\n use Illuminate\\Support\\Facades\\Redirect;\n\n class MyController\n {\n     public function store()\n     {\n-        return redirect()->back()->with('error', 'Incorrect Details.')\n+        return back()->with('error', 'Incorrect Details.')\n     }\n\n     public function update()\n     {\n-        return Redirect::back()->with('error', 'Incorrect Details.')\n+        return back()->with('error', 'Incorrect Details.')\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Refactor App Environment Comparison PHP\nDESCRIPTION: This Rector rule replaces `$app->environment() === 'local'` with `$app->environment('local')`, providing a more concise and readable way to check the application environment.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/docs/rector_rules_overview.md#_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n-$app->environment() === 'production';\n+$app->environment('production');\n```\n\n----------------------------------------\n\nTITLE: Convert If-Throw Statements to throw_if/throw_unless (PHP)\nDESCRIPTION: This Rector rule simplifies code by converting `if` statements that throw exceptions to the more concise `throw_if` and `throw_unless` functions. This reduces the amount of code required to achieve the same functionality.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/docs/rector_rules_overview.md#_snippet_57\n\nLANGUAGE: diff\nCODE:\n```\n-if ($condition) {\n-    throw new Exception();\n-}\n-if (!$condition) {\n-    throw new Exception();\n-}\n+throw_if($condition, new Exception());\n+throw_unless($condition, new Exception());\n```\n\n----------------------------------------\n\nTITLE: Convert Property $defer to DeferrableProvider Interface\nDESCRIPTION: This Rector rule changes the deprecated `$defer = true;` property in service providers to implement the `Illuminate\\Contracts\\Support\\DeferrableProvider` interface. This is the modern way to indicate that a service provider should be deferred. It transforms a class to implement `DeferrableProvider` and removes the `$defer` property.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/docs/rector_rules_overview.md#_snippet_31\n\nLANGUAGE: diff\nCODE:\n```\n use Illuminate\\Support\\ServiceProvider;\n+use Illuminate\\Contracts\\Support\\DeferrableProvider;\n\n-final class SomeServiceProvider extends ServiceProvider\n+final class SomeServiceProvider extends ServiceProvider implements DeferrableProvider\n {\n-    /**\n-     * @var bool\n-     */\n-    protected $defer = true;\n }\n```\n\n----------------------------------------\n\nTITLE: Convert substr() to Str::startsWith() or Str::endsWith() in Laravel\nDESCRIPTION: This Rector rule uses `Str::startsWith()` or `Str::endsWith()` instead of `substr()` === `$str` for checking string prefixes and suffixes in Laravel. This makes the code more readable and expressive.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/docs/rector_rules_overview.md#_snippet_55\n\nLANGUAGE: diff\nCODE:\n```\n-if (substr($str, 0, 3) === 'foo') {\n+if (Str::startsWith($str, 'foo')) {\n     // do something\n }\n```\n\n----------------------------------------\n\nTITLE: Convert Scope Named Class Method to Scope Attribute in Laravel\nDESCRIPTION: This Rector rule changes model scope methods to use the scope attribute in Laravel. This utilizes the modern scope attribute syntax for cleaner code.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/docs/rector_rules_overview.md#_snippet_51\n\nLANGUAGE: diff\nCODE:\n```\n class User extends Model\n {\n-    public function scopeActive($query)\n+    #[\\Illuminate\\Database\\Eloquent\\Attributes\\Scope]\n+    public function active($query)\n     {\n         return $query->where('active', 1);\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Replace withoutJobs/Events/Notifications with Facade Fake in Laravel\nDESCRIPTION: This Rector rule replaces `$this->withoutJobs()`, `$this->withoutEvents()`, and `$this->withoutNotifications()` with `Facade::fake()` in Laravel tests.  This adopts the newer facade-based faking approach for cleaner and more maintainable tests.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/docs/rector_rules_overview.md#_snippet_44\n\nLANGUAGE: diff\nCODE:\n```\n-$this->withoutJobs();\n-$this->withoutEvents();\n-$this->withoutNotifications();\n+\\Illuminate\\Support\\Facades\\Bus::fake();\n+\\Illuminate\\Support\\Facades\\Event::fake();\n+\\Illuminate\\Support\\Facades\\Notification::fake();\n```\n\n----------------------------------------\n\nTITLE: Convert Migrations to Anonymous Classes PHP\nDESCRIPTION: This Rector rule converts Laravel migrations to anonymous classes, a feature introduced in later versions of Laravel. This can simplify migration files and potentially improve performance.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/docs/rector_rules_overview.md#_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n use Illuminate\\Database\\Migrations\\Migration;\n\n-class CreateUsersTable extends Migration\n+return new class extends Migration\n {\n     // ...\n-}\n+};\n```\n\n----------------------------------------\n\nTITLE: Use Class String for Exceptions in throw_if/throw_unless (PHP)\nDESCRIPTION: This Rector rule changes the usage of `new` instance with `throw_if` or `throw_unless` to class string for better maintainability and readability. The rule converts the creation of a new exception object directly into using the class string and passing the message as a separate argument.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/docs/rector_rules_overview.md#_snippet_56\n\nLANGUAGE: diff\nCODE:\n```\n-throw_if($condition, new MyException('custom message'));\n+throw_if($condition, MyException::class, 'custom message');\n```\n\n----------------------------------------\n\nTITLE: Convert Validation Rules to Arrays (PHP)\nDESCRIPTION: This Rector rule converts string-based validation rules to array-based rules for better readability and maintainability in Laravel's Validator. It changes string validation rules to arrays of strings.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/docs/rector_rules_overview.md#_snippet_63\n\nLANGUAGE: diff\nCODE:\n```\n Validator::make($data, [\n-    'field' => 'required|nullable|string|max:255',\n+    'field' => ['required', 'nullable', 'string', 'max:255'],\n ]);\n```\n\n----------------------------------------\n\nTITLE: Unify Model Dates with Casts (PHP)\nDESCRIPTION: This Rector rule unifies the `$dates` property in Eloquent models with the `$casts` property for consistent date handling. It moves date properties defined in `$dates` to `$casts` with the `datetime` type.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/docs/rector_rules_overview.md#_snippet_61\n\nLANGUAGE: diff\nCODE:\n```\n use Illuminate\\Database\\Eloquent\\Model;\n\n class Person extends Model\n {\n     protected $casts = [\n-        'age' => 'integer',\n+        'age' => 'integer', 'birthday' => 'datetime',\n     ];\n-\n-    protected $dates = ['birthday'];\n }\n```\n\n----------------------------------------\n\nTITLE: Convert Lumen Route String Actions to Uses Array\nDESCRIPTION: This Rector rule modifies Lumen route definitions to use array notation for actions instead of string notation. This improves code consistency and maintainability. The rule transforms `'$router->get('/user', 'UserController@get');'` to `'$router->get('/user', ['uses => 'UserController@get']);'`.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/docs/rector_rules_overview.md#_snippet_23\n\nLANGUAGE: diff\nCODE:\n```\n-$router->get('/user', 'UserController@get');\n+$router->get('/user', ['uses => 'UserController@get']);\n```\n\n----------------------------------------\n\nTITLE: Change if report to report_if in Laravel\nDESCRIPTION: This Rector rule transforms `if` statements that call `report()` into `report_if()` or `report_unless()` function calls in Laravel. This provides a more concise way to conditionally report exceptions.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/docs/rector_rules_overview.md#_snippet_45\n\nLANGUAGE: diff\nCODE:\n```\n-if ($condition) {\n-    report(new Exception());\n-}\n-if (!$condition) {\n-    report(new Exception());\n-}\n+report_if($condition, new Exception());\n+report_unless($condition, new Exception());\n```\n\n----------------------------------------\n\nTITLE: Configuring Rector with Additional Laravel Sets\nDESCRIPTION: This PHP code snippet configures Rector to use additional Laravel sets for improving code quality and collection usage. It utilizes RectorConfig to specify multiple sets from RectorLaravel\\Set\\LaravelSetList, such as LARAVEL_CODE_QUALITY and LARAVEL_COLLECTION, to enhance various aspects of the codebase.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/README.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php declare(strict_types=1);\n\nuse Rector\\Config\\RectorConfig;\nuse RectorLaravel\\Set\\LaravelSetList;\n\nreturn RectorConfig::configure()\n    ->withSets([\n        LaravelSetList::LARAVEL_CODE_QUALITY,\n        LaravelSetList::LARAVEL_COLLECTION,\n        ...\n    ]);\n```\n\n----------------------------------------\n\nTITLE: Replace Collection Method Aliases (PHP)\nDESCRIPTION: This Rector rule replaces aliased collection methods with their base counterparts for more consistent code.  It improves code maintainability by using standard method names like `avg` and `contains` instead of aliases.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/docs/rector_rules_overview.md#_snippet_60\n\nLANGUAGE: diff\nCODE:\n```\n use Illuminate\\Support\\Collection;\n\n $collection = new Collection([0, 1, null, -1]);\n-$collection->average();\n-$collection->some(fn (?int $number): bool => is_null($number));\n+$collection->avg();\n+$collection->contains(fn (?int $number): bool => is_null($number));\n```\n\n----------------------------------------\n\nTITLE: Move FuncCall to Method Call PHP\nDESCRIPTION: This Rector rule moves facade-like function calls to constructor injection, using dependency injection to manage dependencies. This improves testability and code maintainability. The example uses View Factory.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/docs/rector_rules_overview.md#_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\n class SomeController\n {\n+    /**\n+     * @var \\Illuminate\\Contracts\\View\\Factory\n+     */\n+    private $viewFactory;\n+\n+    public function __construct(\\Illuminate\\Contracts\\View\\Factory $viewFactory)\n+    {\n+        $this->viewFactory = $viewFactory;\n+    }\n+\n     public function action()\n     {\n-        $template = view('template.blade');\n-        $viewFactory = view();\n+        $template = $this->viewFactory->make('template.blade');\n+        $viewFactory = $this->viewFactory;\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Replace AssertDontSee with AssertDontSeeHtml PHP\nDESCRIPTION: This Rector rule replaces `assertDontSee` with `assertDontSeeHtml` when testing HTML content with escape set to `false`. This improves the clarity and accuracy of tests involving HTML output.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/docs/rector_rules_overview.md#_snippet_14\n\nLANGUAGE: diff\nCODE:\n```\n-$response->assertDontSee(\"<li>foo</li>\", false);\n+$response->assertDontSeeHtml(\"<li>foo</li>\");\n```\n\n----------------------------------------\n\nTITLE: Refactor Helper Function Calls to Facade Calls in Laravel\nDESCRIPTION: This Rector rule replaces calls to the `app()` helper function with their corresponding Facade calls in Laravel. This improves code readability and makes dependency injection more explicit. It transforms calls like `app('translator')` to `\\Illuminate\\Support\\Facades\\App::make('translator')`.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/docs/rector_rules_overview.md#_snippet_19\n\nLANGUAGE: diff\nCODE:\n```\n class SomeClass\n {\n     public function run()\n     {\n-        return app('translator')->trans('value');\n+        return \\Illuminate\\Support\\Facades\\App::make('translator')->trans('value');\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Convert Lumen Route String Middleware to Array\nDESCRIPTION: This Rector rule converts Lumen route middleware definitions from string to array notation. This ensures consistent formatting and simplifies managing multiple middleware. It transforms `$router->get('/user', ['middleware => 'test']);` to `$router->get('/user', ['middleware => ['test']]);` and `$router->post('/user', ['middleware => 'test|authentication']);` to `$router->post('/user', ['middleware => ['test', 'authentication']]);`.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/docs/rector_rules_overview.md#_snippet_24\n\nLANGUAGE: diff\nCODE:\n```\n-$router->get('/user', ['middleware => 'test']);\n-$router->post('/user', ['middleware => 'test|authentication']);\n+$router->get('/user', ['middleware => ['test']]);\n+$router->post('/user', ['middleware => ['test', 'authentication']]);\n```\n\n----------------------------------------\n\nTITLE: Replace Service Container Call Argument in Laravel\nDESCRIPTION: This Rector rule changes the string or class const used for a service container `make` call in Laravel. It promotes the use of class constants for better type hinting and refactoring support.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/docs/rector_rules_overview.md#_snippet_43\n\nLANGUAGE: diff\nCODE:\n```\n-app('encrypter')->encrypt('...');\n-\\Illuminate\\Support\\Facades\\Application::make('encrypter')->encrypt('...');\n+app(Illuminate\\Contracts\\Encryption\\Encrypter::class)->encrypt('...');\n+\\Illuminate\\Support\\Facades\\Application::make(Illuminate\\Contracts\\Encryption\\Encrypter::class)->encrypt('...');\n```\n\n----------------------------------------\n\nTITLE: Replace where with whereLike (2) (PHP)\nDESCRIPTION: This Rector rule replaces `where` method calls (specifically 'ilike' and 'like') with `whereLike` calls in Eloquent & Query Builder, simplifying fuzzy search syntax.  It enhances code clarity when performing 'like' queries.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/docs/rector_rules_overview.md#_snippet_65\n\nLANGUAGE: diff\nCODE:\n```\n-$query->where('name', 'ilike', 'Rector');\n-$query->orWhere('name', 'ilike', 'Rector');\n-$query->where('name', 'like', 'Rector');\n+$query->whereLike('name', 'Rector');\n+$query->orWhereLike('name', 'Rector');\n+$query->whereLike('name', 'Rector', true);\n```\n\n----------------------------------------\n\nTITLE: Replace Faker Instance with Helper in Laravel Factories\nDESCRIPTION: This Rector rule replaces `$this->faker` with the `fake()` helper function in Laravel Factories.  This uses the new, more concise `fake()` helper function provided by Laravel.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/docs/rector_rules_overview.md#_snippet_42\n\nLANGUAGE: diff\nCODE:\n```\n class UserFactory extends Factory\n {\n     public function definition()\n     {\n         return [\n-            'name' => $this->faker->name,\n-            'email' => $this->faker->unique()->safeEmail,\n+            'name' => fake()->name,\n+            'email' => fake()->unique()->safeEmail,\n         ];\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Reverse Conditionable Method Calls in Laravel\nDESCRIPTION: This Rector rule reverses conditionable method calls, replacing `$conditionable->when(!$condition, function () {})` with `$conditionable->unless($condition, function () {})` and vice-versa in Laravel. This provides more readable code by using the appropriate conditional method.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/docs/rector_rules_overview.md#_snippet_49\n\nLANGUAGE: diff\nCODE:\n```\n-$conditionable->when(!$condition, function () {});\n+$conditionable->unless($condition, function () {});\n```\n\nLANGUAGE: diff\nCODE:\n```\n-$conditionable->unless(!$condition, function () {});\n+$conditionable->when($condition, function () {});\n```\n\n----------------------------------------\n\nTITLE: Replace AssertStatus with AssertMethod PHP\nDESCRIPTION: This Rector rule replaces `(new \\Illuminate\\Testing\\TestResponse)->assertStatus(200)` with specific assertion methods like `assertOk()`, `assertNoContent()`, etc., providing more semantic and readable test assertions. It uses the `\\Illuminate\\Foundation\\Testing\\TestCase` class.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/docs/rector_rules_overview.md#_snippet_16\n\nLANGUAGE: diff\nCODE:\n```\n class ExampleTest extends \\Illuminate\\Foundation\\Testing\\TestCase\n {\n     public function testFoo()\n     {\n-        $this->get('/')->assertStatus(200);\n-        $this->get('/')->assertStatus(204);\n-        $this->get('/')->assertStatus(401);\n-        $this->get('/')->assertStatus(403);\n-        $this->get('/')->assertStatus(404);\n-        $this->get('/')->assertStatus(405);\n-        $this->get('/')->assertStatus(422);\n-        $this->get('/')->assertStatus(410);\n-        $this->get('/')->assertStatus(500);\n-        $this->get('/')->assertStatus(503);\n+        $this->get('/')->assertOk();\n+        $this->get('/')->assertNoContent();\n+        $this->get('/')->assertUnauthorized();\n+        $this->get('/')->assertForbidden();\n+        $this->get('/')->assertNotFound();\n+        $this->get('/')->assertMethodNotAllowed();\n+        $this->get('/')->assertUnprocessable();\n+        $this->get('/')->assertGone();\n+        $this->get('/')->assertInternalServerError();\n+        $this->get('/')->assertServiceUnavailable();\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Refactor Blueprint Geometry Column Definitions in Laravel Migrations\nDESCRIPTION: This Rector rule refactors calls to the pre-Laravel 11 methods for defining blueprint geometry columns in database migrations. It uses the new Laravel 11 method of defining geometry columns which uses a second argument, the type, in the function `geometry`. The code transforms `$blueprint->point('coordinates')->spatialIndex();` to `$blueprint->geometry('coordinates', 'point')->spatialIndex();`.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/docs/rector_rules_overview.md#_snippet_35\n\nLANGUAGE: diff\nCODE:\n```\n-$blueprint->point('coordinates')->spatialIndex();\n+$blueprint->geometry('coordinates', 'point')->spatialIndex();\n```\n\n----------------------------------------\n\nTITLE: Changes Assert Class String to Type Hinted Closure PHP\nDESCRIPTION: This Rector rule changes assert calls using a class string to a type-hinted closure, providing better type safety and readability in assertions.  It uses the `Bus::assertDispatched` method in the example.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/docs/rector_rules_overview.md#_snippet_17\n\nLANGUAGE: diff\nCODE:\n```\n-Bus::assertDispatched(OrderCreated::class, function ($job) {\n+Bus::assertDispatched(function (OrderCreated $job) {\n     return true;\n });\n```\n\n----------------------------------------\n\nTITLE: Add Parent Register To Event Service Provider PHP\nDESCRIPTION: This Rector rule adds `parent::register();` call to the `register()` class method in child of `Illuminate\\Foundation\\Support\\Providers\\EventServiceProvider`. This ensures that the parent service provider's registration logic is executed, preventing unexpected behavior.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/docs/rector_rules_overview.md#_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n use Illuminate\\Foundation\\Support\\Providers\\EventServiceProvider as ServiceProvider;\n\n class EventServiceProvider extends ServiceProvider\n {\n     public function register()\n     {\n+        parent::register();\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Replace AssertSee with AssertSeeHtml PHP\nDESCRIPTION: This Rector rule replaces `assertSee` with `assertSeeHtml` when testing HTML content with escape set to `false`.  This improves the clarity and accuracy of tests involving HTML output, ensuring that HTML entities are correctly handled.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/docs/rector_rules_overview.md#_snippet_13\n\nLANGUAGE: diff\nCODE:\n```\n-$response->assertSee(\"<li>foo</li>\", false);\n+$response->assertSeeHtml(\"<li>foo</li>\");\n```\n\n----------------------------------------\n\nTITLE: Replace sleep() Function with Sleep Facade in Laravel\nDESCRIPTION: This Rector rule replaces the `sleep()` and `usleep()` functions with `Sleep::sleep()` and `Sleep::usleep()` static calls in Laravel. This promotes the use of the `Sleep` facade.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/docs/rector_rules_overview.md#_snippet_54\n\nLANGUAGE: diff\nCODE:\n```\n-sleep(5);\n+\\Illuminate\\Support\\Sleep::sleep(5);\n```\n\n----------------------------------------\n\nTITLE: Replace AssertSeeInOrder with AssertSeeHtmlInOrder PHP\nDESCRIPTION: This Rector rule replaces `assertSeeInOrder` with `assertSeeHtmlInOrder` when testing HTML content with escape set to `false`.  This enhances the precision of tests and aligns them with modern testing standards.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/docs/rector_rules_overview.md#_snippet_15\n\nLANGUAGE: diff\nCODE:\n```\n-$response->assertSeeInOrder([\"<li>foo</li>\", \"<li>bar</li>\"], false);\n+$response->assertSeeHtmlInOrder([\"<li>foo</li>\", \"<li>bar</li>\"]);\n```\n\n----------------------------------------\n\nTITLE: Use Component Property in Commands (PHP)\nDESCRIPTION: This Rector rule uses `$this->components` property within commands instead of using `$this` directly. This allows the usage of the components system, to write better CLI output.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/docs/rector_rules_overview.md#_snippet_62\n\nLANGUAGE: diff\nCODE:\n```\n use Illuminate\\Console\\Command;\n\n class CommandWithComponents extends Command\n {\n     public function handle()\n     {\n-        $this->ask('What is your name?');\n-        $this->line('A line!');\n-        $this->info('Info!');\n-        $this->error('Error!');\n+        $this->components->ask('What is your name?');\n+        $this->components->line('A line!');\n+        $this->components->info('Info!');\n+        $this->components->error('Error!');\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Replace assertTimesSend with assertSentTimes in Laravel\nDESCRIPTION: This Rector rule replaces the deprecated `assertTimesSent` method with `assertSentTimes` for notification testing in Laravel.  This updates the code to use the recommended method for verifying notification sending.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/docs/rector_rules_overview.md#_snippet_40\n\nLANGUAGE: diff\nCODE:\n```\n-Notification::assertTimesSent(1, SomeNotification::class);\n+Notification::assertSentTimes(SomeNotification::class, 1);\n```\n\n----------------------------------------\n\nTITLE: Apply Default Instead of Null Coalesce PHP\nDESCRIPTION: This Rector rule replaces the null coalesce operator `??` with the `custom_helper()` function, where appropriate.  This is configurable and depends on the existence of such helper function and its expected behavior.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/docs/rector_rules_overview.md#_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n-custom_helper('app.name') ?? 'Laravel';\n+custom_helper('app.name', 'Laravel');\n```\n\n----------------------------------------\n\nTITLE: Installing Rector Laravel with Composer\nDESCRIPTION: This command installs the driftingly/rector-laravel package as a development dependency using Composer. This package provides Rector rules specifically for Laravel projects, enabling automated refactoring and upgrades.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ncomposer require --dev driftingly/rector-laravel\n```\n\n----------------------------------------\n\nTITLE: Add Parent Boot To Model Class Method PHP\nDESCRIPTION: This Rector rule adds `parent::boot();` call to the `boot()` class method in child of `Illuminate\\Database\\Eloquent\\Model`. This ensures that the parent model's boot logic is executed, preventing unexpected behavior.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/docs/rector_rules_overview.md#_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n use Illuminate\\Database\\Eloquent\\Model;\n\n class Product extends Model\n {\n     public function boot()\n     {\n+        parent::boot();\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Add Generic Return Type to Relations PHP\nDESCRIPTION: This Rector rule adds a generic return type to relation methods in Eloquent models.  It improves type hinting and enables static analysis tools to provide more accurate insights into your code. Requires the `Illuminate\\Database\\Eloquent\\Model` and `Illuminate\\Database\\Eloquent\\Relations\\HasMany` classes.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/docs/rector_rules_overview.md#_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n use App\\Account;\n use Illuminate\\Database\\Eloquent\\Model;\n use Illuminate\\Database\\Eloquent\\Relations\\HasMany;\n\n class User extends Model\n {\n+    /** @return HasMany<Account> */\n     public function accounts(): HasMany\n     {\n         return $this->hasMany(Account::class);\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Add Generic Return Type to Relations with $this PHP\nDESCRIPTION: This Rector rule adds a generic return type to relation methods in Eloquent models including `$this`. It requires `App\\Account`, `Illuminate\\Database\\Eloquent\\Model`, and `Illuminate\\Database\\Eloquent\\Relations\\HasMany` classes.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/docs/rector_rules_overview.md#_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n use App\\Account;\n use Illuminate\\Database\\Eloquent\\Model;\n use Illuminate\\Database\\Eloquent\\Relations\\HasMany;\n\n class User extends Model\n {\n+    /** @return HasMany<Account, $this> */\n     public function accounts(): HasMany\n     {\n         return $this->hasMany(Account::class);\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Add Guard To Login Event PHP\nDESCRIPTION: This Rector rule adds the `$guard` argument to the `Illuminate\\Auth\\Events\\Login` constructor. It retrieves the default guard configuration from `config('auth.defaults.guard')`. This ensures that the login event includes information about which guard was used for authentication.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/docs/rector_rules_overview.md#_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n use Illuminate\\Auth\\Events\\Login;\n\n final class SomeClass\n {\n     public function run(): void\n     {\n-        $loginEvent = new Login('user', false);\n+        $guard = config('auth.defaults.guard');\n+        $loginEvent = new Login($guard, 'user', false);\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Add Extends Annotation to Model Factories PHP\nDESCRIPTION: This Rector rule adds the `@extends` annotation to Laravel Factories, improving code documentation and IDE support. This allows for better type hinting and autocompletion when working with factories.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/docs/rector_rules_overview.md#_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n use Illuminate\\Database\\Eloquent\\Factories\\Factory;\n\n+/**\n+ * @extends \\Illuminate\\Database\\Eloquent\\Factories\\Factory<\\App\\Models\\User>\n+ */\n class UserFactory extends Factory\n {\n     protected $model = \\App\\Models\\User::class;\n }\n```\n\n----------------------------------------\n\nTITLE: Type Hint Tappable Closures (PHP)\nDESCRIPTION: This Rector rule automatically adds type hints to tappable closures for better code clarity and static analysis. It uses the Collection type hint for closures called within the `tap` function.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/docs/rector_rules_overview.md#_snippet_58\n\nLANGUAGE: diff\nCODE:\n```\n-tap($collection, function ($collection) {});\n+tap($collection, function (Collection $collection) {});\n```\n\n----------------------------------------\n\nTITLE: Type Hint Tappable Closures on New Collection (PHP)\nDESCRIPTION: This Rector rule automatically adds type hints to tappable closures when calling tap method on a new collection. This clarifies which type of variable the closure is operating on.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/docs/rector_rules_overview.md#_snippet_59\n\nLANGUAGE: diff\nCODE:\n```\n-(new Collection)->tap(function ($collection) {});\n+(new Collection)->tap(function (Collection $collection) {});\n```\n\n----------------------------------------\n\nTITLE: Creating a New Rector Rule with Composer\nDESCRIPTION: This command creates a new Rector rule using a Composer script. The script generates a new rule class in the src/Rector/ directory, along with corresponding test files. The `--` separator is crucial to pass arguments correctly to the composer script.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/README.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\ncomposer make:rule -- YourRuleName\n```\n\n----------------------------------------\n\nTITLE: Creating a New Rector Rule with Subdirectory\nDESCRIPTION: This command creates a new Rector rule within a specific subdirectory using the composer script. It demonstrates how to create a rule named `ConvertIfToWhen` inside an `If_` directory, resulting in the namespace `RectorLaravel\\Rector\\If_`.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/README.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\ncomposer make:rule -- If_/ConvertIfToWhen\n```\n\n----------------------------------------\n\nTITLE: Add Default Argument Value PHP\nDESCRIPTION: This Rector rule adds a default value to arguments in defined methods. It is configurable, allowing you to specify which methods and arguments should receive default values. This enhances code flexibility and reduces the likelihood of errors due to missing arguments.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/docs/rector_rules_overview.md#_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n class SomeClass\n {\n-    public function someMethod($value)\n+    public function someMethod($value = false)\n     {\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Replace now()->startOfDay() with today()\nDESCRIPTION: This Rector rule replaces calls to `now()->startOfDay()` with the more concise `today()` function. This simplifies the code and improves readability when retrieving the start of the current day. The rule replaces `-$now = now()->startOfDay();` with `+$now = today();`.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/docs/rector_rules_overview.md#_snippet_29\n\nLANGUAGE: diff\nCODE:\n```\n-$now = now()->startOfDay();\n+$now = today();\n```\n\n----------------------------------------\n\nTITLE: Convert Negated Collection Contains PHP\nDESCRIPTION: This Rector rule converts negated calls to `contains` to `doesntContain`, or vice versa on Illuminate Collections, improving code readability and expressiveness. It needs `Illuminate\\Support\\Collection` class.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/docs/rector_rules_overview.md#_snippet_18\n\nLANGUAGE: diff\nCODE:\n```\n use Illuminate\\Support\\Collection;\n\n $collection = new Collection([0, 1, null, -1]);\n-! $collection->contains(fn (?int $number): bool => is_null($number));\n-! $collection->doesntContain(fn (?int $number) => $number > 0);\n+$collection->doesntContain(fn (?int $number): bool => is_null($number));\n+$collection->contains(fn (?int $number) => $number > 0);\n```\n\n----------------------------------------\n\nTITLE: Remove Redundant Value Calls in Laravel\nDESCRIPTION: This Rector rule removes redundant `value()` helper function calls in Laravel code. It simplifies the code by directly accessing the object's properties or methods.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/docs/rector_rules_overview.md#_snippet_38\n\nLANGUAGE: diff\nCODE:\n```\n-value(new Object())->something();\n+(new Object())->something();\n```\n\n----------------------------------------\n\nTITLE: Remove Redundant With Calls in Laravel\nDESCRIPTION: This Rector rule removes redundant `with()` helper function calls in Laravel code. It simplifies the code by directly accessing the object's properties or methods.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/docs/rector_rules_overview.md#_snippet_39\n\nLANGUAGE: diff\nCODE:\n```\n-with(new Object())->something();\n+(new Object())->something();\n```\n\n----------------------------------------\n\nTITLE: Replace where with whereLike (PHP)\nDESCRIPTION: This Rector rule replaces `where` method calls with `whereLike` calls in Eloquent & Query Builder for simpler fuzzy searching. It simplifies the syntax for performing 'like' queries.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/docs/rector_rules_overview.md#_snippet_64\n\nLANGUAGE: diff\nCODE:\n```\n-$query->where('name', 'like', 'Rector');\n-$query->orWhere('name', 'like', 'Rector');\n-$query->where('name', 'like binary', 'Rector');\n+$query->whereLike('name', 'Rector');\n+$query->orWhereLike('name', 'Rector');\n+$query->whereLike('name', 'Rector', true);\n```\n\n----------------------------------------\n\nTITLE: Refactor Not Filled/Blank to Blank/Filled Function Calls\nDESCRIPTION: This Rector rule corrects the usage of `!filled()` and `!blank()` functions by swapping them with `blank()` and `filled()` respectively. This ensures correct logic for checking if a value is filled or blank.  The rule transforms `!filled([]);` to `blank([]);` and `!blank([]);` to `filled([]);`.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/docs/rector_rules_overview.md#_snippet_28\n\nLANGUAGE: diff\nCODE:\n```\n-!filled([]);\n-!blank([]);\n+blank([]);\n+filled([]);\n```\n\n----------------------------------------\n\nTITLE: Remove $model Property from Laravel Factories\nDESCRIPTION: This Rector rule removes the `$model` property from Laravel Factories. The `$model` property is no longer needed in newer versions of Laravel. It simplifies factory definitions. The rule removes the line `protected $model = \\App\\Models\\User::class;`.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/docs/rector_rules_overview.md#_snippet_37\n\nLANGUAGE: diff\nCODE:\n```\n use Illuminate\\Database\\Eloquent\\Factories\\Factory;\n\n class UserFactory extends Factory\n {\n-    protected $model = \\App\\Models\\User::class;\n }\n```\n\n----------------------------------------\n\nTITLE: Refactor Abort If Statements PHP\nDESCRIPTION: This Rector rule changes `if` statements that call `abort()` to the more concise `abort_if()` and `abort_unless()` functions. This improves readability and reduces code verbosity.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/docs/rector_rules_overview.md#_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n-if ($condition) {\n-    abort(404);\n-}\n-if (!$condition) {\n-    abort(404);\n-}\n+abort_if($condition, 404);\n+abort_unless($condition, 404);\n```\n\n----------------------------------------\n\nTITLE: Add Mock Console Output False To Console Tests PHP\nDESCRIPTION: This Rector rule adds `$this->mockConsoleOutput = false;` to the `setUp()` method of console tests that work with output content. This ensures that the console output is properly captured and asserted in tests.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/docs/rector_rules_overview.md#_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n use Illuminate\\Support\\Facades\\Artisan;\n use Illuminate\\Foundation\\Testing\\TestCase;\n\n final class SomeTest extends TestCase\n {\n+    protected function setUp(): void\n+    {\n+        parent::setUp();\n+\n+        $this->mockConsoleOutput = false;\n+    }\n+\n     public function test(): void\n     {\n         $this->assertEquals('content', \\trim((new Artisan())::output()));\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Replace Response Helper Call to JsonResponse in Laravel\nDESCRIPTION: This Rector rule replaces the `response()->json()` helper call with the `JsonResponse` class constructor in Laravel. It promotes the use of explicit `JsonResponse` objects for better type safety and clarity.\nSOURCE: https://github.com/driftingly/rector-laravel/blob/main/docs/rector_rules_overview.md#_snippet_48\n\nLANGUAGE: diff\nCODE:\n```\n-response()->json(['key' => 'value']);\n+return new JsonResponse(['key' => 'value']);\n```"
  }
]