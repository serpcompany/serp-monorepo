[
  {
    "owner": "get-convex",
    "repo": "rate-limiter",
    "content": "TITLE: Initializing and Using RateLimiter in TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize the RateLimiter with different configurations and use it to limit various actions. It shows both fixed window and token bucket strategies, as well as global and per-user rate limiting.\nSOURCE: https://github.com/get-convex/rate-limiter/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst rateLimiter = new RateLimiter(components.rateLimiter, {\n  freeTrialSignUp: { kind: \"fixed window\", rate: 100, period: HOUR },\n  sendMessage: { kind: \"token bucket\", rate: 10, period: MINUTE, capacity: 3 },\n});\n\n// Restrict how fast free users can sign up to deter bots\nconst status = await rateLimiter.limit(ctx, \"freeTrialSignUp\");\n\n// Limit how fast a user can send messages\nconst status = await rateLimiter.limit(ctx, \"sendMessage\", { key: userId });\n```\n\n----------------------------------------\n\nTITLE: Defining Rate Limits with RateLimiter in TypeScript\nDESCRIPTION: This snippet demonstrates how to define various rate limits using the RateLimiter class. It includes examples of global limits, per-user limits, and sharded limits for improved performance.\nSOURCE: https://github.com/get-convex/rate-limiter/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RateLimiter, MINUTE, HOUR } from \"@convex-dev/rate-limiter\";\nimport { components } from \"./_generated/api\";\n\nconst rateLimiter = new RateLimiter(components.rateLimiter, {\n  freeTrialSignUp: { kind: \"fixed window\", rate: 100, period: HOUR },\n  sendMessage: { kind: \"token bucket\", rate: 10, period: MINUTE, capacity: 3 },\n  failedLogins: { kind: \"token bucket\", rate: 10, period: HOUR },\n  llmTokens: { kind: \"token bucket\", rate: 40000, period: MINUTE, shards: 10 },\n  llmRequests: { kind: \"fixed window\", rate: 1000, period: MINUTE, shards: 10 },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Global and Per-User Rate Limits in TypeScript\nDESCRIPTION: This snippet shows how to use global and per-user rate limits with the RateLimiter. It demonstrates checking limits, handling responses, and using custom counts for consumption.\nSOURCE: https://github.com/get-convex/rate-limiter/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst { ok, retryAfter } = await rateLimiter.limit(ctx, \"freeTrialSignUp\");\n\nconst status = await rateLimiter.limit(ctx, \"sendMessage\", { key: userId });\n\nconst status = await rateLimiter.limit(ctx, \"llmTokens\", { count: tokens });\n```\n\n----------------------------------------\n\nTITLE: Advanced RateLimiter Usage in TypeScript\nDESCRIPTION: This snippet demonstrates advanced usage of the RateLimiter, including automatic error throwing, checking limits without consumption, resetting limits, and defining inline rate limits.\nSOURCE: https://github.com/get-convex/rate-limiter/blob/main/README.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nawait rateLimiter.limit(ctx, \"failedLogins\", { key: userId, throws: true });\n\nconst status = await rateLimiter.check(ctx, \"failedLogins\", { key: userId });\n\nawait rateLimiter.reset(ctx, \"failedLogins\", { key: userId });\n\nconst config = { kind: \"fixed window\", rate: 1, period: SECOND };\nconst status = await rateLimiter.limit(ctx, \"oneOffName\", { config });\n```\n\n----------------------------------------\n\nTITLE: Implementing Capacity Reservation in Convex Action\nDESCRIPTION: Shows how to implement rate limiting with capacity reservation to prevent request starvation. The action includes a skipCheck parameter and uses the rateLimiter.limit method to reserve future capacity, with automatic retry scheduling if the limit is reached.\nSOURCE: https://github.com/get-convex/rate-limiter/blob/main/README.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst myAction = internalAction({\n  args: {\n    //...\n    skipCheck: v.optional(v.boolean()),\n  },\n  handler: async (ctx, args) => {\n    if (!args.skipCheck) {\n      // Reserve future capacity instead of just failing now\n      const status = await rateLimiter.limit(ctx, \"llmRequests\", {\n        reserve: true,\n        throws: true,\n      });\n      if (status.retryAfter) {\n        return ctx.scheduler.runAfter(\n          status.retryAfter,\n          internal.foo.myAction,\n          {\n            // When we run in the future, we can skip the rate limit check,\n            // since we've just reserved that capacity.\n            skipCheck: true,\n          }\n        );\n      }\n    }\n    // do the operation\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Jitter to Rate Limiting Retry Times\nDESCRIPTION: Demonstrates how to add randomization (jitter) to retry times to prevent thundering herd problems. The implementation adds a random time within the next period to distribute retry attempts.\nSOURCE: https://github.com/get-convex/rate-limiter/blob/main/README.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst retryAfter = status.retryAfter + Math.random() * period;\n```\n\n----------------------------------------\n\nTITLE: Installing Convex Rate Limiter Component in TypeScript\nDESCRIPTION: This snippet shows how to install the Convex Rate Limiter component using npm and configure it in a Convex project. It requires creating a convex.config.ts file and using the component.\nSOURCE: https://github.com/get-convex/rate-limiter/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @convex-dev/rate-limiter\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// convex/convex.config.ts\nimport { defineApp } from \"convex/server\";\nimport rateLimiter from \"@convex-dev/rate-limiter/convex.config\";\n\nconst app = defineApp();\napp.use(rateLimiter);\n\nexport default app;\n```"
  }
]