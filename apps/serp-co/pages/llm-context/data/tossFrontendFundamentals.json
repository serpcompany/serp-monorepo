[
  {
    "owner": "toss",
    "repo": "frontend-fundamentals",
    "content": "TITLE: Configuring Webpack for Asset Management (JavaScript)\nDESCRIPTION: This JavaScript snippet features a sample webpack.config.js configuration for handling CSS, images, and font files using Asset Modules (asset/resource). It defines module rules for populating the output assets directory and resolving static asset paths in both JavaScript and CSS imports. Key dependencies include Node.js, webpack 5 or higher, and installation of relevant loaders like style-loader and css-loader. The configuration specifies the output path, filename, and asset path format, supporting images (png, jpg, gif, etc.) and web fonts (woff, ttf, etc.).\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/bundling/tutorial/image-and-font.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// webpack.config.js\\nconst path = require('path');\\n\\nmodule.exports = {\\n  entry: './src/index.js',\\n  output: {\\n    filename: 'bundle.js',\\n    path: path.resolve(__dirname, 'dist'),\\n    assetModuleFilename: 'assets/[hash][ext][query]', // 에셋 파일의 출력 경로 형식\\n  },\\n  mode: 'development',\\n  module: {\\n    rules: [\\n      {\\n        test: \\/\\\\.css\\$/,\\n        use: ['style-loader', 'css-loader'],\\n      },\\n      {\\n        test: \\/\\\\.(png|svg|jpg|jpeg|gif)\\$/i,  // 이미지 확장자\\n        type: 'asset/resource',              // 파일 복사 + 경로 반환\\n      },\\n      {\\n        test: \\/\\\\.(woff|woff2|eot|ttf|otf)\\$/i, // 폰트 확장자\\n        type: 'asset/resource',\\n      },\\n    ],\\n  },\\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Form-Level Validation with Zod and React Hook Form in TypeScript\nDESCRIPTION: This snippet demonstrates form-level cohesion using `react-hook-form` integrated with the Zod schema validation library via `@hookform/resolvers/zod`. A single Zod schema defines the validation rules for all form fields (`name`, `email`). The `zodResolver` applies this schema to the form, centralizing validation logic and ensuring consistency across the form. This approach is beneficial when fields are interdependent or represent a single cohesive function.\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/code-quality/en/code/examples/form-fields.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport * as z from \"zod\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\n\nconst schema = z.object({\n  name: z.string().min(1, \"Please enter your name.\"),\n  email: z\n    .string()\n    .min(1, \"Please enter your email.\")\n    .email(\"Please enter a valid email address.\")\n});\n\nexport function Form() {\n  const {\n    register,\n    formState: { errors },\n    handleSubmit\n  } = useForm({\n    defaultValues: {\n      name: \"\",\n      email: \"\"\n    },\n    resolver: zodResolver(schema)\n  });\n\n  const onSubmit = handleSubmit((formData) => {\n    // Form data submission logic\n    console.log(\"Form submitted:\", formData);\n  });\n\n  return (\n    <form onSubmit={onSubmit}>\n      <div>\n        <input {...register(\"name\")} placeholder=\"Name\" />\n        {errors.name && <p>{errors.name.message}</p>}\n      </div>\n\n      <div>\n        <input {...register(\"email\")} placeholder=\"Email\" />\n        {errors.email && <p>{errors.email.message}</p>}\n      </div>\n\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Refactoring React Component using Composition to Avoid Props Drilling (tsx)\nDESCRIPTION: This TSX snippet presents a refactored `ItemEditModal` component using the Composition pattern. Instead of passing props through an intermediate `ItemEditBody` component, it directly renders the necessary child components (`Input`, `Button`, `ItemEditList`) within the `Modal`. This structure avoids props drilling by ensuring props like `items`, `recommendedItems`, and `onConfirm` are passed directly to the components that need them (`ItemEditList`), reducing coupling and removing the need for the `ItemEditBody` component.\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/code-quality/en/code/examples/item-edit-modal.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction ItemEditModal({ open, items, recommendedItems, onConfirm, onClose }) {\n  const [keyword, setKeyword] = useState(\"\");\n\n  return (\n    <Modal open={open} onClose={onClose}>\n      <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n        <Input\n          value={keyword}\n          onChange={(e) => onKeywordChange(e.target.value)} // Note: original code had onKeywordChange, likely meant setKeyword\n        />\n        <Button onClick={onClose}>Close</Button>\n      </div>\n      <ItemEditList\n        keyword={keyword}\n        items={items}\n        recommendedItems={recommendedItems}\n        onConfirm={onConfirm}\n      />\n    </Modal>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS in Webpack Dev Server (JavaScript)\nDESCRIPTION: This snippet demonstrates how to configure the Webpack Dev Server to use HTTPS. It involves setting the `server.type` to 'https' and providing paths to the SSL key and certificate files within the `server.options`. This is necessary for local development environments requiring HTTPS. Dependencies include `webpack`, `webpack-dev-server`, and locally generated SSL certificates (e.g., using `mkcert`).\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/bundling/reference/dev/dev-server.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  //...\n  devServer: {\n    server: {\n      type: \"https\",\n      options: {\n        key: \"./path/to/server-key.pem\",\n        cert: \"./path/to/server.pem\",\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Login Guard using Wrapper Component in React - TypeScript\nDESCRIPTION: This code refactors login status checking by introducing an AuthGuard wrapper component. AuthGuard uses the useCheckLoginStatus hook to determine authentication status and redirects to '/home' if a user is logged in. It conditionally renders children (like LoginStartPage) only if the status is not 'LOGGED_IN'. This improves code readability by separating authentication logic from page content, and supports composability in React. Prerequisites include useCheckLoginStatus, React, and presence of a LoginStartPage component.\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/code-quality/en/code/examples/login-start-page.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction App() {\n  return (\n    <AuthGuard>\n      <LoginStartPage />\n    </AuthGuard>\n  );\n}\n\nfunction AuthGuard({ children }) {\n  const status = useCheckLoginStatus();\n\n  useEffect(() => {\n    if (status === \"LOGGED_IN\") {\n      location.href = \"/home\";\n    }\n  }, [status]);\n\n  return status !== \"LOGGED_IN\" ? children : null;\n}\n\nfunction LoginStartPage() {\n  /* ... login related logic ... */\n\n  return <>{/* ... login related components ... */}</>;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using Discriminated Unions for Type-Safe Validation Returns (TypeScript)\nDESCRIPTION: This snippet demonstrates enhancing the consistent object return type for validation functions using a TypeScript Discriminated Union (`ValidationCheckReturnType`). By defining the return type explicitly, the compiler can enforce type safety, preventing access to the `reason` property when `ok` is true, thus avoiding potential runtime errors.\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/code-quality/en/code/examples/use-user.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype ValidationCheckReturnType = { ok: true } | { ok: false; reason: string };\n\nfunction checkIsAgeValid(age: number): ValidationCheckReturnType {\n  if (!Number.isInteger(age)) {\n    return {\n      ok: false,\n      reason: \"Age must be an integer.\"\n    };\n  }\n  // ...\n}\n\nconst isAgeValid = checkIsAgeValid(1.1);\n\nif (isAgeValid.ok) {\n  isAgeValid.reason; // Type error: Property reason does not exist on type { ok: true }\n} else {\n  isAgeValid.reason; // You can only access the reason property when ok is false\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Field-Level Form Validation with React Hook Form in TypeScript\nDESCRIPTION: This snippet demonstrates field-level cohesion using `react-hook-form`. Validation logic is defined independently for each input field (`name`, `email`) using the `validate` property within the `register` function. It includes helper functions (`isNil`, `isEmptyStringOrNil`) for common validation checks. This approach isolates validation logic to individual fields, potentially increasing maintainability for specific fields.\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/code-quality/en/code/examples/form-fields.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport { useForm } from \"react-hook-form\";\n\nexport function Form() {\n  const {\n    register,\n    formState: { errors },\n    handleSubmit\n  } = useForm({\n    defaultValues: {\n      name: \"\",\n      email: \"\"\n    }\n  });\n\n  const onSubmit = handleSubmit((formData) => {\n    // Form data submission logic\n    console.log(\"Form submitted:\", formData);\n  });\n\n  return (\n    <form onSubmit={onSubmit}>\n      <div>\n        <input\n          {...register(\"name\", {\n            validate: (value) =>\n              isEmptyStringOrNil(value) ? \"Please enter your name.\" : \"\"\n          })}\n          placeholder=\"Name\"\n        />\n        {errors.name && <p>{errors.name.message}</p>}\n      </div>\n\n      <div>\n        <input\n          {...register(\"email\", {\n            validate: (value) => {\n              if (isEmptyStringOrNil(value)) {\n                return \"Please enter your email.\";\n              }\n\n              if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(value)) {\n                return \"Please enter a valid email address.\";\n              }\n\n              return \"\";\n            }\n          })}\n          placeholder=\"Email\"\n        />\n        {errors.email && <p>{errors.email.message}</p>}\n      </div>\n\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n}\n\nfunction isNil(value: unknown): value is null | undefined {\n  return value == null;\n}\n\ntype NullableString = string | null | undefined;\n\nfunction isEmptyStringOrNil(value: NullableString): boolean {\n  return isNil(value) || value.trim() === \"\";\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Managing Role-Based UI Logic in React Component (TypeScript)\nDESCRIPTION: This snippet defines a single <SubmitButton /> React component that handles both viewer (read-only) and regular user cases using conditional logic and effects. It uses a custom useRole() hook to determine user type and toggles UI behavior and animation accordingly. Dependencies include React, useEffect, useRole, Button, and TextButton components; expected inputs are the current user context, with outputs being the correct button type and animation state.\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/code-quality/en/code/examples/submit-button.md#_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nfunction SubmitButton() {\n  const isViewer = useRole() === \"viewer\";\n\n  useEffect(() => {\n    if (isViewer) {\n      return;\n    }\n    showButtonAnimation();\n  }, [isViewer]);\n\n  return isViewer ? (\n    <TextButton disabled>Submit</TextButton>\n  ) : (\n    <Button type=\"submit\">Submit</Button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Refactoring Like Click Handler with Named Constant Delay in TypeScript\nDESCRIPTION: This TypeScript code refactors the previous example by replacing the magic number `300` with a named constant `ANIMATION_DELAY_MS`. This constant explicitly defines the purpose of the 300ms delay, significantly improving code readability and making the intention clear. The `onLikeClick` function now uses `delay(ANIMATION_DELAY_MS)`, enhancing maintainability. It depends on the `ANIMATION_DELAY_MS` constant, `postLike`, `delay`, `refetchPostLike` functions, and a `url` variable.\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/code-quality/en/code/examples/magic-number-readability.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst ANIMATION_DELAY_MS = 300;\n\nasync function onLikeClick() {\n  await postLike(url);\n  await delay(ANIMATION_DELAY_MS);\n  await refetchPostLike();\n}\n```\n\n----------------------------------------\n\nTITLE: Managing a Single Query Parameter with a Focused React Hook in TypeScript\nDESCRIPTION: This TypeScript React custom hook, `useCardIdQueryParam`, demonstrates a refactored approach by managing only a single URL query parameter ('cardId'). It uses the `useQueryParam` function from the 'use-query-params' library to get the current value (`cardId`) and a setter function (`_setCardId`). A memoized `setCardId` function using `useCallback` is provided for stable updates. The hook returns a tuple containing the current `cardId` (or undefined) and the memoized setter function. This approach improves readability and isolates state management compared to managing multiple parameters in one hook.\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/code-quality/en/code/examples/use-page-state-readability.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useQueryParam } from \"use-query-params\";\n\nexport function useCardIdQueryParam() {\n  const [cardId, _setCardId] = useQueryParam(\"cardId\", NumberParam);\n\n  const setCardId = useCallback((cardId: number) => {\n    _setCardId({ cardId }, \"replaceIn\");\n  }, []);\n\n  return [cardId ?? undefined, setCardId] as const;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using an Image in Vanilla JS (JavaScript)\nDESCRIPTION: This JavaScript snippet illustrates importing an image file and programmatically using it in a web page via vanilla JavaScript. The imported LogoImage value is used for the src property of a new Image object, which is then mounted to the DOM. Dependencies include a compatible webpack configuration (asset/resource), and supporting files such as message.js and style.css. Parameters are fixed; it creates DOM elements for the image and a message text, returning a container div ready to be appended to document.body. Useful in projects with static image assets requiring dynamic handling.\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/bundling/tutorial/image-and-font.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// src/index.js\\nimport { getMessage } from './message';\\nimport './style.css';\\nimport LogoImage from './images/logo.png';  // 이미지 파일을 불러와요\\n\\nfunction component() {\\n  const element = document.createElement('div');\\n  element.textContent = getMessage();\\n  element.classList.add('message');\\n\\n  const logo = new Image();\\n  logo.src = LogoImage;    // 불러온 이미지 경로를 src로 설정해요\\n  logo.alt = 'Logo';\\n  logo.width = 200;\\n\\n  const container = document.createElement('div');\\n  container.appendChild(logo);\\n  container.appendChild(element);\\n\\n  return container;\\n}\\n\\ndocument.body.appendChild(component());\n```\n\n----------------------------------------\n\nTITLE: Defining a Decoupled React Hook for Managing a Single Query Parameter in TypeScript\nDESCRIPTION: This TypeScript code presents an improved approach by defining a custom React hook `useCardIdQueryParam` using `use-query-params` and `useCallback`. It specifically manages only the `cardId` URL query parameter, returning the current value (or undefined) and a memoized setter function. This demonstrates separating concerns for better maintainability and reduced coupling compared to managing all parameters in a single hook.\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/code-quality/en/code/examples/use-page-state-coupling.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nimport { useQueryParam } from \"use-query-params\";\n\nexport function useCardIdQueryParam() {\n  const [cardId, _setCardId] = useQueryParam(\"cardId\", NumberParam);\n\n  const setCardId = useCallback((cardId: number) => {\n    _setCardId({ cardId }, \"replaceIn\");\n  }, []);\n\n  return [cardId ?? undefined, setCardId] as const;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Login Guard using Higher-Order Component (HOC) in React - TypeScript\nDESCRIPTION: This snippet demonstrates using a Higher-Order Component (HOC) pattern to abstract login checking in a React TypeScript project. The withAuthGuard HOC wraps the LoginStartPage component, checking authentication with useCheckLoginStatus and redirecting to '/home' if already logged in. Otherwise, it renders the wrapped component. This pattern enhances separation of concerns by encapsulating authentication logic outside the original component. It requires useCheckLoginStatus, React hooks, and the component to be wrapped.\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/code-quality/en/code/examples/login-start-page.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction LoginStartPage() {\n  /* ... login related logic ... */\n\n  return <>{/* ... login related components ... */}</>;\n}\n\nexport default withAuthGuard(LoginStartPage);\n\n// Define HOC\nfunction withAuthGuard(WrappedComponent) {\n  return function AuthGuard(props) {\n    const status = useCheckLoginStatus();\n\n    useEffect(() => {\n      if (status === \"LOGGED_IN\") {\n        location.href = \"/home\";\n      }\n    }, [status]);\n\n    return status !== \"LOGGED_IN\" ? <WrappedComponent {...props} /> : null;\n  };\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Maintenance Bottom Sheet Hook in React (TypeScript)\nDESCRIPTION: Defines a custom React hook named useOpenMaintenanceBottomSheet that manages maintenance notifications for a frontend app. The hook utilizes dependencies useMaintenanceBottomSheet and useLogger, returning an async function accepting maintenance info, triggering the bottom sheet, logging user actions, and closing the view. It requires that useMaintenanceBottomSheet, useLogger, and closeView are available in the scope, and expects a TelecomMaintenanceInfo object when invoked. Inputs are the inspection info, and outputs include UI changes, logs, and view closure. Flexibility and coupling constraints are discussed elsewhere in the file.\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/code-quality/en/code/examples/use-bottom-sheet.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const useOpenMaintenanceBottomSheet = () => {\n  const maintenanceBottomSheet = useMaintenanceBottomSheet();\n  const logger = useLogger();\n\n  return async (maintainingInfo: TelecomMaintenanceInfo) => {\n    logger.log(\"Maintenance bottom sheet opened\");\n    const result = await maintenanceBottomSheet.open(maintainingInfo);\n    if (result) {\n      logger.log(\"Maintenance bottom sheet notification clicked\");\n    }\n    closeView();\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Illustrating Issues with Inconsistent Validation Return Types (TypeScript)\nDESCRIPTION: This code snippet demonstrates a potential pitfall of inconsistent return types from validation functions. The `if (checkIsNameValid(name))` works as expected because it returns a boolean. However, `if (checkIsAgeValid(age))` might lead to unexpected behavior, as the function always returns a truthy object (`{ ok: ... }`), causing the `if` block to always execute regardless of the actual validation result.\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/code-quality/en/code/examples/use-user.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// This code correctly validates whether the name follows the rules\nif (checkIsNameValid(name)) {\n  // ...\n}\n\n// Since this function always returns an object `{ ok, ... }`,\n// the code inside the `if` statement will always execute\nif (checkIsAgeValid(age)) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Separating Role-Based Button Rendering in React (TypeScript)\nDESCRIPTION: This refactored snippet splits viewer and admin logic into <ViewerSubmitButton /> and <AdminSubmitButton /> subcomponents, reducing cognitive load and branch complexity. Dependencies include React, useEffect, useRole, Button, and TextButton components, as well as a showAnimation function. Inputs are determined by user role, producing different button behaviors and UI for each subcomponent, enhancing clarity and testability.\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/code-quality/en/code/examples/submit-button.md#_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\nfunction SubmitButton() {\n  const isViewer = useRole() === \"viewer\";\n\n  return isViewer ? <ViewerSubmitButton /> : <AdminSubmitButton />;\n}\n\nfunction ViewerSubmitButton() {\n  return <TextButton disabled>Submit</TextButton>;\n}\n\nfunction AdminSubmitButton() {\n  useEffect(() => {\n    showAnimation();\n  }, []);\n\n  return <Button type=\"submit\">Submit</Button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Fonts and Background Images in CSS with Webpack Support (CSS)\nDESCRIPTION: This CSS snippet defines a font-face and specifies usage of a custom font and background images. It leverages Webpack's handling of url() references to resolve paths for font and image files. The code expects that the referenced font and image files are present in ./fonts and ./images folders, and that webpack is configured to support asset/resource for these. The main selectors style the message box and ensure correct font and image application. Inputs are the class/message structure and outputs are proper font and image rendering in the frontend.\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/bundling/tutorial/image-and-font.md#_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n/* src/style.css */\\n@font-face {\\n  font-family: 'MyCustomFont';\\n  src: url('./fonts/custom-font.woff2') format('woff2');\\n  font-weight: 600;\\n  font-style: normal;\\n}\\n\\nbody {\\n  font-family: 'MyCustomFont', 'Arial', sans-serif;\\n  background-color: #f5f5f5;\\n}\\n\\n.message {\\n  padding: 20px;\\n  background-color: #e9f7fe;\\n  border: 1px solid #b3e5fc;\\n  border-radius: 4px;\\n  color: #0288d1;\\n  margin: 20px;\\n\\n  background-image: url('./images/icon.png');\\n  background-repeat: no-repeat;\\n  background-position: 10px center;\\n  padding-left: 40px;\\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating Props Drilling in React Components (tsx)\nDESCRIPTION: This snippet shows two React functional components, `ItemEditModal` and `ItemEditBody`, written in TSX. `ItemEditModal` receives several props (`items`, `recommendedItems`, `onConfirm`) and passes them down to `ItemEditBody`, which in turn passes some of them to `ItemEditList` (implicitly shown). This demonstrates the props drilling anti-pattern, where props are passed through intermediate components that don't directly use them, increasing coupling. The `useState` hook manages the `keyword` state within `ItemEditModal`.\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/code-quality/en/code/examples/item-edit-modal.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nfunction ItemEditModal({ open, items, recommendedItems, onConfirm, onClose }) {\n  const [keyword, setKeyword] = useState(\"\");\n\n  // Other ItemEditModal logic ...\n\n  return (\n    <Modal open={open} onClose={onClose}>\n      <ItemEditBody\n        items={items}\n        keyword={keyword}\n        onKeywordChange={setKeyword}\n        recommendedItems={recommendedItems}\n        onConfirm={onConfirm}\n        onClose={onClose}\n      />\n      {/* ... Other ItemEditModal components ... */}\n    </Modal>\n  );\n}\n\nfunction ItemEditBody({\n  keyword,\n  onKeywordChange,\n  items,\n  recommendedItems,\n  onConfirm,\n  onClose\n}) {\n  return (\n    <>\n      <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n        <Input\n          value={keyword}\n          onChange={(e) => onKeywordChange(e.target.value)}\n        />\n        <Button onClick={onClose}>Close</Button>\n      </div>\n      <ItemEditList\n        keyword={keyword}\n        items={items}\n        recommendedItems={recommendedItems}\n        onConfirm={onConfirm}\n      />\n    </>\n  );\n}\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Illustrating Domain-Based Directory Structure\nDESCRIPTION: This snippet presents an improved directory structure where code is organized by feature or domain. Common, project-wide code resides at the top level, while feature-specific code is grouped within dedicated domain folders (e.g., Domain1, Domain2), each potentially containing its own components, hooks, utils, etc. This promotes cohesion and makes dependencies clearer.\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/code-quality/en/code/examples/code-directory.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n└─ src\n   │  // Code used in the entire project\n   ├─ components\n   ├─ containers\n   ├─ hooks\n   ├─ utils\n   ├─ ...\n   │\n   └─ domains\n      │  // Code used only in Domain1\n      ├─ Domain1\n      │     ├─ components\n      │     ├─ containers\n      │     ├─ hooks\n      │     ├─ utils\n      │     └─ ...\n      │\n      │  // Code used only in Domain2\n      └─ Domain2\n            ├─ components\n            ├─ containers\n            ├─ hooks\n            ├─ utils\n            └─ ...\n```\n\n----------------------------------------\n\nTITLE: Refactoring Validation Functions for Consistent Object Return Types (TypeScript)\nDESCRIPTION: This snippet shows the improved versions of `checkIsNameValid` and `checkIsAgeValid`. Both functions are modified to consistently return an object of the shape `{ ok: boolean, reason?: string }`. This standardization makes using validation functions more predictable and less error-prone.\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/code-quality/en/code/examples/use-user.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/** User names must be less than 20 characters. */\nfunction checkIsNameValid(name: string) {\n  if (name.length === 0) {\n    return {\n      ok: false,\n      reason: 'Name cannot be empty.'\n    };\n  } \n  \n  if (name.length >= 20) {\n    return {\n      ok: false,\n      reason: 'Name cannot be longer than 20 characters'\n    };\n  }\n\n  return { ok: true };\n}\n\n/** User age must be a natural number between 18 and 99, inclusive. */\nfunction checkIsAgeValid(age: number) {\n  if (!Number.isInteger(age)) {\n    return {\n      ok: false,\n      reason: \"Age must be an integer.\"\n    };\n  }\n\n  if (age < 18) {\n    return {\n      ok: false,\n      reason: \"Age must be 18 or older.\"\n    };\n  }\n\n  if (age > 99) {\n    return {\n      ok: false,\n      reason: \"Age must be 99 or younger.\"\n    };\n  }\n\n  return { ok: true };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Permission Logic using Policy Abstraction in React - TypeScript/TSX\nDESCRIPTION: Implements permission-based UI rendering in a React component by abstracting user role policies through object mapping and accessor functions. Depends on `useUser` (for user context) and a custom `Button` component. The `POLICY_SET` object defines possible permissions; `getPolicyByRole` computes per-role permission flags. The `Page` function accesses these flags to enable or disable 'Invite' and 'View' buttons. Inputs include the current `user` object with a `role` field; outputs are buttons rendered with correct enabled/disabled states. Limitations: indirection may impact readability for small policy sets. Assumes all dependencies are available in scope and user roles are 'admin' or 'viewer'.\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/code-quality/en/code/examples/user-policy.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Page() {\n  const user = useUser();\n  const policy = getPolicyByRole(user.role);\n\n  return (\n    <div>\n      <Button disabled={!policy.canInvite}>Invite</Button>\n      <Button disabled={!policy.canView}>View</Button>\n    </div>\n  );\n}\n\nfunction getPolicyByRole(role) {\n  const policy = POLICY_SET[role];\n\n  return {\n    canInvite: policy.includes(\"invite\"),\n    canView: policy.includes(\"view\")\n  };\n}\n\nconst POLICY_SET = {\n  admin: [\"invite\", \"view\"],\n  viewer: [\"view\"]\n};\n```\n\n----------------------------------------\n\nTITLE: Refactoring React Query Hooks for Consistent Return Types (TypeScript)\nDESCRIPTION: This snippet refactors the previous example (`useUser`, `useServerTime`) to ensure consistency. Both custom hooks now return the complete `Query` object from `@tanstack/react-query`, enhancing predictability for developers using these hooks.\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/code-quality/en/code/examples/use-user.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useQuery } from '@tanstack/react-query';\n\nfunction useUser() {\n  const query = useQuery({\n    queryKey: ['user'],\n    queryFn: fetchUser\n  });\n\n  return query;\n}\n\nfunction useServerTime() {\n  const query = useQuery({\n    queryKey: ['serverTime'],\n    queryFn: fetchServerTime\n  });\n\n  return query;\n}\n```\n\n----------------------------------------\n\nTITLE: Encapsulated Invite Button Component in React - TypeScript\nDESCRIPTION: This snippet refactors the invitation flow by moving consent dialog logic into a dedicated InviteButton component in TypeScript/React. InviteButton displays an Invite button, opens a confirmation modal using overlay.openAsync when clicked, and triggers sendPush if consent is given. FriendInvitation now simply passes the friend's name as a prop to InviteButton, improving cohesion and reducing cognitive load. Required dependencies include React, overlay, ConfirmDialog, Button, and sendPush. Primary inputs are the name prop and user interaction; output is a (potential) invite push.\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/code-quality/en/code/examples/login-start-page.md#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport function FriendInvitation() {\n  const { data } = useQuery(/* omitted.. */);\n\n  // Other state management, event handlers, and asynchronous logic needed for this component...\n\n  return (\n    <>\n      <InviteButton name={data.name} />\n      {/* JSX markup for UI */}\n    </>\n  );\n}\n\nfunction InviteButton({ name }) {\n  return (\n    <Button\n      onClick={async () => {\n        const canInvite = await overlay.openAsync(({ isOpen, close }) => (\n          <ConfirmDialog\n            title={`Share with ${name}`}\n            cancelButton={\n              <ConfirmDialog.CancelButton onClick={() => close(false)}>\n                Close\n              </ConfirmDialog.CancelButton>\n            }\n            confirmButton={\n              <ConfirmDialog.ConfirmButton onClick={() => close(true)}>\n                Confirm\n              </ConfirmDialog.ConfirmButton>\n            }\n            /* omitted */\n          />\n        ));\n\n        if (canInvite) {\n          await sendPush();\n        }\n      }}\n    >\n      Invite\n    </Button>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Handling Like Button Clicks Using Named Delay Constant in TypeScript\nDESCRIPTION: Improves the event handler by introducing the constant 'ANIMATION_DELAY_MS' to make the purpose of the delay explicit, enhancing code readability and maintainability. The asynchronous function first defines the delay as a constant, then proceeds with posting a like, waiting for the animation delay, and refetching the like data. Dependencies include 'postLike', 'delay', and 'refetchPostLike', with 'url' expected in the surrounding scope. This structure clarifies intent (animation delay in milliseconds) and reduces the risk of errors if values need to change. Input: none (relies on outer 'url'). Output: triggers side effects; no return value. Limitation: Constant value must be updated in one place if requirements change.\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/code-quality/en/code/examples/magic-number-cohesion.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst ANIMATION_DELAY_MS = 300;\n\nasync function onLikeClick() {\n  await postLike(url);\n  await delay(ANIMATION_DELAY_MS);\n  await refetchPostLike();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring API Request Proxying in Webpack Dev Server (JavaScript)\nDESCRIPTION: This code shows how to configure the Webpack Dev Server to act as a proxy for API requests, primarily to circumvent CORS issues during development. It uses the `proxy` option to forward requests made to a specific context path (e.g., '/api') on the dev server to a designated backend server (`target`). This makes the browser treat the requests as same-origin. Requires `webpack` and `webpack-dev-server`.\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/bundling/reference/dev/dev-server.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  //...\n  devServer: {\n    proxy: [\n      {\n        context: [\"/api\"],\n        target: \"http://localhost:3000\",\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring Wrapped HTTP Service with Conflicting Names (TypeScript)\nDESCRIPTION: Defines a custom HTTP service that wraps an imported library, using the same name ('http') for both. The module adds authentication by fetching a token and attaching it to the Authorization header for GET requests. This design may confuse maintainers since the service name matches the library's, masking the extra logic; it requires the '@some-library/http' dependency and a defined 'fetchToken' function. Input: any URL string; Output: a GET request with authentication headers; Limitation: non-obvious behavioral difference from the base library.\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/code-quality/en/code/examples/http.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// This service uses a library called `@some-library/http`\nimport { http as httpLibrary } from \"@some-library/http\";\n\nexport const http = {\n  async get(url: string) {\n    const token = await fetchToken();\n\n    return httpLibrary.get(url, {\n      headers: { Authorization: `Bearer ${token}` }\n    });\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Filtering Products with Named Conditions in TypeScript\nDESCRIPTION: This improved version of the previous snippet introduces named intermediate variables inside the filter logic to clarify the intent of each condition. 'isSameCategory' and 'isPriceInRange' expressively describe each requirement, enhancing readability and maintainability. Prerequisites remain the same as before: 'products', 'targetCategory', 'minPrice', and 'maxPrice'. Inputs are the product objects evaluated in the filter; the output is an array called 'matchedProducts'. This approach aids code understanding, eases future changes, and allows for easier unit testing if the conditionals are extracted.\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/code-quality/en/code/examples/condition-name.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst matchedProducts = products.filter((product) => {\n  return product.categories.some((category) => {\n    const isSameCategory = category.id === targetCategory.id;\n    const isPriceInRange = product.prices.some(\n      (price) => price >= minPrice && price <= maxPrice\n    );\n\n    return isSameCategory && isPriceInRange;\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Pure Account Balance Fetching - TypeScript\nDESCRIPTION: This refactored version of fetchBalance contains only the logic to fetch the account balance using an HTTP GET request, returning a Promise of type number. It omits side-effects like logging, aligning the function's behavior with its name and signature for better predictability. The function now solely depends on the http object and expects the backend endpoint to return a number.\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/code-quality/en/code/examples/hidden-logic.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nasync function fetchBalance(): Promise<number> {\n  const balance = await http.get<number>(\"...\");\n\n  return balance;\n}\n```\n\n----------------------------------------\n\nTITLE: Friend Invitation Component with Consent Dialog in React - TypeScript\nDESCRIPTION: The FriendInvitation component integrates an asynchronous event handler for inviting friends, prompting the user via a modal confirmation dialog built with ConfirmDialog. It fetches user data with useQuery and conditionally sends an invitation through sendPush when the user confirms. The code includes custom dialog rendering, async event handling, and uses overlay.openAsync for modal interaction. Required dependencies are useQuery, overlay, ConfirmDialog, Button, and sendPush. The main input is a click event; the output is an optional push invitation.\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/code-quality/en/code/examples/login-start-page.md#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nfunction FriendInvitation() {\n  const { data } = useQuery(/* Omitted for brevity .. */);\n\n  // Other state management, event handlers, and asynchronous logic needed for this component...\n  const handleClick = async () => {\n    const canInvite = await overlay.openAsync(({ isOpen, close }) => (\n      <ConfirmDialog\n        title={`Share with ${data.name}`}\n        cancelButton={\n          <ConfirmDialog.CancelButton onClick={() => close(false)}>\n            Close\n          </ConfirmDialog.CancelButton>\n        }\n        confirmButton={\n          <ConfirmDialog.ConfirmButton onClick={() => close(true)}>\n            Confirm\n          </ConfirmDialog.ConfirmButton>\n        }\n        /* omitted */\n      />\n    ));\n\n    if (canInvite) {\n      await sendPush();\n    }\n  };\n\n  // Other state management, event handlers, and asynchronous logic needed for this component...\n\n  return (\n    <>\n      <Button onClick={handleClick}>Invite</Button>\n      {/* JSX markup for UI... */}\n    </>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Declaring a Predictably Named Authenticated HTTP Service (TypeScript)\nDESCRIPTION: Defines a service named 'httpService' with a function 'getWithAuth' that performs a GET request with an Authorization header. The explicit function naming makes its behavior clear, reducing confusion with the underlying HTTP library. Requires '@some-library/http' and a working 'fetchToken' function. Input: URL string; Output: GET request with 'Bearer' token; Improved clarity is achieved by naming conventions.\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/code-quality/en/code/examples/http.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// This service uses a library called `@some-library/http`\nimport { http as httpLibrary } from \"@some-library/http\";\n// Changed the name to distinguish it from the library function.\nexport const httpService = {\n  async getWithAuth(url: string) {\n    const token = await fetchToken();\n\n    // Add authentication logic such as adding the token to the header.\n    return httpLibrary.get(url, {\n      headers: { Authorization: `Bearer ${token}` }\n    });\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Inconsistent Return Types in React Query Hooks (TypeScript)\nDESCRIPTION: This snippet shows two custom React Query hooks, `useUser` and `useServerTime`. `useUser` returns the entire `Query` object from `@tanstack/react-query`, while `useServerTime` fetches data but returns only the `query.data` part, leading to inconsistent return types for similar API call hooks.\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/code-quality/en/code/examples/use-user.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useQuery } from '@tanstack/react-query';\n\nfunction useUser() {\n  const query = useQuery({\n    queryKey: ['user'],\n    queryFn: fetchUser\n  });\n\n  return query;\n}\n\nfunction useServerTime() {\n  const query = useQuery({\n    queryKey: ['serverTime'],\n    queryFn: fetchServerTime,\n  });\n\n  return query.data;\n}\n```\n\n----------------------------------------\n\nTITLE: Directly Exposing Permission Conditions in React - TypeScript/TSX\nDESCRIPTION: This snippet exposes all permission conditions inline using a switch statement within a React component to control button enabled/disabled states directly. Requires `useUser` and `Button` components. The `Page` component checks the user role and renders appropriate button states for 'admin' and 'viewer' without abstraction or indirection. Key parameter: `user.role`; outputs rendered buttons with hardcoded enabled/disabled states. This approach simplifies understanding at the cost of scalability. No external policy mapping required; maintainable for a small set of roles and permissions.\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/code-quality/en/code/examples/user-policy.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Page() {\n  const user = useUser();\n\n  switch (user.role) {\n    case \"admin\":\n      return (\n        <div>\n          <Button disabled={false}>Invite</Button>\n          <Button disabled={false}>View</Button>\n        </div>\n      );\n    case \"viewer\":\n      return (\n        <div>\n          <Button disabled={true}>Invite</Button>\n          <Button disabled={false}>View</Button>\n        </div>\n      );\n    default:\n      return null;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Account Balance Fetch with Explicit Logging and Sync - TSX\nDESCRIPTION: Presents a React Button component (in TSX) that, upon click, asynchronously fetches the user's balance, explicitly logs the 'balance_fetched' event, and then synchronizes the balance using syncBalance. Relies on fetchBalance, logging, and syncBalance to be accessible within scope. Inputs involve user interactions with the button, and outputs are side effects (logging and syncing). This structure exposes side effects at the UI layer, making the flow of actions more transparent and debuggable.\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/code-quality/en/code/examples/hidden-logic.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Button\n  onClick={async () => {\n    const balance = await fetchBalance();\n    logging.log(\"balance_fetched\");\n\n    await syncBalance(balance);\n  }}\n>\n  Update Account Balance\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Defining a React Component with JSX - JavaScript\nDESCRIPTION: Defines a simple functional React component using JSX syntax, which returns a header element. Requires a React build environment capable of processing JSX (e.g., Babel, React-scripts). Input: none; output: React element for rendering. Not directly executable by browsers without transformation.\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/bundling/overview.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// components/App.jsx\\nexport function App() {\\n  // 다음 JSX 문법은 브라우저에서 실행할 수 없어요\\n  return <h1>Hello, world!</h1>;\\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a React Component with JSX - JavaScript\nDESCRIPTION: Imports the 'App' component and renders it into the DOM using ReactDOM with JSX. Demonstrates typical React entrypoint logic. Needs React and ReactDOM libraries, and a bundler/transpiler to process JSX. Inputs: mounted DOM node; outputs: app rendered into the page.\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/bundling/overview.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// index.jsx\\nimport { App } from './components/App.jsx';\\n\\nconst domNode = document.getElementById('root');\\nReactDOM.createRoot(domNode).render(\\n  // 다음 JSX 문법은 브라우저에서 실행할 수 없어요\\n  <App />\\n);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Inconsistent Return Types in Validation Functions (TypeScript)\nDESCRIPTION: This example presents two validation functions, `checkIsNameValid` and `checkIsAgeValid`. `checkIsNameValid` returns a simple boolean indicating validity. In contrast, `checkIsAgeValid` returns an object `{ ok: boolean, reason?: string }` providing more context on failure. This difference in return types for similar validation logic can lead to confusion.\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/code-quality/en/code/examples/use-user.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/** User names must be less than 20 characters. */\nfunction checkIsNameValid(name: string) {\n  const isValid = name.length > 0 && name.length < 20;\n\n  return isValid;\n}\n\n/** User age must be a natural number between 18 and 99, inclusive. */\nfunction checkIsAgeValid(age: number) {\n  if (!Number.isInteger(age)) {\n    return {\n      ok: false,\n      reason: \"Age must be an integer.\"\n    };\n  }\n\n  if (age < 18) {\n    return {\n      ok: false,\n      reason: \"Age must be 18 or older.\"\n    };\n  }\n\n  if (age > 99) {\n    return {\n      ok: false,\n      reason: \"Age must be 99 or younger.\"\n    };\n  }\n\n  return { ok: true };\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Images in React with Webpack Asset Modules (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates importing an image (LogoImage.png) as a module using Webpack 5's Asset Modules feature within a React functional component. The imported value resolves to a string path generated by Webpack, which is set as the src attribute for an <img> tag. This allows static asset management and bundling through Webpack. Dependencies include a compatible Webpack 5 configuration supporting Asset Modules and React. The component receives no parameters and renders a logo image element.\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/bundling/tutorial/image-and-font.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport LogoImage from './images/LogoImage.png';\\n\\nexport function Image() {\\n  return <img src={LogoImage} alt=\\\"로고\\\" />\\n}\n```\n\n----------------------------------------\n\nTITLE: Building Webpack Assets with NPM (Bash)\nDESCRIPTION: This Bash snippet shows the command to invoke a Webpack build process via npm run build. It requires a pre-configured package.json script that launches 'webpack' with the appropriate configuration. When executed, this will generate output assets in the configured dist/assets directory, verifying that images and fonts are properly copied and referenced. No parameters are involved.\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/bundling/tutorial/image-and-font.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Consuming the Improved HTTP Service with Clear Naming (TypeScript)\nDESCRIPTION: Illustrates how to import and use the newly named 'httpService' and its 'getWithAuth' function. The code clearly signals that it performs authenticated requests, reducing misunderstanding for other developers. Depends on the export in 'httpService.ts'. Input: none (uses preset endpoint); Output: promise of HTTP GET result with authentication.\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/code-quality/en/code/examples/http.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Code that imports httpService defined in httpService.ts\nimport { httpService } from \"./httpService\";\n\nexport async function fetchUser() {\n  // The function name indicates that this function sends an authenticated request.\n  return await httpService.getWithAuth(\"...\");\n}\n```\n\n----------------------------------------\n\nTITLE: Importing TypeScript Utility and Logging Sum - TypeScript\nDESCRIPTION: Imports the strongly-typed 'add' function from a TypeScript module and logs the result of adding 1 and 2. Assumes TypeScript-aware build tools (e.g., ts-node, tsc) and proper module resolution. Inputs/outputs mirror the JavaScript example, with type safety enforced at compile time.\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/bundling/overview.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// index.ts\\nimport { add } from './utils/add.ts';\\n\\nconsole.log(add(1, 2));\n```\n\n----------------------------------------\n\nTITLE: Managing Multiple Query Parameters with a Single React Hook in TypeScript\nDESCRIPTION: This TypeScript React custom hook, `usePageState`, utilizes the 'use-query-params' library to manage several URL query parameters (`cardId`, `statementId`, `dateFrom`, `dateTo`, `statusList`) simultaneously. It defines default date values using 'moment' and returns an object containing the current parameter values (with defaults applied) and corresponding setter functions. This example illustrates a pattern where multiple pieces of state are handled within one hook, which the surrounding text criticizes for potential readability and performance issues.\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/code-quality/en/code/examples/use-page-state-readability.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport moment, { Moment } from \"moment\";\nimport { useMemo } from \"react\";\nimport {\n  ArrayParam,\n  DateParam,\n  NumberParam,\n  useQueryParams\n} from \"use-query-params\";\n\nconst defaultDateFrom = moment().subtract(3, \"month\");\nconst defaultDateTo = moment();\n\nexport function usePageState() {\n  const [query, setQuery] = useQueryParams({\n    cardId: NumberParam,\n    statementId: NumberParam,\n    dateFrom: DateParam,\n    dateTo: DateParam,\n    statusList: ArrayParam\n  });\n\n  return useMemo(\n    () => ({\n      values: {\n        cardId: query.cardId ?? undefined,\n        statementId: query.statementId ?? undefined,\n        dateFrom:\n          query.dateFrom == null ? defaultDateFrom : moment(query.dateFrom),\n        dateTo: query.dateTo == null ? defaultDateTo : moment(query.dateTo),\n        statusList: query.statusList as StatementStatusType[] | undefined\n      },\n      controls: {\n        setCardId: (cardId: number) => setQuery({ cardId }, \"replaceIn\"),\n        setStatementId: (statementId: number) =>\n          setQuery({ statementId }, \"replaceIn\"),\n        setDateFrom: (date?: Moment) =>\n          setQuery({ dateFrom: date?.toDate() }, \"replaceIn\"),\n        setDateTo: (date?: Moment) =>\n          setQuery({ dateTo: date?.toDate() }, \"replaceIn\"),\n        setStatusList: (statusList?: StatementStatusType[]) =>\n          setQuery({ statusList }, \"replaceIn\")\n      }\n    }),\n    [query, setQuery]\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Coupled React Hook for Managing All Page Query Parameters in TypeScript\nDESCRIPTION: This TypeScript code defines a custom React hook `usePageState` using the `use-query-params` library. It centralizes the management of multiple URL query parameters (`cardId`, `statementId`, `dateFrom`, `dateTo`, `statusList`), providing their current values (with defaults for dates) and setter functions wrapped in `useMemo`. Dependencies include `moment` for date handling and `react`'s `useMemo`. This approach is presented as potentially problematic due to high coupling as it handles many responsibilities.\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/code-quality/en/code/examples/use-page-state-coupling.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nimport moment, { Moment } from \"moment\";\nimport { useMemo } from \"react\";\nimport {\n  ArrayParam,\n  DateParam,\n  NumberParam,\n  useQueryParams\n} from \"use-query-params\";\n\nconst defaultDateFrom = moment().subtract(3, \"month\");\nconst defaultDateTo = moment();\n\nexport function usePageState() {\n  const [query, setQuery] = useQueryParams({\n    cardId: NumberParam,\n    statementId: NumberParam,\n    dateFrom: DateParam,\n    dateTo: DateParam,\n    statusList: ArrayParam\n  });\n\n  return useMemo(\n    () => ({\n      values: {\n        cardId: query.cardId ?? undefined,\n        statementId: query.statementId ?? undefined,\n        dateFrom:\n          query.dateFrom == null ? defaultDateFrom : moment(query.dateFrom),\n        dateTo: query.dateTo == null ? defaultDateTo : moment(query.dateTo),\n        statusList: query.statusList as StatementStatusType[] | undefined\n      },\n      controls: {\n        setCardId: (cardId: number) => setQuery({ cardId }, \"replaceIn\"),\n        setStatementId: (statementId: number) =>\n          setQuery({ statementId }, \"replaceIn\"),\n        setDateFrom: (date?: Moment) =>\n          setQuery({ dateFrom: date?.toDate() }, \"replaceIn\"),\n        setDateTo: (date?: Moment) =>\n          setQuery({ dateTo: date?.toDate() }, \"replaceIn\"),\n        setStatusList: (statusList?: StatementStatusType[]) =>\n          setQuery({ statusList }, \"replaceIn\")\n      }\n    }),\n    [query, setQuery]\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Handling Like Click with Magic Number Delay in TypeScript\nDESCRIPTION: This TypeScript async function `onLikeClick` handles a like button click. It calls `postLike`, then introduces a delay of 300 milliseconds using `delay(300)`, and finally calls `refetchPostLike`. The literal value `300` is a 'magic number' because its purpose (e.g., waiting for animation, server update) is not explicit from the code, potentially hindering readability and maintainability. It assumes `postLike`, `delay`, `refetchPostLike` functions and a `url` variable are defined elsewhere.\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/code-quality/en/code/examples/magic-number-readability.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nasync function onLikeClick() {\n  await postLike(url);\n  await delay(300);\n  await refetchPostLike();\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Like Button Clicks with Magic Numbers in TypeScript\nDESCRIPTION: Defines an asynchronous function that triggers a like action when invoked. The function sequentially posts the like, waits for 300 milliseconds using a delay function, and then refreshes like data. The numeric value 300 is inlined as the delay in milliseconds, which may obscure its intent. Requires the existence of 'postLike', 'delay', and 'refetchPostLike' functions, and expects 'url' to be defined in scope. Input: none (but relies on outer 'url'). Output: executes side effects; does not return data. Limitation: Use of a magic number reduces maintainability and code clarity.\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/code-quality/en/code/examples/magic-number-cohesion.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nasync function onLikeClick() {\n  await postLike(url);\n  await delay(300);\n  await refetchPostLike();\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Addition Utility - JavaScript\nDESCRIPTION: Defines and exports an 'add' function from a separate utility file using JavaScript ES module syntax. Intended for modular usage of arithmetic operations, this snippet requires a JavaScript environment with ES module support. Input parameters are the numbers to add; the output is their sum. No external dependencies required.\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/bundling/overview.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// utils/add.js\\nexport function add(a, b) {\\n  return a + b;\\n}\n```\n\n----------------------------------------\n\nTITLE: Index Aggregator for Utilities - JavaScript\nDESCRIPTION: Aggregates and re-exports the 'add' and 'subtract' functions from their respective utility modules. Enables simplified imports elsewhere in the application by exposing multiple functions from a single entrypoint. Requires the referenced './add.js' and './subtract.js' files. No inputs or outputs are defined here; this acts as a passthrough module.\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/bundling/overview.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// utils/index.js\\nexport { add } from './add.js';\\nexport { subtract } from './subtract.js';\n```\n\n----------------------------------------\n\nTITLE: Illustrating Type-Based Directory Structure\nDESCRIPTION: This snippet shows a common project directory structure where files are grouped primarily by their technical type (components, constants, containers, hooks, utils) rather than by feature or domain. This structure can lead to lower cohesion and difficulty managing dependencies as the project grows.\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/code-quality/en/code/examples/code-directory.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n└─ src\n   ├─ components\n   ├─ constants\n   ├─ containers\n   ├─ contexts\n   ├─ remotes\n   ├─ hooks\n   ├─ utils\n   └─ ...\n```\n\n----------------------------------------\n\nTITLE: Assigning Status Using Sequential If Statements in TypeScript\nDESCRIPTION: This snippet assigns a string value to 'status' by encapsulating a sequence of if statements within an IIFE (Immediately Invoked Function Expression). Each conditional checks for various boolean combinations of 'ACondition' and 'BCondition', returning the appropriate string for each case. No dependencies are required, and inputs/outputs remain the same as the ternary version. This implementation prioritizes clarity, making the decision logic explicit and easier to maintain.\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/code-quality/en/code/examples/ternary-operator.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst status = (() => {\n  if (ACondition && BCondition) return \"BOTH\";\n  if (ACondition) return \"A\";\n  if (BCondition) return \"B\";\n  return \"NONE\";\n})();\n```\n\n----------------------------------------\n\nTITLE: Basic Webpack Dev Server Configuration (JavaScript)\nDESCRIPTION: This snippet illustrates a basic configuration for Webpack Dev Server within the `webpack.config.js` file. It sets the directory for static files to be served (`static.directory`), enables gzip compression (`compress`), and specifies the port number (`port`) for the server to listen on. It utilizes the Node.js `path` module for resolving directory paths. Requires `webpack`, `webpack-dev-server`.\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/bundling/reference/dev/dev-server.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = require(\"path\");\n\nmodule.exports = {\n  //...\n  devServer: {\n    // static으로 서빙할 파일의 디렉토리 지정\n    static: {\n      directory: path.join(__dirname, \"public\"),\n    },\n    // gzip 압축 활성화\n    compress: true,\n    // 사용할 포트 번호\n    port: 9000,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Fetching Account Balance with Logging - TypeScript\nDESCRIPTION: Defines an asynchronous function fetchBalance that retrieves a numerical account balance via an HTTP GET request and implicitly logs the event 'balance_fetched' each time it's called. Depends on http and logging modules or objects. It returns a Promise resolving to the account balance as a number. This approach hides the logging side effect from the caller, which can reduce predictability and can cause unexpected errors if logging fails.\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/code-quality/en/code/examples/hidden-logic.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nasync function fetchBalance(): Promise<number> {\n  const balance = await http.get<number>(\"...\");\n\n  logging.log(\"balance_fetched\");\n\n  return balance;\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Products with Nested Anonymous Functions in TypeScript\nDESCRIPTION: This snippet uses chained anonymous arrow functions to filter a list of products that match both a specified category and fall within a given price range. It leverages the 'filter' and 'some' methods, nesting conditions for categories and prices inline. Required dependencies include an array of 'products' objects, 'targetCategory', 'minPrice', and 'maxPrice'. Inputs are the variables referenced in the filter; output is an array of matching products. The nested, unnamed conditions reduce readability, making maintenance and error understanding more challenging.\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/code-quality/en/code/examples/condition-name.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = products.filter((product) =>\n  product.categories.some(\n    (category) =>\n      category.id === targetCategory.id &&\n      product.prices.some(\n        (price) => price >= minPrice && price <= maxPrice\n      )\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Login Status Check and Redirect in React - TypeScript\nDESCRIPTION: This snippet implements a LoginStartPage React component in TypeScript that checks if a user is logged in using the useCheckLogin hook. If the user is authenticated (status is \"LOGGED_IN\"), the component redirects to the '/home' page. The code exposes authentication logic directly within the component, and additional login UI elements are represented as placeholders. Dependencies include the useCheckLogin hook and standard React. The primary parameter is the onChecked callback, which receives a status string.\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/code-quality/en/code/examples/login-start-page.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nfunction LoginStartPage() {\n  useCheckLogin({\n    onChecked: (status) => {\n      if (status === \"LOGGED_IN\") {\n        location.href = \"/home\";\n      }\n    }\n  });\n\n  /* ... login related logic ... */\n\n  return <>{/* ... login related components ... */}</>;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Bundled Output After Tree-shaking - JavaScript\nDESCRIPTION: Demonstrates the final output of a bundler, having eliminated unused functions (tree-shaking, e.g., removing 'subtract'). Contains only the relevant 'add' function and usage. No ES module imports remain; suitable for direct browser execution. Expects function parameters like the original utility and logs the result.\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/bundling/overview.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// bundle.js (번들링 결과)\\nexport function add(a, b) {\\n  return a + b;\\n}\\n\\nconsole.log(add(1, 2));\n```\n\n----------------------------------------\n\nTITLE: Inline Role-Based Permissions Object in React Component - TypeScript/TSX\nDESCRIPTION: Manages permission logic by declaring a role-permission mapping object directly within a React component. The `Page` component retrieves policy flags for the current user role from this object and renders 'Invite' and 'View' buttons accordingly. Dependencies: `useUser` and a `Button` component. Inputs include `user.role`, used to index into the permissions object. Outputs are buttons with dynamically set enabled/disabled states based on the retrieved policy. Limits context switching but may not scale well if permissions grow complex. No external configuration required; configuration is inlined for quick readability.\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/code-quality/en/code/examples/user-policy.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Page() {\n  const user = useUser();\n  const policy = {\n    admin: { canInvite: true, canView: true },\n    viewer: { canInvite: false, canView: true }\n  }[user.role];\n\n  return (\n    <div>\n      <Button disabled={!policy.canInvite}>Invite</Button>\n      <Button disabled={!policy.canView}>View</Button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: React JSX Transpiled to JavaScript - JavaScript\nDESCRIPTION: Shows the result of transpiling a React component and render call from JSX to pure JavaScript using React.createElement. Makes the code browser-compatible without any JSX syntax. Inputs and outputs match the original, but now the code is executable after standard JavaScript import of 'React' and 'ReactDOM'.\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/bundling/overview.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\\n  // JSX 문법이 일반 JavaScript로 변환되었어요\\n  return React.createElement(\\\"h1\\\", null, \\\"Hello, world!\\\");\\n}\\n\\nconst domNode = document.getElementById('root');\\nReactDOM.createRoot(domNode).render(\\n  // JSX 문법이 일반 JavaScript로 변환되었어요\\n   React.createElement(App)\\n);\n```\n\n----------------------------------------\n\nTITLE: Transpiled Bundle Output from TypeScript Source - JavaScript\nDESCRIPTION: Presents the JavaScript output after transpiling TypeScript code, with type annotations removed, ready for browser execution. Functionality matches the original TypeScript's addition, and the result is logged. Expects numeric arguments; output is their sum, logged to the console.\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/bundling/overview.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// bundle.js (번들링 결과)\\nfunction add(a, b) {\\n  return a + b;\\n}\\n\\nconsole.log(add(1, 2));\n```\n\n----------------------------------------\n\nTITLE: Consuming HTTP Service with Overlapping Names (TypeScript)\nDESCRIPTION: Demonstrates usage of the custom 'http' service from 'http.ts'. Calls 'http.get' to fetch a user, abstracting away implementation details such as authentication logic. Relies on the interface provided by the wrapped object. Dependencies: the 'http' instance with a 'get' method. Input: none (uses preset endpoint); Output: promise of HTTP GET result. Limitation: function masking can be confusing for maintainers.\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/code-quality/en/code/examples/http.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Code that imports http defined in http.ts\nimport { http } from \"./http\";\n\nexport async function fetchUser() {\n  return http.get(\"...\");\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Utilities and Logging Result - JavaScript\nDESCRIPTION: Imports the 'add' function from the index module and uses it to compute the sum of 1 and 2, logging the result to the console. Assumes correct resolution of import paths and functioning utility modules. Input is hard-coded; output is the console log. No further dependency except standard ES modules.\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/bundling/overview.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// index.js\\nimport { add } from './utils/index.js';\\n\\nconsole.log(add(1, 2));\n```\n\n----------------------------------------\n\nTITLE: Exporting Asset Path as a String (TypeScript)\nDESCRIPTION: This TypeScript snippet shows the module output when importing a static asset like an image using Webpack Asset Modules. The module exports the resolved path to the bundled asset as a default string. Dependencies are determined by the Webpack asset/resource configuration. This export is typically used as a src value in HTML or JSX elements. No parameters are involved, and the output is always the asset path string.\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/bundling/tutorial/image-and-font.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default `{로고 이미지가 있는 위치}`;\n```\n\n----------------------------------------\n\nTITLE: Example Cross-Domain Import in TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates an import statement that crosses domain boundaries (importing 'useFoo' from 'Domain2' into 'Domain1'). Within a domain-based structure, such imports are easier to identify as potentially problematic, highlighting dependencies that might violate the intended architecture.\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/code-quality/en/code/examples/code-directory.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useFoo } from '../../../Domain2/hooks/useFoo'\n```\n\n----------------------------------------\n\nTITLE: Assigning Status Using Nested Ternary Operators in TypeScript\nDESCRIPTION: This snippet assigns a string value (\"BOTH\", \"A\", \"B\", or \"NONE\") to the variable 'status' using a series of nested ternary operators based on the boolean values of 'ACondition' and 'BCondition'. No external dependencies are required. The input variables 'ACondition' and 'BCondition' must be booleans, and the output is the corresponding status string. While concise, the use of nested ternaries compromises code readability and makes logical conditions harder to track.\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/code-quality/en/code/examples/ternary-operator.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst status =\n  (ACondition && BCondition)\n    ? \"BOTH\"\n    : (ACondition || BCondition)\n    ? (ACondition\n        ? \"A\"\n        : \"B\")\n    : \"NONE\";\n```\n\n----------------------------------------\n\nTITLE: Addition Utility with Type Annotations - TypeScript\nDESCRIPTION: Defines an 'add' function in TypeScript using explicit type annotations for parameters and return type. Illustrates TypeScript syntax not directly supported by browsers. Requires the TypeScript compiler for transpilation to JavaScript. Inputs: two numbers; output: their sum. No external dependencies.\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/bundling/overview.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// utils/add.ts\\n// 여기의 `:number` 같은 타입 표시가 있으면 브라우저가 실행할 수 없어요\\nfunction add(a: number, b: number): number {\\n  return a + b;\\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Subtraction Utility with Implementation Error - JavaScript\nDESCRIPTION: Defines and exports a 'subtract' function in a utility file using ES modules, but erroneously implements addition rather than subtraction. This demonstrates a typical modular structure in JavaScript projects. No dependencies. Takes two numeric parameters as inputs and returns an incorrect sum instead of the difference.\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/bundling/overview.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// utils/subtract.js\\nexport function subtract(a, b) {\\n  return a + b;\\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Webpack Dev Server using Yarn (Bash)\nDESCRIPTION: This command installs the `webpack-dev-server` package and its associated TypeScript type definitions (`@types/webpack-dev-server`) as development dependencies using the Yarn package manager. This step is required before configuring and running the Webpack Dev Server.\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/bundling/reference/dev/dev-server.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn install -D webpack-dev-server @types/webpack-dev-server\n```\n\n----------------------------------------\n\nTITLE: Styling a Centered 'Coming Soon' Message with CSS\nDESCRIPTION: Applies styles to center the 'coming soon' message vertically and horizontally, adjusts text size and color, and provides spacing and alignment for contained elements. No dependencies are required other than standard CSS support from the browser. The color uses a CSS variable for text coloring and requires the variable to be set in a parent scope.\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/code-quality/en/code/coming-soon.md#_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.coming-soon {\\n  display: flex;\\n  flex-direction: column;\\n  align-items: center;\\n  justify-content: center;\\n  min-height: 60vh;\\n  text-align: center;\\n  color: var(--vp-c-text-2);\\n}\\n\\n.coming-soon h2 {\\n  font-size: 2rem;\\n  margin-bottom: 1rem;\\n  border: none;\\n}\\n\\n.coming-soon p {\\n  font-size: 1.2rem;\\n}\n```\n\n----------------------------------------\n\nTITLE: Styling the Coming Soon Placeholder with CSS\nDESCRIPTION: This CSS rule targets elements with the class `coming-soon`. It uses flexbox (`display: flex`, `flex-direction: column`, `align-items: center`, `justify-content: center`) to center the content vertically and horizontally. It also sets a minimum height, text alignment, text color using a variable, font sizes for the heading and paragraph, and removes the default border from the `h2` element within the container.\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/code-quality/ja/code/coming-soon.md#_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n<style>\n.coming-soon {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  min-height: 60vh;\n  text-align: center;\n  color: var(--vp-c-text-2);\n}\n\n.coming-soon h2 {\n  font-size: 2rem;\n  margin-bottom: 1rem;\n  border: none;\n}\n\n.coming-soon p {\n  font-size: 1.2rem;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Styling 'Coming Soon' Placeholder using CSS\nDESCRIPTION: This CSS snippet styles the HTML elements with the class `coming-soon`. It uses Flexbox (`display: flex`) to center the content both vertically and horizontally within its container. It also sets a minimum height, text alignment, text color (using a CSS variable), font sizes for the heading and paragraph, and removes the default border from the `h2` element.\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/code-quality/zh-hans/code/coming-soon.md#_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.coming-soon {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  min-height: 60vh;\n  text-align: center;\n  color: var(--vp-c-text-2);\n}\n\n.coming-soon h2 {\n  font-size: 2rem;\n  margin-bottom: 1rem;\n  border: none;\n}\n\n.coming-soon p {\n  font-size: 1.2rem;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Coming Soon Page Structure with HTML\nDESCRIPTION: This HTML snippet creates a container (`div`) with the class `coming-soon`. Inside, it includes a heading (`h2`) displaying \"✨ Coming Soon\" and a paragraph (`p`) with the message \"Stay tuned! We're working on something awesome for you.\" This structure is intended to be styled by the associated CSS.\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/code-quality/ja/code/coming-soon.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"coming-soon\">\n  <h2>✨ Coming Soon</h2>\n  <p>Stay tuned! We're working on something awesome for you.</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining 'Coming Soon' Placeholder Structure using HTML\nDESCRIPTION: This HTML snippet creates the structure for a 'Coming Soon' message. It uses a `div` element with the class `coming-soon` to contain a heading (`h2`) and a paragraph (`p`). This structure is intended to be styled by accompanying CSS rules.\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/code-quality/zh-hans/code/coming-soon.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"coming-soon\">\n  <h2>✨ Coming Soon</h2>\n  <p>Stay tuned! We're working on something awesome for you.</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Displaying a 'Coming Soon' Placeholder in HTML\nDESCRIPTION: Renders a notice on the page to inform visitors that content is forthcoming. Utilizes a <div> containing a heading and paragraph to provide a visually distinct 'coming soon' message. This snippet relies on CSS for styling but contains only the markup structure.\nSOURCE: https://github.com/toss/frontend-fundamentals/blob/main/fundamentals/code-quality/en/code/coming-soon.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\\\"coming-soon\\\">\\n  <h2>✨ Coming Soon</h2>\\n  <p>Stay tuned! We\\'re working on something awesome for you.</p>\\n</div>\n```"
  }
]