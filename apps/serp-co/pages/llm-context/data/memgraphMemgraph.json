[
  {
    "owner": "memgraph",
    "repo": "memgraph",
    "content": "TITLE: Creating a Vertex in Memgraph (Cypher)\nDESCRIPTION: This Cypher query creates a new vertex in the Memgraph database with the label 'Vertex'. It then returns the created vertex. 'Vertex' and 'Node' are often used interchangeably in graph databases.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tools/tests/client/input/multiple_queries_per_line.txt#_snippet_1\n\nLANGUAGE: Cypher\nCODE:\n```\nCREATE (n:Vertex) RETURN n;\n```\n\n----------------------------------------\n\nTITLE: Create Node, Edge, Vertex in Memgraph (Cypher)\nDESCRIPTION: This query creates a node with label 'Node', an edge with label 'Edge', and a vertex with label 'Vertex'.  It then returns the created node, edge, and vertex. No specific dependencies are required, as this is a core Cypher feature within Memgraph.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tools/tests/client/input/multiple_columns.txt#_snippet_0\n\nLANGUAGE: Cypher\nCODE:\n```\nCREATE (n:Node)-[e:Edge]->(m:Vertex) RETURN n,e,m;\n```\n\n----------------------------------------\n\nTITLE: Running LDBC Benchmark (Memgraph/Neo4j)\nDESCRIPTION: This snippet shows how to run the LDBC benchmark against Memgraph or Neo4j. It involves navigating to the `ldbc` directory, setting up the environment, building the dataset, and running the benchmark with specified parameters like database type (memgraph or neo4j) and index creation.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/public_benchmark/ldbc/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd memgraph/tests/public_benchmark/ldbc\n./setup\n./build_dataset [--scale-factor 1]\n# To run short reads by default, just call:\n./run_benchmark --create-index --run-db memgraph # or neo4j\n# To run update queries pass the properties file for updates and slow down\n# the execution by setting a larger time compression ratio.\n./run_benchmark --create-index --run-db memgraph --test-type updates \\\n                    --time-compression-ratio 1.5\n```\n\n----------------------------------------\n\nTITLE: Creating Constantine Node in Memgraph (Cypher)\nDESCRIPTION: This code snippet demonstrates how to create a node labeled 'Constantine' in a Memgraph database and assign it a 'quote' property. The RETURN statement displays the newly created node.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tools/tests/client/input/multiline_query.txt#_snippet_0\n\nLANGUAGE: Cypher\nCODE:\n```\nCREATE (n:Constantine{quote:\"In hoc signo vinces\"})\nRETURN n;\n```\n\n----------------------------------------\n\nTITLE: Implementing Dataset Generator Method\nDESCRIPTION: This code demonstrates how to implement the `dataset_generator()` method.  This method returns a list of tuples, where each tuple contains a Cypher query string and a dictionary of parameters.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/mgbench/how_to_use_benchgraph.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nqueries = [\n    (\"CREATE (:NodeA {id: 23});\", {}),\n    (\"CREATE (:NodeB {id: $id, foo: $property});\", {\"id\" : 123, \"property\": \"foo\" }),\n    ...\n]\n```\n\n----------------------------------------\n\nTITLE: Creating the C++ API Interface Library\nDESCRIPTION: Defines an interface library `mg-cpp-api` that exposes the public C++ API headers. This library doesn't contain any implementation but is used to manage header files and provide a unified interface.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/query/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(mg-cpp-api INTERFACE)\ntarget_sources(mg-cpp-api\n    INTERFACE\n    FILE_SET HEADERS\n    BASE_DIRS ${CMAKE_SOURCE_DIR}/include\n    FILES\n    ${CMAKE_SOURCE_DIR}/include/mgp.hpp\n    ${CMAKE_SOURCE_DIR}/include/_mgp.hpp\n    ${CMAKE_SOURCE_DIR}/include/mg_exceptions.hpp\n    ${CMAKE_SOURCE_DIR}/include/mg_procedure.h\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Node with Escaped Double Quotes\nDESCRIPTION: This Cypher query creates a node with the label 'Ciceron' and a property 'quote' whose value is a double-quoted string containing escaped double quotes. It returns the created node 'n'.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tools/tests/client/input/quote.txt#_snippet_4\n\nLANGUAGE: Cypher\nCODE:\n```\nCREATE (n:Ciceron{quote:\"o tempora \\\"o mores\\\"\"}) RETURN n;\n```\n\n----------------------------------------\n\nTITLE: Match Nodes by Label Cypher\nDESCRIPTION: This snippet demonstrates how to match nodes with a specific label (Plinius) in a Memgraph database. The MATCH (n:Plinius) clause selects all nodes with the 'Plinius' label, and RETURN n; returns them.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tools/tests/client/input/unfinished_query.txt#_snippet_4\n\nLANGUAGE: Cypher\nCODE:\n```\nMATCH (n:Plinius)\nRETURN\nn;\n```\n\n----------------------------------------\n\nTITLE: Set Python Version and Path (CMake)\nDESCRIPTION: This snippet sets cache variables for specifying the exact Python version and path used by query modules. These variables can be set by the user to configure the Python environment for query module compilation.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/CMakeLists.txt#_snippet_42\n\nLANGUAGE: CMake\nCODE:\n```\nset(MG_PYTHON_VERSION \"\" CACHE STRING \"Specify the exact Python version used by the query modules\")\nset(MG_PYTHON_PATH \"\" CACHE STRING \"Specify the exact Python path used by the query modules\")\n```\n\n----------------------------------------\n\nTITLE: Set Debug Compiler Flags Based on Debugger (CMake)\nDESCRIPTION: This snippet sets the compiler flags for debug builds based on the preferred debugger (gdb or lldb). It configures the appropriate debug information format (-ggdb or -glldb) based on the compiler and debugger combination. If the combination is not supported, it falls back to the default -g flag.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/CMakeLists.txt#_snippet_27\n\nLANGUAGE: CMake\nCODE:\n```\nset(PREFERRED_DEBUGGER \"gdb\" CACHE STRING\n    \"Tunes the debug output for your preferred debugger (gdb or lldb).\")\nif (\"${PREFERRED_DEBUGGER}\" STREQUAL \"gdb\" AND\n    \"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"Clang|GNU\")\n    set(CMAKE_CXX_FLAGS_DEBUG \"-ggdb\")\nelif (\"${PREFERRED_DEBUGGER}\" STREQUAL \"lldb\" AND\n        \"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"Clang\")\n    set(CMAKE_CXX_FLAGS_DEBUG \"-glldb\")\nelse()\n    message(WARNING \"Unable to tune for PREFERRED_DEBUGGER: \"\n            \"'${PREFERRED_DEBUGGER}' with compiler: '${CMAKE_CXX_COMPILER_ID}'\")\n    set(CMAKE_CXX_FLAGS_DEBUG \"-g\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Matching Caesar Nodes (Cypher)\nDESCRIPTION: This code snippet demonstrates how to retrieve all nodes labeled 'Caesar' from the Memgraph database.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tools/tests/client/input/multiline_query.txt#_snippet_5\n\nLANGUAGE: Cypher\nCODE:\n```\nMATCH (n:Caesar)\nRETURN n;\n```\n\n----------------------------------------\n\nTITLE: Creating Caesar Node in Memgraph (Cypher)\nDESCRIPTION: This snippet creates a node labeled 'Caesar' with a 'quote' property in Memgraph. The RETURN statement outputs the created node.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tools/tests/client/input/multiline_query.txt#_snippet_4\n\nLANGUAGE: Cypher\nCODE:\n```\nCREATE (n:Caesar{quote:\"Alea iacta\nest\"}) RETURN n;\n```\n\n----------------------------------------\n\nTITLE: Creating Node with Label Erdody in Cypher\nDESCRIPTION: This Cypher query creates a node with the label 'Erdody' and a property 'quote' set to 'Regnum regno non praescribit leges'. The query then returns the created node.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tools/tests/client/input/multiline_query_with_comments.txt#_snippet_2\n\nLANGUAGE: Cypher\nCODE:\n```\nCREATE (n:Erdody{quote:\n\"Regnum regno non praescribit leges\"})\nRETURN\nn;\n```\n\n----------------------------------------\n\nTITLE: Running Benchmarks Command Memgraph\nDESCRIPTION: This code snippet shows the command used to run benchmarks specifically on Memgraph. It includes specifying the vendor, workload, and output file, along with disabling authorization.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/mgbench/how_to_use_benchgraph.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\npython3 benchmark.py vendor-docker --vendor-name memgraph-docker benchmarks demo/*/*/* --export-results results.json --no-authorization\n```\n\n----------------------------------------\n\nTITLE: Matching a Vertex in Memgraph (Cypher)\nDESCRIPTION: This Cypher query finds all vertices in the Memgraph database that have the label 'Vertex'. It then returns the matched vertices. The MATCH statement is essential for querying data in the graph database.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tools/tests/client/input/multiple_queries_per_line.txt#_snippet_2\n\nLANGUAGE: Cypher\nCODE:\n```\nMATCH (n:Vertex) RETURN n;\n```\n\n----------------------------------------\n\nTITLE: CCache Setup\nDESCRIPTION: This snippet finds and enables ccache if available and the USE_CCACHE option is set to ON. It accelerates builds by caching compiler outputs. If ccache is not found or USE_CCACHE is OFF, it displays a message indicating that ccache is not being used.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nfind_program(CCACHE_FOUND ccache)\noption(USE_CCACHE \"ccache:\" ON)\nif(CCACHE_FOUND AND USE_CCACHE)\n  set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ccache)\n  set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ccache)\n  message(STATUS \"CCache: Used\")\nelse ()\n  message(STATUS \"CCache: Not used\")\nendif(CCACHE_FOUND AND USE_CCACHE)\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring mg-csv Library CMake\nDESCRIPTION: This snippet defines a static library named `mg-csv` and an alias `mg::csv`. It then specifies the source files, include directories, and dependencies for the library.  Boost iostreams is found and linked.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/csv/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(mg-csv STATIC)\nadd_library(mg::csv ALIAS mg-csv)\ntarget_sources(mg-csv\n        PUBLIC\n        include/csv/parsing.hpp\n\n        PRIVATE\n        parsing.cpp\n        )\ntarget_include_directories(mg-csv PUBLIC include)\n\nfind_package(Boost REQUIRED CONFIG COMPONENTS iostreams)\ntarget_link_libraries(mg-csv\n        PUBLIC mg-utils\n        PRIVATE lib::ctre mg-requests Boost::iostreams\n        )\n\nadd_subdirectory(fuzz)\n```\n\n----------------------------------------\n\nTITLE: Implementing Index Generator Method\nDESCRIPTION: This code shows how to implement the `indexes_generator()` method. It's structured the same way as the `dataset_generator()` method, returning a list of tuples containing index creation queries and parameters.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/mgbench/how_to_use_benchgraph.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef indexes_generator(self):\n    indexes = [\n                (\"CREATE INDEX ON :NodeA(id);\", {}),\n                (\"CREATE INDEX ON :NodeB(id);\", {}),\n            ]\n    return indexes\n```\n\n----------------------------------------\n\nTITLE: Setting C++ Standard\nDESCRIPTION: This snippet sets the C++ standard to C++20 and requires its usage, ensuring that the project uses a modern C++ standard.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/CMakeLists.txt#_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_CXX_STANDARD 20)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n```\n\n----------------------------------------\n\nTITLE: Matching All Nodes (Cypher)\nDESCRIPTION: This snippet demonstrates how to match and return all nodes within the Memgraph database.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tools/tests/client/input/multiline_query.txt#_snippet_1\n\nLANGUAGE: Cypher\nCODE:\n```\nMATCH\n(n)\nRETURN\nn;\n```\n\n----------------------------------------\n\nTITLE: Match Node in Memgraph (Cypher)\nDESCRIPTION: This query matches nodes with the label 'Node' in the Memgraph database. The 'MATCH' keyword is used to find the nodes, and the 'RETURN' keyword returns the matched nodes.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tools/tests/client/input/query_per_line.txt#_snippet_1\n\nLANGUAGE: Cypher\nCODE:\n```\nMATCH (n:Node) RETURN n;\n```\n\n----------------------------------------\n\nTITLE: Optionally Add Tools and Query Modules Subdirectories (CMake)\nDESCRIPTION: This snippet conditionally adds the `tools` and `query_modules` subdirectories to the build based on the `TOOLS` and `QUERY_MODULES` options, respectively.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/CMakeLists.txt#_snippet_46\n\nLANGUAGE: CMake\nCODE:\n```\nif(TOOLS)\n  add_subdirectory(tools)\nendif()\n\nif(QUERY_MODULES)\n  add_subdirectory(query_modules)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Node with Single-Quoted String\nDESCRIPTION: This Cypher query creates a node with the label 'Ciceron' and a property 'quote' whose value is a single-quoted string. It returns the created node 'n'.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tools/tests/client/input/quote.txt#_snippet_1\n\nLANGUAGE: Cypher\nCODE:\n```\nCREATE (n:Ciceron{quote:'o tempora o mores!'}) RETURN n;\n```\n\n----------------------------------------\n\nTITLE: Creating and Linking the Memgraph Requests Library\nDESCRIPTION: This snippet defines the `mg-requests` library as a static library. It links the library against other Memgraph components (`mg-utils`, `nlohmann_json`), third-party libraries (`ctre`, `spdlog`, `CURL_LIBRARIES`, `fmt`, `gflags`).  It also sets the include directories for CURL.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/requests/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(mg-requests STATIC ${requests_src_files})\ntarget_link_libraries(mg-requests\n        PUBLIC mg-utils nlohmann_json::nlohmann_json\n        PRIVATE lib::ctre spdlog::spdlog ${CURL_LIBRARIES} fmt::fmt gflags)\ntarget_include_directories(mg-requests PRIVATE ${CURL_INCLUDE_DIRS})\n```\n\n----------------------------------------\n\nTITLE: Creating Erdody Node in Memgraph (Cypher)\nDESCRIPTION: This code snippet demonstrates creating a node labeled 'Erdody' with a 'quote' property in Memgraph. The RETURN statement displays the created node.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tools/tests/client/input/multiline_query.txt#_snippet_2\n\nLANGUAGE: Cypher\nCODE:\n```\nCREATE (n:Erdody{quote:\n\"Regnum regno non praescribit leges\"})\nRETURN\nn;\n```\n\n----------------------------------------\n\nTITLE: Creating and Linking I/O Library\nDESCRIPTION: This snippet creates a static library named `mg-io` from the source files defined in `io_src_files`. It also defines an alias `mg::io` for easier referencing.  The `target_link_libraries` command links the library against standard C++ file system library (`stdc++fs`), `Threads`, `fmt` library, and `mg-utils` library.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/io/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(mg-io STATIC ${io_src_files})\nadd_library(mg::io ALIAS mg-io)\ntarget_link_libraries(mg-io stdc++fs Threads::Threads fmt::fmt mg-utils)\n```\n\n----------------------------------------\n\nTITLE: Finding External Packages with CMake\nDESCRIPTION: This snippet uses the `find_package` command to locate required external libraries.  It specifically finds CURL, fmt, and gflags, ensuring they are available for linking during the build process.  The `REQUIRED` keyword ensures that the build will fail if any of these packages are not found.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/requests/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(CURL REQUIRED)\nfind_package(fmt REQUIRED)\nfind_package(gflags REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Library with Build Options CMake\nDESCRIPTION: This function creates a shared library with specified source files and applies various build options. It sets include directories, compile options (Wall), and links static libraries. It also calls `add_post_build_strip_in_release` and installs the source file for example purposes.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/query_modules/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(add_custom_library NAME SRC)\n    set(optional_libs ${ARGN})\n\n    add_library(${NAME} SHARED ${SRC})\n    target_include_directories(${NAME} PRIVATE ${CMAKE_SOURCE_DIR}/include ${CMAKE_SOURCE_DIR}/libs)\n    target_compile_options(${NAME} PRIVATE -Wall)\n    target_link_libraries(${NAME} PRIVATE -static-libgcc -static-libstdc++ ${optional_libs})\n\n    # Apply post-build strip in release mode\n    add_post_build_strip_in_release(${NAME} CMAKE_BUILD_TYPE)\n\n    set_target_properties(${NAME} PROPERTIES\n        PREFIX \"\"\n        OUTPUT_NAME \"${NAME}\"\n    )\n\n    # Also install the source of the example, so user can read it.\n    install(FILES ${SRC} DESTINATION lib/memgraph/query_modules/src)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Matching Erdody Nodes in Cypher\nDESCRIPTION: This Cypher query matches nodes with the label 'Erdody' and returns them. It specifically targets nodes that were previously created with that label.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tools/tests/client/input/multiline_query_with_comments.txt#_snippet_3\n\nLANGUAGE: Cypher\nCODE:\n```\n// comment\nMATCH (n:Erdody) RETURN\nn;\n```\n\n----------------------------------------\n\nTITLE: Defining Benchmark Queries\nDESCRIPTION: This code shows how to define benchmark queries as methods that start with `benchmark__`. These methods should return a tuple containing a Cypher query and a dictionary of parameters.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/mgbench/how_to_use_benchgraph.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef benchmark__test__get_nodes(self):\n    return (\"MATCH (n) RETURN n;\", {})\n\ndef benchmark__test__get_node_by_id(self):\n    return (\"MATCH (n:NodeA{id: $id}) RETURN n;\", {\"id\": random.randint(0, 99)})\n```\n\n----------------------------------------\n\nTITLE: Demo Workload Class Definition\nDESCRIPTION: This code defines a demo workload class that inherits from a base `Workload` class. It includes methods for generating datasets and indexes, and defining benchmark queries. The `NAME` attribute specifies the workload's identifier.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/mgbench/how_to_use_benchgraph.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport random\nfrom workloads.base import Workload\n\nclass Demo(Workload):\n\n    NAME = \"demo\"\n\n    def indexes_generator(self):\n        indexes = [\n                    (\"CREATE INDEX ON :NodeA(id);\", {}),\n                    (\"CREATE INDEX ON :NodeB(id);\", {}),\n                ]\n        return indexes\n\n    def dataset_generator(self):\n\n        queries = []\n        for i in range(0, 100):\n            queries.append((\"CREATE (:NodeA {id: $id});\", {\"id\": i}))\n            queries.append((\"CREATE (:NodeB {id: $id});\", {\"id\": i}))\n        for i in range(0, 300):\n            a = random.randint(0, 99)\n            b = random.randint(0, 99)\n            queries.append(\n                ((\"MATCH(a:NodeA {id: $A_id}),(b:NodeB{id: $B_id}) CREATE (a)-[:EDGE]->(b)\"), {\"A_id\": a, \"B_id\": b})\n            )\n\n        return queries\n\n    def benchmark__test__get_nodes(self):\n        return (\"MATCH (n) RETURN n;\", {})\n\n    def benchmark__test__get_node_by_id(self):\n        return (\"MATCH (n:NodeA{id: $id}) RETURN n;\", {\"id\": random.randint(0, 99)})\n\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies and Run Test Script (Node.js)\nDESCRIPTION: These commands install the necessary Node.js dependencies using `npm install` and then execute the `get-run_id.js` script. This script is responsible for querying Memgraph and extracting the `run_id` from the query metadata.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/telemetry/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install\nnode get-run_id.js\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries in CMake\nDESCRIPTION: This CMake snippet links the `mg-dbms` library against other Memgraph libraries. The `target_link_libraries` command is used to specify the dependencies of the `mg-dbms` target.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/dbms/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(mg-dbms mg-utils mg-storage-v2 mg-query mg-auth mg-replication mg-coordination)\n```\n\n----------------------------------------\n\nTITLE: Listing Python Dependencies\nDESCRIPTION: This snippet lists Python dependencies required by the Memgraph project.\nIt specifies the library name and the required version using the '==' operator for exact version matching.\nThe listed packages are neo4j-driver, matplotlib, and numpy.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/public_benchmark/ldbc/requirements.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nneo4j-driver==1.4.0\nmatplotlib==2.0.2\nnumpy==1.21\n```\n\n----------------------------------------\n\nTITLE: Configure Address Sanitizer (ASAN) (CMake)\nDESCRIPTION: This snippet configures the build to use the Address Sanitizer (ASAN) for memory error detection. It disables jemalloc due to incompatibility with ASAN and adds compiler and linker options to enable ASAN. It also provides information on setting runtime flags for advanced ASAN features.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/CMakeLists.txt#_snippet_38\n\nLANGUAGE: CMake\nCODE:\n```\nif (ASAN)\n  message(WARNING \"Disabling jemalloc as it doesn't work well with ASAN\")\n  set(ENABLE_JEMALLOC OFF)\n  # Enable Address sanitizer and get nicer stack traces in error messages.\n  # NOTE: AddressSanitizer uses llvm-symbolizer binary from the Clang\n  # distribution to symbolize the stack traces (note that ideally the\n  # llvm-symbolizer version must match the version of ASan runtime library).\n  # Just make sure llvm-symbolizer is in PATH before running the binary or\n  # provide it in separate ASAN_SYMBOLIZER_PATH environment variable.\n  add_compile_options(-fsanitize=address -fno-omit-frame-pointer)\n  add_link_options(-fsanitize=address)\n  # To detect Stack-use-after-return bugs set run-time flag:\n  #   ASAN_OPTIONS=detect_stack_use_after_return=1\n  # To check initialization order bugs set run-time flag:\n  #   ASAN_OPTIONS=check_initialization_order=true\n  #     This mode reports an error if initializer for a global variable accesses\n  #     dynamically initialized global from another translation unit, which is\n  #     not yet initialized\n  #   ASAN_OPTIONS=strict_init_order=true\n  #     This mode reports an error if initializer for a global variable accesses\n  #     any dynamically initialized global from another translation unit.\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting source files for license management (CMake)\nDESCRIPTION: This snippet defines the source files used for the Memgraph license management component. It lists the C++ files involved in handling license-related functionalities such as sending and processing license information. These source files will be compiled into a static library.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/license/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(license_src_files\n    license_sender.cpp\n    license.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Memgraph Executable CMake\nDESCRIPTION: This configures the main memgraph executable, setting include directories and linking necessary libraries. `target_link_libraries` links various memgraph libraries and system libraries like `stdc++fs` and `Threads::Threads`. Also sets properties like output name, install rpath and position independent code.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(mg_single_node_v2_sources\n        memgraph.cpp\n)\n\n# memgraph main executable\nadd_executable(memgraph ${mg_single_node_v2_sources})\ntarget_include_directories(memgraph PUBLIC ${CMAKE_SOURCE_DIR}/include)\ntarget_link_libraries(memgraph stdc++fs Threads::Threads\n        mg-telemetry mgcxx_text_search tantivy_text_search mg-communication mg-communication-metrics mg-memory mg-utils mg-license mg-settings mg-glue mg-flags mg::system mg::replication_handler)\n\n# NOTE: `include/mg_procedure.syms` describes a pattern match for symbols which\n# should be dynamically exported, so that `dlopen` can correctly link th\n# symbols in custom procedure module libraries.\ntarget_link_libraries(memgraph \"-Wl,--dynamic-list=${CMAKE_SOURCE_DIR}/include/mg_procedure.syms\")\nset_target_properties(memgraph PROPERTIES\n\n        OUTPUT_NAME \"memgraph\"\n\n        INSTALL_RPATH \"\\$ORIGIN\"\n\n        # Output the executable in main binary dir.\n        RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}\n\n        POSITION_INDEPENDENT_CODE ON\n        )\n```\n\n----------------------------------------\n\nTITLE: Defining Workload Name\nDESCRIPTION: This code defines the `NAME` property of the workload class.  This name is used to identify the workload when running benchmarks.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/mgbench/how_to_use_benchgraph.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nNAME = \"demo\"\n```\n\n----------------------------------------\n\nTITLE: Defining add_macro_benchmark function in CMake\nDESCRIPTION: This CMake function `add_macro_benchmark` automates the process of creating and configuring macro benchmark targets. It extracts the executable name, defines the target name, adds the executable, sets the output name and adds the target to the dependencies.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/macro_benchmark/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(add_macro_benchmark test_cpp)\n  # get exec name (remove extension from the abs path)\n  get_filename_component(exec_name ${test_cpp} NAME_WE)\n  set(target_name ${test_prefix}${exec_name})\n  add_executable(${target_name} ${test_cpp})\n  # OUTPUT_NAME sets the real name of a target when it is built and can be\n  # used to help create two targets of the same name even though CMake\n  # requires unique logical target names\n  set_target_properties(${target_name} PROPERTIES OUTPUT_NAME ${exec_name})\n  add_dependencies(memgraph__macro_benchmark ${target_name})\nendfunction(add_macro_benchmark)\n```\n\n----------------------------------------\n\nTITLE: Creating a Node in Memgraph with Escaped Characters\nDESCRIPTION: This query creates a node with the label 'Node' and a property 'tmp' whose value is a string containing escaped characters. The RETURN statement displays the newly created node. The escaping of characters is important to handle special characters within string literals.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tools/tests/client/input/escaping.txt#_snippet_0\n\nLANGUAGE: Cypher\nCODE:\n```\nCREATE (n:Node{tmp:\"\\\"\\\\;\\\\\"}) RETURN n;\n```\n\n----------------------------------------\n\nTITLE: Linking Dependencies for Query Library\nDESCRIPTION: Links the `mg-query` library with its dependencies, including system libraries (dl), third-party libraries (cppitertools, rangev3, Python3::Python), Memgraph integration libraries (mg-integrations-pulsar, mg-integrations-kafka), and internal Memgraph libraries (mg-storage-v2, mg-license, mg-utils, etc.).\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/query/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(mg-query\n    PUBLIC\n    dl\n    cppitertools\n    rangev3\n    Python3::Python\n    mg-integrations-pulsar\n    mg-integrations-kafka\n    mg-storage-v2\n    mg-license\n    mg-utils\n    mg-kvstore\n    mg-memory\n    mg::csv\n    mg::system\n    mg-flags\n    mg-dbms\n    mg-events\n    PRIVATE\n    mg-module-support\n    mg-cpp-api\n)\n```\n\n----------------------------------------\n\nTITLE: Creating static library for license management (CMake)\nDESCRIPTION: This command creates a static library named `mg-license` from the source files specified in `license_src_files`. A static library is linked into other programs at compile time, making its code a part of the executable.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/license/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(mg-license STATIC ${license_src_files})\n```\n\n----------------------------------------\n\nTITLE: Add External Project Implementation Macro\nDESCRIPTION: Defines a CMake macro `add_external_project_impl` which calls `ExternalProject_Add` with default arguments.  It configures build settings like source directory, compiler options, and install prefix, and also adds dependencies.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/libs/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nmacro(add_external_project_impl name)\n  set(source_dir ${CMAKE_CURRENT_SOURCE_DIR}/${name})\n\n  if(KW_SOURCE_DIR)\n    set(source_dir ${KW_SOURCE_DIR})\n  endif()\n\n  set(build_in_source 0)\n\n  if(KW_BUILD_IN_SOURCE)\n    set(build_in_source ${KW_BUILD_IN_SOURCE})\n  endif()\n\n  if(NOT KW_NO_C_COMPILER)\n    set(KW_CMAKE_ARGS -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER} ${KW_CMAKE_ARGS})\n  endif()\n\n  # Add MG_TOOLCHAIN_ROOT to KW_CMAKE_PREFIX_PATH\n  if(KW_CMAKE_PREFIX_PATH)\n    set(KW_CMAKE_PREFIX_PATH \"${MG_TOOLCHAIN_ROOT}${LIST_SEP}${KW_CMAKE_PREFIX_PATH}\")\n  else ()\n    set(KW_CMAKE_PREFIX_PATH \"${MG_TOOLCHAIN_ROOT}\")\n  endif ()\n\n  ExternalProject_Add(${name}-proj DEPENDS ${KW_DEPENDS}\n      PREFIX ${source_dir} SOURCE_DIR ${source_dir}\n      BUILD_IN_SOURCE ${build_in_source}\n      LIST_SEPARATOR \"${LIST_SEP}\"\n      CONFIGURE_COMMAND ${KW_CONFIGURE_COMMAND}\n      CMAKE_ARGS -DCMAKE_BUILD_TYPE=Release\n      -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}\n      -DCMAKE_INSTALL_PREFIX=${source_dir}\n      $<$<BOOL:KW_CMAKE_PREFIX_PATH>:\n          \"-DCMAKE_PREFIX_PATH=${KW_CMAKE_PREFIX_PATH}\"> ${KW_CMAKE_ARGS}\n      INSTALL_COMMAND ${KW_INSTALL_COMMAND}\n      BUILD_COMMAND ${KW_BUILD_COMMAND}\n      BUILD_BYPRODUCTS ${KW_BUILD_BYPRODUCTS})\nendmacro()\n```\n\n----------------------------------------\n\nTITLE: Comparing Benchmark Results using compare_results.py in Python\nDESCRIPTION: This snippet demonstrates how to use the `compare_results.py` script to compare benchmark results saved in JSON format. It takes two JSON files as input, representing different benchmark runs, and generates an HTML file visualizing the performance differences. The first JSON file is used as the reference point for comparison. Requires `path_to/run_1.json`, `path_to/run_2.json` and `run_1_vs_run_2.html`.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/mgbench/how_to_use_benchgraph.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ncompare_results.py --compare path_to/run_1.json path_to/run_2.json --output run_1_vs_run_2.html --different-vendors\n```\n\n----------------------------------------\n\nTITLE: Adding Specific Custom Libraries CMake\nDESCRIPTION: These lines use the `add_custom_library` function to add several libraries, including `example_c`, `example_cpp`, `schema`, `text_search`, `vector_search`, and `convert`. Each line specifies the library name and corresponding source file(s), along with any optional libraries they depend on.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/query_modules/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_library(example_c example.c)\nadd_custom_library(example_cpp example.cpp)\nadd_custom_library(schema schema.cpp)\nadd_custom_library(text_search text_search_module.cpp fmt::fmt)\nadd_custom_library(vector_search vector_search_module.cpp fmt::fmt)\nadd_custom_library(convert convert.cpp fmt::fmt nlohmann_json::nlohmann_json)\n```\n\n----------------------------------------\n\nTITLE: Define mg-coordination Static Library (CMake)\nDESCRIPTION: This snippet creates a static library named `mg-coordination` and defines an alias `mg::coordination`. The library includes a set of header files under the `include/coordination` directory and a set of source files related to coordinator and data instance functionality.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/coordination/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(mg-coordination STATIC)\nadd_library(mg::coordination ALIAS mg-coordination)\ntarget_sources(mg-coordination\n        PUBLIC\n        include/coordination/constants_log_durability.hpp\n        include/coordination/coordination_observer.hpp\n        include/coordination/coordinator_cluster_state.hpp\n        include/coordination/coordinator_communication_config.hpp\n        include/coordination/coordinator_exceptions.hpp\n        include/coordination/coordinator_instance.hpp\n        include/coordination/coordinator_instance_aux.hpp\n        include/coordination/coordinator_instance_client.hpp\n        include/coordination/coordinator_instance_connector.hpp\n        include/coordination/coordinator_instance_context.hpp\n        include/coordination/coordinator_instance_management_server.hpp\n        include/coordination/coordinator_instance_management_server_handlers.hpp\n        include/coordination/coordinator_log_store.hpp\n        include/coordination/coordinator_rpc.hpp\n        include/coordination/coordinator_slk.hpp\n        include/coordination/coordinator_state.hpp\n        include/coordination/coordinator_state_machine.hpp\n        include/coordination/coordinator_state_manager.hpp\n        include/coordination/data_instance_context.hpp\n        include/coordination/data_instance_management_server.hpp\n        include/coordination/data_instance_management_server_handlers.hpp\n        include/coordination/instance_state.hpp\n        include/coordination/instance_status.hpp\n        include/coordination/logger.hpp\n        include/coordination/logger_wrapper.hpp\n        include/coordination/raft_state.hpp\n        include/coordination/replication_instance_client.hpp\n        include/coordination/replication_instance_connector.hpp\n        include/coordination/utils.hpp\n\n\n        PRIVATE\n        coordination_observer.cpp\n        coordinator_cluster_state.cpp\n        coordinator_communication_config.cpp\n        coordinator_instance.cpp\n        coordinator_instance_aux.cpp\n        coordinator_instance_client.cpp\n        coordinator_instance_connector.cpp\n        coordinator_instance_context.cpp\n        coordinator_instance_management_server.cpp\n        coordinator_instance_management_server_handlers.cpp\n        coordinator_log_store.cpp\n        coordinator_rpc.cpp\n        coordinator_state.cpp\n        coordinator_state_machine.cpp\n        coordinator_state_manager.cpp\n        data_instance_context.cpp\n        data_instance_management_server.cpp\n        data_instance_management_server_handlers.cpp\n        logger.cpp\n        logger_wrapper.cpp\n        raft_state.cpp\n        replication_instance_client.cpp\n        replication_instance_connector.cpp\n        utils.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Add Query Module CMake\nDESCRIPTION: This snippet adds a query module named `community_detection_online` using the `add_query_module` command. It specifies the module name, version, and the source files defined in the previous step.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/query_modules/community_detection_module/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_query_module(community_detection_online 1 \"${community_detection_online_module_src}\")\n```\n\n----------------------------------------\n\nTITLE: Create Node in Memgraph (Cypher)\nDESCRIPTION: This query creates a node with the label 'Node' in the Memgraph database. The 'CREATE' keyword is used to create the node, and the 'RETURN' keyword returns the created node.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tools/tests/client/input/query_per_line.txt#_snippet_0\n\nLANGUAGE: Cypher\nCODE:\n```\nCREATE (n:Node) RETURN n;\n```\n\n----------------------------------------\n\nTITLE: Conditional Unit Test Definition for Enterprise Version\nDESCRIPTION: This snippet demonstrates how to conditionally define unit tests based on whether the `MG_ENTERPRISE` flag is set. If `MG_ENTERPRISE` is true, `auth_models.cpp` is used; otherwise, `auth_models_comm.cpp` is used. This allows different test implementations for enterprise and community versions. Libraries are then linked to the target using `target_link_libraries`.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/unit/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(MG_ENTERPRISE)\nadd_unit_test(auth_models.cpp)\ntarget_link_libraries(${test_prefix}auth_models mg-glue mg-auth)\nelse()\nadd_unit_test(auth_models_comm.cpp)\ntarget_link_libraries(${test_prefix}auth_models_comm mg-glue mg-auth)\nendif()\n```\n\n----------------------------------------\n\nTITLE: CSV Parsing with Explicit Settings in Python\nDESCRIPTION: This snippet expands on the basic CSV parsing example, explicitly defining all default parameters used by the Python CSV parser. It specifies the delimiter, doublequote behavior, escape character, line terminator, quote character, and skip initial space setting.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/docs/csv-import-tool/README.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport csv\nfor row in csv.reader(stream, delimiter=',', doublequote=True,\n                      escapechar=None, lineterminator='\\r\\n',\n                      quotechar='\"', skipinitialspace=False,\n                      strict=True):\n    # process 'row'\n```\n\n----------------------------------------\n\nTITLE: Adding Memgraph Subdirectories CMake\nDESCRIPTION: This section adds subdirectories containing memgraph libraries, specifying the order of dependency resolution. Each subdirectory represents a functional component within the Memgraph project. This structure helps CMake manage dependencies between different parts of the project.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(csv)\nadd_subdirectory(utils)\nadd_subdirectory(requests)\nadd_subdirectory(io)\nadd_subdirectory(kvstore)\nadd_subdirectory(telemetry)\nadd_subdirectory(communication)\nadd_subdirectory(memory)\nadd_subdirectory(storage/v2)\nadd_subdirectory(integrations)\nadd_subdirectory(query)\nadd_subdirectory(glue)\nadd_subdirectory(slk)\nadd_subdirectory(rpc)\nadd_subdirectory(license)\nadd_subdirectory(auth)\nadd_subdirectory(audit)\nadd_subdirectory(dbms)\nadd_subdirectory(flags)\nadd_subdirectory(distributed)\nadd_subdirectory(replication)\nadd_subdirectory(replication_handler)\nadd_subdirectory(coordination)\nadd_subdirectory(replication_coordination_glue)\nadd_subdirectory(system)\n```\n\n----------------------------------------\n\nTITLE: Add Compile Definitions (CMake)\nDESCRIPTION: This snippet adds compile definitions based on the build type. In Debug mode, it also defines _GLIBCXX_ASSERTIONS for stricter standard library checks.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/CMakeLists.txt#_snippet_29\n\nLANGUAGE: CMake\nCODE:\n```\nadd_compile_definitions(\n    CMAKE_BUILD_TYPE_NAME=\"${CMAKE_BUILD_TYPE}\"\n    # In Debug also check we have correct usage of libstdc++\n    $<$<CONFIG:Debug>:_GLIBCXX_ASSERTIONS>\n)\n```\n\n----------------------------------------\n\nTITLE: Creating and Aliasing the mg-kvstore Library\nDESCRIPTION: This snippet defines a static library named `mg-kvstore` using the `add_library` command, specifying `kvstore.cpp` as the source file. It also creates an alias `mg::kvstore` for the `mg-kvstore` target, allowing for more convenient referencing of the library in other parts of the project.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/kvstore/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(mg-kvstore STATIC kvstore.cpp)\nadd_library(mg::kvstore ALIAS mg-kvstore)\n```\n\n----------------------------------------\n\nTITLE: Find Threads Package (CMake)\nDESCRIPTION: This snippet uses the `find_package` command to locate the Threads package, which is required for multithreading support. The `REQUIRED` keyword ensures that the build will fail if the Threads package is not found.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/CMakeLists.txt#_snippet_31\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Threads REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring mg-utils Library (CMake)\nDESCRIPTION: Creates a static library named `mg-utils` and configures its source files, dependencies, and linking options. It uses `target_sources` to specify both private source files (cpp) and public header files (hpp). It links against Boost, fmt, spdlog, nlohmann_json, ZLIB, and croncpp.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/utils/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(mg-utils STATIC)\nadd_library(mg::utils ALIAS mg-utils)\n\ntarget_sources(mg-utils\n    PRIVATE\n    async_timer.cpp\n    base64.cpp\n    file.cpp\n    file_locker.cpp\n    memory.cpp\n    memory_tracker.cpp\n    readable_size.cpp\n    signals.cpp\n    sysinfo/memory.cpp\n    temporal.cpp\n    thread.cpp\n    thread_pool.cpp\n    tsc.cpp\n    system_info.cpp\n    uuid.cpp\n    build_info.cpp\n    query_memory_tracker.cpp\n    exponential_backoff.cpp\n    compressor.cpp\n    logging.cpp\n    string.cpp\n    scheduler.cpp\n    skip_list.cpp\n\n    PUBLIC\n    FILE_SET HEADERS\n    BASE_DIRS ../../\n    FILES\n    allocator/page_aligned.hpp\n    allocator/page_slab_memory_resource.hpp\n    exponential_backoff.hpp\n    memory_layout.hpp\n    small_vector.hpp\n    static_vector.hpp\n    logging.hpp\n    string.hpp\n    scheduler.hpp\n)\n\nfind_package(Boost REQUIRED CONFIG)\nfind_package(fmt REQUIRED)\nfind_package(gflags REQUIRED)\nfind_package(Threads REQUIRED)\nfind_package(ZLIB REQUIRED)\n\ntarget_link_libraries(mg-utils PUBLIC Boost::headers fmt::fmt spdlog::spdlog nlohmann_json::nlohmann_json ZLIB::ZLIB croncpp::croncpp)\ntarget_link_libraries(mg-utils PRIVATE librdtsc stdc++fs Threads::Threads gflags uuid rt mg-flags)\n```\n\n----------------------------------------\n\nTITLE: CPack RPM Package Configuration - CMake\nDESCRIPTION: This snippet configures CPack settings specific to RPM packages, including the package URL, version, file name, excluded files, pre-install requirements, spec file, license, and description. It disables automatic dependency detection to avoid issues with libstdc++ on certain systems. It also sets dependencies on openssl, curl, python3 and logrotate.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/release/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(CPACK_RPM_PACKAGE_URL https://memgraph.com)\nset(CPACK_RPM_PACKAGE_VERSION \"${MEMGRAPH_VERSION_RPM}\")\nset(CPACK_RPM_FILE_NAME \"memgraph-${MEMGRAPH_VERSION_RPM}-1.${MG_ARCH_EXTENSION_RPM}.rpm\")\nset(CPACK_RPM_EXCLUDE_FROM_AUTO_FILELIST_ADDITION\n    /var /var/lib /var/log /etc/logrotate.d\n    /lib /lib/systemd /lib/systemd/system /lib/systemd/system/memgraph.service)\nset(CPACK_RPM_PACKAGE_REQUIRES_PRE \"shadow-utils\")\nset(CPACK_RPM_USER_BINARY_SPECFILE \"${CMAKE_CURRENT_SOURCE_DIR}/rpm/memgraph.spec.in\")\nset(CPACK_RPM_PACKAGE_LICENSE \"Memgraph License\")\n# CPACK deduces dependency to libstdc++ which:\n#   * can't be easily installed on Centos 7 (the one from the toolchain,\n#     only required to avoid printing issue within query modules)\n#   * it causes issues with glibcxx 2.4\n#     `if(DISTRO STREQUAL \"Amazon Linux\" AND DISTRO_VERSION STREQUAL \"2\")`\nset(CPACK_RPM_PACKAGE_AUTOREQ \" no\")\n\n# Description formatting is important, no line must be greater than 80 characters.\nset(CPACK_RPM_PACKAGE_DESCRIPTION \"Contains Memgraph, the graph database.\nIt aims to deliver developers the speed, simplicity and scale required to build\nthe next generation of applications driver by real-time connected data.\")\n\n# Add `openssl` package to dependencies list. Used to generate SSL certificates.\n# We also depend on `python3` because we embed it in Memgraph.\nset(CPACK_RPM_PACKAGE_REQUIRES \"openssl >= 1.0.0, curl >= 7.29.0, python3 >= 3.5.0, logrotate\")\n```\n\n----------------------------------------\n\nTITLE: Creating and Linking Pulsar Integration Library\nDESCRIPTION: This snippet creates a static library named `mg-integrations-pulsar` from the source files defined in `integrations_pulsar_src_files`.  It then links this library with other required libraries such as `mg-utils`, `pulsar`, `Threads`, and `CURL`, using the `target_link_libraries` command. `CURL_LIBRARIES` provides the paths to the CURL library files.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/integrations/pulsar/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(mg-integrations-pulsar STATIC ${integrations_pulsar_src_files})\ntarget_link_libraries(mg-integrations-pulsar mg-utils pulsar Threads::Threads ${CURL_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Link Libraries to mg-replication_handler CMake\nDESCRIPTION: This snippet links the `mg-replication_handler` library against other Memgraph libraries, including `mg-auth`, `mg-dbms`, and `mg-replication`. These linked libraries provide necessary functionalities for authentication, database management, and replication, respectively.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/replication_handler/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(mg-replication_handler\n        PUBLIC mg-auth mg-dbms mg-replication)\n```\n\n----------------------------------------\n\nTITLE: Generating Antlr OpenCypher Parser\nDESCRIPTION: Configures and executes a custom command to generate the OpenCypher parser using ANTLR. This involves defining the source and destination directories for the grammar files and generated code, setting the ANTLR generator path, and invoking the ANTLR tool.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/query/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n# Generate Antlr openCypher parser\nset(opencypher_frontend ${CMAKE_CURRENT_SOURCE_DIR}/frontend/opencypher)\nset(opencypher_generated ${opencypher_frontend}/generated)\nset(opencypher_lexer_grammar ${opencypher_frontend}/grammar/MemgraphCypherLexer.g4)\nset(opencypher_parser_grammar ${opencypher_frontend}/grammar/MemgraphCypher.g4)\n\nset(antlr_opencypher_generated_src\n    ${opencypher_generated}/MemgraphCypherLexer.cpp\n    ${opencypher_generated}/MemgraphCypher.cpp\n    ${opencypher_generated}/MemgraphCypherBaseVisitor.cpp\n    ${opencypher_generated}/MemgraphCypherVisitor.cpp\n)\nset(antlr_opencypher_generated_include\n    ${opencypher_generated}/MemgraphCypherLexer.h\n    ${opencypher_generated}/MemgraphCypher.h\n    ${opencypher_generated}/MemgraphCypherBaseVisitor.h\n    ${opencypher_generated}/MemgraphCypherVisitor.h\n)\n\nset(ANTLR_GENERATOR_PATH \"${CMAKE_SOURCE_DIR}/libs/antlr-4.13.2-complete.jar\")\nif(DEFINED ENV{MG_TOOLCHAIN_VERSION})\n  if($ENV{MG_TOOLCHAIN_VERSION} GREATER_EQUAL 6)\n      set(ANTLR_GENERATOR_PATH \"${MG_TOOLCHAIN_ROOT}/bin/antlr-4.13.2-complete.jar\")\n  endif()\nendif()\nadd_custom_command(\n    OUTPUT ${antlr_opencypher_generated_src} ${antlr_opencypher_generated_include}\n    COMMAND ${CMAKE_COMMAND} -E make_directory ${opencypher_generated}\n    COMMAND\n    java -jar ${ANTLR_GENERATOR_PATH}\n    -Dlanguage=Cpp -visitor -package antlropencypher\n    -o ${opencypher_generated}\n    ${opencypher_lexer_grammar} ${opencypher_parser_grammar}\n    WORKING_DIRECTORY \"${CMAKE_BINARY_DIR}\"\n    DEPENDS\n    ${opencypher_lexer_grammar} ${opencypher_parser_grammar}\n    ${opencypher_frontend}/grammar/CypherLexer.g4\n    ${opencypher_frontend}/grammar/Cypher.g4)\n\nadd_custom_target(generate_opencypher_parser\n    DEPENDS ${antlr_opencypher_generated_src} ${antlr_opencypher_generated_include})\n\nadd_library(antlr_opencypher_parser_lib STATIC ${antlr_opencypher_generated_src})\nadd_dependencies(antlr_opencypher_parser_lib generate_opencypher_parser)\ntarget_link_libraries(antlr_opencypher_parser_lib antlr4)\n\ntarget_link_libraries(mg-query PUBLIC antlr_opencypher_parser_lib)\n```\n\n----------------------------------------\n\nTITLE: Finding Python3 with CMake\nDESCRIPTION: Finds the Python3 installation using CMake's `find_package` command. The `MG_PYTHON_PATH` and `MG_PYTHON_VERSION` variables can be used to specify the Python installation path and version, respectively.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/query/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT \"${MG_PYTHON_PATH}\" STREQUAL \"\")\n    set(Python3_ROOT_DIR \"${MG_PYTHON_PATH}\")\nendif()\n\nif(\"${MG_PYTHON_VERSION}\" STREQUAL \"\")\n    find_package(Python3 3.5 REQUIRED COMPONENTS Development)\nelse()\n    find_package(Python3 \"${MG_PYTHON_VERSION}\" EXACT REQUIRED COMPONENTS Development)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Communication Library and Linking Dependencies\nDESCRIPTION: This CMake code creates the `mg-communication` static library from the source files defined in `communication_src_files`.  It then links this library against Boost headers, Threads library, `mg-utils`, `mg-io`, `mg-auth`, `fmt`, `gflags`, `mg-communication-metrics`, `mg-events`, and `mg-storage-v2` libraries.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/communication/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(mg-communication STATIC ${communication_src_files})\ntarget_link_libraries(mg-communication Boost::headers Threads::Threads mg-utils mg-io mg-auth fmt::fmt gflags mg-communication-metrics mg-events mg-storage-v2)\n```\n\n----------------------------------------\n\nTITLE: Finding Required Packages with CMake\nDESCRIPTION: This snippet uses the `find_package` command to locate required dependencies such as `gflags`, `BZip2`, and `ZLIB`.  It ensures that these libraries are available before proceeding with the build process. These external libraries must be installed and accessible in the system's CMake module path.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/kvstore/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(gflags REQUIRED)\nfind_package(BZip2 REQUIRED)\nfind_package(ZLIB REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Find External Packages\nDESCRIPTION: This snippet uses `find_package` to locate the required external libraries, gflags and Threads.  The `REQUIRED` keyword ensures that the configuration fails if these packages are not found.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/storage/v2/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(gflags REQUIRED)\nfind_package(Threads REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Create Kafka Integration Static Library (CMake)\nDESCRIPTION: This snippet creates a static library named `mg-integrations-kafka` from the source files specified in the `integrations_kafka_src_files` variable. This library will contain the Kafka integration logic.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/integrations/kafka/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(mg-integrations-kafka STATIC ${integrations_kafka_src_files})\n```\n\n----------------------------------------\n\nTITLE: Calculating Latency Statistics in C++\nDESCRIPTION: This C++ code snippet calculates latency statistics for a benchmark run. It iterates through worker query latencies, sorts the latency values, and calculates the minimum, maximum, mean, and percentile values (p99, p95, p90, p75, p50). These statistics provide insight into the distribution of query execution times and identify potential performance bottlenecks.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/mgbench/README.md#_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\n...std::vector<double> query_latency;\n  for (int i = 0; i < FLAGS_num_workers; i++) {\n    for (auto &e : worker_query_latency[i]) {\n      query_latency.push_back(e);\n    }\n  }\n  auto iterations = query_latency.size();\n  const int lower_bound = 10;\n  if (iterations > lower_bound) {\n    std::sort(query_latency.begin(), query_latency.end());\n    statistics[\"iterations\"] = iterations;\n    statistics[\"min\"] = query_latency.front();\n    statistics[\"max\"] = query_latency.back();\n    statistics[\"mean\"] = std::accumulate(query_latency.begin(), query_latency.end(), 0.0) / iterations;\n    statistics[\"p99\"] = query_latency[floor(iterations * 0.99)];\n    statistics[\"p95\"] = query_latency[floor(iterations * 0.95)];\n    statistics[\"p90\"] = query_latency[floor(iterations * 0.90)];\n    statistics[\"p75\"] = query_latency[floor(iterations * 0.75)];\n    statistics[\"p50\"] = query_latency[floor(iterations * 0.50)];\n  }...\n```\n\n----------------------------------------\n\nTITLE: Finding External Packages for Unit Tests\nDESCRIPTION: This snippet demonstrates the use of `find_package` to locate an external dependency, Boost, before defining a unit test. This ensures that the necessary headers and libraries are available before the unit test is compiled and linked. It uses the `CONFIG` option. `Boost::headers` specifies the headers to link. This example showcases how external dependencies are integrated into the build process.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/unit/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Boost REQUIRED CONFIG)\n\nadd_unit_test(monitoring.cpp)\ntarget_link_libraries(${test_prefix}monitoring mg-communication Boost::headers)\n```\n\n----------------------------------------\n\nTITLE: Optionally Enable Jemalloc (CMake)\nDESCRIPTION: This snippet adds an option to enable or disable jemalloc. By default, it is enabled.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/CMakeLists.txt#_snippet_36\n\nLANGUAGE: CMake\nCODE:\n```\noption(ENABLE_JEMALLOC \"Use jemalloc\" ON)\n```\n\n----------------------------------------\n\nTITLE: Define and Configure mg-auth Library (CMake)\nDESCRIPTION: Defines the `mg-auth` static library, specifies its source files, links required libraries, and sets include directories. It depends on Seccomp, fmt, gflags, OpenSSL, nlohmann_json and libbcrypt. The library uses modules for auth, crypto, models, module, rpc and replication handlers.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/auth/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(mg-auth STATIC)\ntarget_sources(mg-auth PRIVATE\n    auth.cpp\n    crypto.cpp\n    models.cpp\n    module.cpp\n    rpc.cpp\n    replication_handlers.cpp\n)\n\nfind_package(Seccomp REQUIRED)\nfind_package(fmt REQUIRED)\nfind_package(gflags REQUIRED)\n\ntarget_link_libraries(mg-auth nlohmann_json::nlohmann_json libbcrypt gflags fmt::fmt)\ntarget_link_libraries(mg-auth mg-utils mg-kvstore mg-license mg::system mg-replication)\n\ntarget_link_libraries(mg-auth ${Seccomp_LIBRARIES})\ntarget_include_directories(mg-auth SYSTEM PRIVATE ${Seccomp_INCLUDE_DIRS})\n\nfind_package(OpenSSL REQUIRED)\ntarget_link_libraries(mg-auth ${OPENSSL_LIBRARIES})\ntarget_include_directories(mg-auth SYSTEM PUBLIC ${OPENSSL_INCLUDE_DIR})\n```\n\n----------------------------------------\n\nTITLE: Installing Memgraph Components CMake\nDESCRIPTION: This part defines installation rules for the memgraph executable, libraries, Python support files, include files, and configuration files. The `install` command specifies the destination directory for each component and handles renaming as necessary. It also creates empty directories.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# Everything here is under \"memgraph\" install component.\nset(CMAKE_INSTALL_DEFAULT_COMPONENT_NAME \"memgraph\")\n\n# TODO: Default directory permissions to 755\n# NOTE: This is added in CMake 3.11, so enable it then\n# set(CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS\n# OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ WORLD_READ)\n\n# Install memgraph\ninstall(TARGETS memgraph\n    RUNTIME DESTINATION lib/memgraph)\n\ninstall(TARGETS mg-module-support\n    LIBRARY DESTINATION lib/memgraph)\n\n# Install Python source for supporting our embedded Python.\ninstall(FILES ${CMAKE_SOURCE_DIR}/include/mgp.py\n        DESTINATION lib/memgraph/python_support)\ninstall(FILES ${CMAKE_SOURCE_DIR}/include/mgp_mock.py\n        DESTINATION lib/memgraph/python_support)\ninstall(FILES ${CMAKE_SOURCE_DIR}/include/_mgp_mock.py\n        DESTINATION lib/memgraph/python_support)\n\n# Install the includes file for writing custom procedures in C and C++>\ninstall(FILES ${CMAKE_SOURCE_DIR}/include/mg_procedure.h\n        DESTINATION include/memgraph)\ninstall(FILES ${CMAKE_SOURCE_DIR}/include/_mgp.hpp\n        DESTINATION include/memgraph)\ninstall(FILES ${CMAKE_SOURCE_DIR}/include/mg_exceptions.hpp\n        DESTINATION include/memgraph)\ninstall(FILES ${CMAKE_SOURCE_DIR}/include/mgp.hpp\n        DESTINATION include/memgraph)\n\n# Install the config file (must use absolute path).\ninstall(FILES ${CMAKE_BINARY_DIR}/config/memgraph.conf\n        DESTINATION /etc/memgraph RENAME memgraph.conf)\n# Install the mappings file (must use absolute path).\ninstall(FILES ${CMAKE_BINARY_DIR}/config/apoc_compatibility_mappings.json\n        DESTINATION /etc/memgraph RENAME apoc_compatibility_mappings.json)\n\n# Install logrotate configuration (must use absolute path).\ninstall(FILES ${CMAKE_SOURCE_DIR}/release/logrotate.conf\n        DESTINATION /etc/logrotate.d RENAME memgraph)\n\n# Create empty directories for default location of lib and log.\ninstall(CODE \"file(MAKE_DIRECTORY \\$ENV{DESTDIR}/var/log/memgraph\\n                   \\$ENV{DESTDIR}/var/lib/memgraph)\")\n```\n\n----------------------------------------\n\nTITLE: Find and Use Readline Library (CMake)\nDESCRIPTION: This snippet provides an option to use the GNU Readline library for enhanced command-line input. It uses `find_package(Readline)` to locate the library. If found, it adds the preprocessor definition `HAS_READLINE`.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/CMakeLists.txt#_snippet_32\n\nLANGUAGE: CMake\nCODE:\n```\noption(USE_READLINE \"Use GNU Readline library if available (default ON). \\\nSet this to OFF to prevent linking with Readline even if it is available.\" ON)\nif (USE_READLINE)\n  find_package(Readline)\n  if (READLINE_FOUND)\n    add_definitions(-DHAS_READLINE)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Install mgconsole Binary (CMake)\nDESCRIPTION: This snippet installs the `mgconsole` binary to a location determined by the `MG_TOOLCHAIN_VERSION` environment variable or the CMAKE_BINARY_DIR. It sets the appropriate permissions for the installed binary, allowing execution, reading, and writing for the owner, and reading and execution for the group and world.  The logic inside the if statement is based on checking the environment variable MG_TOOLCHAIN_VERSION.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/CMakeLists.txt#_snippet_48\n\nLANGUAGE: CMake\nCODE:\n```\nif(DEFINED ENV{MG_TOOLCHAIN_VERSION})\n  if($ENV{MG_TOOLCHAIN_VERSION} GREATER_EQUAL 6)\n    install(FILES ${MG_TOOLCHAIN_ROOT}/bin/mgconsole\n      PERMISSIONS OWNER_EXECUTE OWNER_READ OWNER_WRITE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE\n      TYPE BIN)\n  else()\n    install(FILES ${CMAKE_BINARY_DIR}/bin/mgconsole\n      PERMISSIONS OWNER_EXECUTE OWNER_READ OWNER_WRITE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE\n      TYPE BIN)\n  endif()\nelse()\n  install(FILES ${CMAKE_BINARY_DIR}/bin/mgconsole\n    PERMISSIONS OWNER_EXECUTE OWNER_READ OWNER_WRITE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE\n    TYPE BIN)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Add Query Module (CMake)\nDESCRIPTION: This command adds the Katz centrality module to the Memgraph build process.  `add_query_module` is a custom CMake function to handle module registration.  It takes the module name (`katz_centrality_online`), a version number (`1`), and the list of source files defined previously. This makes the module available to Memgraph.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/query_modules/katz_centrality_module/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_query_module(katz_centrality_online 1 \"${katz_online_src}\")\n```\n\n----------------------------------------\n\nTITLE: Custom Index Generation based on Vendor in Python\nDESCRIPTION: This Python code snippet illustrates how to customize index creation queries based on the database vendor being used in the benchmark. It checks the `vendor_name` property of the `benchmark_context` and generates different index creation statements for Neo4j and other databases.  The method is part of the Workload class. Requires access to `self.benchmark_context.vendor_name`.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/mgbench/how_to_use_benchgraph.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef indexes_generator(self):\n        indexes = []\n        if \"neo4j\" in self.benchmark_context.vendor_name:\n            indexes.extend(\n                [\n                    (\"CREATE INDEX FOR (n:NodeA) ON (n.id);\", {}),\n                    (\"CREATE INDEX FOR (n:NodeB) ON (n.id);\", {}),\n                ]\n            )\n        else:\n            indexes.extend(\n                [\n                    (\"CREATE INDEX ON :NodeA(id);\", {}),\n                    (\"CREATE INDEX ON :NodeB(id);\", {}),\n                ]\n            )\n        return indexes\n```\n\n----------------------------------------\n\nTITLE: Creating Static Library with Source Files in CMake\nDESCRIPTION: This CMake snippet creates a static library named `mg-dbms` and specifies the C++ source files that will be compiled into the library. The `add_library` command is used with the `STATIC` keyword to define a static library.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/dbms/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(mg-dbms STATIC\n        dbms_handler.cpp\n        database.cpp\n        coordinator_handler.cpp\n        inmemory/replication_handlers.cpp\n        replication_handlers.cpp\n        rpc.cpp\n\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files for the mg-flags Library (CMake)\nDESCRIPTION: This snippet specifies the source files (both header and cpp files) for the `mg-flags` library. It distinguishes between public and private source files, influencing visibility and linking during compilation.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/flags/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(mg-flags\n        PUBLIC\n        all.hpp\n        audit.hpp\n        auth.hpp\n        bolt.hpp\n        coord_flag_env_handler.hpp\n        coordination.hpp\n        experimental.hpp\n        general.hpp\n        isolation_level.hpp\n        log_level.hpp\n        memory_limit.hpp\n        query.hpp\n        replication.hpp\n        run_time_configurable.hpp\n        storage_access.hpp\n        storage_mode.hpp\n\n        PRIVATE\n        audit.cpp\n        auth.cpp\n        bolt.cpp\n        coord_flag_env_handler.cpp\n        coordination.cpp\n        experimental.cpp\n        general.cpp\n        isolation_level.cpp\n        log_level.cpp\n        memory_limit.cpp\n        query.cpp\n        replication.cpp\n        run_time_configurable.cpp\n        storage_access.cpp\n        storage_mode.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Optionally Enable Testing (CMake)\nDESCRIPTION: This snippet enables or disables the building of test binaries based on the `MG_ENABLE_TESTING` option. If enabled, it calls `enable_testing()` and adds the `tests` subdirectory to the build.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/CMakeLists.txt#_snippet_45\n\nLANGUAGE: CMake\nCODE:\n```\noption(MG_ENABLE_TESTING \"Set this to OFF to disable building test binaries\" ON)\nmessage(STATUS \"MG_ENABLE_TESTING: ${MG_ENABLE_TESTING}\")\n\nif (MG_ENABLE_TESTING)\n  enable_testing()\n  add_subdirectory(tests)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Static Library for Query Processing\nDESCRIPTION: Defines a static library `mg-query` that encapsulates the query processing logic. It includes various source files related to parsing, semantic analysis, planning, interpretation, and procedure execution.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/query/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(mg-query STATIC)\ntarget_sources(mg-query\n    PRIVATE\n    frontend/ast/ast.cpp\n    frontend/semantic/symbol.cpp\n    plan/operator_type_info.cpp\n    common.cpp\n    cypher_query_interpreter.cpp\n    dump.cpp\n    frontend/ast/cypher_main_visitor.cpp\n    frontend/ast/pretty_print.cpp\n    frontend/parsing.cpp\n    frontend/semantic/required_privileges.cpp\n    frontend/semantic/rw_checker.cpp\n    frontend/semantic/symbol_generator.cpp\n    frontend/stripped.cpp\n    interpret/awesome_memgraph_functions.cpp\n    interpret/eval.cpp\n    interpreter.cpp\n    metadata.cpp\n    plan/hint_provider.cpp\n    plan/operator.cpp\n    plan/preprocess.cpp\n    plan/pretty_print.cpp\n    plan/profile.cpp\n    plan/read_write_type_checker.cpp\n    plan/rewrite/index_lookup.cpp\n    plan/rewrite/general.cpp\n    plan/rewrite/range.cpp\n    plan/rule_based_planner.cpp\n    plan/variable_start_planner.cpp\n    procedure/mg_procedure_impl.cpp\n    procedure/mg_procedure_helpers.cpp\n    procedure/module.cpp\n    procedure/py_module.cpp\n    procedure/cypher_types.cpp\n    procedure/callable_alias_mapper.cpp\n    serialization/property_value.cpp\n    stream/streams.cpp\n    stream/sources.cpp\n    stream/common.cpp\n    trigger.cpp\n    trigger_context.cpp\n    typed_value.cpp\n    graph.cpp\n    db_accessor.cpp\n    auth_query_handler.cpp\n    interpreter_context.cpp\n    query_user.cpp\n    time_to_live/time_to_live.cpp\n    query_logger.cpp\n    vertex_accessor.cpp\n    context.cpp\n    edge_accessor.cpp\n\n    PUBLIC\n    FILE_SET HEADERS\n    FILES\n    plan/rewrite/enum.hpp\n    plan/point_distance_condition.hpp\n    string_helpers.hpp\n    path.hpp\n    edge_accessor.hpp\n    procedure/cypher_types.hpp\n    vertex_accessor.hpp\n)\n```\n\n----------------------------------------\n\nTITLE: Set Include Directories for mg-storage-v2\nDESCRIPTION: This snippet sets the include directories for the `mg-storage-v2` library. It adds the `${CMAKE_SOURCE_DIR}/include` directory to the public include path, allowing other libraries to include headers from this directory.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/storage/v2/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(mg-storage-v2 PUBLIC ${CMAKE_SOURCE_DIR}/include)\n```\n\n----------------------------------------\n\nTITLE: Decoding and Analyzing SAML Response\nDESCRIPTION: This snippet represents the Base64 encoded SAML response. Decoding this string reveals an XML document containing authentication and authorization information. Further processing would involve parsing the XML to extract relevant details like user attributes, session information, and validation of the signature.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/sso/data/entra_id_response_missing_role.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nPHNhbWxwOlJlc3BvbnNlIElEPSJfMTBlYjcyY2MtMDhjYy00ZjMwLWIwODgtMmY2ZTkzNGQ1OTMwIiBWZXJzaW9uPSIyLjAiIElzc3VlSW5zdGFudD0iMjAyNC0wNS0wM1QxNDozNDowMC44OTlaIiBEZXN0aW5hdGlvbj0iaHR0cDovL2xvY2FsaG9zdDozMDAwL2F1dGgvcHJvdmlkZXJzL3NhbWwtZW50cmEtaWQvY2FsbGJhY2siIEluUmVzcG9uc2VUbz0iXzgyMjQyNmI3MjYyYTY1MjJiZWUwOGI4YzdiMmI2NWIxZjg3MzNiMzMiIHhtbG5zOnNhbWxwPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6cHJvdG9jb2wiPjxJc3N1ZXIgeG1sbnM9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iPmh0dHBzOi8vc3RzLndpbmRvd3MubmV0LzM3MWFhMmM0LTJmOWItNGZlMS1iYzUyLTIzODI0ZTkwNmMyNi88L0lzc3Vlcj48c2FtbHA6U3RhdHVzPjxzYW1scDpTdGF0dXNDb2RlIFZhbHVlPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6c3RhdHVzOlN1Y2Nlc3MiLz48L3NhbWxwOlN0YXR1cz48QXNzZXJ0aW9uIElEPSJfYjMyNzM2OWUtNGZhZi00YmZkLWI1YjAtNDVmNzg0M2IzZjAwIiBJc3N1ZUluc3RhbnQ9IjIwMjQtMDUtMDNUMTQ6MzQ6MDAuODk2WiIgVmVyc2lvbj0iMi4wIiB4bWxucz0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiI+PElzc3Vlcj5odHRwczovL3N0cy53aW5kb3dzLm5ldC8zNzFhYTJjNC0yZjliLTRmZTEtYmM1Mi0yMzgyNGU5MDZjMjYvPC9Jc3N1ZXI+PFNpZ25hdHVyZSB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI+PFNpZ25lZEluZm8+PENhbm9uaWNhbGl6YXRpb25NZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiLz48U2lnbmF0dXJlTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8wNC94bWxkc2lnLW1vcmUjcnNhLXNoYTI1NiIvPjxSZWZlcmVuY2UgVVJJPSIjX2IzMjczNjllLTRmYWYtNGJmZC1iNWIwLTQ1Zjc4NDNiM2YwMCI+PFRyYW5zZm9ybXM+PFRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNlbnZlbG9wZWQtc2lnbmF0dXJlIi8+PFRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPjwvVHJhbnNmb3Jtcz48RGlnZXN0TWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8wNC94bWxlbmMjc2hhMjU2Ii8+PERpZ2VzdFZhbHVlPjRDSDlNNFFWZ2hXeE5aY3VEMmV6ZWIvVXpOM05mVmxDVWZaMzM4aU1hQnM9PC9EaWdlc3RWYWx1ZT48L1JlZmVyZW5jZT48L1NpZ25lZEluZm8+PFNpZ25hdHVyZVZhbHVlPmpOWmM0cmlUZ1dDTkc4TTY0Yyszck5YdXRBRExlMzUzQ0VEaGlpNThDVmhOL0p1VG9DWVpDQStLeE54dVl6dHVOMzQvU3ZkSk1JQmV4akQ2TFQyamp2ZXUzNHIyemlLY2Fjbmh0VDE2bkFmWjNHdnIyZXRpQXllRjd4dzN3TDllVWFoczdDZjdHSGFHVjRWbFZuS3B1YUFYOGZjT3JvN2s3V0p5cllSNGN6TUtEM29Fdkx1SnV2UU1MWmtmYng2VGhzYnlZNkFyT3dQWkJ4cHdaanZxRE56ckhJN2c0UEpHOWYxVVRIV3pvNzJyaEJNcW1vRVpnL2lDZmxTV3IzWVJBb1dGcmVLR1RiR0NLT2U5ejQ2RldvUXlzc2Z1RExrSTJPY3c0a01lWVlWK2h0dXE4bnBxemtkZGhBT0pMeFNobitaV3JzRWNEVE5XaEZseDQza2ptdz09PC9TaWduYXR1cmVWYWx1ZT48S2V5SW5mbz48WDUwOURhdGE+PFg1MDlDZXJ0aWZpY2F0ZT5NSUlDL1RDQ0FlV2dBd0lCQWdJSU9kd3VNZEhWR2tFd0RRWUpLb1pJaHZjTkFRRUxCUUF3TFRFck1Da0dBMVVFQXhNaVlXTmpiM1Z1ZEhNdVlXTmpaWE56WTI5dWRISnZiQzUzYVc1a2IzZHpMbTVsZERBZUZ3MHlOREEwTVRFeE5qQTBNalphRncweU9UQTBNVEV4TmpBME1qWmFNQzB4S3pBcEJnTlZCQU1USW1GalkyOTFiblJ6TG1GalkyVnpjMk52Ym5SeWIyd3VkMmx1Wkc5M2N5NXVaWFF3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRQ2lQTTR1ZzhCcndQS1FsYWZSM1AyOEgrVTlPVEMwTExEV2hIeFlXbXpPZ0ZvYjZFcVlHRmdzSzdMSTVZaWdpQ2JFUk1qbjV1NlZET3dKTkh2MVpiR3JxdzNGYzlPVUhMaUxXS0dQQ0djUHNLdUJHN1JUODd3WS9Nd3crVkJkaXo4TDYyM1E1MDg5Z1JpLzluTnMyU0F4TTFwSGxaWjc1M2N2aWNNeGF0SS92UkxQN3orUnlZRFdwcHFuOHhQODMxcmxDSjBQYlJ0ODY5MWUyMDNHN3I5ck1CVTNsUmg0RjYrdE5va2M3WWRGV0p6RC9NckFsSmxYYnFPV09teVlZeUkxUzdacWNCRkxZTGdvejhjSWg5ZnR6QVQwRHoya25WU0hueHNFdjN4dlUwUE1hUzNTRlVJRk9LVTlxU0ZIaEVjL1JUMTI4Y1dqZWxRbDNWQ3VYMEJCQWdNQkFBR2pJVEFmTUIwR0ExVWREZ1FXQkJUWHA5TEVWUDJDWmlNMGhFUDV0MThsL3NEQWZ6QU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFINXZJaGhEQzhkKzMxc205TG81T2hsc2FibXY3ZUEzSmdYS3c3eDRWREZvUXhyWkhNdzBxc1FPazliVHJ3SkhhMDlvMENRa084VlpHNXpKMFpwWHBsUnRyTjhGYUtDTGIxcXN0RjJQNnd1WklaUjFFSlRKYjRMNVZ2aGFTVWlGV2tCZlFQQkRNVkpkOWcyQ0VPaFcrMWpJS0VlYTB3dDNBQzJ6VXZOeWJoYlN6RE15UE5Td3UwRWlaTEpzVU1kYk94ZEdtQ1pqdklXTWFkZER1OUdWVCtLdFBXWURES3MyUE9ab1lQREdDcDZmdGQyK0wrbWEyZ1pDTDNIdkZCV2pDSWN0c3UyMGFIUDhyZXRrRU9pVnpNVmJ0NjhnRHlUNjFWVGxoQk0vcHhsY0hNTzZ3ZkExblF6WTJxRHdNQ0VPb2Ntc1l0M21ySVRvbFl4eHlCalNWbkE9PTwvWDUwOUNlcnRpZmljYXRlPjwvWDUwOURhdGE+PC9LZXlJbmZvPjwvU2lnbmF0dXJlPjxTdWJqZWN0PjxOYW1lSUQgRm9ybWF0PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoxLjE6bmFtZWlkLWZvcm1hdDplbWFpbEFkZHJlc3MiPmRvZXNudC5leGlzdEBtZW1ncmFwaC5pbzwvTmFtZUlEPjxTdWJqZWN0Q29uZmlybWF0aW9uIE1ldGhvZD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmNtOmJlYXJlciI+PFN1YmplY3RDb25maXJtYXRpb25EYXRhIEluUmVzcG9uc2VUbz0iXzgyMjQyNmI3MjYyYTY1MjJiZWUwOGI4YzdiMmI2NWIxZjg3MzNiMzMiIE5vdE9uT3JBZnRlcj0iMjEyNC0wNS0xNVQyMjozNDowMC43OTFaIiBSZWNpcGllbnQ9Imh0dHA6Ly9sb2NhbGhvc3Q6MzAwMC9hdXRoL3Byb3ZpZGVycy9zYW1sLWVudHJhLWlkL2NhbGxiYWNrIi8+PC9TdWJqZWN0Q29uZmlybWF0aW9uPjwvU3ViamVjdD48Q29uZGl0aW9ucyBOb3RCZWZvcmU9IjIwMjQtMDUtMDVUMTg6Mjk6MDAuNzkxWiIgTm90T25PckFmdGVyPSIyMTI0LTA1LTE1VDIyOjM0OjAwLjc5MVoiPjxBdWRpZW5jZVJlc3RyaWN0aW9uPjxBdWRpZW5jZT5zcG46ZjUxNmE3ZGUtNmMzZi00ZDFkLWEyODktNTM5MzAxMDM5MjkxPC9BdWRpZW5jZT48L0F1ZGllbmNlUmVzdHJpY3Rpb24+PC9Db25kaXRpb25zPjxBdHRyaWJ1dGVTdGF0ZW1lbnQ+PEF0dHJpYnV0ZSBOYW1lPSJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL2lkZW50aXR5L2NsYWltcy90ZW5hbnRpZCI+PEF0dHJpYnV0ZVZhbHVlPjM3MWFhMmM0LTJmOWItNGZlMS1iYzUyLTIzODI0ZTkwNmMyNjwvQXR0cmlidXRlVmFsdWU+PC9BdHRyaWJ1dGU+PEF0dHJpYnV0ZSBOYW1lPSJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL2lkZW50aXR5L2NsYWltcy9vYmplY3RpZGVudGlmaWVyIj48QXR0cmlidXRlVmFsdWU+ZDE3ODFjYjItYjFhNC00YjJkLThjMWUtNzZkOTE4MGNmYTUyPC9BdHRyaWJ1dGVWYWx1ZT48L0F0dHJpYnV0ZT48QXR0cmlidXRlIE5hbWU9Imh0dHA6Ly9zY2hlbWFzLnhtbHNvYXAub3JnL3dzLzIwMDUvMDUvaWRlbnRpdHkvY2xhaW1zL25hbWUiPjxBdHRyaWJ1dGVWYWx1ZT5BbnRob255PC9BdHRyaWJ1dGVWYWx1ZT48L0F0dHJpYnV0ZT48QXR0cmlidXRlIE5hbWU9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vaWRlbnRpdHkvY2xhaW1zL2Rpc3BsYXluYW1lIj48QXR0cmlidXRlVmFsdWU+QW50aG9ueTwvQXR0cmlidXRlVmFsdWU+PC9BdHRyaWJ1dGU+PEF0dHJpYnV0ZSBOYW1lPSJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL2lkZW50aXR5L2NsYWltcy9pZGVudGl0eXByb3ZpZGVyIj48QXR0cmlidXRlVmFsdWU+aHR0cHM6Ly9zdHMud2luZG93cy5uZXQvMzcxYWEyYzQtMmY5Yi00ZmUxLWJjNTItMjM4MjRlOTA2YzI2LzwvQXR0cmlidXRlVmFsdWU+PC9BdHRyaWJ1dGU+PEF0dHJpYnV0ZSBOYW1lPSJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL2NsYWltcy9hdXRobm1ldGhvZHNyZWZlcmVuY2VzIj48QXR0cmlidXRlVmFsdWU+dXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFjOmNsYXNzZXM6UGFzc3dvcmRQcm90ZWN0ZWRUcmFuc3BvcnQ8L0F0dHJpYnV0ZVZhbHVlPjxBdHRyaWJ1dGVWYWx1ZT5odHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL2NsYWltcy9tdWx0aXBsZWF1dGhuPC9BdHRyaWJ1dGVWYWx1ZT48L0F0dHJpYnV0ZT48L0F0dHJpYnV0ZVN0YXRlbWVudD48QXV0aG5TdGF0ZW1lbnQgQXV0aG5JbnN0YW50PSIyMDI0LTA0LTI0VDExOjUwOjU0LjY3NVoiIFNlc3Npb25JbmRleD0iX2IzMjczNjllLTRmYWYtNGJmZC1iNWIwLTQ1Zjc4NDNiM2YwMCI+PEF1dGhuQ29udGV4dD48QXV0aG5Db250ZXh0Q2xhc3NSZWY+dXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFjOmNsYXNzZXM6UGFzc3dvcmRQcm90ZWN0ZWRUcmFuc3BvcnQ8L0F1dGhuQ29udGV4dENsYXNzUmVmPjwvQXV0aG5Db250ZXh0PjwvQXV0aG5TdGF0ZW1lbnQ+PC9Bc3NlcnRpb24+PC9zYW1scDpSZXNwb25zZT4=\n```\n\n----------------------------------------\n\nTITLE: Adding and Linking graph_500_bfs Macro Benchmark\nDESCRIPTION: This snippet adds the `graph_500_bfs.cpp` as a macro benchmark. It then links necessary libraries such as `mg-communication`, `mg-io`, `mg-utils`, and `nlohmann_json::nlohmann_json`.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/macro_benchmark/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_macro_benchmark(clients/graph_500_bfs.cpp)\ntarget_link_libraries(${test_prefix}graph_500_bfs mg-communication mg-io mg-utils nlohmann_json::nlohmann_json)\n```\n\n----------------------------------------\n\nTITLE: Creating Executable for Server Connection Test (CMake)\nDESCRIPTION: This CMake command defines an executable target named `memgraph__e2e__server_connection`. It builds the executable from `server_connection.cpp` and links it against the `mgclient`, `mg-utils`, and `gflags` libraries.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/server/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(memgraph__e2e__server_connection server_connection.cpp)\ntarget_link_libraries(memgraph__e2e__server_connection mgclient mg-utils gflags)\n```\n\n----------------------------------------\n\nTITLE: Add Executable and Link Libraries (CMake)\nDESCRIPTION: This snippet creates an executable named `memgraph__e2e__isolation_levels` from the source file `isolation_levels.cpp`. It then links the executable against the `gflags`, `mgclient`, `mg-utils`, `mg-io` and `Threads::Threads` libraries. These libraries provide functionalities for command-line argument parsing, Memgraph client interaction, utility functions, input/output operations, and threading, respectively.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/isolation_levels/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(memgraph__e2e__isolation_levels isolation_levels.cpp)\ntarget_link_libraries(memgraph__e2e__isolation_levels gflags mgclient mg-utils mg-io Threads::Threads)\n```\n\n----------------------------------------\n\nTITLE: Running Test Cases with Neo4j Client\nDESCRIPTION: This snippet demonstrates how to run test cases using the `neo4j-client` command-line tool. It requires the client to be installed and configured to connect to a Neo4j instance. The command specifies the output file, input query file, host, and port.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/public_benchmark/ldbc/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncd memgraph/tests/public_benchmark/ldbc\neo4j-client --insecure -u \"\" -p \"\" -o test_cases/results/short_query_2.oc.out -i test_cases/queries/short_query_2.oc localhost 7687\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to the mg-flags Library (CMake)\nDESCRIPTION: This snippet specifies the libraries that `mg-flags` depends on. It links against both public libraries (e.g., `spdlog`, `mg-settings`) which will be exposed to other libraries using `mg-flags`, and private libraries (e.g., `lib::rangev3`, `croncpp::croncpp`) which are internal dependencies.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/flags/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(mg-flags\n        PUBLIC spdlog::spdlog mg-settings mg-utils mg-license\n        PRIVATE lib::rangev3 croncpp::croncpp)\n```\n\n----------------------------------------\n\nTITLE: Running Jepsen Tests Locally (Bash & Clojure)\nDESCRIPTION: These bash and Clojure commands demonstrate how to run Jepsen tests locally. First, the Memgraph cluster is brought up using `run.sh`.  Then, a bash shell is opened inside the `jepsen-control` Docker container. Finally, Clojure commands (`lein run test`) are used to execute individual tests with different workloads (bank, large, high_availability), referencing node configurations and time limits.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/jepsen/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd tests/jepsen\n./run.sh cluster-up --binary ../../build/memgraph\ndocker exec -it jepsen-control bash\ncd memgraph\nlein run test-all --nodes-config resources/replication-config.edn --time-limit 120\nlein run test --workload bank --nodes-config resources/replication-config.edn --time-limit 120\nlein run test --workload large --nodes-config resources/replication-config.edn --time-limit 120\nlein run test --workload high_availability --nodes-config resources/cluster.edn\n```\n\n----------------------------------------\n\nTITLE: Initializing Project and Finding Dependencies CMake\nDESCRIPTION: This snippet initializes the CMake project for Memgraph query modules and finds the required dependency, fmt. It also sets the default installation component to \"query_modules\".\nSOURCE: https://github.com/memgraph/memgraph/blob/master/query_modules/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(memgraph_query_modules)\n\ndisallow_in_source_build()\n\nfind_package(fmt REQUIRED)\n\n# Everything that is installed here, should be under the \"query_modules\" component.\nset(CMAKE_INSTALL_DEFAULT_COMPONENT_NAME \"query_modules\")\nstring(TOLOWER ${CMAKE_BUILD_TYPE} lower_build_type)\n```\n\n----------------------------------------\n\nTITLE: Finding Boost Library using CMake\nDESCRIPTION: This CMake code uses `find_package` to locate the Boost library using the `CONFIG` mode, which relies on the Boost CMake configuration files.  The `REQUIRED` keyword ensures that the build fails if Boost is not found.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/communication/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Boost REQUIRED CONFIG)\n```\n\n----------------------------------------\n\nTITLE: Creating and Linking mg-audit Library CMake\nDESCRIPTION: This snippet creates a static library named `mg-audit` using the specified source files.  It then links the library against `nlohmann_json`, `gflags`, `fmt`, `mg-utils`, and `mg-communication` libraries.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/audit/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(mg-audit STATIC ${audit_src_files})\ntarget_link_libraries(mg-audit nlohmann_json::nlohmann_json gflags fmt::fmt)\ntarget_link_libraries(mg-audit mg-utils mg-communication)\n```\n\n----------------------------------------\n\nTITLE: Adding Manual Test Function - CMake\nDESCRIPTION: This defines a CMake function `add_manual_test` to simplify the process of creating test executables. It takes the test source file as input, creates an executable target, and links it. The ARGN variable allows passing additional source files to the executable.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/manual/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(add_manual_test test_cpp)\n  # get exec name (remove extension from the abs path)\n  get_filename_component(exec_name ${test_cpp} NAME_WE)\n  set(target_name ${test_prefix}${exec_name})\n  add_executable(${target_name} ${test_cpp} ${ARGN})\n  # OUTPUT_NAME sets the real name of a target when it is built and can be\n  # used to help create two targets of the same name even though CMake\n  # requires unique logical target names\n  set_target_properties(${target_name} PROPERTIES OUTPUT_NAME ${exec_name})\n  add_dependencies(memgraph__manual ${target_name})\nendfunction(add_manual_test)\n```\n\n----------------------------------------\n\nTITLE: Finding gflags Package with CMake\nDESCRIPTION: This snippet uses CMake's `find_package` command to locate the gflags library. The `REQUIRED` keyword ensures that the build will fail if gflags is not found.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/slk/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(gflags REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Building Pulsar with CMake\nDESCRIPTION: This macro defines the steps to build the pulsar library. It uses `import_external_library` to import pulsar, providing its source and include directories, along with extensive CMake configuration arguments including paths to other dependencies like Protobuf and Boost.  It disables building dynamic libraries, tests, and Python wrappers.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/libs/CMakeLists.txt#_snippet_23\n\nLANGUAGE: cmake\nCODE:\n```\nmacro(build_pulsar)\n    import_external_library(pulsar STATIC\n      ${CMAKE_CURRENT_SOURCE_DIR}/pulsar/pulsar-client-cpp/lib/libpulsarwithdeps.a\n      ${CMAKE_CURRENT_SOURCE_DIR}/pulsar/install/include\n      BUILD_IN_SOURCE 1\n      CONFIGURE_COMMAND cmake pulsar-client-cpp\n      -DCMAKE_INSTALL_PREFIX=${CMAKE_CURRENT_SOURCE_DIR}/pulsar/install\n      -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}\n      -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}\n      -DBUILD_DYNAMIC_LIB=OFF\n      -DBUILD_STATIC_LIB=ON\n      -DBUILD_TESTS=OFF\n      -DLINK_STATIC=ON\n      -DPROTOC_PATH=${PROTOBUF_ROOT}/bin/protoc\n      -DBOOST_ROOT=${BOOST_ROOT}\n      \"-DCMAKE_PREFIX_PATH=$<$<BOOL:${MG_TOOLCHAIN_ROOT}>:${MG_TOOLCHAIN_ROOT}${LIST_SEP}>${PROTOBUF_ROOT}\"\n      -DProtobuf_INCLUDE_DIRS=${PROTOBUF_ROOT}/include\n      -DBUILD_PYTHON_WRAPPER=OFF\n      -DBUILD_PERF_TOOLS=OFF\n      -DUSE_LOG4CXX=OFF\n      BUILD_COMMAND $(MAKE) pulsarStaticWithDeps)\n    add_dependencies(pulsar-proj protobuf)\nendmacro()\nmg_build_if_needed(build_pulsar \"pulsar\")\nmg_create_linkable_if_no_cmake(pulsar STATIC \"${MG_TOOLCHAIN_ROOT}/lib/libpulsarwithdeps.a\" \"${MG_TOOLCHAIN_ROOT}/include\")\n```\n\n----------------------------------------\n\nTITLE: Importing mgclient External Library\nDESCRIPTION: This snippet imports the mgclient library as an external library, specifying its source and include directories. It sets CMake arguments for the C and C++ compilers, disables testing, and enables C++ bindings. It also links against OpenSSL libraries.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/libs/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nimport_external_library(mgclient STATIC\n  ${CMAKE_CURRENT_SOURCE_DIR}/mgclient/lib/libmgclient.a\n  ${CMAKE_CURRENT_SOURCE_DIR}/mgclient/include\n  CMAKE_ARGS -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}\n  -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}\n  -DBUILD_TESTING=OFF\n  -DBUILD_CPP_BINDINGS=ON)\n# NOTE: the following is possible because both imported targets are called the\n# same. This setting should be moved under mgclient lib itself.\nfind_package(OpenSSL REQUIRED)\ntarget_link_libraries(mgclient INTERFACE ${OPENSSL_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Generating Version Header CMake\nDESCRIPTION: This snippet sets the version string and configures a header file containing version information.  The `configure_file` command takes an input file (`version.hpp.in`) and generates an output file (`version.hpp`) by replacing variables with their CMake values. The include directory is then added for the generated header.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nstring(TOLOWER ${CMAKE_BUILD_TYPE} lower_build_type)\n\n# Generate a version.hpp file\nset(VERSION_STRING ${MEMGRAPH_VERSION})\nconfigure_file(version.hpp.in version.hpp @ONLY)\ninclude_directories(${CMAKE_CURRENT_BINARY_DIR})\n```\n\n----------------------------------------\n\nTITLE: Conditional Jemalloc Integration (CMake)\nDESCRIPTION: This snippet conditionally integrates jemalloc into the `mg-memory` library based on the `ENABLE_JEMALLOC` flag. If enabled, it finds the jemalloc package, links the library against it, and defines a compile definition `USE_JEMALLOC=1`. Otherwise, it defines `USE_JEMALLOC=0`.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/memory/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nmessage(STATUS \"ENABLE_JEMALLOC: ${ENABLE_JEMALLOC}\")\nif (ENABLE_JEMALLOC)\n  find_package(jemalloc REQUIRED)\n  target_link_libraries(mg-memory Jemalloc::Jemalloc ${CMAKE_DL_LIBS})\n  target_compile_definitions(mg-memory PUBLIC USE_JEMALLOC=1)\nelse()\n  target_compile_definitions(mg-memory PUBLIC USE_JEMALLOC=0)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring mg-settings Library (CMake)\nDESCRIPTION: Creates a static library named `mg-settings` and configures its source files and linking options. The library uses `settings.cpp` as its source. It links against `mg-kvstore`, `mg-slk`, and `mg-utils`.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/utils/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(mg-settings STATIC)\ntarget_sources(mg-settings\n    PRIVATE\n    settings.cpp\n)\ntarget_link_libraries(mg-settings mg-kvstore mg-slk mg-utils)\n```\n\n----------------------------------------\n\nTITLE: Adding Post-Build Commands CMake\nDESCRIPTION: This section adds custom commands executed after building the memgraph target, including creating a symlink, stripping symbols in release builds, and generating configuration files.  These commands ensure that the build output is properly prepared for deployment.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Emulate the installed python_support, by creating a symlink\nadd_custom_command(TARGET memgraph POST_BUILD\n        COMMAND ${CMAKE_COMMAND} -E create_symlink ${CMAKE_SOURCE_DIR}/include ${CMAKE_BINARY_DIR}/python_support\n        BYPRODUCTS ${CMAKE_BINARY_DIR}/python_support\n        COMMENT \"Creating symlink for python_support\")\n\n# Strip the executable in release build.\nif(lower_build_type STREQUAL \"release\")\n        add_custom_command(TARGET memgraph POST_BUILD\n                COMMAND strip -s $<TARGET_FILE:memgraph>\n                COMMENT \"Stripping symbols and sections from memgraph\")\nendif()\n\n# Generate the configuration file under the build directory.\nadd_custom_command(TARGET memgraph POST_BUILD\n        COMMAND ${CMAKE_SOURCE_DIR}/config/generate.py\n        ${CMAKE_BINARY_DIR}/memgraph\n        ${CMAKE_BINARY_DIR}/config/memgraph.conf\n        DEPENDS ${CMAKE_SOURCE_DIR}/config/generate.py\n        ${CMAKE_SOURCE_DIR}/config/flags.yaml\n        BYPRODUCTS ${CMAKE_BINARY_DIR}/config/memgraph.conf\n        COMMENT \"Generating memgraph configuration file\")\n# Copy the mappings file to the build directory.\nadd_custom_command(TARGET memgraph POST_BUILD\n        COMMAND ${CMAKE_COMMAND} -E copy\n        ${CMAKE_SOURCE_DIR}/config/mappings.json\n        ${CMAKE_BINARY_DIR}/config/apoc_compatibility_mappings.json)\n```\n\n----------------------------------------\n\nTITLE: Creating a Metrics Library with CMake\nDESCRIPTION: This CMake code creates a static library named `mg-communication-metrics` from the `metrics.cpp` source file. It then links the `nlohmann_json` library to it, indicating a dependency on JSON functionality for metrics reporting.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/communication/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(mg-communication-metrics STATIC metrics.cpp)\ntarget_link_libraries(mg-communication-metrics nlohmann_json::nlohmann_json)\n```\n\n----------------------------------------\n\nTITLE: Adding and Linking bfs_pokec_client Macro Benchmark\nDESCRIPTION: This snippet adds the `bfs_pokec_client.cpp` as a macro benchmark. It then links necessary libraries such as `mg-communication`, `mg-io`, `mg-utils`, and `nlohmann_json::nlohmann_json`.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/macro_benchmark/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nadd_macro_benchmark(clients/bfs_pokec_client.cpp)\ntarget_link_libraries(${test_prefix}bfs_pokec_client mg-communication mg-io mg-utils nlohmann_json::nlohmann_json)\n```\n\n----------------------------------------\n\nTITLE: Link jemalloc Library\nDESCRIPTION: This macro `link_jmalloc` defines the path to the jemalloc static library and include directory. It then calls `mg_build_if_needed` to build jemalloc if necessary, using custom logic for setting the path based on the `MG_TOOLCHAIN_VERSION` environment variable.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/libs/CMakeLists.txt#_snippet_27\n\nLANGUAGE: cmake\nCODE:\n```\nmacro(link_jmalloc)\n  set_path_external_library(jemalloc STATIC\n    ${CMAKE_CURRENT_SOURCE_DIR}/jemalloc/lib/libjemalloc.a\n    ${CMAKE_CURRENT_SOURCE_DIR}/jemalloc/include/)\nendmacro()\nmg_build_if_needed(link_jmalloc \"jemalloc\")\nif(DEFINED ENV{MG_TOOLCHAIN_VERSION})\n  if($ENV{MG_TOOLCHAIN_VERSION} GREATER_EQUAL 6)\n    set_path_external_library(jemalloc STATIC \"${MG_TOOLCHAIN_ROOT}/lib/libjemalloc.a\" \"${MG_TOOLCHAIN_ROOT}/include\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Skip List Find Concurrent Test\nDESCRIPTION: Adds a concurrent test named `skip_list_find.cpp`. It creates an executable and links it with `mg-utils` library using `target_link_libraries`. This ensures that the test can access the functionality provided by `mg-utils`.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/concurrent/CMakeLists.txt#_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nadd_concurrent_test(skip_list_find.cpp)\ntarget_link_libraries(${test_prefix}skip_list_find mg-utils)\n```\n\n----------------------------------------\n\nTITLE: Creating Static Library in CMake\nDESCRIPTION: This CMake command creates a static library named `mg-replication` and defines an alias `mg::replication` for it. It sets up the target sources, including header and source files, for the library.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/replication/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(mg-replication STATIC)\nadd_library(mg::replication ALIAS mg-replication)\ntarget_sources(mg-replication\n        PUBLIC\n        FILE_SET HEADERS\n        BASE_DIRS include\n        FILES\n        include/replication/state.hpp\n        include/replication/epoch.hpp\n        include/replication/config.hpp\n        include/replication/status.hpp\n        include/replication/replication_client.hpp\n        include/replication/replication_server.hpp\n\n        PRIVATE\n        state.cpp\n        epoch.cpp\n        config.cpp\n        status.cpp\n        replication_client.cpp\n        replication_server.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Add Query Module in CMake\nDESCRIPTION: This CMake command adds a query module named `pagerank_online`. It compiles the source files specified in the `pagerank_online_module_src` variable and creates a loadable module. The `1` likely refers to the version.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/query_modules/pagerank_module/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_query_module(pagerank_online 1 \"${pagerank_online_module_src}\")\n```\n\n----------------------------------------\n\nTITLE: Build mgcxx Library\nDESCRIPTION: This macro `build_mgcxx` configures the mgcxx library, which provides text search functionality. It sets the include directory and library paths for tantivy and mgcxx text search libraries and then adds mgcxx as an external project. It also creates linkable targets if `CMAKE` is not used and defines how to link to them.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/libs/CMakeLists.txt#_snippet_30\n\nLANGUAGE: cmake\nCODE:\n```\nmacro(build_mgcxx)\n  # Setup mgcxx (provides: text search)\n  set(MGCXX_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/mgcxx/include\n    CACHE PATH \"Path to mgcxx include directory\" FORCE)\n  set(TANTIVY_TEXT_SEARCH_LIBRARY ${CMAKE_CURRENT_SOURCE_DIR}/mgcxx/lib/libtantivy_text_search.a\n    CACHE FILEPATH \"Path to mgcxx tantivy library (internal one)\" FORCE)\n  set(MGCXX_TEXT_SEARCH_LIBRARY ${CMAKE_CURRENT_SOURCE_DIR}/mgcxx/lib/libmgcxx_text_search.a\n    CACHE FILEPATH \"Path to mgcxx text search library\" FORCE)\n  add_external_project(mgcxx\n    SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/mgcxx\n    CMAKE_ARGS -DENABLE_TESTS=OFF)\n  mark_as_advanced(MGCXX_INCLUDE_DIR TANTIVY_TEXT_SEARCH_LIBRARY MGCXX_TEXT_SEARCH_LIBRARY)\n  import_library(tantivy_text_search STATIC ${TANTIVY_TEXT_SEARCH_LIBRARY} ${MGCXX_INCLUDE_DIR} mgcxx-proj)\n  import_library(mgcxx_text_search STATIC ${MGCXX_TEXT_SEARCH_LIBRARY} ${MGCXX_INCLUDE_DIR} mgcxx-proj)\nendmacro()\nmg_build_if_needed(build_mgcxx \"mgcxx\")\nmg_create_linkable_if_no_cmake(tantivy_text_search STATIC \"${MG_TOOLCHAIN_ROOT}/lib/libtantivy_text_search.a\" \"${MG_TOOLCHAIN_ROOT}/include\")\nmg_create_linkable_if_no_cmake(mgcxx_text_search STATIC \"${MG_TOOLCHAIN_ROOT}/lib/libmgcxx_text_search.a\" \"${MG_TOOLCHAIN_ROOT}/include\")\ntarget_link_libraries(tantivy_text_search INTERFACE ${CMAKE_DL_LIBS})\ntarget_link_libraries(mgcxx_text_search INTERFACE ${CMAKE_DL_LIBS})\n```\n\n----------------------------------------\n\nTITLE: Set Architecture (CMake)\nDESCRIPTION: This snippet determines the target architecture (x86_64 or ARM64) based on the host system processor. It uses the MG_ARCH variable to store the architecture and exposes it as a cache variable.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/CMakeLists.txt#_snippet_30\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT MG_ARCH)\n    set(MG_ARCH_DESCR \"Host architecture to build Memgraph on. Supported values are x86_64, ARM64.\")\n    if (${CMAKE_HOST_SYSTEM_PROCESSOR} MATCHES \"aarch64\")\n        set(MG_ARCH \"ARM64\" CACHE STRING ${MG_ARCH_DESCR})\n    else()\n        set(MG_ARCH \"x86_64\" CACHE STRING ${MG_ARCH_DESCR})\n    endif()\nendif()\nmessage(STATUS \"MG_ARCH: ${MG_ARCH}\")\n```\n\n----------------------------------------\n\nTITLE: Import Header Library CMake Function\nDESCRIPTION: Defines a CMake function to import a header-only library. It adds an interface library, sets include directories, and creates a cache variable for the include directory. An alias `lib::<name>` is also created for easier referencing.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/libs/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(import_header_library name include_dir)\n  add_library(${name} INTERFACE IMPORTED GLOBAL)\n  set_property(TARGET ${name} PROPERTY\n    INTERFACE_INCLUDE_DIRECTORIES ${include_dir})\n  string(TOUPPER ${name} _upper_name)\n  set(${_upper_name}_INCLUDE_DIR ${include_dir} CACHE FILEPATH\n    \"Path to ${name} include directory\" FORCE)\n  mark_as_advanced(${_upper_name}_INCLUDE_DIR)\n  add_library(lib::${name} ALIAS ${name})\nendfunction(import_header_library)\n```\n\n----------------------------------------\n\nTITLE: Adding Link Options\nDESCRIPTION: This snippet sets link options, including using the lld linker for faster builds and reduced memory usage and adds a build ID to the linked binaries. It also handles the LD_LIBRARY_PATH environment variable by extracting library paths and adding them as link directories.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/CMakeLists.txt#_snippet_22\n\nLANGUAGE: CMake\nCODE:\n```\nadd_link_options(-fuse-ld=lld)\nif (DEFINED ENV{LD_LIBRARY_PATH})\n    string(REPLACE \":\" \" \" LD_LIBS $ENV{LD_LIBRARY_PATH})\n    separate_arguments(LD_LIBS)\n    link_directories(${LD_LIBS})\nendif ()\nadd_link_options(LINKER:--build-id)\n```\n\n----------------------------------------\n\nTITLE: Finding Gflags Package - CMake\nDESCRIPTION: This command attempts to locate the `gflags` library using CMake's `find_package` command. The `REQUIRED` keyword ensures that the configuration will fail if `gflags` is not found.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/manual/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(gflags REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Adding Post-Build Strip Command in Release Mode CMake\nDESCRIPTION: This function adds a custom command to strip symbols and sections from the target module after it is built in release mode. It utilizes CMAKE_STRIP to remove unnecessary data, reducing the module size.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/query_modules/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(add_post_build_strip_in_release target build_type_var)\n  string(TOLOWER \"${${build_type_var}}\" lower_build_type)\n\n  if (lower_build_type STREQUAL \"release\")\n    add_custom_command(\n      TARGET ${target} POST_BUILD\n      COMMAND ${CMAKE_STRIP} -s $<TARGET_FILE:${target}>\n      COMMENT \"Stripping symbols and sections from the ${target} module\"\n    )\n  endif()\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to the mg-kvstore Target\nDESCRIPTION: This snippet uses the `target_link_libraries` command to link the `mg-kvstore` library against its dependencies, including `stdc++fs`, `mg-utils`, `BZip2`, `ZLIB`, `gflags`, and `rocksdb`. The dependencies are essential for the correct functionality of the `mg-kvstore` library.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/kvstore/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(mg-kvstore stdc++fs mg-utils BZip2::BZip2 ZLIB::ZLIB gflags)\n# TODO(gitbuda): Once RocksDB is proparly compiled under toolchain.\n# mg_target_link_library_cmake(6 mg-kvstore RocksDB RocksDB::rocksdb rocksdb)\ntarget_link_libraries(mg-kvstore rocksdb)\n```\n\n----------------------------------------\n\nTITLE: Adding Filtering Executable in CMake\nDESCRIPTION: This snippet adds an executable named `filtering` built from `filtering.cpp`. It then sets the output name to `filtering` and links it against the `mg-communication` library. This executable likely performs some form of data filtering within the integration tests.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/integration/fine_grained_access/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(${filtering_target_name} filtering.cpp)\nset_target_properties(${filtering_target_name} PROPERTIES OUTPUT_NAME filtering)\ntarget_link_libraries(${filtering_target_name} mg-communication)\n```\n\n----------------------------------------\n\nTITLE: Configure Thread Sanitizer (TSAN) (CMake)\nDESCRIPTION: This snippet configures the build to use the Thread Sanitizer (TSAN) for detecting data races. It disables jemalloc due to incompatibility with ASAN and adds compiler and linker flags to enable TSAN.  It also provides information on setting runtime flags for improved symbolization.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/CMakeLists.txt#_snippet_39\n\nLANGUAGE: CMake\nCODE:\n```\nif (TSAN)\n  message(WARNING \"Disabling jemalloc as it doesn't work well with ASAN\")\n  set(ENABLE_JEMALLOC OFF)\n  # ThreadSanitizer generally requires all code to be compiled with -fsanitize=thread.\n  # If some code (e.g. dynamic libraries) is not compiled with the flag, it can\n  # lead to false positive race reports, false negative race reports and/or\n  # missed stack frames in reports depending on the nature of non-instrumented\n  # code. To not produce false positive reports ThreadSanitizer has to see all\n  # synchronization in the program, some synchronization operations (namely,\n  # atomic operations and thread-safe static initialization) are intercepted\n  # during compilation (and can only be intercepted during compilation).\n  # ThreadSanitizer stack trace collection also relies on compiler instrumentation\n  # (unwinding stack on each memory access is too expensive).\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fsanitize=thread\")\n  set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -fsanitize=thread\")\n  # By default ThreadSanitizer uses addr2line utility to symbolize reports.\n  # llvm-symbolizer is faster, consumes less memory and produces much better\n  # reports. To use it set runtime flag:\n  # TSAN_OPTIONS=\"extern-symbolizer-path=~/llvm-symbolizer\"\n  # For more runtime flags see: https://github.com/google/sanitizers/wiki/ThreadSanitizerFlags\nendif()\n```\n\n----------------------------------------\n\nTITLE: Running Benchmarks Command\nDESCRIPTION: This code snippet shows the command used to run benchmarks on a workload. It includes specifying the vendor, workload, and output file, along with disabling authorization.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/mgbench/how_to_use_benchgraph.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\npython3 benchmark.py vendor-docker --vendor-name (memgraph-docker||neo4j-docker) benchmarks demo/*/*/* --export-results result.json  --no-authorization\n```\n\n----------------------------------------\n\nTITLE: Copy E2E Python Files with CMake\nDESCRIPTION: This CMake function, `copy_e2e_python_files`, creates a custom target to copy a Python file from the source directory to the binary directory. It uses the CMake command `-E copy`. The target depends on the source file to ensure it is copied during the build process. It takes a target prefix and a file name as parameters.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(copy_e2e_python_files TARGET_PREFIX FILE_NAME)\n        add_custom_target(memgraph__e2e__${TARGET_PREFIX}__${FILE_NAME} ALL\n                COMMAND ${CMAKE_COMMAND} -E copy\n                ${CMAKE_CURRENT_SOURCE_DIR}/${FILE_NAME}\n                ${CMAKE_CURRENT_BINARY_DIR}/${FILE_NAME}\n                DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/${FILE_NAME})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Finding CURL Library Using CMake\nDESCRIPTION: This snippet uses the `find_package` command to locate the CURL library. The `REQUIRED` keyword ensures that the build process will fail if the CURL library is not found. The found library's details are then stored in variables managed by CMake, like `CURL_LIBRARIES`.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/integrations/pulsar/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(CURL REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files Variable in CMake\nDESCRIPTION: This snippet sets the `slk_src_files` variable to a list of source files for the Memgraph streams library. This variable will be used later when defining the library.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/slk/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(slk_src_files\n    streams.cpp)\n```\n\n----------------------------------------\n\nTITLE: Copying Python Query Modules CMake\nDESCRIPTION: This section defines a custom target to copy Python query modules to the build directory. It uses the `CMAKE_COMMAND` to execute the copy operation.  The python modules listed are copied to the `QUERY_MODULES_BUILD_DIR`\nSOURCE: https://github.com/memgraph/memgraph/blob/master/query_modules/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nfile(MAKE_DIRECTORY ${QUERY_MODULES_BUILD_DIR})\n\n# node2vec gets copied inside subdirectory\n# TODO: make this consistent\nadd_subdirectory(node2vec_online_module)\n\nset(PYTHON_QUERY_MODULES_FILES\n    ${CMAKE_CURRENT_SOURCE_DIR}/graph_analyzer.py\n    ${CMAKE_CURRENT_SOURCE_DIR}/mgp_networkx.py\n    ${CMAKE_CURRENT_SOURCE_DIR}/nxalg.py\n    ${CMAKE_CURRENT_SOURCE_DIR}/wcc.py\n    ${CMAKE_CURRENT_SOURCE_DIR}/mgps.py\n)\nadd_custom_target(copy_python_query_modules ALL\n    COMMAND ${CMAKE_COMMAND} -E copy ${PYTHON_QUERY_MODULES_FILES} ${QUERY_MODULES_BUILD_DIR}\n    COMMENT \"Copying Python query modules to build/query_modules\"\n)\n```\n\n----------------------------------------\n\nTITLE: Define and Alias mg-storage-v2 Library\nDESCRIPTION: This snippet defines a static library named `mg-storage-v2` and creates an alias `mg::storage` for it. This allows for easier referencing of the library in other parts of the project.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/storage/v2/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(mg-storage-v2 STATIC)\nadd_library(mg::storage ALIAS mg-storage-v2)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for the Library\nDESCRIPTION: This snippet specifies the source files that should be included in the compilation of the `mg-repl_coord_glue` library.  It separates public header files from private implementation files.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/replication_coordination_glue/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(mg-repl_coord_glue\n        PUBLIC\n        messages.hpp\n        mode.hpp\n        role.hpp\n        handler.hpp\n        common.hpp\n\n        PRIVATE\n        messages.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Creating and Linking Memgraph Streams Library\nDESCRIPTION: This snippet defines the `mg-slk` static library, links it to the gflags and mg-utils libraries, and creates an alias `mg::slk` for easier referencing.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/slk/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(mg-slk STATIC ${slk_src_files})\nadd_library(mg::slk ALIAS mg-slk)\ntarget_link_libraries(mg-slk gflags)\ntarget_link_libraries(mg-slk mg-utils)\n```\n\n----------------------------------------\n\nTITLE: Adding Skip List Mixed Concurrent Test\nDESCRIPTION: Adds a concurrent test named `skip_list_mixed.cpp`. It creates an executable and links it with `mg-utils` library using `target_link_libraries`. This ensures that the test can access the functionality provided by `mg-utils`.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/concurrent/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nadd_concurrent_test(skip_list_mixed.cpp)\ntarget_link_libraries(${test_prefix}skip_list_mixed mg-utils)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory for E2E Tests (CMake)\nDESCRIPTION: The `add_subdirectory` command is used to add the 'e2e' subdirectory to the current CMake project. This allows the CMake build system to include the e2e tests as part of the overall build process.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(e2e)\n```\n\n----------------------------------------\n\nTITLE: CPack Debian Package Configuration - CMake\nDESCRIPTION: This snippet configures CPack settings specific to Debian packages, including maintainer information, package section, homepage, version, file name, and extra control files. The package description includes a summary and a more detailed explanation of Memgraph's purpose. It also sets dependencies on openssl and python3.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/release/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(CPACK_DEBIAN_PACKAGE_MAINTAINER \"tech@memgraph.com (Memgraph Ltd.)\")\nset(CPACK_DEBIAN_PACKAGE_SECTION non-free/database)\nset(CPACK_DEBIAN_PACKAGE_HOMEPAGE https://memgraph.com)\nset(CPACK_DEBIAN_PACKAGE_VERSION \"${MEMGRAPH_VERSION_DEB}\")\nset(CPACK_DEBIAN_FILE_NAME \"memgraph_${MEMGRAPH_VERSION_DEB}_${MG_ARCH_EXTENSION_DEB}.deb\")\nset(CPACK_DEBIAN_PACKAGE_CONTROL_EXTRA\n    \"${CMAKE_CURRENT_SOURCE_DIR}/debian/conffiles;\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/debian/copyright;\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/debian/preinst;\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/debian/prerm;\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/debian/postrm;\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/debian/postinst;\")\nset(CPACK_DEBIAN_PACKAGE_SHLIBDEPS ON)\n\n# Description formatting is important, summary must be followed with a newline and 1 space.\nset(CPACK_DEBIAN_PACKAGE_DESCRIPTION \"${CPACK_PACKAGE_DESCRIPTION_SUMMARY}\\n Contains Memgraph, the graph database. It aims to deliver developers the\\n speed, simplicity and scale required to build the next generation of\\n applications driver by real-time connected data.\")\n\n# Add `openssl` package to dependencies list. Used to generate SSL certificates.\n# We also depend on `python3` because we embed it in Memgraph.\nset(CPACK_DEBIAN_PACKAGE_DEPENDS \"openssl (>= 1.1.0), python3 (>= 3.5.0)\")\n```\n\n----------------------------------------\n\nTITLE: Copy E2E Files with CMake\nDESCRIPTION: This CMake function, `copy_e2e_files`, creates a custom target to copy a generic file from the source directory to the binary directory using the CMake command `-E copy`. The target depends on the source file to ensure it is copied during the build. The copied files are used for end-to-end testing.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(copy_e2e_files TARGET_PREFIX FILE_NAME)\n        add_custom_target(memgraph__e2e__${TARGET_PREFIX}__${FILE_NAME} ALL\n                COMMAND ${CMAKE_COMMAND} -E copy\n                ${CMAKE_CURRENT_SOURCE_DIR}/${FILE_NAME}\n                ${CMAKE_CURRENT_BINARY_DIR}/${FILE_NAME}\n                DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/${FILE_NAME})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configure Undefined Behavior Sanitizer (UBSAN) (CMake)\nDESCRIPTION: This snippet configures the build to use the Undefined Behavior Sanitizer (UBSAN) for detecting undefined behavior. It adds compiler and linker options to enable UBSAN, but disables the vptr check due to complexities in linking with the C++ runtime. It also provides information on setting runtime flags for debugging.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/CMakeLists.txt#_snippet_40\n\nLANGUAGE: CMake\nCODE:\n```\nif (UBSAN)\n  # Compile with UBSAN but disable vptr check. This is disabled because it\n  # requires linking with clang++ to make sure C++ specific parts of the\n  # runtime library and c++ standard libraries are present.\n  add_compile_options(-fsanitize=undefined -fno-omit-frame-pointer -fno-sanitize=vptr)\n  add_link_options(-fsanitize=undefined -fno-sanitize=vptr)\n  # Run program with environment variable UBSAN_OPTIONS=print_stacktrace=1.\n  # Make sure llvm-symbolizer binary is in path.\n  # To make the program abort on undefined behavior, use UBSAN_OPTIONS=halt_on_error=1.\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining CMake Function for Copying Filter Info Python Files\nDESCRIPTION: This CMake function, `copy_filter_info_e2e_python_files`, takes a `FILE_NAME` as input and calls the `copy_e2e_python_files` function to copy Python files related to filter information. The function assumes the existence of a `copy_e2e_python_files` function, likely defined elsewhere in the CMake project, that handles the actual file copying process. It is used to simplify the copying of multiple specific python files.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/filter_info/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(copy_filter_info_e2e_python_files FILE_NAME)\n    copy_e2e_python_files(filter_info ${FILE_NAME})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Creating Shared Library for C++ API Support\nDESCRIPTION: Creates a shared library `mg-module-support` that provides support for the C++ API. This library links against the `mg-cpp-api` interface library and sets the output name to `memgraph_module_support`.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/query/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(mg-module-support SHARED)\ntarget_sources(mg-module-support\n    PRIVATE\n    procedure/mpg_support.cpp\n)\ntarget_link_libraries(mg-module-support PRIVATE mg-cpp-api)\nset_target_properties(mg-module-support  PROPERTIES\n    OUTPUT_NAME \"memgraph_module_support\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files for Memgraph Requests Library\nDESCRIPTION: This snippet sets the source files for the `mg-requests` library. It defines the `requests_src_files` variable, which lists the C++ source files that make up the library. This list is later used when defining the library target.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/requests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(requests_src_files\n    requests.cpp)\n```\n\n----------------------------------------\n\nTITLE: Defining Memory Source Files (CMake)\nDESCRIPTION: This snippet defines a variable `memory_src_files` containing a list of C++ source files that are part of the memory management library. These files implement memory allocation and control functionalities.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/memory/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(memory_src_files\n  new_delete.cpp\n  global_memory_control.cpp\n  query_memory_control.cpp)\n```\n\n----------------------------------------\n\nTITLE: Creating a Static Library in CMake\nDESCRIPTION: This snippet creates a static library named `mg-repl_coord_glue` and defines an alias for it. The alias allows for referencing the library using the namespace `mg::`.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/replication_coordination_glue/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(mg-repl_coord_glue STATIC )\nadd_library(mg::repl_coord_glue ALIAS mg-repl_coord_glue)\n```\n\n----------------------------------------\n\nTITLE: Adding Storage Unique Constraints Concurrent Test\nDESCRIPTION: Adds a concurrent test named `storage_unique_constraints.cpp`. It creates an executable and links it with `mg-utils` and `mg-storage-v2` libraries using `target_link_libraries`. This ensures that the test can access the functionality provided by `mg-utils` and `mg-storage-v2`.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/concurrent/CMakeLists.txt#_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\nadd_concurrent_test(storage_unique_constraints.cpp)\ntarget_link_libraries(${test_prefix}storage_unique_constraints mg-utils mg-storage-v2)\n```\n\n----------------------------------------\n\nTITLE: Adding and Linking query_client Macro Benchmark\nDESCRIPTION: This snippet adds the `query_client.cpp` as a macro benchmark. It then links necessary libraries such as `mg-communication`, `mg-io`, and `mg-utils`.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/macro_benchmark/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_macro_benchmark(clients/query_client.cpp)\ntarget_link_libraries(${test_prefix}query_client mg-communication mg-io mg-utils)\n```\n\n----------------------------------------\n\nTITLE: Compiler Selection\nDESCRIPTION: This snippet finds the clang and clang++ compilers and sets them as the C and C++ compilers for the project. If either compiler is not found, it throws a fatal error, ensuring the build uses the intended compilers.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nfind_program(CLANG_FOUND clang)\nfind_program(CLANGXX_FOUND clang++)\nif (CLANG_FOUND AND CLANGXX_FOUND)\n  set(CMAKE_C_COMPILER ${CLANG_FOUND})\n  set(CMAKE_CXX_COMPILER ${CLANGXX_FOUND})\nelse()\n  message(FATAL_ERROR \"Couldn't find clang and/or clang++!\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding eval Benchmark\nDESCRIPTION: Adds the `eval` benchmark. Links the executable with the `mg-query` library.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/benchmark/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nadd_benchmark(query/eval.cpp)\ntarget_link_libraries(${test_prefix}eval mg-query)\n```\n\n----------------------------------------\n\nTITLE: Calculating Throughput and Metadata in C++\nDESCRIPTION: This C++ code snippet calculates the throughput and metadata for a benchmark run. It aggregates metadata, retries, and duration from multiple workers, calculates the total execution time, and then computes the throughput as the number of queries divided by the final duration. The results are then formatted into a JSON object and outputted.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/mgbench/README.md#_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n  // Create and output summary.\n  Metadata final_metadata;\n  uint64_t final_retries = 0;\n  double final_duration = 0.0;\n  for (int i = 0; i < FLAGS_num_workers; ++i) {\n    final_metadata += worker_metadata[i];\n    final_retries += worker_retries[i];\n    final_duration += worker_duration[i];\n  }\n\n  auto total_time_end = std::chrono::steady_clock::now();\n  auto total_time = std::chrono::duration_cast<std::chrono::duration<double>>(total_time_end - total_time_start);\n\n  final_duration /= FLAGS_num_workers;\n  nlohmann::json summary = nlohmann::json::object();\n  summary[\"total_time\"] = total_time.count();\n  summary[\"count\"] = queries.size();\n  summary[\"duration\"] = final_duration;\n  summary[\"throughput\"] = static_cast<double>(queries.size()) / final_duration;\n  summary[\"retries\"] = final_retries;\n  summary[\"metadata\"] = final_metadata.Export();\n  summary[\"num_workers\"] = FLAGS_num_workers;\n  summary[\"latency_stats\"] = LatencyStatistics(worker_query_durations);\n  (*stream) << summary.dump() << std::endl;\n```\n\n----------------------------------------\n\nTITLE: Adding Query Module with Build Options CMake\nDESCRIPTION: This function defines a query module target, sets its properties, includes directories, compiler options, and link libraries. It ensures position-independent code, applies post-build stripping in release mode, and sets the output directory.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/query_modules/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(add_query_module target_name version src)\n  add_library(${target_name} SHARED ${src})\n  set_property(TARGET ${target_name} PROPERTY POSITION_INDEPENDENT_CODE TRUE)\n  target_include_directories(${target_name} PRIVATE\n      ${CMAKE_SOURCE_DIR}/include\n      ${CMAKE_CURRENT_SOURCE_DIR}\n  )\n\n  target_compile_options(${target_name} PRIVATE -Wall)\n  target_link_libraries(${target_name} PRIVATE\n      -static-libgcc\n      -static-libstdc++\n  )\n\n  add_post_build_strip_in_release(${target_name} CMAKE_BUILD_TYPE)\n\n  set_target_properties(${target_name} PROPERTIES\n      PREFIX \"\" # remove \"lib\" prefix\n      OUTPUT_NAME \"${target_name}\"\n      LIBRARY_OUTPUT_DIRECTORY \"${QUERY_MODULES_BUILD_DIR}\" # needed because we want all .so in /build/query_modules\n  )\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Specify Source Files for mg-storage-v2\nDESCRIPTION: This snippet specifies the source files that make up the `mg-storage-v2` library. It lists both PRIVATE and PUBLIC source files, with the PUBLIC files being headers for the library's interface. The `FILE_SET HEADERS`, `BASE_DIRS`, and `FILES` arguments are used to include header files.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/storage/v2/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(mg-storage-v2\n        PRIVATE\n        all_vertices_iterable.cpp\n        commit_log.cpp\n        constraint_verification_info.cpp\n        constraints/constraints.cpp\n        constraints/existence_constraints.cpp\n        constraints/type_constraints.cpp\n        constraints/type_constraints_validator.cpp\n        disk/durable_metadata.cpp\n        disk/edge_import_mode_cache.cpp\n        disk/edge_type_index.cpp\n        disk/edge_type_property_index.cpp\n        disk/edge_property_index.cpp\n        disk/label_index.cpp\n        disk/label_property_index.cpp\n        disk/rocksdb_storage.cpp\n        disk/storage.cpp\n        disk/unique_constraints.cpp\n        durability/durability.cpp\n        durability/serialization.cpp\n        durability/snapshot.cpp\n        durability/wal.cpp\n        edge_accessor.cpp\n        edges_iterable.cpp\n        indices/indices.cpp\n        indices/label_property_index.cpp\n        indices/point_index.cpp\n        indices/point_index_change_collector.cpp\n        indices/text_index.cpp\n        indices/vector_index.cpp\n        inmemory/edge_type_index.cpp\n        inmemory/edge_type_property_index.cpp\n        inmemory/edge_property_index.cpp\n        inmemory/label_index.cpp\n        inmemory/label_property_index.cpp\n        inmemory/replication/recovery.cpp\n        inmemory/storage.cpp\n        inmemory/unique_constraints.cpp\n        point_functions.cpp\n        property_store.cpp\n        replication/replication_client.cpp\n        replication/replication_storage_state.cpp\n        replication/rpc.cpp\n        replication/serialization.cpp\n        replication/slk.cpp\n        storage.cpp\n        storage_mode.cpp\n        temporal.cpp\n        vertex_accessor.cpp\n        vertex_info_cache.cpp\n        vertices_iterable.cpp\n        schema_info.cpp\n        edge_ref.cpp\n        indices/point_iterator.cpp\n        property_value_utils.cpp\n\n        PUBLIC\n        FILE_SET HEADERS\n        BASE_DIRS ../../\n        FILES\n        delta_container.hpp\n        enum.hpp\n        enum_store.hpp\n        indices/point_index.hpp\n        indices/point_index_change_collector.hpp\n        indices/point_iterator.hpp\n        indices/point_index_expensive_header.hpp\n        indices/vector_index.hpp\n        mvcc.hpp\n        point.hpp\n        point_functions.hpp\n        property_store.hpp\n        property_value.hpp\n        transaction.hpp\n        constraints/type_constraints_kind.hpp\n        constraints/type_constraints.hpp\n        constraints/type_constraints_validator.hpp\n        vertex_info_cache.hpp\n        vertex_info_cache_fwd.hpp\n        schema_info.hpp\n        edge_ref.hpp\n        id_types.hpp\n        property_value_utils.hpp\n        property_constants.hpp\n        storage.hpp\n        inmemory/storage.hpp\n        disk/storage.hpp\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Memgraph Distributed Library with CMake\nDESCRIPTION: This snippet creates a library named `mg-distributed` and defines an alias `mg::distributed` for it. It also sets the include directories and specifies the source files to be compiled into the library. The `lamport_clock.cpp` file is specified as a private source file.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/distributed/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(mg-distributed)\nadd_library(mg::distributed ALIAS mg-distributed)\ntarget_include_directories(mg-distributed PUBLIC include )\ntarget_sources(mg-distributed PRIVATE lamport_clock.cpp)\n```\n\n----------------------------------------\n\nTITLE: Define CMake Function to Copy Python Files\nDESCRIPTION: Defines a CMake function named `copy_user_changing_its_own_password_e2e_python_files` which accepts a file name as input and uses the `copy_e2e_python_files` macro to copy the specified Python file into the appropriate end-to-end test directory. The purpose is to stage necessary Python scripts for testing the 'user_changing_its_own_password' feature.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/user_changing_its_own_password/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(copy_user_changing_its_own_password_e2e_python_files FILE_NAME)\n  copy_e2e_python_files(user_changing_its_own_password ${FILE_NAME})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Define Build Options (CMake)\nDESCRIPTION: This snippet defines several build options using the `option` command. These options control various aspects of the build, such as generating test coverage reports, building tools binaries, building query modules, and enabling sanitizers (ASAN, TSAN, UBSAN).\nSOURCE: https://github.com/memgraph/memgraph/blob/master/CMakeLists.txt#_snippet_33\n\nLANGUAGE: CMake\nCODE:\n```\noption(TEST_COVERAGE \"Generate coverage reports from running memgraph\" OFF)\noption(TOOLS \"Build tools binaries\" ON)\noption(QUERY_MODULES \"Build query modules containing custom procedures\" ON)\noption(ASAN \"Build with Address Sanitizer. To get a reasonable performance option should be used only in Release or RelWithDebInfo build \" OFF)\noption(TSAN \"Build with Thread Sanitizer. To get a reasonable performance option should be used only in Release or RelWithDebInfo build \" OFF)\noption(UBSAN \"Build with Undefined Behaviour Sanitizer\" OFF)\n```\n\n----------------------------------------\n\nTITLE: Finding Dependencies (CMake)\nDESCRIPTION: Finds required packages such as gflags, fmt, and Threads using the `find_package` command.  These dependencies are required for building the project.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tools/src/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(gflags REQUIRED)\nfind_package(fmt REQUIRED)\nfind_package(Threads REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Create Executable for On-Create Triggers CMake\nDESCRIPTION: Creates an executable named `memgraph__e2e__triggers__on_create` from the source file `on_create_triggers.cpp`. It then links the executable to the `memgraph__e2e__triggers_common` library, making its functionalities available to the executable.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/triggers/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(memgraph__e2e__triggers__on_create on_create_triggers.cpp)\ntarget_link_libraries(memgraph__e2e__triggers__on_create memgraph__e2e__triggers_common)\n```\n\n----------------------------------------\n\nTITLE: Configure Memory Profiling (CMake)\nDESCRIPTION: This snippet configures the build for memory profiling. If memory profiling is enabled and jemalloc or ASAN are also enabled, it disables jemalloc and ASAN due to incompatibility. It then adds the `MG_MEMORY_PROFILE` preprocessor definition.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/CMakeLists.txt#_snippet_37\n\nLANGUAGE: CMake\nCODE:\n```\noption(MG_MEMORY_PROFILE \"If build should be setup for memory profiling\" OFF)\nif (MG_MEMORY_PROFILE AND ENABLE_JEMALLOC)\n    message(STATUS \"Jemalloc has been disabled because MG_MEMORY_PROFILE is enabled\")\n    set(ENABLE_JEMALLOC OFF)\nendif ()\nif (MG_MEMORY_PROFILE AND ASAN)\n    message(STATUS \"ASAN has been disabled because MG_MEMORY_PROFILE is enabled\")\n    set(ASAN OFF)\nendif ()\nif (MG_MEMORY_PROFILE)\n    add_compile_definitions(MG_MEMORY_PROFILE)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Finding OpenSSL and Configuring Include Directories\nDESCRIPTION: This CMake code uses `find_package` to locate the OpenSSL library. It links the `mg-communication` library against the found OpenSSL libraries using `target_link_libraries` and specifies that the OpenSSL include directory should be added to the `mg-communication` library with system public visibility.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/communication/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(OpenSSL REQUIRED)\ntarget_link_libraries(mg-communication ${OPENSSL_LIBRARIES})\ntarget_include_directories(mg-communication SYSTEM PUBLIC ${OPENSSL_INCLUDE_DIR})\n```\n\n----------------------------------------\n\nTITLE: Adding and Linking parser Stress Test in CMake\nDESCRIPTION: This snippet calls the `add_stress_test` function to create an executable from `parser.cpp`. It then links the resulting executable with the libraries `mg-communication`, `mg-io`, `mg-utils`, and `mgclient`.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/stress/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_stress_test(parser.cpp)\ntarget_link_libraries(${test_prefix}parser mg-communication mg-io mg-utils mgclient)\n```\n\n----------------------------------------\n\nTITLE: Defining the `add_benchmark` Function\nDESCRIPTION: Defines a function `add_benchmark` that simplifies the process of creating benchmark executables.  It takes the source file as input, creates an executable with a prefixed name, links necessary libraries, and registers it as a test.  The `OUTPUT_NAME` property ensures the built executable has the intended name.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/benchmark/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(add_benchmark test_cpp)\n  # get exec name (remove extension from the abs path)\n  get_filename_component(exec_name ${test_cpp} NAME_WE)\n  set(target_name ${test_prefix}${exec_name})\n  add_executable(${target_name} ${test_cpp} ${ARGN})\n  # OUTPUT_NAME sets the real name of a target when it is built and can be\n  # used to help create two targets of the same name even though CMake\n  # requires unique logical target names\n  set_target_properties(${target_name} PROPERTIES OUTPUT_NAME ${exec_name})\n  target_link_libraries(${target_name} benchmark gflags mg-memory)\n  # register test\n  add_test(${target_name} ${exec_name})\n  add_dependencies(memgraph__benchmark ${target_name})\nendfunction(add_benchmark)\n```\n\n----------------------------------------\n\nTITLE: Set Path External Library Macro\nDESCRIPTION: Defines a CMake macro `set_path_external_library` which sets cache variables for the library and include directory of an external library. This is useful when the library is already built and just needs to be linked.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/libs/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nmacro(set_path_external_library name type library_location include_dir)\n  string(TOUPPER ${name} _upper_name)\n  set(${_upper_name}_LIBRARY ${library_location} CACHE FILEPATH\n      \"Path to ${name} library\" FORCE)\n  set(${_upper_name}_INCLUDE_DIR ${include_dir} CACHE FILEPATH\n      \"Path to ${name} include directory\" FORCE)\n  mark_as_advanced(${name}_LIBRARY ${name}_INCLUDE_DIR)\nendmacro(set_path_external_library)\n```\n\n----------------------------------------\n\nTITLE: Defining a CMake function for copying E2E Python files\nDESCRIPTION: Defines a CMake function named `copy_garbage_collection_e2e_python_files` that takes a file name as input and uses `copy_e2e_python_files` to copy the specified Python file to the garbage collection end-to-end test directory. This automates the process of including necessary Python files in the test environment.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/garbage_collection/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(copy_garbage_collection_e2e_python_files FILE_NAME)\n    copy_e2e_python_files(garbage_collection ${FILE_NAME})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Target for Tools (CMake)\nDESCRIPTION: Defines a custom target named `tools` that depends on `mg_dump`.  This allows building all tool executables through a single target. The tools will only be built if its dependencies are updated.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tools/src/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(tools DEPENDS mg_dump)\n```\n\n----------------------------------------\n\nTITLE: Find Required Packages in CMake\nDESCRIPTION: These CMake commands use `find_package` to locate and include the `fmt` and `gflags` libraries, which are required dependencies for the RPC library. `REQUIRED` ensures that the build fails if these packages are not found.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/rpc/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(fmt REQUIRED)\nfind_package(gflags REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Call CMake function to copy write.py\nDESCRIPTION: This line calls the `copy_concurrent_write_e2e_python_files` function, passing `write.py` as the file name. This ensures that the `write.py` file, crucial for concurrent write testing, is copied to the correct location for the E2E tests.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/concurrent_write/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_concurrent_write_e2e_python_files(write.py)\n```\n\n----------------------------------------\n\nTITLE: Import rangev3 Header Library\nDESCRIPTION: This snippet imports the rangev3 header library using `import_header_library` and specifies the include directory. This makes the rangev3 headers available for inclusion in the project's source code.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/libs/CMakeLists.txt#_snippet_28\n\nLANGUAGE: cmake\nCODE:\n```\nimport_header_library(rangev3 ${CMAKE_CURRENT_SOURCE_DIR}/rangev3/include)\n```\n\n----------------------------------------\n\nTITLE: Target Link Library with Toolchain Version Macro\nDESCRIPTION: Defines a CMake macro `mg_target_link_library_cmake` to conditionally link a library based on the `MG_TOOLCHAIN_VERSION` environment variable. If the toolchain version meets a certain requirement, it uses `find_package` and links against the toolchain library; otherwise, it links against a local library.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/libs/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nmacro(mg_target_link_library_cmake toolchain_version mg_target_name package_name toolchain_lib_name local_lib_name)\n  if(DEFINED ENV{MG_TOOLCHAIN_VERSION})\n    if($ENV{MG_TOOLCHAIN_VERSION} GREATER_EQUAL ${toolchain_version})\n      message(STATUS \"TOOLCHAIN v${toolchain_version}\")\n      find_package(${package_name} REQUIRED)\n      target_link_libraries(${mg_target_name} ${toolchain_lib_name})\n    else()\n      message(STATUS \"Not the right TOOLCHAIN\")\n      target_link_libraries(${mg_target_name} ${local_lib_name})\n    endif()\n  else()\n    message(STATUS \"Unknown TOOLCHAIN\")\n    target_link_libraries(${mg_target_name} ${local_lib_name})\n  endif()\nendmacro()\n```\n\n----------------------------------------\n\nTITLE: Installing Python Query Modules CMake\nDESCRIPTION: This section installs the Python example and modules to the `lib/memgraph/query_modules` directory. It uses `install(FILES ...)` to copy the Python files to the specified destination. `example.py` is renamed to `py_example.py` during installation.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/query_modules/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES example.py DESTINATION lib/memgraph/query_modules RENAME py_example.py)\ninstall(FILES graph_analyzer.py DESTINATION lib/memgraph/query_modules)\ninstall(FILES mgp_networkx.py DESTINATION lib/memgraph/query_modules)\ninstall(FILES nxalg.py DESTINATION lib/memgraph/query_modules)\ninstall(FILES wcc.py DESTINATION lib/memgraph/query_modules)\ninstall(FILES mgps.py DESTINATION lib/memgraph/query_modules)\n```\n\n----------------------------------------\n\nTITLE: Defining and Linking Memgraph HTTP Handlers Library (CMake)\nDESCRIPTION: This snippet defines a static library named `mg-http-handlers` using the source files specified in the `mg_http_handlers_sources` variable. It then links this library against the `mg-query`, `mg-storage-v2`, and `mg-events` libraries, establishing dependencies between these components.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/http_handlers/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(mg_http_handlers_sources)\n\nadd_library(mg-http-handlers STATIC ${mg_http_handlers_sources})\ntarget_link_libraries(mg-http-handlers mg-query mg-storage-v2 mg-events)\n```\n\n----------------------------------------\n\nTITLE: Executing Benchgraph Benchmark\nDESCRIPTION: This command executes the Benchgraph benchmark using the `graph_bench.py` script. It specifies the vendor (memgraph), dataset group (basic), dataset size (small), and defines realistic and mixed workloads with different query distributions. The realistic workloads have percentages of write, read, update, and aggregate queries, while the mixed workload also includes individual queries.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/mgbench/README.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngraph_bench.py\n--vendor memgraph /home/memgraph/binary\n--dataset-group basic\n--dataset-size small\n--realistic 500 30 70 0 0\n--realistic 500 50 50 0 0\n--realistic 500 70 30 0 0\n--realistic 500 30 40 10 20\n--mixed 500 30 0 0 0 70\n```\n\n----------------------------------------\n\nTITLE: Install Authentication Modules (CMake)\nDESCRIPTION: Installs example Python authentication modules (example.py, ldap.py, saml.py, oidc.py) and their configuration files (ldap.example.yaml, requirements.txt) to specific directories. It uses the `install` command to copy the files to the designated locations.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/auth/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(PROGRAMS ${CMAKE_CURRENT_SOURCE_DIR}/reference_modules/example.py\n        DESTINATION lib/memgraph/auth_module)\ninstall(PROGRAMS ${CMAKE_CURRENT_SOURCE_DIR}/reference_modules/ldap.py\n        DESTINATION lib/memgraph/auth_module)\ninstall(PROGRAMS ${CMAKE_CURRENT_SOURCE_DIR}/reference_modules/saml.py\n        DESTINATION lib/memgraph/auth_module)\ninstall(FILES ${CMAKE_CURRENT_SOURCE_DIR}/reference_modules/ldap.example.yaml\n        DESTINATION /etc/memgraph/auth_module)\ninstall(PROGRAMS ${CMAKE_CURRENT_SOURCE_DIR}/reference_modules/requirements.txt\n        DESTINATION lib/memgraph/auth_module)\ninstall(PROGRAMS ${CMAKE_CURRENT_SOURCE_DIR}/reference_modules/oidc.py\n        DESTINATION lib/memgraph/auth_module)\n```\n\n----------------------------------------\n\nTITLE: Adding Executable Target in CMake\nDESCRIPTION: This CMake command adds an executable target named `${tester_target_name}`, which is derived from the original target name. The source file for the executable is specified as `tester.cpp`. This creates a build target that produces an executable file.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/integration/init_file/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(${tester_target_name} tester.cpp)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to Target in CMake\nDESCRIPTION: This CMake code links the `mg-replication` library with its public and private dependencies. It uses `find_package` to locate the `fmt` library and then uses `target_link_libraries` to specify the dependencies.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/replication/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(fmt REQUIRED)\ntarget_link_libraries(mg-replication\n    PUBLIC mg::utils mg::kvstore nlohmann_json::nlohmann_json mg::rpc mg::slk mg::io mg::repl_coord_glue mg-flags\n    PRIVATE fmt::fmt\n)\n```\n\n----------------------------------------\n\nTITLE: Define CMake Function to Copy E2E Python Files\nDESCRIPTION: This CMake function, `copy_query_modules_reloading_procedures_e2e_python_files`, takes a filename as input and uses the `copy_e2e_python_files` function (assumed to be defined elsewhere) to copy the specified Python file into the `python_query_modules_reloading` directory. This is part of a test setup.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/python_query_modules_reloading/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(copy_query_modules_reloading_procedures_e2e_python_files FILE_NAME)\n    copy_e2e_python_files(python_query_modules_reloading ${FILE_NAME})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory for Benchmark Tests (CMake)\nDESCRIPTION: The `add_subdirectory` command is used to add the 'benchmark' subdirectory to the current CMake project. This allows the CMake build system to include the benchmark tests as part of the overall build process.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(benchmark)\n```\n\n----------------------------------------\n\nTITLE: Building Protobuf with CMake\nDESCRIPTION: This macro defines the steps to build the protobuf library. It uses `import_external_library` to import protobuf, sets the protobuf root directory, specifies the library's source and include directories and ensures that it's built in-source.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/libs/CMakeLists.txt#_snippet_22\n\nLANGUAGE: cmake\nCODE:\n```\nmacro(build_protobuf)\n    set(PROTOBUF_ROOT ${CMAKE_CURRENT_SOURCE_DIR}/protobuf/lib)\n    import_external_library(protobuf STATIC\n      ${PROTOBUF_ROOT}/lib/libprotobuf.a\n      ${PROTOBUF_ROOT}/include\n      BUILD_IN_SOURCE 1\n      CONFIGURE_COMMAND true)\nendmacro()\nmg_build_if_needed(build_protobuf \"protobuf\")\n```\n\n----------------------------------------\n\nTITLE: Calling CMake Function to Copy Specific Python Files\nDESCRIPTION: These lines call the `copy_show_metrics_e2e_python_files` function, defined previously, for `common.py` and `show_metrics.py`.  This will copy these python files to the appropriate directory, configured through `copy_e2e_python_files`, for show metrics end-to-end tests.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/show_metrics/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_show_metrics_e2e_python_files(common.py)\ncopy_show_metrics_e2e_python_files(show_metrics.py)\n```\n\n----------------------------------------\n\nTITLE: Defining Unit Tests with Custom Main Function\nDESCRIPTION: This snippet demonstrates how to define a unit test using `add_unit_test_with_custom_main` and link it to the necessary libraries using `target_link_libraries` in a CMake build system. The `add_unit_test_with_custom_main` macro is used when the unit test has its own `main` function and the file must be compiled on its own. The rest of the libraries are linked to this new target by using the command `target_link_libraries`.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/unit/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_unit_test_with_custom_main(storage_v2_property_store.cpp)\ntarget_link_libraries(${test_prefix}storage_v2_property_store mg-storage-v2 fmt)\n```\n\n----------------------------------------\n\nTITLE: Include Source Directory (CMake)\nDESCRIPTION: This snippet includes the `src` directory in the include paths, making the headers in that directory available for compilation. It also adds the `src` directory as a subdirectory to the build.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/CMakeLists.txt#_snippet_43\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(src)\nadd_subdirectory(src)\n```\n\n----------------------------------------\n\nTITLE: Finding Required Packages\nDESCRIPTION: This snippet uses the `find_package` command to locate the `fmt` and `Threads` libraries, which are required dependencies for the Memgraph I/O library. The `REQUIRED` keyword ensures that the configuration will fail if these packages are not found.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/io/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(fmt REQUIRED)\nfind_package(Threads REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Copying Workloads YAML File\nDESCRIPTION: This line calls the `copy_e2e_files` function to copy the `workloads.yaml` file, likely containing test case definitions or configurations, to the relevant directory for end-to-end testing of the text search modules. The function takes the target module (`text_search_modules`) and the file name (`workloads.yaml`) as input.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/text_search_modules/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_e2e_files(text_search_modules workloads.yaml)\n```\n\n----------------------------------------\n\nTITLE: Defining Unit Tests and Linking Libraries with CMake\nDESCRIPTION: This snippet demonstrates how to define a unit test using `add_unit_test` and link it to the necessary libraries using `target_link_libraries` in a CMake build system. The `add_unit_test` macro creates a test target, while `target_link_libraries` specifies the libraries that the test target depends on. The first argument to `target_link_libraries` specifies the target to link, while the rest are the libraries to link to. Note that in some instances, the test utilizes external libraries such as fmt, gflags, Boost, or lib::rangev3.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/unit/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_unit_test(utils_algorithm.cpp)\ntarget_link_libraries(${test_prefix}utils_algorithm mg-utils)\n```\n\n----------------------------------------\n\nTITLE: Building librdkafka with CMake\nDESCRIPTION: This macro defines the steps to build the librdkafka library. It uses `import_external_library`, specifying the library's source, include directories, CMake arguments, and build options.  It then defines librdkafka++ library which depends on librdkafka and links them appropriately.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/libs/CMakeLists.txt#_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\nmacro(build_kafka)\n    import_external_library(librdkafka STATIC\n      ${CMAKE_CURRENT_SOURCE_DIR}/librdkafka/lib/librdkafka.a\n      ${CMAKE_CURRENT_SOURCE_DIR}/librdkafka/include\n      CMAKE_ARGS -DRDKAFKA_BUILD_STATIC=ON\n      -DRDKAFKA_BUILD_EXAMPLES=OFF\n      -DRDKAFKA_BUILD_TESTS=OFF\n      -DWITH_ZSTD=OFF\n      -DENABLE_LZ4_EXT=OFF\n      -DCMAKE_INSTALL_LIBDIR=lib\n      -DWITH_SSL=ON\n      -DWITH_SASL=ON)\n    target_link_libraries(librdkafka INTERFACE ${OPENSSL_LIBRARIES} ZLIB::ZLIB sasl2)\n    import_library(librdkafka++ STATIC\n      ${CMAKE_CURRENT_SOURCE_DIR}/librdkafka/lib/librdkafka++.a\n      ${CMAKE_CURRENT_SOURCE_DIR}/librdkafka/include\n    )\n    target_link_libraries(librdkafka++ INTERFACE librdkafka)\nendmacro()\nmg_build_if_needed(build_kafka \"librdkafka\")\nmg_create_linkable_if_no_cmake(librdkafka STATIC \"${MG_TOOLCHAIN_ROOT}/lib/librdkafka.a\" \"${MG_TOOLCHAIN_ROOT}/include\")\ntarget_link_libraries(librdkafka INTERFACE ${OPENSSL_LIBRARIES} ZLIB::ZLIB sasl2)\nmg_create_linkable_if_no_cmake(librdkafka++ STATIC \"${MG_TOOLCHAIN_ROOT}/lib/librdkafka++.a\" \"${MG_TOOLCHAIN_ROOT}/include\")\ntarget_link_libraries(librdkafka++ INTERFACE librdkafka)\n```\n\n----------------------------------------\n\nTITLE: Creating Executable and Setting Properties in CMake\nDESCRIPTION: This CMake code snippet creates an executable named `${tester_target_name}` from the source file `tester.cpp`. It then sets the output name to `tester` and links the `mg-communication` and `nlohmann_json` libraries. The executable depends on these libraries to compile and run correctly.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/integration/audit/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(${tester_target_name} tester.cpp)\nset_target_properties(${tester_target_name} PROPERTIES OUTPUT_NAME tester)\ntarget_link_libraries(${tester_target_name} mg-communication nlohmann_json::nlohmann_json)\n```\n\n----------------------------------------\n\nTITLE: Installing C++ Query Modules CMake\nDESCRIPTION: This snippet installs the compiled C++ query modules to the specified destination directory `lib/memgraph/query_modules`.  The `TARGETS` parameter specifies the targets built by CMake to install.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/query_modules/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS convert example_c example_cpp schema text_search vector_search pagerank_online\n    community_detection_online katz_centrality_online\n    DESTINATION lib/memgraph/query_modules\n)\n```\n\n----------------------------------------\n\nTITLE: Adding and Linking card_fraud_client Macro Benchmark\nDESCRIPTION: This snippet adds the `card_fraud_client.cpp` as a macro benchmark. It then links necessary libraries such as `mg-communication`, `mg-io`, `mg-utils`, and `nlohmann_json::nlohmann_json`.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/macro_benchmark/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_macro_benchmark(clients/card_fraud_client.cpp)\ntarget_link_libraries(${test_prefix}card_fraud_client mg-communication mg-io mg-utils nlohmann_json::nlohmann_json)\n```\n\n----------------------------------------\n\nTITLE: Call CMake function with various python files\nDESCRIPTION: Calls the `copy_streams_e2e_python_files` CMake function with a list of python file names. The `copy_streams_e2e_python_files` CMake function then uses the `copy_e2e_python_files` function to copy the passed python files to the streams directory. This ensures those python files are available for use.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/streams/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_streams_e2e_python_files(common.py)\ncopy_streams_e2e_python_files(conftest.py)\ncopy_streams_e2e_python_files(kafka_streams_tests.py)\ncopy_streams_e2e_python_files(streams_owner_tests.py)\ncopy_streams_e2e_python_files(pulsar_streams_tests.py)\n```\n\n----------------------------------------\n\nTITLE: Add TTL Unit Test (C++)\nDESCRIPTION: This snippet adds a unit test for the time-to-live (TTL) feature. It links against the `mg-query` library and includes the directory `${CMAKE_SOURCE_DIR}/include`. The test is conditionally included only when `MG_ENTERPRISE` is defined.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/unit/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\nif(MG_ENTERPRISE)\nadd_unit_test(ttl.cpp)\ntarget_link_libraries(${test_prefix}ttl mg-query)\ntarget_include_directories(${test_prefix}ttl PRIVATE ${CMAKE_SOURCE_DIR}/include)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: This snippet sets the minimum required CMake version and configures CMake policies for compatibility and modern behavior.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.12)\ncmake_policy(SET CMP0076 NEW)\ncmake_policy(SET CMP0135 NEW)\n```\n\n----------------------------------------\n\nTITLE: Define CMake Function to Copy Python E2E Files\nDESCRIPTION: This CMake function `copy_show_active_users_info_e2e_python_files` takes a `FILE_NAME` as input and uses the `copy_e2e_python_files` function to copy Python E2E files related to the `show_active_users_info` feature. It relies on the `copy_e2e_python_files` function being defined elsewhere, which handles the actual file copying logic.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/show_active_users_info/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(copy_show_active_users_info_e2e_python_files FILE_NAME)\n    copy_e2e_python_files(show_active_users_info ${FILE_NAME})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting Test Prefix\nDESCRIPTION: Defines a prefix for benchmark target names. This helps to avoid naming conflicts and organize benchmarks.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/benchmark/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(test_prefix memgraph__benchmark__)\n```\n\n----------------------------------------\n\nTITLE: Creating Executable and Linking Libraries\nDESCRIPTION: This snippet creates an executable named `memgraph__e2e__module_file_manager` from the `module_file_manager.cpp` source file. It then links the executable against the gflags, mgclient, mg-utils, mg-io and Threads libraries, providing the necessary functionality for the module file manager.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/module_file_manager/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(memgraph__e2e__module_file_manager module_file_manager.cpp)\ntarget_link_libraries(memgraph__e2e__module_file_manager gflags mgclient mg-utils mg-io Threads::Threads)\n```\n\n----------------------------------------\n\nTITLE: Creating and Linking query_planner Test - CMake\nDESCRIPTION: This calls the `add_manual_test` function to create a test executable named `query_planner` using `query_planner.cpp` and `interactive_planning.cpp`. It links the test executable with the `mg-query` library. The linking with the `readline` library is conditional and depends if the `READLINE_FOUND` variable is true.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/manual/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nadd_manual_test(query_planner.cpp interactive_planning.cpp)\ntarget_link_libraries(${test_prefix}query_planner mg-query)\nif (READLINE_FOUND)\n  target_link_libraries(${test_prefix}query_planner readline)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Copy E2E Files in CMake\nDESCRIPTION: This CMake command uses a custom function `copy_e2e_files` (defined elsewhere) to copy `monitoring_server` and `workloads.yaml` to the appropriate location for end-to-end testing. This function ensures that the necessary files are available at runtime.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/monitoring_server/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_e2e_files(monitoring_server workloads.yaml)\n```\n\n----------------------------------------\n\nTITLE: Installing Systemd Service - CMake\nDESCRIPTION: This snippet installs the memgraph.service file to the /lib/systemd/system directory, enabling Memgraph to be managed as a systemd service. The absolute path to the service file is required for proper installation. This ensures Memgraph can be started, stopped, and managed by systemd.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/release/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES ${CMAKE_CURRENT_SOURCE_DIR}/memgraph.service\n    DESTINATION /lib/systemd/system)\n```\n\n----------------------------------------\n\nTITLE: Match All Nodes Cypher\nDESCRIPTION: This snippet demonstrates how to match all nodes in a Memgraph database. The MATCH (n) clause selects all nodes, and RETURN n; returns them.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tools/tests/client/input/unfinished_query.txt#_snippet_1\n\nLANGUAGE: Cypher\nCODE:\n```\nMATCH (n) RETURN n;\n```\n\n----------------------------------------\n\nTITLE: Creating an executable for garbage collection E2E test\nDESCRIPTION: Creates an executable named `memgraph__e2e__garbage_collection` from the source file `periodic.cpp` and links it against the `mg-storage-v2` library. This executable will perform the end-to-end tests for the garbage collection functionality.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/garbage_collection/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(memgraph__e2e__garbage_collection periodic.cpp)\ntarget_link_libraries(memgraph__e2e__garbage_collection mg-storage-v2)\n```\n\n----------------------------------------\n\nTITLE: Adding and Linking pokec_client Macro Benchmark\nDESCRIPTION: This snippet adds the `pokec_client.cpp` as a macro benchmark. It then links necessary libraries such as `mg-communication`, `mg-io`, `mg-utils`, and `nlohmann_json::nlohmann_json`.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/macro_benchmark/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_macro_benchmark(clients/pokec_client.cpp)\ntarget_link_libraries(${test_prefix}pokec_client mg-communication mg-io mg-utils nlohmann_json::nlohmann_json)\n```\n\n----------------------------------------\n\nTITLE: Define CMake Function to Copy Python Files\nDESCRIPTION: Defines a custom CMake function named `copy_hops_count_e2e_python_files` that takes a filename as input and uses `copy_e2e_python_files` to copy Python files related to 'hops_count' for end-to-end testing. The input `FILE_NAME` specifies the base name for the python file.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/hops_count/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(copy_hops_count_e2e_python_files FILE_NAME)\n    copy_e2e_python_files(hops_count ${FILE_NAME})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configure Test Coverage (CMake)\nDESCRIPTION: This snippet configures the build for test coverage generation. It checks if the build type is Debug and, if not, generates a fatal error. It then adds compiler and linker flags to enable coverage mapping and instrumentation.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/CMakeLists.txt#_snippet_34\n\nLANGUAGE: CMake\nCODE:\n```\nif (TEST_COVERAGE)\n  string(TOLOWER ${CMAKE_BUILD_TYPE} lower_build_type)\n  if (NOT lower_build_type STREQUAL \"debug\")\n    message(FATAL_ERROR \"Generating test coverage unsupported in non Debug builds. Current build type is '${CMAKE_BUILD_TYPE}'\")\n  endif()\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fprofile-instr-generate -fcoverage-mapping\")\n  set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -fprofile-instr-generate -fcoverage-mapping\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Set Include Directories for Katz Centrality Module (CMake)\nDESCRIPTION: This snippet sets the include directories for the Katz centrality module.  `target_include_directories` ensures that the compiler can find necessary header files during compilation.  `CMAKE_CURRENT_SOURCE_DIR` points to the current directory containing the CMakeLists.txt file, making local headers available.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/query_modules/katz_centrality_module/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(katz_centrality_online PRIVATE ${CMAKE_CURRENT_SOURCE_DIR})\n```\n\n----------------------------------------\n\nTITLE: Defining CMake function to copy E2E python files\nDESCRIPTION: Defines a CMake function `copy_query_planning_e2e_python_files` that takes a `FILE_NAME` as input. This function then calls another function `copy_e2e_python_files` with the `query_planning` argument and the provided `FILE_NAME` to copy the relevant files.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/query_planning/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(copy_query_planning_e2e_python_files FILE_NAME)\n    copy_e2e_python_files(query_planning ${FILE_NAME})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Building GTest with CMake\nDESCRIPTION: This macro defines the steps to build Google Test (GTest) as an external project. It configures GTest using CMake arguments and sets paths to the GTest and GMock include directories and libraries. It also creates imported library targets for GTest and GMock.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/libs/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nmacro(build_gtest)\n  add_external_project(gtest SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/googletest\n    CMAKE_ARGS -DCMAKE_INSTALL_LIBDIR=lib)\n  set(GTEST_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/googletest/include\n    CACHE PATH \"Path to gtest and gmock include directory\" FORCE)\n  set(GMOCK_LIBRARY ${CMAKE_CURRENT_SOURCE_DIR}/googletest/lib/libgmock.a\n    CACHE FILEPATH \"Path to gmock library\" FORCE)\n  set(GMOCK_MAIN_LIBRARY ${CMAKE_CURRENT_SOURCE_DIR}/googletest/lib/libgmock_main.a\n    CACHE FILEPATH \"Path to gmock_main library\" FORCE)\n  set(GTEST_LIBRARY ${CMAKE_CURRENT_SOURCE_DIR}/googletest/lib/libgtest.a\n    CACHE FILEPATH \"Path to gtest library\" FORCE)\n  set(GTEST_MAIN_LIBRARY ${CMAKE_CURRENT_SOURCE_DIR}/googletest/lib/libgtest_main.a\n    CACHE FILEPATH \"Path to gtest_main library\" FORCE)\n  mark_as_advanced(GTEST_INCLUDE_DIR GMOCK_LIBRARY GMOCK_MAIN_LIBRARY GTEST_LIBRARY GTEST_MAIN_LIBRARY)\n  import_library(gtest STATIC ${GTEST_LIBRARY} ${GTEST_INCLUDE_DIR} gtest-proj)\n  import_library(gtest_main STATIC ${GTEST_MAIN_LIBRARY} ${GTEST_INCLUDE_DIR} gtest-proj)\n  import_library(gmock STATIC ${GMOCK_LIBRARY} ${GTEST_INCLUDE_DIR} gtest-proj)\n  import_library(gmock_main STATIC ${GMOCK_MAIN_LIBRARY} ${GTEST_INCLUDE_DIR} gtest-proj)\nendmacro()\nmg_build_if_needed(build_gtest \"gtest\")\nmg_create_linkable_if_no_cmake(gtest STATIC \"${MG_TOOLCHAIN_ROOT}/lib/libgtest.a\" \"${MG_TOOLCHAIN_ROOT}/include\")\nmg_create_linkable_if_no_cmake(gtest_main STATIC \"${MG_TOOLCHAIN_ROOT}/lib/libgtest_main.a\" \"${MG_TOOLCHAIN_ROOT}/include\")\nmg_create_linkable_if_no_cmake(gmock STATIC \"${MG_TOOLCHAIN_ROOT}/lib/libgmock.a\" \"${MG_TOOLCHAIN_ROOT}/include\")\nmg_create_linkable_if_no_cmake(gmock_main STATIC \"${MG_TOOLCHAIN_ROOT}/lib/libgmock_main.a\" \"${MG_TOOLCHAIN_ROOT}/include\")\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory for Unit Tests (CMake)\nDESCRIPTION: The `add_subdirectory` command is used to add the 'unit' subdirectory to the current CMake project. This allows the CMake build system to include the unit tests as part of the overall build process.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(unit)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory for Mgbench Tests (CMake)\nDESCRIPTION: The `add_subdirectory` command is used to add the 'mgbench' subdirectory to the current CMake project. This allows the CMake build system to include the mgbench tests as part of the overall build process.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(mgbench)\n```\n\n----------------------------------------\n\nTITLE: Add Coordinator Cluster State Unit Test (C++)\nDESCRIPTION: This code adds a unit test for `coordinator_cluster_state.cpp`. It uses `add_unit_test` to define the test, then `target_link_libraries` to link against `gflags`, `mg-coordination`, and `mg-repl_coord_glue`. Finally, `target_include_directories` sets the include path. It is conditionally included in enterprise builds using `MG_ENTERPRISE`.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/unit/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif(MG_ENTERPRISE)\nadd_unit_test(coordinator_cluster_state.cpp)\ntarget_link_libraries(${test_prefix}coordinator_cluster_state gflags mg-coordination mg-repl_coord_glue)\ntarget_include_directories(${test_prefix}coordinator_cluster_state PRIVATE ${CMAKE_SOURCE_DIR}/include)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Memgraph Enterprise Option\nDESCRIPTION: This snippet defines an option to specify whether to build Memgraph Enterprise Edition. The default is ON. If set to OFF, Memgraph Community is built.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\noption(MG_ENTERPRISE \"Build Memgraph Enterprise Edition\" ON)\n```\n\n----------------------------------------\n\nTITLE: Copying E2E Python Files with CMake\nDESCRIPTION: This CMake snippet uses a custom function `copy_e2e_python_files` to copy several Python files (common.py, conftest.py, multitenancy.py, auth.py) into the replication_experiment directory.  This function likely copies files from source to build directories for testing purposes.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/system_replication/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncopy_e2e_python_files(replication_experiment common.py)\ncopy_e2e_python_files(replication_experiment conftest.py)\ncopy_e2e_python_files(replication_experiment multitenancy.py)\ncopy_e2e_python_files(replication_experiment auth.py)\n```\n\n----------------------------------------\n\nTITLE: Including Directories for Unit Tests\nDESCRIPTION: This snippet demonstrates how to include specific directories for unit tests using `target_include_directories`.  This is necessary when the unit test source code needs access to header files located outside the standard include paths. The `PRIVATE` keyword ensures that the included directories are only used for compiling the specified target (`${test_prefix}cpp_api`).\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/unit/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_unit_test(cpp_api.cpp)\ntarget_link_libraries(${test_prefix}cpp_api mg-query)\ntarget_include_directories(${test_prefix}cpp_api PRIVATE ${CMAKE_SOURCE_DIR}/include)\n```\n\n----------------------------------------\n\nTITLE: Setting up spdlog\nDESCRIPTION: This snippet sets the SPDLOG_FMT_EXTERNAL option to ON and then adds the spdlog subdirectory to the build.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/libs/CMakeLists.txt#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\n# Setup spdlog\nset(SPDLOG_FMT_EXTERNAL ON)\nadd_subdirectory(spdlog)\n```\n\n----------------------------------------\n\nTITLE: Calling CMake Function to Copy Python Files\nDESCRIPTION: These lines call the `copy_filter_info_e2e_python_files` function with specific Python file names (`common.py` and `filter_info.py`) as arguments. The function, as defined above, then uses these file names in conjunction with the `filter_info` directory to locate and copy the corresponding Python files.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/filter_info/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_filter_info_e2e_python_files(common.py)\ncopy_filter_info_e2e_python_files(filter_info.py)\n```\n\n----------------------------------------\n\nTITLE: Add Katz Centrality Online Unit Test (C++)\nDESCRIPTION: This snippet adds a unit test for online Katz centrality calculation. It includes the required source file and defines the necessary include directories. It is conditionally included based on `MG_ENTERPRISE` and avoids linking with the shared library due to missing symbols. The included directories are for the katz centrality module, the main include directory, and mg_utility.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/unit/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\nif(MG_ENTERPRISE)\n  add_unit_test(katz_centrality_online.cpp ${CMAKE_SOURCE_DIR}/query_modules/katz_centrality_module/algorithm/katz.cpp)\n  target_include_directories(${test_prefix}katz_centrality_online PRIVATE\n  ${CMAKE_SOURCE_DIR}/query_modules/katz_centrality_module\n  ${CMAKE_SOURCE_DIR}/include\n  ${CMAKE_SOURCE_DIR}/query_modules/mg_utility)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Compile Commands Export\nDESCRIPTION: This snippet enables the export of compile commands, allowing tools like clang-tidy to be used for static analysis.  It also aids in debugging compilation and linker flags.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/CMakeLists.txt#_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n```\n\n----------------------------------------\n\nTITLE: Define Source Files for Katz Centrality Module (CMake)\nDESCRIPTION: This snippet defines a variable `katz_online_src` that lists the source files needed to build the Katz centrality module. It includes both the main module file and the underlying Katz algorithm implementation. This list is later used to link the source files when building the module.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/query_modules/katz_centrality_module/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(katz_online_src\n    katz_centrality_online_module.cpp\n    algorithm/katz.cpp)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory for Integration Tests (CMake)\nDESCRIPTION: The `add_subdirectory` command is used to add the 'integration' subdirectory to the current CMake project. This allows the CMake build system to include the integration tests as part of the overall build process.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(integration)\n```\n\n----------------------------------------\n\nTITLE: Create Executable: memory_limit_edge_create\nDESCRIPTION: Creates an executable named 'memgraph__e2e__memory__limit_edge_create' from the source file 'memory_limit_edge_create.cpp'. It also links this executable against gflags, mgclient, mg-utils, and mg-io libraries. This likely tests memory limit behavior when creating edges.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/memory/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(memgraph__e2e__memory__limit_edge_create memory_limit_edge_create.cpp)\ntarget_link_libraries(memgraph__e2e__memory__limit_edge_create gflags mgclient mg-utils mg-io)\n```\n\n----------------------------------------\n\nTITLE: Matching Caesar Nodes in Cypher\nDESCRIPTION: This Cypher query matches nodes with the label 'Caesar' and returns them. It specifically targets nodes that were previously created with that label.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tools/tests/client/input/multiline_query_with_comments.txt#_snippet_5\n\nLANGUAGE: Cypher\nCODE:\n```\nMATCH (n:Caesar)\nRETURN n;\n```\n\n----------------------------------------\n\nTITLE: SAML Response XML\nDESCRIPTION: The complete SAML Response XML, including namespaces, assertions, attribute statements and authentication statements. This represents a full SAML response from a service provider.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/sso/data/okta_response.txt#_snippet_11\n\nLANGUAGE: XML\nCODE:\n```\n<saml2p:Response>\n <saml2:Assertion>\n <saml2:AttributeStatement>\n    <saml2:Attribute Name=\"group\"\n                     NameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:uri\">\n      <saml2:AttributeValue xsi:type=\"xs:string\">\n        test-group\n      </saml2:AttributeValue>\n    </saml2:Attribute>\n  </saml2:AttributeStatement>\n  <saml2:AuthnStatement AuthnInstant=\"2024-05-16T15:07:34.408Z\" SessionIndex=\"_6b5fb9873fc484844812e0c88e787b05aa677bdb\">\n    <saml2:AuthnContext>\n      <saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport</saml2:AuthnContextClassRef>\n    </saml2:AuthnContext>\n  </saml2:AuthnStatement>\n </saml2:Assertion>\n</saml2p:Response>\n```\n\n----------------------------------------\n\nTITLE: Copying E2E Python Files (CMake)\nDESCRIPTION: This snippet utilizes a custom CMake function `copy_e2e_python_files` to copy various Python files required for the replication E2E tests into the build directory, specifically files related to replication testing.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/replication/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_e2e_python_files(replication common.py)\ncopy_e2e_python_files(replication conftest.py)\ncopy_e2e_python_files(replication show.py)\ncopy_e2e_python_files(replication show_while_creating_invalid_state.py)\ncopy_e2e_python_files(replication edge_delete.py)\ncopy_e2e_python_files(replication replicate_enum.py)\ncopy_e2e_python_files(replication replicate_periodic_commit.py)\ncopy_e2e_python_files(replication replication_with_property_compression_used.py)\ncopy_e2e_python_files(replication replicate_spatial_feature.py)\ncopy_e2e_python_files(replication replicate_vector_search.py)\ncopy_e2e_python_files(replication switching_roles.py)\ncopy_e2e_python_files(replication ttl.py)\n```\n\n----------------------------------------\n\nTITLE: Build nuraft Library\nDESCRIPTION: This macro `build_nuraft` imports the nuraft static library and include directory using `import_external_library`. It then calls `mg_build_if_needed` to build nuraft if necessary. Afterwards, it creates a linkable target if `CMAKE` is not used and links it to `OpenSSL`.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/libs/CMakeLists.txt#_snippet_29\n\nLANGUAGE: cmake\nCODE:\n```\nmacro(build_nuraft)\n  import_external_library(nuraft STATIC\n    ${CMAKE_CURRENT_SOURCE_DIR}/nuraft/lib/libnuraft.a\n    ${CMAKE_CURRENT_SOURCE_DIR}/nuraft/include/)\nendmacro()\nmg_build_if_needed(build_nuraft \"nuraft\")\nmg_create_linkable_if_no_cmake(nuraft STATIC \"${MG_TOOLCHAIN_ROOT}/lib/libnuraft.a\" \"${MG_TOOLCHAIN_ROOT}/include\")\nfind_package(OpenSSL REQUIRED)\ntarget_link_libraries(nuraft INTERFACE ${OPENSSL_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Define CMake Function to Copy Batched Procedures E2E Python Files\nDESCRIPTION: Defines a CMake function `copy_batched_procedures_e2e_python_files` that takes a `FILE_NAME` as input. This function uses the `copy_e2e_python_files` function (assumed to be defined elsewhere) to copy the specified Python file into the `batched_procedures` directory. The function helps in organizing the E2E test setup by automating the copying of relevant Python files.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/batched_procedures/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(copy_batched_procedures_e2e_python_files FILE_NAME)\n    copy_e2e_python_files(batched_procedures ${FILE_NAME})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Calling CMake Function to Copy YAML File\nDESCRIPTION: This line calls the `copy_e2e_files` function to copy a YAML file named `workloads.yaml` located within the `filter_info` directory. This suggests that `copy_e2e_files` function is more general and can handle different file types, while `copy_e2e_python_files` is specifically tailored for Python files. It assumes that `copy_e2e_files` is defined elsewhere.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/filter_info/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_e2e_files(filter_info workloads.yaml)\n```\n\n----------------------------------------\n\nTITLE: Calling the function to copy edge_indices.py\nDESCRIPTION: Calls the CMake function `copy_edge_indices_e2e_python_files` to copy the `edge_indices.py` file. This file likely contains the main logic or implementation for working with edge indices in the E2E tests.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/edge_indices/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncopy_edge_indices_e2e_python_files(edge_indices.py)\n```\n\n----------------------------------------\n\nTITLE: Add MG_ENTERPRISE Definition (CMake)\nDESCRIPTION: This snippet adds the `MG_ENTERPRISE` preprocessor definition if the `MG_ENTERPRISE` variable is defined. This likely enables enterprise-specific features in the code.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/CMakeLists.txt#_snippet_35\n\nLANGUAGE: CMake\nCODE:\n```\nif (MG_ENTERPRISE)\n  add_definitions(-DMG_ENTERPRISE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Copying Python files for garbage collection E2E tests\nDESCRIPTION: Calls the defined CMake function `copy_garbage_collection_e2e_python_files` to copy `common.py` and `gc_on_obsolete_indexes.py` to the garbage collection E2E test directory. These Python files likely contain helper functions and test cases used during the tests.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/garbage_collection/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_garbage_collection_e2e_python_files(common.py)\ncopy_garbage_collection_e2e_python_files(gc_on_obsolete_indexes.py)\n```\n\n----------------------------------------\n\nTITLE: Add Coordinator Instance Context Unit Test (C++)\nDESCRIPTION: This snippet sets up a unit test for `coordinator_instance_context.cpp`, linking it against `gflags` and `mg-coordination`. It also includes the directory `${CMAKE_SOURCE_DIR}/include`. The test is conditionally added based on the `MG_ENTERPRISE` flag, ensuring it's only part of enterprise builds.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/unit/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nif(MG_ENTERPRISE)\nadd_unit_test(coordinator_instance_context.cpp)\ntarget_link_libraries(${test_prefix}coordinator_instance_context gflags mg-coordination)\ntarget_include_directories(${test_prefix}coordinator_instance_context PRIVATE ${CMAKE_SOURCE_DIR}/include)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Add Custom Target for Generated Code (CMake)\nDESCRIPTION: This snippet creates a custom target called `generated_code` that depends on other targets that generate code (e.g., `generate_opencypher_parser`, `mgcxx-proj`).  The specific dependencies vary depending on the `MG_TOOLCHAIN_VERSION` environment variable. This ensures that the generated code targets are built before anything that depends on them. NOTE: The logic inside the if statement is based on checking the environment variable MG_TOOLCHAIN_VERSION.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/CMakeLists.txt#_snippet_47\n\nLANGUAGE: CMake\nCODE:\n```\nif(DEFINED ENV{MG_TOOLCHAIN_VERSION})\n  if($ENV{MG_TOOLCHAIN_VERSION} GREATER_EQUAL 6)\n    # NOTE: The rest of the generated code should already under toolchain.\n    add_custom_target(generated_code DEPENDS\n        generate_opencypher_parser\n    )\n  else()\n    add_custom_target(generated_code DEPENDS\n        generate_opencypher_parser\n        mgcxx-proj\n        librdkafka-proj\n        antlr4-proj\n        librdtsc-proj\n        pulsar-proj\n    )\n  endif()\nelse()\n  add_custom_target(generated_code DEPENDS\n      generate_opencypher_parser\n      mgcxx-proj\n      librdkafka-proj\n      antlr4-proj\n      librdtsc-proj\n      pulsar-proj\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Copy E2E Files\nDESCRIPTION: Copies E2E files for execution query modules, specifically the `workloads.yaml` file.  The `copy_e2e_files` function is called with the destination directory `execution_query_modules` and the file name `workloads.yaml`.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/execution_query_modules/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_e2e_files(execution_query_modules workloads.yaml)\n```\n\n----------------------------------------\n\nTITLE: Set Release Compiler Flags (CMake)\nDESCRIPTION: This snippet sets the compiler flags for release builds, enabling optimizations (-O2) and disabling debug assertions (NDEBUG).\nSOURCE: https://github.com/memgraph/memgraph/blob/master/CMakeLists.txt#_snippet_25\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_CXX_FLAGS_RELEASE \"-O2 -DNDEBUG\")\n```\n\n----------------------------------------\n\nTITLE: Copying E2E Files Using copy_e2e_files Function\nDESCRIPTION: The `copy_e2e_files` function is called to copy the `workloads.yaml` file for the set_properties E2E tests. This suggests that `workloads.yaml` contains the workload configurations needed for the tests.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/set_properties/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_e2e_files(set_properties workloads.yaml)\n```\n\n----------------------------------------\n\nTITLE: Create Executable: memory_limit_delete\nDESCRIPTION: Creates an executable named 'memgraph__e2e__memory__limit_delete' from the source file 'memory_limit_delete.cpp'. It also links this executable against gflags, mgclient, mg-utils, and mg-io libraries. This likely tests memory limit behavior during deletion operations.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/memory/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(memgraph__e2e__memory__limit_delete memory_limit_delete.cpp)\ntarget_link_libraries(memgraph__e2e__memory__limit_delete gflags mgclient mg-utils mg-io)\n```\n\n----------------------------------------\n\nTITLE: Creating Plinius Node with Quote (Cypher)\nDESCRIPTION: This code snippet demonstrates the creation of a node labeled 'Plinius' with a property named 'quote' set to the value 'In vino veritas'.  It's likely used in a Cypher query language to populate a graph database with nodes representing historical figures and their quotes.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tools/tests/client/output_csv/unfinished_query.txt#_snippet_2\n\nLANGUAGE: Cypher\nCODE:\n```\n(:Plinius {quote: \"In vino veritas\"})\n```\n\n----------------------------------------\n\nTITLE: Dataset Generator Example\nDESCRIPTION: This code shows an example implementation of the `dataset_generator` method. It creates 100 nodes with label `NodeA`, 100 nodes with label `NodeB`, and 300 edges connecting them randomly.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/mgbench/how_to_use_benchgraph.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef dataset_generator(self):\n\n    for i in range(0, 100):\n        queries.append((\"CREATE (:NodeA {id: $id});\", {\"id\" : i}))\n        queries.append((\"CREATE (:NodeB {id: $id});\", {\"id\" : i}))\n    for i in range(0, 300):\n        a = random.randint(0, 99)\n        b = random.randint(0, 99)\n        queries.append(((\"MATCH(a:NodeA {id: $A_id}),(b:NodeB{id: $B_id}) CREATE (a)-[:EDGE]->(b)\"), {\"A_id\": a, \"B_id\" : b}))\n\n    return queries\n```\n\n----------------------------------------\n\nTITLE: Add Executable and Link Libraries (CMake)\nDESCRIPTION: This CMake command creates an executable named memgraph__e2e__temporal_roundtrip from roundtrip.cpp and links it with the mgclient, mg-utils, and gflags libraries. The `PUBLIC` keyword ensures that these libraries are also available to other targets that link against this target.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/temporal_types/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(memgraph__e2e__temporal_roundtrip roundtrip.cpp)\ntarget_link_libraries(memgraph__e2e__temporal_roundtrip PUBLIC mgclient mg-utils gflags)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory with CMake\nDESCRIPTION: This CMake command adds the specified directory ('test_functions_dir') to the build. This allows the CMake project to discover and include the CMakeLists.txt file within that subdirectory, making its contents (in this case, test functions) part of the overall project build process. The subdirectory 'test_functions_dir' must contain a CMakeLists.txt file.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/python_query_modules_reloading/procedures/mage/test_module/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(test_functions_dir)\n```\n\n----------------------------------------\n\nTITLE: Building libbcrypt with CMake\nDESCRIPTION: This macro defines the steps to build the libbcrypt library. It uses `import_external_library`, specifying the library's source, include directories, configure command to modify the Makefile (removing -Wcast-align), and a build command.  It also handles compiler settings and avoids installation.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/libs/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\nmacro(build_bcrypt)\n  import_external_library(libbcrypt STATIC\n    ${CMAKE_CURRENT_SOURCE_DIR}/libbcrypt/bcrypt.a\n    ${CMAKE_CURRENT_SOURCE_DIR}\n    CONFIGURE_COMMAND sed s/-Wcast-align// -i ${CMAKE_CURRENT_SOURCE_DIR}/libbcrypt/crypt_blowfish/Makefile\n    BUILD_COMMAND make -C ${CMAKE_CURRENT_SOURCE_DIR}/libbcrypt\n    CC=${CMAKE_C_COMPILER}\n    CXX=${CMAKE_CXX_COMPILER}\n    INSTALL_COMMAND true)\nendmacro()\nmg_build_if_needed(build_bcrypt \"bcrypt\")\nmg_create_linkable_if_no_cmake(libbcrypt STATIC\n  \"${MG_TOOLCHAIN_ROOT}/lib/bcrypt.a\"\n  \"${MG_TOOLCHAIN_ROOT}/include\"\n)\n```\n\n----------------------------------------\n\nTITLE: Calling CMake Function to Copy Specific Python Files\nDESCRIPTION: These lines call the `copy_text_search_modules_e2e_python_files` function with specific Python file names as arguments. This results in these files being copied to the appropriate directory for end-to-end testing of the text search modules. The files being copied are `common.py`, `test_text_search.py`, and `test_text_search_disabled.py`.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/text_search_modules/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_text_search_modules_e2e_python_files(common.py)\ncopy_text_search_modules_e2e_python_files(test_text_search.py)\ncopy_text_search_modules_e2e_python_files(test_text_search_disabled.py)\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring mg-events Library (CMake)\nDESCRIPTION: Creates a static library named `mg-events` and configures its source files and linking options. The library source files consist of event-related components, and it links against `mg-utils` and `nlohmann_json::nlohmann_json`.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/utils/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(mg-events STATIC)\ntarget_sources(mg-events\n    PRIVATE\n    event_counter.cpp\n    event_gauge.cpp\n    event_histogram.cpp\n    event_trigger.cpp\n    event_map.cpp\n)\ntarget_link_libraries(mg-events mg-utils nlohmann_json::nlohmann_json)\n```\n\n----------------------------------------\n\nTITLE: Version Override Variables\nDESCRIPTION: This snippet defines variables to override the automatic version detection for Memgraph. MEMGRAPH_OVERRIDE_VERSION specifies the version as X.Y.Z, and MEMGRAPH_OVERRIDE_VERSION_SUFFIX adds a custom suffix.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nset(MEMGRAPH_OVERRIDE_VERSION \"\")\n\n# Custom suffix that this version should have. The suffix can be any arbitrary\n# string. Primarily used when building a version for a specific customer.\nset(MEMGRAPH_OVERRIDE_VERSION_SUFFIX \"\")\n```\n\n----------------------------------------\n\nTITLE: Copy Specific Python Files with CMake\nDESCRIPTION: These commands use the defined CMake function `copy_analyze_graph_e2e_python_files` to copy specific Python files ('common.py', 'optimize_indexes.py') for end-to-end (E2E) testing in the analyze graph functionality.  It uses the previously defined CMake function to facilitate copying of these files.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/analyze_graph/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_analyze_graph_e2e_python_files(common.py)\ncopy_analyze_graph_e2e_python_files(optimize_indexes.py)\n```\n\n----------------------------------------\n\nTITLE: Configuring CSV Import Tool CMake\nDESCRIPTION: This configures the `mg_import_csv` executable, linking it against the `mg-storage-v2` and `mg-dbms` libraries. It also includes a post-build command to strip symbols in release builds, and sets the installation destination to the `bin` directory.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(mg_import_csv mg_import_csv.cpp)\ntarget_link_libraries(mg_import_csv mg-storage-v2 mg-dbms)\n\n# Strip the executable in release build.\nif(lower_build_type STREQUAL \"release\")\n        add_custom_command(TARGET mg_import_csv POST_BUILD\n                COMMAND strip -s mg_import_csv\n                COMMENT \"Stripping symbols and sections from mg_import_csv\")\nendif()\n\ninstall(TARGETS mg_import_csv RUNTIME DESTINATION bin)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Variables\nDESCRIPTION: This snippet defines CMake variables for the target names of the main test, tester executable, and filtering executable.  These variables are used to consistently refer to these targets throughout the CMake configuration.  The variables are `target_name`, `tester_target_name`, and `filtering_target_name`.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/integration/fine_grained_access/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(target_name memgraph__integration__fine_grained_access)\nset(tester_target_name ${target_name}__tester)\nset(filtering_target_name ${target_name}__filtering)\n```\n\n----------------------------------------\n\nTITLE: Setup croncpp with CMake\nDESCRIPTION: This snippet adds the croncpp subdirectory to the build process, excluding it from the ALL target. This ensures that the croncpp library is built as part of the overall project build.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/libs/CMakeLists.txt#_snippet_33\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(croncpp EXCLUDE_FROM_ALL)\n```\n\n----------------------------------------\n\nTITLE: Add Subdirectory for Procedures\nDESCRIPTION: Adds a subdirectory named 'procedures' to the build process. This is crucial for organizing the project structure and ensuring that the procedures directory is included in the build. It helps in managing and isolating the procedure-related source code.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/write_procedures/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(procedures)\n```\n\n----------------------------------------\n\nTITLE: Copy E2E Files for Enterprise Query Modules\nDESCRIPTION: This CMake command uses the `copy_e2e_files` function to copy the `workloads.yaml` file for the enterprise query modules E2E tests. The function presumably handles copying the file to the appropriate location within the build directory.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/enterprise_query_modules/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_e2e_files(enterprise_query_modules workloads.yaml)\n```\n\n----------------------------------------\n\nTITLE: Match Vertex in Memgraph (Cypher)\nDESCRIPTION: This query matches vertices with the label 'Vertex' in the Memgraph database. The 'MATCH' keyword is used to find the vertices, and the 'RETURN' keyword returns the matched vertices.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tools/tests/client/input/query_per_line.txt#_snippet_3\n\nLANGUAGE: Cypher\nCODE:\n```\nMATCH (n:Vertex) RETURN n;\n```\n\n----------------------------------------\n\nTITLE: Adding Executable and Linking Libraries in CMake\nDESCRIPTION: This snippet adds an executable named 'tester' based on the 'tester.cpp' source file. It then sets the output name to 'tester' and links it against 'mg-communication', 'mg-io', and 'mg-utils' libraries, which are presumably Memgraph-related libraries.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/integration/ssl/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${tester_target_name} tester.cpp)\nset_target_properties(${tester_target_name} PROPERTIES OUTPUT_NAME tester)\ntarget_link_libraries(${tester_target_name} mg-communication mg-io mg-utils)\n```\n\n----------------------------------------\n\nTITLE: Copying E2E Python Files from Parent with CMake\nDESCRIPTION: This CMake snippet employs `copy_e2e_python_files_from_parent_folder` to copy Python files (memgraph.py, interactive_mg_runner.py, mg_utils.py) from the parent directory into the replication_experiment directory. The function likely handles relative path traversal to locate and copy the specified files.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/system_replication/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncopy_e2e_python_files_from_parent_folder(replication_experiment \"..\" memgraph.py)\ncopy_e2e_python_files_from_parent_folder(replication_experiment \"..\" interactive_mg_runner.py)\ncopy_e2e_python_files_from_parent_folder(replication_experiment \"..\" mg_utils.py)\n```\n\n----------------------------------------\n\nTITLE: Add Coordinator Env Flag Handler Unit Test (C++)\nDESCRIPTION: This snippet adds a unit test for the coordinator environment flag handler, linking it with the `gflags` and `mg-flags` libraries. It also sets the include directories and is included only in enterprise builds based on the `MG_ENTERPRISE` flag.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/unit/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nif(MG_ENTERPRISE)\nadd_unit_test(coordinator_env_flag_handler.cpp)\ntarget_link_libraries(${test_prefix}coordinator_env_flag_handler gflags mg-flags)\ntarget_include_directories(${test_prefix}coordinator_env_flag_handler PRIVATE ${CMAKE_SOURCE_DIR}/include)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Running Memgraph GQL Behave Tests\nDESCRIPTION: This snippet shows how to execute the Memgraph GQL Behave Tests. It requires navigating to the `memgraph/tests/gql_behave` directory, activating the virtual environment, and then running the `run.py` script with the desired test suite as a positional argument. An example execution is provided for the `memgraph_V1` test suite.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/gql_behave/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd memgraph/tests/gql_behave\nsource ve3/bin/activate\n./run.py --help\n./run.py memgraph_V1\n```\n\n----------------------------------------\n\nTITLE: Setting Executable Linker Flags\nDESCRIPTION: This snippet configures the linker flags for executables to statically link libgcc and libstdc++. This is permissible under the GCC license and ensures that the executables do not depend on shared versions of these libraries at runtime. It's crucial to verify the licensing when updating GCC versions.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/CMakeLists.txt#_snippet_21\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -static-libgcc -static-libstdc++\")\n```\n\n----------------------------------------\n\nTITLE: Add Coordinator State Manager Unit Test (C++)\nDESCRIPTION: This snippet adds a unit test for the coordinator state manager. It links the test executable with the `gflags`, `mg-coordination`, and `mg-repl_coord_glue` libraries. The include directory is set to `${CMAKE_SOURCE_DIR}/include`. It is conditionally included in enterprise builds.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/unit/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nif(MG_ENTERPRISE)\n  add_unit_test(coordinator_state_manager.cpp)\n  target_link_libraries(${test_prefix}coordinator_state_manager gflags mg-coordination mg-repl_coord_glue)\n  target_include_directories(${test_prefix}coordinator_state_manager PRIVATE ${CMAKE_SOURCE_DIR}/include)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Copy End-to-End Files\nDESCRIPTION: Calls the `copy_e2e_files` macro with `write_procedures` and `workloads.yaml` as arguments. This copies the workloads.yaml file, likely containing configuration or test data, to the location required for end-to-end testing of write procedures. It ensures that the necessary data files are available during testing.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/write_procedures/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ncopy_e2e_files(write_procedures workloads.yaml)\n```\n\n----------------------------------------\n\nTITLE: Defining CMake Function to Copy E2E Python Files\nDESCRIPTION: This CMake function, `copy_show_license_info_e2e_python_files`, takes a `FILE_NAME` as input and uses the `copy_e2e_python_files` function (which is assumed to be defined elsewhere) to copy the specified Python file for the `show_license_info` feature. It encapsulates the copying logic for easier reuse.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/show_license_info/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(copy_show_license_info_e2e_python_files FILE_NAME)\n  copy_e2e_python_files(show_license_info ${FILE_NAME})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Building librdtsc with CMake\nDESCRIPTION: This macro defines the steps to build the librdtsc library. It sets architecture-specific CMake arguments based on the `MG_ARCH` variable, then imports the librdtsc library using `import_external_library`, specifying the source, include directories, CMake arguments, and build command.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/libs/CMakeLists.txt#_snippet_24\n\nLANGUAGE: cmake\nCODE:\n```\nmacro(build_librdtsc)\n  if(${MG_ARCH} STREQUAL \"ARM64\")\n    set(MG_LIBRDTSC_CMAKE_ARGS -DLIBRDTSC_ARCH_x86=OFF -DLIBRDTSC_ARCH_ARM64=ON)\n  endif()\n  import_external_library(librdtsc STATIC\n    ${CMAKE_CURRENT_SOURCE_DIR}/librdtsc/lib/librdtsc.a\n    ${CMAKE_CURRENT_SOURCE_DIR}/librdtsc/include\n    CMAKE_ARGS ${MG_LIBRDTSC_CMAKE_ARGS}\n    BUILD_COMMAND $(MAKE) rdtsc)\nendmacro()\nmg_build_if_needed(build_librdtsc \"librdtsc\")\nmg_create_linkable_if_no_cmake(librdtsc STATIC \"${MG_TOOLCHAIN_ROOT}/lib/librdtsc.a\" \"${MG_TOOLCHAIN_ROOT}/include\")\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target in CMake\nDESCRIPTION: Adds a custom target named `memgraph__concurrent`. This target doesn't perform any specific build actions directly but can serve as a dependency for other targets, ensuring that the associated tests are built and executed when this target is built.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/concurrent/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_target(memgraph__concurrent)\n```\n\n----------------------------------------\n\nTITLE: Creating and Aliasing the mg-flags Library (CMake)\nDESCRIPTION: This snippet creates a static library named `mg-flags` and defines an alias `mg::flags` for it. This allows for easier referencing of the library in other parts of the project.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/flags/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(mg-flags STATIC)\nadd_library(mg::flags ALIAS mg-flags)\n```\n\n----------------------------------------\n\nTITLE: Calling CMake function to copy specific Python files\nDESCRIPTION: These lines call the `copy_dynamic_variable_creation_e2e_python_files` function with specific Python filenames (`common.py` and `dynamic_variable_creation.py`) as arguments. This copies these files to the appropriate location for end-to-end testing.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/dynamic_variable_creation/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_dynamic_variable_creation_e2e_python_files(common.py)\ncopy_dynamic_variable_creation_e2e_python_files(dynamic_variable_creation.py)\n```\n\n----------------------------------------\n\nTITLE: Importing cppitertools Header Library\nDESCRIPTION: This snippet uses the `import_header_library` macro to import the cppitertools header library.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/libs/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\n# Setup cppitertools\nimport_header_library(cppitertools ${CMAKE_CURRENT_SOURCE_DIR})\n```\n\n----------------------------------------\n\nTITLE: Executing DEB Version Script\nDESCRIPTION: This snippet executes a Python script to retrieve the Memgraph DEB package version. It passes the '--variant deb' option along with other version-related parameters. The output is stored in MEMGRAPH_VERSION_DEB. It also checks for errors and displays the version.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\n# Get version that should be used in the DEB package.\nexecute_process(\n    OUTPUT_VARIABLE MEMGRAPH_VERSION_DEB\n    RESULT_VARIABLE MEMGRAPH_VERSION_DEB_RESULT\n    COMMAND \"${get_version_script}\" ${get_version_offering}\n                --variant deb\n                \"${MEMGRAPH_OVERRIDE_VERSION}\"\n                \"${MEMGRAPH_OVERRIDE_VERSION_SUFFIX}\"\n                \"--memgraph-root-dir\"\n                \"${CMAKE_CURRENT_SOURCE_DIR}\"\n)\nif(MEMGRAPH_VERSION_DEB_RESULT AND NOT MEMGRAPH_VERSION_DEB_RESULT EQUAL 0)\n    message(FATAL_ERROR \"Unable to get Memgraph DEB version.\")\nelse()\n    MESSAGE(STATUS \"Memgraph DEB version: ${MEMGRAPH_VERSION_DEB}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Finding Boost Package with CMake\nDESCRIPTION: This CMake command uses `find_package` to locate the Boost library. `REQUIRED` enforces that the configuration process fails if Boost is not found. `CONFIG` hints that CMake should use the package's config file for finding the components.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/server/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Boost REQUIRED CONFIG)\n```\n\n----------------------------------------\n\nTITLE: Adding profile Benchmark\nDESCRIPTION: Adds the `profile` benchmark. Links the executable with the `mg-query` library.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/benchmark/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_benchmark(query/profile.cpp)\ntarget_link_libraries(${test_prefix}profile mg-query)\n```\n\n----------------------------------------\n\nTITLE: Copying E2E Files with CMake\nDESCRIPTION: This CMake snippet utilizes the `copy_e2e_files` function to copy the workloads.yaml file into the replication_experiment directory. This likely handles the transfer of configuration files required for the end-to-end tests.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/system_replication/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ncopy_e2e_files(replication_experiment workloads.yaml)\n```\n\n----------------------------------------\n\nTITLE: Create Executable: procedure_memory_limit_multi_proc\nDESCRIPTION: Creates an executable named 'memgraph__e2e__procedure_memory_limit_multi_proc' from the source file 'procedure_memory_limit_multi_proc.cpp'. It also links this executable against gflags, mgclient, mg-utils, and mg-io libraries. This tests procedure memory limits using multiple processes.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/memory/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(memgraph__e2e__procedure_memory_limit_multi_proc procedure_memory_limit_multi_proc.cpp)\ntarget_link_libraries(memgraph__e2e__procedure_memory_limit_multi_proc gflags mgclient mg-utils mg-io)\n```\n\n----------------------------------------\n\nTITLE: Create Executable: query_memory_limit_proc_multi_thread\nDESCRIPTION: Creates an executable named 'memgraph__e2e__memory__limit_query_alloc_proc_multi_thread' from the source file 'query_memory_limit_proc_multi_thread.cpp'. It also links this executable against gflags, mgclient, mg-utils, mg-io, and Threads::Threads libraries. This tests query memory allocation limits in procedures using multiple threads.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/memory/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(memgraph__e2e__memory__limit_query_alloc_proc_multi_thread query_memory_limit_proc_multi_thread.cpp)\ntarget_link_libraries(memgraph__e2e__memory__limit_query_alloc_proc_multi_thread gflags mgclient mg-utils mg-io Threads::Threads)\n```\n\n----------------------------------------\n\nTITLE: Create Executable: memory_control\nDESCRIPTION: Creates an executable named 'memgraph__e2e__memory__control' from the source file 'memory_control.cpp'. It also links this executable against gflags, mgclient, mg-utils, mg-io, and Threads::Threads libraries.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/memory/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(memgraph__e2e__memory__control memory_control.cpp)\ntarget_link_libraries(memgraph__e2e__memory__control gflags mgclient mg-utils mg-io Threads::Threads)\n```\n\n----------------------------------------\n\nTITLE: Create Executable: query_memory_limit_create\nDESCRIPTION: Creates an executable named 'memgraph__e2e__memory__limit_query_alloc_create' from the source file 'query_memory_limit_create.cpp'. It also links this executable against gflags, mgclient, mg-utils, and mg-io libraries. This tests query memory allocation limits during create operations.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/memory/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(memgraph__e2e__memory__limit_query_alloc_create query_memory_limit_create.cpp)\ntarget_link_libraries(memgraph__e2e__memory__limit_query_alloc_create gflags mgclient mg-utils mg-io)\n```\n\n----------------------------------------\n\nTITLE: Create Executable: memory_limit_global_alloc\nDESCRIPTION: Creates an executable named 'memgraph__e2e__memory__limit_global_alloc' from the source file 'memory_limit_global_alloc.cpp'. It also links this executable against gflags, mgclient, mg-utils, mg-io, and Threads::Threads libraries. This tests global memory allocation limits.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/memory/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(memgraph__e2e__memory__limit_global_alloc memory_limit_global_alloc.cpp)\ntarget_link_libraries(memgraph__e2e__memory__limit_global_alloc gflags mgclient mg-utils mg-io Threads::Threads)\n```\n\n----------------------------------------\n\nTITLE: Create Executable: memory_limit_accumulation\nDESCRIPTION: Creates an executable named 'memgraph__e2e__memory__limit_accumulation' from the source file 'memory_limit_accumulation.cpp'. It also links this executable against gflags, mgclient, mg-utils, and mg-io libraries. This likely tests memory limit behavior with accumulated allocations.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/memory/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(memgraph__e2e__memory__limit_accumulation memory_limit_accumulation.cpp)\ntarget_link_libraries(memgraph__e2e__memory__limit_accumulation gflags mgclient mg-utils mg-io)\n```\n\n----------------------------------------\n\nTITLE: Create Executable: memory_limit_global_thread_alloc_proc\nDESCRIPTION: Creates an executable named 'memgraph__e2e__memory_limit_global_thread_alloc_proc' from the source file 'memory_limit_global_thread_alloc_proc.cpp'. It also links this executable against gflags, mgclient, mg-utils, and mg-io libraries. This tests global thread allocation limits within procedures.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/memory/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(memgraph__e2e__memory_limit_global_thread_alloc_proc memory_limit_global_thread_alloc_proc.cpp)\ntarget_link_libraries(memgraph__e2e__memory_limit_global_thread_alloc_proc gflags mgclient mg-utils mg-io)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory for Concurrent Tests (CMake)\nDESCRIPTION: The `add_subdirectory` command is used to add the 'concurrent' subdirectory to the current CMake project. This allows the CMake build system to include the concurrent tests as part of the overall build process.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(concurrent)\n```\n\n----------------------------------------\n\nTITLE: Project Definition\nDESCRIPTION: This snippet defines the Memgraph project with C and C++ languages. It sets the CMAKE_BUILD_RPATH_USE_ORIGIN property to ON, reducing issues with build folders inside containers.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nproject(memgraph LANGUAGES C CXX)\n\n# this reduces issues in build folders from inside containers\n# which are different locations than the host\nset(CMAKE_BUILD_RPATH_USE_ORIGIN ON)\n```\n\n----------------------------------------\n\nTITLE: Running a Specific LDBC Test\nDESCRIPTION: This snippet demonstrates how to run a specific LDBC test using Maven within the Neo4j implementation. It requires navigating to the correct directory and executing a Maven command with specific arguments for the test class, query, repeat count, and time units.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/public_benchmark/ldbc/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd memgraph/tests/public_benchmark/ldbc/ldbc-snb-impls/snb-interactive-neo4j\nmvn exec:java -Dexec.mainClass=\"net.ellitron.ldbcsnbimpls.interactive.neo4j.util.QueryTester\" -Dexec.args=\"shortquery1 933 --repeat=10000 --timeUnits=MICROSECONDS\"\n```\n\n----------------------------------------\n\nTITLE: Building Checker Executable with CMake\nDESCRIPTION: Adds an executable target named 'checker' from the 'checker.cpp' source file. It then sets the output name to 'checker' and links it against the 'mg-communication' library, ensuring that the necessary communication functionalities are available.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/integration/auth/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${checker_target_name} checker.cpp)\nset_target_properties(${checker_target_name} PROPERTIES OUTPUT_NAME checker)\ntarget_link_libraries(${checker_target_name} mg-communication)\n```\n\n----------------------------------------\n\nTITLE: Link Kafka Integration Library Dependencies (CMake)\nDESCRIPTION: This snippet links the `mg-integrations-kafka` library with its dependencies: `mg-utils`, `librdkafka++`, `librdkafka`, and `Threads`.  These dependencies provide necessary functionalities for the Kafka integration, such as utility functions, Kafka client functionalities, and thread management.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/integrations/kafka/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(mg-integrations-kafka mg-utils librdkafka++ librdkafka Threads::Threads)\n```\n\n----------------------------------------\n\nTITLE: Importing RocksDB External Library\nDESCRIPTION: This snippet imports the RocksDB library as an external library, specifying its source directory, include directory, and CMake arguments.  It configures RocksDB with specific options and defines a build command.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/libs/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nimport_external_library(rocksdb STATIC\n  ${CMAKE_CURRENT_SOURCE_DIR}/rocksdb/lib/librocksdb.a\n  ${CMAKE_CURRENT_SOURCE_DIR}/rocksdb/include\n  CMAKE_ARGS -DUSE_RTTI=ON\n    -DWITH_TESTS=OFF\n    -DGFLAGS_NOTHREADS=OFF\n    -DCMAKE_INSTALL_LIBDIR=lib\n    -DCMAKE_SKIP_INSTALL_ALL_DEPENDENCY=true\n    -DPORTABLE=ON\n  BUILD_COMMAND $(MAKE) rocksdb)\n```\n\n----------------------------------------\n\nTITLE: Create Static Library for Triggers CMake\nDESCRIPTION: Creates a static library named `memgraph__e2e__triggers_common` from the source files `common.hpp` and `common.cpp`.  It then links the library to `gflags`, `mgclient`, and `mg-utils` using `target_link_libraries`, making these dependencies available to the library.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/triggers/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(memgraph__e2e__triggers_common STATIC common.hpp common.cpp)\ntarget_link_libraries(memgraph__e2e__triggers_common PUBLIC gflags mgclient mg-utils)\n```\n\n----------------------------------------\n\nTITLE: SAML Attribute Statement\nDESCRIPTION: This XML snippet represents an attribute statement within the SAML assertion, containing attributes about the user. The attribute is 'groups' with value 'test-admin'.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/sso/data/okta_response.txt#_snippet_7\n\nLANGUAGE: XML\nCODE:\n```\n  <saml2:AttributeStatement xmlns:saml2=\"urn:oasis:names:tc:SAML:2.0:assertion\">\n   <saml2:Attribute Name=\"groups\" NameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:unspecified\">\n    <saml2:AttributeValue xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:type=\"xs:string\">\n     test-admin\n    </saml2:AttributeValue>\n    <saml2:AttributeValue xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:type=\"xs:string\">\n```\n\n----------------------------------------\n\nTITLE: Adding Executable and Setting Properties in CMake\nDESCRIPTION: This snippet adds an executable named `client` built from `client.cpp`. It then renames the output executable to `client` using `set_target_properties`. This ensures a consistent naming scheme for the built executable. This configures the final name of the executable file.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/integration/telemetry/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(${client_target_name} client.cpp)\nset_target_properties(${client_target_name} PROPERTIES OUTPUT_NAME client)\n```\n\n----------------------------------------\n\nTITLE: Define CMake Function to Copy Python Files\nDESCRIPTION: This CMake function, `copy_query_modules_reloading_procedures_e2e_python_files`, takes a filename as input and then uses a pre-existing CMake function `copy_e2e_python_files` to copy the specified Python file. It assumes that `copy_e2e_python_files` is already defined elsewhere in the CMake configuration.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/transaction_queue/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(copy_query_modules_reloading_procedures_e2e_python_files FILE_NAME)\n    copy_e2e_python_files(transaction_queue ${FILE_NAME})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Define CMake Macro for Copying Python Files\nDESCRIPTION: Defines a CMake macro `copy_execution_query_modules_e2e_python_files` that calls `copy_e2e_python_files` to copy Python files related to execution query modules. This macro takes the file name as input and uses it to copy the file to the appropriate destination using `copy_e2e_python_files`.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/execution_query_modules/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(copy_execution_query_modules_e2e_python_files FILE_NAME)\n    copy_e2e_python_files(execution_query_modules ${FILE_NAME})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Add Tester Executable (CMake)\nDESCRIPTION: Adds an executable target named `${tester_target_name}` built from `tester.cpp`. It then sets the output name to \"tester\" and links it with the `mg-communication` library. This allows the tester program to interact with Memgraph.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/integration/flag_check/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${tester_target_name} tester.cpp)\nset_target_properties(${tester_target_name} PROPERTIES OUTPUT_NAME tester)\ntarget_link_libraries(${tester_target_name} mg-communication)\n```\n\n----------------------------------------\n\nTITLE: Creating and Linking single_query Test - CMake\nDESCRIPTION: This calls the `add_manual_test` function to create a test executable named `single_query` using `single_query.cpp` and `${CMAKE_SOURCE_DIR}/src/glue/communication.cpp`. It links the test executable with the `mg-query`, `mg-communication`, and `mg-license` libraries.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/manual/CMakeLists.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nadd_manual_test(single_query.cpp ${CMAKE_SOURCE_DIR}/src/glue/communication.cpp)\ntarget_link_libraries(${test_prefix}single_query mg-query mg-communication mg-license)\n```\n\n----------------------------------------\n\nTITLE: Creating Executable Target in CMake\nDESCRIPTION: This snippet creates an executable target using the `add_executable` command in CMake. It specifies the source file (tester.cpp) and sets the output name using `set_target_properties`. It then links the target to the `mg-communication` library using `target_link_libraries`.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/integration/run_time_settings/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${tester_target_name} tester.cpp)\nset_target_properties(${tester_target_name} PROPERTIES OUTPUT_NAME tester)\ntarget_link_libraries(${tester_target_name} mg-communication)\n```\n\n----------------------------------------\n\nTITLE: Find gflags Package in CMake\nDESCRIPTION: This CMake command uses `find_package` to locate the gflags library, which is a required dependency. It ensures that gflags is available and its include paths are set for compilation.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/monitoring_server/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(gflags REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Creating mg-system static library CMake\nDESCRIPTION: This snippet defines and creates the static library `mg-system` and an alias `mg::system` for it.  It sets up the source files, include directories, and target dependencies needed for compiling the library. Public headers are specified, along with private implementation files.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/system/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(mg-system STATIC)\nadd_library(mg::system ALIAS mg-system)\ntarget_sources(mg-system\n        PUBLIC\n        include/system/action.hpp\n        include/system/system.hpp\n        include/system/transaction.hpp\n        include/system/state.hpp\n\n        PRIVATE\n        action.cpp\n        system.cpp\n        transaction.cpp\n        state.cpp\n\n)\ntarget_include_directories(mg-system PUBLIC include)\n\ntarget_link_libraries(mg-system\n        PUBLIC\n        mg::replication\n\n)\n```\n\n----------------------------------------\n\nTITLE: Create Executable for On-Delete Triggers CMake\nDESCRIPTION: Creates an executable named `memgraph__e2e__triggers__on_delete` from the source file `on_delete_triggers.cpp`. It then links the executable to the `memgraph__e2e__triggers_common` library.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/triggers/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(memgraph__e2e__triggers__on_delete on_delete_triggers.cpp)\ntarget_link_libraries(memgraph__e2e__triggers__on_delete memgraph__e2e__triggers_common)\n```\n\n----------------------------------------\n\nTITLE: Copy files from parent directory\nDESCRIPTION: Copies `mg_utils.py` from the parent directory to the `streams` directory using the `copy_e2e_python_files_from_parent_folder` CMake function. This makes sure the specified file which is located outside the current directory is accessible in the stream tests.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/streams/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_e2e_python_files_from_parent_folder(streams \"..\" mg_utils.py)\n```\n\n----------------------------------------\n\nTITLE: Build Gbenchmark Macro\nDESCRIPTION: Defines a CMake macro `build_gbenchmark` to build the gbenchmark library as an external project. It uses `import_external_library` to handle the build process, including disabling testing.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/libs/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nmacro(build_gbenchmark)\n  import_external_library(benchmark STATIC\n    ${CMAKE_CURRENT_SOURCE_DIR}/benchmark/${CMAKE_INSTALL_LIBDIR}/libbenchmark.a\n    ${CMAKE_CURRENT_SOURCE_DIR}/benchmark/include\n    # Skip testing. The tests don't compile with Clang 8.\n    CMAKE_ARGS -DBENCHMARK_ENABLE_TESTING=OFF)\nendmacro()\nmg_build_if_needed(build_gbenchmark \"gbenchmark\")\nmg_create_linkable_if_no_cmake(benchmark STATIC\n  \"${MG_TOOLCHAIN_ROOT}/lib/libbenchmark.a\"\n  \"${MG_TOOLCHAIN_ROOT}/include\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Query Modules Build Directory CMake\nDESCRIPTION: This snippet sets the `QUERY_MODULES_BUILD_DIR` variable to the current binary directory for building query modules. It also defines `QUERY_MODULES_DIR` to specify the installation destination.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/query_modules/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(QUERY_MODULES_BUILD_DIR \"${CMAKE_CURRENT_BINARY_DIR}\" CACHE INTERNAL \"Build directory for QMs in folders\")\nset(QUERY_MODULES_DIR lib/memgraph/query_modules)\n```\n\n----------------------------------------\n\nTITLE: Creating Replication Indices Executable (CMake)\nDESCRIPTION: This snippet creates an executable named `memgraph__e2e__replication__indices` from the `indices.cpp` source file. It links the executable against the `gflags`, `mgclient`, `mg-utils`, `mg-io`, and `Threads::Threads` libraries.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/replication/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(memgraph__e2e__replication__indices indices.cpp)\ntarget_link_libraries(memgraph__e2e__replication__indices gflags mgclient mg-utils mg-io Threads::Threads)\n```\n\n----------------------------------------\n\nTITLE: Call CMake Function for Workloads YAML File\nDESCRIPTION: Calls the `copy_e2e_files` function directly for the `workloads.yaml` file.  The `init_file_flags` argument specifies the origin or category of these files.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/init_file_flags/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_e2e_files(init_file_flags workloads.yaml)\n```\n\n----------------------------------------\n\nTITLE: Adding Network Session Leak Concurrent Test\nDESCRIPTION: Adds a concurrent test named `network_session_leak.cpp`. It creates an executable and links it with `mg-communication` library using `target_link_libraries`. This ensures that the test can access the functionality provided by `mg-communication`.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/concurrent/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_concurrent_test(network_session_leak.cpp)\ntarget_link_libraries(${test_prefix}network_session_leak mg-communication)\n```\n\n----------------------------------------\n\nTITLE: Add Dependencies to Trigger Executables CMake\nDESCRIPTION: Adds dependencies to the `on_create`, `on_update`, and `on_delete` executables, specifically on the `memgraph__e2e__triggers__write.py` script.  This ensures that the Python script is available during the build process and correctly packaged. It likely represents some dependency for the trigger testing logic.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/triggers/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_dependencies(memgraph__e2e__triggers__on_create memgraph__e2e__triggers__write.py)\nadd_dependencies(memgraph__e2e__triggers__on_update memgraph__e2e__triggers__write.py)\nadd_dependencies(memgraph__e2e__triggers__on_delete memgraph__e2e__triggers__write.py)\n```\n\n----------------------------------------\n\nTITLE: Adding Tester Executable in CMake\nDESCRIPTION: This snippet adds an executable named `tester` built from `tester.cpp`.  It then sets the output name to `tester` and links it against the `mg-communication` library.  This executable is likely used for running integration tests against Memgraph.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/integration/fine_grained_access/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(${tester_target_name} tester.cpp)\nset_target_properties(${tester_target_name} PROPERTIES OUTPUT_NAME tester)\ntarget_link_libraries(${tester_target_name} mg-communication)\n```\n\n----------------------------------------\n\nTITLE: Invoking the Python File Copying Macro\nDESCRIPTION: Calls the defined `copy_lba_procedures_e2e_python_files` macro for a series of Python files (common.py, show_privileges.py, etc.). This action copies each of these files using the macro defined earlier.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/lba_procedures/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_lba_procedures_e2e_python_files(common.py)\ncopy_lba_procedures_e2e_python_files(show_privileges.py)\ncopy_lba_procedures_e2e_python_files(read_query_modules.py)\ncopy_lba_procedures_e2e_python_files(update_query_modules.py)\ncopy_lba_procedures_e2e_python_files(create_delete_query_modules.py)\ncopy_lba_procedures_e2e_python_files(read_permission_queries.py)\ncopy_lba_procedures_e2e_python_files(update_permission_queries.py)\n```\n\n----------------------------------------\n\nTITLE: Copy E2E Files (CMake)\nDESCRIPTION: This CMake function, `copy_e2e_files`, is responsible for copying necessary files for end-to-end testing to the build directory. In this case, it copies `isolation_levels` and `workloads.yaml`.  These files likely contain configurations and data required for the isolation levels tests.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/isolation_levels/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_e2e_files(isolation_levels workloads.yaml)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Names in CMake\nDESCRIPTION: This snippet sets the main target name and a derived client target name. The `set` command in CMake defines variables that can be used later in the script. This helps in organizing and referencing targets throughout the build configuration.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/integration/telemetry/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(target_name memgraph__integration__telemetry)\nset(client_target_name ${target_name}__client)\n```\n\n----------------------------------------\n\nTITLE: Defining CMake Macro for Python File Copying\nDESCRIPTION: Defines a CMake macro named `copy_lba_procedures_e2e_python_files` which takes a `FILE_NAME` as input. This macro uses the existing `copy_e2e_python_files` function to copy the specified python file to the `lba_procedures` directory. The purpose is to simplify the copying of multiple Python files.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/lba_procedures/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(copy_lba_procedures_e2e_python_files FILE_NAME)\n    copy_e2e_python_files(lba_procedures ${FILE_NAME})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Add RPC Library in CMake\nDESCRIPTION: This CMake command creates a static library named `mg-rpc` using the source files defined in `rpc_src_files`. It also creates an alias `mg::rpc` for easier referencing. Subsequently, it links the library to various dependencies.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/rpc/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(mg-rpc STATIC ${rpc_src_files})\nadd_library(mg::rpc ALIAS mg-rpc)\ntarget_link_libraries(mg-rpc Threads::Threads mg-communication mg-utils mg-io fmt::fmt gflags)\ntarget_link_libraries(mg-rpc mg-slk)\n```\n\n----------------------------------------\n\nTITLE: Call CMake function to copy specific Python files\nDESCRIPTION: Calls the `copy_graphql_e2e_python_files` function with specific Python file names and a JSON file. This copies `graphql_crud.py`, `graphql_server.py`, and `callable_alias_mapping.json` to their destination for E2E testing.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/graphql/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncopy_graphql_e2e_python_files(graphql_crud.py)\ncopy_graphql_e2e_python_files(graphql_server.py)\ncopy_graphql_e2e_python_files(callable_alias_mapping.json)\n```\n\n----------------------------------------\n\nTITLE: Setting RelWithDebInfo Flags\nDESCRIPTION: This snippet sets the C++ flags for the RelWithDebInfo build type to include `-fno-omit-frame-pointer`. This ensures that frame pointers are not omitted in this build type, which can improve debugging by providing complete callchains.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/CMakeLists.txt#_snippet_20\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_CXX_FLAGS_RELWITHDEBINFO\n    \"${CMAKE_CXX_FLAGS_RELWITHDEBINFO} -fno-omit-frame-pointer\")\n```\n\n----------------------------------------\n\nTITLE: Creating Query Memory Limit Proc Library (C++)\nDESCRIPTION: This snippet creates a shared library named `query_memory_limit_proc` from the source file `query_memory_limit_proc.cpp`. It sets the include directories for the target and links the `mg-utils` library as a dependency.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/memory/procedures/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(query_memory_limit_proc SHARED query_memory_limit_proc.cpp)\ntarget_include_directories(query_memory_limit_proc PRIVATE ${CMAKE_SOURCE_DIR}/include)\ntarget_link_libraries(query_memory_limit_proc mg-utils)\n```\n\n----------------------------------------\n\nTITLE: Copying Python file from parent folder\nDESCRIPTION: This line calls `copy_e2e_python_files_from_parent_folder` CMake function, copying 'mg_utils.py' from the parent directory ('..') with the prefix 'time_to_live'. This is likely used for including utility functions needed by the E2E tests.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/time_to_live/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_e2e_python_files_from_parent_folder(time_to_live \"..\" mg_utils.py)\n```\n\n----------------------------------------\n\nTITLE: Creating Executor Executable in CMake\nDESCRIPTION: This snippet creates an executable target named `executor` using `add_executable`, specifies the source file `executor.cpp`, sets the output name to `executor`, and links it with the `mg-communication` library.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/integration/run_time_settings/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${executor_target_name} executor.cpp)\nset_target_properties(${executor_target_name} PROPERTIES OUTPUT_NAME executor)\ntarget_link_libraries(${executor_target_name} mg-communication)\n```\n\n----------------------------------------\n\nTITLE: Adding Compile Options\nDESCRIPTION: This snippet adds several compile options, including enabling all warnings as errors and disabling the c99-designator warning.  It configures the compiler to treat warnings as errors and to use specific warning flags.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/CMakeLists.txt#_snippet_19\n\nLANGUAGE: CMake\nCODE:\n```\nadd_compile_options(\n        -Wall\n        -Werror=non-virtual-dtor\n        -Werror=unused-private-field\n        -Werror=switch\n        -Werror=switch-bool\n        -Werror=return-type\n        -Werror=return-stack-address\n        -Wno-c99-designator\n        -Wmissing-field-initializers\n        -Werror=implicit-fallthrough\n        $<$<CXX_COMPILER_ID:Clang>:-Werror=reorder-init-list>\n)\n```\n\n----------------------------------------\n\nTITLE: Find gflags Package (CMake)\nDESCRIPTION: This command uses CMake's `find_package` to locate the `gflags` library. The `REQUIRED` keyword ensures that the configuration process will fail if `gflags` is not found. `gflags` is a command-line flags processing library, often used for configuring application behavior.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/isolation_levels/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(gflags REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Creating Static Library and Linking Dependencies (CMake)\nDESCRIPTION: This snippet creates a static library named `mg-memory` from the source files defined in `memory_src_files`. It also links the library against `mg-utils` and `fmt` libraries, which are required dependencies.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/memory/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(mg-memory STATIC ${memory_src_files})\ntarget_link_libraries(mg-memory mg-utils fmt)\n```\n\n----------------------------------------\n\nTITLE: Create Executable for On-Update Triggers CMake\nDESCRIPTION: Creates an executable named `memgraph__e2e__triggers__on_update` from the source file `on_update_triggers.cpp`. It then links the executable to the `memgraph__e2e__triggers_common` library.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/triggers/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(memgraph__e2e__triggers__on_update on_update_triggers.cpp)\ntarget_link_libraries(memgraph__e2e__triggers__on_update memgraph__e2e__triggers_common)\n```\n\n----------------------------------------\n\nTITLE: Copy Workloads YAML File with CMake\nDESCRIPTION: This command uses the CMake function `copy_e2e_files` to copy the 'workloads.yaml' file related to the analyze graph feature for end-to-end (E2E) testing. This facilitates test setup by copying the necessary YAML configuration file.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/analyze_graph/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_e2e_files(analyze_graph workloads.yaml)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to Target in CMake\nDESCRIPTION: This snippet links the specified libraries to the target `client`. These libraries are Memgraph specific, indicating dependencies on request handling, telemetry, storage, database management, querying, and glue components. This ensures that the `client` executable has access to the necessary functionalities provided by these libraries at runtime.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/integration/telemetry/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(${client_target_name} mg-requests mg-telemetry mg-storage-v2 mg-dbms mg-query mg-glue)\n```\n\n----------------------------------------\n\nTITLE: Define Target Sources for mg-replication_handler CMake\nDESCRIPTION: This snippet specifies the source files for the `mg-replication_handler` library, distinguishing between public header files and private implementation files. Public headers are located in the `include/replication_handler/` directory, while private source files are in the root source directory.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/replication_handler/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(mg-replication_handler\n        PUBLIC\n        include/replication_handler/replication_handler.hpp\n        include/replication_handler/system_replication.hpp\n        include/replication_handler/system_rpc.hpp\n\n        PRIVATE\n        system_replication.cpp\n        replication_handler.cpp\n        system_rpc.cpp\n        )\n```\n\n----------------------------------------\n\nTITLE: Creating Replication Constraints Executable (CMake)\nDESCRIPTION: This snippet creates an executable named `memgraph__e2e__replication__constraints` from the `constraints.cpp` source file. It links the executable against the `gflags`, `mgclient`, `mg-utils`, `mg-io`, and `Threads::Threads` libraries.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/replication/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(memgraph__e2e__replication__constraints constraints.cpp)\ntarget_link_libraries(memgraph__e2e__replication__constraints gflags mgclient mg-utils mg-io Threads::Threads)\n```\n\n----------------------------------------\n\nTITLE: Add Coordinator Instance Aux Unit Test (C++)\nDESCRIPTION: This snippet adds a unit test for coordinator instance aux functionality. It links the test executable against `gflags` and `mg-coordination` libraries. The necessary include directories are also specified. The test is only included in enterprise builds based on the `MG_ENTERPRISE` flag.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/unit/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nif(MG_ENTERPRISE)\nadd_unit_test(coordinator_instance_aux.cpp)\ntarget_link_libraries(${test_prefix}coordinator_instance_aux gflags mg-coordination)\ntarget_include_directories(${test_prefix}coordinator_instance_aux PRIVATE ${CMAKE_SOURCE_DIR}/include)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining CMake Function to Copy Python Files\nDESCRIPTION: Defines a CMake function named `copy_periodic_commit_e2e_python_files` which takes a filename as input. It uses the `copy_e2e_python_files` function (presumably defined elsewhere) to copy the specified Python file to the directory associated with periodic commit tests. The first argument to `copy_e2e_python_files` specifies the test case type.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/periodic_commit/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(copy_periodic_commit_e2e_python_files FILE_NAME)\n    copy_e2e_python_files(periodic_commit ${FILE_NAME})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories for Modules CMake\nDESCRIPTION: These lines add subdirectories for specific modules like pagerank, katz centrality, and community detection. The `add_subdirectory` command instructs CMake to process the `CMakeLists.txt` file in each of these subdirectories.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/query_modules/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(pagerank_module)\nadd_subdirectory(katz_centrality_module)\nadd_subdirectory(community_detection_module)\n```\n\n----------------------------------------\n\nTITLE: Fetching nlohmann_json Content\nDESCRIPTION: This snippet uses `FetchContent_Declare` and `FetchContent_MakeAvailable` to fetch and make available the nlohmann_json library from a remote URL. It also applies a patch.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/libs/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\n# Setup json\nFetchContent_Declare(\n    nlohmann_json\n    URL https://github.com/nlohmann/json/releases/download/v3.11.3/json.tar.xz\n    URL_HASH SHA256=d6c65aca6b1ed68e7a182f4757257b107ae403032760ed6ef121c9d55e81757d\n    PATCH_COMMAND patch -p1 < \"${CMAKE_CURRENT_SOURCE_DIR}/nlohmann_json3.11.3.patch\"\n    # FIND_PACKAGE_ARGS # maybe needed for FETCHCONTENT_TRY_FIND_PACKAGE_MODE OPT_IN\n)\nFetchContent_MakeAvailable(nlohmann_json)\n```\n\n----------------------------------------\n\nTITLE: Creating Executable Target for Environment Variable Tester in CMake\nDESCRIPTION: This CMake command creates an executable target named `${tester_target_name}` from the `tester.cpp` source file.  It allows for the creation of a runnable program within the CMake project that can perform environment variable checks.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/integration/env_variable_check/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${tester_target_name} tester.cpp)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to the Environment Variable Tester Target in CMake\nDESCRIPTION: This CMake command links the `mg-communication` library to the `${tester_target_name}` target. This allows the tester executable to use the functionalities provided by the `mg-communication` library, such as communication interfaces specific to Memgraph.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/integration/env_variable_check/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(${tester_target_name} mg-communication)\n```\n\n----------------------------------------\n\nTITLE: CSV Example with Array Property\nDESCRIPTION: This example demonstrates how to define and use an array property in a CSV file for importing data into Memgraph. It shows the header definition and the corresponding data, including how to specify the array delimiter.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/docs/csv-import-tool/README.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nfirst_name,last_name:string,number:integer,aliases:string[]\nJohn,Doe,1,Johnny;Jo;J-man\nMelissa,Doe,2,Mel\n```\n\n----------------------------------------\n\nTITLE: SAML Status Code\nDESCRIPTION: This XML snippet indicates the status of the SAML response, signaling whether the request was successful or encountered an error. In this case, the StatusCode with the Value \"urn:oasis:names:tc:SAML:2.0:status:Success\" means authentication was successful.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/sso/data/okta_response.txt#_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n <saml2p:Status>\n  <saml2p:StatusCode Value=\"urn:oasis:names:tc:SAML:2.0:status:Success\" />\n </saml2p:Status>\n```\n\n----------------------------------------\n\nTITLE: Adding Executable and Setting Properties in CMake\nDESCRIPTION: This snippet adds an executable named `tester` using CMake's `add_executable` command, linking it to `tester.cpp`. It also sets the output name for the executable using `set_target_properties`.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/integration/storage_mode/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${tester_target_name} tester.cpp)\nset_target_properties(${tester_target_name} PROPERTIES OUTPUT_NAME tester)\n```\n\n----------------------------------------\n\nTITLE: Creating Node with Mixed Quotes (Double inside Single)\nDESCRIPTION: This Cypher query creates a node with the label 'Ciceron' and a property 'quote' whose value is a single-quoted string containing a double quote. It returns the created node 'n'.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tools/tests/client/input/quote.txt#_snippet_3\n\nLANGUAGE: Cypher\nCODE:\n```\nCREATE (n:Ciceron{quote:'o tempora \"o mores\"'}) RETURN n;\n```\n\n----------------------------------------\n\nTITLE: Setup ABSL with CMake\nDESCRIPTION: This snippet sets the ABSL_PROPAGATE_CXX_STD flag to ON and adds the absl subdirectory to the build process, excluding it from the ALL target. This ensures that the absl library is built as part of the overall project build.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/libs/CMakeLists.txt#_snippet_26\n\nLANGUAGE: cmake\nCODE:\n```\nset(ABSL_PROPAGATE_CXX_STD ON)\nadd_subdirectory(absl EXCLUDE_FROM_ALL)\n```\n\n----------------------------------------\n\nTITLE: Adding Compile Definitions\nDESCRIPTION: This snippet adds a compile definition to use the TS executor as the default for Boost.Asio, configuring the project to use a specific feature from the Boost.Asio library.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/CMakeLists.txt#_snippet_18\n\nLANGUAGE: CMake\nCODE:\n```\nadd_compile_definitions(BOOST_ASIO_USE_TS_EXECUTOR_AS_DEFAULT)\n```\n\n----------------------------------------\n\nTITLE: Creating Replication Read/Write Benchmark Executable (CMake)\nDESCRIPTION: This snippet creates an executable named `memgraph__e2e__replication__read_write_benchmark` from the `read_write_benchmark.cpp` source file. It links the executable against the `gflags`, `nlohmann_json::nlohmann_json`, `mgclient`, `mg-utils`, `mg-io`, and `Threads::Threads` libraries.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/replication/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(memgraph__e2e__replication__read_write_benchmark read_write_benchmark.cpp)\ntarget_link_libraries(memgraph__e2e__replication__read_write_benchmark gflags nlohmann_json::nlohmann_json mgclient mg-utils mg-io Threads::Threads)\n```\n\n----------------------------------------\n\nTITLE: Link Libraries to mg-coordination (CMake)\nDESCRIPTION: This snippet links the `mg-coordination` library to other libraries, including `mg::utils`, `mg::rpc`, `mg::slk`, `mg::io`, `mg::repl_coord_glue`, `lib::rangev3`, `nuraft`, and `mg-replication_handler`. These linked libraries provide the dependencies and functionalities required by the `mg-coordination` library for its operation.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/coordination/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(mg-coordination\n    PUBLIC mg::utils mg::rpc mg::slk mg::io mg::repl_coord_glue lib::rangev3 nuraft mg-replication_handler\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Communication Library\nDESCRIPTION: This CMake code defines a list of source files that constitute the `mg-communication` library.  These files include components for websocket communication, Bolt protocol handling, and client-server interactions.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/communication/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(communication_src_files\n    websocket/auth.cpp\n    websocket/server.cpp\n    websocket/listener.cpp\n    websocket/session.cpp\n    bolt/v1/value.cpp\n    bolt/v1/mg_types.cpp\n    bolt/client.cpp\n    buffer.cpp\n    client.cpp\n    context.cpp\n    helpers.cpp\n    init.cpp)\n```\n\n----------------------------------------\n\nTITLE: Copying E2E files for workloads configuration\nDESCRIPTION: This line calls the `copy_e2e_files` function to copy the `workloads.yaml` file with the prefix `index_auto_creation`. This function is expected to copy the file to the appropriate location.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/index_auto_creation/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_e2e_files(index_auto_creation workloads.yaml)\n```\n\n----------------------------------------\n\nTITLE: Creating Flag Tester Executable in CMake\nDESCRIPTION: This snippet creates an executable target named `flag_tester` using `add_executable`, specifies the source file `flag_tester.cpp`, sets the output name to `flag_tester`, and links it with the `mg-communication` library.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/integration/run_time_settings/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${flag_tester_target_name} flag_tester.cpp)\nset_target_properties(${flag_tester_target_name} PROPERTIES OUTPUT_NAME flag_tester)\ntarget_link_libraries(${flag_tester_target_name} mg-communication)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Properties in CMake\nDESCRIPTION: This CMake command sets the properties for the executable target `${tester_target_name}`. Specifically, it sets the `OUTPUT_NAME` property to `tester`, which will be the name of the generated executable file. This allows customizing the output filename.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/integration/init_file/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(${tester_target_name} PROPERTIES OUTPUT_NAME tester)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target for Benchmarks\nDESCRIPTION: Adds a custom target `memgraph__benchmark` which can be used as a dependency for other targets, effectively grouping all benchmarks.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/benchmark/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(memgraph__benchmark)\n```\n\n----------------------------------------\n\nTITLE: Copying E2E Python Files from Parent (CMake)\nDESCRIPTION: This snippet uses a custom CMake function `copy_e2e_python_files_from_parent_folder` to copy Python files required for the replication E2E tests from the parent directory. It includes `memgraph.py`, `interactive_mg_runner.py`, and `mg_utils.py`.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/replication/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_e2e_python_files_from_parent_folder(replication \"..\" memgraph.py)\ncopy_e2e_python_files_from_parent_folder(replication \"..\" interactive_mg_runner.py)\ncopy_e2e_python_files_from_parent_folder(replication \"..\" mg_utils.py)\n```\n\n----------------------------------------\n\nTITLE: Defining a CMake Function for Copying Python Files\nDESCRIPTION: This CMake function, `copy_set_properties_e2e_python_files`, is defined to simplify the process of copying end-to-end Python files related to setting properties. It takes the file name as input and calls another function, `copy_e2e_python_files`, with the 'set_properties' context.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/set_properties/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(copy_set_properties_e2e_python_files FILE_NAME)\n    copy_e2e_python_files(set_properties ${FILE_NAME})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Add subdirectories for GraphQL library configuration\nDESCRIPTION: Adds the `graphql_library_config` and `temporary_procedures` directories as subdirectories in the CMake build process. This makes the build system aware of the CMakeLists.txt files in those directories and includes them in the build.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/graphql/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(graphql_library_config)\nadd_subdirectory(temporary_procedures)\n```\n\n----------------------------------------\n\nTITLE: Copying Python Files (write.py trigger)\nDESCRIPTION: This snippet describes the action of copying end-to-end (e2e) Python files. The operation specifically mentions `write.py` as a trigger, implying that the copy action may be related to initiating or influencing the `write.py` script's execution or behavior. This could be part of a testing, deployment, or automation workflow.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/triggers/procedures/CMakeLists.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncopy_e2e_python_files(triggers write.py)\n```\n\n----------------------------------------\n\nTITLE: Linking Dependencies to the Library\nDESCRIPTION: This snippet links the `mg-repl_coord_glue` library against other Memgraph libraries, namely `mg-rpc` and `mg-slk`. This indicates that `mg-repl_coord_glue` depends on the functionalities provided by these libraries.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/replication_coordination_glue/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(mg-repl_coord_glue mg-rpc mg-slk)\n```\n\n----------------------------------------\n\nTITLE: Call CMake Function for Python Initialization Files\nDESCRIPTION: Calls the `copy_init_file_flags_e2e_python_files` function for specific Python initialization files: `init_file_setup.py` and `init_data_file_setup.py`. These files are copied as part of the end-to-end test setup.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/init_file_flags/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_init_file_flags_e2e_python_files(init_file_setup.py)\ncopy_init_file_flags_e2e_python_files(init_data_file_setup.py)\n```\n\n----------------------------------------\n\nTITLE: Including CPack Module - CMake\nDESCRIPTION: This snippet includes the CPack module, which is necessary to use the CPack functionality for generating packages. This line must be included after all CPack variables are set to ensure proper configuration.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/release/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(CPack)\n```\n\n----------------------------------------\n\nTITLE: Copying E2E Test Files - Entra ID Missing Role\nDESCRIPTION: This command copies an end-to-end test file representing an Entra ID response with a missing role. This is used for testing the application's handling of incomplete user information from the identity provider.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/sso/data/CMakeLists.txt#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncopy_e2e_files(sso entra_id_response_missing_role.txt)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Target Name\nDESCRIPTION: This CMake command sets the target name for the integration initialization file. It defines a variable `target_name` with the specified name `memgraph__integration__init_file`. This variable is later used to define the tester target name.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/integration/init_file/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(target_name memgraph__integration__init_file)\nset(tester_target_name ${target_name}__tester)\n```\n\n----------------------------------------\n\nTITLE: Copy E2E Files\nDESCRIPTION: Copies end-to-end test files related to memory management, specifically 'memory' and 'workloads.yaml', to the build directory. This step makes the test data available for the executables.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/memory/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_e2e_files(memory workloads.yaml)\n```\n\n----------------------------------------\n\nTITLE: Finding gflags Package (CMake)\nDESCRIPTION: This snippet uses CMake's `find_package` command to locate the gflags library. The `REQUIRED` keyword ensures that the configuration will fail if gflags is not found.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/replication/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(gflags REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Finding Required Packages CMake\nDESCRIPTION: This snippet uses `find_package` to locate the fmt and gflags libraries. The `REQUIRED` keyword ensures that the build fails if these packages are not found.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/audit/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(fmt REQUIRED)\nfind_package(gflags REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target CMake\nDESCRIPTION: Adds a custom target named `memgraph__property_based`. This target serves as a dependency for all property-based test targets.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/property_based/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(memgraph__property_based)\n```\n\n----------------------------------------\n\nTITLE: Adding stripped Benchmark\nDESCRIPTION: Adds the `stripped` benchmark. Links the executable with the `mg-query` library.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/benchmark/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_benchmark(query/stripped.cpp)\ntarget_link_libraries(${test_prefix}stripped mg-query)\n```\n\n----------------------------------------\n\nTITLE: CMake Project Configuration\nDESCRIPTION: Configures the CMake project for Memgraph tools, disallows in-source builds, and sets the default installation component to 'tools'. This configuration ensures proper project setup and installation.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tools/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# MemGraph Tools CMake configuration\n# You should use the top level CMake configuration with -DTOOLS=ON option set.\n\nproject(memgraph_tools)\n\ndisallow_in_source_build()\n\n# Everything that is installed here, should be under the \"tools\" component.\nset(CMAKE_INSTALL_DEFAULT_COMPONENT_NAME \"tools\")\n\nadd_subdirectory(src)\n```\n\n----------------------------------------\n\nTITLE: Copying E2E Files using CMake\nDESCRIPTION: This line calls the `copy_e2e_files` function to copy the `workloads.yaml` file into the `observe_current_amount_of_deltas` directory. The `copy_e2e_files` function likely handles copying of files that are not Python files, such as YAML configuration files.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/observe_current_amount_of_deltas/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_e2e_files(observe_current_amount_of_deltas workloads.yaml)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for mg-flags Library (CMake)\nDESCRIPTION: This snippet sets the include directories for the `mg-flags` library. It specifies that the `include` directory should be publicly available to other libraries that depend on `mg-flags`.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/flags/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(mg-flags PUBLIC include)\n```\n\n----------------------------------------\n\nTITLE: Defining Telemetry ID Override Option\nDESCRIPTION: This snippet defines a CMake option `MG_TELEMETRY_ID_OVERRIDE` that allows overriding the telemetry ID. If the option is set, a warning message is displayed, and a compile definition is added to the `mg-telemetry` target.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/telemetry/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\noption(MG_TELEMETRY_ID_OVERRIDE \"Override for the telemetry ID\" STRING)\n\nif(MG_TELEMETRY_ID_OVERRIDE)\n  message(WARNING \"Using telemetry ID override: ${MG_TELEMETRY_ID_OVERRIDE}\")\n  target_compile_definitions(mg-telemetry PRIVATE MG_TELEMETRY_ID_OVERRIDE=\"${MG_TELEMETRY_ID_OVERRIDE}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining CMake function for copying index hints e2e python files\nDESCRIPTION: This CMake function, `copy_index_hints_e2e_python_files`, takes a file name as input and calls another function, `copy_e2e_python_files`, to copy the specified Python file related to index hints. It uses the `index_hints` keyword to indicate the specific e2e test scope.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/index_hints/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(copy_index_hints_e2e_python_files FILE_NAME)\n    copy_e2e_python_files(index_hints ${FILE_NAME})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Add Raft Log Serialization Unit Test (C++)\nDESCRIPTION: This snippet configures a unit test for Raft log serialization using `add_unit_test`. The test executable is linked with `gflags`, `mg-coordination`, and `mg-repl_coord_glue` libraries. The include directory `${CMAKE_SOURCE_DIR}/include` is added to the test's private include paths. This is conditionally compiled for `MG_ENTERPRISE` builds.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/unit/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(MG_ENTERPRISE)\nadd_unit_test(coordinator_raft_log_serialization.cpp)\ntarget_link_libraries(${test_prefix}coordinator_raft_log_serialization gflags mg-coordination mg-repl_coord_glue)\ntarget_include_directories(${test_prefix}coordinator_raft_log_serialization PRIVATE ${CMAKE_SOURCE_DIR}/include)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Define CMake function to copy concurrency E2E Python files\nDESCRIPTION: Defines a CMake function named `copy_concurrency_e2e_python_files` that takes a `FILE_NAME` as input. This function calls `copy_e2e_python_files` with the 'concurrency' prefix and the provided `FILE_NAME`. This simplifies the process of copying specific Python files required for concurrency E2E tests.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/concurrency/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(copy_concurrency_e2e_python_files FILE_NAME)\n    copy_e2e_python_files(concurrency ${FILE_NAME})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory in CMake\nDESCRIPTION: Adds a subdirectory named `procedures` to the build process. This command instructs CMake to process the CMakeLists.txt file located within the `procedures` directory, effectively including its build configuration.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/lba_procedures/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(procedures)\n```\n\n----------------------------------------\n\nTITLE: Copying common.py for drop_graph E2E testing\nDESCRIPTION: This command calls the defined CMake function `copy_drop_graph_e2e_python_files` to copy the `common.py` file. This file likely contains utility functions or common definitions used in the end-to-end tests for dropping graphs.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/drop_graph/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncopy_drop_graph_e2e_python_files(common.py)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Module Path\nDESCRIPTION: This snippet appends the path to the custom CMake modules to the CMAKE_MODULE_PATH variable. This allows CMake to find custom functions and packages defined in the specified directory using include() and find_package().\nSOURCE: https://github.com/memgraph/memgraph/blob/master/CMakeLists.txt#_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/cmake\")\n# custom function definitions\ninclude(functions)\n```\n\n----------------------------------------\n\nTITLE: Creating Directory CMake\nDESCRIPTION: This snippet creates a directory for the Node2Vec online utility modules within the build directory. The `QUERY_MODULES_BUILD_DIR` variable specifies the parent directory where the subdirectory `node2vec_online_utils` will be created.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/query_modules/node2vec_online_module/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfile(MAKE_DIRECTORY ${QUERY_MODULES_BUILD_DIR}/node2vec_online_utils)\n```\n\n----------------------------------------\n\nTITLE: Add Subdirectory for Procedures\nDESCRIPTION: Adds the 'procedures' subdirectory to the build process. This allows CMake to discover and include CMakeLists.txt files located within the 'procedures' directory for compilation.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/memory/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(procedures)\n```\n\n----------------------------------------\n\nTITLE: Creating and Linking expression_pretty_printer Test - CMake\nDESCRIPTION: This calls the `add_manual_test` function to create a test executable named `expression_pretty_printer`. It links the test executable with the `mg-query` library.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/manual/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nadd_manual_test(expression_pretty_printer.cpp)\ntarget_link_libraries(${test_prefix}expression_pretty_printer mg-query)\n```\n\n----------------------------------------\n\nTITLE: Defining telemetry source files\nDESCRIPTION: This snippet defines a variable containing a list of source files used to build the telemetry library. The `set` command in CMake assigns the specified files to the `telemetry_src_files` variable.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/telemetry/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(telemetry_src_files\ncollectors.cpp\ntelemetry.cpp)\n```\n\n----------------------------------------\n\nTITLE: Setting RPM Package Architecture Extension - CMake\nDESCRIPTION: This snippet sets the architecture extension for RPM packages based on the MG_ARCH variable. If MG_ARCH is x86_64, the extension is set to x86_64; if it's ARM64, the extension is set to aarch64; otherwise, it defaults to noarch. This ensures the RPM package is built for the correct architecture.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/release/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(MG_ARCH_EXTENSION_RPM \"noarch\")\n\nif(${MG_ARCH} STREQUAL \"x86_64\")\n    set(MG_ARCH_EXTENSION_RPM \"x86_64\")\nelif(${MG_ARCH} STREQUAL \"ARM64\")\n    set(MG_ARCH_EXTENSION_RPM \"aarch64\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Copy Generic End-to-End Files CMake\nDESCRIPTION: Calls the `copy_e2e_files` function, passing `triggers` and `workloads.yaml` as arguments. This copies the `workloads.yaml` file to the appropriate location for the end-to-end triggers tests.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/triggers/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_e2e_files(triggers workloads.yaml)\n```\n\n----------------------------------------\n\nTITLE: Create Node with Label and Property (Bible) Cypher\nDESCRIPTION: This snippet demonstrates how to create a node with a specific label (Bible) and a property 'quote' in a Memgraph database. The RETURN n; clause returns the created node.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tools/tests/client/input/unfinished_query.txt#_snippet_2\n\nLANGUAGE: Cypher\nCODE:\n```\nCREATE (n:Bible{quote:\"Fiat Lux\"}) RETURN n;\n```\n\n----------------------------------------\n\nTITLE: Finding gflags Package in CMake\nDESCRIPTION: Finds the gflags library package. This is necessary for compiling and linking against the gflags library if it is a dependency for the tests or the main project. This ensures gflags is available during the build process.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/concurrent/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(gflags)\n```\n\n----------------------------------------\n\nTITLE: Finding gflags Package with CMake\nDESCRIPTION: This CMake command uses the `find_package` command to locate the gflags library, which is required for the project.  The `REQUIRED` keyword ensures that the configuration will fail if the gflags library is not found.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/server/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(gflags REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Calling the CMake Function with Specific Python Files\nDESCRIPTION: The `copy_set_properties_e2e_python_files` function is called twice to copy `common.py` and `set_properties.py`. This ensures that these Python files, presumably used for the set properties E2E tests, are available in the correct location during the test execution.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/set_properties/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_set_properties_e2e_python_files(common.py)\ncopy_set_properties_e2e_python_files(set_properties.py)\n```\n\n----------------------------------------\n\nTITLE: Building mg_dump Executable (CMake)\nDESCRIPTION: Adds an executable named `mg_dump` built from `mg_dump/main.cpp`.  It links against gflags, spdlog, fmt, mgclient, and Threads libraries. It also installs the target in the `bin` directory.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tools/src/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(mg_dump mg_dump/main.cpp)\ntarget_link_libraries(mg_dump gflags spdlog fmt::fmt mgclient Threads::Threads)\ninstall(TARGETS mg_dump RUNTIME DESTINATION bin)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory for Manual Tests (CMake)\nDESCRIPTION: The `add_subdirectory` command is used to add the 'manual' subdirectory to the current CMake project. This allows the CMake build system to include the manual tests as part of the overall build process.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(manual)\n```\n\n----------------------------------------\n\nTITLE: Adding a Subdirectory with CMake\nDESCRIPTION: This CMake command adds the 'test_module' subdirectory to the current CMake project. It includes the CMakeLists.txt file located within the specified subdirectory, allowing the build system to discover and process build instructions for that module. This command is essential for organizing and managing complex projects with multiple independent modules.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/python_query_modules_reloading/procedures/mage/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(test_module)\n```\n\n----------------------------------------\n\nTITLE: Define CMake Function for Copying Python E2E Files\nDESCRIPTION: Defines a CMake function named `copy_inspect_query_e2e_python_files` that takes a file name as input and uses the `copy_e2e_python_files` function to copy E2E Python files specifically for inspecting queries. This allows for organized and reusable copying of required Python files.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/inspect_query/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(copy_inspect_query_e2e_python_files FILE_NAME)\n    copy_e2e_python_files(inspect_query ${FILE_NAME})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Adding skip_list_vs_stl Benchmark\nDESCRIPTION: Adds the `skip_list_vs_stl` benchmark. Links the executable with the `mg-utils` library.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/benchmark/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nadd_benchmark(skip_list_vs_stl.cpp)\ntarget_link_libraries(${test_prefix}skip_list_vs_stl mg-utils)\n```\n\n----------------------------------------\n\nTITLE: Adding storage_v2_gc2 Benchmark\nDESCRIPTION: Adds the `storage_v2_gc2` benchmark. Links the executable with the `mg-storage-v2` library.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/benchmark/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\nadd_benchmark(storage_v2_gc2.cpp)\ntarget_link_libraries(${test_prefix}storage_v2_gc2 mg-storage-v2)\n```\n\n----------------------------------------\n\nTITLE: Stop Detached Containers\nDESCRIPTION: This command stops and removes the containers defined in the specified docker-compose file, effectively shutting down the environment.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/streams/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose -f <filename> down\n```\n\n----------------------------------------\n\nTITLE: Set Target Include Directories CMake\nDESCRIPTION: This snippet sets the include directories for the `community_detection_online` target using the `target_include_directories` command. It adds the current source directory to the private include directories for the target.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/query_modules/community_detection_module/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(community_detection_online PRIVATE ${CMAKE_CURRENT_SOURCE_DIR})\n```\n\n----------------------------------------\n\nTITLE: Copying YAML file for garbage collection E2E tests\nDESCRIPTION: Copies `workloads.yaml` to the garbage collection E2E test directory using the `copy_e2e_files` function. The `workloads.yaml` file likely defines various workload configurations that are used during the end-to-end testing of the garbage collection feature.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/garbage_collection/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_e2e_files(garbage_collection workloads.yaml)\n```\n\n----------------------------------------\n\nTITLE: Add Query Module with CMake\nDESCRIPTION: This CMake function, `add_query_module`, creates a shared library from the specified source file (`src`). It sets the library's properties to remove the default prefix and includes the Memgraph include directory for compilation. This is used to compile C++ query modules for testing.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(add_query_module target_name src)\n        add_library(${target_name} SHARED ${src})\n        SET_TARGET_PROPERTIES(${target_name} PROPERTIES PREFIX \"\")\n        target_include_directories(${target_name} PRIVATE ${CMAKE_SOURCE_DIR}/include)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Define Static Library in CMake\nDESCRIPTION: This code defines a static library named 'mg-glue'. It specifies the source files that comprise the library using the `target_sources` command, and links it with other Memgraph libraries such as `mg-query`, `mg-auth`, `mg-audit`, and `mg-flags` using `target_link_libraries`.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/glue/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(mg-glue STATIC )\ntarget_sources(mg-glue PRIVATE auth.cpp\n                               auth_checker.cpp\n                               auth_handler.cpp\n                               communication.cpp\n                               SessionHL.cpp\n                               ServerT.cpp\n                               MonitoringServerT.cpp\n                               run_id.cpp\n                               query_user.cpp)\ntarget_link_libraries(mg-glue mg-query mg-auth mg-audit mg-flags)\n```\n\n----------------------------------------\n\nTITLE: Inheriting Workload Class\nDESCRIPTION: This code shows how to inherit from the base `Workload` class to create a custom workload. It imports the `Workload` class from the `workloads.base` module and defines a class `Demo` that inherits from it.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/mgbench/how_to_use_benchgraph.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom workloads.base import Workload\n\nclass Demo(Workload):\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Node in Memgraph (Cypher)\nDESCRIPTION: This Cypher query creates a new node in the Memgraph database with the label 'Node'. It then returns the created node. The CREATE statement is a fundamental operation for adding data to the graph database.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tools/tests/client/input/multiple_queries_per_line.txt#_snippet_0\n\nLANGUAGE: Cypher\nCODE:\n```\nCREATE (n:Node) RETURN n;\n```\n\n----------------------------------------\n\nTITLE: Call the function with specific file names\nDESCRIPTION: This snippet calls the `copy_queries_e2e_python_files` function with `common.py` and `queries.py` as arguments, triggering the copying of these files.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/queries/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_queries_e2e_python_files(common.py)\ncopy_queries_e2e_python_files(queries.py)\n```\n\n----------------------------------------\n\nTITLE: Set Default Build Type to Debug (CMake)\nDESCRIPTION: This snippet sets the default build type to Debug if no build type is specified via the command line or cache. It also prints the current build type.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/CMakeLists.txt#_snippet_28\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT CMAKE_BUILD_TYPE)\n    set(CMAKE_BUILD_TYPE \"Debug\")\nendif()\nmessage(STATUS \"CMake build type: ${CMAKE_BUILD_TYPE}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Target Names in CMake\nDESCRIPTION: This CMake snippet sets the target name and the tester target name using the `set` command. The tester target name is derived from the main target name.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/integration/transactions/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(target_name memgraph__integration__transactions)\nset(tester_target_name ${target_name}__tester)\n```\n\n----------------------------------------\n\nTITLE: Add Query Module using C++ API\nDESCRIPTION: This snippet shows how to add a query module to Memgraph using the C++ API. It calls the `add_query_module` function, passing in the C++ API (`cpp_api`) and the source file (`cpp_api.cpp`).\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/query_modules_storage_modes/query_modules/CMakeLists.txt#_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nadd_query_module(cpp_api cpp_api.cpp)\n```\n\n----------------------------------------\n\nTITLE: Adding custom target for Memgraph Macro Benchmark\nDESCRIPTION: This line adds a custom target named `memgraph__macro_benchmark`.  This target likely acts as an aggregator for all individual macro benchmark executables. No dependencies are specified at creation.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/macro_benchmark/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(memgraph__macro_benchmark)\n```\n\n----------------------------------------\n\nTITLE: Include Subdirectory for Query Modules\nDESCRIPTION: This CMake command adds the `query_modules` subdirectory to the build. This is necessary to build and link the query modules into the Memgraph project.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/enterprise_query_modules/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(query_modules)\n```\n\n----------------------------------------\n\nTITLE: Find gflags Package in CMake\nDESCRIPTION: This CMake command searches for the gflags library package and ensures it is required.  It is used to ensure the gflags library is available during compilation.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/temporal_types/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(gflags REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries in CMake\nDESCRIPTION: This snippet links the `mg-communication` library to the tester executable. It uses CMake's `target_link_libraries` command to specify the library dependency.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/integration/storage_mode/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(${tester_target_name} mg-communication)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Names in CMake\nDESCRIPTION: This snippet sets the target name for the memgraph integration license info component and creates a derived client target name.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/integration/license_info/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(target_name memgraph__integration__license_info)\nset(client_target_name ${target_name}__client)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory for Functions\nDESCRIPTION: This line adds the subdirectory named 'functions' to the project.  This likely contains the copied python files and related configurations.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/magic_functions/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(functions)\n```\n\n----------------------------------------\n\nTITLE: Matching Erdody Nodes (Cypher)\nDESCRIPTION: This code snippet demonstrates how to match and return nodes labeled 'Erdody' from the Memgraph database.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tools/tests/client/input/multiline_query.txt#_snippet_3\n\nLANGUAGE: Cypher\nCODE:\n```\nMATCH (n:Erdody) RETURN\nn;\n```\n\n----------------------------------------\n\nTITLE: Set Thread Linker Flag (CMake)\nDESCRIPTION: This snippet adds the -pthread flag to the linker flags, ensuring thread support for the application.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/CMakeLists.txt#_snippet_26\n\nLANGUAGE: CMake\nCODE:\n```\nSET(CMAKE_CXX_LINK_FLAGS \"${CMAKE_CXX_LINK_FLAGS} -pthread\")\n```\n\n----------------------------------------\n\nTITLE: Set Include Directories for mg-replication_handler CMake\nDESCRIPTION: This snippet sets the include directory for the `mg-replication_handler` library to the `include` directory, making the header files accessible during compilation.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/replication_handler/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(mg-replication_handler PUBLIC include)\n```\n\n----------------------------------------\n\nTITLE: Copy YAML Workload File\nDESCRIPTION: Calls the `copy_e2e_files` macro to copy the `workloads.yaml` file into the end-to-end test directory for the `user_changing_its_own_password` feature.  This provides the necessary workload configuration for the end-to-end tests.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/user_changing_its_own_password/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncopy_e2e_files(user_changing_its_own_password workloads.yaml)\n```\n\n----------------------------------------\n\nTITLE: Disallowing In-Source Builds\nDESCRIPTION: This snippet calls a custom function `disallow_in_source_build()` to prevent in-source builds.  It also adds a custom target `clean_all` that executes a CMake script to remove all files in the build directory.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/CMakeLists.txt#_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\n# We want out of source builds, so that cmake generated files don't get mixed\n# with source files. This allows for easier clean up.\ndisallow_in_source_build()\nadd_custom_target(clean_all\n                  COMMAND ${CMAKE_COMMAND} -P ${PROJECT_SOURCE_DIR}/cmake/clean_all.cmake\n                  COMMENT \"Removing all files in ${CMAKE_BINARY_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Call CMake Macro for Specific Python Files\nDESCRIPTION: Calls the defined CMake macro `copy_execution_query_modules_e2e_python_files` for `common.py`, `conftest.py`, and `verify_behaviour.py`. This copies these specific Python files required for the execution query modules E2E tests.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/execution_query_modules/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_execution_query_modules_e2e_python_files(common.py)\ncopy_execution_query_modules_e2e_python_files(conftest.py)\ncopy_execution_query_modules_e2e_python_files(verify_behaviour.py)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory for Macro Benchmark Tests (CMake)\nDESCRIPTION: The `add_subdirectory` command is used to add the 'macro_benchmark' subdirectory to the current CMake project. This allows the CMake build system to include the macro benchmark tests as part of the overall build process.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(macro_benchmark)\n```\n\n----------------------------------------\n\nTITLE: Create Executable: query_memory_limit_multi_thread\nDESCRIPTION: Creates an executable named 'memgraph__e2e__memory__limit_query_alloc_create_multi_thread' from the source file 'query_memory_limit_multi_thread.cpp'. It also links this executable against gflags, mgclient, mg-utils, mg-io, and Threads::Threads libraries. This tests query memory allocation limits using multiple threads.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/memory/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(memgraph__e2e__memory__limit_query_alloc_create_multi_thread query_memory_limit_multi_thread.cpp)\ntarget_link_libraries(memgraph__e2e__memory__limit_query_alloc_create_multi_thread gflags mgclient mg-utils mg-io Threads::Threads)\n```\n\n----------------------------------------\n\nTITLE: Setting test prefix for Memgraph Macro Benchmark\nDESCRIPTION: This line sets the test prefix variable, which is later used to generate target names. The prefix is set to `memgraph__macro_benchmark__`.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/macro_benchmark/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(test_prefix memgraph__macro_benchmark__)\n```\n\n----------------------------------------\n\nTITLE: Copying Python E2E Test Files\nDESCRIPTION: This command copies Python files required for end-to-end testing of SSO functionality. It uses a custom function `copy_e2e_python_files` to copy the specified Python files into the designated SSO test directory.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/sso/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncopy_e2e_python_files(sso common.py)\ncopy_e2e_python_files(sso test_sso.py)\ncopy_e2e_python_files(sso test_oidc.py)\ncopy_e2e_python_files(sso test_saml_sso_module.py)\ncopy_e2e_python_files(sso dummy_sso_module.py)\n```\n\n----------------------------------------\n\nTITLE: Define CMake function to copy e2e python files\nDESCRIPTION: Defines a CMake function `copy_streams_e2e_python_files` that takes a file name as input and uses another CMake function `copy_e2e_python_files` to copy the specified file to the streams directory. This facilitates organized copying of python files needed for the tests.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/streams/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(copy_streams_e2e_python_files FILE_NAME)\n    copy_e2e_python_files(streams ${FILE_NAME})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting Target Name in CMake\nDESCRIPTION: This snippet sets the target name for the integration test to `memgraph__integration__mg_import_csv` and defines a related tester target name.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/integration/mg_import_csv/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(target_name memgraph__integration__mg_import_csv)\nset(tester_target_name ${target_name}__tester)\n```\n\n----------------------------------------\n\nTITLE: Copying Workloads YAML File for Metadata Queries\nDESCRIPTION: Calls the CMake function `copy_e2e_files` to copy the `workloads.yaml` file into the `metadata_queries` directory.  This file likely contains the specific workloads configurations used for running end-to-end tests against the metadata queries functionality.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/metadata_queries/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_e2e_files(metadata_queries workloads.yaml)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Names in CMake\nDESCRIPTION: This snippet sets the target names for various components of the Memgraph integration executor using the `set` command in CMake. It defines names for the main target, tester, flag_tester, executor, and config_checker.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/integration/run_time_settings/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(target_name memgraph__integration__executor)\nset(tester_target_name ${target_name}__tester)\nset(flag_tester_target_name ${target_name}__flag_tester)\nset(executor_target_name ${target_name}__executor)\nset(config_checker_target_name ${target_name}__config_checker)\n```\n\n----------------------------------------\n\nTITLE: Adding Skip List Remove Concurrent Test\nDESCRIPTION: Adds a concurrent test named `skip_list_remove.cpp`. It creates an executable and links it with `mg-utils` library using `target_link_libraries`. This ensures that the test can access the functionality provided by `mg-utils`.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/concurrent/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nadd_concurrent_test(skip_list_remove.cpp)\ntarget_link_libraries(${test_prefix}skip_list_remove mg-utils)\n```\n\n----------------------------------------\n\nTITLE: Defining CMake function to copy auto-index queries E2E python files\nDESCRIPTION: This CMake function, `copy_auto_index_queries_e2e_python_files`, takes a `FILE_NAME` as input and calls `copy_e2e_python_files` function with `index_auto_creation` prefix and the provided `FILE_NAME`. This function assumes that `copy_e2e_python_files` is already defined.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/index_auto_creation/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(copy_auto_index_queries_e2e_python_files FILE_NAME)\n    copy_e2e_python_files(index_auto_creation ${FILE_NAME})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Add Subdirectory in CMake\nDESCRIPTION: This line adds the `procedures` directory to the build process using `add_subdirectory`. This incorporates the contents of the `procedures` directory, including its own CMakeLists.txt file, into the current build.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/transaction_queue/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(procedures)\n```\n\n----------------------------------------\n\nTITLE: Creating Executable and Linking Libraries in CMake\nDESCRIPTION: This snippet creates an executable named `tester` from `tester.cpp`, sets its properties, and links it against `mg-communication` and `nlohmann_json` libraries. This provides the necessary dependencies for the integration test.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/integration/mg_import_csv/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${tester_target_name} tester.cpp)\nset_target_properties(${tester_target_name} PROPERTIES OUTPUT_NAME tester)\ntarget_link_libraries(${tester_target_name} mg-communication nlohmann_json::nlohmann_json)\n```\n\n----------------------------------------\n\nTITLE: Copy Specific E2E Files\nDESCRIPTION: These CMake commands call the previously defined functions to copy specific end-to-end test files. It copies Python files (`common.py`, `load_csv.py`, `load_csv_nullif.py`) and data files (`simple_nodes.csv`, `simple_edges.csv`, `nullif.csv`, `workloads.yaml`) required for load_csv E2E testing. It utilizes both `copy_load_csv_e2e_python_files` and `copy_load_csv_e2e_files` functions.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/load_csv/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_load_csv_e2e_python_files(common.py)\ncopy_load_csv_e2e_python_files(load_csv.py)\ncopy_load_csv_e2e_files(simple_nodes.csv)\ncopy_load_csv_e2e_files(simple_edges.csv)\n\ncopy_load_csv_e2e_python_files(load_csv_nullif.py)\ncopy_load_csv_e2e_files(nullif.csv)\n\ncopy_e2e_files(load_csv workloads.yaml)\n```\n\n----------------------------------------\n\nTITLE: Set Include Directories for mg-coordination (CMake)\nDESCRIPTION: This snippet sets the include directory for the `mg-coordination` library. It specifies that the public include directory is the `include` directory at the root of the project, making the headers within this directory accessible to other libraries and executables that link against `mg-coordination`.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/coordination/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(mg-coordination PUBLIC include)\n```\n\n----------------------------------------\n\nTITLE: Copying Python Files from Parent Directory with CMake\nDESCRIPTION: This CMake command copies Python files from the parent directory into the build directory. The command copy_e2e_python_files_from_parent_folder takes the destination directory (durability), the relative path to the parent directory (\"..\"), and the Python file name as arguments.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/durability/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncopy_e2e_python_files_from_parent_folder(durability \"..\" memgraph.py)\ncopy_e2e_python_files_from_parent_folder(durability \"..\" interactive_mg_runner.py)\ncopy_e2e_python_files_from_parent_folder(durability \"..\" mg_utils.py)\n```\n\n----------------------------------------\n\nTITLE: Adding Network Read Hang Concurrent Test\nDESCRIPTION: Adds a concurrent test named `network_read_hang.cpp`. It creates an executable and links it with `mg-communication` library using `target_link_libraries`. This ensures that the test can access the functionality provided by `mg-communication`.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/concurrent/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_concurrent_test(network_read_hang.cpp)\ntarget_link_libraries(${test_prefix}network_read_hang mg-communication)\n```\n\n----------------------------------------\n\nTITLE: Copying YAML Configuration File\nDESCRIPTION: This line copies the `workloads.yaml` file to the fine-grained access directory using the `copy_e2e_files` CMake function. This YAML file likely contains configuration data required for the end-to-end tests, such as database schema definitions, test scenarios, or input data.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/fine_grained_access/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_e2e_files(fine_grained_access workloads.yaml)\n```\n\n----------------------------------------\n\nTITLE: Copy CMake E2E Files\nDESCRIPTION: This line calls the `copy_e2e_files` macro, likely defined elsewhere, to copy the `workloads.yaml` file. The first argument to `copy_e2e_files` seems to be the name of the directory, and the second argument is the name of the file to copy.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/show_active_users_info/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_e2e_files(show_active_users_info workloads.yaml)\n```\n\n----------------------------------------\n\nTITLE: Define CMake function for query log Python file copying\nDESCRIPTION: This CMake function, `copy_query_log_e2e_python_files`, takes a file name as input and uses the `copy_e2e_python_files` function to copy the specified Python file to the query log E2E test directory. This function is designed to automate the process of copying Python files needed for query log related tests.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/query_log/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(copy_query_log_e2e_python_files FILE_NAME)\n  copy_e2e_python_files(query_log ${FILE_NAME})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Installing Licenses\nDESCRIPTION: This snippet installs the licenses directory from the source directory to the share/doc/memgraph directory in the installation location.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/licenses/\n        DESTINATION share/doc/memgraph)\n```\n\n----------------------------------------\n\nTITLE: Including Python files for batched procedures\nDESCRIPTION: These lines likely include Python files related to end-to-end testing of batched procedures. `batch_py_read.py` likely contains code for reading data in batches, while `batch_py_write.py` probably contains code for writing data in batches. They are used for testing the batched functionality.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/batched_procedures/procedures/CMakeLists.txt#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\ncopy_batched_procedures_e2e_python_files(batch_py_read.py)\ncopy_batched_procedures_e2e_python_files(batch_py_write.py)\n```\n\n----------------------------------------\n\nTITLE: Adding Skip List Insert Competitive Concurrent Test\nDESCRIPTION: Adds a concurrent test named `skip_list_insert_competitive.cpp`. It creates an executable and links it with `mg-utils` library using `target_link_libraries`. This ensures that the test can access the functionality provided by `mg-utils`.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/concurrent/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nadd_concurrent_test(skip_list_insert_competitive.cpp)\ntarget_link_libraries(${test_prefix}skip_list_insert_competitive mg-utils)\n```\n\n----------------------------------------\n\nTITLE: Copying Python Files with CMake\nDESCRIPTION: These CMake macros copy Python files required for end-to-end tests related to high availability. `copy_e2e_python_files` copies files from the current directory, while `copy_e2e_python_files_from_parent_folder` copies them from the parent directory. These files are crucial for setting up and running the integration tests.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/high_availability/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncopy_e2e_python_files(high_availability coordinator.py)\ncopy_e2e_python_files(high_availability single_coordinator.py)\ncopy_e2e_python_files(high_availability coord_cluster_registration.py)\ncopy_e2e_python_files(high_availability distributed_coords.py)\ncopy_e2e_python_files(high_availability disable_writing_on_main_after_restart.py)\ncopy_e2e_python_files(high_availability durability.py)\ncopy_e2e_python_files(high_availability manual_setting_replicas.py)\ncopy_e2e_python_files(high_availability common.py)\ncopy_e2e_python_files(high_availability workloads.yaml)\n\ncopy_e2e_python_files_from_parent_folder(high_availability \"..\" memgraph.py)\ncopy_e2e_python_files_from_parent_folder(high_availability \"..\" interactive_mg_runner.py)\ncopy_e2e_python_files_from_parent_folder(high_availability \"..\" mg_utils.py)\n```\n\n----------------------------------------\n\nTITLE: Setting Test Prefix in CMake\nDESCRIPTION: Sets the prefix for test names. This allows for easier identification and management of test targets within the CMake project. The variable `test_prefix` will be prepended to each test's name.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/concurrent/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(test_prefix memgraph__concurrent__)\n```\n\n----------------------------------------\n\nTITLE: Setting Version and Configuring Header File (CMake)\nDESCRIPTION: Sets the version string from the `MEMGRAPH_VERSION` variable and configures the `version.hpp` file using `configure_file`. Includes the current binary directory for header files.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tools/src/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(VERSION_STRING ${MEMGRAPH_VERSION})\nconfigure_file(../../src/version.hpp.in version.hpp @ONLY)\ninclude_directories(${CMAKE_CURRENT_BINARY_DIR})\n```\n\n----------------------------------------\n\nTITLE: Defining CMake function for copying E2E Python files\nDESCRIPTION: This CMake function, `copy_dynamic_variable_creation_e2e_python_files`, copies end-to-end Python files related to dynamic variable creation. It takes a `FILE_NAME` as input and uses the `copy_e2e_python_files` function to copy the specified file from the `dynamic_variable_creation` directory.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/dynamic_variable_creation/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(copy_dynamic_variable_creation_e2e_python_files FILE_NAME)\n    copy_e2e_python_files(dynamic_variable_creation ${FILE_NAME})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target - CMake\nDESCRIPTION: This adds a custom target named `memgraph__manual`. Custom targets can be used to trigger arbitrary commands during the build process. This particular target likely acts as a grouping or dependency for the manual tests.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/manual/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_target(memgraph__manual)\n```\n\n----------------------------------------\n\nTITLE: Linking libraries to the license component (CMake)\nDESCRIPTION: This snippet links the `mg-license` library with other libraries required for its functionality. It links `mg-settings`, `mg-utils`, `mg-requests`, and `spdlog::spdlog` to the `mg-license` target. These linked libraries provide functionalities related to settings, utilities, making requests, and logging respectively, which are essential for the license management component.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/license/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(mg-license mg-settings mg-utils mg-requests spdlog::spdlog)\n```\n\n----------------------------------------\n\nTITLE: Copying Python Files with CMake\nDESCRIPTION: This CMake command copies several Python files related to durability testing into the build directory.  The copy_e2e_python_files command takes the destination directory (durability) and the Python file name as arguments.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/durability/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncopy_e2e_python_files(durability conftest.py)\ncopy_e2e_python_files(durability common.py)\ncopy_e2e_python_files(durability durability_with_property_compression_used.py)\ncopy_e2e_python_files(durability periodic_snapshot.py)\ncopy_e2e_python_files(durability snapshot_recovery.py)\ncopy_e2e_python_files(durability multitenancy.py)\n```\n\n----------------------------------------\n\nTITLE: Calling CMake function to copy workloads YAML file\nDESCRIPTION: Calls the `copy_e2e_files` function to copy the `workloads.yaml` file into the query planning directory. This file likely contains workload configurations used for testing the query planning functionality.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/query_planning/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncopy_e2e_files(query_planning workloads.yaml)\n```\n\n----------------------------------------\n\nTITLE: Define CMake Function for Python E2E File Copying\nDESCRIPTION: Defines a CMake function named `copy_init_file_flags_e2e_python_files` that copies Python end-to-end test files with the 'init_file_flags'. It takes the `FILE_NAME` as input and calls the `copy_e2e_files` function internally.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/init_file_flags/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(copy_init_file_flags_e2e_python_files FILE_NAME)\ncopy_e2e_files(init_file_flags ${FILE_NAME})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Creating and Linking antlr_sigsegv Test - CMake\nDESCRIPTION: This calls the `add_manual_test` function to create a test executable named `antlr_sigsegv`. It links the test executable with `gtest`, `gtest_main`, `antlr_opencypher_parser_lib`, and `mg-utils` libraries.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/manual/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nadd_manual_test(antlr_sigsegv.cpp)\ntarget_link_libraries(${test_prefix}antlr_sigsegv gtest gtest_main\n                      antlr_opencypher_parser_lib mg-utils)\n```\n\n----------------------------------------\n\nTITLE: Calling the CMake Function with Python Files\nDESCRIPTION: This section calls the `copy_fine_grained_access_e2e_python_files` function defined earlier with a list of Python filenames. It automates the process of copying these files to the appropriate directory, which is crucial for setting up and running the fine-grained access end-to-end tests. Each line copies a specific Python file.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/fine_grained_access/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_fine_grained_access_e2e_python_files(common.py)\ncopy_fine_grained_access_e2e_python_files(create_delete_filtering_tests.py)\ncopy_fine_grained_access_e2e_python_files(edge_type_filtering_tests.py)\ncopy_fine_grained_access_e2e_python_files(path_filtering_tests.py)\ncopy_fine_grained_access_e2e_python_files(show_db.py)\n```\n\n----------------------------------------\n\nTITLE: Add Coordinator State Machine Unit Test (C++)\nDESCRIPTION: This snippet defines a unit test for the coordinator state machine. It links against `gflags`, `mg-coordination`, and `mg-repl_coord_glue`. The include directory is set to `${CMAKE_SOURCE_DIR}/include`. It's guarded by an `MG_ENTERPRISE` check, indicating it is part of the enterprise features.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/unit/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nif(MG_ENTERPRISE)\nadd_unit_test(coordinator_state_machine.cpp)\ntarget_link_libraries(${test_prefix}coordinator_state_machine gflags mg-coordination mg-repl_coord_glue)\ntarget_include_directories(${test_prefix}coordinator_state_machine PRIVATE ${CMAKE_SOURCE_DIR}/include)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Copy Specific Python Files\nDESCRIPTION: Calls the `copy_mock_python_api_e2e_files` function to copy `common.py` and `test_compare_mock.py` to the mock Python API directory. These files are likely used for testing the Python API.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/mock_api/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_mock_python_api_e2e_files(common.py)\ncopy_mock_python_api_e2e_files(test_compare_mock.py)\n```\n\n----------------------------------------\n\nTITLE: Setting Test Prefix - CMake\nDESCRIPTION: This sets a prefix for test target names to avoid naming conflicts and logically group the tests. It defines a variable named `test_prefix` with the value `memgraph__manual__`.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/manual/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(test_prefix memgraph__manual__)\n```\n\n----------------------------------------\n\nTITLE: Creating Executable and Linking Libraries (Enterprise)\nDESCRIPTION: This CMake code block conditionally adds an executable target (`memgraph__e2e__high_availability_rpc_comm`) and links it with specific libraries (`mg-coordination` and `mg-repl_coord_glue`). This functionality is only included when the `MG_ENTERPRISE` variable is set, indicating an enterprise build. It handles RPC communication for HA.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/high_availability/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif (MG_ENTERPRISE)\nadd_executable(memgraph__e2e__high_availability_rpc_comm rpc_comm.cpp)\ntarget_link_libraries(memgraph__e2e__high_availability_rpc_comm mg-coordination mg-repl_coord_glue)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining CMake Macro to Copy Python Files\nDESCRIPTION: Defines a CMake function `copy_configuration_check_e2e_python_files` that takes a file name as input and calls another CMake function `copy_e2e_python_files` with the `configuration` and the provided file name. This simplifies copying configuration-related Python files for end-to-end tests.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/configuration/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(copy_configuration_check_e2e_python_files FILE_NAME)\n  copy_e2e_python_files(configuration ${FILE_NAME})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Creating and Linking ssl_client Test - CMake\nDESCRIPTION: This calls the `add_manual_test` function to create a test executable named `ssl_client`. It links the test executable with the `mg-communication` library.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/manual/CMakeLists.txt#_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nadd_manual_test(ssl_client.cpp)\ntarget_link_libraries(${test_prefix}ssl_client mg-communication)\n```\n\n----------------------------------------\n\nTITLE: Copying E2E Python Files using CMake\nDESCRIPTION: This CMake function, `copy_observe_current_amount_of_deltas_e2e_python_files`, takes a file name as input and copies it to the `observe_current_amount_of_deltas` directory using the `copy_e2e_python_files` function. This pattern is used to prepare the necessary Python files for the E2E tests.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/observe_current_amount_of_deltas/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(copy_observe_current_amount_of_deltas_e2e_python_files FILE_NAME)\n    copy_e2e_python_files(observe_current_amount_of_deltas ${FILE_NAME})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Copy Analyze Graph E2E Python Files with CMake\nDESCRIPTION: This CMake function copies end-to-end (E2E) Python files related to graph analysis. It takes a file name as input and uses the `copy_e2e_python_files` function to copy the specified file to the analyze graph directory for E2E testing.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/analyze_graph/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(copy_analyze_graph_e2e_python_files FILE_NAME)\n    copy_e2e_python_files(analyze_graph ${FILE_NAME})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Copy Workloads YAML for E2E tests\nDESCRIPTION: This line copies the `workloads.yaml` file into `python_query_modules_reloading` directory, probably for end to end tests.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/python_query_modules_reloading/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_e2e_files(python_query_modules_reloading workloads.yaml)\n```\n\n----------------------------------------\n\nTITLE: Copying YAML E2E Test Files\nDESCRIPTION: This command copies a YAML configuration file (`workloads.yaml`) required for end-to-end testing of SSO functionality. It uses a custom function `copy_e2e_files` to copy the specified YAML file into the designated SSO test directory.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/sso/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncopy_e2e_files(sso workloads.yaml)\n```\n\n----------------------------------------\n\nTITLE: Copy workloads.yaml File\nDESCRIPTION: Calls the `copy_e2e_files` CMake function to copy the `workloads.yaml` file, which likely contains workload configurations used in end-to-end tests related to the 'hops_count' functionality. This ensures the correct test configurations are available.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/hops_count/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_e2e_files(hops_count workloads.yaml)\n```\n\n----------------------------------------\n\nTITLE: Link Libraries to mg-storage-v2\nDESCRIPTION: This snippet links the `mg-storage-v2` library with its dependencies, including internal Memgraph libraries (mg::replication, mg-utils, mg-flags, mg-rpc, mg-slk, mg-events, mg-memory), external libraries (gflags, absl::flat_hash_map, Threads::Threads, lib::rangev3), and other dependencies (mgcxx_text_search, tantivy_text_search, usearch, strong_type::strong_type, rangev3). These dependencies are essential for the correct functionality of the storage library.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/storage/v2/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(mg-storage-v2\n    PUBLIC\n    mg::replication\n    Threads::Threads\n    mg-utils\n    mg-flags\n    gflags\n    absl::flat_hash_map\n    mg-rpc\n    mg-slk\n    mg-events\n    mg-memory\n    lib::rangev3\n    mgcxx_text_search\n    tantivy_text_search\n    usearch\n    strong_type::strong_type\n    rangev3\n)\n```\n\n----------------------------------------\n\nTITLE: Calling CMake Function to Copy Specific Python Files\nDESCRIPTION: This section calls the `copy_disk_storage_e2e_python_files` function with a list of specific Python files. Each call copies the respective Python file to the designated disk storage location, enabling the execution of end-to-end tests involving disk storage features.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/disk_storage/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncopy_disk_storage_e2e_python_files(common.py)\ncopy_disk_storage_e2e_python_files(data_import.py)\ncopy_disk_storage_e2e_python_files(update_storage_mode_db_not_empty.py)\ncopy_disk_storage_e2e_python_files(update_storage_mode_disk_to_memory.py)\ncopy_disk_storage_e2e_python_files(update_storage_mode_memory_to_disk.py)\ncopy_disk_storage_e2e_python_files(free_memory_disabled.py)\ncopy_disk_storage_e2e_python_files(replication_disabled.py)\ncopy_disk_storage_e2e_python_files(snapshot_disabled.py)\ncopy_disk_storage_e2e_python_files(lock_data_dir_disabled.py)\ncopy_disk_storage_e2e_python_files(create_edge_from_indices.py)\ncopy_disk_storage_e2e_python_files(storage_info.py)\n```\n\n----------------------------------------\n\nTITLE: Add Coordinator Utilities Unit Test (C++)\nDESCRIPTION: This snippet adds a unit test for coordinator utilities using `add_unit_test`. It links the test executable with `gflags`, `mg-coordination`, and `mg-repl_coord_glue` libraries and specifies include directories necessary for compilation. The `MG_ENTERPRISE` conditional ensures the test is included only in enterprise builds.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/unit/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(MG_ENTERPRISE)\nadd_unit_test(coordinator_utils.cpp)\ntarget_link_libraries(${test_prefix}coordinator_utils gflags mg-coordination mg-repl_coord_glue)\ntarget_include_directories(${test_prefix}coordinator_utils PRIVATE ${CMAKE_SOURCE_DIR}/include)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Skip List Remove Competitive Concurrent Test\nDESCRIPTION: Adds a concurrent test named `skip_list_remove_competitive.cpp`. It creates an executable and links it with `mg-utils` library using `target_link_libraries`. This ensures that the test can access the functionality provided by `mg-utils`.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/concurrent/CMakeLists.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nadd_concurrent_test(skip_list_remove_competitive.cpp)\ntarget_link_libraries(${test_prefix}skip_list_remove_competitive mg-utils)\n```\n\n----------------------------------------\n\nTITLE: Defining CMake function to copy edge indices E2E Python files\nDESCRIPTION: Defines a CMake function named `copy_edge_indices_e2e_python_files` that utilizes the `copy_e2e_python_files` function to copy files related to edge indices for end-to-end testing. It takes a `FILE_NAME` as input and uses it as an argument for `copy_e2e_python_files` with the `edge_indices` prefix.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/edge_indices/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(copy_edge_indices_e2e_python_files FILE_NAME)\n  copy_e2e_python_files(edge_indices ${FILE_NAME})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Creating and Linking antlr_tree_pretty_print Test - CMake\nDESCRIPTION: This calls the `add_manual_test` function to create a test executable named `antlr_tree_pretty_print`. It links the test executable with the `antlr_opencypher_parser_lib` library.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/manual/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_manual_test(antlr_tree_pretty_print.cpp)\ntarget_link_libraries(${test_prefix}antlr_tree_pretty_print antlr_opencypher_parser_lib)\n```\n\n----------------------------------------\n\nTITLE: Define CMake Function to Copy Auth E2E Python Files\nDESCRIPTION: Defines a CMake function named `copy_auth_e2e_python_files` that takes a `FILE_NAME` as input.  It calls the `copy_e2e_python_files` function with 'auth' and the provided filename as arguments. This function abstracts the process of copying authentication-specific Python files for end-to-end testing.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/auth/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(copy_auth_e2e_python_files FILE_NAME)\n    copy_e2e_python_files(auth ${FILE_NAME})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Call CMake Function to Copy hops_count.py\nDESCRIPTION: Calls the custom CMake function `copy_hops_count_e2e_python_files` to copy the `hops_count.py` Python file, ensuring it's available for end-to-end testing. The `hops_count.py` file likely contains Python code for testing hop counting functionality.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/hops_count/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_hops_count_e2e_python_files(hops_count.py)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files for I/O Library\nDESCRIPTION: This snippet defines a variable `io_src_files` that lists the source files for the Memgraph I/O library. These files include implementations for address information, endpoints, sockets, and utility functions related to networking.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/io/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(io_src_files\n    network/addrinfo.cpp\n    network/endpoint.cpp\n    network/socket.cpp\n    network/utils.cpp)\n```\n\n----------------------------------------\n\nTITLE: Add Query Module using C API\nDESCRIPTION: This snippet shows how to add a query module to Memgraph using the C API. It calls the `add_query_module` function, passing in the C API (`c_api`) and the source file (`c_api.cpp`).\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/query_modules_storage_modes/query_modules/CMakeLists.txt#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nadd_query_module(c_api c_api.cpp)\n```\n\n----------------------------------------\n\nTITLE: Add Coordinator Log Store Unit Test (C++)\nDESCRIPTION: This snippet defines a unit test for the coordinator log store functionality. It links the test executable against the `gflags`, `mg-coordination`, and `mg-repl_coord_glue` libraries. The include directory is set using `target_include_directories`. The inclusion is conditional based on the `MG_ENTERPRISE` flag.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/unit/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nif(MG_ENTERPRISE)\n  add_unit_test(coordinator_log_store.cpp)\n  target_link_libraries(${test_prefix}coordinator_log_store gflags mg-coordination mg-repl_coord_glue)\n  target_include_directories(${test_prefix}coordinator_log_store PRIVATE ${CMAKE_SOURCE_DIR}/include)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Build If Needed Macro based on Toolchain Version\nDESCRIPTION: Defines a CMake macro `mg_build_if_needed` that conditionally executes a build macro based on the `MG_TOOLCHAIN_VERSION` environment variable. If the toolchain version is recent, it assumes the library is provided by the toolchain; otherwise, it calls the specified build macro.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/libs/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nmacro(mg_build_if_needed build_macro lib_name)\n  if(DEFINED ENV{MG_TOOLCHAIN_VERSION})\n    if($ENV{MG_TOOLCHAIN_VERSION} GREATER_EQUAL 6)\n      message(STATUS \"NOTE: ${lib_name} should be under the toolchain.\")\n    else()\n      cmake_language(CALL ${build_macro})\n    endif()\n  else()\n    cmake_language(CALL ${build_macro})\n  endif()\nendmacro()\n```\n\n----------------------------------------\n\nTITLE: SAML Attribute Statement XML\nDESCRIPTION: This XML snippet represents a SAML attribute statement that defines a user's group membership. It includes the attribute name, name format, and attribute value. The attribute value specifies the group the user belongs to, which is 'test-group'.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/sso/data/okta_response.txt#_snippet_8\n\nLANGUAGE: XML\nCODE:\n```\n <saml2:AttributeStatement>\n    <saml2:Attribute Name=\"group\"\n                     NameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:uri\">\n      <saml2:AttributeValue xsi:type=\"xs:string\">\n        test-group\n      </saml2:AttributeValue>\n    </saml2:Attribute>\n  </saml2:AttributeStatement>\n```\n\n----------------------------------------\n\nTITLE: Copying Specific Python Files using CMake Function\nDESCRIPTION: These lines invoke the `copy_show_license_info_e2e_python_files` CMake function defined previously to copy `common.py` and `test_show_license_info.py` files. This ensures that these Python files are available in the build directory for running E2E tests related to the `show_license_info` feature.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/show_license_info/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_show_license_info_e2e_python_files(common.py)\ncopy_show_license_info_e2e_python_files(test_show_license_info.py)\n```\n\n----------------------------------------\n\nTITLE: Defining CMake Function for Python File Copying\nDESCRIPTION: This CMake function, `copy_magic_functions_e2e_python_files`, takes a file name as input and uses the `copy_e2e_python_files` function (presumably defined elsewhere) to copy the specified Python files. It sets up the copying of Python files to a designated location for end-to-end testing.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/magic_functions/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(copy_magic_functions_e2e_python_files FILE_NAME)\n    copy_e2e_python_files(functions ${FILE_NAME})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Add RAFT State Unit Test (C++)\nDESCRIPTION: This snippet adds a unit test for `coordinator_raft_state.cpp`, linking it with `gflags`, `mg-coordination`, and `mg-repl_coord_glue`. It includes the directory `${CMAKE_SOURCE_DIR}/include`. It is conditionally included only when `MG_ENTERPRISE` is set.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/unit/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nif(MG_ENTERPRISE)\nadd_unit_test(coordinator_raft_state.cpp)\ntarget_link_libraries(${test_prefix}coordinator_raft_state gflags mg-coordination mg-repl_coord_glue)\ntarget_include_directories(${test_prefix}coordinator_raft_state PRIVATE ${CMAKE_SOURCE_DIR}/include)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Define CMake function to copy concurrent write E2E Python files\nDESCRIPTION: This CMake function, `copy_concurrent_write_e2e_python_files`, takes a file name as input and uses the `copy_e2e_python_files` function to copy the specified Python file related to concurrent write testing. It ensures that the Python file is correctly placed for the E2E tests to run.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/concurrent_write/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(copy_concurrent_write_e2e_python_files FILE_NAME)\n    copy_e2e_python_files(concurrent_write ${FILE_NAME})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: PGP Public Key Block\nDESCRIPTION: This is a PGP public key block used for verifying digital signatures and encrypting data. It includes key information such as the key owner's identity (Lasse Collin), the key ID, and the public key itself, formatted according to the PGP standard. This allows others to securely communicate with Lasse Collin and verify that messages originate from them.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/environment/toolchain/v4/xz_pgp.txt#_snippet_0\n\nLANGUAGE: PGP\nCODE:\n```\n-----BEGIN PGP PUBLIC KEY BLOCK-----\\n\\nmQINBEzEOZIBEACxg/IuXERlDB48JBWmF4NxNUuuup1IhJAJyFGFSKh3OGAO2Ard\\nsNuRLjANsFXA7m7P5eTFcG+BoHHuAVYmKnI3PPZtHVLnUt4pGItPczQZ2BE1WpcI\\nayjGTBJeKItX3Npqg9D/odO9WWS1i3FQPVdrLn0YH37/BA66jeMQCRo7g7GLpaNf\\nIrvYGsqTbxCwsmA37rpE7oyU4Yrf74HT091WBsRIoq/MelhbxTDMR8eu/dUGZQVc\\nKj3lN55RepwWwUUKyqarY0zMt4HkFJ7v7yRL+Cvzy92Ouv4Wf2FlhNtEs5LE4Tax\\nW0PO5AEmUoKjX87SezQK0f652018b4u6Ex52cY7p+n5TII/UyoowH6+tY8UHo9yb\\nfStrqgNE/mY2bhA6+AwCaOUGsFzVVPTbjtxL3HacUP/jlA1h78V8VTvTs5d55iG7\\njSqR9o05wje8rwNiXXK0xtiJahyNzL97Kn/DgPSqPIi45G+8nxWSPFM5eunBKRl9\\nvAnsvwrdPRsR6YR3uMHTuVhQX9/CY891MHkaZJ6wydWtKt3yQwJLYqwo5d4DwnUX\\nCduUwSKv+6RmtWI5ZmTQYOcBRcZyGKml9X9Q8iSbm6cnpFXmLrNQwCJN+D3SiYGc\\nMtbltZo0ysPMa6Xj5xFaYqWk/BI4iLb2Gs+ByGo/+a0Eq4XYBMOpitNniQARAQAB\\ntCdMYXNzZSBDb2xsaW4gPGxhc3NlLmNvbGxpbkB0dWthYW5pLm9yZz6JAlEEEwEK\\nADsCGwMCHgECF4AECwkIBwMVCggFFgIDAQAWIQQ2kMJAzlG0Zw0wrRw47nV9aRhG\\nIAUCYEt9dQUJFxeR4wAKCRA47nV9aRhGIBNDEACxD6vJ+enZwe3IgkJh5JtLsC9b\\nMWCQRlPW1EVMsg96Cb5Rtron1eN1pp1TlzENJu1/C7C/VEsr9WwOPg26Men7fNf/\\nO21QM9IBWd/uB0Pu333WqKh92ESS5x9ST9DrG39nVGSPkQQBMuia72VrA+crPnwT\\nh/u1IN6/sff5VDIU24rUiqW2Npy733dANruj7Ny0scRXVPltnVdhqwPHt6qNjC1\\nt+/cCnwHgW1BR1RYXBPpB42z/m29dL9rPrG0YPGWs2Bc+EATUICfEE6eIvwfciue\\nIJTjKT9Y9DrogJC2AYFhjC7N04OKdCB2hFs4BjexJwr4X0GJO7LhFl03c951AsIE\\nGHwrucRPB5bo2vmvQ8IvZn7CmtdUJzXv9JlyU6p+MIK1pz7TK6GgSOSffQIXZn6e\\nnUPtm9mEwuncOfmW8ODYPs1gCWYgyiFJx8h7eEu+M4MxHSFBs7MwXf/Ae2fSp+M\\nP/p198qB8fC5oVBnF95qb0Qi0uc1D+Gb+gpBF+ymMb+s/VBOR3QWiym7AzBrJ62g\\nUnbC9jMLGnSRI+7p7raUfMTgXr5/oQoBw7ExJVltSSRrim2YH/t4CV47mO6dR9J3\\n1RtsTFIRNhz+07XPsETcuCV/dgqeC8fOFLt9MY17Sufhb1DcGy4urZBOIhXcpTV7\\nvHVj5IYH5nYOT49NRYkCOAQTAQIAIgUCTMQ5kgIbAwYLCQgHAwIGFQgCCQoLBBYC\\nAwECHgECF4AACgkQOO51fWkYRiAg4A/7BXKwoRaXrMbMPOW7vuVF7c2IKB2Yqzn1\\nvLBCwuEHkqY237lDcXY4/5LR+1gcZ3Duw1n/BRSm0FBdvyX/JTWiWNSDUkKAO/0l\\nT2Tg44YLrDT3bzwu8dbU9xQt6kH+SCOHvv5Oe4k79l5mro6fF3H1M0bN63x/YoFY\\nojy09D7/JptY82oR4f/VdKnfZLJcCViCb0wp8SD2NkDAudKg+K+7PD8HlTWklQQg\\nTZdRXxVZKIJeU42aJDqnRbAhJd64YHyClhqut9F5LUmiP5qfLfNhkKDhNOwk2Blr\\nBGBJkSd7wPyzcX4Mun/L6YspHjbeVMt9TD7HQlo+OOd2OjAHCx6pqwkXnzeLPEaE\\ncPdQ1SHgrBViAxX3DNPubLP0Knw8XwFu96EuhHZgexE1W7bB4LFsJyXAc5k1PqPD\\nCLsAauxmvI2OfI7opG/8wyxDvNgoPjG8fZNAgY0REqPC0JnTXChH31IxUmhNotH8\\ntD3DDTZOHw05n5MwwUrEE9xiETVDfFQcMLfxZ9KLz+BC2g1t5LYublRgnCMNJzFg\\nsNUMM02CphABzl/LCLnumr0eyQQ/weV4twEhLwSDmqLYHL0EdYW0Y3CnnU9vmYxQ\\ncXKbstS71sEJJYBBmSBbf9GxkOY8BRNtwVwY0kPgxv1WqdVBiAFvfB+pyAsrax9B\\n3UeB7ZSwRD6JAhwEEAEKAAYFAlS25GwACgkQlbYYGy0z6ew92Q//ZA9/6piQtoW4\\nPwP/1DtWGyKU8hwR+9FG669iPk/dAG+yoEJtFMOUpg/FUFmCX8Bc4oEHsCVyLxKt\\nDcCVUIRcYNSFi5hTZaBEbwsOlDT37gtlfIIu34hhHRccKaLnN/N9gNMNw8wGh9xg\\nQ/KtxZwcbk/bZIlDkKTJkFBRAekdEGAFDWb/AZOy+LQxS8ZAh1eWkfV0i8opmK9k\\ngPXtLE0WSsqtYyGs58z+BFE9NH3tEUwK6jSvtuLwQl4UrICNbKthcpb8WwH6UXzb\\nq3QNSYVOpf/cqRdBJA6bvb/ku/xyKVL08lGmxD9v1b137R7mafDAFPTsvH2Mt/0V\\nYuhtWav3r1Bl9QksDxt2DTS8wiWDUBetGqOVdcw7vBrXPEWDNBmxeJXsiJ7zJlR+\\n9wrJOm6RV2+l1IPxu96EaPS+kTNBijKrhxb67bww8BTEWTd0wcdJmgWRkM8SIstp\\nIKqd0L2TFYph2/NtrBhRg+DIEPJPpSTGsUMcCEXCZPQ+cIdlQKsWpk0tZ62DlvEl\\nr7E+wgUSQolRfx5KrpZifiS2zQlhzdXv28CJhsVbLyw5fUAWUKIH/dCo5NKsNLk2\\nLc5DH9VWnFgxAAtW290FqeK/4ulMq7Vs1dQSwyHM2Ni3QqqeaiOrh8gbSY5CMLFN\\nY3HYRwuTYPa3AobsozCzBj0Zdf/6AFe5Ag0ETMQ5kgEQAL/FwKdjxgPxtSpgq1SM\\nzgZtTTyLqhgGD3NZfadHWHYRIL38NDV3JeTA79Y2zj2dj7KQPDT+0aqeizTV2E3j\\nP3iCQ53VOT4consBaQAgKexpptnS+T1DobtICFJ0GGzf0HRj6KO2zSOuOitWPWlU\\nwbvX7M0LLI2+hqlx0jTPqbJFZ/Za6KTtbS6xdCPVUpUqYZQpokEZcwQmUp8Q+lGo\\nJD2sNYCZyap63X/aAOgCGr2RXYddOH5e8vGzGW+mwtCv+WQ9Ay35mGqI5MqkbZd1\\nQbuv2b1647E/QEEucfRHVbJVKGGPpFMUJtcItyyIt5jo+r9CCL4Cs47dF/9/RNwu\\nNvpvHXUyqMBQdWNZRMx4k/NGD/WviPi9m6mIMui6rOQsSOaqYdcUX4Nq2Orr3Oaz\\n2JPQdUfeI23iot1vK8hxvUCQTV3HfJghizN6spVl0yQOKBiE8miJRgrjHilH3hTb\\nxoo42xDkNAq+CQo3QAm1ibDxKCDq0RcWPjcCRAN/Q5MmpcodpdKkzV0yGIS4g7s5\\nfrVrgV/kox2r4/Yxsr8K909+4H82AjTKGX/BmsQFCTAqBk6p7I0zxjIqJ/w33TZB\\nQ0Pn4r3WIlUPafzY6a9/LAvN1fHRxf9SpCByJsszD03Qu5f5TB8gthsdnVmTo7jj\\niordEKMtw2aEMLzdWWTQ/TNVABEBAAGJAjwEGAEKACYCGwwWIQQ2kMJAzlG0Zw0w\\nrRw47nV9aRhGIAUCYEt9YAUJFxeRzgAKCRA47nV9aRhGIMLtD/9HuKM4pngImcuz\\nYwzQmdv4j26YYyh4jVsKEmVWTiRcehEgUIlrWkCu3qzd5NK+RetS7kJ8MPnzEUfj\\nYbpdC6yrF6n1mSrZZ4VJMkV2ev37bIgXM+Wp1mCAGbjNxQnjn9RabT/gjIqmGuRn\\nAP7RsSeOSuO/gO9h2Pteciz23ussTilB+8cTooQEQQZe6Kv/zukvL+ccSehLHsZ7\\nqVfRUAmtt8nFkXXE+s8jfLfhqstaI2/RJu5witaPcXM8Mnz2E95aASAbZy0eQot9\\n0Pvf07n9yuC3tueTvzvlXx3h5U3yT44tIOmzANIQjay1TGdm+RBJ2ZYyhyLawlZ2\\nNVUXXSp4QZZXPA0UWbF+pb7Q9cdKDNFVuvGBljuea0Yd0T2o+ibDq43HziX9ll+l\\nSXk9mqvW1UcDOaxWrSsm1Gc1O9g3wqH5xHAhtY8GPh/7VgAawskPkmnlkMW6pYPy\\nzibbeISJL1gd1jIT63y6aoVrtNoo+wYJm280ROflh4+5QOo6QJ+jm70fkXSG/qJ5\\na8/qCPTHkJc/rpkL6/TDQAJURi9RhDAC0gb40HtusbN1LZEA+i0cWTmYXap+DB4Y\\nR4pApilpaG87M+VUokR4xpnx7vTb2MPa7Mdenvi9FEGnKXadmT8038vlfzz5GGUT\\nMlVin9BQPTpdA+PpRiJvKJgVDeAFOg==\\n=asTC\\n-----END PGP PUBLIC KEY BLOCK-----\n```\n\n----------------------------------------\n\nTITLE: General Configuration YAML\nDESCRIPTION: This YAML snippet shows the general configuration options, including verbose logging and SSL enabling/disabling. These parameters control the overall behavior of the stress test suite.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/stress/README.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ngeneral:\n  verbose: <true|false>  # Enables verbose logging.\n  use_ssl: <true|false>  # Enables SSL.\n```\n\n----------------------------------------\n\nTITLE: Defining CMake Function for Copying Python Files\nDESCRIPTION: Defines a CMake function `copy_fine_grained_access_e2e_python_files` that takes a filename as input and uses another CMake function `copy_e2e_python_files` to copy the specified Python file to a destination directory specific for fine-grained access tests. This snippet provides a reusable way to copy multiple Python files to a common location for end-to-end testing.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/fine_grained_access/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(copy_fine_grained_access_e2e_python_files FILE_NAME)\n    copy_e2e_python_files(fine_grained_access ${FILE_NAME})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Creating and Linking query_hash Test - CMake\nDESCRIPTION: This calls the `add_manual_test` function to create a test executable named `query_hash`. It links the test executable with the `mg-query` library.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/manual/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nadd_manual_test(query_hash.cpp)\ntarget_link_libraries(${test_prefix}query_hash mg-query)\n```\n\n----------------------------------------\n\nTITLE: Create Node with Label and Property Cypher\nDESCRIPTION: This snippet demonstrates how to create a node with a specific label (e.g., Ovid, Bible, Plinius) and a property 'quote' in a Memgraph database. The RETURN n; clause returns the created node.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tools/tests/client/input/unfinished_query.txt#_snippet_0\n\nLANGUAGE: Cypher\nCODE:\n```\nCREATE (n:Ovid{quote:\"Exitus Acta Probat\"}) RETURN n;\n```\n\n----------------------------------------\n\nTITLE: Copy E2E files\nDESCRIPTION: This line calls `copy_e2e_files` function to copy `queries` and `workloads.yaml`. This likely copies entire directories or files based on some predefined rules. This might be a custom function defined elsewhere.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/queries/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_e2e_files(queries workloads.yaml)\n```\n\n----------------------------------------\n\nTITLE: Creating and Linking ssl_server Test - CMake\nDESCRIPTION: This calls the `add_manual_test` function to create a test executable named `ssl_server`. It links the test executable with the `mg-communication` library.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/manual/CMakeLists.txt#_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\nadd_manual_test(ssl_server.cpp)\ntarget_link_libraries(${test_prefix}ssl_server mg-communication)\n```\n\n----------------------------------------\n\nTITLE: Add Release Subdirectory (CMake)\nDESCRIPTION: This snippet adds the `release` subdirectory to the build. This likely contains files related to the release process or specific release configurations.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/CMakeLists.txt#_snippet_44\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(release)\n```\n\n----------------------------------------\n\nTITLE: Define CMake function to copy analytical mode E2E Python files\nDESCRIPTION: This CMake function, `copy_analytical_mode_e2e_python_files`, copies E2E Python files for analytical mode. It calls the `copy_e2e_python_files` function with the `analytical_mode` argument and the specified `FILE_NAME`. The function ensures that the Python files needed for analytical mode testing are correctly copied to the appropriate location.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/analytical_mode/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(copy_analytical_mode_e2e_python_files FILE_NAME)\n    copy_e2e_python_files(analytical_mode ${FILE_NAME})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Set Community Detection Module Source Files CMake\nDESCRIPTION: This snippet sets the source files required for the community detection online module using the `set` command. It defines a variable `community_detection_online_module_src` containing the paths to the C++ source files.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/query_modules/community_detection_module/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(community_detection_online_module_src\n    community_detection_online_module.cpp\n    algorithm_online/community_detection.cpp)\n```\n\n----------------------------------------\n\nTITLE: Defining CMake Function for Copying E2E Python Files\nDESCRIPTION: Defines a CMake function `copy_metadata_queries_e2e_python_files` that takes a `FILE_NAME` as input. This function calls another CMake function, `copy_e2e_python_files`, passing in `metadata_queries` and the specified `FILE_NAME` to copy the E2E python files.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/metadata_queries/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(copy_metadata_queries_e2e_python_files FILE_NAME)\n  copy_e2e_python_files(metadata_queries ${FILE_NAME})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting Audit Source Files CMake\nDESCRIPTION: This snippet sets the source files for the audit component. `audit_src_files` variable is defined as a list containing `log.cpp`.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/audit/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(audit_src_files log.cpp)\n```\n\n----------------------------------------\n\nTITLE: Defining Target Names (CMake)\nDESCRIPTION: Defines the target names for the main component, its tester, and the flag checker. These names are used in subsequent commands to configure the build process.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/integration/flag_check/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(target_name memgraph__integration__flag_check)\nset(tester_target_name ${target_name}__tester)\nset(flag_check_target_name ${target_name}__flag_check)\n```\n\n----------------------------------------\n\nTITLE: Defining CMake Function to Copy Python Files\nDESCRIPTION: This function `copy_constraint_validation_e2e_python_files` takes a file name as input and uses the `copy_e2e_python_files` function to copy the specified Python file to the constraint validation directory. It is designed for end-to-end testing related to constraint validation.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/constraints/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(copy_constraint_validation_e2e_python_files FILE_NAME)\n  copy_e2e_python_files(constraint_validation ${FILE_NAME})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setup usearch Header Library\nDESCRIPTION: This snippet imports the usearch header library and sets the interface include directories for the usearch target, including the base include directory, the fp16 include directory, and the stringzilla include directory.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/libs/CMakeLists.txt#_snippet_32\n\nLANGUAGE: cmake\nCODE:\n```\nimport_header_library(usearch ${CMAKE_CURRENT_SOURCE_DIR}/usearch/include)\nset_property(TARGET usearch PROPERTY INTERFACE_INCLUDE_DIRECTORIES\n  ${CMAKE_CURRENT_SOURCE_DIR}/usearch/include\n  ${CMAKE_CURRENT_SOURCE_DIR}/usearch/fp16/include\n  ${CMAKE_CURRENT_SOURCE_DIR}/usearch/stringzilla/include)\n```\n\n----------------------------------------\n\nTITLE: Defining Property Based Test Function CMake\nDESCRIPTION: Defines a CMake function named `add_property_based_test` that takes a C++ file as input.  It creates an executable target, sets its output name, links necessary libraries (gtest, gtest_main, rapidcheck, rapidcheck_gtest), adds a test, and adds the target as a dependency to `memgraph__property_based`.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/property_based/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(add_property_based_test test_cpp)\n    # get exec name (remove extension from the abs path)\n    get_filename_component(exec_name ${test_cpp} NAME_WE)\n    set(target_name ${test_prefix}${exec_name})\n    add_executable(${target_name} ${test_cpp})\n    # OUTPUT_NAME sets the real name of a target when it is built and can be\n    # used to help create two targets of the same name even though CMake\n    # requires unique logical target names\n    set_target_properties(${target_name} PROPERTIES OUTPUT_NAME ${exec_name})\n    target_link_libraries(${target_name} gtest gtest_main)\n    target_link_libraries(${target_name} rapidcheck rapidcheck_gtest)\n    add_test(${target_name} ${exec_name})\n    add_dependencies(memgraph__property_based ${target_name})\nendfunction(add_property_based_test)\n```\n\n----------------------------------------\n\nTITLE: Creating Node with Double-Quoted String\nDESCRIPTION: This Cypher query creates a node with the label 'Ciceron' and a property 'quote' whose value is a double-quoted string. It returns the created node 'n'.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tools/tests/client/input/quote.txt#_snippet_0\n\nLANGUAGE: Cypher\nCODE:\n```\nCREATE (n:Ciceron{quote:\"o tempora o mores\"}) RETURN n;\n```\n\n----------------------------------------\n\nTITLE: Creating mg-telemetry static library\nDESCRIPTION: This code creates a static library named `mg-telemetry` using the source files defined in `telemetry_src_files`. It also sets include directories for the library and links it against other Memgraph libraries.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/telemetry/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(mg-telemetry STATIC ${telemetry_src_files})\ntarget_include_directories(mg-telemetry PRIVATE ${CMAKE_SOURCE_DIR}/include)\ninclude_directories(${CMAKE_CURRENT_BINARY_DIR}/..)\ntarget_link_libraries(mg-telemetry mg-requests mg-kvstore mg-utils mg-events mg-dbms)\n```\n\n----------------------------------------\n\nTITLE: Creating and Linking antlr_parser Test - CMake\nDESCRIPTION: This calls the `add_manual_test` function to create a test executable named `antlr_parser`. It links the test executable with the `antlr_opencypher_parser_lib` library.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/manual/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_manual_test(antlr_parser.cpp)\ntarget_link_libraries(${test_prefix}antlr_parser antlr_opencypher_parser_lib)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory\nDESCRIPTION: This command adds a subdirectory named `data` to the project. This subdirectory is likely used for storing test data necessary for the end-to-end tests.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/sso/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(data)\n```\n\n----------------------------------------\n\nTITLE: Defining CMake function for copying Python files\nDESCRIPTION: This CMake function `copy_time_to_live_e2e_python_files` defines a wrapper around the `copy_e2e_python_files` function, specifically for files related to 'time_to_live'. It takes the FILE_NAME as input and passes it to the underlying copy function with the 'time_to_live' prefix.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/time_to_live/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(copy_time_to_live_e2e_python_files FILE_NAME)\n    copy_e2e_python_files(time_to_live ${FILE_NAME})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Adding and Linking long_running Stress Test in CMake\nDESCRIPTION: This snippet calls the `add_stress_test` function to create an executable from `long_running.cpp`. It then links the resulting executable with the libraries `mg-communication`, `mg-io`, and `mg-utils`.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/stress/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_stress_test(long_running.cpp)\ntarget_link_libraries(${test_prefix}long_running mg-communication mg-io mg-utils)\n```\n\n----------------------------------------\n\nTITLE: Add Subdirectory for Procedures\nDESCRIPTION: Adds the `procedures` subdirectory to the build, indicating that it contains source code or configuration related to stored procedures within Memgraph.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/mock_api/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(procedures)\n```\n\n----------------------------------------\n\nTITLE: Including Kafka Subdirectory with CMake\nDESCRIPTION: This snippet includes the `kafka` subdirectory in the current CMake project. It tells CMake to process the CMakeLists.txt file within the `kafka` directory and adds the targets defined there to the current build.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/integrations/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(kafka)\n```\n\n----------------------------------------\n\nTITLE: Create Executable: procedure_memory_limit\nDESCRIPTION: Creates an executable named 'memgraph__e2e__procedure_memory_limit' from the source file 'procedure_memory_limit.cpp'. It also links this executable against gflags, mgclient, mg-utils, and mg-io libraries. This tests general procedure memory limits.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/memory/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(memgraph__e2e__procedure_memory_limit procedure_memory_limit.cpp)\ntarget_link_libraries(memgraph__e2e__procedure_memory_limit gflags mgclient mg-utils mg-io)\n```\n\n----------------------------------------\n\nTITLE: Calling CMake function for specific python files\nDESCRIPTION: These lines call the `copy_auto_index_queries_e2e_python_files` function for `common.py` and `index_auto_creation.py`. This copies these files using the specified prefix.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/index_auto_creation/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_auto_index_queries_e2e_python_files(common.py)\ncopy_auto_index_queries_e2e_python_files(index_auto_creation.py)\n```\n\n----------------------------------------\n\nTITLE: Creating Node with Label Constantine in Cypher\nDESCRIPTION: This Cypher query creates a node with the label 'Constantine' and a property 'quote' set to 'In hoc signo vinces'. The query then returns the created node.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tools/tests/client/input/multiline_query_with_comments.txt#_snippet_0\n\nLANGUAGE: Cypher\nCODE:\n```\nCREATE (n:Constantine{quote:\"In hoc signo vinces\"})\nRETURN n;\n```\n\n----------------------------------------\n\nTITLE: Copying E2E Test Files - Okta Response\nDESCRIPTION: This command copies a standard Okta response file for end-to-end testing. It represents a successful authentication and authorization scenario.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/sso/data/CMakeLists.txt#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\ncopy_e2e_files(sso okta_response.txt)\n```\n\n----------------------------------------\n\nTITLE: Creating Global Memory Limit Thread Proc Library (C++)\nDESCRIPTION: This snippet creates a shared library named `global_memory_limit_thread_proc` from the source file `global_memory_limit_thread_proc.cpp`. It sets the include directories for the target and links the `mg-utils` library as a dependency.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/memory/procedures/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(global_memory_limit_thread_proc SHARED global_memory_limit_thread_proc.cpp)\ntarget_include_directories(global_memory_limit_thread_proc PRIVATE ${CMAKE_SOURCE_DIR}/include)\ntarget_link_libraries(global_memory_limit_thread_proc mg-utils)\n```\n\n----------------------------------------\n\nTITLE: Creating Query Memory Limit Proc Multi-Thread Library (C++)\nDESCRIPTION: This snippet creates a shared library named `query_memory_limit_proc_multi_thread` from the source file `query_memory_limit_proc_multi_thread.cpp`. It sets the include directories for the target and links the `mg-utils` library as a dependency.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/memory/procedures/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(query_memory_limit_proc_multi_thread SHARED query_memory_limit_proc_multi_thread.cpp)\ntarget_include_directories(query_memory_limit_proc_multi_thread PRIVATE ${CMAKE_SOURCE_DIR}/include)\ntarget_link_libraries(query_memory_limit_proc_multi_thread mg-utils )\n```\n\n----------------------------------------\n\nTITLE: Enable Telemetry in Memgraph\nDESCRIPTION: This command starts Memgraph with telemetry enabled. The `telemetry-enabled=True` flag ensures that Memgraph generates a `run_id`, which is essential for the subsequent test to check if it's included in the query metadata.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/telemetry/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmemgraph --telemetry-enabled=True\n```\n\n----------------------------------------\n\nTITLE: Setting Test Prefix CMake\nDESCRIPTION: Sets the prefix for the test target names. This prefix is used to create unique target names for property-based tests.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/property_based/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(test_prefix memgraph__property_based__)\n```\n\n----------------------------------------\n\nTITLE: Calling CMake function to copy Python files\nDESCRIPTION: These lines call the defined CMake function `copy_time_to_live_e2e_python_files` for specific Python files: `common.py` and `multitenancy.py`.  These files are copied as part of setting up the 'time_to_live' end-to-end tests.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/time_to_live/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_time_to_live_e2e_python_files(common.py)\ncopy_time_to_live_e2e_python_files(multitenancy.py)\n```\n\n----------------------------------------\n\nTITLE: Copying workloads.yaml for drop_graph E2E testing\nDESCRIPTION: Copies the `workloads.yaml` file to the `drop_graph` directory using the `copy_e2e_files` function.  The `workloads.yaml` file likely contains configuration or data definitions for the workload used during end-to-end testing of graph dropping.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/drop_graph/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ncopy_e2e_files(drop_graph workloads.yaml)\n```\n\n----------------------------------------\n\nTITLE: Adding storage_v2_enum_store_bench Benchmark\nDESCRIPTION: Adds the `storage_v2_enum_store_bench` benchmark. Links the executable with the `mg-storage-v2` library.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/benchmark/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\nadd_benchmark(storage_v2_enum_store_bench.cpp)\ntarget_link_libraries(${test_prefix}storage_v2_enum_store_bench mg-storage-v2)\n```\n\n----------------------------------------\n\nTITLE: Find gflags Package CMake\nDESCRIPTION: This line uses the `find_package` command to locate the gflags library, which is a required dependency. The `REQUIRED` keyword ensures that the configuration will fail if gflags is not found.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/triggers/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(gflags REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Calling CMake Function to Copy Specific Python Files\nDESCRIPTION: These lines call the previously defined CMake function, `copy_concurrent_query_modules_e2e_python_files`, to copy `client.py` and `con_query_modules.py` to the `concurrent_query_modules` directory. These files are likely used as part of the end-to-end testing setup.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/concurrent_query_modules/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_concurrent_query_modules_e2e_python_files(client.py)\ncopy_concurrent_query_modules_e2e_python_files(con_query_modules.py)\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies and Run Memgraph E2E Tests (Bash)\nDESCRIPTION: This snippet installs the necessary dependencies for the Memgraph end-to-end tests and then runs both the automatic and explicit test suites. It assumes npm is available.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/manual/js/transaction_timeout/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run test:auto\nnpm run test:explicit\n```\n\n----------------------------------------\n\nTITLE: Building Tester Executable with CMake\nDESCRIPTION: Adds an executable target named 'tester' from the 'tester.cpp' source file.  It sets the output name to 'tester' and links it against the 'mg-communication' library. This provides the executable with access to Memgraph's communication capabilities.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/integration/auth/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${tester_target_name} tester.cpp)\nset_target_properties(${tester_target_name} PROPERTIES OUTPUT_NAME tester)\ntarget_link_libraries(${tester_target_name} mg-communication)\n```\n\n----------------------------------------\n\nTITLE: Create Node with Label and Property (Plinius) Cypher\nDESCRIPTION: This snippet demonstrates how to create a node with a specific label (Plinius) and a property 'quote' in a Memgraph database. The RETURN n; clause returns the created node.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tools/tests/client/input/unfinished_query.txt#_snippet_3\n\nLANGUAGE: Cypher\nCODE:\n```\nCREATE (n:Plinius{quote:\"In vino veritas\"}) RETURN n;\n```\n\n----------------------------------------\n\nTITLE: Copy E2E test files for query log\nDESCRIPTION: This line uses the `copy_e2e_files` function to copy `workloads.yaml` to the query log E2E test directory. This likely includes test configurations and workloads required to run the end-to-end tests.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/query_log/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_e2e_files(query_log workloads.yaml)\n```\n\n----------------------------------------\n\nTITLE: Adding execution Benchmark\nDESCRIPTION: Adds the `execution` benchmark. Links the executable with `mg-query` and `mg-communication` libraries. Uses additional source file from `${CMAKE_SOURCE_DIR}/src/glue/communication.cpp`.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/benchmark/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_benchmark(query/execution.cpp ${CMAKE_SOURCE_DIR}/src/glue/communication.cpp)\ntarget_link_libraries(${test_prefix}execution mg-query mg-communication)\n```\n\n----------------------------------------\n\nTITLE: Copying YAML file\nDESCRIPTION: This line calls the `copy_e2e_files` CMake function to copy the 'workloads.yaml' file with the prefix 'time_to_live'. This YAML file likely contains workload definitions used during the time-to-live end-to-end tests.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/time_to_live/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_e2e_files(time_to_live workloads.yaml)\n```\n\n----------------------------------------\n\nTITLE: Call CMake function to copy concurrency.py\nDESCRIPTION: Calls the `copy_concurrency_e2e_python_files` CMake function to copy the `concurrency.py` file for E2E testing.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/concurrency/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_concurrency_e2e_python_files(concurrency.py)\n```\n\n----------------------------------------\n\nTITLE: Creating and Linking kvstore_console Test - CMake\nDESCRIPTION: This calls the `add_manual_test` function to create a test executable named `kvstore_console`. It links the test executable with the `mg-kvstore`, `gflags`, and `mg-utils` libraries.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/manual/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nadd_manual_test(kvstore_console.cpp)\ntarget_link_libraries(${test_prefix}kvstore_console mg-kvstore gflags mg-utils)\n```\n\n----------------------------------------\n\nTITLE: Define Custom CMake Function for Copying Python Files\nDESCRIPTION: Defines a custom CMake function named `copy_triggers_e2e_python_files` that takes a `FILE_NAME` as input.  This function then calls another function, `copy_e2e_python_files`, passing the `triggers` and the given `FILE_NAME` as arguments. This custom function likely simplifies the process of copying necessary Python scripts for end-to-end trigger tests.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/triggers/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(copy_triggers_e2e_python_files FILE_NAME)\n    copy_e2e_python_files(triggers ${FILE_NAME})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Copying Workloads YAML file\nDESCRIPTION: This line copies the `workloads.yaml` file to the `disk_storage` directory using the `copy_e2e_files` function. This YAML file likely contains configurations or data used for testing or running workloads related to disk storage.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/disk_storage/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncopy_e2e_files(disk_storage workloads.yaml)\n```\n\n----------------------------------------\n\nTITLE: Checking IPO Support\nDESCRIPTION: This snippet checks for Interprocedural Optimization (IPO) support and enables it for Release and RelWithDebInfo builds.  First, sets the CMake policy, then includes a check for IPO, and finally enables IPO for the specified build types.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/CMakeLists.txt#_snippet_23\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_policy(SET CMP0138 NEW)\ninclude(CheckIPOSupported)\ncheck_ipo_supported() # fatal error if IPO is not supported\nset(CMAKE_INTERPROCEDURAL_OPTIMIZATION_Release TRUE)\nset(CMAKE_INTERPROCEDURAL_OPTIMIZATION_RelWithDebInfo TRUE)\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests (Bash)\nDESCRIPTION: This bash command executes the unit tests for the Jepsen Memgraph integration. It uses the `run.sh` script with the `unit-tests` argument and specifies the location of the Memgraph binary.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/jepsen/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n/run.sh unit-tests --binary ../../build/memgraph\n```\n\n----------------------------------------\n\nTITLE: Executing Version Script\nDESCRIPTION: This snippet executes a Python script to retrieve the Memgraph version. It passes various options, including the offering type, version override, and source directory. The output is stored in the MEMGRAPH_VERSION variable. It checks for errors during execution and displays the version.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nset(get_version_script \"${CMAKE_CURRENT_SOURCE_DIR}/release/get_version.py\")\n\n# Get version that should be used in the binary.\nexecute_process(\n    OUTPUT_VARIABLE MEMGRAPH_VERSION\n    RESULT_VARIABLE MEMGRAPH_VERSION_RESULT\n    COMMAND \"${get_version_script}\" ${get_version_offering}\n                \"${MEMGRAPH_OVERRIDE_VERSION}\"\n                \"${MEMGRAPH_OVERRIDE_VERSION_SUFFIX}\"\n                \"--memgraph-root-dir\"\n                \"${CMAKE_CURRENT_SOURCE_DIR}\"\n)\nif(MEMGRAPH_VERSION_RESULT AND NOT MEMGRAPH_VERSION_RESULT EQUAL 0)\n    message(FATAL_ERROR \"Unable to get Memgraph version.\")\nelse()\n    MESSAGE(STATUS \"Memgraph version: ${MEMGRAPH_VERSION}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Copy E2E files (workloads.yaml)\nDESCRIPTION: This line calls the `copy_e2e_files` function, copying `workloads.yaml` file to the concurrent write E2E test directory. This is essential to ensure necessary configuration or workload definitions for the E2E tests are available.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/concurrent_write/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_e2e_files(concurrent_write workloads.yaml)\n```\n\n----------------------------------------\n\nTITLE: Find gflags Package\nDESCRIPTION: Locates the gflags library (Google Flags) and makes it available for linking. The REQUIRED keyword ensures that the configuration will fail if gflags is not found.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/memory/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(gflags REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Using LDBC Plotting Tools\nDESCRIPTION: This snippet demonstrates how to use the LDBC plotting tools to generate charts from the benchmark results. It involves activating a virtual environment (`ve2`) and then running a Python script that takes the path to the results JSON file and the legend location as arguments.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/public_benchmark/ldbc/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncd memgraph/tests/public_benchmark/ldbc\nsource ve2/bin/activate\ncd memgraph/tests/public_benchmark/ldbc/ldbc_driver/plotting\npython make_charts_all_queries_all_metrics.py /path/to/ldbc_driver/results/LDBC-results.json legend_location\n```\n\n----------------------------------------\n\nTITLE: Copy YAML File using CMake Function\nDESCRIPTION: This line calls a pre-defined CMake function `copy_e2e_files` with `transaction_queue` and `workloads.yaml` as arguments. This likely copies the YAML file to a specific location within the build directory, potentially for test configuration or data loading.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/transaction_queue/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ncopy_e2e_files(transaction_queue workloads.yaml)\n```\n\n----------------------------------------\n\nTITLE: Use defined CMake function to copy Python files\nDESCRIPTION: These lines use the defined `copy_query_log_e2e_python_files` function to copy `common.py` and `query_log.py` to the appropriate directory for query log testing. This ensures that the necessary Python files are available for the end-to-end tests.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/query_log/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_query_log_e2e_python_files(common.py)\ncopy_query_log_e2e_python_files(query_log.py)\n```\n\n----------------------------------------\n\nTITLE: Add Data Instance Context Unit Test (C++)\nDESCRIPTION: This snippet configures a unit test for the data instance context. It links the test executable with the `gflags` and `mg-coordination` libraries. The required include directories are specified. This unit test is conditionally included in enterprise builds based on the `MG_ENTERPRISE` flag.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/unit/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nif(MG_ENTERPRISE)\nadd_unit_test(data_instance_context.cpp)\ntarget_link_libraries(${test_prefix}data_instance_context gflags mg-coordination)\ntarget_include_directories(${test_prefix}data_instance_context PRIVATE ${CMAKE_SOURCE_DIR}/include)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Directory Properties\nDESCRIPTION: This snippet sets the CLEAN_NO_CUSTOM property to TRUE for the current directory, preventing `make clean` from removing outputs from custom commands. Additional files to be cleaned can be specified through the ADDITIONAL_MAKE_CLEAN_FILES property.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset_directory_properties(PROPERTIES CLEAN_NO_CUSTOM TRUE)\n```\n\n----------------------------------------\n\nTITLE: Define CMake Function for General E2E File Copying\nDESCRIPTION: Defines a CMake function named `copy_init_file_flags_e2e_files` that copies general end-to-end test files with the 'init_file_flags'. It takes the `FILE_NAME` as input and calls the `copy_e2e_files` function internally.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/init_file_flags/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(copy_init_file_flags_e2e_files FILE_NAME)\n    copy_e2e_files(init_file_flags ${FILE_NAME})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Add Subdirectory for Libraries (CMake)\nDESCRIPTION: This snippet adds the `libs` subdirectory to the build, effectively building the libraries located there. The `EXCLUDE_FROM_ALL` option prevents this subdirectory from being built by default, requiring it to be built explicitly if needed.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/CMakeLists.txt#_snippet_41\n\nLANGUAGE: CMake\nCODE:\n```\nset(libs_dir ${CMAKE_SOURCE_DIR}/libs)\nadd_subdirectory(libs EXCLUDE_FROM_ALL)\n```\n\n----------------------------------------\n\nTITLE: Defining CMake Function for Copying E2E Python Files\nDESCRIPTION: This CMake function, `copy_awesome_functions_e2e_python_files`, takes a filename as input. It then calls the `copy_e2e_python_files` function, passing 'awesome_functions' as the directory name and the provided filename. This allows copying specific Python files for end-to-end testing.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/awesome_functions/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(copy_awesome_functions_e2e_python_files FILE_NAME)\n    copy_e2e_python_files(awesome_functions ${FILE_NAME})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Clean Up Docker Containers\nDESCRIPTION: This command removes all containers, volumes, and networks defined in the specified docker-compose file. It's useful for resolving strange errors by ensuring a clean slate for the deployment.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/streams/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose -f <filename> rm -svf\n```\n\n----------------------------------------\n\nTITLE: SSH to Cluster Nodes (Bash)\nDESCRIPTION: These bash commands demonstrate how to SSH into all the Memgraph cluster nodes from within the `jepsen-control` Docker container. The purpose is to save the host keys in the `known_hosts` file, enabling passwordless SSH connections.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/jepsen/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it jepsen-control bash\nssh n1 -> yes -> exit\nssh n2 -> yes -> exit\nssh n3 -> yes -> exit\nssh n4 -> yes -> exit\nssh n5 -> yes -> exit\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to Target in CMake\nDESCRIPTION: This CMake command links the `mg-communication` library to the executable target `${tester_target_name}`. This means that the executable will depend on the `mg-communication` library during linking and at runtime. This enables the executable to use functionalities provided by the linked library.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/integration/init_file/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(${tester_target_name} mg-communication)\n```\n\n----------------------------------------\n\nTITLE: Calling CMake function to copy specific python files\nDESCRIPTION: This section calls the `copy_index_hints_e2e_python_files` function to copy `common.py` and `index_hints.py`. The copied files are intended to support the index hints end-to-end tests.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/index_hints/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_index_hints_e2e_python_files(common.py)\ncopy_index_hints_e2e_python_files(index_hints.py)\n```\n\n----------------------------------------\n\nTITLE: Calling CMake function to copy specific Python files\nDESCRIPTION: Calls the defined `copy_query_planning_e2e_python_files` function multiple times to copy several Python files. Each call specifies a different Python file name that should be copied for end-to-end testing.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/query_planning/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncopy_query_planning_e2e_python_files(common.py)\ncopy_query_planning_e2e_python_files(query_planning_cartesian.py)\ncopy_query_planning_e2e_python_files(query_planning_point_index.py)\ncopy_query_planning_e2e_python_files(query_planning_valid_query_plans.py)\ncopy_query_planning_e2e_python_files(query_planning_optional.py)\n```\n\n----------------------------------------\n\nTITLE: Create Executable: memory_limit_global_alloc_proc\nDESCRIPTION: Creates an executable named 'memgraph__e2e__memory__limit_global_alloc_proc' from the source file 'memory_limit_global_alloc_proc.cpp'. It also links this executable against gflags, mgclient, mg-utils, mg-io, and Threads::Threads libraries. This tests global memory allocation limits in procedures.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/memory/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(memgraph__e2e__memory__limit_global_alloc_proc memory_limit_global_alloc_proc.cpp)\ntarget_link_libraries(memgraph__e2e__memory__limit_global_alloc_proc gflags mgclient mg-utils mg-io Threads::Threads)\n```\n\n----------------------------------------\n\nTITLE: Finding gflags Package with CMake\nDESCRIPTION: This CMake command finds the gflags package, which is a required dependency for the project. The `REQUIRED` keyword ensures that the configuration will fail if gflags is not found.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/high_availability/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(gflags REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Copy E2E Workload Files\nDESCRIPTION: Copies E2E files related to inspect queries using the `copy_e2e_files` function. It copies 'workloads.yaml', a file likely containing workload definitions or test cases, for use in the E2E testing environment.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/inspect_query/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncopy_e2e_files(inspect_query workloads.yaml)\n```\n\n----------------------------------------\n\nTITLE: Add Static Library: mg-replication_handler CMake\nDESCRIPTION: This snippet creates a static library named `mg-replication_handler` and defines an alias for it. The alias allows referencing the library using `mg::replication_handler`.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/replication_handler/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(mg-replication_handler STATIC)\nadd_library(mg::replication_handler ALIAS mg-replication_handler)\n```\n\n----------------------------------------\n\nTITLE: Adding planner Benchmark\nDESCRIPTION: Adds the `planner` benchmark. Links the executable with the `mg-query` library.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/benchmark/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_benchmark(query/planner.cpp)\ntarget_link_libraries(${test_prefix}planner mg-query)\n```\n\n----------------------------------------\n\nTITLE: Copy workload YAML file\nDESCRIPTION: Calls the `copy_e2e_files` function to copy the `workloads.yaml` file related to GraphQL. This likely copies the specified YAML file to the destination directory for end-to-end testing.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/graphql/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ncopy_e2e_files(graphql workloads.yaml)\n```\n\n----------------------------------------\n\nTITLE: Listing Python Package Dependencies\nDESCRIPTION: This snippet defines the required Python packages and their versions. These dependencies are necessary for the Memgraph project to run correctly. It ensures that the correct versions of the libraries are installed, avoiding compatibility issues.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/query_modules/requirements.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nsetuptools==75.3.0\nsix==1.17.0\npytest==7.3.2\nnumpy==1.26.4\nscipy==1.13.0\nnetworkx==2.5.1\ngensim==4.3.3\ngqlalchemy==1.6.0\npyyaml==6.0.1\n```\n\n----------------------------------------\n\nTITLE: Defining CMake Function for Copying E2E Python Files\nDESCRIPTION: This CMake function, `copy_disk_storage_e2e_python_files`, takes a filename as input and uses the `copy_e2e_python_files` function to copy the specified file to the `disk_storage` directory. The purpose is to automate the process of copying necessary Python files for end-to-end testing.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/disk_storage/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(copy_disk_storage_e2e_python_files FILE_NAME)\n    copy_e2e_python_files(disk_storage ${FILE_NAME})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Copying YAML File for Constraint Validation\nDESCRIPTION: This line calls the `copy_e2e_files` CMake function to copy the `workloads.yaml` file to the constraint validation directory.  This YAML file likely contains workload configurations used by the constraint validation tests.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/constraints/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncopy_e2e_files(constraint_validation workloads.yaml)\n```\n\n----------------------------------------\n\nTITLE: Call CMake Function to Copy auth_queries.py\nDESCRIPTION: Calls the `copy_auth_e2e_python_files` function with 'auth_queries.py' as the filename. This copies the `auth_queries.py` file, which likely contains queries used specifically for authentication testing.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/auth/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_auth_e2e_python_files(auth_queries.py)\n```\n\n----------------------------------------\n\nTITLE: Add Subdirectory for Query Modules\nDESCRIPTION: This line adds the 'query_modules' subdirectory to the build process. This means that the CMakeLists.txt file within the 'query_modules' directory will be processed as part of the overall build.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/query_modules_storage_modes/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(query_modules)\n```\n\n----------------------------------------\n\nTITLE: Find Boost Package in CMake\nDESCRIPTION: This CMake command uses `find_package` to locate the Boost library, which is a required dependency. The `CONFIG` keyword specifies that it should use the configuration file provided by Boost for finding the library.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/monitoring_server/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Boost REQUIRED CONFIG)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files Variable CMake\nDESCRIPTION: This snippet sets a variable `node2vec_online_utils` to a list of Python source files located in the `node2vec_online_utils` directory.  It is used later for copying and installing these files.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/query_modules/node2vec_online_module/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(node2vec_online_utils\n    ${CMAKE_CURRENT_SOURCE_DIR}/node2vec_online_utils/w2v_learners.py\n    ${CMAKE_CURRENT_SOURCE_DIR}/node2vec_online_utils/walk_sampling.py\n    ${CMAKE_CURRENT_SOURCE_DIR}/node2vec_online_utils/__init__.py\n)\n```\n\n----------------------------------------\n\nTITLE: Copying YAML workload files\nDESCRIPTION: This line calls the `copy_e2e_files` function to copy the `workloads.yaml` file from the `dynamic_variable_creation` directory. This copies the YAML file, which likely defines workloads or test configurations, to the destination directory.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/dynamic_variable_creation/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_e2e_files(dynamic_variable_creation workloads.yaml)\n```\n\n----------------------------------------\n\nTITLE: Add Community Detection Online Unit Test (C++)\nDESCRIPTION: This snippet configures a unit test for online community detection. It includes the necessary source file and specifies the required include directories. This test is conditionally compiled for `MG_ENTERPRISE` builds. It avoids linking with a shared library due to missing symbols.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/unit/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nif(MG_ENTERPRISE)\n  add_unit_test(community_detection_online.cpp ${CMAKE_SOURCE_DIR}/query_modules/community_detection_module/algorithm_online/community_detection.cpp)\n  target_include_directories(${test_prefix}community_detection_online PRIVATE\n  ${CMAKE_SOURCE_DIR}/query_modules/community_detection_module\n  ${CMAKE_SOURCE_DIR}/include\n  ${CMAKE_SOURCE_DIR}/query_modules/mg_utility)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Specific Property Based Test CMake\nDESCRIPTION: Calls the `add_property_based_test` function with `random_graph.cpp` as the input file.  This creates a test executable target for `random_graph.cpp`.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/property_based/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_property_based_test(random_graph.cpp)\n```\n\n----------------------------------------\n\nTITLE: Adding skip_list_random Benchmark\nDESCRIPTION: Adds the `skip_list_random` benchmark. Links the executable with the `mg-utils` library.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/benchmark/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nadd_benchmark(skip_list_random.cpp)\ntarget_link_libraries(${test_prefix}skip_list_random mg-utils)\n```\n\n----------------------------------------\n\nTITLE: Defining CMake Function to Copy Show Metrics Python Files\nDESCRIPTION: This CMake function `copy_show_metrics_e2e_python_files` takes a filename as input and uses the `copy_e2e_python_files` function to copy the specified Python file related to the show metrics functionality. It depends on the `copy_e2e_python_files` function being defined elsewhere.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/show_metrics/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(copy_show_metrics_e2e_python_files FILE_NAME)\n  copy_e2e_python_files(show_metrics ${FILE_NAME})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Define CMake Function to Copy E2E Python Files\nDESCRIPTION: This CMake function, `copy_enterprise_query_modules_e2e_python_files`, uses the `copy_e2e_python_files` function to copy Python files specifically for the enterprise query modules E2E tests. It takes the file name as an argument and then calls another function, `copy_e2e_python_files`, passing in `enterprise_query_modules` and the filename.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/enterprise_query_modules/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(copy_enterprise_query_modules_e2e_python_files FILE_NAME)\n    copy_e2e_python_files(enterprise_query_modules ${FILE_NAME})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Copying Generic E2E Files for Show Metrics\nDESCRIPTION: This line uses the `copy_e2e_files` CMake function to copy the `workloads.yaml` file. This file is related to the show metrics functionality. It assumes the `copy_e2e_files` function has been defined elsewhere.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/show_metrics/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_e2e_files(show_metrics workloads.yaml)\n```\n\n----------------------------------------\n\nTITLE: Add Subdirectory for Procedures\nDESCRIPTION: Adds a subdirectory named `procedures` to the project.  This is likely done to organize the code and keep procedure-related files separate from other parts of the project.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/execution_query_modules/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(procedures)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory for Test Query Modules\nDESCRIPTION: This line adds the `test_query_modules` subdirectory to the build process. This indicates that there are tests related to the query modules that need to be compiled and executed as part of the overall build.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/concurrent_query_modules/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(test_query_modules)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to Test Prefix CMake\nDESCRIPTION: Links the `mg-storage-v2` library to the target named by `test_prefix` and the name of the test executable.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/property_based/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(${test_prefix}random_graph mg-storage-v2)\n```\n\n----------------------------------------\n\nTITLE: Call CMake Function to Copy Python E2E Files\nDESCRIPTION: Calls the previously defined CMake function `copy_inspect_query_e2e_python_files` with specific Python file names ('common.py' and 'inspect_query.py') as arguments. This copies these files to the appropriate location for E2E testing of inspect query features.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/inspect_query/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncopy_inspect_query_e2e_python_files(common.py)\ncopy_inspect_query_e2e_python_files(inspect_query.py)\n```\n\n----------------------------------------\n\nTITLE: Copying YAML File with Import Mode\nDESCRIPTION: This line calls the `copy_e2e_files` macro to copy the `workloads.yaml` file. It passes `import_mode` as the argument which is utilized internally within the `copy_e2e_files` macro to decide the destination directory.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/import_mode/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncopy_e2e_files(import_mode workloads.yaml)\n```\n\n----------------------------------------\n\nTITLE: Installing Files CMake\nDESCRIPTION: This snippet installs the Node2Vec online utility modules and the main `node2vec_online.py` script to the specified installation directory. The `QUERY_MODULES_DIR` variable determines the destination directory for the installed files.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/query_modules/node2vec_online_module/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES ${node2vec_online_utils} DESTINATION ${QUERY_MODULES_DIR}/node2vec_online_utils)\ninstall(FILES ${CMAKE_CURRENT_SOURCE_DIR}/node2vec_online.py DESTINATION ${QUERY_MODULES_DIR})\n```\n\n----------------------------------------\n\nTITLE: Adding skip_list_same_item Benchmark\nDESCRIPTION: Adds the `skip_list_same_item` benchmark. Links the executable with the `mg-utils` library.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/benchmark/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nadd_benchmark(skip_list_same_item.cpp)\ntarget_link_libraries(${test_prefix}skip_list_same_item mg-utils)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Properties in CMake\nDESCRIPTION: Sets the `OUTPUT_NAME` property of the target `${test_prefix}client` to `client`. This ensures that the built executable is named `client` regardless of the prefix.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/mgbench/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset_target_properties(${test_prefix}client PROPERTIES OUTPUT_NAME client)\n```\n\n----------------------------------------\n\nTITLE: Defining CMake function to copy E2E Python files\nDESCRIPTION: This CMake function, `copy_show_index_info_e2e_python_files`, takes a `FILE_NAME` as input and utilizes the `copy_e2e_python_files` function to copy the specified Python file related to the `show_index_info` feature. It's part of the setup for end-to-end testing.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/show_index_info/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(copy_show_index_info_e2e_python_files FILE_NAME)\n    copy_e2e_python_files(show_index_info ${FILE_NAME})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: XML Digital Signature\nDESCRIPTION: This XML snippet showcases the digital signature applied to the SAML response, ensuring its integrity and authenticity. It uses XML Signature (XMLDSig) to sign the SAML data, incorporating canonicalization methods, signature algorithms, references, and key information (X.509 certificate).\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/sso/data/okta_response.txt#_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n <ds:Signature xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\">\n  <ds:SignedInfo>\n   <ds:CanonicalizationMethod Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\" />\n   <ds:SignatureMethod Algorithm=\"http://www.w3.org/2001/04/xmldsig-more#rsa-sha256\" />\n   <ds:Reference URI=\"#id15166411057654531904579388\">\n    <ds:Transforms>\n     <ds:Transform Algorithm=\"http://www.w3.org/2000/09/xmldsig#enveloped-signature\" />\n     <ds:Transform Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\" />\n    </ds:Transforms>\n    <ds:DigestMethod Algorithm=\"http://www.w3.org/2001/04/xmlenc#sha256\" />\n    <ds:DigestValue>q2qce2jptYuNcDuUkwiADrp+awf/geEJ1LPur3gaNWI=</ds:DigestValue>\n   </ds:Reference>\n  </ds:SignedInfo>\n  <ds:SignatureValue>am/v410f2rRwWDnB+kMdqZNj1F+2uoANNPhkOkPijQaMGYiArjkH3yLkRTWiZprzXevkIcGpDRp1R3XgXBjt52rBIIN0zl+fCWDCPIGpnrT84Aya54l7CON5dI/c8R+i+kPUjOsTyv05Q2gIvvhCRPn+8tLDWLolIhm4cs4iLAw606u05hs2BapEKf9ewgw2pVQyyAhte0ovVDI3As+VwLVNE8I4wFxUBjQYTH8paMi9W5VZd8D+rlcFgar9oB0E+14o5d4JfMbpplNC0xkfKQhrqbSHQYX2siSNmqgZ/eEda2cRbIIY0aC41zcgZttSsRzokIBXJ7W7feEMmEaMCs3syWEg==</ds:SignatureValue>\n  <ds:KeyInfo>\n   <ds:X509Data>\n    <ds:X509Certificate>MIIDqjCCApKgAwIBAgIGAY9xcy5rMA0GCSqGSIb3DQEBCwUAMIGVMQswCQYDVQQGEwJVUzERMA8GA1UE\nCAwCVGV4YXMxETAPBgNVBAcMClByYWlyaWVEcsxETAPBgNVBAoMCFNhbXBsZUFwcHMxEzARBgNVBAsM\nClByYWlyaWVkRHMsMQ4wDAYDVQQDDAVTaGliMQ8wDQYDVQQIDAZNYWluRG9tMBkGA1UECzAUSW50ZXJu\nYWxDb25zdWx0aW5nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAlJ8TsGPqN1HvQIWjeCuZliRHCMImjYxwLEwiiGbcz65NhDARsg+W1NzLL14DRzhgv81v\nU7GD8jtmQGHD5h53R/SMoQX4ZvNZN04bAHeiMqnWvmrfs02pVjOjoI/vi3lvte6utF6kVSRKC9V\n68PN7J42YDHDoDVXkDKtX+le6oLWNnebKP7uh0MuA/F3SJWShjf0FDHnl361qBDzZpPA37U5n+CbXQ\n+HmFjN/Wfa+kCoSJlhCyl8rbZ2YbiG6h8xmfZrTlAS9xfi5x4FrkVR9VFOycmYnf7D9656QC1U9\nz8P723mhi/I68jF9lrC7MYKuz05d2zzbgu/AFmSO1Q/fWUQIDAQABMA0GCSqGSIb3DQEBCwUA\nA4IBAQA1MO7p7KXyG4pqmGSGvXYgC8icFydz4nMAABqVQahEnQVEiplW8EtW1EgD5A9+P5ZkbpdQyFMsi\nCBpPKzHUdcVhzueHD2wDSnONwMjDXTuuzGnocxiaduymd4Q0rFYkINASpWJoIjHl04y6FtsyBB\n4M0/Qw+3SQIVtbPk5hPjhClyPLjK/YQU7SFpC+1mRacChHPl87Z+YD20vGjSKvNbgbOIuQrT6wG\nkbQKmW3icDh+pdn7/20ZguwPX/CmM2OgGntQYc2LY7ARn4vuLUgRb1SwOuBCqOH45h+XZOpydS5R\nMyiMIGCoxkvphJD/bSAoGNfvfZ0GOKAbJ7z/os5</ds:X509Certificate>\n   </ds:X509Data>\n  </ds:KeyInfo>\n </ds:Signature>\n```\n\n----------------------------------------\n\nTITLE: Call CMake Function to Copy Workloads.yaml\nDESCRIPTION: Calls the `copy_e2e_files` function with 'auth' and 'workloads.yaml' as arguments. This copies the `workloads.yaml` file, which presumably defines workloads for authentication end-to-end tests.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/auth/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_e2e_files(auth workloads.yaml)\n```\n\n----------------------------------------\n\nTITLE: Call Custom Function to Copy Python Files CMake\nDESCRIPTION: Calls the custom CMake function `copy_triggers_e2e_python_files` to copy `common.py` and `triggers_properties_false.py`.  This ensures these Python files are available for the end-to-end trigger tests.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/triggers/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_triggers_e2e_python_files(common.py)\ncopy_triggers_e2e_python_files(triggers_properties_false.py)\n```\n\n----------------------------------------\n\nTITLE: Creating a Shared Library with CMake\nDESCRIPTION: This CMake snippet creates a shared library named `module_test` from `module_test.cpp`. It also specifies the include directory needed during compilation, ensuring the necessary header files are found.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/concurrent_query_modules/test_query_modules/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(module_test SHARED module_test.cpp)\ntarget_include_directories(module_test PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/../../../../include)\n```\n\n----------------------------------------\n\nTITLE: Import External Library CMake Function\nDESCRIPTION: Defines a CMake function `import_external_library` which combines adding an external project and importing the resulting library. It uses `add_external_project_arg_parse` to process arguments, `add_external_project_impl` to add the external project, and `import_library` to import the library.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/libs/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(import_external_library name type library_location include_dir)\n  add_external_project_arg_parse(4 KW)\n  add_external_project_impl(${name})\n  string(TOUPPER ${name} _upper_name)\n  set(${_upper_name}_LIBRARY ${library_location} CACHE FILEPATH\n    \"Path to ${name} library\" FORCE)\n  set(${_upper_name}_INCLUDE_DIR ${include_dir} CACHE FILEPATH\n    \"Path to ${name} include directory\" FORCE)\n  mark_as_advanced(${_upper_name}_LIBRARY ${_upper_name}_INCLUDE_DIR)\n  import_library(${name} ${type} ${${_upper_name}_LIBRARY} ${${_upper_name}_INCLUDE_DIR})\nendfunction(import_external_library)\n```\n\n----------------------------------------\n\nTITLE: Copying E2E Files (CMake)\nDESCRIPTION: This snippet utilizes a custom CMake function `copy_e2e_files` to copy the `workloads.yaml` file for replication testing.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/replication/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_e2e_files(replication workloads.yaml)\n```\n\n----------------------------------------\n\nTITLE: Call CMake function to copy general files\nDESCRIPTION: Calls the `copy_e2e_files` CMake function, likely defined elsewhere, to copy `workloads.yaml` to the concurrency test directory. It takes the 'concurrency' prefix and the filename as arguments.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/concurrency/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_e2e_files(concurrency workloads.yaml)\n```\n\n----------------------------------------\n\nTITLE: Cypher CREATE Statements Example\nDESCRIPTION: These are example Cypher `CREATE` statements showing the results of importing the above data. The array values are parsed and stored as lists.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/docs/csv-import-tool/README.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nCREATE ({first_name: \"John\", last_name: \"Doe\", number: 1, aliases: [\"Johnny\", \"Jo\", \"J-man\"]});\nCREATE ({first_name: \"Melissa\", last_name: \"Doe\", number: 2, aliases: [\"Mel\"]});\n```\n\n----------------------------------------\n\nTITLE: Creating Config Checker Executable in CMake\nDESCRIPTION: This snippet creates an executable target named `config_checker` using `add_executable`, specifies the source file `config_checker.cpp`, sets the output name to `config_checker`, and links it with the `mg-communication` library.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/integration/run_time_settings/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${config_checker_target_name} config_checker.cpp)\nset_target_properties(${config_checker_target_name} PROPERTIES OUTPUT_NAME config_checker)\ntarget_link_libraries(${config_checker_target_name} mg-communication)\n```\n\n----------------------------------------\n\nTITLE: Create Vertex in Memgraph (Cypher)\nDESCRIPTION: This query creates a vertex with the label 'Vertex' in the Memgraph database. The 'CREATE' keyword is used to create the vertex, and the 'RETURN' keyword returns the created vertex.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tools/tests/client/input/query_per_line.txt#_snippet_2\n\nLANGUAGE: Cypher\nCODE:\n```\nCREATE (n:Vertex) RETURN n;\n```\n\n----------------------------------------\n\nTITLE: Copy E2E C++ Files with CMake\nDESCRIPTION: This CMake function, `copy_e2e_cpp_files`, creates a custom target to copy a C++ file from the source directory to the binary directory using the CMake command `-E copy`. The target depends on the source file to ensure the copy occurs during the build. The copied files are used for end-to-end testing.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(copy_e2e_cpp_files TARGET_PREFIX FILE_NAME)\n        add_custom_target(memgraph__e2e__${TARGET_PREFIX}__${FILE_NAME} ALL\n                COMMAND ${CMAKE_COMMAND} -E copy\n                ${CMAKE_CURRENT_SOURCE_DIR}/${FILE_NAME}\n                ${CMAKE_CURRENT_BINARY_DIR}/${FILE_NAME}\n                DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/${FILE_NAME})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Calling CMake Function to Copy Python Files\nDESCRIPTION: These lines call the `copy_magic_functions_e2e_python_files` function with specific Python file names (common.py, conftest.py, function_example.py). This will copy these Python files for use in the end-to-end tests.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/magic_functions/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncopy_magic_functions_e2e_python_files(common.py)\ncopy_magic_functions_e2e_python_files(conftest.py)\ncopy_magic_functions_e2e_python_files(function_example.py)\n```\n\n----------------------------------------\n\nTITLE: Creating Node with Mixed Quotes (Single inside Double)\nDESCRIPTION: This Cypher query creates a node with the label 'Ciceron' and a property 'quote' whose value is a double-quoted string containing a single quote. It returns the created node 'n'.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tools/tests/client/input/quote.txt#_snippet_2\n\nLANGUAGE: Cypher\nCODE:\n```\nCREATE (n:Ciceron{quote:\"o tempora 'o mores'\"}) RETURN n;\n```\n\n----------------------------------------\n\nTITLE: Running Stress Test Command Line\nDESCRIPTION: This command line instruction shows how to run the stress test suite using a Python script and a configuration file. The `--config` argument specifies the path to the YAML configuration file.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/stress/README.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\npython run_stress_test.py --config <path-to-config.yaml>\n```\n\n----------------------------------------\n\nTITLE: SAML Response XML Structure\nDESCRIPTION: This XML snippet represents a SAML 2.0 response, including namespaces, destinations, IDs, and versions. It's the root element of the SAML response, encapsulating the status, assertions, and signature details.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/sso/data/okta_response.txt#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<saml2p:Response xmlns:saml2p=\"urn:oasis:names:tc:SAML:2.0:protocol\" Destination=\"http://localhost:3000/auth/providers/saml-okta/callback\" ID=\"id15166411057654531904579388\" InResponseTo=\"_6b5fb9873fc484844812e0c88e787b05aa677bdb\" IssueInstant=\"2024-05-16T15:18:42.988Z\" Version=\"2.0\">\n```\n\n----------------------------------------\n\nTITLE: Adding and Configuring Executable in CMake\nDESCRIPTION: This snippet adds an executable for the client application, sets its output name to \"client\", and links it with the necessary Memgraph libraries.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/integration/license_info/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(${client_target_name} client.cpp)\nset_target_properties(${client_target_name} PROPERTIES OUTPUT_NAME client)\ntarget_link_libraries(${client_target_name} mg-requests mg-license mg-utils)\n```\n\n----------------------------------------\n\nTITLE: Copying edge_indices and workloads.yaml\nDESCRIPTION: Calls `copy_e2e_files` to copy the `edge_indices` directory and the `workloads.yaml` file.  The `workloads.yaml` file likely defines the test cases and configurations for the edge indices E2E tests.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/edge_indices/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ncopy_e2e_files(edge_indices workloads.yaml)\n```\n\n----------------------------------------\n\nTITLE: Setting GTest/GMock Build Options\nDESCRIPTION: This snippet sets boolean flags to enable the building of Google Test (GTest) and Google Mock (GMock) integrations. It also marks these options as advanced in the CMake GUI.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/libs/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nset(RC_ENABLE_GTEST ON CACHE BOOL \"Build Google Test integration\" FORCE)\nset(RC_ENABLE_GMOCK ON CACHE BOOL \"Build Google Mock integration\" FORCE)\nmark_as_advanced(RC_ENABLE_GTEST RC_ENABLE_GMOCK)\nadd_subdirectory(rapidcheck EXCLUDE_FROM_ALL)\n```\n\n----------------------------------------\n\nTITLE: CMake: Configuring CSV Fuzzing Executable\nDESCRIPTION: This CMake snippet defines an executable named `fuzz_csv`, specifies its source file (`fuzz_reader.cpp`), links it to the `mg::csv` library, and sets compilation and linking options for fuzzing with `-fsanitize=fuzzer`. The executable is excluded from the default build process.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/csv/fuzz/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(fuzz_csv EXCLUDE_FROM_ALL)\ntarget_sources(fuzz_csv PRIVATE fuzz_reader.cpp)\ntarget_link_libraries(fuzz_csv PRIVATE mg::csv)\ntarget_compile_options(fuzz_csv PRIVATE -fsanitize=fuzzer)\ntarget_link_libraries(fuzz_csv PRIVATE -fsanitize=fuzzer)\n```\n\n----------------------------------------\n\nTITLE: Copying Python Files from Parent Directory\nDESCRIPTION: This command copies Python files from parent directories into the designated SSO test directory. It uses the `copy_e2e_python_files_from_parent_folder` function, specifying the target directory (sso), the relative path to the file, and the filename itself. This is necessary for copying Memgraph-related utility scripts and reference modules for authentication.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/sso/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ncopy_e2e_python_files_from_parent_folder(sso \"..\" memgraph.py)\ncopy_e2e_python_files_from_parent_folder(sso \"..\" interactive_mg_runner.py)\ncopy_e2e_python_files_from_parent_folder(sso \"..\" mg_utils.py)\ncopy_e2e_python_files_from_parent_folder(sso \"../../../src/auth/reference_modules\" oidc.py)\ncopy_e2e_python_files_from_parent_folder(sso \"../../../src/auth/reference_modules\" saml.py)\n```\n\n----------------------------------------\n\nTITLE: Adding rpc Benchmark (Conditional)\nDESCRIPTION: Adds the `rpc` benchmark, but only if `MG_ENTERPRISE` is defined. Links the executable with the `mg-rpc` library.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/benchmark/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nif (MG_ENTERPRISE)\nadd_benchmark(rpc.cpp)\ntarget_link_libraries(${test_prefix}rpc mg-rpc)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building mgconsole with CMake\nDESCRIPTION: This macro defines the steps to build the mgconsole application as an external project. It configures mgconsole, specifies the install prefix, and creates a custom target that depends on the external project.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/libs/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\nmacro(build_mgconsole)\n    add_external_project(mgconsole\n      SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/mgconsole\n      CMAKE_ARGS\n      -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_BINARY_DIR}\n      BUILD_COMMAND $(MAKE) mgconsole)\n    add_custom_target(mgconsole DEPENDS mgconsole-proj)\nendmacro()\nmg_build_if_needed(build_mgconsole \"mgconsole\")\n```\n\n----------------------------------------\n\nTITLE: Adding a Query Module in C++\nDESCRIPTION: This snippet references the addition of a query module using C++ code. The file c_transformations.cpp likely contains the implementation of the query module. This process involves adding the necessary C++ code to define and implement the query module's functionality.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/streams/transformations/CMakeLists.txt#_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nadd_query_module(c_transformations c_transformations.cpp)\n```\n\n----------------------------------------\n\nTITLE: Finding gflags Package with CMake\nDESCRIPTION: This CMake command locates the gflags library, which is a required dependency for the Memgraph project. The REQUIRED keyword ensures that the build process will fail if gflags is not found.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/durability/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(gflags REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Operating System Check\nDESCRIPTION: This snippet checks if the operating system is UNIX-based and terminates the build process if it isn't. This enforces a build environment suitable for Memgraph.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT UNIX)\n  message(FATAL_ERROR \"Unsupported operating system.\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: SAML Assertion Details\nDESCRIPTION: This XML snippet shows a SAML assertion containing information about the authenticated user. It includes the issuer, subject, conditions, and attributes of the user.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/sso/data/okta_response.txt#_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n <saml2:Assertion xmlns:saml2=\"urn:oasis:names:tc:SAML:2.0:assertion\" ID=\"id15166411059542251802226451\" IssueInstant=\"2024-05-16T15:18:42.988Z\" Version=\"2.0\">\n```\n\n----------------------------------------\n\nTITLE: Creating Indexes Manually (Neo4j)\nDESCRIPTION: This snippet shows how to create indexes manually using a Neo4j script. It involves activating a virtual environment (`ve3`) and then running the `index_creation` script. The script is specific to the Neo4j implementation.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/public_benchmark/ldbc/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncd memgraph/tests/public_benchmark/ldbc\nsource ve3/bin/activate\n./index_creation ldbc-snb-impls/snb-interactive-neo4j/scripts/indexCreation.neo4j\n```\n\n----------------------------------------\n\nTITLE: Calling Python File Copy Function\nDESCRIPTION: This section calls the `copy_observe_current_amount_of_deltas_e2e_python_files` function with specific Python file names (common.py, conftest.py, observe_current_amount_of_deltas.py) as arguments. This copies these files into the designated E2E test directory.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/observe_current_amount_of_deltas/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_observe_current_amount_of_deltas_e2e_python_files(common.py)\ncopy_observe_current_amount_of_deltas_e2e_python_files(conftest.py)\ncopy_observe_current_amount_of_deltas_e2e_python_files(observe_current_amount_of_deltas.py)\n```\n\n----------------------------------------\n\nTITLE: Including Pulsar Subdirectory with CMake\nDESCRIPTION: This snippet includes the `pulsar` subdirectory in the current CMake project.  It instructs CMake to process the CMakeLists.txt file within the `pulsar` directory, incorporating its build targets into the current project.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/integrations/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(pulsar)\n```\n\n----------------------------------------\n\nTITLE: Analyzing SAML 2.0 Response XML\nDESCRIPTION: This XML snippet represents a SAML 2.0 response from an identity provider. It includes details about the authentication process, user attributes, and security assertions. The response needs to be base64 decoded before parsing.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/sso/data/entra_id_response_timed_out.txt#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\nPHNhbWxwOlJlc3BvbnNlIElEPSJfMTBlYjcyY2MtMDhjYy00ZjMwLWIwODgtMmY2ZTkzNGQ1OTMwIiBWZXJzaW9uPSIyLjAiIElzc3VlSW5zdGFudD0iMjAyNC0wNS0wM1QxNDozNDowMC44OTlaIiBEZXN0aW5hdGlvbj0iaHR0cDovL2xvY2FsaG9zdDozMDAwL2F1dGgvcHJvdmlkZXJzL3NhbWwtZW50cmEtaWQvY2FsbGJhY2siIEluUmVzcG9uc2VUbz0iXzgyMjQyNmI3MjYyYTY1MjJiZWUwOGI4YzdiMmI2NWIxZjg3MzNiMzMiIHhtbG5zOnNhbWxwPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6cHJvdG9jb2wiPjxJc3N1ZXIgeG1sbnM9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iPmh0dHBzOi8vc3RzLndpbmRvd3MubmV0LzM3MWFhMmM0LTJmOWItNGZlMS1iYzUyLTIzODI0ZTkwNmMyNi88L0lzc3Vlcj48c2FtbHA6U3RhdHVzPjxzYW1scDpTdGF0dXNDb2RlIFZhbHVlPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6c3RhdHVzOlN1Y2Nlc3MiLz48L3NhbWxwOlN0YXR1cz48QXNzZXJ0aW9uIElEPSJfYjMyNzM2OWUtNGZhZi00YmZkLWI1YjAtNDVmNzg0M2IzZjAwIiBJc3N1ZUluc3RhbnQ9IjIwMjQtMDUtMDNUMTQ6MzQ6MDAuODk2WiIgVmVyc2lvbj0iMi4wIiB4bWxucz0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiI+PElzc3Vlcj5odHRwczovL3N0cy53aW5kb3dzLm5ldC8zNzFhYTJjNC0yZjliLTRmZTEtYmM1Mi0yMzgyNGU5MDZjMjYvPC9Jc3N1ZXI+PFNpZ25hdHVyZSB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI+PFNpZ25lZEluZm8+PENhbm9uaWNhbGl6YXRpb25NZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiLz48U2lnbmF0dXJlTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8wNC94bWxkc2lnLW1vcmUjcnNhLXNoYTI1NiIvPjxSZWZlcmVuY2UgVVJJPSIjX2IzMjczNjllLTRmYWYtNGJmZC1iNWIwLTQ1Zjc4NDNiM2YwMCI+PFRyYW5zZm9ybXM+PFRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNlbnZlbG9wZWQtc2lnbmF0dXJlIi8+PFRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPjwvVHJhbnNmb3Jtcz48RGlnZXN0TWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8wNC94bWxlbmMjc2hhMjU2Ii8+PERpZ2VzdFZhbHVlPjRDSDlNNFFWZ2hXeE5aY3VEMmV6ZWIvVXpOM05mVmxDVWZaMzM4aU1hQnM9PC9EaWdlc3RWYWx1ZT48L1JlZmVyZW5jZT48L1NpZ25lZEluZm8+PFNpZ25hdHVyZVZhbHVlPmpOWmM0cmlUZ1dDTkc4TTY0Yyszck5YdXRBRExlMzUzQ0VEaGllNThDVmhOL0p1VG9DWVpDQStLeE54dVl6dHVOMzQvU3ZkSk1JQmV4akQ2TFQyamp2ZXUzNHIyemlLY2Fjbmh0VDE2bkFmWjNHdnIyZXRpQXllRjd4dzN3TDllVWFoczdDZjdHSGFHVjRWbFZuS3B1YUFYOGZjT3JvN2s3V0p5cllSNGN6TUtEM29Fdkx1SnV2UU1MWmtmYng2VGhzYnlZNkFyT3dQWkJ4cHdaanZxRE56ckhJN2c0UEpHOWYxVVRIV3pvNzJyaEJNcW1vRVpnL2lDZmxTV3IzWVJBb1dGcmVLR1RiR0NLT2U5ejQ2RldvUXlzc2Z1RExrSTJPY3c0a01lWVlWK2h0dXE4bnBxemtkZGhBT0pMeFNobitaV3JzRWNEVE5XaEZseDQza2ptdz09PC9TaWduYXR1cmVWYWx1ZT48S2V5SW5mbz48WDUwOURhdGE+PFg1MDlDZXJ0aWZpY2F0ZT5NSUlDL1RDQ0FlV2dBd0lCQWdJSU9kd3VNZEhWR2tFd0RRWUpLb1pJaHZjTkFRRUxCUUF3TFRFck1Da0dBMVVFQXhNaVlXTmpiM1Z1ZEhNdVlXTmpaWE56WTI5dWRISnZiQzUzYVc1a2IzZHpMbTVsZERBZUZ3MHlOREEwTVRFeE5qQTBNalphRncweU9UQTBNVEV4TmpBME1qWmFNQzB4S3pBcEJnTlZCQU1USW1GalkyOTFiblJ6TG1GalkyVnpjMk52Ym5SeWIyd3VkMmx1Wkc5M2N5NXVaWFF3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRQ2lQTTR1ZzhCcndQS1FsYWZSM1AyOEgrVTlPVEMwTExEV2hIeFlXbXpPZ0ZvYjZFcVlHRmdzSzdMSTVZaWdpQ2JFUk1qbjV1NlZET3dKTkh2MVpiR3JxdzNGYzlPVUhMaUxXS0dQQ0djUHNLdUJHN1JUODd3WS9Nd3crVkJkaXo4TDYyM1E1MDg5Z1JpLzluTnMyU0F4TTFwSGxaWjc1M2N2aWNNeGF0SS92UkxQN3orUnlZRFdwcHFuOHhQODMxcmxDSjBQYlJ0ODY5MWUyMDNHN3I5ck1CVTNsUmg0RjYrdE5va2M3WWRGV0p6RC9NckFsSmxYYnFPV09teVlZeUkxUzdacWNCRkxZTGdvejhjSWg5ZnR6QVQwRHoya25WU0hueHNFdjN4dlUwUE1hUzNTRlVJRk9LVTlxU0ZIaEVjL1JUMTI4Y1dqZWxRbDNWQ3VYMEJCQWdNQkFBR2pJVEFmTUIwR0ExVWREZ1FXQkJUWHA5TEVWUDJDWmlNMGhFUDV0MThsL3NEQWZ6QU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFINXZJaGhEQzhkKzMxc205TG81T2hsc2FibXY3ZUEzSmdYS3c3eDRWREZvUXhyWkhNdzBxc1FPazliVHJ3SkhhMDlvMENRa084VlpHNXpKMFpwWHBsUnRyTjhGYUtDTGIxcXN0RjJQNnd1WklaUjFFSlRKYjRMNVZ2aGFTVWlGV2tCZlFQQkRNVkpkOWcyQ0VPaFcrMWpJS0VlYTB3dDNBQzJ6VXZOeWJoYlN6RE15UE5Td3UwRWlaTEpzVU1kYk94ZEdtQ1pqdklXTWFkZER1OUdWVCtLdFBXWURES3MyUE9ab1lQREdDcDZmdGQyK0wrbWEyZ1pDTDNIdkZCV2pDSWN0c3UyMGFIUDhyZXRrRU9pVnpNVmJ0NjhnRHlUNjFWVGxoQk0vcHhsY0hNTzZ3ZkExblF6WTJxRHdNQ0VPb2Ntc1l0M21ySVRvbFl4eHlCalNWbkE9PTwvWDUwOUNlcnRpZmljYXRlPjwvWDUwOURhdGE+PC9LZXlJbmZvPjwvU2lnbmF0dXJlPjxTdWJqZWN0PjxOYW1lSUQgRm9ybWF0PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoxLjE6bmFtZWlkLWZvcm1hdDplbWFpbEFkZHJlc3MiPmRvZXNudC5leGlzdEBtZW1ncmFwaC5pbzwvTmFtZUlEPjxTdWJqZWN0Q29uZmlybWF0aW9uIE1ldGhvZD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmNtOmJlYXJlciI+PFN1YmplY3RDb25maXJtYXRpb25EYXRhIEluUmVzcG9uc2VUbz0iXzgyMjQyNmI3MjYyYTY1MjJiZWUwOGI4YzdiMmI2NWIxZjg3MzNiMzMiIE5vdE9uT3JBZnRlcj0iMjAyNC0wNS0xNVQyMjozNDowMC43OTFaIiBSZWNpcGllbnQ9Imh0dHA6Ly9sb2NhbGhvc3Q6MzAwMC9hdXRoL3Byb3ZpZGVycy9zYW1sLWVudHJhLWlkL2NhbGxiYWNrIi8+PC9TdWJqZWN0Q29uZmlybWF0aW9uPjwvU3ViamVjdD48Q29uZGl0aW9ucyBOb3RCZWZvcmU9IjIwMjQtMDUtMDVUMTg6Mjk6MDAuNzkxWiIgTm90T25PckFmdGVyPSIyMDI0LTA1LTE1VDIyOjM0OjAwLjc5MVoiPjxBdWRpZW5jZVJlc3RyaWN0aW9uPjxBdWRpZW5jZT5zcG46ZjUxNmE3ZGUtNmMzZi00ZDFkLWEyODktNTM5MzAxMDM5MjkxPC9BdWRpZW5jZT48L0F1ZGllbmNlUmVzdHJpY3Rpb24+PC9Db25kaXRpb25zPjxBdHRyaWJ1dGVTdGF0ZW1lbnQ+PEF0dHJpYnV0ZSBOYW1lPSJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL2lkZW50aXR5L2NsYWltcy90ZW5hbnRpZCI+PEF0dHJpYnV0ZVZhbHVlPjM3MWFhMmM0LTJmOWItNGZlMS1iYzUyLTIzODI0ZTkwNmMyNjwvQXR0cmlidXRlVmFsdWU+PC9BdHRyaWJ1dGU+PEF0dHJpYnV0ZSBOYW1lPSJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL2lkZW50aXR5L2NsYWltcy9vYmplY3RpZGVudGlmaWVyIj48QXR0cmlidXRlVmFsdWU+ZDE3ODFjYjItYjFhNC00YjJkLThjMWUtNzZkOTE4MGNmYTUyPC9BdHRyaWJ1dGVWYWx1ZT48L0F0dHJpYnV0ZT48QXR0cmlidXRlIE5hbWU9Imh0dHA6Ly9zY2hlbWFzLnhtbHNvYXAub3JnL3dzLzIwMDUvMDUvaWRlbnRpdHkvY2xhaW1zL25hbWUiPjxBdHRyaWJ1dGVWYWx1ZT5BbnRob255PC9BdHRyaWJ1dGVWYWx1ZT48L0F0dHJpYnV0ZT48QXR0cmlidXRlIE5hbWU9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vd3MvMjAwOC8wNi9pZGVudGl0eS9jbGFpbXMvcm9sZSI+PEF0dHJpYnV0ZVZhbHVlPmFkbWluPC9BdHRyaWJ1dGVWYWx1ZT48L0F0dHJpYnV0ZT48QXR0cmlidXRlIE5hbWU9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vaWRlbnRpdHkvY2xhaW1zL2Rpc3BsYXluYW1lIj48QXR0cmlidXRlVmFsdWU+QW50aG9ueTwvQXR0cmlidXRlVmFsdWU+PC9BdHRyaWJ1dGU+PEF0dHJpYnV0ZSBOYW1lPSJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL2lkZW50aXR5L2NsYWltcy9pZGVudGl0eXByb3ZpZGVyIj48QXR0cmlidXRlVmFsdWU+aHR0cHM6Ly9zdHMud2luZG93cy5uZXQvMzcxYWEyYzQtMmY5Yi00ZmUxLWJjNTItMjM4MjRlOTA2YzI2LzwvQXR0cmlidXRlVmFsdWU+PC9BdHRyaWJ1dGU+PEF0dHJpYnV0ZSBOYW1lPSJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL2NsYWltcy9hdXRobm1ldGhvZHNyZWZlcmVuY2VzIj48QXR0cmlidXRlVmFsdWU+dXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFjOmNsYXNzZXM6UGFzc3dvcmRQcm90ZWN0ZWRUcmFuc3BvcnQ8L0F0dHJpYnV0ZVZhbHVlPjxBdHRyaWJ1dGVWYWx1ZT5odHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL2NsYWltcy9tdWx0aXBsZWF1dGhuPC9BdHRyaWJ1dGVWYWx1ZT48L0F0dHJpYnV0ZT48L0F0dHJpYnV0ZVN0YXRlbWVudD48QXV0aG5TdGF0ZW1lbnQgQXV0aG5JbnN0YW50PSIyMDI0LTA0LTI0VDExOjUwOjU0LjY3NVoiIFNlc3Npb25JbmRleD0iX2IzMjczNjllLTRmYWYtNGJmZC1iNWIwLTQ1Zjc4NDNiM2YwMCI+PEF1dGhuQ29udGV4dD48QXV0aG5Db250ZXh0Q2xhc3NSZWY+dXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFjOmNsYXNzZXM6UGFzc3dvcmRQcm90ZWN0ZWRUcmFuc3BvcnQ8L0F1dGhuQ29udGV4dENsYXNzUmVmPjwvQXV0aG5Db250ZXh0PjwvQXV0aG5TdGF0ZW1lbnQ+PC9Bc3NlcnRpb24+PC9zYW1scDpSZXNwb25zZT4=\n```\n\n----------------------------------------\n\nTITLE: Run Docker Compose File\nDESCRIPTION: This command starts the containers defined in the specified docker-compose file. The `-V` flag ensures that volumes are recreated, and the optional `-d` flag detaches the containers to run in the background.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/streams/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose -f <filename> up -V\n```\n\n----------------------------------------\n\nTITLE: Adding expansion Benchmark\nDESCRIPTION: Adds the `expansion` benchmark. Links the executable with `mg-query`, `mg-communication`, and `mg-license` libraries. Uses additional source file from `${CMAKE_SOURCE_DIR}/src/glue/communication.cpp`.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/benchmark/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nadd_benchmark(expansion.cpp ${CMAKE_SOURCE_DIR}/src/glue/communication.cpp)\ntarget_link_libraries(${test_prefix}expansion mg-query mg-communication mg-license)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries in CMake\nDESCRIPTION: Links the executable `${test_prefix}client` with the `mg-communication` and `nlohmann_json` libraries. This makes the functions and data structures from those libraries available to the client application.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/mgbench/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(${test_prefix}client mg-communication nlohmann_json::nlohmann_json)\n```\n\n----------------------------------------\n\nTITLE: Adding Network Server Concurrent Test\nDESCRIPTION: Adds a concurrent test named `network_server.cpp`. It creates an executable and links it with `mg-communication` library using `target_link_libraries`. This ensures that the test can access the functionality provided by `mg-communication`.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/concurrent/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nadd_concurrent_test(network_server.cpp)\ntarget_link_libraries(${test_prefix}network_server mg-communication)\n```\n\n----------------------------------------\n\nTITLE: Adding a subdirectory\nDESCRIPTION: This line adds a subdirectory named 'common' to the project. This subdirectory likely contains common code or resources shared between different parts of the project, such as utility functions or data structures.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/batched_procedures/procedures/CMakeLists.txt#_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\nadd_subdirectory(common)\n```\n\n----------------------------------------\n\nTITLE: Adding ring_buffer Benchmark\nDESCRIPTION: Adds the `ring_buffer` benchmark. Links the executable with the `mg-utils` library.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/benchmark/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_benchmark(data_structures/ring_buffer.cpp)\ntarget_link_libraries(${test_prefix}ring_buffer mg-utils)\n```\n\n----------------------------------------\n\nTITLE: SAML Subject with NameID\nDESCRIPTION: This XML snippet defines the subject of the SAML assertion, which is the user being authenticated. It includes the NameID, representing the user's identifier, and the SubjectConfirmation, specifying how the subject's identity is confirmed.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/sso/data/okta_response.txt#_snippet_5\n\nLANGUAGE: XML\nCODE:\n```\n  <saml2:Subject>\n   <saml2:NameID Format=\"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\">Anthony</saml2:NameID>\n   <saml2:SubjectConfirmation Method=\"urn:oasis:names:tc:SAML:2.0:cm:bearer\">\n    <saml2:SubjectConfirmationData InResponseTo=\"_6b5fb9873fc484844812e0c88e787b05aa677bdb\" NotOnOrAfter=\"2124-05-16T15:23:42.988Z\" Recipient=\"http://localhost:3000/auth/providers/saml-okta/callback\" />\n   </saml2:SubjectConfirmation>\n  </saml2:Subject>\n```\n\n----------------------------------------\n\nTITLE: Add Subdirectory for Procedures CMake\nDESCRIPTION: This line adds the `procedures` subdirectory to the build. This allows CMake to process the CMakeLists.txt file within the `procedures` directory, building any procedures defined there.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/triggers/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(procedures)\n```\n\n----------------------------------------\n\nTITLE: Copying YAML configuration file\nDESCRIPTION: This command copies the `workloads.yaml` file, likely containing configuration data for the index hints e2e tests. It uses the `copy_e2e_files` function and specifies `index_hints` as the scope or context.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/index_hints/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_e2e_files(index_hints workloads.yaml)\n```\n\n----------------------------------------\n\nTITLE: Creating Bible Node with Quote (Cypher)\nDESCRIPTION: This code snippet demonstrates the creation of a node labeled 'Bible' with a property named 'quote' set to the value 'Fiat Lux'.  It's likely used in a Cypher query language to populate a graph database with nodes representing historical figures and their quotes.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tools/tests/client/output_csv/unfinished_query.txt#_snippet_1\n\nLANGUAGE: Cypher\nCODE:\n```\n(:Bible {quote: \"Fiat Lux\"})\n```\n\n----------------------------------------\n\nTITLE: Detach from Started Containers\nDESCRIPTION: This command detaches from the started containers, allowing them to run in the background.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/streams/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose -f <filename> up -V -d\n```\n\n----------------------------------------\n\nTITLE: Adding storage_v2_property_store Benchmark\nDESCRIPTION: Adds the `storage_v2_property_store` benchmark. Links the executable with the `mg-storage-v2` library.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/benchmark/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nadd_benchmark(storage_v2_property_store.cpp)\ntarget_link_libraries(${test_prefix}storage_v2_property_store mg-storage-v2)\n```\n\n----------------------------------------\n\nTITLE: Setting Test Prefix in CMake\nDESCRIPTION: Sets the `test_prefix` variable in CMake, which is used to name the test executable. This helps in organizing and identifying test-related targets.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/mgbench/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(test_prefix memgraph__mgbench__)\n```\n\n----------------------------------------\n\nTITLE: SAML Authentication Statement XML\nDESCRIPTION: This XML snippet represents a SAML authentication statement. It includes the authentication instant, session index, and authentication context. The authentication context specifies the PasswordProtectedTransport class, indicating the method used for authentication.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/sso/data/okta_response.txt#_snippet_9\n\nLANGUAGE: XML\nCODE:\n```\n  <saml2:AuthnStatement AuthnInstant=\"2024-05-16T15:07:34.408Z\" SessionIndex=\"_6b5fb9873fc484844812e0c88e787b05aa677bdb\">\n    <saml2:AuthnContext>\n      <saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport</saml2:AuthnContextClassRef>\n    </saml2:AuthnContext>\n  </saml2:AuthnStatement>\n```\n\n----------------------------------------\n\nTITLE: Importing ctre Header Library\nDESCRIPTION: This snippet imports the ctre header library using the `import_header_library` macro.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/libs/CMakeLists.txt#_snippet_25\n\nLANGUAGE: cmake\nCODE:\n```\n# setup ctre\nimport_header_library(ctre ${CMAKE_CURRENT_SOURCE_DIR})\n```\n\n----------------------------------------\n\nTITLE: Copy E2E Files for Load CSV\nDESCRIPTION: This CMake function, `copy_load_csv_e2e_files`, copies non-Python files (e.g., CSV files) used in end-to-end tests for the load_csv functionality. It calls the `copy_e2e_python_files` function, passing in `load_csv` and the specified file name. It takes FILE_NAME as input, representing the name of the file to copy.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/load_csv/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(copy_load_csv_e2e_files FILE_NAME)\n    copy_e2e_python_files(load_csv ${FILE_NAME})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Copying E2E Test Files - Entra ID Timed Out\nDESCRIPTION: This command copies an end-to-end test file simulating a timed-out response from Entra ID. This helps test the application's resilience to external service unavailability.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/sso/data/CMakeLists.txt#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncopy_e2e_files(sso entra_id_response_timed_out.txt)\n```\n\n----------------------------------------\n\nTITLE: Calling CMake Macro with Python Files\nDESCRIPTION: Invokes the defined CMake function `copy_configuration_check_e2e_python_files` with three different Python file names: `default_config.py`, `configuration_check.py`, and `storage_info.py`. This copies these files, likely for use in end-to-end testing.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/configuration/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncopy_configuration_check_e2e_python_files(default_config.py)\ncopy_configuration_check_e2e_python_files(configuration_check.py)\ncopy_configuration_check_e2e_python_files(storage_info.py)\n```\n\n----------------------------------------\n\nTITLE: Define CMake Function to Copy Python Files\nDESCRIPTION: This CMake function, `copy_qm_storage_modes_e2e_python_files`, takes a `FILE_NAME` as input and uses the `copy_e2e_python_files` function (assumed to be defined elsewhere) to copy the specified Python file to a directory related to query modules storage modes. The copied files are used for end-to-end testing.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/query_modules_storage_modes/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(copy_qm_storage_modes_e2e_python_files FILE_NAME)\n    copy_e2e_python_files(query_modules_storage_modes ${FILE_NAME})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Adding storage_v2_gc Benchmark\nDESCRIPTION: Adds the `storage_v2_gc` benchmark. Links the executable with the `mg-storage-v2` library.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/benchmark/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nadd_benchmark(storage_v2_gc.cpp)\ntarget_link_libraries(${test_prefix}storage_v2_gc mg-storage-v2)\n```\n\n----------------------------------------\n\nTITLE: Defining add_stress_test Function in CMake\nDESCRIPTION: This snippet defines a function `add_stress_test` which takes the path to a C++ file as input. It creates an executable target from the provided source file and configures its properties such as `OUTPUT_NAME`. Finally, it adds a dependency from the `memgraph__stress` target to the newly created executable.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/stress/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(add_stress_test test_cpp)\n  # get exec name (remove extension from the abs path)\n  get_filename_component(exec_name ${test_cpp} NAME_WE)\n  set(target_name ${test_prefix}${exec_name})\n  add_executable(${target_name} ${test_cpp})\n  # OUTPUT_NAME sets the real name of a target when it is built and can be\n  # used to help create two targets of the same name even though CMake\n  # requires unique logical target names\n  set_target_properties(${target_name} PROPERTIES OUTPUT_NAME ${exec_name})\n  # add target to dependencies\n  add_dependencies(memgraph__stress ${target_name})\nendfunction(add_stress_test)\n```\n\n----------------------------------------\n\nTITLE: Adding Stack Concurrent Test\nDESCRIPTION: Adds a concurrent test named `stack.cpp`. It creates an executable and links it with `mg-utils` and `gflags` libraries using `target_link_libraries`. This ensures that the test can access the functionality provided by `mg-utils` and `gflags`.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/concurrent/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nadd_concurrent_test(stack.cpp)\ntarget_link_libraries(${test_prefix}stack mg-utils gflags)\n```\n\n----------------------------------------\n\nTITLE: Executing RPM Version Script\nDESCRIPTION: This snippet retrieves the Memgraph RPM package version using a Python script. It includes the '--variant rpm' option, along with other necessary version parameters. It stores the output in MEMGRAPH_VERSION_RPM, checks for errors, and displays the version.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/CMakeLists.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\n# Get version that should be used in the RPM package.\nexecute_process(\n    OUTPUT_VARIABLE MEMGRAPH_VERSION_RPM\n    RESULT_VARIABLE MEMGRAPH_VERSION_RPM_RESULT\n    COMMAND \"${get_version_script}\" ${get_version_offering}\n                --variant rpm\n                \"${MEMGRAPH_OVERRIDE_VERSION}\"\n                \"${MEMGRAPH_OVERRIDE_VERSION_SUFFIX}\"\n                \"--memgraph-root-dir\"\n                \"${CMAKE_CURRENT_SOURCE_DIR}\"\n)\nif(MEMGRAPH_VERSION_RPM_RESULT AND NOT MEMGRAPH_VERSION_RPM_RESULT EQUAL 0)\n    message(FATAL_ERROR \"Unable to get Memgraph RPM version.\")\nelse()\n    MESSAGE(STATUS \"Memgraph RPM version: ${MEMGRAPH_VERSION_RPM}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating and Linking stripped_timing Test - CMake\nDESCRIPTION: This calls the `add_manual_test` function to create a test executable named `stripped_timing`. It links the test executable with the `mg-query` library.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/manual/CMakeLists.txt#_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nadd_manual_test(stripped_timing.cpp)\ntarget_link_libraries(${test_prefix}stripped_timing mg-query)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Names in CMake\nDESCRIPTION: This snippet sets the target name for the Memgraph LDAP integration and the tester target name. The tester target name is derived from the main target name.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/integration/ldap/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(target_name memgraph__integration__ldap)\nset(tester_target_name ${target_name}__tester)\n```\n\n----------------------------------------\n\nTITLE: Creating Ovid Node with Quote (Cypher)\nDESCRIPTION: This code snippet demonstrates the creation of a node labeled 'Ovid' with a property named 'quote' set to the value 'Exitus Acta Probat'.  It's likely used in a Cypher query language to populate a graph database with nodes representing historical figures and their quotes.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tools/tests/client/output_csv/unfinished_query.txt#_snippet_0\n\nLANGUAGE: Cypher\nCODE:\n```\n(:Ovid {quote: \"Exitus Acta Probat\"})\n```\n\n----------------------------------------\n\nTITLE: Calling CMake Function to Copy Specific Python Files\nDESCRIPTION: This section calls the previously defined CMake function `copy_import_mode_e2e_python_files` with specific Python file names: `common.py` and `test_command.py`. This copies these files using the `import_mode` specified during CMake configuration.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/import_mode/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncopy_import_mode_e2e_python_files(common.py)\ncopy_import_mode_e2e_python_files(test_command.py)\n```\n\n----------------------------------------\n\nTITLE: Adding skip_list_real_world Benchmark\nDESCRIPTION: Adds the `skip_list_real_world` benchmark. Links the executable with the `mg-utils` library.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/benchmark/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nadd_benchmark(skip_list_real_world.cpp)\ntarget_link_libraries(${test_prefix}skip_list_real_world mg-utils)\n```\n\n----------------------------------------\n\nTITLE: Creating and Linking bolt_client Test - CMake\nDESCRIPTION: This calls the `add_manual_test` function to create a test executable named `bolt_client`. It links the test executable with the `mg-communication` library.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/manual/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nadd_manual_test(bolt_client.cpp)\ntarget_link_libraries(${test_prefix}bolt_client mg-communication)\n```\n\n----------------------------------------\n\nTITLE: Finding gflags Package\nDESCRIPTION: Finds the gflags package, which is a required dependency for the benchmarks.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/benchmark/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(gflags REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Copying Python Files for Constraint Validation\nDESCRIPTION: These lines call the previously defined CMake function to copy the `common.py` and `constraints_validation.py` files to the constraint validation directory. These files are necessary for running Python-based end-to-end tests for constraint validation.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/constraints/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncopy_constraint_validation_e2e_python_files(common.py)\ncopy_constraint_validation_e2e_python_files(constraints_validation.py)\n```\n\n----------------------------------------\n\nTITLE: Define Kafka Integration Source Files (CMake)\nDESCRIPTION: This snippet defines a variable `integrations_kafka_src_files` containing the source file `consumer.cpp` for the Kafka integration. This variable is used later in the `add_library` command.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/integrations/kafka/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(integrations_kafka_src_files\n    consumer.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Add Subdirectories for E2E Tests\nDESCRIPTION: This section uses `add_subdirectory` to include various subdirectories containing end-to-end tests. Each subdirectory likely represents a specific feature or functionality being tested.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(fine_grained_access)\nadd_subdirectory(server)\nadd_subdirectory(replication)\nadd_subdirectory(memory)\nadd_subdirectory(triggers)\nadd_subdirectory(isolation_levels)\nadd_subdirectory(streams)\nadd_subdirectory(temporal_types)\nadd_subdirectory(write_procedures)\nadd_subdirectory(configuration)\nadd_subdirectory(magic_functions)\nadd_subdirectory(metadata_queries)\nadd_subdirectory(module_file_manager)\nadd_subdirectory(monitoring_server)\nadd_subdirectory(lba_procedures)\nadd_subdirectory(python_query_modules_reloading)\nadd_subdirectory(analyze_graph)\nadd_subdirectory(transaction_queue)\nadd_subdirectory(mock_api)\nadd_subdirectory(disk_storage)\nadd_subdirectory(load_csv)\nadd_subdirectory(init_file_flags)\nadd_subdirectory(analytical_mode)\nadd_subdirectory(batched_procedures)\nadd_subdirectory(import_mode)\nadd_subdirectory(concurrent_query_modules)\nadd_subdirectory(show_index_info)\nadd_subdirectory(set_properties)\nadd_subdirectory(index_hints)\nadd_subdirectory(query_modules)\nadd_subdirectory(constraints)\nadd_subdirectory(inspect_query)\nadd_subdirectory(filter_info)\nadd_subdirectory(queries)\nadd_subdirectory(query_modules_storage_modes)\nadd_subdirectory(garbage_collection)\nadd_subdirectory(query_planning)\nadd_subdirectory(awesome_functions)\nadd_subdirectory(high_availability)\nadd_subdirectory(drop_graph)\nadd_subdirectory(concurrent_write)\nadd_subdirectory(concurrency)\nadd_subdirectory(execution_query_modules)\nadd_subdirectory(index_auto_creation)\nadd_subdirectory(text_search_modules)\nadd_subdirectory(user_changing_its_own_password)\nadd_subdirectory(sso)\nadd_subdirectory(auth)\nadd_subdirectory(hops_count)\nadd_subdirectory(observe_current_amount_of_deltas)\nadd_subdirectory(show_metrics)\nadd_subdirectory(schema_info)\nadd_subdirectory(time_to_live)\nadd_subdirectory(show_active_users_info)\nadd_subdirectory(periodic_commit)\nadd_subdirectory(query_log)\nadd_subdirectory(edge_indices)\nadd_subdirectory(system_replication)\nadd_subdirectory(durability)\nadd_subdirectory(show_license_info)\nadd_subdirectory(enterprise_query_modules)\nadd_subdirectory(dynamic_variable_creation)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Pulsar Integration\nDESCRIPTION: This snippet defines the source files that constitute the Pulsar integration library.  The `integrations_pulsar_src_files` variable is assigned the list of source code files, in this case, only `consumer.cpp`. This list is later used in the `add_library` command.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/integrations/pulsar/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(integrations_pulsar_src_files\n    consumer.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Call CMake Function to Copy Specific Python Files\nDESCRIPTION: These lines invoke the previously defined CMake function `copy_query_modules_reloading_procedures_e2e_python_files` with two specific Python filenames: `common.py` and `test_transaction_queue.py`. This indicates that these files are essential components for the project or its end-to-end tests.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/transaction_queue/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncopy_query_modules_reloading_procedures_e2e_python_files(common.py)\ncopy_query_modules_reloading_procedures_e2e_python_files(test_transaction_queue.py)\n```\n\n----------------------------------------\n\nTITLE: Comparing Benchmark Results\nDESCRIPTION: This command compares benchmark results between two vendors (neo4j and memgraph) using the `compare_results.py` script. It takes the paths to the summary JSON files for each vendor as input and generates an HTML file with a visual representation of the performance differences. The first summary JSON file passed is used as the reference point for comparison.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/mgbench/README.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncompare_results.py\n--compare\n“path_to/neo4j_summary.json”\n“path_to/memgraph_summary.json”\n--output neo4j_vs_memgraph.html\n--different-vendors\n```\n\n----------------------------------------\n\nTITLE: Copying E2E Test Files\nDESCRIPTION: This command copies an end-to-end test file. The file name is provided as an argument to the `copy_e2e_files` function. These commands are likely used in a testing environment to set up specific scenarios for SSO authentication and authorization.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/sso/data/CMakeLists.txt#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncopy_e2e_files(sso dummy_cert.txt)\n```\n\n----------------------------------------\n\nTITLE: Adding Skip List Insert Concurrent Test\nDESCRIPTION: Adds a concurrent test named `skip_list_insert.cpp`. It creates an executable and links it with `mg-utils` library using `target_link_libraries`. This ensures that the test can access the functionality provided by `mg-utils`.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/concurrent/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nadd_concurrent_test(skip_list_insert.cpp)\ntarget_link_libraries(${test_prefix}skip_list_insert mg-utils)\n```\n\n----------------------------------------\n\nTITLE: Copying YAML File using CMake Function\nDESCRIPTION: This line uses the `copy_e2e_files` CMake function (assumed to be defined elsewhere) to copy the `workloads.yaml` file for the `show_license_info` feature. This YAML file likely contains configurations or test data required for the E2E tests.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/show_license_info/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_e2e_files(show_license_info workloads.yaml)\n```\n\n----------------------------------------\n\nTITLE: Creating Executable and Linking Libraries in CMake\nDESCRIPTION: This snippet creates an executable for the integration tester using `add_executable`. It also sets the output name for the executable and links the required libraries, `mg-communication` and `nlohmann_json`, to the tester target.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/integration/ldap/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${tester_target_name} tester.cpp)\nset_target_properties(${tester_target_name} PROPERTIES OUTPUT_NAME tester)\ntarget_link_libraries(${tester_target_name} mg-communication nlohmann_json::nlohmann_json)\n```\n\n----------------------------------------\n\nTITLE: Define CMake Macro for Copying Python Files\nDESCRIPTION: Defines a CMake macro named `copy_write_procedures_e2e_python_files` that takes a `FILE_NAME` as input. It calls another macro `copy_e2e_python_files` with the `write_procedures` argument and the provided `FILE_NAME`. This macro automates the copying of specific Python files needed for write procedures in end-to-end tests.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/write_procedures/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(copy_write_procedures_e2e_python_files FILE_NAME)\n    copy_e2e_python_files(write_procedures ${FILE_NAME})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Copy E2E Test Files (CMake)\nDESCRIPTION: This CMake command copies end-to-end test files (workloads.yaml) into the build directory for the temporal_roundtrip test. This ensures that the test has access to the necessary configuration files during execution.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/temporal_types/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncopy_e2e_files(temporal_roundtrip workloads.yaml)\n```\n\n----------------------------------------\n\nTITLE: Calling CMake Function for Specific Python Files\nDESCRIPTION: Calls the `copy_query_modules_e2e_python_files` CMake function for several specific Python files: `common.py`, `conftest.py`, `convert_test.py`, `mgps_test.py`, and `schema_test.py`. Each call ensures that these files are copied to the appropriate directory for E2E testing.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/query_modules/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_query_modules_e2e_python_files(common.py)\ncopy_query_modules_e2e_python_files(conftest.py)\ncopy_query_modules_e2e_python_files(convert_test.py)\ncopy_query_modules_e2e_python_files(mgps_test.py)\ncopy_query_modules_e2e_python_files(schema_test.py)\n```\n\n----------------------------------------\n\nTITLE: Creating Node with Label Caesar in Cypher\nDESCRIPTION: This Cypher query creates a node with the label 'Caesar' and a property 'quote' set to 'Alea iacta est'. The query then returns the created node.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tools/tests/client/input/multiline_query_with_comments.txt#_snippet_4\n\nLANGUAGE: Cypher\nCODE:\n```\nCREATE (n:Caesar{quote:\"Alea iacta est\"})\nRETURN n;\n```\n\n----------------------------------------\n\nTITLE: Adding Spin Lock Concurrent Test\nDESCRIPTION: Adds a concurrent test named `spin_lock.cpp`. It creates an executable and links it with `mg-utils` library using `target_link_libraries`. This ensures that the test can access the functionality provided by `mg-utils`.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/concurrent/CMakeLists.txt#_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nadd_concurrent_test(spin_lock.cpp)\ntarget_link_libraries(${test_prefix}spin_lock mg-utils)\n```\n\n----------------------------------------\n\nTITLE: Custom Workloads Configuration YAML\nDESCRIPTION: This YAML snippet showcases the custom workload configuration, which is the recommended way to define stress tests. It includes workload name, Memgraph arguments, import queries, querying settings, worker definitions, and timeout. Each worker has a type, a Cypher query, querying configs, repetition counts, sleep duration, and step.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/stress/README.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# This is the current way of stress testing Memgraph and should be enforced for all adding additional\n# stress tests.\ncustomWorkloads:\n  tests:\n    - name: <string>  # Unique workload name.\n      memgraph_args: []\n      # Additional Memgraph arguments specific to the workload.\n      # Doesn't apply for K8s as they use values file.\n      import:\n        queries: [\"<Cypher Query>\"]  # Queries to execute for data import. Used to setup your dataset or workload.\n      # Type of querying needed for workers to connect to the instance\n      querying:\n        # Connection host, default: \"localhost\"\n        host: \"localhost\"\n        # Connection port, default: 7687\n        port: 7687\n      workers:\n        - name: <string>  # Unique worker name.\n          type: <string>\n          # Specifies the worker type. Workers are defined in stress/workers.py and are matched against this string\n          # in the get_worker_object(worker) function\n          # Worker types:\n          # 1. reader -> executes read queries\n          # 2. writer -> executes ingestion queries (is not different by nature from a reader, but used as a semantic distinction)\n          # 3. lab-simulator -> executes a set of queries performed usually by Memgraph Lab to monitor the instance. Used for\n          # users which frequently use Memgraph Lab to see if Lab is doing any instability in the database workload\n          query: \"<Cypher Query>\"  # Cypher query executed by the worker.\n          # Optional: if the worker is connecting in a different way from the custom workload querying.\n          # If nothing is specified, the querying type will be injected from the workload.\n          querying:\n            host: \"localhost\"\n            port: 7687\n          num_repetitions: <int>  # Number of times the query should be executed.\n          sleep_millis: <int>  # Sleep duration in milliseconds between executions.\n          step: <int>\n          # (Optional) Step number for phased executions. If nothing is specified, worker will have step of value (1), which means\n          # it will be executed first. For phased execution, you can specify different non-negative integer numbers. Each step\n          # will execute the set of workers that apply to the step one after other.\n      timeout_min: <int>\n      # Maximum execution time for the workload in minutes. Failing to execute the workload in this amount of minutes\n      # will result in a failure of the stress test\n```\n\n----------------------------------------\n\nTITLE: Copying Workloads YAML File\nDESCRIPTION: This line copies the workloads.yaml file to the 'functions' directory, likely used for configuring or defining the workloads for the end-to-end tests. It uses a presumably pre-defined `copy_e2e_files` CMake function.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/magic_functions/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ncopy_e2e_files(functions workloads.yaml)\n```\n\n----------------------------------------\n\nTITLE: Copying YAML File with CMake\nDESCRIPTION: Calls the `copy_e2e_files` CMake function with the arguments `configuration` and `workloads.yaml`. This action copies the `workloads.yaml` file, presumably for end-to-end testing purposes related to configuration.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/configuration/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncopy_e2e_files(configuration workloads.yaml)\n```\n\n----------------------------------------\n\nTITLE: Copy YAML Configuration File\nDESCRIPTION: Copies the `workloads.yaml` file to the mock Python API directory using the `copy_e2e_files` function. This file likely contains workload configurations for testing or demonstration purposes.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/mock_api/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_e2e_files(mock_python_api workloads.yaml)\n```\n\n----------------------------------------\n\nTITLE: Copying YAML Files with CMake\nDESCRIPTION: Calls the `copy_e2e_files` function to copy the `workloads.yaml` file to the directory for periodic commit tests. This suggests that `copy_e2e_files` is a more general function that can handle non-Python files as well.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/periodic_commit/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_e2e_files(periodic_commit workloads.yaml)\n```\n\n----------------------------------------\n\nTITLE: Copying YAML file for Query Modules\nDESCRIPTION: Copies the `workloads.yaml` file to the `query_modules` directory using the `copy_e2e_files` function (assumed to be defined elsewhere). This YAML file likely contains workload configurations used in the end-to-end testing of query modules.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/query_modules/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_e2e_files(query_modules workloads.yaml)\n```\n\n----------------------------------------\n\nTITLE: Matching All Nodes in Cypher\nDESCRIPTION: This Cypher query matches all nodes in the graph database and returns them. This is a broad query that does not filter based on any specific labels or properties.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tools/tests/client/input/multiline_query_with_comments.txt#_snippet_1\n\nLANGUAGE: Cypher\nCODE:\n```\nMATCH\n(n)\n// comment\nRETURN\nn;\n```\n\n----------------------------------------\n\nTITLE: Defining CMake Target Names for Memgraph Environment Variable Check\nDESCRIPTION: These CMake commands define target names for the environment variable check and its associated tester. The commands are used to maintain consistent naming conventions throughout the CMake configuration and simplify subsequent target management and linking.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/integration/env_variable_check/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(target_name memgraph__integration__env_variable_check)\nset(tester_target_name ${target_name}__tester)\nset(env_check_target_name ${target_name}__check)\n```\n\n----------------------------------------\n\nTITLE: Example Output\nDESCRIPTION: This represents the expected output of the test script. It displays the query executed and the corresponding `run_id` generated by the Memgraph instance.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/telemetry/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nQuery: MATCH (n) RETURN n LIMIT 1;\nrun_id: <your-memgraph-run_id>\n```\n\n----------------------------------------\n\nTITLE: Add Subdirectory for Procedures\nDESCRIPTION: Adds the `procedures` subdirectory to the build process. This line tells CMake to include the CMakeLists.txt file located within the `procedures` directory, allowing those procedures to be built and linked as part of the overall project.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/batched_procedures/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(procedures)\n```\n\n----------------------------------------\n\nTITLE: SAML Conditions\nDESCRIPTION: This XML snippet defines the conditions under which the SAML assertion is valid. It specifies the NotBefore and NotOnOrAfter attributes, indicating the time window during which the assertion is valid, and the AudienceRestriction, limiting the assertion's use to a specific application.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/sso/data/okta_response.txt#_snippet_6\n\nLANGUAGE: XML\nCODE:\n```\n  <saml2:Conditions NotBefore=\"2024-05-16T15:13:42.988Z\" NotOnOrAfter=\"2124-05-16T15:23:42.988Z\">\n   <saml2:AudienceRestriction>\n    <saml2:Audience>myApplication</saml2:Audience>\n   </saml2:AudienceRestriction>\n  </saml2:Conditions>\n```\n\n----------------------------------------\n\nTITLE: Copy E2E Python Files from Parent Folder with CMake\nDESCRIPTION: This CMake function, `copy_e2e_python_files_from_parent_folder`, creates a custom target to copy a Python file from a specified subdirectory within the source directory to the binary directory. It uses the CMake command `-E copy`. The target depends on the source file to ensure it is copied during the build process. It takes a target prefix, an extra path, and a file name as parameters.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(copy_e2e_python_files_from_parent_folder TARGET_PREFIX EXTRA_PATH FILE_NAME)\n        add_custom_target(memgraph__e2e__${TARGET_PREFIX}__${FILE_NAME} ALL\n                COMMAND ${CMAKE_COMMAND} -E copy\n                ${CMAKE_CURRENT_SOURCE_DIR}/${EXTRA_PATH}/${FILE_NAME}\n                ${CMAKE_CURRENT_BINARY_DIR}/${FILE_NAME}\n                DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/${EXTRA_PATH}/${FILE_NAME})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Create Linkable Library if not using CMake Macro\nDESCRIPTION: Defines a CMake macro `mg_create_linkable_if_no_cmake` which conditionally creates a linkable library based on the value of the `MG_TOOLCHAIN_VERSION` environment variable. If the environment variable is greater than or equal to 6, it imports the existing library with the given path. Otherwise, it displays a message suggesting building the library locally.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/libs/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nmacro(mg_create_linkable_if_no_cmake lib_name lib_type lib_path include_path)\n  if(DEFINED ENV{MG_TOOLCHAIN_VERSION})\n    if($ENV{MG_TOOLCHAIN_VERSION} GREATER_EQUAL 6)\n      # NOTE: This is like the import_library, but the existing code\n      # couldn't be used because it depends on the building the\n      # project(lib) locally...\n      add_library(${lib_name} ${lib_type} IMPORTED GLOBAL)\n      set_property(TARGET ${lib_name} PROPERTY IMPORTED_LOCATION ${lib_path})\n      # We need to create the include directory first in order to be able to add it\n      # as an include directory. The header files in the include directory will be\n      # generated later during the build process.\n      file(MAKE_DIRECTORY ${include_path})\n      target_include_directories(${lib_name} INTERFACE ${include_path})\n      message(STATUS \"NOTE: Imported ${lib_name} from ${lib_path} and ${include_path}\")\n    else()\n      message(STATUS \"NOTE: ${lib_name} should be built locally.\")\n    endif()\n  else()\n    message(STATUS \"NOTE: ${lib_name} should be built locally.\")\n  endif()\nendmacro()\n```\n\n----------------------------------------\n\nTITLE: Defining CMake Function to Copy E2E Python Files\nDESCRIPTION: This CMake function, `copy_text_search_modules_e2e_python_files`, wraps the `copy_e2e_python_files` function to copy specified Python files for end-to-end testing of text search modules. It takes the file name as input and uses it as an argument for the `copy_e2e_python_files` function. This simplifies the process of copying multiple Python files.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/text_search_modules/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(copy_text_search_modules_e2e_python_files FILE_NAME)\n    copy_e2e_python_files(text_search_modules ${FILE_NAME})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Build HA Unit Tests (C++)\nDESCRIPTION: This snippet defines a custom target named `memgraph__unit__high_availability` that depends on several unit tests related to Memgraph's high availability (HA) features. It also creates a `run_ha_tests` target that executes these tests using `ctest`. Both target definitions are conditional on the `MG_ENTERPRISE` flag.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/unit/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nif(MG_ENTERPRISE)\n  add_custom_target(memgraph__unit__high_availability ALL\n          DEPENDS memgraph__unit__coordinator_utils\n          memgraph__unit__coordinator_raft_log_serialization\n          memgraph__unit__coordinator_cluster_state\n          memgraph__unit__coordinator_state_machine\n          memgraph__unit__coordinator_state_manager\n          memgraph__unit__coordinator_log_store\n          memgraph__unit__coordinator_raft_state\n          memgraph__unit__coordinator_env_flag_handler\n          memgraph__unit__coordinator_instance_context\n          memgraph__unit__coordinator_instance_aux\n  )\n\n  add_custom_target(run_ha_tests\n          COMMAND ctest -j4 -R memgraph__unit__coordinator_\n  )\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target for Copying Modules CMake\nDESCRIPTION: This snippet defines a custom target named `copy_node2vec_online_modules` that copies the Node2Vec online utility modules to the build directory.  It utilizes the `CMAKE_COMMAND` to execute the copy command and depends on the `node2vec_online_utils` variable defined earlier.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/query_modules/node2vec_online_module/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(copy_node2vec_online_modules ALL\n    COMMAND ${CMAKE_COMMAND} -E copy ${node2vec_online_utils} ${QUERY_MODULES_BUILD_DIR}/node2vec_online_utils\n    COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/node2vec_online.py ${QUERY_MODULES_BUILD_DIR}\n)\n```\n\n----------------------------------------\n\nTITLE: SAML Issuer Definition\nDESCRIPTION: This snippet defines the issuer of the SAML assertion, specifying the format as an entity. The issuer is the authority asserting the identity of the user, such as an Identity Provider.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/sso/data/okta_response.txt#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n <saml2:Issuer xmlns:saml2=\"urn:oasis:names:tc:SAML:2.0:assertion\" Format=\"urn:oasis:names:tc:SAML:2.0:nameid-format:entity\">http://www.okta.com/exke6ubrkbz9TG2iB697</saml2:Issuer>\n```\n\n----------------------------------------\n\nTITLE: Define CMake function to copy GraphQL E2E files\nDESCRIPTION: Defines a CMake function `copy_graphql_e2e_python_files` that takes a file name as input and calls `copy_e2e_python_files` with `graphql` as a prefix. This function is designed to copy end-to-end test files related to the GraphQL functionality.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/graphql/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(copy_graphql_e2e_python_files FILE_NAME)\n  copy_e2e_python_files(graphql ${FILE_NAME})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Configure Dependencies\nDESCRIPTION: This snippet sets up dependencies for the CMake configuration, triggering a re-run when the git repository state changes. It monitors the `.git/HEAD` file for checkout changes and `.git/refs/heads/...` for commit changes. This ensures that the version information is updated when the repository is modified.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/CMakeLists.txt#_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nset(git_directory \"${CMAKE_SOURCE_DIR}/.git\")\n# Check for directory because if the repo is cloned as a git submodule, .git is\n# a file and below code doesn't work.\nif (IS_DIRECTORY \"${git_directory}\")\n  set_property(DIRECTORY APPEND PROPERTY\n      CMAKE_CONFIGURE_DEPENDS \"${git_directory}/HEAD\")\n  file(STRINGS \"${git_directory}/HEAD\" git_head_data)\n  if (git_head_data MATCHES \"^ref: \")\n    string(SUBSTRING \"${git_head_data}\" 5 -1 git_head_ref)\n    set_property(DIRECTORY APPEND PROPERTY\n        CMAKE_CONFIGURE_DEPENDS \"${git_directory}/${git_head_ref}\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: SAML 2.0 Response Structure (XML)\nDESCRIPTION: This XML snippet represents the structure of a SAML 2.0 Response, including namespaces, destination, ID, InResponseTo, IssueInstant, and Version attributes. The root element is saml2p:Response, which contains nested elements like Issuer, Signature, Status, and Assertion.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/sso/data/okta_response_missing_role.txt#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<saml2p:Response xmlns:saml2p=\"urn:oasis:names:tc:SAML:2.0:protocol\" Destination=\"http://localhost:3000/auth/providers/saml-okta/callback\" ID=\"id15166411057654531904579388\" InResponseTo=\"_6b5fb9873fc484844812e0c88e787b05aa677bdb\" IssueInstant=\"2024-05-16T15:18:42.988Z\" Version=\"2.0\">\n  <saml2:Issuer xmlns:saml2=\"urn:oasis:names:tc:SAML:2.0:assertion\" Format=\"urn:oasis:names:tc:SAML:2.0:nameid-format:entity\">http://www.okta.com/exke6ubrkbz9TG2iB697</saml2:Issuer>\n  <ds:Signature xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\">\n    <ds:SignedInfo>\n      <ds:CanonicalizationMethod Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\" />\n      <ds:SignatureMethod Algorithm=\"http://www.w3.org/2001/04/xmldsig-more#rsa-sha256\" />\n      <ds:Reference URI=\"#id15166411057654531904579388\">\n        <ds:Transforms>\n          <ds:Transform Algorithm=\"http://www.w3.org/2000/09/xmldsig#enveloped-signature\" />\n          <ds:Transform Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\" />\n        </ds:Transforms>\n        <ds:DigestMethod Algorithm=\"http://www.w3.org/2001/04/xmlenc#sha256\" />\n        <ds:DigestValue>q2qce2jptYuNcDuUkwiaDrp+awf/geEJ1LPur3gaNWI=</ds:DigestValue>\n      </ds:Reference>\n    </ds:SignedInfo>\n    <ds:SignatureValue>am/v410fm2jRwWDnB+kMdqZNn1F+2uoANNPhrOkPijQaMGYiArrkH3yLkRTWiZprxZevkIcGpDRp1R3XgXBjt52rBIN0zl+fCWDcPIGpnrT84Aya54l7CON5dI/c8R+i+kPUjOsTyv05Q2gIvvhCRPn+8tLDWLoIHm4cs4iLAw606u05hs2BapEKf9ewgw2pVQyyAHte0ovVDI3As+VwLVVNE8I4wFxUBjQYTH8paMi9W5Zt8D+rlcFgar9oB0E+14o5d4JfMbpplNC0wzKfkhrqbSHQY2siSNmqgZ/eEda2cRbIIY0aC41zcgZttSsRz+IBXJ7W7feEMmEaMCsz3syWEg==</ds:SignatureValue>\n    <ds:KeyInfo>\n      <ds:X509Data>\n        <ds:X509Certificate>MIIDqjCCApKgAwIBAgIGA9xcy5rMA0GCSqGSIb3DQEBCwUAMIgVMQswCQYDVQQGEwJVUzER\nMA8GA1UECgwIT2t0YSBJbmMuMRUwEwYDVQQLDA1JbnRlZ3JhdGlvbnMxETAPBgNVBAsMCE9L\nVEFTSU1PMRYwFAYDVQQDDA1PazRUZXN0QXBwMBIwDQYDVQQHDAZTZWF0dGxlMQ4wDAYDVQQI\nDAVXQTAeFw0yNDA1MTYxNDI0MzJaFw0yNTA1MTYxNDI0MzJaMEgxCzAJBgNVBAYTAlVTMQ8w\nDQYDVQQIDAZXYXNoaW5ndG9uMQ4wDAYDVQQHEwZTZWF0dGxlMRUwEwYDVQQKDAxPa3RhIElu\nYy4wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQAlsJ8TsGPqN1HvQIWjeCuZliRH\nCMImajYxwLEwiiGbcz65NhDARsg+W1NzLL4DHzhg81vU7GD8jtmQGHD5h53R/SMoQX4ZvNZN\n04bAHeiMqnWvmrfs02pVyjOjohI/vi3lvte6utF6kVSRCC9VG68PN7J42YDHDoDVXkDKtX+l\ne6oLWNnebKP7uh0MuA/F3SJWSbjfoFDHnl361qBDzpzA37U5n+CbXQ+HmFjN/Wfa+kCoSJlh\nCyl8rb2YbIG6h8xmfZrTlAS9xfi5x4FrkV9VFOycmYnf7D9656QC1U9K8hP723mhi/I68jF9\nlrC7MYKuz05d2zzbgu/AFmSO1Q/fWUQIDAQABMA0GCSqGSIb3DQEBCwUAA4IBAQEA1MO7p7KY\nxG4pqmGSGvXYgC8icFydz4nMAkBqVQqhEnQVEiplW8EtW1EgD5A9+P5ZkbpdQyFMsiNCBpPK\nzHUdcVhzueHD2wDSnONwMjDXTuqzGnoycxiaduymd4Q0rFYkINASpWJoIjHl04y6FtsyBB4\nM0/Qw++3SQIVtbPk5hPjhClyPLjK/YQU7SFpC+1mRacChHPld87YED20vGjSKvnBgkOIuQrT\n6wGkbQKmW3icDh+pdn7/20ZguwPX/CmM2OgGntQYc2LY7ARn4vuLUgRb1SwOuBCqOH45h+XZ\nOpydS5RMyiMIGCoxkvphJD/bSAoGNffmY0GOKAbJ7z/os5</ds:X509Certificate>\n      </ds:X509Data>\n    </ds:KeyInfo>\n  </ds:Signature>\n  <saml2p:Status>\n    <saml2p:StatusCode Value=\"urn:oasis:names:tc:SAML:2.0:status:Success\" />\n  </saml2p:Status>\n  <saml2:Assertion xmlns:saml2=\"urn:oasis:names:tc:SAML:2.0:assertion\" ID=\"id15166411059542251802226451\" IssueInstant=\"2024-05-16T15:18:42.988Z\" Version=\"2.0\">\n    <saml2:Issuer Format=\"urn:oasis:names:tc:SAML:2.0:nameid-format:entity\">http://www.okta.com/exke6ubrkbz9TG2iB697</saml2:Issuer>\n    <ds:Signature xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\">\n      <ds:SignedInfo>\n        <ds:CanonicalizationMethod Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\" />\n        <ds:SignatureMethod Algorithm=\"http://www.w3.org/2001/04/xmldsig-more#rsa-sha256\" />\n        <ds:Reference URI=\"#id15166411059542251802226451\">\n          <ds:Transforms>\n            <ds:Transform Algorithm=\"http://www.w3.org/2000/09/xmldsig#enveloped-signature\" />\n            <ds:Transform Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\" />\n          </ds:Transforms>\n          <ds:DigestMethod Algorithm=\"http://www.w3.org/2001/04/xmlenc#sha256\" />\n          <ds:DigestValue>XZdbdmgMMjoyOKYbsuhKLkZfpIaOgkCo2hFgeY+3wXE=</ds:DigestValue>\n        </ds:Reference>\n      </ds:SignedInfo>\n      <ds:SignatureValue>EowcGlsVY+gJwXC03dUw/1gewEAyWmFEa4VCmE9yVRFWdd7wsCFEJ+YpXCS7S4HEB4AKS3ib6SgvU1sMbbE/DVWtA5GExA/wMrRC3dkfmx/Fue6WC8INpSS5BVLZj1DdR5uCG4J8vtwtdTFdTjIbbsTG840M/pfkdQcDvTVxhIexMFceSq4Gn1ylPhyFcp8K611zovAAucWEp4tmUrswjVWL6eEm/MkuBLp5GUC6JPHMAUrV3/D+0lDckKDFOf1s9B5cQNhbkrCGAjPQahMzOaEDnAAtzCot05WsxCjfUvTRpsSuTIDJPRLrv6ZEXdUc0rwfyf6lfHI84byqGieRabI7L4+p5eA==</ds:SignatureValue>\n      <ds:KeyInfo>\n        <ds:X509Data>\n          <ds:X509Certificate>MIIDqjCCApKgAwIBAgIGA9xcy5rMA0GCSqGSIb3DQEBCwUAMIgVMQswCQYDVQQGEwJVUzER\nMA8GA1UECgwIT2t0YSBJbmMuMRUwEwYDVQQLDA1JbnRlZ3JhdGlvbnMxETAPBgNVBAsMCE9L\nVEFTSU1PMRYwFAYDVQQDDA1PazRUZXN0QXBwMBIwDQYDVQQHDAZTZWF0dGxlMQ4wDAYDVQQI\nDAVXQTAeFw0yNDA1MTYxNDI0MzJaFw0yNTA1MTYxNDI0MzJaMEgxCzAJBgNVBAYTAlVTMQ8w\nDQYDVQQIDAZXYXNoaW5ndG9uMQ4wDAYDVQQHEwZTZWF0dGxlMRUwEwYDVQQKDAxPa3RhIElu\nYy4wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQAlsJ8TsGPqN1HvQIWjeCuZliRH\nCMImajYxwLEwiiGbcz65NhDARsg+W1NzLL4DHzhg81vU7GD8jtmQGHD5h53R/SMoQX4ZvNZN\n04bAHeiMqnWvmrfs02pVyjOjohI/vi3lvte6utF6kVSRCC9VG68PN7J42YDHDoDVXkDKtX+l\ne6oLWNnebKP7uh0MuA/F3SJWSbjfoFDHnl361qBDzpzA37U5n+CbXQ+HmFjN/Wfa+kCoSJlh\nCyl8rb2YbIG6h8xmfZrTlAS9xfi5x4FrkV9VFOycmYnf7D9656QC1U9K8hP723mhi/I68jF9\nlrC7MYKuz05d2zzbgu/AFmSO1Q/fWUQIDAQABMA0GCSqGSIb3DQEBCwUAA4IBAQEA1MO7p7KY\nxG4pqmGSGvXYgC8icFydz4nMAkBqVQqhEnQVEiplW8EtW1EgD5A9+P5ZkbpdQyFMsiNCBpPK\nzHUdcVhzueHD2wDSnONwMjDXTuqzGnoycxiaduymd4Q0rFYkINASpWJoIjHl04y6FtsyBB4\nM0/Qw++3SQIVtbPk5hPjhClyPLjK/YQU7SFpC+1mRacChHPld87YED20vGjSKvnBgkOIuQrT\n6wGkbQKmW3icDh+pdn7/20ZguwPX/CmM2OgGntQYc2LY7ARn4vuLUgRb1SwOuBCqOH45h+XZ\nOpydS5RMyiMIGCoxkvphJD/bSAoGNffmY0GOKAbJ7z/os5</ds:X509Certificate>\n        </ds:X509Data>\n      </ds:KeyInfo>\n    </ds:Signature>\n    <saml2:Subject>\n      <saml2:NameID Format=\"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\">Anthony</saml2:NameID>\n      <saml2:SubjectConfirmation Method=\"urn:oasis:names:tc:SAML:2.0:cm:bearer\">\n        <saml2:SubjectConfirmationData InResponseTo=\"_6b5fb9873fc484844812e0c88e787b05aa677bdb\" NotOnOrAfter=\"2124-05-16T15:23:42.988Z\" Recipient=\"http://localhost:3000/auth/providers/saml-okta/callback\" />\n      </saml2:SubjectConfirmation>\n    </saml2:Subject>\n    <saml2:Conditions NotBefore=\"2024-05-16T15:13:42.988Z\" NotOnOrAfter=\"2124-05-16T15:23:42.988Z\">\n      <saml2:AudienceRestriction>\n        <saml2:Audience>myApplication</saml2:Audience>\n      </saml2:AudienceRestriction>\n    </saml2:Conditions>\n    <saml2:AuthnStatement AuthnInstant=\"2024-05-16T15:07:34.408Z\" SessionIndex=\"_6b5fb9873fc484844812e0c88e787b05aa677bdb\">\n      <saml2:AuthnContext>\n        <saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport</saml2:AuthnContextClassRef>\n      </saml2:AuthnContext>\n    </saml2:AuthnStatement>\n  </saml2:Assertion>\n</saml2p:Response>\n```\n\n----------------------------------------\n\nTITLE: Creating Executable for Server SSL Connection Test (CMake)\nDESCRIPTION: This CMake command defines an executable target named `memgraph__e2e__server_ssl_connection`. It builds the executable from `server_ssl_connection.cpp` and links it against the `mgclient`, `mg-utils`, and `gflags` libraries.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/server/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(memgraph__e2e__server_ssl_connection server_ssl_connection.cpp)\ntarget_link_libraries(memgraph__e2e__server_ssl_connection mgclient mg-utils gflags)\n```\n\n----------------------------------------\n\nTITLE: Call CMake Function for Cypher Initialization File\nDESCRIPTION: Calls the `copy_init_file_flags_e2e_files` function for a Cypher initialization file: `init_file.cypherl`. This file is copied as part of the end-to-end test setup.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/init_file_flags/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_init_file_flags_e2e_files(init_file.cypherl)\n```\n\n----------------------------------------\n\nTITLE: Calling the CMake Function for Python Files\nDESCRIPTION: Calls the `copy_periodic_commit_e2e_python_files` function with `common.py` and `periodic_commit.py` as arguments. This copies these Python files to the directory for periodic commit tests.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/periodic_commit/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_periodic_commit_e2e_python_files(common.py)\ncopy_periodic_commit_e2e_python_files(periodic_commit.py)\n```\n\n----------------------------------------\n\nTITLE: Copying E2E Test Files\nDESCRIPTION: This command copies the `module_file_manager` and `workloads.yaml` files to be used for end-to-end testing into the build directory where the tests will be executed. This ensures the tests can find the necessary input files.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/module_file_manager/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_e2e_files(module_file_manager workloads.yaml)\n```\n\n----------------------------------------\n\nTITLE: Setting Debian Package Architecture Extension - CMake\nDESCRIPTION: This snippet sets the architecture extension for Debian packages based on the MG_ARCH variable. If MG_ARCH is x86_64, the extension is set to amd64; if it's ARM64, the extension is set to arm64; otherwise, it defaults to all. This ensures the Debian package is built for the correct architecture.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/release/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(MG_ARCH_EXTENSION_DEB \"all\")\n\nif(${MG_ARCH} STREQUAL \"x86_64\")\n    set(MG_ARCH_EXTENSION_DEB \"amd64\")\nelif(${MG_ARCH} STREQUAL \"ARM64\")\n    set(MG_ARCH_EXTENSION_DEB \"arm64\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Test Prefix in CMake\nDESCRIPTION: This snippet sets a prefix for all stress test target names. The prefix is stored in the `test_prefix` variable and used when defining target names for individual stress tests.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/stress/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(test_prefix memgraph__stress__)\n```\n\n----------------------------------------\n\nTITLE: Add Executable and Link Libraries for Monitoring Server in CMake\nDESCRIPTION: This CMake command defines an executable target named `memgraph__e2e__monitoring_server` and links it with several libraries: `mgclient`, `mg-utils`, `nlohmann_json`, `gflags`, and `Boost::headers`. The `monitoring.cpp` file is the source file for the executable.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/monitoring_server/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(memgraph__e2e__monitoring_server monitoring.cpp)\ntarget_link_libraries(memgraph__e2e__monitoring_server mgclient mg-utils nlohmann_json::nlohmann_json gflags Boost::headers)\n```\n\n----------------------------------------\n\nTITLE: Add External Project Argument Parsing Macro\nDESCRIPTION: Defines a CMake macro `add_external_project_arg_parse` to parse arguments for external project configuration. It uses `cmake_parse_arguments` to handle options, one-value keywords, and multi-value keywords.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/libs/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nmacro(add_external_project_arg_parse pos prefix)\n  set(options NO_C_COMPILER)\n  set(one_value_kwargs SOURCE_DIR BUILD_IN_SOURCE CMAKE_PREFIX_PATH)\n  set(multi_value_kwargs CMAKE_ARGS DEPENDS INSTALL_COMMAND BUILD_COMMAND\n          CONFIGURE_COMMAND BUILD_BYPRODUCTS)\n  cmake_parse_arguments(PARSE_ARGV ${pos} \"${prefix}\" \"${options}\" \"${one_value_kwargs}\" \"${multi_value_kwargs}\")\nendmacro()\n```\n\n----------------------------------------\n\nTITLE: Create Executable for Privileges Check CMake\nDESCRIPTION: Creates an executable named `memgraph__e2e__triggers__privileges` from the source file `privilige_check.cpp`. It then links the executable to the `memgraph__e2e__triggers_common` library.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/triggers/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(memgraph__e2e__triggers__privileges privilige_check.cpp)\ntarget_link_libraries(memgraph__e2e__triggers__privileges memgraph__e2e__triggers_common)\n```\n\n----------------------------------------\n\nTITLE: Setup strong_type with CMake\nDESCRIPTION: This snippet adds the strong_type subdirectory to the build process, excluding it from the ALL target. This ensures that the strong_type library is built as part of the overall project build.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/libs/CMakeLists.txt#_snippet_31\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(strong_type EXCLUDE_FROM_ALL)\n```\n\n----------------------------------------\n\nTITLE: Adding CMake Subdirectories\nDESCRIPTION: The `add_subdirectory` command is used to include specified directories in the current CMake project. It allows to modularize the build process, where each subdirectory represents a different module or feature. The build system will recursively process CMakeLists.txt files in each subdirectory.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/integration/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(telemetry)\nadd_subdirectory(ssl)\nadd_subdirectory(transactions)\nadd_subdirectory(auth)\nadd_subdirectory(fine_grained_access)\nadd_subdirectory(audit)\nadd_subdirectory(ldap)\nadd_subdirectory(mg_import_csv)\nadd_subdirectory(license_info)\nadd_subdirectory(env_variable_check)\nadd_subdirectory(flag_check)\nadd_subdirectory(storage_mode)\nadd_subdirectory(run_time_settings)\nadd_subdirectory(init_file)\n```\n\n----------------------------------------\n\nTITLE: Calling CMake function for specific Python files\nDESCRIPTION: These lines call the `copy_show_index_info_e2e_python_files` function defined earlier, specifying `common.py` and `test_show_index_info.py` as the files to be copied. This copies the common Python file and test file for show index info E2E tests.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/show_index_info/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_show_index_info_e2e_python_files(common.py)\ncopy_show_index_info_e2e_python_files(test_show_index_info.py)\n```\n\n----------------------------------------\n\nTITLE: Call CMake Function for Specific Python Files\nDESCRIPTION: Calls the `copy_user_changing_its_own_password_e2e_python_files` CMake function twice, specifying `common.py` and `user_changing_its_own_password.py` as the file names to be copied. This ensures that these two Python files are available for the end-to-end tests.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/user_changing_its_own_password/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncopy_user_changing_its_own_password_e2e_python_files(common.py)\ncopy_user_changing_its_own_password_e2e_python_files(user_changing_its_own_password.py)\n```\n\n----------------------------------------\n\nTITLE: Adding a C++ query module\nDESCRIPTION: This line adds a query module named 'batch_c_read', implemented in C++. The file `batch_c_read.cpp` likely contains the C++ code for the query module, providing functionality to read data in batches or perform other operations related to batched processing.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/batched_procedures/procedures/CMakeLists.txt#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nadd_query_module(batch_c_read batch_c_read.cpp)\n```\n\n----------------------------------------\n\nTITLE: Copying workload yaml file\nDESCRIPTION: This command copies the `workloads.yaml` file into the `schema_info` directory using the `copy_e2e_files` function. The yaml file contains information about the workload and it is necessary for the end-to-end testing.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/schema_info/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_e2e_files(schema_info workloads.yaml)\n```\n\n----------------------------------------\n\nTITLE: Call CMake Function with Specific Python Files\nDESCRIPTION: This section calls the defined CMake function `copy_enterprise_query_modules_e2e_python_files` with two specific Python files: `common.py` and `test_enterprise.py`. This ensures these Python files are available during the execution of the enterprise query modules E2E tests.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/enterprise_query_modules/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_enterprise_query_modules_e2e_python_files(common.py)\ncopy_enterprise_query_modules_e2e_python_files(test_enterprise.py)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Properties for Environment Variable Tester in CMake\nDESCRIPTION: This CMake command sets the output name property for the `${tester_target_name}` target to `tester`. This ensures that the generated executable file will be named `tester` instead of the default target name, simplifying execution and debugging.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/integration/env_variable_check/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset_target_properties(${tester_target_name} PROPERTIES OUTPUT_NAME tester)\n```\n\n----------------------------------------\n\nTITLE: Dataset Configuration YAML\nDESCRIPTION: This YAML snippet shows the dataset configuration, which is a legacy way to define stress tests. It includes the test script name, arguments, timeout, and optional Memgraph-specific arguments. The tests are executed based on these parameters.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/stress/README.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# The dataset configuration is a legacy way to provide stress tests. For adding your own stress test\n# Please check section 4. Custom Workloads\ndataset:\n  tests:\n    - name: <script_name>  # Name of the test script (e.g., bipartite.py, detach_delete.py).\n      test_args:  # Arguments passed to the legacy test scripts.\n        - \"<argument>\"\n      timeout_min: <int>  # Maximum execution time for the test in minutes.\n      memgraph_args:\n      # (Optional) Additional Memgraph-specific arguments.\n      # Arguments are merged with the default arguments from above Memgraph configuration\n        - \"--flag-name=flag-value\"\n```\n\n----------------------------------------\n\nTITLE: Defining CMake Function for Copying E2E Python Files\nDESCRIPTION: Defines a CMake function `copy_query_modules_e2e_python_files` that takes a `FILE_NAME` as input and uses the `copy_e2e_python_files` function (assumed to be defined elsewhere) to copy the specified Python file to the `query_modules` directory. This facilitates the management of E2E test files.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/query_modules/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(copy_query_modules_e2e_python_files FILE_NAME)\n    copy_e2e_python_files(query_modules ${FILE_NAME})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Call CMake Function to Copy Specific Python Files\nDESCRIPTION: These lines invoke the `copy_qm_storage_modes_e2e_python_files` function defined earlier, passing 'common.py' and 'test_query_modules_storage_modes.py' as file names. This copies these Python files to the designated directory for end-to-end tests related to query module storage modes.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/query_modules_storage_modes/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncopy_qm_storage_modes_e2e_python_files(common.py)\ncopy_qm_storage_modes_e2e_python_files(test_query_modules_storage_modes.py)\n```\n\n----------------------------------------\n\nTITLE: Define function to copy E2E Python files\nDESCRIPTION: This function `copy_queries_e2e_python_files` takes a filename as input and uses `copy_e2e_python_files` to copy the files. It specifically targets python files related to queries.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/queries/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(copy_queries_e2e_python_files FILE_NAME)\n  copy_e2e_python_files(queries ${FILE_NAME})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Adding Storage Indices Concurrent Test\nDESCRIPTION: Adds a concurrent test named `storage_indices.cpp`. It creates an executable and links it with `mg-utils` and `mg-storage-v2` libraries using `target_link_libraries`. This ensures that the test can access the functionality provided by `mg-utils` and `mg-storage-v2`.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/concurrent/CMakeLists.txt#_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\nadd_concurrent_test(storage_indices.cpp)\ntarget_link_libraries(${test_prefix}storage_indices mg-utils mg-storage-v2)\n```\n\n----------------------------------------\n\nTITLE: Call CMake Function to Copy Common.py\nDESCRIPTION: Calls the `copy_auth_e2e_python_files` function with 'common.py' as the filename. This copies the `common.py` file, specifically configured for authentication end-to-end tests.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/auth/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_auth_e2e_python_files(common.py)\n```\n\n----------------------------------------\n\nTITLE: Copying E2E Test Files - Okta Missing Role\nDESCRIPTION: This command copies an end-to-end test file representing an Okta response with a missing role.  This verifies the application's ability to handle incomplete user data from Okta.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/sso/data/CMakeLists.txt#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ncopy_e2e_files(sso okta_response_missing_role.txt)\n```\n\n----------------------------------------\n\nTITLE: Define RPC Source Files in CMake\nDESCRIPTION: This CMake command sets a variable `rpc_src_files` to list the source files that make up the RPC library. This list is later used when creating the library.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/rpc/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(rpc_src_files\n    client.cpp\n    protocol.cpp\n    server.cpp)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Names in CMake\nDESCRIPTION: This snippet sets the target name for the memgraph integration storage mode and the corresponding tester target name. It uses CMake's `set` command to define these variables.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/integration/storage_mode/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(target_name memgraph__integration__storage_mode)\nset(tester_target_name ${target_name}__tester)\n```\n\n----------------------------------------\n\nTITLE: Copying a YAML file with CMake\nDESCRIPTION: Copies the `workloads.yaml` file to the `lba_procedures` directory using the `copy_e2e_files` command. This is likely for including necessary configuration files in the testing or deployment environment.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/lba_procedures/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_e2e_files(lba_procedures workloads.yaml)\n```\n\n----------------------------------------\n\nTITLE: Defining CMake Function to Copy Python Files\nDESCRIPTION: This CMake function, `copy_concurrent_query_modules_e2e_python_files`, takes a file name as input and calls another function, `copy_e2e_python_files`, to copy the specified Python file to the `concurrent_query_modules` directory. It's used for preparing Python-based end-to-end tests for concurrent query modules.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/concurrent_query_modules/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(copy_concurrent_query_modules_e2e_python_files FILE_NAME)\n    copy_e2e_python_files(concurrent_query_modules ${FILE_NAME})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Defining a CMake function to copy E2E Python files\nDESCRIPTION: This CMake function, `copy_schema_info_e2e_python_files`, takes a `FILE_NAME` as input and uses the `copy_e2e_python_files` function to copy Python files related to schema information into the specified directory. It ensures that schema-related Python files are available for end-to-end testing.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/schema_info/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(copy_schema_info_e2e_python_files FILE_NAME)\n    copy_e2e_python_files(schema_info ${FILE_NAME})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Defining CMake function to copy Python files for graph dropping\nDESCRIPTION: Defines a CMake function named `copy_drop_graph_e2e_python_files` that copies Python files related to dropping graphs for end-to-end testing. The function takes FILE_NAME as an argument and calls `copy_e2e_python_files` to copy the file to a `drop_graph` subdirectory.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/drop_graph/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(copy_drop_graph_e2e_python_files FILE_NAME)\n    copy_e2e_python_files(drop_graph ${FILE_NAME})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Define CMake Function for Copying Python Files\nDESCRIPTION: Defines a CMake function `copy_mock_python_api_e2e_files` that takes a `FILE_NAME` as input and uses the `copy_e2e_python_files` function to copy the specified file to the mock Python API directory.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/mock_api/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(copy_mock_python_api_e2e_files FILE_NAME)\n    copy_e2e_python_files(mock_python_api ${FILE_NAME})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Creating Global Memory Limit Proc Library (C)\nDESCRIPTION: This snippet creates a shared library named `global_memory_limit_proc` from the source file `global_memory_limit_proc.c`. It sets the include directories for the target to include the project's include directory. No external dependencies are listed.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/memory/procedures/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(global_memory_limit_proc SHARED global_memory_limit_proc.c)\ntarget_include_directories(global_memory_limit_proc PRIVATE ${CMAKE_SOURCE_DIR}/include)\n```\n\n----------------------------------------\n\nTITLE: Copying Workloads YAML File\nDESCRIPTION: This line calls the `copy_e2e_files` function to copy the `workloads.yaml` file to the `concurrent_query_modules` directory. This YAML file likely defines workloads for testing or benchmarking the concurrent query modules.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/concurrent_query_modules/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_e2e_files(concurrent_query_modules workloads.yaml)\n```\n\n----------------------------------------\n\nTITLE: Call CMake function to copy specific Python files\nDESCRIPTION: These calls invoke the `copy_analytical_mode_e2e_python_files` function to copy `common.py` and `free_memory.py` for analytical mode E2E testing. The calls ensure that these Python files are available in the testing environment.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/analytical_mode/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncopy_analytical_mode_e2e_python_files(common.py)\ncopy_analytical_mode_e2e_python_files(free_memory.py)\n```\n\n----------------------------------------\n\nTITLE: PGP Public Key Block\nDESCRIPTION: This code snippet represents a PGP public key block.  It is used to verify signatures and encrypt messages to the key owner. The key is associated with 'Lasse Collin <lasse.collin@tukaani.org>'.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/environment/toolchain/v6/xz_pgp.txt#_snippet_0\n\nLANGUAGE: PGP\nCODE:\n```\n-----BEGIN PGP PUBLIC KEY BLOCK-----\n\nmQINBEzEOZIBEACxg/IuXERlDB48JBWmF4NxNUuuup1IhJAJyFGFSKh3OGAO2Ard\nsNuRLjANsFXA7m7P5eTFcG+BoHHuAVYmKnI3PPZtHVLnUt4pGItPczQZ2BE1WpcI\nayjGTBJeKItX3Npqg9D/odO9WWS1i3FQPVdrLn0YH37/BA66jeMQCRo7g7GLpaNf\nIrvYGsqTbxCwsmA37rpE7oyU4Yrf74HT091WBsRIoq/MelhbxTDMR8eu/dUGZQVc\nKj3lN55RepwWwUUKyqarY0zMt4HkFJ7v7yRL+Cvzy92Ouv4Wf2FlhNtEs5LE4Tax\nW0PO5AEmUoKjX87SezQK0f652018b4u6Ex52cY7p+n5TII/UyoowH6+tY8UHo9yb\nfStrqgNE/mY2bhA6+AwCaOUGsFzVVPTbjtxL3HacUP/jlA1h78V8VTvTs5d55iG7\njSqR9o05wje8rwNiXXK0xtiJahyNzL97Kn/DgPSqPIi45G+8nxWSPFM5eunBKRl9\nvAnsvwrdPRsR6YR3uMHTuVhQX9/CY891MHkaZJ6wydWtKt3yQwJLYqwo5d4DwnUX\nCduUwSKv+6RmtWI5ZmTQYOcBRcZyGKml9X9Q8iSbm6cnpFXmLrNQwCJN+D3SiYGc\nMtbltZo0ysPMa6Xj5xFaYqWk/BI4iLb2Gs+ByGo/+a0Eq4XYBMOpitNniQARAQAB\ntCdMYXNzZSBDb2xsaW4gPGxhc3NlLmNvbGxpbkB0dWthYW5pLm9yZz6JAlEEEwEK\nADsCGwMCHgECF4AECwkIBwMVCggFFgIDAQAWIQQ2kMJAzlG0Zw0wrRw47nV9aRhG\nIAUCYEt9dQUJFxeR4wAKCRA47nV9aRhGIBNDEACxD6vJ+enZwe3IgkJh5JtLsC9b\nMWCQRlPW1EVMsg96Cb5Rtron1eN1pp1TlzENJu1/C7C/VEsr9WwOPg26Men7fNf/\nO21QM9IBWd/uB0Pu333WqKh92ESS5x9ST9DrG39nVGSPkQQBMuia72VrA+crPnwT\nh/u1IN6/sff5VDIU24rUiqW2Npy733dANruj7Ny0scRXVPltnVdhqwPHt6qNjC1\nt+/cCnwHgW1BR1RYXBPpB42z/m29dL9rPrG0YPGWs2Bc+EATUICfEE6eIvwfciue\nIJTjKT9Y9DrogJC2AYFhjC7N04OKdCB2hFs4BjexJwr4X0GJO7LhFl03c951AsIE\nGHwrucRPB5bo2vmvQ8IvZn7CmtdUJzXv9JlyU6p+MIK1pz7TK6GgSOSffQIXZn6e\nnUPtm9mEwuncOfmW8ODYPs1gCWYgyiFJx8h7eEu+M4MxHSFBs7MwXf/Ae2fSp+M\nP/p198qB8fC5oVBnF95qb0Qi0uc1D+Gb+gpBF+ymMb+s/VBOR3QWiym7AzBrJ62g\nUnbC9jMLGnSRI+7p7raUfMTgXr5/oQoBw7ExJVltSSRrim2YH/t4CV47mO6dR9J3\n1RtsTFIRNhz+07XPsETcuCV/dgqeC8fOFLt9MY17Sufhb1DcGy4urZBOIhXcpTV7\nvHVj5IYH5nYOT49NRYkCOAQTAQIAIgUCTMQ5kgIbAwYLCQgHAwIGFQgCCQoLBBYC\nAwECHgECF4AACgkQOO51fWkYRiAg4A/7BXKwoRaXrMbMPOW7vuVF7c2IKB2Yqzn1\nvLBCwuEHkqY237lDcXY4/5LR+1gcZ3Duw1n/BRSm0FBdvyX/JTWiWNSDUkKAO/0l\nT2Tg44YLrDT3bzwu8dbU9xQt6kH+SCOHvv5Oe4k79l5mro6fF3H1M0bN63x/YoFY\nojy09D7/JptY82oR4f/VdKnfZLJcCViCb0wp8SD2NkDAudKg+K+7PD8HlTWklQQg\nTZdRXxVZKIJeU42aJDqnRbAhJd64YHyClhqut9F5LUmiP5qfLfNhkKDhNOwk2Blr\nBGBJkSd7wPyzcX4Mun/L6YspHjbeVMt9TD7HQlo+OOd2OjAHCx6pqwkXnzeLPEaE\ncPdQ1SHgrBViAxX3DNPubLP0Knw8XwFu96EuhHZgexE1W7bB4LFsJyXAc5k1PqPD\nCLsAauxmvI2OfI7opG/8wyxDvNgoPjG8fZNAgY0REqPC0JnTXChH31IxUmhNotH8\ntD3DDTZOHw05n5MwwUrEE9xiETVDfFQcMLfxZ9KLz+BC2g1t5LYublRgnCMNJzFg\nsNUMM02CphABzl/LCLnumr0eyQQ/weV4twEhLwSDmqLYHL0EdYW0Y3CnnU9vmYxQ\ncXKbstS71sEJJYBBmSBbf9GxkOY8BRNtwVwY0kPgxv1WqdVBiAFvfB+pyAsrax9B\n3UeB7ZSwRD6JAhwEEAEKAAYFAlS25GwACgkQlbYYGy0z6ew92Q//ZA9/6piQtoW4\nPwP/1DtWGyKU8hwR+9FG669iPk/dAG+yoEJtFMOUpg/FUFmCX8Bc4oEHsCVyLxKt\nDcCVUIRcYNSFi5hTZaBEbwsOlDT37gtlfIIu34hhHRccKaLnN/N9gNMNw8wGh9xg\nQ/KtxZwcbk/bZIlDkKTJkFBRAekdEGAFDWb/AZOy+LQxS8ZAh1eWkfV0i8opmK9k\ngPXtLE0WSsqtYyGs58z+BFE9NH3tEUwK6jSvtuLwQl4UrICNbKthcpb8WwH6UXzb\nq3QNSYVOpf/cqRdBJA6bvb/ku/xyKVL08lGmxD9v1b137R7mafDAFPTsvH2Mt/0V\nYuhtWav3r1Bl9QksDxt2DTS8wiWDUBetGqOVdcw7vBrXPEWDNBmxeJXsiJ7zJlR+\n9wrJOm6RV2+l1IPxu96EaPS+kTNBijKrhxb67bww8BTEWTd0wcdJmgWRkM8SIstp\nIKqd0L2TFYph2/NtrBhRg+DIEPJPpSTGsUMcCEXCZPQ+cIdlQKsWpk0tZ62DlvEl\nr7E+wgUSQolRfx5KrpZifiS2zQlhzdXv28CJhsVbLyw5fUAWUKIH/dCo5NKsNLk2\nLc5DH9VWnFgxAAtW290FqeK/4ulMq7Vs1dQSwyHM2Ni3QqqeaiOrh8gbSY5CMLFN\nY3HYRwuTYPa3AobsozCzBj0Zdf/6AFe5Ag0ETMQ5kgEQAL/FwKdjxgPxtSpgq1SM\nzgZtTTyLqhgGD3NZfadHWHYRIL38NDV3JeTA79Y2zj2dj7KQPDT+0aqeizTV2E3j\nP3iCQ53VOT4consBaQAgKexpptnS+T1DobtICFJ0GGzf0HRj6KO2zSOuOitWPWlU\nwbvX7M0LLI2+hqlx0jTPqbJFZ/Za6KTtbS6xdCPVUpUqYZQpokEZcwQmUp8Q+lGo\nJD2sNYCZyap63X/aAOgCGr2RXYddOH5e8vGzGW+mwtCv+WQ9Ay35mGqI5MqkbZd1\nQbuv2b1647E/QEEucfRHVbJVKGGPpFMUJtcItyyIt5jo+r9CCL4Cs47dF/9/RNwu\nNvpvHXUyqMBQdWNZRMx4k/NGD/WviPi9m6mIMui6rOQsSOaqYdcUX4Nq2Orr3Oaz\n2JPQdUfeI23iot1vK8hxvUCQTV3HfJghizN6spVl0yQOKBiE8miJRgrjHilH3hTb\nxoo42xDkNAq+CQo3QAm1ibDxKCDq0RcWPjcCRAN/Q5MmpcodpdKkzV0yGIS4g7s5\nfrVrgV/kox2r4/Yxsr8K909+4H82AjTKGX/BmsQFCTAqBk6p7I0zxjIqJ/w33TZB\nQ0Pn4r3WIlUPafzY6a9/LAvN1fHRxf9SpCByJsszD03Qu5f5TB8gthsdnVmTo7jj\niordEKMtw2aEMLzdWWTQ/TNVABEBAAGJAjwEGAEKACYCGwwWIQQ2kMJAzlG0Zw0w\nrRw47nV9aRhGIAUCYEt9YAUJFxeRzgAKCRA47nV9aRhGIMLtD/9HuKM4pngImcuz\nYwzQmdv4j26YYyh4jVsKEmVWTiRcehEgUIlrWkCu3qzd5NK+RetS7kJ8MPnzEUfj\nYbpdC6yrF6n1mSrZZ4VJMkV2ev37bIgXM+Wp1mCAGbjNxQnjn9RabT/gjIqmGuRn\nAP7RsSeOSuO/gO9h2Pteciz23ussTilB+8cTooQEQQZe6Kv/zukvL+ccSehLHsZ7\nqVfRUAmtt8nFkXXE+s8jfLfhqstaI2/RJu5witaPcXM8Mnz2E95aASAbZy0eQot9\n0Pvf07n9yuC3tueTvzvlXx3h5U3yT44tIOmzANIQjay1TGdm+RBJ2ZYyhyLawlZ2\nNVUXXSp4QZZXPA0UWbF+pb7Q9cdKDNFVuvGBljuea0Yd0T2o+ibDq43HziX9ll+l\nSXk9mqvW1UcDOaxWrSsm1Gc1O9g3wqH5xHAhtY8GPh/7VgAawskPkmnlkMW6pYPy\nzibbeISJL1gd1jIT63y6aoVrtNoo+wYJm280ROflh4+5QOo6QJ+jm70fkXSG/qJ5\na8/qCPTHkJc/rpkL6/TDQAJURi9RhDAC0gb40HtusbN1LZEA+i0cWTmYXap+DB4Y\nR4pApilpaG87M+VUokR4xpnx7vTb2MPa7Mdenvi9FEGnKXadmT8038vlfzz5GGUT\nMlVin9BQPTpdA+PpRiJvKJgVDeAFOg==\n=asTC\n-----END PGP PUBLIC KEY BLOCK-----\n```\n\n----------------------------------------\n\nTITLE: Copy E2E files for analytical mode (workloads.yaml)\nDESCRIPTION: This line uses the `copy_e2e_files` function to copy `workloads.yaml` for analytical mode. It ensures that the YAML file required for specifying workloads in analytical mode testing is available.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/analytical_mode/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncopy_e2e_files(analytical_mode workloads.yaml)\n```\n\n----------------------------------------\n\nTITLE: Call CMake function to copy common.py\nDESCRIPTION: Calls the previously defined CMake function `copy_concurrency_e2e_python_files` to copy the `common.py` file to the concurrency test directory using the appropriate prefix.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/concurrency/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_concurrency_e2e_python_files(common.py)\n```\n\n----------------------------------------\n\nTITLE: Copying Python file from a parent directory\nDESCRIPTION: This command uses `copy_e2e_python_files_from_parent_folder` function, copies 'mg_utils.py' from the parent directory ('..') to the 'schema_info' directory. This facilitates the inclusion of utility files necessary for schema related end-to-end testing.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/schema_info/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_e2e_python_files_from_parent_folder(schema_info \"..\" mg_utils.py)\n```\n\n----------------------------------------\n\nTITLE: Copying Python files using the CMake function\nDESCRIPTION: This snippet calls the `copy_schema_info_e2e_python_files` function to copy `common.py` and `schema_info.py` into the schema_info directory. The function ensures that the required python files related to schema information is available for testing.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/schema_info/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_schema_info_e2e_python_files(common.py)\ncopy_schema_info_e2e_python_files(schema_info.py)\n```\n\n----------------------------------------\n\nTITLE: Defining CMake Function for Copying Python Files with Import Mode\nDESCRIPTION: This CMake function, `copy_import_mode_e2e_python_files`, takes a file name as input and calls `copy_e2e_python_files` to copy the specified Python file. It uses the `import_mode` variable to determine the destination.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/import_mode/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(copy_import_mode_e2e_python_files FILE_NAME)\n    copy_e2e_python_files(import_mode ${FILE_NAME})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Add External Project CMake Function\nDESCRIPTION: Defines a CMake function `add_external_project` to simplify the addition of external projects using `ExternalProject_Add`.  It calls `add_external_project_arg_parse` to process arguments and then `add_external_project_impl` to perform the actual external project addition.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/libs/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(add_external_project name)\n  add_external_project_arg_parse(1 KW)\n  add_external_project_impl(${name})\nendfunction(add_external_project)\n```\n\n----------------------------------------\n\nTITLE: Creating Executable and Linking Libraries in CMake\nDESCRIPTION: This CMake snippet creates an executable with the specified tester target name from `tester.cpp`. It then sets the output name to \"tester\" and links the executable against `mg-communication` and `gtest` libraries.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/integration/transactions/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${tester_target_name} tester.cpp)\nset_target_properties(${tester_target_name} PROPERTIES OUTPUT_NAME tester)\ntarget_link_libraries(${tester_target_name} mg-communication gtest)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target for Stress Tests in CMake\nDESCRIPTION: This snippet defines a custom target named `memgraph__stress`. This target serves as an aggregator for all individual stress tests, ensuring they are built when the `memgraph__stress` target is built.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/stress/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(memgraph__stress)\n```\n\n----------------------------------------\n\nTITLE: Calling CMake Function to Copy Specific Python Files\nDESCRIPTION: This section calls the previously defined `copy_awesome_functions_e2e_python_files` function multiple times, each time with a different Python filename. This will copy the specified Python files (common.py, property_size.py, value_type.py, id.py, to_set.py) to the 'awesome_functions' directory. The function `copy_e2e_files` is called to copy workloads.yaml into the same directory.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/awesome_functions/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_awesome_functions_e2e_python_files(common.py)\ncopy_awesome_functions_e2e_python_files(property_size.py)\ncopy_awesome_functions_e2e_python_files(value_type.py)\ncopy_awesome_functions_e2e_python_files(id.py)\ncopy_awesome_functions_e2e_python_files(to_set.py)\n\ncopy_e2e_files(awesome_functions workloads.yaml)\n```\n\n----------------------------------------\n\nTITLE: Finding Default Query Limits\nDESCRIPTION: This snippet shows how to find the default query limits using `ag` (silver searcher) within the `ldbc_driver` directory. It requires the `ag` command to be installed and configured to search for the string \"DEFAULT_LIMIT\".\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/public_benchmark/ldbc/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd memgraph/tests/public_benchmark/ldbc/ldbc_driver\nag \"DEFAULT_LIMIT\"\n```\n\n----------------------------------------\n\nTITLE: Call CMake Macro with Specific Python Files\nDESCRIPTION: Invokes the `copy_write_procedures_e2e_python_files` macro with specific Python file names (common.py, conftest.py, simple_write.py, and read_subgraph.py). This ensures that these files are copied to the appropriate location for end-to-end testing of write procedures. It effectively populates the test environment with the necessary Python code.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/write_procedures/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncopy_write_procedures_e2e_python_files(common.py)\ncopy_write_procedures_e2e_python_files(conftest.py)\ncopy_write_procedures_e2e_python_files(simple_write.py)\ncopy_write_procedures_e2e_python_files(read_subgraph.py)\n```\n\n----------------------------------------\n\nTITLE: Block Memgraph Telemetry Communication\nDESCRIPTION: This shell command adds an entry to the `/etc/hosts` file to prevent communication with Memgraph's telemetry server. This is necessary to ensure that tests don't produce garbage telemetry data by isolating the memgraph instance.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/telemetry/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n127.0.0.1   telemetry.memgraph.com\n```\n\n----------------------------------------\n\nTITLE: Creating Global Memory Limit Library (C)\nDESCRIPTION: This snippet creates a shared library named `global_memory_limit` from the source file `global_memory_limit.c`. It also sets the include directories for the target to include the project's include directory. No external dependencies are listed.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/memory/procedures/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(global_memory_limit SHARED global_memory_limit.c)\ntarget_include_directories(global_memory_limit PRIVATE ${CMAKE_SOURCE_DIR}/include)\n```\n\n----------------------------------------\n\nTITLE: Copying drop_graph.py for drop_graph E2E testing\nDESCRIPTION: This command calls the defined CMake function `copy_drop_graph_e2e_python_files` to copy the `drop_graph.py` file. This file likely contains the main logic or test scenarios for the graph dropping functionality being tested.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/drop_graph/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncopy_drop_graph_e2e_python_files(drop_graph.py)\n```\n\n----------------------------------------\n\nTITLE: Installing Poetry Package Manager with pip\nDESCRIPTION: This command installs the Poetry package manager using pip. Poetry is used for dependency management and packaging of Python projects.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/release/mgp/instructions.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npip install poetry\n```\n\n----------------------------------------\n\nTITLE: Setting Target Names in CMake\nDESCRIPTION: This CMake code sets the target name for the Memgraph integration SSL project and its associated tester executable. These names are used to identify and build the respective targets during the build process.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/integration/ssl/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(target_name memgraph__integration__ssl)\nset(tester_target_name ${target_name}__tester)\n```\n\n----------------------------------------\n\nTITLE: Copying Specific Python Files for Metadata Queries E2E Tests\nDESCRIPTION: Calls the defined CMake function `copy_metadata_queries_e2e_python_files` to copy the Python files `common.py`, `show_node_labels_info.py`, and `show_edge_types_info.py` into the metadata queries E2E test environment. This prepares these files for integration testing.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/metadata_queries/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_metadata_queries_e2e_python_files(common.py)\ncopy_metadata_queries_e2e_python_files(show_node_labels_info.py)\ncopy_metadata_queries_e2e_python_files(show_edge_types_info.py)\n```\n\n----------------------------------------\n\nTITLE: SAML Assertion XML\nDESCRIPTION: This is the main assertion tag containing both the attribute statement (group membership) and authentication statement (details about login time and the authentication method used).\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/sso/data/okta_response.txt#_snippet_10\n\nLANGUAGE: XML\nCODE:\n```\n<saml2:Assertion>\n <saml2:AttributeStatement>\n    <saml2:Attribute Name=\"group\"\n                     NameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:uri\">\n      <saml2:AttributeValue xsi:type=\"xs:string\">\n        test-group\n      </saml2:AttributeValue>\n    </saml2:Attribute>\n  </saml2:AttributeStatement>\n  <saml2:AuthnStatement AuthnInstant=\"2024-05-16T15:07:34.408Z\" SessionIndex=\"_6b5fb9873fc484844812e0c88e787b05aa677bdb\">\n    <saml2:AuthnContext>\n      <saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport</saml2:AuthnContextClassRef>\n    </saml2:AuthnContext>\n  </saml2:AuthnStatement>\n </saml2:Assertion>\n```\n\n----------------------------------------\n\nTITLE: Setting Toolchain Root\nDESCRIPTION: This snippet sets the MG_TOOLCHAIN_ROOT variable to the value of the MG_TOOLCHAIN_ROOT environment variable.  This is used to help third-party libraries find the correct libraries from the Memgraph toolchain.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/CMakeLists.txt#_snippet_24\n\nLANGUAGE: CMake\nCODE:\n```\nset(MG_TOOLCHAIN_ROOT \"$ENV{MG_TOOLCHAIN_ROOT}\")\n```\n\n----------------------------------------\n\nTITLE: Defining Target Names in CMake\nDESCRIPTION: Defines the target names for the main integration authentication, its checker, and its tester components. These target names are used in subsequent CMake commands to configure the build process.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/integration/auth/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(target_name memgraph__integration__auth)\nset(checker_target_name ${target_name}__checker)\nset(tester_target_name ${target_name}__tester)\n```\n\n----------------------------------------\n\nTITLE: Copying E2E Test Files - Okta Timed Out\nDESCRIPTION: This command copies an end-to-end test file simulating a timed-out response from Okta.  This tests the application's behavior when Okta is unavailable or slow.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/sso/data/CMakeLists.txt#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\ncopy_e2e_files(sso okta_response_timed_out.txt)\n```\n\n----------------------------------------\n\nTITLE: Set Source Files Variable in CMake\nDESCRIPTION: This CMake command sets a variable named `pagerank_online_module_src` to a list of source files: `pagerank_online_module.cpp` and `algorithm_online/pagerank.cpp`. This variable is later used by the `add_query_module` command.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/query_modules/pagerank_module/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(pagerank_online_module_src\n    pagerank_online_module.cpp\n    algorithm_online/pagerank.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Copying YAML workload file\nDESCRIPTION: This line calls the `copy_e2e_files` function to copy a YAML file named `workloads.yaml`, associated with the `show_index_info` feature. This copies the workload configuration needed for the end-to-end testing.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/show_index_info/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_e2e_files(show_index_info workloads.yaml)\n```\n\n----------------------------------------\n\nTITLE: Copying E2E Test Files - Entra ID Response\nDESCRIPTION: This command copies a standard Entra ID response file for end-to-end testing.  It represents a successful authentication and authorization scenario.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/sso/data/CMakeLists.txt#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ncopy_e2e_files(sso entra_id_response.txt)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom CMake Function for Concurrent Tests\nDESCRIPTION: Defines a custom function named `add_concurrent_test` that simplifies the process of adding new concurrent tests. This function takes the source file of the test as input, creates an executable, links it with necessary libraries (gtest, gmock, gtest_main), registers it as a test, and adds it as a dependency to the `memgraph__concurrent` target. It uses `get_filename_component` to extract the executable name from the test file path.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/concurrent/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(add_concurrent_test test_cpp)\n  # get exec name (remove extension from the abs path)\n  get_filename_component(exec_name ${test_cpp} NAME_WE)\n  set(target_name ${test_prefix}${exec_name})\n  add_executable(${target_name} ${test_cpp})\n  # OUTPUT_NAME sets the real name of a target when it is built and can be\n  # used to help create two targets of the same name even though CMake\n  # requires unique logical target names\n  set_target_properties(${target_name} PROPERTIES OUTPUT_NAME ${exec_name})\n  target_link_libraries(${target_name} gtest gmock gtest_main)\n  # register test\n  add_test(${target_name} ${exec_name})\n  add_dependencies(memgraph__concurrent ${target_name})\nendfunction(add_concurrent_test)\n```\n\n----------------------------------------\n\nTITLE: Call CMake Function with Specific Python Files\nDESCRIPTION: These lines call the `copy_show_active_users_info_e2e_python_files` function defined earlier with specific Python file names: `common.py` and `test_show_active_users_info.py`. This copies these files to the appropriate directory for E2E testing of the `show_active_users_info` feature.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/show_active_users_info/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_show_active_users_info_e2e_python_files(common.py)\ncopy_show_active_users_info_e2e_python_files(test_show_active_users_info.py)\n```\n\n----------------------------------------\n\nTITLE: Import Library CMake Function\nDESCRIPTION: Defines a CMake function to import a pre-built library. It adds an imported library target, sets its location, and adds an include directory. It also manages dependencies on external projects. The `type` argument specifies the library type (e.g., STATIC, SHARED).\nSOURCE: https://github.com/memgraph/memgraph/blob/master/libs/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(import_library name type location include_dir)\n  add_library(${name} ${type} IMPORTED GLOBAL)\n  # https://cmake.org/cmake/help/latest/command/function.html#arguments\n  if(ARGN)\n    # Optional argument is the name of the external project that we need to\n    # depend on.\n    list(GET ARGN 0 dependency_name)\n    add_dependencies(${name} ${dependency_name})\n    message(STATUS \"ADDED DEPENDENCY ${name} -> ${dependency_name}\")\n  else()\n    add_dependencies(${name} ${name}-proj)\n    message(STATUS \"ADDED DEPENDENCY ${name} -> ${name}-proj\")\n  endif()\n  set_property(TARGET ${name} PROPERTY IMPORTED_LOCATION ${location})\n  # We need to create the include directory first in order to be able to add it\n  # as an include directory. The header files in the include directory will be\n  # generated later during the build process.\n  file(MAKE_DIRECTORY ${include_dir})\n  target_include_directories(${name} INTERFACE ${include_dir})\nendfunction(import_library)\n```\n\n----------------------------------------\n\nTITLE: Finding gflags Package with CMake\nDESCRIPTION: This CMake snippet uses the `find_package` command to locate the gflags library, which is required as a dependency for the project. The `REQUIRED` keyword ensures that the configuration will fail if the gflags library cannot be found.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/system_replication/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(gflags REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Add Flag Check Executable (CMake)\nDESCRIPTION: Adds an executable target named `${flag_check_target_name}` built from `flag_check.cpp`. It sets the output name to \"flag_check\" and links it with the `mg-communication` library. This facilitates the program's interaction with Memgraph for flag checking purposes.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/integration/flag_check/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${flag_check_target_name} flag_check.cpp)\nset_target_properties(${flag_check_target_name} PROPERTIES OUTPUT_NAME flag_check)\ntarget_link_libraries(${flag_check_target_name} mg-communication)\n```\n\n----------------------------------------\n\nTITLE: Finding External Packages in CMake\nDESCRIPTION: This CMake code uses `find_package` to locate the `fmt` and `gflags` libraries, making them available for linking in the project. The `REQUIRED` keyword ensures that the configuration fails if the packages are not found.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/src/communication/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(fmt REQUIRED)\nfind_package(gflags REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Copy Specific Files for E2E Tests\nDESCRIPTION: This section uses the custom `copy_e2e_python_files` function and the `file(COPY ...)` command to copy specific files needed for the end-to-end tests, such as the pytest runner script and self-signed certificates.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_e2e_python_files(pytest_runner pytest_runner.sh \"\")\ncopy_e2e_python_files(x x.sh \"\")\nfile(COPY ${CMAKE_CURRENT_SOURCE_DIR}/memgraph-selfsigned.crt DESTINATION ${CMAKE_CURRENT_BINARY_DIR})\nfile(COPY ${CMAKE_CURRENT_SOURCE_DIR}/memgraph-selfsigned.key DESTINATION ${CMAKE_CURRENT_BINARY_DIR})\n```\n\n----------------------------------------\n\nTITLE: Calling the function to copy common.py\nDESCRIPTION: Calls the previously defined CMake function `copy_edge_indices_e2e_python_files` to copy the `common.py` file. This file likely contains common utility functions or data structures used in the edge indices E2E tests.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/edge_indices/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncopy_edge_indices_e2e_python_files(common.py)\n```\n\n----------------------------------------\n\nTITLE: CSV Parsing with Default Settings in Python\nDESCRIPTION: This snippet demonstrates the basic CSV parsing logic used by the Memgraph CSV importer, mirroring the functionality of the standard Python CSV parser with default settings. It imports the `csv` module and iterates through rows of a CSV stream, processing each row.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/docs/csv-import-tool/README.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport csv\nfor row in csv.reader(stream, strict=True):\n    # process 'row'\n```\n\n----------------------------------------\n\nTITLE: Running Jepsen Tests in CI (Bash)\nDESCRIPTION: These bash commands are used to execute Jepsen tests within a CI environment. The `run.sh` script is used to initiate different test workloads, including 'bank', 'large', and 'high_availability', while specifying the location of the Memgraph binary, the configuration files for the cluster nodes, and a time limit for the tests.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/jepsen/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd tests/jepsen\n./run.sh test-all-individually --binary ../../build/memgraph --run-args \"--time-limit 120\"\n./run.sh test --binary ../../build/memgraph --run-args \"--workload bank --nodes-config resources/replication-config.edn --time-limit 120\"\n./run.sh test --binary ../../build/memgraph --run-args \"--workload large --nodes-config resources/replication-config.edn --time-limit 120\"\n./run.sh test --binary ../../build/memgraph --run-args \"--workload high_availability --nodes-config resources/cluster.edn --time-limit 120\"\n./run.sh test --binary ../../build/memgraph --run-args \"--workload habank --nodes-config resources/cluster.edn --time-limit 120\"\n```\n\n----------------------------------------\n\nTITLE: Python API test file\nDESCRIPTION: This Python file, `python_api.py`, is part of the memgraph project and likely contains tests related to storage modes.  It is used in end-to-end tests (e2e) to verify the correct behavior of the Python API.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/query_modules_storage_modes/query_modules/CMakeLists.txt#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ncopy_qm_storage_modes_e2e_python_files(python_api.py)\n```\n\n----------------------------------------\n\nTITLE: Adding a Subdirectory in CMake\nDESCRIPTION: This CMake command adds the specified directory as a subdirectory to the current build. This allows CMake to process the CMakeLists.txt file within 'new_test_functions_dir' and include its targets in the build process. The 'new_test_functions_dir' likely contains test functions written in Python.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/python_query_modules_reloading/procedures/new_test_module_utils/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(new_test_functions_dir)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory for Stress Tests (CMake)\nDESCRIPTION: The `add_subdirectory` command is used to add the 'stress' subdirectory to the current CMake project. This allows the CMake build system to include the stress tests as part of the overall build process.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(stress)\n```\n\n----------------------------------------\n\nTITLE: Copy Workloads YAML File\nDESCRIPTION: This line calls the `copy_e2e_files` function (assumed to be defined elsewhere) to copy the 'workloads.yaml' file to the 'query_modules_storage_modes' directory. This YAML file likely contains workload definitions used for end-to-end testing and benchmarking.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/query_modules_storage_modes/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ncopy_e2e_files(query_modules_storage_modes workloads.yaml)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory for Property Based Tests (CMake)\nDESCRIPTION: The `add_subdirectory` command is used to add the 'property_based' subdirectory to the current CMake project. This allows the CMake build system to include the property based tests as part of the overall build process.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(property_based)\n```\n\n----------------------------------------\n\nTITLE: Adding Executable in CMake\nDESCRIPTION: Adds an executable named `${test_prefix}client` built from the `client.cpp` source file. This defines the target that CMake will build.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/mgbench/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${test_prefix}client client.cpp)\n```\n\n----------------------------------------\n\nTITLE: Build ANTLR4 Macro\nDESCRIPTION: Defines a CMake macro `build_antlr4` to build the ANTLR4 library as an external project. It uses `import_external_library` to handle the build process, including setting compiler flags and install commands.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/libs/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nmacro(build_antlr4)\n  import_external_library(antlr4 STATIC\n    ${CMAKE_CURRENT_SOURCE_DIR}/antlr4/runtime/Cpp/lib/libantlr4-runtime.a\n    ${CMAKE_CURRENT_SOURCE_DIR}/antlr4/runtime/Cpp/include/antlr4-runtime\n    SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/antlr4/runtime/Cpp\n    CMAKE_ARGS # http://stackoverflow.com/questions/37096062/get-a-basic-c-program-to-compile-using-clang-on-ubuntu-16/38385967#38385967\n    -DWITH_LIBCXX=OFF # because of debian bug\n    -DCMAKE_SKIP_INSTALL_ALL_DEPENDENCY=true\n    -DCMAKE_CXX_STANDARD=20\n    -DANTLR_BUILD_CPP_TESTS=OFF\n    -DANTLR_BUILD_SHARED=OFF\n    BUILD_COMMAND $(MAKE) antlr4_static\n    INSTALL_COMMAND $(MAKE) install)\nendmacro()\nmg_build_if_needed(build_antlr4 \"antlr4\")\nmg_create_linkable_if_no_cmake(antlr4 STATIC\n  \"${MG_TOOLCHAIN_ROOT}/lib/libantlr4-runtime.a\"\n  \"${MG_TOOLCHAIN_ROOT}/include/antlr4-runtime\"\n)\n```\n\n----------------------------------------\n\nTITLE: Create Executable: query_memory_limit_proc\nDESCRIPTION: Creates an executable named 'memgraph__e2e__memory__limit_query_alloc_proc' from the source file 'query_memory_limit_proc.cpp'. It also links this executable against gflags, mgclient, mg-utils, and mg-io libraries. This tests query memory allocation limits in procedures.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/memory/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(memgraph__e2e__memory__limit_query_alloc_proc query_memory_limit_proc.cpp)\ntarget_link_libraries(memgraph__e2e__memory__limit_query_alloc_proc gflags mgclient mg-utils mg-io)\n```\n\n----------------------------------------\n\nTITLE: Add Executable and Link Libraries for Monitoring Server SSL in CMake\nDESCRIPTION: This CMake command defines an executable target named `memgraph__e2e__monitoring_server_ssl` and links it with the same libraries as the non-SSL version: `mgclient`, `mg-utils`, `nlohmann_json`, `gflags`, and `Boost::headers`. The `monitoring_ssl.cpp` file is the source file for the executable.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/monitoring_server/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(memgraph__e2e__monitoring_server_ssl monitoring_ssl.cpp)\ntarget_link_libraries(memgraph__e2e__monitoring_server_ssl mgclient mg-utils nlohmann_json::nlohmann_json gflags Boost::headers)\n```\n\n----------------------------------------\n\nTITLE: Copy E2E Files for Batched Procedures\nDESCRIPTION: Copies end-to-end test files related to batched procedures. The `copy_e2e_files` function (assumed to be defined elsewhere) copies the `workloads.yaml` file into the `batched_procedures` directory.  This YAML file likely contains workload definitions for the batched procedures E2E tests.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/batched_procedures/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ncopy_e2e_files(batched_procedures workloads.yaml)\n```\n\n----------------------------------------\n\nTITLE: Setting Version Offering\nDESCRIPTION: This snippet determines the version offering based on the MG_ENTERPRISE option. If MG_ENTERPRISE is ON, the offering is set to an empty string. Otherwise, it's set to '--open-source'. This variable is used in the version retrieval script.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nif (MG_ENTERPRISE)\n  set(get_version_offering \"\")\nelse()\n  set(get_version_offering \"--open-source\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Finding gflags Package\nDESCRIPTION: This line uses CMake's `find_package` command to locate the gflags library, which is a required dependency for the project. It will stop the build process if gflags is not found.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/module_file_manager/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(gflags REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Call CMake Function to Copy Specific Python Files\nDESCRIPTION: Calls the previously defined CMake function `copy_batched_procedures_e2e_python_files` for specific Python files: `common.py`, `conftest.py`, and `simple_read.py`.  Each call copies the respective file to the `batched_procedures` directory, preparing them for use in the E2E tests.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/batched_procedures/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncopy_batched_procedures_e2e_python_files(common.py)\ncopy_batched_procedures_e2e_python_files(conftest.py)\ncopy_batched_procedures_e2e_python_files(simple_read.py)\n```\n\n----------------------------------------\n\nTITLE: Copying End-to-End Test Files (CMake)\nDESCRIPTION: This CMake command (presumably a custom function `copy_e2e_files`) copies necessary files for the end-to-end tests. It copies the `server` file and `workloads.yaml` file. The specifics of the copying process depend on the implementation of the custom function.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/server/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_e2e_files(server workloads.yaml)\n```\n\n----------------------------------------\n\nTITLE: Defining Target Names in CMake\nDESCRIPTION: This CMake code snippet defines the target name for the memgraph integration audit and a corresponding tester target. These names are used to reference the targets in subsequent CMake commands.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/integration/audit/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(target_name memgraph__integration__audit)\nset(tester_target_name ${target_name}__tester)\n```\n\n----------------------------------------\n\nTITLE: Example of Table Comparison Issue\nDESCRIPTION: This snippet demonstrates an issue with comparing tables with ordering. The order of rows with the same 'x' value may not be consistent. This example highlights the inconsistency between the expected and actual results when ordering by 'x' in descending order and then comparing 'y' values.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/gql_behave/README.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nORDER BY x DESC\n| x | y |    | x | y |\n| 3 | 2 |    | 3 | 1 |\n| 3 | 1 |    | 3 | 2 |\n| 1 | 4 |    | 1 | 4 |\n```\n\n----------------------------------------\n\nTITLE: Example of Side Effect Tracking Issue\nDESCRIPTION: This snippet demonstrates an issue with tracking side effects during query execution in Memgraph. The example shows adding and removing properties but Memgraph currently doesn't give the list of side effects that happened during query execution, so the verification isn't possible.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/gql_behave/README.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n| +properties | 1 |\n| -properties | 1 |\n```\n\n----------------------------------------\n\nTITLE: Add Subdirectory for Procedures\nDESCRIPTION: This line adds the `procedures` subdirectory to the build process. This likely contains the Python query module procedures that are being tested for reloading.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/python_query_modules_reloading/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(procedures)\n```\n\n----------------------------------------\n\nTITLE: Creating Proc Memory Limit Library (C++)\nDESCRIPTION: This snippet creates a shared library named `proc_memory_limit` from the source file `proc_memory_limit.cpp`. It sets the include directories for the target and links the `mg-utils` library as a dependency.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/memory/procedures/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(proc_memory_limit SHARED proc_memory_limit.cpp)\ntarget_include_directories(proc_memory_limit PRIVATE ${CMAKE_SOURCE_DIR}/include)\ntarget_link_libraries(proc_memory_limit mg-utils)\n```\n\n----------------------------------------\n\nTITLE: Memgraph Deployment Configuration YAML\nDESCRIPTION: This YAML snippet defines the Memgraph deployment configuration, including the path to the deployment script and additional Memgraph arguments. The script is responsible for setting up and cleaning up the Memgraph ecosystem. The arguments override those in the deployment script, allowing for customization of Memgraph's behavior during the stress test.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/stress/README.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmemgraph:\n  deployment:\n    # Specifies the path to the deployment script\n    # Deployment script needs to setup and cleanup the Memgraph ecosystem it is run on.\n    # Script needs to have methods for start, stop and status, since continuous integration\n    # calls the script with these arguments. Optionally, the script can have an additional \n    # argument to pass memgraph flags to the cluster, which will override the existing cluster\n    # flags. Stopping of the cluster needs to guarantee the cleanup of the resources so that \n    # no files or directories are left behind. Check binary_standalone.sh for more info.\n    script: <path to script>\n  args:\n    # Additional memgraph arguments that are passed. Overrides the arguments from the \n    # deployment script.\n    - \"--telemetry-enabled=false\"  # Disables telemetry.\n    - \"--bolt-server-name-for-init=Neo4j/\"  # Specifies the Bolt server name.\n    - \"--log-file=stress_test.log\"  # Log file location.\n    - \"--data-directory=stress_data\"  # Directory for storing data.\n```\n\n----------------------------------------\n\nTITLE: Copy Specific Python Files for E2E Tests\nDESCRIPTION: These lines call the previously defined CMake function to copy the `common.py` and `test_reload_query_module.py` files. These files are likely part of the end-to-end (E2E) tests for the Python query modules reloading functionality.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/python_query_modules_reloading/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_query_modules_reloading_procedures_e2e_python_files(common.py)\ncopy_query_modules_reloading_procedures_e2e_python_files(test_reload_query_module.py)\n```\n\n----------------------------------------\n\nTITLE: Copy workloads YAML configuration file\nDESCRIPTION: Copies the `workloads.yaml` file to the `streams` directory using the `copy_e2e_files` CMake function. This ensures the workload configurations are available for the tests.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/streams/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ncopy_e2e_files(streams workloads.yaml)\n```\n\n----------------------------------------\n\nTITLE: Copying Python Files for E2E Testing\nDESCRIPTION: The `copy_e2e_python_files` function is used to copy Python files necessary for end-to-end (E2E) testing. It likely involves moving or duplicating files such as `infinite_query.py` to a designated directory for testing purposes. The `transaction_queue` parameter might influence how this copying is handled, potentially involving asynchronous operations or queueing of file operations.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/transaction_queue/procedures/CMakeLists.txt#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ncopy_e2e_python_files(transaction_queue infinite_query.py)\n```\n\n----------------------------------------\n\nTITLE: Add transformations subdirectory\nDESCRIPTION: Adds the 'transformations' subdirectory to the current CMake project. This allows building and including the transformations module in the project.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/streams/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(transformations)\n```\n\n----------------------------------------\n\nTITLE: Adding a Subdirectory for Procedures\nDESCRIPTION: The `add_subdirectory` command is used to include the 'procedures' subdirectory in the CMake build process. This indicates that the project contains procedures, likely written in a language like Python or C++, that need to be compiled or otherwise made available during the build and testing phases.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/set_properties/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(procedures)\n```\n\n----------------------------------------\n\nTITLE: Copying Configuration Files with CMake\nDESCRIPTION: This CMake command copies the workloads.yaml file, which likely contains configuration data for the durability tests, into the build directory's durability folder.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/durability/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ncopy_e2e_files(durability workloads.yaml)\n```\n\n----------------------------------------\n\nTITLE: Copy Python E2E Files for Load CSV\nDESCRIPTION: This CMake function, `copy_load_csv_e2e_python_files`, copies Python files used in end-to-end tests for the load_csv functionality. It calls the `copy_e2e_python_files` function, passing in `load_csv` and the specified file name. It takes FILE_NAME as input, which represents the name of the Python file to copy.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/load_csv/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(copy_load_csv_e2e_python_files FILE_NAME)\n    copy_e2e_python_files(load_csv ${FILE_NAME})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: SAML 2.0 Response Structure\nDESCRIPTION: This XML snippet outlines the structure of a SAML 2.0 Response. It specifies the namespaces, Destination, ID, InResponseTo, IssueInstant, and Version attributes. The Response contains an Issuer, Signature, Status, and an Assertion.\nSOURCE: https://github.com/memgraph/memgraph/blob/master/tests/e2e/sso/data/okta_response_timed_out.txt#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<saml2p:Response xmlns:saml2p=\"urn:oasis:names:tc:SAML:2.0:protocol\" Destination=\"http://localhost:3000/auth/providers/saml-okta/callback\" ID=\"id15166411057654531904579388\" InResponseTo=\"_6b5fb9873fc484844812e0c88e787b05aa677bdb\" IssueInstant=\"2024-05-16T15:18:42.988Z\" Version=\"2.0\">\n  <saml2:Issuer xmlns:saml2=\"urn:oasis:names:tc:SAML:2.0:assertion\" Format=\"urn:oasis:names:tc:SAML:2.0:nameid-format:entity\">http://www.okta.com/exke6ubrkbz9TG2iB697</saml2:Issuer>\n  <ds:Signature xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\">\n    <ds:SignedInfo>\n      <ds:CanonicalizationMethod Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\" />\n      <ds:SignatureMethod Algorithm=\"http://www.w3.org/2001/04/xmldsig-more#rsa-sha256\" />\n      <ds:Reference URI=\"#id15166411057654531904579388\">\n        <ds:Transforms>\n          <ds:Transform Algorithm=\"http://www.w3.org/2000/09/xmldsig#enveloped-signature\" />\n          <ds:Transform Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\" />\n        </ds:Transforms>\n        <ds:DigestMethod Algorithm=\"http://www.w3.org/2001/04/xmlenc#sha256\" />\n        <ds:DigestValue>q2qce2jptYuNcDuUkwiADrp+awf/geEJ1LPur3gaNWI=</ds:DigestValue>\n      </ds:Reference>\n    </ds:SignedInfo>\n    <ds:SignatureValue>am/v410f2rRwVDnB+kMdqZNn1F+2uoANNPhrOkPijQaMGYiArjkH3yLkRTWiZprxZevkIcGpDRp1R3XgXBjt52rBIIN0zl+fCWDcPIIGpnrT84Aya54l7CON5dI/c8R+iK+PUjOsTyv05Q2gIvvhmCRPn+8tLDWLoIHm4cs4iLAw606u0hs2BApFKf9ewgw2pVQyYAhte0ovVDI3As+VwLVNE8I4wFxUBjQYTGH8paMi9W5Zt8D+rlcFgar9oB0E+14o5d4JfMbpplNC0zKf1QhrqbSHQYX2siSNmqgZ/eEda2cRbIIY0aC41zcgZttSsRzokIBXJ7W7feEMmEaMCs3syWEg==</ds:SignatureValue>\n    <ds:KeyInfo>\n      <ds:X509Data>\n        <ds:X509Certificate>MIIDqjCCApKgAwIBAgIGAY9xcy5rMA0GCSqGSIb3DQEBCwUAMIGVMQswCQYDVQQGEwJVUzETMBEGC\nA1UECAwKQ2FsaWZvcm5pYQ8xDqAMBgorBgEEAYI3FQIDMFUxTkVUTE1Ba0GA1UEChwCVVZNeEZa\nZWFsbmluZS5jb20xGDAWBgNVBAsTD0ludGVybmV0IFdpZGdldHMxEzARBgNVBAcTCFNhbnRhIEFu\nbmExFzAVBgNVBAMTDHZ6LW9rdGEub2t0YS5jb20wHhcNMjQwMjE3MTYwMDI3WhcNMjUwMjE3MTYw\nMDI3WjCBlTELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWEPMRwwGgYDVQQKDBNVVk14\nRmFlYWxubGluZS5jb20xGDAWBgNVBAsTD0ludGVybmV0IFdpZGdldHMxEzARBgNVBAcTCFNhbnRh\nQW5uMRcWFAYDVQQDEw12ei1va3RhLm9rdGEuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIB\nCgKCAQEAlJ8TsGPqN1HvQIWjeCuZliRHCMImjYxwLEwiiGbcz65NhDARsg+W1NzLL14DRzhgv81v\nU7GD8jtmQGHD5h53R/SMoQX4ZvNZN04bAHEiMqnWvmrfs02pVyoJoI/vi3lvte6utF6kVSRc9V\no68PN7J42YDHDoDVXkDKtX+le6oLWNnebKP7uh0MuA/F3SJWSbjoFDHnl361qBDzZpPA37U5n+CbXQ\n+HmFjN/Wfa+kCoSJlhCyl8rbZ2YbiG6h8xmfZrTlAS9xfi5x4FrkVR9VFOycmYnf7D9656QC1U9\nz8P723mhi/I68jF9lrC7MYKuz05d2zzbgu/AFmSO1Q/fWQIDAQABMA0GCSqGSIb3DQEBCwUAA4IB\nAQEA1MO7p7KYxG4pqmGSGvXYYgC8icFydz4nMAABqVQahEnQVEiplW8EtW1EgD5A9+P5ZkbpdQyF\nMsiCBpPKzHUdcVhzueHD2wDSnONwMjDXTukzGnocyxiaduymd4Q0rFYkINASpWJoIjHl04y6FtsyBB\n4M0/Qw+3SQIVtbPk5hPjhClyPLjK/YQU7SFpC+1mRacChHPl87W+YD20vGjSKvNbgbOIuQrT6wG\nrkbQKmW3icDh+pdn7/20ZguwPX/CmM2OgGntQYc2LY7ARn4vuLUgRb1SwOuBCqOH45h+XZOpydS5\nMyiMIGCoxkvphJD/bSAoGNffvZ0GOKAbJ7z/os5</ds:X509Certificate>\n      </ds:X509Data>\n    </ds:KeyInfo>\n  </ds:Signature>\n  <saml2p:Status>\n    <saml2p:StatusCode Value=\"urn:oasis:names:tc:SAML:2.0:status:Success\" />\n  </saml2p:Status>\n  <saml2:Assertion xmlns:saml2=\"urn:oasis:names:tc:SAML:2.0:assertion\" ID=\"id15166411059542251802226451\" IssueInstant=\"2024-05-16T15:18:42.988Z\" Version=\"2.0\">\n    <saml2:Issuer Format=\"urn:oasis:names:tc:SAML:2.0:nameid-format:entity\">http://www.okta.com/exke6ubrkbz9TG2iB697</saml2:Issuer>\n    <ds:Signature xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\">\n      <ds:SignedInfo>\n        <ds:CanonicalizationMethod Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\" />\n        <ds:SignatureMethod Algorithm=\"http://www.w3.org/2001/04/xmldsig-more#rsa-sha256\" />\n        <ds:Reference URI=\"#id15166411059542251802226451\">\n          <ds:Transforms>\n            <ds:Transform Algorithm=\"http://www.w3.org/2000/09/xmldsig#enveloped-signature\" />\n            <ds:Transform Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\" />\n          </ds:Transforms>\n          <ds:DigestMethod Algorithm=\"http://www.w3.org/2001/04/xmlenc#sha256\" />\n          <ds:DigestValue>ZdbdmgMMmJoyOKYbsuhKLkZfpIaOgkCo2hFgeY+3wXE=</ds:DigestValue>\n        </ds:Reference>\n      </ds:SignedInfo>\n      <ds:SignatureValue>EowcGlsVY+gJwXC03dUw/1gewEAyWmFEa4VCmE9yVRFWdd7wsCFIK1ypXCS7S4HEB4AKS3ib6SgvU1sMbbE/DVWtA5GdxA/wMrRC3dkfmx/Fue6WCS8INpSS5BVLZj1DoR5uCG4J8vtwdTdTIJibSTR840M/pfkdQcDvTVxhIexMFceSq4Gn1ylPhyFcp8K611zovAAucWEp4tmUrswjVWL6eEm/MkuBLp5GUC6JPHMAUrV3/D+0lDcKDFOf1s9B5cQNhBkrCGAjPQhMzOaEDnADtzCot05WsxCjfUvTRpsSuTIDJPRLrv6ZEXdXc0r+yf6lfHI84byqGiErabI7L4+p5eA==</ds:SignatureValue>\n      <ds:KeyInfo>\n        <ds:X509Data>\n          <ds:X509Certificate>MIIDqjCCApKgAwIBAgIGAY9xcy5rMA0GCSqGSIb3DQEBCwUAMIGVMQswCQYDVQQGEwJVUzETMBEGC\nA1UECAwKQ2FsaWZvcm5pYQ8xDqAMBgorBgEEAYI3FQIDMFUxTkVUTE1Ba0GA1UEChwCVVZNeEZa\nZWFsbmluZS5jb20xGDAWBgNVBAsTD0ludGVybmV0IFdpZGdldHMxEzARBgNVBAcTCFNhbnRhIEFu\nbmExFzAVBgNVBAMTDHZ6LW9rdGEub2t0YS5jb20wHhcNMjQwMjE3MTYwMDI3WhcNMjUwMjE3MTYw\nMDI3WjCBlTELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWEPMRwwGgYDVQQKDBNVVk14\nRmFlYWxubGluZS5jb20xGDAWBgNVBAsTD0ludGVybmV0IFdpZGdldHMxEzARBgNVBAcTCFNhbnRh\nQW5uMRcWFAYDVQQDEw12ei1va3RhLm9rdGEuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIB\nCgKCAQEAlJ8TsGPqN1HvQIWjeCuZliRHCMImjYxwLEwiiGbcz65NhDARsg+W1NzLL14DRzhgv81v\nU7GD8jtmQGHD5h53R/SMoQX4ZvNZN04bAHEiMqnWvmrfs02pVyoJoI/vi3lvte6utF6kVSRc9V\no68PN7J42YDHDoDVXkDKtX+le6oLWNnebKP7uh0MuA/F3SJWSbjoFDHnl361qBDzZpPA37U5n+CbXQ\n+HmFjN/Wfa+kCoSJlhCyl8rbZ2YbiG6h8xmfZrTlAS9xfi5x4FrkVR9VFOycmYnf7D9656QC1U9\nz8P723mhi/I68jF9lrC7MYKuz05d2zzbgu/AFmSO1Q/fWQIDAQABMA0GCSqGSIb3DQEBCwUAA4IB\nAQEA1MO7p7KYxG4pqmGSGvXYYgC8icFydz4nMAABqVQahEnQVEiplW8EtW1EgD5A9+P5ZkbpdQyF\nMsiCBpPKzHUdcVhzueHD2wDSnONwMjDXTukzGnocyxiaduymd4Q0rFYkINASpWJoIjHl04y6FtsyBB\n4M0/Qw+3SQIVtbPk5hPjhClyPLjK/YQU7SFpC+1mRacChHPl87W+YD20vGjSKvNbgbOIuQrT6wG\nrkbQKmW3icDh+pdn7/20ZguwPX/CmM2OgGntQYc2LY7ARn4vuLUgRb1SwOuBCqOH45h+XZOpydS5\nMyiMIGCoxkvphJD/bSAoGNffvZ0GOKAbJ7z/os5</ds:X509Certificate>\n        </ds:X509Data>\n      </ds:KeyInfo>\n    </ds:Signature>\n    <saml2:Subject>\n      <saml2:NameID Format=\"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\">Anthony</saml2:NameID>\n      <saml2:SubjectConfirmation Method=\"urn:oasis:names:tc:SAML:2.0:cm:bearer\">\n        <saml2:SubjectConfirmationData InResponseTo=\"_6b5fb9873fc484844812e0c88e787b05aa677bdb\" NotOnOrAfter=\"2024-05-16T15:23:42.988Z\" Recipient=\"http://localhost:3000/auth/providers/saml-okta/callback\" />\n      </saml2:SubjectConfirmation>\n    </saml2:Subject>\n    <saml2:Conditions NotBefore=\"2024-05-16T15:13:42.988Z\" NotOnOrAfter=\"2024-05-16T15:23:42.988Z\">\n      <saml2:AudienceRestriction>\n        <saml2:Audience>myApplication</saml2:Audience>\n      </saml2:AudienceRestriction>\n    </saml2:Conditions>\n    <saml2:AuthnStatement AuthnInstant=\"2024-05-16T15:07:34.408Z\" SessionIndex=\"_6b5fb9873fc484844812e0c88e787b05aa677bdb\">\n      <saml2:AuthnContext>\n        <saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport</saml2:AuthnContextClassRef>\n      </saml2:AuthnContext>\n    </saml2:AuthnStatement>\n  </saml2:Assertion>\n</saml2p:Response>\n```"
  }
]