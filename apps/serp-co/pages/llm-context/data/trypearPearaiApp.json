[
  {
    "owner": "trypear",
    "repo": "pearai-app",
    "content": "TITLE: Environment Setup Scripts for macOS/Linux\nDESCRIPTION: Bash commands for setting up the development environment on macOS and Linux systems. The first script is for initial setup, while the second is for rebuilding the app after setup.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/pearai/setup-environment.sh\n```\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/pearai/install-dependencies.sh\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for CSS Language Features Extension\nDESCRIPTION: Command to install all necessary dependencies for the CSS Language Features extension, including the client, server, and development tools.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/css-language-features/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Snippet Syntax Grammar Definition in EBNF\nDESCRIPTION: Formal Extended Backus-Naur Form (EBNF) grammar definition for snippet syntax. This defines the complete syntax rules for snippets including tabstops, placeholders, choices, variables, and transformations.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/src/vs/editor/contrib/snippet/browser/snippet.md#2025-04-23_snippet_2\n\nLANGUAGE: ebnf\nCODE:\n```\nany         ::= tabstop | placeholder | choice | variable | text\ntabstop     ::= '$' int\n                | '${' int '}'\n                | '${' int  transform '}'\nplaceholder ::= '${' int ':' any '}'\nchoice      ::= '${' int '|' text (',' text)* '|}'\nvariable    ::= '$' var | '${' var }'\n                | '${' var ':' any '}'\n                | '${' var transform '}'\ntransform   ::= '/' regex '/' (format | text)+ '/' options\nformat      ::= '$' int | '${' int '}'\n                | '${' int ':' '/upcase' | '/downcase' | '/capitalize' | '/camelcase' | '/pascalcase' '}'\n                | '${' int ':+' if '}'\n                | '${' int ':?' if ':' else '}'\n                | '${' int ':-' else '}' | '${' int ':' else '}'\nregex       ::= JavaScript Regular Expression value (ctor-string)\noptions     ::= JavaScript Regular Expression option (ctor-options)\nvar         ::= [_a-zA-Z] [_a-zA-Z0-9]*\nint         ::= [0-9]+\ntext        ::= .*\n```\n\n----------------------------------------\n\nTITLE: Running VS Code Smoke Tests for Various Scenarios\nDESCRIPTION: This snippet demonstrates how to run smoke tests for VS Code in different environments, including development builds, production builds, and web builds. It covers Electron and Web versions, as well as remote testing scenarios.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/test/smoke/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Build extensions in the VS Code repo (if needed)\nnpm i && npm run compile\n\n# Dev (Electron)\nnpm run smoketest\n\n# Dev (Web - Must be run on distro)\nnpm run smoketest -- --web --browser [chromium|webkit]\n\n# Build (Electron)\nnpm run smoketest -- --build <path to latest version>\nexample: npm run smoketest -- --build /Applications/Visual\\ Studio\\ Code\\ -\\ Insiders.app\n\n# Build (Web - read instructions below)\nnpm run smoketest -- --build <path to server web build (ends in -web)> --web --browser [chromium|webkit]\n\n# Remote (Electron)\nnpm run smoketest -- --build <path to latest version> --remote\n```\n\n----------------------------------------\n\nTITLE: Running PearAI App Development Build\nDESCRIPTION: Commands for compiling and running the PearAI app in development mode. The first command starts the compiler in watch mode, and the second launches the application.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn watch\n```\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/code.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Authentication in VS Code\nDESCRIPTION: This snippet shows the setting to control GitHub authentication for built-in git commands in VS Code. It demonstrates how to reference the command that manages this feature.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/github/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\ngithub.gitAuthentication\n```\n\n----------------------------------------\n\nTITLE: Running Tests and Linting\nDESCRIPTION: Commands for running automated tests and linting the codebase. These help ensure code quality and functionality during development.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/CONTRIBUTING.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/test.sh\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn eslint\n```\n\n----------------------------------------\n\nTITLE: Enabling API Proposals in package.json\nDESCRIPTION: Add the name of the desired API proposal to the 'enabledApiProposals' property in the extension's package.json file.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/src/vscode-dts/README.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"enabledApiProposals\": [\"proposalName\"]\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for VS Code TypeScript Server\nDESCRIPTION: This command installs the necessary dependencies for the VS Code TypeScript server setup.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/typescript-language-features/web/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Accessing Git API in TypeScript Extension for VS Code\nDESCRIPTION: This code demonstrates how to access the Git extension API from another VS Code extension using TypeScript. It shows how to get the Git extension and initialize its API with a specified version.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/git/README.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst gitExtension = vscode.extensions.getExtension<GitExtension>('vscode.git').exports;\nconst git = gitExtension.getAPI(1);\n```\n\n----------------------------------------\n\nTITLE: Cloning PearAI Repository in Bash\nDESCRIPTION: Command for cloning the forked PearAI repository to your local machine. This is the first step in the contributor workflow after creating a fork on GitHub.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/<your-username>/pearai-app.git\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Compiler Options for PearAI React Application\nDESCRIPTION: This TypeScript configuration sets up strict type checking, targets ES6, uses React JSX, and enables various type checking features. It also specifies module resolution strategies and includes paths for type definitions.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/src/vs/workbench/services/search/test/node/fixtures2/36438/modules/do-not-find.txt#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"target\": \"es6\",\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"allowJs\": true,\n    \"skipLibCheck\": true,\n    \"strict\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"noEmit\": true,\n    \"esModuleInterop\": true,\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"node\",\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"jsx\": \"preserve\",\n    \"incremental\": true,\n    \"plugins\": [\n      {\n        \"name\": \"next\"\n      }\n    ],\n    \"paths\": {\n      \"@/*\": [\"./src/*\"]\n    }\n  },\n  \"include\": [\"next-env.d.ts\", \"**/*.ts\", \"**/*.tsx\", \".next/types/**/*.ts\"],\n  \"exclude\": [\"node_modules\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Repository with Submodules\nDESCRIPTION: Command to clone the repository and initialize its submodules recursively. This ensures all dependent repositories are properly configured.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/cli/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit submodule update --init --recursive\n```\n\n----------------------------------------\n\nTITLE: Updating Seti Icons in Visual Studio Code\nDESCRIPTION: Script to update the Seti icon theme and font in Visual Studio Code based on the latest changes from the seti-ui project. It requires both repositories to be cloned in the same parent folder.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/theme-seti/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- have the main branches of `https://github.com/jesseweed/seti-ui` and `https://github.com/microsoft/vscode` cloned in the same parent folder\n- in the `seti-ui` folder, run `npm install` and `npm run prepublishOnly`. This will generate updated icons and fonts.\n- in the `vscode/extensions/theme-seti` folder run  `npm run update`. This will launch the [icon theme update script](build/update-icon-theme.js) that updates the theme as well as the font based on content in `seti-ui`.\n- to test the icon theme, look at the icon preview as described above.\n- when done, create a PR with the changes in https://github.com/microsoft/vscode.\nAdd a screenshot of the preview page to accompany it.\n```\n\n----------------------------------------\n\nTITLE: Extending Line Ranges Based on Similarity in JavaScript\nDESCRIPTION: This code extends line ranges by checking for similar lines below the current range boundaries. It iterates downward until it encounters dissimilar lines, lines already in tracking sets, or exceeds the available line count. Then it updates the original and modified line sets with the extended ranges.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/src/vs/editor/test/node/diffing/fixtures/shifting-twice/1.txt#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfor (extendToBottom = 0; extendToBottom < linesBelow; extendToBottom++) {\n\tconst origLine = move.original.endLineNumberExclusive + extendToBottom;\n\tconst modLine = move.modified.endLineNumberExclusive + extendToBottom;\n\tif (origLine > originalLines.length || modLine > modifiedLines.length) {\n\t\tbreak;\n\t}\n\tif (modifiedSet.contains(modLine) || originalSet.contains(origLine)) {\n\t\tbreak;\n\t}\n\tif (!areLinesSimilar(originalLines[origLine - 1], modifiedLines[modLine - 1], timeout)) {\n\t\tbreak;\n\t}\n}\n\nif (extendToBottom > 0) {\n\toriginalSet.addRange(new LineRange(move.original.endLineNumberExclusive, move.original.endLineNumberExclusive + extendToBottom));\n\tmodifiedSet.addRange(new LineRange(move.modified.endLineNumberExclusive, move.modified.endLineNumberExclusive + extendToBottom));\n}\n```\n\n----------------------------------------\n\nTITLE: PearAI Roo Code Development Commands\nDESCRIPTION: npm commands for setting up and developing the PearAI Roo Code extension. These commands install dependencies, watch for changes, and start the development server.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/CONTRIBUTING.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run install:all\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run watch\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Building PearAI App Package Command\nDESCRIPTION: Command to build the PearAI application for a specific platform using gulp tasks. Supports multiple platforms including win32, darwin, and linux with different architectures.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/CONTRIBUTING.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nyarn gulp vscode-[platform]\n```\n\n----------------------------------------\n\nTITLE: Installing OpenSSL on Windows using vcpkg\nDESCRIPTION: Command to install OpenSSL for Windows using vcpkg package manager. This installs the static MD version specifically for x64 architecture, which is required for successful compilation of the CLI on Windows.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/cli/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nvcpkg install openssl:x64-windows-static-md\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for PearAI Application in JavaScript\nDESCRIPTION: This code snippet sets up environment variables for the PearAI application, including server port, database connection details, and various API keys. It uses the dotenv package to load variables from a .env file.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/github/testWorkspace/docs/PULL_REQUEST_TEMPLATE/b.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport dotenv from 'dotenv';\n\ndotenv.config();\n\nexport const PORT = process.env.PORT || 3000;\nexport const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/pearai';\nexport const JWT_SECRET = process.env.JWT_SECRET || 'your_jwt_secret';\nexport const OPENAI_API_KEY = process.env.OPENAI_API_KEY;\nexport const GOOGLE_CLIENT_ID = process.env.GOOGLE_CLIENT_ID;\nexport const GOOGLE_CLIENT_SECRET = process.env.GOOGLE_CLIENT_SECRET;\nexport const GITHUB_CLIENT_ID = process.env.GITHUB_CLIENT_ID;\nexport const GITHUB_CLIENT_SECRET = process.env.GITHUB_CLIENT_SECRET;\nexport const PINECONE_API_KEY = process.env.PINECONE_API_KEY;\nexport const PINECONE_ENVIRONMENT = process.env.PINECONE_ENVIRONMENT;\nexport const STRIPE_SECRET_KEY = process.env.STRIPE_SECRET_KEY;\nexport const STRIPE_WEBHOOK_SECRET = process.env.STRIPE_WEBHOOK_SECRET;\n```\n\n----------------------------------------\n\nTITLE: Structuring VSCode Test Documentation in Markdown\nDESCRIPTION: This Markdown snippet outlines the structure of the VSCode test documentation, listing the different types of tests available and providing links to their respective README files.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/test/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# VSCode Tests\n\n## Contents\n\nThis folder contains the various test runners for VSCode. Please refer to the documentation within for how to run them:\n\n* `unit`: our suite of unit tests ([README](unit/README.md))\n* `integration`: our suite of API tests ([README](integration/browser/README.md))\n* `smoke`: our suite of automated UI tests ([README](smoke/README.md))\n```\n\n----------------------------------------\n\nTITLE: Accessing Git Base Extension API in TypeScript\nDESCRIPTION: Code snippet demonstrating how to obtain and initialize the Git base extension API in a VS Code extension. This requires copying the git-base.d.ts type definitions and including them in your extension's compilation.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/git-base/README.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst gitBaseExtension = vscode.extensions.getExtension<GitBaseExtension>('vscode.git-base').exports;\nconst git = gitBaseExtension.getAPI(1);\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS with Custom Theme and Plugins for Next.js\nDESCRIPTION: This code exports a Tailwind CSS configuration object for a Next.js application. It defines custom color schemes, font families, and screen sizes in the theme section. The configuration also includes Tailwind plugins for forms and aspect ratio.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/src/vs/workbench/services/textfile/test/node/encoding/fixtures/empty.txt#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    './pages/**/*.{js,ts,jsx,tsx,mdx}',\n    './components/**/*.{js,ts,jsx,tsx,mdx}',\n    './app/**/*.{js,ts,jsx,tsx,mdx}',\n  ],\n  theme: {\n    extend: {\n      backgroundImage: {\n        'gradient-radial': 'radial-gradient(var(--tw-gradient-stops))',\n        'gradient-conic':\n          'conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))',\n      },\n      colors: {\n        primary: '#3490dc',\n        secondary: '#ffed4a',\n        danger: '#e3342f',\n      },\n      fontFamily: {\n        sans: ['Graphik', 'sans-serif'],\n        serif: ['Merriweather', 'serif'],\n      },\n      screens: {\n        'sm': '640px',\n        'md': '768px',\n        'lg': '1024px',\n        'xl': '1280px',\n        '2xl': '1536px',\n      }\n    },\n  },\n  plugins: [\n    require('@tailwindcss/forms'),\n    require('@tailwindcss/aspect-ratio'),\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Launching Browser-based VS Code with TypeScript Server\nDESCRIPTION: This command launches the browser-based VS Code instance with the TypeScript server. It enables shared array buffers for proper functionality.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/typescript-language-features/web/README.md#2025-04-23_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnode <root>/scripts/code-web.js --coi\n```\n\n----------------------------------------\n\nTITLE: Running PearAI App on Windows\nDESCRIPTION: Commands for running the PearAI app on Windows, including the first-time installation using batch file and subsequent runs using Git Bash.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/CONTRIBUTING.md#2025-04-23_snippet_4\n\nLANGUAGE: bat\nCODE:\n```\n.\\scripts\\code.bat\n```\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/code.sh\n```\n\n----------------------------------------\n\nTITLE: Environment Setup Scripts for Windows\nDESCRIPTION: PowerShell and batch commands for setting up the development environment on Windows systems. The first script is for initial setup, while the second is for installing dependencies.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: bat\nCODE:\n```\n.\\scripts\\pearai/setup-environment.ps1\n```\n\nLANGUAGE: bat\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Language Server Settings\nDESCRIPTION: Example configuration object showing available settings for the JSON language server including HTTP proxy settings, formatting options, and schema associations.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/json-language-features/server/README.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"http\": {\n        \"proxy\": \"\",\n        \"proxyStrictSSL\": true\n    },\n    \"json\": {\n        \"format\": {\n            \"enable\": true\n        },\n        \"schemas\": [\n            {\n                \"fileMatch\": [\n                    \"foo.json\",\n                    \"*.superfoo.json\"\n                ],\n                \"url\": \"http://json.schemastore.org/foo\",\n                \"schema\": {\n                    \"type\": \"array\"\n                }\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running VS Code Smoke Tests for a Specific Release\nDESCRIPTION: This snippet shows how to run smoke tests for a specific VS Code release version. It includes steps for checking out the correct version of the smoke tests and setting up the necessary dependencies.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/test/smoke/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit fetch\ngit checkout release/1.22\nnpm i && npm run compile\ncd test/smoke\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Running VSCode Integration Tests in Browser\nDESCRIPTION: This command runs the integration tests in a specified browser (chromium or webkit). The --debug flag can be added to see a browser window with the tests running.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/test/integration/browser/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nscripts/test-web-integration.[sh|bat] --browser [chromium|webkit] [--debug]\n```\n\n----------------------------------------\n\nTITLE: MacOS Extension Integration Commands\nDESCRIPTION: Series of commands for integrating the PearAI extension into the packaged application on MacOS, including copying extension files and cleaning up old installations.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/CONTRIBUTING.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncp -r ~/.vscode/extensions/pearai.pearai-{PEARAI_VERSION} {PATH_TO_PearAI.app}/Contents/Resources/app/extension\nrm -rf {PATH_TO_PearAI.app}/Contents/Resources/app/extensions/pearai-submodule\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js Dependencies for Monaco Test (Shell)\nDESCRIPTION: This command installs the necessary Node.js package dependencies defined in the `package.json` file located within the `$test/monaco` directory. It's the initial setup step required before bundling or running tests. Requires Node.js and npm to be installed.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/test/monaco/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$test/monaco> npm i\n```\n\n----------------------------------------\n\nTITLE: Running VSCode Integration Tests in Electron\nDESCRIPTION: This command runs the integration tests inside an Electron instance. It uses a shell script that may vary depending on the operating system (sh for Unix-like systems, bat for Windows).\nSOURCE: https://github.com/trypear/pearai-app/blob/main/test/integration/browser/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nscripts/test-integration.[sh|bat]\n```\n\n----------------------------------------\n\nTITLE: Downloading d.ts Files for API Proposals\nDESCRIPTION: Run this command to download the necessary d.ts files for the enabled API proposals into your project.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/src/vscode-dts/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx vscode-dts dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Pearai Application\nDESCRIPTION: This configuration sets up environment variables for the Pearai application, including API keys for OpenAI, Anthropic, and Cohere, as well as endpoint URLs for various services. It also configures database connection details and other application-specific settings.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/src/vs/workbench/services/search/test/node/fixtures2/36438/more/modules/find.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nOPENAI_API_KEY=\nANTHROPIC_API_KEY=\nCOHERE_API_KEY=\n\nOPENAI_API_BASE=https://api.openai.com/v1\nANTHROPIC_API_BASE=https://api.anthropic.com\nCOHERE_API_BASE=https://api.cohere.ai/v1\n\nPEARAI_API_BASE=http://localhost:8000\nPEARAI_API_KEY=\n\nDATABASE_URL=postgresql://postgres:postgres@localhost:5432/pearai\n\nALGOLIA_APP_ID=\nALGOLIA_API_KEY=\nALGOLIA_INDEX_NAME=\n\nAWS_ACCESS_KEY_ID=\nAWS_SECRET_ACCESS_KEY=\nAWS_REGION=us-east-1\n\nS3_BUCKET_NAME=\n\nREDIS_URL=redis://localhost:6379\n\nSENTRY_DSN=\n\nSTRIPE_SECRET_KEY=\nSTRIPE_WEBHOOK_SECRET=\n\nNEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=\n```\n\n----------------------------------------\n\nTITLE: Compiling the CSS Language Features Extension\nDESCRIPTION: Command to compile both the client and server components of the CSS Language Features extension.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/css-language-features/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run compile\n```\n\n----------------------------------------\n\nTITLE: Running Local Browser Tests (Shell/npm)\nDESCRIPTION: Runs the browser-specific unit tests locally against Chromium and WebKit using the `npm run test-browser` command. Useful for testing browser-specific issues on a development machine.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/test/unit/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm run test-browser -- --browser chromium --browser webkit\n```\n\n----------------------------------------\n\nTITLE: Starting JSON Language Server with Different Communication Channels\nDESCRIPTION: These commands demonstrate how to start the JSON language server using different communication channels: Node IPC, stdio, or a specific socket port.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/json-language-features/server/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nvscode-json-languageserver --node-ipc\nvscode-json-languageserver --stdio\nvscode-json-languageserver --socket=<port>\n```\n\n----------------------------------------\n\nTITLE: Setting Up HTML Language Service Development\nDESCRIPTION: Commands for linking and testing a development version of vscode-html-languageservice\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/html-language-features/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm i\nnpm link\nnpm link vscode-html-languageservice\n```\n\n----------------------------------------\n\nTITLE: Debugging Specific Electron Unit Tests (Shell)\nDESCRIPTION: Runs specific unit tests matching the glob pattern `**/extHost*.test.js` within the Electron environment and enables debugging. The `--debug` flag opens an Electron window with developer tools.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/test/unit/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./scripts/test.sh --debug --glob **/extHost*.test.js\n```\n\n----------------------------------------\n\nTITLE: Adding Views to SplitView in TypeScript\nDESCRIPTION: This method adds a new view to a split view component. It handles DOM manipulation, view size calculations based on different sizing strategies, and creates appropriate view items. The method supports various sizing options including numeric sizes, split sizing, distribution, and invisibility.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/src/vs/editor/test/node/diffing/fixtures/issue-185779/2.txt#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nprivate doAddView(view: IView<TLayoutContext>, size: number | Sizing, index = this.viewItems.length, skipLayout?: boolean): void {\n\t\tif (this.state !== State.Idle) {\n\t\t\tthrow new Error('Cant modify splitview');\n\t\t}\n\n\t\tthis.state = State.Busy;\n\n\t\t// Add view\n\t\tconst container = $('.split-view-view');\n\n\t\tif (index === this.viewItems.length) {\n\t\t\tthis.viewContainer.appendChild(container);\n\t\t} else {\n\t\t\tthis.viewContainer.insertBefore(container, this.viewContainer.children.item(index));\n\t\t}\n\n\t\tconst onChangeDisposable = view.onDidChange(size => this.onViewChange(item, size));\n\t\tconst containerDisposable = toDisposable(() => this.viewContainer.removeChild(container));\n\t\tconst disposable = combinedDisposable(onChangeDisposable, containerDisposable);\n\n\t\tlet viewSize: ViewItemSize;\n\n\t\tif (typeof size === 'number') {\n\t\t\tviewSize = size;\n\t\t} else {\n\t\t\tif (size.type === 'auto') {\n\t\t\t\tif (this.areViewsDistributed()) {\n\t\t\t\t\tsize = { type: 'distribute' };\n\t\t\t\t} else {\n\t\t\t\t\tsize = { type: 'split', index: size.index };\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (size.type === 'split') {\n\t\t\t\tviewSize = this.getViewSize(size.index) / 2;\n\t\t\t} else if (size.type === 'invisible') {\n\t\t\t\tviewSize = { cachedVisibleSize: size.cachedVisibleSize };\n\t\t\t} else {\n\t\t\t\tviewSize = view.minimumSize;\n\t\t\t}\n\t\t}\n\n\t\tconst item = this.orientation === Orientation.VERTICAL\n\t\t\t? new VerticalViewItem(container, view, viewSize, disposable)\n\t\t\t: new HorizontalViewItem(container, view, viewSize, disposable);\n\n\t\tthis.viewItems.splice(index, 0, item);\n\n```\n\n----------------------------------------\n\nTITLE: Language Service Setup Commands\nDESCRIPTION: Series of commands to set up and link the vscode-json-languageservice for development.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/json-language-features/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm i\nnpm link\nnpm link vscode-json-languageservice\n```\n\n----------------------------------------\n\nTITLE: Compiling and Installing Dependencies for VSCode Integration Tests\nDESCRIPTION: These commands navigate to the integration test directory, install npm dependencies, and compile the project. This is a prerequisite step before running the tests.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/test/integration/browser/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd test/integration/browser\nnpm i\nnpm run compile\n```\n\n----------------------------------------\n\nTITLE: Adding View to SplitView in TypeScript\nDESCRIPTION: Method for adding a new view to a split view container. Handles view initialization, sizing, and disposal management. Supports different sizing modes including fixed size, split size, and invisible views.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/src/vs/editor/test/node/diffing/fixtures/issue-185779/1.txt#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nprivate doAddView(view: IView<TLayoutContext>, size: number | Sizing, index = this.viewItems.length, skipLayout?: boolean): void {\n\t\tif (this.state !== State.Idle) {\n\t\t\tthrow new Error('Cant modify splitview');\n\t\t}\n\n\t\tthis.state = State.Busy;\n\n\t\t// Add view\n\t\tconst container = $('.split-view-view');\n\n\t\tif (index === this.viewItems.length) {\n\t\t\tthis.viewContainer.appendChild(container);\n\t\t} else {\n\t\t\tthis.viewContainer.insertBefore(container, this.viewContainer.children.item(index));\n\t\t}\n\n\t\tconst onChangeDisposable = view.onDidChange(size => this.onViewChange(item, size));\n\t\tconst containerDisposable = toDisposable(() => this.viewContainer.removeChild(container));\n\t\tconst disposable = combinedDisposable(onChangeDisposable, containerDisposable);\n\n\t\tlet viewSize: ViewItemSize;\n\n\t\tif (typeof size === 'number') {\n\t\t\tviewSize = size;\n\t\t} else if (size.type === 'split') {\n\t\t\tviewSize = this.getViewSize(size.index) / 2;\n\t\t} else if (size.type === 'invisible') {\n\t\t\tviewSize = { cachedVisibleSize: size.cachedVisibleSize };\n\t\t} else {\n\t\t\tviewSize = view.minimumSize;\n\t\t}\n\n\t\tconst item = this.orientation === Orientation.VERTICAL\n\t\t\t? new VerticalViewItem(container, view, viewSize, disposable)\n\t\t\t: new HorizontalViewItem(container, view, viewSize, disposable);\n\n\t\tthis.viewItems.splice(index, 0, item);\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Language Client Options\nDESCRIPTION: TypeScript code showing how to configure initialization options for the language client, specifically setting which schema protocols should be handled by the server.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/json-language-features/server/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlet clientOptions: LanguageClientOptions = {\n  initializationOptions: {\n   handledSchemaProtocols: ['file'] // language server should only try to load file URLs\n  }\n        ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Microsoft Sovereign Cloud Authentication in VS Code\nDESCRIPTION: This snippet demonstrates how to configure the authentication endpoint for the microsoft-sovereign-cloud Authentication Provider using VS Code settings. It allows users to sign in to different Azure cloud environments.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/microsoft-authentication/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nmicrosoft-sovereign-cloud.endpoint\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Variable Transformation in Snippets\nDESCRIPTION: Example showing how to transform the filename variable by removing the file extension. This snippet uses a regular expression to capture everything before the final period and suffix, then references the first capture group.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/src/vs/editor/contrib/snippet/browser/snippet.md#2025-04-23_snippet_0\n\nLANGUAGE: snippet\nCODE:\n```\n${TM_FILENAME/(.*)\\.\\+$/$1/}\n  |           |         | |\n  |           |         | |-> no options\n  |           |         |\n  |           |         |-> references the contents of the first\n  |           |             capture group\n  |           |\n  |           |-> regex to capture everything before\n  |               the final `.suffix`\n  |\n  |-> resolves to the filename\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies\nDESCRIPTION: Command to install all required dependencies for the HTML language features extension, including client, server, and development tools\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/html-language-features/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for CSS Language Service\nDESCRIPTION: Command to install dependencies for the vscode-css-languageservice project, which provides the core language intelligence for CSS/SCSS/Less.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/css-language-features/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Adding Git Extension Dependency in package.json\nDESCRIPTION: This JSON snippet shows how to configure a VS Code extension's package.json to ensure the Git extension is activated before your extension. It adds the vscode.git extension as a dependency using the extensionDependencies field.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/git/README.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"extensionDependencies\": [\n\t\"vscode.git\"\n]\n```\n\n----------------------------------------\n\nTITLE: Extending Line Ranges with Empty Line Handling in JavaScript\nDESCRIPTION: Algorithm that extends line ranges by comparing original and modified lines, considering line similarity and empty lines. Implements logic to track both total extension and extension excluding empty lines, with checks for line set containment and boundary conditions.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/src/vs/editor/test/node/diffing/fixtures/shifting-twice/2.txt#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfor (extendToBottom = 0; extendToBottom < linesBelow; extendToBottom++) {\n\t\t\tconst origLine = move.original.endLineNumberExclusive + extendToBottom;\n\t\t\tconst modLine = move.modified.endLineNumberExclusive + extendToBottom;\n\t\t\tif (origLine > originalLines.length || modLine > modifiedLines.length) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (modifiedSet.contains(modLine) || originalSet.contains(origLine)) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (!areLinesSimilar(originalLines[origLine - 1], modifiedLines[modLine - 1], timeout)) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (originalLines[origLine - 1].trim().length !== 0) {\n\t\t\t\textendToBottomWithoutEmptyLines = extendToBottom + 1;\n\t\t\t}\n\t\t}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nif (extendToBottomWithoutEmptyLines > 0) {\n\t\t\toriginalSet.addRange(new LineRange(move.original.endLineNumberExclusive, move.original.endLineNumberExclusive + extendToBottomWithoutEmptyLines));\n\t\t\tmodifiedSet.addRange(new LineRange(move.modified.endLineNumberExclusive, move.modified.endLineNumberExclusive + extendToBottomWithoutEmptyLines));\n\t\t}\n```\n\n----------------------------------------\n\nTITLE: Compiling Extension\nDESCRIPTION: Command to compile the HTML language features extension client and server components\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/html-language-features/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run compile\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests in Electron (Shell/Batch)\nDESCRIPTION: Executes all unit tests within an Electron renderer environment, providing access to both DOM and Node.js APIs. This command uses either the shell script (`test.sh`) or the batch script (`test.bat`) depending on the operating system.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/test/unit/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./scripts/test.[sh|bat]\n```\n\n----------------------------------------\n\nTITLE: Compilation Command\nDESCRIPTION: Command to compile the client and server components of the JSON language features extension.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/json-language-features/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run compile\n```\n\n----------------------------------------\n\nTITLE: Linking to Development Version of CSS Language Service\nDESCRIPTION: Command to link the server component of the CSS Language Features extension to the development version of vscode-css-languageservice.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/css-language-features/CONTRIBUTING.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpm link vscode-css-languageservice\n```\n\n----------------------------------------\n\nTITLE: Building and Publishing monaco-editor-core\nDESCRIPTION: Commands for generating the npm distribution and publishing the monaco-editor-core package. These commands should be run after committing and pushing all changes to the remote repository.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/build/monaco/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngulp editor-distro\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd out-monaco-editor-core\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm publish\n```\n\n----------------------------------------\n\nTITLE: Adding Non-Built-In Languages to Seti Icon Theme\nDESCRIPTION: Instructions for adding support for languages not shipped with Visual Studio Code to the Seti icon theme. This involves updating the 'nonBuiltInLanguages' object in the update script.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/theme-seti/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nLanguages that are not shipped with `vscode` must be added to the `nonBuiltInLanguages` object inside of `update-icon-theme.js`.\n\nThese should match [the file mapping in `seti-ui`](https://github.com/jesseweed/seti-ui/blob/master/styles/components/icons/mapping.less).\n\nPlease try and keep this list in alphabetical order! Thank you.\n```\n\n----------------------------------------\n\nTITLE: Naming Convention for New API Proposal Files\nDESCRIPTION: When creating a new API proposal file, it must follow this specific naming pattern.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/src/vscode-dts/README.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nvscode.proposed.[a-zA-Z]+.d.ts\n```\n\n----------------------------------------\n\nTITLE: Running Specific Unit Tests with Node.js (Shell/npm)\nDESCRIPTION: Executes a specific unit test file (`src/vs/editor/test/browser/controller/cursor.test.ts`) using the Node.js test runner via `npm run test-node`. The `--run` option specifies the test file to execute.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/test/unit/README.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpm run test-node -- --run src/vs/editor/test/browser/controller/cursor.test.ts\n```\n\n----------------------------------------\n\nTITLE: Configuring Gulp Auto-Detection in Visual Studio Code Settings\nDESCRIPTION: This snippet shows the configuration setting for enabling or disabling automatic detection of Gulp tasks from gulpfile.js or gulpfile.ts files in Visual Studio Code.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/gulp/README.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"gulp.autoDetect\": \"on\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Icon Source in Update Script\nDESCRIPTION: This snippet shows how to modify the update script to download icons directly from GitHub instead of using a local copy. It involves changing a boolean variable in the JavaScript file.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/theme-seti/README.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nFROM_DISK = false\n```\n\n----------------------------------------\n\nTITLE: Terminal Paths and Interfaces Reference\nDESCRIPTION: Reference to key terminal-related paths and interfaces showing the relationship between terminalContrib folder, ITerminalContribution interface, and their usage patterns.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/src/vs/workbench/contrib/terminalContrib/README.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nterminalContrib/\nITerminalContribution\nIEditorContribution\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Placeholder Transformation in Snippets\nDESCRIPTION: Example showing how to transform a placeholder value by removing an underscore prefix. The transformation uses a regular expression to capture everything after the underscore and replaces the entire matched text with just the capture group.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/src/vs/editor/contrib/snippet/browser/snippet.md#2025-04-23_snippet_1\n\nLANGUAGE: snippet\nCODE:\n```\n${1/^_(.*)/$1/}\n  |   |    |  |-> No options\n  |   |    |\n  |   |    |-> Replace it with the first capture group\n  |   |\n  |   |-> Regular expression to capture everything after the underscore\n  |\n  |-> Placeholder Index\n```\n\n----------------------------------------\n\nTITLE: SHA-256 Checksums for Glibc Toolchain Packages\nDESCRIPTION: A verification list containing SHA-256 checksums for various architecture-specific glibc toolchain packages. These checksums are used to verify the integrity of the downloaded packages before installation or use in a build process.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/build/checksums/vscode-sysroot.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n68a17006021975ff271a1dd615f9db9eda7c25f2cc65e750c87980dc57a06c94  aarch64-linux-gnu-glibc-2.17.tar.gz\n0de422a81683cf9e8cf875dbd1e0c27545ac3c775b2d53015daf3ca2b31d3f15  aarch64-linux-gnu-glibc-2.28.tar.gz\n3ced48cb479f2cdba95aa649710fcb7778685551c745bbd76ac706c3c0ead9fb  arm-rpi-linux-gnueabihf-glibc-2.17.tar.gz\n7aea163f7fad8cc50000c86b5108be880121d35e2f55d016ef8c96bbe54129eb  arm-rpi-linux-gnueabihf-glibc-2.28.tar.gz\n5aae21115f1d284c3cdf32c83db15771b59bc80793f1423032abf5a823c0d658  x86_64-linux-gnu-glibc-2.17.tar.gz\ndbb927408393041664a020661f2641c9785741be3d29b050b9dac58980967784  x86_64-linux-gnu-glibc-2.28.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Bundling Monaco Editor Test Assets (Shell)\nDESCRIPTION: This command executes the `bundle` script defined in the `package.json` file of the `$test/monaco` directory. This script typically packages the Monaco Editor source code and test files necessary for the smoke tests. This step usually follows dependency installation (`npm i`).\nSOURCE: https://github.com/trypear/pearai-app/blob/main/test/monaco/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$test/monaco> npm run bundle\n```\n\n----------------------------------------\n\nTITLE: Compiling Monaco Editor Test Code (Shell)\nDESCRIPTION: This command executes the `compile` script specified in the `package.json` file within the `$test/monaco` directory. This step compiles source files (e.g., TypeScript) required for the smoke tests. It should be run after installing dependencies and potentially after bundling.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/test/monaco/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$test/monaco> npm run compile\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies Command\nDESCRIPTION: Command to install all required dependencies for the JSON language features extension and server.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/json-language-features/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Configuring npm.exclude Setting in Visual Studio Code\nDESCRIPTION: Example of using a glob pattern to exclude test folders from automatic script detection in the npm extension settings.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/npm/README.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"**/test/**\"\n```\n\n----------------------------------------\n\nTITLE: Generating Test Coverage Report (macOS/Linux Shell)\nDESCRIPTION: Runs the unit tests using the Electron test script (`test.sh`) with the `--coverage` flag enabled. This generates a code coverage report located in the `.build/coverage` directory.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/test/unit/README.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n./scripts/test.sh --coverage\n```\n\n----------------------------------------\n\nTITLE: Linking CSS Language Service for Development\nDESCRIPTION: Command to create a global npm link for the vscode-css-languageservice package, allowing local development and testing.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/css-language-features/CONTRIBUTING.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm link\n```\n\n----------------------------------------\n\nTITLE: Configuring Jake Build Tool Settings\nDESCRIPTION: VS Code setting for enabling/disabling automatic detection of Jake tasks from Jakefile.js files.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/jake/README.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"jake.autoDetect\"\n```\n\n----------------------------------------\n\nTITLE: Executing Grammar Update Commands\nDESCRIPTION: Shell commands for updating grammar files and running integration tests to verify changes. This process includes navigating to the typescript extensions directory and executing the grammar update script followed by integration tests.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/javascript/syntaxes/Readme.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd extensions/typescript\nnpm run update-grammars\n```\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/test-integration.sh\n```\n\n----------------------------------------\n\nTITLE: Removing Quarantine Attribute from macOS VS Code Server Build\nDESCRIPTION: This command removes the quarantine attribute from the downloaded VS Code server build on macOS to avoid security issues on startup.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/test/smoke/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nxattr -d com.apple.quarantine <path to server with web folder zip>\n```\n\n----------------------------------------\n\nTITLE: Watching for Changes in CSS Language Features Extension\nDESCRIPTION: Command to continuously watch for changes and automatically recompile the CSS Language Features extension.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/css-language-features/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run watch\n```\n\n----------------------------------------\n\nTITLE: Updating TypeScript Grammar Files with Shell Commands\nDESCRIPTION: Shell commands to update the TypeScript grammar files to the latest version from the source repository and run integration tests to verify the changes.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/typescript-basics/syntaxes/Readme.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd extensions/typescript\nnpm run update-grammars\n```\n\nLANGUAGE: shell\nCODE:\n```\n./scripts/test-integration.sh\n```\n\n----------------------------------------\n\nTITLE: Logging Numbers 1-4 to Console in JavaScript\nDESCRIPTION: This code snippet uses console.log() to print the numbers 1, 2, 3, and 4 to the console. Each number is logged on a separate line.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/src/vs/editor/test/node/diffing/fixtures/fuzzy-matching/2.txt#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconsole.log(1);\nconsole.log(2);\nconsole.log(3);\nconsole.log(4);\n```\n\n----------------------------------------\n\nTITLE: Enabling Verbose Server Logging\nDESCRIPTION: VSCode settings configuration to enable verbose logging of client-server communication\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/html-language-features/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n\"html.trace.server\": \"verbose\"\n```\n\n----------------------------------------\n\nTITLE: Logging Sequential Numbers to Console in JavaScript\nDESCRIPTION: This snippet logs a sequence of numbers from 1 to 7 to the console. Each number is logged on a separate line as a discrete console operation. This pattern is commonly used for debugging or demonstrating basic JavaScript execution.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/src/vs/editor/test/node/diffing/fixtures/fuzzy-matching/1.txt#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconsole.log(1)\nconsole.log(2)\nconsole.log(3)\nconsole.log(4)\nconsole.log(5)\nconsole.log(6)\nconsole.log(7)\n```\n\n----------------------------------------\n\nTITLE: Indented Code Block in Markdown\nDESCRIPTION: This snippet demonstrates how to create an indented code block in Markdown, which is typically used for displaying code snippets.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/vscode-colorize-tests/test/colorize-fixtures/test.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n// Code is just text indented a bit\nwhich(is_easy) to_remember();\n```\n\n----------------------------------------\n\nTITLE: Sequential Console Logging in JavaScript\nDESCRIPTION: A sequence of console.log statements that print numbers 1 through 4 to the console. Each statement outputs a single integer value.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/src/vs/editor/test/node/diffing/fixtures/intra-block-align/1.txt#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(1);\nconsole.log(2);\nconsole.log(3);\nconsole.log(4);\n```\n\n----------------------------------------\n\nTITLE: JSON Server Trace Configuration\nDESCRIPTION: VSCode settings entry to enable verbose logging of communication between client and server.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/json-language-features/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"json.trace.server\": \"verbose\"\n```\n\n----------------------------------------\n\nTITLE: Importing Document Diff Types in TypeScript\nDESCRIPTION: Imports two interfaces from VS Code's editor module: IDocumentDiffProviderOptions for configuring diff providers and IChange for representing line differences in smart diff computation.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/src/vs/editor/test/node/diffing/fixtures/penalize-fragmentation/2.txt#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { IDocumentDiffProviderOptions } from 'vs/editor/common/diff/documentDiffProvider';\nimport { IChange } from 'vs/editor/common/diff/smartLinesDiffComputer';\n```\n\n----------------------------------------\n\nTITLE: Running VS Code Integration Tests Including Emmet\nDESCRIPTION: Shell command to execute the integration test suite that includes Emmet extension tests. This should be run after setting up the VS Code development environment locally.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/emmet/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./scripts/test-integration.sh\n```\n\n----------------------------------------\n\nTITLE: Mapping Keyboard Shortcuts for US Standard Layout\nDESCRIPTION: This table provides a comprehensive mapping of keyboard shortcuts for a US standard keyboard layout. It includes hardware code combinations, key codes, UI labels, user settings, Electron accelerators, and dispatching strings for various key combinations.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/src/vs/workbench/services/keybinding/test/node/linux_en_us.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nisUSStandard: true\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|       HW Code combination      |  Key  |    KeyCode combination    | Pri |          UI label         |         User settings          |    Electron accelerator   |       Dispatching string       | WYSIWYG |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyA |   a   |                         A |     |                         A |                              a |                         A |                         [KeyA] |         |\n|                      Ctrl+KeyA |   a   |                    Ctrl+A |     |                    Ctrl+A |                         ctrl+a |                    Ctrl+A |                    ctrl+[KeyA] |         |\n|                     Shift+KeyA |   A   |                   Shift+A |     |                   Shift+A |                        shift+a |                   Shift+A |                   shift+[KeyA] |         |\n|                Ctrl+Shift+KeyA |   A   |              Ctrl+Shift+A |     |              Ctrl+Shift+A |                   ctrl+shift+a |              Ctrl+Shift+A |              ctrl+shift+[KeyA] |         |\n|                       Alt+KeyA |   a   |                     Alt+A |     |                     Alt+A |                          alt+a |                     Alt+A |                     alt+[KeyA] |         |\n|                  Ctrl+Alt+KeyA |   a   |                Ctrl+Alt+A |     |                Ctrl+Alt+A |                     ctrl+alt+a |                Ctrl+Alt+A |                ctrl+alt+[KeyA] |         |\n|                 Shift+Alt+KeyA |   A   |               Shift+Alt+A |     |               Shift+Alt+A |                    shift+alt+a |               Shift+Alt+A |               shift+alt+[KeyA] |         |\n|            Ctrl+Shift+Alt+KeyA |   A   |          Ctrl+Shift+Alt+A |     |          Ctrl+Shift+Alt+A |               ctrl+shift+alt+a |          Ctrl+Shift+Alt+A |          ctrl+shift+alt+[KeyA] |         |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyB |   b   |                         B |     |                         B |                              b |                         B |                         [KeyB] |         |\n|                      Ctrl+KeyB |   b   |                    Ctrl+B |     |                    Ctrl+B |                         ctrl+b |                    Ctrl+B |                    ctrl+[KeyB] |         |\n|                     Shift+KeyB |   B   |                   Shift+B |     |                   Shift+B |                        shift+b |                   Shift+B |                   shift+[KeyB] |         |\n|                Ctrl+Shift+KeyB |   B   |              Ctrl+Shift+B |     |              Ctrl+Shift+B |                   ctrl+shift+b |              Ctrl+Shift+B |              ctrl+shift+[KeyB] |         |\n|                       Alt+KeyB |   b   |                     Alt+B |     |                     Alt+B |                          alt+b |                     Alt+B |                     alt+[KeyB] |         |\n|                  Ctrl+Alt+KeyB |   b   |                Ctrl+Alt+B |     |                Ctrl+Alt+B |                     ctrl+alt+b |                Ctrl+Alt+B |                ctrl+alt+[KeyB] |         |\n|                 Shift+Alt+KeyB |   B   |               Shift+Alt+B |     |               Shift+Alt+B |                    shift+alt+b |               Shift+Alt+B |               shift+alt+[KeyB] |         |\n|            Ctrl+Shift+Alt+KeyB |   B   |          Ctrl+Shift+Alt+B |     |          Ctrl+Shift+Alt+B |               ctrl+shift+alt+b |          Ctrl+Shift+Alt+B |          ctrl+shift+alt+[KeyB] |         |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyC |   c   |                         C |     |                         C |                              c |                         C |                         [KeyC] |         |\n|                      Ctrl+KeyC |   c   |                    Ctrl+C |     |                    Ctrl+C |                         ctrl+c |                    Ctrl+C |                    ctrl+[KeyC] |         |\n|                     Shift+KeyC |   C   |                   Shift+C |     |                   Shift+C |                        shift+c |                   Shift+C |                   shift+[KeyC] |         |\n|                Ctrl+Shift+KeyC |   C   |              Ctrl+Shift+C |     |              Ctrl+Shift+C |                   ctrl+shift+c |              Ctrl+Shift+C |              ctrl+shift+[KeyC] |         |\n|                       Alt+KeyC |   c   |                     Alt+C |     |                     Alt+C |                          alt+c |                     Alt+C |                     alt+[KeyC] |         |\n|                  Ctrl+Alt+KeyC |   c   |                Ctrl+Alt+C |     |                Ctrl+Alt+C |                     ctrl+alt+c |                Ctrl+Alt+C |                ctrl+alt+[KeyC] |         |\n|                 Shift+Alt+KeyC |   C   |               Shift+Alt+C |     |               Shift+Alt+C |                    shift+alt+c |               Shift+Alt+C |               shift+alt+[KeyC] |         |\n|            Ctrl+Shift+Alt+KeyC |   C   |          Ctrl+Shift+Alt+C |     |          Ctrl+Shift+Alt+C |               ctrl+shift+alt+c |          Ctrl+Shift+Alt+C |          ctrl+shift+alt+[KeyC] |         |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyD |   d   |                         D |     |                         D |                              d |                         D |                         [KeyD] |         |\n|                      Ctrl+KeyD |   d   |                    Ctrl+D |     |                    Ctrl+D |                         ctrl+d |                    Ctrl+D |                    ctrl+[KeyD] |         |\n|                     Shift+KeyD |   D   |                   Shift+D |     |                   Shift+D |                        shift+d |                   Shift+D |                   shift+[KeyD] |         |\n|                Ctrl+Shift+KeyD |   D   |              Ctrl+Shift+D |     |              Ctrl+Shift+D |                   ctrl+shift+d |              Ctrl+Shift+D |              ctrl+shift+[KeyD] |         |\n|                       Alt+KeyD |   d   |                     Alt+D |     |                     Alt+D |                          alt+d |                     Alt+D |                     alt+[KeyD] |         |\n|                  Ctrl+Alt+KeyD |   d   |                Ctrl+Alt+D |     |                Ctrl+Alt+D |                     ctrl+alt+d |                Ctrl+Alt+D |                ctrl+alt+[KeyD] |         |\n|                 Shift+Alt+KeyD |   D   |               Shift+Alt+D |     |               Shift+Alt+D |                    shift+alt+d |               Shift+Alt+D |               shift+alt+[KeyD] |         |\n|            Ctrl+Shift+Alt+KeyD |   D   |          Ctrl+Shift+Alt+D |     |          Ctrl+Shift+Alt+D |               ctrl+shift+alt+d |          Ctrl+Shift+Alt+D |          ctrl+shift+alt+[KeyD] |         |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|       HW Code combination      |  Key  |    KeyCode combination    | Pri |          UI label         |         User settings          |    Electron accelerator   |       Dispatching string       | WYSIWYG |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyE |   e   |                         E |     |                         E |                              e |                         E |                         [KeyE] |         |\n|                      Ctrl+KeyE |   e   |                    Ctrl+E |     |                    Ctrl+E |                         ctrl+e |                    Ctrl+E |                    ctrl+[KeyE] |         |\n|                     Shift+KeyE |   E   |                   Shift+E |     |                   Shift+E |                        shift+e |                   Shift+E |                   shift+[KeyE] |         |\n|                Ctrl+Shift+KeyE |   E   |              Ctrl+Shift+E |     |              Ctrl+Shift+E |                   ctrl+shift+e |              Ctrl+Shift+E |              ctrl+shift+[KeyE] |         |\n|                       Alt+KeyE |   e   |                     Alt+E |     |                     Alt+E |                          alt+e |                     Alt+E |                     alt+[KeyE] |         |\n|                  Ctrl+Alt+KeyE |   e   |                Ctrl+Alt+E |     |                Ctrl+Alt+E |                     ctrl+alt+e |                Ctrl+Alt+E |                ctrl+alt+[KeyE] |         |\n```\n\n----------------------------------------\n\nTITLE: Updating Seti UI Icons with Node.js Script\nDESCRIPTION: This snippet references a Node.js script used to update the Seti UI icons. The script can be run using npm and can fetch icons either from a local copy of seti-ui or directly from GitHub.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/theme-seti/README.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nnpm run update\n```\n\n----------------------------------------\n\nTITLE: Installing and Preparing Local Seti UI Copy\nDESCRIPTION: These commands are used to set up a local copy of the Seti UI repository for icon updates. They involve cloning the repository, installing dependencies, and generating updated icons.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/theme-seti/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install\nnpm run prepublishOnly\n```\n\n----------------------------------------\n\nTITLE: Keyboard Shortcut Mapping Table\nDESCRIPTION: A table mapping keyboard shortcuts across different representations and platforms. Shows combinations of modifier keys (Ctrl, Shift, Alt/Option) with letters O-T, including their hardware codes, key codes, UI labels, user settings, Electron accelerator formats, and dispatching strings.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/src/vs/workbench/services/keybinding/test/node/mac_zh_hant2.txt#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nHW Code combination      |  Key  |    KeyCode combination    | Pri |          UI label         |         User settings          |    Electron accelerator   |       Dispatching string       | WYSIWYG\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyP |   p   |                         P |     |                         P |                              p |                         P |                         [KeyP] |         |\n|                      Ctrl+KeyP |   p   |                    Ctrl+P |     |                    Ctrl+P |                         ctrl+p |                    Ctrl+P |                    ctrl+[KeyP] |         |\n```\n\n----------------------------------------\n\nTITLE: Debugging Browser Tests via URL (Plaintext/URL)\nDESCRIPTION: Example URL for debugging browser unit tests. Open `<vscode>/test/unit/browser/renderer.html` in a browser and use the `?m=<amd_module>` query parameter to load and run tests from a specific AMD module (e.g., `vs/base/test/common/strings.test`).\nSOURCE: https://github.com/trypear/pearai-app/blob/main/test/unit/README.md#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nfile:///Users/jrieken/Code/vscode/test/unit/browser/renderer.html?m=vs/base/test/common/strings.test\n```\n\n----------------------------------------\n\nTITLE: Running Web-side Watch Process for VS Code TypeScript Server\nDESCRIPTION: This command starts the watch process for the web-side of the VS Code TypeScript server setup.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/typescript-language-features/web/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run watch-web\n```\n\n----------------------------------------\n\nTITLE: Key Combinations Reference Table\nDESCRIPTION: Detailed table showing mappings between hardware key combinations, output characters, UI labels, user settings, electron accelerators, and dispatching strings. Covers both single key presses and modifier combinations (Ctrl, Shift, Alt) for letters A-E.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/src/vs/workbench/services/keybinding/test/node/mac_en_us.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nisUSStandard: true\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|       HW Code combination      |  Key  |    KeyCode combination    | Pri |          UI label         |         User settings          |    Electron accelerator   |       Dispatching string       | WYSIWYG |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyA |   a   |                         A |     |                         A |                              a |                         A |                         [KeyA] |         |\n|                      Ctrl+KeyA |   a   |                    Ctrl+A |     |                    Ctrl+A |                         ctrl+a |                    Ctrl+A |                    ctrl+[KeyA] |         |\n|                     Shift+KeyA |   A   |                   Shift+A |     |                   Shift+A |                        shift+a |                   Shift+A |                   shift+[KeyA] |         |\n[...remaining table content truncated for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Generating Test Coverage Report (Windows Batch)\nDESCRIPTION: Runs the unit tests using the Windows batch script (`test.bat`) with the `--coverage` flag enabled. This generates a code coverage report located in the `.build/coverage` directory.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/test/unit/README.md#2025-04-23_snippet_7\n\nLANGUAGE: batch\nCODE:\n```\nscripts\\test --coverage\n```\n\n----------------------------------------\n\nTITLE: Jake Task File Reference\nDESCRIPTION: Reference to the Jake configuration file that contains task definitions.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/jake/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nJakefile.js\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests in Browsers (Shell/npm)\nDESCRIPTION: Executes unit tests from the 'common' and 'browser' layers using Playwright in specified browsers (WebKit and Chromium in this example). This complements Electron tests and ensures cross-browser compatibility.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/test/unit/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run test-browser -- --browser webkit --browser chromium\n```\n\n----------------------------------------\n\nTITLE: Logging Numbers 5-7 to Console in JavaScript\nDESCRIPTION: This code snippet uses console.log() to print the numbers 5, 6, and 7 to the console. Each number is logged on a separate line.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/src/vs/editor/test/node/diffing/fixtures/fuzzy-matching/2.txt#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconsole.log(5);\nconsole.log(6);\nconsole.log(7);\n```\n\n----------------------------------------\n\nTITLE: Running Monaco Editor Smoke Tests (Shell)\nDESCRIPTION: This command executes the `test` script defined in the `package.json` file located in the `$test/monaco` directory. This runs the pre-configured smoke tests to verify the basic functionality of the Monaco Editor distribution after the setup, bundling, and compilation steps are complete.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/test/monaco/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$test/monaco> npm run test\n```\n\n----------------------------------------\n\nTITLE: Configuring Pear AI Application Settings in YAML\nDESCRIPTION: This YAML configuration file defines various settings for the Pear AI application, including database connection details, API keys, and environment variables. It specifies the application name, environment, debug mode, and other crucial parameters for the application's functionality.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/github/testWorkspace/PULL_REQUEST_TEMPLATE/b.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napp_name: PearAI\nenv: production\ndebug: false\n\ndatabase:\n  host: localhost\n  port: 5432\n  name: pearai_db\n  user: pearai_user\n  password: ${DB_PASSWORD}\n\napi:\n  key: ${API_KEY}\n  endpoint: https://api.pearai.com/v1\n\nstorage:\n  type: s3\n  bucket: pearai-assets\n\nlogging:\n  level: info\n  file: /var/log/pearai.log\n\nfeature_flags:\n  new_algorithm: true\n  beta_features: false\n\ncache:\n  type: redis\n  host: localhost\n  port: 6379\n\nthird_party:\n  analytics:\n    provider: mixpanel\n    token: ${MIXPANEL_TOKEN}\n\nsecurity:\n  jwt_secret: ${JWT_SECRET}\n  rate_limit:\n    requests: 100\n    per_second: 60\n\nworkers:\n  concurrency: 4\n  queue: pearai_tasks\n\nnotifications:\n  email:\n    smtp_host: smtp.sendgrid.net\n    smtp_port: 587\n    smtp_user: ${SMTP_USER}\n    smtp_password: ${SMTP_PASSWORD}\n\nai_model:\n  version: 2.0\n  params:\n    batch_size: 32\n    learning_rate: 0.001\n\nmetrics:\n  statsd_host: localhost\n  statsd_port: 8125\n  prefix: pearai\n```\n\n----------------------------------------\n\nTITLE: Setting environment variables for GitHub OAuth in Next.js\nDESCRIPTION: Environment variables required for GitHub OAuth integration, including Client ID, Client Secret, and callback URL configuration for development and production environments.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/github/testWorkspace/PULL_REQUEST_TEMPLATE/a.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nGITHUB_ID=\nGITHUB_SECRET=\nAUTH_REDIRECT_PROXY_URL=http://localhost:3000\n# for development\nNEXTAUTH_URL=http://localhost:3000\n# for production\n# NEXTAUTH_URL=https://example.com\n```\n\n----------------------------------------\n\nTITLE: Defining Database Configuration Object for PearAI Application in JavaScript\nDESCRIPTION: This code snippet creates a database configuration object for the PearAI application. It includes the database URI and options for connection timeout and pool size.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/github/testWorkspace/docs/PULL_REQUEST_TEMPLATE/b.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const dbConfig = {\n  uri: MONGODB_URI,\n  options: {\n    useNewUrlParser: true,\n    useUnifiedTopology: true,\n    serverSelectionTimeoutMS: 5000,\n    maxPoolSize: 10,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Verifying Node.js v20.18.1 Distribution Package Checksums\nDESCRIPTION: This snippet provides SHA-256 checksums for Node.js v20.18.1 distribution packages. These checksums can be used to verify the integrity of downloaded Node.js binaries for various platforms and architectures.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/build/checksums/nodejs.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n9e92ce1032455a9cc419fe71e908b27ae477799371b45a0844eedb02279922a4  node-v20.18.1-darwin-arm64.tar.gz\nc5497dd17c8875b53712edaf99052f961013cedc203964583fc0cfc0aaf93581  node-v20.18.1-darwin-x64.tar.gz\n73cd297378572e0bc9dfc187c5ec8cca8d43aee6a596c10ebea1ed5f9ec682b6  node-v20.18.1-linux-arm64.tar.gz\n7b7c3315818e9fe57512737c2380fada14d8717ce88945fb6f7b8baadd3cfb92  node-v20.18.1-linux-armv7l.tar.gz\n259e5a8bf2e15ecece65bd2a47153262eda71c0b2c9700d5e703ce4951572784  node-v20.18.1-linux-x64.tar.gz\n9a52905b5d22b08b5b34e86b8d5358cd22c03fbd0fcb9dbb37c9bd82a8f18c17  win-arm64/node.exe\n06c1dec1b428927d6ff01c8f5882f119ec13b61ac77483760aa7fba215c72cf5  win-x64/node.exe\n```\n\n----------------------------------------\n\nTITLE: Displaying Keyboard Shortcut Mappings Table in Plain Text\nDESCRIPTION: This snippet presents a detailed table of keyboard shortcuts and their various representations. It includes hardware codes, key combinations, UI labels, user settings, Electron accelerators, and dispatching strings for keys A through E with different modifier combinations.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/src/vs/workbench/services/keybinding/test/node/linux_en_uk.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nisUSStandard: false\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|       HW Code combination      |  Key  |    KeyCode combination    | Pri |          UI label         |         User settings          |    Electron accelerator   |       Dispatching string       | WYSIWYG |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyA |   a   |                         A |     |                         A |                              a |                         A |                         [KeyA] |         |\n|                      Ctrl+KeyA |   a   |                    Ctrl+A |     |                    Ctrl+A |                         ctrl+a |                    Ctrl+A |                    ctrl+[KeyA] |         |\n|                     Shift+KeyA |   A   |                   Shift+A |     |                   Shift+A |                        shift+a |                   Shift+A |                   shift+[KeyA] |         |\n|                Ctrl+Shift+KeyA |   A   |              Ctrl+Shift+A |     |              Ctrl+Shift+A |                   ctrl+shift+a |              Ctrl+Shift+A |              ctrl+shift+[KeyA] |         |\n|                       Alt+KeyA |   a   |                     Alt+A |     |                     Alt+A |                          alt+a |                     Alt+A |                     alt+[KeyA] |         |\n|                  Ctrl+Alt+KeyA |   æ   |                Ctrl+Alt+A |     |                Ctrl+Alt+A |                     ctrl+alt+a |                Ctrl+Alt+A |                ctrl+alt+[KeyA] |         |\n|                 Shift+Alt+KeyA |   A   |               Shift+Alt+A |     |               Shift+Alt+A |                    shift+alt+a |               Shift+Alt+A |               shift+alt+[KeyA] |         |\n|            Ctrl+Shift+Alt+KeyA |   Æ   |          Ctrl+Shift+Alt+A |     |          Ctrl+Shift+Alt+A |               ctrl+shift+alt+a |          Ctrl+Shift+Alt+A |          ctrl+shift+alt+[KeyA] |         |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyB |   b   |                         B |     |                         B |                              b |                         B |                         [KeyB] |         |\n|                      Ctrl+KeyB |   b   |                    Ctrl+B |     |                    Ctrl+B |                         ctrl+b |                    Ctrl+B |                    ctrl+[KeyB] |         |\n|                     Shift+KeyB |   B   |                   Shift+B |     |                   Shift+B |                        shift+b |                   Shift+B |                   shift+[KeyB] |         |\n|                Ctrl+Shift+KeyB |   B   |              Ctrl+Shift+B |     |              Ctrl+Shift+B |                   ctrl+shift+b |              Ctrl+Shift+B |              ctrl+shift+[KeyB] |         |\n|                       Alt+KeyB |   b   |                     Alt+B |     |                     Alt+B |                          alt+b |                     Alt+B |                     alt+[KeyB] |         |\n|                  Ctrl+Alt+KeyB |   \"   |                Ctrl+Alt+B |     |                Ctrl+Alt+B |                     ctrl+alt+b |                Ctrl+Alt+B |                ctrl+alt+[KeyB] |         |\n|                 Shift+Alt+KeyB |   B   |               Shift+Alt+B |     |               Shift+Alt+B |                    shift+alt+b |               Shift+Alt+B |               shift+alt+[KeyB] |         |\n|            Ctrl+Shift+Alt+KeyB |   '   |          Ctrl+Shift+Alt+B |     |          Ctrl+Shift+Alt+B |               ctrl+shift+alt+b |          Ctrl+Shift+Alt+B |          ctrl+shift+alt+[KeyB] |         |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyC |   c   |                         C |     |                         C |                              c |                         C |                         [KeyC] |         |\n|                      Ctrl+KeyC |   c   |                    Ctrl+C |     |                    Ctrl+C |                         ctrl+c |                    Ctrl+C |                    ctrl+[KeyC] |         |\n|                     Shift+KeyC |   C   |                   Shift+C |     |                   Shift+C |                        shift+c |                   Shift+C |                   shift+[KeyC] |         |\n|                Ctrl+Shift+KeyC |   C   |              Ctrl+Shift+C |     |              Ctrl+Shift+C |                   ctrl+shift+c |              Ctrl+Shift+C |              ctrl+shift+[KeyC] |         |\n|                       Alt+KeyC |   c   |                     Alt+C |     |                     Alt+C |                          alt+c |                     Alt+C |                     alt+[KeyC] |         |\n|                  Ctrl+Alt+KeyC |   ¢   |                Ctrl+Alt+C |     |                Ctrl+Alt+C |                     ctrl+alt+c |                Ctrl+Alt+C |                ctrl+alt+[KeyC] |         |\n|                 Shift+Alt+KeyC |   C   |               Shift+Alt+C |     |               Shift+Alt+C |                    shift+alt+c |               Shift+Alt+C |               shift+alt+[KeyC] |         |\n|            Ctrl+Shift+Alt+KeyC |   ©   |          Ctrl+Shift+Alt+C |     |          Ctrl+Shift+Alt+C |               ctrl+shift+alt+c |          Ctrl+Shift+Alt+C |          ctrl+shift+alt+[KeyC] |         |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyD |   d   |                         D |     |                         D |                              d |                         D |                         [KeyD] |         |\n|                      Ctrl+KeyD |   d   |                    Ctrl+D |     |                    Ctrl+D |                         ctrl+d |                    Ctrl+D |                    ctrl+[KeyD] |         |\n|                     Shift+KeyD |   D   |                   Shift+D |     |                   Shift+D |                        shift+d |                   Shift+D |                   shift+[KeyD] |         |\n|                Ctrl+Shift+KeyD |   D   |              Ctrl+Shift+D |     |              Ctrl+Shift+D |                   ctrl+shift+d |              Ctrl+Shift+D |              ctrl+shift+[KeyD] |         |\n|                       Alt+KeyD |   d   |                     Alt+D |     |                     Alt+D |                          alt+d |                     Alt+D |                     alt+[KeyD] |         |\n|                  Ctrl+Alt+KeyD |   ð   |                Ctrl+Alt+D |     |                Ctrl+Alt+D |                     ctrl+alt+d |                Ctrl+Alt+D |                ctrl+alt+[KeyD] |         |\n|                 Shift+Alt+KeyD |   D   |               Shift+Alt+D |     |               Shift+Alt+D |                    shift+alt+d |               Shift+Alt+D |               shift+alt+[KeyD] |         |\n|            Ctrl+Shift+Alt+KeyD |   Ð   |          Ctrl+Shift+Alt+D |     |          Ctrl+Shift+Alt+D |               ctrl+shift+alt+d |          Ctrl+Shift+Alt+D |          ctrl+shift+alt+[KeyD] |         |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|       HW Code combination      |  Key  |    KeyCode combination    | Pri |          UI label         |         User settings          |    Electron accelerator   |       Dispatching string       | WYSIWYG |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyE |   e   |                         E |     |                         E |                              e |                         E |                         [KeyE] |         |\n|                      Ctrl+KeyE |   e   |                    Ctrl+E |     |                    Ctrl+E |                         ctrl+e |                    Ctrl+E |                    ctrl+[KeyE] |         |\n|                     Shift+KeyE |   E   |                   Shift+E |     |                   Shift+E |                        shift+e |                   Shift+E |                   shift+[KeyE] |         |\n|                Ctrl+Shift+KeyE |   E   |              Ctrl+Shift+E |     |              Ctrl+Shift+E |                   ctrl+shift+e |              Ctrl+Shift+E |              ctrl+shift+[KeyE] |         |\n|                       Alt+KeyE |   e   |                     Alt+E |     |                     Alt+E |                          alt+e |                     Alt+E |                     alt+[KeyE] |         |\n|                  Ctrl+Alt+KeyE |   e   |                Ctrl+Alt+E |     |                Ctrl+Alt+E |                     ctrl+alt+e |                Ctrl+Alt+E |                ctrl+alt+[KeyE] |         |\n```\n\n----------------------------------------\n\nTITLE: Developing VS Code Smoke Tests\nDESCRIPTION: This command sets up a watch process for developing smoke tests, allowing for automatic recompilation of test files when changes are made.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/test/smoke/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd test/smoke\nnpm run watch\n```\n\n----------------------------------------\n\nTITLE: Defining Babel Package Dependencies in YAML\nDESCRIPTION: Package dependency definitions including version constraints, resolved URLs, and integrity hashes for @babel/types and @babel/traverse packages\nSOURCE: https://github.com/trypear/pearai-app/blob/main/src/vs/editor/test/node/diffing/fixtures/issue-204948/2.txt#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"@babel/types\" \"^7.22.15\"\n\n\"@babel/traverse@^7.23.9\":\n  version \"7.23.9\"\n  resolved \"https://registry.yarnpkg.com/@babel/traverse/-/traverse-7.23.7.tgz#9a7bf285c928cb99b5ead19c3b1ce5b310c9c305\"\n  integrity sha512-I/4UJ9vs90OkBtY6iiiTORVMyIhJ4kAVmsKo9KFc8UOxMeUfi2hvtIBsET5u9GizXE6/GFSuKCTNfgCswuEjRg==\n  dependencies:\n    \"@babel/code-frame\" \"^7.23.5\"\n    \"@babel/generator\" \"^7.23.6\"\n```\n\n----------------------------------------\n\nTITLE: Defining Babel Traverse Dependency in YAML\nDESCRIPTION: This snippet specifies the exact version, resolution, and integrity information for the @babel/traverse package. It also lists its dependencies.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/src/vs/editor/test/node/diffing/fixtures/issue-204948/1.txt#2025-04-23_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\n\"@babel/traverse@^7.23.9\":\n  version \"7.23.9\"\n  resolved \"https://registry.yarnpkg.com/@babel/traverse/-/traverse-7.23.7.tgz#9a7bf285c928cb99b5ead19c3b1ce5b310c9c305\"\n  integrity sha512-tY3mM8rH9jM0YHFGyfC0/xf+SB5eKUu7HPj7/k3fpi9dAlsMc5YbQvDi0Sh2QTPXqMhyaAtzAr807TIyfQrmyg==\n  dependencies:\n    \"@babel/code-frame\" \"^7.23.5\"\n    \"@babel/generator\" \"^7.23.6\"\n```\n\n----------------------------------------\n\nTITLE: Logging Numbers to Console in JavaScript\nDESCRIPTION: This code snippet demonstrates the use of console.log() to output three different numbers to the console. It's a simple example of how to use JavaScript's built-in logging functionality.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/src/vs/editor/test/node/diffing/fixtures/intra-block-align/2.txt#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(1)\nconsole.log(2)\nconsole.log(4)\n```\n\n----------------------------------------\n\nTITLE: Basic JavaScript Commands\nDESCRIPTION: Demonstrates a hello world statement, a single-line comment, and variable declaration.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/src/vs/editor/test/node/diffing/fixtures/issue-214049/2.txt#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nhello world;\n// new line\ny\n```\n\n----------------------------------------\n\nTITLE: Keyboard Shortcut Mapping Table\nDESCRIPTION: Detailed table showing keyboard combinations using digits 4-9 with various modifier keys (Ctrl, Alt, Shift) and their corresponding outputs. Includes mappings for hardware codes, key codes, UI labels, user settings, Electron accelerators, and dispatching strings.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/src/vs/workbench/services/keybinding/test/node/mac_zh_hant2.txt#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n|                     Alt+Digit4 |   4   |                     Alt+4 |     |                  Option+4 |                          alt+4 |                     Alt+4 |                   alt+[Digit4] |         |\n|                Ctrl+Alt+Digit4 |   4   |                Ctrl+Alt+4 |     |             Ctrl+Option+4 |                     ctrl+alt+4 |                Ctrl+Alt+4 |              ctrl+alt+[Digit4] |         |\n|               Shift+Alt+Digit4 |   $   |               Shift+Alt+4 |     |            Shift+Option+4 |                    shift+alt+4 |               Shift+Alt+4 |             shift+alt+[Digit4] |         |\n|          Ctrl+Shift+Alt+Digit4 |   ›   |          Ctrl+Shift+Alt+4 |     |       Ctrl+Shift+Option+4 |               ctrl+shift+alt+4 |          Ctrl+Shift+Alt+4 |        ctrl+shift+alt+[Digit4] |         |\n```\n\n----------------------------------------\n\nTITLE: Complex Product Expression with DisplayStyle\nDESCRIPTION: Advanced LaTeX expression using \\displaystyle to show an infinite product equation with proper formatting and text annotations.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/vscode-colorize-tests/test/colorize-fixtures/md-math.md#2025-04-23_snippet_6\n\nLANGUAGE: latex\nCODE:\n```\n$\n\\displaystyle {1 + \\frac{q^2}{(1-q)}+\\frac{q^6}{(1-q)(1-q^2)}+\\cdots }= \\prod_{j=0}^{\\infty}\\frac{1}{(1-q^{5j+2})(1-q^{5j+3})}, \\quad\\quad \\text{for }\\lvert q\\rvert<1.\n$\n```\n\n----------------------------------------\n\nTITLE: Defining Keyboard Shortcut Mappings for Non-US Standard Layouts\nDESCRIPTION: This table provides a comprehensive mapping of keyboard shortcuts for non-US standard layouts. It includes hardware code combinations, key representations, UI labels, user settings, Electron accelerators, and dispatching strings for various key combinations.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/src/vs/workbench/services/keybinding/test/node/mac_zh_hant.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nisUSStandard: false\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|       HW Code combination      |  Key  |    KeyCode combination    | Pri |          UI label         |         User settings          |    Electron accelerator   |       Dispatching string       | WYSIWYG |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyA |   ㄇ   |                         A |     |                         A |                              a |                         A |                         [KeyA] |         |\n|                      Ctrl+KeyA |   ㄇ   |                    Ctrl+A |     |                    Ctrl+A |                         ctrl+a |                    Ctrl+A |                    ctrl+[KeyA] |         |\n|                     Shift+KeyA |   A   |                   Shift+A |     |                   Shift+A |                        shift+a |                   Shift+A |                   shift+[KeyA] |         |\n|                Ctrl+Shift+KeyA |   A   |              Ctrl+Shift+A |     |              Ctrl+Shift+A |                   ctrl+shift+a |              Ctrl+Shift+A |              ctrl+shift+[KeyA] |         |\n|                       Alt+KeyA |   ㄇ   |                     Alt+A |     |                  Option+A |                          alt+a |                     Alt+A |                     alt+[KeyA] |         |\n|                  Ctrl+Alt+KeyA |   a   |                Ctrl+Alt+A |     |             Ctrl+Option+A |                     ctrl+alt+a |                Ctrl+Alt+A |                ctrl+alt+[KeyA] |         |\n|                 Shift+Alt+KeyA |   A   |               Shift+Alt+A |     |            Shift+Option+A |                    shift+alt+a |               Shift+Alt+A |               shift+alt+[KeyA] |         |\n|            Ctrl+Shift+Alt+KeyA |   A   |          Ctrl+Shift+Alt+A |     |       Ctrl+Shift+Option+A |               ctrl+shift+alt+a |          Ctrl+Shift+Alt+A |          ctrl+shift+alt+[KeyA] |         |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyB |   ㄖ   |                         B |     |                         B |                              b |                         B |                         [KeyB] |         |\n|                      Ctrl+KeyB |   ㄖ   |                    Ctrl+B |     |                    Ctrl+B |                         ctrl+b |                    Ctrl+B |                    ctrl+[KeyB] |         |\n|                     Shift+KeyB |   B   |                   Shift+B |     |                   Shift+B |                        shift+b |                   Shift+B |                   shift+[KeyB] |         |\n|                Ctrl+Shift+KeyB |   B   |              Ctrl+Shift+B |     |              Ctrl+Shift+B |                   ctrl+shift+b |              Ctrl+Shift+B |              ctrl+shift+[KeyB] |         |\n|                       Alt+KeyB |   ㄖ   |                     Alt+B |     |                  Option+B |                          alt+b |                     Alt+B |                     alt+[KeyB] |         |\n|                  Ctrl+Alt+KeyB |   b   |                Ctrl+Alt+B |     |             Ctrl+Option+B |                     ctrl+alt+b |                Ctrl+Alt+B |                ctrl+alt+[KeyB] |         |\n|                 Shift+Alt+KeyB |   B   |               Shift+Alt+B |     |            Shift+Option+B |                    shift+alt+b |               Shift+Alt+B |               shift+alt+[KeyB] |         |\n|            Ctrl+Shift+Alt+KeyB |   B   |          Ctrl+Shift+Alt+B |     |       Ctrl+Shift+Option+B |               ctrl+shift+alt+b |          Ctrl+Shift+Alt+B |          ctrl+shift+alt+[KeyB] |         |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyC |   ㄏ   |                         C |     |                         C |                              c |                         C |                         [KeyC] |         |\n|                      Ctrl+KeyC |   ㄏ   |                    Ctrl+C |     |                    Ctrl+C |                         ctrl+c |                    Ctrl+C |                    ctrl+[KeyC] |         |\n|                     Shift+KeyC |   C   |                   Shift+C |     |                   Shift+C |                        shift+c |                   Shift+C |                   shift+[KeyC] |         |\n|                Ctrl+Shift+KeyC |   C   |              Ctrl+Shift+C |     |              Ctrl+Shift+C |                   ctrl+shift+c |              Ctrl+Shift+C |              ctrl+shift+[KeyC] |         |\n|                       Alt+KeyC |   ㄏ   |                     Alt+C |     |                  Option+C |                          alt+c |                     Alt+C |                     alt+[KeyC] |         |\n|                  Ctrl+Alt+KeyC |   c   |                Ctrl+Alt+C |     |             Ctrl+Option+C |                     ctrl+alt+c |                Ctrl+Alt+C |                ctrl+alt+[KeyC] |         |\n|                 Shift+Alt+KeyC |   C   |               Shift+Alt+C |     |            Shift+Option+C |                    shift+alt+c |               Shift+Alt+C |               shift+alt+[KeyC] |         |\n|            Ctrl+Shift+Alt+KeyC |   C   |          Ctrl+Shift+Alt+C |     |       Ctrl+Shift+Option+C |               ctrl+shift+alt+c |          Ctrl+Shift+Alt+C |          ctrl+shift+alt+[KeyC] |         |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyD |   ㄎ   |                         D |     |                         D |                              d |                         D |                         [KeyD] |         |\n|                      Ctrl+KeyD |   ㄎ   |                    Ctrl+D |     |                    Ctrl+D |                         ctrl+d |                    Ctrl+D |                    ctrl+[KeyD] |         |\n|                     Shift+KeyD |   D   |                   Shift+D |     |                   Shift+D |                        shift+d |                   Shift+D |                   shift+[KeyD] |         |\n|                Ctrl+Shift+KeyD |   D   |              Ctrl+Shift+D |     |              Ctrl+Shift+D |                   ctrl+shift+d |              Ctrl+Shift+D |              ctrl+shift+[KeyD] |         |\n|                       Alt+KeyD |   ㄎ   |                     Alt+D |     |                  Option+D |                          alt+d |                     Alt+D |                     alt+[KeyD] |         |\n|                  Ctrl+Alt+KeyD |   d   |                Ctrl+Alt+D |     |             Ctrl+Option+D |                     ctrl+alt+d |                Ctrl+Alt+D |                ctrl+alt+[KeyD] |         |\n|                 Shift+Alt+KeyD |   D   |               Shift+Alt+D |     |            Shift+Option+D |                    shift+alt+d |               Shift+Alt+D |               shift+alt+[KeyD] |         |\n|            Ctrl+Shift+Alt+KeyD |   D   |          Ctrl+Shift+Alt+D |     |       Ctrl+Shift+Option+D |               ctrl+shift+alt+d |          Ctrl+Shift+Alt+D |          ctrl+shift+alt+[KeyD] |         |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|       HW Code combination      |  Key  |    KeyCode combination    | Pri |          UI label         |         User settings          |    Electron accelerator   |       Dispatching string       | WYSIWYG |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyE |   ㄍ   |                         E |     |                         E |                              e |                         E |                         [KeyE] |         |\n|                      Ctrl+KeyE |   ㄍ   |                    Ctrl+E |     |                    Ctrl+E |                         ctrl+e |                    Ctrl+E |                    ctrl+[KeyE] |         |\n|                     Shift+KeyE |   E   |                   Shift+E |     |                   Shift+E |                        shift+e |                   Shift+E |                   shift+[KeyE] |         |\n|                Ctrl+Shift+KeyE |   E   |              Ctrl+Shift+E |     |              Ctrl+Shift+E |                   ctrl+shift+e |              Ctrl+Shift+E |              ctrl+shift+[KeyE] |         |\n|                       Alt+KeyE |   ㄍ   |                     Alt+E |     |                  Option+E |                          alt+e |                     Alt+E |                     alt+[KeyE] |         |\n|                  Ctrl+Alt+KeyE |   e   |                Ctrl+Alt+E |     |             Ctrl+Option+E |                     ctrl+alt+e |                Ctrl+Alt+E |                ctrl+alt+[KeyE] |         |\n```\n\n----------------------------------------\n\nTITLE: Complex Display Math Block with Integral and Comment\nDESCRIPTION: Complex LaTeX expression showing a relax function with an integral and including a comment at the end.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/vscode-colorize-tests/test/colorize-fixtures/md-math.md#2025-04-23_snippet_2\n\nLANGUAGE: latex\nCODE:\n```\n$$\n\\relax{x}{1} = \\int_{-\\infty}^\\infty\n    \\hat\\xi\\,e^{2 \\pi i \\xi x}\n    \\,d\\xi % comment\n$$\n```\n\n----------------------------------------\n\nTITLE: Keyboard Shortcut Mapping Table\nDESCRIPTION: ASCII table showing the mapping between hardware key codes, key combinations, UI labels and user settings for keyboard shortcuts. Includes single key presses and combinations with Shift, Ctrl, and Alt modifiers.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/src/vs/workbench/services/keybinding/test/node/win_en_us.txt#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n-----------------------------------------------------------------------------------------------------------------------------------------\n|       HW Code combination      |  Key  |    KeyCode combination    |          UI label         |        User settings       | WYSIWYG |\n-----------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyA |   a   |                         A |                         A |                          a |         |\n|                     Shift+KeyA |   A   |                   Shift+A |                   Shift+A |                    shift+a |         |\n|                  Ctrl+Alt+KeyA |  ---  |                Ctrl+Alt+A |                Ctrl+Alt+A |                 ctrl+alt+a |         |\n|            Ctrl+Shift+Alt+KeyA |  ---  |          Ctrl+Shift+Alt+A |          Ctrl+Shift+Alt+A |           ctrl+shift+alt+a |         |\n-----------------------------------------------------------------------------------------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Multi-line Vector Display Math\nDESCRIPTION: Display math block showing vector notation across multiple lines with leading and trailing expressions on same line.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/vscode-colorize-tests/test/colorize-fixtures/md-math.md#2025-04-23_snippet_11\n\nLANGUAGE: latex\nCODE:\n```\n$$ \\vec{a}\n\\vec{a}\n\\vec{a} $$\n```\n\n----------------------------------------\n\nTITLE: Keyboard Shortcut Mapping Tables (T-Y Keys)\nDESCRIPTION: These markdown tables define mappings for keyboard shortcuts involving the keys T, U, V, W, X, and Y, combined with modifiers like Ctrl, Shift, and Alt. Each row represents a specific key combination and provides its representation in different contexts: Hardware Code (HW Code combination), resulting character (Key), KeyCode combination, Priority (Pri), UI Label, User Settings format, Electron Accelerator format, and a Dispatching String format. This data is likely used for configuring or handling keyboard events within the PearAI application.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/src/vs/workbench/services/keybinding/test/node/mac_zh_hant.txt#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|                 Shift+Alt+KeyT |   T   |               Shift+Alt+T |     |            Shift+Option+T |                    shift+alt+t |               Shift+Alt+T |               shift+alt+[KeyT] |         |\n|            Ctrl+Shift+Alt+KeyT |   T   |          Ctrl+Shift+Alt+T |     |       Ctrl+Shift+Option+T |               ctrl+shift+alt+t |          Ctrl+Shift+Alt+T |          ctrl+shift+alt+[KeyT] |         |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|       HW Code combination      |  Key  |    KeyCode combination    | Pri |          UI label         |         User settings          |    Electron accelerator   |       Dispatching string       | WYSIWYG |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyU |   ㄧ   |                         U |     |                         U |                              u |                         U |                         [KeyU] |         |\n|                      Ctrl+KeyU |   ㄧ   |                    Ctrl+U |     |                    Ctrl+U |                         ctrl+u |                    Ctrl+U |                    ctrl+[KeyU] |         |\n|                     Shift+KeyU |   U   |                   Shift+U |     |                   Shift+U |                        shift+u |                   Shift+U |                   shift+[KeyU] |         |\n|                Ctrl+Shift+KeyU |   U   |              Ctrl+Shift+U |     |              Ctrl+Shift+U |                   ctrl+shift+u |              Ctrl+Shift+U |              ctrl+shift+[KeyU] |         |\n|                       Alt+KeyU |   ㄧ   |                     Alt+U |     |                  Option+U |                          alt+u |                     Alt+U |                     alt+[KeyU] |         |\n|                  Ctrl+Alt+KeyU |   u   |                Ctrl+Alt+U |     |             Ctrl+Option+U |                     ctrl+alt+u |                Ctrl+Alt+U |                ctrl+alt+[KeyU] |         |\n|                 Shift+Alt+KeyU |   U   |               Shift+Alt+U |     |            Shift+Option+U |                    shift+alt+u |               Shift+Alt+U |               shift+alt+[KeyU] |         |\n|            Ctrl+Shift+Alt+KeyU |   U   |          Ctrl+Shift+Alt+U |     |       Ctrl+Shift+Option+U |               ctrl+shift+alt+u |          Ctrl+Shift+Alt+U |          ctrl+shift+alt+[KeyU] |         |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyV |   ㄒ   |                         V |     |                         V |                              v |                         V |                         [KeyV] |         |\n|                      Ctrl+KeyV |   ㄒ   |                    Ctrl+V |     |                    Ctrl+V |                         ctrl+v |                    Ctrl+V |                    ctrl+[KeyV] |         |\n|                     Shift+KeyV |   V   |                   Shift+V |     |                   Shift+V |                        shift+v |                   Shift+V |                   shift+[KeyV] |         |\n|                Ctrl+Shift+KeyV |   V   |              Ctrl+Shift+V |     |              Ctrl+Shift+V |                   ctrl+shift+v |              Ctrl+Shift+V |              ctrl+shift+[KeyV] |         |\n|                       Alt+KeyV |   ㄒ   |                     Alt+V |     |                  Option+V |                          alt+v |                     Alt+V |                     alt+[KeyV] |         |\n|                  Ctrl+Alt+KeyV |   v   |                Ctrl+Alt+V |     |             Ctrl+Option+V |                     ctrl+alt+v |                Ctrl+Alt+V |                ctrl+alt+[KeyV] |         |\n|                 Shift+Alt+KeyV |   V   |               Shift+Alt+V |     |            Shift+Option+V |                    shift+alt+v |               Shift+Alt+V |               shift+alt+[KeyV] |         |\n|            Ctrl+Shift+Alt+KeyV |   V   |          Ctrl+Shift+Alt+V |     |       Ctrl+Shift+Option+V |               ctrl+shift+alt+v |          Ctrl+Shift+Alt+V |          ctrl+shift+alt+[KeyV] |         |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyW |   ㄊ   |                         W |     |                         W |                              w |                         W |                         [KeyW] |         |\n|                      Ctrl+KeyW |   ㄊ   |                    Ctrl+W |     |                    Ctrl+W |                         ctrl+w |                    Ctrl+W |                    ctrl+[KeyW] |         |\n|                     Shift+KeyW |   W   |                   Shift+W |     |                   Shift+W |                        shift+w |                   Shift+W |                   shift+[KeyW] |         |\n|                Ctrl+Shift+KeyW |   W   |              Ctrl+Shift+W |     |              Ctrl+Shift+W |                   ctrl+shift+w |              Ctrl+Shift+W |              ctrl+shift+[KeyW] |         |\n|                       Alt+KeyW |   ㄊ   |                     Alt+W |     |                  Option+W |                          alt+w |                     Alt+W |                     alt+[KeyW] |         |\n|                  Ctrl+Alt+KeyW |   w   |                Ctrl+Alt+W |     |             Ctrl+Option+W |                     ctrl+alt+w |                Ctrl+Alt+W |                ctrl+alt+[KeyW] |         |\n|                 Shift+Alt+KeyW |   W   |               Shift+Alt+W |     |            Shift+Option+W |                    shift+alt+w |               Shift+Alt+W |               shift+alt+[KeyW] |         |\n|            Ctrl+Shift+Alt+KeyW |   W   |          Ctrl+Shift+Alt+W |     |       Ctrl+Shift+Option+W |               ctrl+shift+alt+w |          Ctrl+Shift+Alt+W |          ctrl+shift+alt+[KeyW] |         |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyX |   ㄌ   |                         X |     |                         X |                              x |                         X |                         [KeyX] |         |\n|                      Ctrl+KeyX |   ㄌ   |                    Ctrl+X |     |                    Ctrl+X |                         ctrl+x |                    Ctrl+X |                    ctrl+[KeyX] |         |\n|                     Shift+KeyX |   X   |                   Shift+X |     |                   Shift+X |                        shift+x |                   Shift+X |                   shift+[KeyX] |         |\n|                Ctrl+Shift+KeyX |   X   |              Ctrl+Shift+X |     |              Ctrl+Shift+X |                   ctrl+shift+x |              Ctrl+Shift+X |              ctrl+shift+[KeyX] |         |\n|                       Alt+KeyX |   ㄌ   |                     Alt+X |     |                  Option+X |                          alt+x |                     Alt+X |                     alt+[KeyX] |         |\n|                  Ctrl+Alt+KeyX |   x   |                Ctrl+Alt+X |     |             Ctrl+Option+X |                     ctrl+alt+x |                Ctrl+Alt+X |                ctrl+alt+[KeyX] |         |\n|                 Shift+Alt+KeyX |   X   |               Shift+Alt+X |     |            Shift+Option+X |                    shift+alt+x |               Shift+Alt+X |               shift+alt+[KeyX] |         |\n|            Ctrl+Shift+Alt+KeyX |   X   |          Ctrl+Shift+Alt+X |     |       Ctrl+Shift+Option+X |               ctrl+shift+alt+x |          Ctrl+Shift+Alt+X |          ctrl+shift+alt+[KeyX] |         |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|       HW Code combination      |  Key  |    KeyCode combination    | Pri |          UI label         |         User settings          |    Electron accelerator   |       Dispatching string       | WYSIWYG |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyY |   ㄗ   |                         Y |     |                         Y |                              y |                         Y |                         [KeyY] |         |\n|                      Ctrl+KeyY |   ㄗ   |                    Ctrl+Y |     |                    Ctrl+Y |                         ctrl+y |                    Ctrl+Y |                    ctrl+[KeyY] |         |\n|                     Shift+KeyY |   Y   |                   Shift+Y |     |                   Shift+Y |                        shift+y |                   Shift+Y |                   shift+[KeyY] |         |\n|                Ctrl+Shift+KeyY |   Y   |              Ctrl+Shift+Y |     |              Ctrl+Shift+Y |                   ctrl+shift+y |              Ctrl+Shift+Y |              ctrl+shift+[KeyY] |         |\n```\n\n----------------------------------------\n\nTITLE: Display Math Block with Comment in LaTeX\nDESCRIPTION: Display math block showing theta symbol with a comment that should be properly handled.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/vscode-colorize-tests/test/colorize-fixtures/md-math.md#2025-04-23_snippet_1\n\nLANGUAGE: latex\nCODE:\n```\n$$\n\\theta{ % comment\n$$\n```\n\n----------------------------------------\n\nTITLE: Keyboard Shortcut Mapping Table\nDESCRIPTION: Table mapping various keyboard combinations including hardware codes, keycodes, UI labels, user settings, and Electron accelerators. Shows modifier key combinations with digits and their corresponding outputs.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/src/vs/workbench/services/keybinding/test/node/mac_zh_hant.txt#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n|       HW Code combination      |  Key  |    KeyCode combination    | Pri |          UI label         |         User settings          |    Electron accelerator   |       Dispatching string       | WYSIWYG |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                         Digit4 |   ˋ   |                         4 |     |                         ˋ |                              4 |                         4 |                       [Digit4] |    NO   |\n```\n\n----------------------------------------\n\nTITLE: Defining Schema Associations Interfaces in TypeScript\nDESCRIPTION: This code snippet defines TypeScript interfaces for schema associations. It includes ISchemaAssociations for file pattern to schema URI mappings, and ISchemaAssociation for more detailed schema association properties including URI, file matches, folder URI, and optional schema.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/json-language-features/server/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ISchemaAssociations {\n  /**\n   * An object where:\n   *  - keys are file names or file paths (using `/` as path separator). `*` can be used as a wildcard.\n   *  - values are an arrays of schema URIs\n   */\n  [pattern: string]: string[];\n}\n\ninterface ISchemaAssociation {\n  /**\n   * The URI of the schema, which is also the identifier of the schema.\n   */\n  uri: string;\n\n  /**\n   * A list of file path patterns that are associated to the schema. The '*' wildcard can be used. Exclusion patterns starting with '!'.\n   * For example '*.schema.json', 'package.json', '!foo*.schema.json'.\n   * A match succeeds when there is at least one pattern matching and last matching pattern does not start with '!'.\n   */\n  fileMatch: string[];\n  /**\n   * If provided, the association is only used if the validated document is located in the given folder (directly or in a subfolder)\n   */\n  folderUri?: string;\n  /*\n   * The schema for the given URI.\n   * If no schema is provided, the schema will be fetched with the schema request service (if available).\n   */\n  schema?: JSONSchema;\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Numeric Sequence\nDESCRIPTION: A simple numeric sequence written as plain text, displaying numbers from 1 to 5 on separate lines.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/markdown-language-features/test-workspace/sub/foo.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n1\n2\n3\n4\n5\n```\n\n----------------------------------------\n\nTITLE: Displaying JSON in Markdown with MIME Type\nDESCRIPTION: This code block shows how to display JSON content in Markdown using a code fence with a specified MIME type.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/vscode-colorize-tests/test/colorize-fixtures/test.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{ value: [\"or with a mime type\"] }\n```\n\n----------------------------------------\n\nTITLE: Setting Keyboard Layout Standard (Configuration)\nDESCRIPTION: This configuration line sets the `isUSStandard` flag to `false`, indicating that the keyboard layout configurations that follow are intended for a non-US standard keyboard. This setting likely influences how keyboard events and mappings are processed within the application.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/src/vs/workbench/services/keybinding/test/node/mac_zh_hant2.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nisUSStandard: false\n```\n\n----------------------------------------\n\nTITLE: Vector Notation Example\nDESCRIPTION: Simple vector notation example shown on a single line.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/vscode-colorize-tests/test/colorize-fixtures/md-math.md#2025-04-23_snippet_13\n\nLANGUAGE: latex\nCODE:\n```\n\\vec{a}\n```\n\n----------------------------------------\n\nTITLE: Defining Key Mappings A-E with Modifiers (Configuration Table)\nDESCRIPTION: This table defines detailed keyboard shortcut mappings for keys A through E, including combinations with Ctrl, Shift, and Alt modifiers, tailored for a non-US standard layout. Each row maps a specific hardware key combination (`HW Code combination`) to its resulting character (`Key`), `KeyCode` representation, display text (`UI label`), user settings format, Electron-specific accelerator string, and an internal dispatching string.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/src/vs/workbench/services/keybinding/test/node/mac_zh_hant2.txt#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|       HW Code combination      |  Key  |    KeyCode combination    | Pri |          UI label         |         User settings          |    Electron accelerator   |       Dispatching string       | WYSIWYG |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyA |   a   |                         A |     |                         A |                              a |                         A |                         [KeyA] |         |\n|                      Ctrl+KeyA |   a   |                    Ctrl+A |     |                    Ctrl+A |                         ctrl+a |                    Ctrl+A |                    ctrl+[KeyA] |         |\n|                     Shift+KeyA |   A   |                   Shift+A |     |                   Shift+A |                        shift+a |                   Shift+A |                   shift+[KeyA] |         |\n|                Ctrl+Shift+KeyA |   A   |              Ctrl+Shift+A |     |              Ctrl+Shift+A |                   ctrl+shift+a |              Ctrl+Shift+A |              ctrl+shift+[KeyA] |         |\n|                       Alt+KeyA |   a   |                     Alt+A |     |                  Option+A |                          alt+a |                     Alt+A |                     alt+[KeyA] |         |\n|                  Ctrl+Alt+KeyA |   å   |                Ctrl+Alt+A |     |             Ctrl+Option+A |                     ctrl+alt+a |                Ctrl+Alt+A |                ctrl+alt+[KeyA] |         |\n|                 Shift+Alt+KeyA |   A   |               Shift+Alt+A |     |            Shift+Option+A |                    shift+alt+a |               Shift+Alt+A |               shift+alt+[KeyA] |         |\n|            Ctrl+Shift+Alt+KeyA |   Å   |          Ctrl+Shift+Alt+A |     |       Ctrl+Shift+Option+A |               ctrl+shift+alt+a |          Ctrl+Shift+Alt+A |          ctrl+shift+alt+[KeyA] |         |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyB |   b   |                         B |     |                         B |                              b |                         B |                         [KeyB] |         |\n|                      Ctrl+KeyB |   b   |                    Ctrl+B |     |                    Ctrl+B |                         ctrl+b |                    Ctrl+B |                    ctrl+[KeyB] |         |\n|                     Shift+KeyB |   B   |                   Shift+B |     |                   Shift+B |                        shift+b |                   Shift+B |                   shift+[KeyB] |         |\n|                Ctrl+Shift+KeyB |   B   |              Ctrl+Shift+B |     |              Ctrl+Shift+B |                   ctrl+shift+b |              Ctrl+Shift+B |              ctrl+shift+[KeyB] |         |\n|                       Alt+KeyB |   b   |                     Alt+B |     |                  Option+B |                          alt+b |                     Alt+B |                     alt+[KeyB] |         |\n|                  Ctrl+Alt+KeyB |   ∫   |                Ctrl+Alt+B |     |             Ctrl+Option+B |                     ctrl+alt+b |                Ctrl+Alt+B |                ctrl+alt+[KeyB] |         |\n|                 Shift+Alt+KeyB |   B   |               Shift+Alt+B |     |            Shift+Option+B |                    shift+alt+b |               Shift+Alt+B |               shift+alt+[KeyB] |         |\n|            Ctrl+Shift+Alt+KeyB |   符   |          Ctrl+Shift+Alt+B |     |       Ctrl+Shift+Option+B |               ctrl+shift+alt+b |          Ctrl+Shift+Alt+B |          ctrl+shift+alt+[KeyB] |         |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyC |   c   |                         C |     |                         C |                              c |                         C |                         [KeyC] |         |\n|                      Ctrl+KeyC |   c   |                    Ctrl+C |     |                    Ctrl+C |                         ctrl+c |                    Ctrl+C |                    ctrl+[KeyC] |         |\n|                     Shift+KeyC |   C   |                   Shift+C |     |                   Shift+C |                        shift+c |                   Shift+C |                   shift+[KeyC] |         |\n|                Ctrl+Shift+KeyC |   C   |              Ctrl+Shift+C |     |              Ctrl+Shift+C |                   ctrl+shift+c |              Ctrl+Shift+C |              ctrl+shift+[KeyC] |         |\n|                       Alt+KeyC |   c   |                     Alt+C |     |                  Option+C |                          alt+c |                     Alt+C |                     alt+[KeyC] |         |\n|                  Ctrl+Alt+KeyC |   ç   |                Ctrl+Alt+C |     |             Ctrl+Option+C |                     ctrl+alt+c |                Ctrl+Alt+C |                ctrl+alt+[KeyC] |         |\n|                 Shift+Alt+KeyC |   C   |               Shift+Alt+C |     |            Shift+Option+C |                    shift+alt+c |               Shift+Alt+C |               shift+alt+[KeyC] |         |\n|            Ctrl+Shift+Alt+KeyC |   Ç   |          Ctrl+Shift+Alt+C |     |       Ctrl+Shift+Option+C |               ctrl+shift+alt+c |          Ctrl+Shift+Alt+C |          ctrl+shift+alt+[KeyC] |         |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyD |   d   |                         D |     |                         D |                              d |                         D |                         [KeyD] |         |\n|                      Ctrl+KeyD |   d   |                    Ctrl+D |     |                    Ctrl+D |                         ctrl+d |                    Ctrl+D |                    ctrl+[KeyD] |         |\n|                     Shift+KeyD |   D   |                   Shift+D |     |                   Shift+D |                        shift+d |                   Shift+D |                   shift+[KeyD] |         |\n|                Ctrl+Shift+KeyD |   D   |              Ctrl+Shift+D |     |              Ctrl+Shift+D |                   ctrl+shift+d |              Ctrl+Shift+D |              ctrl+shift+[KeyD] |         |\n|                       Alt+KeyD |   d   |                     Alt+D |     |                  Option+D |                          alt+d |                     Alt+D |                     alt+[KeyD] |         |\n|                  Ctrl+Alt+KeyD |   ∂   |                Ctrl+Alt+D |     |             Ctrl+Option+D |                     ctrl+alt+d |                Ctrl+Alt+D |                ctrl+alt+[KeyD] |         |\n|                 Shift+Alt+KeyD |   D   |               Shift+Alt+D |     |            Shift+Option+D |                    shift+alt+d |               Shift+Alt+D |               shift+alt+[KeyD] |         |\n|            Ctrl+Shift+Alt+KeyD |   Î   |          Ctrl+Shift+Alt+D |     |       Ctrl+Shift+Option+D |               ctrl+shift+alt+d |          Ctrl+Shift+Alt+D |          ctrl+shift+alt+[KeyD] |         |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|       HW Code combination      |  Key  |    KeyCode combination    | Pri |          UI label         |         User settings          |    Electron accelerator   |       Dispatching string       | WYSIWYG |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyE |   e   |                         E |     |                         E |                              e |                         E |                         [KeyE] |         |\n|                      Ctrl+KeyE |   e   |                    Ctrl+E |     |                    Ctrl+E |                         ctrl+e |                    Ctrl+E |                    ctrl+[KeyE] |         |\n|                     Shift+KeyE |   E   |                   Shift+E |     |                   Shift+E |                        shift+e |                   Shift+E |                   shift+[KeyE] |         |\n|                Ctrl+Shift+KeyE |   E   |              Ctrl+Shift+E |     |              Ctrl+Shift+E |                   ctrl+shift+e |              Ctrl+Shift+E |              ctrl+shift+[KeyE] |         |\n|                       Alt+KeyE |   e   |                     Alt+E |     |                  Option+E |                          alt+e |                     Alt+E |                     alt+[KeyE] |         |\n|                  Ctrl+Alt+KeyE |   ´   |                Ctrl+Alt+E |     |             Ctrl+Option+E |                     ctrl+alt+e |                Ctrl+Alt+E |                ctrl+alt+[KeyE] |         |\n```\n\n----------------------------------------\n\nTITLE: Displaying a Markdown Comment in Code Block\nDESCRIPTION: A code block displaying a markdown comment line prefixed with '#' character.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/vscode-colorize-tests/test/colorize-fixtures/test-33886.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# a\n```\n\n----------------------------------------\n\nTITLE: Mapping Keyboard Shortcuts (T-Y) for PearAI App\nDESCRIPTION: Defines the keyboard shortcut mappings for the letters T, U, V, W, X, and Y, including combinations with Ctrl, Shift, and Alt modifiers. Each row details the Hardware Code, Key, KeyCode Combination, UI Label, User Settings representation, Electron Accelerator format, and the resulting Dispatching String used within the PearAI application.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/src/vs/workbench/services/keybinding/test/node/mac_zh_hant2.txt#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n|                 Shift+Alt+KeyT |   T   |               Shift+Alt+T |     |            Shift+Option+T |                    shift+alt+t |               Shift+Alt+T |               shift+alt+[KeyT] |         |\\n|            Ctrl+Shift+Alt+KeyT |   ˇ   |          Ctrl+Shift+Alt+T |     |       Ctrl+Shift+Option+T |               ctrl+shift+alt+t |          Ctrl+Shift+Alt+T |          ctrl+shift+alt+[KeyT] |         |\\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\\n|       HW Code combination      |  Key  |    KeyCode combination    | Pri |          UI label         |         User settings          |    Electron accelerator   |       Dispatching string       | WYSIWYG |\\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\\n|                           KeyU |   u   |                         U |     |                         U |                              u |                         U |                         [KeyU] |         |\\n|                      Ctrl+KeyU |   u   |                    Ctrl+U |     |                    Ctrl+U |                         ctrl+u |                    Ctrl+U |                    ctrl+[KeyU] |         |\\n|                     Shift+KeyU |   U   |                   Shift+U |     |                   Shift+U |                        shift+u |                   Shift+U |                   shift+[KeyU] |         |\\n|                Ctrl+Shift+KeyU |   U   |              Ctrl+Shift+U |     |              Ctrl+Shift+U |                   ctrl+shift+u |              Ctrl+Shift+U |              ctrl+shift+[KeyU] |         |\\n|                       Alt+KeyU |   u   |                     Alt+U |     |                  Option+U |                          alt+u |                     Alt+U |                     alt+[KeyU] |         |\\n|                  Ctrl+Alt+KeyU |   ¨   |                Ctrl+Alt+U |     |             Ctrl+Option+U |                     ctrl+alt+u |                Ctrl+Alt+U |                ctrl+alt+[KeyU] |         |\\n|                 Shift+Alt+KeyU |   U   |               Shift+Alt+U |     |            Shift+Option+U |                    shift+alt+u |               Shift+Alt+U |               shift+alt+[KeyU] |         |\\n|            Ctrl+Shift+Alt+KeyU |   ¨   |          Ctrl+Shift+Alt+U |     |       Ctrl+Shift+Option+U |               ctrl+shift+alt+u |          Ctrl+Shift+Alt+U |          ctrl+shift+alt+[KeyU] |         |\\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\\n|                           KeyV |   v   |                         V |     |                         V |                              v |                         V |                         [KeyV] |         |\\n|                      Ctrl+KeyV |   v   |                    Ctrl+V |     |                    Ctrl+V |                         ctrl+v |                    Ctrl+V |                    ctrl+[KeyV] |         |\\n|                     Shift+KeyV |   V   |                   Shift+V |     |                   Shift+V |                        shift+v |                   Shift+V |                   shift+[KeyV] |         |\\n|                Ctrl+Shift+KeyV |   V   |              Ctrl+Shift+V |     |              Ctrl+Shift+V |                   ctrl+shift+v |              Ctrl+Shift+V |              ctrl+shift+[KeyV] |         |\\n|                       Alt+KeyV |   v   |                     Alt+V |     |                  Option+V |                          alt+v |                     Alt+V |                     alt+[KeyV] |         |\\n|                  Ctrl+Alt+KeyV |   √   |                Ctrl+Alt+V |     |             Ctrl+Option+V |                     ctrl+alt+v |                Ctrl+Alt+V |                ctrl+alt+[KeyV] |         |\\n|                 Shift+Alt+KeyV |   V   |               Shift+Alt+V |     |            Shift+Option+V |                    shift+alt+v |               Shift+Alt+V |               shift+alt+[KeyV] |         |\\n|            Ctrl+Shift+Alt+KeyV |   ◊   |          Ctrl+Shift+Alt+V |     |       Ctrl+Shift+Option+V |               ctrl+shift+alt+v |          Ctrl+Shift+Alt+V |          ctrl+shift+alt+[KeyV] |         |\\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\\n|                           KeyW |   w   |                         W |     |                         W |                              w |                         W |                         [KeyW] |         |\\n|                      Ctrl+KeyW |   w   |                    Ctrl+W |     |                    Ctrl+W |                         ctrl+w |                    Ctrl+W |                    ctrl+[KeyW] |         |\\n|                     Shift+KeyW |   W   |                   Shift+W |     |                   Shift+W |                        shift+w |                   Shift+W |                   shift+[KeyW] |         |\\n|                Ctrl+Shift+KeyW |   W   |              Ctrl+Shift+W |     |              Ctrl+Shift+W |                   ctrl+shift+w |              Ctrl+Shift+W |              ctrl+shift+[KeyW] |         |\\n|                       Alt+KeyW |   w   |                     Alt+W |     |                  Option+W |                          alt+w |                     Alt+W |                     alt+[KeyW] |         |\\n|                  Ctrl+Alt+KeyW |   ∑   |                Ctrl+Alt+W |     |             Ctrl+Option+W |                     ctrl+alt+w |                Ctrl+Alt+W |                ctrl+alt+[KeyW] |         |\\n|                 Shift+Alt+KeyW |   W   |               Shift+Alt+W |     |            Shift+Option+W |                    shift+alt+w |               Shift+Alt+W |               shift+alt+[KeyW] |         |\\n|            Ctrl+Shift+Alt+KeyW |   „   |          Ctrl+Shift+Alt+W |     |       Ctrl+Shift+Option+W |               ctrl+shift+alt+w |          Ctrl+Shift+Alt+W |          ctrl+shift+alt+[KeyW] |         |\\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\\n|                           KeyX |   x   |                         X |     |                         X |                              x |                         X |                         [KeyX] |         |\\n|                      Ctrl+KeyX |   x   |                    Ctrl+X |     |                    Ctrl+X |                         ctrl+x |                    Ctrl+X |                    ctrl+[KeyX] |         |\\n|                     Shift+KeyX |   X   |                   Shift+X |     |                   Shift+X |                        shift+x |                   Shift+X |                   shift+[KeyX] |         |\\n|                Ctrl+Shift+KeyX |   X   |              Ctrl+Shift+X |     |              Ctrl+Shift+X |                   ctrl+shift+x |              Ctrl+Shift+X |              ctrl+shift+[KeyX] |         |\\n|                       Alt+KeyX |   x   |                     Alt+X |     |                  Option+X |                          alt+x |                     Alt+X |                     alt+[KeyX] |         |\\n|                  Ctrl+Alt+KeyX |   ≈   |                Ctrl+Alt+X |     |             Ctrl+Option+X |                     ctrl+alt+x |                Ctrl+Alt+X |                ctrl+alt+[KeyX] |         |\\n|                 Shift+Alt+KeyX |   X   |               Shift+Alt+X |     |            Shift+Option+X |                    shift+alt+x |               Shift+Alt+X |               shift+alt+[KeyX] |         |\\n|            Ctrl+Shift+Alt+KeyX |   ˛   |          Ctrl+Shift+Alt+X |     |       Ctrl+Shift+Option+X |               ctrl+shift+alt+x |          Ctrl+Shift+Alt+X |          ctrl+shift+alt+[KeyX] |         |\\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\\n|       HW Code combination      |  Key  |    KeyCode combination    | Pri |          UI label         |         User settings          |    Electron accelerator   |       Dispatching string       | WYSIWYG |\\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\\n|                           KeyY |   y   |                         Y |     |                         Y |                              y |                         Y |                         [KeyY] |         |\\n|                      Ctrl+KeyY |   y   |                    Ctrl+Y |     |                    Ctrl+Y |                         ctrl+y |                    Ctrl+Y |                    ctrl+[KeyY] |         |\\n|                     Shift+KeyY |   Y   |                   Shift+Y |     |                   Shift+Y |                        shift+y |                   Shift+Y |                   shift+[KeyY] |         |\\n|                Ctrl+Shift+KeyY |   Y   |              Ctrl+Shift+Y |     |              Ctrl+Shift+Y |                   ctrl+shift+y |              Ctrl+Shift+Y |              ctrl+shift+[KeyY] |         |\n```\n\n----------------------------------------\n\nTITLE: Markdown Link Formatting - Tilde Code Block\nDESCRIPTION: A Markdown link format shown in a code block using tilde syntax.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/markdown-language-features/test-workspace/a.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[b](b)\n```\n\n----------------------------------------\n\nTITLE: Specifying Babel Types Dependency in YAML\nDESCRIPTION: This snippet defines the version requirement for the @babel/types package.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/src/vs/editor/test/node/diffing/fixtures/issue-204948/1.txt#2025-04-23_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n\"@babel/types\" \"^7.22.15\"\n```\n\n----------------------------------------\n\nTITLE: Comment Sub Definition JavaScript\nDESCRIPTION: Single line JavaScript comment containing the text 'sub'\nSOURCE: https://github.com/trypear/pearai-app/blob/main/src/vs/workbench/services/search/test/node/fixtures/examples/subfolder/subfile.txt#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// sub\n```\n\n----------------------------------------\n\nTITLE: Basic Display Math Block in LaTeX\nDESCRIPTION: Simple display math block showing the theta symbol using double dollar signs ($$...$$).\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/vscode-colorize-tests/test/colorize-fixtures/md-math.md#2025-04-23_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\n$$\n\\theta\n$$\n```\n\n----------------------------------------\n\nTITLE: Continued Fraction LaTeX Expression\nDESCRIPTION: Inline math showing a continued fraction with nested fractions using \\frac command.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/vscode-colorize-tests/test/colorize-fixtures/md-math.md#2025-04-23_snippet_5\n\nLANGUAGE: latex\nCODE:\n```\n$\nx = a_0 + \\frac{1}{a_1 + \\frac{1}{a_2 + \\frac{1}{a_3 + a_4}}}\n$\n```\n\n----------------------------------------\n\nTITLE: Markdown Link Formatting - Basic Code Block\nDESCRIPTION: A basic Markdown link format shown in a standard code block using backticks.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/markdown-language-features/test-workspace/a.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[b](b)\n```\n\n----------------------------------------\n\nTITLE: Markdown Link Formatting - Indented Code\nDESCRIPTION: A Markdown link format shown using indented code block style with 4 spaces.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/markdown-language-features/test-workspace/a.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n    // Indented code\n    [b](b)\n```\n\n----------------------------------------\n\nTITLE: Small Matrix LaTeX Expression in Inline Mode\nDESCRIPTION: Inline math using the smallmatrix environment to create a compact 2x2 matrix.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/vscode-colorize-tests/test/colorize-fixtures/md-math.md#2025-04-23_snippet_4\n\nLANGUAGE: latex\nCODE:\n```\n$\n\\begin{smallmatrix}\n   1 & 2 \\\\\n   4 & 3\n\\end{smallmatrix}\n$\n```\n\n----------------------------------------\n\nTITLE: Creating First-Level Header in Markdown\nDESCRIPTION: This snippet demonstrates how to create a first-level header in Markdown using the '#' symbol. Headers are used to structure content and create hierarchical organization in Markdown documents.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/markdown-language-features/test-workspace/sub with space/file.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# header\n```\n\n----------------------------------------\n\nTITLE: Embedding HTML with Markdown in Koka\nDESCRIPTION: This snippet demonstrates how to embed HTML within a Markdown document, including a nested div, a Koka code block, and inline styling.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/vscode-colorize-tests/test/colorize-fixtures/test.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"custom-class\" markdown=\"1\">\n  <div>\n    nested div\n  </div>\n  <script type='text/x-koka'>\n    function( x: int ) { return x*x; }\n  </script>\n  This is a div _with_ underscores\n  and a & <b class=\"bold\">bold</b> element.\n  <style>\n    body { font: \"Consolas\" }\n  </style>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Vector Assignment Inline Math\nDESCRIPTION: Inline math showing a vector assignment with values in a multi-line format.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/vscode-colorize-tests/test/colorize-fixtures/md-math.md#2025-04-23_snippet_14\n\nLANGUAGE: latex\nCODE:\n```\n$ \\vec{a}\n\\vec{a}\n = [2, 3] $\n```\n\n----------------------------------------\n\nTITLE: Tilde-Wrapped Code Block in Markdown\nDESCRIPTION: This example shows how to create a code block wrapped with tildes in Markdown, which is an alternative to indented code blocks.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/vscode-colorize-tests/test/colorize-fixtures/test.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n// Markdown extra adds un-indented code blocks too\n\nif (this_is_more_code == true && !indented) {\n    // tild wrapped code blocks, also not indented\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Markdown Comment and Text in Preformatted Block\nDESCRIPTION: A preformatted block showing a markdown comment line followed by a single character 'a'.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/vscode-colorize-tests/test/colorize-fixtures/test-33886.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# a\na\n```\n\n----------------------------------------\n\nTITLE: LaTeX Aligned Equations in List Item\nDESCRIPTION: Example of aligned equations within a list item, demonstrating inconsistent KaTeX keyword highlighting behavior.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/vscode-colorize-tests/test/colorize-fixtures/md-math.md#2025-04-23_snippet_8\n\nLANGUAGE: latex\nCODE:\n```\n$$\n\\begin{aligned}\n    &\\text{Any equation}\n    \\\\\n    &\\text {Inconsistent KaTeX keyword highlighting}\n\\end{aligned}\n$$\n```\n\n----------------------------------------\n\nTITLE: Applying Apache License 2.0 Boilerplate Notice (Template)\nDESCRIPTION: This is the standard boilerplate notice recommended by the Apache License 2.0 appendix. It should be included, typically within comments appropriate for the file format, at the beginning of source files to indicate they are licensed under Apache 2.0. The placeholders `[yyyy]` and `[name of copyright owner]` must be replaced with the actual year and copyright holder's name.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/cli/ThirdPartyNotices.txt#2025-04-23_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Multi-line Vector Inline Math\nDESCRIPTION: Inline math block showing vector notation across multiple lines with leading and trailing expressions on same line.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/vscode-colorize-tests/test/colorize-fixtures/md-math.md#2025-04-23_snippet_12\n\nLANGUAGE: latex\nCODE:\n```\n$ \\vec{a}\n\\vec{a}\n\\vec{a} $\n```\n\n----------------------------------------\n\nTITLE: Applying Apache License Boilerplate Notice\nDESCRIPTION: Standard copyright and license notice template for applying the Apache License to your work. Replace the bracketed fields with actual copyright information.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/cli/ThirdPartyNotices.txt#2025-04-23_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Inline Math Expression with Integral\nDESCRIPTION: Simple inline math expression ($...$) showing a variable assignment with an integral.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/vscode-colorize-tests/test/colorize-fixtures/md-math.md#2025-04-23_snippet_3\n\nLANGUAGE: latex\nCODE:\n```\n$\nx = 1.1 \\int_{a}\n$\n```\n\n----------------------------------------\n\nTITLE: LaTeX Text Command Variations\nDESCRIPTION: Example showing two different syntax variations of the \\text command, both with and without space after the command.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/vscode-colorize-tests/test/colorize-fixtures/md-math.md#2025-04-23_snippet_9\n\nLANGUAGE: latex\nCODE:\n```\n$$\n\\text{stuff}\n\\text {stuff}\n$$\n```\n\n----------------------------------------\n\nTITLE: MPL 2.0 Source Code Form License Notice (Exhibit A)\nDESCRIPTION: The standard license notice that must be included with Source Code Form distributed under the Mozilla Public License v2.0. This notice informs recipients of the licensing terms and provides information on where to obtain the full license text.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/src/vs/base/browser/dompurify/dompurify.license.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nThis Source Code Form is subject to the\nterms of the Mozilla Public License, v.\n2.0. If a copy of the MPL was not\ndistributed with this file, You can\nobtain one at\nhttp://mozilla.org/MPL/2.0/.\n```\n\n----------------------------------------\n\nTITLE: Multi-line LaTeX Fraction Block\nDESCRIPTION: Display math block showing a fraction across multiple lines with proper indentation.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/vscode-colorize-tests/test/colorize-fixtures/md-math.md#2025-04-23_snippet_15\n\nLANGUAGE: latex\nCODE:\n```\n$$\n    \\frac{1}{2}\n    $$\n```\n\n----------------------------------------\n\nTITLE: License Text for idna (MIT OR Apache-2.0)\nDESCRIPTION: Specifies the MIT OR Apache-2.0 license terms for the idna library (version 0.5.0), associated with servo/rust-url. Includes copyright notice (The rust-url developers, 2013-2022), permission grant, and warranty disclaimer.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/cli/ThirdPartyNotices.txt#2025-04-23_snippet_2\n\nLANGUAGE: Plain Text\nCODE:\n```\nidna 0.5.0 - MIT OR Apache-2.0\nhttps://github.com/servo/rust-url/\n\nCopyright (c) 2013-2022 The rust-url developers\n\nPermission is hereby granted, free of charge, to any\nperson obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the\nSoftware without restriction, including without\nlimitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice\nshall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\nSHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Fenced Code Block with LaTeX Example\nDESCRIPTION: Example of LaTeX in a fenced code block where highlighting should be disabled, showing the Cauchy-Schwarz inequality.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/vscode-colorize-tests/test/colorize-fixtures/md-math.md#2025-04-23_snippet_7\n\nLANGUAGE: txt\nCODE:\n```\n$$\n\\displaystyle\n\\left( \\sum_{k=1}^n a_k b_k \\right)^2\n\\leq\n\\left( \\sum_{k=1}^n a_k^2 \\right)\n\\left( \\sum_{k=1}^n b_k^2 \\right)\n$$\n```\n\n----------------------------------------\n\nTITLE: License Text for indicatif (MIT)\nDESCRIPTION: Specifies the MIT license terms for the indicatif library (version 0.17.8). Includes copyright notice (Armin Ronacher, 2017), permission grant, and warranty disclaimer.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/cli/ThirdPartyNotices.txt#2025-04-23_snippet_4\n\nLANGUAGE: Plain Text\nCODE:\n```\nindicatif 0.17.8 - MIT\nhttps://github.com/console-rs/indicatif\n\nThe MIT License (MIT)\n\nCopyright (c) 2017 Armin Ronacher <armin.ronacher@active-4.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: MPL 2.0 Incompatible With Secondary Licenses Notice (Exhibit B)\nDESCRIPTION: The notice that must be attached when distributing Source Code Form that is incompatible with Secondary Licenses under the Mozilla Public License v2.0. This declares the source code's incompatibility with certain license types.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/src/vs/base/browser/dompurify/dompurify.license.txt#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nThis Source Code Form is \"Incompatible\nWith Secondary Licenses\", as defined by\nthe Mozilla Public License, v. 2.0.\n```\n\n----------------------------------------\n\nTITLE: Indented Code Block with LaTeX\nDESCRIPTION: Example of LaTeX in an indented code block where highlighting should be disabled, showing a fraction.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/vscode-colorize-tests/test/colorize-fixtures/md-math.md#2025-04-23_snippet_10\n\nLANGUAGE: txt\nCODE:\n```\n    $$\n    \\frac{1}{2}\n    $$\n```\n\n----------------------------------------\n\nTITLE: Importing Diff Computation Interfaces from VS Code Editor in TypeScript\nDESCRIPTION: This code imports two interfaces (IChange and IDiffComputationResult) from the VS Code editor's diff computation module. These interfaces are likely used for implementing difference computation between text or code snippets.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/src/vs/editor/test/node/diffing/fixtures/penalize-fragmentation/1.txt#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { IChange, IDiffComputationResult } from 'vs/editor/common/diff/diffComputer';\n```\n\n----------------------------------------\n\nTITLE: License Information for inout (MIT OR Apache-2.0)\nDESCRIPTION: Indicates that the inout library (version 0.1.3) from RustCrypto/utils is available under either the Apache License, Version 2.0 or the MIT license at the user's option. This snippet provides the library details and states the dual-licensing choice.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/cli/ThirdPartyNotices.txt#2025-04-23_snippet_5\n\nLANGUAGE: Plain Text\nCODE:\n```\ninout 0.1.3 - MIT OR Apache-2.0\nhttps://github.com/RustCrypto/utils\n\nAll crates licensed under either of\n\n * [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0)\n * [MIT license](http://opensource.org/licenses/MIT)\n\nat your option.\n```\n\n----------------------------------------\n\nTITLE: Printing Multiple Lines in Python\nDESCRIPTION: This code snippet demonstrates how to use the print() function in Python to output multiple lines of text to the console. It prints two separate 'hello' messages.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/vscode-api-tests/testWorkspace/test.ipynb#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nprint('hello 1')\nprint('hello 2')\n```\n\n----------------------------------------\n\nTITLE: Installing JSON Language Server via npm\nDESCRIPTION: This command installs the vscode-json-languageserver npm module globally, which is required to run the JSON language server as a standalone command.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/extensions/json-language-features/server/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g vscode-json-languageserver\n```\n\n----------------------------------------\n\nTITLE: Keyboard Shortcuts Table for Keys A-E\nDESCRIPTION: This table provides a comprehensive mapping of keyboard shortcuts and their corresponding representations across different contexts. It includes hardware codes, key codes, UI labels, user settings, Electron accelerators, and dispatching strings for various key combinations.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/src/vs/workbench/services/keybinding/test/node/mac_de_ch.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nisUSStandard: false\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|       HW Code combination      |  Key  |    KeyCode combination    | Pri |          UI label         |         User settings          |    Electron accelerator   |       Dispatching string       | WYSIWYG |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyA |   a   |                         A |     |                         A |                              a |                         A |                         [KeyA] |         |\n|                      Ctrl+KeyA |   a   |                    Ctrl+A |     |                    Ctrl+A |                         ctrl+a |                    Ctrl+A |                    ctrl+[KeyA] |         |\n|                     Shift+KeyA |   A   |                   Shift+A |     |                   Shift+A |                        shift+a |                   Shift+A |                   shift+[KeyA] |         |\n|                Ctrl+Shift+KeyA |   A   |              Ctrl+Shift+A |     |              Ctrl+Shift+A |                   ctrl+shift+a |              Ctrl+Shift+A |              ctrl+shift+[KeyA] |         |\n|                       Alt+KeyA |   a   |                     Alt+A |     |                  Option+A |                          alt+a |                     Alt+A |                     alt+[KeyA] |         |\n|                  Ctrl+Alt+KeyA |   å   |                Ctrl+Alt+A |     |             Ctrl+Option+A |                     ctrl+alt+a |                Ctrl+Alt+A |                ctrl+alt+[KeyA] |         |\n|                 Shift+Alt+KeyA |   A   |               Shift+Alt+A |     |            Shift+Option+A |                    shift+alt+a |               Shift+Alt+A |               shift+alt+[KeyA] |         |\n|            Ctrl+Shift+Alt+KeyA |   Å   |          Ctrl+Shift+Alt+A |     |       Ctrl+Shift+Option+A |               ctrl+shift+alt+a |          Ctrl+Shift+Alt+A |          ctrl+shift+alt+[KeyA] |         |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyB |   b   |                         B |     |                         B |                              b |                         B |                         [KeyB] |         |\n|                      Ctrl+KeyB |   b   |                    Ctrl+B |     |                    Ctrl+B |                         ctrl+b |                    Ctrl+B |                    ctrl+[KeyB] |         |\n|                     Shift+KeyB |   B   |                   Shift+B |     |                   Shift+B |                        shift+b |                   Shift+B |                   shift+[KeyB] |         |\n|                Ctrl+Shift+KeyB |   B   |              Ctrl+Shift+B |     |              Ctrl+Shift+B |                   ctrl+shift+b |              Ctrl+Shift+B |              ctrl+shift+[KeyB] |         |\n|                       Alt+KeyB |   b   |                     Alt+B |     |                  Option+B |                          alt+b |                     Alt+B |                     alt+[KeyB] |         |\n|                  Ctrl+Alt+KeyB |   ∫   |                Ctrl+Alt+B |     |             Ctrl+Option+B |                     ctrl+alt+b |                Ctrl+Alt+B |                ctrl+alt+[KeyB] |         |\n|                 Shift+Alt+KeyB |   B   |               Shift+Alt+B |     |            Shift+Option+B |                    shift+alt+b |               Shift+Alt+B |               shift+alt+[KeyB] |         |\n|            Ctrl+Shift+Alt+KeyB |  ---  |          Ctrl+Shift+Alt+B |     |       Ctrl+Shift+Option+B |               ctrl+shift+alt+b |          Ctrl+Shift+Alt+B |          ctrl+shift+alt+[KeyB] |         |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyC |   c   |                         C |     |                         C |                              c |                         C |                         [KeyC] |         |\n|                      Ctrl+KeyC |   c   |                    Ctrl+C |     |                    Ctrl+C |                         ctrl+c |                    Ctrl+C |                    ctrl+[KeyC] |         |\n|                     Shift+KeyC |   C   |                   Shift+C |     |                   Shift+C |                        shift+c |                   Shift+C |                   shift+[KeyC] |         |\n|                Ctrl+Shift+KeyC |   C   |              Ctrl+Shift+C |     |              Ctrl+Shift+C |                   ctrl+shift+c |              Ctrl+Shift+C |              ctrl+shift+[KeyC] |         |\n|                       Alt+KeyC |   c   |                     Alt+C |     |                  Option+C |                          alt+c |                     Alt+C |                     alt+[KeyC] |         |\n|                  Ctrl+Alt+KeyC |   ©   |                Ctrl+Alt+C |     |             Ctrl+Option+C |                     ctrl+alt+c |                Ctrl+Alt+C |                ctrl+alt+[KeyC] |         |\n|                 Shift+Alt+KeyC |   C   |               Shift+Alt+C |     |            Shift+Option+C |                    shift+alt+c |               Shift+Alt+C |               shift+alt+[KeyC] |         |\n|            Ctrl+Shift+Alt+KeyC |  ---  |          Ctrl+Shift+Alt+C |     |       Ctrl+Shift+Option+C |               ctrl+shift+alt+c |          Ctrl+Shift+Alt+C |          ctrl+shift+alt+[KeyC] |         |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyD |   d   |                         D |     |                         D |                              d |                         D |                         [KeyD] |         |\n|                      Ctrl+KeyD |   d   |                    Ctrl+D |     |                    Ctrl+D |                         ctrl+d |                    Ctrl+D |                    ctrl+[KeyD] |         |\n|                     Shift+KeyD |   D   |                   Shift+D |     |                   Shift+D |                        shift+d |                   Shift+D |                   shift+[KeyD] |         |\n|                Ctrl+Shift+KeyD |   D   |              Ctrl+Shift+D |     |              Ctrl+Shift+D |                   ctrl+shift+d |              Ctrl+Shift+D |              ctrl+shift+[KeyD] |         |\n|                       Alt+KeyD |   d   |                     Alt+D |     |                  Option+D |                          alt+d |                     Alt+D |                     alt+[KeyD] |         |\n|                  Ctrl+Alt+KeyD |   ∂   |                Ctrl+Alt+D |     |             Ctrl+Option+D |                     ctrl+alt+d |                Ctrl+Alt+D |                ctrl+alt+[KeyD] |         |\n|                 Shift+Alt+KeyD |   D   |               Shift+Alt+D |     |            Shift+Option+D |                    shift+alt+d |               Shift+Alt+D |               shift+alt+[KeyD] |         |\n|            Ctrl+Shift+Alt+KeyD |   ﬂ   |          Ctrl+Shift+Alt+D |     |       Ctrl+Shift+Option+D |               ctrl+shift+alt+d |          Ctrl+Shift+Alt+D |          ctrl+shift+alt+[KeyD] |         |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|       HW Code combination      |  Key  |    KeyCode combination    | Pri |          UI label         |         User settings          |    Electron accelerator   |       Dispatching string       | WYSIWYG |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyE |   e   |                         E |     |                         E |                              e |                         E |                         [KeyE] |         |\n|                      Ctrl+KeyE |   e   |                    Ctrl+E |     |                    Ctrl+E |                         ctrl+e |                    Ctrl+E |                    ctrl+[KeyE] |         |\n|                     Shift+KeyE |   E   |                   Shift+E |     |                   Shift+E |                        shift+e |                   Shift+E |                   shift+[KeyE] |         |\n|                Ctrl+Shift+KeyE |   E   |              Ctrl+Shift+E |     |              Ctrl+Shift+E |                   ctrl+shift+e |              Ctrl+Shift+E |              ctrl+shift+[KeyE] |         |\n|                       Alt+KeyE |   e   |                     Alt+E |     |                  Option+E |                          alt+e |                     Alt+E |                     alt+[KeyE] |         |\n|                  Ctrl+Alt+KeyE |   €   |                Ctrl+Alt+E |     |             Ctrl+Option+E |                     ctrl+alt+e |                Ctrl+Alt+E |                ctrl+alt+[KeyE] |         |\n```\n\n----------------------------------------\n\nTITLE: Defining Keyboard Shortcut Mappings for Non-US Standard Layout\nDESCRIPTION: This table defines keyboard shortcuts and their various representations for a non-US standard keyboard layout. It includes combinations for keys A through E with different modifiers, specifying the output, UI label, settings, and more for each combination.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/src/vs/workbench/services/keybinding/test/node/linux_de_ch.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nisUSStandard: false\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|       HW Code combination      |  Key  |    KeyCode combination    | Pri |          UI label         |         User settings          |    Electron accelerator   |       Dispatching string       | WYSIWYG |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyA |   a   |                         A |     |                         A |                              a |                         A |                         [KeyA] |         |\n|                      Ctrl+KeyA |   a   |                    Ctrl+A |     |                    Ctrl+A |                         ctrl+a |                    Ctrl+A |                    ctrl+[KeyA] |         |\n|                     Shift+KeyA |   A   |                   Shift+A |     |                   Shift+A |                        shift+a |                   Shift+A |                   shift+[KeyA] |         |\n|                Ctrl+Shift+KeyA |   A   |              Ctrl+Shift+A |     |              Ctrl+Shift+A |                   ctrl+shift+a |              Ctrl+Shift+A |              ctrl+shift+[KeyA] |         |\n|                       Alt+KeyA |   a   |                     Alt+A |     |                     Alt+A |                          alt+a |                     Alt+A |                     alt+[KeyA] |         |\n|                  Ctrl+Alt+KeyA |   æ   |                Ctrl+Alt+A |     |                Ctrl+Alt+A |                     ctrl+alt+a |                Ctrl+Alt+A |                ctrl+alt+[KeyA] |         |\n|                 Shift+Alt+KeyA |   A   |               Shift+Alt+A |     |               Shift+Alt+A |                    shift+alt+a |               Shift+Alt+A |               shift+alt+[KeyA] |         |\n|            Ctrl+Shift+Alt+KeyA |   Æ   |          Ctrl+Shift+Alt+A |     |          Ctrl+Shift+Alt+A |               ctrl+shift+alt+a |          Ctrl+Shift+Alt+A |          ctrl+shift+alt+[KeyA] |         |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyB |   b   |                         B |     |                         B |                              b |                         B |                         [KeyB] |         |\n|                      Ctrl+KeyB |   b   |                    Ctrl+B |     |                    Ctrl+B |                         ctrl+b |                    Ctrl+B |                    ctrl+[KeyB] |         |\n|                     Shift+KeyB |   B   |                   Shift+B |     |                   Shift+B |                        shift+b |                   Shift+B |                   shift+[KeyB] |         |\n|                Ctrl+Shift+KeyB |   B   |              Ctrl+Shift+B |     |              Ctrl+Shift+B |                   ctrl+shift+b |              Ctrl+Shift+B |              ctrl+shift+[KeyB] |         |\n|                       Alt+KeyB |   b   |                     Alt+B |     |                     Alt+B |                          alt+b |                     Alt+B |                     alt+[KeyB] |         |\n|                  Ctrl+Alt+KeyB |   \"   |                Ctrl+Alt+B |     |                Ctrl+Alt+B |                     ctrl+alt+b |                Ctrl+Alt+B |                ctrl+alt+[KeyB] |         |\n|                 Shift+Alt+KeyB |   B   |               Shift+Alt+B |     |               Shift+Alt+B |                    shift+alt+b |               Shift+Alt+B |               shift+alt+[KeyB] |         |\n|            Ctrl+Shift+Alt+KeyB |   '   |          Ctrl+Shift+Alt+B |     |          Ctrl+Shift+Alt+B |               ctrl+shift+alt+b |          Ctrl+Shift+Alt+B |          ctrl+shift+alt+[KeyB] |         |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyC |   c   |                         C |     |                         C |                              c |                         C |                         [KeyC] |         |\n|                      Ctrl+KeyC |   c   |                    Ctrl+C |     |                    Ctrl+C |                         ctrl+c |                    Ctrl+C |                    ctrl+[KeyC] |         |\n|                     Shift+KeyC |   C   |                   Shift+C |     |                   Shift+C |                        shift+c |                   Shift+C |                   shift+[KeyC] |         |\n|                Ctrl+Shift+KeyC |   C   |              Ctrl+Shift+C |     |              Ctrl+Shift+C |                   ctrl+shift+c |              Ctrl+Shift+C |              ctrl+shift+[KeyC] |         |\n|                       Alt+KeyC |   c   |                     Alt+C |     |                     Alt+C |                          alt+c |                     Alt+C |                     alt+[KeyC] |         |\n|                  Ctrl+Alt+KeyC |   ¢   |                Ctrl+Alt+C |     |                Ctrl+Alt+C |                     ctrl+alt+c |                Ctrl+Alt+C |                ctrl+alt+[KeyC] |         |\n|                 Shift+Alt+KeyC |   C   |               Shift+Alt+C |     |               Shift+Alt+C |                    shift+alt+c |               Shift+Alt+C |               shift+alt+[KeyC] |         |\n|            Ctrl+Shift+Alt+KeyC |   ©   |          Ctrl+Shift+Alt+C |     |          Ctrl+Shift+Alt+C |               ctrl+shift+alt+c |          Ctrl+Shift+Alt+C |          ctrl+shift+alt+[KeyC] |         |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyD |   d   |                         D |     |                         D |                              d |                         D |                         [KeyD] |         |\n|                      Ctrl+KeyD |   d   |                    Ctrl+D |     |                    Ctrl+D |                         ctrl+d |                    Ctrl+D |                    ctrl+[KeyD] |         |\n|                     Shift+KeyD |   D   |                   Shift+D |     |                   Shift+D |                        shift+d |                   Shift+D |                   shift+[KeyD] |         |\n|                Ctrl+Shift+KeyD |   D   |              Ctrl+Shift+D |     |              Ctrl+Shift+D |                   ctrl+shift+d |              Ctrl+Shift+D |              ctrl+shift+[KeyD] |         |\n|                       Alt+KeyD |   d   |                     Alt+D |     |                     Alt+D |                          alt+d |                     Alt+D |                     alt+[KeyD] |         |\n|                  Ctrl+Alt+KeyD |   ð   |                Ctrl+Alt+D |     |                Ctrl+Alt+D |                     ctrl+alt+d |                Ctrl+Alt+D |                ctrl+alt+[KeyD] |         |\n|                 Shift+Alt+KeyD |   D   |               Shift+Alt+D |     |               Shift+Alt+D |                    shift+alt+d |               Shift+Alt+D |               shift+alt+[KeyD] |         |\n|            Ctrl+Shift+Alt+KeyD |   Ð   |          Ctrl+Shift+Alt+D |     |          Ctrl+Shift+Alt+D |               ctrl+shift+alt+d |          Ctrl+Shift+Alt+D |          ctrl+shift+alt+[KeyD] |         |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|       HW Code combination      |  Key  |    KeyCode combination    | Pri |          UI label         |         User settings          |    Electron accelerator   |       Dispatching string       | WYSIWYG |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyE |   e   |                         E |     |                         E |                              e |                         E |                         [KeyE] |         |\n|                      Ctrl+KeyE |   e   |                    Ctrl+E |     |                    Ctrl+E |                         ctrl+e |                    Ctrl+E |                    ctrl+[KeyE] |         |\n|                     Shift+KeyE |   E   |                   Shift+E |     |                   Shift+E |                        shift+e |                   Shift+E |                   shift+[KeyE] |         |\n|                Ctrl+Shift+KeyE |   E   |              Ctrl+Shift+E |     |              Ctrl+Shift+E |                   ctrl+shift+e |              Ctrl+Shift+E |              ctrl+shift+[KeyE] |         |\n|                       Alt+KeyE |   e   |                     Alt+E |     |                     Alt+E |                          alt+e |                     Alt+E |                     alt+[KeyE] |         |\n|                  Ctrl+Alt+KeyE |   €   |                Ctrl+Alt+E |     |                Ctrl+Alt+E |                     ctrl+alt+e |                Ctrl+Alt+E |                ctrl+alt+[KeyE] |         |\n```\n\n----------------------------------------\n\nTITLE: Keyboard Shortcut Mapping Table Data Structure\nDESCRIPTION: A tabular representation of keyboard shortcut mappings showing the relationships between physical key combinations, their interpretations, and various system representations. The table includes columns for hardware codes, key codes, UI labels, user settings, electron accelerators, and dispatching strings.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/src/vs/workbench/services/keybinding/test/node/linux_de_ch.txt#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n|       HW Code combination      |  Key  |    KeyCode combination    | Pri |          UI label         |         User settings          |    Electron accelerator   |       Dispatching string       | WYSIWYG |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                          Slash |   -   |                         - |     |                         - |                              - |                      null |                        [Slash] |         |\n```\n\n----------------------------------------\n\nTITLE: Applying Apache License to Source Code\nDESCRIPTION: Example boilerplate notice for applying the Apache License to a project. Provides the URL where the full license can be obtained and the standard disclaimer about the software being provided without warranties.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/cli/ThirdPartyNotices.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n\thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n```\n\n----------------------------------------\n\nTITLE: License Text for iana-time-zone-haiku (MIT OR Apache-2.0)\nDESCRIPTION: Specifies the MIT OR Apache-2.0 license terms under which the iana-time-zone-haiku library (version 0.1.2) is distributed. Includes copyright notice (Andrew D. Straw, 2020), permission grant, and warranty disclaimer.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/cli/ThirdPartyNotices.txt#2025-04-23_snippet_1\n\nLANGUAGE: Plain Text\nCODE:\n```\niana-time-zone-haiku 0.1.2 - MIT OR Apache-2.0\nhttps://github.com/strawlab/iana-time-zone\n\nCopyright (c) 2020 Andrew D. Straw\n\nPermission is hereby granted, free of charge, to any\nperson obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the\nSoftware without restriction, including without\nlimitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice\nshall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\nSHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Apache License Application Template\nDESCRIPTION: Boilerplate notice template for applying the Apache License 2.0 to software works. The template includes placeholders for copyright year and owner information.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/cli/ThirdPartyNotices.txt#2025-04-23_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: MIT License Text for md5 Project\nDESCRIPTION: Standard MIT license text granting permission to use, modify and distribute the md5 software while including copyright notice and disclaiming warranties.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/cli/ThirdPartyNotices.txt#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nCopyright 2015–2024 The md5 Developers\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: License Text for indexmap (Apache-2.0 OR MIT)\nDESCRIPTION: Specifies the Apache-2.0 OR MIT license terms for the indexmap library (versions 1.9.3, 2.2.6). Includes copyright notice (2016-2017), permission grant, and warranty disclaimer.\nSOURCE: https://github.com/trypear/pearai-app/blob/main/cli/ThirdPartyNotices.txt#2025-04-23_snippet_3\n\nLANGUAGE: Plain Text\nCODE:\n```\nindexmap 1.9.3 - Apache-2.0 OR MIT\nindexmap 2.2.6 - Apache-2.0 OR MIT\nhttps://github.com/indexmap-rs/indexmap\n\nCopyright (c) 2016--2017\n\nPermission is hereby granted, free of charge, to any\nperson obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the\nSoftware without restriction, including without\nlimitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice\nshall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\nSHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n```"
  }
]