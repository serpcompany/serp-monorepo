[
  {
    "owner": "zmievsa",
    "repo": "cadwyn",
    "content": "TITLE: Creating Version Changes to Support Backward Compatibility\nDESCRIPTION: Implements version changes in Cadwyn to maintain backward compatibility. Adds migrations for both response and request models to convert between the single address and multiple addresses formats when interacting with different API versions.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/quickstart/tutorial.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import date\nfrom typing import Dict, List\n\nfrom fastapi import FastAPI, Path\nfrom pydantic import BaseModel, Field\n\nfrom cadwyn.api import create_versioned_api\nfrom cadwyn.structure import Version, VersionChange\nfrom cadwyn.structure.compatibility_tests import output_is_compatible_with_older_version_output\nfrom cadwyn.structure.compatibility_tests import older_version_input_is_compatible_with_input\nfrom cadwyn.structure.field_change import model_field_was_renamed\n\n\nclass UserResource(BaseModel):\n    id: int\n    name: str\n    addresses: List[str] = Field(min_length=1)\n\n\nclass UserCreate(BaseModel):\n    name: str\n    addresses: List[str] = Field(min_length=1)\n\n\n# This will serve as our \"database\"\nusers: Dict[int, UserResource] = {}\nlatest_id = 0\n\n\napi = create_versioned_api(\n    title=\"User service\",\n    versions=[\n        Version(\n            date(2023, 1, 1),\n        ),\n        Version(\n            date(2000, 1, 1),\n            changes=[\n                VersionChange(\n                    model_field_was_renamed(UserResource, \"addresses\", \"address\"),\n                    # This migration function is called whenever a user tries to get a response\n                    # from version 2000-01-01 but our code is using the latest version\n                    # It migrates the response from the new version to the old version\n                    migration_function=lambda resource, _: {\n                        **resource,\n                        \"address\": resource[\"addresses\"][0],\n                        \"addresses\": None,  # This field is then removed by Cadwyn\n                    },\n                    compatibility_tests=[output_is_compatible_with_older_version_output],\n                ),\n                VersionChange(\n                    model_field_was_renamed(UserCreate, \"addresses\", \"address\"),\n                    # This migration function is called whenever a user tries to make a request\n                    # using version 2000-01-01 but our code is using the latest version\n                    # It migrates the request from the old version to the new version\n                    migration_function=lambda body, _: {\n                        **body,\n                        \"addresses\": [body[\"address\"]],\n                        \"address\": None,  # This field is then removed by Cadwyn\n                    },\n                    compatibility_tests=[older_version_input_is_compatible_with_input],\n                ),\n            ],\n        ),\n    ],\n)\napp = FastAPI()\napp.include_router(api.router)\n\n\n@api.get(\"/users/{user_id}\", response_model=UserResource)\ndef get_user(user_id: int = Path(...)):\n    return users[user_id]\n\n\n@api.post(\"/users\", response_model=UserResource, status_code=201)\ndef create_user(user: UserCreate):\n    global latest_id\n    latest_id += 1\n    users[latest_id] = UserResource(id=latest_id, **user.dict())\n    return users[latest_id]\n```\n\n----------------------------------------\n\nTITLE: Basic Cadwyn App Configuration\nDESCRIPTION: Example showing the minimal setup required to create a versioned FastAPI application using Cadwyn. Demonstrates version configuration and basic endpoint definition.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/quickstart/setup.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import date\n\nfrom cadwyn import Cadwyn\nfrom fastapi import FastAPI\n\napp = FastAPI()\napi = Cadwyn(\n    [\n        date(2000, 1, 1),\n        date(2001, 1, 1),\n    ],\n    app,\n)\n\n\n@api.get(\"/hello\")\ndef hello_world():\n    return {\"message\": \"Hello, World!\"}\n```\n\n----------------------------------------\n\nTITLE: Implementing Field Renaming Migration in Cadwyn\nDESCRIPTION: This snippet demonstrates creating a version change migration in Cadwyn to rename a 'summary' field to 'bio' in a user model. It includes methods for converting between versions in both requests and responses to maintain backward compatibility.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/how_to/change_openapi_schemas/rename_a_field_in_schema.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom cadwyn import (\n    VersionChange,\n    schema,\n    convert_response_to_previous_version_for,\n    convert_request_to_next_version_for,\n    ResponseInfo,\n    RequestInfo,\n)\nfrom users import BaseUser, UserCreateRequest, UserResource\n\n\nclass RenameSummaryIntoBioInUser(VersionChange):\n    description = (\n        \"Rename 'summary' field into 'bio' to keep up with industry standards\"\n    )\n    instructions_to_migrate_to_previous_version = (\n        schema(BaseUser).field(\"bio\").had(name=\"summary\"),\n    )\n\n    @convert_request_to_next_version_for(UserCreateRequest)\n    def rename_bio_to_summary(request: RequestInfo):\n        request.body[\"summary\"] = request.body.pop(\"bio\")\n\n    @convert_response_to_previous_version_for(UserResource)\n    def rename_bio_to_summary(response: ResponseInfo):\n        response.body[\"bio\"] = response.body.pop(\"summary\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Cadwyn with FastAPI and Versioned Router\nDESCRIPTION: This snippet demonstrates how to set up a Cadwyn app with FastAPI, define versioned routes, and include them in the main app. It shows the basic structure for creating versioned API endpoints using Cadwyn's VersionedAPIRouter.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/concepts/main_app.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom cadwyn import VersionedAPIRouter, Cadwyn\nfrom versions import my_version_bundle\n\n\nrouter = VersionedAPIRouter(prefix=\"/users\")\n\n\n@router.get(\"/users/\", tags=[\"users\"])\nasync def read_users():\n    return [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]\n\n\n@router.get(\"/users/{username}\", tags=[\"users\"])\nasync def read_user(username: str):\n    return {\"username\": username}\n\n\napp = Cadwyn(versions=my_version_bundle)\napp.generate_and_include_versioned_routers(router)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Breaking Change to Support Multiple Addresses\nDESCRIPTION: Modifies the User API to support multiple addresses by changing the address field from a string to a list of strings. This is a breaking change that would disrupt existing API clients without versioning.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/quickstart/tutorial.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import date\nfrom typing import Dict, List\n\nfrom fastapi import FastAPI, Path\nfrom pydantic import BaseModel, Field\n\nfrom cadwyn.api import create_versioned_api\nfrom cadwyn.structure import Version\n\n\nclass UserResource(BaseModel):\n    id: int\n    name: str\n    addresses: List[str] = Field(min_length=1)\n\n\nclass UserCreate(BaseModel):\n    name: str\n    addresses: List[str] = Field(min_length=1)\n\n\n# This will serve as our \"database\"\nusers: Dict[int, UserResource] = {}\nlatest_id = 0\n\n\napi = create_versioned_api(\n    title=\"User service\",\n    versions=[Version(date(2000, 1, 1))],\n)\napp = FastAPI()\napp.include_router(api.router)\n\n\n@api.get(\"/users/{user_id}\", response_model=UserResource)\ndef get_user(user_id: int = Path(...)):\n    return users[user_id]\n\n\n@api.post(\"/users\", response_model=UserResource, status_code=201)\ndef create_user(user: UserCreate):\n    global latest_id\n    latest_id += 1\n    users[latest_id] = UserResource(id=latest_id, **user.dict())\n    return users[latest_id]\n```\n\n----------------------------------------\n\nTITLE: Implementing API Versioning with Path Prefixes and Number Formats in Python using Cadwyn\nDESCRIPTION: This Python code example demonstrates how to configure Cadwyn to use numeric version identifiers ('v1', 'v2') with path prefixes instead of the default ISO date headers. The example initializes a FastAPI app with Cadwyn, defines endpoints with different version paths, and shows how to implement version-specific business logic.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/how_to/version_with_paths_and_numbers_instead_of_headers_and_dates.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\n\nfrom typing import Any, ClassVar\n\nfrom cadwyn import Cadwyn, VersionLocation, default_version_negotiator\nfrom fastapi import FastAPI, Response\nfrom pydantic import BaseModel\n\n\nAPI_VERSIONS = [\"v1\", \"v2\"]  # Notice we're using arbitrary strings instead of ISO dates\n\n\nclass Product(BaseModel):\n    id: int\n    name: str\n    price: float\n\n\nclass ProductsCollection(BaseModel):\n    products: list[Product]\n\n\napp = FastAPI()\n\n\napi = Cadwyn(\n    app=app,\n    current_version=\"v2\",  # Also using arbitrary strings here\n    api_versions=API_VERSIONS,\n    version_location=VersionLocation.PATH,  # Using path prefixes instead of headers\n    version_negotiator=default_version_negotiator,  # custom function to determine api version\n)\n\n\n# Define V1 of the API\n@api.register_in_version(\"v1\")\nclass ProductsFetcher:\n    # Class-level annotation allows us to provide different logic in future versions\n    async def fetch_products(self) -> list[dict[str, Any]]:\n        return [\n            {\"id\": 1, \"name\": \"Milk\", \"price\": 2.99},\n            {\"id\": 2, \"name\": \"Eggs\", \"price\": 3.99},\n            {\"id\": 3, \"name\": \"Cheese\", \"price\": 4.99},\n        ]\n\n    # Define the routes\n    @api.register\n    async def get_products(self) -> Response:\n        products = await self.fetch_products()\n        return Response(\n            content=ProductsCollection(products=[Product(**p) for p in products]).json(),\n            media_type=\"application/json\",\n        )\n\n\n# Define V2 of the API with a change in pricing logic\n@api.register_in_version(\"v2\", update=ProductsFetcher)\nclass ProductsFetcherV2(ProductsFetcher):\n    # Override the method to provide new implementation for V2\n    async def fetch_products(self) -> list[dict[str, Any]]:\n        v1_products = await super().fetch_products()\n        # Apply a 10% discount in v2\n        for product in v1_products:\n            product[\"price\"] = round(product[\"price\"] * 0.9, 2)\n        return v1_products\n\n\n# Initialize all the API versions (V1, V2)\napi.init_versions()\n\n# Run with: uvicorn main:app --reload\n# Then access:\n# - V1: http://localhost:8000/v1/products\n# - V2: http://localhost:8000/v2/products\n\n```\n\n----------------------------------------\n\nTITLE: Initializing a Basic FastAPI User Service with Cadwyn\nDESCRIPTION: Creates a simple FastAPI application with Cadwyn integration that has a User resource with a single address. Includes models for creating and retrieving users and routes for both operations.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/quickstart/tutorial.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import date\nfrom typing import Dict\n\nfrom fastapi import FastAPI, Path\nfrom pydantic import BaseModel, Field\n\nfrom cadwyn.api import create_versioned_api\nfrom cadwyn.structure import Version\n\n\nclass UserResource(BaseModel):\n    id: int\n    name: str\n    address: str\n\n\nclass UserCreate(BaseModel):\n    name: str\n    address: str\n\n\n# This will serve as our \"database\"\nusers: Dict[int, UserResource] = {}\nlatest_id = 0\n\n\napi = create_versioned_api(\n    title=\"User service\",\n    versions=[Version(date(2000, 1, 1))],\n)\napp = FastAPI()\napp.include_router(api.router)\n\n\n@api.get(\"/users/{user_id}\", response_model=UserResource)\ndef get_user(user_id: int = Path(...)):\n    return users[user_id]\n\n\n@api.post(\"/users\", response_model=UserResource, status_code=201)\ndef create_user(user: UserCreate):\n    global latest_id\n    latest_id += 1\n    users[latest_id] = UserResource(id=latest_id, **user.dict())\n    return users[latest_id]\n```\n\n----------------------------------------\n\nTITLE: Implementing Version Change for Required User Country in Python\nDESCRIPTION: This code snippet demonstrates how to create a VersionChange class to make the 'country' field required in the UserCreateRequest schema, while maintaining backwards compatibility with older versions that had a default value of 'USA'.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/how_to/change_openapi_schemas/add_field.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom cadwyn import (\n    VersionChange,\n    schema,\n    convert_request_to_next_version_for,\n)\nfrom users import UserCreateRequest, UserResource\n\n\nclass MakeUserCountryRequired(VersionChange):\n    description = 'Make user country required instead of the \"USA\" default'\n    instructions_to_migrate_to_previous_version = (\n        schema(UserCreateRequest).field(\"country\").had(default=\"USA\"),\n    )\n\n    @convert_request_to_next_version_for(UserCreateRequest)\n    def add_default_value_to_country_field_in_request(request: RequestInfo):\n        request.body[\"country\"] = request.body.get(\"country\", \"USA\")\n```\n\n----------------------------------------\n\nTITLE: Basic Field Renaming Migration in Python using Cadwyn\nDESCRIPTION: Shows how to rename a field from creation_date to created_at with request migration using Cadwyn's VersionChange class. Demonstrates schema-based migration approach for request transformation.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/concepts/version_changes.md#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom cadwyn import (\n    VersionChange,\n    schema,\n    convert_request_to_next_version_for,\n)\nfrom invoices import InvoiceCreateRequest\n\n\nclass RemoveTaxIDEndpoints(VersionChange):\n    description = \"Rename `Invoice.creation_date` into `Invoice.created_at`.\"\n    instructions_to_migrate_to_previous_version = (\n        schema(InvoiceCreateRequest)\n        .field(\"creation_date\")\n        .had(name=\"created_at\"),\n    )\n\n    @convert_request_to_next_version_for(InvoiceCreateRequest)\n    def rename_creation_date_into_created_at(request: RequestInfo):\n        request.body[\"created_at\"] = request.body.pop(\"creation_date\")\n```\n\n----------------------------------------\n\nTITLE: Removing a Response Field with Version Change\nDESCRIPTION: Migration code to remove a 'zodiac_sign' field from UserResource while maintaining backward compatibility. Demonstrates how to define a version change that preserves the field in older API versions.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/how_to/change_openapi_schemas/remove_field.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom cadwyn import VersionChange, schema\nfrom users import UserResource\nfrom pydantic import Field\n\n\nclass RemoveZodiacSignFromUser(VersionChange):\n    description = (\n        \"Remove 'zodiac_sign' field from UserResource because \"\n        \"it can be inferred from user's date of birth and because \"\n        \"only a small number of users has utilized it.\"\n    )\n    instructions_to_migrate_to_previous_version = (\n        schema(UserResource)\n        .field(\"zodiac_sign\")\n        .existed_as(type=str, info=Field(description=\"User's magical sign\")),\n    )\n```\n\n----------------------------------------\n\nTITLE: Converting DateTime to Date Migration in Python with Cadwyn\nDESCRIPTION: First part of migration code for changing date_of_birth field from datetime to date type in the latest version, including validation logic for type conversion.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/how_to/change_openapi_schemas/change_field_type.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom cadwyn import VersionChange, schema\nfrom pydantic import validator\nfrom users import BaseUser\nimport datetime\n\n\n@field_validator(\"date_of_birth\", mode=\"before\")\ndef convert_date_of_birth_to_date(cls, v: datetime.date | datetime.datetime):\n    if isinstance(v, datetime.datetime):\n        return v.date()\n    return v\n\n\nclass ChangeDateOfBirthToDateInUserInLatest(VersionChange):\n    description = (\n        \"Change 'BaseUser.date_of_birth' field type to datetime in HEAD \"\n        \"to support versions and data before 2001-01-01. \"\n    )\n    instructions_to_migrate_to_previous_version = (\n        schema(BaseUser).field(\"date_of_birth\").had(type=datetime.date),\n        schema(BaseUser).validator(convert_date_of_birth_to_date).existed,\n    )\n```\n\n----------------------------------------\n\nTITLE: Complete Request-Response Migration in Python using Cadwyn\nDESCRIPTION: Demonstrates bidirectional field renaming migration with both request and response handling. Shows how to maintain compatibility across versions while keeping business logic simple.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/concepts/version_changes.md#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom cadwyn import (\n    VersionChange,\n    schema,\n    convert_request_to_next_version_for,\n    convert_response_to_previous_version_for,\n)\nfrom invoices import (\n    BaseInvoice,\n    InvoiceCreateRequest,\n    InvoiceResource,\n)\n\n\nclass RemoveTaxIDEndpoints(VersionChange):\n    description = \"Rename `Invoice.creation_date` into `Invoice.created_at`.\"\n    instructions_to_migrate_to_previous_version = (\n        schema(BaseInvoice).field(\"creation_date\").had(name=\"created_at\"),\n    )\n\n    @convert_request_to_next_version_for(InvoiceCreateRequest)\n    def rename_creation_date_into_created_at(request: RequestInfo):\n        request.body[\"created_at\"] = request.body.pop(\"creation_date\")\n\n    @convert_response_to_previous_version_for(InvoiceResource)\n    def rename_created_at_into_creation_date(response: ResponseInfo):\n        response.body[\"creation_date\"] = response.body.pop(\"created_at\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Version Change for Adding Phone to User in Python\nDESCRIPTION: This snippet defines a VersionChange class to add a nullable 'phone' field to the UserCreateRequest schema in version 2000_01_01, allowing for backwards compatibility.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/how_to/change_openapi_schemas/add_field.md#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass AddPhoneToUser(VersionChange):\n    description = (\n        \"Add a required phone field to User to allow us to do 2fa and to \"\n        \"make it possible to verify new user accounts using an sms.\"\n    )\n    instructions_to_migrate_to_previous_version = (\n        schema(UserCreateRequest)\n        .field(\"phone\")\n        .had(type=str | None, default=None),\n    )\n```\n\n----------------------------------------\n\nTITLE: Implementing Version Change for API Endpoint Removal in Python\nDESCRIPTION: Demonstrates how to create a VersionChange class to remove specific API endpoints (GET and POST /v1/tax_ids) while maintaining backwards compatibility for older versions.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/concepts/version_changes.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# versions/v2023_02_10.py\n\nfrom cadwyn import VersionChange, endpoint\n\n\nclass RemoveTaxIDEndpoints(VersionChange):\n    description = \"Remove `GET /v1/tax_ids` and `POST /v1/tax_ids` endpoints\"\n    instructions_to_migrate_to_previous_version = (\n        endpoint(\"/v1/tax_ids\", [\"GET\", \"POST\"]).existed,\n    )\n```\n\n----------------------------------------\n\nTITLE: Example Version Bundle Configuration with Multiple Changes\nDESCRIPTION: Illustrates a more complex VersionBundle setup with multiple versions and their associated changes, demonstrating how version history is maintained over time.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/concepts/version_changes.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nversions = VersionBundle(\n    Version(\"2023-05-09\", ChangeCreateLogic, AddRequiredFields),\n    Version(\"2023-04-02\", DeleteEndpoint, ChangeFields, RenameFields),\n    Version(\"2023-02-10\", RenameEndpoints, RefactorFields),\n    Version(\"2022-11-16\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Version Bundle with Multiple Versions in Python\nDESCRIPTION: Shows how to create and configure a VersionBundle to manage multiple API versions and their associated version changes, including HEAD version and historical versions.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/concepts/version_changes.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# versions/__init__.py\n\nfrom cadwyn import VersionBundle, Version\nfrom datetime import date\n\nfrom .v2023_02_10 import RemoveTaxIDEndpoints\n\n\nversions = VersionBundle(\n    HeadVersion(),\n    Version(\"2023-02-10\", RemoveTaxIDEndpoints),\n    Version(\"2022-11-16\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Length Constraint Migration in Python using Cadwyn\nDESCRIPTION: Migration class that removes max_length constraint from HEAD version to support older versions that didn't have the constraint. Uses Cadwyn's VersionChange and schema utilities.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/how_to/change_openapi_schemas/changing_constraints.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom cadwyn import VersionChange, schema\nfrom users import UserCreateRequest\n\n\nclass AddLengthConstraintToNameInLatest(VersionChange):\n    description = (\n        \"Remove the max_length constraint from the HEAD version to support \"\n        \"versions older than 2001_01_01 where it did not have the constraint.\"\n    )\n    instructions_to_migrate_to_previous_version = (\n        schema(UserCreateRequest).field(\"name\").had(max_length=250),\n    )\n```\n\n----------------------------------------\n\nTITLE: Defining Endpoints That Don't Exist in Older Versions\nDESCRIPTION: Demonstrates how to specify that an endpoint in the current version should not exist in older versions by using the didnt_exist instruction in a VersionChange class.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/concepts/endpoint_migrations.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom cadwyn import VersionChange, endpoint\n\n\nclass MyChange(VersionChange):\n    description = \"...\"\n    instructions_to_migrate_to_previous_version = (\n        endpoint(\"/companies/{company_id}\", [\"GET\"]).didnt_exist,\n    )\n```\n\n----------------------------------------\n\nTITLE: Version Change with Side Effects Definition\nDESCRIPTION: Example of defining a VersionChangeWithSideEffects class to properly handle changes in business logic across versions.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/concepts/version_changes.md#2025-04-18_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom cadwyn import VersionChangeWithSideEffects\n\n\nclass UserAddressIsCheckedInExternalService(VersionChangeWithSideEffects):\n    description = (\n        \"User's address is now checked for existence in an external service. \"\n        \"If it doesn't exist there, a 400 code is returned.\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Organizing Test Directory Structure for Versioned APIs with Cadwyn\nDESCRIPTION: Illustrates a recommended directory structure for organizing tests in a Cadwyn project. The structure includes a head folder for the latest version's tests and separate folders for previous API versions, allowing for complete test coverage across all supported API versions.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/concepts/testing.md#2025-04-18_snippet_0\n\nLANGUAGE: tree\nCODE:\n```\n└── tests\n    ├── __init__.py\n    ├── conftest.py\n    ├── head\n    │   ├── __init__.py\n    │   ├── conftest.py\n    │   ├── test_users.py\n    │   ├── test_admins.py\n    │   └── test_invoices.py\n    ├── v2022_11_16\n    │   ├── __init__.py\n    │   ├── conftest.py\n    │   └── test_invoices.py\n    └── v2023_03_11\n        ├── __init__.py\n        ├── conftest.py\n        └── test_users.py\n```\n\n----------------------------------------\n\nTITLE: Path-Based Migration in Python using Cadwyn\nDESCRIPTION: Shows how to implement migrations based on endpoint paths rather than schemas. Useful for endpoints without request bodies or with shared response models.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/concepts/version_changes.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom cadwyn import (\n    VersionChange,\n    schema,\n    convert_request_to_next_version_for,\n    convert_response_to_previous_version_for,\n)\nfrom invoices import BaseInvoice\n\n\nclass RemoveTaxIDEndpoints(VersionChange):\n    description = \"Rename `Invoice.creation_date` into `Invoice.created_at`.\"\n    instructions_to_migrate_to_previous_version = (\n        schema(BaseInvoice).field(\"creation_date\").had(name=\"created_at\"),\n    )\n\n    @convert_request_to_next_version_for(\"/v1/invoices\", [\"POST\"])\n    def rename_creation_date_into_created_at(request: RequestInfo):\n        request.body[\"created_at\"] = request.body.pop(\"creation_date\")\n\n    @convert_response_to_previous_version_for(\"/v1/invoices\", [\"GET\"])\n    def rename_created_at_into_creation_date(response: ResponseInfo):\n        response.body[\"creation_date\"] = response.body.pop(\"created_at\")\n```\n\n----------------------------------------\n\nTITLE: Changing a Field Attribute in an Older Schema Version in Python using Cadwyn\nDESCRIPTION: Demonstrates how to modify field attributes like description in a previous version of your schema. This allows you to change how a field is documented or validated while maintaining backward compatibility.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/concepts/schema_migrations.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom cadwyn import VersionChange, schema\n\n\nclass MyChange(VersionChange):\n    description = \"...\"\n    instructions_to_migrate_to_previous_version = (\n        schema(MySchema).field(\"foo\").had(description=\"Foo\"),\n    )\n```\n\n----------------------------------------\n\nTITLE: Adding a Field to an Older Schema Version in Python using Cadwyn\nDESCRIPTION: Demonstrates how to add a field that existed in a previous version of your schema. This is useful when you've removed a field but need to maintain backward compatibility with older API versions.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/concepts/schema_migrations.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pydantic import Field\nfrom cadwyn import VersionChange, schema\n\n\nclass MyChange(VersionChange):\n    description = \"...\"\n    instructions_to_migrate_to_previous_version = (\n        schema(MySchema)\n        .field(\"foo\")\n        .existed_as(type=list[str], info=Field(description=\"Foo\")),\n    )\n```\n\n----------------------------------------\n\nTITLE: Removing Enum Members in Cadwyn Version Change\nDESCRIPTION: Shows how to specify enum members that didn't exist in a previous version using the Cadwyn framework. The example demonstrates removing 'foo' and 'bar' members from an enum.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/concepts/enum_migrations.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom cadwyn import VersionChange, enum\n\n\nclass MyChange(VersionChange):\n    description = \"...\"\n    instructions_to_migrate_to_previous_version = (\n        enum(my_enum).didnt_have(\"foo\", \"bar\"),\n    )\n```\n\n----------------------------------------\n\nTITLE: Defining Endpoints That Only Exist in Older Versions\nDESCRIPTION: Shows how to mark an endpoint as only existing in older versions by using the @router.only_exists_in_older_versions decorator and defining it in a VersionChange class with the existed instruction.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/concepts/endpoint_migrations.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@router.only_exists_in_older_versions\n@router.get(\"/users/{user_id}\")\nasync def my_old_endpoint():\n    ...\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom cadwyn import VersionChange, endpoint\n\n\nclass MyChange(VersionChange):\n    description = \"...\"\n    instructions_to_migrate_to_previous_version = (\n        endpoint(\"/users/{user_id}\", [\"GET\"]).existed,\n    )\n```\n\n----------------------------------------\n\nTITLE: HTTP Error Migration in Python using Cadwyn\nDESCRIPTION: Demonstrates how to migrate HTTP error status codes between API versions using Cadwyn's error migration capabilities.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/concepts/version_changes.md#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom cadwyn import (\n    VersionChange,\n    convert_response_to_previous_version_for,\n)\nfrom invoices import BaseInvoice\n\n\nclass RemoveTaxIDEndpoints(VersionChange):\n    description = \"Change status code in 'GET /v1/invoices' when invoice was not found from 400 to 404\"\n    instructions_to_migrate_to_previous_version = ()\n\n    @convert_response_to_previous_version_for(\n        \"/v1/invoices\", [\"GET\"], migrate_http_errors=True\n    )\n    def change_400_to_404(response: ResponseInfo):\n        if response.status_code == 400:\n            response.status_code = 404\n```\n\n----------------------------------------\n\nTITLE: Removing a Field from an Older Schema Version in Python using Cadwyn\nDESCRIPTION: Shows how to indicate that a field didn't exist in a previous version of your schema. This is useful when you've added a new field but need to maintain backward compatibility with older API versions.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/concepts/schema_migrations.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom cadwyn import VersionChange, schema\n\n\nclass MyChange(VersionChange):\n    description = \"...\"\n    instructions_to_migrate_to_previous_version = (\n        schema(MySchema).field(\"foo\").didnt_exist,\n    )\n```\n\n----------------------------------------\n\nTITLE: Handling Endpoint Duplicates with Function Name Specification\nDESCRIPTION: Demonstrates how to manage duplicate endpoints (same path and method) by specifying the function name in the endpoint definition, allowing different implementations for different API versions.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/concepts/endpoint_migrations.md#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi.params import Param\nfrom fastapi.headers import Header\nfrom typing import Annotated\nfrom cadwyn import VersionedAPIRouter\n\nrouter = VersionedAPIRouter()\n\n\n@router.only_exists_in_older_versions\n@router.get(\"/users\")\ndef get_users_by_name_before_we_started_using_params(\n    user_name: Annotated[str, Header()]\n):\n    \"\"\"Do some logic with user_name\"\"\"\n\n\n@router.get(\"/users\")\ndef get_users_by_name(user_name: Annotated[str, Param()]):\n    \"\"\"Do some logic with user_name\"\"\"\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom cadwyn import VersionChange, endpoint\n\n\nclass UseParamsInsteadOfHeadersForUserNameFiltering(VersionChange):\n    description = (\n        \"Use params instead of headers for user name filtering in GET /users \"\n        \"because using headers is a bad API practice in such scenarios.\"\n    )\n    instructions_to_migrate_to_previous_version = (\n        # We need to specify the name, otherwise, we will encounter an exception due to having two identical endpoints\n        # with the same path and method\n        endpoint(\n            \"/users\",\n            [\"GET\"],\n            func_name=\"get_users_by_name_before_we_started_using_params\",\n        ).existed,\n        # We also need to specify the name here because, following the instruction above,\n        # we now have two existing endpoints\n        endpoint(\"/users\", [\"GET\"], func_name=\"get_users_by_name\").didnt_exist,\n    )\n```\n\n----------------------------------------\n\nTITLE: Adding Version Change to VersionBundle in Python\nDESCRIPTION: This snippet shows how to add the MakeUserCountryRequired version change to the VersionBundle, which manages the versioning of the API.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/how_to/change_openapi_schemas/add_field.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom cadwyn import Version, VersionBundle, HeadVersion\nfrom datetime import date\nfrom .v2001_01_01 import MakeUserCountryRequired\n\nversion_bundle = VersionBundle(\n    HeadVersion(),\n    Version(\"2001-01-01\", MakeUserCountryRequired),\n    Version(\"2000-01-01\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Enum Expansion Migration in Python with Cadwyn\nDESCRIPTION: Migration code for adding a 'moderator' role to user roles while maintaining backward compatibility. Converts moderator roles to regular roles for older API versions.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/how_to/change_openapi_schemas/change_field_type.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom cadwyn import (\n    VersionChange,\n    enum,\n    convert_response_to_previous_version_for,\n    ResponseInfo,\n)\nfrom users import UserRoleEnum, UserResource\nimport datetime\n\n\nclass AddModeratorRoleToUser(VersionChange):\n    description = (\n        \"Add 'moderator' role to users that represents an admin that \"\n        \"cannot create or remove other admins. This allows for a \"\n        \"finer-grained permission control.\"\n    )\n    instructions_to_migrate_to_previous_version = (\n        enum(UserRoleEnum).didnt_have(\"moderator\"),\n    )\n\n    @convert_response_to_previous_version_for(UserResource)\n    def change_moderator_to_regular(response: ResponseInfo):\n        if response.body[\"role\"] == \"moderator\":\n            response.body[\"role\"] = \"regular\"\n```\n\n----------------------------------------\n\nTITLE: Supporting an Optional Field in Older Versions\nDESCRIPTION: Migration that defines how 'middle_name' existed in previous versions, ensuring older API versions continue to support the field that's being removed from newer versions.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/how_to/change_openapi_schemas/remove_field.md#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom cadwyn import VersionChange, schema\nfrom users import BaseUser\n\n\nclass RemoveMiddleNameFromUser(VersionChange):\n    description = \"Remove 'User.middle_name' field\"\n    instructions_to_migrate_to_previous_version = (\n        schema(BaseUser)\n        .field(\"middle_name\")\n        .existed_as(\n            type=str | None, description=\"User's Middle Name\", default=None\n        ),\n    )\n```\n\n----------------------------------------\n\nTITLE: Adding Max Length Constraint Migration in Python using Cadwyn\nDESCRIPTION: Migration class that adds a max_length constraint of 250 characters to user names in create requests. Implements backward migration instructions.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/how_to/change_openapi_schemas/changing_constraints.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass AddMaxLengthConstraintToUserNames(VersionChange):\n    description = (\n        \"Add a max length of 250 to user names when creating new users \"\n        \"to prevent overly large names from being used.\"\n    )\n    instructions_to_migrate_to_previous_version = (\n        schema(UserCreateRequest).field(\"name\").didnt_have(\"max_length\"),\n    )\n```\n\n----------------------------------------\n\nTITLE: Changing Endpoint Attributes Between Versions\nDESCRIPTION: Shows how to modify endpoint attributes (like description) in different API versions by specifying the old values in the had method.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/concepts/endpoint_migrations.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom cadwyn import VersionChange, endpoint\n\n\nclass MyChange(VersionChange):\n    description = \"...\"\n    instructions_to_migrate_to_previous_version = (\n        endpoint(\"/users/{user_id}\", [\"GET\"]).had(\n            description=\"My old description\"\n        ),\n    )\n```\n\n----------------------------------------\n\nTITLE: Adding a Validator to an Older Schema Version in Python using Cadwyn\nDESCRIPTION: Demonstrates how to add a field validator that existed in a previous version of your schema. This allows you to maintain backward compatibility when you've removed or changed validation rules.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/concepts/schema_migrations.md#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom pydantic import Field, field_validator\nfrom cadwyn import VersionChange, schema\n\n\n@field_validator(\"foo\")\ndef validate_foo(cls, value):\n    if not \":\" in value:\n        raise TypeError\n    return value\n\n\nclass MyChange(VersionChange):\n    description = \"...\"\n    instructions_to_migrate_to_previous_version = (\n        schema(MySchema).validator(validate_foo).existed,\n    )\n```\n\n----------------------------------------\n\nTITLE: Removing a Validator from an Older Schema Version in Python using Cadwyn\nDESCRIPTION: Shows how to indicate that a validator didn't exist in a previous version of your schema. This is useful when you've added validators but need to maintain backward compatibility with older API versions.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/concepts/schema_migrations.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom pydantic import Field, validator\nfrom cadwyn import VersionChange, schema\n\n\nclass MyChange(VersionChange):\n    description = \"...\"\n    instructions_to_migrate_to_previous_version = (\n        schema(MySchema).validator(MySchema.validate_foo).didnt_exist,\n    )\n```\n\n----------------------------------------\n\nTITLE: Improved Migration with Internal Representation\nDESCRIPTION: A better approach to migrating address schema that uses internal representations to maintain backward compatibility without manual converters.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/concepts/version_changes.md#2025-04-18_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom cadwyn import VersionChange, schema\nfrom users import User\n\n\nclass RemoveTaxIDEndpoints(VersionChange):\n    description = \"Users now have `address` field instead of `addresses`\"\n    instructions_to_migrate_to_previous_version = (\n        schema(User).field(\"address\").didnt_exist,\n        schema(User).field(\"addresses\").existed_as(type=list[str]),\n    )\n```\n\n----------------------------------------\n\nTITLE: Renaming a Schema in an Older Version in Python using Cadwyn\nDESCRIPTION: Demonstrates how to change the name of a schema in a previous version, ensuring that the OpenAPI documentation correctly references it. This helps with backward compatibility when schema names have changed.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/concepts/schema_migrations.md#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom cadwyn import VersionChange, schema\n\n\nclass MyChange(VersionChange):\n    description = \"...\"\n    instructions_to_migrate_to_previous_version = (\n        schema(MySchema).had(name=\"OtherSchema\"),\n    )\n```\n\n----------------------------------------\n\nTITLE: Schema Change With check_usage=False Flag\nDESCRIPTION: Successful implementation of changing a User schema's ID field by disabling usage checking. The check_usage=False parameter allows schema changes even when the schema isn't used in endpoints.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/how_to/change_openapi_schemas/change_schema_without_endpoint.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime\nfrom typing import Optional\n\nfrom pydantic import BaseModel\n\nfrom cadwyn import VersionedFastAPI, ModelVersionData\n\n\nclass UserV1(BaseModel):\n    id: int\n    name: str\n    age: Optional[int] = None\n    created_at: datetime\n\n\nclass UserV2(BaseModel):\n    id: str  # Changed from int to str\n    name: str\n    age: Optional[int] = None\n    created_at: datetime\n\n\napp = VersionedFastAPI(\n    check_usage=False,\n)\n```\n\n----------------------------------------\n\nTITLE: Business Logic Return with Internal Representation\nDESCRIPTION: Example of how to return an internal representation in business logic that includes both the old and new data structures to maintain backward compatibility.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/concepts/version_changes.md#2025-04-18_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# in your business logic\n\nreturn {\"address\": user.addresses[0] if user.addresses else None, **user}\n```\n\n----------------------------------------\n\nTITLE: Implementing DateTime Type Change Migration in Python with Cadwyn\nDESCRIPTION: Second part of migration code for ensuring date_of_birth remains a datetime type in older versions.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/how_to/change_openapi_schemas/change_field_type.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass ChangeDateOfBirthToDateInUser(VersionChange):\n    description = (\n        \"Change 'User.date_of_birth' field type to date instead of \"\n        \"a datetime because storing the exact time is unnecessary.\"\n    )\n    instructions_to_migrate_to_previous_version = (\n        schema(BaseUser).field(\"date_of_birth\").had(type=datetime.datetime),\n        schema(BaseUser).validator(convert_date_of_birth_to_date).didnt_exist,\n    )\n```\n\n----------------------------------------\n\nTITLE: Adding Enum Members in Cadwyn Version Change\nDESCRIPTION: Demonstrates how to add enum members in a previous version using the Cadwyn framework. The example shows adding 'foo' and 'bar' members to an enum using the enum() helper function.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/concepts/enum_migrations.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom cadwyn import VersionChange, enum\nfrom enum import auto\n\n\nclass MyChange(VersionChange):\n    description = \"...\"\n    instructions_to_migrate_to_previous_version = (\n        enum(my_enum).had(foo=\"baz\", bar=auto()),\n    )\n```\n\n----------------------------------------\n\nTITLE: Removing a Field Attribute in an Older Schema Version in Python using Cadwyn\nDESCRIPTION: Shows how to indicate that a field didn't have a particular attribute in a previous version of your schema. This is useful when you've added attributes to fields but need to maintain backward compatibility.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/concepts/schema_migrations.md#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom cadwyn import VersionChange, schema\n\n\nclass MyChange(VersionChange):\n    description = \"...\"\n    instructions_to_migrate_to_previous_version = (\n        schema(MySchema).field(\"foo\").didnt_have(\"description\"),\n    )\n```\n\n----------------------------------------\n\nTITLE: Implementing Hidden Version Changes in Python using Cadwyn\nDESCRIPTION: Demonstrates how to hide specific version changes or instructions from public changelogs using Cadwyn. Shows both partially hidden instructions and completely hidden version changes.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/concepts/changelogs.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom cadwyn import hidden, VersionChange, endpoint\n\n\nclass VersionChangeWithOneHiddenInstruction(VersionChange):\n    description = \"...\"\n    instructions_to_migrate_to_previous_version = (\n        hidden(endpoint(\"/users/{user_id}\", [\"GET\"]).had(path=\"/users/{uid}\")),\n    )\n\n\n@hidden\nclass CompletelyHiddenVersionChange(VersionChange):\n    description = \"...\"\n    instructions_to_migrate_to_previous_version = (\n        schema(User).field(\"address\").existed_as(type=str),\n    )\n```\n\n----------------------------------------\n\nTITLE: Updating Version Bundle for New Migration\nDESCRIPTION: Code showing how to integrate a new migration into the version bundle. This adds the RemoveZodiacSignFromUser migration to the version history.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/how_to/change_openapi_schemas/remove_field.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# versions/__init__.py\n\nfrom cadwyn import Version, VersionBundle, HeadVersion\nfrom datetime import date\nfrom .v2001_01_01 import RemoveZodiacSignFromUser\n\nversion_bundle = VersionBundle(\n    HeadVersion(),\n    Version(\"2001-01-01\", RemoveZodiacSignFromUser),\n    Version(\"2000-01-01\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Version Change for Non-Nullable Phone in Python\nDESCRIPTION: This code defines a VersionChange class to ensure that the 'phone' field is not nullable in version 2001_01_01, while maintaining compatibility with the HEAD version where it is nullable.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/how_to/change_openapi_schemas/add_field.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom cadwyn import VersionChange, schema\nfrom users import UserCreateRequest\n\n\nclass MakePhoneNonNullableInLatest(VersionChange):\n    description = (\n        \"Make sure the phone is nullable in the HEAD version to support \"\n        \"versions older than 2001_01_01 where it became non-nullable\"\n    )\n    instructions_to_migrate_to_previous_version = (\n        schema(UserCreateRequest).field(\"phone\").had(type=str),\n        schema(UserCreateRequest).field(\"phone\").didnt_have(\"default\"),\n    )\n```\n\n----------------------------------------\n\nTITLE: Manual Body Migration Example\nDESCRIPTION: Example of manually migrating response bodies outside of routing, useful for webhooks or background tasks that need versioned responses.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/concepts/version_changes.md#2025-04-18_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom users import UserResource\nfrom versions import version_bundle\n\nbody_from_2000_01_01 = version_bundle.migrate_response_body(\n    UserResource, latest_body={\"name\": \"John\"}, version=\"2000-01-01\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Version Changes to VersionBundle in Python\nDESCRIPTION: This code demonstrates how to add multiple version changes (MakePhoneNonNullableInLatest and AddPhoneToUser) to the VersionBundle, managing the API versioning for different scenarios.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/how_to/change_openapi_schemas/add_field.md#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom cadwyn import Version, VersionBundle, HeadVersion\nfrom datetime import date\nfrom .v2001_01_01 import MakePhoneNonNullableInLatest, AddPhoneToUser\n\n\nversion_bundle = VersionBundle(\n    HeadVersion(MakePhoneNonNullableInLatest),\n    Version(\"2001-01-01\", AddPhoneToUser),\n    Version(\"2000-01-01\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Rendering a Module in Cadwyn CLI\nDESCRIPTION: Command for rendering an entire module of schemas at a specific version. This outputs what the schemas would look like if written by hand instead of being generated at runtime.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/concepts/schema_generation.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncadwyn render module data.schemas --app=main:app --version=2024-05-26\n```\n\n----------------------------------------\n\nTITLE: Updating Version Bundle with Multiple Migrations\nDESCRIPTION: Complete version bundle configuration including both the removal of 'middle_name' from latest versions and support for the field in previous versions.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/how_to/change_openapi_schemas/remove_field.md#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# versions/__init__.py\n\nfrom cadwyn import Version, VersionBundle, HeadVersion\nfrom datetime import date\nfrom .v2001_01_01 import RemoveZodiacSignFromUser\n\nversion_bundle = VersionBundle(\n    HeadVersion(RemoveMiddleNameFromLatestVersion),\n    Version(\"2001-01-01\", RemoveMiddleNameFromUser),\n    Version(\"2000-01-01\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Rendering a Single Model in Cadwyn CLI\nDESCRIPTION: Command for rendering a specific pydantic model or enum at a given version. Prints the schema as it would appear if written manually rather than generated at runtime.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/concepts/schema_generation.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncadwyn render model data.schemas:UserCreateRequest --app=main:app --version=2024-05-26\n```\n\n----------------------------------------\n\nTITLE: Configuring Version Bundle in Python with Cadwyn\nDESCRIPTION: Configuration code for setting up version bundle with multiple migrations and version definitions.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/how_to/change_openapi_schemas/change_field_type.md#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom cadwyn import Version, VersionBundle, HeadVersion\nfrom datetime import date\nfrom .v2001_01_01 import MakePhoneNonNullableInLatest, AddPhoneToUser\n\n\nversion_bundle = VersionBundle(\n    HeadVersion(ChangeDateOfBirthToDateInUserInLatest),\n    Version(\"2001-01-01\", ChangeDateOfBirthToDateInUser),\n    Version(\"2000-01-01\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Removing an Optional Field from Latest Version\nDESCRIPTION: Migration that removes an optional field ('middle_name') from the latest API version while maintaining it in HEAD to support backward compatibility.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/how_to/change_openapi_schemas/remove_field.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom cadwyn import VersionChange, schema\nfrom users import BaseUser\n\n\nclass RemoveMiddleNameFromLatestVersion(VersionChange):\n    description = (\n        \"Remove 'User.middle_name' from latest but keep it in HEAD \"\n        \"to support versions before 2001-01-01.\"\n    )\n    instructions_to_migrate_to_previous_version = (\n        schema(BaseUser).field(\"middle_name\").didnt_exist,\n    )\n```\n\n----------------------------------------\n\nTITLE: Configuring Version Bundle in Python using Cadwyn\nDESCRIPTION: Sets up a version bundle that includes the migrations for adding length constraints, defining the version history and migration order.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/how_to/change_openapi_schemas/changing_constraints.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom cadwyn import Version, VersionBundle, HeadVersion\nfrom datetime import date\nfrom .v2001_01_01 import (\n    AddLengthConstraintToNameInLatest,\n    AddMaxLengthConstraintToUserNames,\n)\n\nversion_bundle = VersionBundle(\n    HeadVersion(AddLengthConstraintToNameInLatest),\n    Version(\"2001-01-01\", AddMaxLengthConstraintToUserNames),\n    Version(\"2000-01-01\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Using Side Effects in Business Logic\nDESCRIPTION: Example of how to check whether a side effect is applied in the current version within business logic.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/concepts/version_changes.md#2025-04-18_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom src.versions import versions, UserAddressIsCheckedInExternalService\n\n\nasync def create_user(payload):\n    if UserAddressIsCheckedInExternalService.is_applied:\n        check_user_address_exists_in_an_external_service(payload.address)\n    ...\n```\n\n----------------------------------------\n\nTITLE: Generating Versioned Schemas Without FastAPI in Python\nDESCRIPTION: Code snippet demonstrating how to generate versioned schemas without FastAPI integration. Uses the version_bundle to create schema generators for different versions.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/concepts/schema_generation.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport cadwyn\nfrom my_versions import version_bundle, MyVersionedSchema\n\nschema_generators = generate_versioned_models(version_bundle)\nMyVersionedSchemaFrom2025 = schema_generators[\"2025-11-16\"][MyVersionedSchema]\n```\n\n----------------------------------------\n\nTITLE: Initializing Cadwyn with Default Header-Based Version Configuration\nDESCRIPTION: Basic initialization of a Cadwyn app with default settings, using a custom header named 'X-API-VERSION' for versioning with an ISO date format.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/concepts/api_version_parameter.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom cadwyn import Cadwyn, Version, VersionBundle\n\napp = Cadwyn(\n    api_version_location=\"custom_header\",\n    api_version_parameter_name=\"X-API-VERSION\",\n    versions=VersionBundle(Version(\"2022-01-02\")),\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Path-Based Version Parameter in Cadwyn\nDESCRIPTION: Configuration for using a URL path parameter for versioning instead of a header, with the parameter named 'api_version'.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/concepts/api_version_parameter.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom cadwyn import Cadwyn, Version, VersionBundle\n\napp = Cadwyn(\n    api_version_location=\"path\",\n    api_version_parameter_name=\"api_version\",\n    versions=VersionBundle(Version(\"2022-01-02\")),\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Date-Formatted Version Parameter in Cadwyn\nDESCRIPTION: Default setup for using ISO date formatted version strings, where only valid dates will be accepted as API versions.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/concepts/api_version_parameter.md#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom cadwyn import Cadwyn, Version, VersionBundle\n\napp = Cadwyn(\n    api_version_format=\"date\",\n    versions=VersionBundle(Version(\"2022-01-02\")),\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Cadwyn with Custom Header Name for Versioning\nDESCRIPTION: Example showing how to customize the header name used for API versioning, replacing the default 'X-API-VERSION' with a custom header name.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/concepts/api_version_parameter.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom cadwyn import Cadwyn, Version, VersionBundle\n\napp = Cadwyn(\n    api_version_location=\"custom_header\",\n    api_version_parameter_name=\"MY-GREAT-HEADER\",\n    versions=VersionBundle(Version(\"2022-01-02\")),\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Title and Description to API Version Parameter in Cadwyn\nDESCRIPTION: Example showing how to add a title and description to the API version parameter, similar to FastAPI's Path or Header constructor parameters.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/concepts/api_version_parameter.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\napp = Cadwyn(\n    ...,\n    api_version_title=\"My Great API version parameter\",\n    api_version_description=\"Description of my great API version parameter\",\n)\n```\n\n----------------------------------------\n\nTITLE: Running FastAPI Development Server\nDESCRIPTION: Command to start the FastAPI development server with the main application file\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/quickstart/setup.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfastapi dev main.py\n```\n\n----------------------------------------\n\nTITLE: Using Arbitrary String Version Format in Cadwyn\nDESCRIPTION: Configuration for using arbitrary strings as version identifiers instead of dates. The order in the VersionBundle determines precedence.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/concepts/api_version_parameter.md#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom cadwyn import Cadwyn, Version, VersionBundle\n\napp = Cadwyn(\n    api_version_format=\"string\",\n    versions=VersionBundle(\n        Version(\"v2\"),\n        Version(\"anything_can_be_a_version\"),\n        Version(\"v1\"),\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Subclassing Solution for RootModel Issue\nDESCRIPTION: A recommended approach to avoid the RootModel memoization issue by using subclassing to create distinct schema classes.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/concepts/version_changes.md#2025-04-18_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom users import User\nfrom pydantic import RootModel\n\nUserList = RootModel[list[User]]\n\n\nclass BulkCreateUsersRequestBody(UserList):\n    pass\n\n\nclass BulkCreateUsersResponseBody(UserList):\n    pass\n\n\nprint(BulkCreateUsersRequestBody is BulkCreateUsersResponseBody)  # False\n```\n\n----------------------------------------\n\nTITLE: Pydantic RootModel Memoization Issue\nDESCRIPTION: Demonstration of a potential issue with Pydantic's RootModel memoization where different schemas can share the same instance, affecting migrations.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/concepts/version_changes.md#2025-04-18_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom users import User\nfrom pydantic import RootModel\n\nBulkCreateUsersRequestBody = RootModel[list[User]]\nBulkCreateUsersResponseBody = RootModel[list[User]]\n\nprint(BulkCreateUsersRequestBody is BulkCreateUsersResponseBody)  # True\n```\n\n----------------------------------------\n\nTITLE: Installing Cadwyn Package\nDESCRIPTION: Command to install the Cadwyn package using pip package manager\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/quickstart/setup.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install cadwyn\n```\n\n----------------------------------------\n\nTITLE: Checking Cadwyn Version via CLI in Bash\nDESCRIPTION: Command to display the currently installed version of Cadwyn using its command-line interface. This requires Cadwyn to be installed with the CLI interface via 'pip install cadwyn[standard]'.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/concepts/cli.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncadwyn --version\n```\n\n----------------------------------------\n\nTITLE: Installing Pre-commit Using UV in Python\nDESCRIPTION: Command to install pre-commit tool using UV package manager. This is part of the environment setup process for contributing to the Cadwyn project.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/home/CONTRIBUTING.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuv tool install pre-commit\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Make in Python Project\nDESCRIPTION: Command to run tests located in the tests directory using Make. This is used during the development process to ensure code quality.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/home/CONTRIBUTING.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake test\n```\n\n----------------------------------------\n\nTITLE: Serving MkDocs Documentation Locally\nDESCRIPTION: Command to locally serve the project documentation using MkDocs. This allows contributors to preview documentation changes before submission.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/home/CONTRIBUTING.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmkdocs serve\n```\n\n----------------------------------------\n\nTITLE: Running Pyright Type Checker in Python Project\nDESCRIPTION: Command to run the Pyright type checker on the current directory using UV. This is used to enforce type safety in the codebase.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/home/CONTRIBUTING.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nuv run pyright .\n```\n\n----------------------------------------\n\nTITLE: Attempting Schema Change Without check_usage Flag\nDESCRIPTION: Initial attempt to change a User schema's ID field from integer to string type. This code will fail because the schema is not used in any endpoint.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/how_to/change_openapi_schemas/change_schema_without_endpoint.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime\nfrom typing import Optional\n\nfrom pydantic import BaseModel\n\nfrom cadwyn import VersionedFastAPI, ModelVersionData\n\n\nclass UserV1(BaseModel):\n    id: int\n    name: str\n    age: Optional[int] = None\n    created_at: datetime\n\n\nclass UserV2(BaseModel):\n    id: str  # Changed from int to str\n    name: str\n    age: Optional[int] = None\n    created_at: datetime\n\n\napp = VersionedFastAPI()\n```\n\n----------------------------------------\n\nTITLE: Incorrect Version Check in Business Logic\nDESCRIPTION: Example of an anti-pattern showing direct version checking in business logic, which should be avoided.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/concepts/version_changes.md#2025-04-18_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# This is wrong. Please, do not do this.\nif api_version_var.get() >= date(2022, 11, 11):\n    # do new logic here\n    ...\n```\n\n----------------------------------------\n\nTITLE: Bad Migration Example for User Address Structure Change\nDESCRIPTION: Example of an incorrect approach to migrating from a list of addresses to a single address field, which results in data loss and breaks backward compatibility.\nSOURCE: https://github.com/zmievsa/cadwyn/blob/main/docs/concepts/version_changes.md#2025-04-18_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom cadwyn import (\n    VersionChange,\n    schema,\n    convert_request_to_next_version_for,\n    convert_response_to_previous_version_for,\n)\nfrom users import BaseUser, UserCreateRequest, UserResource\n\n# THIS IS AN EXAMPLE OF A BAD MIGRATION\nclass RemoveTaxIDEndpoints(VersionChange):\n    description = \"Users now have `address` field instead of `addresses`\"\n    instructions_to_migrate_to_previous_version = (\n        schema(BaseUser).field(\"address\").didnt_exist,\n        schema(BaseUser).field(\"addresses\").existed_as(type=list[str]),\n    )\n\n    @convert_request_to_next_version_for(BaseUser)\n    def turn_addresses_into_a_single_item(request: RequestInfo):\n        addresses = request.body.pop(\"addresses\")\n        # The list could have been empty in the past so new \"address\"\n        # field must be nullable.\n        request.body[\"address\"] = addresses[0] if addresses else None\n\n    @convert_response_to_previous_version_for(BaseUser)\n    def turn_address_into_a_list(response: ResponseInfo):\n        response.body[\"addresses\"] = [response.body.pop(\"address\")]\n```"
  }
]