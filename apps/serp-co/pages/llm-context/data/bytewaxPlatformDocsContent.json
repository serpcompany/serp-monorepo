[
  {
    "owner": "bytewax",
    "repo": "platform-docs-content",
    "content": "TITLE: Visualizing Bytewax Platform Ecosystem Architecture\nDESCRIPTION: Comprehensive mermaid diagram illustrating the complete ecosystem of Bytewax Platform, including integration with external services like Prometheus, OpenTelemetry, and S3, as well as authentication flow with Identity Provider.\nSOURCE: https://github.com/bytewax/platform-docs-content/blob/main/concepts/architecture.md#2025-04-21_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR;\n  client([user])\n  waxctl[Waxctl]\n  client-.terminal.->waxctl;\n  waxctl --> k8sapi;\n  client --> dashboard\n  dashboard --> service\n  idp(Identity<br>Provider) <--> |OpenID Connect<br>flow|service;\n  idp <--> |OpenID Connect<br>flow|dashboard\n  pod1 --> |metrics|prom[(Prometheus)];\n  pod1 --> |traces|otel[(OpenTelemetry)];\n  pod1 --> |recovery<br>snapshots|bucket[(S3)];\n  subgraph Kubernetes cluster\n  k8sapi[kubeAPI]\n  pod1[Dataflow<br>stack]\n  subgraph Bytewax Platform\n  operator[Operator]\n  service[WaxAPI]\n  dashboard[Dashboard]\n  end\n  service --> k8sapi\n  operator --> k8sapi\n  k8sapi-->pod1;\n  end\n  classDef plain fill:#ddd,stroke:#fff,stroke-width:4px,color:#000;\n  classDef k8s fill:#326ce5,stroke:#fff,stroke-width:4px,color:#fff;\n  classDef cluster fill:#fff,stroke:#bbb,stroke-width:2px,color:#326ce5;\n  classDef bw fill:#fab90f,stroke:#fff,stroke-width:2px,color:#fff;\n  class ingress,pod1,k8sapi k8s;\n  class client plain;\n  class cluster cluster;\n  class service,dashboard,operator,waxctl bw;\n```\n\n----------------------------------------\n\nTITLE: Visualizing Bytewax Platform Basic Architecture Flow\nDESCRIPTION: Mermaid diagram showing the interaction flow between user clients, Dataflow CR, and Bytewax Platform components within a Kubernetes cluster. Demonstrates how CRUD operations on Dataflows are processed through the system.\nSOURCE: https://github.com/bytewax/platform-docs-content/blob/main/concepts/architecture.md#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR;\n  client([user])-. CRUD Dataflows<br>using waxctl, waxapi or dashboard .->ingress[Dataflow CR];\n  ingress-->|events|service[Bytewax<br>Platform];\n  subgraph Kubernetes cluster\n  ingress;\n  service-->pod1[Dataflow Pod 1];\n  service-->pod2[Dataflow Pod 2];\n  end\n  classDef plain fill:#ddd,stroke:#fff,stroke-width:4px,color:#000;\n  classDef k8s fill:#326ce5,stroke:#fff,stroke-width:4px,color:#fff;\n  classDef cluster fill:#fff,stroke:#bbb,stroke-width:2px,color:#326ce5;\n  classDef bw fill:#fab90f,stroke:#fff,stroke-width:2px,color:#fff;\n  class ingress,pod1,pod2 k8s;\n  class client plain;\n  class cluster cluster;\n  class service bw;\n```\n\n----------------------------------------\n\nTITLE: Architecture Diagram in Mermaid\nDESCRIPTION: A diagram showing the architecture of the Bytewax Platform components including the Dashboard, Waxctl, WaxAPI, and Operator, and their interactions with Kubernetes API and Dataflow Stack.\nSOURCE: https://github.com/bytewax/platform-docs-content/blob/main/concepts/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR;\n  client1([user])-->waxctl\n  client1 --> dashboard\n  k8sapi[k8s API]\n  subgraph Bytewax Platform;\n  dashboard(Dashboard)\n  waxctl(Waxctl)\n  waxapi[WaxAPI]\n  operator[Operator]\n  end\n  waxctl --> k8sapi;\n  waxapi--> k8sapi\n  dashboard --> waxapi\n  operator --> k8sapi\n  k8sapi --> dataflow(Dataflow<br>Stack)\n  classDef plain fill:#ddd,stroke:#fff,stroke-width:4px,color:#000;\n  classDef k8s fill:#326ce5,stroke:#fff,stroke-width:4px,color:#fff;\n  classDef cluster fill:#fff,stroke:#fab90f,stroke-width:2px,color:#000;\n  classDef bw fill:#fab90f,stroke:#fff,stroke-width:2px,color:#fff;\n  class ingress,k8sapi,dataflow k8s;\n  class client1,client2 plain;\n  class cluster cluster;\n  class dashboard,waxapi,waxctl,operator bw;\n```\n\n----------------------------------------\n\nTITLE: Defining Dataflow Custom Resource in Kubernetes YAML\nDESCRIPTION: This YAML snippet defines the structure of the Dataflow custom resource, including its apiVersion, kind, metadata, spec, and status fields. The spec field contains various configuration options for the Dataflow, such as image settings, Python file name, artifacts download, environment variables, and recovery options.\nSOURCE: https://github.com/bytewax/platform-docs-content/blob/main/reference/dataflow-crd.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: bytewax.io/v1alpha1\nkind: Dataflow\nmetadata:\n  # Refer to the Kubernetes API documentation for metadata fields\nspec:\n  image:\n    tag: <string>\n    pullPolicy: Always\n    pullSecret: default-credentials\n    repository: <string>\n  pythonFileName: <string>\n  artifactsDownload:\n    url: <string>\n    secretName: <string>\n    token: <string>\n  chartValues: <string>\n  concurrencyPolicy: <string>\n  configMapName: <string>\n  dependencies: [<string>]\n  env:\n    - name: <string>\n      value: <string>\n  jobMode: false\n  keepAlive: false\n  processesCount: 1\n  recovery:\n    # Recovery configuration fields\n  schedule: <string>\n  suspend: false\n  tarName: <string>\n  workersPerProcess: 1\nstatus:\n  # DataflowStatus fields\n```\n\n----------------------------------------\n\nTITLE: Configuring Bytewax Platform Helm Chart\nDESCRIPTION: This YAML configuration snippet shows the structure and default values for various components of the Bytewax Platform Helm Chart. It includes settings for billing, controller manager, dashboard, OIDC, and waxapi.\nSOURCE: https://github.com/bytewax/platform-docs-content/blob/main/reference/helm-chart.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbilling:\n  awsMarketplace:\n    enabled: true\ncontrollerManager:\n  kubeRbacProxy:\n    image:\n      imagePullPolicy: \"IfNotPresent\"\n      repository: \"709825985650.dkr.ecr.us-east-1.amazonaws.com/bytewax/kube-rbac-proxy\"\n      tag: \"v0.13.0\"\n    resources:\n      limits:\n        cpu: \"500m\"\n        memory: \"128Mi\"\n      requests:\n        cpu: \"5m\"\n        memory: \"64Mi\"\n  manager:\n    image:\n      imagePullPolicy: \"IfNotPresent\"\n      repository: \"709825985650.dkr.ecr.us-east-1.amazonaws.com/bytewax/operator\"\n      tag: \"0.3.6\"\n    logLevel: \"info\"\n    resources:\n      limits:\n        cpu: \"500m\"\n        memory: \"128Mi\"\n      requests:\n        cpu: \"10m\"\n        memory: \"64Mi\"\n  replicas: 1\ndashboard:\n  affinity: {}\n  annotations: {}\n  apiUrl: \"http://localhost:8080/\"\n  baseUrl: \"http://localhost:3000/\"\n  faviconUrl: \"/favicon.ico\"\n  image:\n    imagePullPolicy: \"IfNotPresent\"\n    repository: \"709825985650.dkr.ecr.us-east-1.amazonaws.com/bytewax/dashboard\"\n    tag: \"0.1.16\"\n  ingress:\n    annotations: {}\n    enabled: false\n    labels: {}\n  labels: {}\n  nodeSelector: {}\n  oidc:\n    clientId: \"\"\n    clientIdKey: \"\"\n    clientSecret: \"\"\n    clientSecretKey: \"\"\n    existingSecret: \"\"\n    pkce: false\n  podAnnotations: {}\n  podLabels: {}\n  replicas: 1\n  resources:\n    limits:\n      cpu: \"500m\"\n      memory: \"512Mi\"\n    requests:\n      cpu: \"100m\"\n      memory: \"128Mi\"\n  service:\n    annotations: {}\n    labels: {}\n    loadBalancerSourceRanges: []\n    port: 3000\n    type: \"ClusterIP\"\n  themeUrl: \"/\"\n  title: \"Bytewax\"\n  tolerations: []\n  topologySpreadConstraints: []\ndemokeycloak:\n  enabled: false\n  keycloak:\n    keycloak:\n      image:\n        repository: \"709825985650.dkr.ecr.us-east-1.amazonaws.com/bytewax/keycloak\"\n        tag: \"20.0.1\"\nfullnameOverride: \"bytewax-platform\"\nkubernetesClusterDomain: \"cluster.local\"\nmetricsService:\n  ports:\n    - name: \"https\"\n      port: 8443\n      protocol: \"TCP\"\n      targetPort: \"https\"\n  type: \"ClusterIP\"\noidc:\n  authIssuer: \"https://identiyprovider.com/realms/bytewax\"\n  authIssuerKey: \"\"\n  clientId: \"clientid\"\n  clientIdKey: \"\"\n  clientSecret: \"clientsecret\"\n  clientSecretKey: \"\"\n  existingSecret: \"\"\nwaxapi:\n  affinity: {}\n  allowedHosts: \"*\"\n  annotations: {}\n  image:\n    imagePullPolicy: \"IfNotPresent\"\n    repository: \"709825985650.dkr.ecr.us-east-1.amazonaws.com/bytewax/waxapi-ecr\"\n    tag: \"0.2.0\"\n  ingress:\n    annotations: {}\n    enabled: false\n    labels: {}\n  labels: {}\n  nodeSelector: {}\n  podAnnotations: {}\n  podLabels: {}\n  port: 8080\n  replicas: 1\n  resources:\n    limits:\n      cpu: \"500m\"\n      memory: \"512Mi\"\n    requests:\n      cpu: \"100m\"\n      memory: \"128Mi\"\n  service:\n    annotations: {}\n    labels: {}\n    loadBalancerSourceRanges: []\n    port: 8080\n    type: \"ClusterIP\"\n  tolerations: []\n  topologySpreadConstraints: []\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Deployment Flags for Bytewax Platform\nDESCRIPTION: Special command line flags for the 'waxctl df deploy' command available when deploying to a Kubernetes cluster with Bytewax Platform installed. These flags control scheduling, recovery options, backup configurations, and resource allocation.\nSOURCE: https://github.com/bytewax/platform-docs-content/blob/main/reference/waxctl-for-platform.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n      --concurrency-policy string                         specifies how to treat concurrent executions of a Scheduled Dataflow (the value must be Allow, Forbid or Replace) (default \"Forbid\")\n      --platform                                          deploy the dataflow as a bytewax.io/dataflow Custom Resource (requires Bytewax Platform installed)\n      --recovery                                          stores recovery files in Kubernetes persistent volumes to allow resuming after a restart (your dataflow must have recovery enabled: https://bytewax.io/docs/getting-started/recovery)\n      --recovery-backup                                   back up worker state DBs to cloud storage (must have recovery flag present and provide S3 parameters)\n      --recovery-backup-interval int                      System time duration in seconds to keep extra state snapshots around\n      --recovery-backup-s3-aws-access-key-id string       AWS credentials access key id\n      --recovery-backup-s3-aws-secret-access-key string   AWS credentials secret access key\n      --recovery-backup-s3-k8s-secret string              name of the Kubernetes secret storing AWS credentials.\n      --recovery-backup-s3-url string                     s3 url to store state backups. For example, s3://mybucket/mydataflow-state-backups\n      --recovery-parts int                                number of recovery parts (default 1)\n      --recovery-single-volume                            use only one persistent volume for all dataflow's pods in Kubernetes\n      --recovery-size string                              size of the persistent volume claim to be assign to each dataflow pod in Kubernetes (default \"10Gi\")\n      --recovery-snapshot-interval int                    system time duration in seconds to snapshot state for recovery\n      --recovery-storageclass string                      storage class of the persistent volume claim to be assign to each dataflow pod in Kubernetes\n      --schedule string                                   dataflow schedule in Cron format, see https://en.wikipedia.org/wiki/Cron\n```\n\n----------------------------------------\n\nTITLE: Deploying Bytewax Platform using Helm\nDESCRIPTION: This command deploys the Bytewax Platform to the EKS cluster using Helm. It installs or upgrades the release named 'bytewax-platform' in the 'bytewax-system' namespace, using the local chart and a custom values file.\nSOURCE: https://github.com/bytewax/platform-docs-content/blob/main/setup/aws-marketplace-eks.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade --install bytewax-platform ./platform -nbytewax-system -f ./values.yaml\n```\n\n----------------------------------------\n\nTITLE: Deploying Bytewax Platform with Helm\nDESCRIPTION: Installs or upgrades the Bytewax Platform using Helm. This command deploys the platform to the Kubernetes cluster using the configured values.\nSOURCE: https://github.com/bytewax/platform-docs-content/blob/main/setup/aws-marketplace-anywhere.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade --install bytewax-platform ./platform -n bytewax-system -f ./values.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Bytewax Platform Helm Chart Values\nDESCRIPTION: Creates a values.yaml file with configuration for the Bytewax Platform Helm chart. This example includes AWS Marketplace billing configuration.\nSOURCE: https://github.com/bytewax/platform-docs-content/blob/main/setup/aws-marketplace-anywhere.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nbilling:\n  awsMarketplace:\n    licenseConfigSecretName: awsmp-license-token-secret\n```\n\n----------------------------------------\n\nTITLE: Configuring External Access via Ingress Controller in Bytewax Platform\nDESCRIPTION: YAML configuration for setting up external access to Bytewax services through a Kubernetes Ingress Controller. This snippet includes annotations for nginx ingress class and TLS configuration with custom domain names.\nSOURCE: https://github.com/bytewax/platform-docs-content/blob/main/setup/external-access.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n  ingress:\n    enabled: false\n    # For Kubernetes >= 1.18 you should specify the ingress-controller via the field ingressClassName\n    # See https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/#specifying-the-class-of-an-ingress\n    # ingressClassName: nginx\n    annotations: {}\n    labels: {}\n    hosts:\n      - waxapi.yourdomain.com\n    annotations:\n      kubernetes.io/ingress.class: nginx\n      kubernetes.io/tls-acme: \"true\"\n    labels:\n      name: value\n    tls:\n      # Secrets must be manually created in the namespace.\n      - secretName: waxapi-tls\n        hosts:\n          - waxapi.yourdomain.com\n```\n\n----------------------------------------\n\nTITLE: Configuring LoadBalancer Service Type for Bytewax WaxAPI\nDESCRIPTION: YAML configuration for exposing the Bytewax WaxAPI service using Kubernetes LoadBalancer service type. This includes options for annotations, labels, source IP ranges, and port configuration.\nSOURCE: https://github.com/bytewax/platform-docs-content/blob/main/setup/external-access.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nwaxapi:\n  service:\n    annotations: {}\n    labels: {}\n    type: LoadBalancer\n    # List of IP ranges that are allowed to access the load balancer (if supported)\n    loadBalancerSourceRanges: []\n    port: 8080\n```\n\n----------------------------------------\n\nTITLE: Configuring NodePort Service Type for Bytewax Services\nDESCRIPTION: YAML configuration for exposing Bytewax services using Kubernetes NodePort service type. This allows specifying a fixed node port along with annotations, labels, and service port.\nSOURCE: https://github.com/bytewax/platform-docs-content/blob/main/setup/external-access.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n  service:\n    annotations: {}\n    labels: {}\n    type: NodePort\n    # Specify a specific node port when type is NodePort\n    nodePort: 32500\n    port: 8080\n```\n\n----------------------------------------\n\nTITLE: Creating IAM Service Account for Bytewax Platform\nDESCRIPTION: This command creates an IAM service account for the Bytewax Platform controller manager. It associates the necessary AWS License Manager consumption policy and is cluster-specific. Users need to replace <YOUR_CLUSTER_NAME> and <YOUR_CLUSTER_REGION> with their specific values.\nSOURCE: https://github.com/bytewax/platform-docs-content/blob/main/setup/aws-marketplace-eks.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\neksctl create iamserviceaccount \\\n  --name bytewax-platform-controller-manager \\\n  --namespace bytewax-system \\\n  --cluster <YOUR_CLUSTER_NAME> \\\n  --attach-policy-arn arn:aws:iam::aws:policy/service-role/AWSLicenseManagerConsumptionPolicy \\\n  --approve \\\n  --override-existing-serviceaccounts \\\n  --region <YOUR_CLUSTER_REGION>\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for AWS ECR Image Pulling\nDESCRIPTION: Creates a Kubernetes secret containing AWS ECR credentials. This secret allows Kubernetes to pull Bytewax container images from the AWS registry.\nSOURCE: https://github.com/bytewax/platform-docs-content/blob/main/setup/aws-marketplace-anywhere.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create secret docker-registry awsmp-image-pull-secret \\\n--docker-server=709825985650.dkr.ecr.us-east-1.amazonaws.com \\\n--docker-username=AWS \\\n--docker-password=$(aws ecr get-login-password --region us-east-1) \\\n--namespace bytewax-system\n```\n\n----------------------------------------\n\nTITLE: Creating AWS Marketplace License Token Secret in Kubernetes\nDESCRIPTION: Creates a Kubernetes secret containing the AWS Marketplace license token and IAM role ARN. This secret is used to verify the AWS Marketplace subscription.\nSOURCE: https://github.com/bytewax/platform-docs-content/blob/main/setup/aws-marketplace-anywhere.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create secret generic awsmp-license-token-secret \\\n--from-literal=license_token=$AWSMP_TOKEN \\\n--from-literal=iam_role=$AWSMP_ROLE_ARN \\\n--namespace bytewax-system\n```\n\n----------------------------------------\n\nTITLE: Authenticating to AWS ECR Registry\nDESCRIPTION: This command authenticates to the AWS Elastic Container Registry (ECR) using the AWS CLI and Helm. It retrieves an authentication token and logs in to the specified ECR repository.\nSOURCE: https://github.com/bytewax/platform-docs-content/blob/main/setup/aws-marketplace-eks.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\naws ecr get-login-password \\\n  --region us-east-1 | helm registry login \\\n  --username AWS \\\n  --password-stdin 709825985650.dkr.ecr.us-east-1.amazonaws.com\n```\n\n----------------------------------------\n\nTITLE: Setting Up Bytewax Platform Helm Chart\nDESCRIPTION: Prepares the environment for installing the Bytewax Platform Helm chart. This includes creating a directory, authenticating with AWS ECR, and pulling the Helm chart.\nSOURCE: https://github.com/bytewax/platform-docs-content/blob/main/setup/aws-marketplace-anywhere.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmkdir awsmp-chart\ncd awsmp-chart\n\naws ecr get-login-password \\\n    --region us-east-1 | helm registry login \\\n    --username AWS \\\n    --password-stdin 709825985650.dkr.ecr.us-east-1.amazonaws.com\n\nhelm pull oci://709825985650.dkr.ecr.us-east-1.amazonaws.com/bytewax/platform --version 0.2.1 \n\ntar xf $(pwd)/* && find $(pwd) -maxdepth 1 -type f -delete\n```\n\n----------------------------------------\n\nTITLE: Downloading Bytewax Platform Helm Chart\nDESCRIPTION: This command pulls the Bytewax Platform Helm chart from the AWS ECR repository. It specifies version 0.2.1 of the chart.\nSOURCE: https://github.com/bytewax/platform-docs-content/blob/main/setup/aws-marketplace-eks.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhelm pull oci://709825985650.dkr.ecr.us-east-1.amazonaws.com/bytewax/platform --version 0.2.1 \n```\n\n----------------------------------------\n\nTITLE: Extracting Bytewax Platform Helm Chart\nDESCRIPTION: This command extracts the downloaded Helm chart archive and removes the compressed file. It uses the 'tar' utility to extract the contents and then deletes the original archive file.\nSOURCE: https://github.com/bytewax/platform-docs-content/blob/main/setup/aws-marketplace-eks.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ntar xf $(pwd)/* && find $(pwd) -maxdepth 1 -type f -delete\n```\n\n----------------------------------------\n\nTITLE: Retrieving AWS License Manager Access Token\nDESCRIPTION: Uses AWS CLI to obtain an access token from the AWS License Manager. This token is used for subsequent authentication steps.\nSOURCE: https://github.com/bytewax/platform-docs-content/blob/main/setup/aws-marketplace-anywhere.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nAWSMP_ACCESS_TOKEN=$(aws license-manager get-access-token \\\n    --output text --query '*' --token $AWSMP_TOKEN --region us-east-1)\n```\n\n----------------------------------------\n\nTITLE: Assuming AWS Role with Web Identity\nDESCRIPTION: Assumes an AWS role using the previously obtained access token. This step is necessary to acquire temporary AWS credentials for image pulling.\nSOURCE: https://github.com/bytewax/platform-docs-content/blob/main/setup/aws-marketplace-anywhere.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nAWSMP_ROLE_CREDENTIALS=$(aws sts assume-role-with-web-identity \\\n                --region 'us-east-1' \\\n                --role-arn $AWSMP_ROLE_ARN \\\n                --role-session-name 'AWSMP-guided-deployment-session' \\\n                --web-identity-token $AWSMP_ACCESS_TOKEN \\\n                --query 'Credentials' \\\n                --output text)\n```\n\n----------------------------------------\n\nTITLE: Extracting AWS Credentials from Assumed Role\nDESCRIPTION: Parses the assumed role credentials and sets them as environment variables. These credentials are used for authenticating with AWS services.\nSOURCE: https://github.com/bytewax/platform-docs-content/blob/main/setup/aws-marketplace-anywhere.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nexport AWS_ACCESS_KEY_ID=$(echo $AWSMP_ROLE_CREDENTIALS | awk '{print $1}' | xargs)\nexport AWS_SECRET_ACCESS_KEY=$(echo $AWSMP_ROLE_CREDENTIALS | awk '{print $3}' | xargs)\nexport AWS_SESSION_TOKEN=$(echo $AWSMP_ROLE_CREDENTIALS | awk '{print $4}' | xargs)\n```\n\n----------------------------------------\n\nTITLE: Setting AWS Marketplace Environment Variables in Bash\nDESCRIPTION: Sets local environment variables with values obtained from the AWS Marketplace subscription wizard. These variables are used for authentication and access control.\nSOURCE: https://github.com/bytewax/platform-docs-content/blob/main/setup/aws-marketplace-anywhere.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nAWSMP_TOKEN=<CREATED_TOKEN_ABOVE>\nAWSMP_ROLE_ARN=<CREATED_ROLE_ABOVE>\n```\n\n----------------------------------------\n\nTITLE: Making Authenticated WaxAPI Request using cURL\nDESCRIPTION: Example of how to make an authenticated HTTP request to WaxAPI using bearer token authentication via cURL. The request demonstrates accessing the dataflows endpoint with proper authorization header formatting.\nSOURCE: https://github.com/bytewax/platform-docs-content/blob/main/reference/waxapi.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://waxapi.yourcompany.com/dataflows/\n-H \"Authorization: Bearer <TOKEN>\"\n```\n\n----------------------------------------\n\nTITLE: Deploying Dataflow with Recovery in Bytewax\nDESCRIPTION: This command deploys a dataflow named 'simple_slow.py' using waxctl CLI with recovery enabled on the Bytewax platform.\nSOURCE: https://github.com/bytewax/platform-docs-content/blob/main/dataflow-guides/recovery.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nwaxctl df deploy simple_slow.py --platform --recovery=true\n```\n\n----------------------------------------\n\nTITLE: Redeploying Dataflow with Recovery in Bytewax\nDESCRIPTION: This command redeploys the 'simple_slow.py' dataflow using waxctl CLI with recovery enabled on the Bytewax platform.\nSOURCE: https://github.com/bytewax/platform-docs-content/blob/main/dataflow-guides/recovery.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nwaxctl df deploy simple_slow.py --platform --recovery=true\n```\n\n----------------------------------------\n\nTITLE: Deleting Dataflow in Bytewax\nDESCRIPTION: This command removes a dataflow named 'bytewax' using waxctl CLI without prompting for confirmation.\nSOURCE: https://github.com/bytewax/platform-docs-content/blob/main/dataflow-guides/recovery.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nwaxctl df rm --name bytewax --yes\n```\n\n----------------------------------------\n\nTITLE: Creating Bytewax Platform Namespace in Kubernetes\nDESCRIPTION: This command creates a dedicated namespace for the Bytewax Platform in the Kubernetes cluster. The namespace is named 'bytewax-system' and will be used throughout the installation process.\nSOURCE: https://github.com/bytewax/platform-docs-content/blob/main/setup/aws-marketplace-eks.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create namespace bytewax-system\n```\n\n----------------------------------------\n\nTITLE: Creating Bytewax Platform Namespace in Kubernetes\nDESCRIPTION: Creates a dedicated namespace for the Bytewax Platform in the Kubernetes cluster. This namespace is used throughout the installation process.\nSOURCE: https://github.com/bytewax/platform-docs-content/blob/main/setup/aws-marketplace-anywhere.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create namespace bytewax-system\n```\n\n----------------------------------------\n\nTITLE: Checking Default Storage Class in Kubernetes\nDESCRIPTION: Command to verify if a default Storage Class is configured in your Kubernetes cluster. This is an essential prerequisite for Bytewax Platform installation.\nSOURCE: https://github.com/bytewax/platform-docs-content/blob/main/setup/installation.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get sc\n```\n\n----------------------------------------\n\nTITLE: Example Storage Class Output in Kubernetes\nDESCRIPTION: Example output from the storage class command showing a properly configured default storage class. The output displays the storage class name, provisioner, reclaim policy, and other attributes.\nSOURCE: https://github.com/bytewax/platform-docs-content/blob/main/setup/installation.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nNAME                 PROVISIONER                RECLAIMPOLICY   VOLUMEBINDINGMODE   ALLOWVOLUMEEXPANSION   AGE\nstandard (default)   k8s.io/minikube-hostpath   Delete          Immediate           false                  84d\n```\n\n----------------------------------------\n\nTITLE: Creating Directory for Bytewax Platform Helm Chart\nDESCRIPTION: These commands create a new directory named 'awsmp-chart' to store the Bytewax Platform Helm chart and change the current working directory to it.\nSOURCE: https://github.com/bytewax/platform-docs-content/blob/main/setup/aws-marketplace-eks.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmkdir awsmp-chart\ncd awsmp-chart\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Documentation Generation in Bash\nDESCRIPTION: Defines environment variables for source and target paths needed when generating documentation. These variables point to the absolute paths of the waxctl repository and platform content repository directories.\nSOURCE: https://github.com/bytewax/platform-docs-content/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport waxctl_repo_path=<ABSOLUTE PATH OF WAXCTL REPOSITORY DIRECTORY>\nexport content_path=<ABSOLUTE PATH OF PLATFORM CONTENT REPOSITORY DIRECTORY>\n```\n\n----------------------------------------\n\nTITLE: Example of Setting Environment Variables in Bash\nDESCRIPTION: Provides a concrete example of setting the environment variables with specific directory paths for the waxctl repository and content repository.\nSOURCE: https://github.com/bytewax/platform-docs-content/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport waxctl_repo_path=/home/jdoe/repos/waxctl\nexport content_path=/home/jdoe/repos/platform-docs-content\n```\n\n----------------------------------------\n\nTITLE: Generating Dataflow CRD Documentation with Docker and crdoc\nDESCRIPTION: Docker command that uses the crdoc tool to generate markdown documentation for the Dataflow Custom Resource Definition. The command mounts the necessary volumes and outputs to the dataflow-crd.md file.\nSOURCE: https://github.com/bytewax/platform-docs-content/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -u $(id -u):$(id -g) --rm \\\n  -v $waxctl_repo_path:/workdir \\\n  -v $content_path/reference:/reference \\\n  ghcr.io/fybrik/crdoc:latest \\\n  --resources /workdir/operator/config/crd/bases \\\n  --output /reference/dataflow-crd.md \\\n  --template /reference/markdown.tmpl\n```\n\n----------------------------------------\n\nTITLE: Generating Helm Chart Documentation with helm-docs\nDESCRIPTION: Docker command that uses the helm-docs tool to generate documentation for the Helm chart in a dry-run mode, outputting the markdown table to standard output for manual insertion into the helm-chart.md file.\nSOURCE: https://github.com/bytewax/platform-docs-content/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm --volume \"$(pwd):/helm-docs\" -u $(id -u) jnorwood/helm-docs:latest --dry-run\n```"
  }
]