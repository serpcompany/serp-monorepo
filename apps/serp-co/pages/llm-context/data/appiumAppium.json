[
  {
    "owner": "appium",
    "repo": "appium",
    "content": "TITLE: Complete Appium Test Example in Ruby\nDESCRIPTION: A full test script example using appium_lib_core and test-unit to automate the Android Settings app, opening the Battery settings.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/quickstart/test-rb.md#2025-04-22_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n--8<-- \"./sample-code/quickstarts/rb/test.rb\"\n```\n\n----------------------------------------\n\nTITLE: Defining Appium Capabilities Using JSON\nDESCRIPTION: This snippet demonstrates how to define Appium capabilities using JSON format. It shows the use of the 'appium:options' capability to group multiple Appium-specific capabilities together, reducing repetition of the 'appium:' prefix.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/guides/caps.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"platformName\": \"iOS\",\n    \"appium:options\": {\n        \"automationName\": \"XCUITest\",\n        \"platformVersion\": \"16.0\",\n        \"app\": \"/path/to/your.app\",\n        \"deviceName\": \"iPhone 12\",\n        \"noReset\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Finding an Element in Appium Base Driver\nDESCRIPTION: Finds a UI element using a locator strategy and selector. Returns an element object with an element id.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/commands/base-driver.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nPOST /session/:sessionId/element\n```\n\n----------------------------------------\n\nTITLE: Performing Actions in Appium\nDESCRIPTION: API endpoint for performing actions. It converts image elements as origin to viewport coordinates before sending to the external driver. It accepts an array of action sequences and returns null.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/commands/images-plugin.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### `performActions`\n\n`POST` **`/session/:sessionId/actions`**\n\nIf the actions contains image elements as origin, convert them to viewport coordinates before sending it to the external driver\n\n**`See`**\n\n[https://w3c.github.io/webdriver/#perform-actions](https://w3c.github.io/webdriver/#perform-actions)\n\n<!-- comment source: method-signature -->\n\n#### Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `actions` | `ActionSequence[]` | an array of action sequences |\n\n#### Response\n\n`null`\n```\n\n----------------------------------------\n\nTITLE: Creating NUnit Project and Installing Dependencies\nDESCRIPTION: Commands to create a new NUnit test project and install required NuGet packages including Appium.WebDriver and Newtonsoft.Json.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/quickstart/test-dotnet.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd dotnet-client\ndotnet new nunit --name appiumtest \n\ncd appiumtest\n\n# This will install the latest 5.x version\ndotnet add package Appium.WebDriver  --prerelease\ndotnet add package Newtonsoft.Json --version 13.0.3\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Appium Commands in JavaScript with Webdriver.io\nDESCRIPTION: JavaScript implementation of common Appium actions including finding an element by XPath, clicking it, retrieving its text, and getting the page source. Uses Webdriver.io as the client library with async/await pattern.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/intro/clients.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst element = await driver.$('//*[@text=\"Foo\"]');\nawait element.click();\nconsole.log(await element.getText())\nconsole.log(await driver.getPageSource())\n```\n\n----------------------------------------\n\nTITLE: Sample Appium Test Script in Python\nDESCRIPTION: A basic Appium test script that automates the Android Settings app. It opens the app, clicks on the 'Battery' option, waits briefly, and then ends the session. The script uses Python's unittest module and demonstrates setting capabilities and interacting with elements.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/quickstart/test-py.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"./sample-code/quickstarts/py/test.py\"\n```\n\n----------------------------------------\n\nTITLE: Defining Appium Extension Metadata in package.json\nDESCRIPTION: Example of the required 'appium' field in package.json for an Appium driver, specifying driver name, automation name, platform names, and main class.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/developing/build-drivers.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...,\n  \"appium\": {\n    \"driverName\": \"fake\",\n    \"automationName\": \"Fake\",\n    \"platformNames\": [\n      \"Fake\"\n    ],\n    \"mainClass\": \"FakeDriver\"\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Appium Server with CLI Options\nDESCRIPTION: Examples of starting the Appium server using command-line interface with various configuration options such as address, port, and base path.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Start the server on the default host (0.0.0.0) and port (4723)\nappium server\n# You can also omit the 'server' subcommand\nappium\n# Start the server on the given host, port and use a custom base path prefix (the default prefix is '/')\nappium --address 127.0.0.1 --port 9000 --base-path /wd/hub\n```\n\n----------------------------------------\n\nTITLE: Creating a Session with the relaxed-caps Plugin in Appium\nDESCRIPTION: API endpoint documentation for starting a new automation session using POST /session. The endpoint accepts various capability formats and returns the capabilities object representing the created session.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/commands/relaxed-caps-plugin.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Plugin: relaxed-caps\n\n### `createSession`\n\n`POST` **`/session`**\n\nStart a new automation session\n\n**`See`**\n\n[https://w3c.github.io/webdriver/#new-session](https://w3c.github.io/webdriver/#new-session)\n\n<!-- comment source: multiple -->\n\n#### Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `desiredCapabilities?` | `any` | the new session capabilities |\n| `requiredCapabilities?` | `any` | another place the new session capabilities could be sent (typically left undefined) |\n| `capabilities?` | `any` | another place the new session capabilities could be sent (typically left undefined) |\n\n#### Response\n\n`any`\n\nThe capabilities object representing the created session\n```\n\n----------------------------------------\n\nTITLE: Using Appium Execute Method 'mobile: terminateApp' (Multiple Languages)\nDESCRIPTION: Shows how to use the Appium Execute Method 'mobile: terminateApp' to terminate an app using its bundle ID. This example demonstrates the syntax for calling Execute Methods in different programming languages.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/zh/guides/execute-methods.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nawait driver.executeScript('mobile: terminateApp', [{bundleId: 'com.my.app'}])\n```\n\nLANGUAGE: java\nCODE:\n```\nJavascriptExecutor jsDriver = (JavascriptExecutor) driver;\njsDriver.executeScript(\"mobile: terminateApp\", ImmutableMap.of(\"bundleId\", \"com.my.app\"));\n```\n\nLANGUAGE: python\nCODE:\n```\ndriver.execute_script('mobile: terminateApp', {'bundleId': 'com.my.app'})\n```\n\nLANGUAGE: ruby\nCODE:\n```\ndriver.execute_script 'mobile: terminateApp', { bundleId: 'com.my.app' }\n```\n\nLANGUAGE: csharp\nCODE:\n```\n((IJavaScriptExecutor)driver).ExecuteScript(\"mobile: terminateApp\",\n    new Dictionary<string, string> { { \"bundleId\", \"com.my.app\" } });\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Appium Commands in Java\nDESCRIPTION: Java implementation of common Appium actions including finding an element by XPath, clicking it, retrieving its text, and getting the page source. Uses the standard Java client for Appium.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/intro/clients.md#2025-04-22_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nWebElement element = driver.findElement(By.Xpath(\"//*[@text='Foo']\")\nelement.click()\nSystem.out.println(element.getText())\nSystem.out.println(driver.getPageSource())\n```\n\n----------------------------------------\n\nTITLE: Extending Appium's BaseDriver Class in JavaScript\nDESCRIPTION: Example of importing the BaseDriver class from Appium and creating a custom driver class that extends it. Shows both ES6 and CommonJS import styles.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/developing/build-drivers.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {BaseDriver} from 'appium/driver';\n// or: const {BaseDriver} = require('appium/driver');\n\nexport class MyDriver extends BaseDriver {\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Appium via npm\nDESCRIPTION: Command to install the core Appium server globally using npm. Note that this only installs the server and additional drivers need to be installed separately.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -g appium\n```\n\n----------------------------------------\n\nTITLE: Batch Installing Multiple Appium Drivers\nDESCRIPTION: Command to install multiple drivers at once using Appium's setup functionality. This installs UiAutomator2, XCUITest (on macOS), and Espresso drivers.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/quickstart/uiauto2-driver.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nappium setup\n```\n\n----------------------------------------\n\nTITLE: Implementing WebDriver Command Proxying\nDESCRIPTION: JavaScript code showing how to implement command proxying to another WebDriver implementation, including proxy setup and command avoidance patterns.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/developing/build-drivers.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ncanProxy() {\n    return true;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngetProxyAvoidList() {\n    return [\n        ['POST', new RegExp('^/session/[^/]+/appium')]\n    ];\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst proxy = new JWProxy({\n    server: 'remote.server',\n    port: 1234,\n    base: '/',\n});\n\nthis.proxyReqRes = proxy.proxyReqRes.bind(proxy);\nthis.proxyCommand = proxy.command.bind(proxy);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nproxyActive() {\n    return true; // or use custom logic\n}\n```\n\n----------------------------------------\n\nTITLE: Appium Custom Automation Configuration\nDESCRIPTION: Example showing how to configure custom automation driver using extension objects with git source.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/guides/caps.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"$cloud:appiumOptions\": {\n        \"automation\": {\n            \"name\": \"git+https://some-git-host.com/custom-driver-project.git\",\n            \"version\": \"some-git-sha\",\n            \"source\": \"git\",\n            \"package\": \"driver-npm-package-name\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Android UI Test with Appium\nDESCRIPTION: Complete C# test implementation showing Appium session setup, test configuration, and a simple UI interaction test that opens the Battery settings on an Android device. Includes driver initialization with capabilities and test cleanup.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/quickstart/test-dotnet.md#2025-04-22_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Appium;\nusing OpenQA.Selenium.Appium.Android;\nusing OpenQA.Selenium.Appium.Enums;\n\nnamespace appiumtest;\n\npublic class Tests\n{\n    private AndroidDriver _driver;\n\n    [OneTimeSetUp]\n    public void SetUp()\n    {\n        var serverUri = new Uri(Environment.GetEnvironmentVariable(\"APPIUM_HOST\") ?? \"http://127.0.0.1:4723/\");\n        var driverOptions = new AppiumOptions() {\n            AutomationName = AutomationName.AndroidUIAutomator2,\n            PlatformName = \"Android\",\n            DeviceName = \"Android Emulator\",\n        };\n\n        driverOptions.AddAdditionalAppiumOption(\"appPackage\", \"com.android.settings\");\n        driverOptions.AddAdditionalAppiumOption(\"appActivity\", \".Settings\");\n        // NoReset assumes the app com.google.android is preinstalled on the emulator\n        driverOptions.AddAdditionalAppiumOption(\"noReset\", true);\n\n        _driver = new AndroidDriver(serverUri, driverOptions, TimeSpan.FromSeconds(180));\n        _driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(10);\n    }\n\n    [OneTimeTearDown]\n    public void TearDown()\n    {\n        _driver.Dispose();\n    }\n\n    [Test]\n    public void TestBattery()\n    {\n        _driver.StartActivity(\"com.android.settings\", \".Settings\");\n        _driver.FindElement(By.XPath(\"//*[@text='Battery']\")).Click();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending HTTP Protocol with New Methods in JavaScript\nDESCRIPTION: This code defines new HTTP routes and commands for an Appium plugin using the 'newMethodMap' static variable. It demonstrates how to add GET and POST methods for custom endpoints, including parameter specifications and proxy settings.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/developing/build-plugins.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nstatic newMethodMap = {\n  '/session/:sessionId/fake_data': {\n    GET: {command: 'getFakeSessionData', neverProxy: true},\n    POST: {\n      command: 'setFakeSessionData',\n      payloadParams: {required: ['data']},\n      neverProxy: true,\n    },\n  },\n  '/session/:sessionId/fakepluginargs': {\n    GET: {command: 'getFakePluginArgs', neverProxy: true},\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining New HTTP Routes in Appium Driver\nDESCRIPTION: Example of extending WebDriver protocol by defining new HTTP routes and commands using newMethodMap static property. Shows how to add GET and POST endpoints with required parameters.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/developing/build-drivers.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nstatic newMethodMap = {\n  '/session/:sessionId/fakedriver': {\n    GET: {command: 'getFakeThing'},\n    POST: {command: 'setFakeThing', payloadParams: {required: ['thing']}},\n  },\n  '/session/:sessionId/fakedriverargs': {\n    GET: {command: 'getFakeDriverArgs'},\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Appium Commands in Python\nDESCRIPTION: Python implementation of common Appium actions including finding an element by XPath, clicking it, retrieving its text, and getting the page source. Uses the Python client for Appium with the By locator approach.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/intro/clients.md#2025-04-22_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nelement = driver.find_element(by=By.XPATH, value='//*[@text=\"Foo\"]')\nelement.click()\nprint(element.text)\nprint(driver.page_source)\n```\n\n----------------------------------------\n\nTITLE: One-Step Appium Installation with Drivers\nDESCRIPTION: Command to install Appium 2 along with multiple drivers in a single step, useful for CI environments.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/zh/guides/migrating-1-to-2.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -g appium --drivers=xcuitest,uiautomator2\n```\n\n----------------------------------------\n\nTITLE: Managing Appium Drivers with CLI\nDESCRIPTION: Examples of using Appium's Extension command-line interface to install, list, update, and uninstall drivers. These commands allow users to manage drivers for various platforms.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Install an official driver from npm (see documentation for a list of such drivers)\nappium driver install <driver-name>\n# Install any driver from npm\nappium driver install --source=npm <driver-name>\n# See documentation for installation from other sources\n\n# List already installed drivers\nappium driver list --installed\n# Update a driver (it must be already installed)\n# This will NOT update the major version, in order to prevent breaking changes\nappium driver update <driver-name>\n# Update a driver to the most recent version (may include breaking changes)\nappium driver update <driver-name> --unsafe\n# Uninstall a driver (it won't last forever, will it?)\nappium driver uninstall <driver-name>\n```\n\n----------------------------------------\n\nTITLE: Managing Multiple Driver Versions with APPIUM_HOME\nDESCRIPTION: Commands demonstrating how to install and use different versions of the same driver by setting different APPIUM_HOME paths.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/zh/guides/managing-exts.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAPPIUM_HOME=/path/to/home1 appium driver install xcuitest@4.11.1\nAPPIUM_HOME=/path/to/home2 appium driver install xcuitest@4.11.2\n```\n\n----------------------------------------\n\nTITLE: Using appium:options in Capabilities JSON\nDESCRIPTION: This JSON snippet shows how to use the new appium:options capability to group Appium-specific capabilities when starting an iOS session on Safari.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/ja/guides/migrating-1-to-2.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"platformName\": \"iOS\",\n  \"browserName\": \"Safari\",\n  \"appium:options\": {\n    \"platformVersion\": \"14.4\",\n    \"deviceName\": \"iPhone 11\",\n    \"automationName\": \"XCUITest\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Drivers in Appium 2\nDESCRIPTION: Commands to install Appium drivers using the new extension CLI, showing how to install the latest version or a specific version of a driver.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/guides/migrating-1-to-2.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nappium driver install uiautomator2     # installs the latest driver version\nappium driver install xcuitest@4.12.2  # installs a specific driver version\n```\n\n----------------------------------------\n\nTITLE: Extending BasePlugin Class for Appium Plugin\nDESCRIPTION: Shows how to import the BasePlugin class from Appium and extend it to create a custom plugin class. This is a fundamental step in creating an Appium plugin.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/developing/build-plugins.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport {BasePlugin} from 'appium/plugin';\n// or: const {BasePlugin} = require('appium/plugin');\n\nexport class MyPlugin extends BasePlugin {\n  // class methods here\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Appium Plugin Metadata in package.json\nDESCRIPTION: Demonstrates how to include the required Appium extension metadata in the package.json file of a plugin. This metadata specifies the plugin name and main class.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/developing/build-plugins.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...,\n  \"appium\": {\n    \"pluginName\": \"fake\",\n    \"mainClass\": \"FakePlugin\"\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Starting an Appium Server via Command Line\nDESCRIPTION: Shows the command for launching an Appium server, which can be called either explicitly with 'server' or by using just 'appium'.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/cli/index.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nappium server\n```\n\nLANGUAGE: bash\nCODE:\n```\nappium\n```\n\n----------------------------------------\n\nTITLE: Managing Multiple Driver Versions with APPIUM_HOME\nDESCRIPTION: Commands demonstrating how to install and use different versions of the same driver by setting different APPIUM_HOME paths.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/guides/managing-exts.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAPPIUM_HOME=/path/to/home1 appium driver install xcuitest@4.11.1\nAPPIUM_HOME=/path/to/home2 appium driver install xcuitest@4.11.2\n```\n\n----------------------------------------\n\nTITLE: Creating Storage Item with Initial Data in TypeScript\nDESCRIPTION: Shows how to create a storage item with initial data, accepting either Buffer or string content types.\nSOURCE: https://github.com/appium/appium/blob/master/packages/strongbox/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst item: Buffer|string = getSomeData();\n\nconst item = await box.createItemWithContents('my unique name', data);\n```\n\n----------------------------------------\n\nTITLE: Using driverE2ETestSuite for Appium Driver E2E Testing in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the driverE2ETestSuite method to create a Mocha test suite for E2E testing of an Appium driver. It shows the basic structure of the test suite and how to include default W3C capabilities.\nSOURCE: https://github.com/appium/appium/blob/master/packages/driver-test-support/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {driverE2ETestSuite} from '@appium/driver-test-support';\n\nconst defaultW3CCapabilities = {\n  // some capabilities\n};\n\ndescribe('MyDriverClass', function() {\n  driverE2ETestSuite(MyDriverClass, defaultW3CCapabilities);\n\n  describe('more tests', function() {\n    // ...\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Appium Drivers using CLI\nDESCRIPTION: These commands demonstrate how to install, list, update, and uninstall Appium drivers using the Appium Extension command-line interface.\nSOURCE: https://github.com/appium/appium/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Install an official driver from npm (see documentation for a list of such drivers)\nappium driver install <driver-name>\n# Install any driver from npm\nappium driver install --source=npm <driver-name>\n# See documentation for installation from other sources\n\n# List already installed drivers\nappium driver list --installed\n# Update a driver (it must be already installed)\n# This will NOT update the major version, in order to prevent breaking changes\nappium driver update <driver-name>\n# Update a driver to the most recent version (may include breaking changes)\nappium driver update <driver-name> --unsafe\n# Uninstall a driver (it won't last forever, will it?)\nappium driver uninstall <driver-name>\n```\n\n----------------------------------------\n\nTITLE: Handling All Appium Commands in Plugin\nDESCRIPTION: Demonstrates how to implement a handle method to intercept all Appium commands, allowing for global behavior modification such as logging command execution times.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/developing/build-plugins.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nasync handle(next, driver, cmdName, ...args) {\n  const start = Date.now();\n  try {\n    const result = await next();\n  } finally {\n    const elapsedMs = Date.now() - start;\n    this.log(`Command '${cmdName}' took ${elapsedMs}`);\n  }\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Specific Appium Command in Plugin\nDESCRIPTION: This example demonstrates how to intercept and handle a specific Appium command (setUrl) within a plugin. It shows how to add custom behavior before and after the original command execution.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/zh/developing/build-plugins.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nasync setUrl(next, driver, url) {\n  this.log(`Let's get the page source for some reason before navigating to '${url}'!`);\n  await driver.getPageSource();\n  const result = await next();\n  this.log(`We can also log after the original behaviour`);\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Constructor for Custom Appium Driver\nDESCRIPTION: Example of creating a constructor for a custom Appium driver, calling the super constructor and adding custom initialization.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/developing/build-drivers.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconstructor(...args) {\n    super(...args);\n    // now do your own thing\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Capability Validation for Appium Driver\nDESCRIPTION: Example of setting up capability validation constraints for a custom Appium driver, using the UiAutomator2 driver as a reference.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/developing/build-drivers.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  app: {\n    presence: true,\n    isString: true\n  },\n  automationName: {\n    isString: true\n  },\n  browserName: {\n    isString: true\n  },\n  launchTimeout: {\n    isNumber: true\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Appium Plugins with CLI\nDESCRIPTION: Examples of using Appium's Extension command-line interface to install, list, update, and uninstall plugins. These commands allow users to manage plugins that extend Appium's functionality.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Install an official plugin from npm (see documentation for a list of such plugins)\nappium plugin install <plugin-name>\n# Install any plugin from npm\nappium plugin install --source=npm <plugin-name>\n# See documentation for installation from other sources\n\n# List already installed plugins\nappium plugin list --installed\n# Update a plugin (it must be already installed)\n# This will NOT update the major version, in order to prevent breaking changes\nappium plugin update <plugin-name>\n# Update a plugin to the most recent version (may include breaking changes)\nappium plugin update <plugin-name> --unsafe\n# Uninstall a plugin\nappium plugin uninstall <plugin-name>\n```\n\n----------------------------------------\n\nTITLE: Accessing Appium Help Documentation via Command Line\nDESCRIPTION: Shows how to display the help message for Appium or any of its subcommands using command-line flags.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/cli/index.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nappium -h\n```\n\nLANGUAGE: bash\nCODE:\n```\nappium --help\n```\n\n----------------------------------------\n\nTITLE: Implementing driverData Getter in JavaScript for Appium Driver\nDESCRIPTION: This snippet demonstrates how to implement the driverData getter in an Appium driver to return information about currently used resources. It helps prevent resource conflicts between multiple driver instances.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/developing/build-drivers.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nget driverData() {\n  return {specialPort: 1234, specialFile: /path/to/file}\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Appium Server with Command-Line Arguments\nDESCRIPTION: Examples of how to start the Appium server using command-line arguments. The 'server' subcommand is optional as it's the default behavior.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/cli/args.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nappium\nappium server\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Command Handler in Appium Plugin\nDESCRIPTION: This code snippet shows how to implement a generic handler for all Appium commands in a plugin. It demonstrates logging the execution time for each command as an example.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/zh/developing/build-plugins.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nasync handle(next, driver, cmdName, ...args) {\n  const start = Date.now();\n  try {\n    const result = await next();\n  } finally {\n    const elapsedMs = Date.now() - start;\n    this.log(`Command '${cmdName}' took ${elapsedMs}`);\n  }\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: WebDriver URL Route Definition Example\nDESCRIPTION: Example of WebDriver protocol route definition showing GET and POST endpoints for URL manipulation with required parameters.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/developing/build-drivers.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n'/session/:sessionId/url': {\n    GET: {command: 'getUrl'},\n    POST: {command: 'setUrl', payloadParams: {required: ['url']}},\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Appium Commands in Ruby\nDESCRIPTION: Ruby implementation of common Appium actions including finding an element by XPath, clicking it, retrieving its text, and getting the page source. Uses the Ruby client for Appium with symbol-based locator specification.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/intro/clients.md#2025-04-22_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\nelement = driver.find_element :xpath, '//*[@text=\"Foo\"]'\nelement.click\nputs element.text\nputs driver.page_source\n```\n\n----------------------------------------\n\nTITLE: Resetting Appium Server Configuration\nDESCRIPTION: Command to uninstall all drivers, plugins and manifest files from the Appium home folder\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/cli/setup.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nappium setup reset\n```\n\n----------------------------------------\n\nTITLE: Defining New Method Map for Appium Plugin in JavaScript\nDESCRIPTION: Illustrates how to define new HTTP routes and commands for an Appium plugin using the newMethodMap static variable. This allows plugins to extend the WebDriver protocol with custom commands.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/zh/developing/build-plugins.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nstatic newMethodMap = {\n  '/session/:sessionId/fake_data': {\n    GET: {command: 'getFakeSessionData', neverProxy: true},\n    POST: {\n      command: 'setFakeSessionData',\n      payloadParams: {required: ['data']},\n      neverProxy: true,\n    },\n  },\n  '/session/:sessionId/fakepluginargs': {\n    GET: {command: 'getFakePluginArgs', neverProxy: true},\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Storage Plugin on Appium Server\nDESCRIPTION: Command to start Appium server with the storage plugin enabled using the --use-plugins flag.\nSOURCE: https://github.com/appium/appium/blob/master/packages/storage-plugin/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nappium --use-plugins=storage\n```\n\n----------------------------------------\n\nTITLE: Implementing Settings Handler in Appium Driver\nDESCRIPTION: Example showing how to initialize and handle driver settings with default values and update callbacks.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/developing/build-drivers.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconstructor() {\n  const defaults = {setting1: 'value1'};\n  this.settings = new DeviceSettings(defaults, this.onSettingsUpdate.bind(this));\n}\n\nasync onSettingsUpdate(key, value) {\n  // do anything you want here with key and value\n}\n```\n\n----------------------------------------\n\nTITLE: Batch Installing Appium Components via Command Line\nDESCRIPTION: Shows the command for batch installing a preset of drivers and plugins, which simplifies the setup process.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/cli/index.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nappium setup\n```\n\n----------------------------------------\n\nTITLE: Basic Appium Cloud Provider Capabilities Configuration\nDESCRIPTION: Example showing basic Appium capabilities configuration for cloud providers, including platform settings, automation configuration, and plugin specification.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/guides/caps.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"platformName\": \"iOS\",\n  \"appium:platformVersion\": \"14.4\",\n  \"appium:deviceName\": \"iPhone 11\",\n  \"appium:app\": \"Some-App.app.zip\",\n  \"appium:automationName\": \"XCUITest\",\n  \"$cloud:appiumOptions\": {\n    \"version\": \"2.0.0\",\n    \"automationVersion\": \"3.52.0\",\n    \"plugins\": [\"images\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Element Finding in Appium Driver\nDESCRIPTION: Shows implementation of the findElOrEls method for handling element location using different strategies and selectors. Supports both single and multiple element finding.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/developing/build-drivers.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nasync findElOrEls(strategy, selector, mult, context) {\n    // find your element here\n}\n```\n\n----------------------------------------\n\nTITLE: Using appium:options Capability Format in iOS Safari Session\nDESCRIPTION: Example showing how to structure capabilities for an iOS Safari session using the new appium:options format, which allows grouping Appium-specific capabilities into a single object.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/guides/migrating-1-to-2.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"platformName\": \"iOS\",\n  \"browserName\": \"Safari\",\n  \"appium:options\": {\n    \"platformVersion\": \"14.4\",\n    \"deviceName\": \"iPhone 11\",\n    \"automationName\": \"XCUITest\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Driver Updates in Appium 2\nDESCRIPTION: Command to check for available updates to installed Appium drivers using the new extension CLI.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/guides/migrating-1-to-2.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nappium driver list --updates\n```\n\n----------------------------------------\n\nTITLE: Enabling Image Match Result and Finding Element by Image in Ruby\nDESCRIPTION: This snippet demonstrates how to enable the getMatchedImageResult setting and find an element by image in Ruby. It also shows how to retrieve the visual attribute of the matched element.\nSOURCE: https://github.com/appium/appium/blob/master/packages/images-plugin/docs/find-by-image.md#2025-04-22_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n@driver.update_settings({ getMatchedImageResult: true })\nel = @driver.find_element_by_image 'path/to/img.ong'\nimg_el.visual # returns base64 encoded string\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Appium Commands in C#\nDESCRIPTION: C# implementation of common Appium actions including finding an element by AccessibilityId, clicking it, retrieving its text, and getting the page source. Uses the C# client for Appium with the MobileBy locator approach.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/intro/clients.md#2025-04-22_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nAppiumElement element = driver.FindElement(MobileBy.AccessibilityId(\"Views\"));   \nelement.click();\nSystem.Console.WriteLine(element.Text);\nSystem.Console.WriteLine(driver.PageSource);\n```\n\n----------------------------------------\n\nTITLE: Installing Appium Driver Test Support Package using npm\nDESCRIPTION: This snippet shows the npm command to install the @appium/driver-test-support package along with its peer dependencies, appium and mocha. It's intended for use in a development environment.\nSOURCE: https://github.com/appium/appium/blob/master/packages/driver-test-support/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install appium mocha @appium/driver-test-support --save-dev\n```\n\n----------------------------------------\n\nTITLE: Executing JavaScript in WebDriver (Multiple Languages)\nDESCRIPTION: Demonstrates how to use the Execute Script command to run JavaScript in a browser across different programming languages. The example adds two numbers passed as arguments.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/zh/guides/execute-methods.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait driver.executeScript('return arguments[0] + arguments[1]', [3, 4])\n```\n\nLANGUAGE: java\nCODE:\n```\nJavascriptExecutor jsDriver = (JavascriptExecutor) driver;\njsDriver.executeScript(\"return arguments[0] + arguments[1]\", 3, 4);\n```\n\nLANGUAGE: python\nCODE:\n```\ndriver.execute_script('return arguments[0] + arguments[1]', 3, 4)\n```\n\nLANGUAGE: ruby\nCODE:\n```\ndriver.execute_script 'return arguments[0] + arguments[1]', 3, 4\n```\n\nLANGUAGE: csharp\nCODE:\n```\n((IJavaScriptExecutor)driver).ExecuteScript(\"return arguments[0] + arguments[1]\", 3, 4);\n```\n\n----------------------------------------\n\nTITLE: Installing Appium with Drivers in One Command\nDESCRIPTION: Command to install Appium and specific drivers simultaneously using the --drivers flag, useful for CI environments or quick setup.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/guides/migrating-1-to-2.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -g appium --drivers=xcuitest,uiautomator2\n```\n\n----------------------------------------\n\nTITLE: Finding Multiple Elements from Another Element in Appium Base Driver\nDESCRIPTION: Finds all UI elements among the descendants of a given element using a locator strategy and selector.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/commands/base-driver.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nPOST /session/:sessionId/element/:elementId/elements\n```\n\n----------------------------------------\n\nTITLE: Implementing Session Deletion in Appium Driver\nDESCRIPTION: Demonstrates how to override the deleteSession method to perform cleanup operations before ending a session. Important to handle errors gracefully to ensure complete cleanup.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/developing/build-drivers.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nasync deleteSession() {\n    // do your own cleanup here\n    // don't forget to call super!\n    await super.deleteSession();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Constructor for Appium Plugin\nDESCRIPTION: Demonstrates how to set up a constructor for an Appium plugin, ensuring that the parent class constructor is called before adding custom initialization logic.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/developing/build-plugins.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconstructor(...args) {\n    super(...args);\n    // now do your own thing\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Appium Config in package.json\nDESCRIPTION: Example showing how to embed Appium configuration within a project's package.json file using the appiumConfig property. This demonstrates setting a custom server port.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/developing/config-system.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"appiumConfig\": {\n    \"server\": {\n      \"port\": 12345\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint with Appium TypeScript Config\nDESCRIPTION: Example configuration for eslint.config.mjs file showing how to extend the Appium TypeScript ESLint configuration with optional additional customizations.\nSOURCE: https://github.com/appium/appium/blob/master/packages/eslint-config-appium-ts/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport appiumConfig from '@appium/eslint-config-appium-ts';\n\nexport default [\n  ...appiumConfig,\n  // add any other config changes \n];\n```\n\n----------------------------------------\n\nTITLE: Finding an Element from Another Element in Appium Base Driver\nDESCRIPTION: Finds a UI element among the descendants of a given element using a locator strategy and selector.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/commands/base-driver.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nPOST /session/:sessionId/element/:elementId/element\n```\n\n----------------------------------------\n\nTITLE: HTTP Protocol Integration Overview\nDESCRIPTION: Describes how Appium implements the WebDriver protocol over HTTP to enable client-server communication across different programming languages. The server handles platform-specific automation while thin clients in any language can send HTTP requests to control automation.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/intro/appium.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nHTTP Server <-> HTTP Client\\nAppium Server (Node.js) <-> Appium Client (Any Language)\n```\n\n----------------------------------------\n\nTITLE: Using driverUnitTestSuite for Appium Driver Unit Testing in JavaScript\nDESCRIPTION: This snippet shows how to use the driverUnitTestSuite method to create a Mocha test suite for unit testing of an Appium driver. It demonstrates the structure of the test suite and how to include default W3C capabilities.\nSOURCE: https://github.com/appium/appium/blob/master/packages/driver-test-support/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {driverUnitTestSuite} from '@appium/driver-test-support';\n\nconst defaultW3CCapabilities = {\n  // some capabilities\n};\n\ndescribe('MyDriverClass', function() {\n  driverUnitTestSuite(MyDriverClass, defaultW3CCapabilities);\n\n  describe('more tests', function() {\n    // ...\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing BiDi Command Handlers in JavaScript\nDESCRIPTION: This code snippet demonstrates the method signatures for implementing handlers for custom WebDriver BiDi commands in an Appium plugin. It shows how to define methods with the correct parameters, including 'next' and 'driver' for chaining behavior.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/developing/build-plugins.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nasync startFrameCap(next: () => Promise<any>, driver: DriverClass, videoSource: string, showOnScreen: boolean): Promise<any>;\nasync stopFrameCap(next: () => Promise<any>, driver: DriverClass): Promise<any>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Execute Script Commands in Appium Driver\nDESCRIPTION: Example showing how to implement custom Execute Script commands using executeMethodMap and handler methods. Demonstrates parameter validation and method routing.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/developing/build-drivers.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nstatic executeMethodMap = {\n  'soundz: playSong', {\n    command: 'soundzPlaySong',\n    params: {required: ['song', 'artist'], optional: []},\n  }\n}\n\nasync soundzPlaySong(song, artist) {\n  // play the song based on song and artist details\n}\n\nasync execute(script, args) {\n  return await this.executeMethod(script, args);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Appium Capabilities for Cloud Providers (JSON)\nDESCRIPTION: This snippet demonstrates a basic set of Appium capabilities for cloud providers, including platformName, appium:options, and $cloud:appiumOptions. It specifies the Appium version, automation version, and plugins to be used.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/zh/guides/caps.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"platformName\": \"iOS\",\n  \"appium:platformVersion\": \"14.4\",\n  \"appium:deviceName\": \"iPhone 11\",\n  \"appium:app\": \"Some-App.app.zip\",\n  \"appium:automationName\": \"XCUITest\",\n  \"$cloud:appiumOptions\": {\n    \"version\": \"2.0.0\",\n    \"automationVersion\": \"3.52.0\",\n    \"plugins\": [\"images\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of @appium/logger in JavaScript\nDESCRIPTION: This example demonstrates how to import and use the logger in a JavaScript file. It shows how to log an info message with a prefix, main message, and additional data.\nSOURCE: https://github.com/appium/appium/blob/master/packages/logger/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport log from '@appium/logger';\n\n// additional stuff ---------------------------+\n// message ----------+                         |\n// prefix ----+      |                         |\n// level -+   |      |                         |\n//        v   v      v                         v\n    log.info('fyi', 'I have a kitty cat: %j', myKittyCat);\n```\n\n----------------------------------------\n\nTITLE: Extending BasePlugin Class for Appium Plugin in JavaScript\nDESCRIPTION: This code demonstrates how to import Appium's BasePlugin class and extend it to create a custom plugin. It shows both ES6 and CommonJS import styles.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/zh/developing/build-plugins.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {BasePlugin} from 'appium/plugin';\n// or: const {BasePlugin} = require('appium/plugin');\n\nexport class MyPlugin extends BasePlugin {\n  // class methods here\n}\n```\n\n----------------------------------------\n\nTITLE: Pattern-Based Text Replacement with Custom Replacer\nDESCRIPTION: Configuration using regex pattern to match and replace text with custom replacer value, including case-insensitive flag\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/zh/guides/log-filters.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"pattern\": \"my\\\\.magic\\\\.\\\\w\",\n        \"flags\": \"i\",\n        \"replacer\": \"***\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Finding an Element from Shadow Root in Appium Base Driver\nDESCRIPTION: Finds an element from a shadow root using a locator strategy and selector.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/commands/base-driver.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nPOST /session/:sessionId/shadow/:shadowId/element\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables for Chromedriver Installation\nDESCRIPTION: Example of using environment variables to customize Chromedriver installation when installing the UiAutomator2 driver in Appium 2.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/guides/migrating-1-to-2.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nAPPIUM_SKIP_CHROMEDRIVER_INSTALL=1 appium driver install uiautomator2\n```\n\n----------------------------------------\n\nTITLE: Detecting Image Occurrence in JavaScript\nDESCRIPTION: Uses the getImageOccurrence function to calculate the position of a partial image within a full image.\nSOURCE: https://github.com/appium/appium/blob/master/packages/opencv/README.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {getImageOccurrence} from '@appium/opencv';\nimport {fs} from '@appium/support';\n\nconst fullImage = await fs.readFile('image1.jpg')\nconst partialImage = await fs.readFile('image2.jpg')\nconst {rect, score} = await getImageOccurrence(fullImage, partialImage);\n```\n\n----------------------------------------\n\nTITLE: Enabling Image Match Result and Finding Element by Image in Python\nDESCRIPTION: This snippet shows how to enable the getMatchedImageResult setting and find an element by image in Python. It also demonstrates how to retrieve the visual attribute of the matched element.\nSOURCE: https://github.com/appium/appium/blob/master/packages/images-plugin/docs/find-by-image.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nself.driver.update_settings({\"getMatchedImageResult\": True})\nel = self.driver.find_element_by_image('path/to/img.ong')\nel.get_attribute('visual') # returns base64 encoded string\n```\n\n----------------------------------------\n\nTITLE: Overriding Specific Appium Command in Plugin\nDESCRIPTION: Shows how to intercept and handle a specific Appium command (setUrl) within a plugin, adding custom behavior before and after the original command execution.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/developing/build-plugins.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nasync setUrl(next, driver, url) {\n  this.log(`Let's get the page source for some reason before navigating to '${url}'!`);\n  await driver.getPageSource();\n  const result = await next();\n  this.log(`We can also log after the original behaviour`);\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Universal XML Plugin for Appium\nDESCRIPTION: Command to install the universal-xml plugin for Appium using npm.\nSOURCE: https://github.com/appium/appium/blob/master/packages/universal-xml-plugin/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nappium plugin install universal-xml\n```\n\n----------------------------------------\n\nTITLE: Running Doctor Checks for Appium Extensions\nDESCRIPTION: Command to run doctor checks that validate whether an extension has its prerequisites configured correctly.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/cli/extensions.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nappium <ext-type> doctor <ext-name>\n```\n\n----------------------------------------\n\nTITLE: Configuring E2E Tests for Appium Plugins using pluginE2EHarness\nDESCRIPTION: This snippet demonstrates how to use the pluginE2EHarness method to set up E2E tests for Appium plugins. It configures a server and driver, and uses WebdriverIO to communicate with the test Appium server.\nSOURCE: https://github.com/appium/appium/blob/master/packages/plugin-test-support/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {pluginE2EHarness} from '@appium/plugin-test-support';\nimport {remote} from 'webdriverio';\n\ndescribe('MyPlugin', function() {\n  pluginE2EHarness({\n    before: global.before, // from mocha\n    after: global.after, // from mocha\n    serverArgs: SOME_EXTRA_SERVER_ARGS,\n    port: 31337,\n    host: '127.0.0.1',\n    appiumHome: process.env.APPIUM_HOME, // best practice: use a temp dir instead\n    driverName: 'fake', // driver to test with\n    driverSource: 'local', // use \"local\" unless you want appium to install from npm every time\n    driverSpec: FAKE_DRIVER_DIR, // path to local driver working copy or installation\n    pluginName: 'MyPlugin', // your plugin \n    pluginSource: 'local', // use \"local\" for this\n    pluginSpec: THIS_PLUGIN_DIR, // dir of this plugin's `package.json`\n  });\n\n  it('should use my plugin', async function() {\n    // at this point, the Appium server will be running with the plugin/driver combination of your\n    // choosing\n\n    // port/host should match what you provided to `pluginE2EHarness`\n    const browser = await remote({port: 31337, hostname: '127.0.0.1'});\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: Occurrences Lookup in Ruby\nDESCRIPTION: This Ruby snippet shows how to perform occurrences lookup using the find_image_occurrence method. It demonstrates the usage with and without visualization, and saves the visualization result to a file.\nSOURCE: https://github.com/appium/appium/blob/master/packages/images-plugin/docs/image-comparison.md#2025-04-22_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nimage1 = File.read 'first/image/path.png'\nimage2 = File.read 'partial/image/path.png'\n\nfind_result = @driver.find_image_occurrence full_image: image1, partial_image: image2\nassert_equal({ 'rect' => { 'x' => 0, 'y' => 0, 'width' => 750, 'height' => 1334 } }, find_result)\n\nfind_result_visual = @driver.find_image_occurrence full_image: image1, partial_image: image2, visualize: true\nassert_equal %w(rect visualization), find_result_visual.keys\nFile.open('find_result_visual.png', 'wb') { |f| f<< Base64.decode64(find_result_visual['visualization']) }\nassert File.size? 'find_result_visual.png'\n```\n\n----------------------------------------\n\nTITLE: Finding Multiple Elements in Appium\nDESCRIPTION: API endpoint for finding multiple UI elements using a locator strategy and selector. It returns a possibly-empty list of element objects.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/commands/images-plugin.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### `findElements`\n\n`POST` **`/session/:sessionId/elements`**\n\nFind a a list of all UI elements matching a given a locator strategy and a selector\n\n**`See`**\n\n[https://w3c.github.io/webdriver/#find-elements](https://w3c.github.io/webdriver/#find-elements)\n\n<!-- comment source: method-signature -->\n\n#### Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `using` | `any` | the locator strategy |\n| `value` | `any` | the selector to combine with the strategy to find the specific elements |\n\n#### Response\n\n`any`\n\nA possibly-empty list of element objects\n```\n\n----------------------------------------\n\nTITLE: Installing Desktop Application Automation Preset\nDESCRIPTION: Command to install desktop application automation drivers (mac2 for macOS, windows for Windows) and images plugin\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/cli/setup.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nappium setup desktop\n```\n\n----------------------------------------\n\nTITLE: Calculating Image Similarity in JavaScript\nDESCRIPTION: Uses the getImagesSimilarity function to calculate the similarity score between two images. Both images are expected to have the same resolution.\nSOURCE: https://github.com/appium/appium/blob/master/packages/opencv/README.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {getImagesSimilarity} from '@appium/opencv';\nimport {fs} from '@appium/support';\n\nconst image1 = await fs.readFile('image1.jpg')\nconst image2 = await fs.readFile('image2.jpg')\nconst {score} = await getImagesSimilarity(image1, image2);\n```\n\n----------------------------------------\n\nTITLE: Implementing Execute Method for Appium Plugin in JavaScript\nDESCRIPTION: Demonstrates how to implement an Execute Method for an Appium plugin, allowing the plugin to handle custom commands through the Execute Script interface. This includes defining the executeMethodMap and overriding the execute command.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/zh/developing/build-plugins.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nstatic executeMethodMap = {\n  'fake: plugMeIn': {\n    command: 'plugMeIn',\n    params: {required: ['socket']},\n  },\n};\n\nasync plugMeIn(next, driver, socket) {\n  return `Plugged in to ${socket}`;\n}\n\nasync execute(next, driver, script, args) {\n  return await this.executeMethod(next, driver, script, args);\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Unexpected Shutdowns in JavaScript for Appium Driver\nDESCRIPTION: This code shows how to attach a handler for unexpected shutdowns in an Appium driver. It allows performing custom cleanup logic when encountering conditions that prevent normal operation.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/developing/build-drivers.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nthis.onUnexpectedShutdown(handler)\n```\n\n----------------------------------------\n\nTITLE: Activating Universal XML Plugin for Appium\nDESCRIPTION: Command to launch Appium server with the universal-xml plugin explicitly activated.\nSOURCE: https://github.com/appium/appium/blob/master/packages/universal-xml-plugin/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nappium --use-plugins=universal-xml\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Appium Driver with JavaScript\nDESCRIPTION: Shows the minimal code required to create a new Appium driver by extending the BaseDriver class. This simple implementation doesn't do anything yet but illustrates the basic structure of an Appium driver.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/intro/drivers.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport BaseDriver from '@appium/base-driver'\n\nclass MyNewDriver extends BaseDriver {\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Session Creation in Appium Driver\nDESCRIPTION: Shows how to override the createSession method to add custom startup logic while maintaining base functionality. The method processes capabilities and returns session information.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/developing/build-drivers.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nasync createSession(jwpCaps, reqCaps, w3cCaps, otherDriverData) {\n    const [sessionId, caps] = super.createSession(w3cCaps);\n    // do your own stuff here\n    return [sessionId, caps];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Error from Code in JavaScript\nDESCRIPTION: Shows how to use the errorFromCode helper function to create an error object from an error code and message, and how to check its properties.\nSOURCE: https://github.com/appium/appium/blob/master/packages/base-driver/docs/mjsonwp/errors.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { errors, errorFromCode } from 'appium-base-driver';\n\nlet error = errorFromCode(6, 'an error has occurred');\n\nconsole.log(error instanceof errors.NoSuchDriverError);\n// => true\n\nconsole.log(error.message === 'an error has occurred');\n// => true\n```\n\n----------------------------------------\n\nTITLE: Find Elements Endpoint Documentation\nDESCRIPTION: POST endpoint to find all UI elements matching a locator strategy and selector. Returns a list of element objects that may be empty.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/commands/universal-xml-plugin.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nPOST /session/:sessionId/elements\n```\n\n----------------------------------------\n\nTITLE: Managing Appium Drivers via Command Line\nDESCRIPTION: Shows the command for managing Appium drivers, which allows installation, updating, and removal of driver extensions.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/cli/index.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nappium driver\n```\n\n----------------------------------------\n\nTITLE: Using withMocks for Simple Stub Testing\nDESCRIPTION: Example demonstrating the use of withMocks utility for simpler test scenarios primarily involving stubs. Shows how to mock an API method and verify its usage.\nSOURCE: https://github.com/appium/appium/blob/master/packages/test-support/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { withMocks } from '@appium/test-support';\n\nlet api = {\n  abc: () => { return 'abc'; }\n};\n\ndescribe('withMocks', withMocks({api}, (mocks) => {\n  it('should mock api', () => {\n    mocks.api.expects('abc').once().returns('efg');\n    api.abc().should.equal('efg');\n    mocks.verify();\n  });\n}));\n```\n\n----------------------------------------\n\nTITLE: Implementing Constructor for Appium Plugin in JavaScript\nDESCRIPTION: This snippet shows how to set up a constructor for an Appium plugin, ensuring the parent class constructor is called with super() before adding custom initialization.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/zh/developing/build-plugins.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconstructor(...args) {\n    super(...args);\n    // now do your own thing\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom CLI Arguments Schema in JSON\nDESCRIPTION: Schema definition for custom command line arguments that can be passed to an Appium driver. Shows how to specify integer and string parameters with validation rules and descriptions.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/developing/build-drivers.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"test-web-server-port\": {\n      \"type\": \"integer\",\n      \"minimum\": 1,\n      \"maximum\": 65535,\n      \"description\": \"The port to use for the test web server\"\n    },\n    \"test-web-server-host\": {\n      \"type\": \"string\",\n      \"description\": \"The host to use for the test web server\",\n      \"default\": \"sillyhost\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing URL Setting Command in Appium Driver\nDESCRIPTION: Shows implementation of the setUrl command handler that corresponds to the WebDriver protocol route definition.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/developing/build-drivers.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nasync setUrl(url) {\n    // your implementation here\n}\n```\n\n----------------------------------------\n\nTITLE: Using Appium Execute Method for App Termination\nDESCRIPTION: Examples of using the 'mobile: terminateApp' Execute Method in Appium to terminate a running application. This demonstrates how Execute Methods are used to extend Appium's functionality beyond standard WebDriver commands.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/guides/execute-methods.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nawait driver.executeScript('mobile: terminateApp', [{bundleId: 'com.my.app'}])\n```\n\nLANGUAGE: java\nCODE:\n```\nJavascriptExecutor jsDriver = (JavascriptExecutor) driver;\njsDriver.executeScript(\"mobile: terminateApp\", ImmutableMap.of(\"bundleId\", \"com.my.app\"));\n```\n\nLANGUAGE: python\nCODE:\n```\ndriver.execute_script('mobile: terminateApp', {'bundleId': 'com.my.app'})\n```\n\nLANGUAGE: ruby\nCODE:\n```\ndriver.execute_script 'mobile: terminateApp', { bundleId: 'com.my.app' }\n```\n\nLANGUAGE: csharp\nCODE:\n```\n((IJavaScriptExecutor)driver).ExecuteScript(\"mobile: terminateApp\",\n    new Dictionary<string, string> { { \"bundleId\", \"com.my.app\" } });\n```\n\n----------------------------------------\n\nTITLE: Creating Appium Logger Outside Plugin Context in JavaScript\nDESCRIPTION: Shows how to create an Appium logger instance outside of a plugin context, useful for logging in scripts or helper files. This provides a consistent logging interface across the Appium ecosystem.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/zh/developing/build-plugins.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport {logging} from 'appium/support';\nconst log = logging.getLogger('MyPlugin');\n```\n\n----------------------------------------\n\nTITLE: Retrieving Log Events in Appium Base Driver\nDESCRIPTION: Gets a list of events that have occurred in the current session, optionally filtered by event types.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/commands/base-driver.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nPOST /session/:sessionId/appium/events\n```\n\n----------------------------------------\n\nTITLE: Installing Appium 2 Drivers\nDESCRIPTION: Commands demonstrating how to install specific drivers in Appium 2 using the new extension CLI, including installing latest and specific versions.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/zh/guides/migrating-1-to-2.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nappium driver install uiautomator2     # installs the latest driver version\nappium driver install xcuitest@4.12.2  # installs a specific driver version\n```\n\n----------------------------------------\n\nTITLE: Appium Custom Plugins Configuration\nDESCRIPTION: Example demonstrating how to configure multiple plugins using extension objects, including both standard and custom GitHub-sourced plugins.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/guides/caps.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"$cloud:appiumOptions\": {\n        \"plugins\": [{\n            \"name\": \"images\",\n            \"version\": \"1.1.0\"\n        }, {\n            \"name\": \"my-github-org/my-custom-plugin\",\n            \"version\": \"a83f2e\",\n            \"source\": \"github\",\n            \"package\": \"custom-plugin\"\n        }]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Appium Plugin Metadata in package.json\nDESCRIPTION: This snippet shows how to correctly define the required Appium extension metadata in a plugin's package.json file. It specifies the plugin name and main class.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/zh/developing/build-plugins.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"appium\": {\n    \"pluginName\": \"fake\",\n    \"mainClass\": \"FakePlugin\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Throwing WebDriver-specific Errors in JavaScript\nDESCRIPTION: This snippet demonstrates how to import and use WebDriver-specific error classes from the Appium driver module. It shows how to throw a NoSuchElementError, which will be properly handled in terms of the protocol response to the user.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/developing/build-plugins.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {errors} from 'appium/driver';\n\nthrow new errors.NoSuchElementError();\n```\n\n----------------------------------------\n\nTITLE: Executing JavaScript in WebDriver\nDESCRIPTION: Examples of using the 'Execute Script' command in various programming languages to execute a simple JavaScript addition function in a web browser context.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/guides/execute-methods.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait driver.executeScript('return arguments[0] + arguments[1]', [3, 4])\n```\n\nLANGUAGE: java\nCODE:\n```\nJavascriptExecutor jsDriver = (JavascriptExecutor) driver;\njsDriver.executeScript(\"return arguments[0] + arguments[1]\", 3, 4);\n```\n\nLANGUAGE: python\nCODE:\n```\ndriver.execute_script('return arguments[0] + arguments[1]', 3, 4)\n```\n\nLANGUAGE: ruby\nCODE:\n```\ndriver.execute_script 'return arguments[0] + arguments[1]', 3, 4\n```\n\nLANGUAGE: csharp\nCODE:\n```\n((IJavaScriptExecutor)driver).ExecuteScript(\"return arguments[0] + arguments[1]\", 3, 4);\n```\n\n----------------------------------------\n\nTITLE: Configuring Appium Environment Variables Table\nDESCRIPTION: Markdown table listing all supported environment variables for the Appium server, including their descriptions and default values. Covers configuration options for directories, server settings, and caching behaviors.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/cli/env-vars.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|Variable&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|Description|\n|--------|-----------|\n|`APPIUM_HOME`|By default, Appium creates a directory called `.appium` in the home directory for your system user. You can adjust the directory with this variable, as detailed in the [Managing Extensions](../guides/managing-exts.md) guide.|\n|`APPIUM_TMP_DIR`|By default, Appium uses a random temporary directory for many of its operations. If you wish to use a specific directory, you may do so by including an absolute path as the value of this variable. The behaviour is equivalent to using the `--tmp` CLI arg.|\n|`APPIUM_PREFER_SYSTEM_UNZIP`|Set to `0` or `false` to request that Appium not use the `unzip` binary included on your system for unzipping downloaded apps or other artifacts. Instead it will use a JS-based unzip library. This could help on some systems with non-existent or non-standard `unzip` commands. Note that if unzipping fails using the system library, the fallback library will be attempted in any case, so setting this env var merely saves time in the event you know the system unzip will fail.|\n|`APPIUM_HOST`|Same as the `--address` CLI arg|\n|`APPIUM_PORT`|Same as the `--port` CLI arg|\n|`APPIUM_RELOAD_EXTENSIONS`|Set to `1` to cause Appium to re-require extensions when new sessions are created. This is mostly useful for [building extensions](../developing/build-drivers.md)|\n|`APPIUM_OMIT_PEER_DEPS`|Adds `--omit=peer` to all the NPM commands run internally by Appium. Mostly an internal feature.|\n|`APPIUM_APPS_CACHE_MAX_AGE`|Allows to set the maximum age (in minutes) for [cached applications](../guides/caching.md). The default value is `60 * 24` (24 hours). Do not set it to a lower number than the duration of a single session startup.|\n|`APPIUM_APPS_CACHE_MAX_ITEMS`|Allows to set the maximum amount of [cached applications](../guides/caching.md). The default value is `1024`. Do not set it to a lower number than the amount of apps in all parallel sessions per process.|\n|`APPIUM_APPS_CACHE_IGNORE_URL_QUERY`| If the above option is enabled then the 'search' part of the app URL will be cut off from cache keys. See the corresponding [feature request](https://discuss.appium.io/t/regarding-app-caching-when-using-aws-s3-presigned-urls/42713) for more details. Disabled by default.|\n```\n\n----------------------------------------\n\nTITLE: Displaying WebDriver Endpoints Table in Markdown\nDESCRIPTION: This code snippet presents a markdown table listing WebDriver endpoints supported by the Appium server. It includes HTTP methods, endpoint paths, and brief descriptions for each endpoint.\nSOURCE: https://github.com/appium/appium/blob/master/packages/base-driver/docs/mjsonwp/protocol-methods.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nHTTP Method | Path                                                                   | Details\n------------|------------------------------------------------------------------------|---------\nGET         | `status`                                                       | Retrieve the server's current status.\nPOST        | `session`                                                      | Create a new session.\nGET         | `sessions`                                                     | Retrieve a list of currently active sessions.\nGET         | `session/{sessionId}`                                          | Retrieve the capabilities of the specified session.\nDELETE      | `session/{sessionId}`                                          | Delete the session.\nPOST        | `session/{sessionId}/timeouts`                                 | Configure the amount of time that a particular type of operation can execute for before they are aborted and a |Timeout| error is returned to the client.\nPOST        | `session/{sessionId}/timeouts/async_script`                    | Set the amount of time that asynchronous scripts executed by `/session/{sessionId/execute_async` are permitted to run before they are aborted.\nPOST        | `session/{sessionId}/timeouts/implicit_wait`                   | Set the amount of time the driver should wait when searching for elements.\nGET         | `session/{sessionId}/window_handle`                            | Retrieve the current window handle.\nGET         | `session/{sessionId}/window_handles`                           | Retrieve the list of all window handles available to the session.\nGET         | `session/{sessionId}/url`                                      | Retrieve the URL of the current page.\nPOST        | `session/{sessionId}/url`                                      | Navigate to a new URL.\nPOST        | `session/{sessionId}/forward`                                  | Navigate forwards in the browser history, if possible.\nPOST        | `session/{sessionId}/back`                                     | Navigate backwards in the browser history, if possible.\nPOST        | `session/{sessionId}/refresh`                                  | Refresh the current page.\nPOST        | `session/{sessionId}/execute`                                  | Inject a snippet of JavaScript into the page for execution in the current context.\nPOST        | `session/{sessionId}/execute_async`                            | Inject a snippet of JavaScript into the page for asynchronous execution in the context of the currently selected frame.\nGET         | `session/{sessionId}/screenshot`                               | Take a screenshot of the current page.\nGET         | `session/{sessionId}/ime/available_engines`                    | List all available input engines on the machine.\nGET         | `session/{sessionId}/ime/active_engine`                        | Get the name of the active IME engine.\nGET         | `session/{sessionId}/ime/activated`                            | Indicates whether IME input is active at the moment (not if it is available).\nPOST        | `session/{sessionId}/ime/deactivate`                           | De-activates the currently-active IME engine.\nPOST        | `session/{sessionId}/ime/activate`                             | Make an engine that is available active.\nPOST        | `session/{sessionId}/frame`                                    | Change focus to another frame on the page.\nPOST        | `session/{sessionId}/window`                                   | Change focus to another window.\nGET         | `session/{sessionId}/window/{windowhandle}/size`               | Get the size of the specified window.\nPOST        | `session/{sessionId}/window/{windowhandle}/maximize`           | Maximize the specified window if not already maximized.\nGET         | `session/{sessionId}/cookie`                                   | Retrieve all cookies visible to the current page.\nPOST        | `session/{sessionId}/cookie`                                   | Set a cookie.\nDELETE      | `session/{sessionId}/cookie`                                   | Delete all cookies visible to the current page.\nDELETE      | `session/{sessionId}/cookie/{name}`                            | Delete the cookie with the given name.\nGET         | `session/{sessionId}/source`                                   | Get the current page source.\nGET         | `session/{sessionId}/title`                                    | Get the current page title.\nPOST        | `session/{sessionId}/element`                                  | Search for an element on the page, starting from the document root.\nPOST        | `session/{sessionId}/elements`                                 | Search for multiple elements on the page, starting from the document root.\nPOST        | `session/{sessionId}/element/active`                           | Get the element on the page that currently has focus.\nPOST        | `session/{sessionId}/element/{elementId}/element`              | Search for an element on the page, starting from the identified element.\nPOST        | `session/{sessionId}/element/{elementId}/elements`             | Search for multiple elements on the page, starting from the identified element.\nPOST        | `session/{sessionId}/element/{elementId}/click`                | Click on an element.\nPOST        | `session/{sessionId}/element/{elementId}/submit`               | Submit a form element.\nGET         | `session/{sessionId}/element/{elementId}/text`                 | Returns the visible text for the element.\nPOST        | `session/{sessionId}/element/{elementId}/value`                | Send a sequence of key strokes to an element.\nPOST        | `session/{sessionId}/keys`                                     | Send a sequence of key strokes to the active element.\nGET         | `session/{sessionId}/element/{elementId}/name`                 | Query for an element's tag name.\nPOST        | `session/{sessionId}/element/{elementId}/clear`                | Clear a text element's value.\nGET         | `session/{sessionId}/element/{elementId}/selected`             | Determine if an element is currently selected.\nGET         | `session/{sessionId}/element/{elementId}/enabled`              | Determine if an element is currently enabled.\nGET         | `session/{sessionId}/element/{elementId}/attribute/{name}`     | Get the value of an element's attribute.\nGET         | `session/{sessionId}/element/{elementId}/equals/{otherId}`     | Test if two element IDs refer to the same element.\nGET         | `session/{sessionId}/element/{elementId}/displayed`            | Determine if an element is currently displayed.\nGET         | `session/{sessionId}/element/{elementId}/location`             | Determine an element's location on the page.\nGET         | `session/{sessionId}/element/{elementId}/location_in_view`     | Determine an element's location on the screen once it has been scrolled into view.\nGET         | `session/{sessionId}/element/{elementId}/size`                 | Determine an element's size in pixels.\nGET         | `session/{sessionId}/element/{elementId}/css/{propertyName}`   | Query the value of an element's computed CSS property.\nGET         | `session/{sessionId}/orientation`                              | Get the current device orientation.\nPOST        | `session/{sessionId}/orientation`                              | Set the device orientation\nGET         | `session/{sessionId}/alert_text`                               | Gets the text of the currently displayed dialog\nPOST        | `session/{sessionId}/alert_text`                               | Sends keystrokes to the currently displayed dialog\nPOST        | `session/{sessionId}/accept_alert`                             | Accepts the currently displayed alert dialog.\nPOST        | `session/{sessionId}/dismiss_alert`                            | Dismisses the currently displayed alert dialog.\nPOST        | `session/{sessionId}/moveto`                                   | Move the pointer by an offset of the specificed element.\nPOST        | `session/{sessionId}/click`                                    | Click on the current pointer position.\nPOST        | `session/{sessionId}/touch/click`                              | Single tap on the touch enabled device.\nPOST        | `session/{sessionId}/touch/down`                               | Finger down on the screen.\nPOST        | `session/{sessionId}/touch/up`                                 | Finger up on the screen.\nPOST        | `session/{sessionId}/touch/move`                               | Finger move on the screen.\nPOST        | `session/{sessionId}/touch/longclick`                          | Long press on the touch screen using finger motion events.\nPOST        | `session/{sessionId}/touch/flick`                              | Flick on the touch screen using finger motion events.\nGET         | `session/{sessionId}/location`                                 | Get the current geo location.\nPOST        | `session/{sessionId}/location`                                 | Set the current geo location.\nPOST        | `session/{sessionId}/log`                                      | Get the log for a given log type.\nGET         | `session/{sessionId}/log/types`                                | Get available log types.\n```\n\n----------------------------------------\n\nTITLE: Implementing Unexpected Session Shutdown Handler in Appium Plugin\nDESCRIPTION: Implementation of onUnexpectedShutdown method in an Appium plugin to handle cleanup when a session ends unexpectedly. The method receives the current session driver and shutdown cause as parameters. Error handling is implemented to prevent unhandled rejections.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/zh/developing/build-plugins.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nasync onUnexpectedShutdown(driver, cause) {\n  try {\n    // do some cleanup\n  } catch (e) {\n    // log any errors; don't allow anything to be thrown as they will be unhandled rejections\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Driver Updates\nDESCRIPTION: Commands for checking and applying driver updates in Appium 2, including listing available updates and updating specific drivers.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/zh/guides/migrating-1-to-2.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nappium driver list --updates\nappium driver update xcuitest\nappium driver uninstall xcuitest\nappium driver install xcuitest@4.11.1\n```\n\n----------------------------------------\n\nTITLE: Retrieving Log Types in Appium Base Driver\nDESCRIPTION: Gets available log types as a list of strings.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/commands/base-driver.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nGET /session/:sessionId/se/log/types\n```\n\n----------------------------------------\n\nTITLE: Feature-based Image Comparison in Java\nDESCRIPTION: This snippet demonstrates how to perform feature-based image comparison using Java. It uses the FeaturesMatchingOptions to configure the comparison and asserts various properties of the result.\nSOURCE: https://github.com/appium/appium/blob/master/packages/images-plugin/docs/image-comparison.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nbyte[] screenshot = Base64.encodeBase64(driver.getScreenshotAs(OutputType.BYTES));\nFeaturesMatchingResult result = driver\n        .matchImagesFeatures(screenshot, originalImg, new FeaturesMatchingOptions()\n                .withDetectorName(FeatureDetector.ORB)\n                .withGoodMatchesFactor(40)\n                .withMatchFunc(MatchingFunction.BRUTE_FORCE_HAMMING)\n                .withEnabledVisualization());\nassertThat(result.getVisualization().length, is(greaterThan(0)));\nassertThat(result.getCount(), is(greaterThan(0)));\nassertThat(result.getTotalCount(), is(greaterThan(0)));\nassertFalse(result.getPoints1().isEmpty());\nassertNotNull(result.getRect1());\nassertFalse(result.getPoints2().isEmpty());\nassertNotNull(result.getRect2());\n```\n\n----------------------------------------\n\nTITLE: Executing Driver Script Example\nDESCRIPTION: JavaScript example showing how to execute a driver script that retrieves timeouts, demonstrating the usage of executeDriverScript command with result and logs handling.\nSOURCE: https://github.com/appium/appium/blob/master/packages/execute-driver-plugin/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst script = `return await driver.getTimeouts();`;\nconst {result, logs} = await driver.executeDriverScript(script);\n```\n\n----------------------------------------\n\nTITLE: Similarity Calculation in Java\nDESCRIPTION: This Java code snippet demonstrates how to calculate the similarity between two images using the getImagesSimilarity method. It uses SimilarityMatchingOptions to enable visualization and asserts properties of the result.\nSOURCE: https://github.com/appium/appium/blob/master/packages/images-plugin/docs/image-comparison.md#2025-04-22_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nbyte[] screenshot1 = Base64.encodeBase64(driver.getScreenshotAs(OutputType.BYTES));\nbyte[] screenshot2 = Base64.encodeBase64(driver.getScreenshotAs(OutputType.BYTES));\nSimilarityMatchingResult result = driver\n        .getImagesSimilarity(screenshot1, screenshot2, new SimilarityMatchingOptions()\n                .withEnabledVisualization());\nassertThat(result.getVisualization().length, is(greaterThan(0)));\nassertThat(result.getScore(), is(greaterThan(0.0)));\n```\n\n----------------------------------------\n\nTITLE: Occurrences Lookup in Java\nDESCRIPTION: This Java code demonstrates how to perform occurrences lookup using the findImageOccurrence method. It uses OccurrenceMatchingOptions to enable visualization and asserts properties of the result.\nSOURCE: https://github.com/appium/appium/blob/master/packages/images-plugin/docs/image-comparison.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nbyte[] screenshot = Base64.encodeBase64(driver.getScreenshotAs(OutputType.BYTES));\nOccurrenceMatchingResult result = driver\n        .findImageOccurrence(screenshot, partialImage, new OccurrenceMatchingOptions()\n                .withEnabledVisualization());\nassertThat(result.getVisualization().length, is(greaterThan(0)));\nassertNotNull(result.getRect());\n```\n\n----------------------------------------\n\nTITLE: Find Element Endpoint Documentation\nDESCRIPTION: POST endpoint to find a single UI element using a locator strategy and selector. Returns an element object with element ID for use in element-related commands.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/commands/universal-xml-plugin.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nPOST /session/:sessionId/element\n```\n\n----------------------------------------\n\nTITLE: Configuring Appium Server 2 for Selenium Grid 4+ Integration (YAML)\nDESCRIPTION: YAML configuration for the second Appium server instance, adjusting ports to prevent clashes with the first server.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/guides/grid.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# appium2.yml\nserver:\n  port: 4733\n  use-drivers:\n    - xcuitest\n  default-capabilities:\n    wdaLocalPort: 8110\n    mjpegServerPort: 9110\n    mjpegScreenshotUrl: \"http://localhost:9110\"\n```\n\n----------------------------------------\n\nTITLE: Creating an Appium Logger in JavaScript\nDESCRIPTION: This code shows how to create an Appium logger outside of a plugin context, such as in a script or helper file. It imports the logging module from Appium's support package and creates a logger instance with a custom name.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/developing/build-plugins.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport {logging} from 'appium/support';\nconst log = logging.getLogger('MyPlugin');\n```\n\n----------------------------------------\n\nTITLE: Installing Local Plugin\nDESCRIPTION: Example command showing how to install a locally developed plugin.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/cli/extensions.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nappium plugin install --source=local /path/to/my/plugin\n```\n\n----------------------------------------\n\nTITLE: Retrieving Logs in Appium Base Driver\nDESCRIPTION: Gets the log for a given log type.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/commands/base-driver.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nPOST /session/:sessionId/se/log\n```\n\n----------------------------------------\n\nTITLE: Logging Events to Appium Timeline in JavaScript\nDESCRIPTION: This snippet demonstrates how to log custom events to the Appium event timeline. It helps with debugging and analyzing driver internals by adding named events at the current time.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/developing/build-drivers.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nthis.logEvent(name);\n```\n\n----------------------------------------\n\nTITLE: Custom Plugin Configuration (JSON)\nDESCRIPTION: This snippet shows how to configure custom plugins using the $cloud:appiumOptions/plugins capability. It includes examples of specifying both official and custom plugins with their versions and sources.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/zh/guides/caps.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"$cloud:appiumOptions\": {\n        \"plugins\": [{\n            \"name\": \"images\",\n            \"version\": \"1.1.0\"\n        }, {\n            \"name\": \"my-github-org/my-custom-plugin\",\n            \"version\": \"a83f2e\",\n            \"source\": \"github\",\n            \"package\": \"custom-plugin\"\n        }]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Occurrences Lookup using OpenCV in TypeScript/JavaScript\nDESCRIPTION: This TypeScript/JavaScript code demonstrates how to perform occurrences lookup using OpenCV directly. It loads images, performs template matching, and visualizes the result. This approach provides more control and understanding of the image comparison process.\nSOURCE: https://github.com/appium/appium/blob/master/packages/images-plugin/docs/image-comparison.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as path from 'path';\nconst cv = require(path.join(process.env.NODE_PATH, 'opencv4nodejs'));\nconst isImagePresent = async () => {\n  const screenImagePath = './appium_screenshot1.png';\n  await driver.saveScreenshot(screenImagePath)\n  const likedImagePath = './occurrence1.png';\n\n  const originalMatPromise = cv.imreadAsync(screenImagePath);\n  const waldoMatPromise = cv.imreadAsync(likedImagePath);\n  const [originalMat, waldoMat] = await Promise.all([originalMatPromise, waldoMatPromise]);\n\n  const matched = originalMat.matchTemplate(waldoMat, 5);\n\n  const minMax = matched.minMaxLoc();\n  const { maxLoc: { x, y } } = minMax;\n\n  originalMat.drawRectangle(\n    new cv.Rect(x, y, waldoMat.cols, waldoMat.rows),\n    new cv.Vec(0, 255, 0),\n    2,\n    cv.LINE_8\n  );\n\n  cv.imshow('We\\'ve found Waldo!', originalMat);\n  await cv.waitKey();\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Session Data in Appium Base Driver\nDESCRIPTION: Returns capabilities and event history for a given session. This endpoint is deprecated.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/commands/base-driver.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nGET /session/:sessionId\n```\n\n----------------------------------------\n\nTITLE: Multiple Pattern Log Filtering in Appium\nDESCRIPTION: Configuration with multiple filtering rules to replace different patterns with the same replacer, demonstrating pattern combination.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/guides/log-filters.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"pattern\": \"my\\\\.magic\\\\.\\\\w+\",\n        \"flags\": \"i\",\n        \"replacer\": \"***\"\n    },\n    {\n        \"pattern\": \"your\\\\.magic\",\n        \"flags\": \"i\",\n        \"replacer\": \"***\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing a Doctor Check for Environment Variable in Node.js\nDESCRIPTION: Example implementation of a Doctor Check class that verifies an environment variable is set and points to a valid path. This check implements the IDoctorCheck interface and includes methods for diagnosis, fixing, and determining if the check is optional or has an autofix.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/zh/developing/build-doctor-checks.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst {fs, doctor} = require('@appium/support');\n\n/** @satisfies {import('@appium/types').IDoctorCheck} */\nclass EnvVarAndPathCheck {\n  /**\n   * @param {string} varName\n   */\n  constructor(varName) {\n    this.varName = varName;\n  }\n\n  async diagnose() {\n    const varValue = process.env[this.varName];\n    if (typeof varValue === 'undefined') {\n      return doctor.nok(`${this.varName} environment variable is NOT set!`);\n    }\n\n    if (await fs.exists(varValue)) {\n      return doctor.ok(`${this.varName} is set to: ${varValue}`);\n    }\n\n    return doctor.nok(`${this.varName} is set to '${varValue}' but this is NOT a valid path!`);\n  }\n\n  async fix() {\n    return (\n      `Make sure the environment variable ${this.varName} is properly configured for the Appium server process`\n    );\n  }\n\n  hasAutofix() {\n    return false;\n  }\n\n  isOptional() {\n    return false;\n  }\n}\n\nconst androidHomeCheck = new EnvVarAndPathCheck('ANDROID_HOME');\n\nmodule.exports = {androidHomeCheck};\n\n/**\n * @typedef {import('@appium/types').DoctorCheckResult} CheckResult\n */\n```\n\n----------------------------------------\n\nTITLE: Using Helper Functions for Appium Driver Testing in JavaScript\nDESCRIPTION: This snippet demonstrates the usage of helper functions provided by the @appium/driver-test-support package. It includes examples of testing TEST_HOST, getTestPort(), and createAppiumURL() functions, which are useful for E2E testing.\nSOURCE: https://github.com/appium/appium/blob/master/packages/driver-test-support/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {TEST_HOST, getTestPort, createAppiumURL} from '@appium/driver-test-support';\nimport assert from 'node:assert';\nimport _ from 'lodash';\n\ndescribe('TEST_HOST', function() {\n  it('should be localhost', function() {\n    assert.strictEqual(TEST_HOST, '127.0.0.1');\n  });\n});\n\ndescribe('getTestPort()', function() {\n  it('should get a free test port', async function() {\n    const port = await getTestPort();\n    assert.ok(port > 0);\n  });\n});\n\ndescribe('createAppiumURL()', function() {\n  it('should create a \"new session\" URL', function() {\n    const actual = createAppiumURL(TEST_HOST, 31337, '', 'session');\n    const expected = `http://${TEST_HOST}:31337/session`;\n    assert.strictEqual(actual, expected);\n  });\n  \n  it('should create a URL to get an existing session', function() {\n    const sessionId = '12345';\n    const createGetSessionURL = createAppiumURL(TEST_HOST, 31337, _, 'session');\n    const actual = createGetSessionURL(sessionId);\n    const expected = `http://${TEST_HOST}:31337/session/${sessionId}/session`;\n    assert.strictEqual(actual, expected);\n  });\n  \n  it('should create a URL for a command using an existing session', function() {\n    const sessionId = '12345';\n    const createURLWithPath = createAppiumURL('127.0.0.1', 31337, sessionId);\n    const actual = createURLWithPath('moocow');\n    const expected = `http://${TEST_HOST}:31337/session/${sessionId}/moocow`;\n    assert.strictEqual(actual, expected);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using Driver-Specific Command Line Options\nDESCRIPTION: Example of how to use driver-specific command line parameters in Appium 2, which now require a driver prefix.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/guides/migrating-1-to-2.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nappium --driver-xcuitest-webdriveragent-port=5000\n```\n\n----------------------------------------\n\nTITLE: Defining BiDi Commands in Appium Driver\nDESCRIPTION: Example of adding new WebDriver BiDi commands using newBidiCommands static property. Demonstrates how to define module namespaces, command names, and parameter requirements.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/developing/build-drivers.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nstatic newBidiCommands = {\n  'appium:video': {\n    startFramerateCapture: {\n      command: 'startFrameCap',\n      params: {\n        required: ['videoSource'],\n        optional: ['showOnScreen'],\n      }\n    },\n    stopFramerateCapture: {\n      command: 'stopFrameCap',\n    },\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Execute Script Overloading in Appium Plugin\nDESCRIPTION: Demonstrates how to overload the Execute Script command in an Appium plugin by defining an executeMethodMap, implementing the command method, and handling execute command overrides.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/developing/build-plugins.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nstatic executeMethodMap = {\n  'fake: plugMeIn': {\n    command: 'plugMeIn',\n    params: {required: ['socket']},\n  },\n};\n\nasync plugMeIn(next, driver, socket) {\n  return `Plugged in to ${socket}`;\n}\n\nasync execute(next, driver, script, args) {\n  return await this.executeMethod(next, driver, script, args);\n}\n```\n\n----------------------------------------\n\nTITLE: Bug Fix - Prototypes issue\nDESCRIPTION: Fix for handling prototypes in driver test support.\nSOURCE: https://github.com/appium/appium/blob/master/packages/base-driver/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"test-support\": \"update dependency @colors/colors to v1.6.0\"\n```\n\n----------------------------------------\n\nTITLE: Basic Log Filtering with Text Match in Appium\nDESCRIPTION: Simple configuration to replace all occurrences of a specific string with the default **SECURE** replacer.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/guides/log-filters.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"text\": \"my.magic.app\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Chromedriver Installation with Environment Variables\nDESCRIPTION: Example of installing the UiAutomator2 driver while skipping Chromedriver installation using environment variables.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/zh/guides/migrating-1-to-2.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nAPPIUM_SKIP_CHROMEDRIVER_INSTALL=1 appium driver install uiautomator2\n```\n\n----------------------------------------\n\nTITLE: Custom Automation Driver Configuration (JSON)\nDESCRIPTION: This snippet demonstrates how to specify a custom automation driver using the $cloud:appiumOptions/automation capability. It includes details such as the driver's source, version, and package name.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/zh/guides/caps.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"$cloud:appiumOptions\": {\n        \"automation\": {\n            \"name\": \"git+https://some-git-host.com/custom-driver-project.git\",\n            \"version\": \"some-git-sha\",\n            \"source\": \"git\",\n            \"package\": \"driver-npm-package-name\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Appium Plugin Configuration - JSON\nDESCRIPTION: Example of configuring Appium plugins in a JSON configuration file. Shows how to specify multiple plugins in an array format instead of using comma-delimited CLI arguments.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/zh/guides/config.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"server\": {\n    \"use-plugins\": [\"my-plugin\", \"some-other-plugin\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Safari Session with Appium:options in JSON\nDESCRIPTION: Example showing how to structure capabilities for an iOS Safari browser session using the new appium:options capability format. This demonstrates proper usage of standard W3C capabilities alongside vendor-prefixed capabilities grouped under appium:options.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/zh/guides/migrating-1-to-2.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"platformName\": \"iOS\",\n  \"browserName\": \"Safari\",\n  \"appium:options\": {\n    \"platformVersion\": \"14.4\",\n    \"deviceName\": \"iPhone 11\",\n    \"automationName\": \"XCUITest\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Emitting BiDi Events in Appium Driver\nDESCRIPTION: Example demonstrating how to emit BiDi events to clients using the built-in event emitter system.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/developing/build-drivers.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nthis.eventEmitter.emit('bidiEvent', {\n  method: 'appium:system.cpu',\n  params: {load: this.currentCpuLoad},\n})\n```\n\n----------------------------------------\n\nTITLE: Writing Data to Storage Item in TypeScript\nDESCRIPTION: Shows how to write new data to an existing storage item.\nSOURCE: https://github.com/appium/appium/blob/master/packages/strongbox/README.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nawait item.write('new stuff');\n```\n\n----------------------------------------\n\nTITLE: Semantic Version Changes - Types Module v0.12.0\nDESCRIPTION: Version bump from 0.11.1 to 0.12.0 with feature changes and bug fixes related to type-fest dependency and IPv6 address handling.\nSOURCE: https://github.com/appium/appium/blob/master/packages/types/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n### Features\n* **appium:** Allow to provide ipv6 addresses and handle broadcast addresses in logs ([#18674])\n### Bug Fixes\n* **types:** update dependency type-fest to v3.11.0\n* **types:** update dependency type-fest to v3.11.1\n```\n\n----------------------------------------\n\nTITLE: Installing Appium via npm\nDESCRIPTION: This command installs the core Appium server globally using npm. Note that this only installs the server and additional drivers need to be installed separately.\nSOURCE: https://github.com/appium/appium/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -g appium\n```\n\n----------------------------------------\n\nTITLE: Running the Appium Python Test\nDESCRIPTION: Command to execute the Python test script. Ensure that an Appium server is running before executing this command.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/quickstart/test-py.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython test.py\n```\n\n----------------------------------------\n\nTITLE: Initializing Strongbox Instance in TypeScript\nDESCRIPTION: Shows how to create a new instance of Strongbox for a specific package to manage persistent data storage.\nSOURCE: https://github.com/appium/appium/blob/master/packages/strongbox/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {strongbox} from '@appium/strongbox';\n\nconst box = strongbox('my-pkg');\n```\n\n----------------------------------------\n\nTITLE: Configuring Appium Server 1 for Selenium Grid 4+ Integration (YAML)\nDESCRIPTION: YAML configuration for the first Appium server instance, specifying server port, driver, and default capabilities for XCUITest.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/guides/grid.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# appium1.yml\nserver:\n  port: 4723\n  use-drivers:\n    - xcuitest\n  default-capabilities:\n    wdaLocalPort: 8100\n    mjpegServerPort: 9100\n    mjpegScreenshotUrl: \"http://localhost:9100\"\n```\n\n----------------------------------------\n\nTITLE: Managing Appium Plugins using CLI\nDESCRIPTION: These commands demonstrate how to install, list, update, and uninstall Appium plugins using the Appium Extension command-line interface.\nSOURCE: https://github.com/appium/appium/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Install an official plugin from npm (see documentation for a list of such plugins)\nappium plugin install <plugin-name>\n# Install any plugin from npm\nappium plugin install --source=npm <plugin-name>\n# See documentation for installation from other sources\n\n# List already installed plugins\nappium plugin list --installed\n# Update a plugin (it must be already installed)\n# This will NOT update the major version, in order to prevent breaking changes\nappium plugin update <plugin-name>\n# Update a plugin to the most recent version (may include breaking changes)\nappium plugin update <plugin-name> --unsafe\n# Uninstall a plugin\nappium plugin uninstall <plugin-name>\n```\n\n----------------------------------------\n\nTITLE: Using withSandbox for Sinon Test Setup\nDESCRIPTION: Example showing how to use withSandbox utility for setting up tests with Sinon sandbox, allowing mixed usage of mocks, stubs, and spies. Demonstrates mocking an API call and stubbing a method.\nSOURCE: https://github.com/appium/appium/blob/master/packages/test-support/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { withSandbox } from '@appium/test-support';\n\nlet api = {\n  abc: () => { return 'abc'; }\n};\n\ndescribe('MyTest', withSandbox({mocks: {api}}, (S) => {\n  it('stubbing api, stubbing dog', () => {\n    S.mocks.api.expects('abc').once().returns('efg');\n    let dog = { bark: () => { return 'ouaf!'; } };\n    S.sandbox.stub(dog, 'bark').returns('miaou');\n    api.abc().should.equal('efg');\n    dog.bark().should.equal('miaou');\n    S.verify();\n  });\n}));\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Base Path in Appium 2\nDESCRIPTION: Command to set a custom base path for the Appium server to maintain compatibility with Appium 1's default /wd/hub path.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/guides/migrating-1-to-2.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nappium --base-path=/wd/hub\n```\n\n----------------------------------------\n\nTITLE: Updating Minimum Node.js Version for Appium\nDESCRIPTION: Sets the minimum supported Node.js version for Appium to 14.17.0.\nSOURCE: https://github.com/appium/appium/blob/master/packages/base-driver/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nchore!: set engines to minimum Node.js v14.17.0\n```\n\n----------------------------------------\n\nTITLE: Enabling Appium Plugins\nDESCRIPTION: Command to start Appium server with specific plugins enabled. Plugins extend server functionality and must be explicitly enabled on startup.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nappium --use-plugins=<plugin-name>\n```\n\n----------------------------------------\n\nTITLE: Enabling All Features Except One in Appium\nDESCRIPTION: Command to start Appium server with relaxed security while denying a specific feature (adb_shell) using both --relaxed-security and --deny-insecure flags.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/guides/security.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nappium --relaxed-security --deny-insecure=adb_shell\n```\n\n----------------------------------------\n\nTITLE: Event Timings Response Structure in Appium\nDESCRIPTION: Demonstrates the JSON structure returned by the POST /session/:id/appium/events endpoint when event timings are enabled. Shows how event types and command executions are recorded with their timestamps.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/guides/event-timing.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"<event_type>\": [<occurence_timestamp_1>, ...],\n    \"commands\": [\n        {\n            \"cmd\": \"<command_name>\",\n            \"startTime\": <js_timestamp>,\n            \"endTime\": <js_timestamp>\n        },\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring First Appium Server with YAML\nDESCRIPTION: YAML configuration for the first Appium server instance specifying port 4723, XCUITest driver, and default capabilities for WDA and MJPEG ports.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/zh/guides/grid.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  port: 4723\n  use-drivers:\n    - xcuitest\n  default-capabilities:\n    wdaLocalPort: 8100\n    mjpegServerPort: 9100\n    mjpegScreenshotUrl: \"http://localhost:9100\"\n```\n\n----------------------------------------\n\nTITLE: Launching Appium Server with Execute Driver Plugin\nDESCRIPTION: Command to start Appium server with the execute-driver plugin enabled and necessary security permissions.\nSOURCE: https://github.com/appium/appium/blob/master/packages/execute-driver-plugin/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nappium --use-plugins=execute-driver --allow-insecure=execute_driver_script\n```\n\n----------------------------------------\n\nTITLE: Installing Relaxed Caps Plugin for Appium\nDESCRIPTION: Command to install the relaxed-caps plugin using the Appium CLI. This step is necessary before using the plugin.\nSOURCE: https://github.com/appium/appium/blob/master/packages/relaxed-caps-plugin/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nappium plugin install relaxed-caps\n```\n\n----------------------------------------\n\nTITLE: Installing Appium Python Client\nDESCRIPTION: Command to install the Appium Python Client package using pip. This package includes the Selenium Python binding.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/quickstart/test-py.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install Appium-Python-Client\n```\n\n----------------------------------------\n\nTITLE: Adding Experimental Support for TypeDoc Generation\nDESCRIPTION: Adds experimental support for generating documentation using TypeDoc.\nSOURCE: https://github.com/appium/appium/blob/master/packages/base-driver/CHANGELOG.md#2025-04-22_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nexperimental support for typedoc generation\n```\n\n----------------------------------------\n\nTITLE: Installing XCUITest Driver Example\nDESCRIPTION: Example command showing how to install the latest version of the XCUITest driver.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/cli/extensions.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nappium driver install xcuitest\n```\n\n----------------------------------------\n\nTITLE: Enabling All Features Except One in Appium Server (Bash)\nDESCRIPTION: This command starts the Appium server with all insecure features enabled except for 'adb_shell'. It demonstrates the use of '--relaxed-security' to enable all features and '--deny-insecure' to exclude specific ones.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/zh/guides/security.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nappium --relaxed-security --deny-insecure=adb_shell\n```\n\n----------------------------------------\n\nTITLE: Handling createSession Method with driverData in JavaScript for Appium Driver\nDESCRIPTION: This code shows the signature of the createSession method in an Appium driver, including the driverData parameter. It allows access to resource information from other running driver instances.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/developing/build-drivers.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nasync createSession(jwpCaps, reqCaps, w3cCaps, driverData)\n```\n\n----------------------------------------\n\nTITLE: Adding Execute Methods Feature in Base Plugin\nDESCRIPTION: Implementation that adds the ability for plugins to execute methods. This change was introduced in version 2.2.0.\nSOURCE: https://github.com/appium/appium/blob/master/packages/base-plugin/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n84abed920a1dc796ff09013ce86079de5a25fe50\n```\n\n----------------------------------------\n\nTITLE: Retrieving Server Status in Multiple Languages\nDESCRIPTION: Examples of how to retrieve the Appium server status using different client libraries. Returns information about server readiness and implementation-specific metadata.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/commands/base-driver.md#2025-04-22_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\n// webdriver.io example\nawait driver.status();\n```\n\nLANGUAGE: Python\nCODE:\n```\ndriver.get_status()\n```\n\nLANGUAGE: Java\nCODE:\n```\ndriver.getStatus();\n```\n\nLANGUAGE: Ruby\nCODE:\n```\n# ruby_lib example\nremote_status\n\n# ruby_lib_core example\n@driver.remote_status\n```\n\n----------------------------------------\n\nTITLE: Deleting a Session in Appium Base Driver\nDESCRIPTION: Deletes an existing session and returns its capabilities and event history.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/commands/base-driver.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nDELETE /session/:sessionId\n```\n\n----------------------------------------\n\nTITLE: 安装Appium插件的命令行指令\nDESCRIPTION: 这个代码片段展示了如何使用命令行安装Appium插件。用户需要将<插件名称>替换为实际的插件名称。\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/zh/ecosystem/plugins.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nappium plugin install <插件名称>\n```\n\n----------------------------------------\n\nTITLE: Reading Invalid Command Line Argument in Appium Server\nDESCRIPTION: Error log output showing that an invalid value 'sheep' was provided for the --relaxed-security flag when starting the Appium server. The relaxed-security flag typically expects a boolean value.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/test/fixtures/cli/cli-error-output-boolean.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmain.js server: error: argument --relaxed-security: ignored explicit argument 'sheep'\n```\n\n----------------------------------------\n\nTITLE: Starting Appium Server with Custom Driver\nDESCRIPTION: Command to start the Appium server with a specific driver loaded for testing.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/guides/branch-testing.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nappium server --use-drivers=<driver_name>\n```\n\n----------------------------------------\n\nTITLE: Extending WebDriver BiDi Protocol with New Commands in JavaScript\nDESCRIPTION: This snippet shows how to define new WebDriver BiDi commands for an Appium plugin using the 'newBidiCommands' static field. It demonstrates the structure for specifying modules, command names, handler methods, and required/optional parameters.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/developing/build-plugins.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nstatic newBidiCommands = {\n  'appium:video': {\n    startFramerateCapture: {\n      command: 'startFrameCap',\n      params: {\n        required: ['videoSource'],\n        optional: ['showOnScreen'],\n      }\n    },\n    stopFramerateCapture: {\n      command: 'stopFrameCap',\n    },\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Activating Relaxed Caps Plugin for Appium Server\nDESCRIPTION: Command to launch the Appium server with the relaxed-caps plugin explicitly activated. This is required to enable the plugin's functionality.\nSOURCE: https://github.com/appium/appium/blob/master/packages/relaxed-caps-plugin/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nappium --use-plugins=relaxed-caps\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Driver Versions in Appium 2\nDESCRIPTION: Commands to uninstall a driver and install a specific version, rather than updating to the latest version.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/guides/migrating-1-to-2.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nappium driver uninstall xcuitest\nappium driver install xcuitest@4.11.1\n```\n\n----------------------------------------\n\nTITLE: Updating Settings in Appium Base Driver\nDESCRIPTION: Updates the session's settings dictionary with a new settings object.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/commands/base-driver.md#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nPOST /session/:sessionId/appium/settings\n```\n\n----------------------------------------\n\nTITLE: Extension Schema Definition Example\nDESCRIPTION: Sample schema definition for a custom driver showing property configuration with type, default value, and associated CLI argument mapping.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/developing/config-system.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"my rad schema for the cowabunga driver\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"fizz\": {\n      \"type\": \"string\",\n      \"default\": \"buzz\",\n      \"$comment\": \"corresponds to CLI --driver-cowabunga-fizz\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Images in Appium\nDESCRIPTION: API endpoint for comparing images. It accepts mode and optional parameters, and returns a ComparisonResult.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/commands/images-plugin.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### `compareImages`\n\n`POST` **`/session/:sessionId/appium/compare_images`**\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `mode` | `any`[] |\n| `options?` | `any`[] |\n\n#### Response\n\n`ComparisonResult`\n```\n\n----------------------------------------\n\nTITLE: Displaying Command Line Argument Error in Terminal\nDESCRIPTION: Output showing an error message when unrecognized command line arguments are provided to a program. The error indicates that '--pigs=sheep' is not a valid argument.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/test/fixtures/cli/cli-error-output-unknown.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n[ERROR] Unrecognized arguments: --pigs=sheep\n```\n\n----------------------------------------\n\nTITLE: Installing Desktop Browser Automation Preset\nDESCRIPTION: Command to install browser automation drivers (safari, gecko, chromium) and images plugin\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/cli/setup.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nappium setup browser\n```\n\n----------------------------------------\n\nTITLE: Checking Appium Version via Command Line\nDESCRIPTION: Shows how to check the installed version of Appium using the command-line executable.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/cli/index.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nappium -v\n```\n\nLANGUAGE: bash\nCODE:\n```\nappium --version\n```\n\n----------------------------------------\n\nTITLE: Appium Cloud Provider Capabilities with appium:options\nDESCRIPTION: Enhanced example using appium:options capability for better organization of Appium-specific capabilities.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/guides/caps.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"platformName\": \"iOS\",\n  \"appium:options\": {\n    \"platformVersion\": \"14.4\",\n    \"deviceName\": \"iPhone 11\",\n    \"app\": \"Some-App.app.zip\",\n    \"automationName\": \"XCUITest\"\n  },\n  \"$cloud:appiumOptions\": {\n    \"version\": \"2.0.0\",\n    \"automationVersion\": \"3.52.0\",\n    \"plugins\": [\"images\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing UiAutomator2 Driver with Appium CLI\nDESCRIPTION: Command to install the UiAutomator2 driver using the Appium Extension CLI. This driver allows Appium to automate Android devices.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/quickstart/uiauto2-driver.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nappium driver install uiautomator2\n```\n\n----------------------------------------\n\nTITLE: Finding Multiple Elements from Shadow Root in Appium Base Driver\nDESCRIPTION: Finds elements from a shadow root using a locator strategy and selector.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/commands/base-driver.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nPOST /session/:sessionId/shadow/:shadowId/elements\n```\n\n----------------------------------------\n\nTITLE: Mobile JSON Wire Protocol Endpoints Table\nDESCRIPTION: Lists the standard Mobile JSON Wire Protocol endpoints for mobile automation, including context management, network controls, and touch actions.\nSOURCE: https://github.com/appium/appium/blob/master/packages/base-driver/docs/mjsonwp/protocol-methods.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nHTTP Method | Path                                                                   | Details\n------------|------------------------------------------------------------------------|---------\nGET         | `session/{sessionId}/context`                                  | Retrieves the current context.\nPOST        | `session/{sessionId}/context`                                  | Switches to the given context.\nGET         | `session/{sessionId}/contexts`                                 | Retrieves an array of strings representing available contexts.\nGET         | `session/{sessionId}/element/{elementId}/pageIndex`            |\nGET         | `session/{sessionId}/network_connection`                       | Retrieves the current network connection type.\nPOST        | `session/{sessionId}/network_connection`                       | Sets the network connection to the given type.\nPOST        | `session/{sessionId}/touch/perform`                            | Perform the given touch action sequence.\nPOST        | `session/{sessionId}/touch/multi/perform`                      | Perform the given multi-touch action sequence.\nPOST        | `session/{sessionId}/receive_async_response`                   | Callback url for asynchronous execution of JavaScript.\n```\n\n----------------------------------------\n\nTITLE: Adding Doctor Check to package.json in Appium Extension\nDESCRIPTION: Example of how to add a specific Doctor Check file to the package.json manifest. This ensures that the check is recognized and used by Appium after the extension is installed.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/developing/build-doctor-checks.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"appium\": {\n    \"doctor\": {\n      \"checks\": [\n        \"./doctor/android-home-check.js\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Appium Test Support Package\nDESCRIPTION: NPM installation command for adding @appium/test-support as a dev dependency\nSOURCE: https://github.com/appium/appium/blob/master/packages/test-support/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @appium/test-support --save-dev\n```\n\n----------------------------------------\n\nTITLE: Enabling Server Logs Feature in Appium\nDESCRIPTION: Command to start Appium server with get_server_logs feature enabled using the --allow-insecure flag.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/guides/security.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nappium --allow-insecure=get_server_logs\n```\n\n----------------------------------------\n\nTITLE: Using the Logging Module Example\nDESCRIPTION: Shows how to use the logging utility to create a logger instance and log messages at different levels.\nSOURCE: https://github.com/appium/appium/blob/master/packages/support/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {logging} from 'appium/support';\nlet log = logging.getLogger('mymodule');\nlog.warn('a warning');\n```\n\n----------------------------------------\n\nTITLE: Appium Capabilities with appium:options (JSON)\nDESCRIPTION: This snippet shows how to use the appium:options capability to organize Appium-specific options. It includes platformName, appium:options for device-specific settings, and $cloud:appiumOptions for Appium server and plugin configurations.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/zh/guides/caps.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"platformName\": \"iOS\",\n  \"appium:options\": {\n    \"platformVersion\": \"14.4\",\n    \"deviceName\": \"iPhone 11\",\n    \"app\": \"Some-App.app.zip\",\n    \"automationName\": \"XCUITest\"\n  },\n  \"$cloud:appiumOptions\": {\n    \"version\": \"2.0.0\",\n    \"automationVersion\": \"3.52.0\",\n    \"plugins\": [\"images\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Mobile Automation Preset\nDESCRIPTION: Command to install mobile automation drivers (uiautomator2, xcuitest, espresso) and images plugin\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/cli/setup.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nappium setup mobile\n```\n\n----------------------------------------\n\nTITLE: Configuring Selenium Grid 4+ Node 1 for Appium Relay (TOML)\nDESCRIPTION: TOML configuration for the first Grid node, specifying relay settings to the first Appium server and capability configs.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/guides/grid.md#2025-04-22_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n# node1.toml\n[server]\nport = 5555\n\n[node]\ndetect-drivers = false\n\n[relay]\nurl = \"http://localhost:4723\"\nstatus-endpoint = \"/status\"\nconfigs = [\n    \"1\", \"{\\\"platformName\\\": \\\"iOS\\\", \\\"appium:platformVersion\\\": \\\"15.5\\\", \\\"appium:deviceName\\\": \\\"iPhone 13\\\", \\\"appium:automationName\\\": \\\"XCUITest\\\"}\"\n]\n```\n\n----------------------------------------\n\nTITLE: Appium Extension Endpoints Table\nDESCRIPTION: Details the Appium-specific extension endpoints that provide additional functionality for device control, app management, and system interactions.\nSOURCE: https://github.com/appium/appium/blob/master/packages/base-driver/docs/mjsonwp/protocol-methods.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nHTTP Method | Path                                                                   | Details\n------------|------------------------------------------------------------------------|---------\nPOST        | `session/{sessionId}/appium/device/shake`                      | Perform a shake action on the device.\nPOST        | `session/{sessionId}/appium/device/lock`                       | Lock the device.\nPOST        | `session/{sessionId}/appium/device/unlock`                     | Unlock the device.\nPOST        | `session/{sessionId}/appium/device/is_locked`                  | Check whether the device is locked or not.\nPOST        | `session/{sessionId}/appium/start_recording_screen`            | start recording the screen.\nPOST        | `session/{sessionId}/appium/stop_recording_screen`             | stop recording the screen.\nPOST        | `session/{sessionId}/appium/performanceData/types`             | returns the information types of the system state which is supported to read as like cpu, memory, network traffic, and battery.\nPOST        | `session/{sessionId}/appium/getPerformanceData`                | returns the information of the system state which is supported to read as like cpu, memory, network traffic, and battery.\nPOST        | `session/{sessionId}/appium/device/press_keycode`              | Press a particular key code on the device.\nPOST        | `session/{sessionId}/appium/device/long_press_keycode`         | Press and hold a particular key code on the device.\nPOST        | `session/{sessionId}/appium/device/keyevent`                   | Send a key code to the device.\nGET         | `session/{sessionId}/appium/device/current_activity`           | Retrieve the current activity running on the device.\nGET         | `session/{sessionId}/appium/device/current_package`            | Retrieve the current package running on the device.\nPOST        | `session/{sessionId}/appium/device/install_app`                | Install the given app onto the device.\nPOST        | `session/{sessionId}/appium/device/remove_app`                 | Remote an app from the device.\nPOST        | `session/{sessionId}/appium/device/app_installed`              | Check whether the specified app is installed on the device.\nPOST        | `session/{sessionId}/appium/device/hide_keyboard`              | Hide the soft keyboard.\nGET         | `session/{sessionId}/appium/device/is_keyboard_shown`          | Whether or not the soft keyboard is shown.\nPOST        | `session/{sessionId}/appium/device/push_file`                  | Place a file onto the device in a particular place.\nPOST        | `session/{sessionId}/appium/device/pull_file`                  | Retrieve a file from the device's file system.\nPOST        | `session/{sessionId}/appium/device/pull_folder`                | Retrieve a folder from the device's file system.\nPOST        | `session/{sessionId}/appium/device/toggle_airplane_mode`       | Switch the state of airplane mode.\nPOST        | `session/{sessionId}/appium/device/toggle_data`                | Switch the state of data service.\nPOST        | `session/{sessionId}/appium/device/toggle_wifi`                | Switch the state of the wifi service.\nPOST        | `session/{sessionId}/appium/device/toggle_location_services`   | Switch the state of the location service.\nPOST        | `session/{sessionId}/appium/device/open_notifications`         | Open the notifications pane on the device.\nPOST        | `session/{sessionId}/appium/device/start_activity`             | Start the specified activity on the device.\nGET         | `session/{sessionId}/appium/device/system_bars`                | Retrieve visibility and bounds information of the status and navigation bars.\nGET         | `session/{sessionId}/appium/device/display_density`            | Retrieve the display density of the device.\nPOST        | `session/{sessionId}/appium/simulator/toggle_touch_id_enrollment` | Toggle enrollment of touch id on the simulator.\nPOST        | `session/{sessionId}/appium/simulator/touch_id`                | Simulate a successful or failed touch id event on the simulator.\nPOST        | `session/{sessionId}/appium/app/launch`                        | Launch the given application on the device.\nPOST        | `session/{sessionId}/appium/app/close`                         | Close the given application.\nPOST        | `session/{sessionId}/appium/app/reset`                         | Reset the device.\nPOST        | `session/{sessionId}/appium/app/background`                    | Send the current application to the background.\nPOST        | `session/{sessionId}/appium/app/end_test_coverage`             | End test coverage on the device.\nPOST        | `session/{sessionId}/appium/app/strings`                       | Retrieve the application's strings file.\nPOST        | `session/{sessionId}/appium/element/{elementId}/value`         | Retrieve the value from the given element.\nPOST        | `session/{sessionId}/appium/element/{elementId}/replace_value` | Replace the value of the given element.\nGET         | `session/{sessionId}/appium/settings`                          | Retrieve a JSON hash of all the currently specified settings.\nPOST        | `session/{sessionId}/appium/settings`                          | Update the current setting on the device.\nPOST        | `session/{sessionId}/appium/receive_async_response`            | Callback url for asynchronous execution of JavaScript.\n```\n\n----------------------------------------\n\nTITLE: Setting Driver-Specific Parameters\nDESCRIPTION: Examples of setting driver-specific parameters in Appium 2, including WebDriverAgent port and Chromedriver executable path.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/zh/guides/migrating-1-to-2.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nappium --driver-xcuitest-webdriveragent-port=5000\nappium --default-capabilities '{\"appium:chromedriverExecutable\": \"/path/to/chromedriver\"}'\n```\n\n----------------------------------------\n\nTITLE: Version Comparison Link in Markdown\nDESCRIPTION: Markdown formatting for a version comparison link between two releases\nSOURCE: https://github.com/appium/appium/blob/master/packages/base-driver/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[9.12.0](https://github.com/appium/appium/compare/@appium/base-driver@9.11.5...@appium/base-driver@9.12.0)\n```\n\n----------------------------------------\n\nTITLE: Installing Appium Drivers using Command Line\nDESCRIPTION: This command demonstrates how to install Appium drivers using their installation key. Users can replace '<installation key>' with the specific key listed for each driver in the documentation.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/ecosystem/drivers.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nappium driver install <installation key>\n```\n\n----------------------------------------\n\nTITLE: Node.js Version Requirements for Appium\nDESCRIPTION: Specifies the required Node.js version range using SemVer notation, indicating Appium requires Node.js version 14.17.0 or above, 16.13.0 or above, or any version from 18.0.0 onwards.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/quickstart/requirements.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n^14.17.0 || ^16.13.0 || >=18.0.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Second Appium Server with YAML\nDESCRIPTION: YAML configuration for the second Appium server instance with adjusted ports (4733) to prevent resource conflicts.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/zh/guides/grid.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  port: 4733\n  use-drivers:\n    - xcuitest\n  default-capabilities:\n    wdaLocalPort: 8110\n    mjpegServerPort: 9110\n    mjpegScreenshotUrl: \"http://localhost:9110\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Session in Appium Base Driver\nDESCRIPTION: Creates a new session with the given capabilities. Accepts capability objects in W3C format.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/commands/base-driver.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nPOST /session\n```\n\n----------------------------------------\n\nTITLE: Initializing Single Setting via Capabilities in Appium\nDESCRIPTION: Example showing how to set a single setting (ignoreUnimportantViews) through capabilities when starting an Appium session. The setting is configured using the appium:settings[] prefix in the capabilities object.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/zh/guides/settings.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"appium:settings[ignoreUnimportantViews]\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Sessions in Appium Base Driver\nDESCRIPTION: Gets data for all sessions running on an Appium server, including session ID and capabilities.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/commands/base-driver.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nGET /sessions\n```\n\n----------------------------------------\n\nTITLE: Handling Unexpected Session Shutdown in Appium Plugin\nDESCRIPTION: Shows implementation of onUnexpectedShutdown method to handle cleanup when an Appium session ends unexpectedly. The method receives the current session driver and error cause as parameters.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/developing/build-plugins.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nasync onUnexpectedShutdown(driver, cause) {\n  try {\n    // do some cleanup\n  } catch (e) {\n    // log any errors; don't allow anything to be thrown as they will be unhandled rejections\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Commit Hash in Markdown\nDESCRIPTION: Shows the commit hash for version 3.0.1 using a markdown link.\nSOURCE: https://github.com/appium/appium/blob/master/packages/fake-driver/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [3.0.1](https://github.com/appium/appium/compare/@appium/fake-driver@3.0.0...@appium/fake-driver@3.0.1) (2021-09-14)\n```\n\n----------------------------------------\n\nTITLE: Installing a Specific Version of an Appium Driver\nDESCRIPTION: These commands demonstrate how to uninstall a driver and install a specific version, using xcuitest as an example.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/ja/guides/migrating-1-to-2.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nappium driver uninstall xcuitest\nappium driver install xcuitest@4.11.1\n```\n\n----------------------------------------\n\nTITLE: Starting Appium Server with Custom Plugin\nDESCRIPTION: Command to start the Appium server with a specific plugin enabled for testing.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/guides/branch-testing.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nappium server --use-plugins=<plugin_name>\n```\n\n----------------------------------------\n\nTITLE: Starting Appium Servers and Selenium Grid 4+ Components (Bash)\nDESCRIPTION: Bash commands to start two Appium servers, two Grid nodes, and one Grid hub for a complete Selenium Grid 4+ setup with Appium integration.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/guides/grid.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nappium --config appium1.yml\nappium --config appium2.yml\njava -jar /path/to/selenium.jar node --config node1.toml\njava -jar /path/to/selenium.jar node --config node2.toml\njava -jar /path/to/selenium.jar hub\n```\n\n----------------------------------------\n\nTITLE: Importing WebDriver Error Classes in JavaScript\nDESCRIPTION: Demonstrates how to import and use WebDriver-specific error classes from the Appium driver module. This allows plugin developers to throw appropriate errors that conform to the WebDriver spec.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/zh/developing/build-plugins.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {errors} from 'appium/driver';\n\nthrow new errors.NoSuchElementError();\n```\n\n----------------------------------------\n\nTITLE: Error Logging with Exception Handling\nDESCRIPTION: Shows how to use the errorWithException helper to log errors and throw them in a single operation.\nSOURCE: https://github.com/appium/appium/blob/master/packages/support/README.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport {logging} from 'appium/support';\nlet log = logging.getLogger('mymodule');\n\n// previously there would be two lines\nlog.error('This is an error');\nthrow new Error('This is an error');\n\n// now is compacted\nthrow log.errorWithException('This is an error');\n```\n\n----------------------------------------\n\nTITLE: Sample Gemfile Configuration for Appium Ruby Tests\nDESCRIPTION: A complete Gemfile showing the required dependencies for running Appium tests with Ruby.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/quickstart/test-rb.md#2025-04-22_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n--8<-- \"./sample-code/quickstarts/rb/Gemfile\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin CLI Arguments in JSON\nDESCRIPTION: This JSON configuration demonstrates how to set custom CLI arguments for an Appium plugin named 'pluggo' using a configuration file. It shows the structure for specifying plugin-specific settings under the 'plugin' field.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/developing/build-plugins.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"server\": {\n    \"plugin\": {\n      \"pluggo\": {\n        \"electro-port\": 1234\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Pull Request in Markdown\nDESCRIPTION: Links to a GitHub pull request using markdown syntax within a feature description.\nSOURCE: https://github.com/appium/appium/blob/master/packages/fake-driver/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n- **appium:** Add driver and plugin server arg injection feature ([#15388](https://github.com/appium/appium/issues/15388)) ([d3c11e3](https://github.com/appium/appium/commit/d3c11e364dffff87ac38ac8dc3ad65a1e4534a9a))\n```\n\n----------------------------------------\n\nTITLE: Validating UiAutomator2 Driver Installation\nDESCRIPTION: Command to run the Appium Doctor tool to verify that all prerequisites for the UiAutomator2 driver have been correctly set up.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/quickstart/uiauto2-driver.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nappium driver doctor uiautomator2\n```\n\n----------------------------------------\n\nTITLE: Feature-based Image Comparison in Ruby\nDESCRIPTION: This Ruby code snippet shows how to perform feature-based image comparison. It reads two images from files and uses the match_images_features method to compare them, with and without visualization.\nSOURCE: https://github.com/appium/appium/blob/master/packages/images-plugin/docs/image-comparison.md#2025-04-22_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nimage1 = File.read 'first/image/path.png'\nimage2 = File.read 'second/image/path.png'\n\nmatch_result = @driver.match_images_features first_image: image1, second_image: image2\nassert_equal %w(points1 rect1 points2 rect2 totalCount count), match_result.keys\n\nmatch_result_visual = @driver.match_images_features first_image: image1, second_image: image2, visualize: true\nassert_equal %w(points1 rect1 points2 rect2 totalCount count visualization), match_result_visual.keys\nFile.open('match_result_visual.png', 'wb') { |f| f<< Base64.decode64(match_result_visual['visualization']) }\nassert File.size? 'match_result_visual.png'\n```\n\n----------------------------------------\n\nTITLE: Configuring Selenium Grid 4+ Node 2 for Appium Relay (TOML)\nDESCRIPTION: TOML configuration for the second Grid node, specifying relay settings to the second Appium server and capability configs.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/guides/grid.md#2025-04-22_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n# node2.toml\n[server]\nport = 5565\n\n[node]\ndetect-drivers = false\n\n[relay]\nurl = \"http://localhost:4733\"\nstatus-endpoint = \"/status\"\nconfigs = [\n    \"1\", \"{\\\"platformName\\\": \\\"iOS\\\", \\\"appium:platformVersion\\\": \\\"15.5\\\", \\\"appium:deviceName\\\": \\\"iPhone 12\\\", \\\"appium:automationName\\\": \\\"XCUITest\\\"}\"\n]\n```\n\n----------------------------------------\n\nTITLE: Updating Drivers in Appium 2\nDESCRIPTION: Command to update a specific driver to its latest version using the extension CLI.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/guides/migrating-1-to-2.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nappium driver update xcuitest\n```\n\n----------------------------------------\n\nTITLE: Calculating Common Edges Between Images in JavaScript\nDESCRIPTION: Uses the getImagesMatches function to calculate the count of common edges between two images. The images can be rotated or resized relative to each other.\nSOURCE: https://github.com/appium/appium/blob/master/packages/opencv/README.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {getImagesMatches} from '@appium/opencv';\nimport {fs} from '@appium/support';\n\nconst image1 = await fs.readFile('image1.jpg')\nconst image2 = await fs.readFile('image2.jpg')\nconst {points1, rect1, points2, rect2, totalCount, count} = await getImagesMatches(image1, image2);\n```\n\n----------------------------------------\n\nTITLE: Grid 3 Node Configuration JSON Example\nDESCRIPTION: Example JSON configuration for Selenium Grid 3 node setup, including capabilities and connection settings.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/zh/guides/grid.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"capabilities\":\n      [\n        {\n          \"browserName\": \"<e.g._iPhone5_or_iPad4>\",\n          \"version\":\"<version_of_iOS_e.g._7.1>\",\n          \"maxInstances\": 1,\n          \"platform\":\"<platform_e.g._MAC_or_ANDROID>\"\n        }\n      ],\n  \"configuration\":\n  {\n    \"cleanUpCycle\":2000,\n    \"timeout\":30000,\n    \"proxy\": \"org.openqa.grid.selenium.proxy.DefaultRemoteProxy\",\n    \"url\":\"http://<host_name_appium_server_or_ip-address_appium_server>:<appium_port>/wd/hub\",\n    \"host\": \"<host_name_appium_server_or_ip-address_appium_server>\",\n    \"port\": <appium_port>,\n    \"maxSession\": 1,\n    \"register\": true,\n    \"registerCycle\": 5000,\n    \"hubPort\": <grid_port>,\n    \"hubHost\": \"<Grid_host_name_or_grid_ip-address>\",\n    \"hubProtocol\": \"<Protocol_of_Grid_defaults_to_http>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP POST Endpoint for Driver Script Execution\nDESCRIPTION: Defines an HTTP POST endpoint that allows execution of driver scripts within an Appium plugin. The endpoint accepts script parameters and returns an unknown response type. Requires ExternalDriver as minimum driver type.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/commands/execute-driver-plugin.md#2025-04-22_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /session/:sessionId/appium/execute_driver\n```\n\n----------------------------------------\n\nTITLE: Version Header in Changelog\nDESCRIPTION: Header section with version comparison link and changelog formatting information\nSOURCE: https://github.com/appium/appium/blob/master/packages/docutils/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Change Log\n\nAll notable changes to this project will be documented in this file.\nSee [Conventional Commits](https://conventionalcommits.org) for commit guidelines.\n```\n\n----------------------------------------\n\nTITLE: Installing Appium Images Plugin\nDESCRIPTION: Commands for installing and activating the Appium images plugin. The plugin must be installed using the Appium CLI and explicitly activated when launching the Appium server.\nSOURCE: https://github.com/appium/appium/blob/master/packages/images-plugin/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nappium plugin install images\n```\n\nLANGUAGE: bash\nCODE:\n```\nappium --use-plugins=images\n```\n\n----------------------------------------\n\nTITLE: Checking Error Type in JavaScript\nDESCRIPTION: Demonstrates how to use the isErrorType helper function to check if an error is of a specific type in a try-catch block.\nSOURCE: https://github.com/appium/appium/blob/master/packages/base-driver/docs/mjsonwp/errors.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { errors, isErrorType } from 'appium-base-driver';\n\ntry {\n  // do some stuff...\n} catch (err) {\n  if (isErrorType(err, errors.InvalidCookieDomainError)) {\n    // process...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Local Appium Driver or Plugin (Bash)\nDESCRIPTION: Commands to install an Appium driver or plugin from a local source. The full path to the driver or plugin folder should be provided.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/zh/guides/branch-testing.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nappium driver install --source=local <full_path_to_driver_folder_with_fetched_sources>\n```\n\nLANGUAGE: bash\nCODE:\n```\nappium plugin install --source=local <full_path_to_plugin_folder_with_fetched_sources>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Page Source in Appium Base Driver\nDESCRIPTION: Gets the current page/app source as HTML/XML.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/commands/base-driver.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nGET /session/:sessionId/source\n```\n\n----------------------------------------\n\nTITLE: Similarity Calculation in Ruby\nDESCRIPTION: This Ruby code shows how to calculate the similarity between two images using the get_images_similarity method. It demonstrates usage with and without visualization, and saves the visualization result to a file.\nSOURCE: https://github.com/appium/appium/blob/master/packages/images-plugin/docs/image-comparison.md#2025-04-22_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nimage1 = File.read 'first/image/path.png'\nimage2 = File.read 'second/image/path.png'\n\nget_images_result = @driver.get_images_similarity first_image: image1, second_image: image2\nassert_equal({ 'score' => 0.891606867313385 }, get_images_result)\n\nget_images_result_visual = @driver.get_images_similarity first_image: image1, second_image: image2, visualize: true\nassert_equal %w(score visualization), get_images_result_visual.keys\nFile.open('get_images_result_visual.png', 'wb') { |f| f<< Base64.decode64(get_images_result_visual['visualization']) }\nassert File.size? 'get_images_result_visual.png'\n```\n\n----------------------------------------\n\nTITLE: Configuring First Grid Node with TOML\nDESCRIPTION: TOML configuration for the first Selenium Grid node, specifying relay settings to Appium server on port 4723 with iOS device capabilities.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/zh/guides/grid.md#2025-04-22_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[server]\nport = 5555\n\n[node]\ndetect-drivers = false\n\n[relay]\nurl = \"http://localhost:4723\"\nstatus-endpoint = \"/status\"\nconfigs = [\n    \"1\", \"{\\\"platformName\\\": \\\"iOS\\\", \\\"appium:platformVersion\\\": \\\"15.5\\\", \\\"appium:deviceName\\\": \\\"iPhone 13\\\", \\\"appium:automationName\\\": \\\"XCUITest\\\"}\"\n]\n```\n\n----------------------------------------\n\nTITLE: Finding Multiple Elements in Appium Base Driver\nDESCRIPTION: Finds all UI elements matching a given locator strategy and selector. Returns a list of element objects.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/commands/base-driver.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nPOST /session/:sessionId/elements\n```\n\n----------------------------------------\n\nTITLE: Commit Reference Link\nDESCRIPTION: Markdown link syntax for referencing specific commits\nSOURCE: https://github.com/appium/appium/blob/master/packages/driver-test-support/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n* **support:** update dependency axios to v1.6.0 ([699c493](https://github.com/appium/appium/commit/699c49306c38e222d618a9611482b06a3e6806aa))\n```\n\n----------------------------------------\n\nTITLE: Package.json Configuration for Appium Dependencies\nDESCRIPTION: Example package.json configuration showing how to include Appium and XCUITest driver as dev dependencies in an npm project.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/guides/managing-exts.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"devDependencies\": {\n    \"appium\": \"^2.0.0\",\n    \"appium-xcuitest-driver\": \"^4.11.1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Multiple Insecure Features in Appium Server (Bash)\nDESCRIPTION: This command starts the Appium server with multiple insecure features enabled. It shows how to specify multiple feature names in a comma-separated list with the '--allow-insecure' flag.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/zh/guides/security.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nappium --allow-insecure=get_server_logs,record_audio\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Appium Driver or Plugin (Bash)\nDESCRIPTION: CLI commands to uninstall an Appium driver or plugin. The placeholder <driver_name> or <plugin_name> should be replaced with the actual name of the driver or plugin.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/zh/guides/branch-testing.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nappium driver uninstall <driver_name>\n```\n\nLANGUAGE: bash\nCODE:\n```\nappium plugin uninstall <plugin_name>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Settings in Appium Base Driver\nDESCRIPTION: Retrieves the session's settings dictionary.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/commands/base-driver.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nGET /session/:sessionId/appium/settings\n```\n\n----------------------------------------\n\nTITLE: Running Appium Doctor for UIAutomator2 Driver\nDESCRIPTION: This command demonstrates how to use the Appium Doctor tool to validate the setup and prerequisites for the UIAutomator2 driver. It checks if the environment is correctly configured for this specific Appium driver.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/ecosystem/tools.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nappium driver doctor uiautomator2\n```\n\n----------------------------------------\n\nTITLE: Running Appium with Different Driver Versions\nDESCRIPTION: Commands showing how to launch Appium using different APPIUM_HOME paths to use specific driver versions.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/guides/managing-exts.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nAPPIUM_HOME=/path/to/home1 appium  # use xcuitest driver 4.11.1\nAPPIUM_HOME=/path/to/home2 appium  # use xcuitest driver 4.11.2\n```\n\n----------------------------------------\n\nTITLE: Importing Support Utilities in Helper Modules\nDESCRIPTION: Demonstrates how to import utility functions from @appium/support in helper module code.\nSOURCE: https://github.com/appium/appium/blob/master/packages/support/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {timing, util} from '@appium/support';\n```\n\n----------------------------------------\n\nTITLE: Manifest Version Export\nDESCRIPTION: Export statement for making all manifest versions available for migration purposes.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/types/manifest/README.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport {ManifestV...}\n```\n\n----------------------------------------\n\nTITLE: Starting Appium with Grid 3 Node Configuration\nDESCRIPTION: Bash command to start Appium server with Grid 3 node configuration and custom base path.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/zh/guides/grid.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nappium server --nodeconfig /path/to/nodeconfig.json --base-path=/wd/hub\n```\n\n----------------------------------------\n\nTITLE: Pattern-Based Log Filtering in Appium\nDESCRIPTION: Configuration using regular expression pattern to replace text matching 'my.magic.<any char>' with a custom replacer, case insensitive.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/guides/log-filters.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"pattern\": \"my\\\\.magic\\\\.\\\\w\",\n        \"flags\": \"i\",\n        \"replacer\": \"***\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Building and Serving Appium Documentation\nDESCRIPTION: Commands to build Appium documentation, serve it locally, and deploy it with versioning. These examples demonstrate various options of the appium-docs CLI tool.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/zh/developing/build-docs.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Generate reference and build the mkdocs site into the site dir\nnpx appium-docs build\n\n# Same as build, but host the docs on a local dev server\n# and watch for changes and rebuild when files change\nnpx appium-docs build --serve\n\n# Build the docs and deploy them with mike versioning to the docs-site branch\n# using the included commit message.\n# This is particularly useful for pushing content to a GitHub pages branch!\nnpx appium-docs build \\\n  --deploy \\\n  -b docs-site \\\n  -m 'docs: auto-build docs for appium-xcuitest-driver@%s'\n```\n\n----------------------------------------\n\nTITLE: Configuring Second Grid Node with TOML\nDESCRIPTION: TOML configuration for the second Selenium Grid node, specifying relay settings to Appium server on port 4733 with different iOS device capabilities.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/zh/guides/grid.md#2025-04-22_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[server]\nport = 5565\n\n[node]\ndetect-drivers = false\n\n[relay]\nurl = \"http://localhost:4733\"\nstatus-endpoint = \"/status\"\nconfigs = [\n    \"1\", \"{\\\"platformName\\\": \\\"iOS\\\", \\\"appium:platformVersion\\\": \\\"15.5\\\", \\\"appium:deviceName\\\": \\\"iPhone 12\\\", \\\"appium:automationName\\\": \\\"XCUITest\\\"}\"\n]\n```\n\n----------------------------------------\n\nTITLE: Enabling Single Insecure Feature in Appium Server (Bash)\nDESCRIPTION: This command starts the Appium server with the 'get_server_logs' insecure feature enabled. It demonstrates how to use the '--allow-insecure' flag to selectively enable specific features.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/zh/guides/security.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nappium --allow-insecure=get_server_logs\n```\n\n----------------------------------------\n\nTITLE: Installing XCUITest Driver Using Appium CLI\nDESCRIPTION: Example command showing how to install the XCUITest driver using Appium's Extension CLI interface.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/zh/guides/managing-exts.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nappium driver install xcuitest\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for Helper Modules\nDESCRIPTION: Shows how to configure the dependencies section in package.json for helper libraries that need to use the support utilities directly.\nSOURCE: https://github.com/appium/appium/blob/master/packages/support/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n  \"dependencies\": {\n    \"@appium/support\": \"<module_version>\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Index File Type Export Statement\nDESCRIPTION: Export statement for making the latest version of manifest types available.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/types/manifest/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport * from './v<new-version>'\n```\n\n----------------------------------------\n\nTITLE: Configuring Appium as Selenium Grid 3 Node (JSON)\nDESCRIPTION: JSON configuration for registering an Appium server as a node in Selenium Grid 3, specifying capabilities and connection details.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/guides/grid.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"capabilities\":\n      [\n        {\n          \"browserName\": \"<e.g._iPhone5_or_iPad4>\",\n          \"version\":\"<version_of_iOS_e.g._7.1>\",\n          \"maxInstances\": 1,\n          \"platform\":\"<platform_e.g._MAC_or_ANDROID>\"\n        }\n      ],\n  \"configuration\":\n  {\n    \"cleanUpCycle\":2000,\n    \"timeout\":30000,\n    \"proxy\": \"org.openqa.grid.selenium.proxy.DefaultRemoteProxy\",\n    \"url\":\"http://<host_name_appium_server_or_ip-address_appium_server>:<appium_port>/wd/hub\",\n    \"host\": \"<host_name_appium_server_or_ip-address_appium_server>\",\n    \"port\": <appium_port>,\n    \"maxSession\": 1,\n    \"register\": true,\n    \"registerCycle\": 5000,\n    \"hubPort\": <grid_port>,\n    \"hubHost\": \"<Grid_host_name_or_grid_ip-address>\",\n    \"hubProtocol\": \"<Protocol_of_Grid_defaults_to_http>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Storage Items with cURL\nDESCRIPTION: Example of retrieving all files in storage using a GET request.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/commands/storage-plugin.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://127.0.0.1:4723/storage/list\n```\n\n----------------------------------------\n\nTITLE: Installing XCUITest Driver Using Appium CLI\nDESCRIPTION: Basic command to install the latest version of XCUITest Driver using Appium's Extension CLI.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/guides/managing-exts.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nappium driver install xcuitest\n```\n\n----------------------------------------\n\nTITLE: Storage Add Response Format\nDESCRIPTION: JSON response format for storage add request containing WebSocket stream and events paths with TTL.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/commands/storage-plugin.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ws\": {\n    \"stream\": \"/storage/add/ccc963411b2621335657963322890305ebe96186/stream\",\n    \"events\": \"/storage/add/ccc963411b2621335657963322890305ebe96186/events\"\n  },\n  \"ttlMs\": 300000\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Storage Item in TypeScript\nDESCRIPTION: Demonstrates how to create a custom implementation of the Item interface and configure Strongbox to use it.\nSOURCE: https://github.com/appium/appium/blob/master/packages/strongbox/README.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {strongbox, Item} from '@appium/strongbox';\nimport {Foo, getFoo} from 'somewhere/else';\n\nclass FooItem implements Item<Foo> {\n  // ...\n}\n\nconst box = strongbox('my-pkg', {defaultCtor: FooItem});\n\nconst foo: Foo = getFoo();\nconst item = await box.createItemWithValue('my unique name', Foo);\n```\n\n----------------------------------------\n\nTITLE: Running Appium with Different Driver Versions\nDESCRIPTION: Example showing how to launch Appium using different APPIUM_HOME paths to select specific driver versions.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/zh/guides/managing-exts.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nAPPIUM_HOME=/path/to/home1 appium  # use xcuitest driver 4.11.1\nAPPIUM_HOME=/path/to/home2 appium  # use xcuitest driver 4.11.2\n```\n\n----------------------------------------\n\nTITLE: Base Schema Driver Reference\nDESCRIPTION: Demonstrates how extension schemas are referenced within the base schema structure using JSON schema references.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/developing/config-system.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"driver\": {\n    \"cowabunga\": {\n      \"$ref\": \"driver-cowabunga.json\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Manifest Data Version Mapping\nDESCRIPTION: Object assignment for mapping version numbers to their corresponding manifest data types.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/types/manifest/README.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nManifestDataVersions[<new-version>] = ManifestV<new-version>.ManifestData\n```\n\n----------------------------------------\n\nTITLE: Appium Driver Configuration - JSON\nDESCRIPTION: Example showing how to configure driver-specific settings in Appium, specifically for the XCUITest driver with a custom webkit-debug-proxy-port setting.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/zh/guides/config.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"server\": {\n    \"driver\": {\n      \"xcuitest\": {\n        \"webkit-debug-proxy-port\": 5400\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Appium Execute Driver Plugin\nDESCRIPTION: Command to install the execute-driver plugin using Appium's plugin manager.\nSOURCE: https://github.com/appium/appium/blob/master/packages/execute-driver-plugin/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nappium plugin install execute-driver\n```\n\n----------------------------------------\n\nTITLE: Updating a Specific Appium Driver\nDESCRIPTION: This command updates a specific Appium driver (in this case, xcuitest) to the latest version.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/ja/guides/migrating-1-to-2.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nappium driver update xcuitest\n```\n\n----------------------------------------\n\nTITLE: Starting Appium Server with Selenium Grid 3 Node Configuration (Bash)\nDESCRIPTION: Bash command to start an Appium server and register it with a Selenium Grid 3 instance using a node configuration file.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/guides/grid.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nappium server --nodeconfig /path/to/nodeconfig.json --base-path=/wd/hub\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenCV Bindings in JavaScript\nDESCRIPTION: Loads the OpenCV bindings. This is only necessary if you want to use custom OpenCV methods not included in this module.\nSOURCE: https://github.com/appium/appium/blob/master/packages/opencv/README.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {initOpenCv} from '@appium/opencv';\nawait initOpenCv();\n```\n\n----------------------------------------\n\nTITLE: Adding Appium Ruby Client Dependencies\nDESCRIPTION: Adds the recommended appium_lib_core library or alternatively appium_lib to the project dependencies.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/quickstart/test-rb.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbundle add appium_lib_core\n# or\n# bundle add appium_lib\n```\n\n----------------------------------------\n\nTITLE: Initializing a Ruby Project with Bundler for Appium\nDESCRIPTION: Creates a new Gemfile to manage dependencies for an Appium test project.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/quickstart/test-rb.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbundle init\n```\n\n----------------------------------------\n\nTITLE: Configuration File Example for CLI Arguments\nDESCRIPTION: Example of how to provide custom driver arguments through a configuration file instead of command line parameters.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/developing/build-drivers.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"server\": {\n    \"driver\": {\n      \"horace\": {\n        \"test-web-server-port\": 1234,\n        \"test-web-server-host\": \"localhorse\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Appium Plugin using Command Line\nDESCRIPTION: This command demonstrates how to install an Appium plugin using its installation key. The specific plugin to be installed is represented by the placeholder '<installation key>'.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/ecosystem/plugins.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nappium plugin install <installation key>\n```\n\n----------------------------------------\n\nTITLE: Setting Default Capabilities via Command Line\nDESCRIPTION: Command to set default capabilities from the command line, using the example of specifying a custom Chromedriver executable path.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/guides/migrating-1-to-2.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nappium --default-capabilities '{\"appium:chromedriverExecutable\": \"/path/to/chromedriver\"}'\n```\n\n----------------------------------------\n\nTITLE: Get Page Source Endpoint Documentation\nDESCRIPTION: GET endpoint to retrieve the current page/app source in HTML/XML format. Returns the UI hierarchy in a platform-appropriate format.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/commands/universal-xml-plugin.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nGET /session/:sessionId/source\n```\n\n----------------------------------------\n\nTITLE: Implementing a Doctor Check for Appium in JavaScript\nDESCRIPTION: Example of a Doctor Check implementation in Node.js. This check verifies if a specific environment variable is set and points to a valid path. It demonstrates how to implement the required methods of the IDoctorCheck interface.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/developing/build-doctor-checks.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst {fs, doctor} = require('@appium/support');\n\n/** @satisfies {import('@appium/types').IDoctorCheck} */\nclass EnvVarAndPathCheck {\n  /**\n   * @param {string} varName\n   */\n  constructor(varName) {\n    this.varName = varName;\n  }\n\n  async diagnose() {\n    const varValue = process.env[this.varName];\n    if (typeof varValue === 'undefined') {\n      return doctor.nok(`${this.varName} environment variable is NOT set!`);\n    }\n\n    if (await fs.exists(varValue)) {\n      return doctor.ok(`${this.varName} is set to: ${varValue}`);\n    }\n\n    return doctor.nok(`${this.varName} is set to '${varValue}' but this is NOT a valid path!`);\n  }\n\n  async fix() {\n    return (\n      `Make sure the environment variable ${this.varName} is properly configured for the Appium server process`\n    );\n  }\n\n  hasAutofix() {\n    return false;\n  }\n\n  isOptional() {\n    return false;\n  }\n}\n\nconst androidHomeCheck = new EnvVarAndPathCheck('ANDROID_HOME');\n\nmodule.exports = {androidHomeCheck};\n\n/**\n * @typedef {import('@appium/types').DoctorCheckResult} CheckResult\n */\n```\n\n----------------------------------------\n\nTITLE: Installing Specific XCUITest Version\nDESCRIPTION: Example command showing how to install a specific version of the XCUITest driver.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/cli/extensions.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nappium driver install xcuitest@4.11.1\n```\n\n----------------------------------------\n\nTITLE: Package.json Configuration for Appium Dependencies\nDESCRIPTION: Example package.json configuration showing how to include Appium and XCUITest driver as project dependencies.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/zh/guides/managing-exts.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"devDependencies\": {\n    \"appium\": \"^2.0.0\",\n    \"appium-xcuitest-driver\": \"^4.11.1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Storage Item with cURL\nDESCRIPTION: Example of adding a new file to storage by sending a POST request with file name and SHA1 hash.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/commands/storage-plugin.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST --header \"Content-Type: application/json\" --data '{\"name\":\"app.ipa\",\"sha1\":\"ccc963411b2621335657963322890305ebe96186\"}' http://127.0.0.1:4723/storage/add\n```\n\n----------------------------------------\n\nTITLE: Installing Beta Version from NPM\nDESCRIPTION: Example command showing how to install a beta version of a driver from NPM.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/cli/extensions.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nappium driver install --source=npm @appium/fake-driver@beta\n```\n\n----------------------------------------\n\nTITLE: Adding Test-Unit Module for Ruby Testing\nDESCRIPTION: Adds the test-unit module which is required for the example test script.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/quickstart/test-rb.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbundle add test-unit\n```\n\n----------------------------------------\n\nTITLE: Enabling Appium Plugins\nDESCRIPTION: This command shows how to enable Appium plugins when starting the Appium server. Plugins must be explicitly enabled, unlike drivers which are enabled by default.\nSOURCE: https://github.com/appium/appium/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nappium --use-plugins=<plugin-name>\n```\n\n----------------------------------------\n\nTITLE: Installing Appium Extensions\nDESCRIPTION: Command syntax for installing Appium extensions with optional source and package parameters.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/cli/extensions.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nappium <ext-type> install <install-spec> [--source=<install-source>] [--package=<package-name>] [--json]\n```\n\n----------------------------------------\n\nTITLE: Importing Appium Support Utilities in Drivers/Plugins\nDESCRIPTION: Demonstrates how to import utility functions from the appium/support module in driver or plugin code.\nSOURCE: https://github.com/appium/appium/blob/master/packages/support/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {timing, util} from 'appium/support';\n```\n\n----------------------------------------\n\nTITLE: Running Extension Scripts\nDESCRIPTION: Example command showing how to run a script included in an extension package.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/cli/extensions.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nappium driver run uiautomator2 reset\n```\n\n----------------------------------------\n\nTITLE: Resetting Storage with cURL\nDESCRIPTION: Example of resetting the entire storage using a POST request, which deletes all files unless APPIUM_STORAGE_KEEP_ALL flag is enabled.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/commands/storage-plugin.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://127.0.0.1:4723/storage/reset\n```\n\n----------------------------------------\n\nTITLE: Retrieving Session Capabilities in Appium Base Driver\nDESCRIPTION: Returns capabilities for a given session.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/commands/base-driver.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nGET /session/:sessionId/appium/capabilities\n```\n\n----------------------------------------\n\nTITLE: Running the Appium Test\nDESCRIPTION: Command to execute the NUnit test project using the dotnet test runner\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/quickstart/test-dotnet.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet test\n```\n\n----------------------------------------\n\nTITLE: Installing Local Driver from Source\nDESCRIPTION: Command to install an Appium driver from local source code, linking it to the Appium server for testing.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/guides/branch-testing.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nappium driver install --source=local <full_path_to_driver_folder_with_fetched_sources>\n```\n\n----------------------------------------\n\nTITLE: Cache Response Data Fix\nDESCRIPTION: Fix to avoid RangeError while caching response data in base-driver.\nSOURCE: https://github.com/appium/appium/blob/master/packages/base-driver/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"base-driver\": \"Avoid RangeError while caching the response data\"\n```\n\n----------------------------------------\n\nTITLE: Appium API Routes Table in Markdown\nDESCRIPTION: A markdown table listing unimplemented Appium API routes, including HTTP methods, endpoint paths, and their descriptions. The routes cover functionality like frame navigation, window manipulation, element interaction, mouse actions, touch events, and storage operations.\nSOURCE: https://github.com/appium/appium/blob/master/packages/base-driver/docs/mjsonwp/protocol-methods.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nHTTP Method | Path                                                                   | Details\n------------|------------------------------------------------------------------------|---------\nPOST        | `session/{sessionId}/frame/parent`                             | Change focus to the parent frame.\nPOST        | `session/{sessionId}/window/{windowhandle}/size`               | Change the size of the specified window.\nGET         | `session/{sessionId}/window/{windowhandle}/position`           | Get the position of the specified window.\nPOST        | `session/{sessionId}/window/{windowhandle}/position`           | Change the position of the specified window.\nGET         | `session/{sessionId}/element/{elementId}`                      | Describe the identified element.\nPOST        | `session/{sessionId}/buttondown`                               | Click and hold the left mouse button (at the coordinates set by the last moveto command).\nPOST        | `session/{sessionId}/buttonup`                                 | Releases the mouse button previously held (where the mouse is currently at).\nPOST        | `session/{sessionId}/doubleclick`                              | Double-clicks at the current mouse coordinates (set by moveto).\nPOST        | `session/{sessionId}/touch/scroll`                             | Scroll on the touch screen using finger based motion events.\nPOST        | `session/{sessionId}/touch/doubleclick`                        | Double tap on the touch screen using finger motion events.\nGET         | `session/{sessionId}/local_storage`                            | Get all keys of the storage.\nPOST        | `session/{sessionId}/local_storage`                            | Set the storage item for the given key.\nDELETE      | `session/{sessionId}/local_storage`                            | Clear the storage.\nGET         | `session/{sessionId}/local_storage/key/{key}`                  | Get the storage item for the given key.\nDELETE      | `session/{sessionId}/local_storage/key/{key}`                  | Remove the storage item for the given key.\nGET         | `session/{sessionId}/local_storage/size`                       | Get the number of items in the storage.\nGET         | `session/{sessionId}/session_storage`                          | Get all keys of the storage.\nPOST        | `session/{sessionId}/session_storage`                          | Set the storage item for the given key.\nDELETE      | `session/{sessionId}/session_storage`                          | Clear the storage.\nGET         | `session/{sessionId}/session_storage/key/{key}`                | Get the storage item for the given key.\nDELETE      | `session/{sessionId}/session_storage/key/{key}`                | Remove the storage item for the given key.\nGET         | `session/{sessionId}/session_storage/size`                     | Get the number of items in the storage.\nGET         | `session/{sessionId}/application_cache/status`                 | Get the status of the html5 application cache.\n```\n\n----------------------------------------\n\nTITLE: Initializing Appium Documentation Setup\nDESCRIPTION: Command to initialize an Appium extension for documentation generation, which creates necessary configuration files\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/developing/build-docs.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx appium-docs init\n```\n\n----------------------------------------\n\nTITLE: Example JSON Schema Structure in Appium\nDESCRIPTION: An example JSON schema showing the structure of a simple schema with a number property. This illustrates how properties are referenced within the schema system.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/developing/config-system.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$id\": \"my-schema.json\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"foo\": {\n      \"type\": \"number\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Storage Item Contents in TypeScript\nDESCRIPTION: Demonstrates how to read contents from a storage item, with undefined returned if the item doesn't exist.\nSOURCE: https://github.com/appium/appium/blob/master/packages/strongbox/README.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst contents = await item.read();\n```\n\n----------------------------------------\n\nTITLE: Deleting Storage Item with cURL\nDESCRIPTION: Example of deleting a specific file from storage using a POST request with file name.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/commands/storage-plugin.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST --header \"Content-Type: application/json\" --data '{\"name\":\"app.ipa\"}' http://127.0.0.1:4723/storage/delete\n```\n\n----------------------------------------\n\nTITLE: Starting Appium Server with Specific Driver or Plugin (Bash)\nDESCRIPTION: Commands to start the Appium server with a specific driver or plugin. The placeholder should be replaced with the actual name of the driver or plugin.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/zh/guides/branch-testing.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nappium server --use-drivers=<driver_name>\n```\n\nLANGUAGE: bash\nCODE:\n```\nappium server --use-plugins=<plugin_name>\n```\n\n----------------------------------------\n\nTITLE: TLS Protocol Support Addition\nDESCRIPTION: Added server support for TLS and SPDY protocols in base-driver module.\nSOURCE: https://github.com/appium/appium/blob/master/packages/base-driver/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"base-driver\": \"Add server support of TLS and SPDY protocols\"\n```\n\n----------------------------------------\n\nTITLE: Finding Single Element in Appium\nDESCRIPTION: API endpoint for finding a single UI element using a locator strategy and selector. It returns an element object with an element id for use in element-related commands.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/commands/images-plugin.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### `findElement`\n\n`POST` **`/session/:sessionId/element`**\n\nFind a UI element given a locator strategy and a selector, erroring if it can't be found\n\n**`See`**\n\n[https://w3c.github.io/webdriver/#find-element](https://w3c.github.io/webdriver/#find-element)\n\n<!-- comment source: method-signature -->\n\n#### Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `using` | `any` | the locator strategy |\n| `value` | `any` | the selector to combine with the strategy to find the specific element |\n\n#### Response\n\n`any`\n\nThe element object encoding the element id which can be used in element-related\ncommands\n```\n\n----------------------------------------\n\nTITLE: Initializing Appium Extension for Documentation\nDESCRIPTION: Command to prepare an Appium extension for generating documentation by creating necessary configuration files.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/zh/developing/build-docs.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx appium-docs init\n```\n\n----------------------------------------\n\nTITLE: Adding Doctor Check to package.json Manifest\nDESCRIPTION: Example of how to add a specific Doctor Check file to the package.json manifest. This allows Appium to recognize and use the check when running diagnostics.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/zh/developing/build-doctor-checks.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"appium\": {\n    \"doctor\": {\n      \"checks\": [\n        \"./doctor/android-home-check.js\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Multiple Settings via Capabilities in Appium\nDESCRIPTION: Example demonstrating how to set multiple settings simultaneously using the appium:settings capability in Appium 2.1 and later. Shows configuration of both ignoreUnimportantViews and allowInvisibleElements settings.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/zh/guides/settings.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"appium:settings\": {\n        \"ignoreUnimportantViews\": true,\n        \"allowInvisibleElements\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Appium Storage Plugin via CLI\nDESCRIPTION: Command to install the storage plugin using Appium's plugin manager.\nSOURCE: https://github.com/appium/appium/blob/master/packages/storage-plugin/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nappium plugin install storage\n```\n\n----------------------------------------\n\nTITLE: Updating Local Driver or Plugin (Bash)\nDESCRIPTION: Commands to update a locally installed driver or plugin by pulling the latest changes and rebuilding.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/zh/guides/branch-testing.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit pull && npm i\n```\n\n----------------------------------------\n\nTITLE: Checking for Driver Updates in Appium 2.x\nDESCRIPTION: This command lists available updates for Appium drivers using the CLI.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/ja/guides/migrating-1-to-2.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nappium driver list --updates\n```\n\n----------------------------------------\n\nTITLE: Implementing a WebDriver Command in an Appium Driver\nDESCRIPTION: Demonstrates how to implement a specific WebDriver protocol command ('Navigate To') by defining an async method in the driver class. The method name 'setUrl' corresponds to the WebDriver protocol command as defined in Appium's routes mapping.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/intro/drivers.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nasync setUrl(url) {\n    // do whatever we want here\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Deploying Appium Documentation\nDESCRIPTION: Various commands for building and deploying documentation, including local development server and versioned deployment options\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/developing/build-docs.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Generate reference and build the mkdocs site into the site dir\nnpx appium-docs build\n\n# Same as build, but host the docs on a local dev server\n# and watch for changes and rebuild when files change\nnpx appium-docs build --serve\n\n# Build the docs and deploy them with mike versioning to the docs-site branch\n# using the included commit message.\n# This is particularly useful for pushing content to a GitHub pages branch!\nnpx appium-docs build \\\n  --deploy \\\n  -b docs-site \\\n  -m 'docs: auto-build docs for appium-xcuitest-driver@%s'\n```\n\n----------------------------------------\n\nTITLE: Configuring Doctor Checks in package.json for Appium Extension\nDESCRIPTION: Example of how to list Doctor Checks in the package.json manifest under the appium.doctor.checks section. This configuration allows Appium to pick up the checks after the extension is installed.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/zh/developing/build-doctor-checks.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"appium\": {\n    \"driverName\": \"fake\",\n    \"automationName\": \"Fake\",\n    \"platformNames\": [\n      \"Fake\"\n    ],\n    \"mainClass\": \"FakeDriver\",\n    \"schema\": \"./build/lib/fake-driver-schema.js\",\n    \"scripts\": {\n      \"fake-error\": \"./build/lib/scripts/fake-error.js\",\n      \"fake-success\": \"./build/lib/scripts/fake-success.js\",\n      \"fake-stdin\": \"./build/lib/scripts/fake-stdin.js\"\n    },\n    \"doctor\": {\n      \"checks\": [\n        \"./doctor/fake1.js\",\n        \"./doctor/fake2.js\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Logging with Unwrap Example\nDESCRIPTION: Demonstrates how to access the underlying npmlog object for advanced logging functionality like retrieving log records.\nSOURCE: https://github.com/appium/appium/blob/master/packages/support/README.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {logging} from 'appium/support';\nlet log = logging.getLogger('mymodule');\n\nlog.info('hi!');\n\nlet npmlogger = log.unwrap();\n\n// any `npmlog` methods\nlet logs = npmlogger.record;\n// logs === [ { id: 0, level: 'info', prefix: 'mymodule', message: 'hi!', messageRaw: [ 'hi!' ] }]\n```\n\n----------------------------------------\n\nTITLE: Enabling Multiple Security Features in Appium\nDESCRIPTION: Command to start Appium server with multiple insecure features enabled, specifically get_server_logs and record_audio.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/guides/security.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nappium --allow-insecure=get_server_logs,record_audio\n```\n\n----------------------------------------\n\nTITLE: Installing Appium CLI Commands\nDESCRIPTION: Commands to uninstall existing Appium version and install the latest version globally using npm.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/guides/branch-testing.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall appium\nnpm install -g appium\n```\n\n----------------------------------------\n\nTITLE: Advanced Log Line Truncation\nDESCRIPTION: Configuration using regex capture group to truncate all log lines to maximum 15 characters\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/zh/guides/log-filters.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n\t{\n        \"pattern\": \"(.{1,15}).*\",\n        \"flags\": \"s\",\n        \"replacer\": \"$1\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Driver Scripts in package.json\nDESCRIPTION: Example of how to define custom driver scripts that can be executed outside of a session context.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/developing/build-drivers.md#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"scripts\": {\n        \"prebuild\": \"./scripts/driver-prebuild.js\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Pattern Replacement Rules\nDESCRIPTION: Configuration with multiple regex patterns to match and replace different text patterns with custom replacer\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/zh/guides/log-filters.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"pattern\": \"my\\\\.magic\\\\.\\\\w+\",\n        \"flags\": \"i\",\n        \"replacer\": \"***\"\n    },\n    {\n        \"pattern\": \"your\\\\.magic\",\n        \"flags\": \"i\",\n        \"replacer\": \"***\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Doctor Checks in package.json for Appium Extension\nDESCRIPTION: Example of how to list Doctor Checks in the package.json manifest under the appium.doctor.checks section. This configuration allows Appium to properly recognize and use the checks after the extension is installed.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/developing/build-doctor-checks.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"appium\": {\n    \"driverName\": \"fake\",\n    \"automationName\": \"Fake\",\n    \"platformNames\": [\n      \"Fake\"\n    ],\n    \"mainClass\": \"FakeDriver\",\n    \"schema\": \"./build/lib/fake-driver-schema.js\",\n    \"scripts\": {\n      \"fake-error\": \"./build/lib/scripts/fake-error.js\",\n      \"fake-success\": \"./build/lib/scripts/fake-success.js\",\n      \"fake-stdin\": \"./build/lib/scripts/fake-stdin.js\"\n    },\n    \"doctor\": {\n      \"checks\": [\n        \"./doctor/fake1.js\",\n        \"./doctor/fake2.js\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Extension Properties in JSON\nDESCRIPTION: Example configuration file structure showing how extension properties are organized under the server namespace with extension type and name hierarchy.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/developing/config-system.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"server\": {\n    \"driver\": {\n      \"fake\": {\n        \"foo\": \"bar\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Log Line Truncation in Appium\nDESCRIPTION: Advanced configuration using regex capturing groups to truncate all log lines to a maximum of 15 characters.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/guides/log-filters.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n\t{\n        \"pattern\": \"(.{1,15}).*\",\n        \"flags\": \"s\",\n        \"replacer\": \"$1\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: 运行Appium Doctor命令检查uiautomator2驱动程序\nDESCRIPTION: 使用Appium Doctor命令行工具验证uiautomator2驱动程序的设置和环境。该命令会检查所有先决条件和其他环境详细信息是否正确配置。\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/zh/ecosystem/tools.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nappium driver doctor uiautomator2\n```\n\n----------------------------------------\n\nTITLE: Uninstalling and Installing Latest Appium Version (Bash)\nDESCRIPTION: Commands to ensure the latest version of Appium is installed by uninstalling the current version and installing the latest one globally.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/zh/guides/branch-testing.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall appium && npm install -g appium\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Scripts in JSON\nDESCRIPTION: This JSON snippet shows how to define custom scripts for an Appium plugin in the extension metadata. It specifies a 'prebuild' script that can be executed using the 'appium plugin run' command.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/developing/build-plugins.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"scripts\": {\n        \"prebuild\": \"./scripts/plugin-prebuild.js\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying BrowserStack Logo in Markdown\nDESCRIPTION: This snippet uses HTML within Markdown to display the BrowserStack logo with dark and light mode support. It includes a link to BrowserStack's Appium page and uses the picture element for responsive image selection.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/README.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n<p align=\"center\">\n  <a href=\"https://www.browserstack.com/browserstack-appium?utm_campaigncode=701OW00000AoUTQYA3&utm_medium=partnered&utm_source=appium\">\n    <picture>\n      <source srcset=\"packages/appium/docs/overrides/assets/images/sponsor-logo-browserstack-dark.png\" media=\"(prefers-color-scheme: dark)\"/>\n      <source srcset=\"packages/appium/docs/overrides/assets/images/sponsor-logo-browserstack-light.png\" media=\"(prefers-color-scheme: light)\"/>\n      <img src=\"packages/appium/docs/overrides/assets/images/sponsor-logo-browserstack-dark.png\" width=\"300\" alt=\"Browserstack\"/>\n    </picture>\n  </a>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Displaying Bronze Sponsors Section in HTML\nDESCRIPTION: This HTML snippet shows how to create a section for bronze sponsors, including links to their websites and displaying their logos.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/sponsors.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"sponsor-section\">\n  <a href=\"https://magicpod.com/\" target=\"_blank\"><img src=\"https://images.opencollective.com/magicpod/722b7e4/avatar/64.png\" alt=\"MagicPod\" /></a>\n  <a href=\"https://route4me.com/\" target=\"_blank\"><img src=\"../assets/images/sponsor-logo-route4me.png\" alt=\"Route Planning and Route Mapping\" /></a>\n  <a href=\"https://webdriver.io/\" target=\"_blank\"><img src=\"https://images.opencollective.com/webdriverio/bbdd6c3/logo/64.png\" alt=\"WebdriverIO\" /></a>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Loading Appium Schema from JSON File\nDESCRIPTION: Example demonstrating how to import the schema directly from the JSON schema file.\nSOURCE: https://github.com/appium/appium/blob/master/packages/schema/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = require('@appium/schema/lib/appium-config.schema.json');\n```\n\n----------------------------------------\n\nTITLE: Managing Appium Plugins via Command Line\nDESCRIPTION: Shows the command for managing Appium plugins, which allows installation, updating, and removal of plugin extensions.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/cli/index.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nappium plugin\n```\n\n----------------------------------------\n\nTITLE: Running the Ruby Appium Test\nDESCRIPTION: Command to execute the Ruby test script using Bundler, ensuring all dependencies are properly loaded.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/quickstart/test-rb.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Please run \"bundle install\" first if your environment has not run the installation command yet.\nbundle exec ruby test.rb\n```\n\n----------------------------------------\n\nTITLE: Configuring Peer Dependencies for Appium Drivers/Plugins\nDESCRIPTION: Shows how to configure the peerDependencies section in package.json to use Appium's built-in support utilities.\nSOURCE: https://github.com/appium/appium/blob/master/packages/support/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n  \"peerDependencies\": {\n    \"appium\": \"^<minimum_server_version>\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Displaying Strategic Partner Logo with Dark/Light Mode Support in HTML\nDESCRIPTION: This HTML snippet shows how to display a sponsor logo (BrowserStack) with support for dark and light color schemes using the <picture> element.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/sponsors.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://www.browserstack.com/browserstack-appium?utm_campaigncode=701OW00000AoUTQYA3&utm_medium=partnered&utm_source=appium\">\n  <picture>\n    <source srcset=\"../assets/images/sponsor-logo-browserstack-dark.png\" media=\"(prefers-color-scheme: dark)\"/>\n    <source srcset=\"../assets/images/sponsor-logo-browserstack-light.png\" media=\"(prefers-color-scheme: light)\"/>\n    <img src=\"../assets/images/sponsor-logo-browserstack-dark.png\" width=\"250\" alt=\"Browserstack\"/>\n  </picture>\n</a>\n```\n\n----------------------------------------\n\nTITLE: Browserstack Logo Display HTML Markup\nDESCRIPTION: HTML code block for displaying the BrowserStack logo with dark/light mode support using picture element and media queries.\nSOURCE: https://github.com/appium/appium/blob/master/README.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<p align=\"center\">\n  <a href=\"https://www.browserstack.com/browserstack-appium?utm_campaigncode=701OW00000AoUTQYA3&utm_medium=partnered&utm_source=appium\">\n    <picture>\n      <source srcset=\"packages/appium/docs/overrides/assets/images/sponsor-logo-browserstack-dark.png\" media=\"(prefers-color-scheme: dark)\"/>\n      <source srcset=\"packages/appium/docs/overrides/assets/images/sponsor-logo-browserstack-light.png\" media=\"(prefers-color-scheme: light)\"/>\n      <img src=\"packages/appium/docs/overrides/assets/images/sponsor-logo-browserstack-dark.png\" width=\"300\" alt=\"Browserstack\"/>\n    </picture>\n  </a>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Installing Appium Documentation Utilities with NPM\nDESCRIPTION: Command to install the @appium/docutils package as a development dependency\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/developing/build-docs.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @appium/docutils\n```\n\n----------------------------------------\n\nTITLE: Installing @appium/logger via npm\nDESCRIPTION: This snippet shows how to install the @appium/logger package using npm. It's a prerequisite step for using the logger in your project.\nSOURCE: https://github.com/appium/appium/blob/master/packages/logger/README.md#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpm install @appium/logger --save\n```\n\n----------------------------------------\n\nTITLE: Importing Appium Schema as JS Object\nDESCRIPTION: Example showing how to import the schema as a JavaScript object using require statement.\nSOURCE: https://github.com/appium/appium/blob/master/packages/schema/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { AppiumConfigJsonSchema } = require('@appium/schema');\n```\n\n----------------------------------------\n\nTITLE: Installing Appium Schema Package\nDESCRIPTION: Command to install the @appium/schema package via npm package manager.\nSOURCE: https://github.com/appium/appium/blob/master/packages/schema/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @appium/schema\n```\n\n----------------------------------------\n\nTITLE: Styling Sponsor Section in HTML/CSS\nDESCRIPTION: This snippet contains CSS styles for the sponsor section of the page. It hides certain elements and sets the height and padding for sponsor images.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/sponsors.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<style>\n  .appium-sponsor-thanks { display: none; }\n  .sponsor-section img { height: 64px; padding-right: 1em; }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Markdown Structure for Appium Quickstart Guide\nDESCRIPTION: Markdown content defining the structure and navigation for the Appium quickstart documentation page, including TOC hiding and title definition.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/quickstart/index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nhide:\n  - toc\n\ntitle: Quickstart Intro\n---\n```\n\n----------------------------------------\n\nTITLE: Installing Appium Documentation Utilities\nDESCRIPTION: Command to install the @appium/docutils package as a development dependency using npm.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/zh/developing/build-docs.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @appium/docutils\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration Example\nDESCRIPTION: Example of using TypeScript type checking with Appium configuration in a JavaScript file using JSDoc annotations.\nSOURCE: https://github.com/appium/appium/blob/master/packages/schema/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// @ts-check\n/** @type {import('@appium/types').AppiumConfig} */\nmodule.exports = {\n  server: {\n    port: 1234,\n    host: '127.0.0.1'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building English Documentation for Appium\nDESCRIPTION: Command to build the English documentation for the main Appium project from within the packages/appium directory.\nSOURCE: https://github.com/appium/appium/blob/master/packages/docutils/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev:docs:en\n```\n\n----------------------------------------\n\nTITLE: Basic Text Replacement in Appium Logs\nDESCRIPTION: Simple configuration to replace all occurrences of a specific string with the default **SECURE** replacer\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/zh/guides/log-filters.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"text\": \"my.magic.app\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Sponsor Section with Dark/Light Mode Images in HTML\nDESCRIPTION: This HTML snippet creates a centered sponsor section with BrowserStack logo images for both dark and light modes.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/index.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div style=\"text-align: center; margin-top: 2rem; font-style: italic;\">\n  Appium is extremely grateful for the support of its key partners! (Learn more about our\n  sponsorship program and contributor compensation scheme <a\n  href=\"https://github.com/appium/appium/blob/master/GOVERNANCE.md#sponsorship\">here</a>)\n  <div class=\"homepageSponsors\">\n    <div class=\"homepageSponsor\">\n      <a href=\"https://www.browserstack.com/browserstack-appium?utm_campaigncode=701OW00000AoUTQYA3&utm_medium=partnered&utm_source=appium\">\n        <img src=\"assets/images/sponsor-logo-browserstack-dark.png#only-dark\" style=\"width: 220px;\" />\n        <img src=\"assets/images/sponsor-logo-browserstack-light.png#only-light\" style=\"width: 220px;\" />\n      </a>\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Page Metadata and Hiding Navigation in Markdown\nDESCRIPTION: This code snippet sets the page title and hides navigation and table of contents using YAML front matter in Markdown.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nhide:\n  - navigation\n  - toc\n\ntitle: Welcome\n---\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum Node.js Version in JavaScript\nDESCRIPTION: Sets the minimum required Node.js version for Appium to v14.17.0.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nchore!: set engines to minimum Node.js v14.17.0 ([a1dbe6c](https://github.com/appium/appium/commit/a1dbe6c43efe76604943a607d402f4c8b864d652))\n```\n\n----------------------------------------\n\nTITLE: Removing Local Driver or Plugin Source (Bash)\nDESCRIPTION: Command to remove the local source folder of a driver or plugin after switching back to a stable release.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/zh/guides/branch-testing.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf <full_path_to_plugin_or_driver_folder_with_fetched_sources>\n```\n\n----------------------------------------\n\nTITLE: Complete Renovate Configuration Example\nDESCRIPTION: Demonstrates a complete Renovate configuration file that extends Appium's base configuration.\nSOURCE: https://github.com/appium/appium/blob/master/renovate/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": [\n    \"github>appium/appium//renovate/default\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Cleanup Commands for Local Testing\nDESCRIPTION: Commands to uninstall a driver/plugin and remove local source files when switching back to stable release.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/guides/branch-testing.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nappium driver uninstall <driver_name>\nrm -rf <full_path_to_plugin_or_driver_folder_with_fetched_sources>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Log Types in Appium Base Driver (Deprecated)\nDESCRIPTION: Gets available log types as a list of strings. This endpoint is deprecated.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/commands/base-driver.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nGET /session/:sessionId/log/types\n```\n\n----------------------------------------\n\nTITLE: Implementing Schema Migrations in JavaScript\nDESCRIPTION: Adds implementation for schema migrations in the Appium project.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n**appium:** implement schema migrations ([13df5c7](https://github.com/appium/appium/commit/13df5c74e0ef1acae46d2ef821ed01d9118eab05))\n```\n\n----------------------------------------\n\nTITLE: Updating Dependency Version in JavaScript\nDESCRIPTION: Updates the version of the 'ajv' dependency to v8.11.2 in the Appium project.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n**appium:** update dependency ajv to v8.11.2 ([5a794ce](https://github.com/appium/appium/commit/5a794ce1b61e433e568964551c805aa9c82af3ca))\n```\n\n----------------------------------------\n\nTITLE: Appium Version 2.11.0 Release Notes\nDESCRIPTION: Release notes documenting new features and bug fixes in version 2.11.0.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## [2.11.0](https://github.com/appium/appium/compare/appium@2.10.3...appium@2.11.0) (2024-06-27)\n\n### Features\n* **appium:** Improve context logging ([#20250](https://github.com/appium/appium/issues/20250)) ([f675abc](https://github.com/appium/appium/commit/f675abc27b3e6beac2431cc71afb5fc2c2f70534))\n* **appium:** show extension update info message for newer major versions ([#20283](https://github.com/appium/appium/issues/20283)) ([f2c8b69](https://github.com/appium/appium/commit/f2c8b696085ba862553476f23509cac0674a447c))\n* **appium:** show spinner during extension uninstall ([#20282](https://github.com/appium/appium/issues/20282)) ([f250793](https://github.com/appium/appium/commit/f25079354bfd646810813ae47244a1e2e962dbfb))\n```\n\n----------------------------------------\n\nTITLE: Change Log Entry with Feature Addition\nDESCRIPTION: Changelog entry documenting the addition of custom BiDi command functionality and event emission support for plugins.\nSOURCE: https://github.com/appium/appium/blob/master/packages/base-plugin/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n* **appium,base-driver,base-plugin:** allow plugins to define custom bidi commands and emit bidi events ([#20876](https://github.com/appium/appium/issues/20876)) ([8df1c21](https://github.com/appium/appium/commit/8df1c217a15d30300c04b9f59cdbdffa70325828))\n```\n\n----------------------------------------\n\nTITLE: Bug Fix Commit References\nDESCRIPTION: Markdown formatted commit references for bug fixes including handling of delete sessions, W3C capabilities compliance, and security updates\nSOURCE: https://github.com/appium/appium/blob/master/packages/base-driver/CHANGELOG.md#2025-04-22_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n([7b3893a](https://github.com/appium/appium/commit/7b3893a36202018de7c2124c2028bfbbd8a9d7fd))\n```\n\n----------------------------------------\n\nTITLE: Bug Fix for Plugin Command Types\nDESCRIPTION: Fix to update PluginCommand and DriverCommand types in base-driver, base-plugin and types packages.\nSOURCE: https://github.com/appium/appium/blob/master/packages/base-plugin/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n0dcd5fa371af523c6527e55de4cff6cd472fde22\n```\n\n----------------------------------------\n\nTITLE: Installing @appium/types Package via npm\nDESCRIPTION: This command installs the @appium/types package as a development dependency using npm. It's used to add TypeScript type declarations for Appium to a project.\nSOURCE: https://github.com/appium/appium/blob/master/packages/types/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @appium/types -D\n```\n\n----------------------------------------\n\nTITLE: Appium Version 2.11.1 Release Notes\nDESCRIPTION: Release notes documenting bug fixes and dependency updates in version 2.11.1.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [2.11.1](https://github.com/appium/appium/compare/appium@2.11.0...appium@2.11.1) (2024-06-28)\n\n### Bug Fixes\n* **images-plugin:** update dependency lru-cache to v10.3.0 ([#20306](https://github.com/appium/appium/issues/20306)) ([e43c7a4](https://github.com/appium/appium/commit/e43c7a4dce1f50fbd4d028cbeac5677422210b20))\n```\n\n----------------------------------------\n\nTITLE: Manifest Migration Schema Version Declaration\nDESCRIPTION: Declaration of schema revision constant used in manifest migrations system to identify version numbers.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/types/manifest/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst SCHEMA_REV_<new-version> = <new-version>\n```\n\n----------------------------------------\n\nTITLE: Creating Empty Storage Item in TypeScript\nDESCRIPTION: Demonstrates how to create a new storage item with a unique name and specified type but without initial content.\nSOURCE: https://github.com/appium/appium/blob/master/packages/strongbox/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst item = await box.createItem<string>('my unique name');\n```\n\n----------------------------------------\n\nTITLE: Linking to Sponsors and Backers Documentation in Markdown\nDESCRIPTION: This markdown snippet provides a link to the official Appium documentation page for sponsors and backers information.\nSOURCE: https://github.com/appium/appium/blob/master/SPONSORS.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Sponsors & Backers\n\nPlease check [Sponsors & Backers](https://appium.io/docs/en/latest/sponsors/)\n```\n\n----------------------------------------\n\nTITLE: Version History Entry with Git Commit Links\nDESCRIPTION: A release entry showing bug fixes and dependency updates with associated git commit links\nSOURCE: https://github.com/appium/appium/blob/master/packages/docutils/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n* **docutils:** fix typescript version ([6b8eb2c](https://github.com/appium/appium/commit/6b8eb2cbfec39185d8b81e2f4e2ce3f646ffd65f))\n* **docutils:** update dependency typedoc to v0.23.25 ([a4c58cc](https://github.com/appium/appium/commit/a4c58cc5618a9c83de4c044bf8bc59f1ddb80122))\n* **docutils:** update dependency yargs to v17.7.0 ([70d65b7](https://github.com/appium/appium/commit/70d65b7d6230dd415f26aaba6d097a3cbe876b47))\n```\n\n----------------------------------------\n\nTITLE: Installing @appium/tsconfig and Appium using npm\nDESCRIPTION: This code snippet demonstrates how to install the @appium/tsconfig package along with Appium as a development dependency using npm. Appium is required as a peer dependency for this package.\nSOURCE: https://github.com/appium/appium/blob/master/packages/tsconfig/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install appium @appium/tsconfig -D\n```\n\n----------------------------------------\n\nTITLE: Documenting Feature Updates in Markdown\nDESCRIPTION: A changelog entry showing feature additions to the plugin, specifically the ability to define custom bidi commands and emit bidi events.\nSOURCE: https://github.com/appium/appium/blob/master/packages/fake-plugin/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n* **appium,base-driver,base-plugin:** allow plugins to define custom bidi commands and emit bidi events ([#20876](https://github.com/appium/appium/issues/20876)) ([8df1c21](https://github.com/appium/appium/commit/8df1c217a15d30300c04b9f59cdbdffa70325828))\n```\n\n----------------------------------------\n\nTITLE: Displaying Commit Hash for Major Version in Markdown\nDESCRIPTION: Shows the commit hash for version 3.0.0 using a markdown link.\nSOURCE: https://github.com/appium/appium/blob/master/packages/fake-driver/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# [3.0.0](https://github.com/appium/appium/compare/@appium/fake-driver@2.2.0...@appium/fake-driver@3.0.0) (2021-08-16)\n```\n\n----------------------------------------\n\nTITLE: Adding PowerShell Unzip Support in Windows\nDESCRIPTION: Adds functionality to use PowerShell for unzipping files on Windows systems.\nSOURCE: https://github.com/appium/appium/blob/master/packages/support/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- Add a possibility to use PowerShell to unzip files in Windows (from appium-support[#227](https://github.com/appium/appium/issues/227)) ([#15882](https://github.com/appium/appium/issues/15882)) ([1383366](https://github.com/appium/appium/commit/1383366899f03219ae68ed07e517ac8aee672d59))\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Issue in Markdown\nDESCRIPTION: Links to a GitHub issue using markdown syntax within a commit message.\nSOURCE: https://github.com/appium/appium/blob/master/packages/fake-driver/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- **fake-driver:** copy non-JS files into build dir at transpile time; closes [#15471](https://github.com/appium/appium/issues/15471) ([950372c](https://github.com/appium/appium/commit/950372c1bdf556463eac285999eba482682666db))\n```\n\n----------------------------------------\n\nTITLE: Feature List in Markdown\nDESCRIPTION: Markdown bullet points listing new features and enhancements added to the package.\nSOURCE: https://github.com/appium/appium/blob/master/packages/types/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n* Add /appium/extensions API to list available extensions ([#20931](https://github.com/appium/appium/issues/20931))\n* Add BiDi commands to the listCommands API output ([#20925](https://github.com/appium/appium/issues/20925))\n```\n\n----------------------------------------\n\nTITLE: Preferring System Unzip in extractAllTo Function\nDESCRIPTION: Changes the extractAllTo function to prefer using the system unzip utility.\nSOURCE: https://github.com/appium/appium/blob/master/packages/support/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- **support): extractAllTo(:** prefer system unzip ([2955c17](https://github.com/appium/appium/commit/2955c172b1307f7c0fd1f60da2bd75a952fd1292))\n```\n\n----------------------------------------\n\nTITLE: Displaying Beta Version in Markdown\nDESCRIPTION: Shows the beta version 2.0.0-beta and its release date.\nSOURCE: https://github.com/appium/appium/blob/master/packages/fake-driver/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n# 2.0.0-beta (2021-08-13)\n```\n\n----------------------------------------\n\nTITLE: Index File Type Import Statement\nDESCRIPTION: Import statement for including versioned manifest types in the index file.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/types/manifest/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as ManifestV<new-version> from './v<new-version>'\n```\n\n----------------------------------------\n\nTITLE: Package Version Comparison URLs\nDESCRIPTION: GitHub compare URLs showing differences between package versions\nSOURCE: https://github.com/appium/appium/blob/master/packages/execute-driver-plugin/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[4.0.4](https://github.com/appium/appium/compare/@appium/execute-driver-plugin@4.0.3...@appium/execute-driver-plugin@4.0.4)\n```\n\n----------------------------------------\n\nTITLE: Changelog Markdown Headers and Links\nDESCRIPTION: Markdown formatting for changelog headers, links to conventional commits guidance, and version comparison links.\nSOURCE: https://github.com/appium/appium/blob/master/packages/images-plugin/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Change Log\n\nAll notable changes to this project will be documented in this file.\nSee [Conventional Commits](https://conventionalcommits.org) for commit guidelines.\n\n## [3.1.1](https://github.com/appium/appium/compare/@appium/images-plugin@3.1.0...@appium/images-plugin@3.1.1) (2025-03-17)\n```\n\n----------------------------------------\n\nTITLE: Styling H1 and Custom Class in HTML\nDESCRIPTION: This CSS snippet hides the H1 element and a custom class 'appium-sponsor-thanks' on the page.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/index.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<style>\n  .md-typeset h1,\n  .appium-sponsor-thanks {\n    display: none;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Version History Documentation in Markdown\nDESCRIPTION: Changelog entries documenting version updates, breaking changes, and bug fixes for the ESLint TypeScript configuration package\nSOURCE: https://github.com/appium/appium/blob/master/packages/eslint-config-appium-ts/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Change Log\n\nAll notable changes to this project will be documented in this file.\nSee [Conventional Commits](https://conventionalcommits.org) for commit guidelines.\n\n## [1.0.3](https://github.com/appium/appium/compare/@appium/eslint-config-appium-ts@1.0.2...@appium/eslint-config-appium-ts@1.0.3) (2025-02-19)\n\n**Note:** Version bump only for package @appium/eslint-config-appium-ts\n\n\n\n\n\n## [1.0.2](https://github.com/appium/appium/compare/@appium/eslint-config-appium-ts@1.0.1...@appium/eslint-config-appium-ts@1.0.2) (2025-01-08)\n\n\n### Bug Fixes\n\n* **eslint-config-appium-ts:** add Prettier config, update typescript-eslint imports ([#20887](https://github.com/appium/appium/issues/20887)) ([aad5709](https://github.com/appium/appium/commit/aad57099135a02907b0cd03617c52d7baf248a26))\n\n\n\n## [1.0.1](https://github.com/appium/appium/compare/@appium/eslint-config-appium-ts@0.3.3...@appium/eslint-config-appium-ts@1.0.1) (2025-01-02)\n\n**Note:** Version bump only for package @appium/eslint-config-appium-ts\n```\n\n----------------------------------------\n\nTITLE: Retrieving Logs in Appium Base Driver (Deprecated)\nDESCRIPTION: Gets the log for a given log type. This endpoint is deprecated.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/commands/base-driver.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nPOST /session/:sessionId/log\n```\n\n----------------------------------------\n\nTITLE: Nested Header Section\nDESCRIPTION: Markdown header syntax for grouping changelog items\nSOURCE: https://github.com/appium/appium/blob/master/packages/driver-test-support/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n```\n\n----------------------------------------\n\nTITLE: Basic Renovate Configuration Extension\nDESCRIPTION: Shows how to extend the base Renovate configuration from Appium's repository.\nSOURCE: https://github.com/appium/appium/blob/master/renovate/README.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"github>appium/appium//renovate/default\"\n```\n\n----------------------------------------\n\nTITLE: Installing ESLint Config Package\nDESCRIPTION: Command to install the @appium/eslint-config-appium-ts package using npm v8 or newer as a development dependency.\nSOURCE: https://github.com/appium/appium/blob/master/packages/eslint-config-appium-ts/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @appium/eslint-config-appium-ts --save-dev\n```\n\n----------------------------------------\n\nTITLE: Specifying Appium Documentation Dependencies\nDESCRIPTION: This snippet lists the Python packages and their versions needed to build and manage Appium's documentation. It includes MkDocs, Material theme, and plugins for Git revision dates and redirects, as well as Mike for versioning.\nSOURCE: https://github.com/appium/appium/blob/master/packages/docutils/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmkdocs==1.6.1\nmkdocs-git-revision-date-localized-plugin==1.4.5\nmkdocs-material==9.6.12\nmkdocs-redirects==1.2.2\nmike==2.1.3\n```\n\n----------------------------------------\n\nTITLE: Bug Fixes in Markdown\nDESCRIPTION: Markdown bullet points documenting bug fixes and dependency updates.\nSOURCE: https://github.com/appium/appium/blob/master/packages/types/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n* **deps:** update definitelytyped ([#20928](https://github.com/appium/appium/issues/20928))\n* **types:** update dependency type-fest to v4.32.0 ([#20900](https://github.com/appium/appium/issues/20900))\n```\n\n----------------------------------------\n\nTITLE: Version Links and Changes\nDESCRIPTION: Example version entry showing version comparison links and change descriptions\nSOURCE: https://github.com/appium/appium/blob/master/packages/docutils/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## [1.0.34](https://github.com/appium/appium/compare/@appium/docutils@1.0.33...@appium/docutils@1.0.34) (2025-03-17)\n\n**Note:** Version bump only for package @appium/docutils\n```\n\n----------------------------------------\n\nTITLE: Version Reference Link in Changelog\nDESCRIPTION: Markdown link syntax for comparing changes between versions\nSOURCE: https://github.com/appium/appium/blob/master/packages/driver-test-support/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [0.4.17](https://github.com/appium/appium/compare/@appium/driver-test-support@0.4.16...@appium/driver-test-support@0.4.17)\n```\n\n----------------------------------------\n\nTITLE: Version Release Entry with Changes\nDESCRIPTION: A version release entry showing version number, comparison link and associated changes\nSOURCE: https://github.com/appium/appium/blob/master/packages/docutils/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## [0.2.1](https://github.com/appium/appium/compare/@appium/docutils@0.2.0...@appium/docutils@0.2.1) (2023-02-09)\n\n### Bug Fixes\n\n* **docutils:** fix bad offset in nav updates ([ab366f3](https://github.com/appium/appium/commit/ab366f3a1f9109f7bd75ae5ac32b862d5e6dd1bf))\n* **docutils:** fix bad option name and ignore most falsy args ([5446e5c](https://github.com/appium/appium/commit/5446e5c7a755be081f46f1ed1ca8c13665d9a772))\n```\n\n----------------------------------------\n\nTITLE: Type-Fest Dependency Version\nDESCRIPTION: Dependency update specifying new version of type-fest package\nSOURCE: https://github.com/appium/appium/blob/master/packages/base-driver/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"type-fest\": \"v3.7.2\"\n```\n\n----------------------------------------\n\nTITLE: Breaking Changes - findElOrEls Type Definition\nDESCRIPTION: Breaking changes to type definitions for findElOrEls and findElOrElsWithProcessing in ExternalDriver interface, replacing conditional types with function overloads.\nSOURCE: https://github.com/appium/appium/blob/master/packages/types/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/* Changes affect:\n- findElOrEls return type\n- findElOrElsWithProcessing in ExternalDriver\n- StringRecord type for Constraints to Capabilities conversion */\n```\n\n----------------------------------------\n\nTITLE: Displaying Version History in Markdown\nDESCRIPTION: A changelog entry formatted in Markdown showing version updates and changes for the @appium/fake-plugin package, including links to compare changes between versions.\nSOURCE: https://github.com/appium/appium/blob/master/packages/fake-plugin/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [3.2.5](https://github.com/appium/appium/compare/@appium/fake-plugin@3.2.4...@appium/fake-plugin@3.2.5) (2025-03-17)\n\n**Note:** Version bump only for package @appium/fake-plugin\n```\n\n----------------------------------------\n\nTITLE: Bug Fix Entry Format\nDESCRIPTION: Shows the format used for recording bug fixes in the changelog with issue number and commit hash\nSOURCE: https://github.com/appium/appium/blob/master/packages/opencv/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n* Reduce linter warnings ([#20860](https://github.com/appium/appium/issues/20860)) ([65658cc](https://github.com/appium/appium/commit/65658ccbdde9144c45cb5aad6a9089a5d6f3a0a3))\n```\n\n----------------------------------------\n\nTITLE: Base Driver Package Version References\nDESCRIPTION: Version references and commit hashes showing changes between releases 8.2.3 to 8.0.0-beta.7\nSOURCE: https://github.com/appium/appium/blob/master/packages/base-driver/CHANGELOG.md#2025-04-22_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n[8.2.3](https://github.com/appium/appium/compare/@appium/base-driver@8.2.2...@appium/base-driver@8.2.3)\n```\n\n----------------------------------------\n\nTITLE: Sample Version Header in Changelog\nDESCRIPTION: Shows the format used for version entries in the changelog with version number, comparison link and date\nSOURCE: https://github.com/appium/appium/blob/master/packages/opencv/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [3.0.8](https://github.com/appium/appium/compare/@appium/opencv@3.0.7...@appium/opencv@3.0.8) (2025-02-19)\n```\n\n----------------------------------------\n\nTITLE: Defining Markdown Header\nDESCRIPTION: Simple markdown header defining the blog section of the Appium project.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/blog/index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Appium Blog\n```\n\n----------------------------------------\n\nTITLE: Generating Markdown Changelog for @appium/docutils\nDESCRIPTION: This code snippet represents a markdown-formatted changelog entry for version 1.0.19 of the @appium/docutils package. It lists bug fixes and dependency updates.\nSOURCE: https://github.com/appium/appium/blob/master/packages/docutils/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## [1.0.19](https://github.com/appium/appium/compare/@appium/docutils@1.0.18...@appium/docutils@1.0.19) (2024-08-07)\n\n\n### Bug Fixes\n\n* **docutils:** update dependency typescript to v5.5.4 ([e08e7eb](https://github.com/appium/appium/commit/e08e7ebec24866611e0718f0d038e9566abd3dd6))\n* **docutils:** update dependency yaml to v2.5.0 ([0c755f5](https://github.com/appium/appium/commit/0c755f503c49e459315616e51be0c0776089b2bb))\n* **support:** update dependency semver to v7.6.3 ([5a9ab97](https://github.com/appium/appium/commit/5a9ab9792402e31d3903fb1a3b08329a67b6a2a2))\n* **types:** update dependency type-fest to v4.22.0 ([#20387](https://github.com/appium/appium/issues/20387)) ([47405dd](https://github.com/appium/appium/commit/47405dda8a5de17c72fb721b0c043e0dd4f6b35a))\n* **types:** update dependency type-fest to v4.23.0 ([#20396](https://github.com/appium/appium/issues/20396)) ([0e8e3c7](https://github.com/appium/appium/commit/0e8e3c71441d02d22f015f08df5223909f5fbb93))\n```\n\n----------------------------------------\n\nTITLE: Displaying Git Commit Hash in Markdown\nDESCRIPTION: Shows the Git commit hash for a bug fix in the execute-driver-plugin. This is used to reference the specific commit that addressed the issue of upgrading webdriverio.\nSOURCE: https://github.com/appium/appium/blob/master/packages/execute-driver-plugin/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n([15439c2](https://github.com/appium/appium/commit/15439c2ae7ab3e24b884fe87e89a9a8c16620f3a))\n```\n\n----------------------------------------\n\nTITLE: Creating Documentation Navigation Grid in Markdown\nDESCRIPTION: This Markdown snippet creates a grid of cards for navigating different sections of the Appium documentation, using HTML div elements for structure.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/index.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n<div class=\"grid cards\" markdown>\n\n-   Check out the [__Introduction__](./intro/index.md) to make sure you understand the key concepts\n-   Go through the [__Quickstart__](./quickstart/index.md) to get set up and run a basic Android test\n-   Visit the [__Ecosystem__](./ecosystem/index.md) page for a list of drivers, clients and plugins you may want to use\n-   Refer to the [__CLI Reference__](./cli/index.md) for using Appium from the command line\n-   See the [__Command Reference__](./commands/index.md) for a list of commands exposed by Appium and plugins\n-   Read the different [__Guides__](./guides/migrating-1-to-2.md) for a variety of instructions, tips and tricks\n-   Check out various third-party [__Resources__](./resources.md) to explore Appium around the web\n-   For creating your own Appium extensions, see the [__Developer__](./developing/index.md) documentation\n-   For contributions to Appium itself, refer to the [__Contributing__](./contributing.md) page\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry\nDESCRIPTION: Changelog entry format following Conventional Commits standard, documenting version changes and updates to the @appium/strongbox package\nSOURCE: https://github.com/appium/appium/blob/master/packages/strongbox/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Change Log\n\nAll notable changes to this project will be documented in this file.\nSee [Conventional Commits](https://conventionalcommits.org) for commit guidelines.\n\n## [0.3.3](https://github.com/appium/appium/compare/@appium/strongbox@0.3.2...@appium/strongbox@0.3.3) (2024-07-10)\n\n**Note:** Version bump only for package @appium/strongbox\n\n\n\n\n\n## [0.3.2](https://github.com/appium/appium/compare/@appium/strongbox@0.3.1...@appium/strongbox@0.3.2) (2023-12-18)\n\n**Note:** Version bump only for package @appium/strongbox\n\n\n\n\n\n## [0.3.1](https://github.com/appium/appium/compare/@appium/strongbox@0.3.0...@appium/strongbox@0.3.1) (2023-06-14)\n\n\n### Bug Fixes\n\n* **strongbox:** do not force-lowercase slugged containers ([1ccf857](https://github.com/appium/appium/commit/1ccf857a4bdd77af3ccf2ad268e3410855509af8))\n\n\n\n## [0.3.0](https://github.com/appium/appium/compare/@appium/strongbox@0.2.0...@appium/strongbox@0.3.0) (2023-04-20)\n\n```\n\n----------------------------------------\n\nTITLE: Base Driver Version Comparison\nDESCRIPTION: Version comparison reference between package versions using semantic versioning format\nSOURCE: https://github.com/appium/appium/blob/master/packages/base-driver/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"compare\": \"@appium/base-driver@9.3.3...@appium/base-driver@9.3.4\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Centered Appium Logo in HTML\nDESCRIPTION: This HTML snippet centers and displays the Appium logo with a maximum width of 400 pixels.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/index.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div style=\"text-align: center\">\n  <img src=\"assets/images/appium-logo-horiz.png\" style=\"max-width: 400px;\" />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Bug Fix Entry\nDESCRIPTION: Changelog entry noting linter warning reductions.\nSOURCE: https://github.com/appium/appium/blob/master/packages/base-plugin/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n* Reduce linter warnings ([#20860](https://github.com/appium/appium/issues/20860)) ([65658cc](https://github.com/appium/appium/commit/65658ccbdde9144c45cb5aad6a9089a5d6f3a0a3))\n```\n\n----------------------------------------\n\nTITLE: Version Links in Markdown\nDESCRIPTION: Markdown link format showing version comparisons between package releases.\nSOURCE: https://github.com/appium/appium/blob/master/packages/types/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[0.25.2](https://github.com/appium/appium/compare/@appium/types@0.25.1...@appium/types@0.25.2)\n```\n\n----------------------------------------\n\nTITLE: Changelog Formatting Example in Markdown\nDESCRIPTION: Markdown formatted changelog entry showing version updates and feature additions for the Appium storage plugin package.\nSOURCE: https://github.com/appium/appium/blob/master/packages/storage-plugin/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Change Log\n\nAll notable changes to this project will be documented in this file.\nSee [Conventional Commits](https://conventionalcommits.org) for commit guidelines.\n\n## [0.1.1](https://github.com/appium/appium/compare/@appium/storage-plugin@0.1.0...@appium/storage-plugin@0.1.1) (2025-03-17)\n\n**Note:** Version bump only for package @appium/storage-plugin\n\n\n\n\n\n## 0.1.0 (2025-03-11)\n\n\n### Features\n\n* Add storage plugin ([#21075](https://github.com/appium/appium/issues/21075)) ([ba4aa39](https://github.com/appium/appium/commit/ba4aa394d1b6676cc29644e7faa3b0590552f303))\n* **storage-plugin:** Tune the files keeping behaviour ([#21086](https://github.com/appium/appium/issues/21086)) ([15280b8](https://github.com/appium/appium/commit/15280b80d2af6b3bdf6bf2905472b05b7bca1c1d))\n```\n\n----------------------------------------\n\nTITLE: Commit Hash Reference in Markdown\nDESCRIPTION: Markdown formatting for a Git commit hash reference used in the changelog\nSOURCE: https://github.com/appium/appium/blob/master/packages/base-driver/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[958fca4](https://github.com/appium/appium/commit/958fca47c8515664aac4c2f0b1051cadd43431b9)\n```\n\n----------------------------------------\n\nTITLE: Updating Dependency Version in Markdown\nDESCRIPTION: This snippet shows a version update for the @appium/types package in a changelog format. It includes links to GitHub commits and issues.\nSOURCE: https://github.com/appium/appium/blob/master/packages/types/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n# [0.7.0](https://github.com/appium/appium/compare/@appium/types@0.6.0...@appium/types@0.7.0) (2022-12-21)\n\n### Bug Fixes\n\n* add 'webSocketUrl' as standard cap for bidi support ([#17936](https://github.com/appium/appium/issues/17936)) ([0e195ca](https://github.com/appium/appium/commit/0e195caafefe911586ee2f8be4ae33d402b2ba40))\n* **types:** update definitelytyped ([172fcb9](https://github.com/appium/appium/commit/172fcb9aff0afe5295650566c4fb92d0894bf879))\n* **types:** update dependency type-fest to v3.4.0 ([37f71c3](https://github.com/appium/appium/commit/37f71c327a7c1a6d882b5198af6fedc9e8d51496))\n\n### Features\n\n* **base:** add get computed role and label in W3C v2 ([#17928](https://github.com/appium/appium/issues/17928)) ([316ecca](https://github.com/appium/appium/commit/316ecca8b1f8e52806867a15ba8524a504751460))\n```\n\n----------------------------------------\n\nTITLE: Referencing Multiple GitHub Issues in Markdown\nDESCRIPTION: Links to multiple GitHub issues using markdown syntax within a commit message.\nSOURCE: https://github.com/appium/appium/blob/master/packages/fake-driver/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n- update @appium/fake-driver to use @appium/base-driver ([#15436](https://github.com/appium/appium/issues/15436)) ([c66144d](https://github.com/appium/appium/commit/c66144d62b23681f91b45c45648dddf51f0ea991)), closes [#15425](https://github.com/appium/appium/issues/15425)\n```\n\n----------------------------------------\n\nTITLE: Starting Appium Server with CLI Options\nDESCRIPTION: These commands show how to start the Appium server using the command-line interface with various configuration options such as address, port, and base path.\nSOURCE: https://github.com/appium/appium/blob/master/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Start the server on the default host (0.0.0.0) and port (4723)\nappium server\n# You can also omit the 'server' subcommand\nappium\n# Start the server on the given host, port and use a custom base path prefix (the default prefix is '/')\nappium --address 127.0.0.1 --port 9000 --base-path /wd/hub\n```\n\n----------------------------------------\n\nTITLE: Grouping Appium Capabilities Using appium:options\nDESCRIPTION: Example showing how to combine multiple Appium capabilities into a single appium:options object to reduce prefix repetition. Demonstrates proper capability nesting and common configuration parameters for iOS automation.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/zh/guides/caps.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"platformName\": \"iOS\",\n    \"appium:options\": {\n        \"automationName\": \"XCUITest\",\n        \"platformVersion\": \"16.0\",\n        \"app\": \"/path/to/your.app\",\n        \"deviceName\": \"iPhone 12\",\n        \"noReset\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Event Timings JSON Structure in Appium\nDESCRIPTION: This JSON structure represents the format of event timing data returned by Appium when the 'appium:eventTimings' capability is enabled. It includes timestamps for various event types and detailed information about command execution times.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/zh/guides/event-timing.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"<event_type>\": [<occurence_timestamp_1>, ...],\n    \"commands\": [\n        {\n            \"cmd\": \"<command_name>\",\n            \"startTime\": <js_timestamp>,\n            \"endTime\": <js_timestamp>\n        },\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Self-Signed SSL Certificate\nDESCRIPTION: OpenSSL command to generate a self-signed certificate and private key pair for testing purposes. The command creates both cert.pem and key.pem files with custom subject information.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/zh/guides/tls.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nopenssl req -nodes -new -x509 -keyout key.pem -out cert.pem -subj \"/C=US/ST=State/L=City/O=company/OU=Com/CN=www.testserver.local\"\n```\n\n----------------------------------------\n\nTITLE: Creating Centered Conference Banner in HTML\nDESCRIPTION: This HTML snippet creates a centered banner for AppiumConf 2025, including event details and a registration link.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/en/index.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div style=\"text-align:center;width:100%;background-color:#ec366d;margin-top:-3em;margin-bottom:2em;\">\n  <h3 style=\"color:#ffffff;padding: 8px;\">\n    AppiumConf 2025 is partnering with SeleniumConf<br/> <span style=\"font-size:0.8em;\">March 26-28 in Valencia, Spain. Join us to learn and connect with the community!</span><br/>\n    <a style=\"color:#fcba12\" href=\"https://seleniumconf.com/\" target=\"_blank\">Register Now</a>\n  </h3>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Starting Appium Server with SSL Support\nDESCRIPTION: Command to start the Appium server with SSL/TLS support by providing paths to the certificate and private key files. Both arguments are mandatory and must point to valid X509 PEM files.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/zh/guides/tls.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nappium server --ssl-cert-path=/path/to/cert.pem --ssl-key-path=/path/to/key.pem\n```\n\n----------------------------------------\n\nTITLE: Setting Base Path in Appium 2\nDESCRIPTION: Command to set the base path to maintain Appium 1 behavior of using /wd/hub as the server endpoint.\nSOURCE: https://github.com/appium/appium/blob/master/packages/appium/docs/zh/guides/migrating-1-to-2.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nappium --base-path=/wd/hub\n```"
  }
]