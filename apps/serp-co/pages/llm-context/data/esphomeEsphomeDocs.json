[
  {
    "owner": "esphome",
    "repo": "esphome-docs",
    "content": "TITLE: Basic ESP32 Configuration in YAML\nDESCRIPTION: Basic example showing how to configure an ESP32 board in ESPHome using the esp32dev board.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/esp32.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nesp32:\n  board: esp32dev\n```\n\n----------------------------------------\n\nTITLE: Complete LD2450 Radar ESPHome Configuration\nDESCRIPTION: Comprehensive example configuration showcasing full setup of LD2450 radar sensor with multiple platform components and settings\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ld2450.rst#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nesphome:\n  name: ld2540-radar\n  friendly_name: ld2540-radar\n\nesp32:\n  board: wemos_d1_mini32\n\nlogger:\n\napi:\n\nota:\n  - platform: esphome\n\nwifi:\n  ap:\n\nuart:\n  id: uart_ld2450\n  tx_pin: GPIOXX\n  rx_pin: GPIOXX\n  baud_rate: 256000\n  parity: NONE\n  stop_bits: 1\n\nld2450:\n  id: ld2450_radar\n  uart_id: uart_ld2450\n  throttle: 1000ms\n```\n\n----------------------------------------\n\nTITLE: Using Display Size Helper Methods in ESPHome\nDESCRIPTION: Example showing how to access display dimensions using get_width() and get_height() helper methods for positioning elements relative to display size.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/index.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndisplay:\n  - platform: ...\n    # ...\n    lambda: |-\n      // Draw a circle in the middle of the display\n      it.filled_circle(it.get_width() / 2, it.get_height() / 2, 20);\n\n      // Turn off bottom half of the screen\n      it.filled_rectangle(0, it.get_height()/2, it.get_width(), it.get_height()/2, COLOR_OFF);\n```\n\n----------------------------------------\n\nTITLE: Configuring ATM90E26 Power Sensor in ESPHome\nDESCRIPTION: Complete YAML configuration example for setting up an ATM90E26 power sensor with calibration values, SPI bus configuration, and multiple sensor outputs including voltage, current, power, and energy measurements. Includes calibration multipliers and filtering options.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/atm90e26.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsubstitutions:\n  plconst_cal: '1429876' # default: 1429876, compute as 838860800 * (gain_pga * <sampled voltage (mV) at 1Amp current> * <sampled voltage (mV) at reference voltage> / (<pulse constant (e.g. 3200 pulses/kWh)> * <reference voltage, e.g. 230V>))\n  current_cal: '32801'   # default: 31251\n  voltage_cal: '17528'   # default: 26400 - Application note says this should be < 32768, maybe for some internal computation?\n  metering_cal: '7481'   # default: 7481 - Calibrate this to match your meter based on the CF1 (CFx) pulse.\n\nspi:\n  clk_pin: GPIOXX\n  miso_pin: GPIOXX\n  mosi_pin: GPIOXX\n\nsensor:\n    - platform: atm90e26\n        cs_pin: GPIOXX\n        voltage:\n            name: House Voltage\n            accuracy_decimals: 1\n            filters:\n                - multiply: 4\n        current:\n            name: House Amps\n        power:\n            name: House Watts\n            accuracy_decimals: 1\n            filters:\n                - multiply: 4\n        reactive_power:\n            name: House Reactive Power\n        power_factor:\n            name: House Power Factor\n            accuracy_decimals: 2\n        forward_active_energy:\n            name: House Forward Active Energy\n        reverse_active_energy:\n            name: House Reverse Active Energy\n        frequency:\n            name: House Freq\n        line_frequency: 50Hz\n        pl_const: ${plconst_cal}\n        meter_constant: '3200.0'  # My old rotating-disc meter has a meter constant of 1666.66\n        gain_metering: ${metering_cal}\n        gain_voltage: ${voltage_cal}\n```\n\n----------------------------------------\n\nTITLE: Configuring MHO-C401 Encrypted Thermometer in YAML\nDESCRIPTION: Configuration for the encrypted square e-ink display thermometer. Requires MAC address and bindkey for decryption.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/xiaomi_ble.rst#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: xiaomi_mhoc401\n    mac_address: XX:XX:XX:XX:XX:XX\n    bindkey: \"eef418daf699a0c188f3bfd17e4565d9\"\n    temperature:\n      name: \"MHOC401 Temperature\"\n    humidity:\n      name: \"MHOC401 Humidity\"\n    battery_level:\n```\n\n----------------------------------------\n\nTITLE: AirThings Wave Plus Sensor Configuration\nDESCRIPTION: Complete configuration for AirThings Wave Plus including temperature, radon, pressure, humidity, CO2, VOC, illuminance and battery voltage sensors.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/airthings_ble.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: airthings_wave_plus\n    name: wave_plus\n    ble_client_id: airthings01\n    update_interval: 5min # default\n    battery_update_interval: 24h # default\n    temperature:\n      name: \"WavePlus Temperature\"\n    radon:\n      name: \"WavePlus Radon\"\n    radon_long_term:\n      name: \"WavePlus Radon Long Term\"\n    pressure:\n      name: \"WavePlus Pressure\"\n    humidity:\n      name: \"WavePlus Humidity\"\n    co2:\n      name: \"WavePlus CO2\"\n    tvoc:\n      name: \"WavePlus VOC\"\n    illuminance:\n      name: \"WavePlus ambient light\"\n    battery_voltage:\n      name: \"WavePlus Battery Voltage\"\n\nble_client:\n  - mac_address: XX:XX:XX:XX:XX:XX\n    id: airthings01\n\nesp32_ble_tracker:\n```\n\n----------------------------------------\n\nTITLE: Drawing Basic Shapes with ESPHome's Display Engine\nDESCRIPTION: Example showing how to draw various shapes including lines, rectangles, circles, triangles and polygons using ESPHome's display rendering engine.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/index.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndisplay:\n  - platform: ...\n    # ...\n    lambda: |-\n      // Draw a line from [0,0] to [100,50]\n      it.line(0, 0, 100, 50);\n      // Draw the outline of a rectangle with the top left at [5,20], a width of 30 and a height of 42\n      it.rectangle(5, 20, 30, 42);\n      // Draw the same rectangle a few pixels apart, but this time filled\n      it.filled_rectangle(40, 40, 30, 42);\n\n      // Circles! Let's draw one with the center at [20,40] and a radius of 10\n      it.circle(20, 40, 10);\n      // ... and the same thing filled again\n      it.filled_circle(20, 75, 10);\n\n      // Ring and half-ring. First draw the circle with a hole in it\n      // at [75,75] with inner raduis of 20 and outer of 30\n      it.filled_ring(75, 75, 30, 20);\n      // and a \"gauge\": half-ring that is partially filled.\n      // Same position and size but 80% filled left to right\n      it.filled_gauge(75, 75, 30, 20, 80);\n\n      // Triangles... Let's draw the outline of a triangle from the [x,y] coordinates of its three points\n      // [25,5], [100,5], [80,25]\n      it.triangle(25, 5, 100, 5, 80, 25);\n      // and a filled triangle !\n      it.filled_triangle(115, 5, 95, 25, 125, 70);\n\n      // Regular Polygons? Let's draw a filled, pointy-topped hexagon inscribed in a circle\n      // centered on [170,45] with a radius of 20\n      it.filled_regular_polygon(170, 45, 20, EDGES_HEXAGON);\n      // and the outline of flat-topped octagon around it!\n      it.regular_polygon(170, 45, 40, EDGES_OCTAGON, VARIATION_FLAT_TOP);\n      // Need to rotate the polygon, or retrieve the coordinates of its vertices? Check the API!\n```\n\n----------------------------------------\n\nTITLE: Configuring ESP32 Camera for M5Stack M5CameraF New\nDESCRIPTION: This YAML configuration sets up an ESP32 camera for the M5Stack M5CameraF New model. It defines the external clock, I2C pins, data pins, and control pins as per the official documentation.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/esp32_camera.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry as per https://docs.m5stack.com/en/unit/m5camera_f_new\nesp32_camera:\n  external_clock:\n    pin: GPIO27\n    frequency: 20MHz\n  i2c_pins:\n    sda: GPIO22\n    scl: GPIO23\n  data_pins: [GPIO32, GPIO35, GPIO34, GPIO5, GPIO39, GPIO18, GPIO36, GPIO19]\n  vsync_pin: GPIO25\n  href_pin: GPIO26\n  pixel_clock_pin: GPIO21\n  reset_pin: GPIO15\n```\n\n----------------------------------------\n\nTITLE: Configuring a Basic Sensor in YAML\nDESCRIPTION: This code snippet demonstrates a basic configuration for a temperature sensor in ESPHome. It includes the sensor's name and optional parameters like unit of measurement, device class, and filters. The parameters influence how the sensor data is represented and processed.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example sensor configuration\nname: Livingroom Temperature\n\n# Optional variables:\nunit_of_measurement: \"Â°C\"\nicon: \"mdi:water-percent\"\ndevice_class: \"temperature\"\nstate_class: \"measurement\"\naccuracy_decimals: 1\nexpire_after: 30s\nfilters:\n  - sliding_window_moving_average:\n      window_size: 15\n      send_every: 15\n```\n\n----------------------------------------\n\nTITLE: Basic ESPHome Configuration with ESP32\nDESCRIPTION: A minimal example showing the basic configuration structure for an ESP32 device in ESPHome, specifying the device name and board type.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nesphome:\n  name: awesome\nesp32:\n  board: nodemcu-32s\n```\n\n----------------------------------------\n\nTITLE: Configuring Garage Door Control with GPIO Switches and Template Cover in ESPHome\nDESCRIPTION: This YAML configuration sets up two GPIO switches for opening and closing a garage door, and a template cover component to manage the door's state and actions. The cover uses brief switch activations to trigger door movement, with safeguards to prevent conflicting actions.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/cookbook/garage-door.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nswitch:\n  - platform: gpio\n    pin: GPIOXX\n    name: \"Garage Door Open Switch\"\n    id: open_switch\n  - platform: gpio\n    pin: GPIOXX\n    name: \"Garage Door Close Switch\"\n    id: close_switch\ncover:\n  - platform: template\n    name: \"Garage Door\"\n    open_action:\n      # Cancel any previous action\n      - switch.turn_off: close_switch\n      # Turn the OPEN switch on briefly\n      - switch.turn_on: open_switch\n      - delay: 0.1s\n      - switch.turn_off: open_switch\n    close_action:\n      - switch.turn_off: open_switch\n      - switch.turn_on: close_switch\n      - delay: 0.1s\n      - switch.turn_off: close_switch\n    stop_action:\n      - switch.turn_off: close_switch\n      - switch.turn_off: open_switch\n    optimistic: true\n    assumed_state: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Sprinkler Controller in ESPHome YAML\nDESCRIPTION: This YAML configuration snippet shows the structure and options for setting up a sprinkler controller in ESPHome. It includes settings for multiplier, repeat cycles, valve configuration, and pump control.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sprinkler.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsprinkler:\n  multiplier_number: \"multiplier_control\"\n  repeat_number: \"repeat_control\"\n  repeat: 0\n  next_prev_ignore_disabled: false\n  id: my_sprinkler_controller\n  valves:\n    - enable_switch: \"zone1_enable\"\n      valve_switch: \"zone1_valve\"\n      pump_switch_id: pump_switch\n      run_duration_number: \"zone1_duration\"\n      valve_switch_id: zone1_valve_switch\n```\n\n----------------------------------------\n\nTITLE: Configuring UART and SM300D2 Sensor in ESPHome\nDESCRIPTION: Example configuration for setting up the SM300D2 sensor with ESPHome. Shows UART bus configuration with proper pin settings and baud rate, along with sensor platform configuration for all available measurements including CO2, formaldehyde, TVOC, PM2.5, PM10, temperature, and humidity.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/sm300d2.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nuart:\n  rx_pin:\n    number: D0\n    mode: INPUT_PULLDOWN\n  tx_pin: D1\n  baud_rate: 9600\n\nsensor:\n  - platform: sm300d2\n    co2:\n      name: \"SM300D2 CO2 Value\"\n    formaldehyde:\n      name: \"SM300D2 Formaldehyde Value\"\n    tvoc:\n      name: \"SM300D2 TVOC Value\"\n    pm_2_5:\n      name: \"SM300D2 PM2.5 Value\"\n    pm_10_0:\n      name: \"SM300D2 PM10 Value\"\n    temperature:\n      name: \"SM300D2 Temperature Value\"\n    humidity:\n      name: \"SM300D2 Humidity Value\"\n    update_interval: 60s\n```\n\n----------------------------------------\n\nTITLE: Basic WiFi Configuration in ESPHome\nDESCRIPTION: Basic WiFi setup with SSID, password and optional manual IP configuration for static addressing.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/wifi.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwifi:\n  ssid: MyHomeNetwork\n  password: VerySafePassword\n\n  # Optional manual IP\n  manual_ip:\n    static_ip: 192.168.0.123\n    gateway: 192.168.0.1\n    subnet: 255.255.255.0\n```\n\n----------------------------------------\n\nTITLE: Micro Wake Word Configuration Example in ESPHome YAML\nDESCRIPTION: This example demonstrates a more complex configuration of microWakeWord, including voice activity detection (VAD), multiple wake word models, and an automation triggered when a wake word is detected.  It uses `okay_nabu` and `hey_mycroft` as wake words and starts the voice assistant when either is detected.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/micro_wake_word.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n\"micro_wake_word:\n  vad:\n  models:\n    - model: okay_nabu\n    - model: hey_mycroft\n  on_wake_word_detected:\n    then:\n      - voice_assistant.start:\n          wake_word: !lambda return wake_word;\"\n```\n\n----------------------------------------\n\nTITLE: Basic Web Server Configuration in YAML\nDESCRIPTION: A simple configuration entry for setting up a web server on port 80 in ESPHome.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/web_server.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nweb_server:\n  port: 80\n```\n\n----------------------------------------\n\nTITLE: Retrieve Raw Sensor State in ESPHome (C++)\nDESCRIPTION: This C++ snippet retrieves the raw, unfiltered value of a sensor using `.raw_state`. This is the value directly from the sensor before any filters have been applied.  If no value has been pushed by the sensor yet, it will return NAN.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/index.rst#2025-04-21_snippet_26\n\nLANGUAGE: cpp\nCODE:\n```\n      // For example, create a custom log message when a value is received:\n      ESP_LOGI(\"main\", \"Raw Value of my sensor: %f\", id(my_sensor).raw_state);\n\n```\n\n----------------------------------------\n\nTITLE: Basic SGP30 Sensor Configuration in YAML\nDESCRIPTION: Basic configuration example for setting up SGP30 sensor with eCOâ and TVOC measurements. Includes sensor naming, accuracy settings, baseline storage, IÂ²C address, and update interval configuration.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/sgp30.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: sgp30\n    eco2:\n      name: \"Workshop eCO2\"\n      accuracy_decimals: 1\n    tvoc:\n      name: \"Workshop TVOC\"\n      accuracy_decimals: 1\n    store_baseline: yes\n    address: 0x58\n    update_interval: 1s\n```\n\n----------------------------------------\n\nTITLE: ESPHome On Boot Automation Example\nDESCRIPTION: Example of how to configure an automation that runs when the ESP device boots up, with priority specification to control execution order.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/esphome.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nesphome:\n  # ...\n  on_boot:\n    - priority: 600\n      then:\n        - switch.turn_off: switch_1\n```\n\n----------------------------------------\n\nTITLE: Basic IÂ²C Bus Configuration for ESP32\nDESCRIPTION: Example YAML configuration for setting up a basic IÂ²C bus on an ESP32 device with scanning enabled and a custom ID.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/i2c.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry for ESP32\ni2c:\n  sda: GPIOXX\n  scl: GPIOXX\n  scan: true\n  id: bus_a\n```\n\n----------------------------------------\n\nTITLE: Configuring External Components in ESPHome\nDESCRIPTION: Configuration examples for importing external components from various sources including GitHub repositories, local folders, and git repositories with different options for components selection and refresh intervals.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/external_components.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nexternal_components:\n  # use rtttl and dfplayer from ESPHome's dev branch in GitHub\n  - source:\n      type: git\n      url: https://github.com/esphome/esphome\n      ref: dev\n    components: [ rtttl, dfplayer ]\n\n  # equivalent shorthand for GitHub\n  - source: github://esphome/esphome@dev\n    components: [ rtttl ]\n\n  # equivalent shorthand for GitHub pull request\n  - source: github://pr#2639\n    components: [ rtttl ]\n\n  # use all components from a local folder\n  - source:\n      type: local\n      path: my_components\n\n  # use a component from a local git repository\n  - source:\n      type: git\n      url: file:///Users/user/path_to_repo\n      ref: my_awesome_branch\n    components: [my_awesome_component]\n```\n\n----------------------------------------\n\nTITLE: ESPHome Docker Command Reference\nDESCRIPTION: Common Docker commands for ESPHome operations including wizard setup, compilation, uploading, viewing logs, and starting the dashboard.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/faq.rst#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# Start a new file wizard for file livingroom.yaml\ndocker run --rm -v \"${PWD}\":/config -it ghcr.io/esphome/esphome wizard livingroom.yaml\n\n# Compile and upload livingroom.yaml\ndocker run --rm -v \"${PWD}\":/config -it ghcr.io/esphome/esphome run livingroom.yaml\n\n# View logs\ndocker run --rm -v \"${PWD}\":/config -it ghcr.io/esphome/esphome logs livingroom.yaml\n\n# Map /dev/ttyUSB0 into container\ndocker run --rm -v \"${PWD}\":/config --device=/dev/ttyUSB0 -it ghcr.io/esphome/esphome ...\n\n# Start dashboard on port 6052 (general command)\ndocker run --rm -v \"${PWD}\":/config --net=host -it ghcr.io/esphome/esphome\n\n# Start dashboard on port 6052 (MacOS specific command)\ndocker run --rm -p 6052:6052 -e ESPHOME_DASHBOARD_USE_PING=true -v \"${PWD}\":/config -it ghcr.io/esphome/esphome\n\n# Setup a bash alias:\nalias esphome='docker run --rm -v \"${PWD}\":/config --net=host -it ghcr.io/esphome/esphome'\n```\n\n----------------------------------------\n\nTITLE: Basic UART Configuration in YAML\nDESCRIPTION: Basic configuration example for setting up a UART bus with specified TX/RX pins and baud rate.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/uart.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nuart:\n  tx_pin: GPIOXX\n  rx_pin: GPIOXX\n  baud_rate: 9600\n```\n\n----------------------------------------\n\nTITLE: ESPHome On Shutdown Automation Example\nDESCRIPTION: Example demonstrating how to configure an automation that runs when the ESP device is about to shut down, with priority control.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/esphome.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nesphome:\n  # ...\n  on_shutdown:\n    - priority: 700\n      then:\n        - switch.turn_off: switch_1\n```\n\n----------------------------------------\n\nTITLE: Configuring Uptime Sensor in ESPHome\nDESCRIPTION: Basic YAML configuration for setting up an uptime sensor that tracks ESP device runtime in seconds. The sensor can be configured to report either elapsed seconds or a timestamp of the last boot time.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/uptime.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: uptime\n    type: seconds\n    name: Uptime Sensor\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO Options in ESPHome\nDESCRIPTION: Example demonstrating how to customize PlatformIO options like upload speed and flash frequency for an ESPHome project.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/esphome.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nesphome:\n  # ...\n  platformio_options:\n    upload_speed: 115200\n    board_build.f_flash: 80000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring UART and SMT100 Sensor in ESPHome\nDESCRIPTION: Example configuration that sets up UART communication parameters and configures the SMT100 sensor with various measurement outputs including counts, permittivity, temperature, moisture, and voltage readings.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/smt100.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nuart:\n  tx_pin: TX\n  rx_pin: RX\n  baud_rate: 9600\n\nsensor:\n  - platform: smt100\n    counts:\n        name: \"Counts\"\n    permittivity:\n        name: \"Permittivity\"\n    temperature:\n        name: \"Temperature\"\n    moisture:\n        name: \"Moisture\"\n    voltage:\n        name: \"Voltage\"\n```\n\n----------------------------------------\n\nTITLE: Basic BME680 Sensor Configuration in ESPHome\nDESCRIPTION: Basic YAML configuration for setting up a BME680 sensor with temperature, pressure, humidity and gas resistance measurements. Includes address setting and update interval configuration.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/bme680.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: bme680\n    temperature:\n      name: \"BME680 Temperature\"\n      oversampling: 16x\n    pressure:\n      name: \"BME680 Pressure\"\n    humidity:\n      name: \"BME680 Humidity\"\n    gas_resistance:\n      name: \"BME680 Gas Resistance\"\n    address: 0x77\n    update_interval: 60s\n```\n\n----------------------------------------\n\nTITLE: Defining SCD4X Sensor Configuration in YAML\nDESCRIPTION: This YAML snippet defines the configuration for the SCD4X sensor including CO2, temperature, and humidity readings. It is used within an ESPHome configuration to enable data collection from the SCD4X sensor. Each parameter corresponds to optional settings defined for the sensor, allowing for customization based on specific requirements.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/scd4x.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: scd4x\n    co2:\n      name: \"Workshop CO2\"\n    temperature:\n      name: \"Workshop Temperature\"\n    humidity:\n      name: \"Workshop Humidity\"\n```\n\n----------------------------------------\n\nTITLE: Sonoff B1 Configuration Example in ESPHome\nDESCRIPTION: This complete example demonstrates how to configure a Sonoff B1 smart light bulb with ESPHome using the MY9231 component.  It configures the `esphome`, `esp8266`, `wifi`, `api`, `logger`, `ota`, `my9231`, `output` and `light` components to fully control the light bulb.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/output/my9231.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n\"esphome:\n  name: GPIOXX\n\nesp8266:\n  board: esp01_1m\n\nwifi:\n  ssid: !secret wifi_ssid\n  password: !secret wifi_password\n\napi:\n\nlogger:\n\nota:\n  platform: esphome\n\nmy9231:\n  data_pin: GPIO12  # GPIO13 for AiLight\n  clock_pin: GPIO14  # GPIO15 for AiLight\n  num_channels: 6\n  num_chips: 2\n  bit_depth: 8\n\noutput:\n  - platform: my9231\n    id: output_blue\n    channel: 0\n  - platform: my9231\n    id: output_red\n    channel: 1\n  - platform: my9231\n    id: output_green\n    channel: 2\n  - platform: my9231\n    id: output_warm_white\n    channel: 4\n  - platform: my9231\n    id: output_cold_white\n    channel: 5\n\nlight:\n  - platform: rgbww\n    name: GPIOXX\n    red: output_red\n    green: output_green\n    blue: output_blue\n    cold_white: output_cold_white\n    warm_white: output_warm_white\n    cold_white_color_temperature: 6500 K\n    warm_white_color_temperature: 2800 K\"\n```\n\n----------------------------------------\n\nTITLE: Basic ESP32 Camera Configuration in YAML\nDESCRIPTION: Example YAML configuration for setting up an ESP32 camera in ESPHome. Includes essential parameters like pin assignments, resolution, and image quality settings.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/esp32_camera.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nesp32_camera:\n  name: My Camera\n  external_clock:\n    pin: GPIOXX\n    frequency: 20MHz\n  i2c_pins:\n    sda: GPIOXX\n    scl: GPIOXX\n  data_pins: [GPIOXX, GPIOXX, GPIOXX, GPIOXX, GPIOXX, GPIOXX, GPIOXX, GPIOXX]\n  vsync_pin: GPIOXX\n  href_pin: GPIOXX\n  pixel_clock_pin: GPIOXX\n  reset_pin: GPIOXX\n  resolution: 640x480\n  jpeg_quality: 10\n```\n\n----------------------------------------\n\nTITLE: Complete DF-Player Integration Example with API Actions in ESPHome\nDESCRIPTION: Complete sample code showing UART setup, DF-Player configuration with event handling, and API actions for controlling the DF-Player from Home Assistant.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/dfplayer.rst#2025-04-21_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nuart:\n  tx_pin: GPIOXX\n  rx_pin: GPIOXX\n  baud_rate: 9600\n\ndfplayer:\n  on_finished_playback:\n    then:\n      logger.log: 'Playback finished event'\n\napi:\n  actions:\n  - action: dfplayer_next\n    then:\n      - dfplayer.play_next:\n  - action: dfplayer_previous\n    then:\n      - dfplayer.play_previous:\n  - action: dfplayer_play\n    variables:\n      file: int\n    then:\n      - dfplayer.play: !lambda 'return file;'\n  - action: dfplayer_play_loop\n    variables:\n      file: int\n      loop_: bool\n    then:\n      - dfplayer.play:\n          file: !lambda 'return file;'\n          loop: !lambda 'return loop_;'\n  - action: dfplayer_play_folder\n    variables:\n      folder: int\n      file: int\n    then:\n      - dfplayer.play_folder:\n          folder: !lambda 'return folder;'\n          file: !lambda 'return file;'\n\n  - action: dfplayer_play_loop_folder\n    variables:\n      folder: int\n    then:\n      - dfplayer.play_folder:\n          folder: !lambda 'return folder;'\n          loop: true\n\n  - action: dfplayer_set_device_tf\n    then:\n      - dfplayer.set_device: TF_CARD\n\n  - action: dfplayer_set_device_usb\n    then:\n      - dfplayer.set_device: USB\n\n  - action: dfplayer_set_volume\n    variables:\n      volume: int\n    then:\n      - dfplayer.set_volume: !lambda 'return volume;'\n  - action: dfplayer_set_eq\n    variables:\n      preset: int\n    then:\n      - dfplayer.set_eq: !lambda 'return static_cast<dfplayer::EqPreset>(preset);'\n\n  - action: dfplayer_sleep\n    then:\n      - dfplayer.sleep\n\n  - action: dfplayer_reset\n    then:\n      - dfplayer.reset\n\n  - action: dfplayer_start\n    then:\n      - dfplayer.start\n\n  - action: dfplayer_pause\n    then:\n      - dfplayer.pause\n\n  - action: dfplayer_stop\n    then:\n      - dfplayer.stop\n\n  - action: dfplayer_random\n    then:\n      - dfplayer.random\n\n  - action: dfplayer_volume_up\n    then:\n      - dfplayer.volume_up\n```\n\n----------------------------------------\n\nTITLE: Configuring Growatt Solar Inverter Sensors in YAML for ESPHome\nDESCRIPTION: This YAML configuration sets up various sensors for a Growatt solar inverter, including inverter status, phase voltages and currents, PV data, power production, and more. It uses the UART bus with Modbus protocol for communication.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/growatt_solar.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration\nsensor:\n  - platform: growatt_solar\n    protocol_version: RTU\n\n    inverter_status:\n      name: \"Growatt Status Code\"\n\n    phase_a:\n      voltage:\n          name: \"Growatt Voltage Phase A\"\n      current:\n          name: \"Growatt Current Phase A\"\n      active_power:\n          name: \"Growatt Power Phase A\"\n    phase_b:\n      voltage:\n          name: \"Growatt Voltage Phase B\"\n      current:\n          name: \"Growatt Current Phase B\"\n      active_power:\n          name: \"Growatt Power Phase B\"\n    phase_c:\n      voltage:\n          name: \"Growatt Voltage Phase C\"\n      current:\n          name: \"Growatt Current Phase C\"\n      active_power:\n          name: \"Growatt Power Phase C\"\n\n    pv1:\n      voltage:\n          name: \"Growatt PV1 Voltage\"\n      current:\n          name: \"Growatt PV1 Current\"\n      active_power:\n          name: \"Growatt PV1 Active Power\"\n\n    pv2:\n      voltage:\n          name: \"Growatt PV2 Voltage\"\n      current:\n          name: \"Growatt PV2 Current\"\n      active_power:\n          name: \"Growatt PV2 Active Power\"\n\n    active_power:\n      name: \"Growatt Grid Active Power\"\n\n    pv_active_power:\n      name: \"Growatt PV Active Power\"\n\n    frequency:\n      name: \"Growatt Frequency\"\n\n    energy_production_day:\n      name: \"Growatt Today's Generation\"\n\n    total_energy_production:\n      name: \"Growatt Total Energy Production\"\n\n    inverter_module_temp:\n      name: \"Growatt Inverter Module Temp\"\n```\n\n----------------------------------------\n\nTITLE: Configuring ESP32 BLE Tracker with Sensors\nDESCRIPTION: Example configuration for setting up the ESP32 BLE tracker with presence detection and various Xiaomi sensors.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/esp32_ble_tracker.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nesp32_ble_tracker:\n  max_connections: 3\n\nbinary_sensor:\n  - platform: ble_presence\n    mac_address: XX:XX:XX:XX:XX:XX\n    name: \"ESP32 BLE Presence Google Home Mini\"\n\nsensor:\n  - platform: ble_rssi\n    mac_address: XX:XX:XX:XX:XX:XX\n    name: \"BLE Google Home Mini RSSI value\"\n  - platform: xiaomi_hhccjcy01\n    mac_address: XX:XX:XX:XX:XX:XX\n    temperature:\n      name: \"Xiaomi MiFlora Temperature\"\n    moisture:\n      name: \"Xiaomi MiFlora Moisture\"\n    illuminance:\n      name: \"Xiaomi MiFlora Illuminance\"\n    conductivity:\n      name: \"Xiaomi MiFlora Soil Conductivity\"\n    battery_level:\n      name: \"Xiaomi MiFlora Battery Level\"\n  - platform: xiaomi_lywsdcgq\n    mac_address: XX:XX:XX:XX:XX:XX\n    temperature:\n      name: \"Xiaomi MiJia Temperature\"\n    humidity:\n      name: \"Xiaomi MiJia Humidity\"\n    battery_level:\n      name: \"Xiaomi MiJia Battery Level\"\n```\n\n----------------------------------------\n\nTITLE: Secure WiFi Configuration Using Secrets\nDESCRIPTION: Recommended WiFi configuration using secrets for sensitive credentials.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/wifi.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nwifi:\n  ssid: !secret wifi_ssid\n  password: !secret wifi_password\n```\n\n----------------------------------------\n\nTITLE: Configuring LD2450 Component in YAML\nDESCRIPTION: This YAML snippet configures the LD2450 component within ESPHome to track motion targets. Dependencies include a configured UART with specified parity and stop bits. Key parameters include 'id' to identify the component, 'throttle' to control data update rate, and optional 'uart_id' for specifying UART component if multiple are configured. The primary function is to enable the LD2450 radar module for motion target tracking indoors.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ld2450.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# ld2450 configuration\nld2450:\n  id: ld2450_radar\n  throttle: 1000ms\n```\n\n----------------------------------------\n\nTITLE: Configuring GPIO Binary Sensor in YAML\nDESCRIPTION: Configuration for a GPIO binary sensor with pullup resistor and inverted input. The sensor is named 'Living Room Window' and uses GPIO0 with specific input mode settings.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/getting_started_hassio.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nbinary_sensor:\n  - platform: gpio\n    name: \"Living Room Window\"\n    pin:\n      number: GPIO0\n      inverted: true\n      mode:\n        input: true\n        pullup: true\n```\n\n----------------------------------------\n\nTITLE: ESPHome On Loop Automation Example\nDESCRIPTION: Example showing how to set up an automation that runs on every loop iteration of the ESP device.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/esphome.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nesphome:\n  # ...\n  on_loop:\n    then:\n      # do something\n```\n\n----------------------------------------\n\nTITLE: HTTP Git Repository Configuration for External Components\nDESCRIPTION: Configuration examples for retrieving external components from HTTP git repositories, specifying the repository URL and branch or tag to use.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/external_components.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nexternal_components:\n  source:\n    type: git\n    url: http://repository_url/\n    ref: branch_or_tag\n  source:\n    type: git\n    url: file:///Users/user/path_to_repo\n    ref: branch_or_tag\n```\n\n----------------------------------------\n\nTITLE: on_value_range Automation Configuration in ESPHome\nDESCRIPTION: This configures the 'on_value_range' automation to trigger actions when a sensor value moves into a defined range.  Different switches are turned on depending on whether the value is below 5.0, between 5.0 and 10.0, or above 10.0.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/index.rst#2025-04-21_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\n    sensor:\n      - platform: dht\n        # ...\n        on_value_range:\n          - below: 5.0\n            then:\n              - switch.turn_on: relay_1\n          - above: 5.0\n            below: 10.0\n            then:\n              - switch.turn_on: relay_2\n          - above: 10.0\n            then:\n              - switch.turn_on: relay_3\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Enterprise Authentication for WiFi in ESPHome\nDESCRIPTION: Example YAML configuration for setting up WPA2_EAP Enterprise Authentication on ESP32 and ESP8266 devices. Demonstrates both EAP-TTLS and EAP-TLS configurations.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/wifi.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# Example EAP configuration\nwifi:\n  networks:\n  - ssid: EAP-TTLS_EnterpriseNetwork\n    eap:\n      username: bob\n      password: VerySafePassword\n      ttls_phase_2: mschapv2\n  - ssid: EAP-TLS_EnterpriseNetwork\n    eap:\n      identity: bob\n      certificate_authority: ca_cert.pem\n      certificate: cert.pem\n      key: key.pem\n```\n\n----------------------------------------\n\nTITLE: Configuring Total Daily Energy Sensor with Power Integration\nDESCRIPTION: Basic configuration example showing how to set up a total daily energy sensor that converts power readings (W) to daily energy usage (kWh). Includes sensor platform setup with power_id reference and time component for midnight reset.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/total_daily_energy.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: total_daily_energy\n    name: 'Total Daily Energy'\n    power_id: my_power\n    unit_of_measurement: 'kWh'\n    state_class: total_increasing\n    device_class: energy\n    accuracy_decimals: 3\n    filters:\n      # Multiplication factor from W to kW is 0.001\n      - multiply: 0.001\n\n  # The power sensor to convert, can be any power sensor\n  - platform: hlw8012\n    # ...\n    power:\n      id: my_power\n\n# Enable time component to reset energy at midnight\ntime:\n  - platform: homeassistant\n    id: homeassistant_time\n```\n\n----------------------------------------\n\nTITLE: LVGL Style Update Action Configuration\nDESCRIPTION: Shows how to configure style updates at runtime using the lvgl.style.update action\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/index.rst#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nlvgl:\n  style_definitions:\n    - id: my_style\n      bg_color: 0xFFFFFF\n      border_color: 0x000000\n      border_width: 2\n\non_...:\n  - lvgl.style.update:\n      id: my_style\n      properties:\n        bg_color: 0xFF0000\n        border_color: 0x00FF00\n```\n\n----------------------------------------\n\nTITLE: Configuring Kalman Filter Combination Sensor in ESPHome\nDESCRIPTION: Configuration for a Kalman filter combination sensor that filters multiple temperature sensor inputs with different error profiles to produce a single output with reduced error.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/combination.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: combination\n    type: kalman\n    name: \"Temperature\"\n    process_std_dev: 0.001\n    sources:\n      - source: temperature_sensor_1\n        error: 1.0\n      - source: temperature_sensor_2\n        error: !lambda |-\n          return 0.5 + std::abs(x - 25) * 0.023\n```\n\n----------------------------------------\n\nTITLE: Example Speaker Media Player Configuration with IÂ²S Audio\nDESCRIPTION: This example demonstrates a more complex speaker media player configuration using an IÂ²S Audio speaker and mixer components. It shows how to configure multiple speaker types (I2S, mixer, resampler), define the media and announcement pipelines, and incorporate on-device media files. It also includes a switch for playing an on-device file as an alarm notification with audio ducking.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/media_player/speaker.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n    i2s_audio:\n        i2s_lrclk_pin: GPIOXX\n        i2s_bclk_pin: GPIOXX\n        sample_rate: 48000\n    speaker:\n      - platform: i2s_audio\n        id: speaker_id\n        dac_type: external\n        i2s_dout_pin: GPIOXX\n        sample_rate: 48000\n      - platform: mixer\n        id: mixer_speaker_id\n        output_speaker: speaker_id\n        source_speakers:\n          - id: announcement_spk_mixer_input\n          - id: media_spk_mixer_input\n      - platform: resampler\n        id: media_spk_resampling_input\n        output_speaker: media_spk_mixer_input\n      - platform: resampler\n        id: announcement_spk_resampling_input\n        output_speaker: announcement_spk_mixer_input\n    media_player:\n      - platform: speaker\n        name: \"Speaker Media Player\"\n        id: speaker_media_player_id\n        media_pipeline:\n            speaker: media_spk_resampling_input\n            num_channels: 2\n        announcement_pipeline:\n            speaker: announcement_spk_resampling_input\n            num_channels: 1\n        files:\n          - id: alarm_sound\n            file: alarm.flac # Placed in the yaml directory. Should be encoded with a 48000 Hz sample rate, mono or stereo audio, and 16 bits per sample.\n    switch:\n      - platform: template\n        name: \"Ring Timer\"\n        id: timer_ringing\n        optimistic: true\n        restore_mode: ALWAYS_OFF\n        on_turn_off:\n            # Stop playing the alarm\n            - media_player.stop:\n                announcement: true\n            - mixer_speaker.apply_ducking:  # Stop ducking the media stream over 2 seconds\n                id: media_spk_mixer_input\n                decibel_reduction: 0\n                duration: 2.0s\n        on_turn_on:\n            # Duck media audio by 20 decibels instantly\n            - mixer_speaker.apply_ducking:\n                id: media_spk_mixer_input\n                decibel_reduction: 20\n                duration: 0.0s\n            - while:\n                condition:\n                    switch.is_on: timer_ringing\n                then:\n                    # Play the alarm sound as an announcement\n                    - media_player.speaker.play_on_device_media_file:\n                        media_file: alarm_sound\n                        announcement: true\n                    # Wait until the alarm sound starts playing\n                    - wait_until:\n                        media_player.is_announcing:\n                    # Wait until the alarm sound stops playing\n                    - wait_until:\n                        not:\n                          media_player.is_announcing:\n```\n\n----------------------------------------\n\nTITLE: Skipping Initial Values in ESPHome YAML\nDESCRIPTION: This code demonstrates how to use the `skip_initial` filter in ESPHome to ignore the first few sensor readings. This is useful for allowing sensors to warm up and stabilize before their values are used.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/index.rst#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n\n    # Example configuration entry\n    - platform: wifi_signal\n      # ...\n      filters:\n        - skip_initial: 3\n\n```\n\n----------------------------------------\n\nTITLE: Configuring HLW8012 Power Sensor in ESPHome\nDESCRIPTION: Basic configuration for HLW8012 power sensor with GPIO pin assignments for Sonoff POW R1, enabling voltage, current, power, and energy measurements\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/hlw8012.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: hlw8012\n    sel_pin: GPIOXX\n    cf_pin: GPIOXX\n    cf1_pin: GPIOXX\n    current:\n      name: \"HLW8012 Current\"\n    voltage:\n      name: \"HLW8012 Voltage\"\n    power:\n      name: \"HLW8012 Power\"\n    energy:\n      name: \"HLW8012 Energy\"\n    update_interval: 60s\n```\n\n----------------------------------------\n\nTITLE: Base Binary Sensor YAML Configuration\nDESCRIPTION: Basic example showing how to configure a binary sensor with a device class in ESPHome.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbinary_sensor:\n  - platform: ...\n    device_class: motion\n```\n\n----------------------------------------\n\nTITLE: Creating GPIO Switch Configuration in YAML\nDESCRIPTION: Configuration snippet for adding a basic GPIO switch to an ESPHome device. The switch is named 'Living Room Dehumidifier' and connects to GPIO5.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/getting_started_hassio.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nswitch:\n  - platform: gpio\n    name: \"Living Room Dehumidifier\"\n    pin: GPIO5\n```\n\n----------------------------------------\n\nTITLE: Configuring SX1509 Pins for Various Components in YAML\nDESCRIPTION: This snippet showcases how to use individual SX1509 pins for different ESPHome components. It includes examples of configuring a binary sensor input, a switch output, a generic output, and a monochromatic light using SX1509 pins.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sx1509.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nbinary_sensor:\n  - platform: gpio\n    name: \"SX1509 Pin #0\"\n    pin:\n      sx1509: sx1509_hub1\n      number: 0\n      mode:\n        input: true\n        pullup: true\n      inverted: true\n\nswitch:\n  - platform: gpio\n    name: \"SX1509 Pin #1\"\n    pin:\n      sx1509: sx1509_hub1\n      number: 1\n      mode:\n        output: true\n      inverted: false\n\noutput:\n  - platform: sx1509\n    sx1509_id: sx1509_hub1\n    id: 'sx1509_output'\n    pin: 2\n\nlight:\n  - platform: monochromatic\n    id: light0\n    name: \"light0\"\n    output: sx1509_output\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Receiver in YAML for ESPHome\nDESCRIPTION: This YAML snippet demonstrates an example configuration entry for the `remote_receiver` component in ESPHome. It specifies the pin for receiving signals and enables the logging of all received codes.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/remote_receiver.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"# Example configuration entry\\nremote_receiver:\\n  pin: GPIOXX\\n  dump: all\"\n```\n\n----------------------------------------\n\nTITLE: BLE Service Configuration with Characteristics in YAML\nDESCRIPTION: Configuration example showing how to define a BLE service with a readable characteristic that has a static string value.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/esp32_ble_server.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nesp32_ble_server:\n  services:\n    - uuid: 2a24b789-7aab-4535-af3e-ee76a35cc42d\n      advertise: false\n      characteristics:\n        - uuid: cad48e28-7fbe-41cf-bae9-d77a6c233423\n          read: true\n          value:\n            value: \"Hello, World!\"\n```\n\n----------------------------------------\n\nTITLE: Registering Tuya MCU Connection in YAML\nDESCRIPTION: Basic YAML configuration to register the Tuya MCU connection in ESPHome. This requires a UART bus to be configured.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/tuya.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Register the Tuya MCU connection\ntuya:\n```\n\n----------------------------------------\n\nTITLE: Installing ESPHome on Windows\nDESCRIPTION: Commands to install ESPHome and its dependencies using pip on Windows.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/installing_esphome.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n> pip3 install wheel\n> pip3 install esphome\n```\n\n----------------------------------------\n\nTITLE: Basic LCD Menu Configuration with Rotary Encoder\nDESCRIPTION: Example configuration showing how to set up a basic LCD menu with rotary encoder control and display integration.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display_menu/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndisplay:\n  - platform: lcd_pcf8574\n    id: my_lcd\n    ...\n    lambda: |-\n      id(my_lcd_menu).draw();\n      if (!id(my_lcd_menu).is_active())\n        it.print(\"Menu is not active\");\n\nlcd_menu:\n  id: my_lcd_menu\n  display_id: my_lcd\n  active: true\n  mode: rotary\n  on_enter:\n    then:\n      lambda: 'ESP_LOGI(\"display_menu\", \"root enter\");'\n  on_leave:\n    then:\n      lambda: 'ESP_LOGI(\"display_menu\", \"root leave\");'\n  items:\n    - type: back\n      text: 'Back'\n    - type: label\n      text: 'Label 1'\n    - type: label\n      text: !lambda |-\n        return \"Templated label\";\n```\n\n----------------------------------------\n\nTITLE: Basic ADC Sensor Configuration in YAML\nDESCRIPTION: Example configuration for setting up a basic ADC sensor with pin specification, name, and update interval.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/adc.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: adc\n    pin: GPIOXX\n    name: \"Living Room Brightness\"\n    update_interval: 60s\n```\n\n----------------------------------------\n\nTITLE: Configuring SSD1306 Display with SPI Interface\nDESCRIPTION: Example configuration for connecting an SSD1306 OLED display via SPI bus. Sets up SPI pins and basic display parameters including chip select, DC, and reset pins.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/ssd1306.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nspi:\n  clk_pin: D0\n  mosi_pin: D1\n\ndisplay:\n  - platform: ssd1306_spi\n    model: \"SSD1306 128x64\"\n    cs_pin: D2\n    dc_pin: D3\n    reset_pin: D4\n    lambda: |-\n      it.print(0, 0, id(font), \"Hello World!\");\n```\n\n----------------------------------------\n\nTITLE: Displaying MiFlora Sensor Data on PVVX MiThermometer Display\nDESCRIPTION: Complete example configuration that shows how to read data from a MiFlora sensor and display it on a PVVX MiThermometer display. It also synchronizes the time from Home Assistant and sets conditional emoticons based on sensor values.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/pvvx_mithermometer.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntime:\n  - platform: homeassistant\n    id: homeassistant_time\n\nesp32_ble_tracker:\n\nble_client:\n- mac_address: XX:XX:XX:XX:XX:XX\n  id: pvvx_ble_display\n\nsensor:\n- platform: pvvx_mithermometer\n  mac_address: XX:XX:XX:XX:XX:XX\n  temperature:\n    name: \"PVVX Temperature\"\n  humidity:\n    name: \"PVVX Humidity\"\n  battery_level:\n    name: \"PVVX Battery-Level\"\n  battery_voltage:\n    name: \"PVVX Battery-Voltage\"\n- platform: xiaomi_hhccjcy01\n  mac_address: XX:XX:XX:XX:XX:XX\n  temperature:\n    name: \"Xiaomi HHCCJCY01 Temperature\"\n    id: miflora_temperature\n  moisture:\n    name: \"Xiaomi HHCCJCY01 Moisture\"\n    id: miflora_moisture\n  illuminance:\n    name: \"Xiaomi HHCCJCY01 Illuminance\"\n  conductivity:\n    name: \"Xiaomi HHCCJCY01 Soil Conductivity\"\n\ndisplay:\n- platform: pvvx_mithermometer\n  ble_client_id: pvvx_ble_display\n  update_interval: 10min\n  validity_period: 15min\n  time_id: homeassistant_time\n  lambda: |-\n    double temp = id(miflora_temperature).state;\n    double moisture = id(miflora_moisture).state;\n    it.print_bignum(temp);\n    it.print_unit(pvvx_mithermometer::UNIT_DEG_C);\n    it.print_smallnum(moisture);\n    it.print_percent();\n    if (temp < 5 || temp > 30 || moisture < 10 || moisture > 50) {\n      it.print_sad();\n    } else {\n      it.print_happy();\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring BME680 Sensor with BSEC in ESPHome\nDESCRIPTION: This YAML configuration demonstrates a minimal setup for the BME680 sensor using BSEC in ESPHome. It includes common sensors like temperature, pressure, humidity, IAQ, CO2 equivalent, and breath VOC equivalent.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/bme680_bsec.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ni2c:\n\nbme680_bsec:\n\nsensor:\n  - platform: bme680_bsec\n    temperature:\n      name: \"BME680 Temperature\"\n    pressure:\n      name: \"BME680 Pressure\"\n    humidity:\n      name: \"BME680 Humidity\"\n    iaq:\n      name: \"BME680 IAQ\"\n      id: iaq\n    co2_equivalent:\n      name: \"BME680 CO2 Equivalent\"\n    breath_voc_equivalent:\n      name: \"BME680 Breath VOC Equivalent\"\n\ntext_sensor:\n  - platform: bme680_bsec\n    iaq_accuracy:\n      name: \"BME680 IAQ Accuracy\"\n\n  - platform: template\n    name: \"BME680 IAQ Classification\"\n    icon: \"mdi:checkbox-marked-circle-outline\"\n    lambda: |-\n      if ( int(id(iaq).state) <= 50) {\n        return {\"Excellent\"};\n      }\n      else if (int(id(iaq).state) >= 51 && int(id(iaq).state) <= 100) {\n        return {\"Good\"};\n      }\n      else if (int(id(iaq).state) >= 101 && int(id(iaq).state) <= 150) {\n        return {\"Lightly polluted\"};\n      }\n      else if (int(id(iaq).state) >= 151 && int(id(iaq).state) <= 200) {\n        return {\"Moderately polluted\"};\n      }\n      else if (int(id(iaq).state) >= 201 && int(id(iaq).state) <= 250) {\n        return {\"Heavily polluted\"};\n      }\n      else if (int(id(iaq).state) >= 251 && int(id(iaq).state) <= 350) {\n        return {\"Severely polluted\"};\n      }\n      else if (int(id(iaq).state) >= 351) {\n        return {\"Extremely polluted\"};\n      }\n      else {\n        return {\"error\"};\n      }\n```\n\n----------------------------------------\n\nTITLE: Triggering Deep Sleep Immediately with Custom Duration\nDESCRIPTION: Action to immediately enter deep sleep with a specified sleep duration of 20 minutes. This can be used in automations to force the device into deep sleep mode.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/deep_sleep.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - deep_sleep.enter:\n        id: deep_sleep_1\n        sleep_duration: 20min\n```\n\n----------------------------------------\n\nTITLE: Publishing State in C++ Lambda\nDESCRIPTION: Example of publishing a state to a template binary sensor using C++ lambda code.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/template.rst#2025-04-21_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nid(template_bin).publish_state(true);\n```\n\n----------------------------------------\n\nTITLE: Multiple IÂ²C Bus Configuration with Sensor Example\nDESCRIPTION: Example YAML configuration for setting up multiple IÂ²C buses with unique IDs and connecting a BME680 sensor to a specific bus.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/i2c.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\ni2c:\n  - id: bus_a\n    sda: GPIOXX\n    scl: GPIOXX\n    scan: true\n  - id: bus_b\n    sda: GPIOXX\n    scl: GPIOXX\n    scan: true\n# Sensors should be specified as follows\nsensor:\n  - platform: bme680\n    i2c_id: bus_b\n    address: 0x76\n# ...\n```\n\n----------------------------------------\n\nTITLE: Configuring BLE Client Switch in ESPHome\nDESCRIPTION: This YAML configuration demonstrates how to set up a BLE client switch to enable or disable a BLE client connection. It establishes a BLE tracker, defines a client with a specific MAC address, and creates a switch to control the connection state.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/switch/ble_client.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nesp32_ble_tracker:\n\nble_client:\n  - mac_address: XX:XX:XX:XX:XX:XX\n    id: itag_black\n\nswitch:\n  - platform: ble_client\n    ble_client_id: itag_black\n    name: \"Enable iTag\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Thermometer Display with LVGL Meter and Label in ESPHome\nDESCRIPTION: YAML configuration that creates a thermometer display using LVGL meter and label widgets. The code shows how to update both the needle indicator and text label when a new temperature value is received from a sensor.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/cookbook/lvgl.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: ...\n    id: outdoor_temperature\n    on_value:\n      - lvgl.indicator.update:\n          id: temperature_needle\n          value: !lambda return x * 10; \n      - lvgl.label.update:\n          id: temperature_text\n          text:\n            format: \"%.1fÂ°C\"\n            args: [ 'x' ]\nlvgl:\n    ...\n    pages:\n      - id: meter_page\n        widgets:\n          - meter:\n              align: CENTER\n              height: 180\n              width: 180\n              scales:\n                - range_from: -100 # scale for the needle value\n                  range_to: 400\n                  angle_range: 240\n                  rotation: 150\n                  indicators:\n                    - line:\n                        id: temperature_needle\n                        width: 2\n                        color: 0xFF0000\n                        r_mod: -4\n                    - tick_style:\n                        start_value: -10\n                        end_value: 40\n                        color_start: 0x0000bd\n                        color_end: 0xbd0000\n                        width: 1\n                - range_from: -10 # scale for the value labels\n                  range_to: 40\n                  angle_range: 240\n                  rotation: 150\n                  ticks:\n                    width: 1\n                    count: 51\n                    length: 10\n                    color: 0x000000\n                    major:\n                      stride: 5\n                      width: 2\n                      length: 10\n                      color: 0x404040\n                      label_gap: 10\n              widgets:\n                - label:\n                    id: temperature_text\n                    text: \"-.-Â°C\"\n                    align: CENTER\n                    y: 45\n                - label:\n                    text: \"Outdoor\"\n                    align: CENTER\n                    y: 65\n```\n\n----------------------------------------\n\nTITLE: ESPHome Smart Humidity Control\nDESCRIPTION: Automation to control a dehumidifier based on humidity sensor readings\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/automations/actions.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: dht\n    humidity:\n      name: \"Living Room Humidity\"\n      on_value_range:\n        - above: 65.0\n          then:\n            - switch.turn_on: dehumidifier1\n        - below: 50.0\n          then:\n            - switch.turn_off: dehumidifier1\n    temperature:\n      name: \"Living Room Temperature\"\n```\n\n----------------------------------------\n\nTITLE: Configuring ESP32 Camera for TTGO T-Camera V162\nDESCRIPTION: This YAML snippet configures an ESP32 camera for the TTGO T-Camera V162. It sets up the external clock, I2C pins, data pins, control pins, and includes specific image settings like JPEG quality and flip/mirror options.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/esp32_camera.rst#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nesp32_camera:\n  external_clock:\n    pin: GPIO4\n    frequency: 20MHz\n  i2c_pins:\n    sda: GPIO18\n    scl: GPIO23\n  data_pins: [GPIO34, GPIO13, GPIO14, GPIO35, GPIO39, GPIO38, GPIO37, GPIO36]\n  vsync_pin: GPIO5\n  href_pin: GPIO27\n  pixel_clock_pin: GPIO25\n  jpeg_quality: 10\n  vertical_flip: true\n  horizontal_mirror: false\n\n  # Image settings\n  name: My Camera\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Verifying ESPHome Installation on Windows\nDESCRIPTION: Command to verify successful ESPHome installation by checking version.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/installing_esphome.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n> esphome version\nVersion: 2021.12.3\n```\n\n----------------------------------------\n\nTITLE: Configuring ST7789V Display with Custom UI in ESPHome\nDESCRIPTION: Complete configuration for an ST7789V display with custom UI elements. Sets up the display pins, rotation, and uses lambda expressions to draw rectangles, text with time/date information, and status indicators based on system state.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/st7789v.rst#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n    display:\n      - platform: st7789v\n        cs_pin: GPIO5\n        dc_pin: GPIO16\n        reset_pin: GPIO23\n        rotation: 270\n```\n\nLANGUAGE: cpp\nCODE:\n```\n          it.rectangle(0,  0, it.get_width(), it.get_height(), id(my_blue));\n          it.rectangle(0, 20, it.get_width(), it.get_height(), id(my_blue));   // header bar\n\n          it.strftime((240 / 2), (140 / 3) * 1 + 5, id(helvetica_24), id(my_gray), TextAlign::CENTER, \"%Y-%m-%d\", id(esptime).now());\n          it.strftime((240 / 2), (140 / 3) * 2 + 5, id(helvetica_48), id(my_gray), TextAlign::CENTER, \"%H:%M:%S\", id(esptime).now());\n          it.print(5, 5, id(helvetica_12), id(my_yellow), TextAlign::TOP_LEFT, \"ESPHome\");\n\n          // Comment out the above lines to see the image without text overlaid\n          // it.image(0, 0, id(my_image));\n\n          if (id(system_status).state) {\n            it.print(235, 5, id(helvetica_12), id(my_green), TextAlign::TOP_RIGHT, \"Online\");\n          }\n          else {\n            it.print(235, 5, id(helvetica_12), id(my_red), TextAlign::TOP_RIGHT, \"Offline\");\n          }\n```\n\n----------------------------------------\n\nTITLE: Light Turn On Action Configuration\nDESCRIPTION: This code shows how to configure a light turn-on action in ESPHome using YAML. It includes examples of setting brightness, color, and using a lambda expression for dynamic brightness control. Shorthand notation is also demonstrated.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/light/index.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - light.turn_on:\n        id: light_1\n        brightness: 100%\n        red: 100%\n        green: 100%\n        blue: 1.0\n    # Templated\n    - light.turn_on:\n        id: light_1\n        brightness: !lambda |-\n          // output value must be in range 0 - 1.0\n          return id(some_sensor).state / 100.0;\n    # Shorthand\n    - light.turn_on: light_1\n```\n\n----------------------------------------\n\nTITLE: Configuring BME280 Sensor with I2C Interface in ESPHome\nDESCRIPTION: YAML configuration for BME280 sensor using I2C interface. Sets up temperature, pressure and humidity measurements with named sensors.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/bme280.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: bme280_i2c\n    temperature:\n      name: \"BME280 Temperature\"\n    pressure:\n      name: \"BME280 Pressure\"\n    humidity:\n      name: \"BME280 Humidity\"\n```\n\n----------------------------------------\n\nTITLE: Setting BLE Characteristic Value in YAML\nDESCRIPTION: This snippet shows how to use the ble_server.characteristic_set_value action to set the value of a BLE characteristic. It sets the value to a byte array [0, 1, 2].\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/esp32_ble_server.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - ble_server.characteristic_set_value:\n        id: test_write_characteristic\n        value: [0, 1, 2]\n```\n\n----------------------------------------\n\nTITLE: Creating Addressable Lambda Effect in YAML\nDESCRIPTION: This snippet allows for a custom effect using a lambda function to manipulate each LED individually. It provides control over all LEDs for unique effects based on custom logic.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/light/index.rst#2025-04-21_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\nlight:\n  - platform: ...\n    effects:\n        - addressable_lambda:\n            name: \"My Custom Effect\"\n            update_interval: 16ms\n            lambda: |-\n              // it.size() - Number of LEDs\n              // it[num] - Access the LED at index num.\n              // Set the LED at num to the given r, g, b values\n              // it[num] = Color(r, g, b);\n              // Get the color at index num (Color instance)\n              // it[num].get();\n\n              // Example: Simple color wipe\n              for (int i = it.size() - 1; i > 0; i--) {\n                it[i] = it[i - 1].get();\n              }\n              it[0] = Color::random_color();\n\n              // Bonus: use .range() and .all() to set many LEDs without having to write a loop.\n              it.range(0, 50) = Color::BLACK;\n              it.all().fade_to_black(10);\n```\n\nLANGUAGE: yaml\nCODE:\n```\nlight:\n  - platform: ...\n    effects:\n        - addressable_lambda:\n            name: \"My Custom Effect\"\n            update_interval: 16ms\n            lambda: |-\n              // Static variables keep their value even when\n              // stopping and starting the effect again\n              static uint16_t progress = 0;\n\n              // normal variables lose their value after each\n              // execution - basically after each update_interval\n              uint16_t changes = 0;\n\n              // To reset static when stopping and starting the effect\n              // again you can use the initial_run variables\n              if (initial_run) {\n                progress = 0;\n                it.all() = Color::BLACK;\n                // optionally do a return so nothing happens until the next update_interval\n                return;\n              }\n```\n\n----------------------------------------\n\nTITLE: Complete ST7789V Display Configuration\nDESCRIPTION: Comprehensive configuration example including fonts, sensors, colors, and display layout setup\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/st7789v.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncolor:\n  - id: my_red\n    red: 100%\n    green: 0%\n    blue: 0%\n  - id: my_yellow\n    red: 100%\n    green: 100%\n    blue: 0%\n  - id: my_green\n    red: 0%\n    green: 100%\n    blue: 0%\n  - id: my_blue\n    red: 0%\n    green: 0%\n    blue: 100%\n  - id: my_gray\n    red: 50%\n    green: 50%\n    blue: 50%\n\nfont:\n  - file: \"Helvetica.ttf\"\n    id: helvetica_48\n    size: 48\n  - file: \"Helvetica.ttf\"\n    id: helvetica_24\n    size: 24\n  - file: \"Helvetica.ttf\"\n    id: helvetica_12\n    size: 12\n\nbinary_sensor:\n  - platform: status\n    name: \"Node Status\"\n    id: system_status\n  - platform: gpio\n    pin:\n```\n\n----------------------------------------\n\nTITLE: on_raw_value Automation Configuration in ESPHome\nDESCRIPTION: This example configures an 'on_raw_value' automation.  It triggers when a new sensor value is received before it has passed through any filters, allowing access to the original, unfiltered data. The lambda function sets the red color of a light based on the raw sensor value.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/index.rst#2025-04-21_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\n    sensor:\n      - platform: dht\n        # ...\n        on_raw_value:\n          then:\n            - light.turn_on:\n                id: light_1\n                red: !lambda \"return x/255;\"\n\n```\n\n----------------------------------------\n\nTITLE: Basic API Configuration in ESPHome YAML\nDESCRIPTION: Example configuration entry for setting up the ESPHome native API component. This is the minimum configuration required to enable API functionality.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/api.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\napi:\n```\n\n----------------------------------------\n\nTITLE: Delta Filter Configuration in ESPHome\nDESCRIPTION: This example configures the delta filter with an absolute difference. It filters incoming values based on a specified absolute difference from the previously passed value. In this case, only values that are different by 2.0 from the last value are passed through.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/index.rst#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n    filters:\n      - delta: 2.0\n\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP23017 I/O Expander in ESPHome\nDESCRIPTION: This YAML configuration illustrates how to configure an MCP23017 I/O expander within ESPHome, setting the I2C address and configuring pins for both input and output functionalities.  It defines the `mcp23017` component, and then uses the `switch` and `binary_sensor` components to manage individual pins as outputs and inputs, respectively.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/mcp230xx.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n\n# Example configuration entry\nmcp23017:\n  - id: 'mcp23017_hub'\n    address: 0x20\n\n# Individual outputs\nswitch:\n  - platform: gpio\n    name: \"MCP23017 Pin A0\"\n    pin:\n      mcp23xxx: mcp23017_hub\n      # Use pin A0\n      number: 0\n      mode:\n        output: true\n      inverted: false\n\n# Individual inputs\nbinary_sensor:\n  - platform: gpio\n    name: \"MCP23017 Pin B7\"\n    pin:\n      mcp23xxx: mcp23017_hub\n      # Use pin B7\n      number: 15\n      # One of INPUT or INPUT_PULLUP\n      mode:\n        input: true\n        pullup: true\n      inverted: false\n\n```\n\n----------------------------------------\n\nTITLE: Configuring SPI Ethernet Chips in ESPHome\nDESCRIPTION: Example configuration for SPI-based Ethernet chips like W5500, showing pin connections for SPI communication and optional interrupt and reset pins.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/ethernet.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry for SPI chips\nethernet:\n  type: W5500\n  clk_pin: GPIOXX\n  mosi_pin: GPIOXX\n  miso_pin: GPIOXX\n  cs_pin: GPIOXX\n  interrupt_pin: GPIOXX\n  reset_pin: GPIOXX\n```\n\n----------------------------------------\n\nTITLE: Configuring TCA9548A IÂ²C Multiplexer with Connected Devices in ESPHome\nDESCRIPTION: YAML configuration example that sets up a TCA9548A IÂ²C multiplexer with two channels (0 and 1) and connects a BMP280 sensor to channel 1. The multiplexer creates virtual IÂ²C buses that can be referenced by other components.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/tca9548a.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\ntca9548a:\n  - address: 0x70\n    id: multiplex0\n    i2c_id: i2c0\n    channels: \n      - bus_id: multiplex0channel0\n        channel: 0\n      - bus_id: multiplex0channel1\n        channel: 1\n\n# Individual I2C Devices\nsensor:\n  - platform: bmp280\n    i2c_id: multiplex0channel1\n```\n\n----------------------------------------\n\nTITLE: CAN Bus Binary Sensor Configuration in ESPHome\nDESCRIPTION: Configuration for a binary sensor that responds to CAN bus messages. The sensor monitors a specific CAN ID (0x100) and updates its state based on received messages: 0x0 for button release and 0x1 for button press.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/canbus/index.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nbinary_sensor:\n  - platform: template\n    name: CAN Bus Button\n    id: can_bus_button\n\ncanbus:\n  - platform: ...\n    can_id: 4\n    bit_rate: 125kbps\n    on_frame:\n      - can_id: ${0x100}\n        then:\n          - lambda: |-\n              if(x.size() > 0) {\n                switch(x[0]) {\n                  case 0x0:  // button release\n                    id(can_bus_button).publish_state(false);\n                    break;\n                  case 0x1:  // button press\n                    id(can_bus_button).publish_state(true);\n                    break;\n                }\n              }\n```\n\n----------------------------------------\n\nTITLE: Configuring ST7920 LCD Display with ESPHome\nDESCRIPTION: Example configuration for setting up an ST7920 LCD display using SPI communication. Defines the SPI pins (CLK and MOSI) and display settings including the CS pin with required inversion. Includes a basic lambda function to display 'Hello World!' text.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/st7920.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nspi:\n  clk_pin: D5\n  mosi_pin: D7\n\ndisplay:\n  - platform: st7920\n    cs_pin: \n      number: 4\n      inverted: true\n    lambda: |-\n      it.print(0, 0, id(font), \"Hello World!\");\n```\n\n----------------------------------------\n\nTITLE: Configuring ESP32 BLE RSSI Sensors in YAML\nDESCRIPTION: Example configuration showing different methods to set up BLE RSSI sensors including MAC address tracking, Identity Resolving Key (IRK), Service UUID, and iBeacon UUID. Demonstrates the flexibility in device identification while monitoring signal strength.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ble_rssi.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nesp32_ble_tracker:\n\nsensor:\n  # RSSI based on MAC address\n  - platform: ble_rssi\n    mac_address: XX:XX:XX:XX:XX:XX\n    name: \"BLE Google Home Mini RSSI value\"\n  # RSSI based on Identity Resolving Key (IRK)\n  - platform: ble_rssi\n    irk: 1234567890abcdef1234567890abcdef\n    name: \"BLE Tracker iPhone\"\n  # RSSI based on Service UUID\n  - platform: ble_rssi\n    service_uuid: '11aa'\n    name: \"BLE Test Service 16 bit RSSI value\"\n  # RSSI based on iBeacon UUID\n  - platform: ble_rssi\n    ibeacon_uuid: '68586f1e-89c2-11eb-8dcd-0242ac130003'\n    name: \"BLE Test Service iBeacon RSSI value\"\n```\n\n----------------------------------------\n\nTITLE: Basic QSPI Display Configuration in YAML\nDESCRIPTION: Basic configuration example for QSPI display showing essential parameters including model selection, data rate, dimensions, and pin configurations.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/qspi_dbi.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndisplay:\n  - platform: qspi_dbi\n    model: RM690B0\n    data_rate: 80MHz\n    dimensions:\n      width: 450\n      height: 600\n      offset_width: 16\n    brightness: 255\n    cs_pin: GPIOXX\n    reset_pin: GPIOXX\n    enable_pin: GPIOXX\n```\n\n----------------------------------------\n\nTITLE: Writing Simple NDEF Messages Using PN7160 in YAML\nDESCRIPTION: This code demonstrates writing a fixed NDEF message to an NFC tag using the PN7160. The 'my_pn7160_id' should match your PN7160 configuration. Use this with a trigger like a button press for user-initiated writing actions.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/pn7160.rst#2025-04-21_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\non_...\n  then:\n    - tag.set_write_message:\n        message: https://www.home-assistant.io/tag/pulse\n        include_android_app_record: false   # optional\n    - tag.set_write_mode: my_pn7160_id\n```\n\n----------------------------------------\n\nTITLE: Controlling Daly BMS via UART Communication\nDESCRIPTION: This snippet demonstrates how to control the Daly BMS charging and discharging MOS using binary sensors and template switches. It includes UART commands to execute the desired actions based on the switch state.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/daly_bms.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n\"    binary_sensor:\\n      - platform: daly_bms\\n        charging_mos_enabled:\\n          name: \\\"Daly Charging MOS\\\"\\n          id: bin_daly_chg_mos # binary MOS sensor must have ID to use with switch\\n          internal: True # but you can make it internal to avoid duplication\\n        discharging_mos_enabled:\\n          name: \\\"Daly Discharging MOS\\\"\\n          id: bin_daly_dischg_mos # binary MOS sensor must have ID to use with switch\\n          internal: True # but you can make it internal to avoid duplication\\n    switch:\\n      - platform: template\\n        name: \\\"Daly Charging MOS\\\"\\n        lambda: |-\\n          if (id(bin_daly_chg_mos).state) {\\n            return true;\\n          } else {\\n            return false;\\n          }\\n        turn_on_action:\\n          - uart.write:\\n              data: [0xA5, 0x40, 0xDA, 0x08, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC8]\\n          - logger.log:\\n              format: \\\"Send cmd to Daly: Set charge MOS on\\\"\\n        turn_off_action:\\n          - uart.write:\\n              data: [0xA5, 0x40, 0xDA, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC7]\\n          - logger.log:\\n              format: \\\"Send cmd to Daly: Set charge MOS off\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring UART and Modbus for PZEM-004T V3 in YAML\nDESCRIPTION: This YAML configuration snippet demonstrates how to set up the UART and Modbus for communicating with the PZEM-004T V3 energy monitor. The configuration specifies RX and TX pins and sets the baud rate to 9600. It enables reading multiple data streams such as current, voltage, energy, power, frequency, and power factor, with an update interval of 60 seconds.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/pzemac.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nuart:\n  rx_pin: D1\n  tx_pin: D2\n  baud_rate: 9600\n\nmodbus:\n\nsensor:\n  - platform: pzemac\n    current:\n      name: \"PZEM-004T V3 Current\"\n    voltage:\n      name: \"PZEM-004T V3 Voltage\"\n    energy:\n      name: \"PZEM-004T V3 Energy\"\n    power:\n      name: \"PZEM-004T V3 Power\"\n    frequency:\n      name: \"PZEM-004T V3 Frequency\"\n    power_factor:\n      name: \"PZEM-004T V3 Power Factor\"\n    update_interval: 60s\n```\n\n----------------------------------------\n\nTITLE: Basic Bluetooth Proxy Configuration in YAML\nDESCRIPTION: Basic configuration block for enabling Bluetooth proxy functionality in ESPHome. Allows configuration of active connections, service caching, and connection slots.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/bluetooth_proxy.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbluetooth_proxy:\n```\n\n----------------------------------------\n\nTITLE: Using Sun Position in Conditional Statements\nDESCRIPTION: Shows how to use the sun's position as a condition in automations to check if the sun is above or below the horizon.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sun.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - if:\n      condition:\n        - sun.is_above_horizon:\n      then:\n        - logger.log: Sun is above horizon!\n```\n\n----------------------------------------\n\nTITLE: Complete ESPHome Configuration with Arduino Port Expander\nDESCRIPTION: A comprehensive example showcasing the full configuration of an ESPHome setup using an Arduino Port Expander. It includes various sensors, outputs, and components.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/cookbook/arduino_port_extender.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nesphome:\n  name: test_arduino\n  includes:\n    - arduino_port_expander.h\n\nesp8266:\n  board: nodemcu\n\nwifi:\n  ssid: !secret wifi_ssid\n  password: !secret wifi_password\n\napi:\n\nota:\n  platform: esphome\n\ni2c:\n  id: i2c_component\n\nlogger:\n  level: DEBUG\n\ncustom_component:\n  - id: expander1\n    lambda: |-\n      auto expander = new ArduinoPortExpander(i2c_component, 0x08, true);\n      return {expander};\n\noutput:\n- platform: custom\n  type: binary\n  lambda: |-\n    return {ape_binary_output(expander1, 2),\n            ape_binary_output(expander1, 3),\n            ape_binary_output(expander1, 4),\n            ape_binary_output(expander1, 5)};\n\n  outputs:\n    - id: relay_1\n      inverted: true\n    - id: relay_2\n      inverted: true\n    - id: relay_3\n      inverted: true\n    - id: relay_4\n      inverted: true\n\nlight:\n  - platform: binary\n    id: ceiling_light\n    name: Ceiling light\n    output: relay_1\n  - platform: binary\n    id: room_light\n    name: Living room light\n    output: relay_2\n\nfan:\n- platform: binary\n  id: ceiling_fan\n  output: relay_3\n  name: Ceiling fan\n\nswitch:\n  - platform: output\n    name: Tank pump\n    id: tank_pump\n    output: relay_4\n\nbinary_sensor:\n  - platform: custom\n    lambda: |-\n      return {ape_binary_sensor(expander1, 7),\n              ape_binary_sensor(expander1, 8),\n              ape_binary_sensor(expander1, 9),\n              ape_binary_sensor(expander1, 10),\n              ape_binary_sensor(expander1, 14) // 14 = A0\n              };\n\n    binary_sensors:\n      - id: push_button1\n        internal: true # don't show on HA\n        on_press:\n          - light.toggle: ceiling_light\n      - id: push_button2\n        internal: true # don't show on HA\n        on_press:\n          - light.toggle: room_light\n      - id: pir_sensor\n        name: Living PIR\n        device_class: motion\n      - id: window_reed_switch\n        name: Living Window\n        device_class: window\n      - id: garage_door\n        name: Garage garage\n        device_class: garage_door\n\nsensor:\n  - platform: custom\n    lambda: |-\n      return {ape_analog_input(expander1, 1),  // 1 = A1\n              ape_analog_input(expander1, 2)};\n    sensors:\n      - name: LM35 Living room temperature\n        id: lm35_temp\n        filters:\n          # update every 60s\n          - throttle: 60s\n          # LM35 outputs 0.01v per ÂºC, and 1023 means 3.3 volts\n          - lambda: return x * 330.0 / 1023.0;\n      - name: Analog A2\n        id: analog_a2\n        filters:\n          - throttle: 2s\n```\n\n----------------------------------------\n\nTITLE: Implementing Climate Control Actions in ESPHome\nDESCRIPTION: Action configuration for controlling climate devices, including mode settings, temperature targets, and fan controls.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/climate/index.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- climate.control:\n    id: my_climate\n    mode: HEAT_COOL\n    target_temperature: 25Â°C\n```\n\n----------------------------------------\n\nTITLE: NTC Sensor Configuration with B-Constant in ESPHome\nDESCRIPTION: This configuration snippet demonstrates how to configure an NTC sensor in ESPHome using the B-constant and reference temperature/resistance from the thermistor's datasheet. It defines the sensor platform as `ntc` and provides calibration parameters.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ntc.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n    # Example configuration entry\n    sensor:\n      - platform: ntc\n        # ...\n        calibration:\n          b_constant: 3950\n          reference_temperature: 25Â°C\n          reference_resistance: 10kOhm\n```\n\n----------------------------------------\n\nTITLE: Configuring Sun Automations for Sunrise and Sunset\nDESCRIPTION: Demonstrates how to set up automation triggers for sunrise and sunset events, including the ability to specify custom elevation angles.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sun.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsun:\n  latitude: 48.8584Â°\n  longitude: 2.2945Â°\n\n  on_sunrise:\n    - then:\n        - logger.log: Good morning!\n    # Custom elevation, will be called shortly after the trigger above.\n    - elevation: 5Â°\n      then:\n        - logger.log: Good morning 2!\n\n  on_sunset:\n    - then:\n        - logger.log: Good evening!\n```\n\n----------------------------------------\n\nTITLE: Publishing States to a Template Switch\nDESCRIPTION: Example showing how to publish a state to a template switch from elsewhere in the configuration using the switch.template.publish action, including both direct and templated state values.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/switch/template.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nswitch:\n  - platform: template\n    name: \"Template Switch\"\n    id: template_swi\n\n# in some trigger\non_...:\n  - switch.template.publish:\n      id: template_swi\n      state: ON\n\n  # Templated\n  - switch.template.publish:\n      id: template_swi\n      state: !lambda 'return true;'\n```\n\n----------------------------------------\n\nTITLE: Configuring DHT Sensor in ESPHome Yaml\nDESCRIPTION: The code snippet shows an example configuration entry for integrating DHT sensors (like DHT11 and DHT22) with ESPHome using YAML configuration. It defines the pin connection, temperature and humidity sensor names, and update interval. The configuration prerequisites include having a compatible DHT sensor and ESP device, as well as appropriate external pull-up resistors on the data line. Important parameters include the pin number where the DHT bus is connected, and names for both temperature and humidity sensors.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/dht.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: dht\n    pin: D2\n    temperature:\n      name: \"Living Room Temperature\"\n    humidity:\n      name: \"Living Room Humidity\"\n    update_interval: 60s\n\n```\n\n----------------------------------------\n\nTITLE: Creating Sun Elevation and Azimuth Sensors\nDESCRIPTION: Configures sensor entities to monitor the sun's elevation and azimuth angles, making these values available in the UI.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sun.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: sun\n    name: Sun Elevation\n    type: elevation\n  - platform: sun\n    name: Sun Azimuth\n    type: azimuth\n```\n\n----------------------------------------\n\nTITLE: Defining Lambda Light Effect in YAML\nDESCRIPTION: This snippet allows for custom light effects using lambdas, providing complete control over the light behavior, including state management and color transitions.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/light/index.rst#2025-04-21_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nlight:\n  - platform: ...\n    # ...\n    effects:\n      - lambda:\n          name: My Custom Effect\n          update_interval: 1s\n          lambda: |-\n            static int state = 0;\n            auto call = id(my_light).turn_on();\n            // Transition of 1000ms = 1s\n            call.set_transition_length(1000);\n            if (state == 0) {\n              call.set_rgb(1.0, 1.0, 1.0);\n            } else if (state == 1) {\n              call.set_rgb(1.0, 0.0, 1.0);\n            } else if (state == 2) {\n              call.set_rgb(0.0, 0.0, 1.0);\n            } else {\n              call.set_rgb(1.0, 0.0, 0.0);\n            }\n            call.perform();\n            state += 1;\n            if (state == 4)\n              state = 0;\n```\n\n----------------------------------------\n\nTITLE: Configuring ILI9XXX ST7789V Display for Lilygo T-Embed in ESPHome\nDESCRIPTION: This configuration sets up an ST7789V display for a Lilygo T-Embed board. It rotates the display into landscape mode using hardware rotation, and includes specific dimensions and offsets for the 170x320 pixel display.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/ili9xxx.rst#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ndisplay:\n  - platform: ili9xxx\n    model: st7789v\n    dimensions:\n      height: 170\n      width: 320\n      offset_height: 35\n      offset_width: 0\n    transform:\n      swap_xy: true\n      mirror_x: false\n      mirror_y: true\n    color_order: bgr\n    invert_colors: true\n    data_rate: 80MHz\n    cs_pin: GPIOXX\n    dc_pin: GPIO13\n    reset_pin: GPIO9\n```\n\n----------------------------------------\n\nTITLE: Defining Sensors for MicroNova Platform in YAML\nDESCRIPTION: This YAML snippet configures multiple sensors for the MicroNova platform, such as room temperature, fumes temperature, stove power level, fan speed, water temperature, and pressure. Parameters such as `fan_rpm_offset`, `memory_location`, and `memory_address` allow detailed customization and retrieval of specific data from the stove.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/micronova.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: micronova\n    room_temperature:\n      name: Room temperature\n    fumes_temperature:\n      name: Fumes temperature\n    stove_power:\n      name: Stove power level\n    fan_speed:\n      fan_rpm_offset: 240\n      name: Fan RPM\n    water_temperature:\n      name: Water temperature\n    water_pressure:\n      name: Water pressure\n    memory_address_sensor:\n      memory_location: 0x20\n      memory_address: 0x7d\n      name: Custom Address sensor\n```\n\n----------------------------------------\n\nTITLE: ESPHome OTA Configuration\nDESCRIPTION: Configures the ESPHome OTA platform, enabling remote firmware updates. This example sets a password for OTA updates using a secret.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/ota/esphome.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n    # Example configuration entry\n    ota:\n      - platform: esphome\n        password: !secret ota_password\n```\n\n----------------------------------------\n\nTITLE: Configuring LD2420 Text Sensor for Firmware Version\nDESCRIPTION: Text sensor configuration to retrieve and display the firmware version of the LD2420 module, allowing monitoring of the current firmware.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ld2420.rst#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ntext_sensor:\n  - platform: ld2420\n    fw_version:\n      name: LD2420 Firmware\n```\n\n----------------------------------------\n\nTITLE: ESPHome Multiple Trigger Actions\nDESCRIPTION: Example showing multiple actions executed sequentially on a trigger\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/automations/actions.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\non_press:\n  then:\n    - switch.toggle: dehumidifier1\n    - delay: 2s\n    - switch.toggle: dehumidifier1\n```\n\n----------------------------------------\n\nTITLE: Turning Light On with YAML Configuration in ESPHome\nDESCRIPTION: This YAML configuration shows how to turn on a light, setting its brightness and color parameters, including master brightness, color brightness, and white levels. It highlights that these values are multiplied together to achieve the final light output.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/light/index.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n\"    - light.turn_on:\n        id: light_1\n        brightness: 80%\n        color_brightness: 50%\n        white: 75%\"\n```\n\n----------------------------------------\n\nTITLE: Installing ESPHome via Homebrew on Mac\nDESCRIPTION: Command to install ESPHome using Homebrew package manager on macOS.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/installing_esphome.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ brew install esphome\n```\n\n----------------------------------------\n\nTITLE: Tuya Climate YAML Configuration\nDESCRIPTION: Complete YAML configuration example for setting up a Tuya climate device in ESPHome, including temperature control, HVAC modes, fan speeds, and eco mode settings.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/climate/tuya.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclimate:\\n  - platform: tuya\\n    name: \"My Climate Device\"\\n    switch_datapoint: 1\\n    target_temperature_datapoint: 2\\n    current_temperature_datapoint: 3\\n    supports_heat: true\\n    supports_cool: true\\n    active_state:\\n      datapoint: 102\\n      cooling_value: 0\\n      heating_value: 1\\n      fanonly_value: 2\\n    fan_mode:\\n      datapoint: 103\\n      auto_value: 0\\n      high_value: 1\\n      medium_value: 2\\n      low_value: 3\\n    preset:\\n      eco:\\n        datapoint: 5\\n        temperature: 28\n```\n\n----------------------------------------\n\nTITLE: Optimizing Modbus Communications in ESPHome YAML\nDESCRIPTION: This code snippet demonstrates how to use the `register_count` property to optimize Modbus communications by defining the number of registers to be read. It shows a practical example of reading voltage and current values while using register count to minimize command generation.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/modbus_controller.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- platform: modbus_controller\n  name: \"Voltage Phase 1\"\n  address: 0\n  register_type: \"read\"\n  value_type: FP32\n  register_count: 6\n\n- platform: modbus_controller\n  name: \"Current Phase 1\"\n  address: 6\n  register_type: \"read\"\n  value_type: FP32\n```\n\n----------------------------------------\n\nTITLE: Dynamic Passkey BLE Authentication with Home Assistant Integration\nDESCRIPTION: Advanced configuration for BLE secure connection with dynamic passkey generation. Defines API actions for passkey reply and numeric comparison, sets ESP32 I/O capability to keyboard_display, and configures a BLE client with handlers for various authentication events.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/ble_client.rst#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\napi:\n  actions:\n    - action: passkey_reply\n      variables:\n        passkey: int\n      then:\n        - logger.log: \"Authenticating with passkey\"\n        - ble_client.passkey_reply:\n            id: my_ble_client\n            passkey: !lambda return passkey;\n    - action: numeric_comparison_reply\n      variables:\n        accept: bool\n      then:\n        - logger.log: \"Authenticating with numeric comparison\"\n        - ble_client.numeric_comparison_reply:\n            id: my_ble_client\n            accept: !lambda return accept;\n\nesp32_ble:\n  io_capability: keyboard_display\n\nesp32_ble_tracker:\n\nble_client:\n  - mac_address: XX:XX:XX:XX:XX:XX\n    id: my_ble_client\n    on_passkey_request:\n      then:\n        - logger.log: \"Enter the passkey displayed on your BLE device\"\n        - logger.log: \" Go to https://my.home-assistant.io/redirect/developer_services/ and select passkey_reply\"\n    on_passkey_notification:\n      then:\n        - logger.log:\n            format: \"Enter this passkey on your BLE device: %06d\"\n            args: [ passkey ]\n    on_numeric_comparison_request:\n      then:\n        - logger.log:\n            format: \"Compare this passkey with the one on your BLE device: %06d\"\n            args: [ passkey ]\n        - logger.log: \" Go to https://my.home-assistant.io/redirect/developer_services/ and select numeric_comparison_reply\"\n    on_connect:\n      then:\n        - logger.log: \"Connected\"\n```\n\n----------------------------------------\n\nTITLE: Defining Strobe Light Effect in YAML\nDESCRIPTION: This snippet cycles through specified colors with defined durations, allowing customization of the brightness and color values for the strobe effect.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/light/index.rst#2025-04-21_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nlight:\n  - platform: ...\n    # ...\n    effects:\n      - strobe:\n      - strobe:\n          name: Strobe Effect With Custom Values\n          colors:\n            - state: true\n              brightness: 100%\n              red: 100%\n              green: 90%\n              blue: 0%\n              duration: 500ms\n            - state: false\n              duration: 250ms\n            - state: true\n              brightness: 100%\n              red: 0%\n              green: 100%\n              blue: 0%\n              duration: 500ms\n```\n\n----------------------------------------\n\nTITLE: Configuring I2S Audio Media Player in ESPHome - YAML\nDESCRIPTION: This YAML snippet demonstrates configuring an IÂ²S audio platform as a media player with ESPHome. It specifies the use of an external DAC and sets parameters like the GPIO pin for the IÂ²S data output and the audio mode. It is essential for setting up media playback on ESP32 devices.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/media_player/i2s_audio.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmedia_player:\\n  - platform: i2s_audio\\n    name: ESPHome I2S Media Player\\n    dac_type: external\\n    i2s_dout_pin: GPIOXX\\n    mode: mono\n```\n\n----------------------------------------\n\nTITLE: Checking WiFi Connection Status in ESPHome\nDESCRIPTION: YAML configuration for using the wifi.connected condition in ESPHome. This condition checks if the WiFi client is currently connected to a station.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/wifi.rst#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  if:\n    condition:\n      wifi.connected:\n    then:\n      - logger.log: WiFi is connected!\n```\n\n----------------------------------------\n\nTITLE: Configuring Voice Assistant in YAML\nDESCRIPTION: Basic YAML configuration for setting up a Voice Assistant in ESPHome. It includes required microphone setup and optional speaker configuration.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/voice_assistant.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmicrophone:\n  - platform: ...\n    id: mic_id\n\nvoice_assistant:\n  microphone: mic_id\n```\n\n----------------------------------------\n\nTITLE: Configuring Home Assistant Switch in ESPHome\nDESCRIPTION: Example configuration for creating an ESPHome switch that imports and controls a Home Assistant entity. The switch requires an entity_id parameter to link with a specific Home Assistant entity, and supports standard switch configuration options.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/switch/homeassistant.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nswitch:\n  - platform: homeassistant\n    id: my_cool_switch_from_ha\n    entity_id: switch.my_cool_switch\n```\n\n----------------------------------------\n\nTITLE: PN7150 IÂ²C Configuration\nDESCRIPTION: This YAML snippet configures the PN7150 component in ESPHome using IÂ²C. It defines the pins connected to the PN7150's DWL_REQ, IRQ, VEN, and WKUP_REQ lines, sets the emulation message, and specifies the tag TTL (time-to-live).\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/pn7150.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npn7150_i2c:\n  dwl_req_pin: GPIOXX\n  irq_pin: GPIOXX\n  ven_pin: GPIOXX\n  wkup_req_pin: GPIOXX\n  emulation_message: https://www.home-assistant.io/tag/pulse_ce\n  tag_ttl: 1000ms\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple SPI Controllers in ESPHome\nDESCRIPTION: Advanced configuration example showing how to set up three SPI controllers, including a quad SPI implementation with different interface types.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/spi.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry - three controllers, one using quad SPI\nspi:\n  - id: spi_bus0\n    clk_pin: GPIOXX\n    mosi_pin: GPIOXX\n    miso_pin: GPIOXX\n    interface: hardware\n  - id: spi_bus1\n    clk_pin: GPIOXX\n    mosi_pin: GPIOXX\n    miso_pin: GPIOXX\n    interface: any\n  - id: quad_spi_bus\n    type: quad\n    clk_pin: GPIOXX\n    data_pins:\n      - GPIOXX\n      - GPIOXX\n      - GPIOXX\n      - GPIOXX\n```\n\n----------------------------------------\n\nTITLE: Configuring GT911 Touchscreen in YAML for ESPHome\nDESCRIPTION: This snippet shows the basic configuration for setting up a GT911 touchscreen in ESPHome. It includes the platform specification, ID assignment, and interrupt pin configuration.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/touchscreen/gt911.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntouchscreen:\n  platform: gt911\n  id: my_touchscreen\n  interrupt_pin: GPIOXX\n```\n\n----------------------------------------\n\nTITLE: Defining Acceleration Sensors Configuration\nDESCRIPTION: This snippet outlines how to define acceleration sensors for each axis (X, Y, Z) using the MSA301 or MSA311 platform. It allows for the identification of acceleration values in a human-readable name format for each axis.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/msa3xx.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n\"sensor:\\n  - platform: msa3xx\\n    acceleration_x: Accel X\\n    acceleration_y: Accel Y\\n    acceleration_z: Accel Z\"\n```\n\n----------------------------------------\n\nTITLE: Configuring RGBCT Light in ESPHome YAML\nDESCRIPTION: This YAML snippet demonstrates how to set up an RGBCT light in ESPHome. It specifies the platform, name, and output components for each channel (red, green, blue, color temperature, and white brightness). It also includes settings for cold and warm white color temperatures.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/light/rgbct.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nlight:\n  - platform: rgbct\n    name: \"Livingroom Lights\"\n    red: output_component1\n    green: output_component2\n    blue: output_component3\n    color_temperature: output_component4\n    white_brightness: output_component5\n    cold_white_color_temperature: 153 mireds\n    warm_white_color_temperature: 500 mireds\n```\n\n----------------------------------------\n\nTITLE: Basic WireGuard Configuration in ESPHome\nDESCRIPTION: Example YAML configuration for setting up a WireGuard VPN tunnel with essential parameters including address, keys, and peer settings.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/wireguard.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwireguard:\n  address: x.y.z.w\n  private_key: AaBbCcDd...=\n  peer_endpoint: wg.server.example\n  peer_public_key: EeFfGgHh...=\n\n  # Optional netmask (this is the default, no outgoing traffic \n  # will pass through the tunnel if omitted)\n  netmask: 255.255.255.255\n\n  # Optional endpoint port (WireGuard default if omitted)\n  peer_port: 51820\n\n  # Optional pre-shared key (omit if not in use)\n  peer_preshared_key: XxYyZzWw...=\n\n  # Optional list of ip/mask (any host is allowed if omitted)\n  peer_allowed_ips:\n    - x.y.z.0/24\n    - l.m.n.o/32  # the /32 can be omitted for single host\n    - [...]\n\n  # Optional keepalive (disabled by default)\n  peer_persistent_keepalive: 25s\n```\n\n----------------------------------------\n\nTITLE: Configuring ST7567 Display with IÂ²C Interface\nDESCRIPTION: Basic configuration for ST7567 display using IÂ²C communication, including display initialization and periodic refresh to prevent glitches. Sets up IÂ²C pins and includes a simple Hello World example.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/st7567.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example minimal configuration entry\ni2c:\n  sda: D1\n  scl: D2\n\ndisplay:\n  - platform: st7567_i2c\n    id: my_display\n    lambda: |-\n      it.print(0, 0, id(my_font), \"Hello World!\");\n\ninterval:\n  - interval: 1h\n    then:\n      - lambda: id(my_display).request_refresh();\n```\n\n----------------------------------------\n\nTITLE: Configuring BMP3xx Sensor with I2C Interface in ESPHome\nDESCRIPTION: Example configuration for connecting a BMP388/BMP390 sensor via I2C. Sets up temperature and pressure monitoring with customizable oversampling and update intervals.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/bmp3xx.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry for I2C connection\nsensor:\n  - platform: bmp3xx_i2c\n    temperature:\n      name: \"Outside Temperature\"\n      oversampling: 16x\n    pressure:\n      name: \"Outside Pressure\"\n    address: 0x77\n    update_interval: 60s\n```\n\n----------------------------------------\n\nTITLE: Configuring ESPHome Boot Screen with LVGL\nDESCRIPTION: Creates a boot screen with logo and spinner animation that automatically disappears after a delay or on touch. Uses top layer for overlay effect and includes image loading and spinner configuration.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/cookbook/lvgl.rst#2025-04-21_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nesphome:\n  ...\n  on_boot:\n    - delay: 5s\n    - lvgl.widget.hide: boot_screen\n\nimage:\n  - file: https://esphome.io/_static/favicon-512x512.png\n    id: boot_logo\n    resize: 200x200\n    type: RGB565\n    use_transparency: alpha_channel\n\nlvgl:\n  ...\n  top_layer:\n    widgets:\n      ... # make sure it's the last one in this list:\n      - obj:\n          id: boot_screen\n          x: 0\n          y: 0\n          width: 100%\n          height: 100%\n          bg_color: 0xffffff\n          bg_opa: COVER\n          radius: 0\n          pad_all: 0\n          border_width: 0\n          widgets:\n            - image:\n                align: CENTER\n                src: boot_logo\n                y: -40\n            - spinner:\n                align: CENTER\n                y: 95\n                height: 50\n                width: 50\n                spin_time: 1s\n                arc_length: 60deg\n                arc_width: 8\n                indicator:\n                  arc_color: 0x18bcf2\n                  arc_width: 8\n          on_press:\n            - lvgl.widget.hide: boot_screen\n```\n\n----------------------------------------\n\nTITLE: Configuring ESP32 Camera for TTGO-Camera Mini\nDESCRIPTION: This YAML snippet configures an ESP32 camera for the TTGO-Camera Mini. It sets up the external clock, I2C pins, data pins, and control pins specific to this compact camera module.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/esp32_camera.rst#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nesp32_camera:\n  external_clock:\n    pin: GPIO32\n    frequency: 20MHz\n  i2c_pins:\n    sda: GPIO13\n    scl: GPIO12\n  data_pins: [GPIO5, GPIO14, GPIO4, GPIO15, GPIO37, GPIO38, GPIO36, GPIO39]\n  vsync_pin: GPIO27\n  href_pin: GPIO25\n  pixel_clock_pin: GPIO19\n\n  # Image settings\n  name: My Camera\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Kuntze Sensor with ESPHome\nDESCRIPTION: This snippet demonstrates how to configure the Kuntze pool monitor sensor in ESPHome using YAML. It leverages the ModBUS protocol for communication and includes configuration options for various sensor values like pH and temperature. Dependencies include a configured Modbus component and an RS485 transceiver for UART communication with ESPHome.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/kuntze.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: kuntze\n    id: my_kuntze\n    ph:\n      id: ph\n    temperature:\n      id: temperature\n```\n\n----------------------------------------\n\nTITLE: Binary Sensor Filters Configuration\nDESCRIPTION: Example showing various filter configurations for binary sensors including invert, delayed triggers, autorepeat and lambda filters.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/index.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nbinary_sensor:\n  - platform: ...\n    # ...\n    filters:\n      - invert:\n      - delayed_on: 100ms\n      - delayed_off: 100ms\n      # Templated, delays for 1s (1000ms) only if a reed switch is active\n      - delayed_on_off: !lambda \"if (id(reed_switch).state) return 1000; else return 0;\"\n      - delayed_on_off:\n          time_on: 10s\n          time_off: !lambda \"if (id(reed_switch).state) return 1000; else return 0;\"\n      - autorepeat:\n        - delay: 1s\n          time_off: 100ms\n          time_on: 900ms\n        - delay: 5s\n          time_off: 100ms\n          time_on: 400ms\n      - lambda: |-\n          if (id(other_binary_sensor).state) {\n            return x;\n          } else {\n            return {};\n          }\n```\n\n----------------------------------------\n\nTITLE: Configuring PMSA003I Sensor in ESPHome (YAML)\nDESCRIPTION: This YAML configuration snippet allows you to define the settings for the PMSA003I particulate matter sensor in your ESPHome project. It includes the necessary parameters for measuring various particle sizes, such as PM1.0, PM2.5, and PM10.0. Each parameter is optional and can be adjusted based on user preferences for data collection.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/pmsa003i.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"sensor:\\n  - platform: pmsa003i\\n    pm_1_0:\\n      name: \\\"PM1.0\\\"\\n    pm_2_5:\\n      name: \\\"PM2.5\\\"\\n    pm_10_0:\\n      name: \\\"PM10.0\\\"\\n    pmc_0_3:\\n      name: \\\"PMC >0.3Âµm\\\"\\n    pmc_0_5:\\n      name: \\\"PMC >0.5Âµm\\\"\\n    pmc_1_0:\\n      name: \\\"PMC >1Âµm\\\"\\n    pmc_2_5:\\n      name: \\\"PMC >2.5Âµm\\\"\\n    pmc_5_0:\\n      name: \\\"PMC >5Âµm\\\"\\n    pmc_10_0:\\n      name: \\\"PMC >10Âµm\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Advanced BME680 BSEC Configuration in ESPHome\nDESCRIPTION: This YAML snippet shows an advanced configuration for the BME680 sensor using BSEC in ESPHome. It includes all available sensors and optional settings, demonstrating how to set up multiple parameters like ID, address, temperature offset, and sampling rates.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/bme680_bsec.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nbme680_bsec:\n    id: bme680_internal\n    address: 0x76\n    temperature_offset: 0\n    iaq_mode: static\n    supply_voltage: 3.3V\n    sample_rate: ulp\n    state_save_interval: 6h\n\nsensor:\n```\n\n----------------------------------------\n\nTITLE: Modbus Server Configuration Example\nDESCRIPTION: This snippet demonstrates how to set up a Modbus controller acting as a server to allow client devices to read sensor values from this ESPHome node. It defines UART settings and registers for communication.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/modbus_controller.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nuart:\n  - id: uart_modbus_client\n    tx_pin: 32\n    rx_pin: 34\n  - id: uart_modbus_server\n    tx_pin: 25\n    rx_pin: 35\n\nmodbus:\n  - uart_id: uart_modbus_client\n    id: modbus_client\n  - uart_id: uart_modbus_server\n    id: modbus_server\n    role: server\n\nmodbus_controller:\n  - id: modbus_evse\n    modbus_id: modbus_client\n    address: 0x2\n    update_interval: 5s\n  - modbus_id: modbus_server\n    address: 0x4\n    server_registers:\n      - address: 0x0002\n        value_type: S_DWORD_R\n        read_lambda: |-\n          return id(evse_voltage_l1).state;\n\nsensor:\n  - platform: modbus_controller\n    id: evse_voltage_l1\n    modbus_controller_id: modbus_evse\n    name: \"EVSE voltage L1\"\n    register_type: holding\n    address: 0x0000\n    device_class: voltage\n    value_type: S_DWORD_R\n    accuracy_decimals: 1\n    unit_of_measurement: V\n    filters:\n      - multiply: 0.1\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP2515 CAN Bus in ESPHome\nDESCRIPTION: Example configuration for setting up an MCP2515 CAN bus interface with ESPHome. Includes setup for handling CAN frames with specific IDs and controlling lights based on received data. Demonstrates both basic configuration and lambda function usage for data processing.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/canbus/mcp2515.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncanbus:\n  - platform: mcp2515\n    cs_pin: GPIOXX\n    can_id: 4\n    bit_rate: 50kbps\n    on_frame:\n    - can_id: 500\n        then:\n        - lambda: |-\n            std::string b(x.begin(), x.end());\n            ESP_LOGD(\"canid 500\", \"%s\", &b[0] );\n        - light.turn_off: light_1\n    - can_id: 501\n        then:\n        - light.turn_on:\n            id: light_1\n            brightness: !lambda \"return (x.size() > 0) ? (float) x[0]/255 : 0;\"\n```\n\n----------------------------------------\n\nTITLE: Basic ESP32 Improv Configuration Example\nDESCRIPTION: Example YAML configuration for setting up the esp32_improv component with a required authorizer binary sensor.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/esp32_improv.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nwifi:\n  # ...\n\nesp32_improv:\n  authorizer: binary_sensor_id\n```\n\n----------------------------------------\n\nTITLE: Basic OpenTherm PID Thermostat Configuration\nDESCRIPTION: This example configures a basic thermostat for a boiler with a single central heating circuit and domestic hot water. It includes sensors for temperature and modulation level, binary sensors for boiler status, a switch to enable central heating, and a PID climate controller for temperature regulation.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/opentherm.rst#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n# A basic thremostat for a boiler with a single central heating circuit and\n# domestic hot water. It reports the flame, CH and DHW status, similar to what\n# you would expect to see on a thermostat and also reports the internal boiler\n# temperatures and the current modulation level. The temperature is regulated\n# through a PID Climate controller and the current room temperature is retrieved\n# from a sensor in Home Asisstant.\n\n# This configuration should meet most needs and is the recommended starting\n# point if you just want a thermostat with an external temperature sensor.\n\nopentherm:\n  in_pin: GPIOXX\n  out_pin: GPIOXX\n  dhw_enable: true    # Note that when we specify an input in hub config with a static value, it can't be\n                      # changed without uploading new firmware. If you want to be able to turn things on or off,\n                      # use a switch (see the ch_enable switch below).\n                      # Also note that when we define an input as a switch (or use other platform), we don't need\n                      # to set it at hub level.\n\noutput:\n  - platform: opentherm\n    t_set:\n      id: t_set\n      min_value: 20\n      max_value: 65\n      zero_means_zero: true\n\nsensor:\n  - platform: opentherm\n    rel_mod_level:\n      name: \"Boiler Relative modulation level\"\n    t_boiler:\n      name: \"Boiler water temperature\"\n    t_ret:\n      name: \"Boiler Return water temperature\"\n\n  - platform: homeassistant\n    id: ch_room_temperature\n    entity_id: sensor.temperature\n    filters:\n      # Push room temperature every second to update PID parameters\n      - heartbeat: 1s\n\nbinary_sensor:\n  - platform: opentherm\n    ch_active:\n      name: \"Boiler Central Heating active\"\n    dhw_active:\n      name: \"Boiler Domestic Hot Water active\"\n    flame_on:\n      name: \"Boiler Flame on\"\n    fault_indication:\n      name: \"Boiler Fault indication\"\n      entity_category: diagnostic\n    diagnostic_indication:\n      name: \"Boiler Diagnostic event\"\n      entity_category: diagnostic\n\nswitch:\n  - platform: opentherm\n    ch_enable:\n      name: \"Boiler Central Heating enabled\"\n      restore_mode: RESTORE_DEFAULT_ON\n\nclimate:\n  - platform: pid\n    name: \"Central heating\"\n    heat_output: t_set\n    default_target_temperature: 20\n    sensor: ch_room_temperature\n    control_parameters:\n      kp: 0.4\n      ki: 0.004\n```\n\n----------------------------------------\n\nTITLE: Configuring Template Binary Sensor with Condition Expression\nDESCRIPTION: Example configuration using a condition expression to create a binary sensor that monitors engine RPM.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/template.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nbinary_sensor:\n  - platform: template\n    id: engine_running\n    condition:\n      sensor.in_range:\n        id: engine_rpm\n        above: 300.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Dual-Point Thermostat Control in ESPHome\nDESCRIPTION: YAML configuration for a dual-point thermostat controller that can both heat and cool. Includes temperature sensor, cooling/heating timing parameters, and preset temperature ranges.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/climate/thermostat.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclimate:\n  - platform: thermostat\n    name: \"Thermostat Climate Controller\"\n    sensor: my_temperature_sensor\n    min_cooling_off_time: 300s\n    min_cooling_run_time: 300s\n    min_heating_off_time: 300s\n    min_heating_run_time: 300s\n    min_idle_time: 30s\n    cool_action:\n      - switch.turn_on: air_cond\n    heat_action:\n      - switch.turn_on: heater\n    idle_action:\n      - switch.turn_off: air_cond\n      - switch.turn_off: heater\n    default_preset: Home\n    preset:\n      - name: Home\n        default_target_temperature_low: 20 Â°C\n        default_target_temperature_high: 22 Â°C\n```\n\n----------------------------------------\n\nTITLE: Configuring STM32 Firmware Update for Shelly Dimmer 2\nDESCRIPTION: This YAML configuration enables automatic firmware updating for the STM32 co-processor in the Shelly Dimmer 2. It specifies the firmware version and sets the update flag to true.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/light/shelly_dimmer.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nfirmware:\n  version: \"51.6\" #<-- set version here\n  update: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Sensor Filters in YAML\nDESCRIPTION: This snippet showcases various filters that can be applied to sensor values in ESPHome. Filters modify the sensor readings before they are published, enabling enhancements like offset adjustments and moving averages.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/index.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Example filters:\nfilters:\n  - offset: 2.0\n  - multiply: !lambda return 1.2;\n  - calibrate_linear:\n      - 0.0 -> 0.0\n      - 40.0 -> 45.0\n      - 100.0 -> 102.5\n  - filter_out:\n      - 42.0\n      - 43.0\n  - median:\n      window_size: 5\n      send_every: 5\n      send_first_at: 1\n  - quantile:\n      window_size: 5\n      send_every: 5\n      send_first_at: 1\n      quantile: .9\n  - sliding_window_moving_average:\n      window_size: 15\n      send_every: 15\n  - exponential_moving_average:\n      alpha: 0.1\n      send_every: 15\n  - throttle: 1s\n  - throttle_average: 1s\n  - heartbeat: 5s\n  - debounce: 0.1s\n  - timeout: 1min\n  - delta: 5.0\n  - or:\n    - throttle: 1s\n    - delta: 5.0\n  - lambda: return x * (9.0/5.0) + 32.0;\n```\n\n----------------------------------------\n\nTITLE: Home Assistant Integration Configuration\nDESCRIPTION: Complete configuration example showing integration with Home Assistant including SMS handling, call management, and USSD code support.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sim800l.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napi:\n  actions:\n    - action: send_sms\n      variables:\n        recipient: string\n        message: string\n      then:\n        - sim800l.send_sms:\n            recipient: !lambda 'return recipient;'\n            message: !lambda 'return message;'\n    - action: dial\n      variables:\n        recipient: string\n      then:\n        - sim800l.dial:\n            recipient: !lambda 'return recipient;'\n    - action: connect\n      then:\n        - sim800l.connect\n    - action: disconnect\n      then:\n        - sim800l.disconnect\n    - action: send_ussd\n      variables:\n        ussdCode: string\n      then:\n        - sim800l.send_ussd:\n            ussd: !lambda 'return ussdCode;'\n\ntext_sensor:\n  - platform: template\n    id: sms_sender\n    name: \"Sms Sender\"\n  - platform: template\n    id: sms_message\n    name: \"Sms Message\"\n  - platform: template\n    id: caller_id_text_sensor\n    name: \"Caller ID\"\n  - platform: template\n    id: ussd_message\n    name: \"Ussd Code\"\n```\n\n----------------------------------------\n\nTITLE: Homeassistant Action Configuration in ESPHome\nDESCRIPTION: Configuration for triggering Home Assistant actions from ESPHome automations. Includes examples of simple actions, and more complex ones with templates and variables.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/api.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# In some trigger\non_...:\n  # Simple\n  - homeassistant.action:\n      action: notify.html5\n      data:\n        message: Button was pressed\n  # With templates and variables\n  - homeassistant.action:\n      action: notify.html5\n      data:\n        title: New Humidity\n      data_template:\n        message: The humidity is {{ my_variable }}%.\n      variables:\n        my_variable: |-\n          return id(my_sensor).state;\n```\n\n----------------------------------------\n\nTITLE: CAN Bus Cover Control Configuration in ESPHome\nDESCRIPTION: Complex configuration for a cover control system using CAN bus communication between three nodes. Handles various button states (press, release, long press, double-click) and controls a motor through CAN messages.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/canbus/index.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncanbus:\n  - platform: ...\n    id: my_canbus\n    can_id: 4\n    bit_rate: 125kbps\n    on_frame:\n      - can_id: 0x50c\n        then:\n          - lambda: |-\n              if(x.size() > 0) {\n                auto call = id(TestCover).make_call();\n                switch(x[0]) {\n                  case 0x2: call.set_command_open(); call.perform(); break; // long press\n                  case 0x1:                                                 // button press\n                  case 0x3: call.set_command_stop(); call.perform(); break; // long release\n                  case 0x4: call.set_position(1.0); call.perform(); break;  // double-click\n                }\n              }\n      - can_id: 0x50b\n        then:\n          - lambda: |-\n              if(x.size() > 0) {\n                auto call = id(TestCover).make_call();\n                switch(x[0]) {\n                  case 0x2: call.set_command_close(); call.perform(); break; // long press\n                  case 0x1:                                                  // button press\n                  case 0x3: call.set_command_stop(); call.perform(); break;  // long release\n                  case 0x4: call.set_position(0.0); call.perform(); break;   // double-click\n                }\n              }\n\ncover:\n  - platform: time_based\n    name: Canbus Test Cover\n    id: TestCover\n    device_class: shutter\n    has_built_in_endstop: true\n    open_action:\n      - canbus.send:\n          data: [ 0x01 ]\n          canbus_id: my_canbus\n          can_id: 0x51A\n    open_duration: 2min\n    close_action:\n      - canbus.send:\n          data: [ 0x02 ]\n          canbus_id: my_canbus\n          can_id: 0x51A\n    close_duration: 2min\n    stop_action:\n      - canbus.send:\n          data: [ 0x00 ]\n          canbus_id: my_canbus\n          can_id: 0x51A\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple VL53L0X Sensors on the Same IÂ²C Bus in ESPHome (YAML)\nDESCRIPTION: Example configuration for setting up multiple VL53L0X sensors on the same IÂ²C bus. Each sensor requires a unique address and enable pin for proper operation. This configuration also sets custom update intervals and measurement units.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/vl53l0x.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Muliple VL53L0X sensors on same i2c bus\n# Example configuration entry\nsensor:\n  - platform: vl53l0x\n    name: \"distance1\"\n    id: distance1\n    address: 0x41\n    enable_pin: GPIOXX\n    timeout: 200us\n    update_interval: 500ms\n    unit_of_measurement: \"m\"\n\n  - platform: vl53l0x\n    name: \"distance2\"\n    id: distance2\n    address: 0x42\n    enable_pin: GPIOXX\n    timeout: 200us\n    update_interval: 500ms\n    unit_of_measurement: \"m\"\n```\n\n----------------------------------------\n\nTITLE: Multi-User Xiaomi Miscale Configuration in YAML\nDESCRIPTION: Advanced configuration example for multiple users with weight range detection and separate tracking of weight and impedance measurements for each user. Includes template sensors for individual user data.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/xiaomi_miscale.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: xiaomi_miscale\n    mac_address: XX:XX:XX:XX:XX:XX\n    weight:\n      name: \"Xiaomi Mi Scale Weight\"\n      id: weight_miscale\n      on_value:\n        then:\n          - lambda: |-\n              if (id(weight_miscale).state >= 69 && id(weight_miscale).state <= 74.49) {\n                return id(weight_user1).publish_state(x);}\n              else if (id(weight_miscale).state >= 74.50 && id(weight_miscale).state <= 83) {\n                return id(weight_user2).publish_state(x);}\n\n    impedance:\n      name: \"Xiaomi Mi Scale Impedance\"\n      id: impedance_miscale\n      on_value:\n        then:\n          - lambda: |-\n              if (id(weight_miscale).state >= 69 && id(weight_miscale).state <= 74.49) {\n                return id(impedance_user1).publish_state(x);}\n              else if (id(weight_miscale).state >= 74.50 && id(weight_miscale).state <= 83) {\n                return id(impedance_user2).publish_state(x);}\n\n  - platform: template\n    name: Weight AurÃ©lien\n    id: weight_user1\n    unit_of_measurement: 'kg'\n    icon: mdi:weight-kilogram\n    accuracy_decimals: 2\n  - platform: template\n    name: Impedance AurÃ©lien\n    id: impedance_user1\n    unit_of_measurement: 'Î©'\n    icon: mdi:omega\n    accuracy_decimals: 0\n  - platform: template\n    name: Weight Siham\n    id: weight_user2\n    unit_of_measurement: 'kg'\n    icon: mdi:weight-kilogram\n    accuracy_decimals: 2\n  - platform: template\n    name: Impedance Siham\n    id: impedance_user2\n    unit_of_measurement: 'Î©'\n    icon: mdi:omega\n    accuracy_decimals: 0\n```\n\n----------------------------------------\n\nTITLE: Three Valve Sprinkler with Pump Configuration in ESPHome\nDESCRIPTION: Complete YAML configuration for a three-valve sprinkler system with a single pump.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sprinkler.rst#2025-04-21_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nesphome:\n    name: esp-sprinkler-controller\n\nesp32:\n    board: featheresp32\n\nwifi:\n    ssid: \"wifi_ssid\"\n    password: \"wifi_password\"\n\nlogger:\n\nsprinkler:\n  - id: lawn_sprinkler_ctrlr\n    main_switch: \"Lawn Sprinklers\"\n    auto_advance_switch: \"Lawn Sprinklers Auto Advance\"\n    reverse_switch: \"Lawn Sprinklers Reverse\"\n    valve_open_delay: 5s\n    valves:\n      - valve_switch: \"Front Lawn\"\n        enable_switch: \"Enable Front Lawn\"\n        pump_switch_id: sprinkler_pump_sw\n        run_duration: 900s\n        valve_switch_id: lawn_sprinkler_valve_sw0\n      - valve_switch: \"Side Lawn\"\n        enable_switch: \"Enable Side Lawn\"\n        pump_switch_id: sprinkler_pump_sw\n        run_duration: 900s\n        valve_switch_id: lawn_sprinkler_valve_sw1\n      - valve_switch: \"Back Lawn\"\n```\n\n----------------------------------------\n\nTITLE: Configuring BMI160 Sensor in ESPHome\nDESCRIPTION: YAML configuration example for setting up a BMI160 sensor with acceleration, gyroscope, and temperature measurements. Shows how to configure all sensor axes and set update intervals using the ESPHome platform.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/bmi160.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: bmi160\n    address: 0x68\n    update_interval: 60s\n    acceleration_x:\n      name: \"BMI160 Accel X\"\n    acceleration_y:\n      name: \"BMI160 Accel Y\"\n    acceleration_z:\n      name: \"BMI160 Accel z\"\n    gyroscope_x:\n      name: \"BMI160 Gyro X\"\n    gyroscope_y:\n      name: \"BMI160 Gyro Y\"\n    gyroscope_z:\n      name: \"BMI160 Gyro z\"\n    temperature:\n      name: \"BMI160 Temperature\"\n```\n\n----------------------------------------\n\nTITLE: Implementing WiFi Connection Triggers in ESPHome\nDESCRIPTION: YAML configuration for setting up on_connect and on_disconnect triggers in ESPHome. These triggers can be used to perform actions when WiFi connection is established or lost.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/wifi.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nwifi:\n  # ...\n  on_connect:\n    - switch.turn_on: switch1\n  on_disconnect:\n    - switch.turn_off: switch1\n```\n\n----------------------------------------\n\nTITLE: Base Configuration for MQTT Component\nDESCRIPTION: This YAML configuration provides a base setup for components using MQTT in ESPHome, including options for QoS, retain messages, and manual discovery settings.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/mqtt.rst#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nname: \"Component Name\"\n# Optional variables:\nqos: 1\nretain: true\navailability:\n  topic: livingroom/status\n  payload_available: online\n  payload_not_available: offline\nstate_topic: livingroom/custom_state_topic\ncommand_topic: livingroom/custom_command_topic\ncommand_retain: false\n```\n\n----------------------------------------\n\nTITLE: Extending Configuration with ESPHome Packages\nDESCRIPTION: This snippet demonstrates how to extend existing configurations within a package by using the `!extend` directive. It allows developers to modify or add additional settings, such as changing the update interval of a shared sensor component.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/packages.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# In common.yaml\ncaptive_portal:\n\nsensor:\n  - platform: uptime\n    id: uptime_sensor\n    update_interval: 1min\n```\n\nLANGUAGE: yaml\nCODE:\n```\npackages:\n  common: !include common.yaml\n\nsensor:\n  - id: !extend uptime_sensor\n    update_interval: 10s\n```\n\n----------------------------------------\n\nTITLE: Basic ILI9xxx Display Configuration in YAML\nDESCRIPTION: Minimal configuration for setting up an ILI9341 display with required pins and basic display options.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/ili9xxx.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndisplay:\n  - platform: ili9xxx\n    model: ili9341\n    dc_pin: GPIOXX\n    reset_pin: GPIOXX\n    invert_colors: false\n    show_test_card: true\n```\n\n----------------------------------------\n\nTITLE: Defining Addressable Rainbow Effect in YAML\nDESCRIPTION: This snippet creates a rainbow effect for individually-addressable LEDs with configurable speed and width parameters to define the visual output.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/light/index.rst#2025-04-21_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nlight:\n  - platform: ...\n    # ...\n    effects:\n      - addressable_rainbow:\n      - addressable_rainbow:\n          name: Rainbow Effect With Custom Values\n          speed: 10\n          width: 50\n```\n\n----------------------------------------\n\nTITLE: Basic ESPHome Waveshare E-Paper Display Configuration\nDESCRIPTION: Basic configuration example for setting up a Waveshare E-Paper display with ESPHome, including font, SPI, and display settings.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/waveshare_epaper.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nfont:\n  - file: 'fonts/Comic Sans MS.ttf'\n    id: font1\n    size: 8\n\nspi:\n  clk_pin: D0\n  mosi_pin: D1\n\ndisplay:\n  - platform: waveshare_epaper\n    cs_pin: D2\n    dc_pin: D3\n    busy_pin: D4\n    reset_pin: D5\n    model: 2.90in\n    full_update_every: 30\n    lambda: |-\n      it.print(0, 0, id(font1), \"Hello World!\");\n```\n\n----------------------------------------\n\nTITLE: Setting Addressable Light Range with YAML in ESPHome\nDESCRIPTION: This YAML configuration demonstrates setting a range of LEDs on an addressable light to a specific color using the `light.addressable_set` action. It specifies the light's ID, the start and end of the LED range, and the RGB color values.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/light/index.rst#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n\"    on_...:\n      - light.addressable_set:\n          id: my_light\n          range_from: 0\n          range_to: 50\n          red: 100%\n          green: 0%\n          blue: 0%\"\n```\n\n----------------------------------------\n\nTITLE: Basic ESPHome Ultrasonic Sensor Configuration\nDESCRIPTION: Basic YAML configuration for setting up an ultrasonic distance sensor in ESPHome. Demonstrates the minimum required configuration including trigger pin, echo pin, and sensor name.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ultrasonic.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: ultrasonic\n    trigger_pin: D1\n    echo_pin: D2\n    name: \"Ultrasonic Sensor\"\n```\n\n----------------------------------------\n\nTITLE: Configuring RMII Ethernet Chips in ESPHome\nDESCRIPTION: Example configuration for RMII-based Ethernet chips like LAN8720, showing basic setup with pin configuration and optional manual IP addressing.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/ethernet.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry for RMII chips\nethernet:\n  type: LAN8720\n  mdc_pin: GPIOXX\n  mdio_pin: GPIOXX\n  clk_mode: GPIO0_IN\n  phy_addr: 0\n\n  # Optional manual IP\n  manual_ip:\n    static_ip: 10.0.0.42\n    gateway: 10.0.0.1\n    subnet: 255.255.255.0\n```\n\n----------------------------------------\n\nTITLE: Configuring HTU21D Sensor with Temperature & Humidity\nDESCRIPTION: This YAML snippet demonstrates how to set up the HTU21D temperature and humidity sensor in an ESPHome configuration. The configuration specifies the sensor platform, model, and labels for temperature, humidity, and heater functionalities. It includes optional parameters for customizing the sensor behavior.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/htu21d.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"    # Example configuration entry\\n    sensor:\\n      - platform: htu21d\\n        model: htu21d\\n        temperature:\\n          name: \\\"Temperature\\\"\\n        humidity:\\n          name: \\\"Humidity\\\"\\n        heater:\\n          name: \\\"Heater\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring ESP32 Camera for Wrover Kit Boards\nDESCRIPTION: This YAML snippet provides a configuration for ESP32 cameras on Wrover Kit boards. It specifies the external clock settings, I2C pins, data pins, and control pins for the camera interface.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/esp32_camera.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nesp32_camera:\n  external_clock:\n    pin: GPIO21\n    frequency: 20MHz\n  i2c_pins:\n    sda: GPIO26\n    scl: GPIO27\n  data_pins: [GPIO4, GPIO5, GPIO18, GPIO19, GPIO36, GPIO39, GPIO34, GPIO35]\n  vsync_pin: GPIO25\n  href_pin: GPIO23\n  pixel_clock_pin: GPIO22\n\n  # Image settings\n  name: My Camera\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Example Configuration for Modbus and UART Setup - YAML\nDESCRIPTION: This code snippet serves as an example configuration to set up the UART component and the Modbus component in ESPHome. It requires the UART configurations to enable communication with Modbus devices.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/modbus.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"    # Example configuration entry\\n    uart:\\n      ...\\n\\n    modbus:\\n\"\n```\n\n----------------------------------------\n\nTITLE: Configuring AMS iAQ-Core Sensor in YAML for ESPHome\nDESCRIPTION: This YAML configuration sets up the iAQ-Core sensor to measure CO2 and TVOC levels. It specifies the I2C address, update interval, and names for the CO2 and TVOC sensors.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/iaqcore.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: iaqcore\n    address: 0x5A\n    update_interval: 60s\n    co2:\n        name: \"iAQ Core CO2 Sensor\"\n    tvoc:\n        name: \"iAQ Core TVOC Sensor\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Honeywell ABP Pressure and Temperature Sensors in YAML\nDESCRIPTION: This YAML configuration sets up a Honeywell ABP pressure and temperature sensor. It defines the sensor platform, pressure and temperature components, and specifies the chip select pin for SPI communication. The pressure configuration includes name, minimum, and maximum pressure values.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/honeywellabp.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: honeywellabp\n    pressure:\n      name: Honeywell pressure\n      min_pressure: 0\n      max_pressure: 15\n    temperature:\n      name: Honeywell temperature\n    cs_pin: GPIOXX\n```\n\n----------------------------------------\n\nTITLE: Configuring Midea Climate Component in YAML\nDESCRIPTION: Basic configuration example for setting up a Midea air conditioner with ESPHome, including main settings like name, period, timeout, and various supported modes and features.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/climate/midea.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclimate:\n  - platform: midea\n    name: Midea Climate\n    period: 1s\n    timeout: 2s\n    num_attempts: 3\n    autoconf: true\n    beeper: true\n    visual:\n      min_temperature: 17 Â°C\n      max_temperature: 30 Â°C\n      temperature_step: 0.5 Â°C\n    supported_modes:\n      - FAN_ONLY\n      - HEAT_COOL\n      - COOL\n      - HEAT\n      - DRY\n    custom_fan_modes:\n      - SILENT\n      - TURBO\n    supported_presets:\n      - ECO\n      - BOOST\n      - SLEEP\n    custom_presets:\n      - FREEZE_PROTECTION\n    supported_swing_modes:\n      - VERTICAL\n      - HORIZONTAL\n      - BOTH\n    outdoor_temperature:\n      name: Temp\n    power_usage:\n      name: Power\n    humidity_setpoint:\n      name: Humidity\n```\n\n----------------------------------------\n\nTITLE: Configuring SPI for MAX31855 Sensor - YAML\nDESCRIPTION: This code snippet demonstrates how to configure the SPI interface and set up the MAX31855 temperature sensor within the ESPHome framework. It requires setting the MISO pin for SPI communication and including necessary configuration variables like chip select and update interval.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/max31855.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nspi:\n  miso_pin: D0\n  clk_pin: D1\n\nsensor:\n  - platform: max31855\n    name: \"Living Room Temperature\"\n    cs_pin: D2\n    update_interval: 60s\n```\n\n----------------------------------------\n\nTITLE: Radon Eye RD200 Sensor Configuration (YAML)\nDESCRIPTION: This configuration sets up the Radon Eye RD200 sensor within ESPHome, defining the BLE client, radon sensor, and long-term radon sensor. It specifies the MAC address of the device, the update interval, and the names of the sensors to be created. The ble_client component establishes the connection with the radon eye device.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/radon_eye_ble.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nesp32_ble_tracker:\n\nble_client:\n  - mac_address: XX:XX:XX:XX:XX:XX\n    id: radon_eye_ble_id\n\nsensor:\n  - platform: radon_eye_rd200\n    ble_client_id: radon_eye_ble_id\n    update_interval: 5min # default\n    radon:\n      name: \"Radon\"\n    radon_long_term:\n      name: \"Radon Long Term\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Seeed Sensecap Indicator Display\nDESCRIPTION: Complete configuration example for the Seeed Sensecap Indicator display including specific pin assignments, display timing, and initialization sequence.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/st7701s.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndisplay:\n  - platform: st7701s\n    update_interval: never\n    spi_mode: MODE3\n    color_order: RGB\n    dimensions:\n      width: 480\n      height: 480\n    invert_colors: true\n    transform:\n      mirror_x: true\n      mirror_y: true\n    cs_pin:\n      pca9554: p_c_a\n      number: 4\n    reset_pin:\n      pca9554: p_c_a\n      number: 5\n    de_pin: 18\n    hsync_pin: 16\n    vsync_pin: 17\n    pclk_pin: 21\n    init_sequence:\n      - 1\n      - delay 5ms\n      - [ 0xE0, 0x1F ]\n    data_pins:\n      red:\n        - 4\n        - 3\n        - 2\n        - 1\n        - 0\n      green:\n        - 10\n        - 9\n        - 8\n        - 7\n        - 6\n        - 5\n      blue:\n        - 15\n        - 14\n        - 13\n        - 12\n        - 11\n    lambda: |-\n      it.fill(COLOR_BLACK);\n      it.print(0, 0, id(my_font), id(my_red), TextAlign::TOP_LEFT, \"Hello World!\");\n```\n\n----------------------------------------\n\nTITLE: Configuring NAU7802 ADC Sensor in YAML\nDESCRIPTION: This snippet demonstrates how to configure the NAU7802 ADC sensor in ESPHome using YAML. It includes parameters such as gain, LDO voltage, and update interval for sensor readings.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/nau7802.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: nau7802\n    name: \"NAU7802 Value\"\n    gain: 128\n    ldo_voltage: \"3.0V\"\n    update_interval: 60s\n```\n\n----------------------------------------\n\nTITLE: Configuring GPS Component in ESPHome\nDESCRIPTION: Basic configuration example for setting up a GPS module in ESPHome. It defines latitude, longitude, and altitude sensors, and configures the GPS as a time source. This requires a UART bus set up in the configuration.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/gps.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\n\n# Declare GPS module\ngps:\n  latitude:\n    name: \"Latitude\"\n  longitude:\n    name: \"Longitude\"\n  altitude:\n    name: \"Altitude\"\n\n# GPS as time source\ntime:\n  - platform: gps\n```\n\n----------------------------------------\n\nTITLE: Complete RF Bridge Configuration for Home Assistant Integration\nDESCRIPTION: Full YAML configuration for integrating RF Bridge with Home Assistant. It sets up API actions for sending RF codes and learning mode, configures UART communication, and defines event handlers that send received RF codes to Home Assistant as events.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/rf_bridge.rst#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napi:\n  actions:\n    - action: send_rf_code\n      variables:\n        sync: int\n        low: int\n        high: int\n        code: int\n      then:\n        - rf_bridge.send_code:\n            sync: !lambda 'return sync;'\n            low: !lambda 'return low;'\n            high: !lambda 'return high;'\n            code: !lambda 'return code;'\n    - action: learn\n      then:\n        - rf_bridge.learn\n\nuart:\n  tx_pin: 1\n  rx_pin: 3\n  baud_rate: 19200\n\nlogger:\n  baud_rate: 0\n\nrf_bridge:\n  on_code_received:\n    then:\n      - homeassistant.event:\n          event: esphome.rf_code_received\n          data:\n            sync: !lambda 'return format_hex(data.sync);'\n            low: !lambda 'return format_hex(data.low);'\n            high: !lambda 'return format_hex(data.high);'\n            code: !lambda 'return format_hex(data.code);'\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Variables in ESPHome YAML\nDESCRIPTION: Example configuration for creating global variables in ESPHome with various types and options. Shows how to define integers and strings with restore capabilities and initial values.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/globals.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nglobals:\n  - id: my_global_int\n    type: int\n    restore_value: no\n    initial_value: '0'\n  # Example for global string variable\n  - id: my_global_string\n    type: std::string\n    restore_value: yes\n    max_restore_data_length: 24\n    initial_value: '\"Global value is\"'\n```\n\n----------------------------------------\n\nTITLE: Configuring SNTP Time Source in ESPHome YAML\nDESCRIPTION: Example configuration for setting up SNTP time synchronization with multiple NTP servers and timezone specification. The configuration allows for custom NTP server selection and timezone definition, with defaults to standard pool.ntp.org servers.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/time/sntp.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\ntime:\n  - platform: sntp\n    id: sntp_time\n    timezone: Europe/Sofia\n    servers:  \n     - 0.pool.ntp.org\n     - 1.pool.ntp.org\n     - 2.pool.ntp.org\n```\n\n----------------------------------------\n\nTITLE: Multiple Networks Configuration\nDESCRIPTION: Configuration for connecting to multiple WiFi networks with priority based on signal strength.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/wifi.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nwifi:\n  networks:\n  - ssid: FirstNetworkToConnectTo\n    password: VerySafePassword\n  - ssid: SecondNetworkToConnectTo\n    password: VerySafePassword\n```\n\n----------------------------------------\n\nTITLE: Turning Light On with Lambda in ESPHome\nDESCRIPTION: This code snippet demonstrates how to turn on a light using a lambda expression in ESPHome. It includes setting optional parameters such as transition length, brightness, color mode, RGB color, cold white, warm white, and effect before performing the action.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/light/index.rst#2025-04-21_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\n\"auto call = id(light_1).turn_on();\n// set parameters (optional)\ncall.set_transition_length(1000); // in ms\ncall.set_brightness(1.0); // 1.0 is full brightness\ncall.set_color_mode(ColorMode::RGB_COLD_WARM_WHITE);\ncall.set_rgb(0.5, 0.25, 1.0); // color in RGB order, this example is purple\ncall.set_cold_white(0.5);\ncall.set_warm_white(0.75);\ncall.set_effect(\"The Effect\");\n// perform action:\ncall.perform();\"\n```\n\n----------------------------------------\n\nTITLE: Configuring ENS210 Temperature and Humidity Sensor in ESPHome YAML\nDESCRIPTION: Basic example configuration for integrating an ENS210 sensor with ESPHome. This snippet sets up both temperature and humidity readings with appropriate names and update interval.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ens210.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: ens210\n    temperature:\n      name: \"Living Room Temperature\"\n    humidity:\n      name: \"Living Room Humidity\"\n    update_interval: 60s\n```\n\n----------------------------------------\n\nTITLE: Binary Sensor On State Change Event Configuration in YAML\nDESCRIPTION: Configuration example showing how to trigger an automation when a binary sensor's state changes (combines on_press and on_release events).\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/index.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nbinary_sensor:\n  - platform: gpio\n    # ...\n    on_state:\n      then:\n        - switch.turn_off: relay_1\n```\n\n----------------------------------------\n\nTITLE: Feit Electric A19 Smart WiFi Bulb Configuration\nDESCRIPTION: This configuration provides a complete setup for a Feit Electric A19 smart light bulb using ESPHome. It includes settings for WiFi, API, logger, OTA, SM16716, PWM outputs for cold and warm white LEDs, and a light component to control the RGBWW LEDs.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/output/sm16716.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n\"esphome:\n  name: GPIOXX\n  friendly_name: GPIOXX\n\nesp8266:\n  board: esp01_1m\n\nwifi:\n  ssid: !secret wifi_ssid\n  password: !secret wifi_password\n\napi:\n\nlogger:\n\nota:\n  platform: esphome\n\nsm16716:\n  data_pin: GPIO14\n  clock_pin: GPIO4\n  num_channels: 3\n  num_chips: 1\n\noutput:\n  - platform: sm16716\n    id: output_red\n    channel: 0\n    power_supply: rgb_power\n  - platform: sm16716\n    id: output_green\n    channel: 1\n    power_supply: rgb_power\n  - platform: sm16716\n    id: output_blue\n    channel: 2\n    power_supply: rgb_power\n  - platform: esp8266_pwm\n    id: output_cold_white\n    pin: GPIO5\n  - platform: esp8266_pwm\n    id: output_warm_white\n    pin: GPIO12\n\nlight:\n  - platform: rgbww\n    name: ${friendly_name}\n    id: light\n    red: output_red\n    green: output_green\n    blue: output_blue\n    cold_white: output_cold_white\n    warm_white: output_warm_white\n    cold_white_color_temperature: 6500 K\n    warm_white_color_temperature: 2700 K\n\npower_supply:\n  - id: rgb_power\n    pin: GPIO13\"\n```\n\n----------------------------------------\n\nTITLE: Lighting Effects Based on Knob and Switch State Using Lambdas\nDESCRIPTION: This YAML snippet provides an example of using addressable lambda effects to indicate the position of knobs and the state of the switch on the m5stack_8angle via LEDs. It uses lambdas for real-time updates of LED colors based on sensor readings.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/m5stack_8angle.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nlight:\n  - platform: m5stack_8angle\n    m5stack_8angle_id: m5stack_8angle_base\n    id: m8_angle_leds\n    name: \"Lights\"\n    effects:\n        - addressable_lambda:\n            name: \"Indicate Values\"\n            update_interval: 200ms\n            lambda: |-\n                    ESPHSVColor hsv;\n                    hsv.value = 255;\n                    hsv.saturation = 240;\n                    auto parent = id(m5stack_8angle_base);\n                    for (int i=0; i < 8; i++) {\n                      auto kpos = parent->read_knob_pos(i);\n                      if (kpos >= 0){\n                        hsv.hue = kpos * 200; \n                        it[i] = hsv;\n                      }\n                    }\n                    if (parent->read_switch() > 0)\n                        hsv.hue = 200;\n                    else\n                        hsv.hue = 0;\n                    it[8] = hsv;\n```\n\n----------------------------------------\n\nTITLE: Toggling WiFi Status Based on Current State in ESPHome\nDESCRIPTION: YAML configuration demonstrating how to use the wifi.enabled condition to check WiFi status and toggle it accordingly in ESPHome.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/wifi.rst#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - if:\n      condition: wifi.enabled\n      then:\n        - wifi.disable:\n      else:\n        - wifi.enable:\n```\n\n----------------------------------------\n\nTITLE: Configuring PN7160 using IÂ²C in YAML\nDESCRIPTION: This YAML snippet shows how to configure the PN7160 NFC controller to use the IÂ²C bus, specifying GPIO pins for critical lines such as interrupt and voltage enable. Optional settings for power management and NFC emulation are also defined. Required dependencies include ESPHome and a PN7160 NFC controller with IÂ²C interface support.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/pn7160.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npn7160_i2c:\n  dwl_req_pin: GPIOXX\n  irq_pin: GPIOXX\n  ven_pin: GPIOXX\n  wkup_req_pin: GPIOXX\n  emulation_message: https://www.home-assistant.io/tag/pulse_ce\n  tag_ttl: 1000ms\n```\n\n----------------------------------------\n\nTITLE: Setting Up Binary Sensors for Matrix Keypad\nDESCRIPTION: This snippet details how to set up individual keys on a matrix keypad as binary sensors in ESPHome. Each key can be configured with 'keypad_id', 'id', 'row', 'col', and 'key'. Dependencies include having a pre-configured matrix keypad. The setup allows for monitoring specific key presses, either by specifying the row and column or by identifying the key directly. It outputs binary sensor events which can be used for automations.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/matrix_keypad.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n    # Example configuration entry\n    binary_sensor:\n      - platform: matrix_keypad\n        keypad_id: mykeypad\n        id: key4\n        row: 1\n        col: 0\n      - platform: matrix_keypad\n        id: keyA\n        key: A\n```\n\n----------------------------------------\n\nTITLE: Basic ESPHome AM43 Cover Configuration\nDESCRIPTION: Example YAML configuration for setting up an AM43 BLE cover device in ESPHome. Includes required BLE tracker, client configuration, and basic cover platform setup.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/cover/am43.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nesp32_ble_tracker:\n\nble_client:\n  - mac_address: XX:XX:XX:XX:XX:XX\n    id: am43_kitchen\n\ncover:\n  - platform: am43\n    name: \"Kitchen blinds\"\n    ble_client_id: am43_kitchen\n```\n\n----------------------------------------\n\nTITLE: Configuring SN74HC595 with GPIO Pins in ESPHome\nDESCRIPTION: YAML configuration for setting up SN74HC595 shift registers using direct GPIO connections. This allows using up to 256 daisy-chained shift registers to expand available I/O pins.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sn74hc595.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsn74hc595:\n  - id: 'sn74hc595_hub'\n    data_pin: GPIOXX\n    clock_pin: GPIOXX\n    latch_pin: GPIOXX\n    oe_pin: GPIOXX\n    sr_count: 2\n\n# Individual outputs\nswitch:\n  - platform: gpio\n    name: \"SN74HC595 Pin #0\"\n    pin:\n      sn74hc595: sn74hc595_hub\n      # Use pin number 0\n      number: 0\n      inverted: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Pulse Meter Sensor with Electricity Usage\nDESCRIPTION: This snippet configures a pulse meter sensor to measure electricity usage in watts. It sets parameters such as unit of measurement, internal filter, and calculation filters to derive instantaneous usage.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/pulse_meter.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: pulse_meter\n    name: 'Electricity Usage'\n    id: sensor_pulse_meter # Optional ID, necessary if you want to calculate the total number of pulses.\n    unit_of_measurement: 'W'\n    device_class: power\n    state_class: measurement\n    internal_filter: 20ms # Assuming maximum load of 16 kW and 10000 impulses per kWh, any pulses faster than 22.5 ms would exceed load. -10% ~= 20 ms.\n    accuracy_decimals: 0\n    pin: GPIOXX\n    filters:\n      - multiply: 6 # (60s / impulse constant) * (1000W / 1kW)\n```\n\n----------------------------------------\n\nTITLE: Configuring TSL2561 Sensor in ESPHome YAML\nDESCRIPTION: Example configuration for integrating a TSL2561 ambient light sensor in ESPHome. Sets up the sensor with a specific IÂ²C address and update interval. Requires IÂ²C to be configured in the main ESPHome configuration.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/tsl2561.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: tsl2561\n    name: \"TSL2561 Ambient Light\"\n    address: 0x39\n    update_interval: 60s\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic Baseline Calibration for MH-Z19 - YAML\nDESCRIPTION: This YAML configuration enables automatic baseline calibration for the MH-Z19 sensor using the specified ID. It's an action that can be triggered as part of a larger automation setup.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/mhz19.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - mhz19.abc_enable: my_mhz19_id\n```\n\n----------------------------------------\n\nTITLE: Coupling Light Switches Across Devices with UDP in ESPHome\nDESCRIPTION: Configuration example showing how to couple two light switches in different devices using UDP. It uses template binary sensors to mirror switch states and UDP binary sensors to trigger actions on the other device.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/udp.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Device 1\nesphome:\n  name: device-1\n\nudp:\n  binary_sensors:\n    - relay1_sensor\n\nswitch:\n  - platform: gpio\n    pin: GPIO6\n    id: relay1\n    name: \"Device 1 switch\"\n\nbinary_sensor:\n  - platform: template\n    id: relay1_sensor\n    lambda: \"return id(relay1).state;\"\n\n  - platform: udp\n    provider: device-2\n    id: relay2_sensor\n    on_press:\n      switch.turn_on: relay1\n    on_release:\n      switch.turn_off: relay1\n\n\n# Device 2\nesphome:\n  name: device-2\n\nudp:\n  binary_sensors:\n    - relay2_sensor\n\nswitch:\n  - platform: gpio\n    pin: GPIO6\n    id: relay2\n    name: \"Device 2 switch\"\n\nbinary_sensor:\n  - platform: template\n    id: relay2_sensor\n```\n\n----------------------------------------\n\nTITLE: Setting Up Binary Sensors with Bitmask in ESPHome YAML\nDESCRIPTION: This YAML configuration example demonstrates how to configure binary sensors using a bitmask to read specific bits from a Modbus register. It specifies the Modbus controller ID, command type, and the specific address and bitmask used for each binary sensor.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/modbus_controller.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nbinary_sensor:\n- platform: modbus_controller\n  modbus_controller_id: modbus1\n  name: Alarm bit0\n  register_type: read\n  address: 15\n  bitmask: 0x1\n- platform: modbus_controller\n  modbus_controller_id: modbus1\n  name: Alarm bit1\n  register_type: read\n  address: 15\n  bitmask: 0x2\n- platform: modbus_controller\n  modbus_controller_id: modbus1\n  name: Alarm bit10\n  register_type: read\n  address: 15\n  bitmask: 0x400\n- platform: modbus_controller\n  modbus_controller_id: modbus1\n  name: Alarm bit15\n  register_type: read\n  address: 15\n  bitmask: 0x8000\n```\n\n----------------------------------------\n\nTITLE: Configuring Mitsubishi Climate Controller in YAML\nDESCRIPTION: Example configuration for a Mitsubishi heatpump with custom fan mode settings, dry mode support, fan-only mode support, and directional preferences.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/climate/climate_ir.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nclimate:\n  - platform: mitsubishi\n    name: \"Heatpump\"\n    set_fan_mode: \"quiet_4levels\"\n    supports_dry: \"true\"\n    supports_fan_only: \"true\"\n    horizontal_default: \"left\"\n    vertical_default: \"down\"\n```\n\n----------------------------------------\n\nTITLE: ESPHome Configuration for Calling Home Assistant Scripts\nDESCRIPTION: Configuration example for calling a Home Assistant script from ESPHome. This shows how to pass parameters to the script.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/api.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# In some trigger\non_...:\n  - homeassistant.action:\n      action: script.set_light_rgb\n      data:\n        light_name: 'my_light'\n        red: '255'\n        green: '199'\n        blue: '71'\n```\n\n----------------------------------------\n\nTITLE: Configuring API Actions with Variables in ESPHome\nDESCRIPTION: Configuration for creating user-defined actions that accept variables from Home Assistant, demonstrating data transmission between systems.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/api.rst#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napi:\n  actions:\n    - action: start_effect\n      variables:\n        my_brightness: int\n        my_effect: string\n      then:\n        - light.turn_on:\n            id: my_light\n            brightness: !lambda 'return my_brightness;'\n            effect: !lambda 'return my_effect;'\n```\n\nLANGUAGE: yaml\nCODE:\n```\naction: esphome.livingroom_start_effect\ndata_template:\n  my_brightness: \"{{ states.brightness.state }}\"\n  my_effect: \"Rainbow\"\n```\n\n----------------------------------------\n\nTITLE: Creating Addressable Flicker Effect in YAML\nDESCRIPTION: This configuration defines an addressable flicker effect that randomly varies the brightness of each LED. Key parameters include name, update interval, and intensity.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/light/index.rst#2025-04-21_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nlight:\n  - platform: ...\n    # ...\n    effects:\n      - addressable_flicker:\n      - addressable_flicker:\n          name: Flicker Effect With Custom Values\n          update_interval: 16ms\n          intensity: 5%\n```\n\n----------------------------------------\n\nTITLE: Defining Addressable Color Wipe Effect in YAML\nDESCRIPTION: This snippet defines a color wipe effect for individually-addressable LEDs, featuring customizable colors and the interval at which new colors are added.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/light/index.rst#2025-04-21_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nlight:\n  - platform: ...\n    # ...\n    effects:\n      - addressable_color_wipe:\n      - addressable_color_wipe:\n          name: Color Wipe Effect With Custom Values\n          colors:\n            - red: 100%\n              green: 100%\n              blue: 100%\n              num_leds: 5\n              gradient: true\n            - red: 0%\n              green: 0%\n              blue: 0%\n              num_leds: 1\n          add_led_interval: 100ms\n          reverse: false\n```\n\n----------------------------------------\n\nTITLE: Configuring XGZP68xx Differential Pressure Sensor in ESPHome\nDESCRIPTION: Example YAML configuration for setting up the XGZP68xx differential pressure sensor with ESPHome. The configuration includes temperature and pressure sensors with an offset filter for calibration.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/xgzp68xx.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\n# It uses a filter offset to calibrate the sensor\nsensor:\n  - platform: xgzp68xx\n    temperature:\n        name: \"Temperature\"\n    pressure:\n        name: \"Differential Pressure\"\n        filters:\n            - offset: 40.5\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON Response in ESPHome YAML Configuration\nDESCRIPTION: This YAML configuration snippet shows how to retrieve a value from a JSON response in ESPHome. It includes error handling and conditional logic based on the HTTP response status code. The example extracts the 'vol' key and publishes its value to a component named 'player_volume'.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/http_request.rst#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n- http_request.get:\n    url: https://esphome.io\n    capture_response: true\n    on_response:\n      then:\n        - if:\n            condition:\n                lambda: return response->status_code == 200;\n            then:\n                - lambda: |-\n                    json::parse_json(body, [](JsonObject root) -> bool {\n                        if (root[\"vol\"]) {\n                            id(player_volume).publish_state(root[\"vol\"]);\n                            return true;\n                        }\n                        else {\n                          ESP_LOGI(TAG,\"No 'vol' key in this json!\");\n                          return false;\n                        }\n                    });\n            else:\n                - logger.log:\n                    format: \"Error: Response status: %d, message %s\"\n                    args: [ 'response->status_code', 'body.c_str()' ]\n```\n\n----------------------------------------\n\nTITLE: Basic Template Sensor Configuration in YAML\nDESCRIPTION: Example configuration for creating a basic template sensor that returns different values based on a binary sensor state. Updates every 60 seconds.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/template.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: template\n    name: \"Template Sensor\"\n    lambda: |-\n      if (id(some_binary_sensor).state) {\n        return 42.0;\n      } else {\n        return 0.0;\n      }\n    update_interval: 60s\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Template Alarm Control Panel Implementation in YAML\nDESCRIPTION: Complete example demonstrating a template alarm control panel with code requirements, sensor zones with different trigger modes, timing configurations, and event handlers. Includes binary sensors for zones and a siren switch.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/alarm_control_panel/template.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nalarm_control_panel:\n  platform: template\n  name: Alarm Panel\n  id: acp1\n  codes:\n    - \"1234\"\n  requires_code_to_arm: true\n  arming_away_time: 30s\n  arming_home_time: 5s\n  pending_time: 30s\n  trigger_time: 5min\n  binary_sensors:\n    - input: zone_1\n      chime: true\n      trigger_mode: delayed\n    - input: zone_2\n      chime: true\n      trigger_mode: delayed\n    - input: zone_3\n      bypass_armed_home: true\n      trigger_mode: delayed_follower\n    - input: zone_4\n      trigger_mode: instant\n    - input: ha_test\n  on_state:\n    then:\n      - lambda: !lambda |-\n          ESP_LOGD(\"TEST\", \"State change %s\", alarm_control_panel_state_to_string(id(acp1)->get_state()));\n  on_triggered:\n    then:\n      - switch.turn_on: siren\n  on_cleared:\n    then:\n      - switch.turn_off: siren\n  on_ready:\n    then:\n     - lambda: !lambda |-\n         ESP_LOGD(\"TEST\", \"Sensor ready change to: %s\",\n           (id(acp1).get_all_sensors_ready())) ? (const char *) \"True\" : (const char *) \"False\");\n  on_chime:\n    then:\n     - lambda: !lambda |-\n         ESP_LOGD(\"TEST\", \"Zone with chime mode set opened\");\n\nbinary_sensor:\n  - platform: gpio\n    id: zone_1\n    name: Zone 1\n    device_class: door\n    pin:\n      number: GPIOXX\n      mode: INPUT_PULLUP\n      inverted: True\n  - platform: gpio\n    id: zone_2\n    name: Zone 2\n    device_class: door\n    pin:\n      number: GPIOXX\n      mode: INPUT_PULLUP\n      inverted: True\n  - platform: gpio\n    id: zone_3\n    name: Zone 3\n    device_class: motion\n    pin:\n      number: GPIOXX\n      mode: INPUT_PULLUP\n      inverted: True\n  - platform: gpio\n    id: zone_4\n    name: Zone 4\n    device_class: door\n    pin:\n      number: GPIOXX\n      mode: INPUT_PULLUP\n      inverted: True\n  - platform: homeassistant\n    id: ha_test\n    name: HA Test\n    entity_id: input_boolean.test_switch\n\nswitch:\n  - platform: gpio\n    id: siren\n    name: Siren\n    icon: mdi:alarm-bell\n    pin: GPIOXX\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Sprinkler Controller in ESPHome\nDESCRIPTION: Minimal example configuration for setting up a sprinkler controller with two valves. Demonstrates basic setup with main switch, auto advance switch, and valve configurations including run durations and enable switches.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sprinkler.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsprinkler:\n  - id: sprinkler_ctrlr\n    main_switch: \"Sprinklers\"\n    auto_advance_switch: \"Sprinklers Auto Advance\"\n    valves:\n      - valve_switch: \"Front Lawn\"\n        enable_switch: \"Enable Front Lawn\"\n        run_duration: 1800s\n        valve_switch_id: lawn_sprinkler_valve_sw0\n      - valve_switch: \"Back Lawn\"\n        enable_switch: \"Enable Back Lawn\"\n        run_duration: 900s\n        valve_switch_id: lawn_sprinkler_valve_sw1\n```\n\n----------------------------------------\n\nTITLE: Configuring DHT12 Sensor in ESPHome\nDESCRIPTION: Example configuration for DHT12 sensor with temperature and humidity readings, specifying sensor names and update interval\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/dht12.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: dht12\n    temperature:\n      name: \"Living Room Temperature\"\n    humidity:\n      name: \"Living Room Humidity\"\n    update_interval: 60s\n```\n\n----------------------------------------\n\nTITLE: Configuring TMP102 Temperature Sensor in ESPHome\nDESCRIPTION: Basic YAML configuration for setting up a TMP102 temperature sensor with ESPHome. Shows how to define the sensor platform, name, and update interval. Requires IÂ²C bus configuration.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/tmp102.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: tmp102\n    name: \"Living Room Temperature\"\n    update_interval: 60s\n```\n\n----------------------------------------\n\nTITLE: Configuring PMSX003 Sensor in ESPHome YAML\nDESCRIPTION: This example shows how to configure the pmsx003 sensor platform in ESPHome to read particulate matter concentrations.  It defines the sensor platform, specifies the sensor type, and configures individual sensors for PM1.0, PM2.5, and PM10.0.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/pmsx003.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"# Example configuration entry\nsensor:\n  - platform: pmsx003\n    type: PMSX003\n    pm_1_0:\n      name: \\\"Particulate Matter <1.0Âµm Concentration\\\"\n    pm_2_5:\n      name: \\\"Particulate Matter <2.5Âµm Concentration\\\"\n    pm_10_0:\n      name: \\\"Particulate Matter <10.0Âµm Concentration\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring BL0906 6-Channel Energy Monitor in YAML\nDESCRIPTION: YAML configuration for a 6-channel BL0906 energy monitor setup in ESPHome. Includes sensors for frequency, temperature, voltage, current, power, and energy for six channels, plus total energy and power.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/bl0906.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: bl0906\n    frequency:\n      name: 'Frequency'\n    temperature:\n      name: 'Temperature'\n    voltage:\n      name: 'Voltage'\n    channel_1:\n      current:\n        name: 'Current_1'\n      power:\n        name: 'Power_1'\n      energy:\n        name: 'Energy_1'\n    channel_2:\n      current:\n        name: 'Current_2'\n      power:\n        name: 'Power_2'\n      energy:\n        name: 'Energy_2'\n    channel_3:\n      current:\n        name: 'Current_3'\n      power:\n        name: 'Power_3'\n      energy:\n        name: 'Energy_3'\n    channel_4:\n      current:\n        name: 'Current_4'\n      power:\n        name: 'Power_4'\n      energy:\n        name: 'Energy_4'\n    channel_5:\n      current:\n        name: 'Current_5'\n      power:\n        name: 'Power_5'\n      energy:\n        name: 'Energy_5'\n    channel_6:\n      current:\n        name: 'Current_6'\n      power:\n        name: 'Power_6'\n      energy:\n        name: 'Energy_6'\n    total_energy:\n      name: 'Total_Energy'\n    total_power:\n      name: 'Total_Power'\n```\n\n----------------------------------------\n\nTITLE: Basic uFire EC Sensor Configuration in YAML\nDESCRIPTION: Basic configuration example for setting up a uFire EC sensor with temperature and EC measurements in ESPHome. Demonstrates the minimal required configuration for the sensor platform.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ufire_ec.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: ufire_ec\n    id: ufire_ec_board\n    temperature:\n      id: temperature_liquit\n      name: Temperature\n    ec:\n      name: EC\n```\n\n----------------------------------------\n\nTITLE: Basic uFire ISE pH Sensor Configuration in ESPHome\nDESCRIPTION: Basic configuration example for setting up a uFire ISE pH sensor with temperature and pH measurements in ESPHome. Requires IÂ²C bus setup.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ufire_ise.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: ufire_ise\n    id: ufire_ise_board\n    temperature:\n      id: temperature_liquid\n      name: Temperature\n    ph:\n      name: pH\n```\n\n----------------------------------------\n\nTITLE: Advanced BME680 Configuration with IAQ Calculation\nDESCRIPTION: Extended configuration that adds indoor air quality (IAQ) calculation and classification based on humidity and gas resistance readings. Includes template sensors for IAQ value and classification text.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/bme680.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: bme680\n    temperature:\n      name: \"BME680 Temperature\"\n      oversampling: 16x\n    pressure:\n      name: \"BME680 Pressure\"\n    humidity:\n      id: \"humidity\"\n      name: \"BME680 Humidity\"\n    gas_resistance:\n      id: \"gas_resistance\"\n      name: \"BME680 Gas Resistance\"\n    address: 0x77\n    update_interval: 60s\n  - platform: template\n    name: \"BME680 Indoor Air Quality\"\n    id: iaq\n    icon: \"mdi:gauge\"\n    # calculation: comp_gas = log(R_gas[ohm]) + 0.04 log(Ohm)/%rh * hum[%rh]\n    lambda: |-\n      return log(id(gas_resistance).state) + 0.04 *  id(humidity).state;\n    state_class: \"measurement\"\ntext_sensor:\n  - platform: template\n    name: \"BME680 IAQ Classification\"\n    icon: \"mdi:checkbox-marked-circle-outline\"\n    lambda: |-\n      if (int(id(iaq).state) <= 50) {\n        return {\"Excellent\"};\n      }\n      else if (int(id(iaq).state) <= 100) {\n        return {\"Good\"};\n      }\n      else if (int(id(iaq).state) <= 150) {\n        return {\"Lightly polluted\"};\n      }\n      else if (int(id(iaq).state) <= 200) {\n        return {\"Moderately polluted\"};\n      }\n      else if (int(id(iaq).state) <= 250) {\n        return {\"Heavily polluted\"};\n      }\n      else if (int(id(iaq).state) <= 350) {\n        return {\"Severely polluted\"};\n      }\n      else if (int(id(iaq).state) <= 500) {\n        return {\"Extremely polluted\"};\n      }\n      else {\n        return {\"unknown\"};\n      }\n```\n\n----------------------------------------\n\nTITLE: Configuring BL0942 Sensor in ESPHome - YAML\nDESCRIPTION: This YAML configuration snippet demonstrates how to set up a BL0942 energy monitor in ESPHome. It includes configuration for voltage, current, power, energy, and frequency sensors. Requires `uart:` setup with specified pins and a baud rate of 4800.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/bl0942.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: bl0942\n    voltage:\n      name: 'BL0942 Voltage'\n    current:\n      name: 'BL0942 Current'\n    power:\n      name: 'BL0942 Power'\n    energy:\n      name: 'BL0942 Energy'\n    frequency:\n      name: \"BL0942 Frequency\"\n```\n\n----------------------------------------\n\nTITLE: Handling PN532 NFC Tag Detection in ESPHome\nDESCRIPTION: This snippet demonstrates how to set up an automation that triggers when a PN532 module detects an NFC tag. It publishes the tag ID to an MQTT topic.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/pn532.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\npn532_...:\n  # ...\n  on_tag:\n    then:\n      - mqtt.publish:\n          topic: pn532/tag\n          payload: !lambda 'return x;'\n```\n\n----------------------------------------\n\nTITLE: Basic BLE Client Sensor Configuration in YAML\nDESCRIPTION: Example configuration for setting up a BLE client sensor to read battery level and RSSI from an iTag device. Shows configuration for both characteristic-based and RSSI-based sensors.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ble_client.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nesp32_ble_tracker:\n\nble_client:\n  - mac_address: XX:XX:XX:XX:XX:XX\n    id: itag_black\n\nsensor:\n  - platform: ble_client\n    type: characteristic\n    ble_client_id: itag_black\n    name: \"iTag battery level\"\n    service_uuid: '180f'\n    characteristic_uuid: '2a19'\n    icon: 'mdi:battery'\n    unit_of_measurement: '%'\n\n  - platform: ble_client\n    type: rssi\n    ble_client_id: itag_black\n    name: \"iTag RSSI\"\n```\n\n----------------------------------------\n\nTITLE: Configuring ESPHome Debug Component with Sensors\nDESCRIPTION: Example configuration showing how to set up the debug component with text sensors for device info and reset reason, plus numeric sensors for heap memory, fragmentation, loop timing and PSRAM monitoring. Includes logger configuration requirement.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/debug.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\ndebug:\n  update_interval: 5s\n\ntext_sensor:\n  - platform: debug\n    device:\n      name: \"Device Info\"\n    reset_reason:\n      name: \"Reset Reason\"\n\nsensor:\n  - platform: debug\n    free:\n      name: \"Heap Free\"\n    fragmentation:\n      name: \"Heap Fragmentation\"\n    block:\n      name: \"Heap Max Block\"\n    loop_time:\n      name: \"Loop Time\"\n    psram:\n      name: \"Free PSRAM\"\n\n# Logger must be at least debug (default)\nlogger:\n  level: debug\n```\n\n----------------------------------------\n\nTITLE: Configuring MLX90393 Magnetometer Sensor in ESPHome\nDESCRIPTION: Basic configuration for MLX90393 triple-axis magnetometer with x, y, and z axis sensor definitions. Requires IÂ²C setup and provides options for customizing sensor readings.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/mlx90393.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: mlx90393\n    id: mlx\n    x_axis:\n      name: \"x\"\n    y_axis:\n      name: \"y\"\n    z_axis:\n      name: \"z\"\n```\n\n----------------------------------------\n\nTITLE: Configuring UART and SDS011 Sensor - YAML\nDESCRIPTION: This YAML code snippet demonstrates how to configure a UART bus and integrate the SDS011 sensor with ESPHome. The 'uart' section specifies the RX and TX pins and the baud rate, which must be set to 9600. The 'sensor' section sets up the SDS011 platform, specifying the particulate matter measurement parameters. The 'update_interval' parameter dictates the measurement frequency and power-saving operation.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/sds011.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nuart:\n  rx_pin: D0\n  tx_pin: D1\n  baud_rate: 9600\n\nsensor:\n  - platform: sds011\n    pm_2_5:\n      name: \"Particulate Matter <2.5Âµm Concentration\"\n    pm_10_0:\n      name: \"Particulate Matter <10.0Âµm Concentration\"\n    update_interval: 5min\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Datetime Component in ESPHome\nDESCRIPTION: Example configuration for setting up a datetime component in ESPHome with name and icon properties. This forms the base configuration for any datetime entity.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/datetime/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example datetime configuration\nname: Date to check\n\n# Optional variables:\nicon: \"mdi:calendar-alert\"\n```\n\n----------------------------------------\n\nTITLE: Configuring CWWW Light in ESPHome YAML\nDESCRIPTION: This snippet demonstrates how to set up a Cold White + Warm White light using the cwww platform in ESPHome. It includes settings for name, output components, color temperatures, and constant brightness.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/light/cwww.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nlight:\n  - platform: cwww\n    name: \"Livingroom Lights\"\n    cold_white: output_component1\n    warm_white: output_component2\n    cold_white_color_temperature: 6536 K\n    warm_white_color_temperature: 2000 K\n    constant_brightness: true\n```\n\n----------------------------------------\n\nTITLE: Configuring HTE501 Temperature+Humidity Sensor in YAML\nDESCRIPTION: This snippet demonstrates how to set up the HTE501 sensor in an ESPHome configuration. It includes settings for temperature and humidity sensors, I2C address, and update interval.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/hte501.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: hte501\n    temperature:\n      name: \"Office Temperature\"\n    humidity:\n      name: \"Office Humidity\"\n    address: 0x40\n    update_interval: 60s\n```\n\n----------------------------------------\n\nTITLE: Configuring TTP229 BSF Pin-Based Touch Sensor\nDESCRIPTION: Example configuration for the pin-based version of TTP229 (BSF) sensor. Demonstrates how to configure SDO and SCL pins and set up a binary sensor for channel 0.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/ttp229.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nttp229_bsf:\n  sdo_pin: D0\n  scl_pin: D1\n\nbinary_sensor:\n  - platform: ttp229_bsf\n    name: TTP229 Channel 0\n    channel: 0\n```\n\n----------------------------------------\n\nTITLE: Triggering Actions on Light Turn On/Off in ESPHome\nDESCRIPTION: This YAML configuration defines actions to be triggered when a light is turned on or off using the `light.on_turn_on` and `light.on_turn_off` triggers. It includes logging messages when the light's state changes.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/light/index.rst#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n\"light:\n  - platform: binary # or any other platform\n    # ...\n    on_turn_on:\n    - logger.log: \\\"Light Turned On!\\\"\n    on_turn_off:\n    - logger.log: \\\"Light Turned Off!\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Resuming or Starting Full Cycle in YAML\nDESCRIPTION: Action to resume a paused cycle or start a new full cycle if no paused cycle exists.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sprinkler.rst#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - sprinkler.resume_or_start_full_cycle: sprinkler_ctrlr\n```\n\n----------------------------------------\n\nTITLE: Handling PN532 NFC Tag Removal in ESPHome\nDESCRIPTION: This snippet demonstrates how to set up an automation that triggers when a PN532 module detects that an NFC tag has been removed. It publishes the removed tag ID to an MQTT topic.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/pn532.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\npn532:\n  # ...\n  on_tag_removed:\n    then:\n      - mqtt.publish:\n          topic: pn532/tag_removed\n          payload: !lambda 'return x;'\n```\n\n----------------------------------------\n\nTITLE: Transmitting Sony IR Code with ESPHome\nDESCRIPTION: This YAML snippet configures ESPHome to transmit a Sony infrared remote code. The `data` parameter specifies the code to be sent, and the `nbits` parameter specifies the number of bits, defaulting to 12 if not provided.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/remote_transmitter.rst#2025-04-21_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - remote_transmitter.transmit_sony:\n      data: 0x123\n      nbits: 12\n```\n\n----------------------------------------\n\nTITLE: Basic PVVX MiThermometer Display Configuration in ESPHome\nDESCRIPTION: Basic configuration example for setting up a PVVX MiThermometer display. It demonstrates how to configure the BLE client and display platform, and shows how to use lambda functions to control display elements like numbers, units, and emoticons.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/pvvx_mithermometer.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nesp32_ble_tracker:\n\nble_client:\n- mac_address: XX:XX:XX:XX:XX:XX\n  id: pvvx_ble_display\n\ndisplay:\n- platform: pvvx_mithermometer\n  ble_client_id: pvvx_ble_display\n  lambda: |-\n    it.print_bignum(23.1);\n    it.print_unit(pvvx_mithermometer::UNIT_DEG_C);\n    it.print_smallnum(33);\n    it.print_percent(true);\n    it.print_happy(true);\n    it.print_bracket(true);\n```\n\n----------------------------------------\n\nTITLE: Using Lambda Calls for Alarm Panel Control in C++\nDESCRIPTION: C++ code snippet demonstrating lambda calls for controlling an Alarm Control Panel, including arming, disarming, and checking sensor status.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/alarm_control_panel/index.rst#2025-04-21_snippet_19\n\nLANGUAGE: cpp\nCODE:\n```\nid(acp1).arm_away();\nid(acp1).arm_home();\nid(acp1).arm_night();\nid(acp1).disarm(std::string(\"1234\"));\nbool all_sensors_ready = id(acp1).get_all_sensors_ready();\n```\n\n----------------------------------------\n\nTITLE: Online Image Component Example Configuration\nDESCRIPTION: This YAML example demonstrates configuring an online image component with a URL, format, ID, and an `on_download_finished` automation. After successful download, the automation triggers a display update.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/online_image.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nonline_image:\n  - url: \"https://upload.wikimedia.org/wikipedia/commons/thumb/4/47/PNG_transparency_demonstration_1.png/280px-PNG_transparency_demonstration_1.png\"\n    format: png\n    id: my_online_image\n    on_download_finished:\n      component.update: my_display\n```\n\n----------------------------------------\n\nTITLE: Configuring MLX90614 Sensor in ESPHome with YAML\nDESCRIPTION: This YAML configuration snippet shows how to integrate the MLX90614 sensor into an ESPHome setup. The configuration allows enabling ambient and object temperature readings independently. The setup requires the IÂ²C Bus, and optional properties such as 'emissivity' for object readings can be specified for customization. The default value for 'emissivity' is 1.0, representing an ideal black body.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/mlx90614.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: mlx90614\n    ambient:\n      name: Ambient\n    object:\n      name: Object\n```\n\n----------------------------------------\n\nTITLE: Defining Local Packages in ESPHome\nDESCRIPTION: This YAML snippet demonstrates how to specify local packages in an ESPHome configuration, linking to common configuration fragments such as Wi-Fi and device-specific settings. Each configuration file included via `!include` can define various components like `api` and are merged with the main configuration file.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/packages.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# In config.yaml\npackages:\n  wifi: !include common/wifi.yaml\n  device_base: !include common/device_base.yaml\n\napi:\n  actions:\n    - action: start_laundry\n      then:\n        - switch.turn_on: relay\n\n# any additional configuration...\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# In wifi.yaml\nwifi:\n  ssid: !secret wifi_ssid\n  password: !secret wifi_password\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# In device_base.yaml\nesphome:\n  name: ${node_name}\n\nesp32:\n  board: wemos_d1_mini32\n\nlogger:\n\napi:\n  encryption:\n    key: !secret api_encryption_key\n```\n\n----------------------------------------\n\nTITLE: Web Server Configuration with Authentication in YAML\nDESCRIPTION: Configuration for enabling HTTP authentication on the ESPHome web server with a username and password.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/web_server.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nweb_server:\n  port: 80\n  auth:\n    username: !secret web_server_username\n    password: !secret web_server_password\n```\n\n----------------------------------------\n\nTITLE: Tuya Automation Configuration in YAML\nDESCRIPTION: Example YAML configuration for Tuya automation, demonstrating how to set up on_datapoint_update triggers for different datapoint types and perform actions based on the updates.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/tuya.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ntuya:\n  on_datapoint_update:\n    - sensor_datapoint: 6\n      datapoint_type: raw\n      then:\n        - lambda: |-\n            ESP_LOGD(\"main\", \"on_datapoint_update %s\", format_hex_pretty(x).c_str());\n            id(voltage).publish_state((x[0] << 8 | x[1]) * 0.1);\n            id(current).publish_state((x[3] << 8 | x[4]) * 0.001);\n            id(power).publish_state((x[6] << 8 | x[7]) * 0.1);\n    - sensor_datapoint: 7 # sample dp\n      datapoint_type: string\n      then:\n        - lambda: |-\n            ESP_LOGD(\"main\", \"on_datapoint_update %s\", x.c_str());\n    - sensor_datapoint: 8 # sample dp\n      datapoint_type: bool\n      then:\n        - lambda: |-\n            ESP_LOGD(\"main\", \"on_datapoint_update %s\", ONOFF(x));\n    - sensor_datapoint: 6\n      datapoint_type: any # this is optional\n      then:\n        - lambda: |-\n            if (x.type == tuya::TuyaDatapointType::RAW) {\n              ESP_LOGD(\"main\", \"on_datapoint_update %s\", format_hex_pretty(x.value_raw).c_str());\n            } else {\n              ESP_LOGD(\"main\", \"on_datapoint_update %hhu\", x.type);\n            }\n```\n\n----------------------------------------\n\nTITLE: Configuring BMP280 with I2C Interface in ESPHome\nDESCRIPTION: Example configuration for BMP280 sensor using I2C communication protocol. Sets up temperature and pressure sensing with custom names, oversampling settings, and update interval.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/bmp280.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry I2C\nsensor:\n  - platform: bmp280_i2c\n    temperature:\n      name: \"Outside Temperature\"\n      oversampling: 16x\n    pressure:\n      name: \"Outside Pressure\"\n    address: 0x77\n    update_interval: 60s\n```\n\n----------------------------------------\n\nTITLE: Implementing Climate On Control Trigger\nDESCRIPTION: Example of setting up an on_control trigger that fires when control inputs are updated. This trigger allows modification of the control call via the variable x before it's applied.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/climate/index.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nclimate:\n  - platform: ...\n    # ...\n    on_control:\n      - logger.log: \"Control input received; configuration updated!\"\n      - lambda: |-\n          if (x.get_mode() != CLIMATE_MODE_OFF) {\n              id(turnoff_script).stop();\n              x.set_target_temperature(25.0f);\n          }\n```\n\n----------------------------------------\n\nTITLE: Switch Lambda Calls in YAML\nDESCRIPTION: Examples of lambda function calls for switches to publish state, retrieve state, and turn the switch on or off from code.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/switch/index.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n// Within lambda, make the switch report a specific state\nid(my_switch).publish_state(false);\nid(my_switch).publish_state(true);\n```\n\n----------------------------------------\n\nTITLE: Lilygo T4-S3 Display Configuration\nDESCRIPTION: Complete configuration for Lilygo T4-S3 display including quad SPI bus setup, I2C configuration, touchscreen integration, and display parameters with PSRAM settings.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/qspi_dbi.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nspi:\n  id: quad_spi\n  type: quad\n  clk_pin: 15\n  data_pins: [14, 10, 16, 12]\n\ni2c:\n  sda: 6\n  scl: 7\n\ntouchscreen:\n  - platform: cst226\n    id: my_touchscreen\n    interrupt_pin: 8\n    reset_pin: 17\n\ndisplay:\n  - platform: qspi_dbi\n    model: RM690B0\n    data_rate: 80MHz\n    spi_mode: mode0\n    dimensions:\n      width: 450\n      height: 600\n      offset_width: 16\n    color_order: rgb\n    invert_colors: false\n    brightness: 255\n    cs_pin: 11\n    reset_pin: 13\n    enable_pin: 9\n\npsram:\n  mode: octal\n  speed: 80MHz\n```\n\n----------------------------------------\n\nTITLE: Configuring ESP32 Camera for TTGO-Camera Plus\nDESCRIPTION: This YAML configuration sets up an ESP32 camera for the TTGO-Camera Plus model. It defines the external clock, I2C pins, data pins, control pins, and includes image orientation settings.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/esp32_camera.rst#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nesp32_camera:\n  external_clock:\n    pin: GPIO4\n    frequency: 20MHz\n  i2c_pins:\n    sda: GPIO18\n    scl: GPIO23\n  data_pins: [GPIO34, GPIO13, GPIO26, GPIO35, GPIO39, GPIO38, GPIO37, GPIO36]\n  vsync_pin: GPIO5\n  href_pin: GPIO27\n  pixel_clock_pin: GPIO25\n  vertical_flip: false\n  horizontal_mirror: false\n\n  # Image settings\n  name: My Camera\n  # ...\n```\n\n----------------------------------------\n\nTITLE: SGP4x Configuration with Environmental Compensation\nDESCRIPTION: Extended configuration example showing how to use external temperature and humidity sensors for compensation to improve measurement accuracy.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/sgp4x.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n- platform: sgp4x\n  voc:\n    name: \"VOC Index\"\n  nox:\n    name: \"NOx Index\"\n  compensation:\n    humidity_source: dht1_hum\n    temperature_source: dht1_temp\n```\n\n----------------------------------------\n\nTITLE: Configuring CSE7766 Sensor with ESPHome in YAML\nDESCRIPTION: This YAML snippet configures the CSE7766 sensor platform to measure voltage, current, power, energy, and other parameters, using UART communication on ESPHome. The configuration requires a UART bus with the specific rx_pin connected and breathes life with baud_rate set to 4800 and parity as EVEN. It supports multiple parameter updates per second and suggests averaging or throttling these updates. The snippet includes optional parameters like voltage, current, and power factor.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/cse7766.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n    # Example configuration entry\n    substitutions:\n      update_interval: 60s\n\n    # Disable logging over USB\n    logger:\n      baud_rate: 0\n\n    uart:\n      rx_pin: RX\n      baud_rate: 4800\n      parity: EVEN\n\n    sensor:\n      - platform: cse7766\n        voltage:\n          name: \"Sonoff Pow R2 Voltage\"\n          filters:\n            - throttle_average: ${update_interval}\n        current:\n          name: \"Sonoff Pow R2 Current\"\n          filters:\n            - throttle_average: ${update_interval}\n        power:\n          name: \"Sonoff Pow R2 Power\"\n          filters:\n            - throttle_average: ${update_interval}\n        energy:\n          name: \"Sonoff Pow R2 Energy\"\n          filters:\n            - throttle: ${update_interval}\n        apparent_power:\n          name: \"Sonoff Pow R2 Apparent Power\"\n          filters:\n            - throttle_average: ${update_interval}\n        reactive_power:\n          name: \"Sonoff Pow R2 Reactive Power\"\n          filters:\n            - throttle_average: ${update_interval}\n        power_factor:\n          name: \"Sonoff Pow R2 Power Factor\"\n          filters:\n            - throttle_average: ${update_interval}\n```\n\n----------------------------------------\n\nTITLE: Configuring MPU6050 Sensor on ESPHome in YAML\nDESCRIPTION: This YAML snippet illustrates how to define the MPU6050 sensor within an ESPHome configuration. It includes parameters for IÂ²C address and measures acceleration and gyroscopic data across three axes as well as temperature.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/mpu6050.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"sensor:\\n  - platform: mpu6050\\n    address: 0x68\\n    accel_x:\\n      name: \\\"MPU6050 Accel X\\\"\\n    accel_y:\\n      name: \\\"MPU6050 Accel Y\\\"\\n    accel_z:\\n      name: \\\"MPU6050 Accel z\\\"\\n    gyro_x:\\n      name: \\\"MPU6050 Gyro X\\\"\\n    gyro_y:\\n      name: \\\"MPU6050 Gyro Y\\\"\\n    gyro_z:\\n      name: \\\"MPU6050 Gyro z\\\"\\n    temperature:\\n      name: \\\"MPU6050 Temperature\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Single and Multi-Trace Graphs in ESPHome\nDESCRIPTION: Configuration example showing both basic single-trace and advanced multi-trace graph setups in ESPHome. The example demonstrates various styling options including grid lines, line types, thickness, and color customization.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/graph.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ngraph:\n  # Show bare-minimum auto-ranged graph\n  - id: single_temperature_graph\n    sensor: my_temperature\n    duration: 1h\n    width: 151\n    height: 51\n  # Show multi-trace graph\n  - id: multi_temperature_graph\n    duration: 1h\n    x_grid: 10min\n    y_grid: 1.0     # degC/div\n    width: 151\n    height: 51\n    traces:\n      - sensor: my_inside_temperature\n        line_type: DASHED\n        line_thickness: 2\n        color: my_red\n      - sensor: my_outside_temperature\n        line_type: SOLID\n        continuous: true\n        line_thickness: 3\n        color: my_blue\n      - sensor: my_beer_temperature\n        line_type: DOTTED\n        line_thickness: 2\n        color: my_green\n```\n\n----------------------------------------\n\nTITLE: Scanning for Xiaomi BLE Devices in ESPHome YAML\nDESCRIPTION: YAML configuration for scanning and discovering Xiaomi BLE devices. This setup will print the MAC addresses of discovered devices to help with configuration.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/xiaomi_ble.rst#2025-04-21_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nesp32_ble_tracker:\n\nxiaomi_ble:\n```\n\n----------------------------------------\n\nTITLE: Configuring KMeterISO Sensor with ESPHome in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure the KMeterISO temperature sensor using ESPHome. The configuration includes setting up the main temperature and internal temperature sensors. The probe requires IÂ²C setup as a prerequisite. Users can also define an update interval for sensor readings, defaulting to 5 seconds if not specified.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/kmeteriso.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n- platform: kmeteriso\n  temperature:\n    name: Temperature\n  internal_temperature:\n    name: Internal temperature\n```\n\n----------------------------------------\n\nTITLE: Configuring WK2168 with SPI Interface\nDESCRIPTION: Example configuration for WK2168 chip using SPI bus with multiple UART channels at different baud rates and parity settings\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/weikai.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwk2168_spi:\n  - id: wk2168_bridge_spi\n    cs_pin: 5\n    uart:\n      - id: spi_uart_0\n        channel: 0\n        baud_rate: 128200\n        parity: even\n      - id: spi_uart_1\n        channel: 1\n        baud_rate: 19200\n      - id: spi_uart_2\n        channel: 2\n        baud_rate: 9600\n      - id: spi_uart_3\n        channel: 3\n        baud_rate: 19200\n```\n\n----------------------------------------\n\nTITLE: Configuring AM43 Sensors with ESP32 BLE\nDESCRIPTION: Example configuration for setting up AM43 BLE cover motor sensors in ESPHome. Demonstrates how to configure the BLE tracker, client connection, and sensor readings for both battery level and illuminance.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/am43.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nesp32_ble_tracker:\n\nble_client:\n  - mac: XX:XX:XX:XX:XX:XX\n    id: am43_device\n\nsensor:\n  - platform: am43\n    ble_client_id: am43_device\n    battery_level:\n      name: \"Kitchen blinds battery\"\n    illuminance:\n      name: \"Kitchen blinds light\"\n```\n\n----------------------------------------\n\nTITLE: Configuring HHCCJCY01 MiFlora Sensor in YAML\nDESCRIPTION: Configuration for the MiFlora soil sensor that measures temperature, moisture, ambient light and nutrient levels. Requires MAC address of the device.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/xiaomi_ble.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: xiaomi_hhccjcy01\n    mac_address: XX:XX:XX:XX:XX:XX\n    temperature:\n      name: \"Xiaomi HHCCJCY01 Temperature\"\n    moisture:\n      name: \"Xiaomi HHCCJCY01 Moisture\"\n    illuminance:\n      name: \"Xiaomi HHCCJCY01 Illuminance\"\n    conductivity:\n      name: \"Xiaomi HHCCJCY01 Soil Conductivity\"\n    battery_level:\n      name: \"Xiaomi HHCCJCY01 Battery Level\"\n```\n\n----------------------------------------\n\nTITLE: Basic Time-Based Cover Configuration in YAML\nDESCRIPTION: Example configuration for a time-based cover showing essential setup including open, close and stop actions with their respective durations.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/cover/time_based.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\ncover:\n  - platform: time_based\n    name: \"Time-Based Cover\"\n\n    open_action:\n      - switch.turn_on: open_cover_switch\n    open_duration: 2.1min\n\n    close_action:\n      - switch.turn_on: close_cover_switch\n    close_duration: 2min\n\n    stop_action:\n      - switch.turn_off: open_cover_switch\n      - switch.turn_off: close_cover_switch\n```\n\n----------------------------------------\n\nTITLE: Retrieving Fan Preset Mode in ESPHome Lambda\nDESCRIPTION: This snippet retrieves the current preset mode of the fan within a lambda function. It checks if the preset mode equals 'auto' and executes different code based on that.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/fan/index.rst#2025-04-21_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\n// Within lambda, get the fan preset mode and conditionally do something\nif (id(my_fan).preset_mode == \"auto\") {\n  // Fan preset mode is \"auto\", do something here\n} else {\n  // Fan preset mode is not \"auto\", do something else here\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TC74 Temperature Sensor in ESPHome\nDESCRIPTION: Basic YAML configuration example for setting up a TC74 temperature sensor in ESPHome. This configuration creates a sensor named 'Living Room Temperature' using the TC74 platform. The sensor requires IÂ²C bus setup and supports optional parameters like update_interval and address configuration.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/tc74.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: tc74\n    name: \"Living Room Temperature\"\n```\n\n----------------------------------------\n\nTITLE: Configuring PN7160 using SPI in YAML\nDESCRIPTION: This YAML snippet configures the PN7160 NFC controller to use the SPI bus with specific GPIO pins set for various lines such as chip select, interrupt, and voltage enable. The configuration includes optional emulation settings and tag timers. Dependencies include the ESPHome environment and a correctly wired PN7160 NFC controller with SPI support.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/pn7160.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npn7160_spi:\n  cs_pin: GPIOXX\n  dwl_req_pin: GPIOXX\n  irq_pin: GPIOXX\n  ven_pin: GPIOXX\n  wkup_req_pin: GPIOXX\n  emulation_message: https://www.home-assistant.io/tag/pulse_ce\n  tag_ttl: 1000ms\n```\n\n----------------------------------------\n\nTITLE: Configuring PCA6416A Device in ESPHome YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure the PCA6416A component in ESPHome with an IÂ²C address and pin settings. It defines an instance of the PCA6416A expander and sets up a GPIO switch for pin number 0 as an output.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/pca6416a.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\npca6416a:\n  - id: 'pca6416a_device'\n    address: 0x20\n\n# Individual outputs\nswitch:\n  - platform: gpio\n    name: \"PCA6416A Pin #0\"\n    pin:\n      pca6416a: pca6416a_device\n      # Use pin number 0\n      number: 0\n      # One of INPUT or OUTPUT\n      mode:\n        output: true\n      inverted: false\n```\n\n----------------------------------------\n\nTITLE: Current-Based to Feedback Cover Migration Example\nDESCRIPTION: Example showing how to migrate from a current-based cover configuration to a feedback-based cover implementation with analog threshold sensors.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/cover/feedback.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nbinary_sensor:\n  - platform: analog_threshold\n    id: open_binary_sensor\n    sensor_id: open_current_sensor\n    threshold: 0.5\n    filters:\n      - delayed_off: 0.8s\n  - platform: analog_threshold\n    id: open_obstacle_binary_sensor\n    sensor_id: open_current_sensor\n    threshold: 0.8\n\ncover:\n  - platform: feedback\n    name: \"Feedback Based Cover\"\n    has_built_in_endstop: true\n    infer_endstop_from_movement: true\n\n    open_sensor: open_binary_sensor\n```\n\n----------------------------------------\n\nTITLE: Configuring ADE7880 Energy Meter in ESPHome YAML\nDESCRIPTION: A comprehensive YAML configuration for the ADE7880 energy meter chip, showing setup for three-phase power monitoring. The snippet includes pin configuration, frequency setting, and detailed calibration parameters for phases A, B, C, and neutral.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ade7880.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- platform: ade7880\n  irq0_pin:\n    number: GPIOXX\n  irq1_pin:\n    number: GPIOXX\n  reset_pin:\n    number: GPIOXX\n  frequency: 60Hz\n  phase_a:\n    name: Phase A\n    voltage: Voltage\n    current: Current\n    active_power: Active Power\n    power_factor: Power Factor\n    forward_active_energy: Forward Active Energy\n    reverse_active_energy: Reverse Active Energy\n    calibration:\n      current_gain: 3116628\n      voltage_gain: -757178\n      power_gain: -1344457\n      phase_angle: 188\n  phase_b:\n    name: Phase B\n    voltage: Voltage\n    current: Current\n    active_power:: Active Power\n    power_factor: Power Factor\n    forward_active_energy: Forward Active Energy\n    reverse_active_energy: Reverse Active Energy\n    calibration:\n      current_gain: 3133655\n      voltage_gain: -755235\n      power_gain: -1345638\n      phase_angle: 188\n  phase_c:\n    name: Phase C\n    voltage: Voltage\n    current: Current\n    active_power: Active Power\n    power_factor: Power Factor\n    forward_active_energy: Forward Active Energy\n    reverse_active_energy: Reverse Active Energy\n    calibration:\n      current_gain: 3111158\n      voltage_gain: -743813\n      power_gain: -1351437\n      phase_angle: 180\n  neutral:\n    name: Test 3 Unused\n    current: Current\n    calibration:\n      current_gain: 3011156\n```\n\n----------------------------------------\n\nTITLE: Color Correction for RGBW Light in ESPHome YAML\nDESCRIPTION: This snippet shows how to apply color correction to an RGBW light using the max_power setting on individual output channels. It includes both the light configuration and an example output entry.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/light/rgbw.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nlight:\n  - platform: rgbw\n    name: \"Livingroom Lights\"\n    red: output_component1\n    green: output_component2\n    blue: output_component3\n    white: output_component4\n\n# Example output entry\noutput:\n  - platform: ...\n    id: output_component1\n    max_power: 80%\n```\n\n----------------------------------------\n\nTITLE: Configuring EE895 COâ, Temperature, and Pressure Sensor in YAML\nDESCRIPTION: This YAML configuration sets up the EE895 sensor with COâ, temperature, and pressure measurements. It specifies names, accuracy decimals, IÂ²C address, and update interval for each sensor component.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ee895.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: ee895\n    co2:\n      name: \"Office CO2\"\n      accuracy_decimals: 0\n    temperature:\n      name: \"Office Temperature\"\n      accuracy_decimals: 2\n    pressure:\n      name: \"Office Pressure\"\n      accuracy_decimals: 1\n    address: 0x5F\n    update_interval: 15s\n```\n\n----------------------------------------\n\nTITLE: Configuring ESP32 Camera Web Server in ESPHome YAML\nDESCRIPTION: Example configuration for setting up an ESP32 Camera Web Server with both streaming and snapshot capabilities on different ports. The streaming service is available on port 8080, while snapshots can be accessed on port 8081.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/esp32_camera_web_server.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nesp32_camera_web_server:\n  - port: 8080\n    mode: stream\n  - port: 8081\n    mode: snapshot\n```\n\n----------------------------------------\n\nTITLE: Configuring BME68x Sensor Measurements in ESPHome\nDESCRIPTION: Configuration for enabling various sensor measurements including temperature, pressure, humidity, IAQ, CO2 equivalent, and breath VOC equivalent\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/bme68x_bsec2.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: bme68x_bsec2\n    temperature:\n      name: \"BME68x Temperature\"\n    pressure:\n      name: \"BME68x Pressure\"\n    humidity:\n      name: \"BME68x Humidity\"\n    iaq:\n      name: \"BME68x IAQ\"\n      id: iaq\n    co2_equivalent:\n      name: \"BME68x CO2 Equivalent\"\n    breath_voc_equivalent:\n      name: \"BME68x Breath VOC Equivalent\"\n```\n\n----------------------------------------\n\nTITLE: Basic MAX7219 Display Configuration in ESPHome YAML\nDESCRIPTION: Example configuration showing how to set up a MAX7219 7-segment display with SPI bus and basic text display functionality.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/max7219.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nspi:\n  clk_pin: D0\n  mosi_pin: D1\n\ndisplay:\n  - platform: max7219\n    cs_pin: D2\n    num_chips: 1\n    lambda: |-\n      it.print(\"01234567\");\n```\n\n----------------------------------------\n\nTITLE: Configuring PN532 NFC/RFID over I2C in ESPHome\nDESCRIPTION: This snippet shows the configuration for a PN532 NFC/RFID controller using I2C communication in ESPHome. It includes the PN532 component setup and a binary sensor for a specific NFC tag.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/pn532.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npn532_i2c:\n  update_interval: 1s\n\nbinary_sensor:\n  - platform: pn532\n    uid: 74-10-37-94\n    name: \"PN532 NFC Tag\"\n```\n\n----------------------------------------\n\nTITLE: Configuring GCLS002 VegTrug Sensor in YAML\nDESCRIPTION: Configuration for the VegTrug Grow Care Garden sensor that measures temperature, moisture, conductivity and illuminance. Requires MAC address.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/xiaomi_ble.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: xiaomi_gcls002\n    mac_address: XX:XX:XX:XX:XX:XX\n    temperature:\n      name: \"GCLS02 Temperature\"\n    moisture:\n      name: \"GCLS02 Moisture\"\n    conductivity:\n      name: \"GCLS02 Soil Conductivity\"\n    illuminance:\n      name: \"GCLS02 Illuminance\"\n```\n\n----------------------------------------\n\nTITLE: On Tag Trigger - Template Sensor Publish\nDESCRIPTION: This YAML snippet configures the ``on_tag`` trigger to publish the tag ID to a template text sensor. The `!lambda 'return x;'` extracts the tag ID from the trigger's parameter `x`.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/pn7150.rst#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\npn7150_i2c:\n  # ...\n  on_tag:\n    then:\n    - text_sensor.template.publish:\n        id: nfc_tag\n        state: !lambda 'return x;'\n\ntext_sensor:\n  - platform: template\n    name: \"NFC Tag\"\n    id: nfc_tag\n```\n\n----------------------------------------\n\nTITLE: Configuring Single-Point Cooling Thermostat in ESPHome\nDESCRIPTION: YAML configuration for a cooling-only thermostat controller. Includes temperature sensor, cooling timing parameters, and preset temperature threshold.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/climate/thermostat.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nclimate:\n  - platform: thermostat\n    name: \"Thermostat Climate Controller\"\n    sensor: my_temperature_sensor\n    min_cooling_off_time: 300s\n    min_cooling_run_time: 300s\n    min_idle_time: 30s\n    cool_action:\n      - switch.turn_on: air_cond\n    idle_action:\n      - switch.turn_off: air_cond\n    default_preset: Home\n    preset:\n      - name: Home\n        default_target_temperature_high: 22 Â°C\n```\n\n----------------------------------------\n\nTITLE: Configuring QMP6988 Sensor in ESPHome\nDESCRIPTION: Example configuration for setting up a QMP6988 temperature and pressure sensor with custom parameters like oversampling, IÂ²C address, and update interval\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/qmp6988.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: qmp6988\n    temperature:\n      name: \"Living Room Temperature\"\n      oversampling: 16x\n    pressure:\n      name: \"Living Room Pressure\"\n      oversampling: 16x\n    address: 0x70\n    update_interval: 60s\n    iir_filter: 2x\n```\n\n----------------------------------------\n\nTITLE: Basic Addressable Light Display Configuration with Bulls-eye Pattern\nDESCRIPTION: Basic YAML configuration for setting up an 8x8 addressable LED matrix display with a bulls-eye pattern draw command. Demonstrates core display parameters and lambda drawing.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/addressable_light.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndisplay:\n  - platform: addressable_light\n    id: led_matrix_display\n    addressable_light_id: led_matrix_light\n    width: 8\n    height: 8\n    rotation: 180Â°\n    update_interval: 16ms\n    lambda: |-\n          // Draw a bulls-eye pattern\n          Color red = Color(0xFF0000);\n          Color green = Color(0x00FF00);\n          Color blue = Color(0x0000FF);\n          it.rectangle(0, 0, 8, 8, red);\n          it.rectangle(1, 1, 6, 6, green);\n          it.rectangle(2, 2, 4, 4, blue);\n          it.rectangle(3, 3, 2, 2, red);\n```\n\n----------------------------------------\n\nTITLE: Configuring Xiaomi MUE4094RT Night Light in ESPHome YAML\nDESCRIPTION: YAML configuration for the Xiaomi Philips BLE night light MUE4094RT. Defines a binary sensor for motion detection, implemented as a hybrid sensor.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/xiaomi_ble.rst#2025-04-21_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n\nbinary_sensor:\n  - platform: xiaomi_mue4094rt\n    name: \"MUE4094RT Night Light\"\n    mac_address: XX:XX:XX:XX:XX:XX\n    timeout: \"5s\"\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP23016 I/O Expander in ESPHome\nDESCRIPTION: This YAML configuration demonstrates how to integrate an MCP23016 I/O expander into an ESPHome setup, specifying the I2C address and configuring pins as both switches and binary sensors.  The configuration leverages the `mcp23016` component and defines individual GPIO pins for input and output operations.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/mcp230xx.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n\n# Example configuration entry\nmcp23016:\n  - id: 'mcp23016_hub'\n    address: 0x20\n\n# Individual outputs\nswitch:\n  - platform: gpio\n    name: \"MCP23016 Pin #0\"\n    pin:\n      mcp23016: mcp23016_hub\n      # Use pin number 0\n      number: 0\n      mode:\n        output: true\n      inverted: false\n\n# Individual inputs\nbinary_sensor:\n  - platform: gpio\n    name: \"MCP23016 Pin #1\"\n    pin:\n      mcp23016: mcp23016_hub\n      # Use pin number 1\n      number: 1\n      mode:\n        input: true\n      inverted: false\n\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Dimmable Backlight Control in ESPHome\nDESCRIPTION: Configuration for controlling the backlight of a T-Display ESP32 using LEDC output on GPIO4, which is then used to create a dimmable monochromatic light component named 'Backlight'.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/st7789v.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n    # Allow dimmable control of the backlight (pin GPIO4)\n    output:\n      - platform: ledc\n        pin: GPIO4\n        id: gpio4\n\n    light:\n      - platform: monochromatic\n        output: gpio4\n        name: \"Backlight\"\n```\n\n----------------------------------------\n\nTITLE: Configuring SML Text Sensor for Precise Energy Reading\nDESCRIPTION: Configuration for a text sensor that captures total energy readings as a text value to avoid precision errors with large numbers. Used in combination with Home Assistant template sensors.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sml.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# ESPHome configuration file\ntext_sensor:\n  - platform: sml\n    name: \"Total energy text\"\n    obis_code: \"1-0:1.8.0\"\n    format: uint\n```\n\n----------------------------------------\n\nTITLE: Setting Volume Level for DF-Player in ESPHome\nDESCRIPTION: Action to change the volume level of the DF-Player with values ranging from 0 to 30.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/dfplayer.rst#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - dfplayer.set_volume:\n        volume: 20\n    # Shorthand\n    - dfplayer.set_volume: 20\n```\n\n----------------------------------------\n\nTITLE: Clamping Sensor Values in ESPHome YAML\nDESCRIPTION: This code snippet demonstrates how to use the `clamp` filter in ESPHome to limit sensor values within a specified range. The filter ensures that values outside the range are either set to the minimum or maximum value, or ignored altogether if `ignore_out_of_range` is set to true.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/index.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n\n    # Example configuration entry\n    - platform: wifi_signal\n      # ...\n      filters:\n        - clamp:\n            min_value: 10\n            max_value: 75\n            ignore_out_of_range: true\n\n```\n\n----------------------------------------\n\nTITLE: ESPHome Wait Until Action Examples\nDESCRIPTION: Examples of using wait_until action with and without timeout\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/automations/actions.rst#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - logger.log: \"Waiting for binary sensor\"\n  - wait_until:\n      binary_sensor.is_on: some_binary_sensor\n  - logger.log: \"Binary sensor is ready\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Inkplate 6 Plus Touchscreen\nDESCRIPTION: Configuration example for enabling and using the built-in touchscreen on the Inkplate 6 Plus, including power control and touch event handling.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/inkplate6.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nswitch:\n  - platform: gpio\n    name: 'Inkplate Touchscreen Enabled'\n    restore_mode: ALWAYS_ON\n    pin:\n      mcp23xxx: mcp23017_hub\n      number: 12\n      inverted: true\n      \ntouchscreen:\n  - platform: ektf2232\n    interrupt_pin: GPIO36\n    rts_pin:\n      mcp23xxx: mcp23017_hub\n      number: 10\n    on_touch:\n      - logger.log:\n          format: \"touch x=%d, y=%d\"\n          args: ['touch.x', 'touch.y']\n```\n\n----------------------------------------\n\nTITLE: Exposing Sprinkler Controller Actions via ESPHome API in YAML\nDESCRIPTION: Configuration snippet illustrating how to expose various sprinkler controller actions through user-defined ESPHome API. This allows triggering actions like setting multipliers, starting cycles, controlling valves, and shutting down via the front end or automations.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sprinkler.rst#2025-04-21_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\napi:\n  actions:\n    - action: set_multiplier\n      variables:\n        multiplier: float\n      then:\n        - sprinkler.set_multiplier:\n            id: lawn_sprinkler_ctrlr\n            multiplier: !lambda 'return multiplier;'\n    - action: start_full_cycle\n      then:\n        - sprinkler.start_full_cycle: lawn_sprinkler_ctrlr\n    - action: start_single_valve\n      variables:\n        valve: int\n      then:\n        - sprinkler.start_single_valve:\n            id: lawn_sprinkler_ctrlr\n            valve_number: !lambda 'return valve;'\n    - action: next_valve\n      then:\n        - sprinkler.next_valve: lawn_sprinkler_ctrlr\n    - action: previous_valve\n      then:\n        - sprinkler.previous_valve: lawn_sprinkler_ctrlr\n    - action: shutdown\n      then:\n        - sprinkler.shutdown: lawn_sprinkler_ctrlr\n```\n\n----------------------------------------\n\nTITLE: Celsius to Fahrenheit Conversion in ESPHome\nDESCRIPTION: This shows a lambda filter being used to convert Celsius to Fahrenheit, and setting the unit of measurement to degrees Fahrenheit.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/index.rst#2025-04-21_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\n    filters:\n      - lambda: return x * (9.0/5.0) + 32.0;\n    unit_of_measurement: \"Â°F\"\n\n```\n\n----------------------------------------\n\nTITLE: Configuring AHT10 Sensor in ESPHome\nDESCRIPTION: Example YAML configuration for setting up an AHT10 temperature and humidity sensor in ESPHome. The configuration includes sensor platform specification, naming of temperature and humidity sensors, and update interval settings.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/aht10.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: aht10\n    variant: AHT10\n    temperature:\n      name: \"Living Room Temperature\"\n    humidity:\n      name: \"Living Room Humidity\"\n    update_interval: 60s\n```\n\n----------------------------------------\n\nTITLE: Configuring ESPHome UART and Sensors for InfoStripe\nDESCRIPTION: ESPHome configuration for setting up UART communication, MH-Z19 CO2 sensor, status monitoring, and WS2812B LED strip with individual pixel control.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/cookbook/infostrip.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nuart:\n  rx_pin: GPIOXX\n  tx_pin: GPIOXX\n  baud_rate: 9600\n\nsensor:\n  - platform: mhz19\n    co2:\n      name: \"MH-Z19 CO2 Value\"\n    temperature:\n      name: \"MH-Z19 Temperature\"\n    update_interval: 30s\n\nbinary_sensor:\n  - platform: status\n    name: \"Infostrip Status\"\n\nlight:\n  - platform: fastled_clockless\n    chipset: WS2812B\n    id: light_fastled\n    pin: GPIOXX\n    num_leds: 4\n    rgb_order: GRB\n    name: \"Infostrip\"\n    effects:\n      - strobe:\n      - random:\n  - platform: partition\n    name: \"PL0\"\n    segments:\n      - id: light_fastled\n          from: 0\n          to: 0\n    effects:\n      - strobe:\n  - platform: partition\n    name: \"PL1\"\n    segments:\n      - id: light_fastled\n          from: 1\n          to: 1\n    effects:\n      - strobe:\n  - platform: partition\n    name: \"PL2\"\n    segments:\n      - id: light_fastled\n          from: 2\n          to: 2\n    effects:\n      - strobe:\n  - platform: partition\n    name: \"PL3\"\n    segments:\n      - id: light_fastled\n          from: 3\n          to: 3\n    effects:\n      - strobe:\n```\n\n----------------------------------------\n\nTITLE: Sending JSON Payload in ESPHome HTTP POST Request (Simple)\nDESCRIPTION: Example of sending a JSON payload in a POST request using a simple key-value syntax. Note that all values are sent as strings.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/http_request.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - http_request.post:\n      url: https://esphome.io\n      json:\n        key: !lambda |-\n          return id(my_sensor).state;\n        greeting: \"Hello World\"\n\n    # Will send:\n    # {\"key\": \"42.0\", \"greeting\": \"Hello World\"}\n```\n\n----------------------------------------\n\nTITLE: State-Based LVGL Widget Styling\nDESCRIPTION: Shows how to configure widget styles based on different interaction states, specifically for an arc widget with state-dependent indicator color\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/index.rst#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- arc:\n    id: my_arc\n    value: 75\n```\n\n----------------------------------------\n\nTITLE: Configuring BME680 Sensor Parameters - YAML\nDESCRIPTION: This snippet configures individual parameters for a BME680 sensor using the bme680_bsec platform in ESPHome. It specifies attributes such as temperature, pressure, humidity, gas resistance, and indoor air quality (IAQ) with respective sampling rates and filters. The snippet allows for defining multiple measurements from a single sensor.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/bme680_bsec.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n      - platform: bme680_bsec\n        # ID of the bme680_bsec component to use for the next sensors.\n        # Useful when working with multiple devices\n        bme680_bsec_id: bme680_internal\n\n        temperature:\n          # Temperature in Â°C\n          name: \"BME680 Temperature\"\n          sample_rate: lp\n          filters:\n            - median\n        pressure:\n          # Pressure in hPa\n          name: \"BME680 Pressure\"\n          sample_rate: lp\n          filters:\n            - median\n        humidity:\n          # Relative humidity %\n          name: \"BME680 Humidity\"\n          sample_rate: lp\n          filters:\n            - median\n        gas_resistance:\n          # Gas resistance in Î©\n          name: \"BME680 Gas Resistance\"\n          filters:\n            - median\n        iaq:\n          # Indoor air quality value\n          name: \"BME680 IAQ\"\n          filters:\n            - median\n        iaq_accuracy:\n          # IAQ accuracy as a numeric value of 0, 1, 2, 3\n          name: \"BME680 Numeric IAQ Accuracy\"\n        co2_equivalent:\n          # CO2 equivalent estimate in ppm\n          name: \"BME680 CO2 Equivalent\"\n          filters:\n            - median\n        breath_voc_equivalent:\n          # Volatile organic compounds equivalent estimate in ppm\n          name: \"BME680 Breath VOC Equivalent\"\n          filters:\n            - median\n\n```\n\n----------------------------------------\n\nTITLE: Creating and Updating Animimg Widget in YAML\nDESCRIPTION: Provides an example of configuring an 'animimg' widget using YAML, including setting image sources for animation frames, specifying duration, and controlling repeating behavior. The snippet shows how to use 'lvgl.animimg.update' to modify animation properties like 'repeat_count' and 'duration'.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/widgets.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# Example widget:\n- animimg:\n    align: CENTER\n    id: anim_id\n    src: [ cat_image, cat_image_bowtie ]\n    duration: 1000ms\n\n# Example actions:\non_...:\n  then:\n    - lvgl.animimg.update:\n        id: anim_id\n        repeat_count: 100\n        duration: 300ms\n```\n\n----------------------------------------\n\nTITLE: Configuring SHT4X Sensor in ESPHome\nDESCRIPTION: Basic YAML configuration for setting up an SHT4X temperature and humidity sensor in ESPHome. Configures both temperature and humidity measurements with default names. Requires I2C bus setup.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/sht4x.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: sht4x\n    temperature:\n      name: \"Temperature\"\n    humidity:\n      name: \"Relative Humidity\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Single VL53L0X Sensor in ESPHome (YAML)\nDESCRIPTION: Basic configuration example for setting up a single VL53L0X distance sensor with ESPHome. This configuration uses the default IÂ²C address and enables long range mode for distance measurements.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/vl53l0x.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Simple configuration entry example\nsensor:\n  - platform: vl53l0x\n    name: \"VL53L0x Distance\"\n    address: 0x29\n    update_interval: 60s\n    long_range: true\n```\n\n----------------------------------------\n\nTITLE: Configuring INA219 DC Current Sensor in ESPHome YAML\nDESCRIPTION: This YAML snippet demonstrates how to set up an INA219 DC current sensor in ESPHome. It configures the sensor's address, shunt resistance, and various measurement outputs including current, power, bus voltage, and shunt voltage.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ina219.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: ina219\n    address: 0x40\n    shunt_resistance: 0.1 ohm\n    current:\n      name: \"INA219 Current\"\n    power:\n      name: \"INA219 Power\"\n    bus_voltage:\n      name: \"INA219 Bus Voltage\"\n    shunt_voltage:\n      name: \"INA219 Shunt Voltage\"\n    max_voltage: 32.0V\n    max_current: 3.2A\n    update_interval: 60s\n```\n\n----------------------------------------\n\nTITLE: Configuring ESP32 Camera for TTGO T-Journal\nDESCRIPTION: This YAML snippet provides a configuration for the ESP32 camera on TTGO T-Journal. It specifies the external clock settings, I2C pins, data pins, and control pins for the camera interface.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/esp32_camera.rst#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nesp32_camera:\n  external_clock:\n    pin: GPIO27\n    frequency: 20MHz\n  i2c_pins:\n    sda: GPIO25\n    scl: GPIO23\n  data_pins: [GPIO17, GPIO35, GPIO34, GPIO5, GPIO39, GPIO18, GPIO36, GPIO19]\n  vsync_pin: GPIO22\n  href_pin: GPIO26\n  pixel_clock_pin: GPIO21\n\n  # Image settings\n  name: My Camera\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Configuring GPIO Output in ESPHome - YAML\nDESCRIPTION: This YAML snippet depicts how to define a GPIO output in ESPHome. The configuration requires specifying the 'platform' as 'gpio', along with the specific pin and its unique 'id'. This output component operates internally in ESPHome and is not visible in Home Assistant's frontend. Inputs involve configuring the pin and id, with the output being the activation of the specified GPIO pin.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/output/gpio.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\\noutput:\\n  - platform: gpio\\n    pin: GPIOXX\\n    id: gpio_d1\n```\n\n----------------------------------------\n\nTITLE: Configuring APDS9306 Light Sensor in ESPHome\nDESCRIPTION: Example configuration for integrating an APDS9306 ambient light sensor in ESPHome. The configuration includes the basic setup and optional parameters such as gain, bit width, measurement rate, and update interval.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/apds9306.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: apds9306\n    name: \"APDS9306 Light Level\" # below are optional\n    gain: 1\n    bit_width: 18\n    measurement_rate: 100ms\n    update_interval: 60s\n```\n\n----------------------------------------\n\nTITLE: Configuring External and Internal IÂ²S Audio Microphones in ESPHome\nDESCRIPTION: Example configuration for setting up microphones using IÂ²S audio platform with external and internal ADC types on ESP32 chips, demonstrating different pin and mode configurations\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/microphone/i2s_audio.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmicrophone:\n  - platform: i2s_audio\n    id: external_mic\n    adc_type: external\n    i2s_din_pin: GPIOXX\n\n  - platform: i2s_audio\n    id: adc_mic\n    adc_type: internal\n    adc_pin: GPIOXX\n```\n\n----------------------------------------\n\nTITLE: Basic PID Climate Controller Configuration in YAML\nDESCRIPTION: Basic example configuration for setting up a PID climate controller with temperature sensor, heat output, and control parameters. Includes output and derivative averaging for smoother operation.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/climate/pid.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclimate:\n  - platform: pid\n    name: \"PID Climate Controller\"\n    sensor: temperature_sensor\n    default_target_temperature: 21Â°C\n    heat_output: heater\n    control_parameters:\n      kp: 0.49460\n      ki: 0.00487\n      kd: 12.56301\n      output_averaging_samples: 5      # smooth the output over 5 samples\n      derivative_averaging_samples: 5  # smooth the derivative value over 10 samples\n    deadband_parameters:\n      threshold_high: 0.5Â°C       # deadband within +/-0.5Â°C of target_temperature\n      threshold_low: -0.5Â°C\n```\n\n----------------------------------------\n\nTITLE: Configuring A02YYUW sensor in ESPHome with YAML\nDESCRIPTION: This YAML configuration sets up the A02YYUW ultrasonic sensor within ESPHome. It defines the platform as \"a02yyuw\" and assigns the name \"Distance\" to the sensor. The sensor will use the default UART configuration if `uart_id` is not specified.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/a02yyuw.rst#2025-04-21_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n\"# Example configuration entry\nsensor:\n  - platform: \\\"a02yyuw\\\"\n    name: \\\"Distance\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Binary Sensor On Click Event Configuration in YAML\nDESCRIPTION: Configuration example showing how to trigger an automation when a binary sensor is clicked within a specific time range.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/index.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nbinary_sensor:\n  - platform: gpio\n    # ...\n    on_click:\n      min_length: 50ms\n      max_length: 350ms\n      then:\n        - switch.turn_off: relay_1\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple BME680 Sensors - YAML\nDESCRIPTION: This snippet demonstrates the configuration of multiple BME680 sensors using the BSEC library. It shows how to set up IÂ²C buses for both internal and external devices while specifying unique identifiers and addresses for each sensor. It includes temperature, pressure, humidity, IAQ, and VOC equivalent measurements for two separate sensors.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/bme680_bsec.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n    # I2C bus for the BME680 devices\n    i2c:\n      - id: \"i2cbus_bme\"\n        sda: GPIO18\n        scl: GPIO19\n        scan: true\n\n    # BME680 devices using BSEC library\n    bme680_bsec:\n      - id: bme680_internal\n        i2c_id: \"i2cbus_bme\"\n        address: 0x76\n      - id: bme680_external\n        i2c_id: \"i2cbus_bme\"\n        address: 0x77\n\n    sensor:\n      # Sensors for the internal BME680 device\n      - platform: bme680_bsec\n        bme680_bsec_id: bme680_internal\n        temperature:\n          name: \"IN_Temp\"\n        pressure:\n          name: \"IN_Press\"\n        humidity:\n          name: \"IN_RH\"\n        iaq:\n          name: \"IN_IAQ\"\n        co2_equivalent:\n          name: \"IN_CO2eq\"\n        breath_voc_equivalent:\n          name: \"IN_VOCeq\"\n\n      # Sensors for the external BME680 device\n      - platform: bme680_bsec\n        bme680_bsec_id: bme680_external\n        temperature:\n          name: \"OUT_Temperatura\"\n        pressure:\n          name: \"OUT_Pressione\"\n        humidity:\n          name: \"OUT_RH\"\n        iaq:\n          name: \"OUT_IAQ\"\n        co2_equivalent:\n          name: \"OUT_CO2eq\"\n        breath_voc_equivalent:\n          name: \"OUT_VOCeq\"\n\n    text_sensor:\n      # Text sensor for the internal BME680 device\n      - platform: bme680_bsec\n        bme680_bsec_id: bme680_internal\n        iaq_accuracy:\n          name: \"IN_IAQaccuracy\"\n\n      # Text sensor for the external BME680 device\n      - platform: bme680_bsec\n        bme680_bsec_id: bme680_external\n        iaq_accuracy:\n          name: \"OUT_IAQaccuracy\"\n\n```\n\n----------------------------------------\n\nTITLE: Configuring EMC2101 Base Component in YAML\nDESCRIPTION: Basic configuration for EMC2101 component with PWM settings. Defines resolution and optional parameters like I2C address, output inversion, and PWM/DAC configuration options.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/emc2101.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nemc2101:\n  pwm:\n    resolution: 8\n```\n\n----------------------------------------\n\nTITLE: Configuring MPU6886 Sensor in ESPHome\nDESCRIPTION: Example configuration for setting up MPU6886 sensor with acceleration, gyroscope, and temperature sensing on different axes. Defaults to IÂ²C address 0x68 and allows customization of sensor parameters.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/mpu6886.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: mpu6886\n    address: 0x68\n    accel_x:\n      name: \"MPU6886 Accel X\"\n    accel_y:\n      name: \"MPU6886 Accel Y\"\n    accel_z:\n      name: \"MPU6886 Accel z\"\n    gyro_x:\n      name: \"MPU6886 Gyro X\"\n    gyro_y:\n      name: \"MPU6886 Gyro Y\"\n    gyro_z:\n      name: \"MPU6886 Gyro z\"\n    temperature:\n      name: \"MPU6886 Temperature\"\n```\n\n----------------------------------------\n\nTITLE: Configuring BMP280 with SPI Interface in ESPHome\nDESCRIPTION: Example configuration for BMP280 sensor using SPI communication protocol. Configures temperature and pressure sensing with custom names, oversampling settings, CS pin, and update interval.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/bmp280.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry SPI\nsensor:\n  - platform: bmp280_spi\n    temperature:\n      name: \"Outside Temperature\"\n      oversampling: 16x\n    pressure:\n      name: \"Outside Pressure\"\n    cs_pin: GPIO5\n    update_interval: 60s\n```\n\n----------------------------------------\n\nTITLE: Configuring MPR121 Component and Binary Sensor in YAML\nDESCRIPTION: This snippet demonstrates how to set up the MPR121 component and configure a binary sensor for a touch key in ESPHome. It includes settings for address, debounce, thresholds, and channel configuration.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/mpr121.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nmpr121:\n  id: mpr121_component\n  address: 0x5A\n  touch_debounce: 1\n  release_debounce: 1\n  touch_threshold: 10\n  release_threshold: 7\n\nbinary_sensor:\n  - platform: mpr121\n    id: touch_key0\n    channel: 0\n    name: \"Touch Key 0\"\n    touch_threshold: 12\n    release_threshold: 6\n```\n\n----------------------------------------\n\nTITLE: Configuring Xiaomi RTCGQ02LM Motion Sensor in ESPHome YAML\nDESCRIPTION: YAML configuration for the Mi Motion Sensor 2 RTCGQ02LM. Defines sensors for motion detection, light/dark status, button press, and battery level. Requires a bindkey for decryption.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/xiaomi_ble.rst#2025-04-21_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nxiaomi_rtcgq02lm:\n  - id: motion_one\n    mac_address: XX:XX:XX:XX:XX:XX\n    bindkey: fe39106baeedb7c801e3d63c4396f97e\n\nbinary_sensor:\n  - platform: xiaomi_rtcgq02lm\n    id: motion_one\n    motion:\n      name: \"Mi Motion\"\n    light:\n      name: \"Mi Motion Sensor Light\"\n    button:\n      name: \"Mi Motion Sensor Button\"\n\nsensor:\n  - platform: xiaomi_rtcgq02lm\n    id: motion_one\n    battery_level:\n      name: \"Mi Motion Sensor Battery Level\"\n```\n\n----------------------------------------\n\nTITLE: Calibration Status Text Sensor Configuration in YAML\nDESCRIPTION: Configuration for a text sensor that indicates the calibration status of the pump. Possible values include Fixed Volume, Volume/Time, Fixed Volume & Volume/Time, or Uncalibrated.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/ezo_pmp.rst#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ntext_sensor:\n  - platform: ezo_pmp\n    calibration_status:\n      id: calibration_status\n      name: Calibration Status\n```\n\n----------------------------------------\n\nTITLE: UART Configuration for PZEM-004T in ESPHome\nDESCRIPTION: This snippet demonstrates how to configure the UART communication for the PZEM-004T sensor in ESPHome. It sets the `tx_pin`, `rx_pin`, and `baud_rate` for the UART component, which is essential for the PZEM-004T to communicate with the ESP device.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/pzem004t.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"# Example configuration entry\nuart:\n  tx_pin: D1\n  rx_pin: D2\n  baud_rate: 9600\"\n```\n\n----------------------------------------\n\nTITLE: Sending GET Request with ESPHome HTTP Component\nDESCRIPTION: Example of sending a GET request using the http_request.get action. Includes options for setting headers and handling the response.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/http_request.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - http_request.get:\n      url: https://esphome.io\n      headers:\n        Content-Type: application/json\n      on_response:\n        then:\n          - logger.log:\n              format: 'Response status: %d, Duration: %u ms'\n              args:\n                - response->status_code\n                - response->duration_ms\n  # Short form\n  - http_request.get: https://esphome.io\n```\n\n----------------------------------------\n\nTITLE: Olimex ESP32-POE Ethernet Configuration\nDESCRIPTION: Specific configuration for the Olimex ESP32-POE board which uses a LAN8720 chipset with GPIO17 as clock output and GPIO12 as power pin.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/ethernet.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nethernet:\n  type: LAN8720\n  mdc_pin: GPIO23\n  mdio_pin: GPIO18\n  clk_mode: GPIO17_OUT\n  phy_addr: 0\n  power_pin: GPIO12\n```\n\n----------------------------------------\n\nTITLE: Configuring ESP32 BLE iBeacon in ESPHome\nDESCRIPTION: Basic YAML configuration for setting up an ESP32 as a Bluetooth Low Energy iBeacon. This defines the beacon type and UUID which are required parameters for beacon identification by receiver devices.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/esp32_ble_beacon.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nesp32_ble_beacon:\n  type: iBeacon\n  uuid: 'c29ce823-e67a-4e71-bff2-abaa32e77a98'\n```\n\n----------------------------------------\n\nTITLE: Configuring ATM90E32 Sensor for Split Single Phase Meter in ESPHome\nDESCRIPTION: This snippet demonstrates how to configure the ATM90E32 sensor for a split single phase meter. It includes SPI pin setup, voltage and current sensors for two phases, frequency measurement, and chip temperature monitoring.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/atm90e32.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nspi:\n  clk_pin: GPIOXX\n  miso_pin: GPIOXX\n  mosi_pin: GPIOXX\n\nsensor:\n  - platform: atm90e32\n    cs_pin: GPIOXX\n    phase_a:\n      voltage:\n        name: \"EMON Line Voltage A\"\n      current:\n        name: \"EMON CT1 Current\"\n      power:\n        name: \"EMON Active Power CT1\"\n      reactive_power:\n        name: \"EMON Reactive Power CT1\"\n      power_factor:\n        name: \"EMON Power Factor CT1\"\n      gain_voltage: 3920\n      gain_ct: 39473\n    phase_c:\n      current:\n        name: \"EMON CT2 Current\"\n      power:\n        name: \"EMON Active Power CT2\"\n      reactive_power:\n        name: \"EMON Reactive Power CT2\"\n      power_factor:\n        name: \"EMON Power Factor CT2\"\n      gain_voltage: 3920\n      gain_ct: 39473\n    frequency:\n      name: \"EMON Line Frequency\"\n    chip_temperature:\n      name: \"EMON Chip Temperature\"\n    line_frequency: 50Hz\n    current_phases: 2\n    gain_pga: 2X\n    update_interval: 60s\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple DAC7678 Output Channels in ESPHome YAML\nDESCRIPTION: This snippet shows how to configure multiple individual output channels for the DAC7678 in ESPHome using YAML. Each output channel is associated with a DAC7678 hub ID and a specific channel number (0-7). An ID is required for each channel to allow for control in ESPHome.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/output/dac7678.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n\"# Example configuration entry\ndac7678:\n    address: 0x4A\n    id: dac7678_hub1\n    internal_reference: true\n\n# Individual outputs\noutput:\n  - platform: dac7678\n    dac7678_id: 'dac7678_hub1'\n    channel: 0\n    id: 'dac7678_1_ch0'\n  - platform: dac7678\n    dac7678_id: 'dac7678_hub1'\n    channel: 1\n    id: 'dac7678_1_ch1'\n  - platform: dac7678\n    dac7678_id: 'dac7678_hub1'\n    channel: 2\n    id: 'dac7678_1_ch2'\n  - platform: dac7678\n    dac7678_id: 'dac7678_hub1'\n    channel: 3\n    id: 'dac7678_1_ch3'\n  - platform: dac7678\n    dac7678_id: 'dac7678_hub1'\n    channel: 4\n    id: 'dac7678_1_ch4'\n  - platform: dac7678\n    dac7678_id: 'dac7678_hub1'\n    channel: 5\n    id: 'dac7678_1_ch5'\n  - platform: dac7678\n    dac7678_id: 'dac7678_hub1'\n    channel: 6\n    id: 'dac7678_1_ch6'\n  - platform: dac7678\n    dac7678_id: 'dac7678_hub1'\n    channel: 7\n    id: 'dac7678_1_ch7'\"\n```\n\n----------------------------------------\n\nTITLE: Configuring SCD30 Sensor Parameters in YAML\nDESCRIPTION: This snippet configures the SCD30 sensor to read COâ, temperature, and humidity values, including necessary sensor parameters such as accuracy decimals, offsets, and update intervals.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/scd30.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: scd30\n    co2:\n      name: \"Workshop CO2\"\n      accuracy_decimals: 1\n    temperature:\n      name: \"Workshop Temperature\"\n      accuracy_decimals: 2\n    humidity:\n      name: \"Workshop Humidity\"\n      accuracy_decimals: 1\n    temperature_offset: 1.5 Â°C\n    address: 0x61\n    update_interval: 5s\n```\n\n----------------------------------------\n\nTITLE: Configuring Binary Light Platform in ESPHome using YAML\nDESCRIPTION: This snippet demonstrates how to configure a binary light in ESPHome using YAML. The binary light platform enables a simple on/off functionality for a light using an associated binary output component. The 'output' parameter is essential as it specifies the binary output component controlling the light.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/light/binary.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nlight:\n  - platform: binary\n    name: \"Desk Lamp\"\n    output: light_output\n```\n\n----------------------------------------\n\nTITLE: Decreasing DFPlayer Volume - YAML\nDESCRIPTION: This YAML snippet defines an action to decrease the volume of a DFPlayer device in an automation sequence. It utilizes the 'dfplayer.volume_down' method, which interacts with the DFPlayer component to lower the audio output level.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/dfplayer.rst#2025-04-21_snippet_19\n\nLANGUAGE: YAML\nCODE:\n```\n- action: dfplayer_volume_down\n  then:\n    - dfplayer.volume_down\n```\n\n----------------------------------------\n\nTITLE: Configuring ESP32 Touch Sensor in YAML\nDESCRIPTION: Basic YAML configuration for setting up an ESP32 touch sensor on GPIO27 with a threshold value. Defines the platform, sensor name, pin assignment, and touch threshold setting.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/esp32_touch.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- platform: esp32_touch\n  name: \"ESP32 Touch Pad GPIO27\"\n  pin: GPIO27\n  threshold: 1000\n```\n\n----------------------------------------\n\nTITLE: Configuring BLE Server Characteristic Write Handler in YAML\nDESCRIPTION: This snippet demonstrates how to configure a write handler for a BLE characteristic. It uses a lambda function to log the received data and client ID when the characteristic is written to.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/esp32_ble_server.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nesp32_ble_server:\n  services:\n    - uuid: # ...\n      characteristics:\n        # ...\n        write: true\n        on_write:\n          then:\n            - lambda: |-\n                ESP_LOGD(\"BLE\", \"Descriptor received: %s from %d\", std::string(x.begin(), x.end()).c_str(), id);\n```\n\n----------------------------------------\n\nTITLE: Including External Libraries in ESPHome\nDESCRIPTION: Example showing how to include libraries from PlatformIO, Arduino, or GitHub in an ESPHome project.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/esphome.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nesphome:\n  # ...\n  libraries:\n    # a library from PlatformIO\n    - espressif/esp32-camera\n\n    # a library bundled with Arduino\n    - Wire\n\n    # use the git version of a library used by a component\n    - Improv=https://github.com/improv-wifi/sdk-cpp.git#v1.0.0\n```\n\n----------------------------------------\n\nTITLE: SM16716 Output Configuration\nDESCRIPTION: This configuration defines individual output channels for the SM16716 component. It maps each channel to a specific color (red, green, blue) and assigns an ID to each output, enabling control over individual color channels.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/output/sm16716.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n\"# Individual outputs\noutput:\n  - platform: sm16716\n    id: output_red\n    channel: 0\n  - platform: sm16716\n    id: output_green\n    channel: 1\n  - platform: sm16716\n    id: output_blue\n    channel: 2\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Climate On State Trigger\nDESCRIPTION: Example of setting up an on_state trigger for a climate component that executes when the state of the device is updated. The trigger can access the climate object via the variable x.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/climate/index.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nclimate:\n  - platform: midea  # or any other platform\n    # ...\n    on_state:\n      - logger.log: \"State updated!\"\n      - lambda: |-\n          if (x.mode != CLIMATE_MODE_OFF)\n            id(some_binary_sensor).publish_state(true);\n```\n\n----------------------------------------\n\nTITLE: Configuring Fonts in ESPHome YAML Configuration\nDESCRIPTION: Example configuration showing various ways to set up fonts in ESPHome, including local files, Google Fonts, web fonts, and custom glyph configurations. This allows customizing fonts with different sizes, bit depths, and specific character sets.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/font.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Various ways to configure fonts\nfont:\n  - file: \"fonts/Comic Sans MS.ttf\"\n    id: my_font\n    size: 20\n    bpp: 2\n\n  - file: \"fonts/tom-thumb.bdf\"\n    id: tomthumb\n\n    # gfonts://family[@weight]\n  - file: \"gfonts://Roboto\"\n    id: roboto_20\n    size: 20\n\n  - file:\n      type: gfonts\n      family: Roboto\n      weight: 900\n    id: roboto_16\n    size: 16\n\n  - file: \"gfonts://Material+Symbols+Outlined\"\n    id: icons_50\n    size: 50\n    glyphs: [\"\\U0000e425\"] # mdi-timer\n\n  - file: \"fonts/RobotoCondensed-Regular.ttf\"\n    id: roboto_special_28\n    size: 28\n    bpp: 4\n    glyphs: [\n      0123456789aAÃ¡ÃeEÃ©Ã,\n      (,),+,-,_,.,Â°,â¢,Âµ,\n      \"\\u0020\", # space\n      \"\\u002C\", # ,\n      \"\\u0021\", # !\n      \"\\u0022\", # \"\n      \"\\u0027\", # '\n      ]\n\n  - file: \"fonts/RobotoCondensed-Regular.ttf\"\n    id: my_font_with_icons\n    size: 20\n    bpp: 4\n    extras:\n      - file: \"fonts/materialdesignicons-webfont.ttf\"\n        glyphs: [\n          \"\\U000F02D1\", # mdi-heart\n          \"\\U000F05D4\", # mdi-airplane-landing\n          ]\n\n  - file:\n      type: gfonts\n      family: Roboto\n    id: roboto_european_core\n    size: 16\n    glyphsets:\n      - GF_Latin_Core\n      - GF_Greek_Core\n      - GF_Cyrillic_Core\n\n  - file: \"https://github.com/IdreesInc/Monocraft/releases/download/v3.0/Monocraft.ttf\"\n    id: web_font\n    size: 20\n  - file:\n      url: \"https://github.com/IdreesInc/Monocraft/releases/download/v3.0/Monocraft.ttf\"\n      type: web\n    id: web_font2\n    size: 24\n\ndisplay:\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Basic SDL2 Display Configuration in ESPHome\nDESCRIPTION: Example YAML configuration for setting up an SDL2 display in ESPHome. Defines a display with specific dimensions and test card option.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/sdl.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nesphome:\n  name: sdl\n\nhost:\n\ndisplay:\n  - platform: sdl\n    show_test_card: true\n    dimensions:\n      width: 450\n      height: 600\n```\n\n----------------------------------------\n\nTITLE: Configuring TSL2591 Sensor in ESPHome\nDESCRIPTION: Example configuration for setting up a TSL2591 ambient light sensor with I2C communication. Shows how to configure multiple sensor outputs including visible light, infrared, full spectrum, calculated lux, and actual gain values. Includes custom device and glass attenuation factors.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/tsl2591.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\ni2c:\n  # ...\nsensor:\n  - platform: tsl2591\n    name: \"This little light of mine\"\n    id: \"my_tls2591\"\n    address: 0x29\n    update_interval: 60s\n    gain: auto\n    device_factor: 53\n    glass_attenuation_factor: 14.4\n    visible:\n      name: \"TSL2591 visible light\"\n    infrared:\n      name: \"TSL2591 infrared light\"\n    full_spectrum:\n      name: \"TSL2591 full spectrum light\"\n    calculated_lux:\n      id: i_lux\n      name: \"TSL2591 Lux\"\n    actual_gain:\n      id: \"actual_gain\"\n      name: \"TSL2591 actual gain\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Binary Sensor State in ESPHome\nDESCRIPTION: Demonstrates different methods to display binary sensor states in an ESPHome display, including conditional statements and inline if expressions.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/index.rst#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nbinary_sensor:\n  - platform: ...\n    # ...\n    id: my_binary_sensor\n\ndisplay:\n  - platform: ...\n    # ...\n    lambda: |-\n      if (id(my_binary_sensor).state) {\n        it.print(0, 0, id(my_font), \"state: ON\");\n      } else {\n        it.print(0, 0, id(my_font), \"state: OFF\");\n      }\n      // Shorthand:\n      it.printf(0, 0, id(my_font), \"State: %s\", id(my_binary_sensor).state ? \"ON\" : \"OFF\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Haier Climate Binary Sensors in YAML\nDESCRIPTION: Example YAML configuration for setting up multiple binary sensors to monitor different states of a Haier climate device. The configuration includes sensors for compressor status, defrost status, four-way valve status, heating status, and fan status. Requires a configured Haier climate component with a valid haier_id.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/haier.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nbinary_sensor:\n  - platform: haier\n    haier_id: haier_ac\n    compressor_status:\n      name: Haier Outdoor Compressor Status\n    defrost_status:\n      name: Haier Defrost Status\n    four_way_valve_status:\n      name: Haier Four Way Valve Status\n    indoor_electric_heating_status:\n      name: Haier Indoor Electric Heating Status\n    indoor_fan_status:\n      name: Haier Indoor Fan Status\n    outdoor_fan_status:\n      name: Haier Outdoor Fan Status\n```\n\n----------------------------------------\n\nTITLE: Configuring LD2410 Sensor Measurements in YAML\nDESCRIPTION: This configuration allows the use of the LD2410 to obtain various sensor measurements including distances and energies associated with both moving and still targets.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ld2410.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: ld2410\n    light:\n      name: light\n    moving_distance:\n      name : Moving Distance\n    still_distance:\n      name: Still Distance\n    moving_energy:\n      name: Move Energy\n    still_energy:\n      name: Still Energy\n    detection_distance:\n      name: Detection Distance\n    g0:\n      move_energy:\n        name: g0 move energy\n      still_energy:\n        name: g0 still energy\n    g1:\n      move_energy:\n        name: g1 move energy\n      still_energy:\n        name: g1 still energy\n    g2:\n      move_energy:\n        name: g2 move energy\n      still_energy:\n        name: g2 still energy\n    g3:\n      move_energy:\n        name: g3 move energy\n      still_energy:\n        name: g3 still energy\n    g4:\n      move_energy:\n        name: g4 move energy\n      still_energy:\n        name: g4 still energy\n    g5:\n      move_energy:\n        name: g5 move energy\n      still_energy:\n        name: g5 still energy\n    g6:\n      move_energy:\n        name: g6 move energy\n      still_energy:\n        name: g6 still energy\n    g7:\n      move_energy:\n        name: g7 move energy\n      still_energy:\n        name: g7 still energy\n    g8:\n      move_energy:\n        name: g8 move energy\n      still_energy:\n        name: g8 still energy\n\n```\n\n----------------------------------------\n\nTITLE: Ai-Thinker ESP32 Camera Configuration in YAML\nDESCRIPTION: Specific YAML configuration for the Ai-Thinker ESP32 camera board. Includes pin assignments tailored for this hardware.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/esp32_camera.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nesp32_camera:\n  external_clock:\n    pin: GPIO0\n    frequency: 20MHz\n  i2c_pins:\n    sda: GPIO26\n    scl: GPIO27\n  data_pins: [GPIO5, GPIO18, GPIO19, GPIO21, GPIO36, GPIO39, GPIO34, GPIO35]\n  vsync_pin: GPIO25\n  href_pin: GPIO23\n  pixel_clock_pin: GPIO22\n  power_down_pin: GPIO32\n\n  # Image settings\n  name: My Camera\n  # ...\n```\n\n----------------------------------------\n\nTITLE: ESPHome Configuration for Water Leak Detector\nDESCRIPTION: Complete ESPHome configuration for M5StickC ESP32-based water leak detector. Includes setup for touch sensors, display, WiFi connectivity, and sensor thresholds. Uses ST7735 display and ESP32 touch capabilities for leak detection.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/cookbook/leak-detector-m5stickC.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsubstitutions:\n  devicename: basement_leak_detector\n  friendly_name: Basement Leak Detector\n  device_description: Leak detector in basement utility room\n\nesphome:\n  name: $devicename\n  comment: ${device_description}\n\nesp32:\n  board: m5stick-c\n\nwifi:\n  ssid: !secret wifi_ssid\n  password: !secret wifi_password\n\n  ap:\n    password: !secret fallback_ap_password\n\ncaptive_portal:\n\nlogger:\n\napi:\nota:\n  platform: esphome\n\nstatus_led:\n  pin:\n    number: GPIO10\n    inverted: true\n\nspi:\n  clk_pin: GPIO13\n  mosi_pin: GPIO15\n\ni2c:\n   - id: bus_a\n     sda: GPIO21\n     scl: GPIO22\n     scan: true\n\nesp32_touch:\n  iir_filter: 10ms\n\nbinary_sensor:\n  - platform: gpio\n    pin:\n      number: GPIO37\n      inverted: true\n    id: button_a\n    on_press:\n      then:\n        - switch.toggle: led1\n  - platform: gpio\n    pin:\n      number: GPIO39\n      inverted: true\n    id: button_b\n    on_press:\n      then:\n        - switch.toggle: led1\n  - platform: status\n    name: \"${friendly_name} Status\"\n  - platform: esp32_touch\n    name: \"${friendly_name} Sensor\"\n    device_class: moisture\n    id: leak\n    pin: GPIO33\n    threshold: 30\n    on_press:\n      - while:\n          condition:\n            binary_sensor.is_on: leak\n          then:\n          - switch.turn_on: led1\n          - delay: 200ms\n          - switch.turn_off: led1\n          - delay: 100ms\n          - switch.turn_on: led1\n          - delay: 200ms\n          - switch.turn_off: led1\n          - delay: 400ms\n    on_release:\n      then:\n        - switch.turn_off: led1\n\nsensor:\n  - platform: uptime\n    name: \"${friendly_name} Uptime\"\n  - platform: axp192\n    address: 0x34\n    i2c_id: bus_a\n    update_interval: 30s\n    battery_level:\n      name: \"${friendly_name} Battery Level\"\n      id: \"m5stick_batterylevel\"\n  - platform: wifi_signal\n    name: \"${friendly_name} WiFi Signal\"\n    update_interval: 60s\n\ntext_sensor:\n  - platform: version\n    name: \"${friendly_name} ESPHome version\"\n\nswitch:\n  - platform: gpio\n    pin:\n      number: GPIO10\n      inverted: true\n    id: led1\n\nfont:\n  - file: 'OpenSans-Regular.ttf'\n    id: font1\n    size: 66\n\ncolor:\n    - id: color_wet\n      red: 100%\n      green: 0%\n      blue: 0%\n    - id: color_dry\n      red: 0%\n      green: 100%\n      blue: 0%\n\ndisplay:\n  - platform: st7735\n    model: \"INITR_MINI160X80\"\n    device_height: 160\n    device_width: 82\n    col_start: 0\n    row_start: 0\n    eight_bit_color: false\n    cs_pin: GPIO5\n    dc_pin: GPIO23\n    reset_pin: GPIO18\n    invert_colors: true\n    use_bgr: true\n    lambda: |-\n      if (id(leak).state) {\n        it.fill(COLOR_OFF);\n        it.print(42, -24, id(font1), id(color_wet), TextAlign::TOP_CENTER, \"W\");\n        it.print(42, 32, id(font1), id(color_wet), TextAlign::TOP_CENTER, \"E\");\n        it.print(42, 85, id(font1), id(color_wet), TextAlign::TOP_CENTER, \"T\");\n      } else {\n        it.fill(COLOR_OFF);\n        it.print(42, -24, id(font1), id(color_dry), TextAlign::TOP_CENTER, \"D\");\n        it.print(42, 32, id(font1), id(color_dry), TextAlign::TOP_CENTER, \"R\");\n        it.print(42, 85, id(font1), id(color_dry), TextAlign::TOP_CENTER, \"Y\");\n      }\n```\n\n----------------------------------------\n\nTITLE: Setting Up Pressure Compensation Using Local Sensor\nDESCRIPTION: This YAML snippet demonstrates how to configure ambient pressure compensation using a local BME280 pressure sensor with the SCD4X sensor in ESPHome. Adjustments based on ambient pressure are essential for accurate COâ readings.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/scd4x.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: bme280\n    pressure:\n      name: \"Ambient Pressure\"\n      id: bme_pressure\n\n  - platform: scd4x\n    measurement_mode: low_power_periodic\n    ambient_pressure_compensation_source: bme_pressure\n    temperature_offset: 0\n    co2:\n      name: \"CO2 level\"\n```\n\n----------------------------------------\n\nTITLE: Complete NTC Temperature Sensor Configuration in ESPHome\nDESCRIPTION: This snippet provides a full configuration example for an NTC temperature sensor, including resistance and ADC sensors. It uses the B-constant calibration method and assigns a name to the NTC temperature sensor.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ntc.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n    # Example configuration entry\n    sensor:\n      - platform: ntc\n        sensor: resistance_sensor\n        calibration:\n          b_constant: 3950\n          reference_temperature: 25Â°C\n          reference_resistance: 10kOhm\n        name: NTC Temperature\n\n      # Example source sensors:\n      - platform: resistance\n        id: resistance_sensor\n        sensor: source_sensor\n        configuration: DOWNSTREAM\n        resistor: 5.6kOhm\n        name: Resistance Sensor\n      - platform: adc\n        id: source_sensor\n        pin: A0\n```\n\n----------------------------------------\n\nTITLE: ESP32 S3 Box 3 Complete Configuration\nDESCRIPTION: Complete configuration example for setting up ES7210 ADC with I2S audio on an ESP32 S3 Box 3, including microphone setup, sample rate configuration, and pin assignments.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/audio_adc/es7210.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\naudio_adc:\n  - platform: es7210\n    id: es7210_adc\n    bits_per_sample: 16bit\n    sample_rate: 16000\n\ni2s_audio:\n  - id: i2s_audio_bus\n    i2s_lrclk_pin: GPIO45\n    i2s_bclk_pin: GPIO17\n    i2s_mclk_pin: GPIO2\n\nmicrophone:\n  - platform: i2s_audio\n    id: box_mic\n    sample_rate: 16000\n    i2s_din_pin: GPIO16\n    bits_per_sample: 16bit\n    adc_type: external\n```\n\n----------------------------------------\n\nTITLE: UART Write Action Examples\nDESCRIPTION: Examples of different ways to write data to the UART bus, including string literals, escape characters, raw data, and templated data.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/uart.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - uart.write: 'Hello World'\n\n  # For escape characters, you must use double quotes!\n  - uart.write: \"Hello World\\r\\n\"\n\n  # Raw data\n  - uart.write: [0x00, 0x20, 0x42]\n\n  # Templated, return type is std::vector<uint8_t>\n  - uart.write: !lambda\n      return {0x00, 0x20, 0x42};\n\n  # in case you need to specify the uart id\n  - uart.write:\n      id: my_second_uart\n      data: 'other data'\n```\n\n----------------------------------------\n\nTITLE: Configuring NeoPixelBus Light in ESPHome YAML\nDESCRIPTION: Example configuration for setting up a NeoPixelBus light in ESPHome. It specifies the platform, LED type, variant, pin, number of LEDs, and name.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/light/neopixelbus.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlight:\n  - platform: neopixelbus\n    type: GRB\n    variant: WS2811\n    pin: GPIOXX\n    num_leds: 60\n    name: \"NeoPixel Light\"\n```\n\n----------------------------------------\n\nTITLE: SSD1306 OLED Display Configuration and Rendering\nDESCRIPTION: Complete I2C and display configuration with lambda function for rendering time, temperature, and custom text.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/cookbook/display_time_temp_oled.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ni2c:\n  sda: GPIOXX\n  scl: GPIOXX\n  scan: false\n\ndisplay:\n  - platform: ssd1306_i2c\n    model: \"SH1106 128x64\"\n    reset_pin: GPIOXX\n    address: 0x3C\n    lambda: |-\n      // Print \"Mitt Smarta Hus\" in top center.\n      it.printf(64, 0, id(font1), TextAlign::TOP_CENTER, \"Mitt Smarta Hus\");\n\n      // Print time in HH:MM format\n      it.strftime(0, 60, id(font2), TextAlign::BASELINE_LEFT, \"%H:%M\", id(esptime).now());\n\n      // Print inside temperature (from homeassistant sensor)\n      if (id(inside_temperature).has_state()) {\n        it.printf(127, 23, id(font3), TextAlign::TOP_RIGHT , \"%.1fÂ°\", id(inside_temperature).state);\n      }\n\n      // Print outside temperature (from homeassistant sensor)\n      if (id(outside_temperature).has_state()) {\n        it.printf(127, 60, id(font3), TextAlign::BASELINE_RIGHT , \"%.1fÂ°\", id(outside_temperature).state);\n      }\n```\n\n----------------------------------------\n\nTITLE: Handling LVGL Tileview Value Change Trigger in YAML\nDESCRIPTION: Example of using the on_value trigger for a tileview widget to execute actions when the selected tile changes. Demonstrates checking the new tile ID and logging a message.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/widgets.rst#2025-04-21_snippet_42\n\nLANGUAGE: yaml\nCODE:\n```\n# Example trigger:\n- tileview:\n    ...\n    on_value:\n      - if:\n          condition:\n            lambda: return tile == id(cat_tile);\n          then:\n            - logger.log: \"Cat tile is now showing\"\n```\n\n----------------------------------------\n\nTITLE: Basic TE-M3200 Sensor Configuration in YAML\nDESCRIPTION: Basic configuration example for setting up the TE-M3200 pressure sensor with raw pressure and temperature readings using ESPHome.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/tem3200.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: tem3200\n    raw_pressure:\n      name: \"Raw Pressure\"\n    temperature:\n      name: Temperature\n```\n\n----------------------------------------\n\nTITLE: Configuring Home Assistant Time Source in ESPHome YAML\nDESCRIPTION: This snippet demonstrates how to set up the Home Assistant time platform in an ESPHome configuration file. It uses the native API connection to periodically synchronize the current time with Home Assistant.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/time/homeassistant.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\ntime:\n  - platform: homeassistant\n    id: homeassistant_time\n```\n\n----------------------------------------\n\nTITLE: Configuring FastLED SPI Light in ESPHome\nDESCRIPTION: Example configuration for setting up a FastLED SPI light using the WS2801 chipset. Specifies the chipset, data pin, clock pin, number of LEDs, RGB order, and name for the light component.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/light/fastled.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nlight:\n  - platform: fastled_spi\n    chipset: WS2801\n    data_pin: GPIOXX\n    clock_pin: GPIOXX\n    num_leds: 60\n    rgb_order: BRG\n    name: \"FastLED SPI Light\"\n```\n\n----------------------------------------\n\nTITLE: Radon Eye RD200 Sensor Configuration with pCi/L (YAML)\nDESCRIPTION: This configuration enhances the Radon Eye RD200 sensor setup by converting the radon concentration to pCi/L and setting the accuracy to two decimal places. It includes a lambda filter to perform the unit conversion from the default value.  The unit_of_measurement and accuracy_decimals attributes improve readability and compatibility with other systems.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/radon_eye_ble.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nesp32_ble_tracker:\n\nble_client:\n  - mac_address: XX:XX:XX:XX:XX:XX\n    id: radon_eye_ble_id\n\nsensor:\n  - platform: radon_eye_rd200\n    ble_client_id: radon_eye_ble_id\n    update_interval: 5min # default\n    radon:\n      name: \"Radon\"\n      unit_of_measurement: \"pCi/L\"\n      accuracy_decimals: 2\n      filters:\n        - lambda: return x / 37;\n    radon_long_term:\n      name: \"Radon Long Term\"\n      unit_of_measurement: \"pCi/L\"\n      accuracy_decimals: 2\n      filters:\n        - lambda: return x / 37;\n```\n\n----------------------------------------\n\nTITLE: Manually Publish Sensor State in ESPHome (C++)\nDESCRIPTION: This C++ snippet shows how to manually publish a new state for a sensor using `publish_state()`. This will trigger the sensor filters and update the state in ESPHome and connected services like Home Assistant.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/index.rst#2025-04-21_snippet_24\n\nLANGUAGE: cpp\nCODE:\n```\n      // Within lambda, push a value of 42.0\n      id(my_sensor).publish_state(42.0);\n\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP9808 Temperature Sensor in ESPHome (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to configure the MCP9808 sensor in ESPHome. The sensor is set up under the 'sensor' platform, with an optional update interval specified. The configuration requires setting up the IÂ²C bus beforehand. The MCP9808 sensor defaults to an IÂ²C address of 0x18, with a default update interval of 60 seconds.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/mcp9808.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: mcp9808\n    name: \"Living Room Temperature\"\n    update_interval: 60s\n```\n\n----------------------------------------\n\nTITLE: Configuring BL0906 2-Channel Energy Monitor in YAML\nDESCRIPTION: YAML configuration for a 2-channel BL0906 energy monitor setup in ESPHome. Includes sensors for frequency, temperature, voltage, current, power, and energy for two channels, plus total energy and power.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/bl0906.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: bl0906\n    frequency:\n      name: 'Frequency'\n    temperature:\n      name: 'Temperature'\n    voltage:\n      name: 'Voltage'\n    channel_1:\n      current:\n        name: 'Current_1'\n      power:\n        name: 'Power_1'\n      energy:\n        name: 'Energy_1'\n    channel_2:\n      current:\n        name: 'Current_2'\n      power:\n        name: 'Power_2'\n      energy:\n        name: 'Energy_2'\n    total_energy:\n      name: 'Total_Energy'\n    total_power:\n      name: 'Total_Power'\n```\n\n----------------------------------------\n\nTITLE: Configuring SUM Binary Sensor Map in ESPHome\nDESCRIPTION: Example configuration for setting up a SUM binary sensor map that adds values from active sensors. Includes GPIO binary sensor configuration.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/binary_sensor_map.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: binary_sensor_map\n    id: group_0\n    name: 'Group Map 0'\n    type: sum\n    channels:\n      - binary_sensor: bit0\n        value: 1\n      - binary_sensor: bit1\n        value: 2\n      - binary_sensor: bit2\n        value: 4\n      - binary_sensor: bit3\n        value: 8\n\nbinary_sensor:\n  - platform: gpio\n    pin: GPIOXX\n    id: bit0\n\n  - platform: gpio\n    pin: GPIOXX\n    id: bit1\n\n  - platform: gpio\n    pin: GPIOXX\n    id: bit2\n\n  - platform: gpio\n    pin: GPIOXX\n    id: bit3\n```\n\n----------------------------------------\n\nTITLE: Configuring PN532 NFC/RFID with Binary Sensor in ESPHome\nDESCRIPTION: This snippet provides a complete example of configuring a PN532 NFC/RFID controller with SPI communication and a binary sensor for a specific NFC tag in ESPHome.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/pn532.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nspi:\n  clk_pin: D0\n  miso_pin: D1\n  mosi_pin: D2\n\npn532_spi:\n  cs_pin: D3\n  update_interval: 1s\n\nbinary_sensor:\n  - platform: pn532\n    uid: 74-10-37-94\n    name: \"PN532 NFC Tag\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Nextion Text Sensor in YAML\nDESCRIPTION: Basic configuration example showing how to set up a Nextion text sensor component with display and sensor definitions.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/text_sensor/nextion.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\ndisplay:\n  - platform: nextion\n    id: nextion1\n    # ...\n\ntext_sensor:\n- platform: nextion\n  nextion_id: nextion1\n  name: text0\n  id: text0\n  update_interval: 4s\n  component_name: text0\n```\n\n----------------------------------------\n\nTITLE: Configuring WL-134 Pet Tag Sensor in ESPHome\nDESCRIPTION: Basic YAML configuration example for setting up a WL-134 pet tag text sensor. The sensor exposes the last read pet tag as a text value and can optionally reset after reading.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/text_sensor/wl_134.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\ntext_sensor:\n  - platform: wl_134\n    name: Transponder Code\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP4725 Output with Global I2C Connection\nDESCRIPTION: Example configuration for setting up an MCP4725 DAC output using global I2C connection with default address 0x60, including I2C pin configuration and output setup\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/output/mcp4725.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\n\n# Set a global i2c connection\ni2c:\n  sda: 21\n  scl: 22\n  scan: true\n\n# Set the output with default (address: 0x60 / global i2c)\noutput:\n  - platform: mcp4725\n    id: dac_output\n\non_...:\n  then:\n    - output.set_level:\n        id: dac_output\n        level: 100%\n```\n\n----------------------------------------\n\nTITLE: Configuring FS3000 sensor in ESPHome YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure the FS3000 air velocity sensor within an ESPHome configuration file. It specifies the platform as fs3000, sets the sensor's name, defines the model (1005 or 1015), and sets the update interval. Requires a pre-configured IÂ²C bus.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/fs3000.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\n    # Example configuration entry\n    sensor:\n      - platform: fs3000\n        name: \"Air Velocity\"\n        model: 1005\n        update_interval: 60s\n\n```\n\n----------------------------------------\n\nTITLE: Configuring HLW8012 Sensor in ESPHome with YAML\nDESCRIPTION: This YAML configuration defines an HLW8012 sensor within the ESPHome framework.  It sets up the `voltage_divider`, `current_resistor`, and `current_multiply` substitutions, and then configures the sensor with its current, voltage, power, and energy components. The `update_interval` is set to 60 seconds.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/hlw8012.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n    substitutions:\n      voltage_divider: \"2351\"\n      current_resistor: \"0.001\"\n      current_multiply: \"1.0\"\n\n    sensor:\n      - platform: hlw8012\n        current_resistor: ${current_resistor}\n        voltage_divider: ${voltage_divider}\n        current:\n          name: \"HLW8012 Current\"\n          filters:\n            - multiply: ${current_multiply}\n        voltage:\n          name: \"HLW8012 Voltage\"\n        power:\n          name: \"HLW8012 Power\"\n        energy:\n          name: \"HLW8012 Energy\"\n        update_interval: 60s\n```\n\n----------------------------------------\n\nTITLE: Implementing Manual Calibration for SCD30\nDESCRIPTION: This snippet implements a manual calibration UI section in Home Assistant for the SCD30 sensor, allowing users to set a COâ calibration value and trigger a recalibration.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/scd30.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Example on how to implement a UI section in HA for manual calibration.\n# Note: Please enter first a CO2 value before pressing the button.\nbutton:\n  - platform: template\n    name: \"SCD30 Force manual calibration\"\n    entity_category: \"config\"\n    on_press:\n      then:\n        - scd30.force_recalibration_with_reference:\n            value: !lambda 'return id(co2_cal).state;'\n\nnumber:\n  - platform: template\n    name: \"CO2 calibration value\"\n    optimistic: true\n    min_value: 350\n    max_value: 4500\n    step: 1\n    id: co2_cal\n    icon: \"mdi:molecule-co2\"\n    entity_category: \"config\"\n```\n\n----------------------------------------\n\nTITLE: Configuring a Template-Based Select Component in ESPHome (YAML)\nDESCRIPTION: Complete example of setting up a template-based select component with three options in ESPHome. Includes configuration for name, options, initial state, optimistic mode, and logging action when an option is selected.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/select/index.rst#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nselect:\n  - platform: template\n    name: Mode\n    id: mode\n    options:\n     - \"Option1\"\n     - \"Option2\"\n     - \"Option3\"\n    initial_option: \"Option1\"\n    optimistic: true\n    set_action:\n      - logger.log:\n          format: \"Chosen option: %s\"\n          args: [\"x.c_str()\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Xiaomi HHCCJCY10 MiFlora Sensor in ESPHome\nDESCRIPTION: YAML configuration for setting up a Xiaomi HHCCJCY10 MiFlora (Pink version) plant sensor in ESPHome. This sensor measures temperature, moisture, ambient light, conductivity, and also provides battery level readings.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/xiaomi_hhccjcy10.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: xiaomi_hhccjcy10\n    mac_address: XX:XX:XX:XX:XX:XX\n    temperature:\n      name: \"Xiaomi HHCCJCY10 Temperature\"\n    moisture:\n      name: \"Xiaomi HHCCJCY10 Moisture\"\n    illuminance:\n      name: \"Xiaomi HHCCJCY10 Illuminance\"\n    conductivity:\n      name: \"Xiaomi HHCCJCY10 Soil Conductivity\"\n    battery_level:\n      name: \"Xiaomi HHCCJCY10 Battery Level\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Individual BP1658CJ Output Channel\nDESCRIPTION: Define individual output channels for the BP1658CJ LED driver, specifying channel number and optional BP1658CJ hub ID\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/output/bp1658cj.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\noutput:\n  - platform: bp1658cj\n    id: output_red\n    channel: 1\n```\n\n----------------------------------------\n\nTITLE: Basic Deep Sleep Configuration in ESPHome\nDESCRIPTION: Example configuration for enabling deep sleep with a 10-second run duration and 10-minute sleep duration. This setup will keep the device active for 10 seconds, then enter deep sleep for 10 minutes before waking up again.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/deep_sleep.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\ndeep_sleep:\n  run_duration: 10s\n  sleep_duration: 10min\n```\n\n----------------------------------------\n\nTITLE: PZEM-004T Sensor Configuration in ESPHome\nDESCRIPTION: This configuration defines the PZEM-004T sensor platform in ESPHome, creating sensors for current, voltage, power, and energy.  It configures the `update_interval` to specify how often the sensor values are updated, and assigns names to each sensor for easy identification.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/pzem004t.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n\"sensor:\n  - platform: pzem004t\n    current:\n      name: \\\"PZEM-004T Current\\\"\n    voltage:\n      name: \\\"PZEM-004T Voltage\\\"\n    power:\n      name: \\\"PZEM-004T Power\\\"\n    energy:\n      name: \\\"PZEM-004T Energy\\\"\n    update_interval: 60s\"\n```\n\n----------------------------------------\n\nTITLE: Configuring ESP8266 Platform in YAML\nDESCRIPTION: Example configuration for the ESP8266 platform in ESPHome. It specifies the board type and framework version.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/esp8266.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nesp8266:\n  board: nodemcuv2\n  framework:\n    version: recommended\n```\n\n----------------------------------------\n\nTITLE: Implementing arm_away Action for Alarm Panel in YAML\nDESCRIPTION: YAML configuration for adding an arm_away action to an Alarm Control Panel, which arms the alarm in away mode.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/alarm_control_panel/index.rst#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - alarm_control_panel.arm_away:\n        id: acp1\n        code: \"1234\"\n```\n\n----------------------------------------\n\nTITLE: Configuring ENS160 Air Quality Sensor with IÂ²C and SPI in ESPHome\nDESCRIPTION: Example YAML configuration for setting up ENS160 air quality sensors with ESPHome using either IÂ²C or SPI interfaces. The configuration includes eCO2, TVOC, and AQI sensors, with temperature and humidity compensation for improved accuracy.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ens160.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry I2C\nsensor:\n  - platform: ens160_i2c\n    eco2:\n      name: \"ENS160 eCO2\"\n    tvoc:\n      name: \"ENS160 Total Volatile Organic Compounds\"\n    aqi:\n      id: ens160_air_quality_index\n      name: \"ENS160 Air Quality Index\"\n    update_interval: 60s\n    address: 0x53\n    compensation:\n      temperature: id_temperature_sensor\n      humidity: id_humidity_sensor\n\n# Example configuration entry SPI\nsensor:\n  - platform: ens160_spi\n    eco2:\n      name: \"ENS160 eCO2\"\n    tvoc:\n      name: \"ENS160 Total Volatile Organic Compounds\"\n    aqi:\n      name: \"ENS160 Air Quality Index\"\n    update_interval: 60s\n    cs_pin: GPIO5\n    compensation:\n      temperature: id_temperature_sensor\n      humidity: id_humidity_sensor\n```\n\n----------------------------------------\n\nTITLE: Configuring Home Assistant Binary Sensor in ESPHome YAML\nDESCRIPTION: This YAML snippet demonstrates how to set up a basic Home Assistant binary sensor in ESPHome. It imports the state of an input_boolean entity from Home Assistant.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/homeassistant.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbinary_sensor:\n  - platform: homeassistant\n    name: \"Input Boolean From Home Assistant\"\n    entity_id: input_boolean.state_home\n```\n\n----------------------------------------\n\nTITLE: Configuring SML Text Sensor in ESPHome\nDESCRIPTION: Configuration for a text sensor that retrieves manufacturer information from a smart meter using the SML protocol. Demonstrates how to extract string data from specific OBIS codes.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sml.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntext_sensor:\n  - platform: sml\n    name: \"Manufacturer\"\n    sml_id: mysml\n    server_id: \"0123456789abcdef\"\n    obis_code: \"129-129:199.130.3\"\n    format: text\n```\n\n----------------------------------------\n\nTITLE: ESP32 BLE Tracker Scan End Automation\nDESCRIPTION: Example of an automation that logs a message when a BLE scan ends.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/esp32_ble_tracker.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nesp32_ble_tracker:\n  on_scan_end:\n    - then:\n        - lambda: |-\n             ESP_LOGD(\"ble_auto\", \"The scan has ended!\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Bang Bang Climate Controller in ESPHome\nDESCRIPTION: Basic configuration example for setting up a bang-bang climate controller with heating functionality. Defines temperature sensor, target temperature range, and actions for heating and idle states.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/climate/bang_bang.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclimate:\n  - platform: bang_bang\n    name: \"Bang Bang Climate Controller\"\n    sensor: my_temperature_sensor\n    default_target_temperature_low: 20 Â°C\n    default_target_temperature_high: 22 Â°C\n\n    heat_action:\n      - switch.turn_on: heater\n    idle_action:\n      - switch.turn_off: heater\n```\n\n----------------------------------------\n\nTITLE: Configuring AS7341 Sensor in ESPHome\nDESCRIPTION: Example YAML configuration for setting up an AS7341 spectral color sensor with all available channels (f1-f8, clear, and NIR). The configuration demonstrates how to set up individual wavelength channels from 415nm to 680nm along with clear and NIR readings.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/as7341.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n- platform: as7341\n  f1:\n    name: \"415nm\"\n  f2:\n    name: \"445nm\"\n  f3:\n    name: \"480nm\"\n  f4:\n    name: \"515nm\"\n  f5:\n    name: \"555nm\"\n  f6:\n    name: \"590nm\"\n  f7:\n    name: \"630nm\"\n  f8:\n    name: \"680nm\"\n  clear:\n    name: \"Clear\"\n  nir:\n    name: \"NIR\"\n```\n\n----------------------------------------\n\nTITLE: Creating Sunrise and Sunset Text Sensors\nDESCRIPTION: Sets up text sensors to display the next sunrise and sunset times, with options for custom elevation angles and time formats.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sun.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\ntext_sensor:\n  - platform: sun\n    name: Sun Next Sunrise\n    type: sunrise\n  - platform: sun\n    name: Sun Next Sunset\n    type: sunset\n```\n\n----------------------------------------\n\nTITLE: WireGuard Configuration with Secrets\nDESCRIPTION: Example showing how to use secrets for storing sensitive WireGuard keys in ESPHome configuration.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/wireguard.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nwireguard:\n  private_key: !secret wg_privkey\n  peer_preshared_key: !secret wg_shrdkey\n```\n\n----------------------------------------\n\nTITLE: Set Clean Mode Action\nDESCRIPTION: This YAML snippet demonstrates how to use the ``tag.set_clean_mode`` action to clean the next tag presented to the PN7150. The action is triggered within an automation (``on_...``) and references the ID of the PN7150 component.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/pn7150.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - tag.set_clean_mode: my_pn7150_id\n```\n\n----------------------------------------\n\nTITLE: Configuring BH1750 Ambient Light Sensor in ESPHome YAML\nDESCRIPTION: This YAML snippet demonstrates how to set up a BH1750 ambient light sensor in ESPHome. It specifies the sensor platform, name, IÂ²C address, and update interval. The configuration allows for easy integration of the BH1750 sensor into an ESPHome project.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/bh1750.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: bh1750\n    name: \"BH1750 Illuminance\"\n    address: 0x23\n    update_interval: 60s\n```\n\n----------------------------------------\n\nTITLE: X9C Potentiometer Configuration in ESPHome\nDESCRIPTION: This snippet demonstrates how to configure an X9C digital potentiometer as an output component in ESPHome. It sets up the required pins (cs_pin, inc_pin, ud_pin) and optional parameters like initial_value and step_delay.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/output/x9c.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n    # Example configuration entry\n    output:\n      - platform: x9c\n        id: x9c_pot\n        cs_pin: GPIOXX\n        inc_pin: GPIOXX\n        ud_pin: GPIOXX\n        initial_value: 1.0\n        step_delay: 1us\n```\n\n----------------------------------------\n\nTITLE: Configuring GROUP Binary Sensor Map in ESPHome\nDESCRIPTION: Example configuration for setting up a GROUP binary sensor map that averages values from active sensors. Includes MPR121 touch sensor integration example.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/binary_sensor_map.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: binary_sensor_map\n    id: group_0\n    name: 'Group Map 0'\n    type: GROUP\n    channels:\n      - binary_sensor: touchkey0\n        value: 0\n      - binary_sensor: touchkey1\n        value: 10\n      - binary_sensor: touchkey2\n        value: 20\n      - binary_sensor: touchkey3\n        value: 30\n\nmpr121:\n  id: mpr121_first\n  address: 0x5A\n\nbinary_sensor:\n  - platform: mpr121\n    channel: 0\n    id: touchkey0\n```\n\n----------------------------------------\n\nTITLE: Configuring Linear Combination Sensor in ESPHome\nDESCRIPTION: Configuration for a linear combination sensor that calculates the balance power by summing the source sensors multiplied by their respective coefficients.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/combination.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: combination\n    type: linear\n    name: \"Balance Power\"\n    sources:\n      - source: total_power\n        coeffecient: 1.0\n      - source: circuit_1_power\n        coeffecient: -1.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Modbus Binary Sensor in YAML\nDESCRIPTION: Example configuration showing how to set up a binary sensor using the modbus_controller platform. This example creates an error status sensor reading from a read input register at address 0x3200 with a bitmask for bit 8.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/modbus_controller.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbinary_sensor:\n- platform: modbus_controller\n  modbus_controller_id: modbus1\n  name: \"Error status\"\n  register_type: read\n  address: 0x3200\n  bitmask: 0x80 #(bit 8)\n```\n\n----------------------------------------\n\nTITLE: Ai-Thinker AiLight Configuration Example in ESPHome\nDESCRIPTION: This complete configuration shows how to configure an Ai-Thinker AiLight WiFi light bulb using ESPHome and the MY9231 component. It sets up the `esphome`, `esp8266`, `wifi`, `api`, `logger`, `ota`, `my9231`, `output` and `light` components to manage the device's LEDs.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/output/my9231.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n\"esphome:\n  name: GPIOXX\n\nesp8266:\n  board: esp01_1m\n\nwifi:\n  ssid: !secret wifi_ssid\n  password: !secret wifi_password\n\napi:\n\nlogger:\n\nota:\n  platform: esphome\n\nmy9231:\n  data_pin: GPIO13\n  clock_pin: GPIO15\n  num_channels: 4\n  num_chips: 1\n  bit_depth: 8\n\noutput:\n  - platform: my9231\n    id: output_red\n    channel: 3\n  - platform: my9231\n    id: output_green\n    channel: 2\n  - platform: my9231\n    id: output_blue\n    channel: 1\n  - platform: my9231\n    id: output_cold_white\n    channel: 0\n\nlight:\n  - platform: rgbw\n    name: GPIOXX\n    red: output_red\n    green: output_green\n    blue: output_blue\n    white: output_cold_white\"\n```\n\n----------------------------------------\n\nTITLE: Starting ESP32 BLE Scan Manually\nDESCRIPTION: Example of configuring the ESP32 BLE tracker for manual scan initiation and an action to start the scan.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/esp32_ble_tracker.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nesp32_ble_tracker:\n  scan_parameters:\n    continuous: false\n\non_...:\n  - esp32_ble_tracker.start_scan:\n```\n\n----------------------------------------\n\nTITLE: Creating Wind Direction Text Sensor in ESPHome\nDESCRIPTION: Template-based text sensor configuration to display cardinal wind direction (N, S, E, W, etc.) based on the TX20 sensor readings. Updates every 2 seconds using the sensor's built-in direction conversion function.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/tx20.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntext_sensor:\n- platform: template\n  name: \"Textual Representation Wind Direction\"\n  lambda: |-\n    return {id(tx20_id).get_wind_cardinal_direction()};\n  update_interval: 2s\n```\n\n----------------------------------------\n\nTITLE: Complete Ethernet-Connected Bluetooth Proxy Configuration\nDESCRIPTION: Comprehensive configuration example for setting up an ethernet-connected Bluetooth proxy using an Olimex ESP32-PoE-ISO board, including all necessary components and optimized settings.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/bluetooth_proxy.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsubstitutions:\n  name: my-bluetooth-proxy\n  board: esp32-poe-iso\n\nesphome:\n  name: ${name}\n  name_add_mac_suffix: true\n\nesp32:\n  board: ${board}\n  framework:\n    type: esp-idf\n\nethernet:\n  type: LAN8720\n  mdc_pin: GPIO23\n  mdio_pin: GPIO18\n  clk_mode: GPIO17_OUT\n  phy_addr: 0\n  power_pin: GPIO12\n\n# Enable logging\nlogger:\n\n# Enable Home Assistant API\napi:\n\nota:\n  platform: esphome\n\nesp32_ble_tracker:\n  scan_parameters:\n    interval: 1100ms\n    window: 1100ms\n    active: true\n\nbluetooth_proxy:\n  active: true\n  connection_slots: 3\n```\n\n----------------------------------------\n\nTITLE: Using PCA9685 Output for Light Component in ESPHome\nDESCRIPTION: This snippet demonstrates the use of a PCA9685 output channel configured to control a monochromatic light component in ESPHome. The light component references the output 'id', allowing it to use the PWM signal generated by the PCA9685 setup. This configuration supports various PWM-based applications, including lights and fans.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/output/pca9685.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\npca9685:\n  frequency: 500\n\noutput:\n  - platform: pca9685\n    channel: 0\n    id: pwm01\n\nlight:\n  - platform: monochromatic\n    name: 'main light'\n    output: pwm01\n```\n\n----------------------------------------\n\nTITLE: Basic ESP32 BLE Server Configuration with Event Handling in YAML\nDESCRIPTION: Example configuration for setting up a BLE server on ESP32, defining manufacturer details and event handlers for client connections and disconnections.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/esp32_ble_server.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration\n\nesp32_ble_server:\n  manufacturer: \"Orange\"\n  manufacturer_data: [0x4C, 0, 0x23, 77, 0xF0 ]\n  on_connect:\n    - lambda: |-\n        ESP_LOGD(\"BLE\", \"Connection from %d\", id);\n  on_disconnect:\n    - lambda: |-\n        ESP_LOGD(\"BLE\", \"Disconnection from %d\", id);\n```\n\n----------------------------------------\n\nTITLE: Creating E1.31 Effect for Addressable Lights in YAML\nDESCRIPTION: This snippet enables control of addressable lights via the E1.31 protocol, facilitating integration with applications like JINX or Hyperion. Configuration parameters include method and light settings.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/light/index.rst#2025-04-21_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\ne131:\n  method: multicast # default: register E1.31 to Multicast group\n\nlight:\n  - platform: neopixelbus\n    num_leds: 189\n    effects:\n      - e131:\n          universe: 1\n          channels: RGB\n```\n\n----------------------------------------\n\nTITLE: Configuring LVGL Roller Widget\nDESCRIPTION: Example showing how to configure an LVGL roller widget with options and triggers.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/widgets.rst#2025-04-21_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\n- roller:\n    align: CENTER\n    id: roller_id\n    options:\n      - Violin\n      - Piano\n      - Bassoon\n      - Chello\n      - Drums\n\non_...:\n  then:\n    - lvgl.roller.update:\n        id: roller_id\n        selected_index: 4\n\n- roller:\n    ...\n    on_value:\n      - logger.log:\n          format: \"Selected index is: %d, text is: %s\"\n          args: [x, text.c_str()]\n```\n\n----------------------------------------\n\nTITLE: Configuring BMP3xx Sensor with SPI Interface in ESPHome\nDESCRIPTION: Example configuration for connecting a BMP388/BMP390 sensor via SPI. Demonstrates setup of temperature and pressure sensors with chip select pin configuration.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/bmp3xx.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry for SPI connection\nsensor:\n  - platform: bmp3xx_spi\n    temperature:\n      name: \"Outside Temperature\"\n      oversampling: 16x\n    pressure:\n      name: \"Outside Pressure\"\n    cs_pin: 13\n    update_interval: 60s\n```\n\n----------------------------------------\n\nTITLE: Configuration of MAX9611 Sensor on ESPHome\nDESCRIPTION: This code snippet demonstrates how to set up the MAX9611 sensor platform in ESPHome. It includes configuration for shunt resistance, gain, voltage, current, power, and temperature sensors using IÂ²C. Key parameters include 'shunt_resistance' for the shunt resistor value, 'address' for the IÂ²C address, and 'update_interval' for sensor update frequency.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/max9611.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: max9611\n    shunt_resistance: 0.2 ohm\n    gain: '1X'\n    voltage:\n      name: Max9611 Voltage\n    current:\n      name: Max9611 Current\n    power:\n      name: Max9611 Watts\n    temperature:\n      name: Max9611 Temperature\n    address: 0x70\n    update_interval: 60s\n```\n\n----------------------------------------\n\nTITLE: Configuring Sen5x Sensor Platform for Environmental Measurements (YAML)\nDESCRIPTION: This YAML configuration specifies the setup for the Sen5x series environmental sensors, including measurement parameters for particulate matter (PM), temperature, humidity, and VOCs. The configuration provides options for accuracy, addresses, and auto-cleaning intervals.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/sen5x.rst#2025-04-21_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n    # Example configuration entry\n    sensor:\n      - platform: sen5x\n        id: sen54\n        pm_1_0:\n          name: \" PM <1Âµm Weight concentration\"\n          id: pm_1_0\n          accuracy_decimals: 1\n        pm_2_5:\n          name: \" PM <2.5Âµm Weight concentration\"\n          id: pm_2_5\n          accuracy_decimals: 1\n        pm_4_0:\n          name: \" PM <4Âµm Weight concentration\"\n          id: pm_4_0\n          accuracy_decimals: 1\n        pm_10_0:\n          name: \" PM <10Âµm Weight concentration\"\n          id: pm_10_0\n          accuracy_decimals: 1\n        temperature:\n          name: \"Temperature\"\n          accuracy_decimals: 1\n        humidity:\n          name: \"Humidity\"\n          accuracy_decimals: 0\n        voc:\n          name: \"VOC\"\n          algorithm_tuning:\n            index_offset: 100\n            learning_time_offset_hours: 12\n            learning_time_gain_hours: 12\n            gating_max_duration_minutes: 180\n            std_initial: 50\n            gain_factor: 230\n        temperature_compensation:\n          offset: 0\n          normalized_offset_slope: 0\n          time_constant: 0\n        acceleration_mode: low\n        store_baseline: true\n        address: 0x69\n        update_interval: 10s\n```\n\n----------------------------------------\n\nTITLE: Configuring SDP3x Differential Pressure Sensor with ESPHome\nDESCRIPTION: This configuration snippet demonstrates how to set up the SDP3x Differential Pressure sensor, including defined parameters such as IÂ²C address, measurement mode, and update interval. The sensor is configured to monitor HVAC filter pressure drop.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/sdp3x.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\n- platform: sdp3x\n  name: \"HVAC Filter Pressure drop\"\n  id: filter_pressure\n```\n\n----------------------------------------\n\nTITLE: Basic GPIO Switch Configuration in ESPHome YAML\nDESCRIPTION: A basic configuration example for creating a GPIO switch. This connects a GPIO pin to a switch component that can be controlled through the ESPHome interface.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/switch/gpio.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nswitch:\n  - platform: gpio\n    pin: GPIOXX\n    name: \"Living Room Dehumidifier\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Key Collector Component in ESPHome\nDESCRIPTION: This YAML configuration sets up a key collector named 'pincode_reader' that collects input from a keypad. It defines input constraints, special keys, and automation triggers for different input events.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/key_collector.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkey_collector:\n  - id: pincode_reader\n    source_id: mykeypad\n    min_length: 4\n    max_length: 4\n    end_keys: \"#\"\n    end_key_required: true\n    back_keys: \"*\"\n    clear_keys: \"C\"\n    allowed_keys: \"0123456789\"\n    timeout: 5s\n    on_progress:\n      - logger.log:\n          format: \"input progress: '%s', started by '%c'\"\n          args: [ 'x.c_str()', \"(start == 0 ? '~' : start)\" ]\n    on_result:\n      - logger.log: \n          format: \"input result: '%s', started by '%c', ended by '%c'\"\n          args: [ 'x.c_str()', \"(start == 0 ? '~' : start)\", \"(end == 0 ? '~' : end)\" ]\n    on_timeout:\n      - logger.log:\n          format: \"input timeout: '%s', started by '%c'\"\n          args: [ 'x.c_str()', \"(start == 0 ? '~' : start)\" ]\n```\n\n----------------------------------------\n\nTITLE: Configuring TM1621 LCD Display in ESPHome\nDESCRIPTION: Example configuration for setting up a TM1621 LCD display with ESPHome. Shows how to configure pins and use lambda functions to display sensor values with units. Demonstrates temperature and humidity display with formatting.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/tm1621.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndisplay:\n  platform: tm1621\n  id: tm1621_display\n  cs_pin: GPIOXX\n  data_pin: GPIOXX\n  read_pin: GPIOXX\n  write_pin: GPIOXX\n  lambda: |-\n    it.printf(0, \"%.1f\", id(my_sensor1).state);\n    it.display_celsius(true);\n    it.printf(1, \"%.1f\", id(my_sensor2).state);\n    it.display_humidity(true);\n```\n\n----------------------------------------\n\nTITLE: Configuring SML Sensor in ESPHome\nDESCRIPTION: Configuration for creating a sensor that reads total energy values from a smart meter using the SML protocol. Includes device class and state class setup for proper integration with Home Assistant.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sml.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: sml\n    name: \"Total energy\"\n    sml_id: mysml\n    server_id: \"0123456789abcdef\"\n    obis_code: \"1-0:1.8.0\"\n    unit_of_measurement: kWh\n    accuracy_decimals: 1\n    device_class: energy\n    state_class: total_increasing\n    filters:\n      - multiply: 0.0001\n```\n\n----------------------------------------\n\nTITLE: Configuring Hydreon RG-9 Rain Sensor in YAML for ESPHome\nDESCRIPTION: This snippet demonstrates how to set up a Hydreon RG-9 rain sensor in ESPHome. It configures both the sensor and binary sensor components, including moisture sensing and temperature monitoring.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/hydreon_rgxx.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example RG-9 entry\nsensor:\n  - platform: hydreon_rgxx\n    model: \"RG_9\"\n    id: \"hydreon_1\"\n    update_interval: 1s\n    moisture:\n      name: \"rain\"\n      expire_after: 30s\n\nbinary_sensor:\n  - platform: hydreon_rgxx\n    hydreon_rgxx_id: \"hydreon_1\"\n    too_cold:\n      name: \"too cold\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Adalight Effect in ESPHome YAML\nDESCRIPTION: This YAML snippet provides an example configuration for the Adalight effect in ESPHome, allowing control of addressable lights using the Adalight protocol, with realistic ambient lighting effects. It includes disabling USB logging and setting a higher RX buffer size to prevent flickering, using the `uart` component. The key parameter `uart_id` allows specifying which UART component to use, useful when multiple are configured.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/light/index.rst#2025-04-21_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\n# Disable logging over USB\nlogger:\n  baud_rate: 0\n\n# Adalight requires higher RX buffer size\n# to operate without flickering\nuart:\n  rx_buffer_size: 1024\n\nadalight:\n\nlight:\n  - platform: neopixelbus\n    ...\n    effects:\n      - adalight:\n          # uart_id: additional_uart\n```\n\n----------------------------------------\n\nTITLE: Example configuration entry for power meter with pulse counter\nDESCRIPTION: This YAML configuration sets up a pulse counter sensor to measure power consumption, with a unit of measurement specified as 'kW' and includes a filter to convert pulses to energy consumption values.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/pulse_counter.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: pulse_counter\n    pin: GPIOXX\n    unit_of_measurement: 'kW'\n    name: 'Power Meter House'\n    filters:\n      - multiply: 0.06  # (60s/1000 pulses per kWh)\n```\n\n----------------------------------------\n\nTITLE: Setting up GDK101 Sensors in YAML\nDESCRIPTION: This configuration sets up various sensors for the GDK101 module, including radiation dose measurements, status, firmware version, and measurement duration.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/gdk101.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: gdk101\n    radiation_dose_per_1m:\n      name: \"GDK101 Radiation Dose @ 1 min\"\n    radiation_dose_per_10m:\n      name: \"GDK101 Radiation Dose @ 10 min\"\n    status:\n      name: \"GDK101 Status\"\n    version:\n      name: \"GDK101 FW Version\"\n    measurement_duration:\n      name: \"GDK101 Measuring Time\"\n```\n\n----------------------------------------\n\nTITLE: Configuring H-Bridge Switch in ESPHome\nDESCRIPTION: Example configuration for setting up an H-Bridge controlled latching relay. Demonstrates essential parameters including pin configuration, pulse length, and wait time settings.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/switch/hbridge.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nswitch:\n  - platform: hbridge\n    id: my_relay\n    name: \"Relay\"\n    on_pin: GPIOXX\n    off_pin: GPIOXX\n    pulse_length: 50ms\n    wait_time: 50ms\n```\n\n----------------------------------------\n\nTITLE: Micro Wake Word Configuration (Shorthand Name) in ESPHome YAML\nDESCRIPTION: This snippet demonstrates the basic configuration of microWakeWord using a shorthand name for a model. It specifies the `okay_nabu` model to be used for wake word detection.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/micro_wake_word.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"# Shorthand name\nmicro_wake_word:\n  models:\n    - model: okay_nabu\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Climate Component in ESPHome\nDESCRIPTION: Base configuration schema for climate platforms showing visual settings for temperature and humidity ranges. Includes options for min/max temperatures and step granularity.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/climate/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclimate:\n  - platform: ...\n    visual:\n      min_temperature: 18\n      max_temperature: 25\n      temperature_step: 0.1\n      min_humidity: 30%\n      max_humidity: 99%\n  - platform: ...\n    visual:\n      min_temperature: 18\n      max_temperature: 25\n      temperature_step:\n        target_temperature: 0.5\n        current_temperature: 0.1\n```\n\n----------------------------------------\n\nTITLE: Basic Nextion Binary Sensor Configuration\nDESCRIPTION: Example YAML configuration showing various ways to set up Nextion binary sensors including touch sensors, polled sensors, and variable-based sensors.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/nextion.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndisplay:\n  - platform: nextion\n    id: nextion1\n    # ...\n\nbinary_sensor:\n  - platform: nextion\n    page_id: 0\n    component_id: 8\n    component_name: page0.mode # Only needed to support changing colors\n    id: mode\n  - platform: nextion\n    id: r0_binary_sensor\n    name: \"Radio 0 Binary Sensor\"\n    component_name: page0.r0 \n    update_interval: 4s\n  - platform: nextion\n    id: darkmode\n    name: \"Is Darkmode Set\"\n    variable_name: darkmode\n```\n\n----------------------------------------\n\nTITLE: Implementing Automatic Backlight Control for LCD Displays in ESPHome\nDESCRIPTION: Configuration example demonstrating how to control the LCD backlight based on a motion sensor. The backlight turns on when motion is detected and turns off 90 seconds after the last detected motion.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/lcd_display.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndisplay:\n  - platform: lcd_pcf8574\n    id: mydisplay\n    # ...\n\nbinary_sensor:\n  - platform: gpio\n    # ...\n    on_press:\n      then:\n        - binary_sensor.template.publish:\n            id: backlight\n            state: ON\n        - binary_sensor.template.publish:\n            id: backlight\n            state: OFF\n  - platform: template\n    id: backlight\n    filters:\n      - delayed_off: 90s\n    on_press:\n      then:\n        - lambda: |-\n            id(mydisplay).backlight();\n    on_release:\n      then:\n        - lambda: |-\n            id(mydisplay).no_backlight();\n```\n\n----------------------------------------\n\nTITLE: Using MQTT Subscribe Text Sensor with Display in ESPHome\nDESCRIPTION: Extended configuration example showing how to use an MQTT Subscribe text sensor with a display component to show the received data. Uses the .c_str() method for string formatting.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/text_sensor/mqtt_subscribe.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntext_sensor:\n  - platform: mqtt_subscribe\n    name: \"Data from topic\"\n    id: mysensor\n    topic: the/topic\n\ndisplay:\n  - platform: ...\n    # ...\n    lambda: |-\n      it.printf(0, 0, id(font), \"The data is: %s\", id(mysensor).state.c_str());\n```\n\n----------------------------------------\n\nTITLE: Configuring WiFi with Dynamic Parameters in ESPHome\nDESCRIPTION: YAML configuration for the wifi.configure action in ESPHome. This action allows dynamic configuration of WiFi settings, including SSID, password, and connection timeout.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/wifi.rst#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - wifi.configure:\n        ssid: \"MyHomeNetwork\"\n        password: \"VerySafePassword\"\n        save: true\n        timeout: 30000ms\n        on_connect: \n          - logger.log: \"Connected to WiFi!\"\n        on_error:\n          - logger.log: \"Failed to connect to WiFi!\"\n```\n\n----------------------------------------\n\nTITLE: Basic Substitution Example in YAML\nDESCRIPTION: Demonstrates basic substitution usage with a BME280 sensor configuration where a temperature offset is defined as a substitution variable.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/substitutions.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsubstitutions:\n  bme280_temperature_offset: \"-1.0\"\n\nsensor:\n  - platform: bme280_i2c\n    temperature:\n      name: BME280 Temperature\n      filters:\n        - offset: ${bme280_temperature_offset}\n```\n\n----------------------------------------\n\nTITLE: Configuring ESP32 BLE Presence Sensors\nDESCRIPTION: Example configuration showing different methods to track BLE devices including MAC address tracking, Identity Resolving Key (IRK) tracking, Service UUID tracking, and iBeacon UUID tracking. Includes options for RSSI thresholds and timeout settings.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/ble_presence.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nesp32_ble_tracker:\n\nbinary_sensor:\n  # Presence based on MAC address\n  - platform: ble_presence\n    mac_address: XX:XX:XX:XX:XX:XX\n    name: \"ESP32 BLE Tracker Google Home Mini\"\n    min_rssi: -80dB\n  # Presence based on Identity Resolving Key (IRK)\n  - platform: ble_presence\n    irk: 1234567890abcdef1234567890abcdef\n    name: \"ESP32 BLE Tracker iPhone\"\n  # Presence based on BLE Service UUID\n  - platform: ble_presence\n    service_uuid: '11aa'\n    name: \"ESP32 BLE Tracker Test Service 16 bit\"\n    timeout: 45s\n  # Presence based on iBeacon UUID\n  - platform: ble_presence\n    ibeacon_uuid: '68586f1e-89c2-11eb-8dcd-0242ac130003'\n    name: \"ESP32 BLE Tracker Test Service iBeacon\"\n```\n\n----------------------------------------\n\nTITLE: LVGL Screen Timeout Configuration\nDESCRIPTION: Implements screen timeout functionality to turn off display after period of inactivity. Uses touchscreen release events and LVGL idle detection.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/cookbook/lvgl.rst#2025-04-21_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nlvgl:\n  on_idle:\n    timeout: !lambda \"return (id(display_timeout).state * 1000);\"\n    then:\n      - logger.log: \"LVGL is idle\"\n      - light.turn_off: display_backlight\n      - lvgl.pause:\n\ntouchscreen:\n  - platform: ...\n    on_release:\n      - if:\n          condition: lvgl.is_paused\n          then:\n```\n\n----------------------------------------\n\nTITLE: Activating Prometheus Metrics Endpoint in ESPHome\nDESCRIPTION: This snippet shows how to activate the Prometheus /metrics endpoint in ESPHome. It includes the 'web_server' component configuration needed to expose metrics. The 'prometheus' entry enables the HTTP endpoint that allows Prometheus to scrape data directly from the device.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/prometheus.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nweb_server:\n\n# Activates prometheus /metrics endpoint\nprometheus:\n```\n\n----------------------------------------\n\nTITLE: AiThinker ESP32-G Gateway Configuration\nDESCRIPTION: Ethernet configuration for the AiThinker ESP32-G Gateway board using LAN8720 chipset with GPIO17 clock output and GPIO5 power pin.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/ethernet.rst#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nethernet:\n  type: LAN8720\n  mdc_pin: GPIO23\n  mdio_pin: GPIO18\n  clk_mode: GPIO17_OUT\n  phy_addr: 1\n  power_pin: GPIO5\n```\n\n----------------------------------------\n\nTITLE: M5Stack PoESP32 and ESP32-Ethernet-Kit Configuration\nDESCRIPTION: Ethernet configuration for M5Stack PoESP32 and ESP32-Ethernet-Kit boards using IP101 chipset with GPIO5 as power pin.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/ethernet.rst#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nethernet:\n  type: IP101\n  mdc_pin: GPIO23\n  mdio_pin: GPIO18\n  clk_mode: GPIO0_IN\n  phy_addr: 1\n  power_pin: GPIO5\n```\n\n----------------------------------------\n\nTITLE: Calibrating CCS811 Baseline in ESPHome\nDESCRIPTION: This snippet shows how to configure a static baseline value for the CCS811 sensor in ESPHome. This is necessary to maintain consistent readings over time and avoid offsets caused by sensor reboots in varying air quality conditions.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ccs811.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n\"sensor:\\n  - platform: ccs811\\n    # ...\\n    baseline: 0xA483\"\n```\n\n----------------------------------------\n\nTITLE: Basic BLE Client Configuration\nDESCRIPTION: Basic configuration example for setting up a BLE client with MAC address and auto-connect option\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/ble_client.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nesp32_ble_tracker:\n\nble_client:\n  - mac_address: XX:XX:XX:XX:XX:XX\n    id: itag_black\n    auto_connect: true\n```\n\n----------------------------------------\n\nTITLE: Configuring LTR ALS PS sensor in ESPHome YAML\nDESCRIPTION: This example shows how to configure the ltr_als_ps sensor platform in ESPHome using YAML. It defines parameters like the I2C address, update interval, sensor type, and thresholds for the proximity sensor. It also shows how to set up actions when proximity thresholds are triggered.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ltr_als_ps.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: ltr_als_ps\n    address: 0x23\n    update_interval: 60s\n    type: ALS_PS  # or ALS or PS\n    ambient_light: \"Ambient light\"\n    # PS only section\n    ps_cooldown: 5 s\n    ps_high_threshold: 500\n    on_ps_high_threshold:\n      then:\n        - .... # do something - light up the screen for example\n    ps_counts: \"Proximity counts\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Dallas Temperature Sensor in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure a Dallas temperature sensor using the ESPHome framework. It includes the sensor's address and update interval. Dependencies include the DS18B20 sensor and a properly set up 1-Wire bus. Inputs include the sensor address and update interval, with outputs being the temperature readings from the sensor. There is a constraint that a 1-Wire bus needs to be set up prior to sensor configuration.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/dallas_temp.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n    # Example configuration entry\\n    sensor:\\n      - platform: dallas_temp\\n        address: 0x1234567812345628\\n        name: temperature\\n        update_interval: 120s\n```\n\n----------------------------------------\n\nTITLE: Configuring ESP32 Camera for Seeed Studio XIAO ESP32S3 Sense\nDESCRIPTION: This YAML configuration sets up an ESP32 camera for the Seeed Studio XIAO ESP32S3 Sense board. It defines the external clock, I2C pins, data pins, and control pins specific to this compact development board.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/esp32_camera.rst#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nesp32_camera:\n  external_clock:\n    pin: GPIO10\n    frequency: 20MHz\n  i2c_pins:\n    sda: GPIO40\n    scl: GPIO39\n  data_pins: [GPIO15, GPIO17, GPIO18, GPIO16, GPIO14, GPIO12, GPIO11, GPIO48]\n  vsync_pin: GPIO38\n  href_pin: GPIO47\n  pixel_clock_pin: GPIO13\n\n  # Image settings\n  name: My Camera\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Manual Tag-Specific Log Levels\nDESCRIPTION: Advanced logger configuration that sets different log levels for specific components to manage log verbosity and reduce noise.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/logger.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nlogger:\n  level: VERBOSE\n  logs:\n    mqtt.component: DEBUG\n    mqtt.client: ERROR\n```\n\n----------------------------------------\n\nTITLE: Configuring VEML3235 Sensor in ESPHome\nDESCRIPTION: Example configuration for the VEML3235 ambient light sensor showing key parameters including auto gain settings, digital gain, and integration time. The sensor communicates over IÂ²C and can measure light levels from 0 to 18 klx with high precision.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/veml3235.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: veml3235\n    id: veml3235_sensor\n    name: VEML3235 Light Sensor\n    auto_gain: true\n    auto_gain_threshold_high: 90%\n    auto_gain_threshold_low: 20%\n    digital_gain: 1X\n    gain: 1X\n    integration_time: 50ms\n```\n\n----------------------------------------\n\nTITLE: Configuring UART and RF Bridge with Code Received Event\nDESCRIPTION: Basic configuration for setting up UART communication and defining an event handler for received RF codes, with Lambda functions to format and process the received data\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/rf_bridge.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nuart:\n  baud_rate: 19200\n\nrf_bridge:\n  on_code_received:\n    - homeassistant.event:\n        event: esphome.rf_code_received\n        data:\n          sync: !lambda 'return format_hex(data.sync);'\n          low: !lambda 'return format_hex(data.low);'\n          high: !lambda 'return format_hex(data.high);'\n          code: !lambda 'return format_hex(data.code);'\n```\n\n----------------------------------------\n\nTITLE: Rounding to Multiple of in ESPHome YAML\nDESCRIPTION: This code demonstrates the `round_to_multiple_of` filter in ESPHome to round values to the nearest multiple of a given number. This can be useful for quantizing sensor data or aligning it to specific intervals.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/index.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n\n    - platform: ...\n      filters:\n        - round_to_multiple_of: 10\n        # 123 -> 120\n        # 126 -> 130\n\n    - platform: ...\n      filters:\n        - round_to_multiple_of: 0.25\n        # 3.1415 -> 3.25\n        # 1.6180 -> 1.5\n\n```\n\n----------------------------------------\n\nTITLE: Example Configuration for Switch Using MAX6956\nDESCRIPTION: This snippet shows how to set up a switch using pin 8 from the MAX6956 I/O expander, specifying the pin mode for output and inversion parameters.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/max6956.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nswitch:\n  - platform: gpio\n    name: \"MaxIn Pin 8\"\n    id: In_8\n    pin:\n      max6956: max6956_1\n      number: 8\n      mode:\n        output: true\n      inverted: False\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Power Supply in ESPHome\nDESCRIPTION: Basic power supply configuration with GPIO pin specification and default settings. Enables power supply control with an ID and a specific GPIO pin.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/power_supply.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npower_supply:\n  - id: 'power_supply1'\n    pin: GPIOXX\n```\n\n----------------------------------------\n\nTITLE: Improv on_provisioned Automation Example\nDESCRIPTION: Example of the on_provisioned automation trigger that executes when WiFi provisioning has successfully completed.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/esp32_improv.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nesp32_improv:\n  on_provisioned:\n    then:\n      - logger.log: \"Improv provisioned\"\n```\n\n----------------------------------------\n\nTITLE: Solar Power Monitoring Application with CD74HC4067 in ESPHome\nDESCRIPTION: Advanced configuration example using the CD74HC4067 multiplexer to measure AC power output from two solar inverters with CT clamp sensors. Includes filtering to calibrate output and eliminate noise from near-zero values.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/cd74hc4067.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncd74hc4067:\n  - id: cd74hc4067_1\n    pin_s0: D0\n    pin_s1: D1\n    pin_s2: D2\n    pin_s3: D3\n\nsensor:\n  - platform: adc\n    id: adc_sensor\n    pin: A0\n    update_interval: 3600s\n  - platform: cd74hc4067\n    id: solar_1_raw\n    number: 0\n    sensor: adc_sensor\n    update_interval: 3600s\n  - platform: cd74hc4067\n    id: solar_2_raw\n    number: 1\n    sensor: adc_sensor\n    update_interval: 3600s\n  - platform: ct_clamp\n    name: \"SolarPower1\"\n    sensor: solar_1_raw\n    update_interval: 5s\n    unit_of_measurement: \"W\"\n    device_class: \"power\"\n    filters:\n      - lambda: \"return x > 0.001 ? x * 56221 : 0;\"\n  - platform: ct_clamp\n    name: \"SolarPower2\"\n    sensor: solar_2_raw\n    update_interval: 5s\n    unit_of_measurement: \"W\"\n    device_class: \"power\"\n    filters:\n      - lambda: \"return x > 0.001 ? x * 57519 : 0;\"\n```\n\n----------------------------------------\n\nTITLE: Lambda Filter Configuration in ESPHome\nDESCRIPTION: This snippet configures a lambda filter to perform a mathematical operation on sensor values. The input value is represented by 'x', and the lambda function returns the result of the operation, which is then used as the output. This example converts Celsius to Fahrenheit.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/index.rst#2025-04-21_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\n    filters:\n      - lambda: return x * (9.0/5.0) + 32.0;\n\n```\n\n----------------------------------------\n\nTITLE: Calculating Sea Level Pressure with BME280 in YAML\nDESCRIPTION: Configuration for BME280 sensor that calculates equivalent sea level pressure using a fixed altitude value. Includes template sensor with lambda function for pressure calculation.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/cookbook/bme280_environment.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: bme280\n    temperature:\n      name: \"BME280 Temperature\"\n      id: bme280_temperature\n    pressure:\n      name: \"BME280 Pressure\"\n      id: bme280_pressure\n    humidity:\n      name: \"BME280 Relative Humidity\"\n      id: bme280_humidity\n    address: 0x77\n    update_interval: 15s\n  - platform: template\n    name: \"Equivalent sea level pressure\"\n    lambda: |-\n      const float STANDARD_ALTITUDE = 0.6; // in meters, see note\n      return id(bme280_pressure).state / powf(1 - ((0.0065 * STANDARD_ALTITUDE) /\n        (id(bme280_temperature).state + (0.0065 * STANDARD_ALTITUDE) + 273.15)), 5.257); // in hPa\n    update_interval: 15s\n    unit_of_measurement: 'hPa'\n```\n\n----------------------------------------\n\nTITLE: Rendering QR Code on Display with ESPHome (YAML)\nDESCRIPTION: This YAML snippet shows how to draw a QR code on a display using ESPHome. It uses the `lambda` function to position the QR code at specific coordinates and scale it appropriately. Key parameters include position, color, and scaling factor. The snippet also demonstrates centering the QR code on the display.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/qr_code.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndisplay:\n  - platform: ...\n    # ...\n    pages:\n      - id: page1\n        lambda: |-\n          // Draw the QR-code at position [x=50,y=0] with white color and a 2x scale\n          it.qr_code(50, 0, id(homepage_qr), Color(255,255,255), 2);\n\n          // Draw the QR-code in the center of the screen with white color and a 2x scale\n          auto size = id(homepage_qr).get_size() * 2; // Multiply by scale\n          auto x = (it.get_width() / 2) - (size / 2);\n          auto y = (it.get_height() / 2) - (size / 2);\n          it.qr_code(x, y, id(homepage_qr), Color(255,255,255), 2);\n```\n\n----------------------------------------\n\nTITLE: Configuring INA3221 Sensor in YAML for ESPHome\nDESCRIPTION: This YAML configuration sets up an INA3221 sensor with three channels, specifying current, power, bus voltage, and shunt voltage measurements for channel 1. It sets the IÂ²C address and update interval.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ina3221.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: ina3221\n    address: 0x40\n    channel_1:\n      shunt_resistance: 0.1 ohm\n      current:\n        name: \"INA3221 Channel 1 Current\"\n      power:\n        name: \"INA3221 Channel 1 Power\"\n      bus_voltage:\n        name: \"INA3221 Channel 1 Bus Voltage\"\n      shunt_voltage:\n        name: \"INA3221 Channel 1 Shunt Voltage\"\n    channel_2:\n      # ...\n    channel_3:\n      # ...\n    update_interval: 60s\n```\n\n----------------------------------------\n\nTITLE: Configuring MH-Z19 Sensor with ESPHome - YAML\nDESCRIPTION: This YAML snippet is for configuring the MH-Z19 sensor with ESPHome to measure CO2 and temperature. The setup requires a defined UART bus configuration with proper pin connections and a baud rate of 9600. This example configures the sensor with defined names for CO2 and temperature readings.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/mhz19.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: mhz19\n    co2:\n      name: MH-Z19 CO2 Value\n    temperature:\n      name: MH-Z19 Temperature\n```\n\n----------------------------------------\n\nTITLE: Configuring Xiaomi JQJCY01YM Formaldehyde Sensor in ESPHome YAML\nDESCRIPTION: YAML configuration for the Xiaomi (Honeywell) formaldehyde sensor JQJCY01YM. Defines sensors for temperature, humidity, formaldehyde concentration and battery level.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/xiaomi_ble.rst#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: xiaomi_jqjcy01ym\n    mac_address: XX:XX:XX:XX:XX:XX\n    temperature:\n      name: \"JQJCY01YM Temperature\"\n    humidity:\n      name: \"JQJCY01YM Humidity\"\n    formaldehyde:\n      name: \"JQJCY01YM Formaldehyde\"\n    battery_level:\n      name: \"JQJCY01YM Battery Level\"\n```\n\n----------------------------------------\n\nTITLE: Configuring a Basic Display with Line Drawing in ESPHome\nDESCRIPTION: Example configuration for a display component in ESPHome that draws a line from coordinates [0,0] to [50,50] using the rendering engine lambda.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndisplay:\n  - platform: ...\n    # ...\n    lambda: |-\n      // Write your display rendering code here\n\n      // For example, draw a line from [x=0,y=0] to [x=50,y=50]\n      it.line(0, 0, 50, 50);\n```\n\n----------------------------------------\n\nTITLE: Basic MAX7219 Display Configuration in YAML\nDESCRIPTION: Example configuration for setting up a MAX7219 digit display with SPI communication, including display parameters and lambda rendering.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/max7219digit.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nspi:\n  clk_pin: D0\n  mosi_pin: D1\n\ndisplay:\n  - platform: max7219digit\n    cs_pin: D2\n    num_chips: 4\n    intensity: 15\n    lambda: |-\n      it.print(0, 0, id(digit_font), \"HELLO!\");\n```\n\n----------------------------------------\n\nTITLE: Modbus Controller Configuration\nDESCRIPTION: Configures Modbus controller with device address, communication settings, and update intervals\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/modbus_controller.rst#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nmodbus_controller:\n  - id: epever\n    address: 0x1\n    modbus_id: mod_bus_epever\n    command_throttle: 0ms\n    setup_priority: -10\n    update_interval: ${updates}\n```\n\n----------------------------------------\n\nTITLE: Complete Inkplate 6 Configuration with Additional Features\nDESCRIPTION: Full configuration example for Inkplate 6 with WiFi, API, OTA, switches for controlling display modes, battery monitoring, touch pads, time display, and custom fonts.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/inkplate6.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nesphome:\n  name: inkplate\n\nesp32:\n  board: esp-wrover-kit\n\nlogger:\n\nwifi:\n  ssid: !secret wifi_ssid\n  password: !secret wifi_password\n  ap: {}\n\ncaptive_portal:\n\nota:\n  platform: esphome\n\napi:\n\nswitch:\n  - platform: restart\n    name: \"Inkplate Reboot\"\n    id: reboot\n\n  - platform: gpio\n    id: battery_read_mosfet\n    pin:\n      mcp23xxx: mcp23017_hub\n      number: 9\n      inverted: true\n\n  - platform: template\n    name: \"Inkplate Greyscale mode\"\n    lambda: return id(inkplate_display).get_greyscale();\n    turn_on_action:\n      - lambda: id(inkplate_display).set_greyscale(true);\n    turn_off_action:\n      - lambda: id(inkplate_display).set_greyscale(false);\n\n  - platform: template\n    name: \"Inkplate Partial Updating\"\n    lambda: return id(inkplate_display).get_partial_updating();\n    turn_on_action:\n      - lambda: id(inkplate_display).set_partial_updating(true);\n    turn_off_action:\n      - lambda: id(inkplate_display).set_partial_updating(false);\n\nsensor:\n  - platform: adc\n    id: battery_voltage\n    update_interval: never\n    attenuation: 12db\n    pin: 35\n  - platform: template\n    name: \"Inkplate Battery Voltage\"\n    lambda: |-\n      id(battery_read_mosfet).turn_on();\n      delay(1);\n      float adc = id(battery_voltage).sample();\n      id(battery_read_mosfet).turn_off();\n      return adc;\n    filters:\n      - multiply: 2\n\ni2c:\n\nmcp23017:\n  - id: mcp23017_hub\n    address: 0x20\n\nbinary_sensor:\n  - platform: status\n    name: \"Inkplate Status\"\n    id: system_status\n\n  - platform: gpio\n    name: \"Inkplate Touch Pad 1\"\n    pin:\n      mcp23xxx: mcp23017_hub\n      number: 10\n  - platform: gpio\n    name: \"Inkplate Touch Pad 2\"\n    pin:\n      mcp23xxx: mcp23017_hub\n      number: 11\n  - platform: gpio\n    name: \"Inkplate Touch Pad 3\"\n    pin:\n      mcp23xxx: mcp23017_hub\n      number: 12\n\ntime:\n  - platform: sntp\n    id: esptime\n\nfont:\n  - file: \"Helvetica.ttf\"\n    id: helvetica_96\n    size: 96\n  - file: \"Helvetica.ttf\"\n    id: helvetica_48\n    size: 48\n\n\ndisplay:\n- platform: inkplate6\n  id: inkplate_display\n  greyscale: false\n  partial_updating: false\n  update_interval: 60s\n\n  ckv_pin: 32\n  sph_pin: 33\n  gmod_pin:\n    mcp23xxx: mcp23017_hub\n    number: 1\n  gpio0_enable_pin:\n    mcp23xxx: mcp23017_hub\n    number: 8\n  oe_pin:\n    mcp23xxx: mcp23017_hub\n    number: 0\n  spv_pin:\n    mcp23xxx: mcp23017_hub\n    number: 2\n  powerup_pin:\n    mcp23xxx: mcp23017_hub\n    number: 4\n  wakeup_pin:\n    mcp23xxx: mcp23017_hub\n    number: 3\n  vcom_pin:\n    mcp23xxx: mcp23017_hub\n    number: 5\n\n  lambda: |-\n    it.fill(COLOR_ON);\n\n    it.print(100, 100, id(helvetica_48), COLOR_OFF, TextAlign::TOP_LEFT, \"ESPHome\");\n\n    it.strftime(400, 300, id(helvetica_48), COLOR_OFF, TextAlign::CENTER, \"%Y-%m-%d\", id(esptime).now());\n    it.strftime(400, 400, id(helvetica_96), COLOR_OFF, TextAlign::CENTER, \"%H:%M\", id(esptime).now());\n\n    if (id(system_status).state) {\n      it.print(700, 100, id(helvetica_48), COLOR_OFF, TextAlign::TOP_RIGHT, \"Online\");\n    } else {\n      it.print(700, 100, id(helvetica_48), COLOR_OFF, TextAlign::TOP_RIGHT, \"Offline\");\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Light Brightness Slider with LVGL\nDESCRIPTION: YAML configuration for creating a brightness control slider for a dimmable light. Uses a sensor to track light brightness and updates slider accordingly.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/cookbook/lvgl.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: homeassistant\n    id: light_brightness\n    entity_id: light.your_dimmer\n    attribute: brightness\n    on_value:\n      - lvgl.slider.update: \n          id: dimmer_slider\n          value: !lambda return x; \n\nlvgl:\n    ...\n    pages:\n      - id: room_page\n        widgets:\n          - slider:\n              id: dimmer_slider\n              x: 20\n              y: 50\n              width: 30\n              height: 220\n              pad_all: 8\n              min_value: 0\n              max_value: 255\n              on_release:\n                - homeassistant.action:\n                    action: light.turn_on\n                    data:\n                      entity_id: light.your_dimmer\n                      brightness: !lambda return int(x);\n```\n\n----------------------------------------\n\nTITLE: Configuring ST7735 Display in ESPHome\nDESCRIPTION: Example configuration for setting up a ST7735 display with ESPHome. Demonstrates essential parameters including model specification, pin assignments, display dimensions, and color settings. Supports various initialization modes through the model parameter.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/st7735.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndisplay:\n  - platform: st7735\n    model: \"INITR_18BLACKTAB\"\n    reset_pin: D4\n    cs_pin: D1\n    dc_pin: D2\n    rotation: 0\n    device_width: 128\n    device_height: 160\n    col_start: 0\n    row_start: 0\n    eight_bit_color: true\n    update_interval: 5s\n```\n\n----------------------------------------\n\nTITLE: Basic TM1637 Display Configuration in YAML\nDESCRIPTION: Basic configuration example for setting up a TM1637 display with ESPHome, including pin configuration and simple text display.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/tm1637.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndisplay:\n    platform: tm1637\n    id: tm1637_display\n    clk_pin: D6\n    dio_pin: D5\n    inverted: true\n    length: 4\n    lambda: |-\n      it.print(\"0123\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Kamstrup KMP Sensors in ESPHome YAML\nDESCRIPTION: This YAML configuration demonstrates how to define Kamstrup KMP sensors within ESPHome. It showcases the setup for heat energy, power, temperature difference, flow, and custom sensors, including specifying the KMP command for custom sensors. The configuration requires a UART bus to be set up with a baud rate of 1200 and 2 stop bits.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/kamstrup_kmp.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n    # Example configuration entry\n    sensor:\n      - platform: kamstrup_kmp\n        heat_energy:\n          name: Heat Energy\n        power:\n          name: Heat Power\n        temp_diff:\n          name: Heat Temperature Difference\n        flow:\n          name: Heat Flow\n        custom:\n          - name: Custom Heat Energy\n            command: 0x003C\n          - name: Custom Heat Power\n            command: 0x0050\n```\n\n----------------------------------------\n\nTITLE: Configuring Honeywell ABP2 Pressure Sensor\nDESCRIPTION: This YAML snippet configures the Honeywell ABP2 pressure and temperature sensors with the required parameters. It specifies the platform, pressure and temperature settings, including minimum and maximum pressure and the transfer function. Ensure that I2C is configured and the correct values are set according to the device datasheet.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/honeywellabp2_i2c.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: honeywellabp2_i2c\n    pressure:\n      name: \"Honeywell2 pressure\"\n      min_pressure: 0\n      max_pressure: 16000\n      transfer_function: \"A\"\n    temperature:\n      name: \"Honeywell2 temperature\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic IÂ²C Device in ESPHome\nDESCRIPTION: Example configuration for setting up a generic IÂ²C device. The snippet demonstrates how to configure the IÂ²C bus, set up a generic IÂ²C device with a specific address, and perform basic read/write operations using lambda functions.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/i2c_device.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ni2c:\n    sda: 4\n    scl: 5\n    scan: True\n\ni2c_device:\n  id: i2cdev\n  address: 0x2C\n\non...:\n  then:\n    - lambda: !lambda |-\n        id(i2cdev).write_byte(0x00, 0x12);\n        if (auto b = id(i2cdev).read_byte(0x01)) {\n          // TODO\n        }\n```\n\n----------------------------------------\n\nTITLE: Configuring Audio ADC Component in ESPHome YAML\nDESCRIPTION: This snippet shows the basic structure for configuring the audio_adc component in an ESPHome YAML file. It demonstrates how to include the component and specify a platform.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/audio_adc/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\naudio_adc:\n  - platform: ...\n```\n\n----------------------------------------\n\nTITLE: Detailed ADE7880 Sensor Configuration\nDESCRIPTION: Example of detailed configuration mode showing advanced sensor options like custom accuracy decimals and sensor IDs.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ade7880.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: ade7880\n    irq0_pin:\n      number: GPIOXX\n    irq1_pin:\n      number: GPIOXX\n    phase_a:\n      voltage: Voltage\n      current:\n        name: Current\n        accuracy_decimals: 0\n      active_power: Active Power\n      power_factor:\n        id: ade_power_factor\n        name: Power Factor\n      forward_active_energy: Forward Active Energy\n      reverse_active_energy: Reverse Active Energy\n      calibration:\n        current_gain: 3116628\n        voltage_gain: -757178\n        power_gain: -1344457\n        phase_angle: 188\n```\n\n----------------------------------------\n\nTITLE: Basic RPI_DPI_RGB Display Configuration in YAML\nDESCRIPTION: Minimal configuration example for setting up an RPI_DPI_RGB display with required pin assignments for data, sync, and clock signals.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/rpi_dpi_rgb.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndisplay:\n  - platform: rpi_dpi_rgb\n    id: rpi_disp\n    dimensions:\n      width: 800\n      height: 480\n    de_pin: REPLACE_ME\n    hsync_pin: REPLACE_ME\n    vsync_pin: REPLACE_ME\n    pclk_pin: REPLACE_ME\n\n    data_pins:\n      red:\n        - XX        #r1\n        - XX        #r2\n        - XX        #r3\n        - XX        #r4\n        - XX        #r5\n      green:\n        - XX        #g0\n        - XX        #g1\n        - XX        #g2\n        - XX        #g3\n        - XX        #g4\n        - XX        #g5\n      blue:\n        - XX        #b1\n        - XX        #b2\n        - XX        #b3\n        - XX        #b4\n        - XX        #b5\n```\n\n----------------------------------------\n\nTITLE: Setting up the SUN_GTIL2 Component in ESPHome\nDESCRIPTION: Configures the primary SUN_GTIL2 component to communicate with the inverter over UART. The uart_id parameter references a previously defined UART bus configured with a baud rate of 9600.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sun_gtil2.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsun_gtil2:\n  uart_id: control_to_display\n```\n\n----------------------------------------\n\nTITLE: Configuring Template Switch as Secondary Sprinkler Controller Switch in YAML\nDESCRIPTION: Example configuration of a template switch that acts as a secondary main switch for a sprinkler controller. The switch includes turn on/off actions that control both the sprinkler controller main switch and an indicator light.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sprinkler.rst#2025-04-21_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\n# Template switch as a secondary main switch\nswitch:\n  - platform: template\n    id: my_switch\n    name: \"My Special Sprinkler Switch\"\n    on_turn_off:\n      - switch.turn_off: sprinkler_ctrlr_main_switch_id\n      - light.turn_off: sprinkler_indicator_light\n    on_turn_on:\n      - switch.turn_on: sprinkler_ctrlr_main_switch_id\n      - light.turn_on: sprinkler_indicator_light\n    ...\n```\n\n----------------------------------------\n\nTITLE: Defining Individual Outputs for MCP4461 in ESPHome (YAML)\nDESCRIPTION: This code snippet defines individual output channels for the MCP4461 component in ESPHome. Each output has specific parameters for its id, associated MCP4461 component id, channel selection, and initial values for wipers. It showcases how to set up volatile and nonvolatile channels.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/output/mcp4461.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Individual outputs\n# A-D are volatile wipers 0-3\n# E-H are nonvolatile wipers 0-3\n# (AE, BF, CG, DH belonging together)\noutput:\n- platform: mcp4461\n  id: digipot_channel_0\n  mcp4461_id: mcp4461_output\n  channel: A\n  initial_value: 0.5  # always initialize volatile wiper 0 with wiper @ medium resistance range on start\n- platform: mcp4461\n  id: digipot_channel_1\n  mcp4461_id: mcp4461_output\n  channel: B\n- platform: mcp4461\n  id: digipot_channel_2\n  mcp4461_id: mcp4461_output\n  channel: C\n- platform: mcp4461\n  id: digipot_channel_3\n  mcp4461_id: mcp4461_output\n  channel: D\n- platform: mcp4461\n  id: digipot_channel_4\n  mcp4461_id: mcp4461_output\n  channel: E\n- platform: mcp4461\n  id: digipot_channel_5\n  mcp4461_id: mcp4461_output\n  channel: F\n- platform: mcp4461\n  id: digipot_channel_6\n  mcp4461_id: mcp4461_output\n  channel: G\n- platform: mcp4461\n  id: digipot_channel_7\n  mcp4461_id: mcp4461_output\n  channel: H\n```\n\n----------------------------------------\n\nTITLE: Basic PCF8563 Time Source Configuration in YAML\nDESCRIPTION: Demonstrates the basic configuration for setting up a PCF8563 RTC module as a time source in ESPHome. Requires I2C component to be set up.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/time/pcf8563.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\ntime:\n  - platform: pcf8563\n    id: pcf8563_time\n```\n\n----------------------------------------\n\nTITLE: Implementing is_armed Condition for Alarm Panel in YAML\nDESCRIPTION: YAML configuration for adding an is_armed condition to an Alarm Control Panel, which checks if the alarm is armed.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/alarm_control_panel/index.rst#2025-04-21_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  if:\n    condition:\n      alarm_control_panel.is_armed: acp1\n```\n\n----------------------------------------\n\nTITLE: Configuring LCD with PCF8574 IÂ²C Adapter in ESPHome\nDESCRIPTION: Example configuration for setting up a character-based LCD display using a PCF8574 IÂ²C adapter module with ESPHome. This approach requires only two data pins (SDA and SCL) to control the display.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/lcd_display.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\ni2c:\n  sda: D0\n  scl: D1\n\ndisplay:\n  - platform: lcd_pcf8574\n    dimensions: 20x4\n    address: 0x27\n    lambda: |-\n      it.print(\"Hello World!\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Shelly 2.5 with ESPHome\nDESCRIPTION: Complete YAML configuration for Shelly 2.5 device including I2C setup, ADE7953 power monitoring with channel corrections, and NTC temperature sensor setup. Addresses specific hardware quirks including inverted channels, power readings, and IRQ pin requirements.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ade7953.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ni2c:\n  sda: GPIO12\n  scl: GPIO14\n\nsensor:\n  - platform: ade7953_i2c\n    irq_pin: GPIO16\n    voltage:\n      name: Shelly Voltage\n    current_a:\n      name: Shelly Current B\n    current_b:\n      name: Shelly Current A\n    active_power_a:\n      name: Shelly Active Power B\n      filters:\n        - multiply: -1\n    active_power_b:\n      name: Shelly Active Power A\n      filters:\n        - multiply: -1\n    update_interval: 60s\n\n  # NTC Temperature\n  - platform: ntc\n    sensor: temp_resistance_reading\n    name: \"Shelly Temperature\"\n    calibration:\n      b_constant: 3350\n      reference_resistance: 10kOhm\n      reference_temperature: 298.15K\n  - platform: resistance\n    id: temp_resistance_reading\n    sensor: temp_analog_reading\n    configuration: DOWNSTREAM\n    resistor: 32kOhm\n  - platform: adc\n    id: temp_analog_reading\n    pin: A0\n```\n\n----------------------------------------\n\nTITLE: Color Correction for RGB Light in ESPHome YAML\nDESCRIPTION: This snippet shows how to apply color correction to an RGB light by using max_power on individual output channels. It includes both the light configuration and the corresponding output configuration.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/light/rgb.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nlight:\n  - platform: rgb\n    name: \"Living Room Lights\"\n    red: output_component1\n    green: output_component2\n    blue: output_component3\n\n# Example output entry\noutput:\n  - platform: ...\n    id: output_component1\n    max_power: 80%\n  # Repeat for green and blue output\n```\n\n----------------------------------------\n\nTITLE: Configuring BLE Client on ESP32\nDESCRIPTION: Sample configuration for setting up an ESP32 device as a BLE client to connect to other BLE devices and read sensor data.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/changelog/v1.18.0.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nesp32_ble_tracker:\n\nble_client:\n  - mac_address: AA:BB:CC:DD:EE:FF\n    id: my_ble_client\n```\n\n----------------------------------------\n\nTITLE: Configuring Sonoff D1 Dimmer in ESPHome\nDESCRIPTION: This YAML configuration sets up a Sonoff D1 dimmer switch in ESPHome. It includes essential components like ESP8266 settings, Wi-Fi configuration, logging, API, OTA updates, UART setup, and the light platform itself.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/light/sonoff_d1.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nesphome:\n  name: my-d1-dimmer\n\n# Restore from flash if you want to keep the last state at power up\nesp8266:\n  board: esp8285\n  restore_from_flash: true\n\n# Make sure your WiFi will connect\nwifi:\n  ssid: \"ssid\"\n  password: \"password\"\n\n# Make sure logging is not using the serial port\nlogger:\n  baud_rate: 0\n\n# Enable Home Assistant API\napi:\n\n# Make sure you can upload new firmware OTA\nota:\n  platform: esphome\n\n# D1 dimmer uses hardware serial port on the default pins @ 9600 bps\nuart:\n  rx_pin: RX\n  tx_pin: TX\n  baud_rate: 9600\n\n# And finally the light component\n# gamma correction equal to zero gives linear scale,\n# exactly what's needed for this device\nlight:\n  - platform: sonoff_d1\n    use_rm433_remote: False\n    name: Sonoff D1 Dimmer\n    restore_mode: RESTORE_DEFAULT_OFF\n    gamma_correct: 0.0\n    default_transition_length: 1s\n```\n\n----------------------------------------\n\nTITLE: Configuring ESP32 DAC Output\nDESCRIPTION: This YAML configuration snippet sets up the ESP32 DAC output on GPIO25 and demonstrates how to control the output level. The DAC output can also be connected to a monochromatic light component for integrated control.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/output/esp32_dac.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\noutput:\n  - platform: esp32_dac\n    pin: GPIO25\n    id: dac_output\n\n# Example usage\non_...:\n  then:\n    - output.set_level:\n        id: dac_output\n        level: 50%\n        \n# Use the DAC output as a light\nlight:\n  - platform: monochromatic\n    output: dac_output\n    gamma_correct: 1.4\n    id: mono_light\n```\n\n----------------------------------------\n\nTITLE: Configuring RGBW Light in ESPHome YAML\nDESCRIPTION: This snippet demonstrates the basic configuration for an RGBW light in ESPHome. It sets up a light named 'Livingroom Lights' with four output components for red, green, blue, and white channels.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/light/rgbw.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nlight:\n  - platform: rgbw\n    name: \"Livingroom Lights\"\n    red: output_component1\n    green: output_component2\n    blue: output_component3\n    white: output_component4\n```\n\n----------------------------------------\n\nTITLE: Configuring TCA9555 I/O Expander in ESPHome\nDESCRIPTION: Example configuration for setting up a TCA9555 I/O expander and configuring a GPIO switch on pin 0. Demonstrates basic component initialization and pin usage.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/tca9555.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\ntca9555:\n  - id: 'TCA9555_hub'\n\n# Individual outputs\nswitch:\n  - platform: gpio\n    name: \"TCA9555 Pin #0\"\n    pin:\n      tca9555: tca9555_hub\n      # Use pin number 0\n      number: 0\n```\n\n----------------------------------------\n\nTITLE: Example Configuration for LD2420 Sensor Setup (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to configure the LD2420 sensor platform, including various components such as text_sensor, sensor, binary_sensor, select, number, and button. It illustrates how to define parameters for each component, facilitating the integration of the radar sensor into the ESPHome environment.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ld2420.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nld2420:\n\ntext_sensor:\n  - platform: ld2420\n    fw_version:\n      name: LD2420 Firmware\n\nsensor:\n  - platform: ld2420\n    moving_distance:\n      name : Moving Distance\n\nbinary_sensor:\n  - platform: ld2420\n    has_target:\n      name: Presence\n\nselect:\n  - platform: ld2420\n    operating_mode:\n      name: Operating Mode\n\nnumber:\n  - platform: ld2420\n    presence_timeout:\n      name: Detection Presence Timeout\n    min_gate_distance:\n      name: Detection Gate Minimum\n    max_gate_distance:\n      name: Detection Gate Maximum\n    # See \"Number\" section below for detail\n    gate_select:\n      name: Select Gate to Set\n    still_threshold:\n      name: Set Still Threshold Value\n    move_threshold:\n      name: Set Move Threshold Value\n\nbutton:\n  - platform: ld2420\n    apply_config:\n      name: Apply Config\n    factory_reset:\n      name: Factory Reset\n    restart_module:\n      name: Restart Module\n    revert_config:\n      name: Undo Edits\n```\n\n----------------------------------------\n\nTITLE: Configuring PVVX MiThermometer in ESPHome YAML\nDESCRIPTION: YAML configuration for the PVVX MiThermometer firmware set to 'Custom' advertisement. Defines sensors for temperature, humidity, battery level and voltage.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/xiaomi_ble.rst#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: pvvx_mithermometer\n    mac_address: XX:XX:XX:XX:XX:XX\n    temperature:\n      name: \"PVVX Temperature\"\n    humidity:\n      name: \"PVVX Humidity\"\n    battery_level:\n      name: \"PVVX Battery-Level\"\n    battery_voltage:\n      name: \"PVVX Battery-Voltage\"\n```\n\n----------------------------------------\n\nTITLE: Configuring SN74HC165 Shift Register in ESPHome (YAML)\nDESCRIPTION: Basic configuration for setting up SN74HC165 shift registers as input expanders. This example shows how to configure two daisy-chained shift registers with required pins for clock, data, and load, plus the optional clock inhibit pin.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sn74hc165.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsn74hc165:\n  - id: sn74hc165_hub\n    clock_pin: GPIOXX\n    data_pin: GPIOXX\n    load_pin: GPIOXX\n    clock_inhibit_pin: GPIOXX\n    sr_count: 2\n```\n\n----------------------------------------\n\nTITLE: Configuring Integration Sensor in ESPHome (YAML)\nDESCRIPTION: This YAML snippet configures an integration sensor in ESPHome that accumulates the output of a power sensor, such as a water flow meter, over specified time units. It requires the 'sensor' id and 'time_unit' as mandatory parameters. Optional fields like 'integration_method' can be specified for different integration techniques, and 'restore' can persist intermediate results across system reboots.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/integration.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: integration\n    name: \"Total Daily Energy\"\n    sensor: my_flow_meter\n    time_unit: min\n\n  # The sensor to integrate, can be any power sensor\n  - platform: pulse_counter\n    # ...\n    id: my_flow_meter\n```\n\n----------------------------------------\n\nTITLE: LCD Menu Component Configuration\nDESCRIPTION: Basic configuration for the LCD menu component including display ID, navigation markers, and menu mode settings.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display_menu/lcd_menu.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nlcd_menu:\n  id: my_lcd_menu\n  display_id: my_lcd\n  active: true\n  mode: rotary\n  mark_back: 0x08\n  mark_selected: 0x3e\n  mark_editing: 0x2a\n  mark_submenu: 0x7e\n  items:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Anova Cooker in ESPHome YAML\nDESCRIPTION: YAML configuration example for setting up an Anova sous-vide cooker with ESPHome. Requires BLE client setup with device MAC address and specifies temperature unit display preference. The configuration enables basic control including power and temperature settings.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/climate/anova.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nble_client:\n  - mac_address: XX:XX:XX:XX:XX:XX\n    id: my_anova\n\nclimate:\n  - platform: anova\n    name: \"My Anova stick\"\n    ble_client_id: my_anova\n    unit_of_measurement: c\n```\n\n----------------------------------------\n\nTITLE: Basic SGP4x Sensor Configuration in YAML\nDESCRIPTION: Basic configuration example for setting up SGP40/SGP41 sensors to measure VOC and NOx indices in ESPHome.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/sgp4x.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: sgp4x\n    voc:\n      name: \"VOC Index\"\n    nox:\n      name: \"NOx Index\"\n```\n\n----------------------------------------\n\nTITLE: Configuring BME68x BSEC2 I2C Sensor in ESPHome\nDESCRIPTION: Minimal example configuration for setting up a BME68x sensor via I2C with BSEC2 library, specifying address, model, operating age, sample rate, and supply voltage\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/bme68x_bsec2.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbme68x_bsec2_i2c:\n  address: 0x76\n  model: bme680\n  operating_age: 28d\n  sample_rate: LP\n  supply_voltage: 3.3V\n```\n\n----------------------------------------\n\nTITLE: Configuring UART and SenseAir Sensor in ESPHome\nDESCRIPTION: Basic configuration example showing how to set up UART communication with a SenseAir CO2 sensor and configure the sensor platform. Includes UART pin configuration and sensor reading setup with update interval.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/senseair.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nuart:\n  rx_pin: D0\n  tx_pin: D1\n  baud_rate: 9600\n\nsensor:\n  - platform: senseair\n    co2:\n      name: \"SenseAir CO2 Value\"\n    update_interval: 60s\n```\n\n----------------------------------------\n\nTITLE: Inverting GPIO Binary Sensor Values in ESPHome\nDESCRIPTION: This snippet shows how to invert the values of a GPIO binary sensor using the 'inverted' property in the pin schema. This is useful when the sensor's logic is reversed.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/gpio.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nbinary_sensor:\n  - platform: gpio\n    pin:\n      number: D2\n      inverted: true\n    name: ...\n```\n\n----------------------------------------\n\nTITLE: CT Clamp Sensor Calibration Example\nDESCRIPTION: This configuration demonstrates how to calibrate the CT clamp sensor using the calibrate_linear filter. It shows how to map measured values to known current loads for accurate readings.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ct_clamp.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n\n    # Example configuration entry\n    sensor:\n      - platform: ct_clamp\n        sensor: adc_sensor\n        name: \"Measured Current\"\n        update_interval: 60s\n        filters:\n          - calibrate_linear:\n              # Measured value of 0 maps to 0A\n              - 0 -> 0\n              # Known load: 4.0A\n              # Value shown in logs: 0.1333A\n              - 0.1333 -> 4.0\n\n```\n\n----------------------------------------\n\nTITLE: Configuring INA260 Sensor in YAML for ESPHome\nDESCRIPTION: This YAML configuration sets up an INA260 sensor with current, power, and bus voltage measurements. It specifies the I2C address and update interval for the sensor.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ina260.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: ina260\n    address: 0x40\n    current:\n      name: \"INA260 Current\"\n    power:\n      name: \"INA260 Power\"\n    bus_voltage:\n      name: \"INA260 Bus Voltage\"\n    update_interval: 60s\n```\n\n----------------------------------------\n\nTITLE: Playing Media via Action in ESPHome\nDESCRIPTION: This YAML snippet demonstrates how to use the `media_player.play_media` action within an ESPHome automation to play a specified media URL. It showcases simple and full configuration options, including the use of a lambda expression for dynamic URL generation.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/media_player/index.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  # Simple\n  - media_player.play_media: 'http://media-url/media.mp3'\n\n  # Full\n  - media_player.play_media:\n      id: media_player_id\n      media_url: 'http://media-url/media.mp3'\n\n  # Simple with lambda\n  - media_player.play_media: !lambda 'return \"http://media-url/media.mp3\";'\n```\n\n----------------------------------------\n\nTITLE: Template Sensor Publish Action Configuration\nDESCRIPTION: Configuration example showing how to publish values to a template sensor using the sensor.template.publish action in triggers.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/template.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: template\n    name: \"Template Sensor\"\n    id: template_sens\n\n# in some trigger\non_...:\n  - sensor.template.publish:\n      id: template_sens\n      state: 42.0\n\n  # Templated\n  - sensor.template.publish:\n      id: template_sens\n      state: !lambda 'return 42.0;'\n```\n\n----------------------------------------\n\nTITLE: Converting Malfunction Detection in ESPHome Feedback Cover\nDESCRIPTION: Shows how to migrate from the built-in malfunction detection to a custom implementation using switches and conditional logic. The example demonstrates detecting welded relays by monitoring current flow in the opposite direction of the requested operation.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/cover/feedback.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# Example original malfunction configuration\ncover:\n  - platform: current_based\n    close_sensor: close_current\n    close_action:\n      - switch.turn_on: open_relay\n    open_sensor: open_current\n    open_action:\n      - switch.turn_on: open_relay\n\n    malfunction_detection: true\n    malfunction_action:\n      - logger.log: \"Malfunction detected. Relay welded.\"\n    #... rest of options\n\n# Example converted malfunction configuration\nswitch:\n  - platform: gpio\n    id: open_relay\n    #... rest of options\n    on_turn_off:\n      - delay: 200ms #allow for switching time and any discharge\n      - if:\n          condition:\n            binary_sensor.is_on: open_binary_sensor\n            # alternative can check directly\n            # on sensor.in_range open_current\n          then:\n            - logger.log: \"Malfunction detected. Relay welded.\"\n```\n\n----------------------------------------\n\nTITLE: Pulse Meter with Internal Filter Configuration\nDESCRIPTION: Sets up internal filter timing for pulse debouncing based on load calculations.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/cookbook/power_meter.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: pulse_meter\n    # ...\n    internal_filter: 20ms\n```\n\n----------------------------------------\n\nTITLE: Configuring PCA9685 Component in ESPHome\nDESCRIPTION: This YAML snippet sets up a PCA9685 component hub with a specified frequency for controlling PWM outputs. The 'id' is used to reference the hub, and an individual output channel is configured with the specified 'pca9685_id' referencing the hub. The frequency parameter defaults to 1000Hz but can range from 24Hz to 1525.88Hz.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/output/pca9685.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\npca9685:\n  - id: pca9685_hub1\n    frequency: 500\n\n# Individual outputs\noutput:\n  - platform: pca9685\n    pca9685_id: 'pca9685_hub1'\n    channel: 0\n```\n\n----------------------------------------\n\nTITLE: sensor.in_range Condition Configuration in ESPHome\nDESCRIPTION: This snippet demonstrates the use of the 'sensor.in_range' condition within a trigger. It checks if the state of the specified sensor ('my_sensor') is within the range defined by 'above' (50.0) and 'below'. If the condition is met, a script ('my_script') is executed.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/index.rst#2025-04-21_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\n    # in a trigger:\n    on_...:\n      if:\n        condition:\n          sensor.in_range:\n            id: my_sensor\n            above: 50.0\n        then:\n        - script.execute: my_script\n\n```\n\n----------------------------------------\n\nTITLE: Configuring PID Monitoring Sensor in YAML\nDESCRIPTION: Configuration for a PID sensor that monitors various aspects of the PID controller's operation, such as result, error, or individual terms, to help with tuning and debugging.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/climate/pid.rst#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: pid\n    name: \"PID Climate Result\"\n    type: RESULT\n```\n\n----------------------------------------\n\nTITLE: Handling Unmatched Finger Scans\nDESCRIPTION: Triggered when a scanned fingerprint does not match any enrolled fingerprints, publishing a message stating 'Unauthorized finger'. Useful for alerting unauthorized access attempts. Requires proper sensor configuration.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/fingerprint_grow.rst#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\non_finger_scan_unmatched:\n  - text_sensor.template.publish:\n      id: fingerprint_state\n      state: \"Unauthorized finger\"\n```\n\n----------------------------------------\n\nTITLE: Using Lambda in Modbus Controller Sensor Configuration\nDESCRIPTION: This YAML example configures a modbus_controller sensor to use a lambda function for logging the parsed value and raw modbus response data. The lambda records information about the incoming value, data size, and sensor properties at each update. It requires ESP_LOGI for logging purposes and uses specific sensor platform setup for modbus_controller.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/modbus_controller.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: modbus_controller\n    modbus_controller_id: modbus1\n    id: battery_capacity\n    address: 0x9001\n    name: \"Battery Capacity\"\n    register_type: holding\n    value_type: U_WORD\n    lambda: |-\n        ESP_LOGI(\"\",\"Lambda incoming value=%f - data array size is %d\",x,data.size());\n        ESP_LOGI(\"\",\"Sensor properties: adress = 0x%X, offset = 0x%X value type=%d\",item->start_address,item->offset,item->sensor_value_type);\n        int i=0 ;\n        for (auto val : data) {\n          ESP_LOGI(\"\",\"data[%d]=0x%02X (%d)\",i,data[i],data[i]);\n          i++;\n        }\n        return x ;\n```\n\n----------------------------------------\n\nTITLE: Configuring GPIO Binary Sensor in YAML for ESPHome\nDESCRIPTION: This snippet demonstrates a basic configuration for a GPIO binary sensor in ESPHome. It sets up a binary sensor on pin D2, naming it 'Living Room Window' and setting its device class to 'window'.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/gpio.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nbinary_sensor:\n  - platform: gpio\n    pin: D2\n    name: \"Living Room Window\"\n    device_class: window\n```\n\n----------------------------------------\n\nTITLE: UART Debugging Configuration\nDESCRIPTION: Configuration examples for debugging UART communication with various options for monitoring and logging data.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/uart.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nuart:\n  baud_rate: 115200\n  debug:\n    direction: BOTH\n    dummy_receiver: false\n    after:\n      delimiter: \"\\n\"\n    sequence:\n      - lambda: UARTDebug::log_string(direction, bytes);\n\n# Minimal configuration example, logs hex strings by default\nuart:\n  baud_rate: 9600\n  debug:\n```\n\n----------------------------------------\n\nTITLE: Basic ST7789V Display Configuration in YAML\nDESCRIPTION: Minimal configuration required to set up a ST7789V display using the TTGO TDisplay model. Includes basic pin setup and Hello World display example.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/st7789v.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndisplay:\n  - platform: st7789v\n    model: TTGO TDisplay 135x240\n    backlight_pin: GPIOXX\n    cs_pin: GPIOXX\n    dc_pin: GPIOXX\n    reset_pin: GPIOXX\n    lambda: |-\n      it.print(0, 0, id(font), \"Hello World!\");\n\nfont:\n  - file: \"gfonts://Roboto\"\n    id: font\n    size: 20\n```\n\n----------------------------------------\n\nTITLE: Configuring BP1658CJ Component in ESPHome\nDESCRIPTION: Setup global BP1658CJ LED driver hub with data and clock pin configuration, including optional power channel settings for color and white channels\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/output/bp1658cj.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbp1658cj:\n  data_pin: GPIOXX\n  clock_pin: GPIOXX\n  max_power_color_channels: 4 # Valid values 0-15\n  max_power_white_channels: 6 # Valid values 0-15\n```\n\n----------------------------------------\n\nTITLE: Controlling Display Colors in ESPHome\nDESCRIPTION: Examples of controlling colors on both monochrome and color displays in ESPHome, using COLOR_ON/COLOR_OFF for monochrome displays and RGB values for color displays.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/index.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndisplay:\n  - platform: ...\n    # ...\n    lambda: |-\n      // Turn the whole display on\n      it.fill(COLOR_ON);\n      // Turn the whole display off\n      it.fill(COLOR_OFF);\n\n      // Turn a single pixel off at [50,60]\n      it.draw_pixel_at(50, 60, COLOR_OFF);\n```\n\n----------------------------------------\n\nTITLE: Configuring UDP Sensor in ESPHome\nDESCRIPTION: Example configuration for setting up a UDP sensor that receives temperature data from another ESPHome node. The configuration shows basic setup with required provider and ID fields.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/udp.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: udp\n    id: temperature_id\n    provider: thermometer\n    remote_id: temp_id\n```\n\n----------------------------------------\n\nTITLE: Configuring ADE7953 Sensor over I2C in ESPHome\nDESCRIPTION: Example configuration for setting up an ADE7953 power sensor using I2C communication protocol. Includes sensor configurations for voltage, frequency, current, power factor, apparent power, active power, and reactive power measurements for both A and B channels.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ade7953.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: ade7953_i2c\n    irq_pin: GPIOXX\n    voltage:\n      name: ADE7953 Voltage\n    frequency:\n      name: ADE7953 Frequency\n    current_a:\n      name: ADE7953 Current A\n    current_b:\n      name: ADE7953 Current B\n    power_factor_a:\n      name: \"ADE7953 Power Factor A\"\n    power_factor_b:\n      name: \"ADE7953 Power Factor B\"\n    apparent_power_a:\n      name: \"ADE7953 Apparent Power A\"\n    apparent_power_b:\n      name: \"ADE7953 Apparent Power B\"\n    active_power_a:\n      name: ADE7953 Active Power A\n    active_power_b:\n      name: ADE7953 Active Power B\n    reactive_power_a:\n      name: \"ADE7953 Reactive Power A\"\n    reactive_power_b:\n      name: \"ADE7953 Reactive Power B\"\n```\n\n----------------------------------------\n\nTITLE: Configuring APDS9960 Sensor in ESPHome\nDESCRIPTION: Example configuration showing how to set up an APDS9960 sensor with basic sensor and binary sensor components. Includes configuration for clear channel readings and gesture detection for upward movement.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/apds9960.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\napds9960:\n  address: 0x39\n  update_interval: 60s\n\nsensor:\n  - platform: apds9960\n    type: CLEAR\n    name: \"APDS9960 Clear Channel\"\n\nbinary_sensor:\n  - platform: apds9960\n    direction: UP\n    name: \"APDS960 Up Movement\"\n  # Repeat for each direction\n```\n\n----------------------------------------\n\nTITLE: Example Configuration for LTR501 Sensor in ESPHome (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to configure the LTR501 sensor platform in ESPHome, including sensor type specification and optional proximity sensor settings. Adjust settings like cooldown period and high threshold for desired behavior on proximity detection.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ltr501.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: ltr501\n    type: ALS_PS  # .. or ALS or PS\n    ambient_light: \"Ambient light\"\n    # PS only section\n    ps_cooldown: 5 s\n    ps_high_threshold: 500\n    on_ps_high_threshold:\n      then:\n        - .... # do something - light up the screen for example\n    ps_counts:\n      name: \"Proximity counts\"\n```\n\n----------------------------------------\n\nTITLE: LVGL Page Navigation Actions\nDESCRIPTION: Action configuration for navigating between LVGL pages with animation effects. Examples show moving to next and previous pages with custom transitions and timing.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/index.rst#2025-04-21_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - lvgl.page.next:\n        animation: OUT_LEFT\n        time: 300ms\n\non_...:\n  then:\n    - lvgl.page.previous:\n        animation: OUT_RIGHT\n        time: 300ms\n```\n\n----------------------------------------\n\nTITLE: SM16716 Component Configuration\nDESCRIPTION: This configuration sets up the global SM16716 hub, specifying the data and clock pins, the number of channels, and the number of chips. It defines the basic parameters needed for ESPHome to communicate with the SM16716 LED driver.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/output/sm16716.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"# Example configuration entry\nsm16716:\n  data_pin: GPIOXX\n  clock_pin: GPIOXX\n  num_channels: 3\n  num_chips: 1\"\n```\n\n----------------------------------------\n\nTITLE: Configuring SM2335 LED Driver in ESPHome YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure the SM2335 LED driver within ESPHome by specifying required pins and optional power settings. Dependencies include proper pin designation and ESPHome setup. Key parameters are `data_pin`, `clock_pin`, and `max_power_color_channels`, which define the GPIO pins used for communication and power settings for color channels. Expected inputs are the GPIO pin numbers, and outputs are the driver behavior according to these configurations.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/output/sm2335.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsm2335:\n  data_pin: GPIOXX\n  clock_pin: GPIOXX\n  max_power_color_channels: 9\n  max_power_white_channels: 9\n```\n\n----------------------------------------\n\nTITLE: Configuring Text Sensor Copy in ESPHome\nDESCRIPTION: YAML configuration for creating a copy of an existing text sensor. Requires source_id to specify the original text sensor.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/copy.rst#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ntext_sensor:\n  - platform: copy\n    source_id: source_text_sensor\n    name: \"Copy of source_text_sensor\"\n```\n\n----------------------------------------\n\nTITLE: Configuring ILI9XXX Display with Image Rendering in ESPHome\nDESCRIPTION: This snippet shows the basic configuration for an ILI9XXX display, including pin assignments, rotation, and image rendering settings. It uses a color palette adapted from specific images.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/ili9xxx.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ndc_pin: GPIOXX\nreset_pin: GPIOXX\nrotation: 90\nid: tft_ha\ncolor_palette: IMAGE_ADAPTIVE\ncolor_palette_images:\n  - \"sample_100x100.png\"\n  - \"display_design.png\"\nlambda: |-\n  it.image(0, 0, id(myimage));\n```\n\n----------------------------------------\n\nTITLE: BLE Time Update Automation\nDESCRIPTION: Example of periodic BLE connection and time update for Xiaomi MHO-C303 clock\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/ble_client.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nble_client:\n  - id: ble_clock\n    mac_address: XX:XX:XX:XX:XX:XX\n    auto_connect: false\n  - id: other_device\n    mac_address: XX:XX:XX:XX:XX:XX\n\ninterval:\n  - interval: 60min\n    then:\n      - esp32_ble_tracker.stop_scan:\n      - ble_client.connect: ble_clock\n      - ble_client.ble_write:\n          id: ble_clock\n          service_uuid: EBE0CCB0-7A0A-4B0C-8A1A-6FF2997DA3A6\n          characteristic_uuid: EBE0CCB7-7A0A-4B0C-8A1A-6FF2997DA3A6\n          value: !lambda |-\n              uint32_t t = id(sntp_time).now().timestamp + ESPTime::timezone_offset();\n              return {(uint8_t)t, (uint8_t)(t >> 8), (uint8_t)(t >> 16), (uint8_t)(t >> 24), 0};\n      - ble_client.disconnect: ble_clock\n      - esp32_ble_tracker.start_scan:\n```\n\n----------------------------------------\n\nTITLE: Configuring Binary Sensor for Tap Detection\nDESCRIPTION: This snippet shows the configuration of a binary sensor that can detect single taps and double taps on the MSA301 or MSA311 sensor. It includes debounce timing and additional active state settings.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/msa3xx.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n\"binary_sensor:\\n  - platform: msa3xx\\n    tap: Single tap          # shorthand notation for the sensor\\n    double_tap: Double tap   # -- \\\"\\\" -- \\n    active:                  # regular notation for the sensor to be able\\n      name: Active           # to use filters and other options\\n      filters: \\n        - delayed_off: 5000ms # example of prolongation of movement detection signal\"\n```\n\n----------------------------------------\n\nTITLE: Modbus Command Sent Automation\nDESCRIPTION: Defines an automation that triggers when a Modbus command is sent, allowing interaction with the command details\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/modbus_controller.rst#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nmodbus_controller:\n  - id: modbus_con\n    on_command_sent:\n      then:\n        - number.increment: modbus_commands\n```\n\n----------------------------------------\n\nTITLE: Importing Home Assistant Entity States as Text Sensors in ESPHome\nDESCRIPTION: This snippet demonstrates how to configure a text sensor in ESPHome that imports a state from a Home Assistant entity. It requires the native API component to be set up.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/text_sensor/homeassistant.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\ntext_sensor:\n  - platform: homeassistant\n    id: weather_fom_ha\n    entity_id: sensor.weather_forecast\n```\n\n----------------------------------------\n\nTITLE: Configuring Mopeka Standard Check Sensor with 11kg Propane Tank\nDESCRIPTION: Example configuration for a Mopeka Standard Check sensor tracking a European 11kg propane tank, with temperature, level, distance, and battery level sensors\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/mopeka_std_check.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nesp32_ble_tracker:\n\nsensor:\n  # Example using 11kg 100% propane tank.\n  - platform: mopeka_std_check\n    mac_address: XX:XX:XX:XX:XX:XX\n    tank_type: Europe_11kg\n    temperature:\n        name: \"Propane test temp\"\n    level:\n        name: \"Propane test level\"\n    distance:\n        name: \"Propane test distance\"\n    battery_level:\n        name: \"Propane test battery level\"\n```\n\n----------------------------------------\n\nTITLE: Configuring a Binary Fan in ESPHome with YAML\nDESCRIPTION: Example YAML configuration for setting up a binary fan in ESPHome. This configuration creates a basic fan named 'Living Room Fan' connected to a binary output named 'fan_output'.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/fan/binary.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nfan:\n  - platform: binary\n    output: fan_output\n    name: \"Living Room Fan\"\n```\n\n----------------------------------------\n\nTITLE: Reading BMS Data as Sensor\nDESCRIPTION: This snippet defines a sensor platform to read various BMS data points such as voltage, current, battery level, and temperatures. Each sensor entry specifies the name that will be displayed in the ESPHome dashboard.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/daly_bms.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n\"    sensor:\\n      - platform: daly_bms\\n        voltage:\\n          name: \\\"Battery Voltage\\\"\\n        current:\\n          name: \\\"Battery Current\\\"\\n        battery_level:\\n          name: \\\"Battery Level\\\"\\n        max_cell_voltage:\\n          name: \\\"Max Cell Voltage\\\"\\n        max_cell_voltage_number:\\n          name: \\\"Max Cell Voltage Number\\\"\\n        min_cell_voltage:\\n          name: \\\"Min Cell Voltage\\\"\\n        min_cell_voltage_number:\\n          name: \\\"Min Cell Voltage Number\\\"\\n        max_temperature:\\n          name: \\\"Max Temperature\\\"\\n        max_temperature_probe_number:\\n          name: \\\"Max Temperature Probe Number\\\"\\n        min_temperature:\\n          name: \\\"Min Temperature\\\"\\n        min_temperature_probe_number:\\n          name: \\\"Min Temperature Probe Number\\\"\\n        remaining_capacity:\\n          name: \\\"Remaining Capacity\\\"\\n        cells_number:\\n          name: \\\"Cells Number\\\"\\n        temperature_1:\\n          name: \\\"Temperature 1\\\"\\n        temperature_2:\\n          name: \\\"Temperature 2\\\"\\n        cell_1_voltage:\\n          name: \\\"Cell 1 Voltage\\\"\\n        cell_2_voltage:\\n          name: \\\"Cell 2 Voltage\\\"\\n        cell_3_voltage:\\n          name: \\\"Cell 3 Voltage\\\"\\n        cell_4_voltage:\\n          name: \\\"Cell 4 Voltage\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Starting Single Valve Operation in YAML\nDESCRIPTION: Action to start a single valve with optional run duration, disabling auto-advance and queue features.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sprinkler.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - sprinkler.start_single_valve:\n        id: sprinkler_ctrlr\n        valve_number: 0\n        run_duration: 600s  # optional\n```\n\n----------------------------------------\n\nTITLE: Initializing Output Component Configuration in YAML\nDESCRIPTION: This configuration snippet outlines the setup of an output component in the ESPHome environment, specifying attributes such as platform, power supply, and inversion settings. It focuses on managing outputs that can be either binary or float, covering key parameters for float outputs such as min_power and max_power. The configuration facilitates integration with power supplies and allows for customization of output behavior.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/output/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\noutput:\n  - platform: ...\n    id: my_output_id\n    power_supply: power_supply_id\n    inverted: false\n    min_power: 0.01\n    max_power: 0.75\n```\n\n----------------------------------------\n\nTITLE: Configuring SHT3X-D Sensor in ESPHome\nDESCRIPTION: Basic configuration example for setting up an SHT3X-D sensor with temperature and humidity measurements. Defines sensor names, I2C address, and update interval.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/sht3xd.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: sht3xd\n    temperature:\n      name: \"Living Room Temperature\"\n    humidity:\n      name: \"Living Room Humidity\"\n    address: 0x44\n    update_interval: 60s\n```\n\n----------------------------------------\n\nTITLE: Sending POST Request with ESPHome HTTP Component\nDESCRIPTION: Example of sending a POST request using the http_request.post action. Demonstrates setting headers and including a JSON payload.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/http_request.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - http_request.post:\n      url: https://esphome.io\n      headers:\n        Content-Type: application/json\n      json:\n        key: value\n  # Short form\n  - http_request.post: https://esphome.io\n```\n\n----------------------------------------\n\nTITLE: Configuring PID Controller with Zero Parameters for Autotuning in YAML\nDESCRIPTION: Initial configuration of a PID climate controller with control parameters set to zero, which is required before starting the autotuning process. This connects a temperature sensor to a heating output.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/climate/pid.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nclimate:\n  - platform: pid\n    id: pid_climate\n    name: \"PID Climate Controller\"\n    sensor: temperature_sensor\n    default_target_temperature: 21Â°C\n    heat_output: heater\n    control_parameters:\n      kp: 0.0\n      ki: 0.0\n      kd: 0.0\n```\n\n----------------------------------------\n\nTITLE: Full PCF8563 Configuration Example in YAML\nDESCRIPTION: Provides a comprehensive example of PCF8563 RTC configuration with ESPHome, including reading RTC time on boot, synchronizing with an external time source, and updating the RTC when synchronization is successful.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/time/pcf8563.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nesphome:\n  on_boot:\n    then:\n      # read the RTC time once when the system boots\n      pcf8563.read_time:\n\ntime:\n  - platform: pcf8563\n    # repeated synchronization is not necessary unless the external RTC\n    # is much more accurate than the internal clock\n    update_interval: never\n  - platform: homeassistant\n    # instead try to synchronize via network repeatedly ...\n    on_time_sync:\n      then:\n        # ... and update the RTC when the synchronization was successful\n        pcf8563.write_time:\n```\n\n----------------------------------------\n\nTITLE: Configuring INA226 Sensor with Multiple Outputs in ESPHome\nDESCRIPTION: This snippet demonstrates how to configure an INA226 sensor in ESPHome with current, power, bus voltage, and shunt voltage outputs. It includes settings for shunt resistance, max current, ADC time, and averaging.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ina226.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: ina226\n    address: 0x40\n    shunt_resistance: 0.1 ohm\n    max_current: 3.2A\n    # adc time used for both, Bus Voltage and Shunt Voltage\n    adc_time: 140us\n    adc_averaging: 128\n    update_interval: 60s\n    current:\n      name: \"INA226 Current\"\n    power:\n      name: \"INA226 Power\"\n    bus_voltage:\n      name: \"INA226 Bus Voltage\"\n    shunt_voltage:\n      name: \"INA226 Shunt Voltage\"\n```\n\n----------------------------------------\n\nTITLE: Basic SSD1331 Display Configuration in YAML\nDESCRIPTION: Basic configuration example showing how to set up an SSD1331 OLED display with SPI connections and display Hello World text.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/ssd1331.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nspi:\n  clk_pin: D5\n  mosi_pin: D7\n\ndisplay:\n  - platform: ssd1331_spi\n    reset_pin: D0\n    cs_pin: D8\n    dc_pin: D1\n    lambda: |-\n      it.print(0, 0, id(font), \"Hello World!\");\n```\n\n----------------------------------------\n\nTITLE: Sending Advanced RF Code\nDESCRIPTION: Demonstrates sending an advanced RF code with specific length, protocol, and code parameters\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/rf_bridge.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\non_...: \n  then:\n    - rf_bridge.send_advanced_code:\n        length: 0x04\n        protocol: 0x01\n        code: \"ABC123\"\n```\n\n----------------------------------------\n\nTITLE: Configuring BL0939 Power Sensor in ESPHome\nDESCRIPTION: Example YAML configuration for BL0939 sensor platform showing setup of voltage, current, power and energy measurements for both channels. Uses UART communication with specific requirements of 4800 baud rate, no parity, and 2 stop bits.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/bl0939.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: bl0939\n    voltage:\n      name: 'BL0939 Voltage'\n    current_1:\n      name: 'BL0939 Current 1'\n    current_2:\n      name: 'BL0939 Current 2'\n    active_power_1:\n      name: 'BL0939 Active Power 1'\n    active_power_2:\n      name: 'BL0939 Active Power 2'\n    energy_1:\n      name: 'BL0939 Energy 1'\n    energy_2:\n      name: 'BL0939 Energy 2'\n    energy_total:\n      name: 'BL0939 Energy Total'\n```\n\n----------------------------------------\n\nTITLE: Configuring MHO-C303 Clock Thermometer in YAML\nDESCRIPTION: Configuration for the rectangular e-ink display thermometer clock that broadcasts temperature, humidity and battery status. No encryption required.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/xiaomi_ble.rst#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: xiaomi_mhoc303\n    mac_address: XX:XX:XX:XX:XX:XX\n    temperature:\n      name: \"MHO-C303 Climate Temperature\"\n    humidity:\n      name: \"MHO-C303 Climate Humidity\"\n    battery_level:\n      name: \"MHO-C303 Climate Battery Level\"\n```\n\n----------------------------------------\n\nTITLE: ESP32 BLE Tracker Automation for Manufacturer Data\nDESCRIPTION: Example of an automation that processes manufacturer data from a specific BLE device and publishes it to a sensor.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/esp32_ble_tracker.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: template\n    name: \"BLE Sensor\"\n    id: ble_sensor\n\nesp32_ble_tracker:\n  on_ble_manufacturer_data_advertise:\n    - mac_address: XX:XX:XX:XX:XX:XX\n      manufacturer_id: 0590\n      then:\n        - lambda: |-\n            if (x[0] != 0x7b || x[1] != 0x61) return;\n            int value = x[2] + (x[3] << 8);\n            id(ble_sensor).publish_state(value);\n```\n\n----------------------------------------\n\nTITLE: Playing Files from Numbered Folders with DF-Player\nDESCRIPTION: Action to play files from specific numbered folders with options for playing individual files or looping all files in a folder.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/dfplayer.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - dfplayer.play_folder:\n        folder: 2\n        file: 1\n```\n\n----------------------------------------\n\nTITLE: Configuring NPI-19 Sensor with ESPHome YAML\nDESCRIPTION: This snippet demonstrates how to configure the NPI-19 pressure sensor in ESPHome using the YAML format. It includes specifying the raw pressure and temperature sensor entities with optional names. The configuration requires setting up the IÂ²C bus, which the NPI-19 sensor communicates over.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/npi19.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: npi19\n    raw_pressure:\n      name: \"Raw Pressure\"\n    temperature:\n      name: Temperature\n```\n\n----------------------------------------\n\nTITLE: Setting Output Level Action in YAML\nDESCRIPTION: This snippet shows how to set a specific level for float outputs in ESPHome, applicable to components like ESP8266 PWM or LEDC. Parameters include the output ID and the desired level percentage. It allows for precise control over output levels for devices that support variable output, and can be alternatively expressed in a lambda function.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/output/index.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - output.set_level:\n        id: light_1\n        level: 50%\n```\n\nLANGUAGE: cpp\nCODE:\n```\nid(light_1).set_level(0.5);\n```\n\n----------------------------------------\n\nTITLE: Binary Sensor On Release Event Configuration in YAML\nDESCRIPTION: Configuration example showing how to trigger an automation when a binary sensor is released, turning off a relay.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/index.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nbinary_sensor:\n  - platform: gpio\n    # ...\n    on_release:\n      then:\n        - switch.turn_off: relay_1\n```\n\n----------------------------------------\n\nTITLE: Defining TLC5971 Global Hub Configuration\nDESCRIPTION: This code snippet demonstrates how to set up the global hub configuration for the TLC5971 LED driver in ESPHome. It includes mandatory configuration settings for 'data_pin' and 'clock_pin', with optional settings for 'num_chips' and 'id' for identifying multiple chains. The inputs are pin identifiers, and the number of chips must be between 1 and 85.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/output/tlc5971.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\\ntlc5971:\\n  data_pin: GPIOXX\\n  clock_pin: GPIOXX\n```\n\n----------------------------------------\n\nTITLE: Configuring Duty Time Sensor in ESPHome\nDESCRIPTION: Demonstrates basic configuration of a duty time sensor with optional last turn-on time tracking and restore functionality\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/duty_time.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: duty_time\n    id: my_climate_work_time\n    name: My Climate Work Time\n    # Support logical sources (optional): 'binary_sensor'\n    sensor: my_binary_sensor\n    # ... EOR 'lambda'\n    lambda: \"return id(my_climate).mode != CLIMATE_MODE_OFF;\"\n    # Restore (optional, default: False)\n    restore: false\n    # Sensor for last turn-on time (optional)\n    last_time:\n      name: My Climate Last Turn-On Time\n```\n\n----------------------------------------\n\nTITLE: Setting Number State\nDESCRIPTION: An action snippet to set the state of a number component. The 'id' of the number and the value to set are required parameters.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/number/index.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- number.set:\n    id: my_number\n    value: 42\n```\n\n----------------------------------------\n\nTITLE: Configuring GP8403 Output in ESPHome\nDESCRIPTION: Configures the GP8403 component as an output. Each channel requires specifying a platform, ID (optional), the GP8403 component's ID, and the channel number (0 or 1). It also supports all other options from the standard ESPHome output configuration.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/output/gp8403.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\noutput:\n  - platform: gp8403\n    id: my_gp8403_output_1\n    gp8403_id: my_gp8403\n    channel: 0\n  - platform: gp8403\n    id: my_gp8403_output_2\n    gp8403_id: my_gp8403\n    channel: 1\n```\n\n----------------------------------------\n\nTITLE: Configuring ESPHome Thermostat with Default Preset Restore in YAML\nDESCRIPTION: Example configuration for a thermostat that always restores to a specified default preset on every boot, regardless of previous state.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/climate/thermostat.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# This climate controller will always switch to \"Every Start Preset\"\nclimate:\n  - platform: thermostat\n    name: \"Default Preset Thermostat\"\n    default_preset: Every Start Preset\n    on_boot_restore_from: default_preset\n    preset:\n      - name: Every Start Preset\n        default_target_temperature_low: 17\n        default_target_temperature_high: 26\n        fan_mode: OFF\n        swing_mode: OFF\n        mode: OFF\n      # Custom preset\n      - name: A custom preset\n        default_target_temperature_low: 21\n        default_target_temperature_high: 23\n        fan_mode: HIGH\n        mode: HEAT_COOL\n```\n\n----------------------------------------\n\nTITLE: Configuring SSD1306 Display with I2C Interface\nDESCRIPTION: Example configuration for connecting an SSD1306 OLED display via I2C bus. Sets up I2C pins and basic display parameters including reset pin and address.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/ssd1306.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ni2c:\n  sda: D1\n  scl: D2\n\ndisplay:\n  - platform: ssd1306_i2c\n    model: \"SSD1306 128x64\"\n    reset_pin: D0\n    address: 0x3C\n    lambda: |-\n      it.print(0, 0, id(font), \"Hello World!\");\n```\n\n----------------------------------------\n\nTITLE: Basic CAN Bus Configuration in YAML\nDESCRIPTION: Example of basic CAN bus configuration including platform setup, CAN ID specification, and frame handling automation.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/canbus/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncanbus:\n  - platform: ...\n    can_id: 4\n    on_frame:\n    - can_id: 500\n      use_extended_id: false\n      then:\n      - lambda: |-\n          std::string b(x.begin(), x.end());\n          ESP_LOGD(\"can id 500\", \"%s\", &b[0] );\n```\n\n----------------------------------------\n\nTITLE: Configuring RP2040 PIO LED Strip in ESPHome YAML\nDESCRIPTION: This YAML configuration sets up an RP2040 PIO LED strip light in ESPHome. It specifies the platform, name, ID, pin, number of LEDs, PIO peripheral, RGB order, and chipset type.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/light/rp2040_pio_led_strip.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlight:\n  - platform: rp2040_pio_led_strip\n    name: led_strip\n    id: led_strip\n    pin: GPIOXX\n    num_leds: 10\n    pio: 0\n    rgb_order: GRB\n    chipset: WS2812B\n```\n\n----------------------------------------\n\nTITLE: Configuring Endstop Cover in ESPHome\nDESCRIPTION: Example YAML configuration for setting up an endstop-based cover in ESPHome. Demonstrates configuration of open/close actions, duration settings, endstop sensors, and stop actions. The configuration allows for precise control of motorized covers with position detection.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/cover/endstop.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncover:\n  - platform: endstop\n    name: \"Endstop Cover\"\n\n    open_action:\n      - switch.turn_on: open_cover_switch\n    open_duration: 2.1min\n    open_endstop: open_endstop_binary_sensor\n\n    close_action:\n      - switch.turn_on: close_cover_switch\n    close_duration: 2min\n    close_endstop: close_endstop_binary_sensor\n\n    stop_action:\n      - switch.turn_off: open_cover_switch\n      - switch.turn_off: close_cover_switch\n```\n\n----------------------------------------\n\nTITLE: Advanced PID Autotune Action with Custom Parameters in YAML\nDESCRIPTION: Advanced implementation of the climate.pid.autotune action with optional parameters to customize the autotuning process, including noiseband and output power settings.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/climate/pid.rst#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  # Advanced\n  - climate.pid.autotune:\n      id: pid_climate\n      noiseband: 0.25\n      positive_output: 25%\n      negative_output: -25%\n```\n\n----------------------------------------\n\nTITLE: Configuring Factory Reset Button in ESPHome\nDESCRIPTION: YAML configuration example for setting up a factory reset button in ESPHome. This creates a button that when triggered will erase all stored preferences and reboot the device to factory defaults.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/button/factory_reset.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nbutton:\n  - platform: factory_reset\n    name: Restart with Factory Default Settings\n```\n\n----------------------------------------\n\nTITLE: Configuring ESP32 Camera for TTGO T-Camera V17\nDESCRIPTION: This YAML configuration is for the TTGO T-Camera V17. It defines the external clock, I2C pins, data pins, control pins, and includes image orientation settings. The power down pin is commented out in this example.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/esp32_camera.rst#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nesp32_camera:\n  external_clock:\n    pin: GPIO32\n    frequency: 20MHz\n  i2c_pins:\n    sda: GPIO13\n    scl: GPIO12\n  data_pins: [GPIO5, GPIO14, GPIO4, GPIO15, GPIO18, GPIO23, GPIO36, GPIO39]\n  vsync_pin: GPIO27\n  href_pin: GPIO25\n  pixel_clock_pin: GPIO19\n  # power_down_pin: GPIO26\n  vertical_flip: true\n  horizontal_mirror: true\n\n  # Image settings\n  name: My Camera\n  # ...\n```\n\n----------------------------------------\n\nTITLE: QMC5883L Sensor Configuration in YAML\nDESCRIPTION: This YAML configuration snippet demonstrates how to set up the QMC5883L magnetometer sensor in ESPHome. It defines sensors for field strength in X, Y, and Z axes, heading, and temperature. It includes optional configurations such as address, range, oversampling, update interval and temperature offset. The IÂ²C Bus must be configured separately for this sensor to work.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/qmc5883l.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"# Example configuration entry\nsensor:\n  - platform: qmc5883l\n    address: 0x0D\n    field_strength_x:\n      name: \\\"QMC5883L Field Strength X\\\"\n    field_strength_y:\n      name: \\\"QMC5883L Field Strength Y\\\"\n    field_strength_z:\n      name: \\\"QMC5883L Field Strength Z\\\"\n    heading:\n      name: \\\"QMC5883L Heading\\\"\n    temperature:\n      name: \\\"QMC5883L Temperature\\\"\n      filters:\n        - offset: 34.0\n    range: 200uT\n    oversampling: 512x\n    update_interval: 60s\"\n```\n\n----------------------------------------\n\nTITLE: Sending PN532 NFC Tag Scans to Home Assistant in ESPHome\nDESCRIPTION: This snippet shows how to send a scanned NFC tag event to the Home Assistant tag component using the homeassistant.tag_scanned action in ESPHome.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/pn532.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\npn532_...:\n  # ...\n  on_tag:\n    then:\n      - homeassistant.tag_scanned: !lambda 'return x;'\n```\n\n----------------------------------------\n\nTITLE: Configuring Resistance Sensor in Downstream Configuration\nDESCRIPTION: Example configuration for a resistance sensor using a downstream voltage divider circuit with a 5.6kOhm reference resistor and ADC source sensor\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/resistance.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: resistance\n    sensor: source_sensor\n    configuration: DOWNSTREAM\n    resistor: 5.6kOhm\n    name: Resistance Sensor\n\n  - platform: adc\n    id: source_sensor\n    pin: A0\n```\n\n----------------------------------------\n\nTITLE: Configuring arm_home Action for Alarm Panel in YAML\nDESCRIPTION: YAML configuration for adding an arm_home action to an Alarm Control Panel, which arms the alarm in home mode.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/alarm_control_panel/index.rst#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - alarm_control_panel.arm_home:\n        id: acp1\n        code: \"1234\"\n```\n\n----------------------------------------\n\nTITLE: PCA9554 Configuration Example in ESPHome YAML\nDESCRIPTION: This configuration demonstrates how to define a PCA9554 device with a specific address and how to configure a GPIO switch using a pin from the PCA9554 expander. It showcases the basic setup required to integrate the PCA9554 into an ESPHome configuration for controlling outputs.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/pca9554.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"# Example configuration entry\npca9554:\n  - id: 'pca9554a_device'\n    address: 0x38\n  \n# Individual outputs\nswitch:\n  - platform: gpio\n    name: \\\"PCF9554A Pin #0\\\"\n    pin:\n      pca9554: pca9554a_device\n      # Use pin number 0\n      number: 0\n      # One of INPUT or OUTPUT\n      mode:\n        output: true\n      inverted: false\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Pulse Meter Sensor\nDESCRIPTION: This snippet defines the configuration for a pulse meter sensor, specifying the pin and name for identification. It is a required setup for utilizing the pulse meter functionality.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/pulse_meter.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: pulse_meter\n    pin: GPIOXX\n    name: \"Pulse Meter\"\n```\n\n----------------------------------------\n\nTITLE: 7-Color E-Paper Display Color Configuration\nDESCRIPTION: Configuration example for defining and using colors on 7-color Waveshare E-Paper displays, demonstrating color constants and text printing with different colors.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/waveshare_epaper.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nlambda: |- \n  const auto BLACK   = Color(0,   0,   0,   0);\n  const auto RED     = Color(255, 0,   0,   0);\n  const auto GREEN   = Color(0,   255, 0,   0);\n  const auto BLUE    = Color(0,   0,   255, 0);\n  const auto YELLOW  = Color(255, 255, 0,   0);\n  const auto ORANGE  = Color(255, 127, 0,   0);\n  const auto WHITE   = Color(255, 255, 255, 0);\n\n  it.print(0, 0, id(font1), BLUE, \"Hello World in blue!\");\n  it.print(100, 100, id(font1), RED, \"Hello World in red!\");\n```\n\n----------------------------------------\n\nTITLE: Configuring BLE Scan on Client Connection in YAML\nDESCRIPTION: This YAML code snippet configures the BLE tracker to start scanning when a client connects and stop when the client disconnects. It is particularly useful for reducing resource consumption on single-core ESP32 devices.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/esp32_ble_tracker.rst#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nesp32_ble_tracker:\n  scan_parameters:\n    continuous: false\n\napi:\n  encryption:\n    key: !secret encryption_key\n  on_client_connected:\n    - esp32_ble_tracker.start_scan:\n        continuous: true\n  on_client_disconnected:\n    - esp32_ble_tracker.stop_scan:\n```\n\n----------------------------------------\n\nTITLE: Configuring TOF10120 Sensor in ESPHome\nDESCRIPTION: Basic YAML configuration example for setting up a TOF10120 distance sensor in ESPHome. Demonstrates how to configure the sensor name and update interval. The sensor requires IÂ²C bus setup and can measure distances between 10-180 centimeters.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/tof10120.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: tof10120\n    name: \"TOF10120 Distance\"\n    update_interval: 5s\n```\n\n----------------------------------------\n\nTITLE: Complete Inkbird IBS-TH1 Sensor Configuration in ESPHome\nDESCRIPTION: Full YAML configuration for setting up an Inkbird IBS-TH1 sensor with temperature, external temperature, humidity, and battery level sensors\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/inkbird_ibsth1_mini.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nesp32_ble_tracker:\n\nsensor:\n  - platform: inkbird_ibsth1_mini\n    mac_address: XX:XX:XX:XX:XX:XX\n    temperature:\n      name: \"Inkbird IBS-TH1 Temperature\"\n    external_temperature:\n      name: \"Inkburd IBS-TH1 External Temperature\"\n    humidity:\n      name: \"Inkbird IBS-TH1 Humidity\"\n    battery_level:\n      name: \"Inkbird IBS-TH1 Battery Level\"\n```\n\n----------------------------------------\n\nTITLE: Hardware Rotation for IÂ²C ST7567 Display\nDESCRIPTION: Example configuration demonstrating how to achieve 180-degree rotation using hardware transform options for IÂ²C interface.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/st7567.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# Example using transform section to achieve 180Â° rotation using hardware\ndisplay:\n  - platform: st7567_i2c\n    id: my_display\n    transform:\n      mirror_x: true\n      mirror_y: true\n    lambda: |-\n      it.print(0, 0, id(my_font), \"Hello World!\");\n```\n\n----------------------------------------\n\nTITLE: Advanced Configuration with Inverted TX and Manual Button\nDESCRIPTION: Extended configuration example including inverted TX line for hardware interface and a manual control button with debounce filtering.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/cover/he60r.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nuart:\n  - id: door_uart\n    baud_rate: 1200\n    parity: even\n    stop_bits: 1\n    tx_pin:\n      number: GPIOXX\n      inverted: true\n    rx_pin: GPIOXX\n\ncover:\n  platform: he60r\n  id: garage_door\n  name: Garage Door\n\nbinary_sensor:\n  - platform: gpio\n    pin:\n      number: GPIOXX\n      inverted: true\n      mode:\n        input: true\n        pullup: true\n    name: \"Garage Door Manual Button\"\n    # debounce the switch\n    filters:\n      - delayed_on: 50ms\n      - delayed_off: 50ms\n    on_press:\n      then:\n        - cover.toggle: garage_door\n```\n\n----------------------------------------\n\nTITLE: Total Energy Measurement Configuration\nDESCRIPTION: Configures total energy measurement with pulse to kWh conversion.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/cookbook/power_meter.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: pulse_meter\n  # ...\n    total:\n      name: \"Electricity Total\"\n      unit_of_measurement: \"kWh\"\n      device_class: energy\n      state_class: total_increasing\n      accuracy_decimals: 3\n      filters:\n        - multiply: 0.0001  # (1/10000 pulses per kWh)\n```\n\n----------------------------------------\n\nTITLE: Setting Zero Point for AGS10 Sensor\nDESCRIPTION: Example showing how to configure the zero-point calibration action for an AGS10 sensor. Demonstrates setting the current value as the zero point.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ags10.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: ags10\n    id: ags10_1_id\n    # ...\n\n# in some trigger\non_...:\n  - ags10.set_zero_point:\n      id: ags10_1_id\n      mode: CURRENT_VALUE\n```\n\n----------------------------------------\n\nTITLE: Defining Modbus Controller Number Configuration in YAML\nDESCRIPTION: This snippet demonstrates how to configure a modbus_controller Number sensor in YAML format for ESPHome. It includes examples of defining the address, value types, and additional parameters like multiply and lambda functions.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/number/modbus_controller.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nnumber:\n  - platform: modbus_controller\n    modbus_controller_id: modbus1\n    id: battery_capacity_number\n    name: \"Battery Cap Number\"\n    address: 0x9001\n    value_type: U_WORD\n    multiply: 1.0\n\n  - platform: modbus_controller\n    modbus_controller_id: modbus1\n    id: battery_capacity_number\n    name: \"Battery Cap Number\"\n    address: 0x9001\n    value_type: U_WORD\n    lambda: \"return  x * 1.0; \"\n    write_lambda: |-\n      ESP_LOGD(\"main\",\"Modbus Number incoming value = %f\",x);\n      uint16_t b_capacity = x ;\n      payload.push_back(b_capacity);\n      return x * 1.0 ;\n```\n\n----------------------------------------\n\nTITLE: Defining MY9231 Output Channel in ESPHome\nDESCRIPTION: This code snippet shows how to define an individual output channel for the MY9231/MY9291 LED driver in ESPHome. It specifies the platform as `my9231`, assigns an ID to the output, and selects the channel number to control.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/output/my9231.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n\"# Individual outputs\noutput:\n  - platform: my9231\n    id: 'my9231_output1'\n    channel: 0\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Havells Inverter Data Reading in ESPHome (YAML)\nDESCRIPTION: This YAML code snippet demonstrates how to configure the Havells Inverter sensor platform in ESPHome to read inverter data over Modbus. It includes configuration for multiple phases, Photo Voltaic sensors, power, frequency, temperature, and other parameters. Dependencies include ESPHome, Modbus, and UART components with a specified baud rate of 9600. The snippet defines the sensor's parameters like voltage and current along with other inverter-specific metrics for phases A, B, and C and two photo voltaic sources.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/havells_solar.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: havells_solar\n    update_interval: 60s\n    phase_a:\n      voltage:\n          name: \"HAVELLS Phase A Voltage\"\n      current:\n          name: \"HAVELLS Phase A Current\"\n    phase_b:\n      voltage:\n          name: \"HAVELLS Voltage Phase B\"\n      current:\n          name: \"HAVELLS Current Phase B\"\n    phase_c:\n      voltage:\n          name: \"HAVELLS Voltage Phase C\"\n      current:\n          name: \"HAVELLS Current Phase C\"\n    pv1:\n      voltage:\n          name: \"HAVELLS PV1 Voltage\"\n      current:\n          name: \"HAVELLS PV1 Current\"\n      active_power:\n          name: \"HAVELLS PV1 Active Power\"\n      voltage_sampled_by_secondary_cpu:\n          name: \"HAVELLS PV1 Voltage Sampled By Slave CPU\"\n      insulation_of_p_to_ground:\n          name: \"HAVELLS PV1 Insulation Of +VE To Ground\"\n    pv2:\n      voltage:\n          name: \"HAVELLS PV2 Voltage\"\n      current:\n          name: \"HAVELLS PV2 Current\"\n      active_power:\n          name: \"HAVELLS PV2 Active Power\"\n      voltage_sampled_by_secondary_cpu:\n          name: \"HAVELLS PV2 Voltage Sampled By Slave CPU\"\n      insulation_of_p_to_ground:\n          name: \"HAVELLS PV2 Insulation Of +VE To Ground\"\n    active_power:\n      name: \"HAVELLS Active Power\"\n    reactive_power:\n      name: \"HAVELLS Reactive Power\"\n    frequency:\n      name: \"HAVELLS Frequency\"\n    energy_production_day:\n      name: \"HAVELLS Today's Generation\"\n    total_energy_production:\n      name: \"HAVELLS Total Energy Production\"\n    total_generation_time:\n      name: \"HAVELLS Total Generation Time\"\n    today_generation_time:\n      name: \"HAVELLS Today Generation Time\"\n    inverter_module_temp:\n      name: \"HAVELLS Inverter Module Temp\"\n    inverter_inner_temp:\n      name: \"HAVELLS Inverter Inner Temp\"\n    inverter_bus_voltage:\n      name: \"HAVELLS Inverter BUS Voltage\"\n    insulation_of_pv_n_to_ground:\n      name: \"HAVELLS Insulation Of PV- To Ground\"\n    gfci_value:\n      name: \"HAVELLS GFCI Value\"\n    dci_of_r:\n      name: \"HAVELLS DCI Of R\"\n    dci_of_s:\n      name: \"HAVELLS DCI Of S\"\n    dci_of_t:\n      name: \"HAVELLS DCI Of T\"\n\n```\n\n----------------------------------------\n\nTITLE: Configuring SML Component in ESPHome\nDESCRIPTION: Basic configuration for setting up the SML component which connects to smart meters using the Smart Message Language protocol. This example includes an automation to publish data via MQTT.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sml.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsml:\n  id: mysml\n  uart_id: uart_bus\n  on_data:\n    - lambda: !lambda |-\n        if (valid) {\n          id(mqttclient).publish(\"gridmeter/sensor/sml/state\", format_hex(bytes));\n        } else {\n          id(mqttclient).publish(\"gridmeter/sensor/sml/error\", format_hex(bytes));\n        }\n```\n\n----------------------------------------\n\nTITLE: Configuring LYWSD02 E-ink Thermometer in YAML\nDESCRIPTION: Configuration for the rectangular e-ink display thermometer that broadcasts temperature, humidity and battery level. Requires firmware 1.1.2_0085 for battery level.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/xiaomi_ble.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: xiaomi_lywsd02\n    mac_address: XX:XX:XX:XX:XX:XX\n    temperature:\n      name: \"LYWSD02 Temperature\"\n    humidity:\n      name: \"LYWSD02 Humidity\"\n    battery_level:\n      name: \"LYWSD02 Battery Level\"\n```\n\n----------------------------------------\n\nTITLE: Basic DFRobot mmWave Configuration with UART and GPIO\nDESCRIPTION: Example configuration showing how to set up the mmWave radar with both UART and GPIO-based presence detection, including a switch to control detection.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/dfrobot_sen0395.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\ndfrobot_sen0395:\n\nbinary_sensor:\n  # Information coming from uart bus\n  - platform: dfrobot_sen0395\n    name: Mmwave Detected via UART\n\n  # Information coming from dedicated gpio (IO2)\n  - platform: gpio\n    name: Mmwave Detected via GPIO\n    device_class: motion\n    pin:\n      number: GPIOXX\n      mode: INPUT_PULLDOWN\n\nswitch:\n  # Switch to turn on/off detection\n  - platform: dfrobot_sen0395\n    name: Mmwave Active\n```\n\n----------------------------------------\n\nTITLE: Configuring API and MQTT with Discovery\nDESCRIPTION: This YAML snippet configures the ESPHome API with encryption and sets up the MQTT broker with specific parameters, including disabling discovery.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/mqtt.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napi:\n  encryption:\n    key: \"<secret>\"\n\nmqtt:\n  broker: 10.0.0.2\n  username: livingroom\n  password: !secret mqtt_password\n  discovery: False # disable entity discovery\n  discover_ip: True # enable device discovery\n```\n\n----------------------------------------\n\nTITLE: Configuring Single-Point Heating Thermostat in ESPHome\nDESCRIPTION: YAML configuration for a heating-only thermostat controller. Includes temperature sensor, heating timing parameters, and preset temperature threshold.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/climate/thermostat.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclimate:\n  - platform: thermostat\n    name: \"Thermostat Climate Controller\"\n    sensor: my_temperature_sensor\n    min_heating_off_time: 300s\n    min_heating_run_time: 300s\n    min_idle_time: 30s\n    heat_action:\n      - switch.turn_on: heater\n    idle_action:\n      - switch.turn_off: heater\n    default_preset: Home\n    preset:\n      - name: Home\n        default_target_temperature_low: 20 Â°C\n```\n\n----------------------------------------\n\nTITLE: Configuring ULN2003 Stepper Driver in YAML\nDESCRIPTION: Configuration for ULN2003 stepper motor driver with required pin definitions and optional control parameters.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/stepper/index.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nstepper:\n  - platform: uln2003\n    id: my_stepper\n    pin_a: GPIOXX\n    pin_b: GPIOXX\n    pin_c: GPIOXX\n    pin_d: GPIOXX\n    max_speed: 250 steps/s\n\n    # Optional:\n    acceleration: inf\n    deceleration: inf\n```\n\n----------------------------------------\n\nTITLE: Configuring LD2450 Sensors in YAML\nDESCRIPTION: This YAML snippet configures sensors for the LD2450 component to provide detailed information about detected targets. 'ld2450_id' specifies the LD2450 component to use. Key parameters include 'target_count', 'still_target_count', 'moving_target_count', and details for up to three targets and zones, tracking attributes like position, speed, angle, and resolution. Each option extends the Sensor configuration options in ESPHome.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ld2450.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: ld2450\n    ld2450_id: ld2450_radar\n    target_count:\n      name: Presence Target Count\n    still_target_count:\n      name: Still Target Count\n    moving_target_count:\n      name: Moving Target Count\n    target_1:\n      x:\n        name: Target-1 X\n      y:\n        name: Target-1 Y\n      speed:\n        name: Target-1 Speed\n      angle:\n        name: Target-1 Angle\n      distance:\n        name: Target-1 Distance\n      resolution:\n        name: Target-1 Resolution\n    target_2:\n      x:\n        name: Target-2 X\n      y:\n        name: Target-2 Y\n      speed:\n        name: Target-2 Speed\n      angle:\n        name: Target-2 Angle\n      distance:\n        name: Target-2 Distance\n      resolution:\n        name: Target-2 Resolution\n    target_3:\n      x:\n        name: Target-3 X\n      y:\n        name: Target-3 Y\n      speed:\n        name: Target-3 Speed\n      angle:\n        name: Target-3 Angle\n      distance:\n        name: Target-3 Distance\n      resolution:\n        name: Target-3 Resolution\n    zone_1:\n      target_count:\n        name: Zone-1 All Target Count\n      still_target_count:\n        name: Zone-1 Still Target Count\n      moving_target_count:\n        name: Zone-1 Moving Target Count\n    zone_2:\n      target_count:\n        name: Zone-2 All Target Count\n      still_target_count:\n        name: Zone-2 Still Target Count\n      moving_target_count:\n        name: Zone-2 Moving Target Count\n    zone_3:\n      target_count:\n        name: Zone-3 All Target Count\n      still_target_count:\n        name: Zone-3 Still Target Count\n      moving_target_count:\n        name: Zone-3 Moving Target Count\n```\n\n----------------------------------------\n\nTITLE: Using RGB Colors for Color Displays in ESPHome\nDESCRIPTION: Example of using RGB colors for drawing shapes on color displays like TFT screens, creating black, red, green, blue, and white filled circles.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/index.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndisplay:\n  - platform: ...\n    # ...\n    lambda: |-\n      auto black = Color(0, 0, 0);\n      auto red = Color(255, 0, 0);\n      auto green = Color(0, 255, 0);\n      auto blue = Color(0, 0, 255);\n      auto white = Color(255, 255, 255);\n      it.filled_circle(20, 32, 15, black);\n      it.filled_circle(40, 32, 15, red);\n      it.filled_circle(60, 32, 15, green);\n      it.filled_circle(80, 32, 15, blue);\n      it.filled_circle(100, 32, 15, white);\n```\n\n----------------------------------------\n\nTITLE: Building JSON in Lambda Function\nDESCRIPTION: This code snippet shows how to build a JSON object within a lambda function in ESPHome. It creates a simple JSON structure with a sensor value and a greeting message.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/json.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - http_request.post:\n      url: https://esphome.io\n      json: |-\n        root[\"key\"] = id(my_sensor).state;\n        root[\"greeting\"] = \"Hello World\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Haier Climate Sensors in YAML for ESPHome\nDESCRIPTION: This YAML configuration sets up various sensors for a Haier climate device, including outdoor temperature, humidity, compressor metrics, and more. It requires a pre-configured Haier climate component identified by 'haier_id'.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/haier.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: haier\n    haier_id: haier_ac\n    outdoor_temperature:\n      name: Haier outdoor temperature\n    humidity:\n      name: Haier Indoor Humidity\n    compressor_current:\n      name: Haier Compressor Current\n    compressor_frequency:\n      name: Haier Compressor Frequency\n    expansion_valve_open_degree:\n      name: Haier Expansion Valve Open Degree\n    indoor_coil_temperature:\n      name: Haier Indoor Coil Temperature\n    outdoor_coil_temperature:\n      name: Haier Outdoor Coil Temperature\n    outdoor_defrost_temperature:\n      name: Haier Outdoor Defrost Temperature\n    outdoor_in_air_temperature:\n      name: Haier Outdoor In Air Temperature\n    outdoor_out_air_temperature:\n      name: Haier Outdoor Out Air Temperature\n    power:\n      name: Haier Power\n```\n\n----------------------------------------\n\nTITLE: Configuring Color Temperature Light in ESPHome\nDESCRIPTION: Example configuration for a color temperature light with specified white temperature range and output components. Requires defining color temperature and brightness outputs.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/light/color_temperature.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlight:\n  - platform: color_temperature\n    name: \"Livingroom Lights\"\n    color_temperature: output_component1\n    brightness: output_component2\n    cold_white_color_temperature: 6536 K\n    warm_white_color_temperature: 2000 K\n```\n\n----------------------------------------\n\nTITLE: Configuring MS8607 Sensor Platform in ESPHome YAML\nDESCRIPTION: This YAML configuration snippet allows users to define the MS8607 sensor platform within their ESPHome setup. It specifies the necessary sensor types, including temperature, humidity, and pressure, and assigns names to each sensor reading.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ms8607.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: ms8607\n    temperature:\n      name: Temperature\n    humidity:\n      name: Humidity\n    pressure:\n      name: Pressure\n```\n\n----------------------------------------\n\nTITLE: Configuring a Duty Cycle Sensor in ESPHome YAML\nDESCRIPTION: Basic configuration example for setting up a duty cycle sensor in ESPHome. This sensor monitors a GPIO pin (D0) and reports the percentage of time the signal is HIGH or LOW, with a default update interval of 60 seconds.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/duty_cycle.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: duty_cycle\n    pin: D0\n    name: Duty Cycle Sensor\n```\n\n----------------------------------------\n\nTITLE: Transmitting Type D RC-Switch Codes with YAML\nDESCRIPTION: This YAML configuration enables sending Type D RC-Switch codes by specifying group, device, and state. The RC Switch protocol is optional, aiding compatibility with certain devices.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/remote_transmitter.rst#2025-04-21_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - remote_transmitter.transmit_rc_switch_type_d:\n      group: 'c'\n      device: 1\n      state: off\n      protocol: 1\n```\n\n----------------------------------------\n\nTITLE: Configuring SSD1322 OLED Display with SPI in ESPHome\nDESCRIPTION: Example configuration for setting up an SSD1322 OLED display using SPI communication. Shows the basic setup including SPI pins configuration, display platform selection, and a simple Hello World example.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/ssd1322.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nspi:\n  clk_pin: D5\n  mosi_pin: D7\n\ndisplay:\n  - platform: ssd1322_spi\n    model: \"SSD1322 256x64\"\n    reset_pin: D0\n    cs_pin: D8\n    dc_pin: D1\n    lambda: |-\n      it.print(0, 0, id(font), \"Hello World!\");\n```\n\n----------------------------------------\n\nTITLE: Configuring AM2315C Sensor in ESPHome YAML\nDESCRIPTION: Example configuration for setting up an AM2315C temperature and humidity sensor in ESPHome. Demonstrates how to configure both temperature and humidity readings with custom names for living room monitoring.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/am2315c.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: am2315c\n    temperature:\n      name: \"Living Room Temperature\"\n    humidity:\n      name: \"Living Room Humidity\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Base Text Sensor in YAML\nDESCRIPTION: Example configuration for a basic text sensor in ESPHome, including optional variables like name and icon.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/text_sensor/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example sensor configuration\nname: Livingroom Temperature\n\n# Optional variables:\nicon: \"mdi:water-percent\"\n```\n\n----------------------------------------\n\nTITLE: Configuring WiFi Signal Sensor with Percentage Display in ESPHome\nDESCRIPTION: Advanced configuration that creates two sensors - one reporting signal strength in dBm and another using the copy platform to convert the value to a percentage scale from 0-100%. Both sensors have diagnostic entity categories.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/wifi_signal.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry with 2 sensors and filter\nsensor:\n  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB\n    name: \"WiFi Signal dB\"\n    id: wifi_signal_db\n    update_interval: 60s\n    entity_category: \"diagnostic\"\n\n  - platform: copy # Reports the WiFi signal strength in %\n    source_id: wifi_signal_db\n    name: \"WiFi Signal Percent\"\n    filters:\n      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);\n    unit_of_measurement: \"Signal %\"\n    entity_category: \"diagnostic\"\n    device_class: \"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring AM2320 Sensor in ESPHome\nDESCRIPTION: Example configuration for setting up an AM2320 temperature and humidity sensor in ESPHome. Defines sensor names and update interval. Note that NACK warnings in logs are expected due to sensor wake calls.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/am2320.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: am2320\n    temperature:\n      name: \"Living Room Temperature\"\n    humidity:\n      name: \"Living Room Humidity\"\n    update_interval: 60s\n```\n\n----------------------------------------\n\nTITLE: Configuring ADE7953 Sensor over SPI in ESPHome\nDESCRIPTION: Example configuration for setting up an ADE7953 power sensor using SPI communication protocol. Includes sensor configurations for voltage, frequency, current, power factor, apparent power, active power, and reactive power measurements for both A and B channels.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ade7953.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: ade7953_spi\n    cs_pin: GPIOXX\n    irq_pin: GPIOXX\n    voltage:\n      name: \"Voltage\"\n    frequency:\n      name: ADE7953 Frequency\n    current_a:\n      name: \"Current A\"\n    current_b:\n      name: \"Current B\"\n    power_factor_a:\n      name: \"Power Factor A\"\n    power_factor_b:\n      name: \"ADE7953 Power Factor B\"\n    apparent_power_a:\n      name: \"Apparent Power A\"\n    apparent_power_b:\n      name: \"Apparent Power B\"\n    active_power_a:\n      name: \"Power A\"\n    active_power_b:\n      name: \"Power B\"\n    reactive_power_a:\n      name: \"Reactive Power A\"\n    reactive_power_b:\n      name: \"Reactive Power B\"\n```\n\n----------------------------------------\n\nTITLE: ESP32 ESP-IDF Framework Configuration\nDESCRIPTION: Configuration example for using the ESP-IDF framework, recommended for ESP32 variants and single-core ESP32 chips.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/esp32.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nesp32:\n  board: ...\n  framework:\n    type: esp-idf\n```\n\n----------------------------------------\n\nTITLE: Creating Addressable Random Twinkle Effect in YAML\nDESCRIPTION: This YAML snippet defines a random twinkle effect for LEDs, incorporating random colors for each twinkle event. It includes configuration for the effect's name, twinkle probability, and progress interval.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/light/index.rst#2025-04-21_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nlight:\n  - platform: ...\n    # ...\n    effects:\n      - addressable_random_twinkle:\n      - addressable_random_twinkle:\n          name: Random Twinkle Effect With Custom Values\n          twinkle_probability: 5%\n          progress_interval: 32ms\n```\n\n----------------------------------------\n\nTITLE: Bridging Support with Multiple UARTs\nDESCRIPTION: This example demonstrates how to configure multiple UARTs for bridging P1 data to another receiver. It defines two UARTs: one for receiving data from the smart meter and another for transmitting the received data to another device.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/dsmr.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n\"# define multiple uart's\nuart:\n  - id: p1_uart\n    rx_pin:\n      number: 4\n      inverted: true\n    baud_rate: 115200\n    rx_buffer_size: 1700\n  - id: p1_bridge_uart\n    tx_pin:\n      number: 10\n    baud_rate: 115200\n\n# link input uart to dsmr\ndsmr:\n  uart_id: p1_uart\n  max_telegram_length: 1700\n\n# log the telegram and pass telegram to p1_bridge_uart \ntext_sensor:\n  - platform: dsmr\n    telegram:\n      name: \\\"telegram\\\"\n      on_value:\n        then:\n          - lambda: |-\n              ESP_LOGV(\\\"dsrm\\\", \\\"telegram: %s\\\", x.c_str());\n              p1_bridge_uart->write_str(x.c_str());\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic Output Button in ESPHome\nDESCRIPTION: Configuration example showing how to set up a generic output button that controls a GPIO pin. The example defines both the GPIO output and the button configuration with a 500ms duration.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/button/output.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\noutput:\n  - platform: gpio\n    pin: GPIOXX\n    id: output1\n\nbutton:\n  - platform: output\n    name: \"Generic Output\"\n    output: output1\n    duration: 500ms\n```\n\n----------------------------------------\n\nTITLE: Configuring Weather Forecast Panel with MDI Icons in ESPHome LVGL\nDESCRIPTION: This snippet sets up a weather forecast panel layout using LVGL in ESPHome. It configures a binary sensor for status monitoring and loads Material Design Icons font specifically for weather condition symbols that match Home Assistant's weather integration.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/cookbook/lvgl.rst#2025-04-21_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nbinary_sensor:\n  - platform: status\n    name: Status sensor\n\nfont:\n  - file: \"fonts/materialdesignicons-webfont.ttf\"\n    id: icons_100\n    size: 100\n    bpp: 4\n    glyphs: [\n      \"\\U000F0594\", # clear-night\n      \"\\U000F0590\", # cloudy\n      \"\\U000F0F2F\", # exceptional\n      \"\\U000F0591\", # fog\n      \"\\U000F0592\", # hail\n      \"\\U000F0593\", # lightning\n      \"\\U000F067E\", # lightning-rainy\n      \"\\U000F0595\", # partlycloudy\n      \"\\U000F0596\", # pouring\n      \"\\U000F0597\", # rainy\n      \"\\U000F0598\", # snowy\n      \"\\U000F067F\", # snowy-rainy\n      \"\\U000F0599\", # sunny\n      \"\\U000F059D\", # windy\n      \"\\U000F059E\", # windy-variant\n      \"\\U000F14E4\", # sunny-off\n      ]\n\nlvgl:\n  ...\n  pages:\n    - id: weather_forecast\n      widgets:\n        - obj:\n            align: CENTER\n            width: 228\n            height: 250\n            pad_all: 10\n            layout:\n              pad_column: 0\n              type: GRID\n```\n\n----------------------------------------\n\nTITLE: Dimming Light Relatively with YAML in ESPHome\nDESCRIPTION: This YAML configuration dims a light by a relative amount using the `light.dim_relative` action. It shows setting the relative brightness, transition length, and brightness limits (min and max brightness).\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/light/index.rst#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n\"    on_...:\n      then:\n        # Increases the brightness by 5%\n        - light.dim_relative:\n            id: light_1\n            relative_brightness: 5%\"\n```\n\n----------------------------------------\n\nTITLE: Splitting a Single LED Strip into Multiple Partitions in ESPHome\nDESCRIPTION: This YAML configuration demonstrates how to split a single LED strip into two separate partitions using the 'partition' light platform. It also shows how to set up the original light source as internal to avoid conflicts.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/light/partition.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlight:\n  - platform: partition\n    name: \"Partition Light 1\"\n    segments:\n      - id: light1\n        from: 0\n        to: 9\n\n  - platform: partition\n    name: \"Partition Light 2\"\n    segments:\n      - id: light1\n        from: 10\n        to: 19\n\n  - platform: fastled_clockless\n    id: light1\n    internal: true\n    # Other settings\n```\n\n----------------------------------------\n\nTITLE: Setting up on_disarmed Trigger for Alarm Panel in YAML\nDESCRIPTION: YAML configuration for adding an on_disarmed trigger to an Alarm Control Panel, which activates when the alarm is disarmed.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/alarm_control_panel/index.rst#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nalarm_control_panel:\n  # ...\n  on_disarmed:\n    then:\n      - logger.log: \"Alarm Disarmed!\"\n```\n\n----------------------------------------\n\nTITLE: Home Assistant Integration for Servo Control in ESPHome\nDESCRIPTION: Example configuration for controlling a servo from Home Assistant using a number entity. This maps the HomeAssistant number range (-100 to 100) to the servo's control range (-1.0 to 1.0).\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/servo.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nnumber:\n  - platform: template\n    name: Servo Control\n    min_value: -100\n    initial_value: 0\n    max_value: 100\n    step: 1\n    optimistic: true\n    set_action:\n      then:\n        - servo.write:\n            id: my_servo\n            level: !lambda 'return x / 100.0;'\n\nservo:\n  - platform: ...\n    # [...] servo config\n    id: my_servo\n```\n\n----------------------------------------\n\nTITLE: Dual BTF-Lighting 8x32 LED Matrix Configuration\nDESCRIPTION: YAML configuration for combining two BTF-Lighting 8x32 matrices into a 16x32 display with appropriate pixel mapping for the expanded layout.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/addressable_light.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndisplay:\n  - platform: addressable_light\n    id: led_matrix_32x16_display\n    addressable_light_id: led_matrix_32x16\n    width: 32\n    height: 16\n    pixel_mapper: |-\n      int iMatrixOffset = y >= 8 ? 256 : 0;\n      if (x % 2 == 0) {\n        return (x * 8) + (y % 8) + iMatrixOffset;\n      }\n      return (x * 8) + iMatrixOffset + (7 - (y % 8));\n    rotation: 0Â°\n    update_interval: 16ms\n```\n\n----------------------------------------\n\nTITLE: Configuring UDP Component in ESPHome YAML\nDESCRIPTION: Example configuration for the UDP component, including update interval, encryption, rolling code, sensor broadcasting, and provider setup. Also shows how to configure a UDP sensor and binary sensor.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/udp.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nudp:\n  update_interval: 5s\n  encryption: \"REPLACEME\"\n  rolling_code_enable: true\n  binary_sensors:\n    - binary_sensor_id1\n  sensors:\n    - sensor_id1\n    - id: sensor_id2\n      broadcast_id: different_id\n\n  providers:\n    - name: some-device-name\n      encryption: \"REPLACEME with some key\"\n\nsensor:\n  - platform: udp\n    provider: some-device-name\n    id: local_sensor_id\n    remote_id: some_sensor_id\n\nbinary_sensor:\n  - platform: udp\n    provider: unencrypted-device\n    id: other_binary_sensor_id  # also used as remote_id\n```\n\n----------------------------------------\n\nTITLE: Retrieving Fan State in ESPHome Lambda\nDESCRIPTION: This code snippet demonstrates how to check the current state of the fan within a lambda function. Depending on the state, it performs different actions. The function retrieves the fan state via 'id(my_fan).state'.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/fan/index.rst#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n// Within lambda, get the fan state and conditionally do something\nif (id(my_fan).state) {\n  // Fan is ON, do something here\n} else {\n  // Fan is OFF, do something else here\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Specific Pages using Conditions in ESPHome\nDESCRIPTION: This example shows how to use 'display.page.show' to display specific pages based on conditions or states in ESPHome. It illustrates both direct page show and conditional templated page display.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/index.rst#2025-04-21_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - display.page.show: page1\n\n  # Templated\n  - display.page.show: !lambda |-\n      if (id(my_binary_sensor).state) {\n        return id(page1);\n      } else {\n        return id(page2);\n      }\n```\n\n----------------------------------------\n\nTITLE: Minimal Speaker Media Player Configuration in ESPHome\nDESCRIPTION: This is an example of a minimal configuration for the speaker media player in ESPHome.  It shows how to define a media player with the speaker platform and configure the announcement pipeline to output audio to a specified speaker component. It requires defining the `announcement_pipeline` with a `speaker` ID.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/media_player/speaker.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n    # Example minimal configuration entry\n    media_player:\n      - platform: speaker\n        announcement_pipeline:\n          speaker: announcment_spk_id\n```\n\n----------------------------------------\n\nTITLE: Servo Write Action in ESPHome Automation\nDESCRIPTION: Example of controlling a servo motor in automations using the servo.write action. The level can be set from -100% to 100%, where negative values rotate backward, 0% is idle, and positive values rotate forward.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/servo.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n  - servo.write:\n      id: my_servo\n      level: -100.0%\n\n  # Templated\n  - servo.write:\n      id: my_servo\n      # For template values, range is [-1; 1]\n      level: !lambda |-\n        if (id(my_binary_sensor).state) {\n          return 1.0;\n        } else {\n          return -1.0;\n        }\n```\n\n----------------------------------------\n\nTITLE: Configuring Home Assistant Sensor in ESPHome YAML\nDESCRIPTION: This snippet demonstrates how to set up a basic Home Assistant sensor in ESPHome configuration. It imports the state of a temperature sensor from Home Assistant.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/homeassistant.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: homeassistant\n    name: \"Temperature Sensor From Home Assistant\"\n    entity_id: sensor.temperature_sensor\n```\n\n----------------------------------------\n\nTITLE: Anti-Aliased Text with Color in ESPHome Display\nDESCRIPTION: Shows how to use the full version of printf to display anti-aliased text with specified foreground and background colors in an ESPHome display.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/index.rst#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ndisplay:\n  - platform: ...\n    # ...\n    lambda: |-\n        it.printf(10, 100, id(roboto), Color(0x123456), COLOR_OFF, display::TextAlign::BASELINE, \"%f\", id(heap_free).state);\n```\n\n----------------------------------------\n\nTITLE: Configuring ZyAura CO2 & Temperature & Humidity Sensor in ESPHome\nDESCRIPTION: Example YAML configuration for connecting a ZyAura sensor to ESPHome. This configuration establishes connections to the sensor's clock and data pins and sets up reporting for CO2 levels, temperature, and humidity values.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/zyaura.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: zyaura\n    clock_pin: D1\n    data_pin: D2\n    co2:\n      name: \"ZyAura CO2\"\n    temperature:\n      name: \"ZyAura Temperature\"\n    humidity:\n      name: \"ZyAura Humidity\"\n```\n\n----------------------------------------\n\nTITLE: Configuring UART Buffer Size in ESPHome\nDESCRIPTION: This snippet configures the UART buffer size for the ESP32 in the ESPHome framework. Increasing the buffer size from the default of 256 to 512 is recommended when experiencing issues with missing data on the ESP board when connected to a BMS. Proper setup helps ensure all data, including temperature readings, is captured correctly.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/daly_bms.rst#2025-04-21_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\nuart:\n  ...\n  rx_buffer_size: 512\n```\n\n----------------------------------------\n\nTITLE: Converting AS5600 Raw Position to Degrees\nDESCRIPTION: Converts the raw AS5600 position (0-4095) to degrees using a lambda filter with a range scale. Includes delta filtering and configures sensor metadata like unit and icon.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/as5600.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nas5600:\n  id: my_as5600\nsensor:\n  - platform: as5600\n    update_interval: 1s\n    name: Angle\n    unit_of_measurement: 'Â°'\n    accuracy_decimals: 2\n    icon: mdi:rotate-right\n    filters:\n      - delta: 1\n      - lambda: 'return x * as5600::RAW_TO_DEGREES * id(my_as5600).get_range_scale();'\n```\n\n----------------------------------------\n\nTITLE: Advanced LibreTiny Configuration Options in ESPHome\nDESCRIPTION: YAML configuration example showcasing advanced options for the LibreTiny platform in ESPHome, including framework version, logging levels, debugging modules, and custom options.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/libretiny.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nbk72xx:\n  board: cb2s\n  framework:\n    version: dev\n    loglevel: debug\n    debug:\n      - wifi\n      - ota\n    sdk_silent: auto\n    uart_port: 2\n    gpio_recover: false\n    options:\n      LT_LOG_HEAP: 1\n      LT_AUTO_DOWNLOAD_REBOOT: 1\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Baseline Calibration for MH-Z19 - YAML\nDESCRIPTION: This YAML action disables the automatic baseline calibration on the MH-Z19 sensor using the defined ID. Useful for controlled environments where ABC might not be desired.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/mhz19.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - mhz19.abc_disable: my_mhz19_id\n```\n\n----------------------------------------\n\nTITLE: Configuring Template Text in YAML for ESPHome\nDESCRIPTION: This snippet demonstrates how to set up a template text in ESPHome's YAML configuration. It includes basic settings such as name, optimistic mode, and text length constraints.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/text/template.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\ntext:\n  - platform: template\n    name: \"Template text\"\n    optimistic: true\n    min_length: 0\n    max_length: 100\n    mode: text\n```\n\n----------------------------------------\n\nTITLE: Configuring FT63X6 Touchscreen in ESPHome\nDESCRIPTION: Basic YAML configuration for setting up the FT63X6 touchscreen controller. Requires IÂ²C to be configured and specifies the interrupt pin for touch detection.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/touchscreen/ft63x6.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\ntouchscreen:\n  - platform: ft63x6\n    interrupt_pin: GPIOXX\n```\n\n----------------------------------------\n\nTITLE: Configuring ESPHome for Grundfos Alpha3 Pump Monitoring\nDESCRIPTION: Configuration for setting up BLE connection and sensor monitoring for a Grundfos Alpha3 pump. Includes settings for flow rate, head pressure, speed, power, voltage, and current measurements.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/alpha3.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example Configuration\nesp32_ble_tracker:\n\nble_client:\n  - mac_address: xx:xx:xx:xx:xx:xx\n    id: radiator_pump\n\nsensor:\n  - platform: alpha3\n    ble_client_id: radiator_pump\n    flow:\n      name: \"Radiator Pump Flow\"\n    head:\n      name: \"Radiator Pump Head\"\n    speed:\n      name: \"Radiator Pump Speed\"\n    power:\n      name: \"Radiator Pump Power\"\n    voltage:\n      name: \"Radiator Pump Voltage\"\n    current:\n      name: \"Radiator Pump Current\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Text Sensor for Orientation Information\nDESCRIPTION: This YAML snippet sets up a text sensor for reporting orientation data based on the spatial orientation of the MSA301 or MSA311 sensor. It provides orientation data in specified human-readable names.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/msa3xx.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n\"text_sensor:\\n  - platform: msa3xx\\n    orientation_xy: Orientation XY\\n    orientation_z: Orientation Z\"\n```\n\n----------------------------------------\n\nTITLE: Configuring StatsD Component in ESPHome\nDESCRIPTION: Example configuration for setting up a StatsD connection in ESPHome, showing how to send a sensor value as a StatsD metric. The configuration specifies the StatsD server host and defines which sensors to monitor.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/statsd.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nstatsd:\n  host: REPLACEME\n  sensors:\n    id: some_sensor\n    name: test1.sensor\n\nsensor:\n  platform: ...\n  id: some_sensor\n```\n\n----------------------------------------\n\nTITLE: Configuring Seeed MR24HPC1 Select Components in YAML\nDESCRIPTION: YAML configuration for select components to control scene mode, timing, and boundary settings.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/seeed_mr24hpc1.rst#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nselect:\n  - platform: seeed_mr24hpc1\n    scene_mode:\n      name: \"Scene\"\n    unman_time:\n      name: \"Time For Entering No Person State (Standard Function)\"\n    existence_boundary:\n      name: \"Existence Boundary\"\n    motion_boundary:\n      name: \"Motion Boundary\"\n```\n\n----------------------------------------\n\nTITLE: Configuring AC Dimmer Output and Monochromatic Light\nDESCRIPTION: This YAML configuration snippet defines the setup for an AC dimmer output and associates it with a monochromatic light entity. It specifies the required pins for dimming operation and allows control over a physical dimmable light setup.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/output/ac_dimmer.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\noutput:\n  - platform: ac_dimmer\n    id: dimmer1\n    gate_pin: GPIOXX\n    zero_cross_pin:\n      number: GPIOXX\n      mode:\n        input: true\n      inverted: yes\n\nlight:\n  - platform: monochromatic\n    output: dimmer1\n    name: Dimmerized Light\n```\n\n----------------------------------------\n\nTITLE: Basic VEML7700 Sensor Configuration in YAML\nDESCRIPTION: Example configuration for setting up a VEML7700 ambient light sensor with basic settings including I2C address and update interval. Demonstrates both short and long format sensor definitions.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/veml7700.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: veml7700\n    address: 0x10\n    update_interval: 60s\n\n    # short variant of sensor definition:\n    ambient_light: \"Ambient light\"\n    # longer variant of sensor definition:\n    actual_gain:\n      name: \"Actual gain\"\n```\n\n----------------------------------------\n\nTITLE: Configuring OTA Updates in YAML for ESPHome\nDESCRIPTION: Example of how to update the OTA configuration to use the new esphome platform. This change is required after updating to ESPHome 2024.6.0.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/changelog/2024.6.0.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Old\nota:\n\n# New\nota:\n  platform: esphome\n```\n\n----------------------------------------\n\nTITLE: Playing Media in Sequence using Wait in ESPHome\nDESCRIPTION: This code snippet demonstrates how to play a sequence of media files using the `wait_until` automation in ESPHome. It plays one file, waits for it to finish (becoming idle), and then plays the next file.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/media_player/index.rst#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n# In some trigger:\non_...:\n  then:\n    - media_player.play_media: 'http://media-url/one.mp3'\n    - wait_until:\n        media_player.is_idle:\n    - media_player.play_media: 'http://media-url/two.mp3'\n```\n\n----------------------------------------\n\nTITLE: Switch On/Off Triggers in YAML\nDESCRIPTION: Configuration for setting up triggers that activate when a switch is turned on or off. These triggers become active after the switch component has acknowledged the state change.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/switch/index.rst#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nswitch:\n  - platform: gpio  # or any other platform\n    # ...\n    on_turn_on:\n    - logger.log: \"Switch Turned On!\"\n    on_turn_off:\n    - logger.log: \"Switch Turned Off!\"\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS with esp-idf for ESP32\nDESCRIPTION: This YAML configuration outlines how to set up TLS for an MQTT broker using the esp-idf framework on ESP32, including CA certificates and secure connection settings.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/mqtt.rst#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nmqtt:\n  broker: test.mymqtt.local\n  port: 8883\n  discovery_prefix: ${mqtt_prefix}/homeassistant\n  log_topic: ${mqtt_prefix}/logs\n  skip_cert_cn_check: true\n  idf_send_async: false\n  certificate_authority: |\n    -----BEGIN CERTIFICATE-----\n    MIIEAzCCAuugAwIBAgIUBY1hlCGvdj4NhBXkZ/uLUZNILAwwDQYJKoZIhvcNAQEL\n    BQAwgZAxCzAJBgNVBAYTAkdCMRcwFQYDVQQIDA5Vbml0ZWQgS2luZ2RvbTEOMAwG\n    A1UEBwwFRGVyYnkxEjAQBgNVBAoMCU1vc3F1aXR0bzELMAkGA1UECwwCQ0ExFjAU\n    BgNVBAMMDW1vc3F1aXR0by5vcmcxHzAdBgkqhkiG9w0BCQEWEHJvZ2VyQGF0Y2hv\n    by5vcmcwHhcNMjAwNjA5MTEwNjM5WhcNMzAwNjA3MTEwNjM5WjCBkDELMAkGA1UE\n    BhMCR0IxFzAVBgNVBAgMDlVuaXRlZCBLaW5nZG9tMQ4wDAYDVQQHDAVEZXJieTES\n    MBAGA1UECgwJTW9zcXVpdHRvMQswCQYDVQQLDAJDQTEWMBQGA1UEAwwNbW9zcXVp\n    dHRvLm9yZzEfMB0GCSqGSIb3DQEJARYQcm9nZXJAYXRjaG9vLm9yZzCCASIwDQYJ\n    KoZIhvcNAQEBBQADggEPADCCAQoCggEBAME0HKmIzfTOwkKLT3THHe+ObdizamPg\n    UZmD64Tf3zJdNeYGYn4CEXbyP6fy3tWc8S2boW6dzrH8SdFf9uo320GJA9B7U1FW\n    Te3xda/Lm3JFfaHjkWw7jBwcauQZjpGINHapHRlpiCZsquAthOgxW9SgDgYlGzEA\n    s06pkEFiMw+qDfLo/sxFKB6vQlFekMeCymjLCbNwPJyqyhFmPWwio/PDMruBTzPH\n    3cioBnrJWKXc3OjXdLGFJOfj7pP0j/dr2LH72eSvv3PQQFl90CZPFhrCUcRHSSxo\n    E6yjGOdnz7f6PveLIB574kQORwt8ePn0yidrTC1ictikED3nHYhMUOUCAwEAAaNT\n    MFEwHQYDVR0OBBYEFPVV6xBUFPiGKDyo5V3+Hbh4N9YSMB8GA1UdIwQYMBaAFPVV\n    6xBUFPiGKDyo5V3+Hbh4N9YSMA8GA1UdEwEB/wQFMAMBAf8wDQYJKoZIhvcNAQEL\n    BQADggEBAGa9kS21N70ThM6/Hj9D7mbVxKLBjVWe2TPsGfbl3rEDfZ+OKRZ2j6AC\n    6r7jb4TZO3dzF2p6dgbrlU71Y/4K0TdzIjRj3cQ3KSm41JvUQ0hZ/c04iGDg/xWf\n    +pp58nfPAYwuerruPNWmlStWAXf0UTqRtg4hQDWBuUFDJTuWuuBvEXudz74eh/wK\n    sMwfu1HFvjy5Z0iMDU8PUDepjVolOCue9ashlS4EB5IECdSR2TItnAIiIwimx839\n    LdUdRudafMu5T5Xma182OC0/u/xRlEm+tvKGGmfFcN0piqVl8OrSPBgIlb+1IKJE\n    m/XriWr/Cq4h/JfB7NTsezVslgkBaoU=\n    -----END CERTIFICATE-----\n```\n\n----------------------------------------\n\nTITLE: Configuring Template Text Sensor in YAML\nDESCRIPTION: Example configuration for setting up a template text sensor in ESPHome. It demonstrates the basic structure, including the platform, name, lambda function, and update interval.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/text_sensor/template.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntext_sensor:\n  - platform: template\n    name: \"Template Text Sensor\"\n    lambda: |-\n      return {\"Hello World\"};\n    update_interval: 60s\n```\n\n----------------------------------------\n\nTITLE: Configuring ESP32 Camera for TTGO T-Camera V05\nDESCRIPTION: This YAML configuration sets up an ESP32 camera for the TTGO T-Camera V05. It defines the external clock, I2C pins, data pins, control pins, and includes a power down pin specific to this model.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/esp32_camera.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nesp32_camera:\n  external_clock:\n    pin: GPIO32\n    frequency: 20MHz\n  i2c_pins:\n    sda: GPIO13\n    scl: GPIO12\n  data_pins: [GPIO5, GPIO14, GPIO4, GPIO15, GPIO18, GPIO23, GPIO36, GPIO39]\n  vsync_pin: GPIO27\n  href_pin: GPIO25\n  pixel_clock_pin: GPIO19\n  power_down_pin: GPIO26\n\n  # Image settings\n  name: My Camera\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Fan Toggle Action in YAML\nDESCRIPTION: YAML configuration for toggling a fan's ON/OFF state using the fan.toggle action in ESPHome automations.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/fan/index.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - fan.toggle: fan_1\n\n```\n\n----------------------------------------\n\nTITLE: Configuring ESPHome Thermostat with Memory Restore in YAML\nDESCRIPTION: Example configuration for a thermostat that restores its previous state from memory on reboot, with a fallback to a specified default preset.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/climate/thermostat.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# This climate controller, on first boot, will switch to \"My Startup Preset\". Subsequent boots would\n# restore to whatever mode it was in prior to the reboot\nclimate:\n  - platform: thermostat\n    name: \"From Memory Thermostat\"\n    default_preset: My Startup Preset\n    on_boot_restore_from: memory\n    preset:\n      - name: My Startup Preset\n        default_target_temperature_low: 17\n        default_target_temperature_high: 26\n        fan_mode: OFF\n        swing_mode: OFF\n        mode: OFF\n      # Custom preset\n      - name: A custom preset\n        default_target_temperature_low: 21\n        default_target_temperature_high: 23\n        fan_mode: HIGH\n        mode: HEAT_COOL\n```\n\n----------------------------------------\n\nTITLE: Color Correction for RGBW Light in ESPHome YAML\nDESCRIPTION: This snippet shows how to apply color correction to an RGBW light by using the max_power setting on individual output channels. It includes both the light configuration and an example output entry.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/light/rgbww.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nlight:\n  - platform: rgbw\n    name: \"Livingroom Lights\"\n    red: output_component1\n    green: output_component2\n    blue: output_component3\n    white: output_component4\n\n# Example output entry\noutput:\n  - platform: ...\n    id: output_component1\n    max_power: 80%\n```\n\n----------------------------------------\n\nTITLE: Wireless Tag WT32-ETH01 and SMLIGHT SLZB-06 Configuration\nDESCRIPTION: Ethernet configuration for Wireless Tag WT32-ETH01 and SMLIGHT SLZB-06 PoE Zigbee boards using LAN8720 chipset with GPIO16 as power pin.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/ethernet.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nethernet:\n  type: LAN8720\n  mdc_pin: GPIO23\n  mdio_pin: GPIO18\n  clk_mode: GPIO0_IN\n  phy_addr: 1\n  power_pin: GPIO16\n```\n\n----------------------------------------\n\nTITLE: Configuring MQTT Client in ESPHome\nDESCRIPTION: This YAML snippet demonstrates a basic configuration for the MQTT client in ESPHome. It specifies the broker address, username, and password for connecting to the MQTT broker.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/mqtt.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"# Example configuration entry\nmqtt:\n  broker: 10.0.0.2\n  username: livingroom\n  password: !secret mqtt_password\"\n```\n\n----------------------------------------\n\nTITLE: Configuring I2S Audio Speaker in ESPHome\nDESCRIPTION: Example YAML configuration for setting up an I2S audio speaker with an external DAC. Shows basic required parameters including platform selection, DAC type, and pin configuration.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/speaker/i2s_audio.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nspeaker:\n  - platform: i2s_audio\n    dac_type: external\n    i2s_dout_pin: GPIOXX\n```\n\n----------------------------------------\n\nTITLE: Basic AIC3204 Audio DAC Configuration in YAML\nDESCRIPTION: Example configuration for setting up the AIC3204 audio DAC in ESPHome. Requires I2C bus configuration and supports optional address specification.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/audio_dac/aic3204.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\naudio_dac:\n  - platform: aic3204\n```\n\n----------------------------------------\n\nTITLE: Configuring Global IÂ²C and MCP4728 Component\nDESCRIPTION: The snippet demonstrates setting up a global IÂ²C connection and initializing the MCP4728 component with its default address (0x60). This is fundamental for enabling communication with the MCP4728 DAC from an ESPHome device. Ensure the correct SDA and SCL pins are set, and scan is enabled to verify the connection.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/output/mcp4728.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ni2c:\n  sda: 21\n  scl: 22\n  scan: true\n\nmcp4728:\n  - id: dac_output\n```\n\n----------------------------------------\n\nTITLE: Configuring BME68x IAQ Accuracy Text Sensor\nDESCRIPTION: Configuration for reporting sensor accuracy as a text sensor, showing calibration status\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/bme68x_bsec2.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntext_sensor:\n  - platform: bme68x_bsec2\n    iaq_accuracy:\n      name: \"BME68x IAQ Accuracy\"\n```\n\n----------------------------------------\n\nTITLE: Configuring ADS1115 Sensor Platform\nDESCRIPTION: Detailed sensor configuration example showing how to set up an ADS1115 sensor with multiplexer channel, gain settings, and naming.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ads1115.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nads1115:\n  - address: 0x48\nsensor:\n  - platform: ads1115\n    multiplexer: 'A0_GND'\n    gain: 6.144\n    name: \"ADS1115 Channel A0-GND\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Fan Turn On Action in YAML\nDESCRIPTION: YAML configuration for turning on a fan with optional parameters like oscillation, speed, and direction using the fan.turn_on action in ESPHome.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/fan/index.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - fan.turn_on:\n        id: fan_1\n    # Shorthand:\n    - fan.turn_on: fan_1\n\n```\n\n----------------------------------------\n\nTITLE: MQTT Message Trigger Configuration in YAML\nDESCRIPTION: Configuration for handling MQTT messages on specific topics with QoS and payload matching options.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/mqtt.rst#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nmqtt:\n  # ...\n  on_message:\n    topic: my/custom/topic\n    qos: 0\n    then:\n      - switch.turn_on: some_switch\n```\n\n----------------------------------------\n\nTITLE: Setting Number to Minimum Value\nDESCRIPTION: This action sets a number's value to its defined minimum, requiring an id for the targeted number component.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/number/index.rst#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- number.to_min:\n    id: my_number\n\n# Shorthand\n- number.to_min: my_number\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP23S17 Component in ESPHome\nDESCRIPTION: This YAML snippet illustrates the configuration of the MCP23S17 component for ESPHome, detailing how to set the chip select pin and address. It includes example configurations for using MCP23S17 pins as GPIO outputs and inputs.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/mcp23Sxx.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nmcp23s17:\n  - id: 'mcp23s17_hub'\n    cs_pin: GPIOXX\n    deviceaddress: 0\n\n# Individual outputs\nswitch:\n  - platform: gpio\n    name: \"MCP23S17 Pin #0\"\n    pin:\n      mcp23xxx: mcp23s17_hub\n      # Use pin number 0\n      number: 0\n      mode:\n        output: true\n      inverted: false\n\n# Individual inputs\nbinary_sensor:\n  - platform: gpio\n    name: \"MCP23S17 Pin #1\"\n    pin:\n      mcp23xxx: mcp23s17_hub\n      # Use pin number 1\n      number: 1\n      # One of INPUT or INPUT_PULLUP\n      mode:\n        input: true\n        pullup: true\n      inverted: false\n```\n\n----------------------------------------\n\nTITLE: Configuring ES7243E Audio ADC in YAML\nDESCRIPTION: Basic configuration entry for the ES7243E audio ADC platform in ESPHome. This snippet shows how to set up the ES7243E as an audio ADC source.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/audio_adc/es7243e.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\naudio_adc:\n  - platform: es7243e\n```\n\n----------------------------------------\n\nTITLE: Tuya Device Debug Log Example\nDESCRIPTION: Example debug log output showing various Tuya datapoints and their values, demonstrating the datapoint structure and types available on a Tuya device.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/tuya.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n[13:46:01][C][tuya:023]: Tuya:\\n[13:46:01][C][tuya:032]:   Datapoint 1: switch (value: OFF)\\n[13:46:01][C][tuya:032]:   Datapoint 2: switch (value: OFF)\\n[13:46:01][C][tuya:034]:   Datapoint 3: int value (value: 19)\\n[13:46:01][C][tuya:034]:   Datapoint 4: int value (value: 17)\\n[13:46:01][C][tuya:034]:   Datapoint 5: int value (value: 0)\\n[13:46:01][C][tuya:036]:   Datapoint 7: enum (value: 1)\\n[13:46:01][C][tuya:046]:   Product: '{\"p\":\"ynjanlglr4qa6dxf\",\"v\":\"1.0.0\",\"m\":0}'\n```\n\n----------------------------------------\n\nTITLE: Setting Rotary Encoder Value Action in YAML\nDESCRIPTION: This snippet allows for manual setting of the rotary encoderâs internal state using the set_value action in ESPHome. It includes triggers that can set the rotary encoderâs value either directly or through a lambda function.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/rotary_encoder.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: rotary_encoder\n    id: my_rotary_encoder\n    # ...\n\n# in some trigger\non_...:\n  - sensor.rotary_encoder.set_value:\n      id: my_rotary_encoder\n      value: 10\n\n  # Templated\n  - sensor.rotary_encoder.set_value:\n      id: my_rotary_encoder\n      value: !lambda 'return -1;'\n```\n\n----------------------------------------\n\nTITLE: Binary Sensor State Publication Configuration\nDESCRIPTION: YAML configuration showing how to publish binary sensor states with optional state publishing and Nextion display updates.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/nextion.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nbinary_sensor:\n  - platform: nextion\n    id: nextion_bsensor\n    ...\n# in some trigger\non_...:\n  - binary_sensor.nextion.publish:\n      id: nextion_bsensor\n      state: true\n      # These are optional. Defaults to true.\n      publish_state: true\n      send_to_nextion: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Statistical Combination Sensor in ESPHome\nDESCRIPTION: Configuration for a median combination sensor that calculates the median value from three temperature sensors to provide a more reliable temperature reading.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/combination.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: combination\n    type: median\n    name: \"Median Temperature\"\n    sources:\n      - source: temperature_sensor_1\n      - source: temperature_sensor_2\n      - source: temperature_sensor_3\n```\n\n----------------------------------------\n\nTITLE: Configuring LTR390 Sensor with ESPHome in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure the LTR390 UV and ambient light sensor with ESPHome. It specifies different measurement variables such as UV index and light sensor counts, and provides options to adjust gain and resolution for different sensor components. Dependencies include a properly configured IÂ²C Bus, and key parameters involve sensor-specific configurations like gain, resolution, and update intervals.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ltr390.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: ltr390\n    uv_index:\n      name: \"UV Index\"\n    uv:\n      name: \"UV Sensor Counts\"\n    light:\n      name: \"Light\"\n    ambient_light:\n      name: \"Light Sensor Counts\"\n```\n\n----------------------------------------\n\nTITLE: Setting Ambient Pressure with Remote Sensor in Home Assistant\nDESCRIPTION: This YAML snippet shows how to create a service in Home Assistant to dynamically set ambient pressure compensation for the SCD4X sensor from remote data. It highlights integration with Home Assistant actions and lambda functions.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/scd4x.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napi:\n  actions:\n    - action: set_ambient_pressure\n      variables:\n        pressure_mbar: int\n      then:\n        - lambda: \"id(my_scd41)->set_ambient_pressure_compensation(pressure_mbar);\"\n\nsensor:\n  - platform: scd4x\n    id: my_scd41\n    measurement_mode: low_power_periodic\n    temperature_offset: 0\n    co2:\n      name: \"CO2 level\"\n```\n\n----------------------------------------\n\nTITLE: Basic Binary Sensor On Press Event Configuration in YAML\nDESCRIPTION: Configuration example showing how to trigger an automation when a binary sensor is pressed, turning on a relay.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/index.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nbinary_sensor:\n  - platform: gpio\n    # ...\n    on_press:\n      then:\n        - switch.turn_on: relay_1\n```\n\n----------------------------------------\n\nTITLE: Configuring RC522 with SPI Communication\nDESCRIPTION: Example configuration for RC522 NFC/RFID controller using SPI communication protocol with a binary sensor setup for tag detection.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/rc522.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nspi:\n\nrc522_spi:\n  cs_pin: GPIOXX\n\nbinary_sensor:\n  - platform: rc522\n    uid: 74-10-37-94\n    name: \"RC522 RFID Tag\"\n```\n\n----------------------------------------\n\nTITLE: Configuring BedJet Climate Platform\nDESCRIPTION: Configuration for the climate platform component that controls temperature and operation modes of the BedJet device.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/climate/bedjet.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nclimate:\n  - platform: bedjet\n    id: my_bedjet_climate_entity\n    name: \"My BedJet\"\n    bedjet_id: bedjet_1\n```\n\n----------------------------------------\n\nTITLE: Configuring ESP32 Camera for M5Stack Timer Camera X/F\nDESCRIPTION: This YAML snippet configures an ESP32 camera for the M5Stack Timer Camera X/F. It sets up the external clock, I2C pins, data pins, and various control pins for the camera interface.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/esp32_camera.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nesp32_camera:\n  external_clock:\n    pin: GPIO27\n    frequency: 20MHz\n  i2c_pins:\n    sda: GPIO25\n    scl: GPIO23\n  data_pins: [GPIO32, GPIO35, GPIO34, GPIO5, GPIO39, GPIO18, GPIO36, GPIO19]\n  vsync_pin: GPIO22\n  href_pin: GPIO26\n  pixel_clock_pin: GPIO21\n  reset_pin: GPIO15\n\n  # Image settings\n  name: My Camera\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Triggering Actions on LVGL Keyboard Events\nDESCRIPTION: This YAML snippet demonstrates how to trigger actions based on `on_ready` and `on_cancel` events of an LVGL keyboard widget. These events are triggered when the checkmark or keyboard icon keys are pressed, respectively.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/widgets.rst#2025-04-21_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\n    - keyboard:\n        ...\n        on_ready:\n          then:\n            - logger.log: Keyboard is ready\n        on_cancel:\n          then:\n            - logger.log: Keyboard cancelled\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic ST7701S Display Settings in YAML\nDESCRIPTION: Minimal configuration example for setting up an ST7701S display driver with required pin definitions and dimensions.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/st7701s.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndisplay:\n  - platform: st7701s\n    dimensions:\n      width: 480\n      height: 480\n    cs_pin: GPIOXX\n    reset_pin: GPIOXX\n    de_pin: GPIOXX\n    hsync_pin: GPIOXX\n    vsync_pin: GPIOXX\n    pclk_pin: GPIOXX\n    data_pins:\n      red:\n        - XX        #r1\n        - XX        #r2\n        - XX        #r3\n        - XX        #r4\n        - XX        #r5\n      green:\n        - XX        #g0\n        - XX        #g1\n        - XX        #g2\n        - XX        #g3\n        - XX        #g4\n        - XX        #g5\n      blue:\n        - XX        #b1\n        - XX        #b2\n        - XX        #b3\n        - XX        #b4\n        - XX        #b5\n```\n\n----------------------------------------\n\nTITLE: Controlling Light State with YAML in ESPHome\nDESCRIPTION: This YAML code demonstrates how to control a light's state (on/off) using the `light.control` action, specifying the light's ID and the desired state.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/light/index.rst#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n\"    on_...:\n      then:\n        - light.control:\n            id: light_1\n            state: on\"\n```\n\n----------------------------------------\n\nTITLE: Micro Wake Word Configuration (Github URL) in ESPHome YAML\nDESCRIPTION: This snippet shows how to configure microWakeWord with a Github shorthand URL to a model JSON file. It specifies the location of the `okay_nabu` model to be used for wake word detection from a Github repository.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/micro_wake_word.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n\"# Github shorthand URL\nmicro_wake_word:\n  models:\n    - model: github://esphome/micro-wake-word-models/models/v2/okay_nabu.json\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Switch Binary Sensor in ESPHome\nDESCRIPTION: Example configuration showing how to set up a switch binary sensor that monitors the state of a GPIO switch. The configuration creates a binary sensor that observes a relay switch connected to a GPIO pin.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/switch.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nbinary_sensor:\n  - platform: switch\n    name: \"Output state\"\n    source_id: relay1\n\nswitch:\n  - platform: gpio\n    id: relay1\n    pin: GPIOXX\n```\n\n----------------------------------------\n\nTITLE: Configuring BLE Client Text Sensor in ESPHome\nDESCRIPTION: Configuration example showing how to set up a BLE client text sensor that reads a characteristic value from a BLE device. The example includes setting up the BLE tracker, client connection, and text sensor with specific service and characteristic UUIDs.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/text_sensor/ble_client.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nesp32_ble_tracker:\n\nble_client:\n  - mac_address: XX:XX:XX:XX:XX:XX\n    id: itag_black\n\ntext_sensor:\n  - platform: ble_client\n    ble_client_id: itag_black\n    name: \"Sensor Location\"\n    service_uuid: '180d'\n    characteristic_uuid: '2a38'\n```\n\n----------------------------------------\n\nTITLE: Initializing MCP4461 Output Component in ESPHome (YAML)\nDESCRIPTION: This snippet illustrates how to create a configuration entry for the MCP4461 output component in ESPHome. It allows the use of an external digital potentiometer through the IÂ²C protocol, with parameters to specify the component's id and address.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/output/mcp4461.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nmcp4461:\n  - id: mcp4461_output\n```\n\n----------------------------------------\n\nTITLE: Accessing Climate State Properties in ESPHome\nDESCRIPTION: Shows how to access various climate state properties including action, preset, and custom preset from the climate component object.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/climate/index.rst#2025-04-21_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\n// Current action (currentl on idle, cooling, heating, etc.), ClimateAction (enum)\nid(my_climate).action\n// Preset, type: Preset (enum)\nid(my_climate).preset\n// Custom Preset, type: string\nid(my_climate).custom_preset\n```\n\n----------------------------------------\n\nTITLE: Configuring Host Time Source in ESPHome YAML\nDESCRIPTION: This snippet demonstrates how to configure a host time source in an ESPHome YAML file. It sets up a time component using the host platform, assigns an ID, and specifies a timezone.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/time/host.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\ntime:\n  - platform: host\n    id: sntp_time\n    timezone: Europe/Sofia\n```\n\n----------------------------------------\n\nTITLE: Configuring SUN_GTIL2 Text Sensors in ESPHome\nDESCRIPTION: Defines text sensors to display the inverter's operational state and serial number. The state sensor provides status information while the serial_number sensor is set as internal to use within automations but not directly exposed.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sun_gtil2.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\ntext_sensor:\n  - platform: sun_gtil2\n    state:\n      id: gtil_state\n      name: \"State\"\n    serial_number:\n      id: gtil_serial_number\n      internal: True\n```\n\n----------------------------------------\n\nTITLE: Configuring PCA9685 with External Clock in ESPHome\nDESCRIPTION: This YAML code demonstrates configuring a PCA9685 hub with an external clock signal, using the 'external_clock_input' parameter set to true. An ESP32 LEDC platform is configured to generate a PWM signal with a frequency of 40MHz. The 'pca9685_id' field associates the PWM output with the PCA9685 hub.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/output/pca9685.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry with external clock enable and clock source from ESP32\npca9685:\n  - id: pca9685_hub1\n    external_clock_input: true\n\n# Individual outputs\noutput:\n    # generate PWM from ESP32 ledc\n  - platform: ledc\n    pin: GPIOXX\n    id: extclk\n    min_power: 1\n    frequency: 40MHz\n\n  - platform: pca9685\n    pca9685_id: 'pca9685_hub1'\n    channel: 0\n```\n\n----------------------------------------\n\nTITLE: Basic CST816 Touchscreen Configuration in YAML\nDESCRIPTION: Base configuration example for setting up a CST816 touchscreen controller with interrupt and reset pins in ESPHome.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/touchscreen/cst816.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\ntouchscreen:\n  platform: cst816\n  id: my_touchscreen\n  interrupt_pin: GPIOXX\n  reset_pin: GPIOXX\n```\n\n----------------------------------------\n\nTITLE: Modbus Client Configuration Example\nDESCRIPTION: This configuration snippet sets up a Modbus controller acting as a client to communicate with a Modbus device at address 0x1. It also defines a sensor and a switch for reading and controlling specific registers.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/modbus_controller.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nuart:\n  ...\n\nmodbus:\n  flow_control_pin: GPIOXX\n  id: modbus1\n\nmodbus_controller:\n- id: modbus_device\n  address: 0x1   ## address of the Modbus slave device on the bus\n  modbus_id: modbus1\n  setup_priority: -10\n\nsensor:\n- platform: modbus_controller\n  modbus_controller_id: modbus_device\n  name: \"Battery Capacity\"\n  register_type: holding\n  address: 0x9001    ## address of the register inside the Modbus slave device\n  unit_of_measurement: \"AH\"\n  value_type: U_WORD\n\nswitch:\n- platform: modbus_controller\n  modbus_controller_id: modbus_device\n  name: \"Reset to Factory Default\"\n  register_type: coil\n  address: 0x15\n  bitmask: 1\n\ntext_sensor:\n- name: \"rtc_clock\"\n  platform: modbus_controller\n  modbus_controller_id: modbus_device\n  id: rtc_clock\n  internal: true\n  register_type: holding\n  address: 0x9013\n  register_count: 3\n  raw_encode: HEXBYTES\n  response_size: 6\n```\n\n----------------------------------------\n\nTITLE: Configuring OTA on Progress Automation (YAML)\nDESCRIPTION: This snippet shows how to log the OTA update progress during the update process. It uses the variable 'x' to represent the progress percentage which is reported repeatedly.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/ota/index.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nota:\n  - platform: ...\n    on_progress:\n      then:\n        - logger.log:\n            format: \"OTA progress %0.1f%%\"\n            args: [\"x\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring WiFi and Captive Portal in ESPHome\nDESCRIPTION: Example configuration showing how to set up a WiFi access point with a captive portal fallback in ESPHome. The configuration defines the SSID and password for the fallback hotspot and enables the captive portal feature.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/captive_portal.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nwifi:\n  # ...\n  ap:\n    ssid: \"Livingroom Fallback Hotspot\"\n    password: !secret wifi_ap_password\n\ncaptive_portal:\n```\n\n----------------------------------------\n\nTITLE: Configuring Template Binary Sensor with Lambda Function\nDESCRIPTION: Example configuration of a template binary sensor that uses a lambda function to check if a garage door is open based on ultrasonic sensor readings.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/template.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbinary_sensor:\n  - platform: template\n    name: \"Garage Door Open\"\n    lambda: |-\n      if (id(ultrasonic_sensor1).state > 30) {\n        // Garage Door is open.\n        return true;\n      } else {\n        // Garage Door is closed.\n        return false;\n      }\n```\n\n----------------------------------------\n\nTITLE: Setting Gain and Resolution for LTR390 in YAML\nDESCRIPTION: This YAML snippet is an example of setting different gain and resolution values for ALS and UV sensors in the LTR390 sensor configuration. It helps to avoid saturation by customizing settings according to the differences in light intensity and UV index. Important parameters include the specific gain and resolution settings for both sensor types.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ltr390.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: ltr390\n    uv:\n      name: \"UV Sensor Counts\"\n    ambient_light:\n      name: \"Light Sensor Counts\"\n    gain:\n      ambient_light: X9\n      uv: X3\n    resolution:\n      ambient_light: 18\n      uv: 13\n```\n\n----------------------------------------\n\nTITLE: Configuring UART and BL0940 Sensors in ESPHome\nDESCRIPTION: Example configuration for setting up a BL0940 energy monitor with UART communication and multiple sensor readings. Configures UART with 4800 baud rate and defines voltage, current, power, energy and temperature sensors with custom names and update interval.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/bl0940.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nuart:\n  id: uart_bus\n  tx_pin: TX\n  rx_pin: RX\n  baud_rate: 4800\n  stop_bits: 1\n\nsensor:\n  - platform: bl0940\n    uart_id: uart_bus\n    voltage:\n      name: 'BL0940 Voltage'\n    current:\n      name: 'BL0940 Current'\n    power:\n      name: 'BL0940 Power'\n    energy:\n      name: 'BL0940 Energy'\n    internal_temperature:\n      name: 'BL0940 Internal temperature'\n    external_temperature:\n      name: 'BL0940 External temperature'\n    update_interval: 60s\n```\n\n----------------------------------------\n\nTITLE: Sending Custom HTTP Request with ESPHome\nDESCRIPTION: Example of sending a custom HTTP request (PUT in this case) using the http_request.send action. Shows how to set method, headers, and body.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/http_request.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - http_request.send:\n      method: PUT\n      url: https://esphome.io\n      headers:\n        Content-Type: application/json\n      body: \"Some data\"\n```\n\n----------------------------------------\n\nTITLE: Using Variable Substitution with !include in ESPHome YAML\nDESCRIPTION: Shows how to use ESPHome's !include directive with variable substitution to configure GPIO buttons with reusable multi-click handlers. Demonstrates both inline and multi-line syntax.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/faq.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nbinary_sensor:\n  - platform: gpio\n    id: button1\n    pin: GPIOXX\n    on_multi_click: !include { file: on-multi-click.yaml, vars: { id: 1 } } # inline syntax\n  - platform: gpio\n    id: button2\n    pin: GPIOXX\n    on_multi_click: !include\n      # multi-line syntax\n      file: on-multi-click.yaml\n      vars:\n        id: 2\n```\n\n----------------------------------------\n\nTITLE: Configuring CS5460A Sensor in ESPHome\nDESCRIPTION: Example configuration for setting up CS5460A power sensor with current, voltage, and power measurements using SPI communication. Includes sensor filters and specific gain settings.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/cs5460a.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: cs5460a\n    current:\n      name: \"Kitchen current (RMS)\"\n      filters:\n        delta: 0.1\n    power:\n      name: \"Kitchen power\"\n      filters:\n        delta: 5\n    voltage:\n      name: \"Mains voltage (RMS)\"\n      filters:\n        delta: 5\n    samples: 1600\n    current_gain: 0.01\n    voltage_gain: 0.000573\n    pulse_energy: 1 Wh\n    cs_pin: GPIOXX\n```\n\n----------------------------------------\n\nTITLE: Configuring Logger Select Platform in ESPHome YAML\nDESCRIPTION: This YAML configuration snippet defines a Select platform for the logger in ESPHome. It allows users to change the logging level by selecting options. Users need to ensure that the logger component is correctly setup prior to implementing this select functionality.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/select/logger.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nselect:\n  - platform: logger\n    name: \"Logger select\"\n```\n\n----------------------------------------\n\nTITLE: Basic Remote Receiver Configuration with Pull-up Resistor\nDESCRIPTION: Configuration example for remote receiver with TSOP38238 showing how to enable pull-up resistor settings.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/remote_receiver.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nremote_receiver:\n  pin:\n    number: GPIOXX\n    inverted: true\n    mode:\n      input: true\n      pullup: true\n  dump: all\n```\n\n----------------------------------------\n\nTITLE: Configuring MMC5983 Magnetometer with ESPHome YAML\nDESCRIPTION: This code snippet demonstrates how to configure the MMC5983 magnetometer in ESPHome using YAML. It specifies parameters such as field strength for each axis and the update interval for sensor readings. This configuration is essential for making the magnetometer operational within an ESPHome environment.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/mmc5983.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: mmc5983\n    field_strength_x:\n      name: \"Field X\"\n    field_strength_y:\n      id: \"field_y\"\n      internal: true\n    field_strength_z:\n      name: \"Field Z\"\n      filters:\n        - throttle: 120s\n    update_interval: 60s\n```\n\n----------------------------------------\n\nTITLE: MQTT Connection Trigger Configuration in YAML\nDESCRIPTION: Example configuration for MQTT connection and disconnection triggers that execute actions when broker connection status changes.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/mqtt.rst#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nmqtt:\n  # ...\n  on_connect:\n    - switch.turn_on: switch1\n  on_disconnect:\n    - switch.turn_off: switch1\n```\n\n----------------------------------------\n\nTITLE: Defining Custom API Actions with Timer in ESPHome\nDESCRIPTION: Example of creating a user-defined action that controls a relay with a timer, automatically exposed to Home Assistant.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/api.rst#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napi:\n  actions:\n    - action: start_laundry\n      then:\n        - switch.turn_on: relay\n        - delay: 3h\n        - switch.turn_off: relay\n```\n\n----------------------------------------\n\nTITLE: Cover Open Action in C++\nDESCRIPTION: Lambda implementation for opening a cover programmatically in C++.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/cover/index.rst#2025-04-21_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nauto call = id(cover_1).make_call();\ncall.set_command_open();\ncall.perform();\n```\n\n----------------------------------------\n\nTITLE: Basic Template Cover Configuration in YAML\nDESCRIPTION: Example configuration showing how to set up a basic template cover with open, close, and stop actions based on end stop switches.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/cover/template.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncover:\n  - platform: template\n    name: \"Template Cover\"\n    lambda: |-\n      if (id(top_end_stop).state) {\n        return COVER_OPEN;\n      } else {\n        return COVER_CLOSED;\n      }\n    open_action:\n      - switch.turn_on: open_cover_switch\n    close_action:\n      - switch.turn_on: close_cover_switch\n    stop_action:\n      - switch.turn_on: stop_cover_switch\n    optimistic: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Hydreon RG-9 Rain Sensor in YAML\nDESCRIPTION: This YAML snippet provides an example configuration for the Hydreon RG-9 rain sensor. The configuration includes settings for the moisture and temperature sensors, and binary sensors for temperature status, lens status, and emitter saturation. Key variables include the 'model', specifying whether it's RG_9 or RG_15, as well as optional parameters like 'moisture' and 'temperature'.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/hydreon_rgxx.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example RG-9 entry\nsensor:\n  - platform: hydreon_rgxx\n    model: RG_9\n    id: hydreon_1\n    moisture:\n      name: Rain Level\n    temperature:\n      name: Device Temperature\n\nbinary_sensor:\n  - platform: hydreon_rgxx\n    hydreon_rgxx_id: hydreon_1\n    too_cold:\n      name: Temperature Status\n    lens_bad:\n      name: Lens Status\n    em_sat:\n      name: Emitter Saturation\n```\n\n----------------------------------------\n\nTITLE: Configuring BedJet Fan Platform\nDESCRIPTION: Configuration for the fan platform component that controls fan speed and on/off functionality of the BedJet device.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/climate/bedjet.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nfan:\n  - platform: bedjet\n    id: my_bedjet_fan_entity\n    name: \"My BedJet Fan\"\n    bedjet_id: bedjet_1\n```\n\n----------------------------------------\n\nTITLE: Media Player Playback Started Trigger in ESPHome\nDESCRIPTION: This code snippet demonstrates the usage of the `on_play` trigger within an ESPHome media player configuration to execute an action when playback starts.  It includes logging a message as an example action.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/media_player/index.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nmedia_player:\n  - platform: i2s_audio  # or any other platform\n    # ...\n    on_play:\n      - logger.log: \"Playback started!\"\n```\n\n----------------------------------------\n\nTITLE: Initializing ADS1115 Component in YAML\nDESCRIPTION: Basic configuration to set up an ADS1115 ADC component with I2C address specification.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ads1115.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nads1115:\n  - address: 0x48\n```\n\n----------------------------------------\n\nTITLE: Improv on_state Automation Example with Conditional Check\nDESCRIPTION: Example of the on_state automation trigger that provides access to state and error variables for conditional execution based on the current Improv state.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/esp32_improv.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nesp32_improv:\n  on_state:\n    then:\n      - if:\n          condition:\n            lambda: return state == improv::STATE_AUTHORIZED;\n          then:\n            - logger.log: \"Improv state is STATE_AUTHORIZED\"\n```\n\n----------------------------------------\n\nTITLE: Visualizing Data with LVGL Meter Widget in YAML\nDESCRIPTION: This snippet shows how to configure a meter widget with LVGL in YAML, detailing scales, indicators, and tick options to visualize data. It includes settings for arcs, needle images, and line indicators, and demonstrates positioning and rotation elements within the widget.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/widgets.rst#2025-04-21_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\n# Example widget:\n- meter:\n    align: center\n    scales:\n      range_from: -10\n      range_to: 40\n      angle_range: 240\n      rotation: 150\n      ticks:\n        count: 51\n        length: 3\n        major:\n          stride: 5\n          length: 13\n          label_gap: 13\n      indicators:\n        - line:\n            id: temperature_needle\n            width: 2\n            color: 0xFF0000\n            r_mod: -4\n        - tick_style:\n            start_value: -10\n            end_value: 40\n            color_start: 0x0000bd #FF0000\n            color_end: 0xbd0000 #0000FF\n```\n\n----------------------------------------\n\nTITLE: Color Usage in Display Lambda\nDESCRIPTION: Example showing how to define and use custom colors in display lambda functions.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/ili9xxx.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncolor:\n  - id: my_red\n    red: 100%\n    green: 3%\n    blue: 5%\n\n...\n\ndisplay:\n    ...\n    lambda: |-\n      it.rectangle(0,  0, it.get_width(), it.get_height(), id(my_red));\n```\n\n----------------------------------------\n\nTITLE: Writing Random UUIDs as NDEF Messages with PN7160 in YAML\nDESCRIPTION: This YAML snippet shows how to write a random UUID NDEF message to an NFC tag with PN7160, emulating the Home Assistant Companion App. The configuration requires a trigger to initiate the write, such as a button press.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/pn7160.rst#2025-04-21_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\non_...\n  then:\n    - tag.set_write_message:\n        message: !lambda \"return nfc::get_random_ha_tag_ndef();\"\n    - tag.set_write_mode: my_pn7160_id\n```\n\n----------------------------------------\n\nTITLE: Optimizing IÂ²C Bus Speed for ST7567 Display\nDESCRIPTION: Configuration example showing how to increase IÂ²C bus frequency to 400kHz for faster display updates.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/st7567.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Example increased IÂ²C bus speed\ni2c:\n  sda: D1\n  scl: D2\n  frequency: 400kHz\n```\n\n----------------------------------------\n\nTITLE: Example configuration entry for pulse counter\nDESCRIPTION: This YAML snippet demonstrates how to configure a pulse counter sensor by specifying the platform, pin, and sensor name. This is a primary setup for utilizing pulse counting functionality on ESP32.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/pulse_counter.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: pulse_counter\n    pin: GPIOXX\n    name: \"Pulse Counter\"\n```\n\n----------------------------------------\n\nTITLE: Configuring OTA on Begin Automation (YAML)\nDESCRIPTION: This code snippet illustrates how to configure an action to be triggered when an OTA update starts. It logs a message to the logger indicating the start of the OTA process.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/ota/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nota:\n  - platform: ...\n    on_begin:\n      then:\n        - logger.log: \"OTA start\"\n```\n\n----------------------------------------\n\nTITLE: BLE Write Action Example\nDESCRIPTION: Example of BLE write action configuration with switch template\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/ble_client.rst#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nble_client:\n  - mac_address: XX:XX:XX:XX:XX:XX\n    id: my_ble_client\n\nswitch:\n  - platform: template\n    name: \"My Switch\"\n    turn_on_action:\n      - ble_client.ble_write:\n          id: my_ble_client\n          service_uuid: F61E3BE9-2826-A81B-970A-4D4DECFABBAE\n          characteristic_uuid: 6490FAFE-0734-732C-8705-91B653A081FC\n          value: [0x01, 0xab, 0xff]\n      - ble_client.ble_write:\n          id: my_ble_client\n          service_uuid: F61E3BE9-2826-A81B-970A-4D4DECFABBAE\n          characteristic_uuid: 6490FAFE-0734-732C-8705-91B653A081FC\n          value: !lambda |-\n              return {0x13, 0x37};\n```\n\n----------------------------------------\n\nTITLE: Defining an Output for the Setpoint Control in OpenTherm\nDESCRIPTION: This snippet illustrates how to define an output component linked to the OpenTherm protocol for controlling the boiler's temperature setpoint, enabling integration with other components.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/opentherm.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\noutput:\n  - platform: opentherm\n    t_set:\n      id: setpoint\n```\n\n----------------------------------------\n\nTITLE: Turning Light Off with YAML Configuration in ESPHome\nDESCRIPTION: This YAML snippet demonstrates turning off a light using the `light.turn_off` action. It shows both the verbose and shorthand configurations, specifying the light's ID.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/light/index.rst#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n\"    on_...:\n      then:\n        - light.turn_off:\n            id: light_1\n        # Shorthand\n        - light.turn_off: light_1\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Rotary Encoder Sensor in YAML\nDESCRIPTION: This snippet demonstrates the basic configuration of a rotary encoder sensor in ESPHome using YAML. It specifies the platform type and names the sensor, while indicating the specific pins used for rotary encoding. No additional dependencies are required.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/rotary_encoder.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: rotary_encoder\n    name: \"Rotary Encoder\"\n    pin_a: D1\n    pin_b: D2\n```\n\n----------------------------------------\n\nTITLE: WireGuard Status Sensor Configuration\nDESCRIPTION: Configuration for adding a binary sensor to track WireGuard connection status in ESPHome.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/wireguard.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nbinary_sensor:\n  - platform: wireguard\n    status:\n      name: 'WireGuard Status'\n```\n\n----------------------------------------\n\nTITLE: Configuring Analog Threshold Binary Sensor in YAML\nDESCRIPTION: This YAML configuration sets up an analog threshold binary sensor named 'Garage Door Opening' using the 'motor_current_sensor' as the source and a threshold of 0.5.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/analog_threshold.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nbinary_sensor:\n  - platform: analog_threshold\n    name: \"Garage Door Opening\"\n    sensor_id: motor_current_sensor\n    threshold: 0.5\n```\n\n----------------------------------------\n\nTITLE: Configuring PN532 NFC/RFID over SPI in ESPHome\nDESCRIPTION: This snippet demonstrates how to set up a PN532 NFC/RFID controller using SPI communication in ESPHome. It includes configuration for the SPI bus, PN532 component, and a binary sensor for a specific NFC tag.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/pn532.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npn532_spi:\n  cs_pin: D3\n  update_interval: 1s\n\n\nbinary_sensor:\n  - platform: pn532\n    uid: 74-10-37-94\n    name: \"PN532 NFC Tag\"\n```\n\n----------------------------------------\n\nTITLE: Extended ID CAN Bus Configuration\nDESCRIPTION: Example demonstrating the use of extended and standard CAN IDs for both transmission and reception of messages.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/canbus/index.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntime:\n  - platform: sntp\n    on_time:\n      - seconds: /1\n        then:\n          - canbus.send:\n              use_extended_id: true\n              can_id: 0x100\n              data: [0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08]\n          - canbus.send:\n              can_id: 0x100\n              data: [0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08]\n\ncanbus:\n  - platform: ...\n    can_id: 0x1fff\n    use_extended_id: true\n    bit_rate: 125kbps\n    on_frame:\n    - can_id: 0x123\n      use_extended_id: true\n      then:\n        - lambda: |-\n            std::string b(x.begin(), x.end());\n            ESP_LOGD(\"CAN extended ID 0x123\", \"%s\", &b[0]);\n    - can_id: 0x123\n      then:\n        - lambda: |-\n            std::string b(x.begin(), x.end());\n            ESP_LOGD(\"CAN standard ID 0x123\", \"%s\", &b[0]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Base Alarm Control Panel in YAML\nDESCRIPTION: Basic YAML configuration for setting up an Alarm Control Panel component in ESPHome. Includes platform specification and name.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/alarm_control_panel/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nalarm_control_panel:\n  - platform: ...\n    name: Alarm Panel\n```\n\n----------------------------------------\n\nTITLE: Defining Individual SM2335 Outputs in ESPHome YAML\nDESCRIPTION: This YAML snippet configures individual output channels for the SM2335 LED driver within ESPHome, requiring the definition of `id` and `channel`. It depends on a previously defined `sm2335` component. The key parameter `channel` selects an SM2335 chain channel. Inputs include the channel integer and other optional identifiers, while the outputs are the individual channel settings.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/output/sm2335.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Individual outputs\noutput:\n  - platform: sm2335\n    id: output_red\n    channel: 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Samsung Remote Signal Processing in ESPHome\nDESCRIPTION: Example automation configuration for handling Samsung remote control signals, specifically volume button presses. Shows conditional logic for handling both newer and older remote types.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/remote_receiver.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nremote_receiver:\n  ...\n  on_samsung:\n    then:\n    - if:\n        condition:\n          or:\n            - lambda: 'return (x.data == 0xE0E0E01F);'  # VOL+ newer type\n            - lambda: 'return (x.data == 0xE0E0E01F0);' # VOL+ older type\n        then:\n          - ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Nextion Components in ESPHome\nDESCRIPTION: This snippet demonstrates how to configure various Nextion components in ESPHome, including sensors with different update methods.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/nextion.rst#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: nextion\n    nextion_id: nextion1\n    name: \"n0\"\n    component_name: n0\n  - platform: nextion\n    id: current_page\n    name: \"current_page\"\n    variable_name: dp\n    update_interval: 1s\n```\n\n----------------------------------------\n\nTITLE: Setting Write Message Action in YAML\nDESCRIPTION: Utilize this YAML configuration to specify an NDEF message for writing to a tag in 'write mode'. Parameters like the message content and Android-specific options are configurable. Ensure the device is configured for write operations before invoking this action.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/pn7160.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - tag.set_write_message:\n        message: https://www.home-assistant.io/tag/pulse\n        include_android_app_record: false\n```\n\n----------------------------------------\n\nTITLE: Accessing Climate Device Attributes in Lambda Functions\nDESCRIPTION: C++ code showing how to access various climate device attributes in lambda functions, including temperature, humidity, and mode settings.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/climate/index.rst#2025-04-21_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n// Current mode, type: ClimateMode (enum)\nid(my_climate).mode\n// Current temperature, type: float (degrees)\nid(my_climate).current_temperature\n// Current humidity, type: float (percentage)\nid(my_climate).current_humidity\n// Target temperature, type: float (degrees)\nid(my_climate).target_temperature\n// Lower Target temperature, type: float (degrees)\nid(my_climate).target_temperature_low\n// High Target temperature, type: float (degrees)\nid(my_climate).target_temperature_high\n// Target humidity, type: float (percentage)\nid(my_climate).target_humidity\n// Fan mode, type: FanMode (enum)\nid(my_climate).fan_mode\n// Custom Fan mode, type: string\nid(my_climate).custom_fan_mode\n// Swing mode, type: SwingMode (enum)\nid(my_climate).swing_mode\n```\n\n----------------------------------------\n\nTITLE: Configuring BP5758D Output Channel\nDESCRIPTION: This configuration snippet defines an output channel for the BP5758D component. It specifies the channel number and current, which are crucial for the correct operation of the LED driver output. The `id` parameter uniquely identifies this output.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/output/bp5758d.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\noutput:\n  - platform: bp5758d\n    id: output_red\n    channel: 2 # Valid values 1-5 to match OUT1-OUT5\n    current: 10 # In mA, valid values 0-90, default 10\n```\n\n----------------------------------------\n\nTITLE: Styling Slider with Knob in YAML\nDESCRIPTION: This YAML snippet demonstrates how to apply styles to a slider widget, including the main background, indicator part, and knob part. It includes properties for opaqueness, gradient color, and dimensions. Key properties such as 'bg_opa', 'bg_grad', and 'radius' define the slider styling, while 'indicator' and 'knob' sections further refine the visual elements.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/widgets.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Example slider with knob and indicator styling\n- slider:\n    # main (background) styles\n    bg_opa: cover\n    bg_grad: color_bar\n    radius: 0\n    indicator:\n      bg_opa: transp    # Makes the indicator part invisible\n    knob:\n      radius: 1\n      width: 4\n      height: 10%\n      bg_color: 0x000000\n```\n\n----------------------------------------\n\nTITLE: Online Image Component Configuration\nDESCRIPTION: This YAML configuration defines an online image component that downloads a PNG image from a specified URL. It sets the image format to PNG and assigns the ID 'my_online_image'.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/online_image.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nonline_image:\n  - url: \"https://example.com/example.png\"\n    format: png\n    id: my_online_image\n```\n\n----------------------------------------\n\nTITLE: Implementing Daikin ARC Climate Control in ESPHome\nDESCRIPTION: Configuration example for the new Daikin ARC climate component, tested on Daikin ARC472A62.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/changelog/2024.4.0.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nclimate:\n  - platform: daikin_arc\n    name: \"Daikin AC\"\n    transmitter_id: daikin_transmitter\n```\n\n----------------------------------------\n\nTITLE: Configuring RGBWW Light in ESPHome YAML\nDESCRIPTION: This snippet demonstrates the basic configuration for an RGBWW light in ESPHome. It specifies the platform, name, and output components for each color channel, as well as color temperatures for cold and warm white.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/light/rgbww.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nlight:\n  - platform: rgbww\n    name: \"Livingroom Lights\"\n    red: output_component1\n    green: output_component2\n    blue: output_component3\n    cold_white: output_component4\n    warm_white: output_component5\n    cold_white_color_temperature: 6536 K\n    warm_white_color_temperature: 2000 K\n```\n\n----------------------------------------\n\nTITLE: Creating a trigger message\nDESCRIPTION: This code creates a message to be outputted when a trigger is executed.  It concatenates strings containing the level, tag, and message data.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/logger.rst#2025-04-21_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\nreturn \"Triggered on_message with level \" + to_string(level) + \", tag \" + tag + \" and message \" + message;\n```\n\n----------------------------------------\n\nTITLE: PN7150 Home Assistant Tag ID Reading\nDESCRIPTION: Reads NFC tag data and sends either the NDEF tag ID or UID to Home Assistant using the tag_scanned action.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/pn7150.rst#2025-04-21_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\npn7150_i2c:\n  # ...\n  on_tag:\n    then:\n      - homeassistant.tag_scanned: !lambda \"return tag.has_ha_tag_id() ? tag.get_ha_tag_id() : x;\"\n```\n\n----------------------------------------\n\nTITLE: Configuring OTA on Error Automation (YAML)\nDESCRIPTION: This automation triggers when an OTA update fails. It logs the internal error code using the variable 'x', making it easy to track issues during the OTA process.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/ota/index.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nota:\n  - platform: ...\n    on_error:\n      then:\n        - logger.log:\n            format: \"OTA update error %d\"\n            args: [\"x\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Matrix Keypad in ESPHome\nDESCRIPTION: This YAML snippet demonstrates how to configure a matrix keypad in ESPHome. Key aspects include defining the keypad with specific ID, rows, and columns, specifying keys, and setting up an event for key presses. Dependencies include having access to ESPHome's configuration system and GPIO pins for connections. The 'id', 'rows', 'columns' are required configurations, while optional flags like 'keys' and 'has_diodes' customize the setup. The expected output is a key-press event triggering defined actions.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/matrix_keypad.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n    # Example configuration entry\n    matrix_keypad:\n      id: mykeypad\n      rows:\n        - pin: GPIOXX\n        - pin: GPIOXX\n        - pin: GPIOXX\n        - pin: GPIOXX\n      columns:\n        - pin: GPIOXX\n        - pin: GPIOXX\n        - pin: GPIOXX\n        - pin: GPIOXX\n      keys: \"123A456B789C*0#D\"\n      has_diodes: false\n      on_key:\n        - lambda: ESP_LOGI(\"KEY\", \"key %d pressed\", x);\n```\n\n----------------------------------------\n\nTITLE: Importing Entity Attribute as Sensor in ESPHome YAML\nDESCRIPTION: This configuration shows how to import a specific attribute from a Home Assistant entity as a sensor in ESPHome. It retrieves the current temperature attribute from a climate entity.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/homeassistant.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: homeassistant\n    id: current_temperature\n    entity_id: climate.living_room\n    attribute: current_temperature\n```\n\n----------------------------------------\n\nTITLE: Checking LVGL Paused State Condition\nDESCRIPTION: Condition to check if LVGL is in a paused state, with an action to resume\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/index.rst#2025-04-21_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - if:\n        condition: lvgl.is_paused\n        then:\n          - lvgl.resume:\n```\n\n----------------------------------------\n\nTITLE: Converting AS5600 Raw Position to Percentage\nDESCRIPTION: Transforms the raw AS5600 position into a percentage by dividing the raw value by the total position count and multiplying by 100. Includes delta filtering and sensor configuration.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/as5600.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nas5600:\n  id: my_as5600\nsensor:\n  - platform: as5600\n    update_interval: 1s\n    name: Percent\n    unit_of_measurement: '%'\n    accuracy_decimals: 2\n    icon: mdi:rotate-right\n    filters:\n      - delta: 1\n      - lambda: 'return (x / as5600::POSITION_COUNT) * 100;'\n```\n\n----------------------------------------\n\nTITLE: Creating Addressable Scan Effect in YAML\nDESCRIPTION: This YAML snippet defines an addressable scan effect that creates a moving dot on an LED strip. It allows customization of the effect's name, movement interval, and scan width.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/light/index.rst#2025-04-21_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nlight:\n  - platform: ...\n    # ...\n    effects:\n      - addressable_scan:\n      - addressable_scan:\n          name: Scan Effect With Custom Values\n          move_interval: 100ms\n          scan_width: 1\n```\n\n----------------------------------------\n\nTITLE: Template Switch for Controlling MH-Z19 ABC from Home Assistant - YAML\nDESCRIPTION: Defines a template switch within Home Assistant to control the Automatic Baseline Calibration (ABC) of the MH-Z19 sensor. The switch allows enabling and disabling ABC directly from the Home Assistant interface.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/mhz19.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nswitch:\n  - platform: template\n    name: \"MH-Z19 ABC\"\n    optimistic: true\n    on_turn_on:\n      mhz19.abc_enable: my_mhz19_id\n    on_turn_off:\n      mhz19.abc_disable: my_mhz19_id\n```\n\n----------------------------------------\n\nTITLE: Configuring Honeywell HumidIcon Sensor (YAML)\nDESCRIPTION: This YAML snippet demonstrates the configuration required to set up a Honeywell HumidIcon sensor for temperature and humidity measurements in an ESPHome environment. It utilizes the I2C platform and includes parameters for both temperature and humidity sensors.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/honeywell_hih_i2c.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"sensor:\\n  - platform: honeywell_hih_i2c\\n    temperature:\\n      name: \\\"Living Room Temperature\\\"\\n    humidity:\\n      name: \\\"Living Room Humidity\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Hiding a Menu using ESPHome YAML\nDESCRIPTION: This YAML snippet hides the menu when a specific command is selected. A hidden menu does not process drawings or navigation actions. The on_press event triggers this hide action.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display_menu/index.rst#2025-04-21_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nlcd_menu:\n  ...\n  items:\n    - type: command\n      text: 'Hide'\n      on_value:\n        then:\n          - display_menu.hide:\n```\n\n----------------------------------------\n\nTITLE: NTCB3950 Temperature Sensor Configuration with MCP3008\nDESCRIPTION: Demonstrates configuring a temperature sensor using MCP3008 with a 10K thermocoupler and voltage divider. Includes sensor, resistance, and NTC platform configurations for temperature measurement.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/mcp3008.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: mcp3008\n    reference_voltage: 3.19\n    update_interval: 1s\n    mcp3008_id: my_mcp\n    id: freezer_temp_source\n    number: 0\n  - platform: resistance\n    id: freezer_resistance_sensor\n    sensor: freezer_temp_source\n    configuration: DOWNSTREAM\n    resistor: 10kOhm\n  - platform: ntc\n    id: freezer_temp\n    sensor: freezer_resistance_sensor\n    calibration:\n      b_constant: 3950\n      reference_temperature: 25Â°C\n      reference_resistance: 10kOhm\n    name: Freezer Temperature\n```\n\n----------------------------------------\n\nTITLE: Basic Current Based Cover Configuration in YAML\nDESCRIPTION: Basic configuration example for setting up a current-based cover in ESPHome with open/close actions, current thresholds, and safety features.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/cover/current_based.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncover:\n  - platform: current_based\n    name: \"Current Based Cover\"\n\n    open_sensor: open_current_sensor\n    open_moving_current_threshold: 0.5\n    open_obstacle_current_threshold: 0.8\n    open_duration: 12s\n    open_action:\n      - switch.turn_on: open_cover_switch\n\n    close_sensor: close_current_sensor\n    close_moving_current_threshold: 0.5\n    close_obstacle_current_threshold: 0.8\n    close_duration: 10s\n    close_action:\n      - switch.turn_on: close_cover_switch\n\n    stop_action:\n      - switch.turn_off: close_cover_switch\n      - switch.turn_off: open_cover_switch\n\n    obstacle_rollback: 30%\n    start_sensing_delay: 0.8s\n```\n\n----------------------------------------\n\nTITLE: Configuring a Safe Mode Switch in ESPHome\nDESCRIPTION: This snippet demonstrates how to configure a safe_mode switch in ESPHome that allows remote rebooting into safe mode. The configuration requires the safe_mode component to be set up in the device and inherits all standard switch configuration options.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/switch/safe_mode.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nswitch:\n  - platform: safe_mode\n    name: \"Living Room Restart (Safe Mode)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Seeed MR24HPC1 Sensor - YAML\nDESCRIPTION: This YAML configuration snippet sets up various measurements for the seeed_mr24hpc1 sensor, including static distance and body movement parameters. Each measurement parameter is optional.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/seeed_mr24hpc1.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n\"    sensor:\\n      - platform: seeed_mr24hpc1\\n        custom_presence_of_detection:\\n          name: \\\"Static Distance\\\"\\n        movement_signs:\\n          name: \\\"Body Movement Parameter\\\"\\n        custom_motion_distance:\\n          name: \\\"Motion Distance\\\"\\n        custom_spatial_static_value:\\n          name: \\\"Existence Energy\\\"\\n        custom_spatial_motion_value:\\n          name: \\\"Motion Energy\\\"\\n        custom_motion_speed:\\n          name: \\\"Motion Speed\\\"\\n        custom_mode_num:\\n          name: \\\"Current Custom Mode\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Template Output in ESPHome\nDESCRIPTION: This snippet demonstrates how to create a templated output component with ESPHome, allowing for binary and float outputs. It includes setting up a write action, which utilizes lambdas for dynamic output level adjustments. Required dependencies include ESPHome environment setup and specific platform configurations for outputs.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/output/template.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\\noutput:\\n  - platform: template\\n    id: outputsplit\\n    type: float\\n    write_action:\\n      - output.set_level:\\n          id: output1\\n          level: !lambda return state;\\n      - output.set_level:\\n          id: output2\\n          level: !lambda return state;\\n\\n  - platform: ...\\n    id: output1\\n  - platform: ...\\n    id: output2\n```\n\n----------------------------------------\n\nTITLE: Scanning for Mopeka BLE Devices\nDESCRIPTION: This YAML configuration enables the `esp32_ble_tracker` and `mopeka_ble` components to scan for and identify Mopeka BLE devices. After uploading this configuration, the ESP32 will attempt to discover and print the MAC addresses of nearby Mopeka sensors.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/mopeka_pro_check.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nesp32_ble_tracker:\n\nmopeka_ble:\n```\n\n----------------------------------------\n\nTITLE: Configuring PVVX MiThermometer Custom Firmware in YAML\nDESCRIPTION: Configuration for LYWSD03MMC device with PVVX custom firmware using custom advertisement format.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/xiaomi_ble.rst#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: pvvx_mithermometer\n    mac_address: XX:XX:XX:XX:XX:XX\n    temperature:\n      name: \"PVVX Temperature\"\n    humidity:\n      name: \"PVVX Humidity\"\n    battery_level:\n      name: \"PVVX Battery-Level\"\n    battery_voltage:\n      name: \"PVVX Battery-Voltage\"\n    signal_strength:\n      name: \"PVVX Signal\"\n```\n\n----------------------------------------\n\nTITLE: Configuring HMC5883L Sensor in ESPHome YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure the HMC5883L magnetometer in ESPHome. It defines the platform, I2C address, field strength sensors for X, Y, and Z axes, a heading sensor, oversampling, range, and the update interval.  The IÂ²C Bus must be set up in your configuration for this sensor to work.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/hmc5883l.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"# Example configuration entry\nsensor:\n  - platform: hmc5883l\n    address: 0x1E\n    field_strength_x:\n      name: \\\"HMC5883L Field Strength X\\\"\n    field_strength_y:\n      name: \\\"HMC5883L Field Strength Y\\\"\n    field_strength_z:\n      name: \\\"HMC5883L Field Strength Z\\\"\n    heading:\n      name: \\\"HMC5883L Heading\\\"\n    oversampling: 1x\n    range: 130uT\n    update_interval: 60s\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Animation Component in ESPHome\nDESCRIPTION: Basic configuration for the animation component to load and display a GIF file with specific settings including resize options and color type.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/animation.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nanimation:\n  - file: \"animation.gif\"\n    id: my_animation\n    resize: 100x100\n    type: RGB565\n```\n\n----------------------------------------\n\nTITLE: Basic Fingerprint Reader Configuration with Automations\nDESCRIPTION: Example YAML configuration for setting up a Grow Fingerprint Reader in ESPHome with various automation triggers for finger scan events.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/fingerprint_grow.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nfingerprint_grow:\n  sensing_pin: GPIOXX\n  sensor_power_pin:\n      number: GPIOXX\n      inverted: true\n  idle_period_to_sleep: 5s\n\n  on_finger_scan_start:\n    ...\n  on_finger_scan_matched:\n    ...\n  on_finger_scan_unmatched:\n    ...\n  on_finger_scan_misplaced:\n    ...\n  on_finger_scan_invalid:\n    ...\n  on_enrollment_scan:\n    ...\n  on_enrollment_done:\n    ...\n  on_enrollment_failed:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Status LED Light in ESPHome YAML\nDESCRIPTION: This YAML snippet demonstrates how to set up a Status LED light in ESPHome. It defines a light platform that shares a single LED for indicating device status and functioning as a binary light.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/light/status_led.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nlight:\n  - platform: status_led\n    name: \"Switch state\"\n    pin: GPIOXX\n```\n\n----------------------------------------\n\nTITLE: Makerfabs 4.3\" Display Configuration\nDESCRIPTION: Configuration settings for Makerfabs 4.3\" 800x480 display with specific pin assignments and display parameters.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/rpi_dpi_rgb.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndisplay:\n  - platform: rpi_dpi_rgb\n    update_interval: never\n    id: rpi_display\n    color_order: RGB\n    rotation: 90\n    dimensions:\n      width: 800\n      height: 480\n    de_pin:\n      number: 40\n    hsync_pin: 39\n    vsync_pin: 41\n    pclk_pin: 42\n    data_pins:\n      red:\n        - 45        #r1\n        - 48        #r2\n        - 47        #r3\n        - 21        #r4\n        - 14        #r5\n      green:\n        - 5         #g0\n        - 6         #g1\n        - 7         #g2\n        - 15        #g3\n        - 16        #g4\n        - 4         #g5\n      blue:\n        - 8         #b1\n        - 3         #b2\n        - 46        #b3\n        - 9         #b4\n        - 1         #b5\n```\n\n----------------------------------------\n\nTITLE: Implementing LCD Anti-Burn Prevention with Scheduled Pixel Training in ESPHome\nDESCRIPTION: This configuration creates a scheduled anti-burn protection system for LCD screens using ESPHome's time component and LVGL. It displays random pixels (snow) on the screen at scheduled times to exercise all pixels, helping prevent burn-in on LCD screens.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/cookbook/lvgl.rst#2025-04-21_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\ntime:\n  - platform: ...\n    on_time:\n      - hours: 2,3,4,5\n        minutes: 5\n        seconds: 0\n        then:\n          - switch.turn_on: switch_antiburn\n      - hours: 2,3,4,5\n        minutes: 35\n        seconds: 0\n        then:\n          - switch.turn_off: switch_antiburn\n\nswitch:\n  - platform: template\n    name: Antiburn\n    id: switch_antiburn\n    icon: mdi:television-shimmer\n    optimistic: true\n    entity_category: \"config\"\n    turn_on_action:\n      - logger.log: \"Starting Antiburn\"\n      - if:\n          condition: lvgl.is_paused\n          then:\n            - lvgl.resume:\n            - lvgl.widget.redraw:\n      - lvgl.pause:\n          show_snow: true\n    turn_off_action:\n      - logger.log: \"Stopping Antiburn\"\n      - if:\n          condition: lvgl.is_paused\n          then:\n            - lvgl.resume:\n            - lvgl.widget.redraw:\n\ntouchscreen:\n  - platform: ...\n    on_release:\n      then:\n        - if:\n            condition: lvgl.is_paused\n            then:\n              - lvgl.resume:\n              - lvgl.widget.redraw:\n```\n\n----------------------------------------\n\nTITLE: Configuring Single Controller with Latching Valves in ESPHome\nDESCRIPTION: Configuration for a sprinkler controller using latching/pulsed valves. Each valve requires two GPIO switches for on/off control with configurable pulse durations and delays.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sprinkler.rst#2025-04-21_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nesphome:\n  name: esp-sprinkler-controller\n\nesp32:\n  board: featheresp32\n\nwifi:\n  ssid: \"wifi_ssid\"\n  password: \"wifi_password\"\n\nlogger:\n\nsprinkler:\n  - id: lawn_sprinkler_ctrlr\n    main_switch: \"Lawn Sprinklers\"\n    auto_advance_switch: \"Lawn Sprinklers Auto Advance\"\n    queue_enable_switch: \"Lawn Sprinklers Queue Enable\"\n    reverse_switch: \"Lawn Sprinklers Reverse\"\n    pump_pulse_duration: 250ms\n    valve_pulse_duration: 250ms\n    valve_open_delay: 5s\n    valves:\n      - valve_switch: \"Front Lawn\"\n        enable_switch: \"Enable Front Lawn\"\n        pump_off_switch_id: sprinkler_pump_sw_off\n        pump_on_switch_id: sprinkler_pump_sw_on\n        run_duration: 900s\n        valve_off_switch_id: lawn_sprinkler_valve_sw0_off\n        valve_on_switch_id: lawn_sprinkler_valve_sw0_on\n```\n\n----------------------------------------\n\nTITLE: Configuring Touchscreen Binary Sensor with YAML\nDESCRIPTION: YAML configuration example for setting up a touchscreen binary sensor in ESPHome. Demonstrates how to define touch areas with coordinates, specify page controls, and configure raw touch settings.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/touchscreen/index.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nbinary_sensor:\n  - platform: touchscreen\n    name: Top Left Touch Button\n    x_min: 0\n    x_max: 100\n    y_min: 0\n    y_max: 100\n    page_id: home_page_id\n    use_raw: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Receiver for ESPHome YAML\nDESCRIPTION: This YAML snippet configures a remote receiver by specifying the GPIO pin, input mode, and tolerance for signal reception. It is designed for use with Sonoff and Wemos boards, allowing them to receive RF signals.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/remote_receiver.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n\"remote_receiver:\\n  pin:\\n    # sonoff and wemos board\\n    number: GPIO3\\n    mode:\\n      input: true\\n      pullup: false\\n  tolerance: 60%\\n  filter: 4us\\n  idle: 4ms\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Shelly Dimmer 2 in ESPHome\nDESCRIPTION: This YAML configuration sets up a Shelly Dimmer 2 light with power metering functionality. It includes logger, UART, sensor, and light platform settings. The configuration also specifies firmware version and update options.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/light/shelly_dimmer.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlogger:\n    baud_rate: 0\n\nuart:\n    tx_pin: 1\n    rx_pin: 3\n    baud_rate: 115200\nsensor:\n\nlight:\n    - platform: shelly_dimmer\n      name: Shelly Dimmer 2 Light\n      id: thislight\n      power:\n        name: Shelly Dimmer 2 Light Power\n      voltage:\n        name: Shelly Dimmer 2 Light Voltage\n      current:\n        name: Shelly Dimmer 2 Light Current\n      max_brightness: 500\n      firmware:\n        version: \"51.6\"\n        update: true\n```\n\n----------------------------------------\n\nTITLE: Configuring LVGL Tabview Widget in YAML\nDESCRIPTION: Example configuration for an LVGL tabview widget, including tab styling and content. Demonstrates setting tab position, style, and adding multiple tabs with child widgets.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/widgets.rst#2025-04-21_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\n# Example widget:\n- tabview:\n    id: tabview_id\n    position: top\n    tab_style:\n      border_color: 0x00FF00\n      border_width: 6\n      items:\n        text_color: 0x0000FF\n    tabs:\n      - name: Dog\n        id: tabview_tab_1\n        widgets:\n          - image:\n              src: dog_img\n          ...\n      ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Lock Copy in ESPHome\nDESCRIPTION: YAML configuration for creating a copy of an existing lock. Requires source_id to specify the original lock.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/copy.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nlock:\n  - platform: copy\n    source_id: source_lock\n    name: \"Copy of source_lock\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Teleinfo Sensors in YAML\nDESCRIPTION: Example configuration for setting up multiple Teleinfo sensors to monitor various electrical measurements like HCHC (off-peak hours consumption), HCHP (peak hours consumption), and PAPP (apparent power).\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/teleinfo.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: teleinfo\n    tag_name: \"HCHC\"\n    name: \"hchc\"\n    unit_of_measurement: \"Wh\"\n    icon: mdi:flash\n    teleinfo_id: myteleinfo\n  - platform: teleinfo\n    tag_name: \"HCHP\"\n    name: \"hchp\"\n    unit_of_measurement: \"Wh\"\n    icon: mdi:flash\n    teleinfo_id: myteleinfo\n  - platform: teleinfo\n    tag_name: \"PAPP\"\n    name: \"papp\"\n    unit_of_measurement: \"VA\"\n    icon: mdi:flash\n    teleinfo_id: myteleinfo\n```\n\n----------------------------------------\n\nTITLE: Executing Output Turn On Action in YAML\nDESCRIPTION: This snippet deals with the action of turning on a specified output using its ID. It is mainly utilized in automation scripts within ESPHome where a component needs to be activated based on certain events. The action offers flexibility by allowing expression in C++ lambdas as well.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/output/index.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - output.turn_on: light_1\n```\n\nLANGUAGE: cpp\nCODE:\n```\nid(light_1).turn_on();\n```\n\n----------------------------------------\n\nTITLE: Configuring Useful Template Sensors in YAML\nDESCRIPTION: Examples of useful template text sensors for debugging and tracking project information in ESPHome. It includes sensors for ESPHome project version, detailed version with compilation time, and project name.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/text_sensor/template.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ntext_sensor:\n  - platform: template\n    name: \"ESPHome Project Version\"\n    id: esphome_project_version_text_short\n    icon: \"mdi:information-box\"\n    entity_category: \"diagnostic\"\n    update_interval: 600s\n    lambda: |-\n      return { ESPHOME_PROJECT_VERSION };\n\n  - platform: template\n    name: \"ESPHome Project Version Detailed\"\n    id: esphome_project_version_text_detailed\n    icon: \"mdi:information-box\"\n    entity_category: \"diagnostic\"\n    update_interval: 600s\n    lambda: |-\n      return { ESPHOME_PROJECT_VERSION \" \" + App.get_compilation_time() };\n\n  - platform: template\n    name: \"ESPHome Project Name\"\n    id: esphome_project_name\n    icon: \"mdi:information-box\"\n    entity_category: \"diagnostic\"\n    update_interval: 600s\n    lambda: |-\n      return { ESPHOME_PROJECT_NAME };\n```\n\n----------------------------------------\n\nTITLE: Lock Action - YAML\nDESCRIPTION: Executes a locking action on a specified lock using its ID. This snippet demonstrates how to configure an action to lock a lock when an event occurs.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lock/index.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - lock.lock: deadbolt_1\n```\n\n----------------------------------------\n\nTITLE: Basic Haier Climate Configuration in YAML\nDESCRIPTION: Example configuration for setting up a Haier AC device with ESPHome, including protocol selection, temperature ranges, supported modes, and automation triggers\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/climate/haier.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclimate:\n  - platform: haier\n    id: haier_ac\n    protocol: hon\n    name: Haier AC\n    uart_id: ac_port\n    wifi_signal: true\n    display: true\n    visual:\n      min_temperature: 16 Â°C\n      max_temperature: 30 Â°C\n      temperature_step: 1 Â°C\n    supported_modes:\n    - 'OFF'\n    - HEAT_COOL\n    - COOL\n    - HEAT\n    - DRY\n    - FAN_ONLY\n    supported_swing_modes:\n    - 'OFF'\n    - VERTICAL\n    - HORIZONTAL\n    - BOTH\n    supported_presets:\n      - AWAY\n      - BOOST\n      - SLEEP\n    on_alarm_start:\n      then:\n        - logger.log:\n            level: WARN\n            format: \"Alarm activated. Code: %d. Message: \\\"%s\\\"\"\n            args: [ code, message]\n    on_alarm_end:\n      then:\n        - logger.log:\n            level: INFO\n            format: \"Alarm deactivated. Code: %d. Message: \\\"%s\\\"\"\n            args: [ code, message]\n    on_status_message:\n      then:\n        - logger.log:\n            level: INFO\n            format: \"New status message received, size=%d, subcmd=%02X%02X\"\n            args: [ 'data_size', 'data[0]', 'data[1]' ]\n```\n\n----------------------------------------\n\nTITLE: Logger Log Action with Formatted Messaging\nDESCRIPTION: Demonstrates using the logger.log action to print formatted messages with dynamic values from sensors or other sources.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/logger.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\non_...: \n  then:\n    - logger.log: \"Hello World\"\n    - logger.log:\n        format: \"The temperature sensor reports value %.1f and humidity %.1f\"\n        args: [ 'id(temperature_sensor).state', 'id(humidity_sensor).state' ]\n```\n\n----------------------------------------\n\nTITLE: Configuring TCS34725 RGB Sensor in ESPHome\nDESCRIPTION: Example YAML configuration for setting up a TCS34725 RGB color sensor with all available channels and parameters. Includes settings for color channels, illuminance, color temperature, and sensor timing.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/tcs34725.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: tcs34725\n    red_channel:\n      name: \"TCS34725 Red Channel\"\n    green_channel:\n      name: \"TCS34725 Green Channel\"\n    blue_channel:\n      name: \"TCS34725 Blue Channel\"\n    clear_channel:\n      name: \"TCS34725 Clear Channel\"\n    illuminance:\n      name: \"TCS34725 Illuminance\"\n    color_temperature:\n      name: \"TCS34725 Color Temperature\"\n    glass_attenuation_factor: 1.0\n    address: 0x29\n    update_interval: 60s\n```\n\n----------------------------------------\n\nTITLE: Binary Sensor Double Click Configuration in YAML\nDESCRIPTION: Configuration example showing how to trigger an automation on a double-click event with specific timing requirements.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/index.rst#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nbinary_sensor:\n  - platform: gpio\n    # ...\n    on_double_click:\n      min_length: 50ms\n      max_length: 350ms\n      then:\n        - switch.turn_off: relay_1\n```\n\n----------------------------------------\n\nTITLE: Setting Up AS5600 Sensor for Position Measurement\nDESCRIPTION: This configuration snippet defines a sensor instance that publishes position measurements from the AS5600 sensor. It includes settings for raw position and diagnostic parameters.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/as5600.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nas5600:\n  dir_pin: GPIOXX\n\nsensor:\n  - platform: as5600\n    name: Position\n    raw_position:\n        name: Raw Position\n    gain:\n        name: Gain\n    magnitude:\n        name: Magnitude\n    status:\n        name: Status\n```\n\n----------------------------------------\n\nTITLE: Configuring TMP117 Temperature Sensor in ESPHome\nDESCRIPTION: Basic YAML configuration for setting up a TMP117 temperature sensor in ESPHome. Specifies the sensor platform, name, and update interval. The sensor uses IÂ²C communication and supports configurable update intervals which affect the internal averaging.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/tmp117.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: tmp117\n    name: \"Living Room Temperature\"\n    update_interval: 60s\n```\n\n----------------------------------------\n\nTITLE: Configuring Battery Level Selection\nDESCRIPTION: This snippet implements a selection control for setting the battery SOC (State of Charge). It provides predefined options and executes UART commands based on the selected option to set the level accordingly.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/daly_bms.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n\"    select:\\n      - platform: template\\n        name: \\\"Daly Battery Level setup\\\"\\n        optimistic: True\\n        options:\\n          - 100%\\n          - 75%\\n          - 50%\\n          - 25%\\n          - 0%\\n        initial_option: 100%\\n        set_action:\\n          then:\\n            - if:\\n                condition:\\n                  lambda: 'return x == \\\"100%\\\";'\\n                then:\\n                  - uart.write:\\n                      data: [0xA5, 0x40, 0x21, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xE8, 0xF9]\\n                  - logger.log:\\n                      format: \\\"Send cmd to Daly: Set SOC to 100%\\\"\\n                else:\\n                  - if:\\n                      condition:\\n                        lambda: 'return x == \\\"75%\\\";'\\n                      then:\\n                        - uart.write:\\n                            data: [0xA5, 0x40, 0x21, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xEE, 0xFE]\\n                        - logger.log:\\n                            format: \\\"Send cmd to Daly: Set SOC to 75%\\\"\\n                      else:\\n                        - if:\\n                            condition:\\n                              lambda: 'return x == \\\"50%\\\";'\\n                            then:\\n                              - uart.write:\\n                                  data: [0xA5, 0x40, 0x21, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF4, 0x03]\\n                              - logger.log:\\n                                  format: \\\"Send cmd to Daly: Set SOC to 50%\\\"\\n                            else:\\n                              - if:\\n                                  condition:\\n                                    lambda: 'return x == \\\"25%\\\";'\\n                                  then:\\n                                    - uart.write:\\n                                        data: [0xA5, 0x40, 0x21, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFA, 0x08]\\n                                    - logger.log:\\n                                        format: \\\"Send cmd to Daly: Set SOC to 25%\\\"\\n                                  else:\\n                                    - if:\\n                                        condition:\\n                                          lambda: 'return x == \\\"0%\\\";'\\n                                        then:\\\n```\n\n----------------------------------------\n\nTITLE: Configuring VBUS Sensors and Binary Sensors in YAML for ESPHome\nDESCRIPTION: This YAML configuration demonstrates how to set up VBUS sensors and binary sensors for a DeltaSol BS Plus device. It includes examples of decoding temperature, scheme, and heat quantity measurement status using lambda functions.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/vbus.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: vbus\n    model: custom\n    dest: 0x10\n    source: 0x4221\n    command: 0x100\n    sensors:\n      - id: scheme\n        name: Arrangement scheme\n        icon: mdi:pipe-wrench\n        accuracy_decimals: 0\n        entity_category: diagnostic\n        lambda: return x[14];  // Configured arrangement scheme\n      - id: temp2\n        name: Temperature DHW\n        state_class: measurement\n        unit_of_measurement: \"Â°C\"\n        lambda: return ((x[3] << 8) + x[2]) * 0.1f;  // Temperature 2\n\nbinary_sensor:\n  - platform: vbus\n    model: custom\n    dest: 0x10\n    source: 0x4221\n    command: 0x100\n    binary_sensors:\n      - name: Heat Quantity Measurement On\n        id: bin_hqm\n        icon: mdi:counter\n        lambda: return x[15] & 0x20; // Option Heat Quantity Measurement enabled\n```\n\n----------------------------------------\n\nTITLE: Triggering on Emulated Tag Scan via PN7160 in YAML\nDESCRIPTION: This YAML example demonstrates setting up a trigger for when the PN7160 is scanned in emulation mode by another device, such as a smartphone. Note that this trigger does not provide any data parameters for onward actions.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/pn7160.rst#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\npn7160_...:\n  # ...\n  on_emulated_tag_scan:\n    then:\n      - rtttl.play: \"alert:d=32,o=5,b=160:e6,p,e6,p,e6\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Push-to-Talk in YAML\nDESCRIPTION: YAML configuration for implementing a Push-to-Talk feature using a binary sensor. It starts voice assistant on press and stops on release.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/voice_assistant.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nvoice_assistant:\n  microphone: ...\n  speaker: ...\n\nbinary_sensor:\n  - platform: gpio\n    pin: ...\n    on_press:\n      - voice_assistant.start:\n          silence_detection: false\n    on_release:\n      - voice_assistant.stop:\n```\n\n----------------------------------------\n\nTITLE: Configuring GP8403 Component (Hub) in ESPHome\nDESCRIPTION: Configures the GP8403 component as a hub. It requires specifying an ID (optional) and the output voltage range (required), which can be either 5V or 10V. The component leverages the I2C protocol to communicate with the DAC module.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/output/gp8403.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ngp8403:\n  id: my_gp8403\n  voltage: 5V\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Menu Item in ESPHome\nDESCRIPTION: YAML configuration for a custom menu item with value lambda and automations for next and previous actions.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display_menu/index.rst#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nlcd_menu:\n  items:\n    - type: custom\n      immediate_edit: false\n      text: 'My Custom'\n      value_lambda: 'return to_string(some_state);'\n      on_next:\n        then:\n          lambda: 'some_state++;'\n      on_prev:\n        then:\n          lambda: 'some_state--;'\n```\n\n----------------------------------------\n\nTITLE: Initializing ESP32 Touch Hub Component\nDESCRIPTION: Basic configuration for the ESP32 touch hub component that enables capacitive touch detection. Includes setup mode for debugging touch values.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/esp32_touch.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nesp32_touch:\n  setup_mode: false\n```\n\n----------------------------------------\n\nTITLE: Reporting Current Position of Stepper Motor in ESPHome (C++)\nDESCRIPTION: This code shows how to report the current position of a stepper motor. The 'report_position' method is used to set the absolute current position of the stepper motor to a specific value.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/stepper/index.rst#2025-04-21_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\n// Report the (absolute) current position as 250 steps\nid(my_stepper).report_position(250);\n```\n\n----------------------------------------\n\nTITLE: Template Lock Configuration in ESPHome YAML\nDESCRIPTION: This YAML configuration defines a template lock named \"Template Lock\". It uses a lambda expression to determine the lock's state based on a binary sensor's state. It also defines actions to be performed when the lock is locked, unlocked, or opened using switch and button components.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lock/template.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n    # Example configuration entry\n    lock:\n      - platform: template\n        name: \"Template Lock\"\n        lambda: |-\n          if (id(some_binary_sensor).state) {\n            return LOCK_STATE_LOCKED;\n          } else {\n            return LOCK_STATE_UNLOCKED;\n          }\n        lock_action:\n          - switch.turn_on: switch1\n        unlock_action:\n          - switch.turn_off: switch1\n        open_action:\n          - button.press: button1\n```\n\n----------------------------------------\n\nTITLE: Logger Message Automation\nDESCRIPTION: Configures an automation trigger for log messages, allowing custom actions to be taken when specific log events occur.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/logger.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nlogger:\n  on_message:\n    level: ERROR\n    then:\n      - mqtt.publish:\n          topic: some/topic\n          payload: !lambda |-\n```\n\n----------------------------------------\n\nTITLE: Configuring ESP32 BLE Tracker for Inkbird Sensors\nDESCRIPTION: Basic configuration to enable BLE tracking for discovering Inkbird sensors with MAC address identification\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/inkbird_ibsth1_mini.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nesp32_ble_tracker:\n```\n\n----------------------------------------\n\nTITLE: Configuring ESP8266 PWM Output in YAML\nDESCRIPTION: This YAML code snippet demonstrates how to set up a software PWM output on the ESP8266 using ESPHome. The configuration requires specifying the GPIO pin, the PWM frequency, and an identifier for the output component. It also provides an example of integrating the PWM output with a monochromatic light component.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/output/esp8266_pwm.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n    # Example configuration entry\n    output:\n      - platform: esp8266_pwm\n        pin: GPIOXX\n        frequency: 1000 Hz\n        id: pwm_output\n\n    # Example usage in a light\n    light:\n      - platform: monochromatic\n        output: pwm_output\n        name: \"Kitchen Light\"\n```\n\n----------------------------------------\n\nTITLE: Reading Protocol Data using Modbus in ESPHome YAML\nDESCRIPTION: This YAML configuration example demonstrates how to read various parameters from a Modbus controller, such as array rated voltage, current, power and battery ratings. It provides a complete setup for reading device metrics, including unit measurements and applying filters.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/modbus_controller.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nsensors:\n- platform: modbus_controller\n  modbus_controller_id: epever\n  id: array_rated_voltage\n  name: \"array_rated_voltage\"\n  address: 0x3000\n  unit_of_measurement: \"V\"\n  register_type: read\n  value_type: U_WORD\n  accuracy_decimals: 1\n  skip_updates: 60\n  filters:\n    - multiply: 0.01\n\n- platform: modbus_controller\n  modbus_controller_id: epever\n  id: array_rated_current\n  name: \"array_rated_current\"\n  address: 0x3001\n  unit_of_measurement: \"V\"\n  register_type: read\n  value_type: U_WORD\n  accuracy_decimals: 2\n  filters:\n    - multiply: 0.01\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Text Component in YAML\nDESCRIPTION: Example configuration for a basic text component in ESPHome. Demonstrates setting a name and optional icon.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/text/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example text configuration\nname: Livingroom Text\n\n# Optional variables:\nicon: \"mdi:cursor-text\"\n```\n\n----------------------------------------\n\nTITLE: Media Player Idle Condition in ESPHome\nDESCRIPTION: This snippet shows how to use the `media_player.is_idle` condition to check if the media player is idle within a trigger. If the condition is met, the associated actions are executed.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/media_player/index.rst#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n# In some trigger:\non_...:\n  if:\n    condition:\n      media_player.is_idle:\n```\n\n----------------------------------------\n\nTITLE: Image Display Configuration\nDESCRIPTION: Configuration for loading and displaying RGB images on the display.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/ili9xxx.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n  - file: \"image.jpg\"\n    id: my_image\n    resize: 200x200\n    type: RGB24\n\n...\n\ndisplay:\n    ...\n    lambda: |-\n      it.image(0, 0, id(my_image));\n```\n\n----------------------------------------\n\nTITLE: Configuring MAX31856 Thermocouple Sensor in ESPHome\nDESCRIPTION: Example YAML configuration for setting up a MAX31856 thermocouple temperature sensor with a chip select pin and basic parameters. Requires SPI bus configuration with MISO and MOSI pins.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/max31856.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: max31856\n    name: BBQ Temperature\n    icon: mdi:hamburger\n    cs_pin: GPIOXX\n```\n\n----------------------------------------\n\nTITLE: Configuring VBus Component in ESPHome\nDESCRIPTION: Basic configuration for setting up the VBus component with UART connection\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/vbus.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nvbus:\n  uart_id: resol\n```\n\n----------------------------------------\n\nTITLE: Configuring TMP1075 Temperature Sensor in ESPHome\nDESCRIPTION: Example configuration for TMP1075 temperature sensor showing basic setup and alert pin configuration. Includes I2C bus setup, update interval, conversion rate settings, and alert pin behavior configuration.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/tmp1075.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: tmp1075\n    name: \"Temperature TMP1075\"\n    update_interval: 10s\n    i2c_id: i2c_bus\n    conversion_rate: 27.5ms\n    alert:\n      function: comparator\n      polarity: active_high\n      limit_low: 50\n      limit_high: 75\n      fault_count: 1\n```\n\n----------------------------------------\n\nTITLE: Initial Value Configuration for Time Type\nDESCRIPTION: Example of setting initial value for time type using object notation with hour, minute, and second properties.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/datetime/template.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ninitial_value:\n    hour: 12\n    minute: 34\n    second: 56\n```\n\n----------------------------------------\n\nTITLE: UART Runtime Configuration Methods\nDESCRIPTION: Available C++ methods for runtime UART configuration including pin settings, buffer size, stop bits, data bits, parity, and baud rate.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/uart.rst#2025-04-21_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\n// Set TX/RX pins\nid(my_uart).set_tx_pin(InternalGPIOPin *tx_pin);\nid(my_uart).set_rx_pin(InternalGPIOPin *rx_pin);\n// RX buffer size\nid(my_uart).set_rx_buffer_size(size_t rx_buffer_size);\n// Stop bits\nid(my_uart).set_stop_bits(uint8_t stop_bits);\n// Data bits\nid(my_uart).set_data_bits(uint8_t data_bits);\n// Parity\nid(my_uart).set_parity(UARTParityOptions parity);\n// Baud rate\nid(my_uart).set_baud_rate(uint32_t baud_rate);\n```\n\n----------------------------------------\n\nTITLE: Configuring Total Pulses Sensor\nDESCRIPTION: This snippet configures an additional sensor to report the total number of pulses counted by the pulse meter, thereby allowing tracking of cumulative data.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/pulse_meter.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: pulse_meter\n  # ...\n    total:\n      name: \"Total Pulses\"\n```\n\n----------------------------------------\n\nTITLE: Complete DS1307 Integration Example\nDESCRIPTION: Full configuration example showing DS1307 integration with HomeAssistant time source, including boot-time synchronization and network time updates.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/time/ds1307.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nesphome:\n  on_boot:\n    then:\n      # read the RTC time once when the system boots\n      ds1307.read_time:\n\ntime:\n  - platform: ds1307\n    # repeated synchronization is not necessary unless the external RTC\n    # is much more accurate than the internal clock\n    update_interval: never\n  - platform: homeassistant\n    # instead try to synchronize via network repeatedly ...\n    on_time_sync:\n      then:\n        # ... and update the RTC when the synchronization was successful\n        ds1307.write_time:\n```\n\n----------------------------------------\n\nTITLE: MQTT-Controlled Deep Sleep for OTA Updates\nDESCRIPTION: A complete automation example that uses MQTT to control deep sleep behavior, enabling OTA updates by preventing deep sleep when needed and allowing manual triggering of sleep mode.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/deep_sleep.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ndeep_sleep:\n  # ...\n  id: deep_sleep_1\nmqtt:\n  # ...\n  on_message:\n    - topic: livingroom/ota_mode\n      payload: 'ON'\n      then:\n        - deep_sleep.prevent: deep_sleep_1\n    - topic: livingroom/sleep_mode\n      payload: 'ON'\n      then:\n        - deep_sleep.enter: deep_sleep_1\n```\n\n----------------------------------------\n\nTITLE: Configuring Panasonic SN-GCJA5 Particulate Matter Sensor in ESPHome\nDESCRIPTION: Example YAML configuration for setting up a Panasonic SN-GCJA5 particulate matter sensor in ESPHome. The configuration demonstrates how to monitor different particle size concentrations (1.0Âµm, 2.5Âµm, and 10.0Âµm).\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/gcja5.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\n\nsensor:\n  - platform: gcja5\n    pm_1_0:\n      name: \"Particulate Matter <1.0Âµm Concentration\"\n    pm_2_5:\n      name: \"Particulate Matter <2.5Âµm Concentration\"\n    pm_10_0:\n      name: \"Particulate Matter <10.0Âµm Concentration\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic SIM800L UART Connection\nDESCRIPTION: Basic YAML configuration for setting up UART communication with SIM800L module and handling SMS events. Disables UART logging on ESP8266.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sim800l.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nuart:\n  baud_rate: 9600\n  tx_pin: TX\n  rx_pin: RX\n\nsim800l:\n  on_sms_received:\n    - logger.log:\n        format: \"Received '%s' from %s\"\n        args: [ 'message.c_str()', 'sender.c_str()' ]\n\nlogger:\n  baud_rate: 0 # disable uart logger on esp 8266\n```\n\n----------------------------------------\n\nTITLE: Configuring API Client Disconnection Trigger in ESPHome\nDESCRIPTION: Configuration for handling API client disconnection events, with ability to access client_address and client_info variables in triggered actions.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/api.rst#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napi:\n  # ...\n  on_client_disconnected:\n    - logger.log: \"API client disconnected!\"\n```\n\n----------------------------------------\n\nTITLE: Multi-click Handler Configuration in ESPHome YAML\nDESCRIPTION: Defines the reusable multi-click handler configuration that publishes button press events via MQTT. Uses variable substitution to customize the button ID.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/faq.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- timing: !include click-single.yaml\n  then:\n    - mqtt.publish:\n        topic: ${device_name}/button${id}/status\n        payload: single\n- timing: !include click-double.yaml\n  then:\n    - mqtt.publish:\n        topic: ${device_name}/button${id}/status\n        payload: double\n```\n\n----------------------------------------\n\nTITLE: Configuring PIPSolar Outputs in ESPHome\nDESCRIPTION: Example configuration for PIPSolar inverter outputs focusing on battery recharge voltage control. Limited output options are exposed to prevent potential device damage.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/pipsolar.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\noutput:\n  - platform: pipsolar\n    pipsolar_id: inverter0\n    battery_recharge_voltage:\n      id: inverter0_battery_recharge_voltage_out\n```\n\n----------------------------------------\n\nTITLE: Configuring B-Parasite Sensor in ESPHome\nDESCRIPTION: Example configuration for setting up a b-parasite sensor with ESPHome. Shows how to configure BLE tracking and set up individual sensors for air humidity, temperature, soil moisture, battery voltage, and illuminance measurements. Requires ESP32 BLE tracker component.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/b_parasite.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration.\n\n# Required.\nesp32_ble_tracker:\n\nsensor:\n  - platform: b_parasite\n    mac_address: XX:XX:XX:XX:XX:XX\n    humidity:\n      name: 'b-parasite Air Humidity'\n    temperature:\n      name: 'b-parasite Air Temperature'\n    moisture:\n      name: 'b-parasite Soil Moisture'\n    battery_voltage:\n      name: 'b-parasite Battery Voltage'\n    illuminance:\n      name: 'b-parasite Illuminance'\n```\n\n----------------------------------------\n\nTITLE: Using Templatable Values in ESPHome HTTP Requests\nDESCRIPTION: Demonstrates how to use templatable values in URL, headers, and body of an HTTP request using lambdas.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/http_request.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - http_request.post:\n      url: !lambda |-\n        return ((std::string) \"https://esphome.io?state=\" + id(my_sensor).state).c_str();\n      headers:\n        X-Custom-Header: !lambda |-\n          return ((std::string) \"Value-\" + id(my_sensor).state).c_str();\n      body: !lambda |-\n        return id(my_sensor).state;\n```\n\n----------------------------------------\n\nTITLE: Example MQTT Device Discovery Payload\nDESCRIPTION: This JSON snippet represents the payload sent by an ESPHome device during MQTT device discovery. It includes information such as IP address, name, MAC address, board, version, and other device-specific details.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/mqtt.rst#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"{\n  \"ip\": \"192.168.0.122\",\n  \"name\": \"esp32-test\",\n  \"friendly_name\": \"Test Device\",\n  \"port\": 6053,\n  \"version\": \"2024.4.1\",\n  \"mac\": \"84fce6123456\",\n  \"platform\": \"ESP32\",\n  \"board\": \"esp32-c3-devkitm-1\",\n  \"network\": \"wifi\",\n  \"api_encryption\": \"Noise_NNpsk0_25519_ChaChaPoly_SHA256\"\n}\"\n```\n\n----------------------------------------\n\nTITLE: Entering a Menu Item using ESPHome YAML\nDESCRIPTION: This YAML configuration enables a binary sensor to trigger the selected menu item on press. It could enter submenus, start/stop editing, or trigger commands based on item type. Filters are applied to manage button press duration.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display_menu/index.rst#2025-04-21_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nbinary_sensor:\n  - platform: gpio\n    ...\n    filters:\n      - delayed_on: 10ms\n      - delayed_off: 10ms\n    on_press:\n      - display_menu.enter:\n```\n\n----------------------------------------\n\nTITLE: Base Lock Configuration - YAML\nDESCRIPTION: Defines the basic settings for a lock component, including optional parameters like 'id', 'name', and 'icon'. At least one of 'id' or 'name' must be provided to create a lock instance.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lock/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlock:\n  - platform: ...\n    name: \"Lock Name\"\n```\n\n----------------------------------------\n\nTITLE: Using Interval Component for Time-based Animation Progression\nDESCRIPTION: Example of using the interval component to advance animation frames on a specified time schedule, independent from the display's refresh cycle.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/animation.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ninterval:\n  - interval: 5s\n      then:\n        animation.next_frame: my_animation\n```\n\n----------------------------------------\n\nTITLE: Configuring a Bar Widget in LVGL with YAML\nDESCRIPTION: This YAML configuration defines a bar widget with specified position, ID, value, and range. It provides a basic setup for a bar widget within an ESPHome configuration for use with LVGL.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/widgets.rst#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n    # Example widget:\n    - bar:\n        x: 10\n        y: 100\n        id: bar_id\n        value: 75\n        min_value: 1\n        max_value: 100\n\n```\n\n----------------------------------------\n\nTITLE: Incrementing Number Value\nDESCRIPTION: This action increments a number's value by its default step size or a specified step when overridden. It allows cycling of the value when exceeding limits.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/number/index.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- number.increment:\n    id: my_number\n    cycle: false\n\n# Shorthand\n- number.increment: my_number\n```\n\n----------------------------------------\n\nTITLE: Stepper Target Position Action in YAML\nDESCRIPTION: Automation action configuration for setting target position of stepper motor with optional templating support.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/stepper/index.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n  - stepper.set_target:\n      id: my_stepper\n      target: 250\n\n  # Templated\n  - stepper.set_target:\n      id: my_stepper\n      target: !lambda |-\n        if (id(my_binary_sensor).state) {\n          return 1000;\n        } else {\n          return -1000;\n        }\n```\n\n----------------------------------------\n\nTITLE: Polling Off Action\nDESCRIPTION: This YAML snippet demonstrates how to use the ``tag.polling_off`` action to disable card reading/writing. The action is triggered within an automation (``on_...``) and references the ID of the PN7150 component.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/pn7150.rst#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - tag.polling_off: my_pn7150_id\n```\n\n----------------------------------------\n\nTITLE: Home Assistant Integration Configuration\nDESCRIPTION: Configuration for integrating stepper control with Home Assistant using a number entity.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/stepper/index.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nnumber:\n  - platform: template\n    name: Stepper Control\n    min_value: -100\n    max_value: 100\n    step: 1\n    set_action:\n      then:\n        - stepper.set_target:\n            id: my_stepper\n            target: !lambda 'return x;'\n\nstepper:\n  - platform: ...\n    # [...] stepper config\n    id: my_stepper\n```\n\n----------------------------------------\n\nTITLE: Multiple AT581x Components Configuration\nDESCRIPTION: Configuration for multiple AT581x radar components with different I2C addresses.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/at581x.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nat581x:\n  - id: mmWave_1\n    i2c_id: bus_a\n    address: 0x28\n  - id: mmWave_2\n    i2c_id: bus_a\n    address: 0x29\n```\n\n----------------------------------------\n\nTITLE: Calibrating Sensor Values in YAML\nDESCRIPTION: This code demonstrates how to calibrate sensor values in ESPHome using a linear method. It shows how to specify a method for the calibration and provide necessary datapoints to relate measured values to correct values.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/index.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\n- platform: dht\n  # ...\n  temperature:\n    name: \"DHT22 Temperature\"\n    filters:\n      - calibrate_linear:\n         method: least_squares\n         datapoints:\n          # Map 0.0 (from sensor) to 1.0 (true value)\n          - 0.0 -> 1.0\n          - 10.0 -> 12.1\n```\n\n----------------------------------------\n\nTITLE: Configuring LVGL Dropdown Widget in YAML\nDESCRIPTION: Example YAML configuration for an LVGL dropdown widget, including options list, styling, and example actions and triggers for updating and responding to selection changes.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/widgets.rst#2025-04-21_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n# Example widget:\n- dropdown:\n    id: dropdown_id\n    width: 90\n    align: CENTER\n    options:\n      - Violin\n      - Piano\n      - Bassoon\n      - Chello\n      - Drums\n    selected_index: 2\n    dropdown_list:\n      selected:\n        checked:\n          text_color: 0xFF0000\n\n# Example action:\non_...:\n  then:\n    - lvgl.dropdown.update:\n        id: dropdown_id\n        selected_index: 4\n\n# Example trigger:\n- dropdown:\n    ...\n    on_value:\n      - logger.log:\n          format: \"Selected index is: %d\"\n          args: [ x ]\n    on_cancel:\n      - logger.log:\n          format: \"Dropdown closed. Selected index is: %d\"\n          args: [ x ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Transmitter for ESPHome YAML\nDESCRIPTION: This YAML snippet sets up a remote transmitter by defining the output pin and the carrier duty cycle. It is utilized for sending RF signals through the specified GPIO pin.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/remote_receiver.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n\"remote_transmitter:\\n  pin: 1\\n  carrier_duty_percent: 100%\"\n```\n\n----------------------------------------\n\nTITLE: Configuring SSD1327 OLED Display with I2C\nDESCRIPTION: Example configuration for connecting SSD1327 OLED display via I2C bus with basic display output.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/ssd1327.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ni2c:\n  sda: D1\n  scl: D2\n\ndisplay:\n  - platform: ssd1327_i2c\n    model: \"SSD1327 128x128\"\n    reset_pin: D0\n    address: 0x3D\n    lambda: |-\n      it.print(0, 0, id(font), \"Hello World!\");\n```\n\n----------------------------------------\n\nTITLE: Modbus Select Write Lambda Example\nDESCRIPTION: This is an example of a `write_lambda` function to customize the values written to Modbus registers. It shows how to re-use the default option value, return a custom option value, write directly to the payload, or ignore the update entirely.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/select/modbus_controller.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n    # example\n    write_lambda: |-\n      ESP_LOGD(\"Reg1000\", \"Set option to %s (%lld)\", x.c_str(), value);\n\n      // re-use default option value from optionsmap\n      if (value == 0) {\n        return value;\n      }\n\n      // return own option value\n      if (x == \"One\") {\n        return 2;\n      }\n\n      // write payload\n      if (x == \"Two\") {\n        payload.push_back(0x0001);\n        return 0; // any value will do\n      }\n\n      // ignore update\n      return {};\n```\n\n----------------------------------------\n\nTITLE: Configuring Text Sensor Automation in YAML\nDESCRIPTION: Example of setting up an automation trigger for when a new value is published by a text sensor.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/text_sensor/index.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntext_sensor:\n  - platform: version\n    # ...\n    on_value:\n      then:\n        - lambda: |-\n            ESP_LOGD(\"main\", \"The current version is %s\", x.c_str());\n```\n\n----------------------------------------\n\nTITLE: Configuring Time Component with LVGL Integration in ESPHome\nDESCRIPTION: This snippet configures a time component in ESPHome that synchronizes with Home Assistant and updates LVGL indicators for an analog clock display, including hour and minute hands and formatted date labels.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/cookbook/lvgl.rst#2025-04-21_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\ntime:\n  - platform: homeassistant\n    id: time_comp\n    on_time_sync:\n      - script.execute: time_update\n    on_time:\n      - minutes: '*'\n        seconds: 0\n        then:\n          - script.execute: time_update\n\nscript:\n  - id: time_update\n    then:\n      - lvgl.indicator.update:\n          id: minute_hand\n          value: !lambda |-\n            return id(time_comp).now().minute;\n      - lvgl.indicator.update:\n          id: hour_hand\n          value: !lambda |-\n            auto now = id(time_comp).now();\n            return std::fmod(now.hour, 12) * 60 + now.minute;\n      - lvgl.label.update:\n          id: date_label\n          text: !lambda |-\n            static const char * const mon_names[] = {\"JAN\", \"FEB\", \"MAR\", \"APR\", \"MAY\", \"JUN\", \"JUL\", \"AUG\", \"SEP\", \"OCT\", \"NOV\", \"DEC\"};\n            static char date_buf[8];\n            auto now = id(time_comp).now();\n            snprintf(date_buf, sizeof(date_buf), \"%s %2d\", mon_names[now.month-1], now.day_of_month);\n            return date_buf;\n      - lvgl.label.update:\n          id: day_label\n          text: !lambda |-\n            static const char * const day_names[] = {\"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\"};\n            return day_names[id(time_comp).now().day_of_week - 1];}\n```\n\n----------------------------------------\n\nTITLE: RF Transmission Queue Management in ESPHome\nDESCRIPTION: Implementation of a queuing system for RF transmissions to prevent command overlap. Includes delay configuration and queue management for multiple cover controls.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/cookbook/lambda_magic.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nscript:\n- id: rf_transmitter_queue\n  mode: single\n  then:\n    while:\n      condition:\n        lambda: 'return !id(rf_code_queue).empty();'\n      then:\n         - rf_bridge.send_raw:\n             raw: !lambda |-\n               std::string rf_code = id(rf_code_queue).front();\n               id(rf_code_queue).erase(id(rf_code_queue).begin());\n               return rf_code;\n         - delay: !lambda 'return id(queue_delay).state;'\n```\n\n----------------------------------------\n\nTITLE: Configuring Binary Sensors for PipSolar Inverter\nDESCRIPTION: Example configuration for adding binary sensors to track inverter status like configuration, charging, and various operational conditions\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/pipsolar.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nbinary_sensor:\n  - platform: pipsolar\n    pipsolar_id: inverter0\n    add_sbu_priority_version:\n      id: inverter0_add_sbu_priority_version\n      name: inverter0_add_sbu_priority_version\n    configuration_status:\n      id: inverter0_configuration_status\n      name: inverter0_configuration_status\n```\n\n----------------------------------------\n\nTITLE: Configuring LVGL Sensor in YAML\nDESCRIPTION: This YAML snippet configures an LVGL sensor in ESPHome, specifically using a 'slider' widget. It requires a reference to a supported LVGL widget ID and optionally includes a name for the sensor. Dependencies include ESPHome and LVGL integration. The snippet is meant to be used within an ESPHome configuration file and is limited to one widget per sensor.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/lvgl.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: lvgl\n    widget: slider_id\n    name: LVGL Slider\n```\n\n----------------------------------------\n\nTITLE: Configuring SEN0321 Ozone Sensor with ESPHome in YAML\nDESCRIPTION: This YAML configuration snippet for ESPHome demonstrates how to set up the SEN0321 DFRobot Ozone Sensor. The key parameters include the sensor platform, the sensor's name, I2C address, and the update interval, which is the frequency at which the sensor data is refreshed. The sensor requires I2C configuration to operate and defaults the address to 0x73 with a 60-second update interval.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/sen0321.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: sen0321\n    name: \"Ozone Sensor\"\n    address: 0x73\n    update_interval: 60s\n```\n\n----------------------------------------\n\nTITLE: Advanced PID Deadband Configuration with Multipliers\nDESCRIPTION: Detailed deadband configuration including multipliers for proportional, integral, and derivative terms, along with output averaging for enhanced stability within the deadband.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/climate/pid.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndefault_target_temperature: 21Â°C\n...\ndeadband_parameters:\n  threshold_high: 0.5Â°C\n  threshold_low: -1.0Â°C\n  kp_multiplier: 0.0   # proportional gain turned off inside deadband\n  ki_multiplier: 0.05  # integral accumulates at only 5% of normal ki\n  kd_multiplier: 0.0   # derviative is turned off inside deadband\n  deadband_output_averaging_samples: 15   # average the output over 15 samples within the deadband\n```\n\n----------------------------------------\n\nTITLE: Executing LVGL Tileview Select Action in YAML\nDESCRIPTION: Example of using the lvgl.tileview.select action to programmatically change the selected tile in a tileview widget. Demonstrates selecting a tile by ID and enabling animation.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/widgets.rst#2025-04-21_snippet_41\n\nLANGUAGE: yaml\nCODE:\n```\n# Example action:\non_...:\n  then:\n    - lvgl.tileview.select:\n        id: tiv_id\n        tile_id: cat_tile\n        animated: true\n```\n\n----------------------------------------\n\nTITLE: Configuring ESP32 Camera for ESP32S3_EYE on Freenove ESP32-S3-DevKitC-1\nDESCRIPTION: This YAML snippet sets up an ESP32 camera for the ESP32S3_EYE on the Freenove ESP32-S3-DevKitC-1 board. It includes external component configuration and defines the camera interface pins.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/esp32_camera.rst#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nexternal_components:\n  - source:\n      type: git\n      url: https://github.com/MichaKersloot/esphome_custom_components\n    components: [ esp32_camera ]\n\nesp32_camera:\n  external_clock:\n    pin: GPIO15\n    frequency: 20MHz\n  i2c_pins:\n    sda: GPIO4\n    scl: GPIO5\n  data_pins: [GPIO11, GPIO9, GPIO8, GPIO10, GPIO12, GPIO18, GPIO17, GPIO16]\n  vsync_pin: GPIO6\n  href_pin: GPIO7\n  pixel_clock_pin: GPIO13\n\n  # Image settings\n  name: My Camera\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Using globals.set Action in ESPHome\nDESCRIPTION: Example of modifying global variables using the globals.set action rather than lambda code. This provides a simpler way to set global variable values in automations.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/globals.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - globals.set:\n      id: my_global_var\n      value: '10'\n```\n\n----------------------------------------\n\nTITLE: Publishing Template Lock State in ESPHome YAML\nDESCRIPTION: This YAML configuration demonstrates how to publish a state to a template lock using the `lock.template.publish` action.  It includes examples of publishing a locked state directly and using a lambda to determine the state.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lock/template.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n    # Example configuration entry\n    lock:\n      - platform: template\n        name: \"Template Lock\"\n        id: template_lock1\n\n    # in some trigger\n    on_...:\n      - lock.template.publish:\n          id: template_lock1\n          state: LOCK_STATE_LOCKED\n\n      # Templated\n      - lock.template.publish:\n          id: template_lock1\n          state: !lambda 'return LOCK_STATE_LOCKED;'\n```\n\n----------------------------------------\n\nTITLE: Configuring Interval Component in ESPHome YAML\nDESCRIPTION: This snippet demonstrates how to configure the Interval Component in ESPHome. It sets up an interval of 1 minute to toggle a switch named 'relay_1'. The configuration includes the required 'interval' and 'then' parameters.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/interval.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\ninterval:\n  - interval: 1min\n    then:\n      - switch.toggle: relay_1\n```\n\n----------------------------------------\n\nTITLE: Controlling Servos with Lambda Functions in ESPHome\nDESCRIPTION: Example of controlling a servo motor directly in C++ code using a lambda function. This allows for programmatic control of the servo in custom logic implementations.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/servo.rst#2025-04-21_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nid(my_servo).write(1.0);\n```\n\n----------------------------------------\n\nTITLE: Configuring Climate Controller with Basic Presets in ESPHome\nDESCRIPTION: Example configuration for a thermostat with standard and custom presets, demonstrating temperature range settings, fan modes, and swing modes.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/climate/thermostat.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nclimate:\n  - platform: thermostat\n    name: \"Thermostat with Presets\"\n    preset:\n      # Standard Preset\n      - name: sleep\n        default_target_temperature_low: 17\n        default_target_temperature_high: 26\n        fan_mode: LOW\n        swing_mode: OFF\n      # Custom preset\n      - name: A custom preset\n        default_target_temperature_low: 21\n        default_target_temperature_high: 23\n        fan_mode: HIGH\n        mode: HEAT_COOL\n```\n\n----------------------------------------\n\nTITLE: Defining Light Effects with YAML in ESPHome\nDESCRIPTION: This YAML code shows how to define light effects for an ESPHome light, including using default parameters and customizing the effect's name, transition length, and update interval.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/light/index.rst#2025-04-21_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\n\"light:\n  - platform: ...\n    # ...\n    effects:\n      # Use default parameters:\n      - random:\n      # Customize parameters\n      - random:\n          name: \\\"My Slow Random Effect\\\"\n          transition_length: 30s\n          update_interval: 30s\n      - random:\n          name: \\\"My Fast Random Effect\\\"\n          transition_length: 4s\n          update_interval: 5s\"\n```\n\n----------------------------------------\n\nTITLE: Template Valve State Publishing in C++\nDESCRIPTION: Example demonstrating how to publish valve states using C++ lambda code in ESPHome.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/valve/template.rst#2025-04-21_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nid(my_template_valve).position = VALVE_OPEN;\nid(my_template_valve).publish_state();\n```\n\n----------------------------------------\n\nTITLE: Configuring SPI and MAX31865 Sensor\nDESCRIPTION: This YAML configuration snippet sets up SPI communication for the MAX31865 RTD temperature sensor. It specifies the necessary pins for MISO, MOSI, and CLK and defines a sensor instance with required parameters like chip select pin and reference resistance.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/max31865.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nspi:\n  miso_pin: D0\n  mosi_pin: D1\n  clk_pin: D2\n\nsensor:\n  - platform: max31865\n    name: \"Living Room Temperature\"\n    cs_pin: D3\n    reference_resistance: 430 Î©\n    rtd_nominal_resistance: 100 Î©\n```\n\n----------------------------------------\n\nTITLE: Basic Xiaomi Miscale Sensor Configuration in YAML\nDESCRIPTION: Basic configuration example for setting up a Xiaomi Miscale sensor with weight and impedance measurements. Requires MAC address and supports optional sensor configurations.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/xiaomi_miscale.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: xiaomi_miscale\n    mac_address: XX:XX:XX:XX:XX:XX\n    weight:\n      name: \"Xiaomi Mi Scale Weight\"\n    impedance:\n      name: \"Xiaomi Mi Scale Impedance\"\n```\n\n----------------------------------------\n\nTITLE: Stopping Dosing Action in YAML\nDESCRIPTION: This YAML snippet illustrates how to use the `ezo_pmp.stop_dosing` action to immediately stop an ongoing dosing command. It requires the `id` of the pump.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/ezo_pmp.rst#2025-04-21_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n  - ezo_pmp.stop_dosing:\n      id: ezo_pmp\n```\n\n----------------------------------------\n\nTITLE: Configuring TX20/TX23 Wind Sensor in ESPHome\nDESCRIPTION: Basic YAML configuration for setting up a TX20/TX23 wind sensor with speed and direction measurements. Requires connecting the sensor to a GPIO pin and defines two sensors for wind speed and direction in degrees.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/tx20.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: tx20\n    wind_speed:\n      name: Wind speed\n    wind_direction_degrees:\n      name: Wind direction degrees\n    pin:\n      number: GPIOXX\n```\n\n----------------------------------------\n\nTITLE: Configuring LVGL Canvas Widget in YAML\nDESCRIPTION: Example YAML configuration for an LVGL canvas widget, including size settings and drawing actions like filling with color, drawing shapes and text.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/widgets.rst#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n# Example widget:\n- canvas:\n    id: my_canvas\n    width: 240\n    height: 240\n    transparent: false\n\n# Example drawing actions, executed at startup:\n    on_boot:\n      then:\n        # Fill canvas with white\n        - lvgl.canvas.fill:\n            id: my_canvas\n            color: white\n        # Draw a blue rectangle\n        - lvgl.canvas.draw_rectangle:\n            id: my_canvas\n            x: 10\n            y: 10\n            width: 100\n            height: 50\n            bg_color: blue\n        # Draw some red text\n        - lvgl.canvas.draw_text:\n            id: my_canvas\n            x: 20\n            y: 20\n            text: \"Hello World\"\n            max_width: 100\n            color: red\n```\n\n----------------------------------------\n\nTITLE: Basic PID Autotune Action in YAML\nDESCRIPTION: Simple implementation of the climate.pid.autotune action that starts the autotuning process for a specified PID climate controller.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/climate/pid.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  # Basic\n  - climate.pid.autotune: pid_climate\n```\n\n----------------------------------------\n\nTITLE: Modbus Sensor Configuration\nDESCRIPTION: Defines multiple sensors for reading array rated voltage, current, and power using Modbus controller\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/modbus_controller.rst#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: modbus_controller\n    modbus_controller_id: epever\n    id: array_rated_voltage\n    name: \"array_rated_voltage\"\n    address: 0x3000\n    unit_of_measurement: \"V\"\n    register_type: read\n    value_type: U_WORD\n    accuracy_decimals: 1\n    filters:\n      - multiply: 0.01\n```\n\n----------------------------------------\n\nTITLE: Publishing State to Template Binary Sensor\nDESCRIPTION: Example showing how to publish states to a template binary sensor using both direct state assignment and lambda expressions.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/template.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nbinary_sensor:\n  - platform: template\n    name: \"Garage Door Open\"\n    id: template_bin\n\n# in some trigger\non_...:\n  - binary_sensor.template.publish:\n      id: template_bin\n      state: ON\n\n  # Templated\n  - binary_sensor.template.publish:\n      id: template_bin\n      state: !lambda 'return id(some_sensor).state > 30;'\n```\n\n----------------------------------------\n\nTITLE: Implementing Status Icon Toggle Button in LVGL\nDESCRIPTION: Configuration for a checkable button that displays different icons based on light/switch status using MaterialDesignIcons font. Includes state tracking and style handling for on/off/unavailable states.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/cookbook/lvgl.rst#2025-04-21_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nfont:\n  - file: \"custom/materialdesignicons-webfont.ttf\"\n    id: mdi_42\n    size: 42\n    bpp: 4\n    glyphs: [\n      \"\\U000F0335\", # mdi-lightbulb\n      \"\\U000F0336\", # mdi-lightbulb-outline\n      ]\n\ntext_sensor:\n  - platform: homeassistant\n    id: ts_remote_light\n    entity_id: light.remote_light\n    on_value:\n      then:\n        - lvgl.widget.update:\n            id: btn_lightbulb\n            state:\n              checked: !lambda return (0 == x.compare(std::string{\"on\"}));\n              disabled: !lambda return ((0 == x.compare(std::string{\"unavailable\"})) or (0 == x.compare(std::string{\"unknown\"})));\n        - lvgl.label.update:\n            id: lbl_lightbulb\n            text: !lambda |-\n              static char buf[10];\n              std::string icon;\n              if (0 == x.compare(std::string{\"on\"})) {\n                  icon = \"\\U000F0335\";\n              } else {\n                  icon = \"\\U000F0336\";\n              }\n              snprintf(buf, sizeof(buf), \"%s\", icon.c_str());\n              return buf;\n\nlvgl:\n    ...\n    pages:\n      - id: room_page\n        widgets:\n          - button:\n              x: 110\n              y: 40\n              width: 90\n              height: 50\n              checkable: true\n              id: btn_lightbulb\n              widgets:\n                - label:\n                    id: lbl_lightbulb\n                    align: CENTER\n                    text_font: mdi_42\n                    text: \"\\U000F0336\" # mdi-lightbulb-outline\n              on_short_click:\n                - homeassistant.action:\n                    action: light.toggle\n                    data: \n                      entity_id: light.remote_light\n```\n\n----------------------------------------\n\nTITLE: Rendering Aligned Text in ESPHome Display\nDESCRIPTION: Demonstrates how to render text with different alignments on an ESPHome display. It shows left-aligned and right-aligned text positioning using the display lambda.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/index.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ndisplay:\n  - platform: ...\n    # ...\n    lambda: |-\n      // Aligned on left by default\n      it.print(0, 0, id(my_font), \"Left aligned\");\n\n      // Aligned on right edge\n      it.print(it.get_width(), 0, id(my_font), TextAlign::TOP_RIGHT, \"Right aligned\");\n```\n\n----------------------------------------\n\nTITLE: Creating Template Button for PID Autotuning in YAML\nDESCRIPTION: Configuration for a template button that triggers the PID autotuning process when pressed. This allows the user to start autotuning from the frontend interface.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/climate/pid.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nbutton:\n  - platform: template\n    name: \"PID Climate Autotune\"\n    on_press:\n      - climate.pid.autotune: pid_climate\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP3008 Component in ESPHome\nDESCRIPTION: Establishes the MCP3008 component with chip select pin and identifier for SPI communication. This configuration sets up the core component for interfacing with the analog-to-digital converter.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/mcp3008.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmcp3008:\n  cs_pin: D8\n  id: my_mcp\n```\n\n----------------------------------------\n\nTITLE: Setting Up UART Configuration for Eastron SDM Energy Monitor in ESPHome YAML\nDESCRIPTION: This snippet provides an example configuration for setting up UART communication with the Eastron SDM Energy Monitor, detailing RX and TX pin settings, baud rate adjustment, and stop bits configuration. Ensure to adjust the baud rate for specific models if necessary.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/sdm_meter.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n    # Example configuration entry\n    uart:\n      rx_pin: D1\n      tx_pin: D2\n      baud_rate: 9600 #if your energy meter is SDM230M or SDM120M than change the baud_rate: 2400\n      stop_bits: 1\n\n    sensor:\n      - platform: sdm_meter\n        phase_a:\n          current:\n            name: \"SDM230M Current\"\n          voltage:\n            name: \"SDM230M Voltage\"\n          active_power:\n            name: \"SDM230M Power\"\n          power_factor:\n            name: \"SDM230M Power Factor\"\n          apparent_power:\n            name: \"SDM230M Apparent Power\"\n          reactive_power:\n            name: \"SDM230M Reactive Power\"\n          phase_angle:\n            name: \"SDM230M Phase Angle\"\n        frequency:\n          name: \"SDM230M Frequency\"\n        total_power:\n          name: \"SDM230M Total Power\"\n        import_active_energy:\n          name: \"SDM230M Import Active Energy\"\n        export_active_energy:\n          name: \"SDM230M Export Active Energy\"\n        import_reactive_energy:\n          name: \"SDM230M Import Reactive Energy\"\n        export_reactive_energy:\n          name: \"SDM230M Export Reactive Energy\"\n        update_interval: 60s\n```\n\n----------------------------------------\n\nTITLE: Configuring ESP32 RMT LED Strip in YAML\nDESCRIPTION: This YAML configuration sets up an addressable LED strip using the ESP32 RMT peripheral. It specifies the RGB order, pin, number of LEDs, RMT channel, chipset, and name for the light.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/light/esp32_rmt_led_strip.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlight:\n  - platform: esp32_rmt_led_strip\n    rgb_order: GRB\n    pin: GPIOXX\n    num_leds: 30\n    rmt_channel: 0\n    chipset: ws2812\n    name: \"My Light\"\n```\n\n----------------------------------------\n\nTITLE: Publishing Template Lock State in ESPHome C++\nDESCRIPTION: This C++ code snippet shows how to publish a lock state using the `publish_state` method within a lambda function in ESPHome.  It requires the template lock to be defined with an ID.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lock/template.rst#2025-04-21_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n        id(template_lock1).publish_state(lock::LOCK_STATE_LOCKED);\n```\n\n----------------------------------------\n\nTITLE: BLE Client Remove Bond Action Configuration\nDESCRIPTION: Example configuration for the ble_client.remove_bond action, which removes a device from the security database and manages unpairing. The action is triggered when the BLE client connects to the specified device.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/ble_client.rst#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nble_client:\n  - mac_address: XX:XX:XX:XX:XX:XX\n    id: my_ble_client\n    on_connect:\n      then:\n        - ble_client.remove_bond:\n            id: my_ble_client\n```\n\n----------------------------------------\n\nTITLE: Pump Voltage Sensor Configuration in YAML\nDESCRIPTION: Configuration for a sensor that reports the current voltage of the power supply that powers the pump motor.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/ezo_pmp.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: ezo_pmp\n    pump_voltage:\n      id: pump_voltage\n      name: Pump Voltage\n```\n\n----------------------------------------\n\nTITLE: Configuring H-bridge Fan in YAML for ESPHome\nDESCRIPTION: This YAML snippet demonstrates how to configure an h-bridge controlled fan in ESPHome. It specifies the platform, pins, and optional settings like decay mode.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/fan/hbridge.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nfan:\n  - platform: hbridge\n    id: my_fan\n    name: \"Living Room Fan\"\n    pin_a: motor_forward_pin\n    pin_b: motor_reverse_pin\n    # enable_pin: motor_enable\n    decay_mode: slow   # slow decay mode (coasting) or fast decay (braking).\n```\n\n----------------------------------------\n\nTITLE: Activating Internal Pullups for GPIO Binary Sensor in ESPHome\nDESCRIPTION: This configuration demonstrates how to enable internal pull-up resistors for a GPIO binary sensor. It's useful when connecting a button without an external pullup or to prevent floating pins.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/gpio.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nbinary_sensor:\n  - platform: gpio\n    pin:\n      number: D2\n      mode:\n        input: true\n        pullup: true\n    name: ...\n```\n\n----------------------------------------\n\nTITLE: Setting Text Color in ESPHome Display\nDESCRIPTION: Shows how to set text color when rendering on an ESPHome display. The example demonstrates specifying color for left-aligned text.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/index.rst#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ndisplay:\n  - platform: ...\n    # ...\n    lambda: |-\n      // Syntax is always: it.print(<x>, <y>, <font>, [color=COLOR_ON], [align=TextAlign::TOP_LEFT], <text>);\n      it.print(0, 0, id(my_font), COLOR_ON, \"Left aligned\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Inkplate 6 Plus Backlight\nDESCRIPTION: Configuration example for controlling the built-in backlight on the Inkplate 6 Plus, including power supply settings and brightness control.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/inkplate6.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\npower_supply:\n  - id: backlight_power\n    keep_on_time: 0.2s\n    enable_time: 0s\n    pin:\n      mcp23xxx: mcp23017_hub\n      number: 11\n\noutput:\n  - platform: mcp47a1\n    id: backlight_brightness_output\n    power_supply: backlight_power\n\nlight:\n  - platform: monochromatic\n    output: backlight_brightness_output\n    id: backlight\n    default_transition_length: 0.2s\n    name: '${friendly_name} Backlight'\n```\n\n----------------------------------------\n\nTITLE: Basic Feedback Cover Configuration in YAML\nDESCRIPTION: Example configuration for a feedback-based cover with open/close actions, duration settings, and sensor inputs for endstops and movement detection.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/cover/feedback.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncover:\n  - platform: feedback\n    name: \"Gate\"\n\n    open_action:\n      - switch.turn_on: open_cover_switch\n    open_duration: 2.1min\n    open_endstop: open_endstop_binary_sensor\n    open_sensor: open_movement_binary_sensor\n\n    close_action:\n      - switch.turn_on: close_cover_switch\n    close_duration: 2min\n    close_endstop: close_endstop_binary_sensor\n    close_sensor: close_movement_binary_sensor\n\n    stop_action:\n      - switch.turn_off: open_cover_switch\n      - switch.turn_off: close_cover_switch\n```\n\n----------------------------------------\n\nTITLE: Configuring HLW8012 with Fixed Measurement Mode\nDESCRIPTION: Configuration for devices with permanently pulled SEL pin, specifying initial measurement mode and disabling mode switching\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/hlw8012.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: hlw8012\n    sel_pin: GPIOXX\n    cf_pin: GPIOXX\n    cf1_pin: GPIOXX\n    current:\n      name: \"HLW8012 Current\"\n    voltage:\n      name: \"HLW8012 Voltage\"\n    power:\n      name: \"HLW8012 Power\"\n    update_interval: 60s\n    initial_mode: CURRENT\n    change_mode_every: \"never\"\n```\n\n----------------------------------------\n\nTITLE: Configuring STS3X Temperature Sensor in YAML\nDESCRIPTION: Basic YAML configuration for setting up an STS3X temperature sensor with ESPHome. Demonstrates setting the sensor name, I2C address, and update interval. Requires I2C bus to be configured in the main ESPHome configuration.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/sts3x.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: sts3x\n    name: \"Living Room Temperature\"\n    address: 0x4A\n    update_interval: 60s\n```\n\n----------------------------------------\n\nTITLE: UART Configuration for Modbus Communication\nDESCRIPTION: Defines UART settings for Modbus communication with specific pins, baud rate, and stop bits\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/modbus_controller.rst#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nuart:\n  id: mod_bus\n  tx_pin: GPIOXX\n  rx_pin: GPIOXX\n  baud_rate: 115200\n  stop_bits: 1\n```\n\n----------------------------------------\n\nTITLE: Configuring AS3935 Storm Alert Binary Sensor\nDESCRIPTION: YAML configuration for creating a binary sensor that indicates lightning strike detection.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/as3935.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# Example storm alert binary sensor\nbinary_sensor:\n  - platform: as3935\n    name: Storm Alert\n```\n\n----------------------------------------\n\nTITLE: Setting Boiler Temperature Setpoint using Home Assistant Sensor\nDESCRIPTION: This snippet shows how to link an external Home Assistant sensor to the OpenTherm configuration to set the boiler temperature setpoint dynamically, providing flexibility in monitoring and control.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/opentherm.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nopentherm:\n  t_set: setpoint_sensor\n\nsensor:\n  - platform: homeassistant\n    id: setpoint_sensor\n    entity_id: sensor.boiler_setpoint\n```\n\n----------------------------------------\n\nTITLE: Basic SSD1351 Display Configuration in YAML\nDESCRIPTION: Basic configuration example for setting up an SSD1351 OLED display using SPI interface. Defines the required pins and includes a simple Hello World display example.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/ssd1351.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nspi:\n  clk_pin: D5\n  mosi_pin: D7\n\ndisplay:\n  - platform: ssd1351_spi\n    model: \"SSD1351 128x128\"\n    reset_pin: D0\n    cs_pin: D8\n    dc_pin: D1\n    lambda: |-\n      it.print(0, 0, id(font), \"Hello World!\");\n```\n\n----------------------------------------\n\nTITLE: Checking Fan Speed in ESPHome Lambda\nDESCRIPTION: This snippet shows how to retrieve and check the current speed of a fan within a lambda function. It uses 'id(my_fan).speed' to determine if the fan speed equals 2.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/fan/index.rst#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n// Within lambda, get the fan speed and conditionally do something\nif (id(my_fan).speed == 2) {\n  // Fan speed is 2, do something here\n} else {\n  // Fan speed is not 2, do something else here\n}\n```\n\n----------------------------------------\n\nTITLE: Template Select Configuration in ESPHome\nDESCRIPTION: This YAML snippet demonstrates the basic configuration of a template select in ESPHome. It defines the platform as template, sets a name, enables optimistic mode, specifies available options, and sets an initial option. The `optimistic: true` setting means that the UI will update immediately when the select is changed.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/select/template.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\n    # Example configuration entry\n    select:\n      - platform: template\n        name: \"Template select\"\n        optimistic: true\n        options:\n          - one\n          - two\n          - three\n        initial_option: two\n\n```\n\n----------------------------------------\n\nTITLE: Configuring an Arc Widget in LVGL with YAML\nDESCRIPTION: This YAML configuration defines an arc widget with specified position, ID, value, range, and adjustability. It serves as an example of how to set up basic arc properties within an ESPHome configuration for use with LVGL.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/widgets.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n\n    # Example widget:\n    - arc:\n        x: 10\n        y: 10\n        id: arc_id\n        value: 75\n        min_value: 0\n        max_value: 100\n        adjustable: true\n\n```\n\n----------------------------------------\n\nTITLE: Configuring SPI LED Strip Light in ESPHome YAML\nDESCRIPTION: This snippet demonstrates how to configure an SPI LED strip light in ESPHome. It sets up the SPI interface and defines a light platform using the spi_led_strip. The configuration specifies the number of LEDs, assigns an ID and name to the light, and sets the data rate.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/light/spi_led_strip.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nspi:\n  mosi_pin: GPIO06\n  clk_pin: GPIO07\n\nlight:\n  - platform: spi_led_strip\n    num_leds: 30\n    id: rgb_led\n    name: \"RGB LED Strip\"\n    data_rate: 1MHz\n```\n\n----------------------------------------\n\nTITLE: UART Runtime Baud Rate Selection\nDESCRIPTION: Example of implementing a template-based selector for changing UART baud rate at runtime.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/uart.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nselect:\n  - id: change_baud_rate\n    name: Baud rate\n    platform: template\n    options:\n      - \"2400\"\n```\n\n----------------------------------------\n\nTITLE: Defining Tuya Select Configuration - YAML Format\nDESCRIPTION: This snippet demonstrates how to define a select option for a Tuya device within YAML, specifying the platform and various options such as 'optimistic' mode and the available selection options.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/select/tuya.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Create a select\nselect:\n  - platform: \"tuya\"\n    name: \"Sensor selection\"\n    enum_datapoint: 2\n    optimistic: true\n    options:\n      0: Internal\n      1: Floor\n      2: Both\n```\n\n----------------------------------------\n\nTITLE: Configuring AS5600 Sensor Hub with GPIO Pin\nDESCRIPTION: This YAML snippet sets up the AS5600 sensor hub, specifying the GPIO pin for direction and initial position parameters. Dependencies include ESPHome version compatible with AS5600 sensors.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/as5600.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nas5600:\n  dir_pin: GPIOXX\n  start_position: 0deg\n  range: 180deg\n```\n\n----------------------------------------\n\nTITLE: LILYGO TTGO T-Internet ESP32-WROVER-E Configuration\nDESCRIPTION: Ethernet configuration for the LILYGO TTGO T-Internet ESP32-WROVER-E board with LAN8270 chipset and GPIO4 power pin.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/ethernet.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nethernet:\n  type: LAN8720\n  mdc_pin: GPIO23\n  mdio_pin: GPIO18\n  clk_mode: GPIO0_OUT\n  phy_addr: 0\n  power_pin: GPIO04\n```\n\n----------------------------------------\n\nTITLE: Configuring Inkplate 6 v2 with PCA6416A\nDESCRIPTION: This YAML configuration sets up the PCA6416A expander and display properties for the Inkplate 6 v2 model. Key parameters include I/O pin assignments and display settings such as greyscale and update intervals.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/inkplate6.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n    # Example minimal configuration entry\n    pca6416a:\n      - id: pca6416a_hub\n        address: 0x20\n\n    display:\n    - platform: inkplate6\n      id: inkplate_display\n      greyscale: true\n      partial_updating: false\n      update_interval: never\n      model: inkplate_6_v2\n\n      ckv_pin: 32\n      sph_pin: 33\n      gmod_pin:\n        pca6416a: pca6416a_hub\n        number: 1\n      gpio0_enable_pin:\n        pca6416a: pca6416a_hub\n        number: 8\n      oe_pin:\n        pca6416a: pca6416a_hub\n        number: 0\n      spv_pin:\n        pca6416a: pca6416a_hub\n        number: 2\n      powerup_pin:\n        pca6416a: pca6416a_hub\n        number: 4\n      wakeup_pin:\n        pca6416a: pca6416a_hub\n        number: 3\n      vcom_pin:\n        pca6416a: pca6416a_hub\n        number: 5\n```\n\n----------------------------------------\n\nTITLE: uFire EC Sensor Calibration Configuration\nDESCRIPTION: Example configuration for calibrating the EC probe using a reference solution. Shows how to set up the calibration action with solution value and temperature parameters.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ufire_ec.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: ufire_ec\n    id: ufire_ec_board\n    # ...\n\n# in some trigger\non_...:\n  - sensor.ufire_ec_board.calibrate_probe:\n      id: ufire_ec_board\n      solution: 0.146\n      temperature: !lambda \"return id(temperature_liquit).state;\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Tormatic Cover in ESPHome\nDESCRIPTION: Basic YAML configuration for setting up a Tormatic/Novoferm garage door cover in ESPHome. Requires UART connection with appropriate pins and baud rate settings.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/cover/tormatic.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\ncover:\n  - platform: tormatic\n    device_class: garage\n    name: Novoferm 423\n```\n\n----------------------------------------\n\nTITLE: Basic Image Configuration in ESPHome\nDESCRIPTION: Configuration to store a binary image file on an ESPHome device with resizing to specific dimensions.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/image.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n  - file: \"image.png\"\n    type: binary\n    id: my_image\n    resize: 100x100\n```\n\n----------------------------------------\n\nTITLE: AT581x Settings Action Configuration\nDESCRIPTION: Configuration for adjusting the radar's internal parameters including frequency, sensing distance, and timing settings.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/at581x.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - at581x.settings:\n      id: \"Waveradar\"\n      hw_frontend_reset: false\n      frequency: 5800MHz\n      sensing_distance: 200 # 0-1023\n      poweron_selfcheck_time: 2000ms\n      protect_time: 1s\n      trigger_base: 500ms\n      trigger_keep: 10s\n      stage_gain: 3 # 0-12 the higher the value the smaller the gain\n      power_consumption: 70ÂµA\n```\n\n----------------------------------------\n\nTITLE: ESP32 Wakeup Cause Sensor Implementation\nDESCRIPTION: A template sensor that reports the wakeup cause for ESP32 devices. Returns an integer value corresponding to different wakeup sources like timer, external signal, touchpad, etc.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/deep_sleep.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: template\n    name: \"Wakeup Cause\"\n    accuracy_decimals: 0\n    lambda: return esp_sleep_get_wakeup_cause();\n```\n\n----------------------------------------\n\nTITLE: Configuring UART Baud Rate Change Lambda\nDESCRIPTION: Lambda function for dynamically changing UART baud rate at runtime. Includes flush operation, baud rate conversion, and logging.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/uart.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nset_action:\n  - lambda: |-\n      id(my_uart).flush();\n      uint32_t new_baud_rate = stoi(x);\n      ESP_LOGD(\"change_baud_rate\", \"Changing baud rate from %i to %i\",id(my_uart).get_baud_rate(), new_baud_rate);\n      if (id(my_uart).get_baud_rate() != new_baud_rate) {\n        id(my_uart).set_baud_rate(new_baud_rate);\n        id(my_uart).load_settings();\n      }\n```\n\n----------------------------------------\n\nTITLE: Manipulating Datetime Components in Lambda Functions\nDESCRIPTION: Example of how to use the make_call method to update a datetime value within a lambda function. It also shows how to access datetime properties and create custom log messages.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/datetime/index.rst#2025-04-21_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\n// Within lambda, set the date to 2024-02-25\nauto call = id(my_datetime_date).make_call();\ncall.set_date(\"2024-02-25\");\ncall.perform();\n```\n\nLANGUAGE: cpp\nCODE:\n```\n// For example, create a custom log message when a value is received:\nESP_LOGI(\"main\", \"Value of my datetime: %04d-%02d-%02d\", id(my_date).year, id(my_date).month, id(my_date).day);\n```\n\n----------------------------------------\n\nTITLE: Modbus Controller Output Configuration\nDESCRIPTION: This YAML configuration defines a Modbus controller output, specifying the platform, Modbus controller ID, register address, register type, value type, and a multiplication factor for the output value. It provides a basic example of how to set up a Modbus controller to write to a holding register.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/output/modbus_controller.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"output:\\n  - platform: modbus_controller\\n    modbus_controller_id: modbus1\\n    address: 2048\\n    register_type: holding\\n    value_type: U_WORD\\n    multiply: 1000\"\n```\n\n----------------------------------------\n\nTITLE: Rounding Sensor Values in ESPHome YAML\nDESCRIPTION: This code shows how to use the `round` filter to round sensor values to a specified number of decimal places. This simplifies sensor readings and can make them easier to work with in automations or displays.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/index.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n\n    - platform: ...\n      filters:\n        - round: 1 # will round to 1 decimal place\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Qingping CGPR1 Motion Sensor in ESPHome YAML\nDESCRIPTION: YAML configuration for the Qingping motion & ambient light sensor CGPR1. Defines sensors for motion detection, idle time, battery level, and illuminance. Requires a bindkey for decryption.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/xiaomi_ble.rst#2025-04-21_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nbinary_sensor:\n  - platform: xiaomi_cgpr1\n    name: \"CGPR1 Motion detector\"\n    mac_address: XX:XX:XX:XX:XX:XX\n    bindkey: \"ff1ae526b23b4aebeadcaaad86f59055\"\n    idle_time:\n      name: \"CGPR1 Idle Time\"\n    battery_level:\n      name: \"CGPR1 Battery Level\"\n    illuminance:\n      name: \"CGPR1 Illuminance\"\n```\n\n----------------------------------------\n\nTITLE: Triggering Actions on Light State Change in ESPHome\nDESCRIPTION: This YAML configuration defines actions to be triggered when the *set* state of a light changes using the `light.on_state` trigger. It includes logging a message when the light state changes.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/light/index.rst#2025-04-21_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n\"light:\n  - platform: binary # or any other platform\n    # ...\n    on_state:\n    - logger.log: \\\"Light State Changed!\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Ultrasonic Sensor in ESPHome YAML\nDESCRIPTION: This YAML configuration snippet demonstrates how to set up the A01NYUB waterproof ultrasonic sensor within an ESPHome environment. It includes the platform type and the name for the sensor, which are essential for integration. The configuration requires proper UART setup to communicate with the sensor.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/a01nyub.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: \"a01nyub\"\n    name: \"Distance\"\n```\n\n----------------------------------------\n\nTITLE: Configuring EZO Sensors in ESPHome YAML\nDESCRIPTION: Basic YAML configuration for setting up EZO pH and RTD temperature sensors in ESPHome with specific addresses and update intervals.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ezo.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n\n  - platform: ezo\n    id: ph_ezo\n    address: 99\n    unit_of_measurement: \"pH\"\n    update_interval: 10s\n\n  - platform: ezo\n    id: rtd_ezo\n    name: \"RTD Temperature\"\n    address: 102\n    accuracy_decimals: 2\n    unit_of_measurement: \"Â°C\"\n    update_interval: 10s\n```\n\n----------------------------------------\n\nTITLE: Using on_boot Hook to Set MCP4461 Wiper Values in ESPHome (YAML)\nDESCRIPTION: This snippet demonstrates how to set up a boot sequence for the MCP4461 outputs in ESPHome using the on_boot priority configuration. It reads the state of the wiper and updates it accordingly at startup.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/output/mcp4461.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nesphome:  \n  on_boot:\n    priority: 100\n    then:\n      - number.set:\n          id: digipot_volatile_0\n          value: !lambda |-\n            uint16_t wiper_level = id(digipot_wiper_0).read_state();\n            return wiper_level;\n\n      - lambda: |-\n          id(digipot_wiper_0).update_state();\n```\n\n----------------------------------------\n\nTITLE: Configuring a Speed-Controllable Fan in ESPHome (YAML)\nDESCRIPTION: Example configuration for setting up a speed-controllable fan in ESPHome. This snippet shows the basic configuration for creating a fan named 'Living Room Fan' that uses 'my_output_1' as its output.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/fan/speed.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nfan:\n  - platform: speed\n    output: my_output_1\n    name: \"Living Room Fan\"\n```\n\n----------------------------------------\n\nTITLE: Compound Substitutions in YAML\nDESCRIPTION: Shows how to use compound substitutions with multiple passes, combining variables to create dynamic references.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/substitutions.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsubstitutions:\n  foo: yellow\n  bar_yellow_value: !secret yellow_secret\n  bar_green_value: !secret green_secret\n\nsomething:\n  test: ${bar_${foo}_value}\n```\n\n----------------------------------------\n\nTITLE: Momentary GPIO Switch Configuration in ESPHome YAML\nDESCRIPTION: Example of a momentary switch that toggles a pin for a specified duration. This example simulates a button press for 500ms to activate a gate remote control.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/switch/gpio.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nswitch:\n  - platform: gpio\n    pin: GPIOXX\n    id: relay\n    name: \"Gate Remote\"\n    icon: \"mdi:gate\"\n    on_turn_on:\n    - delay: 500ms\n    - switch.turn_off: relay\n```\n\n----------------------------------------\n\nTITLE: Base Switch Configuration in YAML\nDESCRIPTION: Basic YAML configuration for setting up a switch component in ESPHome. This includes the platform specification, name, and icon settings.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/switch/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nswitch:\n  - platform: ...\n    name: \"Switch Name\"\n    icon: \"mdi:restart\"\n```\n\n----------------------------------------\n\nTITLE: Configuring MQTT Birth and Will Messages\nDESCRIPTION: This YAML snippet customizes the birth and will messages for MQTT, allowing different topics and payloads to be specified for device availability reporting.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/mqtt.rst#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nmqtt:\n  # ...\n  birth_message:\n    topic: myavailability/topic\n    payload: online\n  will_message:\n    topic: myavailability/topic\n    payload: offline\n```\n\n----------------------------------------\n\nTITLE: Adding Project Information in YAML\nDESCRIPTION: Configuration example for adding project name and version information to the compiled ESPHome code. This information is exposed via the logger, mDNS, and the device_info response in the native API.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/esphome.rst#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration\nesphome:\n  ...\n  project:\n    name: \"jesse.leds_party\"\n    version: \"1.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Custom BLE Data Parsing Lambda in YAML\nDESCRIPTION: Example showing how to use a lambda function to parse raw data from a BLE characteristic, specifically parsing a 32-bit float temperature value.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ble_client.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: ble_client\n    type: characteristic\n    ble_client_id: t_sensor\n    name: \"Temperature Sensor 32bit float\"\n    ...\n    device_class: \"temperature\"\n    lambda: |-\n      return *((float*)(&x[0]));\n```\n\n----------------------------------------\n\nTITLE: Standalone Configuration of PM1006 using ESPHome\nDESCRIPTION: Shows how to configure the PM1006 sensor independently from the IKEA setup by setting both RX and TX pins and enabling an update interval for active measurements. The update interval controls how frequently data is requested from the sensor.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/pm1006.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nuart:\n  rx_pin: D2\n  tx_pin: D1\n  baud_rate: 9600\n\nsensor:\n  - platform: pm1006\n    pm_2_5:\n      name: \"Particulate Matter 2.5Âµm Concentration\"\n    update_interval: 20s\n```\n\n----------------------------------------\n\nTITLE: Modbus Select Configuration Example\nDESCRIPTION: This is an example configuration entry for a Modbus Select component. It defines the platform, name, Modbus address, value type, and a mapping between options and register values.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/select/modbus_controller.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n    # Example configuration entry\n    select:\n      - platform: modbus_controller\n        name: \"Modbus Select Register 1000\"\n        address: 1000\n        value_type: U_WORD\n        optionsmap:\n          \"Zero\": 0\n          \"One\": 1\n          \"Two\": 2\n          \"Three\": 3\n```\n\n----------------------------------------\n\nTITLE: Configuring BL0937 with Inverted SEL Pin\nDESCRIPTION: Configuration for BL0937 sensor model with inverted SEL pin functionality\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/hlw8012.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: hlw8012\n    model: BL0937\n    sel_pin:\n      number: GPIOXX\n      inverted: true\n    cf_pin: GPIOXX\n    cf1_pin: GPIOXX\n    current:\n      name: \"BL0937 Current\"\n    voltage:\n      name: \"BL0937 Voltage\"\n    power:\n      name: \"BL0937 Power\"\n    update_interval: 60s\n```\n\n----------------------------------------\n\nTITLE: Configuring Whynter Climate Controller with Fahrenheit Support\nDESCRIPTION: Example configuration for a Whynter AC unit with temperature displayed in Fahrenheit, heat mode support, and room temperature sensor integration.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/climate/climate_ir.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nclimate:\n  - platform: whynter\n    name: \"AC\"\n    sensor: room_temperature\n    use_fahrenheit: true\n    supports_heat: true\n```\n\n----------------------------------------\n\nTITLE: Comprehensive ES8311 Configuration for ESP32 S3 Box 3\nDESCRIPTION: A detailed configuration example for the ES8311 audio DAC, including I2S audio setup, speaker configuration, and a GPIO switch for speaker enable. This example is specifically tailored for the ESP32 S3 Box 3.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/audio_dac/es8311.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\naudio_dac:\n  - platform: es8311\n    id: es8311_dac\n    bits_per_sample: 16bit\n    sample_rate: 16000\n\ni2s_audio:\n  - id: i2s_output\n    i2s_lrclk_pin: GPIO45\n    i2s_bclk_pin: GPIO17\n    i2s_mclk_pin: GPIO2\n\nspeaker:\n  - platform: i2s_audio\n    i2s_audio_id: i2s_output\n    id: speaker_id\n    i2s_dout_pin: GPIO15\n    dac_type: external\n    sample_rate: 16000\n    bits_per_sample: 16bit\n    channel: left\n    audio_dac: es8311_dac\n\nswitch:\n  - platform: gpio\n    name: \"Speaker Enable\"\n    pin: GPIO46\n    restore_mode: RESTORE_DEFAULT_ON\n```\n\n----------------------------------------\n\nTITLE: Basic Nextion Display Configuration in ESPHome\nDESCRIPTION: Example YAML configuration for setting up a Nextion display in ESPHome, including component value and text setting in the lambda function.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/nextion.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\ndisplay:\n  - platform: nextion\n    id: nextion1\n    lambda: |-\n      it.set_component_value(\"gauge\", 50);\n      it.set_component_text(\"textview\", \"Hello World!\");\n```\n\n----------------------------------------\n\nTITLE: Setting up triggered Action for Alarm Panel in YAML\nDESCRIPTION: YAML configuration for adding a triggered action to an Alarm Control Panel, which puts the alarm in triggered state.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/alarm_control_panel/index.rst#2025-04-21_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - alarm_control_panel.triggered: acp1\n```\n\n----------------------------------------\n\nTITLE: Configuring Hydreon RG-15 Rain Sensor in YAML\nDESCRIPTION: This YAML snippet provides an example configuration for the Hydreon RG-15 rain sensor. The configuration specifies a high resolution and includes settings for accumulating rain data, such as the amount of rain since the last message, total amount of rain, and rain intensity. Options like 'resolution', 'acc', 'event_acc', and 'r_int' are configurable.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/hydreon_rgxx.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Example RG-15 entry\nsensor:\n  - platform: hydreon_rgxx\n    model: RG_15\n    resolution: high\n    acc:\n      name: Rain\n    event_acc:\n      name: Rain Event\"\n    total_acc:\n      name: Rain Total\"\n    r_int:\n      name: Rain Intensity\n```\n\n----------------------------------------\n\nTITLE: Configuring Next URL with Substitutions in ESPHome YAML\nDESCRIPTION: Example of configuring the 'next_url' option in the improv_serial component. Demonstrates the use of special substitutions for device name, IP address, and ESPHome version.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/improv_serial.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Example next_url\nimprov_serial:\n  next_url: http://example.com/?device_name={{device_name}}&ip_address={{ip_address}}&esphome_version={{esphome_version}}\n```\n\n----------------------------------------\n\nTITLE: Duty Time Reset Action in ESPHome Automation\nDESCRIPTION: Demonstrates resetting the duty time counter without affecting the last time sensor\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/duty_time.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - sensor.duty_time.reset: my_climate_work_time\n```\n\n----------------------------------------\n\nTITLE: Executing LVGL Textarea Update Action in YAML\nDESCRIPTION: Example of using the lvgl.textarea.update action to programmatically update the text content of a textarea widget.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/widgets.rst#2025-04-21_snippet_38\n\nLANGUAGE: yaml\nCODE:\n```\n# Example action:\non_...:\n  then:\n    - lvgl.textarea.update:\n        id: textarea_id\n        text: \"Hello World!\"\n```\n\n----------------------------------------\n\nTITLE: Configuring CircuitSetup 6-channel ATM90E32 Setup in ESPHome\nDESCRIPTION: This example shows the configuration for a CircuitSetup 6-channel energy monitoring setup using two ATM90E32 chips. It includes SPI configuration, voltage and current sensors for multiple phases, and calibration settings.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/atm90e32.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nspi:\n  clk_pin: 18\n  miso_pin: 19\n  mosi_pin: 23\nsensor:\n  - platform: atm90e32\n    cs_pin: 5\n    id: chip1 #Optional\n    phase_a:\n      voltage:\n        name: \"EMON Line Voltage A\"\n      current:\n        name: \"EMON CT1 Current\"\n      power:\n        name: \"EMON Active Power CT1\"\n      gain_voltage: 7305\n      gain_ct: 12577\n    phase_b:\n      current:\n        name: \"EMON CT2 Current\"\n      power:\n        name: \"EMON Active Power CT2\"\n      gain_voltage: 7305\n      gain_ct: 12577\n    phase_c:\n      current:\n        name: \"EMON CT3 Current\"\n      power:\n        name: \"EMON Active Power CT3\"\n      gain_voltage: 7305\n      gain_ct: 12577\n    frequency:\n      name: \"EMON Line Frequency\"\n    line_frequency: 50Hz\n    current_phases: 3\n    gain_pga: 1X\n    update_interval: 60s\n    enable_offset_calibration: True\n  - platform: atm90e32\n    cs_pin: 4\n    id: chip2 #Optional\n    phase_a:\n      current:\n        name: \"EMON CT4 Current\"\n      power:\n        name: \"EMON Active Power CT4\"\n      gain_voltage: 7305\n      gain_ct: 12577\n    phase_b:\n      current:\n        name: \"EMON CT5 Current\"\n      power:\n        name: \"EMON Active Power CT5\"\n      gain_voltage: 7305\n      gain_ct: 12577\n    phase_c:\n      current:\n        name: \"EMON CT6 Current\"\n      power:\n        name: \"EMON Active Power CT6\"\n      gain_voltage: 7305\n      gain_ct: 12577\n    line_frequency: 50Hz\n    current_phases: 3\n    gain_pga: 1X\n    update_interval: 60s\n\nbutton:\n  - platform: atm90e32\n    id: chip1\n    run_offset_calibration:\n      name: \"Chip1 - Run Offset Calibration\"\n    clear_offset_calibration:\n      name: \"Chip1 - Clear Offset Calibration\"\n```\n\n----------------------------------------\n\nTITLE: Home Assistant Tag Integration\nDESCRIPTION: Configuration for sending RDM6300 tag scan events to Home Assistant's tag component using the tag_scanned action.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/rdm6300.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nrdm6300:\n  # ...\n  on_tag:\n    then:\n      - homeassistant.tag_scanned: !lambda 'return to_string(x);'\n```\n\n----------------------------------------\n\nTITLE: Configuring on_pending Trigger for Alarm Panel in YAML\nDESCRIPTION: YAML configuration for adding an on_pending trigger to an Alarm Control Panel, which activates when the alarm enters pending state.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/alarm_control_panel/index.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nalarm_control_panel:\n  # ...\n  on_pending:\n    then:\n      - logger.log: \"Alarm Pending!\"\n```\n\n----------------------------------------\n\nTITLE: Configuring SN74HC595 with SPI Bus in ESPHome\nDESCRIPTION: YAML configuration for setting up SN74HC595 shift registers using an SPI bus connection. This method allows sharing pins with other SPI components.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sn74hc595.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsn74hc595:\n  - id: 'sn74hc595_hub'\n    type: spi\n    latch_pin: GPIOXX\n    oe_pin: GPIOXX\n    sr_count: 2\n```\n\n----------------------------------------\n\nTITLE: Set Select Option Action in YAML\nDESCRIPTION: This action snippet sets the active option of a select component using a specific option value, which is required to modify the current selection within the UI or automation framework.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/select/index.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n\"    - select.set:\\n        id: my_select\\n        option: \\\"Happy\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring T6615 CO2 Sensor in ESPHome\nDESCRIPTION: Basic YAML configuration for setting up a T6615 CO2 sensor in ESPHome. The sensor requires UART communication and reports CO2 levels in parts per million (ppm). Default update interval is 60 seconds.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/t6615.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: t6615\n    co2:\n      name: CO2\n```\n\n----------------------------------------\n\nTITLE: Configuring ESP32 Bluetooth Tracker for RuuviTag Sensors in YAML\nDESCRIPTION: This YAML configuration is designed to set up the ESP32 BLE tracker for RuuviTag sensors, allowing for tracking of temperature, humidity, pressure, acceleration, and battery voltage data from BLE broadcasts. Required parameters include the MAC address of the RuuviTag device, with other parameters being optional for additional sensor data.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ruuvitag.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nesp32_ble_tracker:\n\nsensor:\n- platform: ruuvitag\n  mac_address: XX:XX:XX:XX:XX:XX\n  humidity:\n    name: \"RuuviTag Humidity\"\n  temperature:\n    name: \"RuuviTag Temperature\"\n  pressure:\n    name: \"RuuviTag Pressure\"\n  acceleration:\n    name: \"RuuviTag Acceleration\"\n  acceleration_x:\n    name: \"RuuviTag Acceleration X\"\n  acceleration_y:\n    name: \"RuuviTag Acceleration Y\"\n  acceleration_z:\n    name: \"RuuviTag Acceleration Z\"\n  battery_voltage:\n    name: \"RuuviTag Battery Voltage\"\n  tx_power:\n    name: \"RuuviTag TX Power\"\n  movement_counter:\n    name: \"RuuviTag Movement Counter\"\n  measurement_sequence_number:\n    name: \"RuuviTag Measurement Sequence Number\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Pylontech Battery Sensors\nDESCRIPTION: Example configuration for monitoring various battery metrics like voltage, current, state of charge, and temperature for a specific battery\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/pylontech.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: pylontech\n    battery: 1\n    \n    voltage:\n      name: \"Battery1 Voltage\"\n    current:\n      name: \"Battery1 Current\"\n    coulomb:\n      name: \"Battery1 State of Charge\"\n```\n\n----------------------------------------\n\nTITLE: Configuring A4988 Stepper Driver in YAML\nDESCRIPTION: Configuration for A4988 stepper motor driver with required pins and optional settings for speed control and sleep mode.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/stepper/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nstepper:\n  - platform: a4988\n    id: my_stepper\n    step_pin: GPIOXX\n    dir_pin: GPIOXX\n    max_speed: 250 steps/s\n\n    # Optional:\n    sleep_pin: GPIOXX\n    acceleration: inf\n    deceleration: inf\n```\n\n----------------------------------------\n\nTITLE: Configuring BLE Client for Writing Binary Values - YAML\nDESCRIPTION: This YAML configuration snippet sets up the `ble_client` component to write binary values to a specific BLE device. It includes parameters for the necessary MAC address, service UUID, characteristic UUID, and optional response requirements from the device when writing the value. Properly set up, this component enables communication with BLE services on connected devices.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/output/ble_client.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nesp32_ble_tracker:\n\nble_client:\n  - mac_address: XX:XX:XX:XX:XX:XX\n    id: itag_black\n\noutput:\n  - platform: ble_client\n    ble_client_id: itag_black\n    service_uuid: \"10110000-5354-4F52-5A26-4249434B454C\"\n    characteristic_uuid: \"10110013-5354-4f52-5a26-4249434b454c\"\n    require_response: false\n```\n\n----------------------------------------\n\nTITLE: Configuring FT5X06 Touchscreen in YAML for ESPHome\nDESCRIPTION: This YAML configuration sets up the FT5X06 touchscreen platform in ESPHome. It requires IÂ²C to be configured and allows for optional settings such as rotation and interrupt pin.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/touchscreen/ft5x06.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\ntouchscreen:\n  platform: ft5x06\n  id: my_touchscreen\n```\n\n----------------------------------------\n\nTITLE: Triggering on Tag Removal via PN7160 in YAML\nDESCRIPTION: This snippet configures a trigger for when a previously detected tag is no longer detectable by the PN7160, after a specified 'tag_ttl' interval. It sends the removed tag UID via MQTT. Ensure 'tag_ttl' is set for timing control.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/pn7160.rst#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\npn7160_...:\n  # ...\n  on_tag_removed:\n    then:\n      - mqtt.publish:\n          topic: pn7160/tag_removed\n          payload: !lambda 'return x;'\n```\n\n----------------------------------------\n\nTITLE: UART-based Binary Sensor Configuration\nDESCRIPTION: Binary sensor configuration using UART interface for presence detection.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/dfrobot_sen0395.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nbinary_sensor:\n  - platform: dfrobot_sen0395\n    name: Presence Detected via UART\n```\n\n----------------------------------------\n\nTITLE: Example Configuration for Binary Sensor Using MAX6956\nDESCRIPTION: This snippet demonstrates how to configure a binary sensor using pin 4 from the MAX6956 expander, which supports individual pull-ups. It includes settings for the pin mode and inversion.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/max6956.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nbinary_sensor:\n  - platform: gpio\n    name: \"MaxIn Pin 4\"\n    id: In_4\n    pin:\n      max6956: max6956_1\n      number: 4\n      mode:\n        input: true\n        pullup: true\n      inverted: False\n```\n\n----------------------------------------\n\nTITLE: Defining PZEMDC Sensor Configuration in YAML\nDESCRIPTION: This YAML snippet illustrates how to define the PZEMDC sensor configuration including current, voltage, power, and energy values, along with an update interval.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/pzemdc.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: pzemdc\n    current:\n      name: \"PZEM-003 Current\"\n    voltage:\n      name: \"PZEM-003 Voltage\"\n    power:\n      name: \"PZEM-003 Power\"\n    energy:\n      name: \"PZEM-003 Energy\"\n    update_interval: 60s\n```\n\n----------------------------------------\n\nTITLE: MAX7219 Scrolling Configuration\nDESCRIPTION: Example of configuring display scrolling parameters in the lambda function.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/max7219digit.rst#2025-04-21_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nit.scroll(<on/off>, <mode>, <speed>, <delay>, <dwell>);\n```\n\n----------------------------------------\n\nTITLE: Configuring WireGuard Enabled Binary Sensor in ESPHome\nDESCRIPTION: This snippet demonstrates how to configure a binary sensor that tracks whether WireGuard is enabled or not. It can be customized with additional options from the Binary Sensor configuration.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/wireguard.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nbinary_sensor:\n  - platform: wireguard\n    enabled:\n      name: 'WireGuard Enabled'\n```\n\n----------------------------------------\n\nTITLE: Configuring Grove Multichannel Gas Sensor V2 in ESPHome YAML\nDESCRIPTION: This YAML configuration sets up the Grove Multichannel Gas Sensor V2 in ESPHome, defining sensors for Nitrogen Dioxide, Ethanol, Carbon Monoxide, and Volatile Organic Compounds. It uses IÂ²C communication and sets names for each sensor type.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/grove_gas_mc_v2.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: grove_gas_mc_v2\n    nitrogen_dioxide:\n      name: \"Nitrogen Dioxide\"\n    ethanol:\n      name: \"Ethanol\"\n    carbon_monoxide:\n      name: \"Carbon Monoxide\"\n    tvoc:\n      name: \"Volatile Organic Compounds\"\n```\n\n----------------------------------------\n\nTITLE: Modbus Controller Switch with Holding Register\nDESCRIPTION: Example of a modbus controller switch using a holding register with bitmask and additional configuration options like entity category and icon.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/switch/modbus_controller.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nswitch:\n- platform: modbus_controller\n  modbus_controller_id: ventilation_system\n  name: \"enable turn off\"\n  register_type: holding\n  address: 25\n  bitmask: 1\n  entity_category: config\n  icon: \"mdi:toggle-switch\"\n```\n\n----------------------------------------\n\nTITLE: Basic Pulse Meter Sensor Configuration\nDESCRIPTION: Configures a pulse meter sensor for power measurement with multiplication filter to convert pulses to watts.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/cookbook/power_meter.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: pulse_meter\n    name: 'Power'\n    id: sensor_pulse_meter # Optional ID, necessary if you want to calculate the total daily energy\n    unit_of_measurement: 'W'\n    device_class: power\n    state_class: measurement\n    accuracy_decimals: 0\n    pin: GPIO12\n    filters:\n      - multiply: 6 # (60s / impulse constant) * (1000W / 1kW)\n```\n\n----------------------------------------\n\nTITLE: Configuring Status LED in ESPHome YAML\nDESCRIPTION: This snippet shows the basic configuration for setting up a status LED in ESPHome. It specifies the GPIO pin to which the LED is connected.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/status_led.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nstatus_led:\n  pin: GPIOXX\n```\n\n----------------------------------------\n\nTITLE: Cover Control Action in C++\nDESCRIPTION: Lambda implementation for controlling cover position programmatically in C++.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/cover/index.rst#2025-04-21_snippet_10\n\nLANGUAGE: cpp\nCODE:\n```\nauto call = id(cover_1).make_call();\n// set attributes\ncall.set_position(0.5);\ncall.perform();\n```\n\n----------------------------------------\n\nTITLE: Configuring PCAL6416A Device in ESPHome YAML\nDESCRIPTION: This YAML snippet shows how to configure the PCAL6416A component in ESPHome, including the definition of a GPIO switch for pin number 0 set as an input with pull-up enabled. This allows detecting button presses or similar input scenarios.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/pca6416a.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\npca6416a:\n  - id: 'pcal6416a_device'\n    address: 0x20\n\n# Individual outputs\nswitch:\n  - platform: gpio\n    name: \"PCAL6416A Pin #0\"\n    pin:\n      pca6416a: pcal6416a_device\n      # Use pin number 0\n      number: 0\n      # One of INPUT, INPUT_PULLUP or OUTPUT\n      mode:\n        input: true\n        pullup: true\n      inverted: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Xiaomi CGDK2 Temperature & Humidity Sensor in ESPHome YAML\nDESCRIPTION: YAML configuration for the Cleargrass (Qingping) Temp & RH Lite CGDK2. Defines sensors for temperature, humidity and battery level. Requires a bindkey for decryption.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/xiaomi_ble.rst#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: xiaomi_cgdk2\n    mac_address: XX:XX:XX:XX:XX:XX\n    bindkey: \"fe39106baeedb7c801e3d63c4396f97e\"\n    temperature:\n      name: \"CGDK2 Temperature\"\n    humidity:\n      name: \"CGDK2 Humidity\"\n    battery_level:\n      name: \"CGDK2 Battery Level\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Calibration Data from EZO Sensor\nDESCRIPTION: Lambda function to request calibration data from an EZO sensor, triggering the on_calibration action when complete.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ezo.rst#2025-04-21_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\nid(ph_ezo).get_calibration();\n```\n\n----------------------------------------\n\nTITLE: Display Lambda with Online Image and Colors\nDESCRIPTION: This YAML snippet extends the previous example by demonstrating how to use an online image with custom front and back colors on a monochrome display. The image is drawn with the specified colors 'OFF' and 'ON'.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/online_image.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndisplay:\n  - platform: ...\n    id: my_display\n    # ...\n    lambda: |-\n      // Draw the image my_image at position [x=0,y=0]\n      // with front color \"OFF\" and back color \"ON\"\n      it.image(0, 0, id(my_online_image), COLOR_OFF, COLOR_ON);\n```\n\n----------------------------------------\n\nTITLE: Setting PID Control Parameters Manually in YAML\nDESCRIPTION: Implementation of the climate.pid.set_control_parameters action to manually set new values for the PID controller parameters during runtime.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/climate/pid.rst#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - climate.pid.set_control_parameters:\n      id: pid_climate\n      kp: 0.0\n      ki: 0.0\n      kd: 0.0\n```\n\n----------------------------------------\n\nTITLE: Time Period Configuration in YAML\nDESCRIPTION: Illustrates different ways to specify time periods in ESPHome configurations, including microseconds, milliseconds, seconds, minutes, hours, and combined formats.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/configuration-types.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsome_config_option:\n  some_time_option: 1000us  # 1000 microseconds = 1ms\n  some_time_option: 1000ms  # 1000 milliseconds\n  some_time_option: 1.5s  # 1.5 seconds\n  some_time_option: 0.5min  # half a minute\n  some_time_option: 2h  # 2 hours\n\n  # Make sure you wrap these in quotes\n  some_time_option: '2:01'  # 2 hours 1 minute\n  some_time_option: '2:01:30'  # 2 hours 1 minute 30 seconds\n\n  # 10ms + 30s + 25min + 3h\n  some_time_option:\n    milliseconds: 10\n    seconds: 30\n    minutes: 25\n    hours: 3\n    days: 0\n\n  # for all 'update_interval' options, also\n  update_interval: never  # never update\n  update_interval: 0ms  # update in every loop() iteration\n  update_interval: always # same as 0ms\n```\n\n----------------------------------------\n\nTITLE: Configuring FastLED Clockless Light in ESPHome\nDESCRIPTION: Example configuration for setting up a FastLED clockless light using the WS2811 chipset. Specifies the chipset, pin, number of LEDs, RGB order, and name for the light component.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/light/fastled.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nlight:\n  - platform: fastled_clockless\n    chipset: WS2811\n    pin: GPIOXX\n    num_leds: 60\n    rgb_order: BRG\n    name: \"FastLED WS2811 Light\"\n```\n\n----------------------------------------\n\nTITLE: Configuring I2S Audio Microphone in YAML\nDESCRIPTION: Example YAML configuration for the I2S audio microphone component, showing the new required fields for devices like the M5Stack Atom Echo.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/changelog/2023.5.0.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmicrophone:\n  platform: i2s_audio\n  i2s_din_pin: GPIO23\n  adc_type: external\n  pdm: false\n```\n\n----------------------------------------\n\nTITLE: Fixed Passkey BLE Authentication Configuration\nDESCRIPTION: Configuration for secure BLE connection using a fixed passkey. Sets the ESP32 I/O capability to keyboard_only and configures a BLE client that responds to passkey requests with a predefined passkey of 123456.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/ble_client.rst#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nesp32_ble:\n  io_capability: keyboard_only\n\nesp32_ble_tracker:\n\nble_client:\n  - mac_address: XX:XX:XX:XX:XX:XX\n    id: pvvx_ble_display\n    on_passkey_request:\n      then:\n        - logger.log: \"Authenticating with passkey\"\n        - ble_client.passkey_reply:\n            id: pvvx_ble_display\n            passkey: 123456\n```\n\n----------------------------------------\n\nTITLE: Configuring Modbus Controller Text Sensor in YAML\nDESCRIPTION: Example configuration for a modbus controller text sensor that reads holding register 1002 and converts numeric values to descriptive text states. Uses HEXBYTES encoding and includes a lambda function for value transformation.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/text_sensor/modbus_controller.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntext_sensor:\n  - platform: modbus_controller\n    modbus_controller_id: modbus_device\n    id: reg_1002_text\n    bitmask: 0\n    register_type: holding\n    address: 1002\n    raw_encode: HEXBYTES\n    name: Register 1002 (Text)\n    lambda: |-\n      uint16_t value = modbus_controller::word_from_hex_str(x, 0);\n      switch (value) {\n        case 1: return std::string(\"ready\");\n        case 2: return std::string(\"EV is present\");\n        case 3: return std::string(\"charging\");\n        case 4: return std::string(\"charging with ventilation\");\n        default: return std::string(\"Unknown\");\n      }\n      return x;\n```\n\n----------------------------------------\n\nTITLE: Base Cover Configuration in YAML\nDESCRIPTION: Basic YAML configuration schema for ESPHome cover components including device class, name, and optional parameters.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/cover/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncover:\n  - platform: ...\n    device_class: garage\n```\n\n----------------------------------------\n\nTITLE: Configuring Uponor Smatrix Climate Component in YAML\nDESCRIPTION: YAML configuration for setting up a climate component for an Uponor Smatrix thermostat in ESPHome.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/uponor_smatrix.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nclimate:\n  - platform: uponor_smatrix\n    address: 0xDE13\n    name: Thermostat Living Room\n```\n\n----------------------------------------\n\nTITLE: Checking Fan Direction in ESPHome Lambda\nDESCRIPTION: This code snippet demonstrates how to retrieve the fan direction using a lambda function. It compares the fan direction with 'FanDirection::FORWARD' to branch the logic.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/fan/index.rst#2025-04-21_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n// Within lambda, get the fan direction and conditionally do something\nif (id(my_fan).direction == FanDirection::FORWARD) {\n  // Fan direction is forward, do something here\n} else {\n  // Fan direction is reverse, do something here\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GPIO Components for LibreTiny in ESPHome\nDESCRIPTION: YAML configuration examples for setting up various GPIO-based components like switches, sensors, and lights using LibreTiny platform in ESPHome. This demonstrates the use of different pin naming conventions.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/libretiny.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# GPIO switch on P26/GPIO26 (BK72xx example)\nswitch:\n  - platform: gpio\n    name: Relay 1\n    pin: P26\n\n# GPIO binary sensor on PA12 (RTL87xx example)\nbinary_sensor:\n  - platform: gpio\n    name: \"Pin PA12\"\n    pin: PA12\n\n# ADC reading (BK72xx example)\nsensor:\n  - platform: adc\n    pin: ADC3\n    name: \"Battery Level\"\n\n# PWM component\noutput:\n  - platform: libretiny_pwm\n    pin: PWM2\n    frequency: 1000 Hz\n    id: pwm_output\n# using light with the PWM\nlight:\n  - platform: monochromatic\n    output: pwm_output\n    name: \"Kitchen Light\"\n\n# Tuya MCU on UART1 (BK72xx example)\nuart:\n  rx_pin: RX1\n  tx_pin: TX1\n  baud_rate: 9600\ntuya:\n```\n\n----------------------------------------\n\nTITLE: Battery Charging Animation in LVGL\nDESCRIPTION: Configuration for an animated battery charging indicator using LVGL's animimg widget. Uses a sequence of MaterialDesignIcons battery images to create a charging animation effect.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/cookbook/lvgl.rst#2025-04-21_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n  - file: mdi:battery-10\n    id: batt_10\n    resize: 20x20\n  - file: mdi:battery-20\n    id: batt_20\n    resize: 20x20\n  - file: mdi:battery-30\n    id: batt_30\n    resize: 20x20\n  - file: mdi:battery-40\n    id: batt_40\n    resize: 20x20\n  - file: mdi:battery-50\n    id: batt_50\n    resize: 20x20\n  - file: mdi:battery-60\n    id: batt_60\n    resize: 20x20\n  - file: mdi:battery-70\n    id: batt_70\n    resize: 20x20\n  - file: mdi:battery-80\n    id: batt_80\n    resize: 20x20\n  - file: mdi:battery-90\n    id: batt_90\n    resize: 20x20\n  - file: mdi:battery\n    id: batt_full\n    resize: 20x20\n  - file: mdi:battery-outline\n    id: batt_empty\n    resize: 20x20\n\nlvgl:\n    ...\n    pages:\n      - id: battery_page\n        widgets:\n          - animimg:\n              align: TOP_RIGHT\n              y: 41\n              x: -10\n              id: ani_battery_charging\n              src: [ \n                batt_empty, \n                batt_10, \n                batt_20, \n                batt_30, \n                batt_40, \n                batt_50, \n                batt_60, \n                batt_70, \n                batt_80, \n                batt_90, \n                batt_full\n                ]\n              duration: 2200ms\n```\n\n----------------------------------------\n\nTITLE: Configuring TT21100 Touchscreen in ESPHome\nDESCRIPTION: Basic YAML configuration for setting up a TT21100 touchscreen controller. Requires IÂ²C setup and defines interrupt and reset pins for the touchscreen interface.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/touchscreen/tt21100.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntouchscreen:\n  platform: tt21100\n  id: my_touchscreen\n  interrupt_pin: GPIOXX\n  reset_pin: GPIOXX\n```\n\n----------------------------------------\n\nTITLE: Configuring MAX17043 sensor in ESPHome\nDESCRIPTION: This configuration snippet demonstrates how to set up the MAX17043 sensor platform in ESPHome to monitor battery voltage and level. It defines the i2c_id to associate with the IÂ²C bus and creates sensors for battery voltage and percentage remaining.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/max17043.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"# Example configuration entry\nsensor:\n  - platform: max17043\n    id: max17043_id\n    i2c_id: i2c_max17043\n    battery_voltage:\n      name: \\\"Battery Voltage\\\"\n    battery_level:\n      name: \\\"Battery\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Absolute Humidity Sensor in ESPHome\nDESCRIPTION: Example YAML configuration for setting up an absolute humidity sensor with temperature and humidity sources. Allows specifying temperature and humidity sensor references with optional equation selection.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/absolute_humidity.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: absolute_humidity\n    name: Absolute Humidity\n    temperature: air_temperature\n    humidity: relative_humidity\n\n  # Use any temperature and relative humidity source, e.g. a BME280:\n  - platform: ...\n    temperature:\n      name: Temperature\n      id: air_temperature\n    humidity:\n      name: Relative Humidity\n      id: relative_humidity\n```\n\n----------------------------------------\n\nTITLE: Setting Up RuuviTag Devices with ESPHome YAML\nDESCRIPTION: This YAML configuration snippet is used for initial device setup to scan for RuuviTag devices using the ESP32. It enables the 'ruuvi_ble' component alongside the BLE tracker, allowing the ESP32 to identify nearby RuuviTag devices and parse their BLE broadcast messages.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ruuvitag.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nesp32_ble_tracker:\n\nruuvi_ble:\n```\n\n----------------------------------------\n\nTITLE: Handling Page Change in Nextion Display\nDESCRIPTION: This code demonstrates how to handle a page change event on a Nextion display, updating components based on the new page ID.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/nextion.rst#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\non_page:\n  then:\n    - lambda: |-\n        switch (x) {\n          case 0x02: // wifi_qr_page\n            // Manually trigger update for controls on page 0x02 here\n            id(disp).set_component_text_printf(\"qr_wifi\", \"WIFI:T:nopass;S:%s;P:;;\", wifi::global_wifi_component->get_ap().get_ssid().c_str());\n            break;\n        }\n```\n\n----------------------------------------\n\nTITLE: Cover Open Trigger Configuration\nDESCRIPTION: YAML configuration for triggering actions when cover reaches fully open state.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/cover/index.rst#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ncover:\n  - platform: template  # or any other platform\n    # ...\n    on_open:\n      - logger.log: \"Cover is Open!\"\n```\n\n----------------------------------------\n\nTITLE: Select Configuration for Seeed MR60FDA2\nDESCRIPTION: This YAML snippet configures selectable parameters for the MR60FDA2, allowing users to set installation height, height threshold, and sensitivity. Each parameter is crucial for accurately detecting falls and people.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/seeed_mr60fda2.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n\"    select:\\n      - platform: seeed_mr60fda2\\n        install_height:\\n          name: \\\"Set Install Height\\\"\\n        height_threshold:\\n          name: \\\"Set Height Threshold\\\"\\n        sensitivity:\\n          name: \\\"Set Sensitivity\\\"\\n\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Status Binary Sensor in ESPHome\nDESCRIPTION: Basic configuration example for setting up a status binary sensor that monitors the connection state of an ESPHome node. The sensor will report the online/offline status to Home Assistant.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/status.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nbinary_sensor:\n  - platform: status\n    name: \"Living Room Status\"\n```\n\n----------------------------------------\n\nTITLE: Configuring UART for PM1006 with ESPHome\nDESCRIPTION: Demonstrates setting up the UART interface for the PM1006 sensor using ESPHome. Ensure that the correct pins are used and that the baud rate is set to 9600. No update interval is needed in the default IKEA setup.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/pm1006.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nuart:\n  rx_pin: D2\n  baud_rate: 9600\n\nsensor:\n  - platform: pm1006\n    pm_2_5:\n      name: \"Particulate Matter 2.5Âµm Concentration\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Inkplate Display in ESPHome\nDESCRIPTION: Minimal configuration for setting up an Inkplate 6 e-paper display with ESPHome, including required MCP23017 pins and display parameters.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/inkplate6.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example minimal configuration entry\n\nmcp23017:\n  - id: mcp23017_hub\n    address: 0x20\n\ndisplay:\n- platform: inkplate6\n  id: inkplate_display\n  greyscale: false\n  partial_updating: false\n  update_interval: 60s\n  model: inkplate_6\n\n  ckv_pin: 32\n  sph_pin: 33\n  gmod_pin:\n    mcp23xxx: mcp23017_hub\n    number: 1\n  gpio0_enable_pin:\n    mcp23xxx: mcp23017_hub\n    number: 8\n  oe_pin:\n    mcp23xxx: mcp23017_hub\n    number: 0\n  spv_pin:\n    mcp23xxx: mcp23017_hub\n    number: 2\n  powerup_pin:\n    mcp23xxx: mcp23017_hub\n    number: 4\n  wakeup_pin:\n    mcp23xxx: mcp23017_hub\n    number: 3\n  vcom_pin:\n    mcp23xxx: mcp23017_hub\n    number: 5\n```\n\n----------------------------------------\n\nTITLE: TM1637 Digital Clock Implementation\nDESCRIPTION: Example configuration for creating a digital clock with flashing colon using TM1637 display and Home Assistant time integration.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/tm1637.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntime:\n  - platform: homeassistant\n    id: homeassistant_time\n\ndisplay:\n  platform: tm1637\n  clk_pin: D6\n  dio_pin: D5\n  update_interval: 500ms\n  lambda: |-\n      static int i = 0;\n      i++;\n      if ((i % 2) == 0)\n        it.strftime(\"%H.%M\", id(homeassistant_time).now());\n      else\n        it.strftime(\"%H%M\", id(homeassistant_time).now());\n```\n\n----------------------------------------\n\nTITLE: Configuring Grid Layout in LVGL with ESPHome\nDESCRIPTION: Example configuration for creating a grid layout in LVGL. The example shows how to define a grid with custom row/column sizes and position an image widget within that grid.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/index.rst#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n# Example grid layout\n\n- obj:\n    layout:\n      type: grid\n      grid_row_align: end\n      grid_rows: [25px, fr(1), content]\n      grid_columns: [40, fr(1), fr(1)]\n      pad_row: 6px\n      pad_column: 0\n    widgets:\n      - image:\n          grid_cell_row_pos: 0\n          grid_cell_column_pos: 0\n```\n\n----------------------------------------\n\nTITLE: LVGL Style Inheritance Example\nDESCRIPTION: Demonstrates style inheritance with indicator arc colors and state-based styles\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/index.rst#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nmin_value: 1\nmax_value: 100\nindicator:\n  arc_color: 0xF000FF\n  pressed:\n    arc_color: 0xFFFF00\n  focused:\n    arc_color: 0x808080\n```\n\n----------------------------------------\n\nTITLE: Configuring DAC7678 Output Channels in ESPHome YAML\nDESCRIPTION: This snippet shows how to configure individual output channels for the DAC7678 in ESPHome using YAML. Each output channel is associated with a DAC7678 hub ID and a specific channel number (0-7). An ID is required for each channel to allow for control in ESPHome.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/output/dac7678.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n\"# Individual outputs\noutput:\n  - platform: dac7678\n    dac7678_id: 'dac7678_hub1'\n    channel: 0\"\n```\n\n----------------------------------------\n\nTITLE: Configuring CircuitSetup 6-channel ATM90E32 with Power Calculation in ESPHome\nDESCRIPTION: This configuration example demonstrates a CircuitSetup 6-channel setup without jumpers jp9-jp11 joined or for meter versions before 1.4. It includes voltage and current sensors for multiple phases and calculates power using template sensors.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/atm90e32.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nsubstitutions:\n  disp_name: 6C\n  update_time: 10s\n  current_cal: '27961'\n\nspi:\n  clk_pin: 18\n  miso_pin: 19\n  mosi_pin: 23\nsensor:\n  - platform: atm90e32\n    cs_pin: 5\n    phase_a:\n      voltage:\n        name: ${disp_name} Volts A\n        id: ic1Volts\n        accuracy_decimals: 1\n      current:\n        name: ${disp_name} CT1 Amps\n        id: ct1Amps\n      gain_voltage: 7305\n      gain_ct: ${current_cal}\n    phase_b:\n      current:\n        name: ${disp_name} CT2 Amps\n        id: ct2Amps\n      gain_ct: ${current_cal}\n    phase_c:\n      current:\n        name: ${disp_name} CT3 Amps\n        id: ct3Amps\n      gain_ct: ${current_cal}\n    frequency:\n      name: ${disp_name} Freq A\n    line_frequency: 60Hz\n    current_phases: 3\n    gain_pga: 1X\n    update_interval: ${update_time}\n  - platform: atm90e32\n    cs_pin: 4\n    phase_a:\n      voltage:\n        name: ${disp_name} Volts B\n        id: ic2Volts\n        accuracy_decimals: 1\n      current:\n        name: ${disp_name} CT4 Amps\n        id: ct4Amps\n      gain_voltage: 7305\n      gain_ct: ${current_cal}\n    phase_b:\n      current:\n        name: ${disp_name} CT5 Amps\n        id: ct5Amps\n      gain_ct: ${current_cal}\n    phase_c:\n      current:\n        name: ${disp_name} CT6 Amps\n        id: ct6Amps\n      gain_ct: ${current_cal}\n    frequency:\n      name: ${disp_name} Freq B\n    line_frequency: 60Hz\n    current_phases: 3\n    gain_pga: 1X\n    update_interval: ${update_time}\n\n#Watts per channel\n  - platform: template\n    name: ${disp_name} CT1 Watts\n    id: ct1Watts\n    lambda: return id(ct1Amps).state * id(ic1Volts).state;\n    accuracy_decimals: 0\n    unit_of_measurement: W\n    icon: \"mdi:flash-circle\"\n    update_interval: ${update_time}\n  - platform: template\n    name: ${disp_name} CT2 Watts\n    id: ct2Watts\n    lambda: return id(ct2Amps).state * id(ic1Volts).state;\n    accuracy_decimals: 0\n    unit_of_measurement: W\n    icon: \"mdi:flash-circle\"\n    update_interval: ${update_time}\n  - platform: template\n    name: ${disp_name} CT3 Watts\n    id: ct3Watts\n    lambda: return id(ct3Amps).state * id(ic1Volts).state;\n    accuracy_decimals: 0\n    unit_of_measurement: W\n    icon: \"mdi:flash-circle\"\n    update_interval: ${update_time}\n  - platform: template\n    name: ${disp_name} CT4 Watts\n    id: ct4Watts\n    lambda: return id(ct4Amps).state * id(ic2Volts).state;\n    accuracy_decimals: 0\n    unit_of_measurement: W\n    icon: \"mdi:flash-circle\"\n    update_interval: ${update_time}\n  - platform: template\n    name: ${disp_name} CT5 Watts\n    id: ct5Watts\n    lambda: return id(ct5Amps).state * id(ic2Volts).state;\n    accuracy_decimals: 0\n    unit_of_measurement: W\n    icon: \"mdi:flash-circle\"\n    update_interval: ${update_time}\n  - platform: template\n    name: ${disp_name} CT6 Watts\n    id: ct6Watts\n    lambda: return id(ct6Amps).state * id(ic2Volts).state;\n    accuracy_decimals: 0\n    unit_of_measurement: W\n    icon: \"mdi:flash-circle\"\n    update_interval: ${update_time}\n#Total Amps\n  - platform: template\n    name: ${disp_name} Total Amps\n    id: totalAmps\n    lambda: return id(ct1Amps).state + id(ct2Amps).state + id(ct3Amps).state + id(ct4Amps).state + id(ct5Amps).state + id(ct6Amps).state ;\n    accuracy_decimals: 2\n    unit_of_measurement: A\n    icon: \"mdi:flash\"\n    update_interval: ${update_time}\n#Total Watts\n  - platform: template\n    name: ${disp_name} Total Watts\n    id: totalWatts\n    lambda: return id(totalAmps).state * id(ic1Volts).state;\n    accuracy_decimals: 1\n    unit_of_measurement: W\n    icon: \"mdi:flash-circle\"\n    update_interval: ${update_time}\n#kWh\n  - platform: total_daily_energy\n```\n\n----------------------------------------\n\nTITLE: Configuring LVGL QR Code Widget\nDESCRIPTION: Example configuration for an LVGL QR code widget with size, colors and text content.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/widgets.rst#2025-04-21_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\n- qrcode:\n    id: lv_qr\n    size: 100\n    light_color: whitesmoke\n    dark_color: steelblue\n    text: esphome.io\n\non_...:\n  then:\n    - lvgl.qrcode.update:\n        id: lv_qr\n        text: home-assistant.io\n```\n\n----------------------------------------\n\nTITLE: Color Configuration for SSD1351 Display\nDESCRIPTION: Example showing how to configure and use custom colors with the SSD1351 display, including drawing a colored rectangle.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/ssd1351.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncolor:\n  - id: my_red\n    red: 100%\n    green: 3%\n    blue: 5%\n\n...\n\ndisplay:\n    ...\n    lambda: |-\n      it.rectangle(0,  0, it.get_width(), it.get_height(), id(my_red));\n```\n\n----------------------------------------\n\nTITLE: Configuring JSN-SR04T Sensor in ESPHome - YAML\nDESCRIPTION: This YAML configuration snippet shows how to set up a JSN-SR04T sensor in ESPHome. The sensor platform is specified as \"jsn_sr04t\" with a name attribute and an optional update_interval parameter. Dependencies include having ESPHome installed and a properly configured UART connection at 9600 baud. The expected input includes the correct platform type, while the output is the measured distance at specified intervals.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/jsn_sr04t.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\\nsensor:\\n  - platform: \\\"jsn_sr04t\\\"\\n    name: \\\"Distance\\\"\\n    update_interval: 1s\n```\n\n----------------------------------------\n\nTITLE: Configuring SSD1327 OLED Display with SPI\nDESCRIPTION: Example configuration for connecting SSD1327 OLED display via SPI bus with basic display output.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/ssd1327.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nspi:\n  clk_pin: D0\n  mosi_pin: D1\n\ndisplay:\n  - platform: ssd1327_spi\n    model: \"SSD1327 128x128\"\n    cs_pin: D2\n    dc_pin: D3\n    reset_pin: D4\n    lambda: |-\n      it.print(0, 0, id(font), \"Hello World!\");\n```\n\n----------------------------------------\n\nTITLE: Configuring MMC5603 Magnetometer in ESPHome using YAML\nDESCRIPTION: This YAML configuration snippet demonstrates how to set up an MMC5603 magnetometer with ESPHome. It includes the specification of the IÂ²C address, field strengths for X, Y, and Z axes, heading measurement, and update intervals. Dependencies include the setup of the IÂ²C bus within the ESPHome configuration. The default IÂ²C address is 0x1E, but it can be changed as needed.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/mmc5603.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: mmc5603 \n    address: 0x30\n    field_strength_x:\n      name: \"MMC5603 Field Strength X\"\n    field_strength_y:\n      name: \"MMC5603 Field Strength Y\"\n    field_strength_z:\n      name: \"MMC5603 Field Strength Z\"\n    heading:\n      name: \"MMC5603 Heading\"\n    update_interval: 60s\n```\n\n----------------------------------------\n\nTITLE: Setting MQTT Broker Address - YAML\nDESCRIPTION: This snippet configures the MQTT client to set the broker address using a lambda function. It requires that the MQTT component has been defined earlier with an ID.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/mqtt.rst#2025-04-21_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nrestore_value: yes\nmax_restore_data_length: 24\ninitial_value: '\"192.168.1.2\"'\n\n    on_...:\n      then:\n        - lambda: !lambda id(mqtt_id).set_broker_address(id(broker_address));\n        - mqtt.enable:\n```\n\n----------------------------------------\n\nTITLE: Configuring a Template Switch in ESPHome YAML\nDESCRIPTION: Example configuration for creating a template switch that uses a binary sensor state to determine its own state, with different actions for turning on and off.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/switch/template.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nswitch:\n  - platform: template\n    name: \"Template Switch\"\n    lambda: |-\n      if (id(some_binary_sensor).state) {\n        return true;\n      } else {\n        return false;\n      }\n    turn_on_action:\n      - switch.turn_on: switch2\n    turn_off_action:\n      - switch.turn_on: switch1\n```\n\n----------------------------------------\n\nTITLE: Configuring ADC128S102 Component in ESPHome\nDESCRIPTION: Basic configuration for initializing the ADC128S102 component with SPI communication. Requires specifying a chip select pin and component ID.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/adc128s102.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nadc128s102:\n  cs_pin: GPIOXX\n  id: my_adc\n```\n\n----------------------------------------\n\nTITLE: Configuring MAX6956 as LED Driver with Individual Current Management for RGB LEDs\nDESCRIPTION: This snippet provides a configuration for using the MAX6956 as an LED driver for RGB LEDs, allowing individual brightness control for each color. It includes necessary IÂ²C settings and individual output definitions.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/max6956.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ni2c:\n  id: bus_a\n  sda: GPIOXX\n  scl: GPIOXX\n\nmax6956:\n  - id: max6956_1\n    address: 0x40\n    i2c_id: bus_a\n    brightness_mode: segment\n\nswitch:\n  - platform: template\n    name: \"Led Red\"\n    id: MaxOut4\n    optimistic: true\n    turn_on_action:\n      - output.turn_on: maxOut_pin4\n    turn_off_action:\n      - output.turn_off: maxOut_pin4\n\n  - platform: template\n    name: \"Led Green\"\n    id: MaxOut5\n    optimistic: true\n    turn_on_action:\n      - output.turn_on: maxOut_pin5\n    turn_off_action:\n      - output.turn_off: maxOut_pin5\n\n  - platform: template\n    name: \"Led Blue\"\n    id: MaxOut6\n    optimistic: true\n    turn_on_action:\n      - output.turn_on: maxOut_pin6\n    turn_off_action:\n      - output.turn_off: maxOut_pin6\n\nnumber:\n  - platform: template\n    name: \"Number Red\"\n    id: number_LedRed\n    optimistic: true\n    min_value: 0\n    max_value: 100\n    initial_value: 10\n    step: 1\n    mode: slider\n    on_value:\n      - output.set_level:\n          id: maxOut_pin4\n          level: !lambda return x/100;\n\n  - platform: template\n    name: \"Number Green\"\n    id: number_LedGreen\n    optimistic: true\n    min_value: 0\n    max_value: 100\n    initial_value: 10\n    step: 1\n    mode: slider\n    on_value:\n      - output.set_level:\n          id: maxOut_pin5\n          level: !lambda return x/100;\n\n  - platform: template\n    name: \"Number Blue\"\n    id: number_LedBlue\n    optimistic: true\n    min_value: 0\n    max_value: 100\n    initial_value: 10\n    step: 1\n    mode: slider\n    on_value:\n      - output.set_level:\n          id: maxOut_pin6\n          level: !lambda return x/100;\n\noutput:\n  - platform: max6956\n    pin: 4\n    id: maxOut_pin4\n  - platform: max6956\n    pin: 5\n    id: maxOut_pin5\n  - platform: max6956\n    pin: 6\n    id: maxOut_pin6\n\nlight:\n  - platform: rgb\n    id: Light_1\n    default_transition_length: 0.1s\n    gamma_correct: 1\n    red: maxOut_pin4\n    green: maxOut_pin5\n    blue: maxOut_pin6\n```\n\n----------------------------------------\n\nTITLE: Fingerprint Reader Password Configuration\nDESCRIPTION: YAML configuration for setting and updating the password on a Grow Fingerprint Reader to enhance security.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/fingerprint_grow.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nfingerprint_grow:\n  password: 0x275FE3D2      # Existing password, can be omitted if it's the default of 0x00\n  new_password: 0x72AB96CD  # New password\n```\n\n----------------------------------------\n\nTITLE: Joining Multiple LED Lights into One Partition in ESPHome\nDESCRIPTION: This YAML configuration shows how to combine multiple LED lights (both addressable and non-addressable) into a single partition light. It includes examples of using segments from different light sources and incorporating a single non-addressable light.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/light/partition.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nlight:\n  - platform: partition\n    name: \"Partition Light\"\n    segments:\n      - id: light1\n        from: 0\n        to: 9\n      - id: light2\n        from: 0\n        to: 9\n      - single_light_id: light3\n\n  - platform: fastled_clockless\n    id: light1\n    internal: true\n    # Other settings\n\n  - platform: fastled_clockless\n    id: light2\n    internal: true\n    # Other settings\n\n  - platform: rgb\n    id: light3\n    internal: true\n    # Other settings\n```\n\n----------------------------------------\n\nTITLE: Configuring EKTF2232 Touchscreen in ESPHome\nDESCRIPTION: Basic YAML configuration for setting up the EKTF2232 touchscreen controller. Requires I2C setup and defines the interrupt and RTS pin connections for the touchscreen controller.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/touchscreen/ektf2232.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\ntouchscreen:\n  - platform: ektf2232\n    interrupt_pin: GPIOXX\n    rts_pin: GPIOXX\n```\n\n----------------------------------------\n\nTITLE: Resetting Total Pulse Count\nDESCRIPTION: This snippet details an action to reset the total pulse count of the pulse meter, allowing for manual adjustment of the total based on the user's requirements.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/pulse_meter.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napi:\n  actions:\n    - action: set_total\n      variables:\n        new_total: int\n      then:\n        - pulse_meter.set_total_pulses:\n            id: sensor_pulse_meter\n            value: !lambda 'return new_total;'\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Packages from Git in ESPHome\nDESCRIPTION: This YAML snippet provides examples of how to configure ESPHome to include packages from a remote Git repository. It showcases both shorthand and detailed syntax for including specific files and using optional variables for customization. Note that substitutions are used instead of secrets.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/packages.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Git repo examples\npackages:\n  # shorthand form github://username/repository/[folder/]file-path.yml[@branch-or-tag]\n  remote_package_shorthand: github://esphome/non-existant-repo/file1.yml@main\n\n  remote_package_files:\n    url: https://github.com/esphome/non-existant-repo\n    files: [file1.yml, file2.yml]  # optional; if not specified, all files will be included\n    ref: main  # optional\n    refresh: 1d  # optional\n  \n  remote_package_files2:\n    url: https://github.com/esphome/non-existant-repo\n    files:\n      - path: file1.yml\n        vars:\n          a: 1\n          b: 2\n      - path: file1.yml #Same file can be specified multiple times with different vars.\n        vars:\n          a: 3\n          b: 4\n      - file2.yml\n    ref: main  # optional\n    refresh: 1d  # optional\n```\n\n----------------------------------------\n\nTITLE: GPIO Switch Configuration\nDESCRIPTION: YAML configuration for adding a simple GPIO switch component with name and pin assignment\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/getting_started_command_line.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nswitch:\n  - platform: gpio\n    name: \"Living Room Dehumidifier\"\n    pin: GPIO5\n```\n\n----------------------------------------\n\nTITLE: pH Sensor Calibration Reset Configuration\nDESCRIPTION: Configuration for resetting the current calibration settings of the pH sensor to default values.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ufire_ise.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: ufire_ise\n    id: ufire_ise_board\n    # ...\n\n# in some trigger\non_...:\n  - sensor.ufire_ise_board.reset:\n      id: ufire_ise_board\n```\n\n----------------------------------------\n\nTITLE: Web Server Version 3 Entity Grouping Configuration in YAML\nDESCRIPTION: Configuration for grouping entities in custom groups with sorting in web server version 3.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/web_server.rst#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nweb_server:\n  version: 3\n  sorting_groups:\n    - id: sorting_group_time_settings\n      name: \"Time Settings\"\n      sorting_weight: 10\n    - id: sorting_group_number_settings\n      name: \"Number settings\"\n      sorting_weight: 20\n      \ndatetime:\n  - platform: template\n    ...\n    web_server:\n      sorting_group_id: sorting_group_time_settings\n\nnumber:\n  - platform: template\n  ...\n    web_server:\n      sorting_group_id: sorting_group_number_settings\n```\n\n----------------------------------------\n\nTITLE: Implementing Screen Clipping in ESPHome Display\nDESCRIPTION: Demonstrates how to use screen clipping in ESPHome displays to limit drawing to a specific region. It shows starting and ending clipping, as well as manipulating the clipping region.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/index.rst#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nbinary_sensor:\n  - platform: ...\n    # ...\n    id: my_binary_sensor\n\ncolor:\n  - name: my_red\n    red: 100%\n\ndisplay:\n  - platform: ...\n    # ...\n    lambda: |-\n      if (id(my_binary_sensor).state) {\n        it.print(0, 0, id(my_font), \"state: ON\");\n      } else {\n        it.print(0, 0, id(my_font), \"state: OFF\");\n      }\n      // Shorthand:\n      it.start_clipping(40,0,140,20);\n      it.printf(0, 0, id(my_font), id(my_red), \"State: %s\", id(my_binary_sensor).state ? \"ON\" : \"OFF\");\n      it.end_clipping();\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic Output Switch in ESPHome with YAML\nDESCRIPTION: This example demonstrates how to set up a generic output switch in ESPHome that controls a GPIO output. It defines a GPIO output component and then creates a switch that controls this output.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/switch/output.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\noutput:\n  - platform: gpio\n    pin: GPIOXX\n    id: 'generic_out'\nswitch:\n  - platform: output\n    name: \"Generic Output\"\n    output: 'generic_out'\n```\n\n----------------------------------------\n\nTITLE: Configuring PCF8574 I/O Expander in ESPHome (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to configure the PCF8574 I/O expander in ESPHome, specifying the device ID and address, and setting up an individual GPIO switch. The example also highlights required and optional parameters for the configuration.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/pcf8574.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\npcf8574:\n  - id: 'pcf8574_hub'\n    address: 0x21\n    pcf8575: false\n\n# Individual outputs\nswitch:\n  - platform: gpio\n    name: \"PCF8574 Pin #0\"\n    pin:\n      pcf8574: pcf8574_hub\n      # Use pin number 0\n      number: 0\n      # One of INPUT or OUTPUT\n      mode:\n        output: true\n      inverted: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Steri-Cleaning Action for Haier Climate Device\nDESCRIPTION: YAML configuration to start the 56Â°C steri-cleaning process on a Haier climate device. Only supported by hOn devices.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/climate/haier.rst#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - climate.haier.start_steri_cleaning: device_id\n```\n\n----------------------------------------\n\nTITLE: Checking Time Validity in C++ Lambda\nDESCRIPTION: This code snippet shows how to check if the time is valid within a C++ lambda function in ESPHome.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/time/index.rst#2025-04-21_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nlambda: |-\n    if (id(my_time).now().is_valid()) {\n      //do something here\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring MiCS 4514 Gas Sensor in ESPHome\nDESCRIPTION: This code snippet shows an example configuration for the MiCS 4514 gas sensor in ESPHome. It defines sensor entities for nitrogen dioxide, carbon monoxide, hydrogen, ethanol, methane, and ammonia and sets the update interval to 60 seconds.  The IÂ²C Bus is required to be set up for this sensor to work.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/mics_4514.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\n# Example configuration entry\nsensor:\n  - platform: mics_4514\n    nitrogen_dioxide:\n      name: Nitrogen Dioxide\n    carbon_monoxide:\n      name: Carbon Monoxide\n    hydrogen:\n      name: Hydrogen\n    ethanol:\n      name: Ethanol\n    methane:\n      name: Methane\n    ammonia:\n      name: Ammonia\n    update_interval: 60s\n\n```\n\n----------------------------------------\n\nTITLE: Runtime Log Level Configuration\nDESCRIPTION: Shows how to dynamically set log levels during runtime using the logger.set_level action for both global and tag-specific logging.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/logger.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\non_...: \n  then:\n    - logger.set_level: INFO\n    - logger.set_level:\n        level: DEBUG\n        tag: mqtt.client\n```\n\n----------------------------------------\n\nTITLE: Changing I2C Address in YAML\nDESCRIPTION: This code snippet shows how to change the I2C address of the EZO-PMP pump using the `ezo_pmp.change_i2c_address` action. After changing the address, the ESPHome firmware must be re-uploaded with the new address. The snippet requires `id` and the new `address`.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/ezo_pmp.rst#2025-04-21_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n  - ezo_pmp.change_i2c_address:\n      id: ezo_pmp\n      address: 100\n```\n\n----------------------------------------\n\nTITLE: Basic TM1638 Display Configuration\nDESCRIPTION: Basic configuration example for TM1638 display module showing pin setup, intensity control, and simple text display\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/tm1638.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndisplay:\n    platform: tm1638\n    id: tm1638_display\n    stb_pin: GPIOXX\n    clk_pin: GPIOXX\n    dio_pin: GPIOXX\n    intensity: 5\n    update_interval: 5s\n    lambda: |-\n      it.print(\"0123\");\n```\n\n----------------------------------------\n\nTITLE: Defining External Components in YAML\nDESCRIPTION: Example of how to define external components to be installed from YAML configuration. This allows extending ESPHome functionality with custom components.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/changelog/v1.18.0.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nexternal_components:\n  - source: github://user/repo\n    components: [my_component]\n```\n\n----------------------------------------\n\nTITLE: Transmitting IR Code using Pioneer Protocol in ESPHome Lambda\nDESCRIPTION: This C++ code snippet demonstrates how to transmit an IR code using the Pioneer protocol within an ESPHome lambda function. It encodes the data using the `PioneerProtocol` class and sets the send times before performing the transmission.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/remote_transmitter.rst#2025-04-21_snippet_37\n\nLANGUAGE: cpp\nCODE:\n```\n// Example - transmit using the Pioneer protocol\nauto call = id(my_transmitter).transmit();\nesphome::remote_base::PioneerData data = { rc_code_1, rc_code_2 };\nesphome::remote_base::PioneerProtocol().encode(call.get_data(), data);\ncall.set_send_times(2);\ncall.perform();\n```\n\n----------------------------------------\n\nTITLE: Configuring an LVGL Switch in ESPHome\nDESCRIPTION: Example configuration for creating a switch component using an LVGL widget. This snippet shows how to connect a checkbox widget to an ESPHome switch with proper naming.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/switch/lvgl.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nswitch:\n  - platform: lvgl\n    widget: checkbox_id\n    name: LVGL switch\n```\n\n----------------------------------------\n\nTITLE: Setting Date Values with datetime.date.set Action\nDESCRIPTION: Demonstration of three different ways to set a date value using the datetime.date.set action: using a string format, individual date parts, or a lambda function that returns an ESPTime struct.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/datetime/index.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# String date\n- datetime.date.set:\n    id: my_datetime_date\n    date: \"2023-12-04\"\n\n# Individual date parts\n- datetime.date.set:\n    id: my_datetime_date\n    date:\n      year: 2023\n      month: 12\n      day: 4\n\n# Using a lambda\n- datetime.date.set:\n    id: my_datetime_date\n    date: !lambda |-\n      // Return an ESPTime struct\n      return {.day_of_month = 4, .month = 12, .year = 2023};\n```\n\n----------------------------------------\n\nTITLE: Configuring On Time Trigger in YAML\nDESCRIPTION: This snippet demonstrates how to set up on_time triggers for time-based automations using both key-based and cron-like syntax.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/time/index.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntime:\n  - platform: sntp\n    # ...\n    on_time:\n      # Every 5 minutes\n      - seconds: 0\n        minutes: /5\n        then:\n          - switch.toggle: my_switch\n\n      # Every morning on weekdays\n      - seconds: 0\n        minutes: 30\n        hours: 7\n        days_of_week: MON-FRI\n        then:\n          - light.turn_on: my_light\n\n      # Cron syntax, trigger every 5 minutes\n      - cron: '00 /5 * * * *'\n        then:\n          - switch.toggle: my_switch\n```\n\n----------------------------------------\n\nTITLE: Wiring configuration for a reed switch with pulse counter\nDESCRIPTION: This configuration shows how to wire a reed switch to a GPIO pin with pull-up or pull-down resistors to use it as a pulse counter. Two scenarios are provided for connecting to ground or +3.3V.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/pulse_counter.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# Reed switch between GPIO and GND\nsensor:\n  - platform: pulse_counter\n    pin:\n      number: 12\n      inverted: true\n      mode:\n        input: true\n        pullup: true\n    name: \"Pulse Counter\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# Reed switch between GPIO and +3.3V\nsensor:\n  - platform: pulse_counter\n    pin:\n      number: 12\n      mode:\n        input: true\n        pulldown: true\n    name: \"Pulse Counter\"\n```\n\n----------------------------------------\n\nTITLE: Triggering an Event in YAML Automation\nDESCRIPTION: Example of triggering an event with a specific type from within an automation. This action allows for programmatic triggering of events.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/event/index.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- event.trigger:\n    id: my_event\n    event_type: \"custom_event\"\n```\n\n----------------------------------------\n\nTITLE: Basic DF-Player Configuration in ESPHome\nDESCRIPTION: Minimal configuration example for setting up a DF-Player Mini component in ESPHome.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/dfplayer.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\ndfplayer:\n```\n\n----------------------------------------\n\nTITLE: Configuring MDI Icons as ESPHome Images in YAML\nDESCRIPTION: Example configuration for using Material Design Icons (MDI) in ESPHome with the 'mdi:' prefix. This allows referencing MDI icons directly in your configuration without needing image files.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/changelog/2023.6.0.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n  - file: \"my_image.png\"\n    id: my_image\n  - file: \"mdi:chip\"\n    resize: 32x32\n    id: chip_icon\n```\n\n----------------------------------------\n\nTITLE: Configuring Seeed MR24HPC1 Buttons in YAML\nDESCRIPTION: YAML configuration for restart and custom mode setting buttons for the Seeed MR24HPC1 sensor.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/seeed_mr24hpc1.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nbutton:\n  - platform: seeed_mr24hpc1\n    restart:\n      name: \"Module Restart\"\n    custom_set_end:\n      name: \"End Of Custom Mode Settings\"\n```\n\n----------------------------------------\n\nTITLE: Simple ADE7880 Sensor Configuration\nDESCRIPTION: Example of simple configuration mode for ADE7880 sensor platform with basic voltage, current, power and energy monitoring for a single phase.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ade7880.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: ade7880\n    irq0_pin:\n      number: GPIOXX\n    irq1_pin:\n      number: GPIOXX\n    phase_a:\n      name: Room Heater\n      voltage: Voltage\n      current: Current\n      active_power: Active Power\n      power_factor: Power Factor\n      forward_active_energy: Forward Active Energy\n      reverse_active_energy: Reverse Active Energy\n      calibration:\n        current_gain: 3116628\n        voltage_gain: -757178\n        power_gain: -1344457\n        phase_angle: 188\n```\n\n----------------------------------------\n\nTITLE: Configuring Tuya Dimmer Light in YAML\nDESCRIPTION: This snippet demonstrates how to create a light using a Tuya dimmer in ESPHome. It includes essential configuration options such as dimmer datapoint, minimum value datapoint, and switch datapoint.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/light/tuya.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlight:\n  - platform: \"tuya\"\n    name: \"dim1\"\n    dimmer_datapoint: 3\n    min_value_datapoint: 2\n    switch_datapoint: 1\n```\n\n----------------------------------------\n\nTITLE: Clearing Calibration in YAML\nDESCRIPTION: This YAML snippet indicates how to use the `ezo_pmp.clear_calibration` action to remove any existing calibration settings from the pump. It requires the pump's `id`.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/ezo_pmp.rst#2025-04-21_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n  - ezo_pmp.clear_calibration:\n      id: ezo_pmp\n```\n\n----------------------------------------\n\nTITLE: RTTTL Playback Condition Check - YAML\nDESCRIPTION: This snippet shows how to check if the RTTTL is currently playing using a condition in an automation.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/rtttl.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n\"# In some trigger:\\n  on_...:\\n    if:\\n      condition:\\n        rtttl.is_playing\\n      then:\\n        logger.log: 'Playback is active!'\"\n```\n\n----------------------------------------\n\nTITLE: Digital Clock Implementation\nDESCRIPTION: Configuration for creating a digital clock with flashing colon using TM1638 display and HomeAssistant time source\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/tm1638.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntime:\n  - platform: homeassistant\n    id: homeassistant_time\n\ndisplay:\n  platform: tm1638\n  clk_pin: GPIOXX\n  dio_pin: GPIOXX\n  stb_pin: GPIOXX\n  update_interval: 500ms\n  lambda: |-\n      static int i = 0;\n      i++;\n      if ((i % 2) == 0)\n        it.strftime(\"%H.%M\", id(homeassistant_time).now());\n      else\n        it.strftime(\"%H%M\", id(homeassistant_time).now());\n```\n\n----------------------------------------\n\nTITLE: BLE Client Numeric Comparison Reply Action Configuration\nDESCRIPTION: Configuration for the numeric_comparison_reply action in the BLE client component, used for comparing passkeys during Bluetooth pairing. The action requires an ID of the BLE client and a boolean value to accept or reject the passkey comparison.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/ble_client.rst#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nid: my_ble_client\naccept: True\n```\n\n----------------------------------------\n\nTITLE: LCD Display Rendering Lambda Examples in ESPHome\nDESCRIPTION: Examples of using the lambda function to render content on LCD displays, including positioning text, displaying sensor values with formatting, and showing time information.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/lcd_display.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndisplay:\n  - platform: lcd_gpio # or lcd_pcf8574\n    # ...\n    lambda: |-\n      // Print 0 at the top left\n      it.print(\"0\");\n\n      // Print 1 at the second row and second column.\n      it.print(1, 1, \"1\");\n\n      // Let's write a sensor value (let's assume it's 42.1)\n      it.printf(\"%.1f\", id(my_sensor).state);\n      // Result: \"42.1\" (the dot will appear on the segment showing \"2\")\n\n      // Print a right-padded sensor value with 0 digits after the decimal\n      it.printf(\"Sensor value: %8.0f\", id(my_sensor).state);\n      // Result: \"Sensor value:       42\"\n\n      // Print the current time\n      it.strftime(\"It is %H:%M on %d.%m.%Y\", id(my_time).now());\n      // Result for 10:06 on august 21st 2018 -> \"It is 10:06 on 21.08.2018\"\n\n# (Optional) For displaying time:\ntime:\n- platform: homeassistant\n  id: my_time\n```\n\n----------------------------------------\n\nTITLE: Advanced Code Received Event (Portisch Firmware)\nDESCRIPTION: Configuration for handling advanced RF codes with additional protocol and length information using Portisch firmware\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/rf_bridge.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\non_advanced_code_received:\n  - homeassistant.event:\n      event: esphome.rf_advanced_code_received\n      data:\n        length: !lambda 'return format_hex(data.length);'\n        protocol: !lambda 'return format_hex(data.protocol);'\n        code: !lambda 'return data.code;'\n```\n\n----------------------------------------\n\nTITLE: Condition for Number Value in Range\nDESCRIPTION: This condition checks if a specified number's state falls within a defined range. It can be utilized in automation triggers.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/number/index.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# in a trigger:\non_...:\n  if:\n    condition:\n      number.in_range:\n        id: my_number\n        above: 50.0\n    then:\n      - script.execute: my_script\n```\n\n----------------------------------------\n\nTITLE: Configuring Text Copy in ESPHome\nDESCRIPTION: YAML configuration for creating a copy of an existing text. Requires source_id to specify the original text.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/copy.rst#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ntext:\n  - platform: copy\n    source_id: source_text\n    name: \"Copy of source_text\"\n```\n\n----------------------------------------\n\nTITLE: Volume Over Time Dosing Action in YAML\nDESCRIPTION: Action configuration to have the peristaltic pump dose a specific volume (in milliliters) over a specified duration (in minutes). If the volume is negative, the pump will run backwards.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/ezo_pmp.rst#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n  - ezo_pmp.dose_volume_over_time:\n      id: ezo_pmp\n      volume: 23.4\n      duration: 2\n\n  # Templated\n  - ezo_pmp.dose_volume_over_time:\n      id: ezo_pmp\n      volume: !lambda |-\n        return id(some_volume_sensor).state;\n      duration: !lambda |-\n        return id(some_duration_sensor).state;\n```\n\n----------------------------------------\n\nTITLE: Creating User-Defined Characters for LCD Displays in ESPHome\nDESCRIPTION: Configuration example showing how to create custom characters for LCD displays. The example defines two custom characters at positions 0 and 7, which can be used in display text.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/lcd_display.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndisplay:\n  - platform: lcd_pcf8574\n    id: mydisplay\n    # ...\n    user_characters:\n      - position: 0\n        data:\n          - 0b00000\n          - 0b01010\n          - 0b00000\n          - 0b00100\n          - 0b00100\n          - 0b10001\n          - 0b01110\n          - 0b00000\n      - position: 7\n        data:\n          - 0b00000\n          - 0b01010\n          - 0b00000\n          - 0b00100\n          - 0b00100\n          - 0b00000\n          - 0b01110\n          - 0b10001\n    lambda: |-\n      it.print(\"Hello, world \\x08 \\x07!\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Fan Turn Off Action in YAML\nDESCRIPTION: YAML configuration for turning off a fan using the fan.turn_off action in ESPHome automations.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/fan/index.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - fan.turn_off: fan_1\n\n```\n\n----------------------------------------\n\nTITLE: Configuring IÂ²S Audio Component in ESPHome\nDESCRIPTION: Basic configuration example for setting up the IÂ²S audio component in ESPHome. The example shows how to specify the required LRCLK and BCLK pins for IÂ²S communication on ESP32 devices.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/i2s_audio.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\ni2s_audio:\n  i2s_lrclk_pin: GPIOXX\n  i2s_bclk_pin: GPIOXX\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic DSMR Sensor with Decryption Key\nDESCRIPTION: Example configuration for setting up a DSMR component with a decryption key and basic energy sensors\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/dsmr.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndsmr:\n  decryption_key: !secret decryption_key\n\nsensor:\n  - platform: dsmr\n    energy_delivered_tariff1:\n      name: Energy Consumed Tariff 1\n\ntext_sensor:\n  - platform: dsmr\n    identification:\n      name: \"DSMR Identification\"\n    p1_version:\n      name: \"DSMR Version\"\n```\n\n----------------------------------------\n\nTITLE: Configuring HTU31D Sensor in ESPHome\nDESCRIPTION: Example configuration for adding HTU31D temperature and humidity sensors to an ESPHome project. Requires IÂ²C bus to be set up. Allows optional configuration of temperature and humidity sensor parameters with a default update interval of 60 seconds.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/htu31d.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: htu31d\n    temperature:\n      name: \"Temperature\"\n    humidity:\n      name: \"Humidity\"\n```\n\n----------------------------------------\n\nTITLE: Dimming Light with Button Press Example in ESPHome\nDESCRIPTION: This YAML code shows an example of dimming a light with a button press, including a loop to continuously dim while the button is pressed, specifying relative brightness, transition length, and maximum brightness.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/light/index.rst#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n\"binary_sensor:\n  - platform: gpio\n    # ...\n    id: my_binary_sensor\n    on_press:\n      - while:\n          condition:\n            binary_sensor.is_on: my_binary_sensor\n          then:\n            - light.dim_relative:\n                id: light_1\n                relative_brightness: 5%\n                transition_length: 0.1s\n                brightness_limits:\n                    max_brightness: 90%\n            - delay: 0.1s\"\n```\n\n----------------------------------------\n\nTITLE: Setting up ADC128S102 Sensor in ESPHome\nDESCRIPTION: Configuration for creating an individual sensor using an ADC128S102 channel. Includes update interval, component reference, and channel selection.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/adc128s102.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: adc128s102\n    update_interval: 1s\n    adc128s102_id: my_adc\n    id: freezer_temp_source\n    channel: 0\n```\n\n----------------------------------------\n\nTITLE: Configuring Binary Sensors for SX1509 Keypad Keys in YAML\nDESCRIPTION: This code snippet demonstrates how to set up individual binary sensors for keypad keys using the SX1509 I/O expander in ESPHome. It shows the configuration for two keypad keys, specifying the SX1509 ID, key name, row, and column.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sx1509.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nbinary_sensor:\n  - platform: sx1509\n    sx1509_id: sx1509_hub1\n    name: \"keypadkey_0\"\n    row: 0\n    col: 0\n  - platform: sx1509\n    sx1509_id: sx1509_hub1\n    name: \"keypadkey_1\"\n    row: 0\n    col: 1\n```\n\n----------------------------------------\n\nTITLE: LVGL Widget Event Triggers\nDESCRIPTION: Examples of using LVGL widget event triggers for button press and slider interactions.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/widgets.rst#2025-04-21_snippet_46\n\nLANGUAGE: yaml\nCODE:\n```\n# Example triggers:\n- button:\n    ...\n    on_short_click:\n      then:\n        lvgl.page.show: main_page\n    on_long_press:\n      then:\n        light.toggle: display_backlight\n\n- slider:\n    ...\n    on_release:\n      then:\n        - light.turn_on:\n            id: display_backlight\n            transition_length: 0ms\n            brightness: !lambda return x / 100;\n```\n\n----------------------------------------\n\nTITLE: Defining MicroNova Component in YAML\nDESCRIPTION: This snippet shows how to define the MicroNova component in ESPHome using YAML. It includes configuration variables such as `enable_rx_pin` and `update_interval`, specifying the necessary GPIO pin for RX/TX switching and setting the update interval for sensors.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/micronova.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmicronova:\n  enable_rx_pin: GPIOXX\n```\n\n----------------------------------------\n\nTITLE: Configuring chsc6x Touchscreen in ESPHome YAML\nDESCRIPTION: Basic configuration for setting up a chsc6x touchscreen in ESPHome. It specifies the platform, ID, associated display, and interrupt pin.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/touchscreen/chsc6x.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntouchscreen:\n  platform: chsc6x\n  id: my_touchscreen\n  display: my_display\n  interrupt_pin: GPIO44\n```\n\n----------------------------------------\n\nTITLE: Setting Temperature Compensation Using Another Sensor\nDESCRIPTION: Lambda function to set temperature compensation from another sensor's reading (backward compatibility method).\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ezo.rst#2025-04-21_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\nid(ph_ezo).set_tempcomp_value(id(rtd_ezo).state);\n```\n\n----------------------------------------\n\nTITLE: Transmitting Pioneer IR Codes with YAML\nDESCRIPTION: This snippet sends Pioneer infrared remote codes via a transmitter. It supports optional repeat transmissions, essential for some Pioneer devices. The rc_code_1 is necessary, while rc_code_2 and repeat are optional but recommended for ensuring device responsiveness.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/remote_transmitter.rst#2025-04-21_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - remote_transmitter.transmit_pioneer:\n      rc_code_1: 0xA556\n      rc_code_2: 0xA506\n      repeat:\n        times: 2\n```\n\n----------------------------------------\n\nTITLE: Deleting All Enrolled Fingerprints\nDESCRIPTION: Executes the removal of all fingerprints stored in the system. Primarily used for system resets or preparing for new enrollments.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/fingerprint_grow.rst#2025-04-21_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - fingerprint_grow.delete_all:\n```\n\n----------------------------------------\n\nTITLE: Displaying Images on ESPHome Display\nDESCRIPTION: Lambda function for displaying an image on an ESPHome display at a specific position.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/image.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndisplay:\n  - platform: ...\n    # ...\n    lambda: |-\n      // Draw the image my_image at position [x=0,y=0]\n      it.image(0, 0, id(my_image));\n```\n\n----------------------------------------\n\nTITLE: Advanced Web Server Configuration with Local Assets in YAML\nDESCRIPTION: Configuration for web server version 1 with CSS and JS included from local files, disabling OTA updates.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/web_server.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nweb_server:\n  port: 80\n  version: 1\n  ota: false\n  css_include: \"../../../esphome-docs/_static/webserver-v1.min.css\"\n  css_url: \"\"\n  js_include: \"../../../esphome-docs/_static/webserver-v1.min.js\"\n  js_url: \"\"\n```\n\n----------------------------------------\n\nTITLE: BLE Passkey Request Handler\nDESCRIPTION: Automation for handling BLE device passkey authentication requests\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/ble_client.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nble_client:\n  - mac_address: XX:XX:XX:XX:XX:XX\n    id: ble_itag\n    on_passkey_request:\n      then:\n        - ble_client.passkey_reply:\n            id: ble_itag\n            passkey: 123456\n```\n\n----------------------------------------\n\nTITLE: Stopping BLE Scan in YAML\nDESCRIPTION: This YAML configuration defines an action to stop the BLE scanning process. This is important for managing BLE operations efficiently and ensuring that the scanning does not overload the device.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/esp32_ble_tracker.rst#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nesp32_ble_tracker:\n\n  on_...:\n    - esp32_ble_tracker.stop_scan:\n```\n\n----------------------------------------\n\nTITLE: Implementing H-bridge Fan Brake Action in YAML for ESPHome\nDESCRIPTION: This YAML snippet shows how to implement the brake action for an h-bridge controlled fan in ESPHome. It sets all h-bridge pins high to short the motor's windings and force it to stop.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/fan/hbridge.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - fan.hbridge.brake: my_fan\n```\n\n----------------------------------------\n\nTITLE: LG Climate Configuration\nDESCRIPTION: Configuration example for LG AC units with custom timing parameters for IR signals.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/climate/climate_ir.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclimate:\n  - platform: climate_ir_lg\n    name: \"AC\"\n    sensor: room_temperature\n    header_high: 3265us # AC Units from LG in Brazil, for example use these timings\n    header_low: 9856us\n```\n\n----------------------------------------\n\nTITLE: Generating MD5 Hash on macOS Shell\nDESCRIPTION: This command generates the MD5 hash of a firmware binary file on macOS and saves it to a file. The resulting file can then be used for MD5 checksum verification during the OTA update process.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/ota/http_request.rst#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmd5 -q firmware.ota.bin > firmware.md5\n\n```\n\n----------------------------------------\n\nTITLE: ESP32 BLE Tracker Automation for Service Data\nDESCRIPTION: Example of an automation that processes service data from a specific BLE device and publishes it to a sensor.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/esp32_ble_tracker.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: template\n    name: \"BLE Sensor\"\n    id: ble_sensor\n\nesp32_ble_tracker:\n  on_ble_service_data_advertise:\n    - mac_address: XX:XX:XX:XX:XX:XX\n      service_uuid: 181A\n      then:\n        - lambda: 'id(ble_sensor).publish_state(x[0]);'\n```\n\n----------------------------------------\n\nTITLE: Configuring Zio Ultrasonic Distance Sensor in ESPHome YAML\nDESCRIPTION: Example YAML configuration for integrating a Zio Ultrasonic Distance sensor in ESPHome. The sensor is configured with a name and update interval, and requires an IÂ²C bus setup (not shown).\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/zio_ultrasonic.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: zio_ultrasonic\n    name: \"Distance\"\n    update_interval: 60s\n```\n\n----------------------------------------\n\nTITLE: Configuring on_cleared Trigger for Alarm Panel in YAML\nDESCRIPTION: YAML configuration for adding an on_cleared trigger to an Alarm Control Panel, which activates when the alarm clears from triggered state.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/alarm_control_panel/index.rst#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nalarm_control_panel:\n  # ...\n  on_cleared:\n    then:\n      - logger.log: \"Alarm Cleared!\"\n```\n\n----------------------------------------\n\nTITLE: RF Button Implementation in YAML\nDESCRIPTION: YAML configuration for template buttons that transmit both RC Switch protocol and raw RF codes.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/setting_up_rmt_devices.rst#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nbutton:\\n  - platform: template\\n    name: RF Power Button\\n    optimistic: true\\n    on_press:\\n      - remote_transmitter.transmit_rc_switch_raw:\\n          code: '100010000000000010111110'\\n          protocol: 2\\n          repeat:\\n            times: 10\\n            wait_time: 0s\\n\\nbutton:\\n  - platform: template\\n    name: Raw Code Power Button\\n    on_press:\\n      - remote_transmitter.transmit_raw:\\n          code: [4088, -1542, 1019, -510, 513, -1019, 510, -509, 511, -510, 1020,\\n                 -1020, 1022, -1019, 510, -509, 511, -510, 511, -509, 511, -510,\\n                 1020, -1019, 510, -511, 1020, -510, 512, -508, 510, -1020, 1022]\n```\n\n----------------------------------------\n\nTITLE: Example JSON Output from BLE Scanner\nDESCRIPTION: Sample JSON output from the BLE scanner text sensor. The output includes a timestamp, the BLE device MAC address, signal strength (RSSI), and the device name if available.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/text_sensor/ble_scanner.rst#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"timestamp\":1578254525,\n    \"address\": \"XX:XX:XX:XX:XX:XX\",\n    \"rssi\":\"-80\",\n    \"name\":\"MI Band 2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Template Datetime Components in ESPHome\nDESCRIPTION: Example configurations for template datetime components showing date, time, and datetime implementations with various configuration options including optimistic mode and value restoration.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/datetime/template.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndatetime:\n  # Example Date\n  - platform: template\n    id: my_datetime_date\n    type: date\n    name: Pick a Date\n    optimistic: yes\n    initial_value: \"2024-01-30\"\n    restore_value: true\n\n  # Example Time\n  - platform: template\n    id: my_datetime_time\n    type: time\n    name: Pick a Time\n    optimistic: yes\n    initial_value: \"12:34:56\"\n    restore_value: true\n\n  # Example DateTime\n  - platform: template\n    id: my_datetime\n    type: datetime\n    name: Pick a DateTime\n    optimistic: yes\n    initial_value: \"2024-12-31 12:34:56\"\n    restore_value: true\n```\n\n----------------------------------------\n\nTITLE: Configuring SX1509 I/O Expander with Keypad in YAML\nDESCRIPTION: This snippet shows how to set up the SX1509 I/O expander in ESPHome, including optional keypad configuration. It demonstrates setting the I2C address and configuring keypad parameters such as rows, columns, sleep time, scan time, and debounce time.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sx1509.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsx1509:\n  - id: sx1509_hub1\n    address: 0x3E\n    # If you need a keypad\n    keypad:\n      key_rows: 3\n      key_columns: 4\n      sleep_time: 256\n      scan_time: 2\n      debounce_time: 1\n```\n\n----------------------------------------\n\nTITLE: MQTT JSON Subscribe Lambda in C++\nDESCRIPTION: C++ lambda function for subscribing to JSON-formatted MQTT messages and processing the decoded JSON payload.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/mqtt.rst#2025-04-21_snippet_15\n\nLANGUAGE: cpp\nCODE:\n```\nid(mqtt_client).subscribe_json(\"the/topic\", [=](const std::string &topic, JsonObject root) {\n    // do something with JSON-decoded value root\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up WireGuard Latest Handshake Sensor in ESPHome\nDESCRIPTION: This configuration example shows how to set up a sensor that reports the timestamp of the latest completed WireGuard handshake. Additional sensor options can be added to customize the configuration.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/wireguard.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: wireguard\n    latest_handshake:\n      name: 'WireGuard Latest Handshake'\n```\n\n----------------------------------------\n\nTITLE: Triggering an Event in C++ Lambda\nDESCRIPTION: Example of how to trigger an event with a specific type from within a lambda function. This allows for more complex conditional triggering of events.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/event/index.rst#2025-04-21_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\n// Within lambda, trigger the event.\nid(my_event).trigger(\"custom_event\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Tuya Cover in YAML\nDESCRIPTION: Basic YAML configuration for setting up a Tuya cover motor using position control datapoint. Creates a cover entity named 'motor1' using datapoint 2 for position control.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/cover/tuya.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Create a cover using the datapoint from above\\ncover:\\n  - platform: \"tuya\"\\n    name: \"motor1\"\\n    position_datapoint: 2\n```\n\n----------------------------------------\n\nTITLE: Configuring SML Sensor for Holley DTZ541 Instantaneous Power\nDESCRIPTION: Configuration for a sensor that reads instantaneous power usage from Holley DTZ541 smart meters using the SML protocol and the specific OBIS code for power readings.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sml.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: sml\n    name: \"Instantaneous power\"\n    sml_id: mysml\n    obis_code: \"1-0:16.7.0\"\n    unit_of_measurement: W\n    accuracy_decimals: 0\n    device_class: power\n    state_class: measurement\n```\n\n----------------------------------------\n\nTITLE: Or Filter Configuration in ESPHome\nDESCRIPTION: This configures an 'or' filter, allowing values to pass if they satisfy at least one of the specified conditions. Here, values are passed if they are at least 1 second old (throttle) or if the absolute difference is at least 5.0 (delta).\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/index.rst#2025-04-21_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\n    # Example filters:\n    filters:\n      - or:\n        - throttle: 1s\n        - delta: 5.0\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Pages with ESPHome YAML\nDESCRIPTION: This snippet demonstrates how to configure a display in ESPHome to manage multiple pages, including switching and specific page rendering using lambda functions. It requires ESPHome environment and a compatible display setup.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/index.rst#2025-04-21_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\ndisplay:\n  - platform: ...\n    # ...\n    id: my_display\n    pages:\n      - id: page1\n        lambda: |-\n          it.print(0, 10, id(my_font), \"This is page 1!\");\n      - id: page2\n        lambda: |-\n          it.print(0, 10, id(my_font), \"This is page 2!\");\n```\n\n----------------------------------------\n\nTITLE: ADC Sensor Configuration with Voltage Multiplier for NodeMCUv2\nDESCRIPTION: Example configuration for ADC sensor with voltage multiplier filter to provide accurate readings on NodeMCUv2 boards with built-in voltage divider\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/resistance.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: adc\n    id: source_sensor\n    pin: A0\n    filters:\n      - multiply: 3.3\n```\n\n----------------------------------------\n\nTITLE: TM1621 Display Lambda Function Example\nDESCRIPTION: Example of using lambda functions to format and display sensor values on TM1621 LCD display with temperature and humidity units.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/tm1621.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndisplay:\n  - platform: tm1621\n    # ...\n  lambda: |-\n    it.printf(0, \"%.1f\", id(my_sensor1).state);\n    it.display_celsius(true);\n    it.printf(1, \"%.1f\", id(my_sensor2).state);\n    it.display_humidity(true);\n```\n\n----------------------------------------\n\nTITLE: Configuring on_chime Trigger for Alarm Panel in YAML\nDESCRIPTION: YAML configuration for adding an on_chime trigger to an Alarm Control Panel, which activates when a chime-enabled zone opens.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/alarm_control_panel/index.rst#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nalarm_control_panel:\n  # ...\n  on_chime:\n    then:\n      - logger.log: \"Alarm Chime!\"\n```\n\n----------------------------------------\n\nTITLE: Alternative Costco Feit A19 RGBCT Bulb Configuration\nDESCRIPTION: This configuration provides an alternative setup for a Costco Feit A19 RGBCT bulb, detailing the SM16716 settings, output configurations for red, green, blue, color temperature, and brightness, along with the light component setup for RGBCT control.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/output/sm16716.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n\"sm16716:\n  data_pin: GPIO12\n  clock_pin: GPIO14\n  num_channels: 3\n  num_chips: 1\n\noutput:\n  - platform: sm16716\n    id: output_red\n    channel: 2\n    power_supply: rgb_power\n  - platform: sm16716\n    id: output_green\n    channel: 1\n    power_supply: rgb_power\n  - platform: sm16716\n    id: output_blue\n    channel: 0\n    power_supply: rgb_power\n  - platform: esp8266_pwm\n    id: output_color_temperature\n    inverted: true\n    pin: GPIO5\n  - platform: esp8266_pwm\n    id: output_brightness\n    min_power: 0.05\n    zero_means_zero: true\n    pin: GPIO4\n\nlight:\n  - platform: rgbct\n    name: ${friendly_name}\n    id: outside\n    red: output_red\n    green: output_green\n    blue: output_blue\n    color_temperature: output_color_temperature\n    white_brightness: output_brightness\n    cold_white_color_temperature: 153 mireds\n    warm_white_color_temperature: 370 mireds\n    color_interlock: true\n\npower_supply:\n  - id: rgb_power\n    pin: GPIO13\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Tuya pH Sensor - YAML\nDESCRIPTION: This YAML configuration sets up a Tuya number platform to read a pH sensor value that reports in integer format. A scaling factor is applied to convert the reported value into a floating point range.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/number/tuya.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n    - platform: \"tuya\"\n      name: \"pH Sensor\"\n      number_datapoint: 106\n      min_value: 0.00\n      max_value: 15.00\n      multiply: 100\n```\n\n----------------------------------------\n\nTITLE: Complete RC522 Binary Sensor Configuration\nDESCRIPTION: Full example configuration showing SPI setup with binary sensor for tag detection including pin configuration and update interval.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/rc522.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nspi:\n  clk_pin: D0\n  miso_pin: D1\n  mosi_pin: D2\n\nrc522_spi: # or rc522_i2c\n  cs_pin: D3\n  update_interval: 1s\n\nbinary_sensor:\n  - platform: rc522\n    uid: 74-10-37-94\n    name: \"RC522 RFID Tag\"\n```\n\n----------------------------------------\n\nTITLE: HDC1080 Sensor Configuration with Custom I2C Address\nDESCRIPTION: Alternative configuration demonstrating how to specify a custom I2C address for the HDC1080 sensor, useful for specific sensor variants like the DFRobot CHT8305.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/hdc1080.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: hdc1080\n    temperature:\n      name: \"Outside Temperature\"\n    humidity:\n      name: \"Outside Humidity\"\n    address: 0x40\n    update_interval: 60s\n```\n\n----------------------------------------\n\nTITLE: Configuring Drayton Remote Transmission in YAML\nDESCRIPTION: Configuration for sending Drayton Digistat RF remote codes with address, channel, and command parameters.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/remote_transmitter.rst#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - remote_transmitter.transmit_drayton:\n      address: '0x6180'\n      channel: '0x12'\n      command: '0x02'\n```\n\n----------------------------------------\n\nTITLE: mmWave Settings Configuration Action\nDESCRIPTION: Example of configuring mmWave radar settings including detection segments, output latency, and sensitivity.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/dfrobot_sen0395.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - dfrobot_sen0395.settings:\n      factory_reset: true\n      detection_segments:\n        # Define between one and four segments\n        - [0cm, 3m]\n        - [5.1m, 6.6m]\n      output_latency:\n        delay_after_detect: 0s\n        delay_after_disappear: 0s\n      sensitivity: 7\n```\n\n----------------------------------------\n\nTITLE: Stopping RTTTL Playback Action - YAML\nDESCRIPTION: This snippet provides a simple action to stop the RTTTL playback in your ESPHome configuration.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/rtttl.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n\"on_...:\\n  then:\\n    - rtttl.stop\"\n```\n\n----------------------------------------\n\nTITLE: Volume Dosing Action in YAML\nDESCRIPTION: Action configuration to have the peristaltic pump dose a specific volume (in milliliters) at the maximum flow rate. If the volume is negative, the pump will run backwards.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/ezo_pmp.rst#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n  - ezo_pmp.dose_volume:\n      id: ezo_pmp\n      volume: 10\n\n  # Templated\n  - ezo_pmp.dose_volume:\n      id: ezo_pmp\n      volume: !lambda |-\n        return id(some_volume_sensor).state;\n```\n\n----------------------------------------\n\nTITLE: LD2410 Bluetooth Password Set Automation\nDESCRIPTION: This snippet shows how to set the Bluetooth password for the LD2410 sensor using an automation. The password is case-sensitive and must be exactly 6 characters long.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ld2410.rst#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- bluetooth_password.set:\n    id: my_ld2410\n    password: \"HiLink\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Seeed MR60BHA2 Binary Sensor\nDESCRIPTION: This YAML snippet configures the seeed_mr60bha2 binary sensor to detect the presence of a human, allowing real-time monitoring of target detection over ESPHome.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/seeed_mr60bha2.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n\"    binary_sensor:\\n      - platform: seeed_mr60bha2\\n        has_target:\\n          name: \\\"Person Information\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring MS5611 Sensor with ESPHome - YAML\nDESCRIPTION: This YAML configuration example illustrates how to set up an MS5611 atmospheric pressure sensor in ESPHome, including temperature and pressure readings. Required fields include temperature, pressure, and optional parameters like address and update interval.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ms5611.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: ms5611\n    temperature:\n      name: \"Outside Temperature\"\n    pressure:\n      name: \"Outside Pressure\"\n    address: 0x77\n    update_interval: 60s\n```\n\n----------------------------------------\n\nTITLE: Configuring GDK101 Gamma Radiation Sensor in YAML\nDESCRIPTION: This snippet shows how to configure the GDK101 sensor in the ESPHome YAML configuration. It sets up the I2C communication, address, and update interval for the sensor.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/gdk101.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\ngdk101:\n  i2c_id: bus_a\n  address: 0x18\n  update_interval: 10s\n```\n\n----------------------------------------\n\nTITLE: Basic RDM6300 UART Configuration\nDESCRIPTION: Configuration for setting up the UART bus and RDM6300 component with basic binary sensor functionality. Requires UART connection with 9600 baud rate.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/rdm6300.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nuart:\n  rx_pin: D0\n  baud_rate: 9600\n\nrdm6300:\n\nbinary_sensor:\n  - platform: rdm6300\n    uid: 7616525\n    name: \"RDM6300 NFC Tag\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Individual MCP4728 Outputs\nDESCRIPTION: This configuration defines individual outputs using the MCP4728 DAC channels. Each output has a specified platform, ID, MCP4728 ID, and other parameters such as channel, VREF source, and power down mode. The snippet illustrates how to assign specific properties to each channel, allowing for detailed control of the analog outputs. Key parameters include 'vref' for reference voltage selection and 'gain' for adjusting output voltage range with internal VREF.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/output/mcp4728.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\noutput:\n- platform: mcp4728\n  id: ac_dimmer_1\n  mcp4728_id: dac_output\n  channel: A\n  vref: vdd\n  power_down: normal\n- platform: mcp4728\n  id: ac_dimmer_2\n  mcp4728_id: dac_output\n  channel: B\n  vref: vdd\n  power_down: gnd_1k\n- platform: mcp4728\n  id: ac_dimmer_3\n  channel: C\n  vref: internal\n  gain: X1\n  power_down: normal\n- platform: mcp4728\n  id: ac_dimmer_4\n  channel: D\n  vref: internal\n  gain: X2\n\non_...:\n  then:\n    - output.set_level:\n        id: ac_dimmer_1\n        level: 100%\n```\n\n----------------------------------------\n\nTITLE: Defining Random Light Effect in YAML\nDESCRIPTION: This snippet creates a random light effect that transitions to a randomly chosen color and brightness every defined update_interval, with a customizable transition_length.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/light/index.rst#2025-04-21_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nlight:\n  - platform: ...\n    # ...\n    effects:\n      - random:\n      - random:\n          name: Random Effect With Custom Values\n          transition_length: 5s\n          update_interval: 7s\n```\n\n----------------------------------------\n\nTITLE: LVGL Label and Checkbox with Text Property in YAML\nDESCRIPTION: Illustrates the configuration of a label with a text property and a checkbox using YAML. The example includes Unicode characters and text formatting capabilities, such as 'format' and 'time_format'. The 'lvgl.label.update' action is used to dynamically update label text based on specified formats and arguments.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/widgets.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# Example label\n- label:\n    id: label_id\n    text: \"Text string\"\n- checkbox:\n    id: checkbox_id\n    text: \"\\uF00C\"  # Unicode check-mark\n\n\non_...:\n  - lvgl.label.update:\n      id: label_id\n      text:\n        format: \"%d bells, %d things\"\n        args: [x, 10]  # x is a value from the enclosing trigger.\n  - lvgl.label.update:\n      id: label_id\n      text: !lambda return id(text_sensor).state;\n  - lvgl.label.update:\n      id: label_id\n      text:\n        time_format: \"%c\"   # uses default time component\n  - lvgl.checkbox.update:\n      id: checkbox_id\n      text:\n        time_format: \"%c\"\n        time: sntp_id\n  - lvgl.label.update:\n      id: label_id\n      text:\n        time_format: \"%c\"\n        time: !lambda return id(sntp_id).utcnow();\n```\n\n----------------------------------------\n\nTITLE: Configuring Wiegand Keypad Component in YAML\nDESCRIPTION: Example configuration for setting up a Wiegand keypad with ESPHome. Demonstrates pin configuration and automation handlers for key presses, tag reads, and raw data processing. Requires D0 and D1 pin assignments and supports optional automations for different input types.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/wiegand.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nwiegand:\n  - id: mykeypad\n    d0: GPIOXX\n    d1: GPIOXX\n    on_key:\n      - lambda: ESP_LOGI(\"KEY\", \"received key %d\", x);\n    on_tag:\n      - lambda: ESP_LOGI(\"TAG\", \"received tag %s\", x.c_str());\n    on_raw:\n      - lambda: ESP_LOGI(\"RAW\", \"received raw %d bits, value %llx\", bits, value);\n```\n\n----------------------------------------\n\nTITLE: Example Configuration for MPL3115A2 Sensor in YAML\nDESCRIPTION: This YAML configuration snippet demonstrates how to set up the MPL3115A2 sensor platform in ESPHome to read temperature and pressure data. The configuration specifies the sensor platform, the names for the temperature and pressure readings, and the update interval for data retrieval.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/mpl3115a2.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n- platform: mpl3115a2\n  temperature:\n    name: \"MPL3115A2 Temperature\"\n  pressure:\n    name: \"MPL3115A2 Pressure\"\n  update_interval: 10s\n```\n\n----------------------------------------\n\nTITLE: T-Display S3 AMOLED Sample Configuration\nDESCRIPTION: Complete configuration example specific to T-Display S3 AMOLED implementation, including I2C setup and touchscreen configuration.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/touchscreen/cst816.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ni2c:\n  sda: GPIO3\n  scl: GPIO2\n\ntouchscreen:\n  - platform: cst816\n    id: my_touchscreen\n    interrupt_pin: GPIO21\n```\n\n----------------------------------------\n\nTITLE: Mixer Speaker Ducking Automation in YAML\nDESCRIPTION: Example automation configuration for implementing audio ducking with mixer speakers. Shows how to reduce the volume of a media stream by a specified amount for a given duration.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/speaker/mixer.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - mixer_speaker.apply_ducking:\n      id: media_mixer_source_speaker_id\n      decibel_reduction: 20\n      duration: 2.0s\n```\n\n----------------------------------------\n\nTITLE: Configuring ATM90E26 Energy Monitor Parameters in YAML\nDESCRIPTION: YAML configuration snippet showing how to set the current transformer calibration gain, PGA gain setting, and update interval for an ATM90E26 energy monitor device.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/atm90e26.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ngain_ct: ${current_cal}\ngain_pga: 1X\nupdate_interval: '10s'\n```\n\n----------------------------------------\n\nTITLE: Configuring GT911 Binary Sensor for External Button in YAML\nDESCRIPTION: This snippet demonstrates how to configure a binary sensor for an external button on the GT911 touchscreen. It includes naming the sensor and specifying its index.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/touchscreen/gt911.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nbinary_sensor:\n  - platform: gt911\n    name: \"Home\"\n    index: 0\n```\n\n----------------------------------------\n\nTITLE: LVGL Weather Widget Layout Configuration\nDESCRIPTION: Defines the grid layout and label widgets for displaying weather information including forecast conditions, temperatures and icons. Uses a 5x4 grid with custom sizing for optimal layout.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/cookbook/lvgl.rst#2025-04-21_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\ngrid_rows: [FR(48), FR(13), FR(13), FR(13), FR(13)]\ngrid_columns: [FR(10), FR(40), FR(40), FR(10)]\nwidgets:\n  - label:\n      text: \"\\U000F14E4\"\n      id: lbl_weather_forecast_condition_icon\n      text_font: icons_100\n      text_align: CENTER\n      grid_cell_row_pos: 0\n      grid_cell_column_pos: 0\n      grid_cell_column_span: 2\n      grid_cell_x_align: CENTER\n      grid_cell_y_align: START\n```\n\n----------------------------------------\n\nTITLE: Basic IR Climate Configuration\nDESCRIPTION: Example configuration for setting up the basic IR transmitter and climate component in ESPHome.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/climate/climate_ir.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nremote_transmitter:\n  pin: GPIOXX\n  carrier_duty_percent: 50%\n\nclimate:\n  - platform: REPLACEME\n    name: \"Living Room AC\"\n```\n\n----------------------------------------\n\nTITLE: LVGL Text Component Definitions\nDESCRIPTION: Configures the text platform components that enable updating the display labels through Home Assistant. Each component is linked to a specific label widget.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/cookbook/lvgl.rst#2025-04-21_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\ntext:\n  - platform: lvgl\n    name: fr_cond_icon\n    widget: lbl_weather_forecast_condition_icon\n    mode: text\n  - platform: lvgl\n    name: fr_cond_name\n    widget: lbl_weather_forecast_condition_name\n    mode: text\n```\n\n----------------------------------------\n\nTITLE: IR Control Configuration with Remote Transmitter\nDESCRIPTION: Configuration example for IR control capabilities including remote transmitter setup and sensor integration for FollowMe function.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/climate/midea.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nremote_transmitter:\n  pin: GPIO13\n  carrier_duty_percent: 100%\n\nsensor:\n  - platform: homeassistant\n    entity_id: sensor.room_sensor\n    internal: true\n    filters:\n      - throttle: 10s\n      - heartbeat: 2min\n      - debounce: 1s\n    on_value:\n      midea_ac.follow_me:\n        temperature: !lambda \"return x;\"\n        beeper: false\n\nbutton:\n  - platform: template\n    name: Display Toggle\n    icon: mdi:theme-light-dark\n    on_press:\n      midea_ac.display_toggle:\n  - platform: template\n    name: Swing Step\n    icon: mdi:tailwind\n    on_press:\n      midea_ac.swing_step:\n```\n\n----------------------------------------\n\nTITLE: Configuring Fan On/Off Triggers in YAML\nDESCRIPTION: YAML configuration for setting up triggers that activate when a fan is turned on or off in ESPHome.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/fan/index.rst#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nfan:\n  - platform: speed # or any other platform\n    # ...\n    on_turn_on:\n    - logger.log: \"Fan Turned On!\"\n    on_turn_off:\n    - logger.log: \"Fan Turned Off!\"\n\n```\n\n----------------------------------------\n\nTITLE: Configuring LD2450 Switches\nDESCRIPTION: This YAML snippet sets up switches for the LD2450 component, enabling control of Bluetooth and Multi Target Tracking options. The 'ld2450_id' associates switches with the LD2450 component. The switches allow toggling Bluetooth and Multi Target Tracking functionalities, using initial default settings based on LD2450 module configuration at boot. Switch options follow the ESPHome switch configuration.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ld2450.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nswitch:\n  - platform: ld2450\n    ld2450_id: ld2450_radar\n    bluetooth:\n      name: \"Bluetooth\"\n    multi_target:\n      name: \"Multi Target Tracking\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Binary Sensor Copy in ESPHome\nDESCRIPTION: YAML configuration for creating a copy of an existing binary sensor. Requires source_id to specify the original sensor.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/copy.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbinary_sensor:\n  - platform: copy\n    source_id: source_binary_sensor\n    name: \"Copy of source_binary_sensor\"\n```\n\n----------------------------------------\n\nTITLE: Configuring LVGL Display and Widgets in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure basic display settings and widget placements in LVGL through ESPHome. It shows an example configuration with a defined display and a single page containing a centered-label widget displaying 'Hello World!'. Requires ESPHome with LVGL support.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/index.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nlvgl:\n  displays:\n    - my_display\n  pages:\n    - id: main_page\n      widgets:\n        - label:\n            align: CENTER\n            text: 'Hello World!'\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Fingerprint Events in ESPHome\nDESCRIPTION: YAML configuration for handling various fingerprint sensor events including scan matching, enrollment process, and scan status. Each event sends data to Home Assistant with relevant fingerprint information.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/fingerprint_grow.rst#2025-04-21_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\ndata:\n  finger_id: !lambda 'return finger_id;'\n  confidence: !lambda 'return confidence;'\non_finger_scan_unmatched:\n  - homeassistant.event:\n      event: esphome.test_node_finger_scan_unmatched\non_finger_scan_misplaced:\n  - homeassistant.event:\n      event: esphome.frontdoor_finger_scan_misplaced\non_enrollment_scan:\n  - homeassistant.event:\n      event: esphome.test_node_enrollment_scan\n      data:\n        finger_id: !lambda 'return finger_id;'\n        scan_num: !lambda 'return scan_num;'\non_enrollment_done:\n  - homeassistant.event:\n      event: esphome.test_node_enrollment_done\n      data:\n        finger_id: !lambda 'return finger_id;'\non_enrollment_failed:\n  - homeassistant.event:\n      event: esphome.test_node_enrollment_failed\n      data:\n        finger_id: !lambda 'return finger_id;'\n```\n\n----------------------------------------\n\nTITLE: Media Player State Update Trigger in ESPHome\nDESCRIPTION: This code snippet shows how to configure an `on_state` trigger in ESPHome to execute an action (in this case, logging a message) whenever the state of the media player changes. It requires a media player platform like `i2s_audio` to be configured.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/media_player/index.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nmedia_player:\n  - platform: i2s_audio  # or any other platform\n    # ...\n    on_state:\n      - logger.log: \"State updated!\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Daly BMS Configuration\nDESCRIPTION: This snippet initializes the Daly BMS configuration with an update interval option. The 'update_interval' setting defines how frequently data requests are made to the BMS.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/daly_bms.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"    # Example configuration entry\\n    daly_bms:\\n      update_interval: 20s\"\n```\n\n----------------------------------------\n\nTITLE: Minimal LVGL Configuration with ESPHome Display\nDESCRIPTION: Basic configuration for initializing an LVGL display with minimal settings, including display configuration with auto-clear disabled and update interval set to never\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example minimal configuration entry\nlvgl:\n\ndisplay:\n  - platform: ...\n    # ...\n    auto_clear_enabled: false\n    update_interval: never\n```\n\n----------------------------------------\n\nTITLE: Grayscale Image Configuration for SSD1325\nDESCRIPTION: Configuration example for displaying grayscale images on the SSD1325 display, including image resizing and type specifications.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/ssd1325.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n  - file: \"image.jpg\"\n    id: my_image\n    resize: 120x120\n    type: GRAYSCALE\n\n...\n\ndisplay:\n    ...\n    lambda: |-\n      it.image(0, 0, id(my_image));\n```\n\n----------------------------------------\n\nTITLE: Updating LVGL Label with Sensor Data\nDESCRIPTION: This YAML snippet demonstrates how to update an LVGL label widget with data from a sensor using the `lvgl.label.update` action and a formatted string. It displays the WiFi signal strength in dBm.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/widgets.rst#2025-04-21_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\n    on_...:\n      then:\n        - lvgl.label.update:\n            id: lbl_id\n            text:\n              format: \"%.0fdBm\"\n              args: [ 'id(wifi_signal_db).get_state()' ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Tuya Binary Sensor in YAML\nDESCRIPTION: Example configuration for creating a Tuya binary sensor in ESPHome. The configuration requires the tuya component to be set up and uses a datapoint ID to identify the specific sensor.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/tuya.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Create a binary sensor\nbinary_sensor:\n  - platform: \"tuya\"\n    name: \"MyBinarySensor\"\n    sensor_datapoint: 1\n```\n\n----------------------------------------\n\nTITLE: Configuring UART Switches in ESPHome YAML\nDESCRIPTION: Example configuration for UART switches in ESPHome showing different ways to send data: as a string, as bytes, with recurring output, and with separate on/off commands.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/switch/uart.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nswitch:\n  - platform: uart\n    name: \"UART String Output\"\n    data: 'DataToSend'\n  - platform: uart\n    name: \"UART Bytes Output\"\n    data: [0xDE, 0xAD, 0xBE, 0xEF]\n  - platform: uart\n    name: \"UART Recurring Output\"\n    data: [0xDE, 0xAD, 0xBE, 0xEF]\n    send_every: 1s\n  - platform: uart\n    name: \"UART On/Off\"\n    data:\n      turn_on: \"TurnOn\\r\\n\"\n      turn_off: \"TurnOff\\r\\n\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Seeed MR60BHA2 for ESPHome\nDESCRIPTION: This configuration sets up the Seeed MR60BHA2 platform within ESPHome, allowing integration with the specified UART component. The uart_id and id parameters are optional and can be used for multiple components.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/seeed_mr60bha2.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"    # Example configuration entry\\n    seeed_mr60bha2:\"\n```\n\n----------------------------------------\n\nTITLE: Calibrating HX711 Sensor with Linear Filter\nDESCRIPTION: This YAML configuration demonstrates how to calibrate the HX711 sensor using the `calibrate_linear` filter.  It maps raw sensor values to calibrated units (e.g., kg) based on known masses. Proper calibration requires gathering raw sensor values for at least two different known masses.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/hx711.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n\"# Example configuration entry\nsensor:\n  - platform: hx711\n    # ... Other HX711 options\n    filters:\n      - calibrate_linear:\n          - 120 -> 0\n          - 810 -> 1\n    unit_of_measurement: kg\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Vertical Airflow Direction for Haier Climate Device\nDESCRIPTION: YAML configuration to set the vertical airflow direction when swing is disabled. Supports values: Health_Up, Max_Up, Up, Center, Down, Health_Down. Only supported by hOn devices.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/climate/haier.rst#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - climate.haier.set_vertical_airflow:\n      id: device_id\n      vertical_airflow: Up\n```\n\n----------------------------------------\n\nTITLE: Update Nextion Components by Prefix Example\nDESCRIPTION: C++ code snippet demonstrating how to update specific components on a page by using a prefix filter.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/nextion.rst#2025-04-21_snippet_4\n\nLANGUAGE: c++\nCODE:\n```\nid(nextion1).update_components_by_prefix(\"page0.\");\n```\n\n----------------------------------------\n\nTITLE: Invalid Finger Scan Automation\nDESCRIPTION: YAML configuration for handling invalid finger scans, such as when a finger is not placed correctly on the reader.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/fingerprint_grow.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\non_finger_scan_invalid:\n  - text_sensor.template.publish:\n      id: fingerprint_state\n      state: \"Invalid finger\"\n```\n\n----------------------------------------\n\nTITLE: Configuring ADS1118 Sensor in ESPHome\nDESCRIPTION: YAML configuration for creating an ADS1118 sensor. Shows setup for ADC mode with multiplexer and gain settings, along with update interval and naming.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ads1118.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: ads1118\n    type: adc\n    id: batt_volt\n    name: Battery Voltage\n    multiplexer: A3_GND\n    gain: 4.096\n    update_interval: .01s\n```\n\n----------------------------------------\n\nTITLE: Home Assistant Script Configuration for ESPHome Integration\nDESCRIPTION: Example Home Assistant script configuration that can be called from ESPHome. This script sets RGB values for a light entity.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/api.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# Home Assistant Configuration\nscript:\n  ...\n  set_light_rgb:\n    alias: 'ESPHome RGB light set'\n    sequence:\n    - action: light.turn_on\n      data_template:\n        entity_id: '{{ light_name }}'\n        rgb_color:\n        - '{{ red }}'\n        - '{{ green }}'\n        - '{{ blue }}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Uponor Smatrix Sensor Components in YAML\nDESCRIPTION: YAML configuration for setting up various sensor components for an Uponor Smatrix thermostat in ESPHome, including humidity, temperature, and target temperature.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/uponor_smatrix.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: uponor_smatrix\n    address: 0xDE13\n    humidity:\n      name: Humidity Living Room\n    temperature:\n      name: Temperature Living Room\n    external_temperature:\n      name: Floor Temperature Living Room\n    target_temperature:\n      name: Thermostat Target Temperature Living Room\n```\n\n----------------------------------------\n\nTITLE: Configuring Seeed MR24HPC1 Component - YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure the seeed_mr24hpc1 component in ESPHome. It outlines necessary parameters for integration, including optional UART ID and component ID specifications.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/seeed_mr24hpc1.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"    # Example configuration entry\\n    seeed_mr24hpc1:\"\n```\n\n----------------------------------------\n\nTITLE: Set Read Mode Action\nDESCRIPTION: This YAML snippet demonstrates how to use the ``tag.set_read_mode`` action to set the PN7150 to read mode. The action is triggered within an automation (``on_...``) and references the ID of the PN7150 component.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/pn7150.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - tag.set_read_mode: my_pn7150_id\n```\n\n----------------------------------------\n\nTITLE: Publishing State to Template Text Sensor in C++\nDESCRIPTION: Example of publishing a state to a template text sensor using C++ lambda functions in ESPHome.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/text_sensor/template.rst#2025-04-21_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nid(template_text).publish_state(\"Hello World\");\n```\n\n----------------------------------------\n\nTITLE: Configuring JVC Remote Transmission in YAML\nDESCRIPTION: Simple configuration for sending JVC infrared remote codes using a single data parameter.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/remote_transmitter.rst#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - remote_transmitter.transmit_jvc:\n      data: 0x1234\n```\n\n----------------------------------------\n\nTITLE: Configuring m5stack_8angle Input Device in ESPHome\nDESCRIPTION: This snippet provides an example YAML configuration for setting up the m5stack_8angle component, which communicates via IÂ²C using the address 0x43 by default. It demonstrates how to configure the device with an ID.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/m5stack_8angle.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nm5stack_8angle:\n    id: m5stack_8angle_base\n```\n\n----------------------------------------\n\nTITLE: Energy Monitoring with Template and Integration Sensors\nDESCRIPTION: Advanced configuration for calculating and tracking battery power, charging, and discharging energy using template and integration sensors\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/pylontech.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: template\n    id: pylontech_power\n    name: \"Pylontech power\"\n    unit_of_measurement: W\n    lambda: |-\n      auto pwr1 = id(bat1_voltage).state * id(bat1_current).state;\n      auto pwr2 = id(bat2_voltage).state * id(bat2_current).state;\n      auto pwr = pwr1 + pwr2;\n      id(combined_charge_power).publish_state(max(pwr, 0.0f));\n      id(combined_discharge_power).publish_state(max(-pwr, 0.0f));\n      return pwr;\n    update_interval: 5s\n    device_class: power\n    state_class: measurement\n    \n  - platform: template\n    id: combined_charge_power\n  \n  - platform: template\n    id: combined_discharge_power\n  \n  - platform: integration\n    name: \"Pylontech charging\"\n    sensor: combined_charge_power\n    time_unit: h\n    state_class: total_increasing\n    device_class: energy\n    unit_of_measurement: \"Wh\"\n\n  - platform: integration\n    name: \"Pylontech discharging\"\n    sensor: combined_discharge_power\n    time_unit: h\n    state_class: total_increasing\n    device_class: energy\n    unit_of_measurement: \"Wh\"\n```\n\n----------------------------------------\n\nTITLE: Set Write Mode Action\nDESCRIPTION: This YAML snippet demonstrates how to use the ``tag.set_write_mode`` action to set the PN7150 to write mode.  This will write the previously set message (via ``tag.set_write_message``) to the next tag presented. The action is triggered within an automation (``on_...``) and references the ID of the PN7150 component.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/pn7150.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - tag.set_write_mode: my_pn7150_id\n```\n\n----------------------------------------\n\nTITLE: Lambda Method Calls for Numbers\nDESCRIPTION: This section outlines how to use Lambda methods on numbers within ESPHome to perform asynchronous updates on their values.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/number/index.rst#2025-04-21_snippet_10\n\nLANGUAGE: cpp\nCODE:\n```\n// Within lambda, push a value of 42\nauto call = id(my_number).make_call();\n```\n\n----------------------------------------\n\nTITLE: Configuring Mopeka Pro Check Sensor in ESPHome\nDESCRIPTION: This YAML configuration sets up the `mopeka_pro_check` sensor platform to monitor a propane tank using the sensor's MAC address.  It includes configurations for specifying the tank type, temperature, level, distance, battery level, signal quality sensors and setting minimum signal quality. It also shows an example of custom sensor definition for user defined empty/full points.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/mopeka_pro_check.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nesp32_ble_tracker:\n\nsensor:\n  # Example using 20lb vertical propane tank.\n  - platform: mopeka_pro_check\n    mac_address: XX:XX:XX:XX:XX:XX\n    tank_type: 20LB_V\n    temperature:\n        name: \"Propane test temp\"\n    level:\n        name: \"Propane test level\"\n    distance:\n        name: \"Propane test distance\"\n    battery_level:\n        name: \"Propane test battery level\"\n    signal_quality:\n        name: \"Propane test read quality\"\n    ignored_reads:\n        name: \"Propane test ignored reads\"\n    # Report sensor distance/level data for all equal or greater than \n    minimum_signal_quality: \"LOW\"\n\n  # Custom example - user defined empty / full points\n  - platform: mopeka_pro_check\n    mac_address: XX:XX:XX:XX:XX:XX\n    tank_type: CUSTOM\n    custom_distance_full: 40cm\n    custom_distance_empty: 10mm\n    temperature:\n        name: \"Propane c test temp\"\n    level:\n        name: \"Propane c test level\"\n    distance:\n        name: \"Propane c test distance\"\n    battery_level:\n        name: \"Propane c test battery level\"\n```\n\n----------------------------------------\n\nTITLE: Checking MQTT Connection Status - YAML\nDESCRIPTION: This snippet demonstrates how to check if the MQTT client is connected using a condition in ESPHome. It logs a message when the MQTT client is connected.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/mqtt.rst#2025-04-21_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\n    on_...:\n      if:\n        condition:\n          mqtt.connected:\n        then:\n          - logger.log: MQTT is connected!\n```\n\n----------------------------------------\n\nTITLE: Configuration of LD2420 Component (YAML)\nDESCRIPTION: This YAML snippet configures the generic LD2420 component within ESPHome. It specifies the essential component parameter required for proper connectivity and functionality of the radar sensor.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ld2420.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nld2420:\n\nConfiguration variables:\n************************\n\n**ld2420** (*Required*): Component platform.\n```\n\n----------------------------------------\n\nTITLE: Basic DS1307 Configuration in ESPHome\nDESCRIPTION: Basic configuration entry for setting up DS1307 RTC time source. Requires I2C component to be configured.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/time/ds1307.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntime:\n  - platform: ds1307\n    id: ds1307_time\n```\n\n----------------------------------------\n\nTITLE: Basic CD74HC4067 Configuration in ESPHome\nDESCRIPTION: Example YAML configuration for setting up a CD74HC4067 analog multiplexer with two sensors connected to different multiplexer channels. This uses digital pins D0-D3 for channel selection and connects an ADC sensor to analog pin A0.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/cd74hc4067.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\ncd74hc4067:\n  - id: cd74hc4067_1\n    pin_s0: D0\n    pin_s1: D1\n    pin_s2: D2\n    pin_s3: D3\n\nsensor:\n  - platform: adc\n    id: adc_sensor\n    pin: A0\n  - platform: cd74hc4067\n    id: adc_0\n    number: 0\n    sensor: adc_sensor\n  - platform: cd74hc4067\n    id: adc_1\n    number: 1\n    sensor: adc_sensor\n```\n\n----------------------------------------\n\nTITLE: Configuring Follow Me Action\nDESCRIPTION: Example of the follow_me action configuration that allows sending room temperature data to the AC unit.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/climate/midea.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - midea_ac.follow_me:\n        temperature: !lambda \"return x;\"\n        use_fahrenheit: false\n        beeper: false\n```\n\n----------------------------------------\n\nTITLE: Configuring MAX6956 as LED Driver with Global Current Control\nDESCRIPTION: This snippet configures the MAX6956 to control multiple LEDs with a global brightness parameter. It includes necessary settings for IÂ²C initialization and LED output.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/max6956.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ni2c:\n  id: bus_a\n  sda: GPIOXX\n  scl: GPIOXX\n\nswitch:\n  - platform: template\n    name: \"Led\"\n    id: MaxOut4\n    optimistic: true\n    turn_on_action:\n      - output.turn_on: maxOut_pin4\n    turn_off_action:\n      - output.turn_off: maxOut_pin4\n\nnumber:\n  - platform: template\n    name: \"Global brightness\"\n    id: global_brightness\n    optimistic: true\n    min_value: 0\n    max_value: 15\n    initial_value: 1\n    step: 1\n    mode: slider\n    on_value:\n      - max6956.set_brightness_global:\n          id: max6956_1\n          brightness_global: !lambda return x;\n\nmax6956:\n  - id: max6956_1\n    address: 0x40\n    i2c_id: bus_a\n    brightness_mode: global\n    brightness_global: 5\n\noutput:\n  - platform: max6956\n    pin: 4\n    id: maxOut_pin4\n\nlight:\n  - platform: monochromatic\n    id: Light_1\n    output: maxOut_pin4\n```\n\n----------------------------------------\n\nTITLE: Configuring Haier Climate Text Sensors in ESPHome\nDESCRIPTION: Example YAML configuration for setting up Haier climate text sensors including appliance name, cleaning status, and protocol version. These sensors are only supported by the hOn protocol and require a reference to a haier climate component.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/text_sensor/haier.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\ntext_sensor:\n  - platform: haier\n    haier_id: haier_ac\n    appliance_name:\n      name: Haier appliance name\n    cleaning_status:\n      name: Haier cleaning status\n    protocol_version:\n      name: Haier protocol version\n```\n\n----------------------------------------\n\nTITLE: Configuring CAP1188 Sensor with Binary Sensor in ESPHome\nDESCRIPTION: Example configuration showing how to set up a CAP1188 capacitive touch sensor with ESPHome. Includes main component configuration with address, reset pin, and touch threshold settings, along with a binary sensor setup for one touch channel.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/cap1188.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\ncap1188:\n  id: cap1188_component\n  address: 0x29\n  reset_pin: GPIOXX\n  touch_threshold: 0x40\n  allow_multiple_touches: true\n\nbinary_sensor:\n  - platform: cap1188\n    id: touch_key0\n    channel: 0\n    name: \"Touch Key 0\"\n```\n\n----------------------------------------\n\nTITLE: WiFi Connect Component Update\nDESCRIPTION: This YAML configuration demonstrates updating the online image when the WiFi connects.  It triggers `component.update` for the online image component identified by `my_online_image`.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/online_image.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nwifi:\n  on_connect:\n    - component.update: my_online_image\n```\n\n----------------------------------------\n\nTITLE: Configuring Nextion Sensor in ESPHome\nDESCRIPTION: Example YAML configuration for setting up Nextion sensors with various options like component name, variable name, and waveform settings\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/nextion.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndisplay:\n  - platform: nextion\n    id: nextion1\n    # ...\n\nsensor:\n  - platform: nextion\n    name: \"Current Humidity\"\n    component_name: humidity\n    precision: 1\n    update_interval: 4s\n  - platform: nextion\n    nextion_id: nextion1\n    name: \"Current Temperature\"\n    variable_name: temperature\n  - platform: nextion\n    id: s01\n    component_id: 2\n    wave_channel_id: 0\n    wave_max_value: 100\n    waveform_send_last_value: \"true\"\n    wave_max_length: 400\n    update_interval: 1s\n```\n\n----------------------------------------\n\nTITLE: Web Server Version 2 Configuration with Local JS in YAML\nDESCRIPTION: Configuration for web server version 2 with JS included from a local file, setting empty CSS and JS URLs.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/web_server.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry v2\nweb_server:\n  js_include: \"./v2/www.js\"\n  js_url: \"\"\n  version: 2\n```\n\n----------------------------------------\n\nTITLE: Configuring EMC2101 Sensors\nDESCRIPTION: Complete sensor configuration for EMC2101 including internal temperature, speed, and duty cycle monitoring. Defines update intervals and sensor names with unique IDs for each measurement type.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/emc2101.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: emc2101\n    internal_temperature:\n      id: internal_temperature_sensor\n      name: \"Internal Temperature Sensor\"\n    speed:\n      id: speed_sensor\n      name: \"Speed Sensor\"\n    duty_cycle:\n      id: duty_cycle_sensor\n      name: \"Duty Cycle Sensor\"\n    update_interval: 5s\n```\n\n----------------------------------------\n\nTITLE: LD2410 Select Configuration\nDESCRIPTION: This snippet illustrates how to configure select entities to control various settings of the LD2410 sensor, such as distance resolution, baud rate, light function, and OUT pin level. These select entities offer granular control over the device's behavior.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ld2410.rst#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nselect:\n  - platform: ld2410\n    distance_resolution:\n      name: \"distance resolution\"\n    baud_rate:\n      name: \"baud rate\"\n    light_function:\n      name: light function\n    out_pin_level:\n      name: out pin level\n```\n\n----------------------------------------\n\nTITLE: Updating LVGL Keyboard Properties\nDESCRIPTION: This YAML snippet demonstrates how to update an LVGL keyboard widget's properties using the `lvgl.keyboard.update` action. It specifically updates the mode and textarea of the keyboard.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/widgets.rst#2025-04-21_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\n    on_focus:\n      then:\n        - lvgl.keyboard.update:\n            id: keyboard_id\n            mode: number\n            textarea: textarea_2\n```\n\n----------------------------------------\n\nTITLE: LVGL Show Specific Page Action\nDESCRIPTION: Action configuration for showing a specific LVGL page by ID. Examples demonstrate the standard syntax and a shorthand version, with optional animation parameters.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/index.rst#2025-04-21_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - lvgl.page.show:\n        id: secret_page\n\non_...:\n  then:\n    - lvgl.page.show: secret_page  # shorthand version\n```\n\n----------------------------------------\n\nTITLE: Basic ESPHome Touchscreen Configuration\nDESCRIPTION: Example configuration for setting up a basic touchscreen with display integration and touch event handling.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/touchscreen/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example touchscreen\ntouchscreen:\n  - platform: ...\n    display: display1\n    transform:\n      mirror_x: false\n      mirror_y: false\n      swap_xy: false\n\n    on_touch:\n      then:\n        ...\n    on_update:\n      then:\n        ...\n    on_release:\n      then:\n        ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Sun Tracking in ESPHome\nDESCRIPTION: Sets up the core sun tracking component with required latitude and longitude parameters, along with a required time source.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sun.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsun:\n  latitude: 48.8584Â°\n  longitude: 2.2945Â°\n\n# At least one time source is required\ntime:\n  - platform: homeassistant\n```\n\n----------------------------------------\n\nTITLE: Handling LVGL Tabview Value Change Trigger in YAML\nDESCRIPTION: Example of using the on_value trigger for a tabview widget to execute actions when the selected tab changes. Demonstrates checking the new tab ID and logging a message.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/widgets.rst#2025-04-21_snippet_36\n\nLANGUAGE: yaml\nCODE:\n```\n# Example trigger:\n- tabview:\n    ...\n    on_value:\n      then:\n        - if:\n            condition:\n              lambda: return tab == id(tabview_tab_1);\n            then:\n              - logger.log: \"Dog tab is now showing\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Base Fan Component in YAML\nDESCRIPTION: Basic YAML configuration for setting up a fan component in ESPHome. Includes common options like name, icon, restore mode, and internal status.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/fan/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nfan:\n  - platform: ...\n    name: ...\n\n```\n\n----------------------------------------\n\nTITLE: Setting Equalizer Preset for DF-Player in ESPHome\nDESCRIPTION: Action to change the audio equalization preset with options including NORMAL, POP, ROCK, JAZZ, CLASSIC, and BASS.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/dfplayer.rst#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - dfplayer.set_eq:\n        eq_preset: ROCK\n    # Shorthand\n    - dfplayer.set_eq: ROCK\n```\n\n----------------------------------------\n\nTITLE: Breaking a Motor with Grove TB6612FNG in ESPHome\nDESCRIPTION: Configuration for activating the break mode on a motor channel. Break mode ensures the wheel won't spin even if forced or pushed externally.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/grove_tb6612fng.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - grove_tb6612fng.break:\n        channel: 1\n        id: test_motor\n```\n\n----------------------------------------\n\nTITLE: Finger Scan Start Automation with LED Control\nDESCRIPTION: YAML configuration for controlling the fingerprint reader's Aura LED when a finger is detected touching the sensor.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/fingerprint_grow.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\non_finger_scan_start:\n  - fingerprint_grow.aura_led_control:\n      state: ALWAYS_ON\n      color: GREEN\n      speed: 0\n      count: 0\n```\n\n----------------------------------------\n\nTITLE: Configuring Individual SN74HC595 Pin Usage in ESPHome\nDESCRIPTION: YAML configuration showing how to use individual pins from the SN74HC595 shift register in components like switches.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sn74hc595.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# Individual outputs\nswitch:\n  - platform: gpio\n    name: \"SN74HC595 Pin #0\"\n    pin:\n      sn74hc595: sn74hc595_hub\n      # Use pin number 0\n      number: 0\n      inverted: false\n```\n\n----------------------------------------\n\nTITLE: Set Write Message Action\nDESCRIPTION: This YAML snippet demonstrates how to use the ``tag.set_write_message`` action to set the NDEF message to be written to a tag. It includes the message content and an option to include an Android app record.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/pn7150.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - tag.set_write_message:\n        message: https://www.home-assistant.io/tag/pulse\n        include_android_app_record: false\n```\n\n----------------------------------------\n\nTITLE: ESP32 BLE Tracker Automation for Advertisement Handling\nDESCRIPTION: Example of an automation that logs details of received BLE advertisements, including device name, service UUIDs, and manufacturer data.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/esp32_ble_tracker.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nesp32_ble_tracker:\n  on_ble_advertise:\n    - mac_address:\n        - XX:XX:XX:XX:XX:XX\n        - XX:XX:XX:XX:XX:XX\n      then:\n        - lambda: |-\n            ESP_LOGD(\"ble_adv\", \"New BLE device\");\n            ESP_LOGD(\"ble_adv\", \"  address: %s\", x.address_str().c_str());\n            ESP_LOGD(\"ble_adv\", \"  name: %s\", x.get_name().c_str());\n            ESP_LOGD(\"ble_adv\", \"  Advertised service UUIDs:\");\n            for (auto uuid : x.get_service_uuids()) {\n                ESP_LOGD(\"ble_adv\", \"    - %s\", uuid.to_string().c_str());\n            }\n            ESP_LOGD(\"ble_adv\", \"  Advertised service data:\");\n            for (auto data : x.get_service_datas()) {\n                ESP_LOGD(\"ble_adv\", \"    - %s: (length %i)\", data.uuid.to_string().c_str(), data.data.size());\n            }\n            ESP_LOGD(\"ble_adv\", \"  Advertised manufacturer data:\");\n            for (auto data : x.get_manufacturer_datas()) {\n                ESP_LOGD(\"ble_adv\", \"    - %s: (length %i)\", data.uuid.to_string().c_str(), data.data.size());\n            }\n```\n\n----------------------------------------\n\nTITLE: Closing a Valve Using C++ Lambda\nDESCRIPTION: C++ lambda expression to close a valve programmatically in ESPHome.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/valve/index.rst#2025-04-21_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nauto call = id(valve_1).make_call();\ncall.set_command_close();\ncall.perform();\n```\n\n----------------------------------------\n\nTITLE: On Tag Removed Trigger - MQTT Publish\nDESCRIPTION: This YAML snippet configures the ``on_tag_removed`` trigger to publish the removed tag ID to an MQTT topic. The `!lambda 'return x;'` extracts the tag ID from the trigger's parameter `x`.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/pn7150.rst#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\npn7150_i2c:\n  # ...\n  on_tag_removed:\n    then:\n      - mqtt.publish:\n          topic: pn7150/tag_removed\n          payload: !lambda 'return x;'\n```\n\n----------------------------------------\n\nTITLE: Nextion Custom Binary Sensor Protocol\nDESCRIPTION: C++ code showing the required protocol format for sending custom binary sensor data from Nextion to ESPHome.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/nextion.rst#2025-04-21_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nprinth 93\nprints \"r0\",0\nprinth 00\nprints r0.val,0\nprinth FF FF FF\n```\n\n----------------------------------------\n\nTITLE: Tuya Sensor YAML Configuration\nDESCRIPTION: YAML configuration example for creating a Tuya sensor in ESPHome. Shows how to specify the platform and sensor datapoint for reading values from a Tuya device.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/tuya.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Create a sensor\\nsensor:\\n  - platform: \"tuya\"\\n    name: \"MySensor\"\\n    sensor_datapoint: 5\n```\n\n----------------------------------------\n\nTITLE: Comprehensive CST226 Touchscreen Configuration for Lilygo T4-S3\nDESCRIPTION: Full configuration example for the CST226 touchscreen on a Lilygo T4-S3 AMOLED Display. Includes I2C setup, touchscreen platform, ID, interrupt pin, and reset pin settings.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/touchscreen/cst226.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ni2c:\n  sda: GPIO6\n  scl: GPIO7\n\ntouchscreen:\n  - platform: cst226\n    id: my_touchscreen\n    interrupt_pin: GPIO8\n    reset_pin: GPIO17\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple MSA301 and MSA311 Sensors\nDESCRIPTION: This snippet shows how to configure both MSA301 and MSA311 sensors in the same configuration, assigning unique IDs for each sensor and using them in the sensor and binary sensor declarations.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/msa3xx.rst#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n\"msa3xx:\\n  - id: my_msa301_sensor\\n    type: msa301\\n    # ...\\n  - id: my_msa311_sensor\\n    type: msa311\\n\\nsensor:\\n  - platform: msa3xx\\n    msa3xx_id: my_msa311_sensor\\n    acceleration_x: Accel X\\n    acceleration_y: Accel Y\\n    acceleration_z: Accel Z\\n\\nbinary_sensor:\\n  - platform: msa3xx\\n    msa3xx_id: my_msa301_sensor\\n    tap: Single tap\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple TLC59208F Drivers with Multiple Outputs\nDESCRIPTION: Advanced configuration demonstrating multiple TLC59208F drivers with different IÂ²C addresses and configuring various output channels\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/output/tlc59208f.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntlc59208f:\n  - address: 0x20\n    id: tlc59208f_1\n  - address: 0x22\n    id: tlc59208f_2\n  - address: 0x24\n    id: tlc59208f_3\n\noutput:\n  - platform: tlc59208f\n    id: 'tlc59208f_1_ch0'\n    channel: 0\n    tlc59208f_id: 'tlc59208f_1'\n  - platform: tlc59208f\n    id: 'tlc59208f_1_ch4'\n    channel: 4\n    tlc59208f_id: 'tlc59208f_1'\n  - platform: tlc59208f\n    id: 'tlc59208f_2_ch2'\n    channel: 2\n    tlc59208f_id: 'tlc59208f_2'\n  - platform: tlc59208f\n    id: 'tlc59208f_3_ch7'\n    channel: 7\n    tlc59208f_id: 'tlc59208f_3'\n\nlight:\n  - platform: rgb\n    name: \"Sample RGB light\"\n    red: tlc59208f_1_ch0\n    green: tlc59208f_1_ch4\n    blue: tlc59208f_2_ch7\n```\n\n----------------------------------------\n\nTITLE: Handling Touch Events on Nextion Display\nDESCRIPTION: This snippet shows how to handle touch events on a Nextion display, logging details about the event such as page ID, component ID, and event type.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/nextion.rst#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\non_touch:\n  then:\n    - lambda: |-\n        ESP_LOGD(\"nextion.on_touch\", \"Nextion touch event detected!\");\n        ESP_LOGD(\"nextion.on_touch\", \"Page ID: %i\", page_id);\n        ESP_LOGD(\"nextion.on_touch\", \"Component ID: %i\", component_id);\n        ESP_LOGD(\"nextion.on_touch\", \"Event type: %s\", touch_event ? \"Press\" : \"Release\");\n```\n\n----------------------------------------\n\nTITLE: Drawing Lines with LVGL Line Widget in YAML\nDESCRIPTION: This code snippet illustrates how to use the LVGL Line widget to draw lines between given points in YAML. Users can specify line configurations like width, color, and rounded end points, and update the line with new points through LVGL actions.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/widgets.rst#2025-04-21_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\n# Example widget:\n- line:\n    points:\n      - 5, 5\n      - 70, 70\n      - 120, 10\n      - x: !lambda return random_uint32() % 100;\n        y: !lambda return random_uint32() % 100;\n      - 230, 15\n    line_width: 8\n    line_color: 0x0000FF\n    line_rounded: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic WiFi Signal Sensor in ESPHome\nDESCRIPTION: Basic configuration for a WiFi signal sensor that reports signal strength in dBm (decibel-milliwatts). The sensor updates every 60 seconds.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/wifi_signal.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: wifi_signal\n    name: \"WiFi Signal Sensor\"\n    update_interval: 60s\n```\n\n----------------------------------------\n\nTITLE: Manual IP Configuration Setup\nDESCRIPTION: Detailed configuration for setting up static IP addressing with gateway and subnet settings.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/wifi.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nwifi:\n  # ...\n  manual_ip:\n    # Set this to the IP of the ESP\n    static_ip: 10.0.0.42\n    # Set this to the IP address of the router. Often ends with .1\n    gateway: 10.0.0.1\n    # The subnet of the network. 255.255.255.0 works for most home networks.\n    subnet: 255.255.255.0\n```\n\n----------------------------------------\n\nTITLE: Bluetooth Proxy Monitoring Sensors\nDESCRIPTION: Configuration for diagnostic template sensors that monitor Bluetooth proxy connections limit and available connections.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/template.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: template\n    name: \"Bluetooth Proxy Connections Limit\"\n    id: bluetooth_proxy_connections_limit\n    icon: \"mdi:bluetooth-settings\"\n    update_interval: 30s\n    entity_category: \"diagnostic\"\n    lambda: |-\n      int limit = bluetooth_proxy::global_bluetooth_proxy->get_bluetooth_connections_limit();\n      ESP_LOGD(\"bluetooth_proxy_sensor\", \"Current connections limit => %d\", limit);\n      return limit;\n\n  - platform: template\n    name: \"Bluetooth Proxy Connections Free\"\n    id: bluetooth_proxy_connections_free\n    icon: \"mdi:bluetooth-settings\"\n    update_interval: 30s\n    entity_category: \"diagnostic\"\n    lambda: |-\n      int free = bluetooth_proxy::global_bluetooth_proxy->get_bluetooth_connections_free();\n      ESP_LOGD(\"bluetooth_proxy_sensor\", \"Current connections free => %d\", free);\n      return free;\n```\n\n----------------------------------------\n\nTITLE: ABB-Welcome Transmitter Action Configuration\nDESCRIPTION: Configures a remote transmitter action for sending ABB-Welcome intercom bus messages with specific source and destination addresses, message types, and data.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/remote_transmitter.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - remote_transmitter.transmit_abbwelcome:\n      source_address: 0x1001\n      destination_address: 0x4001\n      three_byte_address: false\n      message_type: 0x0d\n      data: [0xab, 0xcd, 0xef]\n```\n\n----------------------------------------\n\nTITLE: Defining and Executing Scripts in ESPHome\nDESCRIPTION: This YAML snippet exemplifies defining a script with an 'id' and how to execute it with actions such as turning a switch on or off, and including delays. The 'id' is used to interact with the script. Key parameters include the script's 'id', mode, and the actions to execute when the script runs.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/script.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nscript:\n  - id: my_script\n    then:\n      - switch.turn_on: my_switch\n      - delay: 1s\n      - switch.turn_off: my_switch\n```\n\n----------------------------------------\n\nTITLE: Releasing Online Image Memory Action\nDESCRIPTION: This YAML snippet shows how to use the `online_image.release` action to release the memory used by an online image component.  It releases the memory for the image with the ID 'my_online_image'.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/online_image.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - online_image.release: my_online_image\n```\n\n----------------------------------------\n\nTITLE: Configuring HM3301 Particulate Matter Sensor in ESPHome\nDESCRIPTION: This YAML configuration sets up the HM3301 sensor platform in ESPHome. It defines sensors for PM1.0, PM2.5, PM10.0 particulate matter concentrations, and an AQI sensor using the CAQI calculation type. The sensor communicates via IÂ²C protocol.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/hm3301.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\ni2c:\n\nsensor:\n  - platform: hm3301\n    pm_1_0:\n      name: \"PM1.0\"\n    pm_2_5:\n      name: \"PM2.5\"\n    pm_10_0:\n      name: \"PM10.0\"\n    aqi:\n      name: \"AQI\"\n      calculation_type: \"CAQI\"\n```\n\n----------------------------------------\n\nTITLE: LVGL Idle Trigger Configuration\nDESCRIPTION: Configuration for multiple idle triggers with different timeout actions\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/index.rst#2025-04-21_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nlvgl:\n  ...\n  on_idle:\n    - timeout: 30s\n      then:\n        - lvgl.page.show: main_page\n    - timeout: 60s\n      then:\n        - light.turn_off: display_backlight\n        - lvgl.pause:\n```\n\n----------------------------------------\n\nTITLE: Configuring ATX Power Supply with Inverted Pin\nDESCRIPTION: Configures an ATX power supply with an inverted GPIO pin, typical for active-low power supply control. Includes pin number and inversion setting.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/power_supply.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npower_supply:\n  - id: 'atx_power_supply'\n    pin:\n      number: 13\n      inverted: true\n```\n\n----------------------------------------\n\nTITLE: Calibrating NPI-19 Sensor Values in ESPHome YAML\nDESCRIPTION: This code snippet exemplifies using the `calibrate_linear` filter in ESPHome YAML configuration to map raw sensor values to calibrated pressure units. The mapping is established by correlating specific sensor readings with known pressure values.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/npi19.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nfilters:\n  - calibrate_linear:\n    - 1638 -> 0.5\n    - 14746 -> 4.5\n```\n\n----------------------------------------\n\nTITLE: Configuring Improv Serial in ESPHome YAML\nDESCRIPTION: Basic configuration entry for enabling Improv via Serial in an ESPHome YAML file. Requires the wifi component to be configured and includes the improv_serial component.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/improv_serial.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nwifi:\n  # ...\n\nimprov_serial:\n```\n\n----------------------------------------\n\nTITLE: Configuring GPS Time Source in ESPHome\nDESCRIPTION: YAML configuration snippet for setting up GPS as a time source. Requires prior configuration of the GPS component and includes platform specification and ID assignment.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/time/gps.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\ntime:\n  - platform: gps\n    id: gps_time\n```\n\n----------------------------------------\n\nTITLE: Triggering OTA Flash Action in ESPHome YAML\nDESCRIPTION: This snippet demonstrates how to trigger the OTA flash action within an ESPHome automation. It includes configuration for the URL of the firmware binary and the MD5 checksum URL. Upon triggering, the device downloads and installs the new firmware, then reboots.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/ota/http_request.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - ota.http_request.flash:\n        md5_url: http://example.com/firmware.md5\n        url: https://example.com/firmware.ota.bin\n    - logger.log: \"This message should be not displayed because the device reboots\"\n\n```\n\n----------------------------------------\n\nTITLE: Configuring MQTT Subscribe Sensor in ESPHome YAML\nDESCRIPTION: This YAML configuration defines an MQTT subscribe sensor that listens to a specific MQTT topic and parses incoming messages as floating point numbers, thereby integrating external data into the ESPHome ecosystem. The 'topic' parameter is mandatory, while 'qos' is optional with a default value of 0.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/mqtt_subscribe.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: mqtt_subscribe\n    name: \"Data from topic\"\n    id: mysensor\n    topic: the/topic\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP23S08 Component in ESPHome\nDESCRIPTION: This YAML snippet demonstrates how to configure the MCP23S08 component in ESPHome, specifying the chip select pin and device address. It includes example setups for both outputs and inputs using GPIO pins.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/mcp23Sxx.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nmcp23s08:\n  - id: 'mcp23s08_hub'\n    cs_pin: GPIOXX\n    deviceaddress: 0\n\n# Individual outputs\nswitch:\n  - platform: gpio\n    name: \"MCP23S08 Pin #0\"\n    pin:\n      mcp23xxx: mcp23s08_hub\n      # Use pin number 0\n      number: 0\n      # One of INPUT, INPUT_PULLUP or OUTPUT\n      mode:\n        output: true\n      inverted: false\n\n# Individual inputs\nbinary_sensor:\n  - platform: gpio\n    name: \"MCP23S08 Pin #1\"\n    pin:\n      mcp23xxx: mcp23s08_hub\n      # Use pin number 1\n      number: 1\n      # One of INPUT or INPUT_PULLUP\n      mode:\n        input: true\n      inverted: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Template Button in ESPHome\nDESCRIPTION: Example configuration for creating a template button that logs a message when pressed. The button will automatically appear in Home Assistant and can be controlled through the frontend.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/button/template.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbutton:\n  - platform: template\n    name: \"Template Button\"\n    on_press:\n      - logger.log: Button Pressed\n```\n\n----------------------------------------\n\nTITLE: Changing ESPHome Node Name in YAML\nDESCRIPTION: Configuration example for changing the name or address of an ESPHome node. This process involves using the 'use_address' option in the WiFi configuration to point to the old address while updating to the new name.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/esphome.rst#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n# Step 1. Changing name from test8266 to kitchen\nesphome:\n  name: kitchen\n  # ...\n\nwifi:\n  # ...\n  use_address: test8266.local\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# Step 2\nesphome:\n  name: kitchen\n  # ...\n\nwifi:\n  # ...\n  # Remove or comment out use_address\n  # use_address: test8266.local\n```\n\n----------------------------------------\n\nTITLE: Configuring Time Synchronization in ESPHome\nDESCRIPTION: Configuration for synchronizing time from Home Assistant in ESPHome. This provides accurate time data that can be used for displaying date and time on the device's display.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/st7789v.rst#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n    time:\n      - platform: homeassistant\n        id: esptime\n```\n\n----------------------------------------\n\nTITLE: Defining Flicker Light Effect in YAML\nDESCRIPTION: This snippet creates a flicker effect that causes the light to 'hover' around the active color with customizable parameters for alpha and intensity.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/light/index.rst#2025-04-21_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nlight:\n  - platform: ...\n    # ...\n    effects:\n      - flicker:\n      - flicker:\n          name: Flicker Effect With Custom Values\n          alpha: 95%\n          intensity: 1.5%\n```\n\n----------------------------------------\n\nTITLE: Configuring ESP32 Hall Sensor in ESPHome\nDESCRIPTION: Basic YAML configuration for setting up the ESP32's integrated hall effect sensor. The example shows how to define the sensor with a custom name and update interval. This configuration must be placed in the sensor section of an ESPHome configuration file.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/esp32_hall.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: esp32_hall\n    name: \"ESP32 Hall Sensor\"\n    update_interval: 60s\n```\n\n----------------------------------------\n\nTITLE: Display Touch Visualization Lambda\nDESCRIPTION: Configuration for visualizing touch points on a display using a lambda function.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/touchscreen/index.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndisplay:\n  - platform: ili9341\n    lambda: |-\n      auto touch = id(my_touchscreen)->get_touch();\n      if (touch) // or touch.has_value()\n        it.filled_circle(touch.value().x, touch.value().y, 10, RED);\n```\n\n----------------------------------------\n\nTITLE: PVVX MiThermometer Display Lambda Function Example\nDESCRIPTION: Example of a lambda function for controlling PVVX MiThermometer display elements. Shows how to display big and small numbers with units, battery status, and different emoticon combinations.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/pvvx_mithermometer.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndisplay:\n  - platform: pvvx_mithermometer\n    # ...\n    lambda: |-\n      // Print -2.1 as big number (first row)\n      it.print_bignum(-2.1);\n      // Print Â°C next to the big number\n      it.print_unit(pvvx_mithermometer::UNIT_DEG_C);\n      // Print 88 as small number (second row)\n      it.print_smallnum(88);\n      // Print % next to the small number\n      it.print_percent(true);\n      // Print the low battery symbol\n      it.print_battery(true);\n\n      // Print a happy smiley. Results in \" ^_^ \"\n      it.print_happy(true);\n      // Print a sad smiley. Results in \" -â§- \"\n      it.print_sad(true);\n      // The comination of happy and sad simley results in \" Îâ³Î \"\n\n      // Print round brackets around the simley\n      it.print_bracket(true);\n      // The final result is \"(Îâ³Î)\"\n```\n\n----------------------------------------\n\nTITLE: Setting IÂ²C Address for EZO Sensor\nDESCRIPTION: Lambda function to set a new IÂ²C address for an EZO sensor device.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ezo.rst#2025-04-21_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nid(ph_ezo).set_i2c(100);\n```\n\n----------------------------------------\n\nTITLE: Transmitting Roomba IR Code with ESPHome\nDESCRIPTION: This YAML snippet configures ESPHome to transmit a Roomba infrared remote code. It sends the 0x88 (clean) command three times with a 17ms wait time between each transmission. This is important since Roomba vacuums require a code to be received multiple times before responding.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/remote_transmitter.rst#2025-04-21_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - remote_transmitter.transmit_roomba:\n      data: 0x88  # clean\n      repeat:\n        times: 3\n        wait_time: 17ms\n```\n\n----------------------------------------\n\nTITLE: Creating a Gradient in LVGL with ESPHome\nDESCRIPTION: Example configuration for defining a horizontal color gradient in LVGL. The gradient includes multiple color stops to create a full hue range color bar.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/index.rst#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n# Example gradient showing full hue range.\n\n  gradients:\n    - id: color_bar\n      direction: hor\n      dither: none\n      stops:\n        - color: 0xFF0000\n          position: 0\n        - color: 0xFFFF00\n          position: 42\n        - color: 0x00FF00\n          position: 84\n        - color: 0x00FFFF\n          position: 127\n        - color: 0x0000FF\n          position: 169\n        - color: 0xFF00FF\n          position: 212\n        - color: 0xFF0000\n          position: 255\n```\n\n----------------------------------------\n\nTITLE: Home Assistant Weather Automations\nDESCRIPTION: Home Assistant automations that update the display text components when weather data changes. Includes mappings for weather conditions to icons and text labels.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/cookbook/lvgl.rst#2025-04-21_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\n- id: weather_cond_forecast\n  alias: 'Weather Forecast Condition'\n  trigger:\n    - platform: state\n      entity_id: sensor.openweathermap_forecast_condition\n    - platform: state\n      entity_id: binary_sensor.your_esphome_node_status_sensor\n      to: 'on'\n  action:\n    - action: text.set_value\n      target:\n        entity_id: \n          - text.your_esphome_node_fr_cond_icon\n      data:\n        value: > \n          {% set d = {\n          \"clear-night\": \"\\U000F0594\",\n          \"cloudy\": \"\\U000F0590\"\n          } %}\n          {{ d.get( states('sensor.openweathermap_forecast_condition') ) }}\n```\n\n----------------------------------------\n\nTITLE: Configuring LVGL Light Platform in ESPHome\nDESCRIPTION: Example configuration for creating a light using an LVGL LED widget. Requires specifying a widget ID and providing a name for the light. By default, gamma correction is set to 0 for linear brightness control.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/light/lvgl.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlight:\n  - platform: lvgl\n    widget: led_id\n    name: LVGL light\n```\n\n----------------------------------------\n\nTITLE: Shutting Down Sprinkler System in YAML\nDESCRIPTION: Action to initiate a shutdown of all valves while respecting configured pump or valve stop delays.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sprinkler.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - sprinkler.shutdown: sprinkler_ctrlr\n```\n\n----------------------------------------\n\nTITLE: Update All Nextion Components Example\nDESCRIPTION: C++ code snippet showing how to trigger an update of all Nextion display components from a lambda.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/nextion.rst#2025-04-21_snippet_3\n\nLANGUAGE: c++\nCODE:\n```\nid(nextion1).update_all_components();\n```\n\n----------------------------------------\n\nTITLE: Light Toggle Action Configuration\nDESCRIPTION: This code shows how to configure a light toggle action in ESPHome using YAML.  It explains the `light.toggle` action and shows two different ways of specifying the target light's ID: verbose and shorthand.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/light/index.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - light.toggle:\n        id: light_1\n    # Shorthand:\n    - light.toggle: light_1\n```\n\n----------------------------------------\n\nTITLE: LILYGO T-ETH-Lite ESP32 Configuration\nDESCRIPTION: Ethernet configuration for LILYGO T-ETH-Lite ESP32 board using RTL8201 chipset with GPIO12 power pin.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/ethernet.rst#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nethernet:\n  type: RTL8201\n  mdc_pin: GPIO23\n  mdio_pin: GPIO18\n  clk_mode: GPIO0_IN\n  phy_addr: 0\n  power_pin: GPIO12\n```\n\n----------------------------------------\n\nTITLE: Creating Lists in RST\nDESCRIPTION: Demonstrates how to create ordered and unordered lists in reStructuredText, including nested items.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/contributing.rst#2025-04-21_snippet_9\n\nLANGUAGE: rst\nCODE:\n```\n- Unordered item\n\n  - Unordered sub-item\n\n- Item with a very long text so that it does not fully fit in a single line and\n  must be split up into multiple lines.\n\n1. Ordered item #1\n2. Ordered item #2\n```\n\n----------------------------------------\n\nTITLE: ESP8266 Hardware UART Configuration\nDESCRIPTION: This YAML configuration shows how to configure an ESP8266 to use the hardware UART on GPIO13 (D7). To enable this, serial logging must be disabled by setting the logger baud rate to 0, freeing up the UART for DSMR data.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/dsmr.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n\"# Example configuration for ESP8266\nlogger:\n  baud_rate: 0\n  level: DEBUG\n\nuart:\n  pin: GPIO13\n  baud_rate: 115200\"\n```\n\n----------------------------------------\n\nTITLE: Configuring RGB Light in ESPHome YAML\nDESCRIPTION: This snippet demonstrates the basic configuration for an RGB light in ESPHome. It defines a light with a name and specifies the output components for red, green, and blue channels.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/light/rgb.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nlight:\n  - platform: rgb\n    name: \"Living Room Lights\"\n    red: output_component1\n    green: output_component2\n    blue: output_component3\n```\n\n----------------------------------------\n\nTITLE: Transmitting Type C RC-Switch Codes with YAML\nDESCRIPTION: This provides a setup for transmitting Type C RC-Switch codes with necessary family, group, and device settings. Familiarity with corresponding RC-Switch protocol details is recommended.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/remote_transmitter.rst#2025-04-21_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - remote_transmitter.transmit_rc_switch_type_c:\n      family: 'C'\n      group: 3\n      device: 1\n      state: off\n      protocol: 1\n```\n\n----------------------------------------\n\nTITLE: Setting Text Value with Action in YAML\nDESCRIPTION: Demonstrates the use of the text.set action to update a text entity's value programmatically.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/text/index.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- text.set:\n    id: my_text\n    value: \"Hello World\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Text Sensor for LD2450 Radar\nDESCRIPTION: Provides text sensor configurations to retrieve device information like firmware version, MAC address, and target directions\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ld2450.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ntext_sensor:\n  - platform: ld2450\n    ld2450_id: ld2450_radar\n    version:\n      name: \"LD2450 Firmware\"\n    mac_address:\n      name: \"LD2450 BT MAC\"\n    target_1:\n      direction:\n        name: \"Target-1 Direction\"\n```\n\n----------------------------------------\n\nTITLE: Displaying WiFi QR Code on Nextion\nDESCRIPTION: This snippet shows how to display a WiFi Access Point QR code for a captive portal on a Nextion display page.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/nextion.rst#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nid(disp).goto_page(\"wifi_qr_page\");\n```\n\n----------------------------------------\n\nTITLE: Decreasing Volume on DF-Player in ESPHome\nDESCRIPTION: Action to turn down the volume of the DF-Player module by one step.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/dfplayer.rst#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - dfplayer.volume_down\n```\n\n----------------------------------------\n\nTITLE: Transmitting RC5 IR Codes with YAML\nDESCRIPTION: This snippet demonstrates how to send RC5 infrared remote codes by specifying an address and a command. Accurate IR codes and the correct transmitter setup are necessary for effective transmission.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/remote_transmitter.rst#2025-04-21_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - remote_transmitter.transmit_rc5:\n      address: 0x1F\n      command: 0x3F\n```\n\n----------------------------------------\n\nTITLE: Installing PlatformIO Development Version with Python 3 Support\nDESCRIPTION: Command to install the development version of PlatformIO with Python 3 support using pip3.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/changelog/v1.10.0.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip3 install -U https://github.com/platformio/platformio-core/archive/develop.zip\n```\n\n----------------------------------------\n\nTITLE: Triggering BLE Characteristic Notification in YAML\nDESCRIPTION: This snippet demonstrates how to use the ble_server.characteristic_notify action to trigger a notification for a BLE characteristic. It notifies the client about the current value of the characteristic.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/esp32_ble_server.rst#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - ble_server.characteristic_notify:\n        id: test_notify_characteristic\n```\n\n----------------------------------------\n\nTITLE: Defining Numeric Values for MicroNova in YAML\nDESCRIPTION: This configuration snippet sets up numeric parameters like thermostat temperature and power level for the MicroNova stove. The `step` parameter defines the increment or decrement step for the thermostat temperature adjustments.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/micronova.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nnumber:\n  - platform: micronova\n    thermostat_temperature:\n      name: Thermostat temperature\n      step: 0.5\n    power_level:\n      name: Thermostat temperature\n```\n\n----------------------------------------\n\nTITLE: Configuring NFC Binary Sensors in YAML\nDESCRIPTION: Example configuration showing three different methods of setting up NFC binary sensors using NDEF content matching, tag ID matching, and UID matching. Demonstrates the various ways to identify and configure NFC tag detection.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/nfc.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entries\nbinary_sensor:\n  - platform: nfc\n    ndef_contains: pulse\n    name: \"NFC 1 Tag\"\n  - platform: nfc\n    tag_id: pulsed\n    name: \"NFC 2 Tag\"\n  - platform: nfc\n    uid: 74-10-37-94\n    name: \"MFC Tag\"\n```\n\n----------------------------------------\n\nTITLE: Setting DateTime Values with datetime.datetime.set Action\nDESCRIPTION: Demonstration of three different ways to set a full datetime value using the datetime.datetime.set action: using a string format, individual datetime parts, or a lambda function.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/datetime/index.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# String datetime\n- datetime.time.set:\n    id: my_datetime\n    datetime: \"2024-12-31 12:34:56\"\n\n# Individual datetime parts\n- datetime.datetime.set:\n    id: my_datetime\n    datetime:\n      year: 2024\n      month: 12\n      day: 31\n      hour: 12\n      minute: 34\n      second: 56\n\n# Using a lambda\n- datetime.datetime.set:\n    id: my_datetime\n    datetime: !lambda |-\n      // Return an ESPTime struct\n      return {.second = 56, .minute = 34, .hour = 12, .day_of_month = 31, .month = 12, .year = 2024};\n```\n\n----------------------------------------\n\nTITLE: Configuring Xiaomi WX08ZM Mosquito Repellent in ESPHome YAML\nDESCRIPTION: YAML configuration for the Mosquito Repellent Smart Version WX08ZM. Defines sensors for tablet resource level and battery level, implemented as a hybrid sensor.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/xiaomi_ble.rst#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n\nbinary_sensor:\n  - platform: xiaomi_wx08zm\n    mac_address: XX:XX:XX:XX:XX:XX\n    tablet:\n      name: \"WX08ZM Mosquito Tablet\"\n    battery_level:\n      name: \"WX08ZM Battery Level\"\n```\n\n----------------------------------------\n\nTITLE: PN7150 Fixed NDEF Message Writing\nDESCRIPTION: Writes a fixed URL NDEF message to an NFC tag with optional Android app record control.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/pn7150.rst#2025-04-21_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - tag.set_write_message:\n        message: https://www.home-assistant.io/tag/pulse\n        include_android_app_record: false   # optional\n    - tag.set_write_mode: my_pn7150_id\n```\n\n----------------------------------------\n\nTITLE: Checking Script Execution Status\nDESCRIPTION: The example provides the syntax to check if a script is running using the script.is_running condition in YAML, along with a lambda version, and explains how it can be used for control flow.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/script.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  if:\n    condition:\n      - script.is_running: my_script\n    then:\n      - logger.log: Script is running!\n```\n\nLANGUAGE: yaml\nCODE:\n```\nlambda: |-\n    if (id(my_script).is_running()) {\n        ESP_LOGI(\"main\", \"Script is running!\");\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring PCD8544 Display with SPI in ESPHome\nDESCRIPTION: Basic configuration example for connecting a PCD8544 display to ESPHome using SPI bus. This sets up the required pins (CLK, MOSI, reset, CS, DC) and demonstrates displaying text on the screen with customizable contrast.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/pcd8544.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nspi:\n  clk_pin: D5\n  mosi_pin: D7\n\ndisplay:\n  - platform: pcd8544\n    reset_pin: D0\n    cs_pin: D8\n    dc_pin: D1\n    contrast: 0x7f\n    lambda: |-\n      it.print(0, 0, id(font), \"Hello World!\");\n```\n\n----------------------------------------\n\nTITLE: Defining LD2450 Binary Sensors\nDESCRIPTION: This YAML snippet sets up binary sensors for the LD2450 component to detect presence and movement. Use 'ld2450_id' to associate with LD2450 component. The 'has_target', 'has_moving_target', and 'has_still_target' options allow tracking presence states for targets. Each option follows the available options from the Binary Sensor configuration in ESPHome.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ld2450.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nbinary_sensor:\n  - platform: ld2450\n    ld2450_id: ld2450_radar\n    has_target:\n      name: Presence\n    has_moving_target:\n      name: Moving Target\n    has_still_target:\n      name: Still Target\n```\n\n----------------------------------------\n\nTITLE: Access Point Mode Configuration\nDESCRIPTION: Configuration for setting up an ESP device as a WiFi access point with custom SSID and password.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/wifi.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nwifi:\n  ap:\n    ssid: \"Livingroom Fallback Hotspot\"\n    password: \"W1PBGyrokfLz\"\n```\n\n----------------------------------------\n\nTITLE: Runtime Frequency Adjustment for LibreTiny PWM\nDESCRIPTION: This YAML snippet demonstrates how to adjust the frequency of a specific LibreTiny PWM output at runtime, useful for applications such as controlling the pitch of a passive buzzer. The ID and frequency must be specified.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/output/libretiny_pwm.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n\"on_...:\\n  - output.libretiny_pwm.set_frequency:\\n      id: pwm_output\\n      frequency: 100Hz\"\n```\n\n----------------------------------------\n\nTITLE: Event Automation with Type Logging in YAML\nDESCRIPTION: Example of an event automation that logs the event type when triggered. The automation uses a lambda function to access the event_type variable.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/event/index.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nevent:\n  - platform: template\n    # ...\n    on_event:\n      then:\n        - lambda: |-\n            ESP_LOGD(\"main\", \"Event %s triggered.\", event_type.c_str());\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP23008 I/O Expander in ESPHome\nDESCRIPTION: This YAML configuration shows how to set up an MCP23008 I/O expander with ESPHome, defining the I2C address and setting up individual pins as both inputs and outputs. It requires the `mcp23008` component to be defined and references it in the `switch` and `binary_sensor` configurations.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/mcp230xx.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\n# Example configuration entry\nmcp23008:\n  - id: 'mcp23008_hub'\n    address: 0x20\n\n# Individual outputs\nswitch:\n  - platform: gpio\n    name: \"MCP23008 Pin #0\"\n    pin:\n      mcp23xxx: mcp23008_hub\n      # Use pin number 0\n      number: 0\n      mode:\n        output: true\n      inverted: false\n\n# Individual inputs\nbinary_sensor:\n  - platform: gpio\n    name: \"MCP23008 Pin #1\"\n    pin:\n      mcp23xxx: mcp23008_hub\n      # Use pin number 1\n      number: 1\n      # One of INPUT or INPUT_PULLUP\n      mode:\n        input: true\n      inverted: false\n\n```\n\n----------------------------------------\n\nTITLE: GPIO Binary Sensor Configuration\nDESCRIPTION: Configuration for the GPIO binary sensor to monitor motion detection status.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/at581x.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nbinary_sensor:\n  - platform: gpio\n    name: \"Human in front\"\n    pin: GPIOXX\n```\n\n----------------------------------------\n\nTITLE: Defining MSA301 Sensor Configuration in YAML\nDESCRIPTION: This snippet demonstrates how to configure the MSA301 sensor with parameters for type, range, resolution, and update interval. The settings allow customization of the sensor's behavior in the ESPHome environment.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/msa3xx.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"msa3xx:\\n  type: msa301\\n  range: 4G\\n  resolution: 12\\n  update_interval: 10s\"\n```\n\n----------------------------------------\n\nTITLE: ESP32 BLE Tracker Optimization Configuration\nDESCRIPTION: Configuration for optimizing Bluetooth reception performance by adjusting scan parameters for the ESP32 BLE tracker.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/bluetooth_proxy.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nesp32_ble_tracker:\n  scan_parameters:\n    interval: 1100ms\n    window: 1100ms\n```\n\n----------------------------------------\n\nTITLE: Setting Microphone Gain in Audio ADC Automation\nDESCRIPTION: This snippet illustrates the structure of an automation action to set the microphone gain for an audio ADC component. It requires specifying the component ID and the desired gain level in decibels.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/audio_adc/index.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\naudio_adc.set_mic_gain:\n  id: AUDIO_ADC_ID\n  mic_gain: GAIN_LEVEL\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Press Action in ESPHome\nDESCRIPTION: Example showing how to configure a button press action in an automation using button.press.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/button/index.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- button.press: my_button\n```\n\n----------------------------------------\n\nTITLE: Absolute Total Volume Dosed Sensor Configuration in YAML\nDESCRIPTION: Configuration for a sensor that indicates the absolute total volume in milliliters that has been dosed since the last time the pump was turned on.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/ezo_pmp.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: ezo_pmp\n    absolute_total_volume_dosed:\n      id: absolute_total_volume_dosed\n      name: Absolute Total Volume Dosed\n```\n\n----------------------------------------\n\nTITLE: Initializing BLE Tracker ID in YAML\nDESCRIPTION: This snippet defines the ID for the BLE tracker component in the ESP32 configuration. It is essential for setting up the BLE tracking functionality and relies on the ESPHome framework for effective operation.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/esp32_ble_tracker.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nesp32_ble_tracker:\n  id: ble_tracker_id\n```\n\n----------------------------------------\n\nTITLE: Script Execution and Control\nDESCRIPTION: The snippet demonstrates the execution of scripts via triggers and lambdas, including examples of parameterized and non-parameterized script calls.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/script.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# in a trigger:\non_...:\n  then:\n    - script.execute: my_script\n\n    # Calling a non-parameterised script in a lambda\n    - lambda: id(my_script).execute();\n\n    # Calling a script with parameters\n    - script.execute:\n        id: blink_light\n        delay_ms: 500\n\n    # Calling a parameterised script inside a lambda\n    - lambda: id(blink_light)->execute(1000);\n```\n\n----------------------------------------\n\nTITLE: Improv on_start Automation Example\nDESCRIPTION: Example of the on_start automation trigger that executes when the device is waiting for authorization or upon successful authorization.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/esp32_improv.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nesp32_improv:\n  on_start:\n    then:\n      - logger.log: \"Improv awaiting authorization/authorized\"\n```\n\n----------------------------------------\n\nTITLE: Throttle Filter in ESPHome YAML\nDESCRIPTION: This example shows the usage of the `throttle` filter which prevents sensor readings from being sent more often than a specified interval. This can be useful for reducing the frequency of updates and conserving resources.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/index.rst#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n\n    # Example filters:\n    filters:\n      - throttle: 1s\n      - heartbeat: 5s\n      - debounce: 0.1s\n      - delta: 5.0\n      - lambda: return x * (9.0/5.0) + 32.0;\n\n```\n\n----------------------------------------\n\nTITLE: Basic Servo Configuration in ESPHome\nDESCRIPTION: Example configuration for setting up a servo component with an ESP8266 PWM output. The servo is connected to a PWM output with 50Hz frequency, which is the standard frequency for most servo controllers.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/servo.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nservo:\n  - id: my_servo\n    output: pwm_output\n\n# Example output platform\n# On ESP32, use ledc output\noutput:\n  - platform: esp8266_pwm\n    id: pwm_output\n    pin: GPIOXX\n    frequency: 50 Hz\n```\n\n----------------------------------------\n\nTITLE: Configuring Single SPI Controller in ESPHome\nDESCRIPTION: Basic configuration for setting up a single SPI controller by defining the clock, MOSI, and MISO pins.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/spi.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry - single controller\nspi:\n  clk_pin: GPIOXX\n  mosi_pin: GPIOXX\n  miso_pin: GPIOXX\n```\n\n----------------------------------------\n\nTITLE: Retrieving Text Value in C++ Lambda\nDESCRIPTION: Demonstrates how to access the current value of a text entity in C++ lambda expressions.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/text/index.rst#2025-04-21_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\n// For example, create a custom log message when a value is received:\nESP_LOGI(\"main\", \"Value of my text: %s\", id(my_text).state.c_str());\n```\n\n----------------------------------------\n\nTITLE: MQTT Subscribe Lambda in C++\nDESCRIPTION: C++ lambda function for subscribing to MQTT topics and handling received messages programmatically.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/mqtt.rst#2025-04-21_snippet_13\n\nLANGUAGE: cpp\nCODE:\n```\nid(mqtt_client).subscribe(\"the/topic\", [=](const std::string &topic, const std::string &payload) {\n    // do something with payload\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring LED with LVGL in YAML\nDESCRIPTION: This snippet demonstrates how to configure an LED widget using LVGL in YAML. It sets properties like ID, alignment, color, and brightness for the LED. It also includes an action to update the LED's color using LVGL automation.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/widgets.rst#2025-04-21_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\n# Example widget:\n- led:\n    id: led_id\n    align: CENTER\n    color: 0xFF0000\n    brightness: 70%\n\n# Example action:\non_...:\n  then:\n    - lvgl.led.update:\n        id: led_id\n        color: 0x00FF00\n```\n\n----------------------------------------\n\nTITLE: BedJet Firmware Upgrade Lambda Function\nDESCRIPTION: Button configuration to trigger BedJet firmware upgrade check and installation through lambda function.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/climate/bedjet.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nbutton:\n  - platform: template\n    name: \"Check Bedjet(1) Firmware\"\n    on_press:\n      then:\n      - lambda: |-\n          id(bedjet_1).upgrade_firmware();\n```\n\n----------------------------------------\n\nTITLE: Creating Home Assistant API Actions for Nextion Control\nDESCRIPTION: YAML configuration for exposing Nextion control methods to Home Assistant through custom API actions, allowing external control of display elements.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/nextion.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# Enable Home Assistant API\napi:\n  actions:\n    - action: set_nextion_sensor\n      variables:\n        nextion_type: int\n        name: string\n        state: float\n      then:\n        - lambda: |-\n            id(nextion1).set_nextion_sensor_state(nextion_type,name,state);\n    - action: set_nextion_text\n      variables:\n        name: string\n        state: string\n      then:\n        - lambda: |-\n            id(nextion1).set_nextion_text_state(name,state);\n```\n\n----------------------------------------\n\nTITLE: Configuring Binary Sensors with Arduino Port Expander\nDESCRIPTION: Demonstrates how to set up binary sensors using the Arduino Port Expander. This allows reading digital inputs from the Arduino board through ESPHome.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/cookbook/arduino_port_extender.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nbinary_sensor:\n  - platform: custom\n    lambda: |-\n      return {ape_binary_sensor(ape, 9),\n              ape_binary_sensor(ape, 14) // 14 = A0\n              };\n\n    binary_sensors:\n      - id: binary_sensor_pin2\n        name: Binary sensor pin 2\n      - id: binary_sensor_pin3\n        name: Binary sensor pin 3\n        on_press:\n          ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Display in ESPHome\nDESCRIPTION: Configuration for loading and displaying an image in ESPHome. The image is loaded from a file, assigned an ID for reference, and resized to 200x200 pixels with RGB24 color format.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/st7789v.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n    image:\n      - file: \"image.png\"\n        id: my_image\n        resize: 200x200\n        type: RGB24\n```\n\n----------------------------------------\n\nTITLE: Implementing Semicircle Gauge with LVGL\nDESCRIPTION: YAML configuration for creating a semicircular gauge display using LVGL meter and label widgets. Includes indicator line and arc components with dynamic value updates.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/cookbook/lvgl.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: ...\n    id: values_between_-10_and_10\n    on_value:\n      - lvgl.indicator.update:\n          id: val_needle\n          value: !lambda return x;\n      - lvgl.label.update:\n          id: val_text\n          text:\n            format: \"%.0f\"\n            args: [ 'x' ]\nlvgl:\n    ...\n    pages:\n      - id: gauge_page\n        widgets:\n          - obj:\n              height: 240 \n              width: 240\n              align: CENTER\n              bg_color: 0xFFFFFF\n              border_width: 0\n              pad_all: 4\n              widgets:\n                - meter:\n                    height: 100%\n                    width: 100%\n                    border_width: 0\n                    bg_opa: TRANSP\n                    align: CENTER\n                    scales:\n                      - range_from: -10\n                        range_to: 10\n                        angle_range: 180\n                        ticks:\n                          count: 0\n                        indicators:\n                          - line:\n                              id: val_needle\n                              width: 8\n                              r_mod: 12\n                              value: -2\n                          - arc:\n                              color: 0xFF3000\n                              r_mod: 10\n                              width: 31\n                              start_value: -10\n```\n\n----------------------------------------\n\nTITLE: Deleting an Enrolled Fingerprint\nDESCRIPTION: Removes a specific enrolled fingerprint identified by the slot number. Provides a shorthand for easy action definition. It's crucial for maintaining an updated enrollment list.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/fingerprint_grow.rst#2025-04-21_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - fingerprint_grow.delete:\n        finger_id: 0\n    - fingerprint_grow.delete: 0\n```\n\n----------------------------------------\n\nTITLE: M5Stack Atom Echo PDM Microphone Configuration\nDESCRIPTION: Specific configuration for the M5Stack Atom Echo device using an external PDM microphone on the IÂ²S audio platform\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/microphone/i2s_audio.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmicrophone:\n  - platform: i2s_audio\n    adc_type: external\n    i2s_din_pin: GPIOXX\n    pdm: true\n```\n\n----------------------------------------\n\nTITLE: Implementing Time-Based Conditions in ESPHome\nDESCRIPTION: Shows how to use the 'for' condition to check if a given condition has been true for a specified amount of time before executing an action.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/automations/actions.rst#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  if:\n    condition:\n      for:\n        time: 5min\n        condition:\n          api.connected:\n    then:\n      - logger.log: API has stayed connected for at least 5 minutes!\n```\n\n----------------------------------------\n\nTITLE: BLE Value Configuration Examples in YAML\nDESCRIPTION: Multiple examples of different value types for BLE characteristics, including simple values, strings, integers, byte arrays, and lambda functions for dynamic values.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/esp32_ble_server.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nesp32_ble_server:\n  services:\n    - uuid: # ...\n      characteristics:\n        - uuid: # ...\n          # Simple value (auto-detect type)\n          value: \"Hello, World!\"\n        - uuid: # ...\n          # String value\n          value:\n            data: \"Hello, World!\"\n            type: string\n            string_encoding: utf-8\n        - uuid: # ...\n          # Integer value\n          value:\n            data: \"123\"\n            type: uint16_t\n            endianness: LITTLE\n        - uuid: # ...\n          # Array of bytes value\n          value:\n            data: [9, 9, 9]\n        - uuid: # ...\n          # Lambda value\n          value:\n            data: !lambda 'return std::vector<uint8_t>({9, 9, 9});'\n        - uuid: # ...\n          # Lambda value using ByteBuffer\n          value:\n            data: !lambda 'return bytebuffer::ByteBuffer::wrap(0.182).get_data();'\n```\n\n----------------------------------------\n\nTITLE: Defining Pulsating Light Effects in YAML\nDESCRIPTION: This code snippet configures several types of pulsating light effects with adjustable parameters such as transition_length and update_interval for brightness control.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/light/index.rst#2025-04-21_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nlight:\n  - platform: ...\n    # ...\n    effects:\n      - pulse:\n      - pulse:\n          name: \"Fast Pulse\"\n          transition_length: 0.5s\n          update_interval: 0.5s\n          min_brightness: 0%\n          max_brightness: 100%\n      - pulse:\n          name: \"Slow Pulse\"\n          transition_length: 500ms\n          update_interval: 2s\n      - pulse:\n          name: \"Asymmetrical Pulse\"\n          transition_length:\n            on_length: 1s\n            off_length: 500ms\n          update_interval: 1.5s\n```\n\n----------------------------------------\n\nTITLE: LD2410 GPIO Binary Sensor Configuration\nDESCRIPTION: This snippet demonstrates how to configure a GPIO binary sensor to monitor the presence indicated by the LD2410 sensor, taking the light function into account. It allows you to track presence based on the OUT pin.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ld2410.rst#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nbinary_sensor:\n  - platform: gpio\n    pin: GPIOXX\n    name: gpio out pin presence\n    device_class: presence\n```\n\n----------------------------------------\n\nTITLE: Daily Time Synchronization for PVVX MiThermometer Display\nDESCRIPTION: Configuration example that sets up daily time synchronization for a PVVX MiThermometer device. It uses a long update interval and zero validity period to only perform the time sync operation without displaying custom data.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/pvvx_mithermometer.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ntime:\n  - platform: homeassistant\n    id: homeassistant_time\n\nesp32_ble_tracker:\n\nble_client:\n- mac_address: XX:XX:XX:XX:XX:XX\n  id: pvvx_ble_display\n\nsensor:\n- platform: pvvx_mithermometer\n  mac_address: XX:XX:XX:XX:XX:XX\n  temperature:\n    name: \"PVVX Temperature\"\n  humidity:\n    name: \"PVVX Humidity\"\n  battery_level:\n    name: \"PVVX Battery-Level\"\n  battery_voltage:\n    name: \"PVVX Battery-Voltage\"\n\ndisplay:\n- platform: pvvx_mithermometer\n  ble_client_id: pvvx_ble_display\n  update_interval: 24h\n  validity_period: 0s\n  time_id: homeassistant_time\n```\n\n----------------------------------------\n\nTITLE: AEHA Remote Transmitter Action Configuration\nDESCRIPTION: Demonstrates sending an AEHA protocol remote code with specific address and data parameters for Japanese home appliance protocols.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/remote_transmitter.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - remote_transmitter.transmit_aeha:\n      address: 0x1FEF\n      data: [0x1F, 0x3E, 0x06, 0x5F]\n```\n\n----------------------------------------\n\nTITLE: BLE Descriptor Configuration in YAML\nDESCRIPTION: Example showing how to configure a descriptor for a BLE characteristic with a static value.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/esp32_ble_server.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nesp32_ble_server:\n  services:\n    - uuid: # ...\n      characteristics:\n        - uuid: # ...\n          descriptors:\n            - uuid: 2901\n              value:\n                value: \"Hello, World Descriptor!\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Beken SPI LED Strip in YAML for ESPHome\nDESCRIPTION: This YAML snippet demonstrates how to set up a Beken SPI LED strip in ESPHome. It specifies the platform, RGB order, pin, number of LEDs, chipset, and name for the light component.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/light/beken_spi_led_strip.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlight:\n  - platform: beken_spi_led_strip\n    rgb_order: GRB\n    pin: P16\n    num_leds: 30\n    chipset: ws2812\n    name: \"My Light\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Factory Reset Switch in ESPHome YAML\nDESCRIPTION: Example configuration for adding a factory reset switch to an ESPHome device. This creates a switch that, when activated, will erase all preferences from flash memory and reboot the device with factory default settings.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/switch/factory_reset.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nswitch:\n  - platform: factory_reset\n    name: Restart with Factory Default Settings\n```\n\n----------------------------------------\n\nTITLE: Setting Logger Configuration in YAML for Error Logging\nDESCRIPTION: This section configures the logging level to suppress warnings during OpenTherm operation. It adjusts the logger settings to capture relevant errors, making debugging easier.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/opentherm.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nlogger:\n  logs:\n    component: ERROR\n```\n\n----------------------------------------\n\nTITLE: Automation Trigger for Orientation Change Detection\nDESCRIPTION: This YAML snippet is for detecting orientation changes in the device relative to gravity. It logs an event when the orientation changes.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/msa3xx.rst#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n\"msa3xx:\\n  type: msa301\\n  # ...\\n  on_orientation:\\n    - then: \\n        - logger.log: \\\"Orientation change detected\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Changelog Structure with RST\nDESCRIPTION: Sets up the documentation structure for ESPHome changelog using reStructuredText directives. Includes a redirect to the latest version page and configures a hidden table of contents that recursively includes all files in the directory.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/changelog/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nChangelog\n=========\n\n.. redirect::\n    :url: /changelog/2025.4.0.html\n\n.. toctree::\n    :glob:\n    :maxdepth: 1\n    :hidden:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Configuring CanalSat Remote Transmission in YAML\nDESCRIPTION: Example configuration for sending CanalSat infrared remote codes using ESPHome. Requires device ID, optional address, and command values.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/remote_transmitter.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - remote_transmitter.transmit_canalsat:\n      device: 0x25\n      address: 0x00\n      command: 0x02\n```\n\n----------------------------------------\n\nTITLE: MQTT JSON Publish Action in YAML\nDESCRIPTION: Configuration for publishing JSON-formatted MQTT messages with dynamic content construction.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/mqtt.rst#2025-04-21_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - mqtt.publish_json:\n        topic: the/topic\n        payload: |-\n          root[\"key\"] = id(my_sensor).state;\n          root[\"greeting\"] = \"Hello World\";\n```\n\n----------------------------------------\n\nTITLE: Sending JSON Payload in ESPHome HTTP POST Request (Advanced)\nDESCRIPTION: Advanced example of sending a JSON payload in a POST request using ArduinoJson library. This method allows sending boolean and number values.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/http_request.rst#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - http_request.post:\n      url: https://esphome.io\n      json: |-\n        root[\"key\"] = id(my_sensor).state;\n```\n\n----------------------------------------\n\nTITLE: ESP32 GPIO Pin Configuration\nDESCRIPTION: Example of configuring a GPIO pin as a binary sensor on an ESP32 board.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/esp32.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nbinary_sensor:\n  - platform: gpio\n    name: \"Pin GPIO23\"\n    pin: GPIO23\n```\n\n----------------------------------------\n\nTITLE: Home Assistant API Action for Zero Point Calibration - YAML\nDESCRIPTION: Defines an API action within Home Assistant configuration to perform zero point calibration on the MH-Z19 sensor. This allows remote calibration initiation from Home Assistant interface using the defined action.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/mhz19.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napi:\n  actions:\n    - action: mhz19_calibrate_zero\n      then:\n        - mhz19.calibrate_zero: my_mhz19_id\n```\n\n----------------------------------------\n\nTITLE: Controlling a Valve with Specific Position Using C++ Lambda\nDESCRIPTION: C++ lambda expression to control a valve's position programmatically in ESPHome.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/valve/index.rst#2025-04-21_snippet_10\n\nLANGUAGE: cpp\nCODE:\n```\nauto call = id(valve_1).make_call();\n// set attributes\ncall.set_position(0.5);\ncall.perform();\n```\n\n----------------------------------------\n\nTITLE: Configuring Pulse Width Sensor in ESPHome\nDESCRIPTION: Example configuration for a pulse width sensor using a digital pin, with default settings to measure signal duration. Allows monitoring pulse lengths between microseconds and 70 minutes.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/pulse_width.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: pulse_width\n    pin: D0\n    name: Pulse Width Sensor\n```\n\n----------------------------------------\n\nTITLE: Sonoff RF Bridge Configuration\nDESCRIPTION: Configuration for the black Sonoff RF Bridge after bypassing the EFM8BB1 microcontroller, showing remote receiver and transmitter setup.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/remote_receiver.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nremote_receiver:\n  pin: 4\n  dump: all\n\nremote_transmitter:\n  pin: 5\n  carrier_duty_percent: 100%\n```\n\n----------------------------------------\n\nTITLE: Temperature Sensor Configuration from Home Assistant\nDESCRIPTION: Configuration for importing two temperature sensors from Home Assistant with internal mode enabled to prevent republishing.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/cookbook/display_time_temp_oled.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: homeassistant\n    id: inside_temperature\n    entity_id: sensor.mellanvaning_temperature\n    internal: true\n\n  - platform: homeassistant\n    id: outside_temperature\n    entity_id: sensor.10_00080192969d_temperature\n    internal: true\n```\n\n----------------------------------------\n\nTITLE: LD2410 Bluetooth Password Set Action with API\nDESCRIPTION: This example demonstrates how to change the Bluetooth password of the LD2410 from Home Assistant using an API action. It defines an action with a variable for the new password and then uses the `bluetooth_password.set` action with a lambda to apply the new password.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ld2410.rst#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nld2410:\n  id: my_ld2410\n\napi:\n  actions:\n    - action: set_ld2410_bluetooth_password\n      variables:\n        password: string\n      then:\n        - bluetooth_password.set:\n            id: my_ld2410\n            password: !lambda 'return password;'\n```\n\n----------------------------------------\n\nTITLE: Setting total pulse count for pulse counter\nDESCRIPTION: This YAML snippet demonstrates how to set or reset the total pulse count from Home Assistant using an API action. It includes defining an action to set pulse total, allowing for synchronization with external meters.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/pulse_counter.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# Set pulse counter total from home assistant using this action:\napi:\n  actions:\n    - action: set_pulse_total\n      variables:\n        new_pulse_total: int\n      then:\n        - pulse_counter.set_total_pulses:\n            id: pulse_counter_id\n            value: !lambda 'return new_pulse_total;'\n```\n\n----------------------------------------\n\nTITLE: Configuring a Basic Button Widget in LVGL with YAML\nDESCRIPTION: This YAML configuration defines a basic button widget with specified position, width, height, and ID. It represents the simplest form of a button that can be created within an ESPHome and LVGL integration.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/widgets.rst#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n    # Example widget:\n    - button:\n        x: 10\n        y: 10\n        width: 50\n        height: 30\n        id: btn_id\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Simplified Action Syntax in YAML\nDESCRIPTION: Demonstrates the simplified syntax for configuring actions in ESPHome, removing the need for nested 'then' key when specifying actions like turning on a switch.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/changelog/v1.8.0.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - switch.turn_on: my_switch\n```\n\n----------------------------------------\n\nTITLE: PCF85063 Read Time Action Configuration\nDESCRIPTION: Configuration for manually triggering time synchronization from RTC hardware to system.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/time/pcf85063.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - pcf85063.read_time\n\n  # in case you need to specify the DS1307 id\n  - pcf85063.read_time:\n      id: pcf85063_time\n```\n\n----------------------------------------\n\nTITLE: Configuring Lilygo T5 4.7\" Touchscreen in ESPHome YAML\nDESCRIPTION: This YAML snippet demonstrates how to set up the Lilygo T5 4.7\" touchscreen in an ESPHome configuration. It requires IÂ²C to be configured and specifies the touchscreen platform and interrupt pin.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/touchscreen/lilygo_t5_47.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\ntouchscreen:\n  - platform: lilygo_t5_47\n    interrupt_pin: GPIOXX\n```\n\n----------------------------------------\n\nTITLE: Checking MQTT Connection Status - C++\nDESCRIPTION: This C++ snippet provides an alternative way to check the connection status of the MQTT client using an ID. If connected, it performs some actions.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/mqtt.rst#2025-04-21_snippet_20\n\nLANGUAGE: cpp\nCODE:\n```\n        if (id(mqtt_client)->is_connected()) {\n          // do something if MQTT is connected\n        }\n```\n\n----------------------------------------\n\nTITLE: Triggering on Tag Detection via PN7160 in YAML\nDESCRIPTION: This snippet illustrates how to configure a trigger for when the PN7160 detects an NFC tag. It sends the tag UID to an MQTT topic or Home Assistant as needed. The parameter 'x' holds the tag UID. Ensure MQTT or Home Assistant integration is properly configured.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/pn7160.rst#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\npn7160_...:\n  # ...\n  on_tag:\n    then:\n      - mqtt.publish:\n          topic: pn7160/tag\n          payload: !lambda 'return x;'\n```\n\nLANGUAGE: yaml\nCODE:\n```\npn7160_...:\n  # ...\n  on_tag:\n    then:\n      - homeassistant.tag_scanned: !lambda 'return x;'\n```\n\nLANGUAGE: yaml\nCODE:\n```\npn7160_...:\n  # ...\n  on_tag:\n    then:\n    - text_sensor.template.publish:\n        id: nfc_tag\n        state: !lambda 'return x;'\n\ntext_sensor:\n  - platform: template\n    name: \"NFC Tag\"\n    id: nfc_tag\n```\n\n----------------------------------------\n\nTITLE: Configuring an LVGL Keyboard Widget\nDESCRIPTION: This YAML snippet configures an LVGL keyboard widget, associating it with a textarea and setting the keyboard layout mode. It also demonstrates how to update the keyboard's mode and associated textarea through an action.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/widgets.rst#2025-04-21_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\n    # Example widget:\n    - keyboard:\n        id: keyboard_id\n        textarea: textarea_1\n        mode: TEXT_UPPER\n```\n\n----------------------------------------\n\nTITLE: Last Volume Requested Sensor Configuration in YAML\nDESCRIPTION: Configuration for a sensor that indicates the total volume in milliliters that is being dosed (or was if the pump has already finished) by a dose Action.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/ezo_pmp.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: ezo_pmp\n    last_volume_requested:\n      id: last_volume_requested\n      name: Last Volume Requested\n```\n\n----------------------------------------\n\nTITLE: Logging Version Info Example\nDESCRIPTION: Example log output showing ESPHome version and compilation time information printed during boot.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/changelog/v1.9.0.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n[13:57:33][I][application:092]: You're running esphomelib v1.9.0 compiled on Nov  3 2018, 13:55:11\n```\n\n----------------------------------------\n\nTITLE: Configuring Template Number in ESPHome\nDESCRIPTION: Example configuration for a template number with min/max values, step size, and optimistic mode. Allows creating a custom number component with flexible settings.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/number/template.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nnumber:\n  - platform: template\n    name: \"Template number\"\n    optimistic: true\n    min_value: 0\n    max_value: 100\n    step: 1\n```\n\n----------------------------------------\n\nTITLE: Quantile Filtering in ESPHome YAML\nDESCRIPTION: This example illustrates using the `quantile` filter in ESPHome to smooth sensor data by applying a moving quantile filter. This filter helps remove outliers from the sensor data and provides a more stable reading.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/index.rst#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n\n    # Example configuration entry\n    - platform: wifi_signal\n      # ...\n      filters:\n        - quantile:\n            window_size: 7\n            send_every: 4\n            send_first_at: 3\n            quantile: .9\n\n```\n\n----------------------------------------\n\nTITLE: Defining Selec Meter Sensor Attributes in YAML\nDESCRIPTION: This YAML configuration defines various attributes related to the Selec energy monitor such as total active energy, import/export energy, reactive power, voltage, and current values. Each attribute is given a user-friendly name for easier identification in the system.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/selec_meter.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: selec_meter\n    total_active_energy:\n      name: \"SelecEM2M Total Active Energy\"\n    import_active_energy:\n      name: \"SelecEM2M Import Active Energy\"\n    export_active_energy:\n      name: \"SelecEM2M Export Active Energy\"\n    total_reactive_energy:\n      name: \"SelecEM2M Total Reactive Energy\"\n    import_reactive_energy:\n      name: \"SelecEM2M Import Reactive Energy\"\n    export_reactive_energy:\n      name: \"SelecEM2M Export Reactive Energy\"\n    apparent_energy:\n      name: \"SelecEM2M Apparent Energy\"\n    active_power:\n      name: \"SelecEM2M Active Power\"\n    reactive_power:\n      name: \"SelecEM2M Reactive Power\"\n    apparent_power:\n      name: \"SelecEM2M Apparent Power\"\n    voltage:\n      name: \"SelecEM2M Voltage\"\n    current:\n      name: \"SelecEM2M Current\"\n    power_factor:\n      name: \"SelecEM2M Power Factor\"\n    frequency:\n      name: \"SelecEM2M Frequency\"\n    maximum_demand_active_power:\n      name: \"SelecEM2M Maximum Demand Active Power\"\n    maximum_demand_reactive_power:\n      name: \"SelecEM2M Maximum Demand Reactive Power\"\n    maximum_demand_apparent_power:\n      name: \"SelecEM2M Maximum Demand Apparent Power\"\n```\n\n----------------------------------------\n\nTITLE: Basic UDP Sensor Configuration with Encryption\nDESCRIPTION: Configuration example showing UDP communication with encryption, ping-pong mechanism, and rolling code for sensor data exchange between multiple devices.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/udp.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nudp:\n  update_interval: 60s\n  addresses: [\"10.87.135.110\"]\n  ping_pong_enable: true\n  rolling_code_enable: true\n  encryption: \"Muddy Waters\"\n  binary_sensors:\n    - tick_tock\n  providers:\n    - name: st7735s\n      encryption: \"Blind Willie Johnson\"\n\nbinary_sensor:\n  - platform: udp\n    provider: st7735s\n    id: tick_tock\n  - platform: udp\n    provider: room-lights\n    id: relay1_sensor\n\nsensor:\n  - platform: udp\n    provider: st7735s\n    id: wifi_signal_sensor\n```\n\n----------------------------------------\n\nTITLE: Configuring Sharp GP2Y1010AU0F PM2.5 Sensor in ESPHome YAML\nDESCRIPTION: This YAML configuration sets up a Sharp GP2Y1010AU0F particulate matter sensor in ESPHome. It requires an ADC sensor for voltage measurement and a binary output for controlling the sensor's IR LED. The sensor is named 'Indoor PM2.5' and uses placeholder values for the sensor and output components.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/gp2y1010au0f.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: gp2y1010au0f\n    name: 'Indoor PM2.5'\n    sensor: REPLACEME\n    output: REPLACEME\n```\n\n----------------------------------------\n\nTITLE: Basic Grove TB6612FNG Motor Driver Configuration in ESPHome\nDESCRIPTION: Example YAML configuration for setting up a Grove TB6612FNG motor driver component with IÂ²C address. This establishes the driver with an identifier for reference in actions.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/grove_tb6612fng.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration\ngrove_tb6612fng:\n  - address: 0x14\n    id: test_motor\n```\n\n----------------------------------------\n\nTITLE: Configuring Dual Controller with Multiple Valves in ESPHome\nDESCRIPTION: Configuration for a dual-controller system with five valves and two pumps shared between controllers. Includes valve overlap and custom run duration settings.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sprinkler.rst#2025-04-21_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nesphome:\n    name: esp-sprinkler-controller\n\nesp32:\n    board: featheresp32\n\nwifi:\n    ssid: \"wifi_ssid\"\n    password: \"wifi_password\"\n\nlogger:\n\nsprinkler:\n  - id: lawn_sprinkler_ctrlr\n    main_switch: \"Lawn Sprinklers\"\n    auto_advance_switch: \"Lawn Sprinklers Auto Advance\"\n    reverse_switch: \"Lawn Sprinklers Reverse\"\n    valve_overlap: 5s\n    valves:\n      - valve_switch: \"Front Lawn\"\n        enable_switch: \"Enable Front Lawn\"\n        pump_switch_id: sprinkler_pump_sw0\n        run_duration: 900s\n        valve_switch_id: lawn_sprinkler_valve_sw0\n```\n\n----------------------------------------\n\nTITLE: Modbus Controller Output with Lambda\nDESCRIPTION: This YAML configuration demonstrates a more advanced Modbus controller output using a lambda function for custom data processing before writing to the Modbus register. The lambda function logs the incoming value, prepares the payload, and multiplies the value before returning it, showcasing the flexibility of using lambdas for complex data manipulation.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/output/modbus_controller.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n\"output:\\n  - platform: modbus_controller\\n    modbus_controller_id: modbus1\\n    address: 2048\\n    value_type: U_WORD\\n    write_lambda: |-\\n      ESP_LOGD(\\\"main\\\",\\\"Modbus Output incoming value = %f\\\",x);\\n      uint16_t value = x ;\\n      payload.push_back(value);\\n      return x * 1000 ;\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Wake-on-LAN Button in ESPHome YAML\nDESCRIPTION: Configuration example showing how to set up a Wake-on-LAN button that can send wake packets to a specified MAC address. The configuration requires a target MAC address and allows for standard button configuration options.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/button/wake_on_lan.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nbutton:\n  - platform: wake_on_lan\n    name: \"Start the Server\"\n    target_mac_address: XX:XX:XX:XX:XX:XX\n```\n\n----------------------------------------\n\nTITLE: Specifying Platform Version for RP2040 in ESPHome\nDESCRIPTION: Previously required configuration snippet that includes 'platform_version', now discouraged due to potential mismatches causing build failures in later ESPHome versions. The snippet defines the Git repository for the platform version used in configuration.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/rp2040.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nrp2040:\n  board: rpipicow\n  framework:\n    platform_version: https://github.com/maxgerhardt/platform-raspberrypi.git\n```\n\n----------------------------------------\n\nTITLE: Nextion On-Setup Automation Example\nDESCRIPTION: YAML configuration showing how to use the on_setup trigger to direct users to different pages based on WiFi configuration status.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/nextion.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nwifi:\n  ap:  # Spawn an AP with the device name and MAC address with no password\n\ncaptive_portal:\n\ndisplay:\n  - platform: nextion\n    id: disp\n    on_setup:\n      then:\n        - lambda: |-\n            // Check if WiFi hot-spot is configured\n            if (wifi::global_wifi_component->has_sta()) {\n              // Show the main page\n              id(disp).goto_page(\"main_page\");\n            } else {\n```\n\n----------------------------------------\n\nTITLE: Using WireGuard Enabled Condition in ESPHome Automations\nDESCRIPTION: This configuration example demonstrates how to use the wireguard.enabled condition in automations. It checks if WireGuard is currently enabled and allows for conditional execution of actions.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/wireguard.rst#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - if:\n      condition: wireguard.enabled\n      then:\n        - ...\n      else:\n        - ...\n```\n\n----------------------------------------\n\nTITLE: PMWCS3 Air Calibration Action\nDESCRIPTION: This YAML snippet illustrates how to configure the air calibration action for the PMWCS3 sensor. The air calibration lasts for 30 seconds and has a required ID parameter to identify the sensor within ESPHome's configuration.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/pmwcs3.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: pmwcs3\n    id: pmwcs3_id\n    # ...\n\n# in some trigger\non_...:\n  - sensor.pmwcs3_id.air_calibration:\n      id: pmwcs3_id\n```\n\n----------------------------------------\n\nTITLE: Configuring Inverted Status LED in ESPHome YAML\nDESCRIPTION: This YAML snippet shows how to configure a Status LED that is in active-LOW mode, such as with D1 Mini ESP8266 boards. It uses the 'inverted' option in the Pin Schema to invert the LED signal.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/light/status_led.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npin:\n  number: GPIOXX\n  inverted: true\n```\n\n----------------------------------------\n\nTITLE: Custom Mopeka Standard Check Sensor Configuration\nDESCRIPTION: Advanced configuration demonstrating custom tank settings with mixed propane/butane, custom distance points, and individual sensor tracking\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/mopeka_std_check.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  # Custom example - user defined empty / full points and 80% butane and 20% propane.\n  - platform: mopeka_std_check\n    mac_address: XX:XX:XX:XX:XX:XX\n    tank_type: CUSTOM\n    custom_distance_full: 40cm\n    custom_distance_empty: 32mm\n    propane_butane_mix: 20%\n    temperature:\n        name: \"Propane c test temp\"\n    level:\n        name: \"Propane c test level\"\n    distance:\n        name: \"Propane c test distance\"\n    battery_level:\n        name: \"Propane c test battery level\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Uponor Smatrix with System Address in YAML\nDESCRIPTION: YAML configuration for the Uponor Smatrix component with a specified system address and a climate component for a thermostat.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/uponor_smatrix.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nuponor_smatrix:\n  address: 0x110B\n\nclimate:\n  - platform: uponor_smatrix\n    address: 0xDE13\n    name: Thermostat Living Room\n```\n\n----------------------------------------\n\nTITLE: PID Deadband Configuration Example\nDESCRIPTION: Example configuration showing how to set up deadband parameters with asymmetric thresholds around the target temperature to prevent unnecessary system oscillation.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/climate/pid.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndefault_target_temperature: 21Â°C\n...\ndeadband_parameters:\n  threshold_high: 0.5Â°C\n  threshold_low: -1.0Â°C\n```\n\n----------------------------------------\n\nTITLE: Sending RF Code in Automation\nDESCRIPTION: Demonstrates how to send an RF code using the rf_bridge.send_code action with specific timing and code parameters\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/rf_bridge.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\non_...: \n  then:\n    - rf_bridge.send_code:\n        sync: 0x700\n        low: 0x800\n        high: 0x1000\n        code: 0xABC123\n```\n\n----------------------------------------\n\nTITLE: Cover Close Action Configuration\nDESCRIPTION: YAML configuration for closing a cover using action triggers.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/cover/index.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - cover.close: cover_1\n```\n\n----------------------------------------\n\nTITLE: Dosing with Constant Flow Rate in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure a peristaltic pump to dose a specific volume every minute for a specified duration using the `ezo_pmp.dose_with_constant_flow_rate` action. It supports templated values for dynamic dosing based on sensor inputs. Required parameters include `id`, `volume_per_minute`, and `duration`.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/ezo_pmp.rst#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n  - ezo_pmp.dose_with_constant_flow_rate:\n      id: ezo_pmp\n      volume_per_minute: 10.2\n      duration: 2\n\n  # Templated\n  - ezo_pmp.dose_with_constant_flow_rate:\n      id: ezo_pmp\n      volume_per_minute: !lambda |-\n        return id(some_volume_sensor).state;\n      duration: !lambda |-\n        return id(some_duration_sensor).state;\n```\n\n----------------------------------------\n\nTITLE: Transmitting Raw RC-Switch Codes with YAML\nDESCRIPTION: This code block is for sending raw RC-Switch codes, which should be extracted from a dump output. Protocol settings are optional but may be needed for particular devices.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/remote_transmitter.rst#2025-04-21_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - remote_transmitter.transmit_rc_switch_raw:\n      code: '001010011001111101011011'\n      protocol: 1\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for ESPHome\nDESCRIPTION: Sample docker-compose configuration for setting up ESPHome with volume mounts, network settings, and environment variables\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/getting_started_command_line.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\nservices:\n  esphome:\n    container_name: esphome\n    image: ghcr.io/esphome/esphome\n    volumes:\n      - /path/to/esphome/config:/config\n      - /etc/localtime:/etc/localtime:ro\n    restart: always\n    privileged: true\n    network_mode: host\n    environment:\n      - USERNAME=test\n      - PASSWORD=ChangeMe\n```\n\n----------------------------------------\n\nTITLE: Writing NFC Tag Data with PN532\nDESCRIPTION: A sequence of operations for writing data to an NFC tag including debug logging, writing the payload, waiting for completion, and logging the result. Uses both C++ debug logging and YAML automation syntax.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/pn532.rst#2025-04-21_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\nESP_LOGD(\"ndef\", \"Writing payload: %s\", uri.c_str());\nid(pn532_board).write_mode(message);\n```\n\nLANGUAGE: yaml\nCODE:\n```\n- wait_until:\n    not:\n      pn532.is_writing:\n- logger.log: \"Finished writing tag\"\n```\n\n----------------------------------------\n\nTITLE: Configuring IR Transmitter in YAML\nDESCRIPTION: YAML configuration for setting up an infrared transmitter with 50% carrier signal duty cycle.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/setting_up_rmt_devices.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nremote_transmitter:\\n  pin: GPIOXX\\n  carrier_duty_percent: 50%\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Component with IPv6 Support in ESPHome - YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure the network component in ESPHome to enable IPv6 support. Key parameters include 'enable_ipv6', a boolean to enable IPv6, defaulting to false, and 'min_ipv6_addr_count', an integer dictating the required number of IPv6 addresses, defaulting to 0. Dependencies include the lwIP library for implementing SLAAC for IPv6. The snippet ensures network configuration flexibility while considering security and privacy implications per RFC7721.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/network.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration\nnetwork:\n    enable_ipv6: true\n    min_ipv6_addr_count: 2\n```\n\n----------------------------------------\n\nTITLE: Configuring a Template Fan in ESPHome with YAML\nDESCRIPTION: Example configuration for creating a virtual fan with basic triggers. This creates a template fan with a name and defines triggers for state changes and speed settings.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/fan/template.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nfan:\n  - platform: template\n    name: \"Virtual Fan\"\n    on_state:\n      - do something\n    on_speed_set:\n      - do something\n```\n\n----------------------------------------\n\nTITLE: Nextion Custom Sensor Protocol Implementation\nDESCRIPTION: Implementation of a custom sensor protocol for sending data from Nextion to ESPHome, with specific command sequences for sensor data transmission\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/nextion.rst#2025-04-21_snippet_2\n\nLANGUAGE: c++\nCODE:\n```\nprinth 91\nprints \"temperature\",0\nprinth 00\nprints temperature.val,0\nprinth FF FF FF\n```\n\n----------------------------------------\n\nTITLE: Configuring LightWaveRF in ESPHome YAML\nDESCRIPTION: Example configuration for setting up LightWaveRF in ESPHome. Specifies the pins for connecting the receiver and transmitter.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lightwaverf.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\n\n# Specify the two pins to connect the receiver and transmitter\nlightwaverf:\n  read_pin: GPIOXX\n  write_pin: GPIOXX\n```\n\n----------------------------------------\n\nTITLE: Configuring CanalSatLD Remote Transmission in YAML\nDESCRIPTION: Example configuration for sending CanalSatLD infrared remote codes using ESPHome. Uses 56khz carrier frequency and requires similar parameters to CanalSat.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/remote_transmitter.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - remote_transmitter.transmit_canalsatld:\n      device: 0x25\n      address: 0x00\n      command: 0x02\n```\n\n----------------------------------------\n\nTITLE: Transmitting Toto IR Code with ESPHome\nDESCRIPTION: This YAML snippet configures ESPHome to transmit a Toto infrared remote code. `command` is required, while `rc_code_1` and `rc_code_2` are optional. The remote repeats three times at a 36ms interval by default. This behavior can be customized with `repeat` and `wait_time`.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/remote_transmitter.rst#2025-04-21_snippet_36\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - remote_transmitter.transmit_toto:\n      command: 0xED  # Set water and seat temperature\n      rc_code_1: 0x0 # Water heater off\n      rc_code_2: 0x0 # Seat heater off\n      # Repeats 3 times at a 36ms interval by default\n```\n\n----------------------------------------\n\nTITLE: PN7150 Random UUID NDEF Writing\nDESCRIPTION: Writes a random UUID to an NFC tag in Home Assistant Companion App format using lambda function.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/pn7150.rst#2025-04-21_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - tag.set_write_message:\n        message: !lambda \"return nfc::get_random_ha_tag_ndef();\"\n    - tag.set_write_mode: my_pn7150_id\n```\n\n----------------------------------------\n\nTITLE: NTC Self-Heating Prevention with GPIO Control in ESPHome\nDESCRIPTION: This configuration prevents self-heating of the NTC sensor by only supplying power during measurement. It defines an ADC sensor and a GPIO switch to control the power supply, and uses an interval to trigger measurements.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ntc.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n    sensor:\n      # Same as before:\n      - platform: ntc\n        sensor: resistance_sensor\n        # ...\n\n      - platform: adc\n        pin: A0\n        id: source_sensor\n        # Added:\n        update_interval: never\n\n    switch:\n      - platform: gpio\n        pin: D0\n        id: ntc_vcc\n\n    interval:\n      - interval: 60s\n        then:\n          - switch.turn_on: ntc_vcc\n          - component.update: source_sensor\n          - switch.turn_off: ntc_vcc\n```\n\n----------------------------------------\n\nTITLE: Updating Fingerprint Reader Password\nDESCRIPTION: YAML configuration showing how to update the password configuration after setting a new password.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/fingerprint_grow.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nfingerprint_grow:\n  password: 0x72AB96CD      # Update the existing password with the new one\n```\n\n----------------------------------------\n\nTITLE: Setting Generic Calibration Point for EZO Sensor\nDESCRIPTION: Lambda function to set a generic calibration point without specifying low, mid, or high.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ezo.rst#2025-04-21_snippet_10\n\nLANGUAGE: cpp\nCODE:\n```\nid(ph_ezo).set_calibration_generic(750.0);\n```\n\n----------------------------------------\n\nTITLE: LVGL Grid Layout for Cover Controls\nDESCRIPTION: Alternative implementation of cover controls using LVGL's grid layout system. Defines a grid with proportional columns and rows for automatic widget sizing and positioning.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/cookbook/lvgl.rst#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nlvgl:\n  pages:\n    - id: room_page\n      widgets:\n        - obj:\n            align: CENTER\n            width: 240\n            height: 256\n            pad_all: 6\n            pad_row: 6\n            pad_column: 8\n            bg_opa: TRANSP\n            border_opa: TRANSP\n            layout:\n              type: GRID\n              grid_columns: [FR(1), FR(1), FR(1)]\n              grid_rows: [FR(10), FR(30), FR(30), FR(30)]\n            widgets:\n              - label:\n                  text: \"East\"\n                  grid_cell_column_pos: 0\n                  grid_cell_row_pos: 0\n                  grid_cell_x_align: STRETCH\n                  grid_cell_y_align: STRETCH\n```\n\n----------------------------------------\n\nTITLE: Creating Addressable Fireworks Effect in YAML\nDESCRIPTION: This snippet sets up an addressable fireworks effect that simulates fireworks on an LED strip. It includes configuration options for the effect name, update interval, spark probability, and color usage.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/light/index.rst#2025-04-21_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nlight:\n  - platform: ...\n    # ...\n    effects:\n      - addressable_fireworks:\n      - addressable_fireworks:\n          name: Fireworks Effect With Custom Values\n          update_interval: 32ms\n          spark_probability: 10%\n          use_random_color: false\n          fade_out_rate: 120\n```\n\n----------------------------------------\n\nTITLE: Configuring Nextion Switch Component in YAML\nDESCRIPTION: Basic configuration example showing how to set up Nextion display and switch components with various configuration options.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/switch/nextion.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndisplay:\n  - platform: nextion\n    id: nextion1\n    # ...\n\nswitch:\n  - platform: nextion\n    id: r0_switch\n    name: \"Radio 0 Switch\"\n    component_name: r0 # pageX.r0 for a global\n    update_interval: 4s\n  - platform: nextion\n    id: darkmode\n    name: \"Is Darkmode Set\"\n    variable_name: darkmode\n```\n\n----------------------------------------\n\nTITLE: Creating an Exposure Notification Indicator Light in ESPHome\nDESCRIPTION: A more advanced configuration that creates a physical indicator light that turns on for one minute when an exposure notification is detected. It uses a GPIO switch, a script for timing control, and the exposure_notifications component.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/exposure_notifications.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nesp32_ble_tracker:\n\nswitch:\n  - platform: gpio\n    pin: GPIOXX\n    id: led\n\nscript:\n  - id: start_led\n    then:\n      - switch.turn_on: led\n      - delay: 1min\n      - switch.turn_off: led\n\nexposure_notifications:\n  on_exposure_notification:\n    then:\n      - lambda: |\n          ESP_LOGD(\"main\", \"Got notification:\");\n          ESP_LOGD(\"main\", \"  RPI: %s\", format_hex_pretty(x.rolling_proximity_identifier).c_str());\n          ESP_LOGD(\"main\", \"  RSSI: %d\", x.rssi);\n\n      # Stop existing timer so that turn_off doesn't get called\n      - script.stop: start_led\n      - script.execute: start_led\n```\n\n----------------------------------------\n\nTITLE: Configuring WireGuard Enable Action in ESPHome\nDESCRIPTION: This snippet shows how to use the wireguard.enable action, which enables the WireGuard component and initiates the connection to the remote peer. It can be used in automations or triggered on specific events.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/wireguard.rst#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - wireguard.enable:\n```\n\n----------------------------------------\n\nTITLE: Configuring HX711 Sensor in ESPHome\nDESCRIPTION: This YAML configuration snippet defines a sensor using the HX711 platform. It specifies the DOUT and CLK pins, gain, and update interval. The HX711 sensor uses these configurations to read data from the load cell amplifier and report the value.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/hx711.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"# Example configuration entry\nsensor:\n  - platform: hx711\n    name: \\\"HX711 Value\\\"\n    dout_pin: D0\n    clk_pin: D1\n    gain: 128\n    update_interval: 60s\"\n```\n\n----------------------------------------\n\nTITLE: Configuring a Toggle Button with Text Label in LVGL with YAML\nDESCRIPTION: This YAML code defines a toggle button with a text label, demonstrating the use of the `checkable` property and nested widgets to create more complex UI elements. It shows how to combine a button with a label for enhanced functionality.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/widgets.rst#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n    # Example toggle button with text:\n    - button:\n        x: 10\n        y: 10\n        width: 70\n        height: 30\n        id: btn_id\n        checkable: true\n        widgets:\n          - label:\n              align: center\n              text: \"Light\"\n\n```\n\n----------------------------------------\n\nTITLE: Configuring EPEver Trace AN Controller Settings in ESPHome\nDESCRIPTION: This code snippet shows how to synchronize the local time from the MCU to an EPEver controller and configure battery charge settings by writing to specific Modbus registers. The code is executed at boot time with a lower priority than the modbus_controller setup.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/modbus_controller.rst#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nesphome:\n  on_boot:\n    ## configure controller settings at setup\n    ## make sure priority is lower than setup_priority of modbus_controller\n    priority: -100\n    then:\n      - lambda: |-\n          // get local time and sync to controller\n          time_t now = ::time(nullptr);\n          struct tm *time_info = ::localtime(&now);\n          int seconds = time_info->tm_sec;\n          int minutes = time_info->tm_min;\n          int hour = time_info->tm_hour;\n          int day = time_info->tm_mday;\n          int month = time_info->tm_mon + 1;\n          int year = time_info->tm_year % 100;\n          esphome::modbus_controller::ModbusController *controller = id(epever);\n          // if there is no internet connection localtime returns year 70\n          if (year != 70) {\n            // create the payload\n            std::vector<uint16_t> rtc_data = {uint16_t((minutes << 8) | seconds), uint16_t((day << 8) | hour),\n                                              uint16_t((year << 8) | month)};\n            // Create a Modbus command item with the time information as the payload\n            esphome::modbus_controller::ModbusCommandItem set_rtc_command =\n                esphome::modbus_controller::ModbusCommandItem::create_write_multiple_command(controller, 0x9013, 3, rtc_data);\n            // Submit the command to the send queue\n            epever->queue_command(set_rtc_command);\n            ESP_LOGI(\"ModbusLambda\", \"EPSOLAR RTC set to %02d:%02d:%02d %02d.%02d.%04d\", hour, minutes, seconds, day, month,\n                    year + 2000);\n          }\n          // Battery settings\n          // Note: these values are examples only and apply my AGM Battery\n          std::vector<uint16_t> battery_settings1 = {\n              0,       // 9000 Battery Type 0 =  User\n              0x0073,  // 9001 Battery Cap 0x55 == 115AH\n              0x012C,  // 9002 Temp compensation -3V /Â°C/2V\n              0x05DC,  // 9003 0x5DC == 1500 Over Voltage Disconnect Voltage 15,0\n              0x058C,  // 9004 0x58C == 1480 Charging Limit Voltage 14,8\n              0x058C,  // 9005 Over Voltage Reconnect Voltage 14,8\n              0x05BF,  // 9006 Equalize Charging Voltage 14,6\n              0x05BE,  // 9007 Boost Charging Voltage 14,7\n              0x0550,  // 9008 Float Charging Voltage 13,6\n              0x0528,   // 9009 Boost Reconnect Charging Voltage 13,2\n              0x04C4,  // 900A Low Voltage Reconnect Voltage 12,2\n              0x04B0,  // 900B Under Voltage Warning Reconnect Voltage 12,0\n              0x04BA,  // 900c Under Volt. Warning Volt 12,1\n              0x04BA,  // 900d Low Volt. Disconnect Volt. 11.8\n              0x04BA   // 900E Discharging Limit Voltage 11.8\n          };\n\n          // Boost and equalization periods\n          std::vector<uint16_t> battery_settings2 = {\n              0x0000,  // 906B Equalize Duration (min.) 0\n              0x0075   // 906C Boost Duration (aka absorb) 117 mins\n          };\n          esphome::modbus_controller::ModbusCommandItem set_battery1_command =\n              esphome::modbus_controller::ModbusCommandItem::create_write_multiple_command(controller, 0x9000, battery_settings1.size() ,\n                                                                                          battery_settings1);\n```\n\n----------------------------------------\n\nTITLE: Configuring SM2235 Hub in ESPHome YAML\nDESCRIPTION: This code snippet shows how to define the SM2235 hub in an ESPHome configuration file. It specifies the data and clock pins, and optionally allows setting the maximum power for color and white channels.  The `id` field allows specifying an identifier if multiple SM2235 chains are connected.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/output/sm2235.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"# Example configuration entry\nsm2235:\n  data_pin: GPIOXX\n  clock_pin: GPIOXX\n  max_power_color_channels: 9\n  max_power_white_channels: 9\"\n```\n\n----------------------------------------\n\nTITLE: Triggering Factory Reset of SCD4X Sensor\nDESCRIPTION: This YAML snippet illustrates the action to reset the SCD4X sensor to its factory settings, restoring the default calibration settings. This action is useful when recalibrating or troubleshooting the sensor.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/scd4x.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - scd4x.factory_reset: my_scd41\n```\n\n----------------------------------------\n\nTITLE: Timeout Filter Configuration in ESPHome\nDESCRIPTION: This snippet shows how to configure the timeout filter in ESPHome to output values every specified time period, regardless of input values. It also demonstrates how to send a specific value (defaults to NaN) if no subsequent value is published within the specified timeout.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/index.rst#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n\n    # Example filters:\n    filters:\n      - timeout: 10s  # sent value will be NaN\n      - timeout:\n          timeout: 10s\n          value: !lambda return 0;\n\n```\n\n----------------------------------------\n\nTITLE: Configuring LVGL Spinner Widget\nDESCRIPTION: Example showing spinner widget setup with visual customization options\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/widgets.rst#2025-04-21_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\n# Example widget:\n- spinner:\n    align: center\n    spin_time: 2s\n    arc_length: 60deg\n    id: spinner_id\n    indicator:\n      arc_color: 0xd4d4d4\n\n# Example action:\non_...:\n  then:\n    - lvgl.spinner.update:\n        id: spinner_id\n        arc_color: 0x31de70\n```\n\n----------------------------------------\n\nTITLE: Tag Scanned Action Configuration in ESPHome\nDESCRIPTION: Configuration for sending tag_scanned events to Home Assistant from ESPHome. This is useful for integrating RFID or NFC tag scanning.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/api.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# In some trigger\non_...:\n  # Simple\n  - homeassistant.tag_scanned: some-tag\n```\n\n----------------------------------------\n\nTITLE: Configuring ATM90E32 Offset Calibration Buttons in YAML\nDESCRIPTION: Configuration example for adding buttons to run and clear offset calibration for the ATM90E32 sensor. These buttons are required when enable_offset_calibration is set to true and allow for fine-grained zero-level calibration of voltage and current sensors.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/atm90e32.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbutton:\n  - platform: atm90e32\n    id: chip1\n    run_offset_calibration:\n      name: \"Chip1 - Run Offset Calibration\"\n    clear_offset_calibration:\n      name: \"Chip1 - Clear Offset Calibration\"\n```\n\n----------------------------------------\n\nTITLE: Configuring ADS1118 Component Hub in ESPHome\nDESCRIPTION: Basic YAML configuration for setting up the ADS1118 component hub. Requires specifying the CS pin for SPI communication.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ads1118.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nads1118:\n  cs_pin: GPIOXX\n```\n\n----------------------------------------\n\nTITLE: Implementing disarm Action for Alarm Panel in YAML\nDESCRIPTION: YAML configuration for adding a disarm action to an Alarm Control Panel, which disarms the alarm.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/alarm_control_panel/index.rst#2025-04-21_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - alarm_control_panel.disarm:\n        id: acp1\n        code: \"1234\"\n```\n\n----------------------------------------\n\nTITLE: Checking Light State with YAML in ESPHome\nDESCRIPTION: This YAML code shows how to check if a light is on using the `light.is_on` condition in an ESPHome automation. It demonstrates a conditional check within a trigger to perform actions based on the light's state.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/light/index.rst#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n\"    # In some trigger:\n    on_...:\n      if:\n        condition:\n          # Same syntax for is_off\n          light.is_on: my_light\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Host Platform with MAC Address in ESPHome\nDESCRIPTION: This YAML configuration sets up the host platform for ESPHome, specifying an optional dummy MAC address for identification with Home Assistant.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/host.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nhost:\n  mac_address: \"06:35:69:ab:f6:79\"\n```\n\n----------------------------------------\n\nTITLE: Configuring LVGL Number Widget in ESPHome - YAML\nDESCRIPTION: This snippet illustrates how to configure a number component using an LVGL widget in ESPHome. It specifies the platform, associated widget ID, and name for the component. The configuration must ensure that the selected widget is supported by the LVGL framework.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/number/lvgl.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nnumber:\n  - platform: lvgl\n    widget: slider_id\n    name: LVGL Slider\n```\n\n----------------------------------------\n\nTITLE: Binary Sensor for Switch State in m5stack_8angle\nDESCRIPTION: This YAML configuration creates a binary sensor that reads the state of the switch on the m5stack_8angle. The platform and ID are specified to accurately retrieve the switch state information.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/m5stack_8angle.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nbinary_sensor:\n  - platform: m5stack_8angle\n    m5stack_8angle_id: m5stack_8angle_base\n    name: \"Switch\"\n```\n\n----------------------------------------\n\nTITLE: Configuring SM2235 Output Channel in ESPHome YAML\nDESCRIPTION: This code snippet illustrates how to define an individual output channel for the SM2235 LED driver in an ESPHome configuration file. It specifies the platform as `sm2235`, assigns an `id` to the output, and selects the `channel` of the SM2235 chain to control. It can optionally specify the `sm2235_id` if you have multiple chains.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/output/sm2235.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n\"# Individual outputs\noutput:\n  - platform: sm2235\n    id: output_red\n    channel: 1\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Remote Transmitter Configuration in YAML\nDESCRIPTION: Basic configuration for setting up a remote transmitter with GPIO pin and carrier duty percentage. Defines the transmission pin and modulation settings for IR or RF signals.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/remote_transmitter.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nremote_transmitter:\n  pin: GPIOXX\n  carrier_duty_percent: 50%\n```\n\n----------------------------------------\n\nTITLE: Configuring MAX6675 Thermocouple Sensor in ESPHome\nDESCRIPTION: Example configuration for connecting a MAX6675 temperature sensor with SPI communication. Requires setting up SPI bus with MISO pin and specifying chip select (CS) pin for the sensor.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/max6675.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nspi:\n  miso_pin: D0\n  clk_pin: D1\n\nsensor:\n  - platform: max6675\n    name: \"Living Room Temperature\"\n    cs_pin: D2\n    update_interval: 60s\n```\n\n----------------------------------------\n\nTITLE: Setting up Remote Receiver Binary Sensor in ESPHome\nDESCRIPTION: Configuration example for creating a binary sensor that responds to Panasonic remote control signals. The sensor briefly triggers ON when the specified signal is received.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/remote_receiver.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nbinary_sensor:\n  - platform: remote_receiver\n    name: \"Panasonic Remote Input\"\n    panasonic:\n      address: 0x4004\n      command: 0x100BCBD\n```\n\n----------------------------------------\n\nTITLE: Retrieving Target Position of Stepper Motor in ESPHome (C++)\nDESCRIPTION: This code shows how to get the set target position of a stepper motor. The 'target_position' property of the stepper motor object is accessed to retrieve the target position as an integer.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/stepper/index.rst#2025-04-21_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\nint pos = id(my_stepper).target_position;\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for ESPHome\nDESCRIPTION: Docker Compose YAML configuration for setting up ESPHome with volume mounts, device mappings, and network settings.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/faq.rst#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\nservices:\n  esphome:\n    image: ghcr.io/esphome/esphome\n    volumes:\n      - ./:/config:rw\n      # Use local time for logging timestamps\n      - /etc/localtime:/etc/localtime:ro\n    devices:\n      # if needed, add esp device(s) as in command line examples above\n      - /dev/ttyUSB0:/dev/ttyUSB0\n      - /dev/ttyACM0:/dev/ttyACM0\n    # The host networking driver only works on Linux hosts, but is available as a Beta feature, on Docker Desktop version 4.29 and later.\n    network_mode: host\n    restart: always\n```\n\n----------------------------------------\n\nTITLE: Interlocking GPIO Switches Configuration in ESPHome YAML\nDESCRIPTION: Configuration for preventing two GPIO switches from being active simultaneously using the interlock feature. Each switch in the group must list all other switches in its interlock parameter.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/switch/gpio.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\n# Prevent relay #1 and relay #2 from being activated at the same time.\nswitch:\n  - platform: gpio\n    pin: GPIOXX\n    name: \"Relay #1\"\n    id: relay1\n    interlock: [relay2]\n\n  - platform: gpio\n    pin: GPIOXX\n    name: \"Relay #2\"\n    id: relay2\n    interlock: [relay1]\n```\n\n----------------------------------------\n\nTITLE: Configuring XL9535 I/O Expander and GPIO Switch in ESPHome\nDESCRIPTION: This YAML configuration sets up an XL9535 I/O expander and creates a GPIO switch using one of its pins. It demonstrates how to define the XL9535 component and use its pins in other ESPHome components.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/xl9535.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nxl9535:\n  - id: xl9535_hub\n    address: 0x20\n  \n# Individual outputs\nswitch:\n  - platform: gpio\n    name: XL9535 Pin 0\n    pin:\n      xl9535: xl9535_hub\n      number: 0\n      mode:\n        output: true\n      inverted: false\n```\n\n----------------------------------------\n\nTITLE: Configuring BMP085/BMP180 Sensor in ESPHome\nDESCRIPTION: YAML configuration example for setting up BMP085/BMP180 temperature and pressure sensors. Demonstrates how to configure both temperature and pressure readings with custom names and update intervals.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/bmp085.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: bmp085\n    temperature:\n      name: \"Outside Temperature\"\n    pressure:\n      name: \"Outside Pressure\"\n    update_interval: 60s\n```\n\n----------------------------------------\n\nTITLE: Configuring LVGL Message Box Widget\nDESCRIPTION: Example configuration for an LVGL message box widget with a title, body text, buttons and styling options.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/widgets.rst#2025-04-21_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nlvgl:\n  msgboxes:\n    - id: message_box\n      close_button: true\n      title: Message box\n      body:\n        text: \"This is a sample message box.\"\n        bg_color: 0x808080\n      buttons:\n        - id: msgbox_apply\n          text: \"Apply\"\n        - id: msgbox_close\n          text: \"\\uF00D\"\n          on_click:\n            then:\n              - lvgl.widget.hide: message_box\n```\n\n----------------------------------------\n\nTITLE: Enabling Tag Polling for PN7160 in YAML\nDESCRIPTION: This snippet shows how to enable tag polling on the PN7160 NFC module to start reading and writing to NFC tags. The identifier 'my_pn7160_id' is required to specify the PN7160 device.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/pn7160.rst#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - tag.polling_on: my_pn7160_id\n```\n\n----------------------------------------\n\nTITLE: Configuring EHMTX Matrix Display in YAML for ESP32\nDESCRIPTION: This snippet references a YAML configuration example for setting up an EHMTX matrix display on an ESP32 device using ESPHome. The full configuration can be found in the linked GitHub repository.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/cookbook/ehmtx.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# YAML configuration example for ESP32\n# Full configuration: https://github.com/lubeda/EsphoMaTrix/blob/main/UlanziTC001.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring ES7243E for ESP32 S3 Box Lite\nDESCRIPTION: Complete configuration example for using the ES7243E audio ADC with an ESP32 S3 Box Lite. This includes setting up the I2S audio bus and configuring the microphone input.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/audio_adc/es7243e.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\naudio_adc:\n  - platform: es7243e\n    id: es7243e_adc\n\ni2s_audio:\n  - id: i2s_audio_bus\n    i2s_lrclk_pin: GPIO47\n    i2s_bclk_pin: GPIO17\n    i2s_mclk_pin: GPIO2\n\nmicrophone:\n  - platform: i2s_audio\n    id: box_mic\n    sample_rate: 16000\n    i2s_din_pin: GPIO16\n    bits_per_sample: 16bit\n    adc_type: external\n```\n\n----------------------------------------\n\nTITLE: Setting Media Player Volume via Action in ESPHome\nDESCRIPTION: This YAML snippet demonstrates how to use the `media_player.volume_set` action within an ESPHome automation to control the volume of a media player. It provides examples for setting the volume directly, using an ID, and with a lambda expression.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/media_player/index.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  # Simple\n  - media_player.volume_set: 50%\n\n  # Full\n  - media_player.volume_set:\n      id: media_player_id\n      volume: 50%\n\n  # Simple with lambda\n  - media_player.volume_set: !lambda \"return 0.5;\"\n```\n\n----------------------------------------\n\nTITLE: Verifying ESPHome Installation on Linux\nDESCRIPTION: Command to verify successful ESPHome installation on Linux by checking version.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/installing_esphome.rst#2025-04-21_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ esphome version\nVersion: 2022.11.4\n```\n\n----------------------------------------\n\nTITLE: Playing MP3 Files from Dedicated Folder with DF-Player\nDESCRIPTION: Action to play MP3 files located in the 'mp3' folder on the storage device, files must be numbered from 1 to 9999 with proper formatting.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/dfplayer.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - dfplayer.play_mp3:\n        file: 1\n    # Shorthand\n    - dfplayer.play_mp3: 1\n```\n\n----------------------------------------\n\nTITLE: Setting up AS3935 Lightning Sensor Data Readings\nDESCRIPTION: YAML configuration for creating sensors to read lightning energy and storm distance data from the AS3935 sensor.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/as3935.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: as3935\n    lightning_energy:\n      name: Lightning Energy\n    distance:\n      name: Distance Storm\n```\n\n----------------------------------------\n\nTITLE: Configuring NeoPixelBus Method in ESPHome YAML\nDESCRIPTION: Example of how to manually specify the transmission method for NeoPixelBus in ESPHome. This configuration uses the ESP8266 UART method with bus 0 and asynchronous transfer disabled.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/light/neopixelbus.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nlight:\n  - platform: neopixelbus\n    # ...\n    method:\n      type: esp8266_uart\n      bus: 0\n      async: false\n```\n\n----------------------------------------\n\nTITLE: Sample YAML Configuration for ESPHome Device - YAML\nDESCRIPTION: This comprehensive configuration example sets up an ESP8266 device with RTTTL playback functionality, including Wi-Fi credentials and the user-defined output.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/rtttl.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n\"esphome:\\n  name: test_esp8266\\n\\nesp8266:\\n  board: nodemcuv2\\n\\nwifi:\\n  ssid: !secret wifi_ssid\\n  password: !secret wifi_password\\n\\noutput:\\n  - platform: esp8266_pwm\\n    pin: GPIOXX\\n    id: rtttl_out\\n\\nrtttl:\\n  output: rtttl_out\\n  on_finished_playback:\\n    - logger.log: 'Song ended!'\\n\\napi:\\n  actions:\\n    - action: rtttl_play\\n      variables:\\n        song_str: string\\n      then:\\n        - rtttl.play:\\n            rtttl: !lambda 'return song_str;'\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Exposure Notification Listener in ESPHome\nDESCRIPTION: A basic configuration for setting up an exposure notification listener that logs received notifications. It requires the esp32_ble_tracker component and defines an automation to execute when notifications are received.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/exposure_notifications.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nesp32_ble_tracker:\n\nexposure_notifications:\n  on_exposure_notification:\n    then:\n      - lambda: |\n          ESP_LOGD(\"main\", \"Got notification:\");\n          ESP_LOGD(\"main\", \"  RPI: %s\", format_hex_pretty(x.rolling_proximity_identifier).c_str());\n          ESP_LOGD(\"main\", \"  RSSI: %d\", x.rssi);\n```\n\n----------------------------------------\n\nTITLE: Configuring ILI9XXX ST7789V Display for Lilygo TTGO Boards in ESPHome\nDESCRIPTION: This configuration is specific to Lilygo TTGO boards using an ST7789V display. It sets the dimensions for a 135x240 pixel display with appropriate offsets and inverts the colors to ensure correct rendering.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/ili9xxx.rst#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ndisplay:\n  - platform: ili9xxx\n    model: st7789v\n    #TTGO TDisplay 135x240\n    dimensions:\n      height: 240\n      width: 135\n      offset_height: 40\n      offset_width: 52\n    # Required or the colors are all inverted, and Black screen is White\n    invert_colors: true\n```\n\n----------------------------------------\n\nTITLE: Analog Clock Implementation in LVGL\nDESCRIPTION: Configuration for creating an analog clock using LVGL meter and label widgets. Includes setup for hour and minute hands with proper scaling and positioning.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/cookbook/lvgl.rst#2025-04-21_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nlvgl:\n  ...\n  pages:\n    - id: clock_page\n      widgets:\n        - obj: # clock container\n            height: SIZE_CONTENT\n            width: 240\n            align: CENTER\n            pad_all: 0\n            border_width: 0\n            bg_color: 0xFFFFFF\n            widgets:\n              - meter: # clock face\n                  height: 220\n                  width: 220\n                  align: CENTER\n                  bg_opa: TRANSP\n                  border_width: 0\n                  text_color: 0x000000\n                  scales:\n                    - range_from: 0 # minutes scale\n                      range_to: 60\n                      angle_range: 360\n                      rotation: 270\n                      ticks:\n                        width: 1\n                        count: 61\n```\n\n----------------------------------------\n\nTITLE: Operating Modes Select Configuration for LD2420 (YAML)\nDESCRIPTION: This YAML snippet shows how to configure the select component for changing the operating modes of the LD2420 sensor. It allows users to pick from three operational modes: Normal, Calibrate, and Simple.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ld2420.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nselect:\n  - platform: ld2420\n    operating_mode:\n      name: Operating Mode\n```\n\n----------------------------------------\n\nTITLE: Configuring INA2xx sensor over SPI in ESPHome\nDESCRIPTION: Example YAML configuration for setting up an INA239 sensor using SPI interface in ESPHome. Specifies model, CS pin, shunt resistance, max current, ADC range, and temperature coefficient. Defines sensors for current and power.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ina2xx.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: ina2xx_spi\n    cs_pin: GPIOXX\n    model: INA239\n    shunt_resistance: 0.001130 ohm\n    max_current: 40 A\n    adc_range: 0\n    temperature_coefficient: 50\n    current: \"INA239 Current\"\n    power: \"INA239 Power\"\n```\n\n----------------------------------------\n\nTITLE: Grouping Images by Transparency Type\nDESCRIPTION: Configuration showing how to group images not only by color type but also by transparency settings.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/image.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n  rgb565:\n    alpha_channel:\n    - file: \"image1.png\"\n      id: image1\n    - file: \"image2.png\"\n      id: image2\n    opaque:\n    - file: \"image2.png\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Beeper Off Action for Haier Climate Device\nDESCRIPTION: YAML configuration to disable beep feedback for commands sent to a Haier climate device. Only supported by hOn devices and doesn't affect IR remote commands.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/climate/haier.rst#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    climate.haier.beeper_off: device_id\n```\n\n----------------------------------------\n\nTITLE: Advanced Drawing Mode Configuration in YAML\nDESCRIPTION: Example showing advanced drawing mode setup where the menu is rendered to a partial screen area using custom dimensions and positioning.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display_menu/graphical_display_menu.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ngraphical_display_menu:\n  - id: my_menu\n\ndisplay:\n  - platform: waveshare_epaper\n    id: my_display_component\n    pages:\n    - id: advanced_drawing_mode_page\n      lambda: |-\n        const auto display_width = it.get_width();\n        const auto display_height = it.get_height();\n        auto half_display_width = (int)(display_width / 2.0f);\n        \n        it.menu(half_display_width, 0, id(my_menu), half_display_width, display_height);\n```\n\n----------------------------------------\n\nTITLE: Open Action - YAML\nDESCRIPTION: Triggers an action that unlatches a lock specified by its ID. Used to open the lock in response to a configured event.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lock/index.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - lock.open: doorlock_1\n```\n\n----------------------------------------\n\nTITLE: Making Control Calls to Climate Devices\nDESCRIPTION: Demonstrates how to create and execute a control call to manage a climate device, such as changing its mode.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/climate/index.rst#2025-04-21_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nauto call = id(my_climate).make_call();\ncall.set_mode(\"OFF\");\n// etc. see API reference\ncall.perform();\n```\n\n----------------------------------------\n\nTITLE: Configuring CH422G I/O Expander in ESPHome\nDESCRIPTION: Example configuration for setting up a CH422G I/O expander and creating a GPIO switch. Shows how to initialize the expander and configure individual pins with specific modes and settings.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/ch422g.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nch422g:\n  - id: ch422g_hub\n\n# Individual outputs\nswitch:\n  - platform: gpio\n    name: CH422G Pin 0\n    pin:\n      ch422g: ch422g_hub\n      number: 0\n      mode:\n        output: true\n      inverted: false\n```\n\n----------------------------------------\n\nTITLE: Complete User Interaction Setup in YAML\nDESCRIPTION: Comprehensive example showing integration of display menu with rotary encoder and button controls including menu navigation and display toggling.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display_menu/graphical_display_menu.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndisplay:\n  - platform: waveshare_epaper\n    id: my_display_component\n    pages:\n    - id: graph_page\n      lambda: |-\n        it.print(0, 0, id(my_font), \"My menu is not currently active\");\n\nfont:\n  - file: ...\n    id: my_font\n    size: 16\n\ngraphical_display_menu:\n  id: my_graphical_display_menu\n  display: my_display_component\n  on_redraw:\n    then:\n      component.update: my_display_component\n  active: false\n  mode: rotary\n  items:\n    - type: Label\n      text: Menu Item 1\n    - type: Label\n      text: Menu Item 2\n\nsensor:\n  - platform: rotary_encoder\n    ...\n    filters:\n      debounce: 30ms\n    on_anticlockwise:\n      - display_menu.up: my_graphical_display_menu\n    on_clockwise:\n      - display_menu.down: my_graphical_display_menu\n\nbinary_sensor:\n  - platform: gpio\n    ...\n    filters:\n      - delayed_on: 30ms\n      - delayed_off: 30ms\n    on_press:\n  - if:\n      condition:\n        display_menu.is_active: my_graphical_display_menu\n      then:\n        - display_menu.enter: my_graphical_display_menu\n      else:\n        - display_menu.show:  my_graphical_display_menu\n```\n\n----------------------------------------\n\nTITLE: Configuring DPS310 Sensor in ESPHome YAML\nDESCRIPTION: This snippet demonstrates the configuration of the DPS310 atmospheric pressure sensor, including temperature and pressure settings, IÂ²C address, and update interval. Make sure the IÂ²C component is installed and configured in your ESPHome setup.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/dps310.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: dps310\n    temperature:\n      name: \"Outside Temperature\"\n    pressure:\n      name: \"Outside Pressure\"\n    address: 0x77\n    update_interval: 60s\n```\n\n----------------------------------------\n\nTITLE: Configuring LVGL Switch Widget\nDESCRIPTION: Example demonstrating switch widget implementation with value change handling\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/widgets.rst#2025-04-21_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\n# Example widget:\n- switch:\n    x: 10\n    y: 10\n    id: switch_id\n\n# Example trigger:\n- switch:\n    ...\n    on_value:\n      then:\n        - logger.log:\n            format: \"Switch state: %d\"\n            args: [ x ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Slow PWM Output with GPIO Pin\nDESCRIPTION: This YAML configuration snippet demonstrates how to set up a slow PWM output component in ESPHome. It defines the operational period, the GPIO pin used, and an identifier for the output. Dependent on the ESPHome framework, it requires specifying the pin, period, and id. Inputs include the component id and pin, while the output modulates the pin state over the defined period.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/output/slow_pwm.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\\noutput:\\n  - platform: slow_pwm\\n    pin: GPIOXX\\n    id: my_slow_pwm\\n    period: 15s\n```\n\n----------------------------------------\n\nTITLE: Creating Media Player Volume Slider with LVGL\nDESCRIPTION: YAML configuration for implementing a volume control slider for a media player. Converts between Home Assistant's 0-1 float values and LVGL's 0-100 integer values.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/cookbook/lvgl.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: homeassistant\n    id: media_player_volume\n    entity_id: media_player.your_room\n    attribute: volume_level\n    on_value:\n      - lvgl.slider.update: \n          id: slider_media_player\n          value: !lambda return (x * 100); \n\nlvgl:\n    ...\n    pages:\n      - id: mediaplayer_page\n        widgets:\n          - slider:\n              id: slider_media_player\n              x: 60\n              y: 50\n              width: 30\n              height: 220\n              pad_all: 8\n              min_value: 0\n              max_value: 100\n              adv_hittest: true\n              on_value:\n                - homeassistant.action:\n                    action: media_player.volume_set\n                    data:\n                      entity_id: media_player.your_room\n                      volume_level: !lambda return (x / 100);\n```\n\n----------------------------------------\n\nTITLE: Configuring 1-Wire Bus with GPIO in ESPHome YAML\nDESCRIPTION: This code snippet shows how to configure a 1-Wire bus in ESPHome using the GPIO platform.  It defines the GPIO pin used for the 1-Wire bus and allows specifying an optional ID for code generation when multiple busses are present.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/one_wire.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\n# Example configuration entry\none_wire:\n  - platform: gpio\n    pin: GPIOXX\n\n```\n\n----------------------------------------\n\nTITLE: Configuring ESP32 BLE Scanner Text Sensor in YAML\nDESCRIPTION: Example configuration for setting up the BLE scanner text sensor on an ESP32 device. This configuration enables scanning for nearby BLE devices and publishes the results as a text sensor named 'BLE Devices Scanner'.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/text_sensor/ble_scanner.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nesp32_ble_tracker:\n\ntext_sensor:\n  - platform: ble_scanner\n    name: \"BLE Devices Scanner\"\n```\n\n----------------------------------------\n\nTITLE: PCF8563 Read Time Action in YAML\nDESCRIPTION: Demonstrates how to trigger a synchronization of the current system time from the RTC hardware using the pcf8563.read_time action. This can be used for additional synchronizations beyond the automatic 15-minute interval.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/time/pcf8563.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - pcf8563.read_time\n\n  # in case you need to specify the PCF8563 id\n  - pcf8563.read_time:\n      id: pcf8563_time\n```\n\n----------------------------------------\n\nTITLE: Configuring pending Action for Alarm Panel in YAML\nDESCRIPTION: YAML configuration for adding a pending action to an Alarm Control Panel, which puts the alarm in pending state.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/alarm_control_panel/index.rst#2025-04-21_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - alarm_control_panel.pending: acp1\n```\n\n----------------------------------------\n\nTITLE: Initializing BP5758D LED Driver Configuration\nDESCRIPTION: This configuration snippet initializes the BP5758D LED driver by defining the necessary GPIO pins for communication. The `data_pin` and `clock_pin` parameters are required to establish the driver connection.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/output/bp5758d.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nbp5758d:\n  data_pin: GPIOXX\n  clock_pin: GPIOXX\n```\n\n----------------------------------------\n\nTITLE: Configuring LVGL Spinbox Widget\nDESCRIPTION: Example demonstrating spinbox widget configuration with value handling and automation\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/widgets.rst#2025-04-21_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\n# Example widget:\n- spinbox:\n    id: spinbox_id\n    text_align: center\n    range_from: -10\n    range_to: 40\n    step: 0.5\n    digits: 3\n    decimal_places: 1\n\n# Example actions:\non_...:\n  then:\n    - lvgl.spinbox.decrement: spinbox_id\non_...:\n  then:\n    - lvgl.spinbox.update:\n        id: spinbox_id\n        value: 25.5\n\n# Example trigger:\n- spinbox:\n    ...\n    on_value:\n      then:\n        - logger.log:\n            format: \"Spinbox value is %f\"\n            args: [ x ]\n```\n\n----------------------------------------\n\nTITLE: Three Valve Sprinkler Configuration in ESPHome\nDESCRIPTION: Complete YAML configuration for a three-valve sprinkler system without a pump.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sprinkler.rst#2025-04-21_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nesphome:\n    name: esp-sprinkler-controller\n\nesp32:\n    board: featheresp32\n\nwifi:\n    ssid: \"wifi_ssid\"\n    password: \"wifi_password\"\n\nlogger:\n\nsprinkler:\n  - id: lawn_sprinkler_ctrlr\n    main_switch: \"Lawn Sprinklers\"\n    auto_advance_switch: \"Lawn Sprinklers Auto Advance\"\n    reverse_switch: \"Lawn Sprinklers Reverse\"\n    multiplier_number: \"Lawn Sprinkler Multiplier\"\n    repeat_number: \"Lawn Sprinkler Repeat\"\n    valve_overlap: 5s\n    valves:\n      - valve_switch: \"Front Lawn\"\n        enable_switch: \"Enable Front Lawn\"\n        run_duration_number: \"Front Yard Run Duration\"\n        valve_switch_id: lawn_sprinkler_valve_sw0\n      - valve_switch: \"Side Lawn\"\n        enable_switch: \"Enable Side Lawn\"\n        run_duration_number: \"Front Yard Run Duration\"\n        valve_switch_id: lawn_sprinkler_valve_sw1\n      - valve_switch: \"Back Lawn\"\n        enable_switch: \"Enable Back Lawn\"\n        run_duration_number: \"Front Yard Run Duration\"\n        valve_switch_id: lawn_sprinkler_valve_sw2\n\nswitch:\n  - platform: gpio\n    id: lawn_sprinkler_valve_sw0\n    pin: GPIOXX\n  - platform: gpio\n    id: lawn_sprinkler_valve_sw1\n    pin: GPIOXX\n  - platform: gpio\n    id: lawn_sprinkler_valve_sw2\n    pin: GPIOXX\n```\n\n----------------------------------------\n\nTITLE: Binary Sensor Configuration for Seeed MR60FDA2\nDESCRIPTION: This configuration snippet defines the binary sensor for detecting human presence and falls. It specifies optional parameters for 'people_exist' and 'fall_detected' which provide real-time status updates.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/seeed_mr60fda2.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n\"    binary_sensor:\\n      - platform: seeed_mr60fda2\\n        people_exist:\\n          name: \\\"Person Information\\\"\\n        fall_detected:\\n          name: \\\"Falling Detected\\\"\\n\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Dooya RF Remote Transmission in YAML\nDESCRIPTION: Configuration for sending Dooya RF remote codes with unique ID, channel, button, and check values.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/remote_transmitter.rst#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - remote_transmitter.transmit_dooya:\n      id: 0x001612E5\n      channel: 142\n      button: 12\n      check: 3\n```\n\n----------------------------------------\n\nTITLE: Static Variable in ESPHome Lambda\nDESCRIPTION: Demonstrates how to maintain state across lambda executions using static variables. The example counts and logs the number of times the lambda has been executed.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/automations/templates.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nlambda: |-\n  static int num_executions = 0;\n  ESP_LOGD(\"main\", \"I am at execution number %d\", num_executions);\n  num_executions += 1;\n```\n\n----------------------------------------\n\nTITLE: Creating a Button to Update Nextion TFT File\nDESCRIPTION: This code creates a template button in Home Assistant to trigger the upload of a new TFT file to the Nextion display.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/nextion.rst#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nbutton:\n  - platform: template\n    id: update_nextion_button\n    name: Update Nextion\n    entity_category: diagnostic\n    on_press:\n      then:\n        - lambda: 'id(nextion1)->upload_tft();'\n```\n\n----------------------------------------\n\nTITLE: Configuring Coolix Remote Transmission in YAML\nDESCRIPTION: Configuration for sending 24-bit Coolix infrared remote codes. Supports sending two codes in sequence with first and optional second parameters.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/remote_transmitter.rst#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - remote_transmitter.transmit_coolix:\n      first: 0xB23FE4\n      second: 0xB23FE4\n```\n\n----------------------------------------\n\nTITLE: Toggling BLE Status Using ble.enabled Condition\nDESCRIPTION: Example demonstrating how to use the ble.enabled condition to toggle BLE status - disabling if enabled or enabling if disabled.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/esp32_ble.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - if:\n      condition: ble.enabled\n      then:\n        - ble.disable:\n      else:\n        - ble.enable:\n```\n\n----------------------------------------\n\nTITLE: Configuring LYWSDCGQ Thermometer in YAML\nDESCRIPTION: Configuration for the round hygro thermometer that broadcasts temperature, humidity and battery level. Requires MAC address.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/xiaomi_ble.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: xiaomi_lywsdcgq\n    mac_address: XX:XX:XX:XX:XX:XX\n    temperature:\n      name: \"LYWSDCGQ Temperature\"\n    humidity:\n      name: \"LYWSDCGQ Humidity\"\n    battery_level:\n      name: \"LYWSDCGQ Battery Level\"\n```\n\n----------------------------------------\n\nTITLE: Basic Modbus Controller Switch Configuration\nDESCRIPTION: Basic example of configuring a modbus controller switch using a coil register type with bitmask. Used for enabling load test mode.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/switch/modbus_controller.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nswitch:\n- platform: modbus_controller\n    modbus_controller_id: epever\n    id: enable_load_test\n    register_type: coil\n    address: 2\n    name: \"enable load test mode\"\n    bitmask: 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Thermometer with Semicircle Gradient Gauge in ESPHome\nDESCRIPTION: YAML configuration for creating a thermometer with a semicircle gauge that has a gradient background. The gauge is implemented using a meter widget with multiple ticks to create the gradient effect.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/cookbook/lvgl.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nlvgl:\n    ...\n    pages:\n      - id: meter_page\n        widgets:\n          - obj: \n              height: 240\n              width: 240\n              align: CENTER\n              y: -18\n              bg_color: 0xFFFFFF\n              border_width: 0\n              pad_all: 14\n              widgets:\n                - meter:\n                    height: 100%\n                    width: 100%\n                    border_width: 0\n                    align: CENTER\n                    bg_opa: TRANSP\n                    scales:\n                      - range_from: -15\n                        range_to: 35\n                        angle_range: 180\n                        ticks:\n                          count: 70\n                          width: 1\n                          length: 31\n                        indicators:\n                          - tick_style:\n                              start_value: -15\n                              end_value: 35\n                              color_start: 0x3399ff\n                              color_end: 0xffcc66\n                      - range_from: -150\n                        range_to: 350\n                        angle_range: 180\n                        ticks:\n                          count: 0\n                        indicators:\n                          - line:\n                              id: temperature_needle\n                              width: 8\n                              r_mod: 2\n                              value: -150\n                - obj: # to cover the middle part of meter indicator line\n                    height: 123\n                    width: 123\n                    radius: 73\n                    align: CENTER\n                    border_width: 0\n                    pad_all: 0\n                    bg_color: 0xFFFFFF\n                - label:\n                    id: temperature_text\n                    text: \"--.-Â°C\"\n                    align: CENTER\n                    y: -26\n                - label:\n                    text: \"Outdoor\"\n                    align: CENTER\n                    y: -6\n```\n\n----------------------------------------\n\nTITLE: Media Player Paused Condition in ESPHome\nDESCRIPTION: This snippet demonstrates the usage of the `media_player.is_paused` condition within a trigger in ESPHome.  If the media player is paused, the actions defined under the trigger will be executed.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/media_player/index.rst#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n# In some trigger:\non_...:\n  if:\n    condition:\n      media_player.is_paused:\n```\n\n----------------------------------------\n\nTITLE: BLE Characteristic Configuration with Descriptors in YAML\nDESCRIPTION: Detailed example of a BLE characteristic with an identifier, advertised status, description, read permissions, and a descriptor providing additional metadata.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/esp32_ble_server.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nesp32_ble_server:\n  services:\n    # ...\n    characteristics:\n      - id: test_characteristic\n        uuid: cad48e28-7fbe-41cf-bae9-d77a6c233423\n        advertise: true\n        description: \"Sample description\"\n        read: true\n        value:\n            data: \"123.1\"\n            type: float\n            endianness: BIG\n        descriptors:\n          - uuid: cad48e28-7fbe-41cf-bae9-d77a6c211423\n            value: \"Hello, World Descriptor!\"\n```\n\n----------------------------------------\n\nTITLE: Material Design Icon Image Configuration\nDESCRIPTION: Configuration for using a Material Design Icon as an image with grayscale type and alpha channel transparency.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/image.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n  - file: mdi:alert-outline\n    id: alert\n    type: grayscale\n    transparency: alpha_channel\n    resize: 80x80\n```\n\n----------------------------------------\n\nTITLE: Implementing WireGuard Peer Online Condition in ESPHome\nDESCRIPTION: This snippet shows how to use the wireguard.peer_online condition in automations. It checks if the remote WireGuard peer is online and allows for conditional execution of actions based on the peer's status.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/wireguard.rst#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - if:\n      condition: wireguard.peer_online\n      then:\n        - ...\n      else:\n        - ...\n```\n\n----------------------------------------\n\nTITLE: Setting Calibration Volume in YAML\nDESCRIPTION: This YAML snippet provides an example of calibrating the EZO-PMP pump with the `ezo_pmp.set_calibration_volume` action. This action supports templated values and is used to set the calibration volume necessary for accurate pump operation. Parameters include `id` and `volume`.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/ezo_pmp.rst#2025-04-21_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n  - ezo_pmp.set_calibration_volume:\n      id: ezo_pmp\n      volume: 10.01\n\n  # Templated\n  - ezo_pmp.set_calibration_volume:\n      id: ezo_pmp\n      volume: !lambda |-\n        return id(some_volume_sensor).state;\n```\n\n----------------------------------------\n\nTITLE: Checking Current LVGL Page Condition\nDESCRIPTION: Condition to check if a specific page is currently showing, with a logging action\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/index.rst#2025-04-21_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - if:\n        condition:\n          lvgl.page.is_showing: main_page\n        then:\n          - logger.log: \"Main page is showing\"\n```\n\n----------------------------------------\n\nTITLE: VCC Voltage Measurement Configuration\nDESCRIPTION: Basic configuration for measuring VCC voltage on supported hardware platforms.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/adc.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: adc\n    pin: VCC\n    name: \"VCC Voltage\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Inkplate 10 with PCA6416A\nDESCRIPTION: This YAML configuration includes the setup for two PCA6416A expanders and displays the additional components and settings for the Inkplate 10 model. It employs an external RTC and GPIO configurations for battery voltage reading.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/inkplate6.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n    time:\n      - platform: pcf85063\n        id: esptime\n        # repeated synchronization is not necessary unless the external RTC\n        # is much more accurate than the internal clock\n        update_interval: never\n      - platform: homeassistant\n        # instead try to synchronize via network repeatedly ...\n        on_time_sync:\n          then:\n            # ... and update the RTC when the synchronization was successful\n            pcf85063.write_time:\n\n    pca6416a:\n      - id: pca6416a_hub\n        address: 0x20\n        # Primary expander for display control and additional I/O\n      - id: pca6416a_hub2\n        address: 0x21\n        # Secondary expander for additional I/O\n\n    switch:\n      - platform: gpio\n        id: battery_read_mosfet\n        pin:\n          pca6416a: pca6416a_hub\n          number: 9\n\n    sensor:\n      - platform: adc\n        id: battery_voltage\n        update_interval: never\n        attenuation: 12db\n        pin: 35\n      - platform: template\n        name: \"Inkplate Battery Voltage\"\n        unit_of_measurement: \"V\"\n        accuracy_decimals: 3\n        lambda: |-\n          // Enable MOSFET to connect battery voltage divider\n          id(battery_read_mosfet).turn_on();\n          // Wait for voltage to stabilize\n          delay(5);\n          // Sample ADC value\n          float adc = id(battery_voltage).sample();\n          // Disable MOSFET to save power\n          id(battery_read_mosfet).turn_off();\n          return adc;\n        filters:\n          - multiply: 2 # Compensate for voltage divider (1:2 ratio)\n\n    display:\n      - platform: inkplate6\n        id: inkplate_display\n        greyscale: true\n        partial_updating: false\n        update_interval: never\n        model: inkplate_10  \n\n        ckv_pin: 32\n        sph_pin: 33\n        gmod_pin:\n          pca6416a: pca6416a_hub\n          number: 1\n        gpio0_enable_pin:\n          pca6416a: pca6416a_hub\n          number: 8\n        oe_pin:\n          pca6416a: pca6416a_hub\n          number: 0\n        spv_pin:\n          pca6416a: pca6416a_hub\n          number: 2\n        powerup_pin:\n          pca6416a: pca6416a_hub\n          number: 4\n        wakeup_pin:\n          pca6416a: pca6416a_hub\n          number: 3\n        vcom_pin:\n          pca6416a: pca6416a_hub\n          number: 5\n```\n\n----------------------------------------\n\nTITLE: Including RST Image Directives\nDESCRIPTION: ReStructuredText directives for including images in Sphinx documentation. References hero.png, logo.svg, and logo-docs.svg files.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/images/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: hero.png\n\n.. image:: logo.svg\n\n.. image:: logo-docs.svg\n```\n\n----------------------------------------\n\nTITLE: Relabeling Prometheus Metrics in ESPHome\nDESCRIPTION: This snippet demonstrates how to customize metric labels in Prometheus by defining a relabel block within the prometheus configuration. Users can specify new 'id' and 'name' fields for metrics, allowing for clearer identification of data from sensors.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/prometheus.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nprometheus:\n  relabel:\n    my_voltage_sensor:\n      id: angry_pixies\n      name: \"Angry Pixies\"\n```\n\n----------------------------------------\n\nTITLE: Turning Light Off with Lambda in ESPHome\nDESCRIPTION: This code shows how to turn off a light using a lambda expression in ESPHome. It sets the optional transition length before performing the turn off action.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/light/index.rst#2025-04-21_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\n\"auto call = id(light_1).turn_off();\n// set parameters (optional)\ncall.set_transition_length(1000); // in ms\n// perform action:\ncall.perform();\"\n```\n\n----------------------------------------\n\nTITLE: Nextion Display Lambda Usage Examples\nDESCRIPTION: YAML configuration showing various ways to set component values and format text in the Nextion display rendering lambda.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/nextion.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndisplay:\n  - platform: nextion\n    # ...\n    lambda: |-\n      // set the \"value\" of a component - value is always an integer\n      // for example gauges represent their status using integers from 0 to 100\n      it.set_component_value(\"gauge\", 50);\n\n      // set the text of a component\n      it.set_component_text(\"textview\", \"Hello World!\");\n\n      // set the text of a component with formatting\n      it.set_component_text_printf(\"textview\", \"The uptime is: %.1f\", id(uptime_sensor).state);\n```\n\n----------------------------------------\n\nTITLE: Modbus Controller Switch with Write Lambda\nDESCRIPTION: Advanced example showing a modbus controller switch configuration with a custom write lambda function for manual control of the payload being sent to the device.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/switch/modbus_controller.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nswitch:\n  - platform: modbus_controller\n    modbus_controller_id: epever\n    id: enable_load_test\n    register_type: coil\n    address: 2\n    name: \"enable load test mode\"\n    write_lambda: |-\n      ESP_LOGD(\"main\",\"Modbus Switch incoming state = %f\",x);\n      // return false ; // use this to just change the value\n      payload.push_back(0x1);  // device address\n      payload.push_back(0x5);  // force single coil\n      payload.push_back(0x00); // high byte address of the coil\n      payload.push_back(0x6);  // low byte address of the coil\n      payload.push_back(0xFF); // ON = 0xFF00 OFF=0000\n      payload.push_back(0x00);\n      return true;\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Scrape Job\nDESCRIPTION: This snippet provides an example of how to configure a scrape job for Prometheus to collect metrics from an ESPHome device. It specifies the job name and the target, which is the IP or hostname of the ESPHome device.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/prometheus.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n  - job_name: esphome\n    static_configs:\n      - targets: [<ip or node_name.local>]\n```\n\n----------------------------------------\n\nTITLE: Home Assistant Configuration for MQTT\nDESCRIPTION: This example shows how to set up a Home Assistant configuration to connect to an MQTT broker which ESPHome devices are using. The setup includes the MQTT broker details.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/mqtt.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nmqtt:\n  broker: ...\n```\n\n----------------------------------------\n\nTITLE: High Point pH Probe Calibration Configuration\nDESCRIPTION: Configuration for calibrating the pH probe at a high reference point. Requires pH reference value and temperature of the calibration solution.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ufire_ise.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: ufire_ise\n    id: ufire_ise_board\n    # ...\n\n# in some trigger\non_...:\n  - sensor.ufire_ise_board.calibrate_probe_high:\n      id: ufire_ise_board\n      solution: 7.0\n      temperature: !lambda \"return id(temperature_liquid).state;\"\n```\n\n----------------------------------------\n\nTITLE: Creating Remote Light Control Button with LVGL\nDESCRIPTION: YAML configuration for controlling a remote Home Assistant light entity using an LVGL button widget. Imports light state from Home Assistant and updates button state accordingly.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/cookbook/lvgl.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nbinary_sensor:\n  - platform: homeassistant\n    id: remote_light\n    entity_id: light.remote_light\n    publish_initial_state: true\n    on_state:\n      then:\n        lvgl.widget.update:\n          id: light_btn\n          state:\n            checked: !lambda return x;\n\nlvgl:\n    ...\n    pages:\n      - id: room_page\n        widgets:\n          - button:\n              id: light_btn\n              align: CENTER\n              width: 100\n              height: 70\n              checkable: true\n              widgets:\n                - label:\n                    align: CENTER\n                    text: 'Remote light'\n              on_click:\n                - homeassistant.action:\n                    action: light.toggle\n                    data: \n                      entity_id: light.remote_light\n```\n\n----------------------------------------\n\nTITLE: Configuring LD2420 Sensor for Moving Distance\nDESCRIPTION: Sensor configuration to track the distance of moving objects detected by the LD2420 sensor. Provides a named sensor for monitoring moving target distance.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ld2420.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: ld2420\n    moving_distance:\n      name : Moving Distance\n```\n\n----------------------------------------\n\nTITLE: Handling Enrollment Scans\nDESCRIPTION: Triggered during a finger scan for enrollment, publishing a message with the slot and scan details using lambda expression to include dynamic information.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/fingerprint_grow.rst#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\non_enrollment_scan:\n  - text_sensor.template.publish:\n      id: fingerprint_state\n      state: !lambda 'return \"Enrolling into slot \" + to_string(finger_id) + \", scanned \" + to_string(scan_num) + \" time(s)\";'\n```\n\n----------------------------------------\n\nTITLE: Configuring Tuya Switch in ESPHome YAML\nDESCRIPTION: YAML configuration for creating a Tuya switch in ESPHome. The example shows how to reference datapoint 2 (identified as a child lock switch from the serial output) to create a controllable switch entity.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/switch/tuya.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Create a switch\nswitch:\n  - platform: \"tuya\"\n    name: \"MySwitch\"\n    switch_datapoint: 2\n```\n\n----------------------------------------\n\nTITLE: ESPHome Configuration for Sonoff Fish Pond Pump\nDESCRIPTION: YAML configuration for a Sonoff Basic ESP8266 device that controls a fish pond pump. Includes WiFi setup, GPIO configurations for pump control, button toggle functionality, water level sensor safety, and hourly timing automation.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/cookbook/sonoff-fishpond-pump.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nesphome:\n  name: fishpond\n\nesp8266:\n  board: esp01_1m\n\nwifi:\n  ssid: !secret wifi_ssid\n  password: !secret wifi_password\n\n# Enable logging\nlogger:\n\nota:\n  platform: esphome\n\napi:\n\nstatus_led:\n  pin: GPIO13\n\nsensor:\n  - platform: uptime\n    name: \"ESP Fish Pond System Uptime\"\n\n  - platform: wifi_signal\n    name: \"ESP Fish Pond WiFi Signal\"\n    update_interval: 15s\n\nswitch:\n  ## restart\n  - platform: restart\n    name: \"ESP Fish Pond Restart\"\n\n  ## relay / pump\n  - platform: gpio\n    pin: GPIO12\n    name: \"ESP Fish Pond Pump\"\n    id: esp_fishpond_pump\n\nbinary_sensor:\n  - platform: status\n    name: \"ESP Fish Pond System Status\"\n\n  ## button - toggle relay\n  - platform: gpio\n    name: \"ESP Fish Pond Button\"\n    pin:\n      number: GPIO0\n      inverted: true\n    # Toggle pump when user presses the Sonoff Button\n    on_press:\n      - switch.toggle: esp_fishpond_pump\n\n  # onboard header pin - sensor\n  # when threshold is reached, turn off\n  - platform: gpio\n    name: \"esp_fishpond_gpio14\"\n    pin:\n      number: 14\n      mode:\n        input: true\n        pullup: true\n    on_press:\n      - switch.turn_off: esp_fishpond_pump\n\n## Use time\ntime:\n  - platform: homeassistant\n    ## Set your timezone\n    timezone: Africa/Johannesburg\n    on_time:\n      # Switch on on the hour\n      - seconds: 0\n        minutes: 0\n        hours: '*'\n        then:\n          - switch.turn_on: esp_fishpond_pump\n          # Switch off 10 minutes later\n          - delay: 10min\n          - switch.turn_off: esp_fishpond_pump\n```\n\n----------------------------------------\n\nTITLE: Configuring INA2xx sensor over I2C in ESPHome\nDESCRIPTION: Example YAML configuration for setting up an INA228 sensor using I2C interface in ESPHome. Specifies model, address, shunt resistance, max current, ADC range, and update interval. Defines sensors for current, bus voltage, and charge.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ina2xx.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: ina2xx_i2c\n    id: my_charge_sensor\n    model: INA228\n    address: 0x40\n    shunt_resistance: 0.010 ohm\n    max_current: 10 A\n    adc_range: 0\n    update_interval: 60s\n    current: \"INA228 Current\"\n    bus_voltage: \"INA228 Bus Voltage\"\n    charge: \"INA228 Charge\"\n```\n\n----------------------------------------\n\nTITLE: Configuring AXS15231 Touchscreen in YAML for ESPHome\nDESCRIPTION: This snippet demonstrates the basic configuration for setting up an AXS15231 touchscreen in ESPHome. It requires an IÂ²C bus to be set up in the configuration. The example includes the platform specification and an optional ID for the touchscreen.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/touchscreen/axs15231.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\ntouchscreen:\n  platform: axs15231\n  id: my_touchscreen\n```\n\n----------------------------------------\n\nTITLE: Configuring AS3935 Lightning Sensor with IÂ²C Communication\nDESCRIPTION: YAML configuration for setting up AS3935 sensor using IÂ²C protocol. Requires IRQ pin specification and allows custom IÂ²C address configuration.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/as3935.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration for IÂ²C\nas3935_i2c:\n  irq_pin: GPIOXX\n```\n\n----------------------------------------\n\nTITLE: Configuring Analog Sensors with Arduino Port Expander\nDESCRIPTION: Shows how to set up analog sensors using the Arduino Port Expander. This enables reading analog inputs from the Arduino board through ESPHome.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/cookbook/arduino_port_extender.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: custom\n    lambda: |-\n      return {ape_analog_input(ape, 1),  // 1 = A1\n              ape_analog_input(ape, 2)};\n    sensors:\n      - name: Analog A1\n        id: analog_a1\n        filters:\n          - throttle: 1s\n      - name: Analog A2\n        id: analog_a2\n        filters:\n          - throttle: 2s\n```\n\n----------------------------------------\n\nTITLE: BTF-Lighting 8x32 LED Matrix Configuration\nDESCRIPTION: YAML configuration for a BTF-Lighting 8x32 WS2812B LED matrix with custom pixel mapping to handle the serpentine LED arrangement.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/addressable_light.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndisplay:\n  - platform: addressable_light\n    id: led_matrix_32x8_display\n    addressable_light_id: led_matrix_32x8\n    width: 32\n    height: 8\n    pixel_mapper: |-\n      if (x % 2 == 0) {\n        return (x * 8) + y;\n      }\n      return (x * 8) + (7 - y);\n    rotation: 0Â°\n    update_interval: 16ms\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP3204 Component in YAML\nDESCRIPTION: This configuration snippet sets up the MCP3204 A/D Converter in ESPHome using the SPI bus. It specifies the SPI cable select pin and an optional reference voltage parameter. The reference voltage determines the voltage output calculations for each pin.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/mcp3204.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nmcp3204:\n  cs_pin: GPIOXX\n  reference_voltage: 3.3V\n```\n\n----------------------------------------\n\nTITLE: Configuring CCS811 Sensor in ESPHome\nDESCRIPTION: This configuration sets up the CCS811 sensor platform within ESPHome, defining sensors for eCO2 and total volatile organic compounds (TVOC). It specifies the sensor's I2C address and update interval.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ccs811.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n\"sensor:\\n  - platform: ccs811\\n    eco2:\\n      name: \\\"CCS811 eCO2 Value\\\"\\n    tvoc:\\n      name: \\\"CCS811 Total Volatile Organic Compound\\\"\\n    address: 0x5A\\n    update_interval: 60s\"\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Styles to LVGL Widgets\nDESCRIPTION: Demonstrates applying a pre-defined style to multiple labels and customizing individual widget positions\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/index.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nwidgets:\n  - label:\n      id: day_label\n      styles: date_style\n      y: -20\n  - label:\n      id: date_label\n      styles: date_style\n      y: +20\n```\n\n----------------------------------------\n\nTITLE: Enabling Emulation Mode Action in YAML\nDESCRIPTION: This YAML action configures the PN7160 to activate card/tag emulation mode, making the device respond to NFC scans from other devices. Notably, when emulation is on, polling slows. It should be included in a clean ESPHome setup matching these conditions.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/pn7160.rst#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - tag.emulation_on: my_pn7160_id\n```\n\n----------------------------------------\n\nTITLE: Debouncing GPIO Binary Sensor with Delayed On Filter in ESPHome\nDESCRIPTION: This configuration applies a debounce filter to the GPIO binary sensor. It uses a 'delayed_on' filter to ensure the signal stays high for at least 10ms before triggering an ON state.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/gpio.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nbinary_sensor:\n  - platform: gpio\n    pin: D2\n    name: ...\n    filters:\n      - delayed_on: 10ms\n```\n\n----------------------------------------\n\nTITLE: MAX7219 Display Lambda Examples\nDESCRIPTION: Examples demonstrating various rendering operations using the MAX7219 lambda API, including text positioning, sensor values, and time formatting.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/max7219.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndisplay:\n  - platform: max7219\n    # ...\n    lambda: |-\n      // Print 0 at position 0 (left)\n      it.print(\"0\");\n      // Result: \"0       \"\n\n      // Print 1 at position 1 (second character)\n      it.print(1, \"1\");\n      // Result: \"01      \"\n\n      // Let's write a sensor value (let's assume it's 42.1)\n      it.printf(3, \"%.1f\", id(my_sensor).state);\n      // Result: \"01 42.1  \" (the dot will appear on the \"2\" segment)\n\n      // Overwrite the previous content with blank\n      it.print(\"        \");\n      // Print a right-padded sensor value with 0 digits after the decimal\n      it.printf(\"SENS%4.0f\", id(my_sensor).state);\n      // Result: \"SENS  42\"\n\n      // Print the current time\n      it.print(\"        \");\n      it.strftime(\"%H.%M.%S\", id(esptime).now());\n      // Result for 10:06:42 -> \"10.06.42  \"\n\n      // Change the display intnsity based on another id.\n      // Value should be from 0-15.\n      it.set_intensity(id(my_brightness));\n```\n\n----------------------------------------\n\nTITLE: Changing IÂ²C Address for Grove TB6612FNG in ESPHome\nDESCRIPTION: Configuration for changing the IÂ²C address of the motor driver board. This allows connecting multiple boards to the same bus by assigning unique addresses in the range 0x01-0x7F.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/grove_tb6612fng.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - grove_tb6612fng.change_address:\n        address: 0x15\n        id: test_motor\n```\n\n----------------------------------------\n\nTITLE: Configuring Total kWh Measurement in ESPHome\nDESCRIPTION: YAML configuration for measuring total kilowatt-hours with power scaling. Includes a multiply filter to convert from Watts to kWh.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/atm90e32.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nname: ${disp_name} Total kWh\npower_id: totalWatts\nfilters:\n  - multiply: 0.001\nunit_of_measurement: kWh\n```\n\n----------------------------------------\n\nTITLE: Controlling Fan Power State in ESPHome Lambda\nDESCRIPTION: This code snippet demonstrates manual control of the fan's ON/OFF state. It showcases the use of turn_off(), turn_on(), and toggle methods with suitable parameters in lambda expressions.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/fan/index.rst#2025-04-21_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\n// Turn the fan off\nauto call = id(my_fan).turn_off();\ncall.perform();\n\n// Turn the fan on and set the speed, oscillating, and direction\nauto call = id(my_fan).turn_on();\ncall.set_speed(2);\ncall.set_oscillating(true);\ncall.set_direction(FanDirection::REVERSE);\ncall.perform();\n\n// Set a preset mode\nauto call = id(my_fan).turn_on();\ncall.set_preset_mode(\"auto\");\ncall.perform();\n\n// Toggle the fan on/off\nauto call = id(my_fan).toggle();\ncall.perform();\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Button Component in ESPHome\nDESCRIPTION: Example configuration for setting up a basic button component with name, ID, icon and press event handling in ESPHome.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/button/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example button configuration\nbutton:\n  - platform: ...\n    name: Livingroom Lazy Mood\n    id: my_button\n\n    # Optional variables:\n    icon: \"mdi:emoticon-outline\"\n    on_press:\n      - logger.log: \"Button pressed\"\n```\n\n----------------------------------------\n\nTITLE: Creating Automation Light Effect in YAML\nDESCRIPTION: This YAML snippet demonstrates how to create a custom effect using ESPHomeâs automation features. It defines a sequence of actions to perform until the effect is stopped.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/light/index.rst#2025-04-21_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\nlight:\n  - platform: ...\n    id: my_light\n    effects:\n      - automation:\n          name: Custom Automation Effect\n          sequence:\n            - light.addressable_set:\n                id: my_light\n                red: 100%\n                green: 100%\n                blue: 100%\n            - delay: 100ms\n            - light.addressable_set:\n                id: my_light\n                range_from: 0\n                range_to: 20\n                red: 100%\n                green: 0%\n                blue: 0%\n```\n\n----------------------------------------\n\nTITLE: Configuring SPI Data Rate for WeiKai Component\nDESCRIPTION: YAML configuration for setting up WeiKai SPI communication with increased data rate. Specifies the SPI bus ID, chip select pin, and sets a 4MHz data rate for improved performance.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/weikai.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nwk2168_spi:\n  - id: wk2168_bridge_spi\n    spi_id: spi_bus_id\n    cs_pin: 5\n    data_rate: 4MHz\n```\n\n----------------------------------------\n\nTITLE: Creating Addressable Twinkle Effect in YAML\nDESCRIPTION: This YAML snippet sets up an addressable twinkle effect that randomly brightens LEDs to mimic stars twinkling. Configuration options include name, twinkle probability, and progress interval.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/light/index.rst#2025-04-21_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nlight:\n  - platform: ...\n    # ...\n    effects:\n      - addressable_twinkle:\n      - addressable_twinkle:\n          name: Twinkle Effect With Custom Values\n          twinkle_probability: 5%\n          progress_interval: 4ms\n```\n\n----------------------------------------\n\nTITLE: Configuring KeeLoq Remote Transmission in YAML\nDESCRIPTION: Configuration for sending KeeLoq RF remote codes with address, command, code parameters and specific timing requirements.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/remote_transmitter.rst#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - remote_transmitter.transmit_keeloq:\n      address: '0x57ffe7b'\n      command: '0x02'\n      code: '0xd19ef0a9'\n      repeat:\n        times: 3\n        wait_time: 15ms\n```\n\n----------------------------------------\n\nTITLE: Complete ES8156 Configuration with ESP32 S3 Box 3 Lite\nDESCRIPTION: Comprehensive configuration example showing ES8156 integration with I2S audio, speaker setup, and GPIO control for ESP32 S3 Box 3 Lite.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/audio_dac/es8156.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\naudio_dac:\n  - platform: es8156\n    id: es8156_dac\n\ni2s_audio:\n  - id: i2s_output\n    i2s_lrclk_pin: GPIO47\n    i2s_bclk_pin: GPIO17\n    i2s_mclk_pin: GPIO2\n\nspeaker:\n  - platform: i2s_audio\n    i2s_audio_id: i2s_output\n    id: speaker_id\n    i2s_dout_pin: GPIO15\n    dac_type: external\n    sample_rate: 16000\n    bits_per_sample: 16bit\n    channel: stereo\n    audio_dac: es8156_dac\n\nswitch:\n  - platform: gpio\n    name: \"Speaker Enable\"\n    pin: GPIO46\n    restore_mode: RESTORE_DEFAULT_ON\n```\n\n----------------------------------------\n\nTITLE: On Tag Trigger - Home Assistant Tag Scanned\nDESCRIPTION: This YAML snippet configures the ``on_tag`` trigger to send a tag scanned event to the Home Assistant tag component. The `!lambda 'return x;'` extracts the tag ID from the trigger's parameter `x`.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/pn7150.rst#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\npn7150_i2c:\n  # ...\n  on_tag:\n    then:\n      - homeassistant.tag_scanned: !lambda 'return x;'\n```\n\n----------------------------------------\n\nTITLE: Automated Tasmota to ESPHome Migration Commands\nDESCRIPTION: Console commands for automated firmware upgrade in Tasmota. Requires replacing <MY-ESPHOME:6052> with your ESPHome installation host/port and <MY_DEVICE>.yaml with your config filename.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/migrate_sonoff_tasmota.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nOtaUrl http://<MY-ESPHOME:6052>/download.bin?configuration=<MY_DEVICE>.yaml&file=firmware.bin&compressed=1\nUpgrade 1\n```\n\n----------------------------------------\n\nTITLE: Pop-Up Menu Emulation Configuration in YAML\nDESCRIPTION: Configuration example demonstrating how to emulate pop-up menu behavior with custom rendering control and hide functionality.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display_menu/graphical_display_menu.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ngraphical_display_menu:\n  id: my_menu\n  items:\n    - type: command\n      on_value:\n        then:\n          - display_menu.hide: my_menu\n\ndisplay:\n  - platform: ..\n    lambda: |-\n      const auto width = it.get_width();\n      const auto height = it.get_height();\n\n      if (id(my_menu).is_active()) {\n        it.menu(0, 0, id(my_menu), width, height);\n      } else {\n        it.print(0, 0, id(font), \"Menu is hidden, other drawing would go here here\");\n      }\n```\n\n----------------------------------------\n\nTITLE: Queueing Valve Operation in YAML\nDESCRIPTION: Action to add a specified valve to the controller's queue with optional run duration.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sprinkler.rst#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - sprinkler.queue_valve:\n        id: sprinkler_ctrlr\n        valve_number: 2\n        run_duration: 900s\n```\n\n----------------------------------------\n\nTITLE: Interlocking GPIO Switches with YAML Anchors in ESPHome\nDESCRIPTION: An improved configuration for interlocking switches using YAML anchors to avoid repetition. This approach simplifies the configuration when there are multiple switches in the interlock group.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/switch/gpio.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nswitch:\n  - platform: gpio\n    # etc\n    id: relay1\n    interlock: &interlock_group [relay1, relay2]\n  - platform: gpio\n    # etc\n    id: relay2\n    interlock: *interlock_group\n```\n\n----------------------------------------\n\nTITLE: Configuring Dish Network Remote Transmission in YAML\nDESCRIPTION: Configuration for sending Dish Network infrared remote codes. Supports targeting specific receivers and commands.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/remote_transmitter.rst#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - remote_transmitter.transmit_dish:\n      address: 1\n      command: 16\n```\n\n----------------------------------------\n\nTITLE: Setting LEDC Frequency Action (YAML)\nDESCRIPTION: This snippet demonstrates how to use the `output.ledc.set_frequency` action to dynamically change the frequency of an LEDC output in ESPHome.  It requires specifying the ID of the LEDC output and the desired frequency in hertz, which can be templated.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/output/ledc.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n\n    on_...:\n      - output.ledc.set_frequency:\n          id: ledc_output\n          frequency: 100Hz\n\n```\n\n----------------------------------------\n\nTITLE: Defining Default Switch States for OpenTherm Controls\nDESCRIPTION: This snippet presents the configuration to set default states for various switches within the OpenTherm setup, including enabling central heating and domestic hot water.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/opentherm.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nopentherm:\n  ch_enable: true\n  dhw_enable: true\n```\n\n----------------------------------------\n\nTITLE: Set Emulation Message Action\nDESCRIPTION: This YAML snippet demonstrates how to use the ``tag.set_emulation_message`` action to set the NDEF message for card emulation mode. It includes the message content and an option to include an Android app record.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/pn7150.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - tag.set_emulation_message:\n        message: https://www.home-assistant.io/tag/pulse\n        include_android_app_record: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Seeed MR60FDA2\nDESCRIPTION: This YAML configuration snippet sets up the Seeed MR60FDA2 component for use with ESPHome, allowing integration with UART. It defines optional 'uart_id' and 'id' parameters for unique identification and UART settings.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/seeed_mr60fda2.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"    seeed_mr60fda2:\\n\"\n```\n\n----------------------------------------\n\nTITLE: Transmitting Samsung36 IR Code with ESPHome\nDESCRIPTION: This YAML snippet configures ESPHome to transmit a Samsung36 infrared remote code. It transmits the `address` and `command` in two separate packets. Both `address` and `command` parameters are required.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/remote_transmitter.rst#2025-04-21_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - remote_transmitter.transmit_samsung36:\n      address: 0x0400\n      command: 0x000E00FF\n```\n\n----------------------------------------\n\nTITLE: Configuring Uptime Text Sensor in ESPHome YAML\nDESCRIPTION: Basic configuration example for setting up an uptime text sensor in ESPHome. The sensor provides a human-readable representation of the device's uptime since boot. The update interval determines the granularity of time reporting.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/text_sensor/uptime.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\ntext_sensor:\n  - platform: uptime\n    name: Uptime\n```\n\n----------------------------------------\n\nTITLE: Configuring LVGL Text Component in ESPHome\nDESCRIPTION: Example configuration for creating a text component using the LVGL platform. This configuration creates a text component that connects to an LVGL textarea widget, making it available in Home Assistant with the name 'Textarea 1 text'.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/text/lvgl.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntext:\n  - platform: lvgl\n    widget: textarea_id\n    name: \"Textarea 1 text\"\n```\n\n----------------------------------------\n\nTITLE: Configuring LD2420 Binary Sensor for Presence Detection\nDESCRIPTION: Binary sensor configuration to detect presence of targets in the LD2420's detection field. Sets a boolean state based on target detection during the presence time window.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ld2420.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nbinary_sensor:\n  - platform: ld2420\n    has_target:\n      name: Presence\n```\n\n----------------------------------------\n\nTITLE: Component Test Configuration in YAML\nDESCRIPTION: Example test configuration files showing common component settings and platform-specific configurations using YAML substitutions.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/contributing.rst#2025-04-21_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\ni2c:\n  - id: i2c_dht12\n    scl: ${scl_pin}\n    sda: ${sda_pin}\n\nsensor:\n  - platform: dht12\n    temperature:\n      name: DHT12 Temperature\n    humidity:\n      name: DHT12 Humidity\n    update_interval: 15s\n```\n\nLANGUAGE: yaml\nCODE:\n```\nsubstitutions:\n  scl_pin: GPIO16\n  sda_pin: GPIO17\n\n<<: !include common.yaml\n```\n\n----------------------------------------\n\nTITLE: Image Display Configuration for ST7789V\nDESCRIPTION: Configuration example for loading and displaying images on the ST7789V display\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/st7789v.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n  - file: \"image.jpg\"\n    id: my_image\n    resize: 200x200\n    type: RGB24\n\n...\n\ndisplay:\n    ...\n    lambda: |-\n      it.image(0, 0, id(my_image));\n```\n\n----------------------------------------\n\nTITLE: Defining MicroNova Switches in YAML\nDESCRIPTION: This snippet provides a YAML configuration for integrating a switch within the MicroNova system to control the oven on/off state. It also includes `memory_data_on` and `memory_data_off` for specifying data to write when the switch changes state.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/micronova.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nswitch:\n  - platform: micronova\n    stove:\n      name: Stove on/off switch\n```\n\n----------------------------------------\n\nTITLE: Configuring HRXL/XL MaxSonar WR sensor in ESPHome\nDESCRIPTION: This snippet shows how to configure a HRXL/XL MaxSonar WR sensor in ESPHome using the `hrxl_maxsonar_wr` platform. It defines a sensor named \"Rainwater Tank\" that uses the HRXL/XL MaxSonar WR driver. Filtering is recommended due to the sensor's high read frequency.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/hrxl_maxsonar_wr.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\n    # Example configuration entry\n    sensor:\n      - platform: \"hrxl_maxsonar_wr\"\n        name: \"Rainwater Tank\"\n\n```\n\n----------------------------------------\n\nTITLE: Cover Closed Trigger Configuration\nDESCRIPTION: YAML configuration for triggering actions when cover reaches fully closed state.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/cover/index.rst#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\ncover:\n  - platform: template  # or any other platform\n    # ...\n    on_closed:\n      - logger.log: \"Cover is Closed!\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Climate Control UI with LVGL Spinbox in ESPHome\nDESCRIPTION: YAML configuration for a climate control UI that uses a spinbox with plus and minus buttons to adjust thermostat temperature. The component syncs with Home Assistant climate entities and updates when values change.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/cookbook/lvgl.rst#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: homeassistant\n    id: room_thermostat\n    entity_id: climate.room_thermostat\n    attribute: temperature\n    on_value:\n      - lvgl.spinbox.update:\n          id: spinbox_id\n          value: !lambda return x; \n\nlvgl:\n    ...\n    pages:\n      - id: thermostat_control\n        widgets:\n          - obj:\n              align: BOTTOM_MID\n              y: -50\n              layout: \n                type: FLEX\n                flex_flow: ROW\n                flex_align_cross: CENTER\n              width: SIZE_CONTENT\n              height: SIZE_CONTENT\n              widgets:\n                - button:\n                    id: spin_down\n                    on_click:\n                      - lvgl.spinbox.decrement: spinbox_id\n                    widgets:\n                      - label:\n                           text: \"-\"\n                - spinbox:\n                    id: spinbox_id\n                    align: CENTER\n                    text_align: CENTER\n                    width: 50\n                    range_from: 15\n                    range_to: 35\n                    step: 0.5\n                    rollover: false\n                    digits: 3\n                    decimal_places: 1\n                    on_value:\n                      then:\n                        - homeassistant.action:\n                            action: climate.set_temperature\n                            data:\n                              temperature: !lambda return x;\n                              entity_id: climate.room_thermostat\n                - button:\n                    id: spin_up\n                    on_click:\n```\n\n----------------------------------------\n\nTITLE: Advanced Lambda Control Configuration\nDESCRIPTION: Advanced configuration using lambda expressions for programmatic control of the display level and brightness.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/tm1651.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napi:\n  actions:\n    - action: battery_level\n      variables:\n        level: int\n      then:\n        - lambda: |-\n            id(tm1651_battery).set_level(level);\n    - action: battery_brightness\n      variables:\n        brightness: int\n      then:\n        - lambda: |-\n            id(tm1651_battery).set_brightness(brightness);\n```\n\n----------------------------------------\n\nTITLE: RP2040 Core Temperature Measurement\nDESCRIPTION: Configuration for measuring internal core temperature on RP2040 using ADC with voltage to Celsius conversion.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/adc.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: adc\n    pin: TEMPERATURE\n    name: \"Core Temperature\"\n    unit_of_measurement: \"Â°C\"\n    filters:\n      - lambda: return 27 - (x - 0.706f) / 0.001721f;\n```\n\n----------------------------------------\n\nTITLE: Transmitting Samsung IR Code with ESPHome\nDESCRIPTION: This YAML snippet configures ESPHome to transmit a Samsung infrared remote code.  It shows two examples, one for a 32-bit code and another for a 48-bit code, demonstrating the use of the `nbits` parameter. The `data` parameter specifies the code to be sent.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/remote_transmitter.rst#2025-04-21_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - remote_transmitter.transmit_samsung:\n      data: 0x1FEF05E4\n  # additional example for 48-bit codes:\n  - remote_transmitter.transmit_samsung:\n      data: 0xB946F50A09F6\n      nbits: 48\n```\n\n----------------------------------------\n\nTITLE: Basic Template Alarm Control Panel Configuration in YAML\nDESCRIPTION: Minimal example showing how to set up a template alarm control panel with entry codes and binary sensors. Includes options for bypassing certain sensors in home mode.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/alarm_control_panel/template.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nalarm_control_panel:\n  - platform: template\n    name: Alarm Panel\n    codes:\n      - \"1234\"\n    binary_sensors:\n      - input: zone_1\n      - input: zone_2\n        bypass_armed_home: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Air Quality Sensor with HM3301 in ESPHome\nDESCRIPTION: This YAML configuration demonstrates how to set up an Air Quality Index (AQI) sensor using the HM3301 platform in ESPHome. It requires PM2.5 and PM10.0 sensors to be defined and uses the CAQI (European) calculation method.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/hm3301.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: hm3301\n    pm_2_5:\n      name: \"PM2.5\"\n    pm_10_0:\n      name: \"PM10.0\"\n    aqi:\n      name: \"AQI\"\n      calculation_type: \"CAQI\"\n```\n\n----------------------------------------\n\nTITLE: Hardware Rotation for SPI ST7567 Display\nDESCRIPTION: Example configuration demonstrating how to achieve 180-degree rotation using hardware transform options for SPI interface.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/st7567.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# Example using transform section to achieve 180Â° rotation using hardware\ndisplay:\n  - platform: st7567_spi\n    id: my_display\n    dc_pin: D3\n    transform:\n      mirror_x: true\n      mirror_y: true\n    lambda: |-\n      it.print(0, 0, id(my_font), \"Hello World!\");\n```\n\n----------------------------------------\n\nTITLE: Writing NDEF Data to PN532 NFC Tags in ESPHome\nDESCRIPTION: This snippet shows how to write NDEF formatted data to an NFC tag using a PN532 controller in ESPHome. It generates a random UUID in the format used by the Home Assistant Companion App.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/pn532.rst#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\non_...\n  then:\n    - lambda: |-\n        static const char alphanum[] = \"0123456789abcdef\";\n        std::string uri = \"https://www.home-assistant.io/tag/\";\n        for (int i = 0; i < 8; i++)\n          uri += alphanum[random_uint32() % (sizeof(alphanum) - 1)];\n        uri += \"-\";\n        for (int j = 0; j < 3; j++) {\n          for (int i = 0; i < 4; i++)\n            uri += alphanum[random_uint32() % (sizeof(alphanum) - 1)];\n          uri += \"-\";\n        }\n        for (int i = 0; i < 12; i++)\n          uri += alphanum[random_uint32() % (sizeof(alphanum) - 1)];\n        auto message = new nfc::NdefMessage();\n        message->add_uri_record(uri);\n```\n\n----------------------------------------\n\nTITLE: Configuring WK2168 with I2C Interface\nDESCRIPTION: Example configuration for WK2168 chip using I2C bus with multiple UART channels at different baud rates and parity settings\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/weikai.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nwk2168_i2c:\n  - address: 0x70\n    id: wk2168_bridge_i2c\n    uart:\n      - id: i2c_uart_0\n        channel: 0\n        baud_rate: 9600\n        parity: even\n      - id: i2c_uart_1\n        channel: 1\n        baud_rate: 19200\n      - id: i2c_uart_2\n        channel: 2\n        baud_rate: 9600\n      - id: i2c_uart_3\n        channel: 3\n        baud_rate: 19200\n```\n\n----------------------------------------\n\nTITLE: Media Player Idle Trigger in ESPHome\nDESCRIPTION: This snippet demonstrates the `on_idle` trigger, which executes when the media player finishes playing.  The example logs a message to indicate the playback has finished.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/media_player/index.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nmedia_player:\n  - platform: i2s_audio  # or any other platform\n    # ...\n    on_idle:\n      - logger.log: \"Playback finished!\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Fingerprint API Actions in ESPHome\nDESCRIPTION: YAML configuration for API actions that control fingerprint sensor operations including enrollment, cancellation, and deletion of fingerprint data. Defines variables and lambda functions for parameter passing.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/fingerprint_grow.rst#2025-04-21_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\napi:\n  actions:\n  - action: enroll\n    variables:\n      finger_id: int\n      num_scans: int\n    then:\n      - fingerprint_grow.enroll:\n          finger_id: !lambda 'return finger_id;'\n          num_scans: !lambda 'return num_scans;'\n  - action: cancel_enroll\n    then:\n      - fingerprint_grow.cancel_enroll:\n  - action: delete\n    variables:\n      finger_id: int\n    then:\n      - fingerprint_grow.delete:\n          finger_id: !lambda 'return finger_id;'\n  - action: delete_all\n    then:\n      - fingerprint_grow.delete_all:\n```\n\n----------------------------------------\n\nTITLE: Sending Beep Command with RF Bridge in ESPHome using Lambda\nDESCRIPTION: Example of how to use a lambda function to trigger a beep on an RF Bridge device. The code accesses the RF Bridge component through its ID and specifies a beep duration of 100ms.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/rf_bridge.rst#2025-04-21_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\nid(rf_bridge).beep(100);\n```\n\n----------------------------------------\n\nTITLE: Display Lambda with Online Image\nDESCRIPTION: This YAML snippet demonstrates how to use an online image within a display's lambda function. It draws the image 'my_online_image' at position [0, 0] on the display.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/online_image.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndisplay:\n  - platform: ...\n    id: my_display\n    # ...\n    lambda: |-\n      // Draw the image my_online_image at position [x=0,y=0]\n      it.image(0, 0, id(my_online_image));\n```\n\n----------------------------------------\n\nTITLE: Rendering Text with Custom Fonts in ESPHome\nDESCRIPTION: Example of displaying text on a display using a custom font, showing how to print text at specific coordinates.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/index.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndisplay:\n  - platform: ...\n    # ...\n    lambda: |-\n      // Print the string \"Hello World!\" at [0,10]\n      it.print(0, 10, id(my_font), \"Hello World!\");\n```\n\n----------------------------------------\n\nTITLE: Lilygo T-Display S3 AMOLED Configuration\nDESCRIPTION: Configuration for Lilygo T-Display S3 AMOLED display with quad SPI setup, touchscreen integration, and display transformation settings.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/qspi_dbi.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nspi:\n  id: quad_spi\n  type: quad\n  clk_pin: 47\n  data_pins:\n    - 18\n    - 7\n    - 48\n    - 5\n\ni2c:\n  sda: 3\n  scl: 2\n\ntouchscreen:\n  - platform: cst816\n    id: my_touchscreen\n    interrupt_pin:\n      number: 21\n\ndisplay:\n  - platform: qspi_dbi\n    model: RM67162\n    id: main_lcd\n    dimensions:\n      height: 240\n      width: 536\n    transform:\n      mirror_x: true\n      swap_xy: true\n    color_order: rgb\n    brightness: 255\n    cs_pin: 6\n    reset_pin: 17\n    enable_pin: 38\n```\n\n----------------------------------------\n\nTITLE: Handling Buffer Overflow on Nextion Display\nDESCRIPTION: This code demonstrates how to handle a buffer overflow event reported by the Nextion display, logging a warning message.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/nextion.rst#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\non_buffer_overflow:\n  then:\n    - lambda: |-\n        ESP_LOGW(\"nextion.on_buffer_overflow\", \"Nextion reported a buffer overflow event!\");\n```\n\n----------------------------------------\n\nTITLE: Displaying Text Sensor Values in ESPHome\nDESCRIPTION: Demonstrates how to display text from a text_sensor in an ESPHome display using printf formatting.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/index.rst#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ndisplay:\n  - platform: ...\n    # ...\n    lambda: |-\n      it.printf(0, 0, id(my_font), \"Text to follow: %s\", id(template_text).state.c_str());\n```\n\n----------------------------------------\n\nTITLE: Implementing Fan Speed Cycling in YAML\nDESCRIPTION: YAML configuration for cycling through fan speed levels using the fan.cycle_speed action in ESPHome automations.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/fan/index.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - fan.cycle_speed:\n        id: fan_1\n        off_speed_cycle: true\n    # Shorthand:\n    - fan.cycle_speed: fan_1\n\n```\n\n----------------------------------------\n\nTITLE: ESP32 BLE Device Discovery Configuration\nDESCRIPTION: Configuration for discovering BLE devices and their characteristics during initial setup. Enables verbose logging to help identify MAC addresses, Service UUIDs, and other device identifiers.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/ble_presence.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry for finding\n# MAC addresses, Service UUIDs, iBeacon UUIDs, and identifiers\nesp32_ble_tracker:\n  on_ble_advertise:\n    - then:\n\nlogger:\n  level: VERY_VERBOSE\n```\n\n----------------------------------------\n\nTITLE: Configuring Haier Remote Transmission in YAML\nDESCRIPTION: Configuration for sending 104-bit Haier codes with automatic 8-bit checksum calculation.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/remote_transmitter.rst#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - remote_transmitter.transmit_haier:\n      code: [0xA6, 0xDA, 0x00, 0x00, 0x40, 0x40, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x05]\n```\n\n----------------------------------------\n\nTITLE: Home Assistant Dashboard Card Configuration for MR24HPC1\nDESCRIPTION: YAML configuration for creating a comprehensive Home Assistant dashboard to display and control MR24HPC1 sensor data.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/seeed_mr24hpc1.rst#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- type: horizontal-stack\n  cards:\n    - type: entities\n      entities:\n        - entity: button.{$DEVICE}_module_restart\n          name: Module Restart\n        - entity: sensor.{$DEVICE}_hardware_model\n          name: Hardware Model\n        - entity: sensor.{$DEVICE}_hardware_version\n          name: Hardware Version\n        - entity: sensor.{$DEVICE}_heartbeat\n          name: Heartbeat\n        - entity: sensor.{$DEVICE}_product_id\n          name: Product ID\n        - entity: sensor.{$DEVICE}_product_model\n          name: Product Model\n      title: {$DEVICE} Information\n- type: vertical-stack\n  cards:\n    - type: entities\n      entities:\n        - entity: select.{$DEVICE}_scene\n          name: Scene\n        - entity: number.{$DEVICE}_sensitivity\n          name: Sensitivity\n        - entity: select.{$DEVICE}_time_for_entering_no_person_state_standard_function\n          name: Time For Entering No Person State Setting (Standard Function)\n        - entity: binary_sensor.{$DEVICE}_presence_information\n          name: Presence Information\n        - entity: sensor.{$DEVICE}_motion_information\n          name: Motion Information\n        - entity: sensor.{$DEVICE}_body_movement_parameter\n          name: Body Movement Parameter\n        - entity: sensor.{$DEVICE}_active_reporting_of_proximity\n          name: Active Reporting Of Proximity\n      title: Unsolicited Information\n- type: horizontal-stack\n  cards:\n    - type: entities\n      entities:\n        - entity: switch.{$DEVICE}_underlying_open_function_info_output_switch\n          name: Underlying Open Function Info Output Switch\n        - entity: sensor.{$DEVICE}_existence_energy\n          name: Existence Energy\n        - entity: sensor.{$DEVICE}_motion_energy\n          name: Motion Energy\n        - entity: sensor.{$DEVICE}_static_distance\n          name: Static Distance\n        - entity: sensor.{$DEVICE}_motion_distance\n          name: Motion Distance\n        - entity: sensor.{$DEVICE}_motion_speed\n          name: Motion Speed\n      title: Underlying Open Function\n- type: horizontal-stack\n  cards:\n    - type: entities\n      entities:\n        - entity: sensor.{$DEVICE}_custom_mode_status\n          name: Custom Mode Status\n        - entity: number.{$DEVICE}_custom_mode\n          name: Custom Mode\n        - entity: sensor.{$DEVICE}_current_custom_mode\n          name: Current Custom Mode\n        - entity: button.{$DEVICE}_end_of_custom_mode_settings\n          name: End Of Custom Mode Settings\n        - entity: select.{$DEVICE}_existence_boundary\n          name: Existence Boundary\n        - entity: select.{$DEVICE}_motion_boundary\n          name: Motion Boundary\n        - entity: number.{$DEVICE}_existence_energy_threshold\n          name: Existence Energy Threshold\n        - entity: number.{$DEVICE}_motion_energy_threshold\n          name: Motion Energy Threshold\n        - entity: number.{$DEVICE}_motion_trigger_time\n          name: Motion Trigger Time\n        - entity: number.{$DEVICE}_motion_to_rest_time\n          name: Motion To Rest Time\n        - entity: number.{$DEVICE}_time_for_entering_no_person_state_custom_mode\n          name: Time For Entering No Person State (Custom Mode)\n      title: Custom Settings\n```\n\n----------------------------------------\n\nTITLE: Showing an Inactive Menu using ESPHome YAML\nDESCRIPTION: This snippet provides a mechanism to show an inactive menu without changing its state. If the menu is active, it will trigger the selected item instead. There are no specific dependencies required.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display_menu/index.rst#2025-04-21_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\non_press:\n  - if:\n      condition:\n        display_menu.is_active:\n      then:\n        - display_menu.enter:\n      else:\n        - display_menu.show:\n```\n\n----------------------------------------\n\nTITLE: Configuring LCD Display with Custom Characters for Menu\nDESCRIPTION: Configuration example showing how to set up an LCD display with custom characters for menu navigation symbols and basic display output.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display_menu/lcd_menu.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndisplay:\n  - platform: lcd_pcf8574\n    id: my_lcd\n    dimensions: 20x4\n    ...\n    user_characters:\n      - position: 0\n        data:  # mark_back symbol\n          - 0b00100\n          - 0b01000\n          - 0b11110\n          - 0b01001\n          - 0b00101\n          - 0b00001\n          - 0b11110\n          - 0b00000\n    lambda: |-\n      id(my_lcd_menu).draw();\n      if (!id(my_lcd_menu).is_active())\n        it.print(\"Menu is not active\");\n```\n\n----------------------------------------\n\nTITLE: Stopping a Motor with Grove TB6612FNG in ESPHome\nDESCRIPTION: Configuration for stopping a motor on a specific channel. This action stops the motor's motion but doesn't prevent it from spinning if external force is applied.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/grove_tb6612fng.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - grove_tb6612fng.stop:\n        channel: 1\n```\n\n----------------------------------------\n\nTITLE: Toggling a Valve Using Action in YAML\nDESCRIPTION: YAML configuration for an action to toggle a valve's state, cycling through close/stop/open/stop.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/valve/index.rst#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - valve.toggle: valve_1\n```\n\n----------------------------------------\n\nTITLE: Configuring I2S Speaker for RTTTL Playback - YAML\nDESCRIPTION: This snippet demonstrates how to configure an I2S speaker for audio output when playing RTTTL songs. It sets up a speaker component and associates it with a unique ID.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/rtttl.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n\"speaker:\\n  - platform: ...\\n    id: my_speaker\\n    ...\\n\\nrtttl:\\n  speaker: my_speaker\\n  id: my_rtttl\\n  gain: 0.8\"\n```\n\n----------------------------------------\n\nTITLE: Including External Source Files in ESPHome\nDESCRIPTION: Example showing how to include header files or source code in an ESPHome project to extend functionality.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/esphome.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nesphome:\n  # ...\n  includes:\n    - my_switch.h\n    - <mylib.h>\n```\n\n----------------------------------------\n\nTITLE: Formatting Sensor Values with Printf in ESPHome Display\nDESCRIPTION: Demonstrates how to use printf for formatting sensor values in an ESPHome display. It shows rounding to one decimal place and accessing sensor state.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/index.rst#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: ...\n    # ...\n    id: my_sensor\n\ndisplay:\n  - platform: ...\n    # ...\n    lambda: |-\n      it.printf(0, 0, id(my_font), \"The sensor value is: %.1f\", id(my_sensor).state);\n      // If the sensor has the value 30.02, the result will be: \"The sensor value is: 30.0\"\n```\n\n----------------------------------------\n\nTITLE: Configuring SPS30 Sensor in ESPHome\nDESCRIPTION: Example YAML configuration for SPS30 sensor showing setup of multiple particle size measurements including weight and number concentrations. Includes sensor naming, IDs, IÂ²C address and update interval settings.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/sps30.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: sps30\n    pm_1_0:\n      name: \"Workshop PM <1Âµm Weight concentration\"\n      id: \"workshop_PM_1_0\"\n    pm_2_5:\n      name: \"Workshop PM <2.5Âµm Weight concentration\"\n      id: \"workshop_PM_2_5\"\n    pm_4_0:\n      name: \"Workshop PM <4Âµm Weight concentration\"\n      id: \"workshop_PM_4_0\"\n    pm_10_0:\n      name: \"Workshop PM <10Âµm Weight concentration\"\n      id: \"workshop_PM_10_0\"\n    pmc_0_5:\n      name: \"Workshop PM <0.5Âµm Number concentration\"\n      id: \"workshop_PMC_0_5\"\n    pmc_1_0:\n      name: \"Workshop PM <1Âµm Number concentration\"\n      id: \"workshop_PMC_1_0\"\n    pmc_2_5:\n      name: \"Workshop PM <2.5Âµm Number concentration\"\n      id: \"workshop_PMC_2_5\"\n    pmc_4_0:\n      name: \"Workshop PM <4Âµm Number concentration\"\n      id: \"workshop_PMC_4_0\"\n    pmc_10_0:\n      name: \"Workshop PM <10Âµm Number concentration\"\n      id: \"workshop_PMC_10_0\"\n    pm_size:\n      name: \"Typical Particle size\"\n      id: \"pm_size\"\n    address: 0x69\n    update_interval: 10s\n```\n\n----------------------------------------\n\nTITLE: Implementing on_ready Trigger with Lambda for Alarm Panel in YAML\nDESCRIPTION: YAML configuration for adding an on_ready trigger with a lambda function to an Alarm Control Panel, which activates when all sensors are ready.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/alarm_control_panel/index.rst#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nalarm_control_panel:\n  # ...\n  on_disarmed:\n    then:\n      - lambda: !lambda |-\n          ESP_LOGI(\"AlarmPanel\", \"Sensor ready change to: %s\", ((id(acp1).get_all_sensors_ready()) ? (const char *) \"True\" : (const char *) \"False\"));\n```\n\n----------------------------------------\n\nTITLE: Esp32-Stick-Eth Family Configuration\nDESCRIPTION: Ethernet configuration for Esp32-Stick-Eth, Esp32-Stick-PoE-P, and Esp32-Stick-PoE-A boards using LAN8720 chipset.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/ethernet.rst#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nethernet:\n  type: LAN8720\n  mdc_pin: GPIO23\n  mdio_pin: GPIO18\n  clk_mode: GPIO17_OUT\n  phy_addr: 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Output for RTTTL Buzzer - YAML\nDESCRIPTION: This snippet shows how to configure an output component for the RTTTL buzzer in ESPHome. It defines an output platform and associates it with a unique ID for further use.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/rtttl.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"output:\\n  - platform: ...\\n    id: rtttl_out\\n    ...\\n\\nrtttl:\\n  output: rtttl_out\\n  id: my_rtttl\\n  gain: 60%\"\n```\n\n----------------------------------------\n\nTITLE: Basic ES8311 Audio DAC Configuration in YAML\nDESCRIPTION: A simple configuration entry for the ES8311 audio DAC platform in ESPHome. This snippet demonstrates how to add the ES8311 to your configuration file.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/audio_dac/es8311.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\naudio_dac:\n  - platform: es8311\n```\n\n----------------------------------------\n\nTITLE: Adding Custom mDNS Services\nDESCRIPTION: This YAML example demonstrates how to configure additional mDNS services to be exposed by the ESPHome node. Custom services can be identified by a unique name, protocol, and optional fields like port and text records.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/mdns.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry with additional service\nmdns:\n  services:\n    - service: \"_custom_service\"\n      protocol: \"_tcp\"\n      port: 8080\n      txt:\n        txt_key_1: \"txt_value_1\"\n```\n\n----------------------------------------\n\nTITLE: Binary Sensor Lambda Function Calls in YAML\nDESCRIPTION: Examples of using lambda functions to control and check binary sensor states programmatically.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/index.rst#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n// Within lambda, publish an OFF state.\nid(my_binary_sensor).publish_state(false);\n\n// Within lambda, publish an ON state.\nid(my_binary_sensor).publish_state(true);\n\n// Within lambda, get the binary sensor state and conditionally do something\nif (id(my_binary_sensor).state) {\n  // Binary sensor is ON, do something here\n} else {\n  // Binary sensor is OFF, do something else here\n}\n```\n\n----------------------------------------\n\nTITLE: Sleep Mode Configuration with UART Setup\nDESCRIPTION: YAML configuration for implementing sleep mode on a Grow Fingerprint Reader to reduce power consumption, including UART bus setup and pin configuration.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/fingerprint_grow.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nuart:\n  rx_pin: GPIOXX\n  tx_pin: GPIOXX\n  baud_rate: 57600\n\nfingerprint_grow:\n  sensing_pin: GPIOXX\n  sensor_power_pin:\n      number: GPIOXX\n      inverted: true\n  idle_period_to_sleep: 5s\n```\n\n----------------------------------------\n\nTITLE: Configuring LD2450 Number Settings\nDESCRIPTION: This YAML snippet configures number controls for LD2450, managing presence timeout and zone configurations. The 'ld2450_id' links the configuration to the LD2450 component. Key configurations include 'presence_timeout' for timeout settings and 'zone_N' for configuring area dimensions represented by 'x1', 'y1', 'x2', and 'y2'. Extends number configuration options within ESPHome.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ld2450.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nnumber:\n  - platform: ld2450\n    ld2450_id: ld2450_radar\n    presence_timeout:\n      name: \"Timeout\"\n    zone_1:\n      x1:\n        name: Zone-1 X1\n      y1:\n        name: Zone-1 Y1\n      x2:\n        name: Zone-1 X2\n      y2:\n        name: Zone-1 Y2\n    zone_2:\n      x1:\n        name: Zone-2 X1\n      y1:\n        name: Zone-2 Y1\n      x2:\n        name: Zone-2 X2\n      y2:\n        name: Zone-2 Y2\n    zone_3:\n      x1:\n        name: Zone-3 X1\n      y1:\n        name: Zone-3 Y1\n      x2:\n        name: Zone-3 X2\n      y2:\n        name: Zone-3 Y2\n```\n\n----------------------------------------\n\nTITLE: Light Toggle Action Lambda Expression\nDESCRIPTION: This code shows how to express the `light.toggle` action in ESPHome using a lambda expression in C++. It shows how to obtain the light object by its ID and call the toggle method.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/light/index.rst#2025-04-21_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nauto call = id(light_1).toggle();\n// perform action:\ncall.perform();\n```\n\n----------------------------------------\n\nTITLE: Configuring Area Assignment in ESPHome\nDESCRIPTION: This snippet shows how to specify the suggested area that Home Assistant pre-populates when connecting an ESPHome device. This feature requires Home Assistant 2023.12 or later.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/changelog/2023.11.0.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nesphome:\n  name: living-room-light\n  friendly_name: Living Room Light\n  area: Living Room\n```\n\n----------------------------------------\n\nTITLE: RaspiAudio Muse Luxe External Microphone Configuration\nDESCRIPTION: Configuration for the RaspiAudio Muse Luxe device using an external non-PDM microphone on the IÂ²S audio platform\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/microphone/i2s_audio.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nmicrophone:\n  - platform: i2s_audio\n    i2s_din_pin: GPIOXX\n    adc_type: external\n    pdm: false\n```\n\n----------------------------------------\n\nTITLE: Configuring PIPSolar Switches in ESPHome\nDESCRIPTION: Example configuration for PIPSolar inverter switches including output source priority controls and PV settings. Allows control of various inverter operating modes and parameters.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/pipsolar.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nswitch:\n  - platform: pipsolar\n    pipsolar_id: inverter0\n    output_source_priority_utility:\n      name: inverter0_output_source_priority_utility\n    output_source_priority_solar:\n      name: inverter0_output_source_priority_solar\n    output_source_priority_battery:\n      name: inverter0_output_source_priority_battery\n    output_source_priority_hybrid:\n      name: inverter0_output_source_priority_hybrid\n    input_voltage_range:\n      name: inverter0_input_voltage_range\n    pv_ok_condition_for_parallel:\n      name: inverter0_pv_ok_condition_for_parallel\n    pv_power_balance:\n      name: inverter0_pv_power_balance\n```\n\n----------------------------------------\n\nTITLE: Configuring UART Button in ESPHome\nDESCRIPTION: Example configuration showing how to set up UART buttons for sending both string data and byte sequences. The first example sends a plain ASCII string while the second sends a specific sequence of hexadecimal bytes.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/button/uart.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nbutton:\n  - platform: uart\n    name: \"UART String Output\"\n    data: 'DataToSend'\n  - platform: uart\n    name: \"UART Bytes Output\"\n    data: [0xDE, 0xAD, 0xBE, 0xEF]\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic AGS10 Sensor in ESPHome\nDESCRIPTION: Basic configuration example for setting up an AGS10 VOC sensor with TVOC measurement functionality. Uses I2C communication with default address 0x1A.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ags10.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: ags10\n    tvoc:\n      name: TVOC\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Press Automation in ESPHome\nDESCRIPTION: Example showing how to configure an automation for button press events using the on_press trigger.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/button/index.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nbutton:\n  - platform: template\n    # ...\n    on_press:\n      then:\n        - logger.log: Button Pressed\n```\n\n----------------------------------------\n\nTITLE: Configuring LVGL Slider Widget\nDESCRIPTION: Example showing how to configure a slider widget with basic properties and automation triggers\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/widgets.rst#2025-04-21_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\n# Example widget:\n- slider:\n    x: 10\n    y: 10\n    width: 220\n    id: slider_id\n    value: 75\n    min_value: 0\n    max_value: 100\n\n# Example action:\non_...:\n  then:\n    - lvgl.slider.update:\n        id: slider_id\n        knob:\n          bg_color: 0x00FF00\n        value: 55\n\n# Example trigger:\n- slider:\n    ...\n    on_value:\n      - logger.log:\n          format: \"Slider value is: %.0f\"\n          args: [ 'x' ]\n```\n\n----------------------------------------\n\nTITLE: Using on_value Automation with Datetime Components\nDESCRIPTION: This automation is triggered when a new value is published to a datetime component. The lambda function demonstrates how to access the value as an ESPTime object and perform conditional logic.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/datetime/index.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndatetime:\n  - platform: template\n    # ...\n    on_value:\n      then:\n        - lambda: |-\n            if(x.hour >= 12) {\n              ESP_LOGD(\"main\", \"Updated hour is later or equal to 12\");\n            } else {\n              ESP_LOGD(\"main\", \"Updated hour is earlier than 12\");\n            }\n```\n\n----------------------------------------\n\nTITLE: Configuring Climate Controller with Preset Change Actions in ESPHome\nDESCRIPTION: Example showing how to configure a thermostat with presets and a change action that logs when the preset is modified.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/climate/thermostat.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nclimate:\n  - platform: thermostat\n    name: \"Thermostat with Presets Actions\"\n    preset:\n      - name: sleep\n        default_target_temperature_low: 17\n        default_target_temperature_high: 26\n        fan_mode: LOW\n        swing_mode: OFF\n    preset_change:\n      - logger.log: Preset has been changed!\n```\n\n----------------------------------------\n\nTITLE: Configuring Tuya Light Color Settings\nDESCRIPTION: Updated configuration for Tuya lights replacing rgb_datapoint and hsv_datapoint with new color_datapoint and color_type parameters.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/changelog/2023.3.0.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Old configuration\nrgb_datapoint: 1\nhsv_datapoint: 2\n\n# New configuration\ncolor_datapoint: 1\ncolor_type: rgb # or hsv\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Mode On Action for Haier Climate Device\nDESCRIPTION: YAML configuration to enable the health mode (UV light sterilization) on a Haier climate device.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/climate/haier.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    climate.haier.health_on: device_id\n```\n\n----------------------------------------\n\nTITLE: Configuring Qwiic PIR Motion Sensor in ESPHome\nDESCRIPTION: Basic YAML configuration for setting up a Qwiic PIR motion sensor in ESPHome. Requires an IÂ²C bus setup and proper pin connections. The configuration allows customization of the sensor name and supports additional binary sensor options.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/qwiic_pir.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nbinary_sensor:\n  - platform: qwiic_pir\n    name: \"Qwiic PIR Motion Sensor\"\n```\n\n----------------------------------------\n\nTITLE: Configuring LVGL Text Sensor in ESPHome YAML\nDESCRIPTION: This snippet demonstrates how to set up an LVGL text sensor in ESPHome configuration. It creates a text sensor named 'Textarea 1 text' associated with a textarea widget. The sensor will reflect the state of the specified LVGL widget.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/text_sensor/lvgl.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntext_sensor:\n  - platform: lvgl\n    widget: textarea_id\n    name: \"Textarea 1 text\"\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Grayscale Colors\nDESCRIPTION: Example showing how to create dynamic grayscale colors in code using the Color constructor.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/ssd1327.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndisplay:\n    ...\n    lambda: |-\n      float white_intensity = 0.5;\n      Color variable_gray(0, 0, 0, white_intensity);\n      it.rectangle(0,  0, it.get_width(), it.get_height(), variable_gray);\n```\n\n----------------------------------------\n\nTITLE: Defining Output Channels for TLC5947 in YAML for ESPHome\nDESCRIPTION: This YAML configuration defines individual output channels for the TLC5947 component in ESPHome. Each output is tied to a specific channel of the TLC5947 driver.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/output/tlc5947.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Individual outputs\n    output:\n      - platform: tlc5947\n        id: output_red\n        channel: 0\n      - platform: tlc5947\n        id: output_green\n        channel: 1\n      - platform: tlc5947\n        id: output_blue\n        channel: 2\n```\n\n----------------------------------------\n\nTITLE: Configuring Xiaomi CGD1 Alarm Clock in ESPHome YAML\nDESCRIPTION: YAML configuration for the Cleargrass (Qingping) alarm clock CGD1. Defines sensors for temperature, humidity and battery level. Requires a bindkey for decryption.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/xiaomi_ble.rst#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: xiaomi_cgd1\n    mac_address: XX:XX:XX:XX:XX:XX\n    bindkey: \"fe39106baeedb7c801e3d63c4396f97e\"\n    temperature:\n      name: \"CGD1 Temperature\"\n    humidity:\n      name: \"CGD1 Humidity\"\n    battery_level:\n      name: \"CGD1 Battery Level\"\n```\n\n----------------------------------------\n\nTITLE: Calibrating BL0942 Sensor in ESPHome - YAML\nDESCRIPTION: This YAML snippet provides an example of setting calibration parameters for a BL0942 sensor in ESPHome derived from observed DPS and firmware values. Correct calibration ensures accurate readings.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/bl0942.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nvoltage_reference: 15968    # DPS 21\ncurrent_reference: 124180   # DPS 22 * 10\npower_reference: 309.1      # DPS 23 / 10\nenergy_reference: 2653      # DPS 24\n```\n\n----------------------------------------\n\nTITLE: Beeper Control Switch Configuration\nDESCRIPTION: Example configuration for creating a switch to control the AC unit's beeper feedback.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/climate/midea.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nswitch:\n  - platform: template\n    name: Beeper\n    icon: mdi:volume-source\n    optimistic: true\n    turn_on_action:\n      midea_ac.beeper_on:\n    turn_off_action:\n      midea_ac.beeper_off:\n```\n\n----------------------------------------\n\nTITLE: Handling LVGL Textarea Value Change and Ready Triggers in YAML\nDESCRIPTION: Example of using the on_value and on_ready triggers for a textarea widget to execute actions when the text changes or is submitted. Demonstrates logging the updated text content.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/widgets.rst#2025-04-21_snippet_39\n\nLANGUAGE: yaml\nCODE:\n```\n# Example trigger:\n- textarea:\n    ...\n    on_value:\n      then:\n        - logger.log:\n            format: \"Textarea changed to: %s\"\n            args: [ text.c_str() ]\n    on_ready:\n      then:\n        - logger.log:\n            format: \"Textarea ready: %s\"\n            args: [ text.c_str() ]\n```\n\n----------------------------------------\n\nTITLE: Configuring TT21100 Binary Touch Sensor\nDESCRIPTION: YAML configuration for setting up a binary sensor for external touch buttons on the TT21100 controller. Supports up to 4 buttons with indices 0-3.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/touchscreen/tt21100.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nbinary_sensor:\n  - platform: tt21100\n    name: \"Home\"\n    index: 0\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Colors in ESPHome\nDESCRIPTION: Shows different methods to define custom colors in ESPHome, including using percentages, integer values, and hexadecimal representation.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/index.rst#2025-04-21_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\ncolor:\n  - id: my_light_red\n    red: 100%\n    green: 20%\n    blue: 25%\n    white: 0%\n\n  - id: my_light_red\n    red_int: 255\n    green_int: 51\n    blue_int: 64\n    white_int: 0\n\n  - id: my_light_red\n    hex: FF3340\n```\n\n----------------------------------------\n\nTITLE: Implementing Final PID Parameters in YAML Configuration\nDESCRIPTION: Example of how to implement the calculated PID parameters in the climate controller configuration after successful autotuning. These values should be copied from the autotuner output.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/climate/pid.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nclimate:\n  - platform: pid\n    # ...\n    control_parameters:\n      kp: 0.49460\n      ki: 0.00487\n      kd: 12.56301\n```\n\n----------------------------------------\n\nTITLE: Setting up arm_night Action for Alarm Panel in YAML\nDESCRIPTION: YAML configuration for adding an arm_night action to an Alarm Control Panel, which arms the alarm in night mode.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/alarm_control_panel/index.rst#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - alarm_control_panel.arm_night:\n        id: acp1\n        code: \"1234\"\n```\n\n----------------------------------------\n\nTITLE: Configuring RF Transmitter in YAML\nDESCRIPTION: YAML configuration for setting up a 433MHz RF transmitter with 100% carrier signal duty cycle.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/setting_up_rmt_devices.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nremote_transmitter:\\n  pin: GPIOXX\\n  carrier_duty_percent: 100%\n```\n\n----------------------------------------\n\nTITLE: Configuring Seeed MR24HPC1 Number Parameters - YAML\nDESCRIPTION: This YAML snippet specifies configuration variables for controlling parameters such as sensitivity, motion trigger timing, and thresholds within the seeed_mr24hpc1 component.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/seeed_mr24hpc1.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n\"    number:\\n      - platform: seeed_mr24hpc1\\n        sensitivity:\\n          name: \\\"Sensitivity\\\"\\n        custom_mode:\\n          name: \\\"Custom Mode\\\"\\n        existence_threshold:\\n          name: \\\"Existence Energy Threshold\\\"\\n        motion_threshold:\\n          name: \\\"Motion Energy Threshold\\\"\\n        motion_trigger:\\n          name: \\\"Motion Trigger Time\\\"\\n        motion_to_rest:\\n          name: \\\"Motion To Rest Time\\\"\\n        custom_unman_time:\\n          name: \\\"Time For Entering No Person State (Custom Mode)\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Setting Clean Mode Action in YAML\nDESCRIPTION: This YAML action sets the next NFC tag presented to the PN7160 to 'clean mode', whereby all data is removed from the tag. It's part of the ESPHome automation where certain conditions trigger this action. There are no additional prerequisites besides the PN7160 being correctly set up with ESPHome.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/pn7160.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - tag.set_clean_mode: my_pn7160_id\n```\n\n----------------------------------------\n\nTITLE: Single Valve Sprinkler Configuration in ESPHome\nDESCRIPTION: Complete YAML configuration for a single-valve sprinkler system without a pump.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sprinkler.rst#2025-04-21_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nesphome:\n    name: esp-sprinkler-controller\n\nesp32:\n    board: featheresp32\n\nwifi:\n    ssid: \"wifi_ssid\"\n    password: \"wifi_password\"\n\nlogger:\n\nsprinkler:\n  - id: garden_sprinkler_ctrlr\n    valves:\n      - valve_switch: \"Flower Garden\"\n        run_duration: 300s\n        valve_switch_id: garden_sprinkler_valve\n\nswitch:\n  - platform: gpio\n    id: garden_sprinkler_valve\n    pin: GPIOXX\n```\n\n----------------------------------------\n\nTITLE: Navigating Right in a Menu using ESPHome YAML\nDESCRIPTION: This YAML snippet configures the right action for a binary sensor's on_press event, typically for a joystick. In joystick mode, it increases values or enters submenus. No specific dependencies are mentioned.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display_menu/index.rst#2025-04-21_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nbinary_sensor:\n  - platform: gpio\n    ...\n    on_press:\n      - display_menu.right:\n```\n\n----------------------------------------\n\nTITLE: Setting Standby Mode for Grove TB6612FNG in ESPHome\nDESCRIPTION: Configuration for putting the motor driver board into standby mode. This reduces power consumption and prevents jerking motion when the device is not in use.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/grove_tb6612fng.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - grove_tb6612fng.standby\n        id: test_motor\n```\n\n----------------------------------------\n\nTITLE: BLE Client Connect Handler\nDESCRIPTION: Automation handler for BLE device connection events\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/ble_client.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nble_client:\n  - mac_address: XX:XX:XX:XX:XX:XX\n    id: ble_itag\n    on_connect:\n      then:\n        - lambda: |-\n            ESP_LOGD(\"ble_client_lambda\", \"Connected to BLE device\");\n```\n\n----------------------------------------\n\nTITLE: Lock Lambda Calls - C++\nDESCRIPTION: Demonstrates how to invoke methods on lock objects through lambda functions. This includes state publishing and state retrieval methods.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lock/index.rst#2025-04-21_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\n// Within lambda, make the lock report a specific state\nid(my_lock).publish_state(LOCK_STATE_LOCKED);\nid(my_lock).publish_state(LOCK_STATE_UNLOCKED);\n```\n\nLANGUAGE: cpp\nCODE:\n```\n// Within lambda, get the lock state and conditionally do something\nif (id(my_lock).state == LOCK_STATE_LOCKED) {\n  // Lock is LOCKED, do something here\n}\n```\n\nLANGUAGE: cpp\nCODE:\n```\nid(my_lock).unlock();\nid(my_lock).lock();\nid(my_lock).open();\n```\n\n----------------------------------------\n\nTITLE: Implementing on_triggered Trigger for Alarm Panel in YAML\nDESCRIPTION: YAML configuration for adding an on_triggered trigger to an Alarm Control Panel, which activates when the alarm enters triggered state.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/alarm_control_panel/index.rst#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nalarm_control_panel:\n  # ...\n  on_triggered:\n    then:\n      - logger.log: \"Alarm Triggered!\"\n```\n\n----------------------------------------\n\nTITLE: Advanced Multi Click Pattern Configuration in YAML\nDESCRIPTION: Extended configuration example showing how to differentiate between double, long and short press patterns.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/index.rst#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\non_multi_click:\n- timing:\n    - ON for at most 1s\n    - OFF for at most 1s\n    - ON for at most 1s\n    - OFF for at least 0.2s\n  then:\n    - logger.log: \"Double Clicked\"\n- timing:\n    - ON for 1s to 2s\n    - OFF for at least 0.5s\n  then:\n    - logger.log: \"Single Long Clicked\"\n- timing:\n    - ON for at most 1s\n    - OFF for at least 0.5s\n  then:\n    - logger.log: \"Single Short Clicked\"\n```\n\n----------------------------------------\n\nTITLE: Transmitting Type A RC-Switch Codes with YAML\nDESCRIPTION: This defines transmission of Type A RC-Switch codes, with a focus on group, device, and state parameters. Protocol selection is optional, used for device compatibility.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/remote_transmitter.rst#2025-04-21_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - remote_transmitter.transmit_rc_switch_type_a:\n      group: '01001'\n      device: '10110'\n      state: off\n      protocol: 1\n```\n\n----------------------------------------\n\nTITLE: Changing I2C Address for AGS10 Sensor\nDESCRIPTION: Configuration example for changing the I2C address of an AGS10 sensor. Shows how to set a new address that persists after power cycles.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ags10.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: ags10\n    id: ags10_1_id\n    # ...\n\n# in some trigger\non_...:\n  - ags10.new_i2c_address:\n      id: ags10_1_id\n      address: 0x1E\n```\n\n----------------------------------------\n\nTITLE: Base Media Player Configuration in ESPHome\nDESCRIPTION: This code snippet shows the base configuration for a media player in ESPHome's YAML configuration file. It defines the platform and name of the media player, which are required for basic functionality.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/media_player/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmedia_player:\n  - platform: ...\n    name: \"Media Player Name\"\n```\n\n----------------------------------------\n\nTITLE: TCS34725 Sensor Filter Configuration\nDESCRIPTION: Example configuration showing how to apply filters to the TCS34725 sensor readings to manage update frequency and sensitivity in dynamic environments.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/tcs34725.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nilluminance:\nname: \"TCS34725 Illuminance\"\nfilters:\n  - or:\n      - delta: 50\n      - throttle: 60sec\n```\n\n----------------------------------------\n\nTITLE: Complete Shelly 2.5 Implementation with Current Based Cover\nDESCRIPTION: Comprehensive configuration example showing integration with Shelly 2.5 hardware, including temperature monitoring, button controls, and safety features.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/cover/current_based.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nesphome:\n  name: Shelly 2.5\n\nesp8266:\n  board: esp01_1m\n  restore_from_flash: true\n\ni2c:\n  sda: GPIO12\n  scl: GPIO14\n\nsensor:\n  - platform: ade7953_i2c\n    irq_pin: GPIO16\n    voltage:\n      name: Shelly 2.5 Mains Voltage\n      internal: true\n      filters:\n        - throttle: 5s\n    current_a:\n      name: Shelly 2.5 Open Current\n      id: open_current\n      internal: true\n    current_b:\n      name: Shelly 2.5 Close Current\n      id: close_current\n      internal: true\n    update_interval: 0.5s\n\n  - platform: ntc\n    sensor: temp_resistance_reading\n    name: Shelly 2.5 Temperature\n    unit_of_measurement: \"Â°C\"\n    accuracy_decimals: 1\n    calibration:\n      b_constant: 3350\n      reference_resistance: 10kOhm\n      reference_temperature: 298.15K\n    on_value_range:\n      above: 90\n      then:\n        - switch.turn_on: _shutdown\n\n  - platform: resistance\n    id: temp_resistance_reading\n    sensor: temp_analog_reading\n    configuration: DOWNSTREAM\n    resistor: 32kOhm\n    internal: true\n  - platform: adc\n    id: temp_analog_reading\n    pin: A0\n    update_interval: 30s\n    internal: true\n\nbinary_sensor:\n  - platform: gpio\n    pin:\n      number: GPIO13\n    name: Shelly 2.5 Open Button\n    on_press:\n      then:\n        cover.open: blind\n\n  - platform: gpio\n    pin:\n      number: GPIO5\n    name: Shelly 2.5 Close Button\n    on_press:\n      then:\n        cover.close: blind\n\nswitch:\n  - platform: shutdown\n    id: _shutdown\n    name: Shelly 2.5 Shutdown\n\n  - platform: gpio\n    id: open_relay\n    name: Shelly 2.5 Open Relay\n    pin: GPIO15\n    restore_mode: RESTORE_DEFAULT_OFF\n    interlock: &interlock [open_relay, close_relay]\n    interlock_wait_time: 200ms\n\n  - platform: gpio\n    id: close_relay\n    name: Shelly 2.5 Close Relay\n    pin: GPIO4\n    restore_mode: RESTORE_DEFAULT_OFF\n    interlock: *interlock\n    interlock_wait_time: 200ms\n\ncover:\n  - platform: current_based\n    name: Blind\n    id: blind\n\n    open_sensor: open_current\n    open_moving_current_threshold: 0.5\n    open_duration: 12s\n    open_action:\n      - switch.turn_on: open_relay\n    close_sensor: close_current\n    close_moving_current_threshold: 0.5\n    close_duration: 10s\n    close_action:\n      - switch.turn_on: close_relay\n    stop_action:\n      - switch.turn_off: close_relay\n      - switch.turn_off: open_relay\n    obstacle_rollback: 30%\n    start_sensing_delay: 0.8s\n    malfunction_detection: true\n    malfunction_action:\n      then:\n        - logger.log: \"Malfunction detected. Relay welded.\"\n\nstatus_led:\n  pin:\n    number: GPIO0\n    inverted: yes\n```\n\n----------------------------------------\n\nTITLE: Tuya ME-81H Thermostat Output Example\nDESCRIPTION: Example output from a Tuya ME-81H thermostat showing various datapoints, their types, and values, including GPIO configuration and product information.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/tuya.rst#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n[08:51:09][C][tuya:032]: Tuya:\n[08:51:09][C][tuya:043]:   Datapoint 1: switch (value: ON)\n[08:51:09][C][tuya:045]:   Datapoint 24: int value (value: 220)\n[08:51:09][C][tuya:045]:   Datapoint 16: int value (value: 22)\n[08:51:09][C][tuya:049]:   Datapoint 2: enum (value: 1)\n[08:51:09][C][tuya:045]:   Datapoint 19: int value (value: 40)\n[08:51:09][C][tuya:045]:   Datapoint 101: int value (value: 1)\n[08:51:09][C][tuya:045]:   Datapoint 27: int value (value: -2)\n[08:51:09][C][tuya:049]:   Datapoint 43: enum (value: 1)\n[08:51:09][C][tuya:049]:   Datapoint 102: enum (value: 1)\n[08:51:09][C][tuya:051]:   Datapoint 45: bitmask (value: 0)\n[08:51:09][C][tuya:043]:   Datapoint 10: switch (value: ON)\n[08:51:09][C][tuya:041]:   Datapoint 38: raw (value: 06.00.14.08.00.0F.0B.1E.0F.0C.1E.0F.11.00.16.16.00.0F.08.00.16.17.00.0F (24))\n[08:51:09][C][tuya:049]:   Datapoint 36: enum (value: 1)\n[08:51:09][C][tuya:057]:   GPIO Configuration: status: pin 14, reset: pin 0 (not supported)\n[08:51:09][C][tuya:061]:   Status Pin: GPIO14\n[08:51:09][C][tuya:063]:   Product: '{\"p\":\"gogb05wrtredz3bs\",\"v\":\"1.0.0\",\"m\":0}'\n```\n\n----------------------------------------\n\nTITLE: Cover Toggle Action Configuration\nDESCRIPTION: YAML configuration for toggling a cover state using action triggers.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/cover/index.rst#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - cover.toggle: cover_1\n```\n\n----------------------------------------\n\nTITLE: Color Configuration for ST7789V Display\nDESCRIPTION: Example showing how to define and use custom colors in display lambda functions\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/st7789v.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncolor:\n  - id: my_red\n    red: 100%\n    green: 3%\n    blue: 5%\n\n...\n\ndisplay:\n    ...\n    lambda: |-\n      it.rectangle(0,  0, it.get_width(), it.get_height(), id(my_red));\n```\n\n----------------------------------------\n\nTITLE: SIM800L Binary Sensor Setup\nDESCRIPTION: Configuration for a binary sensor to monitor network registration status of the SIM800L module.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sim800l.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nbinary_sensor:\n  - platform: sim800l\n    registered:\n      name: \"Sim800L Registered\"\n```\n\n----------------------------------------\n\nTITLE: AirThings Wave Mini Sensor Configuration\nDESCRIPTION: Complete configuration for AirThings Wave Mini including temperature, pressure, humidity, VOC and battery voltage sensors.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/airthings_ble.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: airthings_wave_mini\n    ble_client_id: airthingsmini\n    update_interval: 5min # default\n    battery_update_interval: 24h # default\n    temperature:\n      name: \"WaveMini Temperature\"\n    pressure:\n      name: \"WaveMini Pressure\"\n    humidity:\n      name: \"WaveMini Humidity\"\n    tvoc:\n      name: \"WaveMini VOC\"\n    battery_voltage:\n      name: \"WaveMini Battery Voltage\"\n\nble_client:\n  - mac_address: XX:XX:XX:XX:XX:XX\n    id: airthingsmini\n\nesp32_ble_tracker:\n```\n\n----------------------------------------\n\nTITLE: Configuring Menu Item Enter Automation in ESPHome\nDESCRIPTION: YAML configuration for an on_enter automation that logs when a submenu is entered.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display_menu/index.rst#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nlcd_menu:\n  ...\n  items:\n    - type: menu\n      text: 'Submenu 1'\n      on_enter:\n        then:\n          lambda: 'ESP_LOGI(\"display_menu\", \"enter: %s\", it->get_text().c_str());'\n```\n\n----------------------------------------\n\nTITLE: Basic Uponor Smatrix Configuration in YAML\nDESCRIPTION: Initial YAML configuration for the Uponor Smatrix component in ESPHome. This setup enables scanning the bus for device addresses.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/uponor_smatrix.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nuponor_smatrix:\n```\n\n----------------------------------------\n\nTITLE: Entering MAX17043 Sleep Mode before Deep Sleep\nDESCRIPTION: This example showcases how to use the `sleep_mode` action to put the MAX17043 into sleep mode before entering deep sleep in ESPHome. This is critical for maintaining the state of the fuel gauge during the sleep phase and ensuring accurate battery level monitoring.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/max17043.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n \"on_...:\n  then:\n    - max17043.sleep_mode: max17043_id\n    - deep_sleep.enter:\n        id: deep_sleep_1\n        sleep_duration: 20min\"\n```\n\n----------------------------------------\n\nTITLE: Media Player Playing Condition in ESPHome\nDESCRIPTION: This YAML snippet shows how to use the `media_player.is_playing` condition within a trigger to check if the media player is currently playing media.  The associated actions within the trigger are executed if the condition evaluates to true.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/media_player/index.rst#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n# In some trigger:\non_...:\n  if:\n    condition:\n      media_player.is_playing:\n```\n\n----------------------------------------\n\nTITLE: Configuring Individual SM2135 Outputs in ESPHome\nDESCRIPTION: This YAML configuration snippet defines individual output channels for an SM2135 LED driver in ESPHome. Each channel is associated with a specific color and a maximum power setting. Dependencies include a previously configured SM2135 component and an ESPHome environment. Parameters such as 'id' and 'channel' are required to identify and select the specific output channel. The setup is constrained by the limitation that both color and white channels cannot be active simultaneously, necessitating the rgbw_color_interlock setting.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/output/sm2135.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Individual outputs\noutput:\n  - platform: sm2135\n    id: output_red\n    channel: 0\n    max_power: 0.8\n  - platform: sm2135\n    id: output_green\n    channel: 1\n    max_power: 0.8\n  - platform: sm2135\n    id: output_blue\n    channel: 2\n    max_power: 0.8\n  - platform: sm2135\n    id: output_white\n    channel: 3\n    max_power: 0.8\n  - platform: sm2135\n    id: output_warmwhite\n    channel: 4\n    max_power: 0.8\n```\n\n----------------------------------------\n\nTITLE: ESPHome Play On Device Media File Action\nDESCRIPTION: This code snippet demonstrates how to use the ``media_player.speaker.play_on_device_media_file`` action in ESPHome to play an on-device media file. It shows both a simple and a full configuration example. The full configuration allows specifying the media file ID and whether to play it as an announcement or media stream.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/media_player/speaker.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n    on_...:\n      # Simple\n      - media_player.speaker.play_on_device_media_file: file_id\n\n      # Full\n      - media_player.speaker.play_on_device_media_file:\n          media_file: wake_word_trigger_sound\n          announcement: true\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP9600 Sensor in ESPHome YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure the MCP9600 sensor platform in ESPHome to read temperature from a thermocouple and measure ambient temperature. It defines the sensor platform, sets names for the hot and cold junction sensors, specifies the thermocouple type, IÂ²C address, and the update interval.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/mcp9600.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"# Example configuration entry\nsensor:\n  - platform: mcp9600\n    hot_junction:\n      name: \\\"Thermocouple Temperature\\\"\n    cold_junction:\n      name: \\\"Ambient Temperature\\\"\n    thermocouple_type: K\n    address: 0x67\n    update_interval: 60s\"\n```\n\n----------------------------------------\n\nTITLE: Transmitting Mirage IR Code with ESPHome\nDESCRIPTION: This YAML snippet configures ESPHome to transmit a 112-bit Mirage code. The `code` parameter is a list of 14 bytes. ESPHome automatically adds an 8-bit checksum to the transmitted code.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/remote_transmitter.rst#2025-04-21_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - remote_transmitter.transmit_mirage:\n      code: [0x56, 0x77, 0x00, 0x00, 0x22, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]\n```\n\n----------------------------------------\n\nTITLE: Implementing Clockwise and Anticlockwise Triggers in YAML\nDESCRIPTION: This example shows how to implement triggers for actions based on the rotation direction of the rotary encoder. The triggers will log a message every time the encoder is turned clockwise or anticlockwise, regardless of its current value.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/rotary_encoder.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\non_clockwise:\n  - logger.log: \"Turned Clockwise\"\non_anticlockwise:\n  - logger.log: \"Turned Anticlockwise\"\n```\n\n----------------------------------------\n\nTITLE: Reading Current State from EZO Sensor\nDESCRIPTION: Lambda function to perform a reading of the current sensor value.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ezo.rst#2025-04-21_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nid(ph_ezo).get_state();\n```\n\n----------------------------------------\n\nTITLE: I2C Configuration for High Frequency Operation\nDESCRIPTION: Special I2C configuration required when using frequencies above 50-100kHz on IDF framework. Includes timeout setting to prevent communication errors.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/sht3xd.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Example IÂ²C configuration\ni2c:\n  sda: 21\n  scl: 22\n  scan: true\n  frequency: 800khz\n  timeout: 10ms\n```\n\n----------------------------------------\n\nTITLE: Configuring HHCCPOT002 FlowerPot in YAML\nDESCRIPTION: Configuration for the FlowerPot sensor that broadcasts moisture and conductivity measurements. Requires MAC address of the device.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/xiaomi_ble.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: xiaomi_hhccpot002\n    mac_address: XX:XX:XX:XX:XX:XX\n    moisture:\n      name: \"HHCCPOT002 Moisture\"\n    conductivity:\n      name: \"HHCCPOT002 Soil Conductivity\"\n```\n\n----------------------------------------\n\nTITLE: Total Pulse Count Reset Configuration\nDESCRIPTION: Implements an API action to reset or set the total pulse count to match meter readings.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/cookbook/power_meter.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napi:\n  actions:\n    - action: set_total\n      variables:\n        new_total: int\n      then:\n        - pulse_counter.set_total_pulses:\n            id: sensor_pulse_meter\n            value: !lambda 'return new_total * 1000;'\n```\n\n----------------------------------------\n\nTITLE: Configuring SPI Interface for Display in ESPHome\nDESCRIPTION: Configuration for the SPI interface used by the display. Sets GPIO18 as the clock pin and GPIO19 as the MOSI (Master Out Slave In) pin for serial communication with the display.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/st7789v.rst#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n    spi:\n      clk_pin: GPIO18\n      mosi_pin: GPIO19\n```\n\n----------------------------------------\n\nTITLE: Implementing Animation Display and Frame Control\nDESCRIPTION: Example of how to implement animation frame progression and display the animation on a display component using a lambda function.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/animation.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndisplay:\n  - platform: ...\n    # ...\n    lambda: |-\n      //Ingress shown animation Frame.\n      id(my_animation).next_frame();\n      // Draw the animation my_animation at position [x=0,y=0]\n      it.image(0, 0, id(my_animation), COLOR_ON, COLOR_OFF);\n```\n\n----------------------------------------\n\nTITLE: Configuring Tuya Fan in ESPHome (YAML)\nDESCRIPTION: A YAML configuration example for creating a Tuya fan in ESPHome. This setup defines the essential datapoints for a fan, including the switch_datapoint (1) for on/off control and speed_datapoint (3) for speed adjustment.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/fan/tuya.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Create a fan\nfan:\n  - platform: \"tuya\"\n    name: \"MyFan\"\n    switch_datapoint: 1\n    speed_datapoint: 3\n```\n\n----------------------------------------\n\nTITLE: Playing Previous Track with DF-Player in ESPHome\nDESCRIPTION: Action to play the previously played track in the DF-Player module.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/dfplayer.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - dfplayer.play_previous:\n```\n\n----------------------------------------\n\nTITLE: YAML Insertion Template Example\nDESCRIPTION: Shows how to use YAML insertion operator with common configuration files and device-specific settings.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/substitutions.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nesphome:\n  name: $devicename\n  # ...\n\nsensor:\n- platform: dht\n  # ...\n  temperature:\n    name: Temperature\n  humidity:\n    name: Humidity\n```\n\nLANGUAGE: yaml\nCODE:\n```\nsubstitutions:\n  devicename: nodemcu1\n\n<<: !include common.yaml\n```\n\n----------------------------------------\n\nTITLE: Cover Control Action Configuration\nDESCRIPTION: YAML configuration for controlling cover position and tilt using action triggers.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/cover/index.rst#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - cover.control:\n        id: cover_1\n        position: 50%\n        tilt: 50%\n```\n\n----------------------------------------\n\nTITLE: Basic UART and Cover Configuration for HE60R\nDESCRIPTION: Basic configuration example showing UART setup at 1200 baud with even parity and cover platform configuration for the HE60R garage door opener.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/cover/he60r.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nuart:\n  - id: door_uart\n    baud_rate: 1200\n    parity: even\n    stop_bits: 1\n    tx_pin: GPIOXX\n    rx_pin: GPIOXX\n\ncover:\n  platform: he60r\n  id: garage_door\n  name: Garage Door\n```\n\n----------------------------------------\n\nTITLE: CAN Frame Trigger Automation\nDESCRIPTION: Automation example showing how to handle received CAN frames with conditional logic based on frame content and extended ID matching.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/canbus/index.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncanbus:\n  - platform: ...\n    on_frame:\n    - can_id: 43\n      then:\n        - if:\n            condition:\n              lambda: 'return (x.size() > 0) ? x[0] == 0x11 : false;'\n            then:\n              light.toggle: light1\n    - can_id:      0b00000000000000000000001000000\n      can_id_mask: 0b11111000000000011111111000000\n      use_extended_id: true\n      remote_transmission_request: false\n      then:\n        - lambda: |-\n            auto pdo_id = can_id >> 14;\n            switch (pdo_id)\n            {\n              case 117:\n                ESP_LOGD(\"canbus\", \"exhaust_fan_duty\");\n                break;\n              case 118:\n                ESP_LOGD(\"canbus\", \"supply_fan_duty\");\n                break;\n              case 119:\n                ESP_LOGD(\"canbus\", \"supply_fan_flow\");\n                break;\n            }\n```\n\n----------------------------------------\n\nTITLE: Applying Filters to Text Sensors in YAML\nDESCRIPTION: Demonstrates various filter options for text sensors, including to_upper, to_lower, append, prepend, substitute, and lambda filters.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/text_sensor/index.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Example filters:\nfilters:\n  - to_upper:\n  - to_lower:\n  - append: \"_suffix\"\n  - prepend: \"prefix_\"\n  - substitute:\n    - \"suf -> foo\"\n    - \"pre -> bar\"\n  - lambda: return {\"Hello World\"};\n```\n\n----------------------------------------\n\nTITLE: Active Low GPIO Switch Configuration in ESPHome YAML\nDESCRIPTION: Configuration for creating an active-low switch (turned off by default) using the Pin Schema with inverted parameter set to true.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/switch/gpio.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nswitch:\n  - platform: gpio\n    pin:\n      number: GPIOXX\n      inverted: true\n```\n\n----------------------------------------\n\nTITLE: Configuring LVGL ButtonMatrix Widget with Triggers and Actions\nDESCRIPTION: Example of configuring a ButtonMatrix widget with multiple buttons, custom styling, and associated actions and triggers. Demonstrates how to set up checkable buttons, customize button appearance, and respond to interaction events.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/widgets.rst#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n# Example widget:\n- buttonmatrix:\n    x: 10\n    y: 40\n    width: 220\n    items:\n      pressed:\n        bg_color: 0xFFFF00\n    id: matrix_id\n    rows:\n      - buttons:\n        - id: button_1\n          text: \"\\uF04B\"\n          control:\n            checkable: true\n        - id: button_2\n          text: \"\\uF04C\"\n          control:\n            checkable: true\n      - buttons:\n        - id: button_3\n          text: \"A\"\n          control:\n            popover: true\n        - id: button_4\n          text: \"B\"\n          control:\n            disabled: true\n      - buttons:\n        - id: button_5\n          text: \"It's #ff0000 red#\"\n          width: 2\n          control:\n            recolor: true\n\n# Example action:\non_...:\n  then:\n    - lvgl.matrix.button.update:\n        id: button_1\n        width: 1\n        selected: true\n        control:\n          checkable: false\n    - lvgl.buttonmatrix.update:\n        id: matrix_id\n        state:\n          disabled: true\n        items:\n          bg_color: 0xf0f0f0\n\n# Example trigger:\n- buttonmatrix:\n    ...\n    rows:\n      - buttons:\n        ...\n        - id: button_2\n          ...\n          control:\n            checkable: true\n          on_value: # Trigger for the individual button, returning the checked state\n            then:\n              - logger.log:\n                  format: \"Button 2 checked: %d\"\n                  args: [ x ]\n    on_press: # Triggers for the matrix, to determine which button was pressed.\n      logger.log:\n        format: \"Matrix button pressed: %d\"\n        args: [\"x\"]  # If x is 65535, it was the container, (or through a disabled button).\n    on_click:\n      logger.log:\n        format: \"Matrix button clicked: %d, is button_2 = %u\"\n        args: [\"x\", \"id(button_2) == x\"]\n```\n\n----------------------------------------\n\nTITLE: Advanced Slow PWM Output Configuration with Actions\nDESCRIPTION: This code snippet extends the slow PWM configuration by adding actions for turning the output on and off. It utilizes optional parameters for automation, such as 'turn_on_action' and 'turn_off_action'. These allow additional logic when the GPIO pin state changes. The snippet assumes dependencies like 'output1' are defined elsewhere.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/output/slow_pwm.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\noutput:\\n  - platform: slow_pwm\\n    id: my_slow_pwm\\n    period: 15s\\n    turn_on_action:\\n      - lambda: |-\\n          auto *out1 = id(output1);\\n          out1->turn_on();\\n    turn_off_action:\\n      - output.turn_off: output1\n```\n\n----------------------------------------\n\nTITLE: Clearing Total Volume Dosed in YAML\nDESCRIPTION: This YAML snippet describes how to reset volume counters on the EZO-PMP pump using the `ezo_pmp.clear_total_volume_dosed` action. It clears sensors related to the dose history and requires the pump's `id`.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/ezo_pmp.rst#2025-04-21_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n  - ezo_pmp.clear_total_volume_dosed:\n      id: ezo_pmp\n```\n\n----------------------------------------\n\nTITLE: Setting Brightness of Nextion Display\nDESCRIPTION: This snippet shows how to set the brightness of a Nextion display's backlight using an action.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/nextion.rst#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - display.nextion.set_brightness: 50%\n```\n\n----------------------------------------\n\nTITLE: WiFi and Factory Reset Configuration in ESPHome\nDESCRIPTION: YAML configuration for WiFi setup with AP mode and factory reset button implementation. Includes captive portal setup and button configuration.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/cookbook/lambda_magic.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nwifi:\n  id: wifi_component\n  ap:\n    ap_timeout: 0s\n  reboot_timeout: 0s\n\ncaptive_portal:\n\nbutton:\n  - platform: factory_reset\n    id: factory_reset_button\n    name: \"ESPHome: Factory reset\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Seeed MR60BHA2 Sensor for Measurements\nDESCRIPTION: This configuration snippet sets up the seeed_mr60bha2 sensor to perform measurements, including breath rate, heart rate, distance, and number of targets detected, using various optional parameters for customization.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/seeed_mr60bha2.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n\"    sensor:\\n      - platform: seeed_mr60bha2\\n        breath_rate:\\n          name: \\\"Real-time respiratory rate\\\"\\n        heart_rate:\\n          name: \\\"Real-time heart rate\\\"\\n        distance:\\n          name: \\\"Distance to detection object\\\"\\n        num_targets:\\n          name: \\\"Target number\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Playing Next Track with DF-Player in ESPHome\nDESCRIPTION: Action to start playback of the next track or skip to the next track during active playback.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/dfplayer.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - dfplayer.play_next:\n```\n\n----------------------------------------\n\nTITLE: Multiple On Click Events Configuration in YAML\nDESCRIPTION: Advanced configuration example showing how to define multiple click events with different time ranges and actions.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/index.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nbinary_sensor:\n  - platform: gpio\n    # ...\n    on_click:\n    - min_length: 50ms\n      max_length: 350ms\n      then:\n        - switch.turn_off: relay_1\n    - min_length: 500ms\n      max_length: 1000ms\n      then:\n        - switch.turn_on: relay_1\n```\n\n----------------------------------------\n\nTITLE: Setting Read Mode Action in YAML\nDESCRIPTION: The YAML snippet sets the PN7160 NFC controller to 'read mode', which allows reading the next tag presented. This is the default operational mode used in automations defined in ESPHome. The setup of the PN7160 with a valid read configuration is required.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/pn7160.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - tag.set_read_mode: my_pn7160_id\n```\n\n----------------------------------------\n\nTITLE: LVGL Update Action for Background Color and Image\nDESCRIPTION: Action configuration for changing the background color or background image of the LVGL display at runtime. This example shows both color and image updates.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/index.rst#2025-04-21_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\n# Examples:\non_...:\n  then:\n    - lvgl.update:\n        disp_bg_color: 0x0000FF\n    - lvgl.update:\n        disp_bg_image: cat_image\n```\n\n----------------------------------------\n\nTITLE: Logging Button Checked State with on_value Trigger in YAML\nDESCRIPTION: This YAML code shows how to use the `on_value` trigger to capture changes in the button's checked state and log them. It demonstrates how to monitor button states within an ESPHome environment and react accordingly.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/widgets.rst#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n    # Example trigger:\n    - button:\n        ...\n        on_value:\n          then:\n            - logger.log:\n                format: \"Button checked state: %d\"\n                args: [ x ]\n\n```\n\n----------------------------------------\n\nTITLE: Full Uponor Smatrix Configuration with Time Sync in YAML\nDESCRIPTION: Complete YAML configuration for the Uponor Smatrix component, including UART and time synchronization settings.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/uponor_smatrix.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nuponor_smatrix:\n  address: 0x110B\n  uart_id: my_uart\n  time_id: my_time\n```\n\n----------------------------------------\n\nTITLE: Configuring Teleinfo Hub in YAML\nDESCRIPTION: Basic configuration example for setting up the Teleinfo hub component with an optional ID.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/teleinfo.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nteleinfo:\n  id: myteleinfo\n```\n\n----------------------------------------\n\nTITLE: Configuring Tuya Alarm with Hidden Datapoints - YAML\nDESCRIPTION: This YAML configuration utilizes the Tuya number platform to set an alarm value with a hidden datapoint configuration. It includes details about the hidden datapoint type and the option to restore its value after initialization.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/number/tuya.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n    - platform: \"tuya\"\n      name: \"Alarm at maximum\"\n      number_datapoint: 116\n      min_value: 0\n      max_value: 100\n      datapoint_hidden:\n        datapoint_type: int\n        initial_value: 85\n        restore_value: yes\n```\n\n----------------------------------------\n\nTITLE: Transmitting Raw IR Codes with YAML\nDESCRIPTION: This example sends raw IR codes through the transmitter using a list of integers, where positive numbers represent high signals and negative numbers low signals. Configuration may optionally include a carrier frequency for modifying infrared signal characteristics.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/remote_transmitter.rst#2025-04-21_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - remote_transmitter.transmit_raw:\n      code: [4088, -1542, 1019, -510, 513, -1019, 510, -509, 511, -510, 1020,\n             -1020, 1022, -1019, 510, -509, 511, -510, 511, -509, 511, -510,\n             1020, -1019, 510, -511, 1020, -510, 512, -508, 510, -1020, 1022,\n             -1021, 1019, -1019, 511, -510, 510, -510, 1022, -1020, 1019,\n             -1020, 511, -511, 1018, -1022, 1020, -1019, 1021, -1019, 1020,\n             -511, 510, -1019, 1023, -1019, 1019, -510, 512, -508, 510, -511,\n             512, -1019, 510, -509]\n```\n\n----------------------------------------\n\nTITLE: LED Configuration\nDESCRIPTION: Example configuration for controlling TM1638 LED outputs using switch and output components\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/tm1638.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nswitch:\n  - platform: tm1638\n    id: TM1638Led1\n    led: 0\n\noutput:\n  - platform: tm1638\n    id: TM1638Led2\n    led: 1\n```\n\n----------------------------------------\n\nTITLE: Configuring GPIO Buttons for T-Display ESP32 in ESPHome\nDESCRIPTION: Configuration for two GPIO buttons on a T-Display ESP32 board. Button 0 uses GPIO0 with input mode, pullup and inverted logic, while Button 1 uses GPIO35 with inverted logic.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/st7789v.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n          number: GPIO0\n          inverted: true\n          mode:\n            input: true\n            pullup: true\n        name: \"T-Display Button Input 0\"\n        id: tdisplay_button_input_0\n      - platform: gpio\n        pin:\n          number: GPIO35\n          inverted: true\n        name: \"T-Display Button Input 1\"\n        id: tdisplay_button_input_1\n```\n\n----------------------------------------\n\nTITLE: Reading NDEF Data from PN532 NFC Tags in ESPHome\nDESCRIPTION: This snippet demonstrates how to read NDEF formatted data from an NFC tag using a PN532 controller in ESPHome. It extracts a Home Assistant tag ID from the NDEF message and sends it to Home Assistant.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/pn532.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\npn532_...:\n  # ...\n  on_tag:\n    then:\n      - homeassistant.tag_scanned: !lambda |\n          if (!tag.has_ndef_message()) {\n            return x;\n          }\n          auto message = tag.get_ndef_message();\n          auto records = message->get_records();\n          for (auto &record : records) {\n            std::string payload = record->get_payload();\n            size_t pos = payload.find(\"https://www.home-assistant.io/tag/\");\n            if (pos != std::string::npos) {\n              return payload.substr(pos + 34);\n            }\n          }\n          return x;\n```\n\n----------------------------------------\n\nTITLE: Maximum Flow Rate Sensor Configuration in YAML\nDESCRIPTION: Configuration for a sensor that reports the maximum flow rate the pump can provide in ml/minute. Dosing requests that exceed this rate will fail.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/ezo_pmp.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: ezo_pmp\n    max_flow_rate:\n      id: max_flow_rate\n      name: Max Flow Rate\n```\n\n----------------------------------------\n\nTITLE: Configuring Safe Mode Button in ESPHome\nDESCRIPTION: YAML configuration for creating a safe mode button that can remotely reboot an ESP device into safe mode. Requires the safe_mode component to be configured in the system. The button will appear in the UI with a customizable name.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/button/safe_mode.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbutton:\n  - platform: safe_mode\n    name: \"Living Room Restart (Safe Mode)\"\n```\n\n----------------------------------------\n\nTITLE: Homeassistant Event Action Configuration in ESPHome\nDESCRIPTION: Configuration for creating events in the Home Assistant event bus from ESPHome automations. This allows sending data from ESPHome devices to Home Assistant as custom events.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/api.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# In some trigger\non_...:\n  # Simple\n  - homeassistant.event:\n      event: esphome.button_pressed\n      data:\n        message: Button was pressed\n```\n\n----------------------------------------\n\nTITLE: Configuring RF Receiver in YAML\nDESCRIPTION: YAML configuration for setting up a 433MHz RF receiver with optimized recognition settings.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/setting_up_rmt_devices.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nremote_receiver:\\n  pin: GPIOXX\\n  dump: all\\n  tolerance: 50%\\n  filter: 250us\\n  idle: 4ms\\n  buffer_size: 2kb\n```\n\n----------------------------------------\n\nTITLE: Configuring Sensors for PipSolar Inverter\nDESCRIPTION: Example configuration for adding multiple sensor types to monitor grid voltage, current, and power output from a PipSolar inverter\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/pipsolar.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: pipsolar\n    pipsolar_id: inverter0\n    grid_rating_voltage:\n      id: inverter0_grid_rating_voltage\n      name: inverter0_grid_rating_voltage\n    grid_rating_current:\n      id: inverter0_grid_rating_current\n      name: inverter0_grid_rating_current\n    ac_output_apparent_power:\n      id: inverter0_ac_output_apparent_power\n      name: inverter0_ac_output_apparent_power\n```\n\n----------------------------------------\n\nTITLE: Configuring INA226 Sensor with Separate ADC Times in ESPHome\nDESCRIPTION: This snippet shows how to configure an INA226 sensor in ESPHome with separate ADC times for voltage and current measurements. It demonstrates the use of nested configuration options for ADC time.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ina226.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: ina226\n    address: 0x40\n    adc_time:\n      voltage: 140us\n      current: 332us\n```\n\n----------------------------------------\n\nTITLE: Daikin BRC Climate Configuration\nDESCRIPTION: Configuration for Daikin BRC ceiling cassette heat pumps with Fahrenheit temperature option.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/climate/climate_ir.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nclimate:\n  - platform: daikin_brc\n    name: \"AC\"\n    sensor: room_temperature\n    use_fahrenheit: true\n```\n\n----------------------------------------\n\nTITLE: Opening a Valve Using C++ Lambda\nDESCRIPTION: C++ lambda expression to open a valve programmatically in ESPHome.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/valve/index.rst#2025-04-21_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nauto call = id(valve_1).make_call();\ncall.set_command_open();\ncall.perform();\n```\n\n----------------------------------------\n\nTITLE: Configuring Inkplate 5 with PCA6416A\nDESCRIPTION: This YAML configuration is similar to the Inkplate 6 v2, setting up the PCA6416A expander and display parameters for the Inkplate 5 model. It includes key settings for greyscale display and pin configurations.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/inkplate6.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n    # Example minimal configuration entry\n    pca6416a:\n      - id: pca6416a_hub\n        address: 0x20\n\n    display:\n    - platform: inkplate5\n      id: inkplate_display\n      greyscale: true\n      partial_updating: false\n      update_interval: never\n      model: inkplate_5_v2\n\n      ckv_pin: 32\n      sph_pin: 33\n      gmod_pin:\n        pca6416a: pca6416a_hub\n        number: 1\n      gpio0_enable_pin:\n        pca6416a: pca6416a_hub\n        number: 8\n      oe_pin:\n        pca6416a: pca6416a_hub\n        number: 0\n      spv_pin:\n        pca6416a: pca6416a_hub\n        number: 2\n      powerup_pin:\n        pca6416a: pca6416a_hub\n        number: 4\n      wakeup_pin:\n        pca6416a: pca6416a_hub\n        number: 3\n      vcom_pin:\n        pca6416a: pca6416a_hub\n        number: 5\n```\n\n----------------------------------------\n\nTITLE: Configuring Internal Temperature Sensor in ESPHome YAML\nDESCRIPTION: This code snippet shows a basic example of how to configure the internal temperature sensor in your ESPHome YAML configuration file. It sets the platform to `internal_temperature` and provides a name for the sensor, which will be displayed in the ESPHome dashboard or Home Assistant.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/internal_temperature.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n    # Example configuration entry\n    sensor:\n      - platform: internal_temperature\n        name: \"Internal Temperature\"\n```\n\n----------------------------------------\n\nTITLE: Home Assistant Automation for Sending RF Codes\nDESCRIPTION: Home Assistant automation YAML configuration that demonstrates how to send RF codes using the ESPHome service. The example shows how to format the data with specific sync, low, high, and code values in hexadecimal format.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/rf_bridge.rst#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nautomation:\n  # ...\n  action:\n  - action: esphome.rf_bridge_send_rf_code\n    data:\n      sync: 0x700\n      low: 0x800\n      high: 0x1000\n      code: 0xABC123\n```\n\n----------------------------------------\n\nTITLE: Select Automation on Value Change\nDESCRIPTION: This YAML snippet configures an automation that triggers actions when the select entity value changes. It demonstrates how to log the current selection and the index of the option chosen.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/select/index.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n\"    select:\\n      - platform: template\\n        # ...\\n        on_value:\\n          then:\\n            - logger.log:\\n                format: \\\"Chosen option: %s (index %d)\\\"\\n                args: [\\\"x.c_str()\\\", \\\"i\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Setting Number to Maximum Value\nDESCRIPTION: An action to set a number's value to its defined maximum, with an id needed for the number component to update.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/number/index.rst#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- number.to_max:\n    id: my_number\n\n# Shorthand\n- number.to_max: my_number\n```\n\n----------------------------------------\n\nTITLE: Configuring Ethernet Info Text Sensors in ESPHome YAML\nDESCRIPTION: Example configuration for setting up Ethernet information text sensors in ESPHome. Demonstrates how to expose IP addresses (including multiple addresses for dual stack IPv4/IPv6), DNS address, and MAC address as text sensors.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/text_sensor/ethernet_info.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntext_sensor:\n  - platform: ethernet_info\n    ip_address:\n      name: ESP IP Address\n      address_0:\n        name: ESP IP Address 0\n      address_1:\n        name: ESP IP Address 1\n      address_2:\n        name: ESP IP Address 2\n      address_3:\n        name: ESP IP Address 3\n      address_4:\n        name: ESP IP Address 4\n    dns_address:\n      name: ESP DNS Address\n    mac_address:\n      name: ESP MAC Address\n```\n\n----------------------------------------\n\nTITLE: Sending Custom Command to EZO Sensor\nDESCRIPTION: Lambda function to send a custom command to an EZO sensor for operations not covered by the standard API.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ezo.rst#2025-04-21_snippet_17\n\nLANGUAGE: cpp\nCODE:\n```\n// Run a custom command to turn on the LED\nid(ph_ezo).send_custom(\"L,1\");\n```\n\n----------------------------------------\n\nTITLE: IR Button Implementation in YAML\nDESCRIPTION: YAML configuration for template buttons that transmit both Panasonic protocol and raw IR codes.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/setting_up_rmt_devices.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nbutton:\\n  - platform: template\\n    name: Panasonic Power Button\\n    on_press:\\n      - remote_transmitter.transmit_panasonic:\\n          address: 0x4004\\n          command: 0x8140DFA2\\n\\nbutton:\\n  - platform: template\\n    name: Raw Code Power Button\\n    on_press:\\n      - remote_transmitter.transmit_raw:\\n          carrier_frequency: 38kHz\\n          code: [4088, -1542, 1019, -510, 513, -1019, 510, -509, 511, -510, 1020,\\n                 -1020, 1022, -1019, 510, -509, 511, -510, 511, -509, 511, -510,\\n                 1020, -1019, 510, -511, 1020, -510, 512, -508, 510, -1020, 1022]\n```\n\n----------------------------------------\n\nTITLE: Grayscale Configuration for SSD1325 Display\nDESCRIPTION: Configuration example showing how to implement grayscale capabilities using color definitions and rectangle drawing on the SSD1325 display.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/ssd1325.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncolor:\n  - id: medium_gray\n    white: 50%\n\n...\n\ndisplay:\n    ...\n    lambda: |-\n      it.rectangle(0,  0, it.get_width(), it.get_height(), id(medium_gray));\n```\n\n----------------------------------------\n\nTITLE: Custom VBus Sensor Configuration\nDESCRIPTION: Example of custom VBus sensor configuration for unsupported devices with custom lambda functions\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/vbus.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: vbus\n    model: custom\n    dest: 0x10\n    source: 0x1234\n    command: 0x100\n    sensors:\n      - id: temp1\n        name: Temp 1\n        lambda: return ((x[1] << 8) + x[0]) / 10.0;\n```\n\n----------------------------------------\n\nTITLE: Configuring ESP32 CAN Bus in ESPHome\nDESCRIPTION: Basic configuration example for setting up the ESP32 CAN bus. Includes essential parameters like TX/RX pins, CAN ID, bit rate, and frame handling. This configuration enables the integrated CAN controller on ESP32 devices.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/canbus/esp32_can.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\ncanbus:\n  - platform: esp32_can\n    tx_pin: GPIOXX\n    rx_pin: GPIOXX\n    can_id: 4\n    bit_rate: 50kbps\n    on_frame:\n      ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Phase Angle Measurement with ATM90E32\nDESCRIPTION: YAML configuration for measuring phase angle on Line 1 using the ATM90E32 sensor platform.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/atm90e32.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: atm90e32\n    phase_a:\n      phase_angle:\n        name: ${disp_name} L1 Phase Angle\n```\n\n----------------------------------------\n\nTITLE: ESPHome Directory Structure\nDESCRIPTION: Example of the basic ESPHome project directory structure showing main Python files.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/contributing.rst#2025-04-21_snippet_17\n\nLANGUAGE: text\nCODE:\n```\nesphome\nâââ __main__.py\nâââ automation.py\nâââ codegen.py\nâââ config_validation.py\n```\n\n----------------------------------------\n\nTITLE: MQTT JSON Message Handler in YAML\nDESCRIPTION: Configuration for processing JSON-formatted MQTT messages with automated light control based on message content.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/mqtt.rst#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nmqtt:\n  # ...\n  on_json_message:\n    topic: the/topic\n    then:\n      - light.turn_on:\n          id: living_room_lights\n          transition_length: !lambda |-\n            int length = 1000;\n            if (x.containsKey(\"length\"))\n              length = x[\"length\"];\n            return length;\n          brightness: !lambda \"return x[\\\"bright\\\"]; \"\n          effect: !lambda |-\n            const char *effect = \"None\";\n            if (x.containsKey(\"effect\"))\n              effect = x[\"effect\"];\n            return effect;\n```\n\n----------------------------------------\n\nTITLE: Remote Transmitter Automation Example in YAML\nDESCRIPTION: Demonstrates configuring automation actions for remote transmitter events, such as enabling a switch before transmission and disabling it after transmission completes.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/remote_transmitter.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nremote_transmitter:\n  ...\n  on_transmit:\n    then:\n      - switch.turn_on: tx_enable\n  on_complete:\n    then:\n      - switch.turn_off: tx_enable\n```\n\n----------------------------------------\n\nTITLE: Wave Plus Battery Level Configuration\nDESCRIPTION: Configuration for adding battery level percentage reporting to Wave Plus using the copy sensor component.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/airthings_ble.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: airthings_wave_plus\n    ble_client_id: airthings01\n    battery_voltage:\n      id: bv\n      name: \"WavePlus Battery Voltage\"\n  - platform: copy\n    source_id: bv\n    name: \"WavePlus Battery Level\"\n    unit_of_measurement: \"%\"\n    device_class: battery\n    accuracy_decimals: 0\n    filters:\n      - calibrate_linear:\n        - 2.2 -> 0\n        - 3.1 -> 100\n```\n\n----------------------------------------\n\nTITLE: Median Filtering in ESPHome YAML\nDESCRIPTION: This code shows how to use the `median` filter in ESPHome for smoothing sensor data by applying a moving median filter.  This filter is used to filter outliers by calculating the median of recent values.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/index.rst#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n\n    # Example configuration entry\n    - platform: wifi_signal\n      # ...\n      filters:\n        - median:\n            window_size: 7\n            send_every: 4\n            send_first_at: 3\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Shutdown Switch in ESP Home\nDESCRIPTION: This YAML configuration demonstrates how to set up a shutdown switch in ESP Home that allows remote shutdown of the ESP device. When triggered, it puts the device into deep sleep mode with no wakeup source.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/switch/shutdown.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nswitch:\n  - platform: shutdown\n    name: \"Living Room Shutdown\"\n```\n\n----------------------------------------\n\nTITLE: Setting Fan Preset Mode Trigger in ESPHome YAML\nDESCRIPTION: This YAML snippet sets up a trigger that activates each time the fan preset mode is changed. It logs the new mode using the logger component, displaying it in a formatted string. The new mode is accessed via the variable 'x'.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/fan/index.rst#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nfan:\n  - platform: speed # or any other platform\n    # ...\n    on_preset_set:\n      - logger.log:\n          format: \"Fan preset mode was changed to %s!\"\n          args: [ x.c_str() ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Base Number\nDESCRIPTION: This snippet demonstrates the base configuration for a number entity in ESPHome, including optional parameters like icon and internal status. At least one of 'id' or 'name' must be specified.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/number/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example number configuration\nname: Livingroom Volume\n\n# Optional variables:\nicon: \"mdi:volume-high\"\n```\n\n----------------------------------------\n\nTITLE: LVGL Widget Focus Control\nDESCRIPTION: Action configuration for controlling input focus within LVGL. Examples show focusing specific widgets, freezing focus, and navigating focus within a group.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/index.rst#2025-04-21_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - lvgl.widget.focus:\n        id: my_button\n        freeze: true\n\non_...:\n  then:\n    - lvgl.widget.focus: my_button\n\non_...:\n  then:\n    - lvgl.widget.focus:\n        group: encoder_group\n        direction: next\n        freeze: true\n\non_...:\n  then:\n    - lvgl.widget.focus: previous\n```\n\n----------------------------------------\n\nTITLE: Parsing Complex JSON Structure in JSON\nDESCRIPTION: An example of a relatively complex JSON structure containing nested objects and arrays. It demonstrates various data types and structures that can be represented in JSON.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/json.rst#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n \"first_name\": \"John\",\n \"last_name\": \"Smith\",\n \"is_alive\": true,\n \"age\": 27,\n \"address\": {\n   \"street_address\": \"21 2nd Street\",\n   \"city\": \"New York\",\n   \"state\": \"NY\",\n   \"postal_code\": \"10021-3100\"\n },\n \"phone_numbers\": [\n   {\n     \"type\": \"home\",\n     \"number\": \"212 555-1234\"\n   },\n   {\n     \"type\": \"office\",\n     \"number\": \"646 555-4567\"\n   }\n ],\n \"children\": [\n   \"Catherine\",\n   \"Thomas\",\n   \"Trevor\"\n ],\n \"spouse\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Write Action Trigger in ESPHome\nDESCRIPTION: This snippet illustrates how to set up a write action trigger in ESPHome, which activates when the output state is updated. The configuration includes conditional logic using lambdas to control output actions, such as turning outputs on or off after a delay. Key dependencies are ESPHome and proper configuration of the template platform in the YAML file.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/output/template.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- platform: template\\n    id: my_output\\n    type: float\\n    write_action:\\n      - if:\\n          condition:\\n            lambda: return ((state > 0) \\\\&\\\\& (state < .4));\\n          then:\\n            - output.turn_on: button_off\\n            - delay: 500ms\\n            - output.turn_off: button_off\n```\n\n----------------------------------------\n\nTITLE: Basic Version Text Sensor Configuration in ESPHome\nDESCRIPTION: Basic configuration example for setting up a version text sensor that displays the ESPHome firmware version. This will show both the version number and compilation timestamp.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/text_sensor/version.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\ntext_sensor:\n  - platform: version\n    name: \"ESPHome Version\"\n```\n\n----------------------------------------\n\nTITLE: Tuya Logging Output - Text\nDESCRIPTION: This text output log is generated by the Tuya platform upon startup, showing the configured datapoints and their types. It provides a reference for users to understand the available datapoints and their values.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/number/tuya.rst#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n    [21:37:14][C][tuya:028]: Tuya:\n    [21:37:14][C][tuya:045]:   Datapoint 101: enum (value: 4)\n    [21:37:14][C][tuya:045]:   Datapoint 102: enum (value: 1)\n    [21:37:14][C][tuya:041]:   Datapoint 103: int value (value: 5)\n    [21:37:14][C][tuya:039]:   Datapoint 104: switch (value: OFF)\n    [21:37:14][C][tuya:041]:   Datapoint 105: int value (value: 229)\n    [21:37:14][C][tuya:041]:   Datapoint 106: int value (value: 37)\n    [21:37:14][C][tuya:041]:   Datapoint 107: int value (value: 10)\n    [21:37:14][C][tuya:041]:   Datapoint 108: int value (value: 35)\n    [21:37:14][C][tuya:041]:   Datapoint 109: int value (value: 30)\n    [21:37:14][C][tuya:041]:   Datapoint 110: int value (value: 80)\n    [21:37:14][C][tuya:039]:   Datapoint 112: switch (value: OFF)\n    [21:37:14][C][tuya:039]:   Datapoint 113: switch (value: OFF)\n    [21:37:14][C][tuya:039]:   Datapoint 114: switch (value: OFF)\n    [21:37:14][C][tuya:045]:   Datapoint 115: enum (value: 4)\n    [21:37:14][C][tuya:045]:   Datapoint 116: enum (value: 2)\n    [21:37:14][C][tuya:055]:   Product: '{\"p\":\"ymf4oruxqx0xlogp\",\"v\":\"1.0.3\",\"m\":0}'\n```\n\n----------------------------------------\n\nTITLE: Automation Trigger for Single Tap Detection\nDESCRIPTION: This snippet shows the automation action that is triggered when a single tap is detected on the MSA301 or MSA311 sensor. It logs the tap event action to the logger.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/msa3xx.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n\"msa3xx:\\n  type: msa301\\n  # ...\\n  on_tap:\\n    - then: \\n        - logger.log: \\\"Tapped\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Seeed MR24HPC1 Text Sensors in YAML\nDESCRIPTION: YAML configuration for various text sensors including heartbeat, product info, and motion status sensors.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/seeed_mr24hpc1.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ntext_sensor:\n  - platform: seeed_mr24hpc1\n    heart_beat:\n      name: \"Heartbeat\"\n    product_model:\n      name: \"Product Model\"\n    product_id:\n      name: \"Product ID\"\n    hardware_model:\n      name: \"Hardware Model\"\n    hardware_version:\n      name: \"Hardware Version\"\n    keep_away:\n      name: \"Active Reporting Of Proximity\"\n    motion_status:\n      name: \"Motion Information\"\n    custom_mode_end:\n      name: \"Custom Mode Status\"\n```\n\n----------------------------------------\n\nTITLE: Client Connected Trigger Configuration in ESPHome\nDESCRIPTION: Configuration for the on_client_connected trigger in the API component. This example logs the client information when a client connects to the API.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/api.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napi:\n  # ...\n  on_client_connected:\n    - logger.log:\n        format: \"Client %s connected to API with IP %s\"\n        args: [\"client_info.c_str()\", \"client_address.c_str()\"]\n```\n\n----------------------------------------\n\nTITLE: ABC Get Period Action\nDESCRIPTION: Action configuration to retrieve the currently configured Automatic Baseline Calibration (ABC) interval from the sensor.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/senseair.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - senseair.abc_get_period: my_senseair_id\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON Response in YAML Configuration\nDESCRIPTION: This YAML configuration demonstrates how to parse a JSON response from an HTTP request in ESPHome. It extracts the 'vol' value from the JSON and publishes it to a sensor or number component.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/json.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n- http_request.get:\n    url: https://esphome.io\n    capture_response: true\n    on_response:\n      then:\n        - lambda: |-\n            json::parse_json(body, [](JsonObject root) -> bool {\n                if (root[\"vol\"]) {\n                    id(player_volume).publish_state(root[\"vol\"]);\n                    return true;\n                }\n                else {\n                  ESP_LOGD(TAG,\"No 'vol' key in this json!\");\n                  return false;\n                }\n            });\n```\n\n----------------------------------------\n\nTITLE: Setting Up ESPHome Development Environment\nDESCRIPTION: Provides bash commands for cloning ESPHome repositories, installing dependencies, and setting up a development environment.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/contributing.rst#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n# Clone repos\ngit clone https://github.com/esphome/esphome.git\ngit clone https://github.com/esphome/esphome-docs.git\n\n# Install ESPHome\ncd esphome/\nscript/setup\n# Start a new feature branch\ngit checkout -b my-new-feature\ncd ..\n```\n\n----------------------------------------\n\nTITLE: Component Configuration Schema Definition in Python\nDESCRIPTION: Defines the configuration validation schema for an ESPHome component using voluptuous. Demonstrates required and optional configuration keys with type validation.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/contributing.rst#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nimport esphome.config_validation as cv\n\nCONF_MY_REQUIRED_KEY = 'my_required_key'\nCONF_MY_OPTIONAL_KEY = 'my_optional_key'\n\nCONFIG_SCHEMA = cv.Schema({\n  cv.Required(CONF_MY_REQUIRED_KEY): cv.string,\n  cv.Optional(CONF_MY_OPTIONAL_KEY, default=10): cv.int_,\n}).extend(cv.COMPONENT_SCHEMA)\n```\n\n----------------------------------------\n\nTITLE: Configuring ESP32 Camera for ESP-EYE\nDESCRIPTION: This YAML configuration is for the ESP-EYE development board with an integrated ESP32 camera. It defines the external clock, I2C pins, data pins, and control pins for the camera interface.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/esp32_camera.rst#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nesp32_camera:\n  external_clock:\n    pin: GPIO4\n    frequency: 20MHz\n  i2c_pins:\n    sda: GPIO18\n    scl: GPIO23\n  data_pins: [GPIO34, GPIO13, GPIO14, GPIO35, GPIO39, GPIO38, GPIO37, GPIO36]\n  vsync_pin: GPIO5\n  href_pin: GPIO27\n  pixel_clock_pin: GPIO25\n\n  # Image settings\n  name: My Camera\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Media Player Announcement Trigger in ESPHome\nDESCRIPTION: This code configures the `on_announcement` trigger, which activates when the media player plays an announcement. It includes an example of logging a message when an announcement is played.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/media_player/index.rst#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nmedia_player:\n  - platform: i2s_audio  # or any other platform\n    # ...\n    on_announcement:\n      - logger.log: \"Announcing!\"\n```\n\n----------------------------------------\n\nTITLE: Basic AT581x Component Configuration in YAML\nDESCRIPTION: Basic configuration entry for the AT581x radar component with I2C bus configuration.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/at581x.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nat581x:\n  id: \"Radar\"\n  i2c_id: bus_a\n```\n\n----------------------------------------\n\nTITLE: Setting up EMC2101 Fan Output Control\nDESCRIPTION: Configuration for EMC2101 fan output control. Creates a controllable output that can be referenced by other components using the specified ID.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/emc2101.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\noutput:\n  - platform: emc2101\n    id: fan_duty_cycle\n```\n\n----------------------------------------\n\nTITLE: Setting Up UART Communication for Selec Energy Monitor in YAML\nDESCRIPTION: This YAML snippet configures the UART communication parameters for the Selec energy monitor, including RX and TX pin assignments and the baud rate. Ensure that these parameters match the hardware setup for successful communication.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/selec_meter.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nuart:\n  rx_pin: D1\n  tx_pin: D2\n  baud_rate: 9600\n  stop_bits: 1\n```\n\n----------------------------------------\n\nTITLE: Advanced Calibration for NPI-19 Sensor in ESPHome YAML\nDESCRIPTION: This snippet shows another example of using `calibrate_linear` filters to establish a custom mapping of raw sensor values to calibrated pressures. It is intended for scenarios where specific calibration data based on known pressure points is applied for higher accuracy.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/npi19.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nfilters:\n  - calibrate_linear:\n    - 1500 -> 5.0\n    - 14500 -> 90.0\n```\n\n----------------------------------------\n\nTITLE: Complete PCF85063 Integration Example\nDESCRIPTION: Full configuration example showing RTC integration with external time source and automatic synchronization setup.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/time/pcf85063.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nesphome:\n  on_boot:\n    then:\n      # read the RTC time once when the system boots\n      pcf85063.read_time:\n\ntime:\n  - platform: pcf85063\n    # repeated synchronization is not necessary unless the external RTC\n    # is much more accurate than the internal clock\n    update_interval: never\n  - platform: homeassistant\n    # instead try to synchronize via network repeatedly ...\n    on_time_sync:\n      then:\n        # ... and update the RTC when the synchronization was successful\n        pcf85063.write_time:\n```\n\n----------------------------------------\n\nTITLE: Configuring an LVGL Label Widget with Recoloring\nDESCRIPTION: This YAML snippet configures an LVGL label widget with recoloring enabled. It demonstrates how to use hexadecimal color codes within the text to color individual words.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/widgets.rst#2025-04-21_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\n    # Example widget:\n    - label:\n        align: CENTER\n        id: lbl_id\n        recolor: true\n        text: \"#FF0000 write# #00FF00 colored# #0000FF text#\"\n```\n\n----------------------------------------\n\nTITLE: Improv on_provisioning Automation Example\nDESCRIPTION: Example of the on_provisioning automation trigger that executes when the provisioning process begins.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/esp32_improv.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nesp32_improv:\n  on_provisioning:\n    then:\n      - logger.log: \"Improv provisioning\"\n```\n\n----------------------------------------\n\nTITLE: Lock Trigger on Lock/Unlock - YAML\nDESCRIPTION: Sets up a trigger that activates when the specified lock is locked or unlocked, allowing for custom actions like logging.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lock/index.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nlock:\n  - platform: template  # or any other platform\n    # ...\n    on_lock:\n    - logger.log: \"Door Locked!\"\n    on_unlock:\n    - logger.log: \"Door Unlocked!\"\n```\n\n----------------------------------------\n\nTITLE: Parameterized Script Execution in ESPHome\nDESCRIPTION: This example illustrates defining a script with parameters, which are required when executing the script. The delay_ms parameter is defined with an integer type and is accessible within the script, demonstrating the flexibility in scripting timing actions.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/script.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nscript:\n  - id: blink_light\n    parameters:\n      delay_ms: int\n    then:\n      - light.turn_on: status_light\n      # The param delay_ms is accessible using a lambda\n      - delay: !lambda return delay_ms;\n      - light.turn_off: status_light\n```\n\n----------------------------------------\n\nTITLE: Configuring Sensor with Custom Update Interval and Moving Average Filter\nDESCRIPTION: YAML configuration for a sensor with a custom update interval of 15 seconds and a sliding window moving average filter, to replicate previous default behavior.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/changelog/v1.10.0.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: ...  # enter platform here\n    # other settings\n    update_interval: 15s\n    filters:\n      - sliding_window_moving_average: {}\n```\n\n----------------------------------------\n\nTITLE: Playing Specific Tracks with DF-Player in ESPHome\nDESCRIPTION: Action to play a specific track by its global number with optional looping functionality.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/dfplayer.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - dfplayer.play:\n        file: 23\n        loop: false\n    # Shorthand\n    - dfplayer.play: 23\n```\n\n----------------------------------------\n\nTITLE: Finding Action in YAML\nDESCRIPTION: This example YAML code demonstrates how to use the `ezo_pmp.find` action. It makes the pump's LED blink for a minute for easy identification, requiring only the pump's `id`.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/ezo_pmp.rst#2025-04-21_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n  - ezo_pmp.find:\n      id: ezo_pmp\n```\n\n----------------------------------------\n\nTITLE: Updating LVGL Image Widget\nDESCRIPTION: This YAML snippet demonstrates how to update an LVGL image widget using the `lvgl.image.update` action. It changes the image displayed at runtime, referencing an existing image widget by its ID.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/widgets.rst#2025-04-21_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\n    on_...:\n      then:\n        - lvgl.image.update:\n            id: img_id\n            src: cat_image_bowtie\n```\n\n----------------------------------------\n\nTITLE: Multi Click Pattern Detection Configuration in YAML\nDESCRIPTION: Configuration example showing how to detect complex click patterns using timing sequences.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/index.rst#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nbinary_sensor:\n  - platform: gpio\n    # ...\n    on_multi_click:\n    - timing:\n        - ON for at most 1s\n        - OFF for at most 1s\n        - ON for 0.5s to 1s\n        - OFF for at least 0.2s\n      then:\n        - logger.log: \"Double-Clicked\"\n```\n\n----------------------------------------\n\nTITLE: TM1637 Binary Sensor Key Configuration\nDESCRIPTION: Configuration for setting up binary sensors using the TM1637's keyboard scan interface.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/tm1637.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nbinary_sensor:\n  - platform: tm1637\n    id: key0\n    name: key1-00\n    tm1637_id: tm1637_display\n    key: 0\n```\n\n----------------------------------------\n\nTITLE: Configuring Sprinkler Divider Action in ESPHome\nDESCRIPTION: YAML configuration for the sprinkler.set_divider action that controls cycle splitting by setting multiplier and repeat values.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sprinkler.rst#2025-04-21_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - sprinkler.set_divider:\n        id: sprinkler_ctrlr\n        divider: 2\n```\n\n----------------------------------------\n\nTITLE: LVGL Page Navigation Implementation in ESPHome\nDESCRIPTION: Configuration for creating a navigation bar using buttonmatrix widget in the top layer. Includes previous/home/next navigation buttons with custom styling and icon support.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/cookbook/lvgl.rst#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nlvgl:\n  top_layer:\n    widgets:\n      - buttonmatrix:\n          align: bottom_mid\n          styles: header_footer\n          pad_all: 0\n          outline_width: 0\n          id: top_layer\n          items:\n            styles: header_footer\n          rows:\n            - buttons:\n              - id: page_prev\n                text: \"\\uF053\"\n                on_press:\n                  then:\n                    lvgl.page.previous:\n              - id: page_home\n                text: \"\\uF015\"\n                on_press:\n                  then:\n                    lvgl.page.show: main_page\n              - id: page_next\n                text: \"\\uF054\"\n                on_press:\n                  then:\n                    lvgl.page.next:\n```\n\n----------------------------------------\n\nTITLE: Running ESPHome Lint Tests on Windows\nDESCRIPTION: PowerShell commands for running ESPHome lint checks on Windows systems, including path conversion for proper Docker volume mounting.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/contributing.rst#2025-04-21_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\n# convert the volume format\n$current_dir=(Get-Location).Path.ToLower().Replace(':','').Replace('\\','/')\n# Run lint only over changed files from powershell\ndocker run --rm -v \"$($current_dir):/esphome\" -it ghcr.io/esphome/esphome-lint script/quicklint\n```\n\n----------------------------------------\n\nTITLE: Configuring LVGL Button State and Style in YAML\nDESCRIPTION: This snippet demonstrates how to configure the state of an LVGL button and apply specific styles when the button is in that state. It sets the 'checked' state to 'true' at boot and defines a background color for the 'checked' state using YAML configuration.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/widgets.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\n    - button:\n        checkable: true\n        state:\n          checked: true # here you activate the state to be used at boot\n        checked:\n          bg_color: 0x00FF00 # here you apply styles to be used when in the respective state\n\n```\n\n----------------------------------------\n\nTITLE: Transmitting Panasonic IR Codes with YAML\nDESCRIPTION: This code sends Panasonic infrared remote codes using a remote transmitter. It requires an address and command to be defined. Knowledge of the Panasonic IR codes from device documentation is necessary for proper configuration.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/remote_transmitter.rst#2025-04-21_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - remote_transmitter.transmit_panasonic:\n      address: 0x1FEF\n      command: 0x1F3E065F\n```\n\n----------------------------------------\n\nTITLE: Delta Filter Percentage Configuration in ESPHome\nDESCRIPTION: This configures the delta filter to use a percentage difference. It filters incoming values based on a specified percentage difference from the previously passed value. In this case, only values that are different by 20% from the last value are passed through.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/index.rst#2025-04-21_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n    filters:\n      - delta: 20%\n\n```\n\n----------------------------------------\n\nTITLE: Configuring WireGuard Address Text Sensor in ESPHome\nDESCRIPTION: This snippet shows how to configure a text sensor that exposes the configured WireGuard address to the frontend. It can be further customized with additional Text Sensor options.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/wireguard.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\ntext_sensor:\n  - platform: wireguard\n    address:\n      name: 'WireGuard Address'\n```\n\n----------------------------------------\n\nTITLE: Cover Stop Action in C++\nDESCRIPTION: Lambda implementation for stopping a cover programmatically in C++.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/cover/index.rst#2025-04-21_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\nauto call = id(cover_1).make_call();\ncall.set_command_stop();\ncall.perform();\n```\n\n----------------------------------------\n\nTITLE: Resetting PID Integral Term in YAML\nDESCRIPTION: Implementation of the climate.pid.reset_integral_term action to reset the integral term of the PID controller to zero, useful for preventing overshoot or undershoot.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/climate/pid.rst#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  # Basic\n  - climate.pid.reset_integral_term: pid_climate\n```\n\n----------------------------------------\n\nTITLE: Triggering Action based on Value Range\nDESCRIPTION: This snippet defines an automation that triggers an action when the number value moves from outside to inside a specified range.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/number/index.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nnumber:\n  - platform: template\n    # ...\n    on_value_range:\n      above: 5\n      below: 10\n      then:\n        - switch.turn_on: relay_1\n```\n\n----------------------------------------\n\nTITLE: Setting Up Fan Direction Change Trigger in YAML\nDESCRIPTION: YAML configuration for creating a trigger that activates when a fan's direction is changed in ESPHome.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/fan/index.rst#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nfan:\n  - platform: speed # or any other platform\n    # ...\n    on_direction_set:\n    - logger.log:\n        format: \"Fan Direction was changed to %s!\"\n        args: [ x == 0 ? \"FORWARD\" : \"REVERSE\" ]\n\n```\n\n----------------------------------------\n\nTITLE: LVGL Widget Show/Hide Actions\nDESCRIPTION: Examples demonstrating how to show and hide LVGL widgets using automation actions with single or multiple widget IDs.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/widgets.rst#2025-04-21_snippet_44\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - lvgl.widget.hide: my_label_id                # a single widget\n    - lvgl.widget.show: [my_button_1, my_button_2] # a list of widgets\n    - delay: 0.5s\n    - lvgl.widget.show:\n        -id: my_label_id\n    - lvgl.widget.hide:\n        - id: [my_button_1, my_button_2]\n```\n\n----------------------------------------\n\nTITLE: Enabling BLE Interface with ble.enable Action\nDESCRIPTION: Example showing how to enable the BLE interface using the ble.enable action within an automation trigger.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/esp32_ble.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - ble.enable:\n```\n\n----------------------------------------\n\nTITLE: Configuring Tuya Text Sensor in YAML for ESPHome\nDESCRIPTION: This YAML snippet demonstrates how to create a Tuya text sensor in ESPHome. It requires the Tuya component to be configured and specifies the sensor's name and datapoint ID.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/text_sensor/tuya.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Create a sensor\ntext_sensor:\n  - platform: \"tuya\"\n    name: \"MyTextSensor\"\n    sensor_datapoint: 18\n```\n\n----------------------------------------\n\nTITLE: Configuring ST7567 Display with SPI Interface\nDESCRIPTION: Basic configuration for ST7567 display using SPI communication, including pin assignments and a simple Hello World example.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/st7567.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# Example minimal configuration entry\nspi:\n  clk_pin: D1\n  mosi_pin: D2\n\ndisplay:\n  - platform: st7567_spi\n    id: my_display\n    dc_pin: D3\n    lambda: |-\n      it.print(0, 0, id(my_font), \"Hello World!\");\n\ninterval:\n  - interval: 1h\n    then:\n      - lambda: id(my_display).request_refresh();\n```\n\n----------------------------------------\n\nTITLE: AT581x Reset Action Configuration\nDESCRIPTION: Configuration for restarting the AT581x sensor.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/at581x.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  at581x.reset:\n```\n\n----------------------------------------\n\nTITLE: SMS-based Relay Control Configuration\nDESCRIPTION: Configuration example for controlling a relay based on SMS commands from an authorized phone number.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sim800l.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nsim800l:\n  on_sms_received:\n    - lambda: |-\n        if ( (id(sms_sender).state == \"+79991234567\") && ( (id(sms_message).state == \"relay_1_on\") || (id(sms_message).state == \"Relay_1_on\") ) ) {\n          id(relay_1).turn_on();\n        }\nswitch:\n  - platform: gpio\n    id: relay_1\n    pin: GPIOXX\n```\n\n----------------------------------------\n\nTITLE: wESP32 Board Ethernet Configuration\nDESCRIPTION: Ethernet configurations for different revisions of the wESP32 board, showing both LAN8720 and RTL8201 options with appropriate register settings.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/ethernet.rst#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n# for board up to rev.5\nethernet:\n  type: LAN8720\n  mdc_pin: GPIO16\n  mdio_pin: GPIO17\n  clk_mode: GPIO0_IN\n  phy_addr: 0\n\n# for board rev.7 and up\nethernet:\n  type: RTL8201\n  mdc_pin: GPIO16\n  mdio_pin: GPIO17\n  clk_mode: GPIO0_IN\n  phy_addr: 0\n  phy_registers:\n    - address: 0x10\n      value: 0x1FFA\n      page_id: 0x07\n```\n\n----------------------------------------\n\nTITLE: Manipulating Time Components in Lambda Functions\nDESCRIPTION: Example of how to use the make_call method to update a time value in a lambda function. Also demonstrates how to access time properties and create custom log messages with time values.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/datetime/index.rst#2025-04-21_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\n// Within lambda, set the time to 12:34:56\nauto call = id(my_datetime_time).make_call();\ncall.set_time(\"12:34:56\");\ncall.perform();\n```\n\nLANGUAGE: cpp\nCODE:\n```\n// For example, create a custom log message when a value is received:\nESP_LOGI(\"main\", \"Value of my datetime: %0d:%02d:%02d\", id(my_datetime_time).hour, id(my_datetime_time).minute, id(my_datetime_time).second);\n```\n\n----------------------------------------\n\nTITLE: Implementing Click-to-Converse in YAML\nDESCRIPTION: YAML configuration for implementing a Click-to-Converse feature using a binary sensor. It toggles the voice assistant state on click.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/voice_assistant.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nvoice_assistant:\n  microphone: ...\n  speaker: ...\n\nbinary_sensor:\n  - platform: gpio\n    pin: ...\n    on_click:\n      - if:\n          condition: voice_assistant.is_running\n          then:\n            - voice_assistant.stop:\n          else:\n            - voice_assistant.start_continuous:\n```\n\n----------------------------------------\n\nTITLE: Compressing Images for ESPHome Documentation\nDESCRIPTION: Provides a command using ImageMagick to compress and resize images for use in ESPHome documentation.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/contributing.rst#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nconvert -sampling-factor 4:2:0 -strip -interlace Plane -quality 80% -resize 300x300 in.jpg out.jpg\n```\n\n----------------------------------------\n\nTITLE: Setting Up UART Communication for PZEM-00X Energy Monitors in YAML\nDESCRIPTION: This snippet configures the UART communication settings required for interfacing with the PZEM-00X energy monitors, including TX and RX pins as well as baud rate configuration.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/pzemdc.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nuart:\n  tx_pin: D1\n  rx_pin: D2\n  baud_rate: 9600\n  stop_bits: 2\n```\n\n----------------------------------------\n\nTITLE: Configuring DSMR for Older Meters (Version 2.2)\nDESCRIPTION: Custom UART settings and configuration for supporting older DSMR meters with specific serial communication parameters\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/dsmr.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nuart:\n  baud_rate: 9600\n  data_bits: 7\n  parity: NONE\n  stop_bits: 1\n\ndsmr:\n  crc_check: false\n\nsensor:\n  - platform: dsmr\n    energy_delivered_tariff1:\n      name: dsmr_energy_delivered_tariff1\n    energy_delivered_lux:\n      name: dsmr_energy_delivered_tarifflux\n\ntext_sensor:\n  - platform: dsmr\n    identification:\n      name: \"dsmr_identification\"\n    p1_version:\n      name: \"dsmr_p1_version\"\n    gas_delivered_text:\n```\n\n----------------------------------------\n\nTITLE: Setting Online Image URL Action\nDESCRIPTION: This YAML snippet demonstrates how to use the `online_image.set_url` action to change the URL of an online image component. It updates the image with the ID 'my_online_image' to a new URL and then triggers a component update.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/online_image.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - online_image.set_url:\n      id: my_online_image\n      url: \"https://www.example.com/new_image.png\"\n  - component.update: my_online_image\n```\n\n----------------------------------------\n\nTITLE: Detecting Active Valve in Sprinkler Controller with C++\nDESCRIPTION: C++ code snippet demonstrating how to determine if a sprinkler controller is running by checking for an active valve. The example uses a display component to show the active valve number or an idle status message.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sprinkler.rst#2025-04-21_snippet_28\n\nLANGUAGE: c++\nCODE:\n```\ndisplay:\n  - platform: ...\n    # ...display configuration...\n    lambda: |-\n      if (id(lawn_sprinkler_ctrlr).active_valve().has_value()) {\n        // the controller is running, get the active valve into running_valve and print it\n        auto running_valve = id(lawn_sprinkler_ctrlr).active_valve().value();\n        it.printf(0, 0, \"Valve %u active\", running_valve);\n      } else {\n        // the controller is NOT running\n        it.print(0, 0, \"Idle\");\n      }\n```\n\n----------------------------------------\n\nTITLE: Handling Enrollment Failures\nDESCRIPTION: Triggered when a fingerprint fails to enroll, attempts a retry after a delay, updating the status messages accordingly. It utilizes lambda to dynamically adjust the message with current enroll details.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/fingerprint_grow.rst#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\non_enrollment_failed:\n  - text_sensor.template.publish:\n      id: fingerprint_state\n      state: !lambda 'return \"Failed to enroll into slot \" + to_string(finger_id);'\n  - delay: 3s\n  - text_sensor.template.publish:\n      id: fingerprint_state\n      state: !lambda 'return \"Retrying enrollment into slot \" + to_string(finger_id) + \" in 3 seconds...\";'\n  - delay: 3s\n  - fingerprint_grow.enroll: !lambda 'return finger_id;'\n```\n\n----------------------------------------\n\nTITLE: Base Light Configuration in ESPHome\nDESCRIPTION: This configuration shows the base structure for defining a light in ESPHome using YAML.  It highlights the requirement for specifying a platform and demonstrates the general structure for configuring lights.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/light/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlight:\n  - platform: ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Template Events in ESPHome YAML\nDESCRIPTION: This snippet demonstrates how to set up a template event in the ESPHome configuration. It defines a template event named 'Template Event' with two custom event types that can be triggered.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/event/template.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nevent:\n  - platform: template\n    name: \"Template Event\"\n    event_types:\n      - \"custom_event_1\"\n      - \"custom_event_2\"\n```\n\n----------------------------------------\n\nTITLE: Conditionally Executing Code on Page Display in ESPHome\nDESCRIPTION: This snippet uses 'display.is_displaying_page' to execute code based on the current page being displayed. It's useful for conditionally triggering actions while a specific page is active.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/index.rst#2025-04-21_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - if:\n      condition:\n        display.is_displaying_page: page1\n      then:\n        ...\n  - if:\n      condition:\n        display.is_displaying_page:\n          id: my_display\n          page_id: page2\n      then:\n        ...\n```\n\n----------------------------------------\n\nTITLE: Setting up on_arming Trigger for Alarm Panel in YAML\nDESCRIPTION: YAML configuration for adding an on_arming trigger to an Alarm Control Panel, which activates when the alarm enters arming state.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/alarm_control_panel/index.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nalarm_control_panel:\n  # ...\n  on_arming:\n    then:\n      - logger.log: \"Alarm Arming!\"\n```\n\n----------------------------------------\n\nTITLE: LVGL Flex Layout Example\nDESCRIPTION: Shows configuration of a flex layout with alignment and padding options\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/index.rst#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n- obj:\n    layout:\n      type: flex\n      pad_row: 4\n      pad_column: 4px\n      flex_align_main: center\n      flex_align_cross: start\n      flex_align_track: end\n    widgets:\n      - animimg:\n          flex_grow: 1\n```\n\n----------------------------------------\n\nTITLE: Resetting DF-Player Module in ESPHome\nDESCRIPTION: Action to perform a module reset on the DF-Player device.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/dfplayer.rst#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - dfplayer.reset\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Modbus Commands in ESPHome YAML\nDESCRIPTION: This YAML snippet illustrates how to create custom Modbus commands for reading values from specific registers of a Modbus device. It includes the use of `custom_command` to read total active and reactive energy, while providing necessary configurations for the sensors.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/modbus_controller.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nuart:\n  id: mod_uart\n  ...\n\nmodbus:\n  send_wait_time: 200ms\n  uart_id: mod_uart\n  id: mod_bus\n\nmodbus_controller:\n- id: sdm\n  address: 2\n  modbus_id: mod_bus\n  command_throttle: 100ms\n  setup_priority: -10\n  update_interval: 30s\n\nsensors:\n- platform: modbus_controller\n  modbus_controller_id: sdm\n  name: \"Total active energy\"\n  id: total_energy\n  custom_command: [ 0x2, 0x4, 0x1, 0x56,0x00, 0x02]\n  value_type: FP32\n  unit_of_measurement: kWh\n  accuracy_decimals: 1\n\n- platform: modbus_controller\n  modbus_controller_id: sdm\n  name: \"Total reactive energy\"\n  custom_command: [0x2, 0x4, 0x1, 0x58, 0x00, 0x02]\n  lambda: |-\n      ESP_LOGD(\"Modbus Sensor Lambda\",\"Got new data\" );\n      union {\n        float float_value;\n        uint32_t raw;\n      } raw_to_float;\n      if (data.size() < 4 ) {\n        ESP_LOGE(\"Modbus Sensor Lambda\", \"invalid data size %d\",data.size());\n        return NAN;\n      }\n      raw_to_float.raw =   data[0] << 24 | data[1] << 16 | data[2] << 8 |  data[3];\n      ESP_LOGD(\"Modbus Sensor Lambda\", \"FP32 = 0x%08X => %f\", raw_to_float.raw, raw_to_float.float_value);\n      return raw_to_float.float_value;\n    unit_of_measurement: kVArh\n    accuracy_decimals: 1\n```\n\n----------------------------------------\n\nTITLE: Configuring LVGL Binary Sensor in ESPHome\nDESCRIPTION: Example configuration for creating a binary sensor from an LVGL button widget. The configuration specifies the platform as LVGL, references a button widget ID, and sets a display name for the sensor.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/lvgl.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbinary_sensor:\n  - platform: lvgl\n    widget: btn_id\n    name: LVGL push button\n```\n\n----------------------------------------\n\nTITLE: Configuring Number Components for Sprinkler Controller in ESPHome\nDESCRIPTION: Example of using ESPHome's number component to make valve run durations and multipliers adjustable from Home Assistant with persistence across reboots.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sprinkler.rst#2025-04-21_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nsprinkler:\n  - id: lawn_sprinkler_ctrlr\n    multiplier_number:\n      id: controller_multiplier_number\n      name: \"Lawn Sprinkler Multiplier\"\n      initial_value: 1.5\n      min_value: 0.1\n      max_value: 5\n      set_action:\n        - lambda: \"some_function();\"\n```\n\n----------------------------------------\n\nTITLE: Inverting Binary Sensor in YAML (Old Syntax)\nDESCRIPTION: Example of the old syntax for inverting a binary sensor using the 'inverted' option directly under the sensor configuration.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/changelog/v1.7.0.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbinary_sensor:\n  - platform: ...\n    # ...\n    inverted: True\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Style in ESPHome LVGL\nDESCRIPTION: Shows how to create a reusable style definition with specific text, alignment, and visual properties that can be applied to multiple widgets\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/index.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nlvgl:\n  style_definitions:\n    - id: date_style\n      text_font: unscii_8\n      align: center\n      text_color: 0x000000\n      bg_opa: cover\n      radius: 4\n      pad_all: 2\n```\n\n----------------------------------------\n\nTITLE: Defining a Number Component for Boiler Setpoint Control\nDESCRIPTION: In this snippet, a number component is defined to allow manual input of the boiler temperature setpoint. This provides a simple interface for user adjustments directly within the ESPHome environment.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/opentherm.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nnumber:\n  - platform: opentherm\n    t_set:\n      name: Boiler Setpoint\n```\n\n----------------------------------------\n\nTITLE: Configuring LVGL Screen Timeout with Backlight Control in ESPHome\nDESCRIPTION: This snippet shows a configuration for resuming LVGL and controlling display backlight using ESPHome. It includes setup for a customizable screen timeout number entity with configurable timeout duration.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/cookbook/lvgl.rst#2025-04-21_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\n- logger.log: \"LVGL resuming\"\n- lvgl.resume:\n- lvgl.widget.redraw:\n- light.turn_on: display_backlight\n\nlight:\n  - platform: ...\n    id: display_backlight\n\nnumber:\n  - platform: template\n    name: LVGL Screen timeout\n    optimistic: true\n    id: display_timeout\n    unit_of_measurement: \"s\"\n    initial_value: 45\n    restore_value: true\n    min_value: 10\n    max_value: 180\n    step: 5\n    mode: box\n```\n\n----------------------------------------\n\nTITLE: Select Menu Item Configuration\nDESCRIPTION: Configuration for a select menu item with value editing and callbacks.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display_menu/index.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nlcd_menu:\n  items:\n    - type: select\n      immediate_edit: false\n      text: 'My Color'\n      select: my_color\n      on_enter:\n        then:\n          lambda: 'ESP_LOGI(\"display_menu\", \"select enter: %s, %s\", it->get_text().c_str(), it->get_value_text().c_str());'\n      on_leave:\n        then:\n          lambda: 'ESP_LOGI(\"display_menu\", \"select leave: %s, %s\", it->get_text().c_str(), it->get_value_text().c_str());'\n      on_value:\n        then:\n          lambda: 'ESP_LOGI(\"display_menu\", \"select value: %s, %s\", it->get_text().c_str(), it->get_value_text().c_str());'\n\nselect:\n  - platform: template\n    id: my_color\n    optimistic: true\n    options:\n      - 'Red'\n      - 'Green'\n      - 'Blue'\n```\n\n----------------------------------------\n\nTITLE: Basic ESPHome Configuration Example with ESP32\nDESCRIPTION: Example showing basic ESPHome configuration with name, comment, area specification and ESP32 board selection.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/esphome.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nesphome:\n    name: livingroom\n    comment: Living room ESP32 controller\n    area: Living Room\n\nesp32:\n    board: nodemcu-32s\n```\n\n----------------------------------------\n\nTITLE: Using Graphs in ESPHome Display Pages\nDESCRIPTION: Example showing how to reference and render configured graphs within ESPHome display pages. The code demonstrates placement of graphs at specific coordinates and how to apply custom colors.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/graph.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndisplay:\n  - platform: ...\n    # ...\n    pages:\n      - id: page1\n        lambda: |-\n    pages:\n      - id: page1\n        lambda: |-\n          // Draw the graph at position [x=10,y=20]\n          it.graph(10, 20, id(single_temperature_graph));\n      - id: page2\n        lambda: |-\n          // Draw the graph at position [x=10,y=20]\n          it.graph(10, 20, id(multi_temperature_graph), my_yellow);\n```\n\n----------------------------------------\n\nTITLE: Minimum Value Filtering in ESPHome YAML\nDESCRIPTION: This snippet shows the implementation of a moving minimum filter using the `min` filter within ESPHome. It calculates the minimum value over a defined window of sensor readings to reduce noise or identify low values.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/index.rst#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n\n    # Example configuration entry\n    - platform: wifi_signal\n      # ...\n      filters:\n        - min:\n            window_size: 7\n            send_every: 4\n            send_first_at: 3\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Grayscale Image Display\nDESCRIPTION: Example configuration for displaying grayscale images on the OLED display with image conversion settings.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/ssd1327.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n  - file: \"image.jpg\"\n    id: my_image\n    resize: 120x120\n    type: GRAYSCALE\n\n...\n\ndisplay:\n    ...\n    lambda: |-\n      it.image(0, 0, id(my_image));\n```\n\n----------------------------------------\n\nTITLE: Configuring WLED Effect in ESPHome YAML\nDESCRIPTION: This YAML snippet shows how to configure the WLED effect using the UDP Realtime Control protocol in ESPHome for creating real-time ambient lighting effects. The configuration includes customizable parameters such as `port`, `blank_on_start`, and `sync_group_mask`. These allow setting the UDP server's port, deciding whether to blank LEDs at start, and determining which WLED Sync Groups to listen to.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/light/index.rst#2025-04-21_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\nwled:\n\nlight:\n  - platform: neopixelbus\n    ...\n    effects:\n      - wled:\n          # port: 21324\n          # blank_on_start: True\n          # sync_group_mask: 0\n```\n\n----------------------------------------\n\nTITLE: Implementing Speaker Play Action in YAML\nDESCRIPTION: Configuration examples for playing audio through speakers using static data or templates, with optional speaker ID specification.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/speaker/index.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  # Static raw audio data\n  - speaker.play: [...]\n\n  # Templated, return type is std::vector<uint8_t>\n  - speaker.play: !lambda return {...};\n\n  # in case you need to specify the speaker id\n  - speaker.play:\n      id: my_speaker\n      data: [...]\n```\n\n----------------------------------------\n\nTITLE: Configuring UART and DSMR for Optimal Reading\nDESCRIPTION: This configuration snippet demonstrates how to configure the UART bus with a larger receive buffer size and sets the maximum telegram length for the DSMR component. This helps prevent data loss and improves the reliability of telegram reading.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/dsmr.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n\"# Example configuration\nuart:\n  pin: D7\n  baud_rate: 115200\n  rx_buffer_size: 1700\n\ndsmr:\n  max_telegram_length: 1700\"\n```\n\n----------------------------------------\n\nTITLE: Updating LVGL Widget Styles and States\nDESCRIPTION: Examples showing how to update widget background color, state and visibility through automation actions.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/widgets.rst#2025-04-21_snippet_43\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - lvgl.widget.update:\n        id: my_button_id\n        bg_color: 0xFF0000\n        state:\n          disabled: true\n\non_...:\n  then:\n    - lvgl.widget.update:\n        id: my_label_id\n        hidden: true\n```\n\n----------------------------------------\n\nTITLE: Configuring ESPHome Safe Mode in YAML\nDESCRIPTION: Basic configuration for enabling safe mode with default settings. When activated, safe mode disables most components except serial logging, network connectivity, and OTA.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/safe_mode.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsafe_mode:\n```\n\n----------------------------------------\n\nTITLE: Disabling Standby Mode for Grove TB6612FNG in ESPHome\nDESCRIPTION: Configuration for waking up the motor driver board from standby mode. By default, the board is set to standby mode on ESPHome restart to prevent accidental motor activation.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/grove_tb6612fng.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - grove_tb6612fng.no_standby\n        id: test_motor\n```\n\n----------------------------------------\n\nTITLE: Configuring Horizontal Airflow Direction for Haier Climate Device\nDESCRIPTION: YAML configuration to set the horizontal airflow direction when swing is disabled. Supports values: Max_Left, Left, Center, Right, Max_Right. Only supported by hOn devices.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/climate/haier.rst#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - climate.haier.set_horizontal_airflow:\n      id: device_id\n      vertical_airflow: Right\n```\n\n----------------------------------------\n\nTITLE: Configuring PMWCS3 Sensor\nDESCRIPTION: This YAML snippet is an example configuration for the PMWCS3 capacitive soil moisture sensor, specifying various parameters like electrical conductivity and temperature readings. It requires the sensor platform to be set up appropriately in an ESPHome configuration file.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/pmwcs3.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: pmwcs3\n    e25:\n      name: \"pmwcs3 e25\"\n    ec:\n      name: \"pmwcs3 ec\"\n    temperature:\n      name: \"pmwcs3 temperature\"\n    vwc:\n      name: \"pmwcs3 vwc\"\n```\n\n----------------------------------------\n\nTITLE: Haier Status Message Trigger Configuration\nDESCRIPTION: Example of configuring an automation trigger for when new status packets are received from the AC\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/climate/haier.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nclimate:\n  - protocol: hon\n    on_status_message:\n      then:\n        - logger.log:\n            level: INFO\n            format: \"New status message received, size=%d, subcmd=%02X%02X\"\n            args: [ 'data_size', 'data[0]', 'data[1]' ]\n```\n\n----------------------------------------\n\nTITLE: Transmitting Toshiba AC IR Code with ESPHome\nDESCRIPTION: This YAML snippet configures ESPHome to transmit a Toshiba AC infrared remote code. The `rc_code_1` parameter is required, and `rc_code_2` is optional, as some Toshiba AC codes are sent in two parts. This action uses the newer Toshiba AC protocol.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/remote_transmitter.rst#2025-04-21_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - remote_transmitter.transmit_toshiba_ac:\n      rc_code_1: 0xB24DBF4040BF\n      rc_code_2: 0xD5660001003C\n```\n\n----------------------------------------\n\nTITLE: Configuring ESPHome Device Template in YAML\nDESCRIPTION: A template configuration for ESPHome devices that includes substitutions, project identification, WiFi setup, and provisioning options. Features include API access, OTA updates, improv serial client, and dashboard import settings for easy device adoption.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/creators.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# These substitutions allow the end user to override certain values\nsubstitutions:\n  name: \"project-template\"\n  friendly_name: \"Project Template\"\n\nesphome:\n  name: \"${name}\"\n  # Friendly names are used where appropriate in Home Assistant\n  friendly_name: \"${friendly_name}\"\n  # Automatically add the mac address to the name\n  # so you can use a single firmware for all devices\n  name_add_mac_suffix: true\n\n  # This will allow for (future) project identification,\n  # configuration and updates.\n  project:\n    name: esphome.project-template\n    version: \"1.0\"\n\n# To be able to get logs from the device via serial and api.\nlogger:\n\n# API is a requirement of the dashboard import.\napi:\n\n# OTA is required for Over-the-Air updating\nota:\n  platform: esphome\n\n# This should point to the public location of this yaml file.\ndashboard_import:\n  package_import_url: github://esphome/esphome-project-template/project-template-esp32.yaml@v6\n  import_full_config: false # or true\n\nwifi:\n  # Set up a wifi access point\n  ap:\n    password: \"12345678\"\n\n# In combination with the `ap` this allows the user\n# to provision wifi credentials to the device.\ncaptive_portal:\n\n# Sets up Bluetooth LE (Only on ESP32) to allow the user\n# to provision wifi credentials to the device.\nesp32_improv:\n  authorizer: none\n\n# Sets up the improv via serial client for Wi-Fi provisioning\nimprov_serial:\n  next_url: https://example.com/project-template/manual?ip={{ip_address}}&name={{device_name}}&version={{esphome_version}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tuya Device Data Points - Text Format\nDESCRIPTION: This snippet shows the details of various data points from a Tuya device, including types and values. It's primarily informative, displaying the state of different settings that would be relevant for configuring or debugging Tuya devices.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/select/tuya.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n[08:51:09][C][tuya:032]: Tuya:\n[08:51:09][C][tuya:043]:   Datapoint 1: switch (value: ON)\n[08:51:09][C][tuya:045]:   Datapoint 24: int value (value: 220)\n[08:51:09][C][tuya:045]:   Datapoint 16: int value (value: 22)\n[08:51:09][C][tuya:049]:   Datapoint 2: enum (value: 1)\n[08:51:09][C][tuya:045]:   Datapoint 19: int value (value: 40)\n[08:51:09][C][tuya:045]:   Datapoint 101: int value (value: 1)\n[08:51:09][C][tuya:045]:   Datapoint 27: int value (value: -2)\n[08:51:09][C][tuya:049]:   Datapoint 43: enum (value: 1)\n[08:51:09][C][tuya:049]:   Datapoint 102: enum (value: 1)\n[08:51:09][C][tuya:051]:   Datapoint 45: bitmask (value: 0)\n[08:51:09][C][tuya:043]:   Datapoint 10: switch (value: ON)\n[08:51:09][C][tuya:041]:   Datapoint 38: raw (value: 06.00.14.08.00.0F.0B.1E.0F.0C.1E.0F.11.00.16.16.00.0F.08.00.16.17.00.0F (24))\n[08:51:09][C][tuya:049]:   Datapoint 36: enum (value: 1)\n[08:51:09][C][tuya:057]:   GPIO Configuration: status: pin 14, reset: pin 0 (not supported)\n[08:51:09][C][tuya:061]:   Status Pin: GPIO14\n[08:51:09][C][tuya:063]:   Product: '{\"p\":\"gogb05wrtredz3bs\",\"v\":\"1.0.0\",\"m\":0}'\n```\n\n----------------------------------------\n\nTITLE: Event Source State Example\nDESCRIPTION: Example JSON payload structure for an event source state update showing component ID and state information.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/web-api/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"sensor-outside_temperature\",\n  \"state\": \"19.8 Â°C\",\n  \"value\": 19.76666\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CGG1 Cleargrass Thermometer in YAML\nDESCRIPTION: Configuration for the Cleargrass round e-ink display thermometer. Includes both standard and encrypted (with bindkey) configurations.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/xiaomi_ble.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: xiaomi_cgg1\n    mac_address: XX:XX:XX:XX:XX:XX\n    temperature:\n      name: \"CGG1 Temperature\"\n    humidity:\n      name: \"CGG1 Humidity\"\n    battery_level:\n      name: \"CGG1 Battery Level\"\n  - platform: xiaomi_cgg1\n    mac_address: XX:XX:XX:XX:XX:XX\n    bindkey: \"00112233445566778899aabbccddeeff\"\n    temperature:\n      name: \"CGG1 (New) Temperature\"\n    humidity:\n      name: \"CGG1 (New) Humidity\"\n```\n\n----------------------------------------\n\nTITLE: Number Menu Item Configuration\nDESCRIPTION: Configuration for a number menu item with value formatting and callbacks.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display_menu/index.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nlcd_menu:\n  items:\n    - type: number\n      text: 'My Number'\n      format: '%.2f'\n      number: my_number\n      on_enter:\n        then:\n          lambda: 'ESP_LOGI(\"display_menu\", \"number enter: %s, %s\", it->get_text().c_str(), it->get_value_text().c_str());'\n      on_leave:\n        then:\n          lambda: 'ESP_LOGI(\"display_menu\", \"number leave: %s, %s\", it->get_text().c_str(), it->get_value_text().c_str());'\n      on_value:\n        then:\n          lambda: 'ESP_LOGI(\"display_menu\", \"number value: %s, %s\", it->get_text().c_str(), it->get_value_text().c_str());'\n\nnumber:\n  - platform: template\n    id: my_number\n    optimistic: true\n    min_value: 10.0\n    max_value: 20.0\n    step: 0.5\n    on_value:\n      then:\n```\n\n----------------------------------------\n\nTITLE: Number Configuration for LD2420 (YAML)\nDESCRIPTION: This YAML snippet provides the configuration for the number component associated with the LD2420 sensor. It defines parameters such as presence timeout and gate distance thresholds needed for effective sensor calibration.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ld2420.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nnumber:\n  - platform: ld2420\n    presence_timeout:\n      name: Detection Presence Timeout\n    min_gate_distance:\n      name: Detection Gate Minimum\n    max_gate_distance:\n      name: Detection Gate Maximum\n\n    gate_select:\n      name: Select Gate to Set\n    still_threshold:\n      name: Set Still Threshold Value\n    move_threshold:\n      name: Set Move Threshold Value\n\n    gate_move_sensitivity:\n      name: Move Calibration Sensitivity Factor\n    gate_still_sensitivity:\n      name: Still Calibration Sensitivity Factor\n\n    gate_0:\n      move_threshold:\n        name: Gate 0 Move Threshold\n      still_threshold:\n        name: Gate 0 Still Threshold\n    gate_1:\n      move_threshold:\n        name: Gate 1 Move Threshold\n      still_threshold:\n        name: Gate 1 Still Threshold\n```\n\n----------------------------------------\n\nTITLE: Converting Power Units from W to kW\nDESCRIPTION: Configuration example showing how to convert power readings from watts (W) to kilowatts (kW) using filters with the HLW8012 sensor.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/total_daily_energy.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  # The power sensor to convert, can be any power sensor\n  - platform: hlw8012\n    # ...\n    power:\n      id: my_power\n      filters:\n        # Multiplication factor from W to kW is 0.001\n        - multiply: 0.001\n      unit_of_measurement: kW\n```\n\n----------------------------------------\n\nTITLE: Learning New RF Protocol\nDESCRIPTION: Shows how to initiate a learn mode for capturing new RF protocol timings\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/rf_bridge.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\non_...: \n  then:\n    - rf_bridge.learn\n```\n\n----------------------------------------\n\nTITLE: Initial Value Configuration for DateTime Type\nDESCRIPTION: Example of setting initial value for datetime type using object notation combining both date and time properties.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/datetime/template.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ninitial_value:\n    year: 2023\n    month: 12\n    day: 4\n    hour: 12\n    minute: 34\n    second: 56\n```\n\n----------------------------------------\n\nTITLE: Calibrated Touchscreen Configuration\nDESCRIPTION: Example showing how to configure a calibrated touchscreen with specific coordinate mappings and transformations.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/touchscreen/index.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntouchscreen:\n  platform: xpt2046\n  calibration:\n    x_min: 281\n    x_max: 3848\n    y_min: 347\n    y_max: 3878\n  transform:\n    mirror_x: false\n    mirror_y: false\n    swap_xy: false\n```\n\n----------------------------------------\n\nTITLE: Implementing on_armed_home Trigger for Alarm Panel in YAML\nDESCRIPTION: YAML configuration for adding an on_armed_home trigger to an Alarm Control Panel, which activates when the alarm enters armed_home state.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/alarm_control_panel/index.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nalarm_control_panel:\n  # ...\n  on_armed_home:\n    then:\n      - logger.log: \"Alarm armed_home!\"\n```\n\n----------------------------------------\n\nTITLE: Basic Mixer Speaker Configuration in YAML\nDESCRIPTION: Example configuration for setting up a mixer speaker that combines audio from two source speakers. Shows the basic required parameters including output speaker and source speakers configuration.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/speaker/mixer.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nspeaker:\n  - platform: mixer\n    output_speaker: speaker_id\n    source_speakers:\n      - id: announcement_mixer_input_speaker_id\n      - id: media_mixer_input_speaker_id\n```\n\n----------------------------------------\n\nTITLE: Defining SEO metadata in reStructuredText\nDESCRIPTION: Sets SEO metadata for the changelog page including description, image, and author information.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/changelog/v1.16.0.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. seo::\n    :description: Changelog for ESPHome version 1.16.0.\n    :image: /_static/changelog-1.16.0.png\n    :author: Otto Winter\n    :author_twitter: @OttoWinter_\n```\n\n----------------------------------------\n\nTITLE: Controlling the Fingerprint Reader LED\nDESCRIPTION: Manipulates the built-in LED state on the reader, compatible with selective models. This action is part of providing visual cues for various operations.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/fingerprint_grow.rst#2025-04-21_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - fingerprint_grow.led_control:\n        state: ON\n    - fingerprint_grow.led_control: ON\n```\n\n----------------------------------------\n\nTITLE: Using Packages as Templates in ESPHome\nDESCRIPTION: This YAML illustration shows how to use packages as templates within an ESPHome configuration. Variables are passed to the `!include` directive, allowing for the reuse of configurations for multiple similar components such as garage doors with varying names.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/packages.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# In config.yaml\npackages:\n  left_garage_door: !include\n    file: garage-door.yaml\n    vars:\n      door_name: Left\n  middle_garage_door: !include\n    file: garage-door.yaml\n    vars:\n      door_name: Middle\n  right_garage_door: !include\n    file: garage-door.yaml\n    vars:\n      door_name: Right\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# In garage-door.yaml\nswitch:\n  - name: ${door_name} Garage Door Switch\n    platform: gpio\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Hardware Display Rotation Configuration\nDESCRIPTION: Configuration example for rotating a landscape display to portrait mode using hardware transformation.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/ili9xxx.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntransform:\n  swap_xy: true\n  mirror_x: true\ndimensions:\n  height: 480\n  width: 320\n```\n\n----------------------------------------\n\nTITLE: Setting Multiplier Value in YAML\nDESCRIPTION: Action to set the multiplier value for adjusting valve run durations globally.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sprinkler.rst#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - sprinkler.set_multiplier:\n        id: sprinkler_ctrlr\n        multiplier: 1.5\n```\n\n----------------------------------------\n\nTITLE: Cover State Check in C++\nDESCRIPTION: Lambda example for checking cover position and operation state.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/cover/index.rst#2025-04-21_snippet_11\n\nLANGUAGE: cpp\nCODE:\n```\nif (id(my_cover).position == COVER_OPEN) {\n  // Cover is open\n} else if (id(my_cover).position == COVER_CLOSED) {\n  // Cover is closed\n} else {\n  // Cover is in-between open and closed\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Fan Speed Change Trigger in YAML\nDESCRIPTION: YAML configuration for implementing a trigger that activates when a fan's speed is changed in ESPHome.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/fan/index.rst#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nfan:\n  - platform: speed # or any other platform\n    # ...\n    on_speed_set:\n    - logger.log:\n\n```\n\n----------------------------------------\n\nTITLE: Basic ES8156 Configuration in YAML\nDESCRIPTION: Minimal configuration example for setting up the ES8156 audio DAC platform in ESPHome.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/audio_dac/es8156.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\naudio_dac:\n  - platform: es8156\n```\n\n----------------------------------------\n\nTITLE: Handling Successful Enrollment\nDESCRIPTION: Triggered upon successful fingerprint enrollment and logs the slot number where the fingerprint was stored. Employs a lambda to create a dynamic message.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/fingerprint_grow.rst#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\non_enrollment_done:\n  - text_sensor.template.publish:\n      id: fingerprint_state\n      state: !lambda 'return \"Enrolled into slot \" + to_string(finger_id);'\n```\n\n----------------------------------------\n\nTITLE: Checking if a Select Contains an Option in ESPHome (C++)\nDESCRIPTION: Demonstrates how to check if an ESPHome select component contains a specific option value. Uses the has_option() method and logs the result.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/select/index.rst#2025-04-21_snippet_10\n\nLANGUAGE: cpp\nCODE:\n```\nauto option = \"Happy\";\nif (id(my_select).has_option(option)) {\n  ESP_LOGI(\"main\", \"Select has option '%s'\", option);\n}\n```\n\n----------------------------------------\n\nTITLE: Current Volume Dosed Sensor Configuration in YAML\nDESCRIPTION: Configuration for a sensor that indicates the volume in milliliters that has been dosed in the currently running or last ran dosing command.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/ezo_pmp.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: ezo_pmp\n    current_volume_dosed:\n      id: current_volume_dosed\n      name: Current Volume Dosed\n```\n\n----------------------------------------\n\nTITLE: Templated Light Control Action\nDESCRIPTION: Shows how to use templating in light control actions, where the blue component of the light color is dynamically set based on a sensor value while other components are fixed.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/automations/templates.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\non_press:\n  then:\n    - light.turn_on:\n        id: some_light_id\n        transition_length: 0.5s\n        red: 0.8\n        green: 1.0\n        blue: !lambda |-\n          // The sensor outputs values from 0 to 100. The blue\n          // part of the light color will be determined by the sensor value.\n          return id(some_sensor).state / 100.0;\n```\n\n----------------------------------------\n\nTITLE: Basic Graphical Display Menu Configuration in YAML\nDESCRIPTION: Basic configuration example showing how to set up a graphical display menu with essential parameters including display component reference, redraw automation, and mode selection.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display_menu/graphical_display_menu.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ngraphical_display_menu:\n  id: my_graphical_display_menu\n  display: my_display_component\n  on_redraw:\n    then:\n      component.update: my_display_component\n  active: false\n  mode: rotary\n  items:\n    ...\n```\n\n----------------------------------------\n\nTITLE: on_value Automation Configuration in ESPHome\nDESCRIPTION: This example configures an 'on_value' automation to trigger when a new sensor value has passed through all filters. The lambda function then uses this value (accessed via 'x') to control a light, setting its red color based on the sensor value.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/index.rst#2025-04-21_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\n    sensor:\n      - platform: dht\n        # ...\n        on_value:\n          then:\n            - light.turn_on:\n                id: light_1\n                red: !lambda \"return x/255;\"\n\n```\n\n----------------------------------------\n\nTITLE: Configuring BedJet Temperature Sensors\nDESCRIPTION: Configuration for temperature sensors that monitor both outlet and ambient temperatures of the BedJet device.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/climate/bedjet.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: bedjet\n    bedjet_id: bedjet_1\n    outlet_temperature:\n      name: \"My BedJet Outlet Temperature\"\n    ambient_temperature:\n      name: \"My BedJet Ambient Temperature\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Harmonic Power Measurement with ATM90E32\nDESCRIPTION: YAML configuration for measuring harmonic power on Phase A using the ATM90E32 sensor platform.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/atm90e32.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: atm90e32\n    phase_a:\n      harmonic_power:\n        name: ${disp_name} CT1 Harmonic Power\n```\n\n----------------------------------------\n\nTITLE: Setting Speaker Volume in YAML\nDESCRIPTION: Examples of setting speaker volume using percentages or lambda functions, with both simple and full configuration options.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/speaker/index.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  # Simple\n  - speaker.volume_set: 50%\n\n  # Full\n  - speaker.volume_set:\n      id: speaker_id\n      volume: 50%\n\n  # Simple with lambda\n  -  speaker.volume_set: !lambda \"return 0.5;\"\n```\n\n----------------------------------------\n\nTITLE: Polling On Action\nDESCRIPTION: This YAML snippet demonstrates how to use the ``tag.polling_on`` action to enable card reading/writing. The action is triggered within an automation (``on_...``) and references the ID of the PN7150 component.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/pn7150.rst#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - tag.polling_on: my_pn7150_id\n```\n\n----------------------------------------\n\nTITLE: Setting High Calibration Point for EZO Sensor\nDESCRIPTION: Lambda function to set the high calibration point for an EZO sensor, typically used for pH sensors.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ezo.rst#2025-04-21_snippet_13\n\nLANGUAGE: cpp\nCODE:\n```\nid(ph_ezo).set_calibration_point_high(10.00);\n```\n\n----------------------------------------\n\nTITLE: Sending Raw RF Command\nDESCRIPTION: Illustrates sending a raw command to the onboard EFM8BB1 chip for protocols not natively supported\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/rf_bridge.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\non_...: \n  then:\n    - rf_bridge.send_raw:\n        raw: AAA5070008001000ABC12355\n```\n\n----------------------------------------\n\nTITLE: Menu Navigation Control Configuration\nDESCRIPTION: Configuration for rotary encoder and GPIO button to control menu navigation.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display_menu/index.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: rotary_encoder\n    ...\n    on_anticlockwise:\n      - display_menu.up:\n    on_clockwise:\n      - display_menu.down:\n\nbinary_sensor:\n  - platform: gpio\n    ...\n    filters:\n      - delayed_on: 10ms\n      - delayed_off: 10ms\n    on_press:\n      - display_menu.enter:\n```\n\n----------------------------------------\n\nTITLE: Configuring H-bridge Light in ESPHome YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure an H-bridge light in ESPHome. It sets up a light named 'Hbridge Lights' using two pins (pin_a and pin_b) for controlling the dual-color brightness.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/light/hbridge.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nlight:\n  - platform: hbridge\n    id: mainlight\n    name: \"Hbridge Lights\"\n    pin_a: pina\n    pin_b: pinb\n```\n\n----------------------------------------\n\nTITLE: SIM800L Sensor Configuration\nDESCRIPTION: Configuration for setting up an RSSI sensor to monitor signal strength of the SIM800L module.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sim800l.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: sim800l\n    rssi:\n      name: \"Sim800L RSSI\"\n```\n\n----------------------------------------\n\nTITLE: Setting up Virtual Environment on Linux\nDESCRIPTION: Commands to create and activate a Python virtual environment on Linux.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/installing_esphome.rst#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ python3 -m venv venv\n$ source venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Evaluating Confidence in Fingerprint Matching - ESPHome Lambda\nDESCRIPTION: This code snippet evaluates whether the fingerprint match confidence exceeds a threshold of 50. If it does, the associated Home Assistant action will be triggered. This is part of a conditional logic that decides further actions based on fingerprint match confidence levels.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/fingerprint_grow.rst#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nlambda: 'return confidence > 50;'\n```\n\n----------------------------------------\n\nTITLE: Setting Format Mode Action in YAML\nDESCRIPTION: This YAML code is used to switch the PN7160 to 'format mode', ensuring the next tag will be formatted with an empty NDEF message structure. Utilized within ESPHome automations, it requires that the device setup has defined format mode actions.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/pn7160.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - tag.set_format_mode: my_pn7160_id\n```\n\n----------------------------------------\n\nTITLE: Configuring On Time Sync Trigger in YAML\nDESCRIPTION: This snippet shows how to set up an on_time_sync trigger to run an automation when the time source is synchronized.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/time/index.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\non_time_sync:\n  then:\n    - logger.log: \"Synchronized system clock\"\n```\n\n----------------------------------------\n\nTITLE: Configuring BME280 with Altitude and Humidity Calculations in YAML\nDESCRIPTION: Configuration for BME280 sensor with additional calculated values for altitude, absolute humidity, and dew point. Uses template sensors and lambda functions to perform calculations based on temperature, pressure, and humidity readings.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/cookbook/bme280_environment.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: bme280_i2c\n    temperature:\n      name: \"BME280 Temperature\"\n      id: bme280_temperature\n    pressure:\n      name: \"BME280 Pressure\"\n      id: bme280_pressure\n    humidity:\n      name: \"BME280 Relative Humidity\"\n      id: bme280_humidity\n    address: 0x77\n    update_interval: 15s\n  - platform: template\n    name: \"Altitude\"\n    lambda: |-\n      const float STANDARD_SEA_LEVEL_PRESSURE = 1013.25; //in hPa, see note\n      return ((id(bme280_temperature).state + 273.15) / 0.0065) *\n        (powf((STANDARD_SEA_LEVEL_PRESSURE / id(bme280_pressure).state), 0.190234) - 1); // in meter\n    update_interval: 15s\n    icon: 'mdi:signal'\n    unit_of_measurement: 'm'\n  - platform: absolute_humidity\n    name: \"Absolute Humidity\"\n    temperature: bme280_temperature\n    humidity: bme280_humidity\n  - platform: template\n    name: \"Dew Point\"\n    lambda: |-\n      return (243.5*(log(id(bme280_humidity).state/100)+((17.67*id(bme280_temperature).state)/\n      (243.5+id(bme280_temperature).state)))/(17.67-log(id(bme280_humidity).state/100)-\n      ((17.67*id(bme280_temperature).state)/(243.5+id(bme280_temperature).state))));\n    unit_of_measurement: Â°C\n    icon: 'mdi:thermometer-alert'\n```\n\n----------------------------------------\n\nTITLE: Button Configuration for LD2420 (YAML)\nDESCRIPTION: This YAML snippet defines the button component configuration for the LD2420 sensor, allowing users to apply configurations, perform factory resets, and restart the module.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ld2420.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nbutton:\n  - platform: ld2420\n    apply_config:\n      name: Apply Config\n    factory_reset:\n      name: Factory Reset\n    restart_module:\n      name: Restart Module\n    revert_config:\n      name: Undo Edits\n```\n\n----------------------------------------\n\nTITLE: Configuring Pylontech Battery Text Sensors\nDESCRIPTION: Example configuration for retrieving text-based battery states like base state, voltage state, current state, and temperature state\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/pylontech.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\ntext_sensor:\n  - platform: pylontech\n    pylontech_id: pylontech0\n    battery: 1\n    \n    base_state:\n      id: bat1_base_state\n      name: \"Battery1 Base State\"\n```\n\n----------------------------------------\n\nTITLE: OTA Configuration in ESPHome YAML\nDESCRIPTION: This snippet shows the basic configuration entry for enabling OTA updates via HTTP request in an ESPHome device's YAML configuration file. It specifies the platform as http_request.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/ota/http_request.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\n# Example configuration entry\nota:\n  - platform: http_request\n\n```\n\n----------------------------------------\n\nTITLE: Duty Time Stop Action in ESPHome Automation\nDESCRIPTION: Shows how to suspend time tracking for a duty time sensor and update the sensor state\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/duty_time.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - sensor.duty_time.stop: my_climate_work_time\n```\n\n----------------------------------------\n\nTITLE: Configuring I2C Bus Frequency\nDESCRIPTION: YAML configuration for setting up I2C bus with increased frequency. Defines SDA and SCL pins, enables bus scanning, and sets an 800kHz frequency for all components on the bus.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/weikai.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ni2c:\n  sda: 21\n  scl: 22\n  scan: true\n  id: bus_i2c\n  frequency: 800kHz\n```\n\n----------------------------------------\n\nTITLE: Calculating Calibration Values with JavaScript\nDESCRIPTION: This JavaScript code snippet calculates new voltage divider, current resistor, and current multiply values based on input from HTML elements. It uses parseFloat to convert the input values to numbers and performs calculations based on real and sensor voltage, power, and current. The results are then displayed in other HTML elements.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/hlw8012.rst#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n        let voltage_divider = parseFloat(document.getElementById(\"voltage-divider\").value.replace(\",\", \".\"))\n        let current_resistor = parseFloat(document.getElementById(\"current-resistor\").value.replace(\",\", \".\"))\n        let current_multiply = parseFloat(document.getElementById(\"current-multiply\").value.replace(\",\", \".\"))\n        let real_voltage = parseFloat(document.getElementById(\"real-voltage\").value.replace(\",\", \".\"))\n        let real_power = parseFloat(document.getElementById(\"real-power\").value.replace(\",\", \".\"))\n        let real_current = parseFloat(document.getElementById(\"real-current\").value.replace(\",\", \".\"))\n        let sensor_voltage = parseFloat(document.getElementById(\"sensor-voltage\").value.replace(\",\", \".\"))\n        let sensor_power = parseFloat(document.getElementById(\"sensor-power\").value.replace(\",\", \".\"))\n        let sensor_current = parseFloat(document.getElementById(\"sensor-current\").value.replace(\",\", \".\"))\n        let calc_voltage = (document.getElementById(\"real-voltage\").value !== \"\" || document.getElementById(\"sensor-voltage\").value !== \"\")\n        let calc_power = (document.getElementById(\"real-power\").value !== \"\" || document.getElementById(\"sensor-power\").value !== \"\")\n        let calc_current = (document.getElementById(\"real-current\").value !== \"\" || document.getElementById(\"sensor-current\").value !== \"\")\n        let voltage_divider_new = voltage_divider;\n        let current_resistor_new = current_resistor;\n        let current_multiply_new = current_multiply;\n        if (calc_voltage) {\n          voltage_divider_new *= real_voltage / sensor_voltage;\n        }\n        if (calc_power) {\n          if (calc_voltage) {\n            current_resistor_new *= (sensor_power / sensor_voltage) / (real_power / real_voltage);\n          } else {\n            current_resistor_new *= sensor_power / real_power;\n          }\n        }\n        if (calc_current) {\n          if (calc_power) {\n            current_multiply_new *= (real_current / sensor_current) * (current_resistor_new / current_resistor);\n          } else {\n            current_resistor_new *= sensor_current / real_current;\n          }\n        }\n        document.getElementById(\"voltage-divider-new\").value = voltage_divider_new;\n        document.getElementById(\"current-resistor-new\").value = current_resistor_new;\n        document.getElementById(\"current-multiply-new\").value = current_multiply_new;\n        let sensor_voltage_new = sensor_voltage * voltage_divider_new / voltage_divider\n        let sensor_power_new = sensor_power * (voltage_divider_new / current_resistor_new) / (voltage_divider / current_resistor)\n        let sensor_current_new = sensor_current * (current_multiply_new / current_resistor_new) / (current_multiply / current_resistor)\n        document.getElementById(\"sensor-voltage-new\").value = Number(sensor_voltage_new.toFixed(8));\n        document.getElementById(\"sensor-power-new\").value = Number(sensor_power_new.toFixed(8));\n        document.getElementById(\"sensor-current-new\").value = Number(sensor_current_new.toFixed(8));\n      }\n\n```\n\n----------------------------------------\n\nTITLE: Waiting for Script Completion\nDESCRIPTION: The YAML snippet demonstrates how to wait for a script to finish executing using the script.wait action and discusses its usage limitations within a lambda.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/script.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nscript:\n  - id: my_script\n    then:\n      - switch.turn_on: my_switch\n      - delay: 1s\n      - switch.turn_off: my_switch\n\n# in a trigger:\non_...:\n  then:\n    - script.execute: my_script\n    - script.wait: my_script\n```\n\n----------------------------------------\n\nTITLE: DS1307 Read Time Action Configuration\nDESCRIPTION: Action configuration for reading time from RTC hardware to system time. Automatically runs every 15 minutes by default.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/time/ds1307.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - ds1307.read_time\n\n  # in case you need to specify the DS1307 id\n  - ds1307.read_time:\n      id: ds1307_time\n```\n\n----------------------------------------\n\nTITLE: Configuring on_armed_night Trigger for Alarm Panel in YAML\nDESCRIPTION: YAML configuration for adding an on_armed_night trigger to an Alarm Control Panel, which activates when the alarm enters armed_night state.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/alarm_control_panel/index.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nalarm_control_panel:\n  # ...\n  on_armed_night:\n    then:\n      - logger.log: \"Alarm armed_night!\"\n```\n\n----------------------------------------\n\nTITLE: ESPHome CLI Commands for Configuration and Logging\nDESCRIPTION: Demonstrates key ESPHome command line interface commands for viewing parsed configuration and device logs.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/faq.rst#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nesphome config livingroom.yaml\n```\n\nLANGUAGE: bash\nCODE:\n```\nesphome logs livingroom.yaml\n```\n\n----------------------------------------\n\nTITLE: Activating Sleep Mode on DF-Player in ESPHome\nDESCRIPTION: Action to enter sleep mode on the DF-Player, stopping playback. The device needs to be reactivated with set_device: TF_CARD to enable playback again.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/dfplayer.rst#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - dfplayer.sleep\n```\n\n----------------------------------------\n\nTITLE: Set Format Mode Action\nDESCRIPTION: This YAML snippet demonstrates how to use the ``tag.set_format_mode`` action to format the next tag presented to the PN7150. The action is triggered within an automation (``on_...``) and references the ID of the PN7150 component.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/pn7150.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - tag.set_format_mode: my_pn7150_id\n```\n\n----------------------------------------\n\nTITLE: Resetting Energy Values of PZEMDC Device in YAML\nDESCRIPTION: This snippet demonstrates the action to reset the total energy value of a specified PZEMDC device using its ID when executed, using an automation trigger.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/pzemdc.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - pzemdc.reset_energy: pzemdc_1\n```\n\n----------------------------------------\n\nTITLE: Multiple DFRobot mmWave Instance Configuration\nDESCRIPTION: Configuration for multiple mmWave radar instances using different UART buses.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/dfrobot_sen0395.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndfrobot_sen0395:\n  - id: mmWave_1\n    uart_id: uart_1\n  - id: mmWave_2\n    uart_id: uart_2\n```\n\n----------------------------------------\n\nTITLE: Executing Output Turn Off Action in YAML\nDESCRIPTION: This snippet demonstrates how to turn off a specified output using its ID. Often used in ESPHome automations, it simplifies the creation of on-off toggle actions for various components. Similar to the turn on action, it can also be represented as a C++ lambda expression.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/output/index.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - output.turn_off: light_1\n```\n\nLANGUAGE: cpp\nCODE:\n```\nid(light_1).turn_off();\n```\n\n----------------------------------------\n\nTITLE: Pausing Sprinkler Operation in YAML\nDESCRIPTION: Action to immediately turn off all valves while saving the active valve state for later resumption.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sprinkler.rst#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - sprinkler.pause: sprinkler_ctrlr\n```\n\n----------------------------------------\n\nTITLE: Performing Forced Calibration of SCD4X Sensor\nDESCRIPTION: This YAML snippet describes the action to perform a forced calibration on the SCD4X sensor, setting the sensor's COâ measurement to a specified value (in ppm). The calibration should be conducted in stable COâ concentration conditions. It can be dynamically set using templates from Home Assistant.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/scd4x.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - scd4x.perform_forced_calibration:\n        value: 419   # outside average April 2022\n```\n\nLANGUAGE: yaml\nCODE:\n```\napi:\n  actions:\n    - action: calibrate_co2_value\n      variables:\n        co2_ppm: int\n      then:\n      - scd4x.perform_forced_calibration:\n          value: !lambda 'return co2_ppm;'\n          id: my_scd41\n```\n\n----------------------------------------\n\nTITLE: Emulation On Action\nDESCRIPTION: This YAML snippet demonstrates how to use the ``tag.emulation_on`` action to enable card emulation mode. The action is triggered within an automation (``on_...``) and references the ID of the PN7150 component.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/pn7150.rst#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - tag.emulation_on: my_pn7150_id\n```\n\n----------------------------------------\n\nTITLE: Lambda Publication in C++\nDESCRIPTION: Example showing how to publish a template sensor state directly from C++ code in a lambda function.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/template.rst#2025-04-21_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nid(template_sens).publish_state(42.0);\n```\n\n----------------------------------------\n\nTITLE: Setting up MQTT Subscribe Text Sensor in ESPHome\nDESCRIPTION: Basic configuration example for creating an MQTT Subscribe text sensor that listens to a specific topic and stores the received message value.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/text_sensor/mqtt_subscribe.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntext_sensor:\n  - platform: mqtt_subscribe\n    name: \"Data from topic\"\n    id: mysensor\n    topic: the/topic\n```\n\n----------------------------------------\n\nTITLE: BLE Client Disconnect Handler\nDESCRIPTION: Automation handler for BLE device disconnection events\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/ble_client.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nble_client:\n  - mac_address: XX:XX:XX:XX:XX:XX\n    id: ble_itag\n    on_disconnect:\n      then:\n        - lambda: |-\n            ESP_LOGD(\"ble_client_lambda\", \"Disconnected from BLE device\");\n```\n\n----------------------------------------\n\nTITLE: Using External Components to Test Pull Requests in ESPHome YAML Configuration\nDESCRIPTION: This code snippet demonstrates how to configure ESPHome to use code from an open pull request for testing. It requires specifying the PR number and listing the specific components that were modified by the pull request.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/faq.rst#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nexternal_components:\n  # replace 1234 with the number of the pull request\n  - source: github://pr#1234\n    components:\n      # list all components modified by this pull request here\n      - ccs811\n```\n\n----------------------------------------\n\nTITLE: Formatting Time String with strftime in ESPHome (C++)\nDESCRIPTION: Demonstrates how to use the strftime function to format a time string in a display object. The example shows formatting the current time as 'YYYY-MM-DD HH:MM'.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/time/index.rst#2025-04-21_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\n# For example, in a display object\nit.strftime(0, 0, id(font), \"%Y-%m-%d %H:%M\", id(time).now());\n```\n\n----------------------------------------\n\nTITLE: Implementing Fan State Change Trigger in YAML\nDESCRIPTION: YAML configuration for setting up a trigger that activates when a fan's state changes in ESPHome.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/fan/index.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nfan:\n  - platform: speed # or any other platform\n    # ...\n    on_state:\n    - logger.log:\n        format: \"Fan State changed!  Fan Speed is %d!\"\n        args: [ x->speed ]\n\n```\n\n----------------------------------------\n\nTITLE: Home Assistant Configuration in YAML\nDESCRIPTION: This YAML snippet provides an example of how to configure Home Assistant components to control the EZO-PMP pump. It uses template buttons and numbers to enable user interaction with the dosing process through the Home Assistant UI.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/ezo_pmp.rst#2025-04-21_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\ni2c:\n\nezo_pmp:\n  id: ezo_pmp\n\nnumber:\n  - platform: template\n    id: volume\n    name: \"Volume\"\n    optimistic: true\n    min_value: 0\n    max_value: 100\n    step: 0.01\n  - platform: template\n    id: duration\n    name: \"Duration\"\n    optimistic: true\n    min_value: 0\n    max_value: 100\n    step: 1\n\nbutton:\n  - platform: template\n    name: \"Dose Over Time\"\n    on_press:\n      - ezo_pmp.dose_volume_over_time:\n          id: ezo_pump\n          volume: !lambda |-\n                  return id(volume).state;\n          duration: !lambda |-\n                  return id(duration).state;\n```\n\n----------------------------------------\n\nTITLE: RC522 Tag Removal Trigger Configuration\nDESCRIPTION: Configuration example showing how to set up an automation trigger for when a tag is removed from the reader's field.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/rc522.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nrc522_spi: # or rc522_i2c\n  # ...\n  on_tag_removed:\n    then:\n      - mqtt.publish:\n          topic: rc522/tag_removed\n          payload: !lambda 'return x;'\n```\n\n----------------------------------------\n\nTITLE: Custom Menu Item Value Rendering in YAML\nDESCRIPTION: Example showing how to customize the rendering of menu item values using lambda functions with different formatting for normal and edit modes.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display_menu/graphical_display_menu.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ngraphical_display_menu:\n  menu_item_value: !lambda |-\n    std::string label = \" \";\n    if (it->is_item_selected && it->is_menu_editing) {\n      label.append(\"*\");\n      label.append(it->item->get_value_text());\n      label.append(\"*\");\n    } else {\n      label.append(\"~\");\n      label.append(it->item->get_value_text());\n      label.append(\"~\");\n    }\n    return label;\n```\n\n----------------------------------------\n\nTITLE: Creating Modbus Write Command in C++\nDESCRIPTION: Creates a Modbus write multiple command for battery settings with a specific register address and data\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/modbus_controller.rst#2025-04-21_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\nesphome::modbus_controller::ModbusCommandItem set_battery2_command =\n    esphome::modbus_controller::ModbusCommandItem::create_write_multiple_command(controller, 0x906B, battery_settings3.size(),\n                                                                                battery_settings2);\ndelay(200);\ncontroller->queue_command(set_battery1_command);\ndelay(200);\ncontroller->queue_command(set_battery2_command);\nESP_LOGI(\"ModbusLambda\", \"EPSOLAR Battery set\");\n```\n\n----------------------------------------\n\nTITLE: Home Assistant Template Sensor for SML Energy Reading\nDESCRIPTION: Home Assistant configuration for creating a template sensor that converts the text value from an SML text sensor into a properly formatted energy reading with appropriate units.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sml.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# Home Assistant configuration.yaml\ntemplate:\n  - sensor:\n      - name: \"Total Energy Consumption\"\n        unit_of_measurement: \"kWh\"\n        state: >\n          {% if states('sensor.total_energy_text') == 'unavailable' %}\n            {{ states('sensor.total_energy_consumption') }}\n          {% else %}\n            {{ ((states('sensor.total_energy_text') | float) * 0.0001) | round(2) }}\n          {% endif %}\n```\n\n----------------------------------------\n\nTITLE: Cover Open Action Configuration\nDESCRIPTION: YAML configuration for opening a cover using action triggers.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/cover/index.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - cover.open: cover_1\n```\n\n----------------------------------------\n\nTITLE: Adjusting Frequency of ESP8266 PWM Output in YAML\nDESCRIPTION: This snippet shows how to change the frequency of an ESP8266 PWM output at runtime with ESPHome. It involves setting the ID of the target PWM output and the desired frequency in hertz. This is particularly useful for applications such as controlling a buzzer pitch.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/output/esp8266_pwm.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n    on_...:\n      - output.esp8266_pwm.set_frequency:\n          id: pwm_output\n          frequency: 100Hz\n```\n\n----------------------------------------\n\nTITLE: Configuring IR Remote Receiver in YAML\nDESCRIPTION: YAML configuration for setting up an infrared remote receiver module with dumping capability for code capture.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/setting_up_rmt_devices.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nremote_receiver:\\n  pin: GPIOXX\\n  dump: all\n```\n\n----------------------------------------\n\nTITLE: Configuring BMP581 Sensor in ESPHome\nDESCRIPTION: This YAML snippet demonstrates how to configure the BMP581 temperature and pressure sensor in ESPHome.  It defines the platform as bmp581 and sets up temperature and pressure sensors with their respective names. This configuration requires the IÂ²C bus to be configured separately.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/bmp581.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"# Example configuration entry\nsensor:\n  - platform: bmp581\n    temperature:\n      name: \\\"Indoor Temperature\\\"\n    pressure:\n      name: \\\"Indoor Pressure\\\"\"\n```\n\n----------------------------------------\n\nTITLE: ESP32 Arduino Framework Configuration\nDESCRIPTION: Configuration example for using the Arduino framework with ESP32, which is the default framework option.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/esp32.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nesp32:\n  board: ...\n  framework:\n    type: arduino\n```\n\n----------------------------------------\n\nTITLE: Running a Motor with Grove TB6612FNG in ESPHome\nDESCRIPTION: Configuration for spinning a motor by specifying channel, speed, and direction. Speed ranges from 0 to 255, with direction options of FORWARD or BACKWARD.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/grove_tb6612fng.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - grove_tb6612fng.run:\n        channel: 1\n        speed: 255\n        direction: BACKWARD\n        id: test_motor\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents in reStructuredText for ESPHome Cookbook\nDESCRIPTION: This snippet creates a table of contents for the ESPHome cookbook using reStructuredText directives. It uses the 'toctree' directive with the 'glob' option to automatically include all files in the current directory.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/cookbook/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Configuring Lifetime Energy Integration\nDESCRIPTION: Example configuration for setting up continuous energy integration that doesn't reset daily, using the integration platform for tracking lifetime energy usage.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/total_daily_energy.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: integration\n    name: 'Total Energy'\n    sensor: my_power\n    time_unit: h\n    restore: true\n    state_class: total_increasing\n    device_class: energy\n```\n\n----------------------------------------\n\nTITLE: Configuring BedJet Core Components in YAML\nDESCRIPTION: Basic configuration for setting up BLE tracker, client and BedJet hub component. Requires ESP32 BLE peripheral setup with device MAC address.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/climate/bedjet.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nesp32_ble_tracker:\n\nble_client:\n  - mac_address: XX:XX:XX:XX:XX:XX\n    id: bedjet_ble_id1\n\nbedjet:\n  - id: bedjet_1\n    ble_client_id: bedjet_ble_id1\n```\n\n----------------------------------------\n\nTITLE: Retrieving LED State from EZO Sensor\nDESCRIPTION: Lambda function to check if the LED on an EZO sensor is currently on or off.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ezo.rst#2025-04-21_snippet_15\n\nLANGUAGE: cpp\nCODE:\n```\nid(ph_ezo).get_led_state();\n```\n\n----------------------------------------\n\nTITLE: MAX7219 Display Control Examples\nDESCRIPTION: Examples of controlling display inversion, intensity, and power state.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/max7219digit.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndisplay:\n  - platform: max7219digit\n    lambda: |-\n      it.invert_on_off(true);\n      it.intensity(10);\n      it.turn_on_off(true);\n```\n\n----------------------------------------\n\nTITLE: Clearing Queued Valves in YAML\nDESCRIPTION: Action to remove all queued valves from the controller's queue.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sprinkler.rst#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - sprinkler.clear_queued_valves:\n        id: sprinkler_ctrlr\n```\n\n----------------------------------------\n\nTITLE: Configuring Individual TLC5971 Outputs\nDESCRIPTION: This code snippet shows how to configure individual output channels for a TLC5971 driver in ESPHome. Each output configuration requires an ID and specifies a channel number in the chain. The optional 'tlc5971_id' can be used to manually specify the TLC5971 component ID. Inputs include IDs and channel numbers, linked to specific platform outputs.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/output/tlc5971.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Individual outputs\\noutput:\\n  - platform: tlc5971\\n    id: output_red\\n    channel: 0\\n  - platform: tlc5971\\n    id: output_green\\n    channel: 1\\n  - platform: tlc5971\\n    id: output_blue\\n    channel: 2\n```\n\n----------------------------------------\n\nTITLE: Setting BLE Descriptor Value in YAML\nDESCRIPTION: This snippet shows how to use the ble_server.descriptor action to set the value of a BLE descriptor. It sets the descriptor value to a byte array [0, 1, 2].\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/esp32_ble_server.rst#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - ble_server.descriptor:\n        id: test_write_descriptor\n        value: [0, 1, 2]\n```\n\n----------------------------------------\n\nTITLE: Cover Component REST Response Format\nDESCRIPTION: JSON response format for a GET request to a cover endpoint showing the cover's current state, position, operation and tilt information.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/web-api/index.rst#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"cover-front_window_blinds\",\n  \"state\": \"OPEN\",\n  \"value\": 0.8,\n  \"current_operation\": \"IDLE\",\n  \"tilt\": 0.5\n}\n```\n\n----------------------------------------\n\nTITLE: Pump State Binary Sensor Configuration in YAML\nDESCRIPTION: Configuration for a binary sensor that indicates whether the pump is currently running or not.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/ezo_pmp.rst#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nbinary_sensor:\n  - platform: ezo_pmp\n    pump_state:\n      id: pump_state\n      name: Pump State\n```\n\n----------------------------------------\n\nTITLE: Debouncing GPIO Binary Sensor with Delayed Off Filter in ESPHome\nDESCRIPTION: This snippet demonstrates debouncing a GPIO binary sensor using a 'delayed_off' filter. It publishes an ON value immediately but waits 10ms before publishing an OFF value.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/gpio.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nbinary_sensor:\n  - platform: gpio\n    pin: D2\n    name: ...\n    filters:\n      - delayed_off: 10ms\n```\n\n----------------------------------------\n\nTITLE: Configuring RC522 with IÂ²C Communication\nDESCRIPTION: Example configuration for RC522 NFC/RFID controller using IÂ²C communication protocol with a binary sensor setup for tag detection.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/rc522.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ni2c:\n\nrc522_i2c:\n\nbinary_sensor:\n  - platform: rc522\n    uid: 74-10-37-94\n    name: \"RC522 RFID Tag\"\n```\n\n----------------------------------------\n\nTITLE: Advanced Pin Configuration in YAML\nDESCRIPTION: This advanced configuration example shows how to specify extra pin parameters such as inversion and mode settings, including input and pullup options for the rotary encoder sensor. These parameters are also defined using YAML.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/rotary_encoder.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Example of advanced pin configuration\npin_a:\n  number: D5\n  inverted: true\n  mode:\n    input: true\n    pullup: true\n```\n\n----------------------------------------\n\nTITLE: Triggering Manual Fan Cleaning for SEN5x Sensor in ESPHome\nDESCRIPTION: This code snippet demonstrates how to manually trigger the fan-cleaning procedure for a SEN5x sensor using the 'sen5x.start_fan_autoclean' action. The action is applied to a sensor device named 'sen54'.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/sen5x.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - sen5x.start_fan_autoclean: sen54\n```\n\n----------------------------------------\n\nTITLE: Configuring CST226 Touchscreen in ESPHome YAML\nDESCRIPTION: Basic configuration for setting up a CST226 touchscreen in ESPHome. Includes the platform specification, ID assignment, and interrupt pin configuration.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/touchscreen/cst226.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\ntouchscreen:\n  platform: cst226\n  id: my_touchscreen\n  interrupt_pin: GPIOXX\n```\n\n----------------------------------------\n\nTITLE: Basic TM1651 Display Configuration in YAML\nDESCRIPTION: Basic configuration structure for initializing a TM1651 battery display with required pin assignments.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/tm1651.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntm1651:\n    id: tm1651_battery\n    clk_pin: GPIOXX\n    dio_pin: GPIOXX\n```\n\n----------------------------------------\n\nTITLE: Decrementing Number Value\nDESCRIPTION: This action decrements the number value by its defined step size. Cycling behavior can be configured when limits are reached.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/number/index.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n- number.decrement:\n    id: my_number\n    cycle: false\n\n# Shorthand\n- number.decrement: my_number\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Request Update Platform in YAML\nDESCRIPTION: Example configuration entry for setting up the http_request update platform in ESPHome. It specifies the platform, name, and source URL for the update manifest.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/update/http_request.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nupdate:\n  - platform: http_request\n    name: Firmware Update\n    source: http://example.com/manifest.json\n```\n\n----------------------------------------\n\nTITLE: Stopping an ESPHome Script Execution\nDESCRIPTION: This example shows how to stop a script during its execution, either by invoking the stop action within a trigger or through a lambda function. If the script is not running, the stop action performs no operation.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/script.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nscript:\n  - id: my_script\n    then:\n      - switch.turn_on: my_switch\n      - delay: 1s\n      - switch.turn_off: my_switch\n\n# in a trigger:\non_...:\n  then:\n    - script.stop: my_script\n```\n\nLANGUAGE: yaml\nCODE:\n```\nlambda: 'id(my_script).stop();'\n```\n\n----------------------------------------\n\nTITLE: Transmitting RC6 IR Codes with YAML\nDESCRIPTION: This example shows the transmission of RC6 infrared remote codes. Configuration demands both an address and command. The snippet requires a fully configured remote transmitter component for function.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/remote_transmitter.rst#2025-04-21_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - remote_transmitter.transmit_rc6:\n      address: 0x1F\n      command: 0x3F\n```\n\n----------------------------------------\n\nTITLE: Starting Documentation Server\nDESCRIPTION: Command to build documentation and start a live-updating web server on port 8000.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/contributing.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake live-html\n```\n\n----------------------------------------\n\nTITLE: Nextion Text Sensor Publish Action Configuration\nDESCRIPTION: Example showing how to publish states to a Nextion text sensor including templated options and configuration variables.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/text_sensor/nextion.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntext_sensor:\n  - platform: nextion\n    id: nextion_text\n    ...\n# in some trigger\non_...:\n  - text_sensor.nextion.publish:\n      id: nextion_text\n      state: \"Hello World\"\n      # These are optional. Defaults to true.\n      publish_state: true\n      send_to_nextion: true\n  # Templated\n  - text_sensor.nextion.publish:\n      id: nextion_text\n      state: !lambda 'return \"Hello World\";'\n      # These are optional. Defaults to true.\n      publish_state: true\n      send_to_nextion: true\n```\n\n----------------------------------------\n\nTITLE: Set Display Brightness Action\nDESCRIPTION: Action configuration for setting the display brightness level (1-3).\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/tm1651.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - tm1651.set_brightness:\n      id: tm1651_battery\n      brightness: 1\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Buttons for MicroNova in YAML\nDESCRIPTION: This code block outlines a configuration for setting up a custom button on the MicroNova system using YAML. The button configuration uses `memory_location`, `memory_address`, and `memory_data` to specify exactly what data should be sent when the button is pressed.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/micronova.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nbutton:\n  - platform: micronova\n    custom_button:\n      name: Custom button\n      memory_location: 0x20\n      memory_address: 0x7d\n      memory_data: 0x08\n```\n\n----------------------------------------\n\nTITLE: Configuring Select Entity in YAML\nDESCRIPTION: This YAML snippet demonstrates the basic configuration of a select entity, specifying an optional icon and required properties like id and name. This setup is necessary to create a selectable list for the user or the frontend.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/select/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"    # Example select configuration\\n    name: Livingroom Mood\\n    id: my_select\\n\\n    # Optional variables:\\n    icon: \\\"mdi:emoticon-outline\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Pressing Button in Lambda Function\nDESCRIPTION: Example showing how to programmatically press a button using C++ lambda functions.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/button/index.rst#2025-04-21_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\n// Within lambda, press the button.\nid(my_button).press();\n```\n\n----------------------------------------\n\nTITLE: Automation Trigger for Motion Detection\nDESCRIPTION: This snippet illustrates the automation action that occurs when the device detects any changes in motion, logging this activity to the logger.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/msa3xx.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n\"msa3xx:\\n  type: msa301\\n  # ...\\n  on_active:\\n    - then: \\n        - logger.log: \\\"Activity detected\\\"\"\n```\n\n----------------------------------------\n\nTITLE: BedJet Time Sync Lambda Function\nDESCRIPTION: Button configuration to synchronize BedJet clock with system time using lambda function.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/climate/bedjet.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nbutton:\n  - platform: template\n    name: \"Sync Clock\"\n    on_press:\n      then:\n      - lambda: |-\n          id(my_bedjet_fan).send_local_time();\n```\n\n----------------------------------------\n\nTITLE: Lambda Filter with Conditional Return in ESPHome\nDESCRIPTION: This example demonstrates how to prevent values from being published using a lambda filter. If the input value 'x' is less than 10, the lambda function returns an empty object '{}', effectively preventing the value from being published; otherwise, it returns x-10.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/index.rst#2025-04-21_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\n    filters:\n      - lambda: |-\n          if (x < 10) return {};\n          return x-10;\n\n```\n\n----------------------------------------\n\nTITLE: Configuring an LVGL Label Widget with a Symbol Font\nDESCRIPTION: This YAML snippet configures an LVGL label widget to display a symbol from a specified font. It sets the font and the unicode character for the symbol.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/widgets.rst#2025-04-21_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\n    - label:\n        align: TOP_MID\n        id: lbl_symbol\n        text_font: montserrat_28\n        text: \"\\uF013\"\n```\n\n----------------------------------------\n\nTITLE: GPIO-based Binary Sensor Configuration\nDESCRIPTION: Standalone GPIO configuration for presence detection without UART requirements.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/dfrobot_sen0395.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nbinary_sensor:\n  - platform: gpio\n    name: Presence Detected via GPIO\n    device_class: motion\n    pin:\n      number: GPIOXX\n      mode: INPUT_PULLDOWN\n```\n\n----------------------------------------\n\nTITLE: Publishing State to Template Text Sensor in YAML\nDESCRIPTION: Example of using the text_sensor.template.publish action to update the state of a template text sensor. It shows both static and templated state publishing.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/text_sensor/template.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntext_sensor:\n  - platform: template\n    name: \"Template Text Sensor\"\n    id: template_text\n\n# in some trigger\non_...:\n  - text_sensor.template.publish:\n      id: template_text\n      state: \"Hello World\"\n\n  # Templated\n  - text_sensor.template.publish:\n      id: template_text\n      state: !lambda 'return \"Hello World\";'\n```\n\n----------------------------------------\n\nTITLE: Cover Toggle Action in C++\nDESCRIPTION: Lambda implementation for toggling a cover state programmatically in C++.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/cover/index.rst#2025-04-21_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\nauto call = id(cover_1).make_call();\ncall.set_command_toggle();\ncall.perform();\n```\n\n----------------------------------------\n\nTITLE: Configuring Haier Climate Switches in ESPHome YAML\nDESCRIPTION: Example configuration for setting up additional switches for Haier AC units. Demonstrates how to configure beeper, health mode, display, and quiet mode switches with custom names.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/switch/haier.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nswitch:\n  - platform: haier\n    beeper:\n      name: Haier beeper\n    health_mode:\n      name: Haier health mode\n    display:\n      name: Haier display\n    quiet_mode:\n      name: Haier quiet mode\n```\n\n----------------------------------------\n\nTITLE: Advanced Printf Formatting in ESPHome Display\nDESCRIPTION: Shows more advanced printf formatting techniques for ESPHome displays, including multiple formatted items and displaying percentage signs.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/index.rst#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ndisplay:\n  - platform: ...\n    # ...\n    lambda: |-\n      // %% - literal % sign\n      it.printf(0, 0, id(my_font), \"Temperature: %.1fÂ°C, Humidity: %.1f%%\", id(temperature).state, id(humidity).state);\n```\n\n----------------------------------------\n\nTITLE: GPIO Binary Sensor Configuration\nDESCRIPTION: YAML configuration for a GPIO binary sensor with advanced pin settings including inversion and pullup mode\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/getting_started_command_line.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nbinary_sensor:\n  - platform: gpio\n    name: \"Living Room Window\"\n    pin:\n      number: 16\n      inverted: true\n      mode:\n        input: true\n        pullup: true\n```\n\n----------------------------------------\n\nTITLE: Retrieving Temperature Compensation from EZO Sensor\nDESCRIPTION: Lambda function to get the current temperature compensation value from an EZO sensor.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ezo.rst#2025-04-21_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\nid(ph_ezo).get_t();\n```\n\n----------------------------------------\n\nTITLE: Low Point pH Probe Calibration Configuration\nDESCRIPTION: Configuration for calibrating the pH probe at a low reference point. Requires pH reference value and temperature of the calibration solution.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ufire_ise.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: ufire_ise\n    id: ufire_ise_board\n    # ...\n\n# in some trigger\non_...:\n  - sensor.ufire_ise_board.calibrate_probe_low:\n      id: ufire_ise_board\n      solution: 4.0\n      temperature: !lambda \"return id(temperature_liquid).state;\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Component for LD2450 Radar\nDESCRIPTION: Allows performing restart and factory reset actions on the LD2450 radar device with configurable button entities\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ld2450.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nbutton:\n  - platform: ld2450\n    ld2450_id: ld2450_radar\n    factory_reset:\n      name: \"LD2450 Factory Reset\"\n    restart:\n      name: \"LD2450 Restart\"\n```\n\n----------------------------------------\n\nTITLE: Analyzing UART Hardware Interface\nDESCRIPTION: This example logging output shows how to verify if a hardware UART is being used for reading P1 data. The important line is \"Using hardware serial interface.\", which indicates that a hardware UART is in use.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/dsmr.rst#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n\"[02:38:37][C][uart.arduino_esp8266:095]: UART Bus:\n[02:38:37][C][uart.arduino_esp8266:097]:   RX Pin: GPIO13\n[02:38:37][C][uart.arduino_esp8266:099]:   RX Buffer Size: 1500\n[02:38:37][C][uart.arduino_esp8266:101]:   Baud Rate: 115200 baud\n[02:38:37][C][uart.arduino_esp8266:102]:   Data Bits: 8\n[02:38:37][C][uart.arduino_esp8266:103]:   Parity: NONE\n[02:38:37][C][uart.arduino_esp8266:104]:   Stop bits: 1\n[02:38:37][C][uart.arduino_esp8266:106]:   Using hardware serial interface.\n                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\"\n```\n\n----------------------------------------\n\nTITLE: Configuring LCD with Direct GPIO Connections in ESPHome\nDESCRIPTION: Example configuration for setting up a character-based LCD display using direct GPIO connections with ESPHome. This approach requires more pins but offers faster refresh rates than the IÂ²C method.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/lcd_display.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\ndisplay:\n  - platform: lcd_gpio\n    dimensions: 20x4\n    data_pins:\n      - GPIOXX\n      - GPIOXX\n      - GPIOXX\n      - GPIOXX\n    enable_pin: GPIOXX\n    rs_pin: GPIOXX\n    lambda: |-\n      it.print(\"Hello World!\");\n```\n\n----------------------------------------\n\nTITLE: Sensors for Knob Positions in m5stack_8angle\nDESCRIPTION: This YAML snippet shows how to create sensors for each of the 8 knobs on the m5stack_8angle. Utilizing the positional data, each sensor is assigned a channel and an optional bit depth for precision.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/m5stack_8angle.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: m5stack_8angle\n    m5stack_8angle_id: m5stack_8angle_base\n    channel: 1\n    name: \"Knob 1\"\n    bit_depth: 12 bit\n  - platform: m5stack_8angle\n    m5stack_8angle_id: m5stack_8angle_base\n    channel: 2\n    name: \"Knob 2\"\n```\n\n----------------------------------------\n\nTITLE: Setting Low Calibration Point for EZO Sensor\nDESCRIPTION: Lambda function to set the low calibration point for an EZO sensor, typically used for pH sensors.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ezo.rst#2025-04-21_snippet_11\n\nLANGUAGE: cpp\nCODE:\n```\nid(ph_ezo).set_calibration_point_low(4.00);\n```\n\n----------------------------------------\n\nTITLE: Filtering Out Specific Sensor Values in YAML\nDESCRIPTION: This snippet illustrates the usage of the `filter_out` configuration option, which enables the exclusion of specific sensor values from being processed or displayed.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/index.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\n- platform: wifi_signal\n  # ...\n  filters:\n    - filter_out: 85.0\n```\n\n----------------------------------------\n\nTITLE: Select Previous Action in YAML\nDESCRIPTION: This action snippet selects the previous option in the select component, with an optional cycle feature for wrapping to the last option when at the first option.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/select/index.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n\"    - select.previous:\\n        id: my_select\\n        cycle: true\\n\\n    # Shorthand\\n    - select.previous: my_select\"\n```\n\n----------------------------------------\n\nTITLE: Installing SDL2 on Linux\nDESCRIPTION: Command for installing SDL2, libsodium, and required build tools on Debian/Ubuntu systems.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/sdl.rst#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\napt install libsdl2-dev libsodium-dev build-essential git\n```\n\n----------------------------------------\n\nTITLE: Setting Repeat Cycles in YAML\nDESCRIPTION: Action to specify the number of times full cycles should be repeated.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sprinkler.rst#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - sprinkler.set_repeat:\n        id: sprinkler_ctrlr\n```\n\n----------------------------------------\n\nTITLE: Configuring Resampler Speaker in ESPHome YAML\nDESCRIPTION: Example configuration for setting up a resampler speaker in ESPHome. It specifies the output speaker, sample rate, and other optional parameters like buffer duration and bits per sample.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/speaker/resampler.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nspeaker:\n  - platform: resampler\n    output_speaker: output_speaker_id\n    sample_rate: 48000\n```\n\n----------------------------------------\n\nTITLE: Configuring Menu Navigation Up Action in ESPHome\nDESCRIPTION: YAML configuration for a display_menu.up action triggered by an anticlockwise rotary encoder turn.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display_menu/index.rst#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: rotary_encoder\n    ...\n    on_anticlockwise:\n      - display_menu.up:\n```\n\n----------------------------------------\n\nTITLE: Configuring SDL2 Touch Screen in ESPHome YAML\nDESCRIPTION: Basic configuration example for setting up the SDL touchscreen platform. The configuration allows mouse input emulation for touch events and requires the SDL display component to be configured.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/touchscreen/sdl.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\ntouchscreen:\n  platform: sdl\n```\n\n----------------------------------------\n\nTITLE: Scheduling Deep Sleep Until Specific Time on ESP32\nDESCRIPTION: Action to put an ESP32 device into deep sleep until a specific time of day, requiring a time component for synchronization.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/deep_sleep.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# ESP32 can sleep until a specific time of day.\non_...:\n  then:\n    - deep_sleep.enter:\n        id: deep_sleep_1\n        until: \"16:00:00\"\n        time_id: sntp_id\n```\n\n----------------------------------------\n\nTITLE: ESP8266 Voltage Multiplication Filter\nDESCRIPTION: Configuration for ESP8266 boards with voltage divider circuitry to scale up the 1.0V reading to 3.3V.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/adc.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: adc\n    # ...\n    filters:\n      - multiply: 3.3\n```\n\n----------------------------------------\n\nTITLE: Configuring LibreTiny Text Sensor in YAML for ESPHome\nDESCRIPTION: This snippet demonstrates how to set up a LibreTiny text sensor in an ESPHome configuration file. It exposes the LibreTiny core version as a text sensor named 'LibreTiny Version'.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/text_sensor/libretiny.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\ntext_sensor:\n  - platform: libretiny\n    version:\n      name: LibreTiny Version\n```\n\n----------------------------------------\n\nTITLE: Setting Time Values with datetime.time.set Action\nDESCRIPTION: Demonstration of three different ways to set a time value using the datetime.time.set action: using a string format, individual time parts, or a lambda function that returns an ESPTime struct.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/datetime/index.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# String time\n- datetime.time.set:\n    id: my_datetime_time\n    time: \"12:34:56\"\n\n# Individual time parts\n- datetime.time.set:\n    id: my_datetime_time\n    time:\n      hour: 12\n      minute: 34\n      second: 56\n\n# Using a lambda\n- datetime.time.set:\n    id: my_datetime_time\n    time: !lambda |-\n      // Return an ESPTime struct\n      return {.second = 56, .minute = 34, .hour = 12};\n```\n\n----------------------------------------\n\nTITLE: Configuring Sensor Copy in ESPHome\nDESCRIPTION: YAML configuration for creating a copy of an existing sensor. Requires source_id to specify the original sensor.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/copy.rst#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: copy\n    source_id: source_sensor\n    name: \"Copy of source_sensor\"\n```\n\n----------------------------------------\n\nTITLE: Sending Raw LightWaveRF Commands in ESPHome YAML\nDESCRIPTION: Example of using the lightwaverf.send_raw action to send captured raw data. Includes options for naming, specifying the code, repetition, and signal inversion.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lightwaverf.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - lightwaverf.send_raw:\n        code:  [0x04, 0x00, 0x00, 0x00, 0x0f, 0x03, 0x0d, 0x09, 0x08, 0x08]\n        name: \"Sofa\"\n        repeat: 1\n```\n\n----------------------------------------\n\nTITLE: Multiple LVGL Configurations in YAML\nDESCRIPTION: This YAML example shows how to set up multiple LVGL configurations, each tied to different displays. It illustrates how each configuration can have unique content using distinct identifiers. This method requires that the environment supports multiple displays.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/index.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nlvgl:\n  - id: lvgl_1\n    displays: display_1\n    widgets:\n      - label:\n          text: 'Hello World #1!'\n  - id: lvgl_2\n    displays: display_2\n    widgets:\n      - label:\n          text: 'Hello World #2!'\n\n```\n\n----------------------------------------\n\nTITLE: Configuring MQTT SSL Fingerprints\nDESCRIPTION: This YAML configuration shows how to specify SSL fingerprints for MQTT connections on ESP8266 devices, enhancing security by verifying the connection integrity.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/mqtt.rst#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nmqtt:\n  # ...\n  ssl_fingerprints:\n    - a502ff13999f8b398ef1834f1123650b3236fc07\n```\n\n----------------------------------------\n\nTITLE: Configuring DAC7678 Hub in ESPHome YAML\nDESCRIPTION: This snippet shows how to configure the DAC7678 hub in ESPHome using YAML. It sets the I2C address, assigns an ID to the hub, and enables/disables the internal reference. The hub serves as the base for defining individual output channels.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/output/dac7678.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"# Example configuration entry\ndac7678:\n    address: 0x4A\n    id: dac7678_hub1\n    internal_reference: true\"\n```\n\n----------------------------------------\n\nTITLE: Set Battery Level Direct Action\nDESCRIPTION: Action configuration for directly setting the battery display level from 0 to 7.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/tm1651.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - tm1651.set_level:\n      id: tm1651_battery\n      level: 5\n```\n\n----------------------------------------\n\nTITLE: Accessing Global Variables in ESPHome Lambda Functions\nDESCRIPTION: Example of using global variables within an automation lambda function. Shows how to access, modify and log global variables within C++ code blocks.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/globals.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# In an automation\non_...:\n  then:\n    - lambda: |-\n        if (id(my_global_int) > 5) {\n          // global value is greater than 5\n          id(my_global_int) += 1;\n        } else {\n          id(my_global_int) += 10;\n        }\n\n        ESP_LOGD(TAG, \"%s: %d\", id(my_global_string).c_str(), id(my_global_int));\n```\n\n----------------------------------------\n\nTITLE: Using Text Sensor State Condition in YAML\nDESCRIPTION: Demonstrates how to use a text sensor's state as a condition in automations.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/text_sensor/index.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - if:\n      condition:\n        # Checks if \"my_text_sensor\" has state \"Hello World\"\n        text_sensor.state:\n          id: my_text_sensor\n          state: 'Hello World'\n```\n\n----------------------------------------\n\nTITLE: Olimex ESP32-EVB Ethernet Configuration\nDESCRIPTION: Configuration example for the Olimex ESP32-EVB board with LAN8720 chipset using external clock mode on GPIO0.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/ethernet.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nethernet:\n  type: LAN8720\n  mdc_pin: GPIO23\n  mdio_pin: GPIO18\n  clk_mode: GPIO0_IN\n  phy_addr: 0\n```\n\n----------------------------------------\n\nTITLE: Configuring PWM Output in LibreTiny\nDESCRIPTION: This YAML configuration sets up a PWM output on a specified pin of a LibreTiny board with a frequency parameter. The ID is used within the light component to control the output, demonstrating integration with other components.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/output/libretiny_pwm.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"output:\\n  - platform: libretiny_pwm\\n    pin: P8\\n    frequency: 1000 Hz\\n    id: pwm_output\\n\\nlight:\\n  - platform: monochromatic\\n    output: pwm_output\\n    name: \\\"Kitchen Light\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Clearing All Calibration Data from EZO Sensor\nDESCRIPTION: Lambda function to reset and clear all calibration points from an EZO sensor.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ezo.rst#2025-04-21_snippet_14\n\nLANGUAGE: cpp\nCODE:\n```\nid(ph_ezo).clear_calibration();\n```\n\n----------------------------------------\n\nTITLE: Byron Doorbell RF Protocol Transmitter Configuration\nDESCRIPTION: Configures a remote transmitter action for sending Byron Doorbell RF protocol signals with specific address and command parameters.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/remote_transmitter.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - remote_transmitter.transmit_byronsx:\n      address: '0x4f'\n      command: '0x2'\n```\n\n----------------------------------------\n\nTITLE: Calibrated Pressure Sensor Configuration\nDESCRIPTION: Configuration example for calibrating the pressure sensor using real measured values to map raw sensor readings to actual pressure units.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/tem3200.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nfilters:\n  - calibrate_linear:\n    - 990 -> 5.0\n    - 13550 -> 90.0\n```\n\n----------------------------------------\n\nTITLE: LVGL Pause Action with Snow Effect\nDESCRIPTION: Action configuration for pausing LVGL activity with an optional snow effect to prevent screen burn-in. The show_snow parameter enables random colored pixels across the screen.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/index.rst#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - lvgl.pause:\n        show_snow: true\n```\n\n----------------------------------------\n\nTITLE: Configuring SDL Binary Sensor in YAML\nDESCRIPTION: Example configuration for creating a binary sensor that responds to keyboard presses using SDL. The sensor monitors for the 'a' key press and becomes true when the key is pressed.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/sdl.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbinary_sensor:\n  - platform: sdl\n    id: key_id\n    key: SDLK_a\n```\n\n----------------------------------------\n\nTITLE: Configuring LVGL Base Object Widget\nDESCRIPTION: Example showing how to configure a basic LVGL object widget with positioning and dimensions.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/widgets.rst#2025-04-21_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\n- obj:\n    x: 10\n    y: 10\n    width: 220\n    height: 300\n    widgets:\n      - ...\n```\n\n----------------------------------------\n\nTITLE: Web Server Configuration with Version 1 UI in YAML\nDESCRIPTION: Configuration to use version 1 of the user interface for the ESPHome web server.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/web_server.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nweb_server:\n  port: 80\n  version: 1\n```\n\n----------------------------------------\n\nTITLE: Configuring HDC1080 Temperature and Humidity Sensor\nDESCRIPTION: Basic configuration for HDC1080 sensor with temperature and humidity measurements. Requires IÂ²C bus setup and allows customization of sensor names and update interval.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/hdc1080.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: hdc1080\n    temperature:\n      name: \"Living Room Temperature\"\n    humidity:\n      name: \"Living Room Humidity\"\n    update_interval: 60s\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Copy in ESPHome\nDESCRIPTION: YAML configuration for creating a copy of an existing button. Requires source_id to specify the original button.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/copy.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nbutton:\n  - platform: copy\n    source_id: source_button\n    name: \"Copy of source_button\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Logger Settings in ESPHome\nDESCRIPTION: Basic logger configuration with debug level logging. Sets the global log level and enables detailed logging for troubleshooting and development.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/logger.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlogger:\n  level: DEBUG\n```\n\n----------------------------------------\n\nTITLE: JC4832W535 3.5\" LCD Board Configuration\nDESCRIPTION: Configuration for JC4832W535 LCD display with landscape rotation, PSRAM settings, and touchscreen integration using the AXS15231 controller.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/qspi_dbi.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\npsram:\n  mode: octal\n  speed: 80MHz\n\nspi:\n  id: display_qspi\n  type: quad\n  clk_pin: 47\n  data_pins: [21,48,40,39]\n\npower_supply:\n  id: backlight_id\n  pin: 1\n  enable_on_boot: true\n\ndisplay:\n  - platform: qspi_dbi\n    model: JC4832W535\n    data_rate: 40MHz\n    rotation: 270\n    dimensions:\n      height: 480\n      width: 320\n    cs_pin:\n      number: 45\n      ignore_strapping_warning: true\n    show_test_card: true\n\ni2c:\n  sda: 4\n  scl: 8\n\ntouchscreen:\n  platform: axs15231\n  transform:\n    swap_xy: true\n    mirror_y: true\n```\n\n----------------------------------------\n\nTITLE: Logging Number Value in ESPHome\nDESCRIPTION: This snippet shows how to retrieve the current value of a number component and log it using ESP_LOGI in ESPHome with C++. It assumes that the number component has an ID `my_number` and accesses its current state. It is important to note that the value will be `NAN` if no value has been read or set yet.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/number/index.rst#2025-04-21_snippet_12\n\nLANGUAGE: cpp\nCODE:\n```\n      // For example, create a custom log message when a value is received:\n      ESP_LOGI(\"main\", \"Value of my number: %f\", id(my_number).state);\n```\n\n----------------------------------------\n\nTITLE: Handling Misplaced Finger Scans\nDESCRIPTION: Triggered when a finger is detected on the sensor but isn't fully covering it, publishing a message stating 'Misplaced finger'. It activates only if the sensor is configured with the `sensing_pin` option.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/fingerprint_grow.rst#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\non_finger_scan_misplaced:\n  - text_sensor.template.publish:\n      id: fingerprint_state\n      state: \"Misplaced finger\"\n```\n\n----------------------------------------\n\nTITLE: Controlling a Valve with Specific Position in YAML\nDESCRIPTION: YAML configuration for an action to control a valve's position using the valve.control action.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/valve/index.rst#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - valve.control:\n        id: valve_1\n        position: 50%\n```\n\n----------------------------------------\n\nTITLE: UART Runtime Settings Access in C++\nDESCRIPTION: Code example showing how to read current UART settings using C++ lambda calls.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/uart.rst#2025-04-21_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\n// RX buffer size\nid(my_uart).get_rx_buffer_size();\n// Stop bits\nid(my_uart).get_stop_bits();\n// Data bits\nid(my_uart).get_data_bits();\n// Parity\nid(my_uart).get_parity();\n// Baud rate\nid(my_uart).get_baud_rate();\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic SPI Device Component in ESPHome\nDESCRIPTION: Example of using the general-purpose SPI device component to communicate with hardware not supported by a specific component. Shows how to configure and use the component with lambdas for reading and writing.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/spi.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nspi:\n    clk_pin: GPIOXX\n    mosi_pin: GPIOXX\n    miso_pin: GPIOXX\n    interface: hardware\n\nspi_device:\n    id: spidev\n    cs_pin: GPIOXX\n    data_rate: 2MHz\n    spi_mode: 3\n    bit_order: lsb_first\n\non...:\n  then:\n    - lambda: !lambda |-\n        id(spidev).enable();\n        id(spidev).write_byte(0x4F);\n        id(spidev).disable();\n```\n\n----------------------------------------\n\nTITLE: Converting WAV to Raw Audio using SOX\nDESCRIPTION: Command to convert WAV audio file to raw format with specific bit depth, encoding and endianness settings.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/audio_clips_for_i2s.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nsox startup.wav --bits 8 --encoding signed-integer --endian little startup_again.raw\n```\n\n----------------------------------------\n\nTITLE: Logging Arc Value Change with on_value Trigger in YAML\nDESCRIPTION: This YAML code shows how to use the `on_value` trigger to capture changes in the arc's value and log them. It demonstrates the event-driven nature of LVGL widgets within ESPHome and how to access event data, in this case the new arc value 'x'.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/widgets.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n    # Example trigger:\n    - arc:\n        ...\n        on_value:\n          - logger.log:\n              format: \"Arc value is: %.0f\"\n              args: [ 'x' ]\n\n```\n\n----------------------------------------\n\nTITLE: Updating Bar Widget Value with lvgl.bar.update Action in YAML\nDESCRIPTION: This YAML code demonstrates how to use the `lvgl.bar.update` action to dynamically change the value of a bar widget. It shows how LVGL widgets can be updated in response to events within ESPHome.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/widgets.rst#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n    # Example action:\n    on_...:\n      then:\n        - lvgl.bar.update:\n            id: bar_id\n            value: 55\n\n```\n\n----------------------------------------\n\nTITLE: Fan State Response\nDESCRIPTION: JSON response structure for a fan component showing state, speed level, and oscillation settings.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/web-api/index.rst#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"fan-living_room_fan\",\n  \"state\": \"ON\",\n  \"value\": true,\n  \"speed_level\": 2,\n  \"oscillation\": false\n}\n```\n\n----------------------------------------\n\nTITLE: LEDC Output Configuration for Buzzer (YAML)\nDESCRIPTION: This YAML configuration shows how to set up an LEDC output for controlling a piezo buzzer with ESPHome. The snippet configures the output platform as 'ledc', assigns GPIO12 to the buzzer, and sets an ID for it.  It shows how to use automation to turn the buzzer on, set the frequency, and adjust the PWM level.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/output/ledc.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n\n    # Configure the output\n    output:\n      - platform: ledc\n        ######################################################\n        # One buzzer leg connected to GPIO12, the other to GND\n        ######################################################\n        pin: GPIO12\n        id: buzzer\n\n    # Example usage in an automation\n    on_press:\n        then:\n        ######################################################\n        # Must be turned on before setting frequency & level\n        ######################################################\n        - output.turn_on: buzzer\n        ######################################################\n        # Frequency sets the wave size\n        ######################################################\n        - output.ledc.set_frequency:\n            id: buzzer\n            frequency: \"1000Hz\"\n        ######################################################\n        # level sets the %age time the PWM is on\n        ######################################################\n        - output.set_level:\n            id: buzzer\n            level: \"50%\"\n\n```\n\n----------------------------------------\n\nTITLE: Switch Turn On Action in YAML\nDESCRIPTION: Action to turn on a switch with a specific ID. This can be used in automation triggers.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/switch/index.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - switch.turn_on: relay_1\n```\n\n----------------------------------------\n\nTITLE: Configuring On Open Trigger for Valve in YAML\nDESCRIPTION: YAML configuration for setting up a trigger when a valve reaches a fully open state.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/valve/index.rst#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nvalve:\n  - platform: template  # or any other platform\n    # ...\n    on_open:\n      - logger.log: \"Valve is Open!\"\n```\n\n----------------------------------------\n\nTITLE: Configuring a Modbus Controller Sensor in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure modbus_controller sensors by specifying platform details like modbus_controller_id, address, register type, and value type, among others. It defines sensors for recording PV array input voltage and battery capacity, with measurements specified in volts and ampere-hours, respectively. Requires a configured modbus_controller component with modbus1 identifier.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/modbus_controller.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- platform: modbus_controller\n  modbus_controller_id: modbus1\n  id: pv_input_voltage\n  name: \"PV array input voltage\"\n  address: 0x3100\n  unit_of_measurement: \"V\" ## for any other unit the value is returned in minutes\n  register_type: read\n  value_type: U_WORD\n  accuracy_decimals: 1\n  filters:\n    - multiply: 0.01\n\n- platform: modbus_controller\n  modbus_controller_id: modbus1\n  name: \"Battery Capacity\"\n  id: battery_capacity\n  register_type: holding\n  address: 0x9001\n  unit_of_measurement: \"AH\"\n  value_type: U_WORD\n```\n\n----------------------------------------\n\nTITLE: Rotary Encoder Navigation Configuration\nDESCRIPTION: Configuration for a rotary encoder to provide menu navigation with debounce filtering and direction controls.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display_menu/lcd_menu.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: rotary_encoder\n    ...\n    filters:\n      debounce: 30ms\n    on_anticlockwise:\n      - display_menu.up:\n    on_clockwise:\n      - display_menu.down:\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Value Automation in YAML\nDESCRIPTION: Shows how to set up an automation triggered when a new text value is published. The example logs the new value.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/text/index.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntext:\n  - platform: template\n    # ...\n    on_value:\n      then:\n        - logger.log:\n            format: \"%s\"\n            args: [\"x.c_str()\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Restart Button in ESPHome YAML\nDESCRIPTION: Basic YAML configuration for setting up a restart button component in ESPHome. This allows remote rebooting of the ESP device through Home Assistant with a named button entity.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/button/restart.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nbutton:\n  - platform: restart\n    name: \"Living Room Restart\"\n```\n\n----------------------------------------\n\nTITLE: Handling HTTP Response in ESPHome\nDESCRIPTION: Example of handling the response from an HTTP request, including logging the status code and duration.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/http_request.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\non_...\n  then:\n    - http_request.get:\n        url: https://esphome.io\n        on_response:\n          then:\n            - logger.log:\n                format: \"Response status: %d, Duration: %u ms\"\n                args:\n                  - response->status_code\n                  - response->duration_ms\n            - lambda: |-\n                ESP_LOGD(TAG, \"Response status: %d, Duration: %u ms\", response->status_code, response->duration_ms);\n        on_error:\n          then:\n            - logger.log: \"Request failed!\"\n```\n\n----------------------------------------\n\nTITLE: Configuring SHTC1/SHTC3 Sensor in ESPHome\nDESCRIPTION: Example YAML configuration for setting up an SHTC1/SHTC3 temperature and humidity sensor. The configuration specifies sensor names, I2C address, and update interval. Requires IÂ²C bus to be configured.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/shtcx.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: shtcx\n    temperature:\n      name: \"Living Room Temperature\"\n    humidity:\n      name: \"Living Room Humidity\"\n    address: 0x70\n    update_interval: 60s\n```\n\n----------------------------------------\n\nTITLE: PIPSolar Output Level Automation in ESPHome\nDESCRIPTION: Example automation configuration for setting output levels on PIPSolar devices. Demonstrates how to control output values in automations or templates.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/pipsolar.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n  - output.pipsolar.set_level:\n      id: my_pipsolar_output\n      value: 48.0\n```\n\n----------------------------------------\n\nTITLE: Setting Up IR Receiver with Climate Controller\nDESCRIPTION: Configuration example showing how to integrate an IR receiver with a climate controller to listen to data sent by the climate device and update state accordingly.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/climate/climate_ir.rst#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nremote_receiver:\n  id: rcvr\n  pin:\n    number: GPIOXX\n    inverted: true\n    mode:\n      input: true\n      pullup: true\n  # high 55% tolerance is recommended for some remote control units\n  tolerance: 55%\n\nclimate:\n  - platform: REPLACEME\n    name: \"Living Room AC\"\n    receiver_id: rcvr\n```\n\n----------------------------------------\n\nTITLE: Configuring GPIO Pin in YAML for ESP8266\nDESCRIPTION: Example of configuring a GPIO pin as a binary sensor on an ESP8266 board in ESPHome. It demonstrates how to use the GPIO17 pin.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/esp8266.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nesphome:\n  name: livingroom\n\nesp8266:\n  board: nodemcuv2\n\nbinary_sensor:\n  - platform: gpio\n    name: \"Pin GPIO17\"\n    pin: GPIO17\n```\n\n----------------------------------------\n\nTITLE: Submenu Configuration Example\nDESCRIPTION: Example of configuring a submenu with labels and back functionality.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display_menu/index.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nitems:\n  - type: menu\n    text: 'My Submenu'\n    on_enter:\n      then:\n        lambda: 'ESP_LOGI(\"display_menu\", \"enter: %s\", it->get_text().c_str());'\n    on_leave:\n      then:\n        lambda: 'ESP_LOGI(\"display_menu\", \"leave: %s\", it->get_text().c_str());'\n    items:\n      - type: label\n        text: 'Label'\n      - type: back\n        text: 'Back'\n```\n\n----------------------------------------\n\nTITLE: Configuring AS3935 Lightning Sensor with SPI Communication\nDESCRIPTION: YAML configuration for setting up AS3935 sensor using SPI protocol. Requires specification of chip select and IRQ pins, with optional parameters for tuning sensor behavior and sensitivity.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/as3935.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration for SPI\nas3935_spi:\n  cs_pin: GPIOXX\n  irq_pin: GPIOXX\n```\n\n----------------------------------------\n\nTITLE: Calling Select API in C++\nDESCRIPTION: This C++ code snippet demonstrates how to manipulate the select state and retrieve its current status within a lambda function. The methods available provide a comprehensive way to interact with the select entity programmatically.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/select/index.rst#2025-04-21_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\n\"      // Within lambda, select the \\\"Happy\\\" option.\\n      auto call = id(my_select).make_call();\\n      call.set_option(\\\"Happy\\\");\\n      call.perform();\"\n```\n\nLANGUAGE: cpp\nCODE:\n```\n\"      // For example, create a custom log message when an option is selected: \\n      auto state = id(my_select).state.c_str();\\n      ESP_LOGI(\\\"main\\\", \\\"Option of my select: %s\\\", state);\"\n```\n\nLANGUAGE: cpp\nCODE:\n```\n\"      // Check if a specific option is selected\\n      - if:\\n          condition:\\n            - lambda: 'return id(my_select).state == \\\"my_option_value\\\";'\"\n```\n\nLANGUAGE: cpp\nCODE:\n```\n\"      auto size = id(my_select).size();\\n      ESP_LOGI(\\\"main\\\", \\\"Select has %d options\\\", size);\"\n```\n\nLANGUAGE: cpp\nCODE:\n```\n\"      auto index = id(my_select).index_of(\\\"Happy\\\");\\n      if (index.has_value()) {\\n        ESP_LOGI(\\\"main\\\", \\\"'Happy' is at index: %d\\\", index.value());\\n      } else {\\n        ESP_LOGE(\\\"main\\\", \\\"There is no option 'Happy'\\\");\\n      }\"\n```\n\nLANGUAGE: cpp\nCODE:\n```\n\"      auto index = id(my_select).active_index();\\n      if (index.has_value()) {\\n        ESP_LOGI(\\\"main\\\", \\\"Option at index %d is active\\\", index.value());\\n      } else {\\n        ESP_LOGI(\\\"main\\\", \\\"No option is active\\\");\\n      }\"\n```\n\nLANGUAGE: cpp\nCODE:\n```\n\"      auto index = 1;\\n      auto option = id(my_select).at(index);\\n      if (option.has_value()) {\\n        auto value = option.value();\\n        ESP_LOGI(\\\"main\\\", \\\"Option at %d is: %s\\\", index, value);\\n      } else {\\n        ESP_LOGE(\\\"main\\\", \\\"Index %d does not exist\\\", index);\\n      }\"\n```\n\n----------------------------------------\n\nTITLE: NTC Sensor Calibration with Resistance Values in ESPHome\nDESCRIPTION: This configuration shows how to configure an NTC sensor by measuring resistance values at different temperatures. The `calibration` section defines a mapping of resistance values to corresponding temperatures.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ntc.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n    # Example configuration entry\n    sensor:\n      - platform: ntc\n        # ...\n        calibration:\n          - 10.0kOhm -> 25Â°C\n          - 27.219kOhm -> 0Â°C\n          - 14.674kOhm -> 15Â°C\n```\n\n----------------------------------------\n\nTITLE: IAQ Classification Template Text Sensor\nDESCRIPTION: Template text sensor implementation for classifying air quality based on IAQ index\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/bme68x_bsec2.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ntext_sensor:\n  - platform: template\n    name: \"BME68x IAQ Classification\"\n    lambda: |-\n      if ( int(id(iaq).state) <= 50) {\n        return {\"Excellent\"};\n      }\n      else if (int(id(iaq).state) >= 51 && int(id(iaq).state) <= 100) {\n        return {\"Good\"};\n      }\n      else if (int(id(iaq).state) >= 101 && int(id(iaq).state) <= 150) {\n        return {\"Lightly polluted\"};\n      }\n      else if (int(id(iaq).state) >= 151 && int(id(iaq).state) <= 200) {\n        return {\"Moderately polluted\"};\n      }\n      else if (int(id(iaq).state) >= 201 && int(id(iaq).state) <= 250) {\n        return {\"Heavily polluted\"};\n      }\n      else if (int(id(iaq).state) >= 251 && int(id(iaq).state) <= 350) {\n        return {\"Severely polluted\"};\n      }\n      else if (int(id(iaq).state) >= 351) {\n        return {\"Extremely polluted\"};\n      }\n      else {\n        return {\"error\"};\n      }\n```\n\n----------------------------------------\n\nTITLE: Starting BLE Scan in C++\nDESCRIPTION: This C++ snippet demonstrates how to initiate the BLE scan using the previously defined tracker ID. It leverages the ESPHome API for Bluetooth functionality.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/esp32_ble_tracker.rst#2025-04-21_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\nid(ble_tracker_id).start_scan()\n```\n\n----------------------------------------\n\nTITLE: Total Volume Dosed Sensor Configuration in YAML\nDESCRIPTION: Configuration for a sensor that indicates the total volume in milliliters that has been dosed since the last time the pump was turned on. This value can be negative if the pump has been run in reverse.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/ezo_pmp.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: ezo_pmp\n    total_volume_dosed:\n      id: total_volume_dosed\n      name: Total Volume Dosed\n```\n\n----------------------------------------\n\nTITLE: BedJet Manual Clock Setting Lambda Function\nDESCRIPTION: Button configuration to manually set BedJet clock to a specific time using lambda function.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/climate/bedjet.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nbutton:\n  - platform: template\n    name: \"Set Clock to 10:10pm\"\n    on_press:\n      then:\n      - lambda: |-\n          id(my_bedjet_fan).set_clock(22, 10);\n```\n\n----------------------------------------\n\nTITLE: LVGL Widget Redraw Action\nDESCRIPTION: Action configuration for redrawing the entire LVGL screen or a specific widget. The lvgl_id parameter is required when multiple LVGL instances are configured.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/index.rst#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - lvgl.widget.redraw:\n        lvgl_id: lvgl1  # optional when only one LVGL instance is configured\n```\n\n----------------------------------------\n\nTITLE: Basic ES7210 Configuration in YAML\nDESCRIPTION: Simple example showing the minimal configuration required to setup an ES7210 audio ADC in ESPHome.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/audio_adc/es7210.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\naudio_adc:\n  - platform: es7210\n```\n\n----------------------------------------\n\nTITLE: Starting Fingerprint Enrollment\nDESCRIPTION: Triggers the fingerprint enrollment process specifying the slot and optional number of scans. Allows for visual feedback through text sensor updates. This snippet is fundamental for beginning a new fingerprint entry.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/fingerprint_grow.rst#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - fingerprint_grow.enroll:\n        finger_id: 0\n        num_scans: 2\n    - fingerprint_grow.enroll: 0\n    - text_sensor.template.publish:\n        id: fingerprint_state\n        state: \"Place a finger on the reader\"\n```\n\n----------------------------------------\n\nTITLE: Turn Off Display Action\nDESCRIPTION: Action configuration for turning off all LEDs on the display.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/tm1651.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - tm1651.turn_off:\n      id: tm1651_battery\n```\n\n----------------------------------------\n\nTITLE: Select Last Action in YAML\nDESCRIPTION: This action snippet sets the selection to the last option in the select component, providing a quick way for users to navigate to the end of the option list.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/select/index.rst#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n\"    - select.last:\\n        id: my_select\\n\\n    # Shorthand\\n    - select.last: my_select\"\n```\n\n----------------------------------------\n\nTITLE: Basic Event Component Configuration in YAML\nDESCRIPTION: Example configuration for setting up an event component in ESPHome. It includes the basic structure with optional parameters like icon, device class and event triggers.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/event/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example event configuration\nevent:\n  - platform: ...\n    name: Motion Detected Event\n    id: my_event\n\n    # Optional variables:\n    icon: \"mdi:motion-sensor\"\n    device_class: \"motion\"\n    on_event:\n      then:\n        - logger.log: \"Event triggered\"\n```\n\n----------------------------------------\n\nTITLE: Binary Sensor State Condition in YAML\nDESCRIPTION: Configuration example showing how to use binary sensor state as a condition in automations.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/index.rst#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  if:\n    condition:\n      binary_sensor.is_on: my_binary_sensor\n```\n\n----------------------------------------\n\nTITLE: Defining Custom MQTT Message\nDESCRIPTION: This YAML snippet demonstrates how to define a custom MQTT message with specific topic, payload, QoS, and retain settings. It shows the different ways to define a MQTT message, from simple to advanced.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/mqtt.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n\"# Simple:\nsome_option: topic/to/send/to\n\n# Disable:\nsome_option:\n\n# Advanced:\nsome_option:\n  topic: topic/to/send/to\n  payload: online\n  qos: 0\n  retain: true\"\n```\n\n----------------------------------------\n\nTITLE: Cancelling Enrollment Process\nDESCRIPTION: Stops the current ongoing fingerprint enrollment, triggering any associated on_enrollment_failed actions. Convenient for halting operations when certain conditions aren't met or for error handling.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/fingerprint_grow.rst#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - fingerprint_grow.cancel_enroll:\n```\n\n----------------------------------------\n\nTITLE: Configuring CSE7761 Sensors in ESPHome Configuration\nDESCRIPTION: This YAML snippet demonstrates how to configure the CSE7761 sensor platform within ESPHome. It includes configuration for voltage, two current channels, and two active power channels. Required parameters include specifying UART bus configuration with communication pins and settings like baud rate and parity.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/cse7761.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\\nsensor:\\n  - platform: cse7761\\n    voltage:\\n      name: 'CSE7761 Voltage'\\n    current_1:\\n      name: 'CSE7761 Current 1'\\n    current_2:\\n      name: 'CSE7761 Current 2'\\n    active_power_1:\\n      name: 'CSE7761 Active Power 1'\\n    active_power_2:\\n      name: 'CSE7761 Active Power 2'\n```\n\n----------------------------------------\n\nTITLE: Configuring Valve Delay Settings in ESPHome Sprinkler\nDESCRIPTION: YAML configuration for setting up valve timing delays for pressure-sensitive systems.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sprinkler.rst#2025-04-21_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nsprinkler:\n  - id: lawn_sprinkler_ctrlr\n    pump_start_valve_delay: 3s\n    pump_stop_pump_delay: 3s\n    ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Inverted Status LED in ESPHome YAML\nDESCRIPTION: This snippet demonstrates how to configure an active-LOW status LED in ESPHome. It uses the 'inverted' option in the Pin Schema to indicate that the LED is on when the output is enabled.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/status_led.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nstatus_led:\n  pin:\n    number: GPIOXX\n    inverted: true\n```\n\n----------------------------------------\n\nTITLE: Initializing PipSolar Component in ESPHome\nDESCRIPTION: Basic configuration for setting up a PipSolar inverter component with a unique ID and optional UART bus ID\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/pipsolar.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npipsolar:\n  - id: inverter0\n```\n\n----------------------------------------\n\nTITLE: Configuring Grayscale Display Output\nDESCRIPTION: Example configuration showing how to use grayscale capabilities with color definitions and drawing rectangles.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/ssd1327.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncolor:\n  - id: medium_gray\n    white: 50%\n\n...\n\ndisplay:\n    ...\n    lambda: |-\n      it.rectangle(0,  0, it.get_width(), it.get_height(), id(medium_gray));\n```\n\n----------------------------------------\n\nTITLE: Converting Raw Audio to C++ Hex Array\nDESCRIPTION: Command to convert raw audio file into a hexadecimal array in C++ format.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/audio_clips_for_i2s.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nxxd -i startup_again.raw startup.c\n```\n\n----------------------------------------\n\nTITLE: Dual Provider UDP Configuration\nDESCRIPTION: Example of UDP configuration with internal and external providers, showing how to separate data broadcasting for different consumers with different security settings.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/udp.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nudp:\n  - id: udp_internal\n    update_interval: 10s\n    sensors:\n      - temp_outdoor\n      - temp_rooma\n      - temp_roomb\n      - temp_roomc\n      - temp_garage\n      - temp_water\n      - humi_rooma\n      - humi_roomb\n      - humi_roomc\n\n  - id: udp_external\n    update_interval: 60s\n    encryption: \"Muddy Waters\"\n    ping_pong_enable: true\n    rolling_code_enable: true\n    port: 38512\n    addresses:\n      - 10.87.135.110\n    binary_sensors:\n      - binary_sensor_door\n    sensors:\n      - temp_outdoor\n\nbinary_sensor:\n  - platform: udp\n    id: binary_sensor_unlock\n    udp_id: udp_external\n    provider: remote-node\n    remote_id: binary_sensor_unlock_me\n    on_press:\n      - lambda: |-\n          ESP_LOGI(\"main\", \"d command to binary_sensor_unlock\");\n```\n\n----------------------------------------\n\nTITLE: Defining OpenTherm Hub Configuration in YAML\nDESCRIPTION: This snippet demonstrates how to define the OpenTherm hub configuration, specifying the input and output pins for the OpenTherm bridge. Both pins are required for communication with the heating system.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/opentherm.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopentherm:\n  in_pin: GPIOXX\n  out_pin: GPIOXX\n```\n\n----------------------------------------\n\nTITLE: Host Platform UART Configuration\nDESCRIPTION: YAML configuration for UART on host platform using Unix-style ports instead of physical pins.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/uart.rst#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry for host platform\nuart:\n  baud_rate: 9600\n  port: \"/dev/ttyUSB0\"\n```\n\n----------------------------------------\n\nTITLE: Setting Valve Run Duration in ESPHome Sprinkler\nDESCRIPTION: YAML configuration for setting a valve's run duration using the sprinkler.set_valve_run_duration action.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sprinkler.rst#2025-04-21_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - sprinkler.set_valve_run_duration:\n        id: sprinkler_ctrlr\n        valve_number: 0\n        run_duration: 600s\n```\n\n----------------------------------------\n\nTITLE: Docker Command to Purge Retained Messages\nDESCRIPTION: This command demonstrates how to run the purge operation in a Docker container, removing all retained messages from the specified MQTT topic.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/mqtt.rst#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -v \"${PWD}\":/config -it ghcr.io/esphome/esphome clean-mqtt configuration.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Audio DAC in ESPHome YAML\nDESCRIPTION: Basic configuration entry for the audio_dac component in ESPHome. The platform needs to be specified in place of the ellipsis.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/audio_dac/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\naudio_dac:\n  - platform: ...\n```\n\n----------------------------------------\n\nTITLE: ABC Disable Action\nDESCRIPTION: Action configuration to disable Automatic Baseline Calibration on the sensor.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/senseair.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - senseair.abc_disable: my_senseair_id\n```\n\n----------------------------------------\n\nTITLE: Monitoring MOS Status with Binary Sensor\nDESCRIPTION: This snippet configures two binary sensors to monitor the status of the charging and discharging MOS related to the Daly BMS operation.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/daly_bms.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n\"    binary_sensor:\\n      - platform: daly_bms\\n        charging_mos_enabled:\\n          name: \\\"Charging MOS\\\"\\n        discharging_mos_enabled:\\n          name: \\\"Discharging MOS\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Cover Close Action in C++\nDESCRIPTION: Lambda implementation for closing a cover programmatically in C++.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/cover/index.rst#2025-04-21_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nauto call = id(cover_1).make_call();\ncall.set_command_close();\ncall.perform();\n```\n\n----------------------------------------\n\nTITLE: Closing a Valve Using Action in YAML\nDESCRIPTION: YAML configuration for an action to close a valve with a specific ID when triggered.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/valve/index.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - valve.close: valve_1\n```\n\n----------------------------------------\n\nTITLE: Starting or Resuming DF-Player Playback in ESPHome\nDESCRIPTION: Action to start playing a track or resume previously paused playback.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/dfplayer.rst#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - dfplayer.start\n```\n\n----------------------------------------\n\nTITLE: Removing Entries from ESPHome Package Configurations\nDESCRIPTION: This YAML code demonstrates how to use the `!remove` functionality in ESPHome to delete specific configuration entries. For instance, shared components like the uptime sensor or captive portal can be removed from certain device configurations.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/packages.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\npackages:\n  common: !include common.yaml  # see above\n\nsensor:\n  - id: !remove uptime_sensor\n```\n\nLANGUAGE: yaml\nCODE:\n```\npackages:\n  common: !include common.yaml  # see above\n\ncaptive_portal: !remove\n```\n\n----------------------------------------\n\nTITLE: Emulation Off Action\nDESCRIPTION: This YAML snippet demonstrates how to use the ``tag.emulation_off`` action to disable card emulation mode. The action is triggered within an automation (``on_...``) and references the ID of the PN7150 component.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/pn7150.rst#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - tag.emulation_off: my_pn7150_id\n```\n\n----------------------------------------\n\nTITLE: Implementing Fan Oscillation Change Trigger in YAML\nDESCRIPTION: YAML configuration for setting up a trigger that activates when a fan's oscillation state is changed in ESPHome.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/fan/index.rst#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nfan:\n  - platform: speed # or any other platform\n    # ...\n    on_oscillating_set:\n    - logger.log:\n        format: \"Fan Oscillating State was changed to %s!\"\n        args: [ ONOFF(x) ]\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Position of Stepper Motor in ESPHome (C++)\nDESCRIPTION: This snippet demonstrates how to get the current position of a stepper motor. The 'current_position' property of the stepper motor object is accessed to retrieve the position as an integer.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/stepper/index.rst#2025-04-21_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\nint pos = id(my_stepper).current_position;\n```\n\n----------------------------------------\n\nTITLE: Olimex ESP32-GATEWAY and LILYGO TTGO T-Internet-POE Configuration\nDESCRIPTION: Ethernet configuration for Olimex ESP32-GATEWAY and LILYGO TTGO T-Internet-POE boards using LAN8720 chipset with GPIO17 clock output.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/ethernet.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nethernet:\n  type: LAN8720\n  mdc_pin: GPIO23\n  mdio_pin: GPIO18\n  clk_mode: GPIO17_OUT\n  phy_addr: 0\n```\n\n----------------------------------------\n\nTITLE: Playing RTTTL Tone Action - YAML\nDESCRIPTION: This snippet illustrates how to use the RTTTL play action within an automation. It specifies the RTTTL string to be played.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/rtttl.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n\"on_...:\\n  then:\\n    - rtttl.play: 'siren:d=8,o=5,b=100:d,e,d,e,d,e,d,e'\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Pump Delay Settings in ESPHome Sprinkler\nDESCRIPTION: YAML configuration for setting up pump start and stop delays to prevent pressure buildup.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sprinkler.rst#2025-04-21_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nsprinkler:\n  - id: lawn_sprinkler_ctrlr\n    pump_start_pump_delay: 3s\n    pump_stop_valve_delay: 3s\n    ...\n```\n\n----------------------------------------\n\nTITLE: Media Player Pause Trigger in ESPHome\nDESCRIPTION: This YAML snippet demonstrates how to use the `on_pause` trigger in ESPHome to perform an action when the media player pauses. The example shows logging a message.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/media_player/index.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nmedia_player:\n  - platform: i2s_audio  # or any other platform\n    # ...\n    on_pause:\n      - logger.log: \"Playback paused!\"\n```\n\n----------------------------------------\n\nTITLE: Manual Fan Auto-Clean Action Configuration\nDESCRIPTION: YAML configuration for triggering manual fan cleaning action on the SPS30 sensor.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/sps30.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - sps30.start_fan_autoclean: my_sps30\n```\n\n----------------------------------------\n\nTITLE: Increasing Volume on DF-Player in ESPHome\nDESCRIPTION: Action to turn up the volume of the DF-Player module by one step.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/dfplayer.rst#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - dfplayer.volume_up\n```\n\n----------------------------------------\n\nTITLE: Pump Pause State Binary Sensor Configuration in YAML\nDESCRIPTION: Configuration for a binary sensor that indicates whether a dosing action is currently paused.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/ezo_pmp.rst#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nbinary_sensor:\n  - platform: ezo_pmp\n    is_paused:\n      id: is_paused\n      name: Is Paused\n```\n\n----------------------------------------\n\nTITLE: QEMU Ethernet Configuration\nDESCRIPTION: Simple configuration for using the virtual Ethernet interface (OPENETH) when running ESP32 code in QEMU emulation.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/ethernet.rst#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nethernet:\n  type: OPENETH\n```\n\n----------------------------------------\n\nTITLE: Configuring MPR121 GPIO Output in YAML\nDESCRIPTION: This snippet shows how to configure an MPR121 touch electrode as a GPIO output in ESPHome. It demonstrates setting up an output on ELE10 (pin 10) of the MPR121 chip.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/mpr121.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\noutput:\n  - id: ext_5v_power\n    platform: gpio\n    pin:\n      mpr121: mpr121_component\n      number: 10\n      mode: OUTPUT\n      inverted: true\n```\n\n----------------------------------------\n\nTITLE: Pausing DF-Player Playback in ESPHome\nDESCRIPTION: Action to pause playback, which can later be resumed from the same position using dfplayer.start.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/dfplayer.rst#2025-04-21_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - dfplayer.pause\n```\n\n----------------------------------------\n\nTITLE: Playing Audio Clip in ESPHome\nDESCRIPTION: YAML configuration to play the included audio clip through an I2S speaker.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/audio_clips_for_i2s.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- speaker.play:\n    id: speaker\n    data: !lambda return startup_raw;\n```\n\n----------------------------------------\n\nTITLE: Configuring VBus Binary Sensors\nDESCRIPTION: Example configuration for VBus binary sensors including relay states, sensor errors, and system options\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/vbus.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nbinary_sensor:\n  - platform: vbus\n    model: deltasol_bs_plus\n    relay1:\n      name: Relay 1 On\n    relay2:\n      name: Relay 2 On\n    sensor1_error:\n      name: Sensor 1 Fault\n    sensor2_error:\n      name: Sensor 2 Fault\n    sensor3_error:\n      name: Sensor 3 Fault\n    sensor4_error:\n      name: Sensor 4 Fault\n    collector_max:\n      name: Option Collector Max\n    collector_min:\n      name: Option Collector Min\n    collector_frost:\n      name: Option Collector Frost\n    tube_collector:\n      name: Option Tube Collector\n    recooling:\n      name: Option Recooling\n    hqm:\n      name: Option Heat Quantity Measurement\n```\n\n----------------------------------------\n\nTITLE: Configuring UDP Binary Sensor in YAML\nDESCRIPTION: Example configuration for setting up a UDP binary sensor that receives data from another ESPHome node. Demonstrates basic setup with provider and remote ID specification.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/udp.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nbinary_sensor:\n  - platform: udp\n    id: switch_status\n    provider: light-switch\n    remote_id: light_switch\n```\n\n----------------------------------------\n\nTITLE: Extending Sprinkler Controller Switches in ESPHome\nDESCRIPTION: Example showing how to extend switch configurations in the sprinkler controller with additional properties and actions.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sprinkler.rst#2025-04-21_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nsprinkler:\n  - id: sprinkler_ctrlr\n    main_switch:\n      name: \"Lawn Sprinklers\"\n      id: sprinkler_ctrlr_main_switch_id\n      on_turn_on:\n        light.turn_on: my_light\n```\n\n----------------------------------------\n\nTITLE: Configuring Peak Current Measurement with ATM90E32\nDESCRIPTION: YAML configuration for measuring signed peak current on Phase A using the ATM90E32 sensor platform. Includes the peak_current_signed parameter set to True.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/atm90e32.rst#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: atm90e32\n    phase_a:\n      peak_current:\n        name: ${disp_name} CT1 Peak Current\n  peak_current_signed: True\n```\n\n----------------------------------------\n\nTITLE: Configuring ESPHome Compile Process Limit in YAML\nDESCRIPTION: This YAML configuration snippet shows how to set the compile process limit for ESPHome. This is useful for running ESPHome on lower-powered machines like Raspberry Pi 3.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/changelog/2022.11.0.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nesphome:\n  ...\n  compile_process_limit: 1\n```\n\n----------------------------------------\n\nTITLE: Setting Temperature Compensation for EZO Sensor\nDESCRIPTION: Lambda function to set a specific temperature compensation value in Celsius for an EZO sensor.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ezo.rst#2025-04-21_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\nid(ph_ezo).set_t(\"27.00\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Number Copy in ESPHome\nDESCRIPTION: YAML configuration for creating a copy of an existing number. Requires source_id to specify the original number.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/copy.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nnumber:\n  - platform: copy\n    source_id: source_number\n    name: \"Copy of source_number\"\n```\n\n----------------------------------------\n\nTITLE: Allowing Deep Sleep After Prevention\nDESCRIPTION: Action to allow a device to enter deep sleep after it was previously prevented from doing so.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/deep_sleep.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - deep_sleep.allow: deep_sleep_1\n```\n\n----------------------------------------\n\nTITLE: OpenTherm Message Editing Example\nDESCRIPTION: This example demonstrates how to modify OpenTherm messages on-the-fly using the `before_send` and `before_process_response` automations. It overrides the message ID for DHW setpoint on a Daikin D2C boiler.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/opentherm.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nopentherm:\n    # Usual hub config\n    before_send:\n        then:\n            - lambda: |-\n                    if (x.id == 56) { // 56 is standard message id for DHW setpoint\n                        x.id = 162;     // message is passed by refence, so we can change anything, including message id\n                    }\n    before_process_response:\n        then:\n            - lambda: |-\n                    if (x.id == 162) { // We substitute the original id back, so that esphome is not confused.\n                    x.id = 56;\n                    }\n```\n\n----------------------------------------\n\nTITLE: LEDC Output Configuration for Light (YAML)\nDESCRIPTION: This snippet demonstrates how to configure an LEDC output for controlling a light in ESPHome. It defines the platform as 'ledc', specifies the GPIO pin, and assigns an ID to the output. This output can then be referenced in a light configuration.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/output/ledc.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\n    # Example configuration entry\n    output:\n      - platform: ledc\n        pin: GPIOXX\n        id: gpio_\n\n    # Example usage in a light\n    light:\n      - platform: monochromatic\n        output: gpio_19\n        name: \"Kitchen Light\"\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Haier Climate Buttons in YAML\nDESCRIPTION: YAML configuration example for setting up additional cleaning buttons for Haier AC units. Demonstrates how to configure both self-cleaning and 56Â°C steri-cleaning buttons with custom names. Requires a valid Haier climate component ID and only works with the hOn protocol.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/button/haier.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nbutton:\n  - platform: haier\n    haier_id: haier_ac\n    self_cleaning:\n      name: Haier start self cleaning\n    steri_cleaning:\n      name: Haier start 56Â°C steri-cleaning\n```\n\n----------------------------------------\n\nTITLE: Configuring Global LVGL Theme with Widget Styles\nDESCRIPTION: Demonstrates how to set global theme configurations for multiple widgets, including state-based styling for arc, slider, and button components\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/index.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nlvgl:\n  theme:\n    arc:\n      scroll_on_focus: true\n      group: general\n    slider:\n      scroll_on_focus: true\n      group: general\n    button:\n      scroll_on_focus: true\n      group: general\n      border_width: 2\n      outline_pad: 6\n      pressed:\n        border_color: 0xFF0000\n      checked:\n        border_color: 0xFFFF00\n      focused:\n        border_color: 0x00FF00\n```\n\n----------------------------------------\n\nTITLE: Executing LVGL Tabview Select Action in YAML\nDESCRIPTION: Example of using the lvgl.tabview.select action to programmatically change the selected tab in a tabview widget. Demonstrates setting the target tab index and animation option.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/widgets.rst#2025-04-21_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\n# Example action:\non_...:\n  then:\n    - lvgl.tabview.select:\n        id: tabview_id\n        index: 1\n        animated: true\n```\n\n----------------------------------------\n\nTITLE: Advanced MAX7219 Display Rendering Example\nDESCRIPTION: Complete example showing time display, image rendering, and line drawing with font configuration.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/max7219digit.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndisplay:\n  - platform: max7219digit\n    cs_pin: D8\n    num_chips: 4\n    lambda: |-\n      it.strftime(0, 0, id(digit_font), \"%H:%M\", id(hass_time).now());\n      it.image(24, 0, id(my_image));\n      it.line(1, 7, 21, 7);\nfont:\n  - file: \"pixelmix.ttf\"\n    id: digit_font\n    size: 6\n\ntime:\n  - platform: homeassistant\n    id: hass_time\n\nimage:\n  - file: \"smile.png\"\n    id: my_image\n```\n\n----------------------------------------\n\nTITLE: LD2410 Button Configuration\nDESCRIPTION: This snippet demonstrates how to configure buttons for factory reset, restart, and querying parameters on the LD2410 sensor. These buttons allow for easy control and management of the device within ESPHome.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ld2410.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nbutton:\n  - platform: ld2410\n    factory_reset:\n      name: \"factory reset\"\n    restart:\n      name: \"restart\"\n    query_params:\n      name: query params\n```\n\n----------------------------------------\n\nTITLE: ESPHome Cover Template with End Stop Sensor\nDESCRIPTION: Example showing how to create a template-based cover component that uses a binary sensor end stop to determine its state. The lambda function checks the end stop state and returns appropriate cover status.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/automations/templates.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbinary_sensor:\n  - platform: gpio\n    name: \"Cover End Stop\"\n    id: top_end_stop\ncover:\n  - platform: template\n    name: Living Room Cover\n    lambda: !lambda |-\n      if (id(top_end_stop).state) {\n        return COVER_OPEN;\n      } else {\n        return COVER_CLOSED;\n      }\n```\n\n----------------------------------------\n\nTITLE: RC522 Tag Detection Trigger Configuration\nDESCRIPTION: Configuration example showing how to set up an automation trigger for when a tag is detected, publishing the tag ID via MQTT.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/rc522.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nrc522_spi: # or rc522_i2c\n  # ...\n  on_tag:\n    then:\n      - mqtt.publish:\n          topic: rc522/tag\n          payload: !lambda 'return x;'\n```\n\n----------------------------------------\n\nTITLE: Setting Number Value and Performing Call in ESPHome\nDESCRIPTION: This snippet demonstrates how to set a specific value for a number component and then execute the call to apply the change in ESPHome using C++. It requires a `NumberCall` object named `call`, which is assumed to be already created and associated with a specific number component.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/number/index.rst#2025-04-21_snippet_11\n\nLANGUAGE: cpp\nCODE:\n```\n      call.set_value(42);\n      call.perform();\n```\n\n----------------------------------------\n\nTITLE: Image Configuration for SSD1331 Display\nDESCRIPTION: Configuration example demonstrating how to load and display RGB images on the SSD1331 OLED display with proper resizing.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/ssd1331.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n  - file: \"image.jpg\"\n    id: my_image\n    resize: 96x64\n    type: RGB\n\n...\n\ndisplay:\n    ...\n    lambda: |-\n      it.image(0, 0, id(my_image));\n```\n\n----------------------------------------\n\nTITLE: Multicast UDP Configuration\nDESCRIPTION: Configuration example showing how to set up multicast UDP communication between two ESPHome devices.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/udp.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# Device 1\nbinary_sensor:\n  - platform: gpio\n    pin: D2\n    id: binary_sensor_door\n\nudp:\n  - id: mc_external\n    address:\n      - 239.0.60.53\n    binary_sensors:\n      - binary_sensor_door\n\n# Device 2\nbinary_sensor:\n  - platform: udp\n    id: remote_door_sensor\n    remote_id: mc_external\n\nudp:\n  listen_addresses: 239.0.60.53\n```\n\n----------------------------------------\n\nTITLE: Configuring Switch Copy in ESPHome\nDESCRIPTION: YAML configuration for creating a copy of an existing switch. Requires source_id to specify the original switch.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/copy.rst#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nswitch:\n  - platform: copy\n    source_id: source_switch\n    name: \"Copy of source_switch\"\n```\n\n----------------------------------------\n\nTITLE: Raw ADC Value Configuration\nDESCRIPTION: Configuration to replicate old uncalibrated output with different attenuation options using raw values and multipliers.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/adc.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# To replicate old uncalibrated output, set raw:true and keep only one of the multiplier lines.\nraw: true\nfilters:\n  - multiply: 0.00026862 # 1.1/4095, for attenuation 0db\n  - multiply: 0.00036630 # 1.5/4095, for attenuation 2.5db\n  - multiply: 0.00053724 # 2.2/4095, for attenuation 6db\n  - multiply: 0.00095238 # 3.9/4095, for attenuation 12db\n  # your existing filters would go here\n```\n\n----------------------------------------\n\nTITLE: Custom Colors for Binary Images\nDESCRIPTION: Lambda function showing how to apply custom colors when displaying binary images on a display.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/image.rst#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ndisplay:\n  - platform: ...\n    # ...\n    lambda: |-\n      // Draw the image my_image at position [x=0,y=0]\n      // with front color red and back color blue\n      it.image(0, 0, id(my_image), id(red), id(blue));\n\n      // Aligned on right edge\n      it.image(it.get_width(), 0, id(my_image), ImageAlign::TOP_RIGHT, id(red), id(blue));\n```\n\n----------------------------------------\n\nTITLE: Setting Target Position for Stepper Motor in ESPHome (C++)\nDESCRIPTION: This snippet demonstrates how to set a target position for a stepper motor. The stepper motor object is accessed using the 'id' function, and the 'set_target' method is called with the desired position as an argument.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/stepper/index.rst#2025-04-21_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nid(my_stepper).set_target(250);\n```\n\n----------------------------------------\n\nTITLE: Triggering Automations on Page Change in ESPHome\nDESCRIPTION: This configuration uses 'on_page_change' to trigger automations when the display changes from one page to another. It allows monitoring page transitions and acting on specific page change events.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/index.rst#2025-04-21_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\ndisplay:\n  - platform: ...\n    # ...\n    on_page_change:\n      - from: page1\n        to: page2\n        then:\n          lambda: |-\n            ESP_LOGD(\"display\", \"Page changed from 1 to 2\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Addressable Lights with m5stack_8angle\nDESCRIPTION: This example demonstrates how to configure the 9 RGB LEDs on the m5stack_8angle as addressable light outputs. Various effects, including addressable rainbow, can be applied to these LEDs.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/m5stack_8angle.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nlight:\n  - platform: m5stack_8angle\n    m5stack_8angle_id: m5stack_8angle_base\n    id: m8_angle_leds\n    name: \"Lights\"\n    effects:\n        - addressable_rainbow:\n```\n\n----------------------------------------\n\nTITLE: Configuring Tuya Volume Control - YAML\nDESCRIPTION: This YAML configuration sets up a Tuya number platform to control the volume setting on a device using the specific datapoint ID. It specifies the valid range and step size for the volume levels.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/number/tuya.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n    - platform: \"tuya\"\n      name: \"Volume\"\n      number_datapoint: 116\n      min_value: 0\n      max_value: 2\n      step: 1\n```\n\n----------------------------------------\n\nTITLE: Generic Select Operation Action in YAML\nDESCRIPTION: This action snippet shows how to perform generic operations such as 'next', 'previous', 'first', and 'last' within the select component, using templated values for added flexibility.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/select/index.rst#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n\"    # Using values\\n    - select.operation:\\n        id: my_select\\n        operation: Next\\n        cycle: true\\n\\n    # Or templated (lambdas)\\n    - select.operation:\\n        id: my_select\\n        operation: !lambda \\\"return SELECT_OP_NEXT;\\\"\\n        cycle: !lambda \\\"return true;\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Template Valve State Publishing Example\nDESCRIPTION: Example showing how to publish valve states using the valve.template.publish action in ESPHome configurations.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/valve/template.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nvalve:\n  - platform: template\n    name: \"Template Valve\"\n    id: my_template_valve\n\n# in some trigger\non_...:\n  - valve.template.publish:\n      id: my_template_valve\n      state: OPEN\n\n  # Templated\n  - valve.template.publish:\n      id: my_template_valve\n      state: !lambda 'return VALVE_OPEN;'\n```\n\n----------------------------------------\n\nTITLE: DS1307 Write Time Action Configuration\nDESCRIPTION: Action configuration for synchronizing system time to the RTC hardware. Used to explicitly trigger time writing to RTC.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/time/ds1307.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - ds1307.write_time\n\n  # in case you need to specify the DS1307 id\n  - ds1307.write_time:\n      id: ds1307_time\n```\n\n----------------------------------------\n\nTITLE: Executing Zero Point Calibration for MH-Z19 - YAML\nDESCRIPTION: This YAML action allows execution of the zero point calibration command on the MH-Z19 sensor. The sensor needs to be in a stable gas environment around 400 ppm for over 20 minutes before executing this calibration command.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/mhz19.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - mhz19.calibrate_zero: my_mhz19_id\n```\n\n----------------------------------------\n\nTITLE: Select Next Action in YAML\nDESCRIPTION: This action snippet selects the next option in the select component, with an optional cycle feature to return to the first option when the last option is selected.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/select/index.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n\"    - select.next:\\n        id: my_select\\n        cycle: false\\n\\n    # Shorthand\\n    - select.next: my_select\"\n```\n\n----------------------------------------\n\nTITLE: Configuring SFA30 Sensor in ESPHome\nDESCRIPTION: Example YAML configuration for setting up an SFA30 sensor with formaldehyde, temperature, and humidity measurements. Uses IÂ²C communication with a default address of 0x5D and 60-second update interval.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/sfa30.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: sfa30\n    formaldehyde:\n      name: \"Formaldehyde\"\n    temperature:\n      name: \"Temperature\"\n    humidity:\n      name: \"Humidity\"\n```\n\n----------------------------------------\n\nTITLE: Template Cover State Lambda Publishing\nDESCRIPTION: Example showing how to publish cover states using C++ lambda functions.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/cover/template.rst#2025-04-21_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nid(template_cov).position = COVER_OPEN;\nid(template_cov).tilt = 0.5;\nid(template_cov).publish_state();\n```\n\n----------------------------------------\n\nTITLE: OpenHacks LAN8720 Configuration\nDESCRIPTION: Basic Ethernet configuration for OpenHacks LAN8720 board with minimal required settings.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/ethernet.rst#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nethernet:\n  type: LAN8720\n  mdc_pin: GPIO23\n  mdio_pin: GPIO18\n  phy_addr: 1\n```\n\n----------------------------------------\n\nTITLE: Getting Fan Oscillating State in ESPHome Lambda\nDESCRIPTION: This snippet allows checking of whether the fan is oscillating using a lambda function. It leverages 'id(my_fan).oscillating' to determine the state and branches accordingly.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/fan/index.rst#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n// Within lambda, get the fan oscillating state and conditionally do something\nif (id(my_fan).oscillating) {\n  // Fan is oscillating, do something here\n} else {\n  // Fan is not oscillating, do something else here\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Format for Update Manifest\nDESCRIPTION: Example of the ESP-Web-Tools manifest format with ESPHome extensions. It includes metadata such as project name, version, and build information for specific chip families.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/update/http_request.rst#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"My ESPHome Project\",\n  \"version\": \"2024.6.1\",\n  \"builds\": [\n    {\n      \"chipFamily\": \"ESP32-C3\",\n      \"ota\": {\n        \"md5\": \"1234567890abcdef1234567890abcdef\",\n        \"path\": \"/local/esp32c3/firmware.bin\",\n        \"release_url\": \"http://example.com/releases/10\",\n        \"summary\": \"Another update\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Binary Sensor State Response\nDESCRIPTION: JSON response structure for a binary sensor state request showing the component ID, text state, and boolean value.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/web-api/index.rst#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"binary_sensor-living_room_status\",\n  \"state\": \"ON\",\n  \"value\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Midea Remote Transmission in YAML\nDESCRIPTION: Configuration for sending 40-bit Midea codes with automatic 8-bit checksum and support for lambda expressions.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/remote_transmitter.rst#2025-04-21_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - remote_transmitter.transmit_midea:\n      code: [0xA2, 0x08, 0xFF, 0xFF, 0xFF]\n\non_...:\n  - remote_transmitter.transmit_midea:\n      code: !lambda |-\n        return {0xA4, 0x82, 0x48, 0x7F, (uint8_t)(id(temp_sensor).state + 1)};\n```\n\n----------------------------------------\n\nTITLE: Configuring Time Synchronization in ESPHome\nDESCRIPTION: YAML configuration for getting time from Home Assistant to sync the onboard real-time clock.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/cookbook/display_time_temp_oled.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntime:\n  - platform: homeassistant\n    id: esptime\n```\n\n----------------------------------------\n\nTITLE: Resetting Integration Sensor Value in ESPHome (YAML)\nDESCRIPTION: This YAML configuration sets up an action to reset the value of an integration sensor to zero. The reset can be triggered by events, such as a time-based automation occurring at midnight.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/integration.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - sensor.integration.reset:  my_integration_sensor\n```\n\n----------------------------------------\n\nTITLE: Setting Up TLC5947 Hub in YAML for ESPHome\nDESCRIPTION: This YAML configuration sets up the global 'tlc5947' hub necessary for controlling TLC5947 LED drivers. It includes required GPIO pins for data, clock, and latch connections.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/output/tlc5947.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\n    tlc5947:\n      data_pin: GPIOXX\n      clock_pin: GPIOXX\n      lat_pin: GPIOXX\n```\n\n----------------------------------------\n\nTITLE: Setting Mid Calibration Point for EZO Sensor\nDESCRIPTION: Lambda function to set the middle calibration point for an EZO sensor, typically used for pH sensors.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ezo.rst#2025-04-21_snippet_12\n\nLANGUAGE: cpp\nCODE:\n```\nid(ph_ezo).set_calibration_point_mid(7.00);\n```\n\n----------------------------------------\n\nTITLE: Configuring Home Assistant Number Platform in ESPHome\nDESCRIPTION: Demonstrates how to set up a Home Assistant number entity in ESPHome configuration with a specific entity ID. This configuration allows synchronization of number values between ESPHome and Home Assistant.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/number/homeassistant.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nnumber:\n  - platform: homeassistant\n    id: my_ha_number\n    entity_id: number.my_number\n```\n\n----------------------------------------\n\nTITLE: Enabling Random Playback on DF-Player in ESPHome\nDESCRIPTION: Action to randomly play all tracks from the storage device.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/dfplayer.rst#2025-04-21_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - dfplayer.random\n```\n\n----------------------------------------\n\nTITLE: Showing Main Menu Level using ESPHome YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure an action to show the root level of a menu when a specific command is selected. The configuration is part of an lcd_menu block.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display_menu/index.rst#2025-04-21_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nlcd_menu:\n  ...\n  items:\n    - type: command\n      text: 'Show Main'\n      on_value:\n        then:\n          - display_menu.show_main:\n```\n\n----------------------------------------\n\nTITLE: Adding a Centered Label Widget in LVGL\nDESCRIPTION: Example of creating a simple label widget in LVGL, positioned at the center of the screen with a 'Hello World!' text\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/index.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nlvgl:\n  widgets:\n    - label:\n        align: CENTER\n        text: 'Hello World!'\n```\n\n----------------------------------------\n\nTITLE: Select Component REST Response Format\nDESCRIPTION: JSON response format for a GET request to a select endpoint showing the component's current state and value.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/web-api/index.rst#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"select-house_mode\",\n  \"state\": \"party\",\n  \"value\": \"party\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logger for Modbus\nDESCRIPTION: This YAML code snippet configures the logger for ESPHome, specifically setting the logging level and disabling serial logging, which can interfere with Modbus communication.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/modbus_controller.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlogger:\n    level: <level>\n    baud_rate: 0\n```\n\n----------------------------------------\n\nTITLE: Daily Energy Tracking Configuration\nDESCRIPTION: Sets up total daily energy tracking with power to kWh conversion and time synchronization.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/cookbook/power_meter.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n #(...)\n  - platform: total_daily_energy\n    name: 'Total Daily Energy'\n    id: sensor_total_daily_energy\n    power_id: sensor_energy_pulse_meter\n    unit_of_measurement: 'kWh'\n    state_class: total_increasing\n    device_class: energy\n    accuracy_decimals: 3\n    filters:\n      # Multiplication factor from W to kW is 0.001\n      - multiply: 0.001\n\ntime:\n  - platform: homeassistant\n    id: homeassistant_time\n```\n\n----------------------------------------\n\nTITLE: Web Server Version 3 Entity Sorting Configuration in YAML\nDESCRIPTION: Configuration demonstrating entity sorting in web server version 3 using sorting_weight for sensors.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/web_server.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: template\n    name: \"My Sensor 1\"\n    web_server:\n      sorting_weight: 10\n  - platform: template\n    name: \"My Sensor 2\"\n    web_server:\n      sorting_weight: -1\n```\n\n----------------------------------------\n\nTITLE: Configuring Menu Item Leave Automation in ESPHome\nDESCRIPTION: YAML configuration for an on_leave automation that logs when a submenu is exited.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display_menu/index.rst#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nlcd_menu:\n  ...\n  items:\n    - type: menu\n      text: 'Submenu 1'\n      on_leave:\n        then:\n          lambda: 'ESP_LOGI(\"display_menu\", \"leave: %s\", it->get_text().c_str());'\n```\n\n----------------------------------------\n\nTITLE: Advanced Pin Schema Configuration in YAML\nDESCRIPTION: Shows the advanced pin schema configuration including options for number, inverted state, and pin modes with various input/output configurations.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/configuration-types.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsome_config_option:\n  # Basic:\n  pin: GPIOXX\n\n  # Advanced:\n  pin:\n    number: GPIOXX\n    inverted: true\n    mode:\n      input: true\n      pullup: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Display Off Action for Haier Climate Device\nDESCRIPTION: YAML configuration to turn off the display of a Haier climate device using the climate.haier.display_off action.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/climate/haier.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    climate.haier.display_off: device_id\n```\n\n----------------------------------------\n\nTITLE: GitHub Pull Request Shorthand for External Components\nDESCRIPTION: Using the shorthand github:// format to specify external components from pull requests in the ESPHome repository.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/external_components.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nexternal_components:\n  # shorthand\n  source: github://pr#<number>\n```\n\n----------------------------------------\n\nTITLE: Updating Text Value in C++ Lambda\nDESCRIPTION: Shows how to update a text entity's value using C++ lambda calls within ESPHome configurations.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/text/index.rst#2025-04-21_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\n// Within lambda, push a value of 42\nauto call = id(my_text).make_call();\ncall.set_value(\"Hello World\");\ncall.perform();\n```\n\n----------------------------------------\n\nTITLE: Installing ESPHome Docker Image\nDESCRIPTION: Command to pull the ESPHome Docker image which supports AMD64, ARM and ARM64 architectures\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/getting_started_command_line.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull ghcr.io/esphome/esphome\n```\n\n----------------------------------------\n\nTITLE: Changing Address of PZEM-004T V3 Sensor in YAML\nDESCRIPTION: This YAML configuration allows changing the address of the PZEM-004T V3 energy monitor. Caution is advised, as this operation should only run once. The configuration specifies the current device address and sends a command to change it, using Modbus commands executed in a lambda function. After execution, this code should be removed.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/pzemac.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nesphome:\n  ...\n  on_boot:\n    ## configure controller settings at setup\n    ## make sure priority is lower than setup_priority of modbus_controller\n    priority: -100\n    then:\n      - lambda: |-\n          auto new_address = 0x03;\n\n          if(new_address < 0x01 || new_address > 0xF7) // sanity check\n          {\n            ESP_LOGE(\"ModbusLambda\", \"Address needs to be between 0x01 and 0xF7\");\n            return;\n          }\n\n          esphome::modbus_controller::ModbusController *controller = id(pzem);\n          auto set_addr_cmd = esphome::modbus_controller::ModbusCommandItem::create_write_single_command(\n            controller, 0x0002, new_address);\n\n          delay(200) ;\n          controller->queue_command(set_addr_cmd);\n          ESP_LOGI(\"ModbusLambda\", \"PZEM Addr set\");\n\nmodbus:\n  send_wait_time: 200ms\n  id: mod_bus_pzem\n\nmodbus_controller:\n  - id: pzem\n    # The current device address.\n    address: 0x1\n    # The special address 0xF8 is a broadcast address accepted by any pzem device,\n    # so if you use this address, make sure there is only one pzem device connected\n    # to the uart bus. \n    # address: 0xF8\n    modbus_id: mod_bus_pzem\n    command_throttle: 0ms\n    setup_priority: -10\n    update_interval: 30s\n```\n\n----------------------------------------\n\nTITLE: Implementing WireGuard Disable Action in ESPHome\nDESCRIPTION: This configuration demonstrates how to use the wireguard.disable action, which drops the active VPN link and disables the WireGuard component. It can be used in automations or triggered on specific events.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/wireguard.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - wireguard.disable:\n```\n\n----------------------------------------\n\nTITLE: Git Commands for Local Dev Branch Update\nDESCRIPTION: Commands for updating the local dev branch with latest upstream changes using rebase.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/contributing.rst#2025-04-21_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n# Fetch the latest upstream changes\ngit fetch upstream dev\ngit rebase upstream/dev\n```\n\n----------------------------------------\n\nTITLE: Retrieving Calibration Slope from EZO Sensor\nDESCRIPTION: Lambda function to request the slope data from an EZO sensor, triggering the on_slope action when complete.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ezo.rst#2025-04-21_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\nid(ph_ezo).get_slope();\n```\n\n----------------------------------------\n\nTITLE: Implementing LVGL Title Bars for Multiple Pages\nDESCRIPTION: Configuration for adding title bars to different LVGL pages. Each page has a customized header with centered white text on a styled background.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/cookbook/lvgl.rst#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nlvgl:\n  pages:\n    - id: main_page\n      widgets:\n        - obj:\n            align: TOP_MID\n            styles: header_footer\n            widgets:\n              - label:\n                  text: \"ESPHome LVGL Display\"\n                  align: CENTER\n                  text_align: CENTER\n                  text_color: 0xFFFFFF\n    - id: second_page\n      widgets:\n        - obj:\n            align: TOP_MID\n            styles: header_footer\n            widgets:\n              - label:\n                  text: \"A second page\"\n                  align: CENTER\n                  text_align: CENTER\n                  text_color: 0xFFFFFF\n```\n\n----------------------------------------\n\nTITLE: Configuring MagiQuest Remote Transmission in YAML\nDESCRIPTION: Configuration for sending MagiQuest wand codes with wand ID and optional magnitude parameters.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/remote_transmitter.rst#2025-04-21_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - remote_transmitter.transmit_magiquest:\n      wand_id: 0x01234567\n      magnitude: 0x080C\n```\n\n----------------------------------------\n\nTITLE: Switch Control Lambda in YAML\nDESCRIPTION: Lambda code to manually turn a switch on, off, or toggle it from code. Useful for complex lambda expressions.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/switch/index.rst#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nid(my_switch).turn_off();\nid(my_switch).turn_on();\n// Toggle the switch\nid(my_switch).toggle();\n```\n\n----------------------------------------\n\nTITLE: IR Code Output Examples\nDESCRIPTION: Example log output showing both decoded Panasonic protocol and raw IR codes from the receiver.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/setting_up_rmt_devices.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n[D][remote.panasonic] Received Panasonic: address=0x4004 command=0x8140DFA2\\n\\n[D][remote.raw] Received Raw: 4088, -1542, 1019, -510, 513, -1019, 510, -509, 511, -510, 1020,\\n[D][remote.raw]   -1020, 1022, -1019, 510, -509, 511, -510, 511, -509, 511, -510,\\n[D][remote.raw]   1020, -1019, 510, -511, 1020, -510, 512, -508, 510, -1020, 1022\n```\n\n----------------------------------------\n\nTITLE: Push Button Enter Configuration\nDESCRIPTION: Configuration for a GPIO push button to serve as the enter/select control for menu navigation with debounce filtering.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display_menu/lcd_menu.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nbinary_sensor:\n  - platform: gpio\n    ...\n    filters:\n      - delayed_on: 30ms\n      - delayed_off: 30ms\n    on_press:\n      - display_menu.enter:\n```\n\n----------------------------------------\n\nTITLE: Publishing Template Switch States in C++ Lambda\nDESCRIPTION: Example demonstrating how to publish a state to a template switch using C++ lambda code, setting the switch to the OFF state.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/switch/template.rst#2025-04-21_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nid(template_swi).publish_state(false);\n```\n\n----------------------------------------\n\nTITLE: GREE Climate Configuration\nDESCRIPTION: Configuration for GREE AC units with model selection.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/climate/climate_ir.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nclimate:\n  - platform: gree\n    name: \"AC\"\n    sensor: room_temperature\n    model: yan\n```\n\n----------------------------------------\n\nTITLE: Configuring Command Menu Item in ESPHome\nDESCRIPTION: YAML configuration for a command menu item that triggers the hide action for the display menu.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display_menu/index.rst#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nitems:\n  - type: command\n    text: 'Hide'\n    on_value:\n      then:\n        - display_menu.hide:\n```\n\n----------------------------------------\n\nTITLE: Creating a Text Sensor for ENS160 Air Quality Rating in ESPHome\nDESCRIPTION: YAML configuration for converting the numeric ENS160 AQI value (1-5) to a descriptive text rating (Excellent, Good, Moderate, Poor, Unhealthy). This text sensor uses a lambda function to map the numeric values to human-readable air quality ratings.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ens160.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntext_sensor:\n  - platform: template\n    name: \"ENS160 Air Quality Rating\"\n    lambda: |-\n      switch ( (int) (id(ens160_air_quality_index).state) ) {\n        case 1: return {\"Excellent\"};\n        case 2: return {\"Good\"};\n        case 3: return {\"Moderate\"};\n        case 4: return {\"Poor\"};\n        case 5: return {\"Unhealthy\"};\n        default: return {\"Not Available\"};\n      }\n```\n\n----------------------------------------\n\nTITLE: Media Player Announcing Condition in ESPHome\nDESCRIPTION: This snippet demonstrates the `media_player.is_announcing` condition.  When used in a trigger, this will only execute actions when the media player is playing an announcement.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/media_player/index.rst#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n# In some trigger:\non_...:\n  if:\n    condition:\n      media_player.is_announcing:\n```\n\n----------------------------------------\n\nTITLE: Fast Boot Factory Reset Lambda Operations in ESPHome\nDESCRIPTION: Series of lambda functions that handle fast boot counter and factory reset logic. Includes logging, counter increments, and state persistence using preferences.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/cookbook/lambda_magic.rst#2025-04-21_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nESP_LOGD(\"Fast Boot Factory Reset\", \"Performing factotry reset\");\nid(fast_boot) = 0;\nfast_boot->loop();\nglobal_preferences->sync();\n```\n\nLANGUAGE: cpp\nCODE:\n```\nif(id(fast_boot) > 0)\n  ESP_LOGD(\"Fast Boot Factory Reset\", \"Quick reboot %d/%d, do it %d more times to factory reset\", id(fast_boot), ${factory_reset_boot_count_trigger}, ${factory_reset_boot_count_trigger} - id(fast_boot));\nid(fast_boot) += 1;\nfast_boot->loop();\nglobal_preferences->sync();\n```\n\nLANGUAGE: cpp\nCODE:\n```\nid(fast_boot) = 0;\nfast_boot->loop();\nglobal_preferences->sync();\n```\n\n----------------------------------------\n\nTITLE: ABC Enable Action\nDESCRIPTION: Action configuration to enable Automatic Baseline Calibration on the sensor with a default interval of 180 hours.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/senseair.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - senseair.abc_enable: my_senseair_id\n```\n\n----------------------------------------\n\nTITLE: Configuring Select Copy in ESPHome\nDESCRIPTION: YAML configuration for creating a copy of an existing select. Requires source_id to specify the original select.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/copy.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nselect:\n  - platform: copy\n    source_id: source_select\n    name: \"Copy of source_select\"\n```\n\n----------------------------------------\n\nTITLE: LD2410 Text Sensor Configuration\nDESCRIPTION: This snippet shows how to configure text sensors to display the firmware version and MAC address of the LD2410 sensor. These sensors provide valuable information about the device's identification and software version.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ld2410.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ntext_sensor:\n  - platform: ld2410\n    version:\n      name: \"firmware version\"\n    mac_address:\n      name: \"mac address\"\n```\n\n----------------------------------------\n\nTITLE: Transmitting Type B RC-Switch Codes with YAML\nDESCRIPTION: This snippet is designed for sending Type B RC-Switch remote codes. Configuration includes address, channel, and state settings, with the protocol as an optional parameter.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/remote_transmitter.rst#2025-04-21_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - remote_transmitter.transmit_rc_switch_type_b:\n      address: '0100'\n      channel: '1011'\n      state: off\n      protocol: 1\n```\n\n----------------------------------------\n\nTITLE: Initializing MAX6956 I/O Expander Configuration in ESPHome\nDESCRIPTION: This snippet initializes the MAX6956 I/O expander with an IÂ²C address and bus ID. It sets the required ID and optional parameters to configure the device for operation.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/max6956.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmax6956:\n  - id: max6956_1\n    address: 0x40\n    i2c_id: bus_a\n```\n\n----------------------------------------\n\nTITLE: Home Assistant Automation Example\nDESCRIPTION: Example of Home Assistant automation for sending SMS and making calls via the SIM800L module.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sim800l.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nautomation:\n  # ...\n  action:\n  - action: esphome.livingroom_send_sms\n    data:\n      recipient: \"+15551234567\"\n      message: \"Hello World!\"\n  - action: esphome.livingroom_dial\n    data:\n      recipient: \"+15551234567\"\n```\n\n----------------------------------------\n\nTITLE: Calculate Ambient Light Illuminance\nDESCRIPTION: This code snippet demonstrates the formula for calculating ambient light illuminance based on sensor values from CH0 (Visible + IR) and CH1 (IR only). It uses a series of conditional statements based on the RATIO value to determine the correct formula, incorporating ALS_GAIN and ALS_INT for accurate calculation.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ltr_als_ps.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nRATIO = CH1/(CH0+CH1)\nIF (RATIO < 0.45)\n    ALS_LUX = (1.7743 * CH0 + 1.1059 * CH1) / ALS_GAIN / ALS_INT\nELSEIF (RATIO < 0.64 && RATIO >= 0.45)\n    ALS_LUX = (4.2785 * CH0 â 1.9548 * CH1) / ALS_GAIN / ALS_INT\nELSEIF (RATIO < 0.85 && RATIO >= 0.64)\n    ALS_LUX = (0.5926 * CH0 + 0.1185 * CH1) / ALS_GAIN / ALS_INT\nELSE\n    ALS_LUX = 0\nEND\n```\n\n----------------------------------------\n\nTITLE: Turn On Display Action\nDESCRIPTION: Action configuration for turning on the display LEDs.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/tm1651.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - tm1651.turn_on:\n      id: tm1651_battery\n```\n\n----------------------------------------\n\nTITLE: Importing Home Assistant Entity Attributes as Text Sensors in ESPHome\nDESCRIPTION: This configuration example shows how to import a specific attribute from a Home Assistant entity into an ESPHome text sensor, in this case the 'effect' attribute from a light entity.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/text_sensor/homeassistant.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\ntext_sensor:\n  - platform: homeassistant\n    id: effect\n    entity_id: light.led_strip\n    attribute: effect\n```\n\n----------------------------------------\n\nTITLE: Configuring OTA on State Change Automation (YAML)\nDESCRIPTION: This automation captures any state changes during the OTA update process. It logs a message when the OTA state is 'OTA_STARTED', allowing for tracking of the update state.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/ota/index.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nota:\n  - platform: ...\n    on_state_change:\n      then:\n        - if:\n            condition:\n              lambda: return state == ota::OTA_STARTED;\n            then:\n              - logger.log: \"OTA start\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Base Speaker Component in YAML\nDESCRIPTION: Basic YAML configuration structure for setting up a speaker component with optional audio DAC for volume control.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/speaker/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nspeaker:\n  - platform: ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Update Component in ESPHome YAML\nDESCRIPTION: Basic YAML configuration example for setting up the update component in ESPHome. Shows the minimal required structure with platform specification.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/update/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nupdate:\n  - platform: ...\n```\n\n----------------------------------------\n\nTITLE: Battery Status Icon Display in LVGL\nDESCRIPTION: Implementation of a battery status indicator using MaterialDesignIcons that shows different icons based on battery percentage levels. Includes handling for multiple battery states from empty to full.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/cookbook/lvgl.rst#2025-04-21_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nfont:\n  - file: \"fonts/materialdesignicons-webfont.ttf\"\n    id: battery_icons_20\n    size: 20\n    bpp: 4\n    glyphs: [\n      \"\\U000F007A\", # mdi-battery-10\n      \"\\U000F007B\", # mdi-battery-20\n      \"\\U000F007C\", # mdi-battery-30\n      \"\\U000F007D\", # mdi-battery-40\n      \"\\U000F007E\", # mdi-battery-50\n      \"\\U000F007F\", # mdi-battery-60\n      \"\\U000F0080\", # mdi-battery-70\n      \"\\U000F0081\", # mdi-battery-80\n      \"\\U000F0082\", # mdi-battery-90\n      \"\\U000F0079\", # mdi-battery (full)\n      \"\\U000F008E\", # mdi-battery-outline\n      \"\\U000F0091\", # mdi-battery-unknown\n      ]\n\nsensor:\n  - platform: homeassistant\n    id: sns_battery_percentage\n    entity_id: sensor.device_battery\n    on_value:\n      - lvgl.label.update:\n          id: lbl_battery_status\n          text: !lambda |-\n            static char buf[10];\n            std::string icon;\n            if (x == 100.0) {\n                icon = \"\\U000F0079\"; // mdi-battery (full)\n            } else if (x > 90) {\n                icon = \"\\U000F0082\"; // mdi-battery-90\n            } else if (x > 80) {\n                icon = \"\\U000F0081\"; // mdi-battery-80\n            } else if (x > 70) {\n                icon = \"\\U000F0080\"; // mdi-battery-70\n            } else if (x > 60) {\n                icon = \"\\U000F007F\"; // mdi-battery-60\n            } else if (x > 50) {\n                icon = \"\\U000F007E\"; // mdi-battery-50\n            } else if (x > 40) {\n                icon = \"\\U000F007D\"; // mdi-battery-40\n            } else if (x > 30) {\n                icon = \"\\U000F007C\"; // mdi-battery-30\n            } else if (x > 20) {\n                icon = \"\\U000F007B\"; // mdi-battery-20\n            } else if (x > 10) {\n                icon = \"\\U000F007A\"; // mdi-battery-10\n            } else if (x > 0) {\n                icon = \"\\U000F008E\"; // mdi-battery-outline\n            } else {\n                icon = \"\\U000F0091\"; // mdi-battery-unknown\n            }\n            snprintf(buf, sizeof(buf), \"%s\", icon.c_str());\n            return buf;\n```\n\n----------------------------------------\n\nTITLE: Configuring LD2410 Sensor Entity Cards in Home Assistant\nDESCRIPTION: YAML configuration for creating horizontal stacks of entity cards to display LD2410 radar sensor data. Each stack shows movement energy, movement threshold, still energy, and still threshold for a specific gate (g2-g8). The configuration requires replacing 'DEVICE' with the actual device name.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ld2410.rst#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n- type: horizontal-stack\n  cards:\n    - type: entity\n      entity: 'sensor.DEVICE_g2_move_energy'\n      name: 'g2'\n      icon: ' '\n    - type: entity\n      entity: 'number.DEVICE_g2_move_threshold'\n      name: ' '\n      icon: ' '\n    - type: entity\n      entity: 'sensor.DEVICE_g2_still_energy'\n      name: ' '\n      icon: ' '\n    - type: entity\n      entity: 'number.DEVICE_g2_still_threshold'\n      name: ' '\n      icon: ' '\n- type: horizontal-stack\n  cards:\n    - type: entity\n      entity: 'sensor.DEVICE_g3_move_energy'\n      name: 'g3'\n      icon: ' '\n    - type: entity\n      entity: 'number.DEVICE_g3_move_threshold'\n      name: ' '\n      icon: ' '\n    - type: entity\n      entity: 'sensor.DEVICE_g3_still_energy'\n      name: ' '\n      icon: ' '\n    - type: entity\n      entity: 'number.DEVICE_g3_still_threshold'\n      name: ' '\n      icon: ' '\n- type: horizontal-stack\n  cards:\n    - type: entity\n      entity: 'sensor.DEVICE_g4_move_energy'\n      name: 'g4'\n      icon: ' '\n    - type: entity\n      entity: 'number.DEVICE_g4_move_threshold'\n      name: ' '\n      icon: ' '\n    - type: entity\n      entity: 'sensor.DEVICE_g4_still_energy'\n      name: ' '\n      icon: ' '\n    - type: entity\n      entity: 'number.DEVICE_g4_still_threshold'\n      name: ' '\n      icon: ' '\n- type: horizontal-stack\n  cards:\n    - type: entity\n      entity: 'sensor.DEVICE_g5_move_energy'\n      name: 'g5'\n      icon: ' '\n    - type: entity\n      entity: 'number.DEVICE_g5_move_threshold'\n      name: ' '\n      icon: ' '\n    - type: entity\n      entity: 'sensor.DEVICE_g5_still_energy'\n      name: ' '\n      icon: ' '\n    - type: entity\n      entity: 'number.DEVICE_g5_still_threshold'\n      name: ' '\n      icon: ' '\n- type: horizontal-stack\n  cards:\n    - type: entity\n      entity: 'sensor.DEVICE_g6_move_energy'\n      name: 'g6'\n      icon: ' '\n    - type: entity\n      entity: 'number.DEVICE_g6_move_threshold'\n      name: ' '\n      icon: ' '\n    - type: entity\n      entity: 'sensor.DEVICE_g6_still_energy'\n      name: ' '\n      icon: ' '\n    - type: entity\n      entity: 'number.DEVICE_g6_still_threshold'\n      name: ' '\n      icon: ' '\n- type: horizontal-stack\n  cards:\n    - type: entity\n      entity: 'sensor.DEVICE_g7_move_energy'\n      name: 'g7'\n      icon: ' '\n    - type: entity\n      entity: 'number.DEVICE_g7_move_threshold'\n      name: ' '\n      icon: ' '\n    - type: entity\n      entity: 'sensor.DEVICE_g7_still_energy'\n      name: ' '\n      icon: ' '\n    - type: entity\n      entity: 'number.DEVICE_g7_still_threshold'\n      name: ' '\n      icon: ' '\n- type: horizontal-stack\n  cards:\n    - type: entity\n      entity: 'sensor.DEVICE_g8_move_energy'\n      name: 'g8'\n      icon: ' '\n    - type: entity\n      entity: 'number.DEVICE_g8_move_threshold'\n      name: ' '\n      icon: ' '\n    - type: entity\n      entity: 'sensor.DEVICE_g8_still_energy'\n      name: ' '\n      icon: ' '\n    - type: entity\n      entity: 'number.DEVICE_g8_still_threshold'\n      name: ' '\n      icon: ' '\n```\n\n----------------------------------------\n\nTITLE: Checking LVGL Idle State Condition in ESPHome\nDESCRIPTION: Condition to check if LVGL has been idle for a specified timeout, with an action to turn off display backlight\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/index.rst#2025-04-21_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - if:\n        condition:\n          lvgl.is_idle:\n            timeout: 5s\n        then:\n          - light.turn_off:\n              id: display_backlight\n              transition_length: 3s\n```\n\n----------------------------------------\n\nTITLE: Compiling ESPHome Configuration (Command Line)\nDESCRIPTION: This command compiles the ESPHome configuration file to generate a binary for flashing. It creates a firmware.bin file in the specified directory.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/migrate_espurna.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nesphome compile livingroom.yaml\n```\n\n----------------------------------------\n\nTITLE: CT Clamp Sensor Configuration Example\nDESCRIPTION: This configuration shows how to define a CT clamp sensor that uses an ADC sensor as its voltage source. It includes setting the name and update interval for the sensor.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ct_clamp.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\n    # Example configuration entry\n    sensor:\n      - platform: ct_clamp\n        sensor: adc_sensor\n        name: \"Measured Current\"\n        update_interval: 60s\n\n      # Example source sensor\n      - platform: adc\n        pin: A0\n        id: adc_sensor\n\n```\n\n----------------------------------------\n\nTITLE: Switch Is On/Off Condition in YAML\nDESCRIPTION: Condition to check if a switch is ON or OFF. This can be used in if conditions within automation triggers.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/switch/index.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# In some trigger:\non_...:\n  if:\n    condition:\n      # Same syntax for is_off\n      switch.is_on: my_switch\n```\n\n----------------------------------------\n\nTITLE: Dosing Mode Text Sensor Configuration in YAML\nDESCRIPTION: Configuration for a text sensor that indicates the current dosing mode of the pump. Possible values include Volume, Volume/Time, Constant Flow Rate, Continuous, and None.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/ezo_pmp.rst#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ntext_sensor:\n  - platform: ezo_pmp\n    dosing_mode:\n      id: dosing_mode\n      name: Dosing Mode\n```\n\n----------------------------------------\n\nTITLE: Configuring LVGL Checkbox Widget in YAML\nDESCRIPTION: Example YAML configuration for an LVGL checkbox widget, including positioning, text setting, and example actions and triggers for updating and responding to state changes.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/widgets.rst#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n# Example widget:\n- checkbox:\n    x: 10\n    y: 10\n    id: checkbox_id\n    text: Checkbox\n\n# Example action:\non_...:\n  then:\n    - lvgl.checkbox.update:\n        id: checkbox_id\n        state:\n          checked: true\n        text: Checked\n\n# Example trigger:\n- checkbox:\n    ...\n    on_value:\n      then:\n        - logger.log:\n            format: \"Checkbox state: %d\"\n            args: [ x ]\n```\n\n----------------------------------------\n\nTITLE: Estimated Pressure Calibration Configuration\nDESCRIPTION: Configuration for calibrating the pressure sensor using estimated values based on datasheet specifications for mapping raw values to pressure units.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/tem3200.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nfilters:\n  - calibrate_linear:\n    - 1000 -> 0.0\n    - 8000 -> 50.0\n    - 15000 -> 100.0\n```\n\n----------------------------------------\n\nTITLE: Accessing Raw Touch Values with Template Sensor\nDESCRIPTION: Example showing how to access raw touch sensor values using a template sensor with polling.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/esp32_touch.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry for accessing raw values\nesp32_touch:\n  id: esp32_touch_1\n\nbinary_sensor:\n  - platform: esp32_touch\n    id: esp32_touch_pad\n    pin: GPIOXX\n    threshold: 0\n\nsensor:\n  - platform: template\n    name: \"Raw touch value\"\n    lambda: |-\n        return id(esp32_touch_pad).get_value();\n    update_interval: 3s\n```\n\n----------------------------------------\n\nTITLE: Standard ESP Firmware Installation Using esptool\nDESCRIPTION: Basic command for flashing firmware onto an ESP device using esptool, without explicit baud rate specification.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/faq.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nesptool --port /dev/ttyUSB0 write_flash 0x0 your_node_firmware.bin\n```\n\n----------------------------------------\n\nTITLE: Configuring RP2040 Board in ESPHome\nDESCRIPTION: This YAML snippet demonstrates how to specify the board model as 'rpipicow' for the RP2040 platform within ESPHome. The configuration is part of setting up the hardware integration for systems using the Raspberry Pi Pico W with a CYW43455 wireless chip.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/rp2040.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nrp2040:\n  board: rpipicow\n```\n\n----------------------------------------\n\nTITLE: ESPHome If Action Example\nDESCRIPTION: Conditional action example with sensor value checking\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/automations/actions.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - if:\n        condition:\n          lambda: 'return id(some_sensor).state < 30;'\n        then:\n          - logger.log: \"The sensor value is below 30!\"\n          - light.turn_on: my_light\n          - delay: 5s\n        else:\n          - logger.log: \"The sensor value is above 30!\"\n    - light.turn_off: my_light\n```\n\n----------------------------------------\n\nTITLE: SGP30 Baseline Configuration in YAML\nDESCRIPTION: Configuration example showing how to set manual baseline values for the SGP30 sensor to maintain calibration across reboots. Demonstrates setting both eCOâ and TVOC baseline values.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/sgp30.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: sgp30\n    # ...\n    baseline:\n      eco2_baseline: 0x86C5\n      tvoc_baseline: 0x8B38\n```\n\n----------------------------------------\n\nTITLE: Setting PMWCS3 New I2C Address Action\nDESCRIPTION: This YAML snippet configures an action to set a new I2C address for the PMWCS3 sensor. This is particularly useful in setups with multiple probes, allowing the user to define a unique address for each sensor instance.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/pmwcs3.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: pmwcs3\n    id: pmwcs3_id\n    # ...\n\n# in some trigger\non_...:\n  - sensor.pmwcs3_id.new_i2c_address:\n      id: pmwcs3_id\n      address: 0x65\n```\n\n----------------------------------------\n\nTITLE: Button Configuration\nDESCRIPTION: Configuration for TM1638 buttons as binary sensors with LED control on press/release events\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/tm1638.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nbinary_sensor:\n  - platform: tm1638\n    name: \"TM1638 Button 1\"\n    id: TM1638Button1\n    key: 0\n    filters:\n      - delayed_on: 10ms\n    on_press:\n     then:\n        - switch.turn_on: TM1638Led1\n    on_release:\n     then:\n        - switch.turn_off: TM1638Led1\n\n  - platform: tm1638\n    name: \"TM1638 Button 2\"\n    id: TM1638Button2\n    key: 1\n    filters:\n      - delayed_on: 10ms\n    on_press:\n     then:\n        - output.turn_on: TM1638Led2\n    on_release:\n     then:\n        - output.turn_off: TM1638Led2\n```\n\n----------------------------------------\n\nTITLE: Toggling a Valve Using C++ Lambda\nDESCRIPTION: C++ lambda expression to toggle a valve's state programmatically in ESPHome.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/valve/index.rst#2025-04-21_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\nauto call = id(valve_1).make_call();\ncall.set_command_toggle();\ncall.perform();\n```\n\n----------------------------------------\n\nTITLE: Including Audio File in ESPHome Config\nDESCRIPTION: YAML configuration to include the converted audio file header in ESPHome project.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/audio_clips_for_i2s.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nesphome:\n  includes:\n    - startup.h\n```\n\n----------------------------------------\n\nTITLE: Multi-Click Configuration Template\nDESCRIPTION: Shows the contents of an included file that uses substitution variables for configuring button click behaviors.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/substitutions.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- timing: !include click-single.yaml\n  then:\n    - mqtt.publish:\n        topic: ${device_name}/button${id}/status\n        payload: single\n- timing: !include click-double.yaml\n  then:\n    - mqtt.publish:\n        topic: ${device_name}/button${id}/status\n        payload: double\n```\n\n----------------------------------------\n\nTITLE: Configuring Sigma-Delta Output in ESPHome\nDESCRIPTION: Example configuration for a sigma-delta output with a 10-second update interval, targeting a GPIO pin and including turn on/off actions\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/output/sigma_delta_output.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\noutput:\n  - platform: sigma_delta_output\n    update_interval: 10s\n    id: sd_heater_output\n\n    # Output to a pin\n    pin: GPIOXX\n\n    # Use the same output, but through automations\n    turn_on_action:\n      then:\n        - output.turn_on: heater_relay\n    turn_off_action:\n      then:\n        - output.turn_off: heater_relay\n\n  - platform: gpio\n    pin: GPIOXX\n    id: heater_relay\n```\n\n----------------------------------------\n\nTITLE: Configuring MY9231 Component Hub in ESPHome\nDESCRIPTION: This code snippet demonstrates the configuration of the MY9231 component hub in ESPHome. It defines the data and clock pins required for communication with the MY9231/MY9291 driver, as well as optional parameters such as the number of channels, number of chips, and bit depth.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/output/my9231.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"# Example configuration entry\nmy9231:\n  - data_pin: GPIOXX\n    clock_pin: GPIOXX\"\n```\n\n----------------------------------------\n\nTITLE: Select Component Detailed REST Response\nDESCRIPTION: JSON response format for a GET request with detail parameter showing additional information including available options.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/web-api/index.rst#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"select-house_mode\",\n  \"name\": \"House Mode\",\n  \"state\": \"party\",\n  \"value\": \"party\",\n  \"option\": [\"party\",\"sleep\",\"relax\",\"home\",\"away\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Stop Action Handler with Lambda Function\nDESCRIPTION: Implementation of a stop action handler using lambda functions to manage covers that require counter commands for stopping.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/cover/time_based.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nstop_action:\n  - lambda: !lambda |-\n      if (id(cover).get_last_operation() == CoverOperation::COVER_OPERATION_OPENING) {\n        // Cover is currently opening\n        id(cover_button_down).press();\n      } else if (id(cover).get_last_operation() == CoverOperation::COVER_OPERATION_CLOSING) {\n        // Cover is currently closing\n        id(cover_button_up).press();\n      }\n```\n\n----------------------------------------\n\nTITLE: Equivalent Lambda for Setting Global Variables in ESPHome\nDESCRIPTION: The equivalent C++ lambda code for setting global variables directly. This shows how to modify global values using direct assignment in lambda blocks.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/globals.rst#2025-04-21_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nid(my_global_var) = 10;\n```\n\n----------------------------------------\n\nTITLE: Using Logical Operators in ESPHome Conditions\nDESCRIPTION: Demonstrates how to use logical operators (and, or, xor, not) in ESPHome conditions to create complex conditional statements.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/automations/actions.rst#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - if:\n        condition:\n          # Same syntax for `and` as well as `xor` conditions\n          or:\n            - binary_sensor.is_on: some_binary_sensor\n            - binary_sensor.is_on: other_binary_sensor\n        # ...\n\n    - if:\n        any:\n          - not:\n              binary_sensor.is_off: some_binary_sensor\n          - binary_sensor.is_on: some_other_sensor\n```\n\n----------------------------------------\n\nTITLE: Specifying Pillow Dependency for ESPHome Documentation in Python\nDESCRIPTION: Lists the Pillow library as a requirement for the ESPHome documentation project. This dependency is used specifically for image checking in the lint.py script.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/requirements_test.txt#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# for lint.py checking of images\npillow\n```\n\n----------------------------------------\n\nTITLE: Configuring Microphone Data Logging in ESPHome\nDESCRIPTION: This code snippet demonstrates how to configure a microphone component in ESPHome to log the size of received audio data using the `logger.log` action within the `on_data` trigger. The `on_data` trigger fires when new data is received from the microphone and the code logs the amount of data received. The data is passed as a vector called `x`.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/microphone/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmicrophone:\n  - platform: ...\n    on_data:\n      - logger.log:\n          format: \"Received %d bytes\"\n          args: ['x.size()']\n```\n\n----------------------------------------\n\nTITLE: Switching DF-Player Storage Device in ESPHome\nDESCRIPTION: Action to change the active storage device between TF card and USB drive for the DF-Player.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/dfplayer.rst#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - dfplayer.set_device: TF_CARD\n```\n\n----------------------------------------\n\nTITLE: Web Server Configuration for Offline Usage in YAML\nDESCRIPTION: Configuration to serve all assets locally, allowing the web server to function without internet access.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/web_server.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nweb_server:\n  local: true\n```\n\n----------------------------------------\n\nTITLE: On Emulated Tag Scan Trigger\nDESCRIPTION: This YAML snippet configures the ``on_emulated_tag_scan`` trigger, which is activated when another reader scans the PN7150 in emulation mode.  There are no parameters passed to this trigger.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/pn7150.rst#2025-04-21_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\npn7150_i2c:\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Disabling Emulation Mode Action in YAML\nDESCRIPTION: This YAML snippet disables card/tag emulation mode on the PN7160, making it cease to respond to scanners like smartphones. It is configured within an ESPHome automation setup and relies on having a PN7160 properly enabled for emulation controls.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/pn7160.rst#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - tag.emulation_off: my_pn7160_id\n```\n\n----------------------------------------\n\nTITLE: Configuring Teleinfo Text Sensors in YAML\nDESCRIPTION: Example configuration for setting up a Teleinfo text sensor to monitor the tariff option (OPTARIF).\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/teleinfo.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntext_sensor:\n  - platform: teleinfo\n    tag_name: \"OPTARIF\"\n    name: \"optarif\"\n    teleinfo_id: myteleinfo\n```\n\n----------------------------------------\n\nTITLE: Pulse Meter with Throttle Configuration\nDESCRIPTION: Adds throttling to the pulse meter sensor to prevent excessive updates to Home Assistant.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/cookbook/power_meter.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: pulse_meter\n    # ...\n    filters:\n      - throttle_average: 10s\n      - filter_out: NaN\n```\n\n----------------------------------------\n\nTITLE: Device Discovery Configuration (YAML)\nDESCRIPTION: This configuration snippet is used for discovering Radon Eye devices and identifying their MAC addresses. It requires setting the logger level to DEBUG and including the esp32_ble_tracker and radon_eye_ble components. This allows the ESPHome device to scan for and report nearby Radon Eye devices.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/radon_eye_ble.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlogger:\n  level: DEBUG # Required for the tracker to show the device\n\nesp32_ble_tracker:\nradon_eye_ble:\n```\n\n----------------------------------------\n\nTITLE: Configuring Monochromatic Light in YAML\nDESCRIPTION: Example configuration for creating a monochromatic light with a specific output component, demonstrating how to set up a brightness-controlled light in ESPHome\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/light/monochromatic.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlight:\n  - platform: monochromatic\n    name: \"Kitchen Lights\"\n    output: output_component1\n```\n\n----------------------------------------\n\nTITLE: Resetting Energy Value in PZEM-004T V3 using YAML\nDESCRIPTION: This YAML code snippet demonstrates how to reset the total energy reading of the PZEM-004T V3 device. The reset action is executed using the identifier of the pzemac device and is typically triggered by an event.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/pzemac.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - pzemac.reset_energy: pzemac_1\n```\n\n----------------------------------------\n\nTITLE: Configuring GDK101 Binary Sensor for Vibration Detection\nDESCRIPTION: This YAML snippet sets up a binary sensor to detect vibrations that may disturb the radiation measurements of the GDK101 sensor.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/gdk101.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nbinary_sensor:\n  - platform: gdk101\n    vibrations:\n      name: \"GDK101 Vibrations\"\n```\n\n----------------------------------------\n\nTITLE: Including raw HTML in reStructuredText\nDESCRIPTION: Includes the contents of an external SVG file as raw HTML in the document.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/index.rst#2025-04-21_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. raw:: html\n    :file: ../images/logo-docs.svg\n```\n\n----------------------------------------\n\nTITLE: Configuring On Closed Trigger for Valve in YAML\nDESCRIPTION: YAML configuration for setting up a trigger when a valve reaches a fully closed state.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/valve/index.rst#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nvalve:\n  - platform: template  # or any other platform\n    # ...\n    on_closed:\n      - logger.log: \"Valve is Closed!\"\n```\n\n----------------------------------------\n\nTITLE: ESPHome Upload Command\nDESCRIPTION: Command for uploading the configuration to the Sonoff Basic device via USB or OTA.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/cookbook/sonoff-fishpond-pump.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nesphome <some-yaml-file> run\n```\n\n----------------------------------------\n\nTITLE: Configuring Restart Switch in ESPHome\nDESCRIPTION: Configuration example for creating a restart switch in ESPHome. This switch allows remote rebooting of the ESP device through Home Assistant. The switch can be customized with a name that will appear in the Home Assistant interface.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/switch/restart.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nswitch:\n  - platform: restart\n    name: \"Living Room Restart\"\n```\n\n----------------------------------------\n\nTITLE: Displaying BMS Status with Text Sensor\nDESCRIPTION: This snippet sets up a text sensor to display the current status of the Daly BMS, which can indicate charging, discharging, or stationary states.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/daly_bms.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n\"    text_sensor:\\n      - platform: daly_bms\\n        status:\\n          name: \\\"BMS Status\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Setting up on_armed_away Trigger for Alarm Panel in YAML\nDESCRIPTION: YAML configuration for adding an on_armed_away trigger to an Alarm Control Panel, which activates when the alarm enters armed_away state.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/alarm_control_panel/index.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nalarm_control_panel:\n  # ...\n  on_armed_away:\n    then:\n      - logger.log: \"Alarm armed_away!\"\n```\n\n----------------------------------------\n\nTITLE: Pin Configuration in YAML\nDESCRIPTION: Demonstrates basic pin configuration syntax using either GPIO numbers or board-specific aliases like NodeMCU's D0-D8 pins.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/configuration-types.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsome_config_option:\n  pin: GPIO16\n\nsome_config_option:\n  # alias on the NodeMCU ESP8266:\n  pin: D0\n```\n\n----------------------------------------\n\nTITLE: Running ESPHome using Docker\nDESCRIPTION: Command for running ESPHome using Docker with the new image name and required network settings for mDNS support.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/changelog/v1.11.0.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -it --net=host esphome/esphome livingroom.yaml run\n```\n\n----------------------------------------\n\nTITLE: Basic ESP32 BLE Configuration in YAML\nDESCRIPTION: Example configuration for setting up the esp32_ble component with keyboard_only IO capability for PIN code authentication.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/esp32_ble.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration\n\nesp32_ble:\n  io_capability: keyboard_only\n```\n\n----------------------------------------\n\nTITLE: AT581x Switch Configuration\nDESCRIPTION: Configuration for a switch component to enable/disable the radar's radio frequency hardware.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/at581x.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nswitch:\n  - platform: at581x\n    at581x_id: Radar\n    name: \"Enable Radar\"\n```\n\n----------------------------------------\n\nTITLE: Font Configuration for OLED Display\nDESCRIPTION: Configuration for three different TrueType fonts with various sizes for display rendering.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/cookbook/display_time_temp_oled.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nfont:\n  - file: 'slkscr.ttf'\n    id: font1\n    size: 8\n\n  - file: 'BebasNeue-Regular.ttf'\n    id: font2\n    size: 48\n\n  - file: 'arial.ttf'\n    id: font3\n    size: 14\n```\n\n----------------------------------------\n\nTITLE: Configuring BME280 Sensor with SPI Interface in ESPHome\nDESCRIPTION: YAML configuration for BME280 sensor using SPI interface. Sets up temperature, pressure and humidity measurements with named sensors and CS pin specification.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/bme280.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: bme280_spi\n    temperature:\n      name: \"BME280 Temperature\"\n    pressure:\n      name: \"BME280 Pressure\"\n    humidity:\n      name: \"BME280 Humidity\"\n    cs_pin: GPIOXX\n```\n\n----------------------------------------\n\nTITLE: Modbus Select Lambda Example (Read)\nDESCRIPTION: This is an example of a lambda function used to process data read from Modbus registers. It logs the received value and parses bytes from the data vector, returning a string based on the value.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/select/modbus_controller.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n    # example\n    lambda: |-\n      ESP_LOGD(\"Reg1000\", \"Received value %lld\", x);\n      ESP_LOGD(\"Reg1000\", \"Parsed from bytes 0x%x;0x%x\", data[item->offset], data[item->offset + 1]);\n      if (x > 3) {\n        return std::string(\"Three\");\n      }\n```\n\n----------------------------------------\n\nTITLE: Configuring Switch Menu Item in ESPHome\nDESCRIPTION: YAML configuration for a switch menu item with custom text, associated switch component, and automations for enter, leave, and value change events.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display_menu/index.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nlcd_menu:\n  items:\n    - type: switch\n      immediate_edit: false\n      text: 'My Switch'\n      on_text: 'Bright'\n      off_text: 'Dark'\n      switch: my_switch\n      on_enter:\n        then:\n          lambda: 'ESP_LOGI(\"display_menu\", \"switch enter: %s, %s\", it->get_text().c_str(), it->get_value_text().c_str());'\n      on_leave:\n        then:\n          lambda: 'ESP_LOGI(\"display_menu\", \"switch leave: %s, %s\", it->get_text().c_str(), it->get_value_text().c_str());'\n      on_value:\n        then:\n          lambda: 'ESP_LOGI(\"display_menu\", \"switch value: %s, %s\", it->get_text().c_str(), it->get_value_text().c_str());'\n\nswitch:\n  - platform: template\n    id: my_switch\n    optimistic: true\n```\n\n----------------------------------------\n\nTITLE: Alarm State Display Configuration\nDESCRIPTION: Configuration for displaying alarm status from Home Assistant on the OLED display.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/cookbook/display_time_temp_oled.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ntext_sensor:\n  - platform: homeassistant\n    entity_id: alarm_control_panel.my_alarm_system\n    name: \"Alarm State\"\n    id: alarm_state\n\ndisplay:\n  - platform: ssd1306_i2c\n    model: \"SH1106 128x64\"\n    reset_pin: GPIOXX\n    address: 0x3C\n    lambda: |-\n      // Print \"Alarm State: <state>\" in top center\n      it.printf(64, 0, id(font1), TextAlign::TOP_CENTER, \"Alarm State: %s\", id(alarm_state).state.c_str());\n```\n\n----------------------------------------\n\nTITLE: Grouping Images by Type\nDESCRIPTION: Configuration that demonstrates how to group multiple images by their encoding type to avoid repetition.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/image.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n  grayscale:\n    - file: \"image1.png\"\n      id: image1\n    - file: \"image2.png\"\n      id: image2\n    - file: \"image3.png\"\n      id: image3\n\n  rgb565:\n    - file: \"image4.png\"\n      id: image4\n    - file: \"image5.png\"\n      id: image5\n```\n\n----------------------------------------\n\nTITLE: Controlling the Aura LED\nDESCRIPTION: Configure LED patterns like breathing, flashing, and setting color for visual feedback tied to fingerprint operations. Useful for enhancing the user interaction experience with richer LED displays.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/fingerprint_grow.rst#2025-04-21_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - fingerprint_grow.aura_led_control:\n        state: BREATHING\n        speed: 100\n        color: BLUE\n        count: 2\nfingerprint_grow:\n  on_finger_scan_start:\n    - fingerprint_grow.aura_led_control:\n        state: ALWAYS_ON\n        color: GREEN\n        speed: 0\n        count: 0\n  on_finger_scan_matched:\n    - fingerprint_grow.aura_led_control:\n        state: BREATHING\n        speed: 200\n        color: BLUE\n        count: 1\n  on_finger_scan_unmatched:\n    - fingerprint_grow.aura_led_control:\n        state: FLASHING\n        speed: 25\n        color: RED\n        count: 2\n  on_finger_scan_misplaced:\n    - fingerprint_grow.aura_led_control:\n        state: FLASHING\n        speed: 25\n        color: PURPLE\n        count: 2\n  on_enrollment_scan:\n    - fingerprint_grow.aura_led_control:\n        state: FLASHING\n        speed: 25\n        color: BLUE\n        count: 2\n    - fingerprint_grow.aura_led_control:\n        state: ALWAYS_ON\n        speed: 0\n        color: PURPLE\n        count: 0\n  on_enrollment_done:\n    - fingerprint_grow.aura_led_control:\n        state: BREATHING\n        speed: 100\n        color: BLUE\n        count: 2\n  on_enrollment_failed:\n    - fingerprint_grow.aura_led_control:\n        state: FLASHING\n        speed: 25\n        color: RED\n        count: 4\non...:\n  then:\n    - fingerprint_grow.enroll: ...\n    - fingerprint_grow.aura_led_control:\n        state: ALWAYS_ON\n        speed: 0\n        color: PURPLE\n        count: 0\n```\n\n----------------------------------------\n\nTITLE: Stopping a Valve Using C++ Lambda\nDESCRIPTION: C++ lambda expression to stop a valve programmatically in ESPHome.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/valve/index.rst#2025-04-21_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\nauto call = id(valve_1).make_call();\ncall.set_command_stop();\ncall.perform();\n```\n\n----------------------------------------\n\nTITLE: Bash/ZSH Auto-completion Setup\nDESCRIPTION: Command to enable ESPHome CLI auto-completion in Bash or ZSH shells.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/cli.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\neval \"$(register-python-argcomplete esphome)\"\n```\n\n----------------------------------------\n\nTITLE: Erasing ESP Flash Memory Using esptool\nDESCRIPTION: Command to completely erase the flash memory of an ESP microcontroller using esptool. This removes all existing data and settings from the device.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/faq.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nesptool --port /dev/ttyUSB0 erase_flash\n```\n\n----------------------------------------\n\nTITLE: External Components Configuration in YAML\nDESCRIPTION: Example YAML configuration for adding external components from a GitHub PR for testing purposes.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/contributing.rst#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nexternal_components:\n  - source: github://pr#2639\n    components: [ rtttl ]\n```\n\n----------------------------------------\n\nTITLE: Running ESPHome Lint Tests with Docker\nDESCRIPTION: Commands for running the full ESPHome lint and test suite using Docker containers. Includes both the complete test suite and quick lint checks for changed files only.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/contributing.rst#2025-04-21_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n# Full lint+test suite\ndocker run --rm -v \"${PWD}/\":/esphome -it ghcr.io/esphome/esphome-lint script/fulltest\n\n# Run lint only over changed files\ndocker run --rm -v \"${PWD}/\":/esphome -it ghcr.io/esphome/esphome-lint script/quicklint\n```\n\n----------------------------------------\n\nTITLE: Navigating Left in a Menu using ESPHome YAML\nDESCRIPTION: This YAML snippet configures the left action for a binary sensor's on_press event, typically for a joystick. In joystick mode, it decreases values or navigates back one menu level. It can also exit editing mode in rotary mode. No specific dependencies are mentioned.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display_menu/index.rst#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nbinary_sensor:\n  - platform: gpio\n    ...\n    on_press:\n      - display_menu.left:\n```\n\n----------------------------------------\n\nTITLE: Tuya Fan Controller Output Example\nDESCRIPTION: Example output from a Tuya fan controller showing various datapoints and their values, including switches, enums, and int values.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/tuya.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n[12:39:45][C][tuya:023]: Tuya:\n[12:39:45][C][tuya:032]:   Datapoint 1: switch (value: ON)\n[12:39:45][C][tuya:036]:   Datapoint 3: enum (value: 1)\n[12:39:45][C][tuya:036]:   Datapoint 6: enum (value: 0)\n[12:39:45][C][tuya:034]:   Datapoint 7: int value (value: 0)\n[12:39:45][C][tuya:032]:   Datapoint 9: switch (value: OFF)\n[12:39:45][C][tuya:046]:   Product: '{\"p\":\"hqq73kftvzh8c92u\",\"v\":\"1.0.0\",\"m\":0}'\n```\n\n----------------------------------------\n\nTITLE: Opening a Valve Using Action in YAML\nDESCRIPTION: YAML configuration for an action to open a valve with a specific ID when triggered.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/valve/index.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - valve.open: valve_1\n```\n\n----------------------------------------\n\nTITLE: Minimal OpenTherm Numeric Input Configuration\nDESCRIPTION: This configuration showcases a minimal setup for setting the boiler's water temperature setpoint as a number using the OpenTherm component in ESPHome.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/opentherm.rst#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# An extremely minimal configuration which only enables you to set the boiler's\n# water temperature setpoint as a number.\n\nopentherm:\n  in_pin: GPIOXX\n  out_pin: GPIOXX\n  ch_enable: true\n\nnumber:\n  - platform: opentherm\n    t_set:\n      name: \"Boiler Control setpoint\"\n```\n\n----------------------------------------\n\nTITLE: Configuring LG Remote Transmission in YAML\nDESCRIPTION: Configuration for sending LG infrared remote codes with customizable bit length.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/remote_transmitter.rst#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - remote_transmitter.transmit_lg:\n      data: 0x20DF10EF\n      nbits: 32\n```\n\n----------------------------------------\n\nTITLE: Duty Time Start Action in ESPHome Automation\nDESCRIPTION: Demonstrates how to start/resume time tracking for a duty time sensor in an ESPHome automation trigger\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/duty_time.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - sensor.duty_time.start: my_climate_work_time\n```\n\n----------------------------------------\n\nTITLE: Improv on_stop Automation Example\nDESCRIPTION: Example of the on_stop automation trigger that executes when the Improv service stops.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/esp32_improv.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nesp32_improv:\n  on_stop:\n    then:\n      - logger.log: \"Improv stopped\"\n```\n\n----------------------------------------\n\nTITLE: Configuring UART for Shelly Dimmer 2\nDESCRIPTION: This YAML snippet shows the required UART configuration for the Shelly Dimmer 2. It specifies the TX and RX pins and sets the baud rate to 115200.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/light/shelly_dimmer.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nuart:\n    tx_pin: 1\n    rx_pin: 3\n    baud_rate: 115200\n```\n\n----------------------------------------\n\nTITLE: Number Component REST Response Format\nDESCRIPTION: JSON response format for a GET request to a number endpoint showing the component's current state and value.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/web-api/index.rst#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"number-desired_delay\",\n  \"state\": \"20.0000\",\n  \"value\": 20\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Menu Item Value Change Automation in ESPHome\nDESCRIPTION: YAML configuration for an on_value automation that logs when a select item's value changes.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display_menu/index.rst#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nlcd_menu:\n  ...\n  items:\n    - type: select\n      text: 'Select Item'\n      select: my_select_1\n      on_value:\n        then:\n          lambda: 'ESP_LOGI(\"display_menu\", \"select value: %s, %s\", it->get_text().c_str(), it->get_value_text().c_str());'\n```\n\n----------------------------------------\n\nTITLE: Turning Light On with Shorter Lambda in ESPHome\nDESCRIPTION: This code snippet provides a shorter example of turning on a light using a lambda expression, setting the brightness, and performing the action in a single line.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/light/index.rst#2025-04-21_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\n\"id(light_1).turn_on().set_brightness(1.0).perform();\"\n```\n\n----------------------------------------\n\nTITLE: Light State Response\nDESCRIPTION: Comprehensive JSON response structure for a light component showing all possible state attributes including brightness, color, and effects.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/web-api/index.rst#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"light-living_room_lights\",\n  \"state\": \"ON\",\n  \"brightness\": 255,\n  \"color\": {\n    \"r\": 255,\n    \"g\": 255,\n    \"b\": 255\n  },\n  \"effect\": \"None\",\n  \"white_value\": 255\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SEO metadata in reStructuredText\nDESCRIPTION: Sets the page title and SEO metadata using reStructuredText directives.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. title:: ESPHome Docs\n\n.. seo::\n    :description: ESPHome main documentation\n    :image: logo-docs.svg\n```\n\n----------------------------------------\n\nTITLE: Transmitting Nexa Remote Codes with YAML\nDESCRIPTION: This snippet illustrates how to send Nexa RF remote codes to a transmitter. The configuration requires specifying the device, state, group, channel, and level codes. Dependencies include the correct setup of the remote transmitter component in ESPHome.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/remote_transmitter.rst#2025-04-21_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - remote_transmitter.transmit_nexa:\n      device: 0x38DDB4A\n      state: 1\n      group: 0\n      channel: 15\n      level: 0\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Colors for ESPHome Graphs\nDESCRIPTION: Configuration for creating custom color definitions in ESPHome that can be referenced in graph traces and other components. The example defines four colors: red, green, blue, and yellow.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/graph.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncolor:\n  - id: my_red\n    red: 100%\n    green: 0%\n    blue: 0%\n  - id: my_green\n    red: 0%\n    green: 100%\n    blue: 0%\n  - id: my_blue\n    red: 0%\n    green: 0%\n    blue: 100%\n  - id: my_yellow\n    red: 100%\n    green: 100%\n    blue: 0%\n```\n\n----------------------------------------\n\nTITLE: Checking if a Select Contains an Index in ESPHome (C++)\nDESCRIPTION: Shows how to verify if an ESPHome select component has an option at a specified index. Uses the has_index() method and logs the result.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/select/index.rst#2025-04-21_snippet_11\n\nLANGUAGE: cpp\nCODE:\n```\nauto index = 3;\nif (id(my_select).has_index(index)) {\n  ESP_LOGI(\"main\", \"Select has index offset %d\", index);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Mode Off Action for Haier Climate Device\nDESCRIPTION: YAML configuration to disable the health mode on a Haier climate device.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/climate/haier.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    climate.haier.health_off: device_id\n```\n\n----------------------------------------\n\nTITLE: Configuring IÂ²C and Arduino Port Expander in ESPHome\nDESCRIPTION: Sets up the IÂ²C bus and creates a custom component for the Arduino Port Expander. This establishes the communication between the ESP8266/ESP32 and the Arduino board.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/cookbook/arduino_port_extender.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nesphome:\n  # ...\n  includes:\n      - arduino_port_expander.h\n\ni2c:\n  id: i2c_component\n\ncustom_component:\n  - id: ape\n    lambda: |-\n      auto ape_component = new ArduinoPortExpander(i2c_component, 0x08);\n      return {ape_component};\n```\n\n----------------------------------------\n\nTITLE: Manipulating Datetime Components in Lambda Functions\nDESCRIPTION: Example of how to use the make_call method to update a full datetime value within a lambda function, showing how to set a datetime string and perform the update.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/datetime/index.rst#2025-04-21_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\n// Within lambda, set the datetime to 2024-12-31 12:34:56\nauto call = id(my_datetime).make_call();\ncall.set_datetime(\"2024-12-31 12:34:56\");\ncall.perform();\n```\n\n----------------------------------------\n\nTITLE: Inverting Binary Sensor in YAML (New Syntax)\nDESCRIPTION: Example of the new syntax for inverting a binary sensor using the 'invert' filter within the 'filters' section.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/changelog/v1.7.0.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nbinary_sensor:\n  - platform: ...\n    # ...\n    filters:\n      - invert:\n```\n\n----------------------------------------\n\nTITLE: LVGL Select Configuration Example\nDESCRIPTION: This example shows how to configure an LVGL select component using a dropdown widget.  The `widget` parameter specifies the ID of the LVGL dropdown widget to use. The `name` parameter sets the name of the select in Home Assistant.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/select/lvgl.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nselect:\n  - platform: lvgl\n    widget: dropdown_id\n    name: LVGL Dropdown\n```\n\n----------------------------------------\n\nTITLE: Configuring ESP8266 State Restoration from Flash in YAML\nDESCRIPTION: Enables restoring state from flash instead of RTC memory for ESP8266 devices, allowing recovery of relay states after a power cycle.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/changelog/v1.12.0.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nesphome:\n  esp8266_restore_from_flash: true\n```\n\n----------------------------------------\n\nTITLE: Configuring PSRAM in ESPHome using YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure PSRAM on an ESP32 module using ESPHome, specifying operational mode and speed. Required dependencies include ESPHome and an ESP32 module with a compatible PSRAM. Inputs include mode (quad or octal) and speed (40, 80, 120MHz). The snippet configures PSRAM settings, and incorrect configurations may result in defaults being applied or PSRAM not functioning.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/psram.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\npsram:\n  mode: octal\n  speed: 80MHz\n```\n\n----------------------------------------\n\nTITLE: LVGL Theme and Style Definitions in ESPHome\nDESCRIPTION: Configuration for defining global LVGL themes and styles including gradient styles, button states, and widget-specific styling. Shows how to set up inheritance-based styling system with theme overrides.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/cookbook/lvgl.rst#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nlvgl:\n  theme:\n    label:\n      text_font: my_font\n    button:\n      bg_color: 0x2F8CD8\n      bg_grad_color: 0x005782\n      bg_grad_dir: VER\n      bg_opa: COVER\n      border_color: 0x0077b3\n      border_width: 1\n      text_color: 0xFFFFFF\n      pressed:\n        bg_color: 0x006699\n        bg_grad_color: 0x00334d\n      checked:\n        bg_color: 0x1d5f96\n        bg_grad_color: 0x03324A\n        text_color: 0xfff300\n```\n\n----------------------------------------\n\nTITLE: Configuring SUN_GTIL2 Sensors in ESPHome\nDESCRIPTION: Sets up various sensors to monitor the inverter's operational metrics including temperature, DC/AC voltage, and power readings. Many sensors include throttle_average filters to smooth readings over a 30-second period.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sun_gtil2.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: sun_gtil2\n    temperature:\n      id: gtil_temperature\n      name: \"Heatsink Temperature\"\n      filters:\n        - throttle_average: 30s\n    dc_voltage:\n      id: gtil_dc_voltage\n      name: \"DC Voltage\"\n      filters:\n        - throttle_average: 30s\n    ac_voltage:\n      id: gtil_ac_voltage\n      name: \"AC Voltage\"\n      filters:\n        - throttle_average: 30s\n    ac_power:\n      id: gtil_ac_power\n      name: \"AC Power\"\n    dc_power:\n      id: gtil_dc_power\n      name: \"DC Power\"\n    limiter_power:\n      id: gtil_limiter_power\n      internal: True\n```\n\n----------------------------------------\n\nTITLE: Automation Trigger for Double Tap Detection\nDESCRIPTION: This YAML snippet demonstrates the automation that triggers when a double tap is detected on the MSA301 or MSA311 sensor, logging the double tap event.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/msa3xx.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n\"msa3xx:\\n  type: msa301\\n  # ...\\n  on_double_tap:\\n    - then: \\n        - logger.log: \\\"Double tapped\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Installing SDL2 on MacOS\nDESCRIPTION: Command for installing SDL2 and libsodium dependencies using Homebrew package manager on MacOS.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/sdl.rst#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nbrew install sdl2 libsodium\n```\n\n----------------------------------------\n\nTITLE: Assigning JSON Value to Root Object in C++\nDESCRIPTION: This snippet demonstrates how to assign a string value to a key in a JSON root object using C++. It's a simple example of JSON manipulation.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/http_request.rst#2025-04-21_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\nroot[\"greeting\"] = \"Hello World\";\n```\n\n----------------------------------------\n\nTITLE: reStructuredText Title Formatting\nDESCRIPTION: Examples of proper title hierarchy formatting in reStructuredText.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/contributing.rst#2025-04-21_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\nMy Title\n========\n\nMy Section\n----------\n\nMy Sub-section\n**************\n\nMy Sub-sub-section\n^^^^^^^^^^^^^^^^^^\n```\n\n----------------------------------------\n\nTITLE: Starting Full Sprinkler Cycle in YAML\nDESCRIPTION: Action to start a full cycle of the sprinkler system, enabling auto-advance and iterating through all enabled valves.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sprinkler.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - sprinkler.start_full_cycle: sprinkler_ctrlr\n```\n\n----------------------------------------\n\nTITLE: Nextion Custom Switch Protocol Implementation\nDESCRIPTION: Implementation of the custom switch protocol for Nextion displays to handle switch state updates.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/switch/nextion.rst#2025-04-21_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nprinth 90\nprints \"r0\",0\nprinth 00\nprints r0.val,0\nprinth FF FF FF\n```\n\n----------------------------------------\n\nTITLE: Basic ESPHome CLI Structure\nDESCRIPTION: Shows the base command format for ESPHome's command line interface.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/cli.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nesphome [OPTIONS] <COMMAND> <CONFIGURATION...> [ARGUMENTS]\n```\n\n----------------------------------------\n\nTITLE: Wave Mini Battery Level Configuration\nDESCRIPTION: Configuration for adding battery level percentage reporting to Wave Mini using the copy sensor component.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/airthings_ble.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: airthings_wave_mini\n    ble_client_id: airthingsmini\n    battery_voltage:\n      id: bv\n      name: \"WaveMini Battery Voltage\"\n  - platform: copy\n    source_id: bv\n    name: \"WaveMini Battery Level\"\n    unit_of_measurement: \"%\"\n    device_class: battery\n    accuracy_decimals: 0\n    filters:\n      - calibrate_linear:\n        - 2.7 -> 0\n        - 4.5 -> 100\n```\n\n----------------------------------------\n\nTITLE: Setting Up Git Environment for ESPHome Contributions\nDESCRIPTION: Provides a series of Git commands to set up a development environment for contributing to ESPHome, including forking, cloning, and creating feature branches.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/contributing.rst#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n# Clone your fork\ngit clone https://github.com/<YOUR_GITHUB_USERNAME>/<REPO_NAME>.git\n# For example: git clone https://github.com/OttoWinter/esphome.git\n\n# To continue you now need to enter the directory you created above\ncd <REPO_NAME>\n# For example: cd esphome\n\n# Add \"upstream\" remote\ngit remote add upstream https://github.com/esphome/<REPO_NAME>.git\n# For example: git remote add upstream https://github.com/esphome/esphome.git\n\n# For each patch, create a new branch from latest dev\ngit checkout dev\ngit pull upstream dev\ngit checkout -b <MY_NEW_FEATURE>\n# For example: git checkout -b gpio-switch-fix\n\n# Make your modifications, then commit changes with message describing changes\ngit add .\ngit commit -m \"<COMMIT_MESSAGE>\"\n# For example: git commit -m \"Fix GPIO Switch Not Turning Off Interlocked Switches\"\n\n# Upload changes\ngit push -u origin <BRANCH_NAME>\n# For example: git push -u origin gpio-switch-fix\n```\n\n----------------------------------------\n\nTITLE: I2S Media Player Configuration Update\nDESCRIPTION: Example showing the breaking change in I2S Media Player configuration where i2s_lrclk_pin and i2s_bclk_pin settings are moved to a new i2s_audio component.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/changelog/2023.4.0.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Before\nmedia_player:\n  - platform: i2s_audio\n    name: ESPHome I2S Media Player\n    dac_type: external\n    i2s_lrclk_pin: GPIO33\n    i2s_bclk_pin: GPIO19\n    i2s_dout_pin: GPIO22\n    mode: mono\n\n# After\ni2s_audio:\n  i2s_lrclk_pin: GPIO33\n  i2s_bclk_pin: GPIO19\n\nmedia_player:\n  - platform: i2s_audio\n    name: ESPHome I2S Media Player\n    dac_type: external\n    i2s_dout_pin: GPIO22\n    mode: mono\n```\n\n----------------------------------------\n\nTITLE: Sending Pronto Format Codes with YAML\nDESCRIPTION: This code allows the transmission of raw codes in Pronto format. The configuration must include a string of Pronto codes. This setup is reliant on access to correct Pronto codes which can often be sourced from remote control databases.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/remote_transmitter.rst#2025-04-21_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - remote_transmitter.transmit_pronto:\n      data: \"0000 006D 0010 0000 0008 0020 0008 0046 000A 0020 0008 0020 0008 001E 000A 001E 000A 0046 000A 001E 0008 0020 0008 0020 0008 0046 000A 0046 000A 0046 000A 001E 000A 001E 0008 06C3\"\n```\n\n----------------------------------------\n\nTITLE: On Tag Trigger - MQTT Publish\nDESCRIPTION: This YAML snippet configures the ``on_tag`` trigger to publish the tag ID to an MQTT topic. The `!lambda 'return x;'` extracts the tag ID from the trigger's parameter `x`.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/pn7150.rst#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\npn7150_i2c:\n  # ...\n  on_tag:\n    then:\n      - mqtt.publish:\n          topic: pn7150/tag\n          payload: !lambda 'return x;'\n```\n\n----------------------------------------\n\nTITLE: Basic SSD1325 SPI Display Configuration in YAML\nDESCRIPTION: Basic configuration example for setting up an SSD1325 OLED display using SPI communication protocol with ESPHome. Defines the SPI pins and basic display settings.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/ssd1325.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nspi:\n  clk_pin: D5\n  mosi_pin: D7\n\ndisplay:\n  - platform: ssd1325_spi\n    model: \"SSD1325 128x64\"\n    reset_pin: D0\n    cs_pin: D8\n    dc_pin: D1\n    lambda: |-\n      it.print(0, 0, id(font), \"Hello World!\");\n```\n\n----------------------------------------\n\nTITLE: Hardware Tools Documentation Table in RST\nDESCRIPTION: A reStructuredText table listing essential hardware tools, their purposes, costs and images for ESPHome device work\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/physical_device_connection.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. list-table::\n    :header-rows: 1\n    :widths: 1 3 1 3\n\n    * - Name\n      - Purpose\n      - Approx. cost\n      - Picture\n```\n\n----------------------------------------\n\nTITLE: Configuring TEE501 Temperature Sensor in ESPHome\nDESCRIPTION: YAML configuration example for setting up a TEE501 temperature sensor. Demonstrates how to configure the sensor with a custom name, IÂ²C address, and update interval. Requires IÂ²C bus to be configured in the ESPHome setup.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/tee501.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: tee501\n    name: \"Office Temperature\"\n    address: 0x48\n    update_interval: 60s\n```\n\n----------------------------------------\n\nTITLE: Implementing Display Pages with Lambda in ESPHome YAML\nDESCRIPTION: Configuration for implementing paginated display output on LCD displays that don't natively support pages. Uses globals for page tracking and interval-based page cycling.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/cookbook/lambda_magic.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndisplay:\n  - platform: lcd_pcf8574\n    dimensions: 20x4\n    address: 0x27\n    id: lcd\n    lambda: |-\n          switch (id(page)){\n            case 1:\n              it.print(0, 1, \"Page1\");\n              break;\n            case 2:\n              it.print(0, 1, \"Page2\");\n              break;\n            case 3:\n              it.print(0, 1, \"Page3\");\n              break;\n          }\n\nglobals:\n- id: page\n  type: int\n  initial_value: \"1\"\n\ninterval:\n- interval: 5s\n  then:\n    - lambda: |-\n        id(page) = (id(page) + 1);\n        if (id(page) > 3) {\n          id(page) = 1;\n        }\n```\n\n----------------------------------------\n\nTITLE: Updating Arc Widget Style with lvgl.arc.update Action in YAML\nDESCRIPTION: This YAML code demonstrates how to use the `lvgl.arc.update` action to modify the appearance of an arc widget, specifically changing the knob's background color and the arc's value. It highlights the dynamic styling capabilities provided by LVGL within ESPHome.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/widgets.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n    # Example action:\n    on_...:\n      then:\n        - lvgl.arc.update:\n            id: arc_id\n            knob:\n              bg_color: 0x00FF00\n            value: 55\n\n```\n\n----------------------------------------\n\nTITLE: Installing Documentation Dependencies\nDESCRIPTION: Command to install Python dependencies for building ESPHome documentation locally.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/contributing.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Generating MD5 Hash on Linux Shell\nDESCRIPTION: This command generates the MD5 hash of a firmware binary file on most Linux distributions and saves it to a file. The resulting file can then be used for MD5 checksum verification during the OTA update process.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/ota/http_request.rst#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmd5sum firmware.ota.bin > firmware.md5\n\n```\n\n----------------------------------------\n\nTITLE: Implementing While Loop in ESPHome YAML\nDESCRIPTION: Demonstrates how to use a while loop in ESPHome automations. The loop continues executing as long as the specified condition is true.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/automations/actions.rst#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - while:\n      condition:\n        binary_sensor.is_on: some_binary_sensor\n      then:\n      - logger.log: \"Still executing\"\n      - light.toggle: some_light\n      - delay: 5s\n```\n\n----------------------------------------\n\nTITLE: Multiple Configuration Files Usage\nDESCRIPTION: Demonstrates how to specify multiple configuration files for ESPHome commands.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/cli.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nesphome run livingroom.yaml kitchen.yaml\n```\n\n----------------------------------------\n\nTITLE: Preventing Deep Sleep Mode\nDESCRIPTION: Action to prevent a device from entering deep sleep mode, useful for keeping the ESP active during operations like OTA updates.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/deep_sleep.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - deep_sleep.prevent: deep_sleep_1\n```\n\n----------------------------------------\n\nTITLE: Parsing Simple JSON Structure in JSON\nDESCRIPTION: An example of a simple JSON structure with key-value pairs. It shows how basic data can be represented in JSON format.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/json.rst#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"key\": 42.0, \"greeting\": \"Hello World\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring mDNS to Announce Node\nDESCRIPTION: This YAML configuration enables mDNS for an ESPHome node, allowing it to announce its presence on the local network. The 'disabled' option controls whether mDNS functionality is active.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/mdns.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nmdns:\n  disabled: false\n```\n\n----------------------------------------\n\nTITLE: JSON Object Creation in ArduinoJson 6\nDESCRIPTION: Example showing the updated syntax for creating nested JSON objects after upgrading to ArduinoJson v6, where reference modifiers are no longer required when creating JsonObjects.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/changelog/2022.1.0.rst#2025-04-21_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nJsonObject &blah = root.createNestedObject(\"blah\");\n\n// This should now be:\n\nJsonObject blah = root.createNestedObject(\"blah\");\n```\n\n----------------------------------------\n\nTITLE: Checking Valve Position in C++ Lambda\nDESCRIPTION: C++ lambda expression to check the current position of a valve in ESPHome.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/valve/index.rst#2025-04-21_snippet_11\n\nLANGUAGE: cpp\nCODE:\n```\nif (id(my_valve).position == VALVE_OPEN) {\n  // Valve is open\n} else if (id(my_valve).position == VALVE_CLOSED) {\n  // Valve is closed\n} else {\n  // Valve is in-between open and closed\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SML Sensor for Holley DTZ541 Energy Measurement\nDESCRIPTION: Configuration for a sensor that reads energy values from Holley DTZ541 smart meters, applying a throttle filter to handle the meter's faulty SML implementation that sends conflicting values.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sml.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: sml\n    name: \"Total energy Consumption\"\n    sml_id: mysml\n    obis_code: \"1-0:1.8.0\"\n    unit_of_measurement: kWh\n    accuracy_decimals: 5\n    device_class: energy\n    state_class: total_increasing\n    filters:\n      - throttle: 0.5s\n      - multiply: 0.0001\n```\n\n----------------------------------------\n\nTITLE: Setting Min and Max Values for Rotary Encoder in YAML\nDESCRIPTION: Configures minimum and maximum values for a rotary encoder sensor component.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/changelog/v1.12.0.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: rotary_encoder\n    min_value: 0\n    max_value: 100\n```\n\n----------------------------------------\n\nTITLE: Initial Value Configuration for Date Type\nDESCRIPTION: Example of setting initial value for date type using object notation with year, month, and day properties.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/datetime/template.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ninitial_value:\n    year: 2023\n    month: 12\n    day: 4\n```\n\n----------------------------------------\n\nTITLE: Set Select Index Action in YAML\nDESCRIPTION: This action snippet sets the active selection of the select component based on its index offset. This enables navigating the option list programmatically by index.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/select/index.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n\"    - select.set_index:\\n        id: my_select\\n        index: 3\"\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration Example\nDESCRIPTION: Sample YAML configuration for a GPIO switch in ESPHome.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/contributing.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# Sample configuration entry\nswitch:\n  - platform: gpio\n    name: \"Relay #42\"\n    pin: GPIOXX\n```\n\n----------------------------------------\n\nTITLE: Basic Template Valve Configuration in ESPHome\nDESCRIPTION: Example configuration for setting up a basic template valve with open, close, and stop actions. Includes a lambda function for state detection based on an end stop sensor.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/valve/template.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nvalve:\n  - platform: template\n    name: \"Template Valve\"\n    lambda: |-\n      if (id(top_end_stop).state) {\n        return VALVE_OPEN;\n      } else {\n        return VALVE_CLOSED;\n      }\n    open_action:\n      - switch.turn_on: open_valve_switch\n    close_action:\n      - switch.turn_on: close_valve_switch\n    stop_action:\n      - switch.turn_on: stop_valve_switch\n    optimistic: true\n```\n\n----------------------------------------\n\nTITLE: MQTT Publish Action in YAML\nDESCRIPTION: Configuration for publishing MQTT messages with support for templated topics and payloads.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/mqtt.rst#2025-04-21_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - mqtt.publish:\n        topic: some/topic\n        payload: \"Something happened!\"\n    # Templated:\n    - mqtt.publish:\n        topic: !lambda |-\n          if (id(reed_switch).state) return \"topic1\";\n          else return \"topic2\";\n        payload: !lambda |-\n          return id(reed_switch).state ? \"YES\" : \"NO\";\n```\n\n----------------------------------------\n\nTITLE: Servo Detach Action in ESPHome\nDESCRIPTION: Example of using the servo.detach action to disable output to a servo motor, making it stop immediately and disabling active control.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/servo.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n  - servo.detach: my_servo\n```\n\n----------------------------------------\n\nTITLE: Home Assistant Configuration for Water Leak Notifications\nDESCRIPTION: Home Assistant configuration for setting up water leak alerts and Pushover notifications. Includes alert criteria and notification group setup with customizable sound effects.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/cookbook/leak-detector-m5stickC.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nalert:\n  basement_water_leak:\n    name: Water detected in the basement\n    entity_id: binary_sensor.basement_leak_detector_sensor\n    state: 'on'\n    repeat: 30\n    can_acknowledge: true\n    notifiers:\n      - water_leak_notification_group\n\nnotify:\n  - name: pushover\n    platform: pushover\n    api_key: !secret pushover_api_key\n    user_key: !secret pushover_user_key\n  - name: water_leak_notification_group\n    platform: group\n    services:\n      - service: pushover\n        data:\n          data:\n            sound: alien\n```\n\n----------------------------------------\n\nTITLE: Writing Firmware to ESP Using esptool\nDESCRIPTION: Command to flash/install ESPHome firmware onto an ESP microcontroller using esptool. Writes the binary file starting at memory address 0x0.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/faq.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nesptool.py --port /dev/ttyUSB0 --baud 115200 write_flash 0x0 your_node_firmware.bin\n```\n\n----------------------------------------\n\nTITLE: Switch State Lambda in YAML\nDESCRIPTION: Lambda code to retrieve the current state of a switch and conditionally execute different actions based on that state.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/switch/index.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n// Within lambda, get the switch state and conditionally do something\nif (id(my_switch).state) {\n  // Switch is ON, do something here\n} else {\n  // Switch is OFF, do something else here\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Queue-based Sprinkler Control in YAML\nDESCRIPTION: Action to start the controller running valves from its queue, disabling auto-advance to only run queued valves.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sprinkler.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - sprinkler.start_from_queue:\n        id: sprinkler_ctrlr\n```\n\n----------------------------------------\n\nTITLE: Compiling ESPHome Firmware via Command Line\nDESCRIPTION: Command to compile ESPHome configuration file into a firmware binary. Replace <MY_DEVICE>.yaml with your actual configuration filename.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/migrate_sonoff_tasmota.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nesphome compile <MY_DEVICE>.yaml\n```\n\n----------------------------------------\n\nTITLE: Checking if Menu is Active using ESPHome YAML\nDESCRIPTION: This YAML snippet checks if a given menu is active using a condition. It can be used in on_press events to determine subsequent actions.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display_menu/index.rst#2025-04-21_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\non_press:\n  - if:\n      condition:\n        display_menu.is_active:\n      ...\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video in HTML\nDESCRIPTION: An HTML iframe snippet for embedding a YouTube video about the micro Wake Word feature.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/changelog/2024.2.0.rst#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube-nocookie.com/embed/NQIv3nsu7dE\"\n        title=\"YouTube video player\" frameborder=\"0\"\n        allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n        allowfullscreen>\n</iframe>\n```\n\n----------------------------------------\n\nTITLE: Help Command Usage\nDESCRIPTION: Shows how to access command-specific help documentation.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/cli.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nesphome <some_command> --help\n```\n\n----------------------------------------\n\nTITLE: Purge Stale Retained MQTT Messages\nDESCRIPTION: This Bash command utilizes the `esphome` tool to clean up retained MQTT messages that can cause stale entities in Home Assistant, ensuring that outdated information is removed.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/mqtt.rst#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nesphome clean-mqtt configuration.yaml\n```\n\n----------------------------------------\n\nTITLE: Basic S0 Port Connection Diagram\nDESCRIPTION: Shows the wiring diagram for connecting an S0 port interface to GPIO12 with a 10k resistor pull-down configuration.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/cookbook/power_meter.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nS0 ------------ VCC\nS0 --+-- 10k -- GND\n.    |\n.    +--------- GPIO12\n```\n\n----------------------------------------\n\nTITLE: Modbus Online/Offline Automations\nDESCRIPTION: Defines automations for handling Modbus controller online and offline states with logging actions\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/modbus_controller.rst#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nmodbus_controller:\n  - id: modbus_con\n    on_online:\n      then:\n        - logger.log: \"Controller back online!\"\n    on_offline:\n      then:\n        - logger.log: \"Controller goes offline!\"\n```\n\n----------------------------------------\n\nTITLE: Version Text Sensor with Hidden Timestamp\nDESCRIPTION: Configuration example that shows how to hide the compilation timestamp from the version string output, displaying only the version number.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/text_sensor/version.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\ntext_sensor:\n  - platform: version\n    name: \"ESPHome Version\"\n    hide_timestamp: true\n```\n\n----------------------------------------\n\nTITLE: Configuring LVGL Textarea Widget in YAML\nDESCRIPTION: Example configuration for an LVGL textarea widget. Demonstrates setting single-line mode and placeholder text.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/widgets.rst#2025-04-21_snippet_37\n\nLANGUAGE: yaml\nCODE:\n```\n# Example widget:\n- textarea:\n    id: textarea_id\n    one_line: true\n    placeholder_text: \"Enter text here\"\n```\n\n----------------------------------------\n\nTITLE: Sliding Window Average Filter in ESPHome YAML\nDESCRIPTION: This example demonstrates the use of a sliding window moving average filter implemented via the `sliding_window_moving_average` filter in ESPHome.  It calculates the average of recent sensor values to provide a smoothed data stream.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/index.rst#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n\n    # Example configuration entry\n    - platform: wifi_signal\n      # ...\n      filters:\n        - sliding_window_moving_average:\n            window_size: 15\n            send_every: 15\n\n```\n\n----------------------------------------\n\nTITLE: Linking SDL2 on MacOS\nDESCRIPTION: Command to ensure SDL2 and libsodium are properly symlinked in the system.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/sdl.rst#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nbrew link sdl2 libsodium\n```\n\n----------------------------------------\n\nTITLE: Home Assistant Card Configuration\nDESCRIPTION: This snippet shows a Home Assistant card configuration for easy calibration of the LD2410 sensor. It includes entities for engineering mode, timeout, distance gates, light function, thresholds, and sensor readings.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ld2410.rst#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ntype: vertical-stack\ntitle: 'DEVICE'\ncards:\n  - type: horizontal-stack\n    cards:\n      - type: entities\n        entities:\n          - entity: 'switch.DEVICE_engineering_mode'\n            name: engineering mode\n  - type: vertical-stack\n    cards:\n      - type: entities\n        entities:\n          - entity: 'number.DEVICE_timeout'\n            name: timeout\n          - entity: 'number.DEVICE_max_move_distance_gate'\n            name: max move distance gate\n          - entity: 'number.DEVICE_max_still_distance_gate'\n            name: max still distance gate\n          - entity: 'select.DEVICE_light_function'\n            name: light function\n          - entity: 'number.DEVICE_light_threshold'\n            name: light threshold\n      - type: horizontal-stack\n        cards:\n          - type: entity\n            entity: 'sensor.DEVICE_detection_distance'\n            name: distance\n          - type: entity\n            entity: 'sensor.DEVICE_moving_distance'\n            name: move\n          - type: entity\n            entity: 'sensor.DEVICE_still_distance'\n            name: still\n  - type: horizontal-stack\n    cards:\n      - type: entity\n        entity: 'sensor.DEVICE_move_energy'\n        name: move energy\n      - type: entity\n        entity: 'sensor.DEVICE_still_energy'\n        name: still energy\n  - type: horizontal-stack\n    cards:\n      - type: entity\n        entity: 'binary_sensor.DEVICE_gpio_out_pin_presence_status'\n        name: gpio presence\n        state_color: true\n      - type: entity\n        entity: 'binary_sensor.DEVICE_presence'\n        name: presence\n        state_color: true\n      - type: entity\n        entity: 'binary_sensor.DEVICE_moving_target'\n        name: movement\n        state_color: true\n      - type: entity\n        entity: 'binary_sensor.DEVICE_still_target'\n        name: still\n        state_color: true\n  - type: conditional\n    conditions:\n      - entity: 'switch.DEVICE_engineering_mode'\n        state: 'on'\n    card:\n      type: vertical-stack\n      cards:\n        - type: horizontal-stack\n          cards:\n            - type: entity\n              entity: 'sensor.DEVICE_light'\n              name: light\n            - type: entity\n              entity: 'binary_sensor.DEVICE_out_pin_presence_status'\n              name: out pin presence\n              state_color: true\n        - type: horizontal-stack\n          cards:\n            - type: entity\n              entity: 'sensor.DEVICE_g0_move_energy'\n              name: 'g0'\n            - type: entity\n              entity: 'number.DEVICE_g0_move_threshold'\n              name: ' '\n            - type: entity\n              entity: 'sensor.DEVICE_g0_still_energy'\n              name: ' '\n            - type: entity\n              entity: 'number.DEVICE_g0_still_threshold'\n              name: ' '\n        - type: horizontal-stack\n          cards:\n            - type: entity\n              entity: 'sensor.DEVICE_g1_move_energy'\n              name: 'g1'\n              icon: ' '\n            - type: entity\n              entity: 'number.DEVICE_g1_move_threshold'\n              name: ' '\n              icon: ' '\n            - type: entity\n              entity: 'sensor.DEVICE_g1_still_energy'\n              name: ' '\n              icon: ' '\n            - type: entity\n              entity: 'number.DEVICE_g1_still_threshold'\n              name: ' '\n              icon: ' '\n```\n\n----------------------------------------\n\nTITLE: ESP32 BLE Tracker Configuration\nDESCRIPTION: Configuration for optimizing BLE scanning parameters in ESPHome to improve sensor reception reliability\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/xiaomi_ble.rst#2025-04-21_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nesp32_ble_tracker:\n  scan_parameters:\n    interval: 5s # try with 300ms if you don't have LAN module\n    window: 5s # try with 300ms if you don't have LAN module\n    active: false\n```\n\n----------------------------------------\n\nTITLE: Docker Installation Commands for ESPHome\nDESCRIPTION: Docker pull commands for installing different versions of ESPHome including stable, beta, and dev releases.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/faq.rst#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Stable Release\ndocker pull ghcr.io/esphome/esphome\n# Beta\ndocker pull ghcr.io/esphome/esphome:beta\n# Dev version\ndocker pull ghcr.io/esphome/esphome:dev\n```\n\n----------------------------------------\n\nTITLE: Nextion Switch Publish Action Configuration\nDESCRIPTION: Example of publishing switch states using switch.nextion.publish action in YAML configuration.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/switch/nextion.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: nextion\n    id: nextion_switch\n    ...\n# in some trigger\non_...:\n  - switch.nextion.publish:\n      id: nextion_switch\n      state: true\n      # These are optional. Defaults to true.\n      publish_state: true\n      send_to_nextion: true\n  # Templated\n  - switch.nextion.publish:\n      id: nextion_switch\n      state: !lambda 'return true;'\n      # These are optional. Defaults to true.\n      publish_state: true\n      send_to_nextion: true\n```\n\n----------------------------------------\n\nTITLE: SEO Metadata Configuration in RestructuredText\nDESCRIPTION: Defines SEO metadata including description, image and author information using RestructuredText directive syntax.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/changelog/2022.8.0.rst#2025-04-21_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. seo::\n    :description: Changelog for ESPHome 2022.8.0.\n    :image: /_static/changelog-2022.8.0.png\n    :author: Jesse Hills\n    :author_twitter: @jesserockz\n```\n\n----------------------------------------\n\nTITLE: Configuring Self-Cleaning Action for Haier Climate Device\nDESCRIPTION: YAML configuration to start the self-cleaning process on a Haier climate device. Only supported by hOn devices.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/climate/haier.rst#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - climate.haier.start_self_cleaning: device_id\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video in Documentation\nDESCRIPTION: HTML iframe code for embedding a YouTube video about ESPHome's new features including encryption and ESP32 variant support.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/changelog/2021.10.0.rst#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube-nocookie.com/embed/X10ToPN1gIk\" \n        title=\"YouTube video player\" frameborder=\"0\" \n        allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" \n        allowfullscreen>\n</iframe>\n```\n\n----------------------------------------\n\nTITLE: Configuring a Generic Output Lock in ESPHome with YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure a generic output lock in ESPHome using a GPIO output. It defines a GPIO output component and then uses it as the output for the lock.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lock/output.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n    # Example configuration entry\n    output:\n      - platform: gpio\n        pin: GPIOXX\n        id: 'generic_out'\n    lock:\n      - platform: output\n        name: \"Generic Output\"\n        output: 'generic_out'\n```\n\n----------------------------------------\n\nTITLE: Home Assistant Addon Badge HTML\nDESCRIPTION: HTML code for displaying a badge that links to ESPHome addon installation in Home Assistant\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/changelog/2022.2.0.rst#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://my.home-assistant.io/redirect/supervisor_addon/?addon=5c53de3b_esphome&repository_url=https%3A%2F%2Fesphome%2Fhome-assistant-addon\" target=\"_blank\"><img src=\"https://my.home-assistant.io/badges/supervisor_addon.svg\" alt=\"Open your Home Assistant instance and show the dashboard of the ESPHome add-on.\" /></a>\n```\n\n----------------------------------------\n\nTITLE: Updating 1-Wire Configuration in YAML for ESPHome\nDESCRIPTION: Example of how to update the 1-Wire configuration to use the new one_wire component and dallas_temp platform. This change is required after updating to ESPHome 2024.6.0.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/changelog/2024.6.0.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# Old\ndallas:\n  - pin: GPIOXX\n\nsensor:\n  - platform: dallas\n    address: 0x1234567890abcdef\n    name: \"My Sensor\"\n\n# New\none_wire:\n  - platform: gpio\n    pin: GPIOXX\n\nsensor:\n  - platform: dallas_temp\n    address: 0x1234567890abcdef\n    name: \"My Sensor\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Antialiased Text with Background Color in ESPHome\nDESCRIPTION: Illustrates how to render antialiased text with a specified background color on an ESPHome display. This is useful for fonts rendered at higher bit depths.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/index.rst#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ndisplay:\n  - platform: ...\n    # ...\n    lambda: |-\n      // Syntax is always: it.print(<x>, <y>, <font>, [color=COLOR_ON], [align], <text>, [color=COLOR_OFF]);\n      it.print(0, 0, id(my_font_with_icons), COLOR_ON, TextAlign::CENTER, \"Just\\U000f05d4here. Already\\U000F02D1this.\", COLOR_OFF);\n```\n\n----------------------------------------\n\nTITLE: PCF85063 Write Time Action Configuration\nDESCRIPTION: Configuration for manually triggering time synchronization from system to RTC hardware.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/time/pcf85063.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - pcf85063.write_time\n\n  # in case you need to specify the PCF85063 id\n  - pcf85063.write_time:\n      id: pcf85063_time\n```\n\n----------------------------------------\n\nTITLE: Git Commands for Branch Updates\nDESCRIPTION: Commands for updating local feature branches with latest upstream changes from ESPHome's dev branch.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/contributing.rst#2025-04-21_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n# Fetch the latest upstream changes\ngit fetch upstream dev\n# Merge in the changes we fetched above\ngit merge upstream/dev\n```\n\n----------------------------------------\n\nTITLE: Configuring ESP32 Touch Binary Sensor\nDESCRIPTION: Configuration for a touch-sensitive binary sensor including pin assignment and threshold settings for touch detection.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/esp32_touch.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nesp32_touch:\n\nbinary_sensor:\n  - platform: esp32_touch\n    name: \"ESP32 Touch Pad\"\n    pin: GPIOXX\n    threshold: 1000\n```\n\n----------------------------------------\n\nTITLE: Unlock Action - YAML\nDESCRIPTION: Executes an unlocking action on a specified lock using its ID. This snippet shows configuration for unlocking a lock in response to an event.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lock/index.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - lock.unlock: deadbolt_1\n```\n\n----------------------------------------\n\nTITLE: Setting Up AT581X Component in ESPHome\nDESCRIPTION: Sample configuration for the new AT581X component, which adds support for AT581x devices.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/changelog/2024.4.0.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nat581x:\n  address: 0x20\n```\n\n----------------------------------------\n\nTITLE: Include Variables with Substitutions\nDESCRIPTION: Demonstrates how to use substitutions with include files, showing both inline and multi-line syntax for button configurations.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/substitutions.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nbinary_sensor:\n  - platform: gpio\n    id: button1\n    pin: GPIOXX\n    on_multi_click: !include { file: on-multi-click.yaml, vars: { id: 1 } }\n  - platform: gpio\n    id: button2\n    pin: GPIOXX\n    on_multi_click: !include\n      file: on-multi-click.yaml\n      vars:\n        id: 2\n```\n\n----------------------------------------\n\nTITLE: BLE Passkey Notification Handler\nDESCRIPTION: Automation for displaying passkey notifications from BLE device\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/ble_client.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nble_client:\n  - mac_address: XX:XX:XX:XX:XX:XX\n    id: ble_itag\n    on_passkey_notification:\n      then:\n        - logger.log:\n            format: \"Enter this passkey on your BLE device: %06d\"\n            args: [ passkey ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Binary Sensors with Variable Includes in YAML\nDESCRIPTION: Demonstrates how to use the new variable substitution feature for YAML includes to configure multiple binary sensors with different parameters.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/changelog/2022.6.0.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# device.yaml\nbinary_sensor:\n  - <<: !include\n      file: bin-sensor.yaml\n      vars:\n        pin: GPIO1\n        name: \"Binary Sensor 1\"\n        switch: my_switch_1_id\n        delay: 10s\n  - <<: !include\n      file: bin-sensor.yaml\n      vars:\n        pin: GPIO1\n        name: \"Binary Sensor 2\"\n        switch: my_switch_2_id\n        delay: 60s\n\n# bin-sensor.yaml\nplatform: gpio\npin: ${pin}\nname: ${name}\non_press:\n  - switch.turn_on: ${switch}\n  - delay: ${delay}\n  - switch.turn_off: ${switch}\n```\n\n----------------------------------------\n\nTITLE: Configuring Seeed MR24HPC1 Binary Sensor - YAML\nDESCRIPTION: This YAML snippet configures the binary sensor feature of the seeed_mr24hpc1, allowing detection of presence information. An optional parameter 'has_target' can be specified for target detection.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/seeed_mr24hpc1.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n\"    binary_sensor:\\n      - platform: seeed_mr24hpc1\\n        has_target:\\n          name: \\\"Presence Information\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Custom Checkbox Mark Configuration in LVGL\nDESCRIPTION: Setup for restoring checkbox mark display when using custom fonts by importing specific FontAwesome symbols and applying them through theme configuration.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/cookbook/lvgl.rst#2025-04-21_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nfont:\n  - file: 'fonts/FontAwesome5-Solid+Brands+Regular.woff'\n    id: fontawesome_checkmark\n    size: 18\n    bpp: 4\n    glyphs: [\n      \"\\uF00C\", # ckeckmark, for checkbox\n      ]\n\nlvgl:\n    ...\n    theme:\n      checkbox:\n        indicator:\n          checked:\n            text_font: fontawesome_checkmark\n```\n\n----------------------------------------\n\nTITLE: Redirecting to Changelog Index using reST Directive\nDESCRIPTION: Configuration snippet using reStructuredText redirect directive to send users from the root changelog page to /changelog/index.html.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/changelog.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nChangelog\n=========\n\n.. redirect::\n    :url: /changelog/index.html\n```\n\n----------------------------------------\n\nTITLE: Image Table Configuration in RST\nDESCRIPTION: RST directive for creating a 2-column image table listing new components with their icons.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/changelog/v1.20.0.rst#2025-04-21_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. imgtable::\n    :columns: 2\n\n    Number Core, components/number/index, folder-open.svg, dark-invert\n    Template Number, components/number/template, description.svg, dark-invert\n    Havells Inverter, components/sensor/havells_solar, havellsgti5000d_s.jpg\n    Anova Cooker, components/climate/anova, anova.png\n```\n\n----------------------------------------\n\nTITLE: ESPHome Documentation Version Links in RST\nDESCRIPTION: A reStructuredText list of documentation links for ESPHome releases, organized chronologically from newest (2022.3.0) to oldest (v1.7.0) versions.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/changelog/2024.5.0.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n- :doc:`2022.3.0`\n- :doc:`2022.2.0`\n- :doc:`2022.1.0`\n- :doc:`2021.12.0`\n- :doc:`2021.11.0`\n- :doc:`2021.10.0`\n- :doc:`2021.9.0`\n- :doc:`2021.8.0`\n- :doc:`v1.20.0`\n- :doc:`v1.19.0`\n- :doc:`v1.18.0`\n- :doc:`v1.17.0`\n- :doc:`v1.16.0`\n- :doc:`v1.15.0`\n- :doc:`v1.14.0`\n- :doc:`v1.13.0`\n- :doc:`v1.12.0`\n- :doc:`v1.11.0`\n- :doc:`v1.10.0`\n- :doc:`v1.9.0`\n- :doc:`v1.8.0`\n- :doc:`v1.7.0`\n```\n\n----------------------------------------\n\nTITLE: Device Discovery Configuration for AirThings BLE\nDESCRIPTION: Basic configuration for discovering AirThings BLE devices and their MAC addresses with debug logging enabled.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/airthings_ble.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlogger:\n  level: DEBUG # Required for the tracker to show the device\n\nesp32_ble_tracker:\nairthings_ble:\n```\n\n----------------------------------------\n\nTITLE: Comprehensive ESP32S3 Configuration with chsc6x Touchscreen in ESPHome YAML\nDESCRIPTION: Complete configuration for ESP32S3 including I2C, SPI, ILI9xxx display, and chsc6x touchscreen setup. It demonstrates how to integrate the touchscreen with other components.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/touchscreen/chsc6x.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ni2c:\n  sda: GPIO5\n  scl: GPIO6\n\nspi:\n  clk_pin: GPIO7\n  mosi_pin: GPIO9\n\ndisplay:\n  - platform: ili9xxx\n    model: GC9A01A\n    auto_clear_enabled: True\n    invert_colors: True\n    id: my_display\n    cs_pin: GPIO2\n    dc_pin: GPIO4\n\ntouchscreen:\n  platform: chsc6x\n  id: my_touchscreen\n  display: my_display\n  interrupt_pin: GPIO44\n```\n\n----------------------------------------\n\nTITLE: Configuring Flash Write Interval in YAML\nDESCRIPTION: Example configuration for adjusting the frequency of flash writes in ESPHome. This setting helps prevent rapid changes to components from quickly wearing out the flash memory.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/esphome.rst#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\npreferences:\n  flash_write_interval: 1min\n```\n\n----------------------------------------\n\nTITLE: Initializing Pylontech Battery Component in ESPHome\nDESCRIPTION: Basic configuration entry for setting up the Pylontech battery component with optional update interval and UART bus ID\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/pylontech.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\npylontech:\n```\n\n----------------------------------------\n\nTITLE: Creating Tabbed Content in RST\nDESCRIPTION: Demonstrates how to create tabbed content using the tabs directive in reStructuredText. Includes examples of basic tabs and nested tabs.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/contributing.rst#2025-04-21_snippet_5\n\nLANGUAGE: rst\nCODE:\n```\n.. tabs::\n\n    .. tab:: Apples\n\n        Apples are green, or sometimes red.\n\n    .. tab:: Pears\n\n        Pears are green.\n\n    .. tab:: Oranges\n\n        Oranges are orange.\n```\n\n----------------------------------------\n\nTITLE: Page Navigation Actions in ESPHome\nDESCRIPTION: This snippet outlines how to navigate through display pages using actions such as 'show_next' and 'show_previous'. It is useful for applications needing automatic or manual page cycling and requires ESPHome configured with a display.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/index.rst#2025-04-21_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - display.page.show_next: my_display\n  - display.page.show_previous: my_display\n\n# For example cycle through pages on a timer\ninterval:\n  - interval: 5s\n    then:\n      - display.page.show_next: my_display\n      - component.update: my_display\n```\n\n----------------------------------------\n\nTITLE: ESPHome Documentation Version Links in RST Format\nDESCRIPTION: ReStructuredText formatted list of documentation links for different ESPHome versions, using the :doc: directive to reference version-specific documentation files\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/changelog/2024.8.0.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n- :doc:`2021.11.0`\n- :doc:`2021.10.0`\n- :doc:`2021.9.0`\n- :doc:`2021.8.0`\n- :doc:`v1.20.0`\n- :doc:`v1.19.0`\n- :doc:`v1.18.0`\n- :doc:`v1.17.0`\n- :doc:`v1.16.0`\n- :doc:`v1.15.0`\n- :doc:`v1.14.0`\n- :doc:`v1.13.0`\n- :doc:`v1.12.0`\n- :doc:`v1.11.0`\n- :doc:`v1.10.0`\n- :doc:`v1.9.0`\n- :doc:`v1.8.0`\n- :doc:`v1.7.0`\n```\n\n----------------------------------------\n\nTITLE: BLE Authentication Actions\nDESCRIPTION: Examples of passkey reply and numeric comparison reply actions\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/ble_client.rst#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - ble_client.passkey_reply:\n        id: my_ble_client\n        passkey: 123456\n\non_...:\n  then:\n    - ble_client.numeric_comparison_reply:\n```\n\n----------------------------------------\n\nTITLE: Alarm Control Panel REST Response Format\nDESCRIPTION: JSON response format for a GET request to an alarm control panel endpoint showing the current state and value.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/web-api/index.rst#2025-04-21_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"alarm-control-panel-my_alarm\",\n  \"state\": \"ARMED_AWAY\",\n  \"value\": 2\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Text in RST\nDESCRIPTION: Shows how to apply italic and bold formatting to text in reStructuredText using asterisks.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/contributing.rst#2025-04-21_snippet_8\n\nLANGUAGE: rst\nCODE:\n```\n*This is italicized.* (A weird word...)\n**This is very important.**\n```\n\n----------------------------------------\n\nTITLE: Checking Playback Status in ESPHome Automations\nDESCRIPTION: Demonstrates how to use the dfplayer.is_playing condition in automations to check if audio playback is currently active.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/dfplayer.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# In some trigger:\non_...:\n  if:\n    condition:\n      dfplayer.is_playing\n    then:\n      logger.log: 'Playback is active!'\n```\n\n----------------------------------------\n\nTITLE: Configuring SUN-GTIL2 Inverter in ESPHome\nDESCRIPTION: Example configuration for the new SUN-GTIL2 inverter component, which supports SUN-1000G2 / SUN-2000G2 grid tie inverters.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/changelog/2024.4.0.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsun_gtil2:\n  uart_id: uart_bus\n```\n\n----------------------------------------\n\nTITLE: Switch Toggle Action in YAML\nDESCRIPTION: Action to toggle a switch with a specific ID. This can be used in automation triggers.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/switch/index.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - switch.toggle: relay_1\n```\n\n----------------------------------------\n\nTITLE: Switch Turn Off Action in YAML\nDESCRIPTION: Action to turn off a switch with a specific ID. This can be used in automation triggers.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/switch/index.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - switch.turn_off: relay_1\n```\n\n----------------------------------------\n\nTITLE: Dynamic Color Creation for SSD1325\nDESCRIPTION: Example showing how to create dynamic grayscale colors in code for the SSD1325 display using the Color constructor.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/ssd1325.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndisplay:\n    ...\n    lambda: |-\n      float white_intensity = 0.5;\n      Color variable_gray(0, 0, 0, white_intensity);\n      it.rectangle(0,  0, it.get_width(), it.get_height(), variable_gray);\n```\n\n----------------------------------------\n\nTITLE: Including Raw HTML SVG File\nDESCRIPTION: RST directive to include raw HTML content from an external SVG file for the logo text.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/images/index.rst#2025-04-21_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. raw:: html\n    :file: ../images/logo-text.svg\n```\n\n----------------------------------------\n\nTITLE: RST Formatted Contributor Links\nDESCRIPTION: A list of contributors formatted in reStructuredText (RST) style with inline links to GitHub profiles\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/supporters.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n- `cbialobos (@cbialobos) <https://github.com/cbialobos>`__\n- `Cameron Bulock (@cbulock) <https://github.com/cbulock>`__\n```\n\n----------------------------------------\n\nTITLE: Component Code Generation in Python\nDESCRIPTION: Implements the code generation method that converts validated YAML configuration into C++ code. Shows variable creation and component registration using ESPHome's code generation utilities.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/contributing.rst#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nimport esphome.codegen as cg\n\nasync def to_code(config):\n    var = cg.new_Pvariable(config[CONF_ID])\n    await cg.register_component(var, config)\n\n    cg.add(var.set_my_required_key(config[CONF_MY_REQUIRED_KEY]))\n```\n\n----------------------------------------\n\nTITLE: Updating Sprinkler Time Remaining Method\nDESCRIPTION: Method name change in sprinkler component for clarity. The time_remaining() method has been renamed to time_remaining_active_valve().\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/changelog/2023.3.0.rst#2025-04-21_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n// Old method\ntime_remaining()\n\n// New method\ntime_remaining_active_valve()\n```\n\n----------------------------------------\n\nTITLE: Configuring TTP229 LSF I2C Touch Sensor\nDESCRIPTION: Example configuration for the I2C version of TTP229 (LSF) sensor. Shows how to set up the base component and define a binary sensor for channel 0.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/ttp229.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nttp229_lsf:\n\nbinary_sensor:\n  - platform: ttp229_lsf\n    name: TTP229 Channel 0\n    channel: 0\n```\n\n----------------------------------------\n\nTITLE: Continuous Dosing Action in YAML\nDESCRIPTION: Action configuration to have the peristaltic pump dose continuously at the maximum flow rate. The pump will automatically stop after 20 days of running in continuous mode.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/ezo_pmp.rst#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n  - ezo_pmp.find:\n      id: ezo_pmp\n```\n\n----------------------------------------\n\nTITLE: Verifying Python Installation on Windows\nDESCRIPTION: Command to check Python version installed on Windows system to ensure compatibility with ESPHome.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/installing_esphome.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n> python --version\nPython 3.10.1\n```\n\n----------------------------------------\n\nTITLE: Resuming Sprinkler Operation in YAML\nDESCRIPTION: Action to resume a previously paused sprinkler cycle.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sprinkler.rst#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - sprinkler.resume: sprinkler_ctrlr\n```\n\n----------------------------------------\n\nTITLE: ESPHome Changelog RestructuredText Directives\nDESCRIPTION: RestructuredText directives used for SEO metadata and image table layout in the changelog documentation.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/changelog/v1.13.0.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. seo::\n    :description: Changelog for ESPHome version 1.13.0.\n    :image: /_static/changelog-1.13.0.png\n    :author: Otto Winter\n    :author_twitter: @OttoWinter_\n\n.. imgtable::\n    :columns: 4\n```\n\n----------------------------------------\n\nTITLE: Setting Emulation Message Action in YAML\nDESCRIPTION: This YAML action allows for specifying the NDEF message for emulation mode on the PN7160, similar to 'set_write_message'. The configuration can include Android-app-specific settings and requires the device to be in a valid state for emulation message setup.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/pn7160.rst#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - tag.set_emulation_message:\n        message: https://www.home-assistant.io/tag/pulse\n        include_android_app_record: false\n```\n\n----------------------------------------\n\nTITLE: Example Model JSON Structure for microWakeWord\nDESCRIPTION: This JSON snippet shows the structure of a model JSON file used by microWakeWord. It includes essential information such as the model type, wake word, author, model file location, version, and microWakeWord-specific configurations like probability cutoff and sliding window size. These parameters define how the wake word model is used in ESPHome.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/micro_wake_word.rst#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"{\n  \\\"type\\\": \\\"micro\\\",\n  \\\"wake_word\\\": \\\"okay nabu\\\",\n  \\\"author\\\": \\\"Kevin Ahrendt\\\",\n  \\\"website\\\": \\\"https://www.kevinahrendt.com/\\\",\n  \\\"model\\\": \\\"stream_state_internal_quant.tflite\\\",\n  \\\"version\\\": 2,\n  \\\"micro\\\": {\n    \\\"probability_cutoff\\\": 0.97,\n    \\\"sliding_window_size\\\": 5,\n    \\\"feature_step_size\\\": 10,\n    \\\"tensor_arena_size\\\": 22860,\n    \\\"minimum_esphome_version\\\": \\\"2024.7\\\"\n  }\n}\"\n```\n\n----------------------------------------\n\nTITLE: YouTube Video Embed HTML\nDESCRIPTION: HTML iframe code to embed a YouTube video for the ESPHome release announcement.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/changelog/2025.2.0.rst#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube-nocookie.com/embed/HtG3fjAO96c\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n```\n\n----------------------------------------\n\nTITLE: Configuring Bayesian Binary Sensor Map in ESPHome\nDESCRIPTION: Example configuration for setting up a Bayesian binary sensor map that calculates event probability based on multiple sensor observations. Includes analog threshold configuration for converting probability to binary state.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/binary_sensor_map.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: binary_sensor_map\n    id: bayesian_prob\n    name: 'Bayesian Event Probability'\n    type: bayesian\n    prior: 0.4\n    observations:\n      - binary_sensor: binary_sensor_0\n        prob_given_true: 0.9\n        prob_given_false: 0.2\n      - binary_sensor: binary_sensor_1\n        prob_given_true: 0.6\n        prob_given_false: 0.1\n\nbinary_sensor:\n  - platform: analog_threshold\n    name: \"Bayesian Event Predicted State\"\n    sensor_id: bayesian_prob\n    threshold: 0.6\n```\n\n----------------------------------------\n\nTITLE: GitHub Shorthand for External Components\nDESCRIPTION: Using the shorthand github:// format to specify external components from GitHub repositories, including user/organization, repository name, and optional branch or tag.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/external_components.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nexternal_components:\n  # shorthand\n  source: github://<user or org>/<repository name>[@<branch or tag>]\n```\n\n----------------------------------------\n\nTITLE: RST Format Release Notes and Links\nDESCRIPTION: ReStructuredText format changelog showing version releases, pull request references and contributor acknowledgments for the ESPHome project.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/changelog/v1.15.0.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nRelease 1.15.1 - September 14\n-----------------------------\n\n- esphome: fix sntp timezone :esphomepr:`1266` by :ghuser:`glmnet`\n- esphome: Fix for Ruuvi voltage parsing of RAWv2 format :esphomepr:`1267` by :ghuser:`akoivist`\n- docs: Adds Tuya Climate temperature multiplier :docspr:`756` by :ghuser:`jesserockz`\n- esphome: Adds support for Tuya Climate temperature multiplier :esphomepr:`1276` by :ghuser:`jesserockz`\n```\n\n----------------------------------------\n\nTITLE: Command Line Substitution Example\nDESCRIPTION: Demonstrates how to use command-line substitutions with a basic configuration file.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/substitutions.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nsubstitutions:\n  name: my_default_name\n\nesphome:\n  name: $name\n```\n\n----------------------------------------\n\nTITLE: Retrieve Filtered Sensor State in ESPHome (C++)\nDESCRIPTION: This C++ snippet shows how to retrieve the current value of a sensor after it has passed through all filters using `.state`. If no value has passed through the filters yet, it will return NAN.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/index.rst#2025-04-21_snippet_25\n\nLANGUAGE: cpp\nCODE:\n```\n      // For example, create a custom log message when a value is received:\n      ESP_LOGI(\"main\", \"Value of my sensor: %f\", id(my_sensor).state);\n\n```\n\n----------------------------------------\n\nTITLE: Applying Linear Calibration Filter for NAU7802\nDESCRIPTION: This snippet shows how to implement the calibrate_linear filter for the NAU7802 sensor within ESPHome. It allows for the conversion of raw ADC values to calibrated weight measurements by specifying known sample values.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/nau7802.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: nau7802\n    # ... Other NAU7802 options\n    filters:\n      - calibrate_linear:\n          - 120 -> 0\n          - 810 -> 1\n    unit_of_measurement: kg\n```\n\n----------------------------------------\n\nTITLE: Configuring QR Code Component in ESPHome (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to configure a QR code component in ESPHome. It specifies the required ID and value parameters, with an optional error correction code level. The snippet uses `id` to reference the QR code and `value` to define its content.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/qr_code.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nqr_code:\n  - id: homepage_qr\n    value: esphome.io\n```\n\n----------------------------------------\n\nTITLE: Linking ESPHome Documentation Versions in reStructuredText\nDESCRIPTION: This snippet demonstrates how to create a list of links to different versions of ESPHome documentation using reStructuredText syntax. Each line represents a link to a specific version's documentation page.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/changelog/2022.9.0.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n- :doc:`2021.8.0`\n- :doc:`v1.20.0`\n- :doc:`v1.19.0`\n- :doc:`v1.18.0`\n- :doc:`v1.17.0`\n- :doc:`v1.16.0`\n- :doc:`v1.15.0`\n- :doc:`v1.14.0`\n- :doc:`v1.13.0`\n- :doc:`v1.12.0`\n- :doc:`v1.11.0`\n- :doc:`v1.10.0`\n- :doc:`v1.9.0`\n- :doc:`v1.8.0`\n- :doc:`v1.7.0`\n```\n\n----------------------------------------\n\nTITLE: RST Raw HTML Include Directive\nDESCRIPTION: ReStructuredText directive that includes an external HTML file named installer.html.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/projects/index.rst#2025-04-21_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. raw:: html\n   :file: ./installer.html\n```\n\n----------------------------------------\n\nTITLE: Resetting INA228/INA229 energy counters using lambda in ESPHome\nDESCRIPTION: Example of using a lambda function to reset energy and charge accumulators for INA228/INA229 sensors in ESPHome. Shows how to create a button that triggers the reset function.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ina2xx.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nbutton:\n  - platform: template\n    name: \"Reset counters\"\n    on_press:\n      - lambda: \"id(my_change_sensor).reset_energy_counters();\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Script with Parameters in YAML\nDESCRIPTION: This snippet demonstrates how to define a script with parameters in ESPHome YAML configuration. It creates a script called 'push_button' that takes a button number parameter and logs it.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/changelog/2022.11.0.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nscript:\n  - id: push_button\n    parameters:\n      button: int\n    then:\n      - logger.log:\n          format: \"Button %d pressed\"\n          args: [ button ]\n\non_...:\n  - script.execute:\n      id: push_button\n      button: 1\n\non_...:\n  - script.execute:\n      id: push_button\n      button: 2\n```\n\n----------------------------------------\n\nTITLE: UDP Command Sender Implementation in ESPHome\nDESCRIPTION: Script configuration for sending UDP commands to network devices. Includes socket setup, parameter handling, and network communication implementation.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/cookbook/lambda_magic.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nscript:\n- id: send_udp\n  parameters:\n    msg: string\n    host: string\n    port: int\n  then:\n    - lambda: |-\n          int sock = ::socket(AF_INET, SOCK_DGRAM, 0);\n          struct sockaddr_in destination, source;\n\n          destination.sin_family = AF_INET;\n          destination.sin_port = htons(port);\n          destination.sin_addr.s_addr = inet_addr(host.c_str());\n\n          source.sin_family = AF_INET;\n          source.sin_addr.s_addr = htonl(INADDR_ANY);\n          source.sin_port = htons(64998);\n          bind(sock, (struct sockaddr*)&source, sizeof(source));\n\n          int n_bytes = ::sendto(sock, msg.c_str(), msg.length(), 0, reinterpret_cast<sockaddr*>(&destination), sizeof(destination));\n          ESP_LOGD(\"lambda\", \"Sent %s to %s:%d in %d bytes\", msg.c_str(), host.c_str(), port, n_bytes);\n          ::close(sock);\n```\n\n----------------------------------------\n\nTITLE: Configuring Guide Navigation with reStructuredText\nDESCRIPTION: Sets up the documentation guide navigation structure using a toctree directive with glob pattern to automatically include all files in the directory. The maxdepth parameter is set to 1 to limit nesting depth.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nGuides\n======\n\n.. toctree::\n    :glob:\n    :maxdepth: 1\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Checking Sprinkler Controller Mode Status with C++\nDESCRIPTION: C++ code example showing how to check if various sprinkler controller modes (auto-advance and queue) are enabled. The code uses a display component to show the current status of these modes.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sprinkler.rst#2025-04-21_snippet_29\n\nLANGUAGE: c++\nCODE:\n```\ndisplay:\n  - platform: ...\n    # ...display configuration...\n    lambda: |-\n      if (id(lawn_sprinkler_ctrlr).auto_advance()) {\n        // auto-advance is enabled\n        it.print(0, 0, \"Auto-advance enabled\");\n      } else {\n        // auto-advance is NOT enabled\n        it.print(0, 0, \"Auto-advance disabled\");\n      }\n      if (id(lawn_sprinkler_ctrlr).queue_enabled()) {\n        // queue is enabled\n        it.print(0, 10, \"Queue enabled\");\n      } else {\n        // queue is NOT enabled\n        it.print(0, 10, \"Queue disabled\");\n      }\n```\n\n----------------------------------------\n\nTITLE: SEO Configuration in RST\nDESCRIPTION: RST directive for configuring SEO metadata including description, image and author information.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/changelog/v1.20.0.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. seo::\n    :description: Changelog for ESPHome version 1.20.0.\n    :image: /_static/changelog-1.20.0.png\n    :author: ESPHome\n    :author_twitter: @esphome_\n```\n\n----------------------------------------\n\nTITLE: Verifying Python Version on Linux\nDESCRIPTION: Command to check Python version on Linux system to ensure compatibility with ESPHome.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/installing_esphome.rst#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ python3 --version\nPython 3.9.15\n```\n\n----------------------------------------\n\nTITLE: LVGL Resume Action\nDESCRIPTION: Action configuration for resuming LVGL activity after it has been paused. The lvgl_id parameter specifies which LVGL instance to resume if multiple are configured.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/index.rst#2025-04-21_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - lvgl.resume:\n```\n\n----------------------------------------\n\nTITLE: Discovering Mopeka Standard Check BLE Device MAC Address\nDESCRIPTION: Initial configuration to discover Mopeka Standard Check device MAC addresses using ESP32 BLE tracker\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/mopeka_std_check.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nesp32_ble_tracker:\n\nmopeka_ble:\n```\n\n----------------------------------------\n\nTITLE: Creating ESPHome Project Configuration\nDESCRIPTION: Command to initialize a new ESPHome project configuration using the wizard\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/getting_started_command_line.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nesphome wizard livingroom.yaml\n# On Docker:\ndocker run --rm -v \"${PWD}\":/config -it ghcr.io/esphome/esphome wizard livingroom.yaml\n```\n\n----------------------------------------\n\nTITLE: Disabling BLE Interface with ble.disable Action\nDESCRIPTION: Example showing how to disable the BLE interface using the ble.disable action within an automation trigger.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/esp32_ble.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - ble.disable:\n```\n\n----------------------------------------\n\nTITLE: LVGL Flex Layout for Cover Controls\nDESCRIPTION: Implementation of a control panel for three covers using LVGL's flex layout. Includes up/stop/down buttons for each cover arranged in a column layout with proper spacing and alignment.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/cookbook/lvgl.rst#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nlvgl:\n  pages:\n    - id: room_page\n      widgets:\n        - obj:\n            align: CENTER\n            width: 240\n            height: 256\n            x: 4\n            y: 4\n            pad_all: 3\n            pad_row: 6\n            pad_column: 8\n            bg_opa: TRANSP\n            border_opa: TRANSP\n            layout:\n              type: FLEX\n              flex_flow: COLUMN_WRAP\n              flex_align_cross: CENTER\n            widgets:\n              - label:\n                  text: \"East\"\n              - button:\n                  id: but_cov_up_east\n                  width: 70\n                  height: 68\n                  widgets:\n                    - label:\n                        id: cov_up_east\n                        align: CENTER\n                        text: \"\\U000F005D\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Shortest Action Syntax in YAML\nDESCRIPTION: Shows the most concise syntax for configuring actions in ESPHome YAML files, where the 'then' key is completely omitted, allowing for very compact action definitions.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/changelog/v1.8.0.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - switch.turn_on: my_switch\n```\n\n----------------------------------------\n\nTITLE: Background Calibration Result Action\nDESCRIPTION: Action configuration to retrieve the result of a background calibration procedure from the sensor. The result is output to ESPHome logs.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/senseair.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - senseair.background_calibration_result: my_senseair_id\n```\n\n----------------------------------------\n\nTITLE: LVGL Widget Enable/Disable Actions\nDESCRIPTION: Examples showing how to enable and disable LVGL widgets using automation actions.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/widgets.rst#2025-04-21_snippet_45\n\nLANGUAGE: yaml\nCODE:\n```\n- on_...:\n    then:\n      - lvgl.widget.disable:\n          - my_button_1\n          - my_button_2\n\n- on_...:\n    then:\n      - lvgl.widget.enable:\n          - id: my_button_1\n          - id: my_button_2\n```\n\n----------------------------------------\n\nTITLE: Setting Up MCP3204/MCP3208 Sensors in YAML\nDESCRIPTION: This YAML snippet demonstrates how to define sensors using the MCP3204 or MCP3208 as the platform within ESPHome. It specifies the pin number on which the sensor is connected and includes an example of integrating a solar panel power rail with a specific MCP3204 pin.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/mcp3204.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Example config of sensors.\n# This is a small 1.5v solar panel power rail attached to pin 0\n# of the MCP3204\nsensor:\n  - platform: mcp3204             # Attached to pin 0 of the MCP3204.\n    id: solar_voltage\n    number: 0                     # MCP3204 pin number\n\n  # In case MCP3208 is used. you can specify pin number > 4\n  - platform: mcp3204             # Attached to pin 7 of the MCP3208.\n    id: supply_voltage\n    number: 7                     # MCP3208 pin number\n```\n\n----------------------------------------\n\nTITLE: Displaying Sprinkler Multiplier and Repeat Status in C++\nDESCRIPTION: Example showing how to display the sprinkler controller's multiplier value and repeat status using a display component. Demonstrates checking repeat status using has_value() and accessing values using value() method.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sprinkler.rst#2025-04-21_snippet_30\n\nLANGUAGE: c++\nCODE:\n```\ndisplay:\n  - platform: ...\n    # ...display configuration...\n    lambda: |-\n      it.printf(0, 0, \"Multiplier: %f\", id(lawn_sprinkler_ctrlr).multiplier());\n\n      if (id(lawn_sprinkler_ctrlr).repeat().has_value()) {\n        // the controller is repeating, print the repeat target value\n        it.printf(0, 10, \"Repeat %u times\", id(lawn_sprinkler_ctrlr).repeat().value());\n      }\n```\n\n----------------------------------------\n\nTITLE: Configuring Binary Sensors with SN74HC165 Pins (YAML)\nDESCRIPTION: Example showing how to set up individual binary sensors using pins from an SN74HC165 shift register. This demonstrates the pin configuration for reading an input from the first pin (Pin A) of the shift register.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sn74hc165.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Individual inputs\nbinary_sensor:\n  - platform: gpio\n    name: \"SN74HC165 Pin #0\"\n    pin:\n      sn74hc165: sn74hc165_hub\n      # Use pin number 0\n      number: 0\n      inverted: false\n```\n\n----------------------------------------\n\nTITLE: Configuring LYWSD02MMC Encrypted Thermometer in YAML\nDESCRIPTION: Configuration for the encrypted rectangular e-ink display thermometer. Requires MAC address and bindkey for decryption.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/xiaomi_ble.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: xiaomi_lywsd02mmc\n    mac_address: \"A4:C1:38:54:5E:18\"\n    bindkey: \"2529d8e0d23150a588675cc54ad48400\"\n    temperature:\n      name: \"LYWSD02MMC Temperature\"\n    humidity:\n      name: \"LYWSD02MMC Humidity\"\n    battery_level:\n      name: \"LYWSD02MMC Battery Level\"\n```\n\n----------------------------------------\n\nTITLE: Setting Write Mode Action in YAML\nDESCRIPTION: In this YAML snippet, 'write mode' is activated on the PN7160, writing an NDEF message previously defined using 'set_write_message'. An NDEF message must have been configured prior to using this mode. Dependencies are in line with having a message set and a correctly configured PN7160.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/pn7160.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - tag.set_write_mode: my_pn7160_id\n```\n\n----------------------------------------\n\nTITLE: ESPHome Delay Action Example\nDESCRIPTION: Example of using the delay action with both fixed and templated delays\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/automations/actions.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - switch.turn_on: relay_1\n    - delay: 2s\n    - switch.turn_off: relay_1\n    - delay: !lambda \"if (id(reed_switch).state) return 1000; else return 0;\"\n```\n\n----------------------------------------\n\nTITLE: Creating Notes and Warnings in RST\nDESCRIPTION: Demonstrates how to create note and warning blocks using the note and warning directives in reStructuredText.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/contributing.rst#2025-04-21_snippet_7\n\nLANGUAGE: rst\nCODE:\n```\n.. note::\n\n    This is a note.\n\n.. warning::\n\n    This is a warning.\n```\n\n----------------------------------------\n\nTITLE: Select First Action in YAML\nDESCRIPTION: This action snippet sets the selection to the first option in the select component, ensuring that users can quickly navigate to the start of the option list.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/select/index.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n\"    - select.first:\\n        id: my_select\\n\\n    # Shorthand\\n    - select.first: my_select\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Shutdown Button in ESP Home\nDESCRIPTION: Basic YAML configuration for adding a shutdown button to an ESP Home device. This creates a button entity in Home Assistant that can remotely shut down the ESP device by putting it into deep sleep mode with no wake-up source.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/button/shutdown.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nbutton:\n  - platform: shutdown\n    name: \"Living Room Shutdown\"\n```\n\n----------------------------------------\n\nTITLE: Logging DateTime Values in ESPHome (C++)\nDESCRIPTION: This snippet demonstrates how to create a custom log message with the current values of a datetime object in ESPHome. It uses the ESPTime object properties to format the date and time.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/datetime/index.rst#2025-04-21_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\n// For example, create a custom log message when a value is received:\nESP_LOGI(\"main\", \"Value of my datetime: %04d-%02d-%02d %0d:%02d:%02d\",\n         id(my_datetime).year, id(my_datetime).month, id(my_datetime).day,\n         id(my_datetime).hour, id(my_datetime).minute, id(my_datetime).second);\n```\n\n----------------------------------------\n\nTITLE: Installing ESPHome via pip\nDESCRIPTION: Command for installing ESPHome using pip package manager after the project rename.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/changelog/v1.11.0.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install esphome\n```\n\n----------------------------------------\n\nTITLE: Pausing Dosing Action in YAML\nDESCRIPTION: This YAML snippet shows how to pause and unpause a dosing command on the peristaltic pump using the `ezo_pmp.pause_dosing` action. The action requires the `id` of the pump and can toggle the paused state.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/ezo_pmp.rst#2025-04-21_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n  - ezo_pmp.pause_dosing:\n      id: ezo_pmp\n```\n\n----------------------------------------\n\nTITLE: Displaying Sprinkler Time Remaining Status in C++\nDESCRIPTION: Example demonstrating how to display the remaining time for an active valve using optional return types. Shows handling of both active and idle states of the sprinkler controller.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sprinkler.rst#2025-04-21_snippet_31\n\nLANGUAGE: c++\nCODE:\n```\ndisplay:\n  - platform: ...\n    # ...display configuration...\n    lambda: |-\n      if (id(lawn_sprinkler_ctrlr).time_remaining_active_valve().has_value()) {\n        // the controller is running, print the number of seconds remaining\n        it.printf(0, 0, \"Time left: %u sec.\", id(lawn_sprinkler_ctrlr).time_remaining_active_valve().value());\n      } else {\n        // the controller is NOT running\n        it.print(0, 0, \"Idle\");\n      }\n```\n\n----------------------------------------\n\nTITLE: Tuya Device Log Output\nDESCRIPTION: Example log output showing datapoint mapping for a Tuya climate device (BAC-002-ELW model), including switch states, temperature values, and operating modes.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/climate/tuya.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n[11:45:14][C][tuya:041]: Tuya:\\n[11:45:14][C][tuya:056]:   Datapoint 1: switch (value: OFF)\\n[11:45:14][C][tuya:058]:   Datapoint 2: int value (value: 65)\\n[11:45:14][C][tuya:058]:   Datapoint 3: int value (value: 54)\\n[11:45:14][C][tuya:062]:   Datapoint 4: enum (value: 1)\\n[11:45:14][C][tuya:056]:   Datapoint 5: switch (value: OFF)\\n[11:45:14][C][tuya:056]:   Datapoint 6: switch (value: OFF)\\n[11:45:14][C][tuya:062]:   Datapoint 102: enum (value: 0)\\n[11:45:14][C][tuya:062]:   Datapoint 103: enum (value: 1)\\n[11:45:14][C][tuya:074]:   Product: 'N8bUqOZ8HBQjU0K02.0.1'\n```\n\n----------------------------------------\n\nTITLE: Configuring the Demo Component in ESPHome YAML\nDESCRIPTION: A minimal configuration example that enables the demo component in ESPHome. This component requires no additional configuration variables and generates sample instances of various components for testing purposes.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/demo.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\ndemo:\n```\n\n----------------------------------------\n\nTITLE: Triggering Action on Value Change\nDESCRIPTION: This automation snippet triggers an action when a new number value is published. The value can be accessed using 'x' in lambdas for further processing.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/number/index.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nnumber:\n  - platform: template\n    # ...\n    on_value:\n      then:\n        - light.turn_on:\n            id: light_1\n            red: !lambda \"return x/255;\"\n```\n\n----------------------------------------\n\nTITLE: Background Calibration Action\nDESCRIPTION: Action configuration for initiating background calibration on the SenseAir sensor. Used to set the current CO2 level as a reference for the 400ppm threshold.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/senseair.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - senseair.background_calibration: my_senseair_id\n```\n\n----------------------------------------\n\nTITLE: Implementing Local Light Switch with LVGL\nDESCRIPTION: YAML configuration showing how to create a local light switch using LVGL switch widget with automation integration. The switch widget state updates based on light state changes and toggles the light when clicked.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/cookbook/lvgl.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlight:\n  - platform: ...\n    id: local_light\n    name: 'Local light'\n    on_state:\n      - lvgl.widget.update:\n          id: light_switch\n          state:\n            checked: !lambda return id(local_light).current_values.is_on();\n\nlvgl:\n    ...\n    pages:\n      - id: main_page\n        widgets:\n          - switch:\n              align: CENTER\n              id: light_switch\n              on_click:\n                light.toggle: local_light\n```\n\n----------------------------------------\n\nTITLE: Creating an image table in reStructuredText\nDESCRIPTION: Defines a table of images for various new components added in ESPHome 1.16.0.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/changelog/v1.16.0.rst#2025-04-21_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. imgtable::\n    :columns: 5\n\n    TMP102, components/sensor/tmp102, tmp102.jpg\n    MCP9808, components/sensor/mcp9808, mcp9808.jpg\n    RC522, components/binary_sensor/rc522, rc522.jpg\n    H-bridge Light, components/light/hbridge, brightness-medium.svg, dark-invert\n    ILI9341, components/display/ili9341, ili9341.jpg\n    Teleinfo, components/sensor/teleinfo, teleinfo.jpg\n    EZO sensor circuits, components/sensor/ezo, ezo-ph-circuit.png\n    SSD1322, components/display/ssd1322, ssd1322.jpg\n    SSD1327, components/display/ssd1327, ssd1327.jpg\n    SSD1331, components/display/ssd1331, ssd1331.jpg\n    ST7735, components/display/st7735, st7735.jpg\n    MCP23SXX I/O Expander - SPI Bus, components/mcp23Sxx, mcp230xx.svg\n    CAN Bus, components/canbus, canbus.svg\n    Inkplate 6, components/display/Inkplate, inkplate6.jpg\n```\n\n----------------------------------------\n\nTITLE: Basic EZO-PMP Configuration in YAML\nDESCRIPTION: Basic configuration for setting up an Atlas Scientific Peristaltic Pump in ESPHome. Defines the IÂ²C address and update interval for the pump.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/ezo_pmp.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nezo_pmp:\n  id: ezo_pmp\n  address: 103  # Default Address for the EZO-PMP.\n  update_interval: 60s\n```\n\n----------------------------------------\n\nTITLE: Checking Fan State in YAML Conditions\nDESCRIPTION: YAML configuration for using fan.is_on or fan.is_off conditions in ESPHome automations to check the current state of a fan.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/fan/index.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# in a trigger:\non_...:\n  if:\n    condition:\n      fan.is_on: my_fan\n      # same goes for is_off\n    then:\n    - script.execute: my_script\n\n```\n\n----------------------------------------\n\nTITLE: Configuring SM2135 Component in ESPHome\nDESCRIPTION: This YAML configuration snippet sets up the SM2135 LED driver component in ESPHome. It specifies two GPIO pins (MOSI and SCLK) for communication, along with optional configurations for current settings and combined modes. The snippet requires dependencies such as an ESPHome environment with a compatible microcontroller. Key parameters include 'data_pin' and 'clock_pin', both of which are mandatory. The configuration does not support simultaneous CW and RGB operation unless specified using 'separate_modes'.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/output/sm2135.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsm2135:\n  data_pin: GPIOXX\n  clock_pin: GPIOXX\n```\n\n----------------------------------------\n\nTITLE: RDM6300 Tag Event MQTT Publishing\nDESCRIPTION: Configuration showing how to publish RDM6300 tag events to MQTT when a tag is detected. Uses lambda function to convert tag UID to string.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/rdm6300.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nrdm6300:\n  # ...\n  on_tag:\n    then:\n      - mqtt.publish:\n          topic: rdm6300/tag\n          payload: !lambda 'return to_string(x);'\n```\n\n----------------------------------------\n\nTITLE: Configuring JSN-SR04T Ultrasonic Sensor in ESPHome\nDESCRIPTION: Example setup for the new JSN-SR04T ultrasonic distance sensor component.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/changelog/2024.4.0.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: jsn_sr04t\n    trigger_pin: GPIO5\n    echo_pin: GPIO4\n    name: \"Distance Sensor\"\n```\n\n----------------------------------------\n\nTITLE: Image Display Configuration for SSD1351\nDESCRIPTION: Configuration example for loading and displaying RGB images on the SSD1351 OLED display, including image resizing options.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/ssd1351.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n  - file: \"image.jpg\"\n    id: my_image\n    resize: 120x120\n    type: RGB24\n\n...\n\ndisplay:\n    ...\n    lambda: |-\n      it.image(0, 0, id(my_image));\n```\n\n----------------------------------------\n\nTITLE: Nextion Custom Text Sensor Protocol Implementation\nDESCRIPTION: Required protocol implementation for custom text sensor communication with Nextion displays.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/text_sensor/nextion.rst#2025-04-21_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nprinth 92\nprints \"text0\",0\nprinth 00\nprints text0.txt,0\nprinth 00\nprinth FF FF FF\n```\n\n----------------------------------------\n\nTITLE: Configuring VBus Sensors\nDESCRIPTION: Example configuration for VBus sensors including temperature, pump speed, operating hours, and other metrics\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/vbus.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: vbus\n    model: deltasol_bs_plus\n    temperature_1:\n      name: Temperature 1\n    temperature_2:\n      name: Temperature 2\n    temperature_3:\n      name: Temperature 3\n    temperature_4:\n      name: Temperature 4\n    pump_speed_1:\n      name: Pump Speed 1\n    pump_speed_2:\n      name: Pump Speed 2\n    operating_hours_1:\n      name: Operating Hours 1\n    operating_hours_2:\n      name: Operating Hours 2\n    heat_quantity:\n      name: Heat Quantity\n    time:\n      name: Device Time\n    version:\n      name: Device firmware version\n```\n\n----------------------------------------\n\nTITLE: Haier Alarm Start Trigger Configuration\nDESCRIPTION: Example of configuring an automation trigger for when the AC activates a new alarm\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/climate/haier.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclimate:\n  - protocol: hon\n    on_alarm_start:\n      then:\n        - logger.log:\n            level: WARN\n            format: \"Alarm activated. Code: %d. Message: \\\"%s\\\"\"\n            args: [ 'code', 'message' ]\n```\n\n----------------------------------------\n\nTITLE: Firebeetle ESP32-E Battery Voltage Measurement\nDESCRIPTION: Configuration for measuring battery voltage on Firebeetle ESP32-E board using internal voltage divider with 12dB attenuation.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/adc.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- platform: adc\n  name: \"Battery voltage\"\n  pin: GPIO34\n  accuracy_decimals: 2\n  update_interval: 60s\n  attenuation: 12dB\n  samples: 10\n  filters:\n    - multiply: 2.0  # The voltage divider requires us to multiply by 2\n```\n\n----------------------------------------\n\nTITLE: Markdown Formatted List of Contributors\nDESCRIPTION: A markdown-formatted list of ESPHome documentation contributors with their GitHub usernames and profile links.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/supporters.rst#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- `Brynley McDonald (@ZephireNZ) <https://github.com/ZephireNZ>`__\n- `ZJY (@zhangjingye03) <https://github.com/zhangjingye03>`__\n- `San (@zhujunsan) <https://github.com/zhujunsan>`__\n- `Geek_cat (@zhzhzhy) <https://github.com/zhzhzhy>`__\n- `I. Tomita (@ziceva) <https://github.com/ziceva>`__\n- `Michael Labuschke (@zigman79) <https://github.com/zigman79>`__\n- `Stefan Goethals (@zipkid) <https://github.com/zipkid>`__\n- `zivillian (@zivillian) <https://github.com/zivillian>`__\n- `LoÃ¯c (@zoic21) <https://github.com/zoic21>`__\n- `Zoltant7 (@Zoltant7) <https://github.com/Zoltant7>`__\n- `zry98 (@zry98) <https://github.com/zry98>`__\n- `Zack Barett (@zsarnett) <https://github.com/zsarnett>`__\n- `Zsolt Zsiros (@ZsZs73) <https://github.com/ZsZs73>`__\n- `ZTX18 (@ZTX18) <https://github.com/ZTX18>`__\n- `Christian Zufferey (@zuzu59) <https://github.com/zuzu59>`__\n- `Zynth-dev (@Zynth-dev) <https://github.com/Zynth-dev>`__\n```\n\n----------------------------------------\n\nTITLE: Implementing Cover Controls with LVGL in ESPHome\nDESCRIPTION: YAML configuration for creating a cover control interface with three buttons (up/stop/down) that display the cover's state. Includes sensor monitoring for position and movement state, with dynamic label and opacity updates.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/cookbook/lvgl.rst#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: homeassistant\n    id: cover_myroom_pos\n    entity_id: cover.myroom\n    attribute: current_position\n    on_value:\n      - if:\n          condition:\n            lambda: |-\n              return x == 100;\n          then:\n            - lvgl.widget.update:\n                id: cov_up_myroom\n                text_opa: 60%\n          else:\n            - lvgl.widget.update:\n                id: cov_up_myroom\n                text_opa: 100%\n      - if:\n          condition:\n            lambda: |-\n              return x == 0;\n          then:\n            - lvgl.widget.update:\n                id: cov_down_myroom\n                text_opa: 60%\n          else:\n            - lvgl.widget.update:\n                id: cov_down_myroom\n                text_opa: 100%\n```\n\n----------------------------------------\n\nTITLE: Configuring LD2410 Number Controls in YAML\nDESCRIPTION: This configuration allows for the control of various numeric parameters of the LD2410 sensor, such as timeout settings and light thresholds, enabling fine-tuning of sensor performance.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ld2410.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nnumber:\n  - platform: ld2410\n    timeout:\n      name: timeout\n    light_threshold:\n      name: light threshold\n    max_move_distance_gate:\n      name: max move distance gate\n    max_still_distance_gate:\n      name: max still distance gate\n    g0:\n      move_threshold:\n        name: g0 move threshold\n      still_threshold:\n        name: g0 still threshold\n    g1:\n      move_threshold:\n        name: g1 move threshold\n      still_threshold:\n        name: g1 still threshold\n    g2:\n      move_threshold:\n        name: g2 move threshold\n      still_threshold:\n        name: g2 still threshold\n    g3:\n      move_threshold:\n        name: g3 move threshold\n      still_threshold:\n        name: g3 still threshold\n    g4:\n      move_threshold:\n        name: g4 move threshold\n      still_threshold:\n        name: g4 still threshold\n    g5:\n      move_threshold:\n        name: g5 move threshold\n      still_threshold:\n        name: g5 still threshold\n    g6:\n      move_threshold:\n        name: g6 move threshold\n      still_threshold:\n        name: g6 still threshold\n    g7:\n      move_threshold:\n        name: g7 move threshold\n      still_threshold:\n        name: g7 still threshold\n    g8:\n      move_threshold:\n        name: g8 move threshold\n      still_threshold:\n        name: g8 still threshold\n\n```\n\n----------------------------------------\n\nTITLE: Configuring GPIO Pins on WK2168\nDESCRIPTION: Example of using GPIO pins on WK2168 chip for binary sensors and switches with different input/output configurations\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/weikai.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nbinary_sensor:\n  - platform: gpio\n    name: \"pin_0\"\n    pin:\n      wk2168_spi: wk2168_bridge_spi\n      number: 0\n      mode:\n        input: true\n  - platform: gpio\n    name: \"pin_1\"\n    pin:\n      wk2168_spi: wk2168_bridge_spi\n      number: 1\n      mode:\n        input: true\n      inverted: true\n\nswitch:\n  - platform: gpio\n    name: \"pin_2\"\n    pin:\n      wk2168_spi: wk2168_bridge_spi\n      number: 2\n      mode:\n        output: true\n  - platform: gpio\n    name: \"pin_3\"\n    pin:\n      wk2168_spi: wk2168_bridge_spi\n      number: 3\n      mode:\n        output: true\n      inverted: true\n```\n\n----------------------------------------\n\nTITLE: Dimmable Backlight Configuration\nDESCRIPTION: Setup for creating a dimmable backlight using PWM output and monochromatic light component.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/ili9xxx.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\noutput:\n  - platform: ledc\n    pin: GPIOXX\n    id: backlight_pwm\n\nlight:\n  - platform: monochromatic\n    output: backlight_pwm\n    name: \"Display Backlight\"\n    id: back_light\n    restore_mode: ALWAYS_ON\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP47A1 Output in ESPHome YAML\nDESCRIPTION: This YAML configuration shows how to define a global IÂ²C connection and use an MCP47A1 DAC as an output in ESPHome. It sets the SDA and SCL pins for IÂ²C, scans for devices, defines an MCP47A1 output with a specific ID, and demonstrates setting the output level to 100% via automation.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/output/mcp47a1.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n    # Example configuration entry\n\n    # Set a global IÂ²C connection\n    i2c:\n      sda: 21\n      scl: 22\n      scan: true\n\n    # Set the output with default (address: 0x2E / global IÂ²C)\n    output:\n      - platform: mcp47a1\n        id: dac_output\n\n    on_...:\n      then:\n        - output.set_level:\n            id: dac_output\n            level: 100%\n```\n\n----------------------------------------\n\nTITLE: Home Assistant Automations for CO2 Level Visualization\nDESCRIPTION: Home Assistant automation configuration for controlling LED colors based on CO2 levels and system states.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/cookbook/infostrip.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nautomation:\n- id: '1601241280015'\n  alias: Light CO2 On\n  description: ''\n  trigger:\n    - platform: numeric_state\n      entity_id: sensor.mh_z19_co2_value\n      above: 1000\n  condition: []\n  action:\n    - action: light.turn_on\n      data:\n      color_name: red\n      entity_id: light.pl2\n  mode: single\n- id: '1601241280016'\n  alias: Light CO2 Off\n  description: ''\n  trigger:\n    - platform: numeric_state\n      entity_id: sensor.mh_z19_co2_value\n      below: 800\n  condition: []\n  action:\n    - action: light.turn_off\n      entity_id: light.pl2\n      mode: single\n- alias: \"State Light Mapping\"\n  trigger:\n  platform: time_pattern\n  minutes: \"/5\"\n  action:\n    - action: light.turn_on\n      data_template:\n      entity_id: light.pl1\n      brightness_pct: 30\n      color_name: >\n          {% set map = {'on': 'green', 'off': 'red'} %}\n          {% set state = states('binary_sensor.bad_status') %}\n          {{ map[state] if state in map else 'white' }}\n```\n\n----------------------------------------\n\nTITLE: BLE Numeric Comparison Handler\nDESCRIPTION: Automation for handling numeric comparison requests from BLE device\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/ble_client.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nble_client:\n  - mac_address: XX:XX:XX:XX:XX:XX\n    id: ble_itag\n    on_numeric_comparison_request:\n      then:\n        - logger.log:\n            format: \"Compare this passkey with the one on your BLE device: %06d\"\n            args: [ passkey ]\n        - ble_client.numeric_comparison_reply:\n            id: ble_itag\n            accept: True\n```\n\n----------------------------------------\n\nTITLE: Configuring LVGL Tileview Widget in YAML\nDESCRIPTION: Example configuration for an LVGL tileview widget. Demonstrates adding a tile with specific position, movement direction, and child widgets.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lvgl/widgets.rst#2025-04-21_snippet_40\n\nLANGUAGE: yaml\nCODE:\n```\n# Example widget:\n- tileview:\n    id: tiv_id\n    tiles:\n      - id: cat_tile\n        row: 0\n        column: 0\n        dir: VER\n        widgets:\n          - image:\n              src: cat_image\n          - ...\n      - ...\n```\n\n----------------------------------------\n\nTITLE: Configuring BK72xx and RTL87xx Boards in ESPHome\nDESCRIPTION: Example YAML configurations for setting up BK72xx and RTL87xx boards in ESPHome. This includes specifying the board type and optional framework settings.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/libretiny.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry for BK72xx\nbk72xx:\n  board: generic-bk7231n-qfn32-tuya\n\n# Example configuration entry for RTL87xx\nrtl87xx:\n  board: generic-rtl8710bn-2mb-788k\n```\n\n----------------------------------------\n\nTITLE: Configuring WiFi Info Text Sensors in ESPHome\nDESCRIPTION: YAML configuration for setting up multiple WiFi information text sensors including IP addresses (with support for up to 5 addresses), SSID, BSSID, MAC address, scan results, and DNS address. Each sensor can be individually named and configured.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/text_sensor/wifi_info.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntext_sensor:\n  - platform: wifi_info\n    ip_address:\n      name: ESP IP Address\n      address_0:\n        name: ESP IP Address 0\n      address_1:\n        name: ESP IP Address 1\n      address_2:\n        name: ESP IP Address 2\n      address_3:\n        name: ESP IP Address 3\n      address_4:\n        name: ESP IP Address 4\n    ssid:\n      name: ESP Connected SSID\n    bssid:\n      name: ESP Connected BSSID\n    mac_address:\n      name: ESP Mac Wifi Address\n    scan_results:\n      name: ESP Latest Scan Results\n    dns_address:\n      name: ESP DNS Address\n```\n\n----------------------------------------\n\nTITLE: Midea IR Climate Configuration\nDESCRIPTION: Configuration for Midea AC units with Fahrenheit temperature display option.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/climate/climate_ir.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nclimate:\n  - platform: midea_ir\n    name: \"AC\"\n    sensor: room_temperature\n    use_fahrenheit: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Base Valve Component in YAML\nDESCRIPTION: Basic YAML configuration for setting up a valve component in ESPHome. Includes options for device class, name, icon, and advanced settings like internal and disabled_by_default.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/valve/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nvalve:\n  - platform: ...\n    device_class: water\n```\n\n----------------------------------------\n\nTITLE: Configuring Xiaomi MJYD02YL-A Night Light in ESPHome YAML\nDESCRIPTION: YAML configuration for the Xiaomi Yeelight night light MJYD02YL-A. Defines sensors for idle time, light status, battery level, and illuminance. Requires a bindkey for decryption.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/xiaomi_ble.rst#2025-04-21_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n\nbinary_sensor:\n  - platform: xiaomi_mjyd02yla\n    name: \"MJYD02YL-A Night Light\"\n    mac_address: XX:XX:XX:XX:XX:XX\n    bindkey: \"48403ebe2d385db8d0c187f81e62cb64\"\n    idle_time:\n      name: \"MJYD02YL-A Idle Time\"\n    light:\n      name: \"MJYD02YL-A Light Status\"\n    battery_level:\n      name: \"MJYD02YL-A Battery Level\"\n    illuminance:\n      name: \"MJYD02YL-A Illuminance\"\n```\n\n----------------------------------------\n\nTITLE: Performing Operations on Number\nDESCRIPTION: This action performs various operations (increment, decrement, set to min or max) on a number component, allowing for templated actions.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/number/index.rst#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n# Using values\n- number.operation:\n    id: my_number\n    operation: Increment\n    cycle: true\n\n# Or templated (lambda)\n- number.operation:\n    id: my_number\n    operation: !lambda \"return NUMBER_OP_INCREMENT;\"\n    cycle: !lambda \"return true;\"\n```\n\n----------------------------------------\n\nTITLE: Haier Alarm End Trigger Configuration\nDESCRIPTION: Example of configuring an automation trigger for when an AC alarm is deactivated\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/climate/haier.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nclimate:\n  - protocol: hon\n    on_alarm_end:\n      then:\n        - logger.log:\n            level: INFO\n            format: \"Alarm deactivated. Code: %d. Message: \\\"%s\\\"\"\n            args: [ 'code', 'message' ]\n```\n\n----------------------------------------\n\nTITLE: Lock State Condition Check - YAML\nDESCRIPTION: Condition used to check whether a specified lock is currently locked. Essential for conditional logic in automation setups.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/lock/index.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# In some trigger:\non_...:\n  if:\n    condition:\n      lock.is_locked: my_lock\n```\n\n----------------------------------------\n\nTITLE: Integrating MDI Icons with Custom Fonts in LVGL\nDESCRIPTION: Configuration for combining Material Design Icons with Roboto font for inline icon display in text. Includes font configuration and label widget setup.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/cookbook/lvgl.rst#2025-04-21_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nfont:\n  - file: \"fonts/RobotoCondensed-Regular.ttf\"\n    id: roboto_icons_42\n    size: 42\n    bpp: 4\n    extras:\n      - file: \"fonts/materialdesignicons-webfont.ttf\"\n        glyphs: [\n          \"\\U000F02D1\", # mdi-heart\n          \"\\U000F05D4\", # mdi-airplane-landing\n          ]\n\nlvgl:\n    ...\n    pages:\n      - id: main_page\n        widgets:\n          - label:\n              text: \"Just\\U000f05d4here. Already\\U000F02D1this.\"\n              align: CENTER\n              text_align: CENTER\n              text_font: roboto_icons_42\n```\n\n----------------------------------------\n\nTITLE: Configuring XPT2046 Touch Screen in ESPHome\nDESCRIPTION: Example YAML configuration for setting up an XPT2046 touch screen controller. Includes essential parameters like chip select pin, interrupt pin, update interval, touch threshold, and calibration values. Requires SPI to be configured in the system.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/touchscreen/xpt2046.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntouchscreen:\n  platform: xpt2046\n  id: my_touchscreen\n  cs_pin: GPIOXX\n  interrupt_pin: GPIOXX\n  update_interval: 50ms\n  threshold: 400\n  transform:\n    mirror_x: true\n  calibration:\n    x_min: 280\n    x_max: 3860\n    y_min: 340\n    y_max: 3860\n```\n\n----------------------------------------\n\nTITLE: Set Battery Level Percentage Action\nDESCRIPTION: Action configuration for setting the battery display level as a percentage from 0 to 100.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/tm1651.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - tm1651.set_level_percent:\n      id: tm1651_battery\n      level_percent: 50\n```\n\n----------------------------------------\n\nTITLE: Configuring Menu Navigation Down Action in ESPHome\nDESCRIPTION: YAML configuration for a display_menu.down action triggered by a clockwise rotary encoder turn.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display_menu/index.rst#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: rotary_encoder\n    ...\n    on_clockwise:\n      - display_menu.down:\n```\n\n----------------------------------------\n\nTITLE: Disabling Tag Polling for PN7160 in YAML\nDESCRIPTION: This snippet demonstrates how to disable tag polling on the PN7160 NFC module. This stops the device from reading or writing any cards or tags. The identifier 'my_pn7160_id' should be the ID of the PN7160 device in your configuration.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/pn7160.rst#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - tag.polling_off: my_pn7160_id\n```\n\n----------------------------------------\n\nTITLE: Example Tuya Calibration Values - JSON\nDESCRIPTION: This JSON snippet shows an example of calibration values obtained from a Tuya device using a `tinytuya wizard`. These values are necessary for accurately calibrating the energy monitor when converting from another firmware.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/bl0942.rst#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"code\": \"voltage_coe\",\n    \"value\": 15968\n},\n{\n    \"code\": \"electric_coe\",\n    \"value\": 12418\n},\n{\n    \"code\": \"power_coe\",\n    \"value\": 3091\n},\n{\n    \"code\": \"electricity_coe\",\n    \"value\": 2653\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pin Reuse Validation in Python\nDESCRIPTION: Example of how to bypass the new pin reuse validation by adding a config item to duplicate pin definitions. This is referenced in the changelog but no specific code is provided.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/changelog/2023.12.0.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Example of bypassing pin reuse validation (hypothetical code)\npin:\n  number: GPIO4\n  allow_reuse: true\n```\n\n----------------------------------------\n\nTITLE: Image Adaptive Color Palette Configuration\nDESCRIPTION: Configuration for implementing an image adaptive color palette to achieve better color depth with limited RAM.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/ili9xxx.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n  - file: \"sample_100x100.png\"\n    id: myimage\n    resize: 100x100\n    type: RGB24\n\ndisplay:\n  - platform: ili9xxx\n    model: ili9341\n```\n\n----------------------------------------\n\nTITLE: Analyzing Tuya Serial Output for Datapoint Identification\nDESCRIPTION: Example of serial console output showing Tuya datapoints. The output reveals different datapoint types including switches (1 and 2), integer values (3, 4, 5), and enum value (7). This information is crucial for identifying which datapoint to use for switch control.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/switch/tuya.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n[13:46:01][C][tuya:023]: Tuya:\n[13:46:01][C][tuya:032]:   Datapoint 1: switch (value: OFF)\n[13:46:01][C][tuya:032]:   Datapoint 2: switch (value: OFF)\n[13:46:01][C][tuya:034]:   Datapoint 3: int value (value: 19)\n[13:46:01][C][tuya:034]:   Datapoint 4: int value (value: 17)\n[13:46:01][C][tuya:034]:   Datapoint 5: int value (value: 0)\n[13:46:01][C][tuya:036]:   Datapoint 7: enum (value: 1)\n[13:46:01][C][tuya:046]:   Product: '{\"p\":\"ynjanlglr4qa6dxf\",\"v\":\"1.0.0\",\"m\":0}'\n```\n\n----------------------------------------\n\nTITLE: Cover Stop Action Configuration\nDESCRIPTION: YAML configuration for stopping a cover using action triggers.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/cover/index.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - cover.stop: cover_1\n```\n\n----------------------------------------\n\nTITLE: Implementing Timers in ESPHome Using Scripts\nDESCRIPTION: Shows how to create timers and timeouts in ESPHome using scripts. This example demonstrates a restart mode script that keeps a light on for 1 minute after each trigger.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/automations/actions.rst#2025-04-21_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nscript:\n  - id: hallway_light_script\n    mode: restart     # Light will be kept on during 1 minute since\n                      # the latest time the script is executed\n    then:\n      - light.turn_on: hallway_light\n      - delay: 1 min\n      - light.turn_off: hallway_light\n\n...\n  on_...:           # can be called from different wall switches\n    - script.execute: hallway_light_script\n```\n\n----------------------------------------\n\nTITLE: Configuring LVGL Status Icon with API Connection Detection\nDESCRIPTION: YAML configuration for a status icon widget that shows/hides based on Home Assistant API connection state. The widget displays a WiFi icon in the top right corner.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/cookbook/lvgl.rst#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nlambda: 'return (0 == client_info.find(\"Home Assistant \"));'\n\nlvgl:\n  top_layer:\n    widgets:\n      - label:\n          text: \"\\uF1EB\"\n          id: lbl_hastatus\n          hidden: true\n          align: top_right\n          x: -2\n          y: 7\n          text_align: right\n          text_color: 0xFFFFFF\n```\n\n----------------------------------------\n\nTITLE: Moving to Previous Valve in YAML\nDESCRIPTION: Action to move to the previous valve numerically, with optional delay before activation.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sprinkler.rst#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - sprinkler.previous_valve: sprinkler_ctrlr\n```\n\n----------------------------------------\n\nTITLE: Viewing Tuya Fan Controller Data Points (Text Output)\nDESCRIPTION: Example output showing the data points reported by a Tuya fan controller, including switch state (1), speed setting (3), unknown parameters (6, 7), and light switch state (9).\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/fan/tuya.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n[12:39:45][C][tuya:023]: Tuya:\n[12:39:45][C][tuya:032]:   Datapoint 1: switch (value: ON)\n[12:39:45][C][tuya:036]:   Datapoint 3: enum (value: 1)\n[12:39:45][C][tuya:036]:   Datapoint 6: enum (value: 0)\n[12:39:45][C][tuya:034]:   Datapoint 7: int value (value: 0)\n[12:39:45][C][tuya:032]:   Datapoint 9: switch (value: OFF)\n[12:39:45][C][tuya:046]:   Product: '{\"p\":\"hqq73kftvzh8c92u\",\"v\":\"1.0.0\",\"m\":0}'\n```\n\n----------------------------------------\n\nTITLE: Servo Detach with Lambda in ESPHome\nDESCRIPTION: Example of detaching a servo using a C++ lambda function, which provides an alternative way to control servo detachment in custom code.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/servo.rst#2025-04-21_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nid(my_servo).detach();\n```\n\n----------------------------------------\n\nTITLE: Configuring HYT271 Temperature and Humidity Sensors in YAML for ESPHome\nDESCRIPTION: This YAML configuration sets up HYT271 temperature and humidity sensors in ESPHome. It defines separate sensors for temperature and humidity, with custom names and an update interval. The IÂ²C Bus must be configured separately for this sensor to work.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/hyt271.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: hyt271\n    temperature:\n      name: \"Living Room Temperature\"\n    humidity:\n      name: \"Living Room Humidity\"\n    update_interval: 60s\n```\n\n----------------------------------------\n\nTITLE: Image Table Component Layout\nDESCRIPTION: Structured table layout for displaying component images and links in a 4-column format.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/changelog/v1.17.0.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n.. imgtable::\n    :columns: 4\n\n    Inkbird IBS-TH1 Mini, components/sensor/inkbird_ibsth1_mini, inkbird_isbth1_mini.jpg\n    MCP4725, components/output/mcp4725, mcp4725.jpg\n    Xiaomi Miscale, components/sensor/xiaomi_miscale, xiaomi_miscale.jpg\n    Xiaomi Miscale2, components/sensor/xiaomi_miscale2, xiaomi_miscale2.jpg\n    Midea Air Conditioner, components/climate/midea_ac, midea.svg\n    Addressable Light Display, components/display/addressable_light, addressable_light.jpg\n    Pulse Meter, components/sensor/pulse_meter, pulse.svg, dark-invert\n```\n\n----------------------------------------\n\nTITLE: Configuring Nextion Baud Rate in Nextion Editor\nDESCRIPTION: Sample code for the program.s file in the Nextion Editor to set a higher baud rate and disable command responses for improved communication performance with ESPHome.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/nextion.rst#2025-04-21_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\nbaud=115200   // Sets the baud rate to 115200; for other supported rates, see https://nextion.tech/instruction-set/\nbkcmd=0       // Tells the Nextion to not send responses on commands. This is the current default but can be set just in case\n```\n\n----------------------------------------\n\nTITLE: Displaying Tuya Cover Debug Output\nDESCRIPTION: Example debug output showing datapoint values from a Tuya M515EGWT motor for chain roller blinds. Shows position control on datapoint 2 and switch status on datapoint 5.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/cover/tuya.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n[21:50:28][C][tuya:024]: Tuya:\\n[21:50:28][C][tuya:031]:   Datapoint 2: int value (value: 53)\\n[21:50:28][C][tuya:029]:   Datapoint 5: switch (value: OFF)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Device Information from EZO Sensor\nDESCRIPTION: Lambda function to request device information from an EZO sensor which triggers the on_device_information action when complete.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ezo.rst#2025-04-21_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nid(ph_ezo).get_device_information();\n```\n\n----------------------------------------\n\nTITLE: Publishing Nextion Sensor State from YAML\nDESCRIPTION: Example of using the sensor.nextion.publish action to set sensor states, with optional configuration for publishing to Home Assistant and Nextion display\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/nextion.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: nextion\n    id: nextion_sensor\n    ...\n# in some trigger\non_...:\n  - sensor.nextion.publish:\n      id: nextion_sensor\n      state: 100.0\n      publish_state: true\n      send_to_nextion: true\n  - sensor.nextion.publish:\n      id: nextion_sensor\n      state: !lambda 'return 100.0;'\n      publish_state: true\n      send_to_nextion: true\n```\n\n----------------------------------------\n\nTITLE: Button Configuration for Seeed MR60FDA2\nDESCRIPTION: This snippet demonstrates the configuration of buttons to perform actions with the MR60FDA2. It includes options for 'factory_reset' and 'get_radar_parameters', allowing users to restore factory settings and retrieve radar configuration.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/seeed_mr60fda2.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n\"    button:\\n      - platform: seeed_mr60fda2\\n        get_radar_parameters:\\n          name: \\\"Get Radar Parameters\\\"\\n        factory_reset:\\n          name: \\\"Reset\\\"\\n\"\n```\n\n----------------------------------------\n\nTITLE: Device Discovery Output (Text)\nDESCRIPTION: This text snippet shows the output generated by the device discovery configuration.  It includes the device name and MAC address of the Radon Eye sensor. The MAC address is required for configuring the sensor.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/radon_eye_ble.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n[D][radon_eye_ble:017]:\nFound Radon Eye RD200 device Name: FR:R20:SN1234      (MAC: XX:XX:XX:XX:XX:XX)\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for ESPHome Documentation\nDESCRIPTION: This snippet defines the exact versions of Python packages required to build the ESPHome documentation. It includes Sphinx and several extensions that enhance the documentation functionality and appearance.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsphinx==7.1.2\nsphinx-autobuild==2021.3.14\nsphinx-tabs==3.4.7\nsphinx-toolbox==3.8.0\nsphinx-copybutton==0.5.2\n```\n\n----------------------------------------\n\nTITLE: Xiaomi Bind Key Response Example\nDESCRIPTION: Example of a bind key response packet from Xiaomi cloud servers showing the key format and structure\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/xiaomi_ble.rst#2025-04-21_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\npacket: POST /app/device/bltbind\n\n\"data\" = \"{\\\"did\\\":\\\"blt.3.129q4nasgeg00\\\",\\\"token\\\":\\\"20c665a7ff82a5bfb5eefc36\\\",\\\"props\\\":[{\\\"type\\\":\\\"prop\\\",\\\"key\\\":\\\"bind_key\\\",\\\"value\\\":\\\"cfc7cc892f4e32f7a733086cf3443cb0\\\"}, {\\\"type\\\":\\\"prop\\\",\\\"key\\\":\\\"smac\\\",\\\"value\\\":XX:XX:XX:XX:XX:XX}]}\"\n```\n\n----------------------------------------\n\nTITLE: Resuming Component Updates in ESPHome YAML\nDESCRIPTION: Shows how to resume automatic updates for a PollingComponent using the component.resume action. This allows the component to refresh at its original update interval.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/automations/actions.rst#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - component.resume: my_component\n\n    # The same as:\n    - lambda: 'id(my_component).start_poller();'\n\n# Change the poller interval\non_...:\n  then:\n    - component.resume:\n        id: my_component\n        update_interval: 15s\n```\n\n----------------------------------------\n\nTITLE: Configuring Legacy Action Syntax in YAML\nDESCRIPTION: Shows the old verbose syntax for configuring actions in YAML configuration files for ESPHome. This example demonstrates how to turn on a switch using the more verbose nested structure.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/changelog/v1.8.0.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - switch.turn_on:\n        id: my_switch\n```\n\n----------------------------------------\n\nTITLE: NFC Tag Log Output Example\nDESCRIPTION: Example log output showing how to identify an NFC tag's UID when scanning it with the reader. This information is used to configure the binary sensor.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/nfc.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nRead tag type Mifare Classic with UID 1C-E5-E7-A6\n```\n\n----------------------------------------\n\nTITLE: Matched Finger Scan Automation with Lambda Function\nDESCRIPTION: YAML configuration for handling matched fingerprints, using a lambda function to access the finger_id and confidence variables.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/fingerprint_grow.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\non_finger_scan_matched:\n  - text_sensor.template.publish:\n      id: fingerprint_state\n      state: !lambda 'return \"Authorized finger \" + to_string(finger_id) + \", confidence \" + to_string(confidence);'\n  # Pushing a tag_scanned event based on finger_id only if confidence is greater than 50\n  - if:\n      condition:\n```\n\n----------------------------------------\n\nTITLE: Color Configuration for SSD1331 Display\nDESCRIPTION: Example showing how to define and use custom colors with the SSD1331 display, including drawing a rectangle with a custom red color.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/ssd1331.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncolor:\n  - id: my_red\n    red: 100%\n    green: 3%\n    blue: 5%\n\n...\n\ndisplay:\n    ...\n    lambda: |-\n      it.rectangle(0,  0, it.get_width(), it.get_height(), id(my_red));\n```\n\n----------------------------------------\n\nTITLE: Configuring LD2410 as Binary Sensor in YAML\nDESCRIPTION: This configuration sets up the LD2410 as a binary sensor with options for detection of presence and moving/still targets, including an output pin for presence status.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ld2410.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nbinary_sensor:\n  - platform: ld2410\n    has_target:\n      name: Presence\n    has_moving_target:\n      name: Moving Target\n    has_still_target:\n      name: Still Target\n    out_pin_presence_status:\n      name: out pin presence status\n\n```\n\n----------------------------------------\n\nTITLE: Configuring NEC Remote Transmission in YAML\nDESCRIPTION: Configuration for sending NEC infrared remote codes with 16-bit address and command values. Note the bit order change in version 2021.12.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/remote_transmitter.rst#2025-04-21_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - remote_transmitter.transmit_nec:\n      address: 0x1234\n      command: 0x78AB\n      command_repeats: 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Select Component for LD2450 Radar\nDESCRIPTION: Enables control of baud rate and zone type settings for the LD2450 radar sensor\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ld2450.rst#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nselect:\n  - platform: ld2450\n    ld2450_id: ld2450_radar\n    baud_rate:\n      name: \"Baud rate\"\n    zone_type:\n      name: \"Zone Type\"\n```\n\n----------------------------------------\n\nTITLE: Basic PCF85063 Configuration in YAML\nDESCRIPTION: Basic configuration entry for setting up PCF85063 RTC module. Requires I2C component to be configured first.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/time/pcf85063.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntime:\n  - platform: pcf85063\n    id: pcf85063_time\n```\n\n----------------------------------------\n\nTITLE: Configuring LD2410 Switch in YAML\nDESCRIPTION: This configuration enables the use of a switch to control specific functions of the LD2410, such as toggling engineering mode and controlling the Bluetooth functionality.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ld2410.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nswitch:\n  - platform: ld2410\n    engineering_mode:\n      name: \"engineering mode\"\n    bluetooth:\n      name: \"control bluetooth\"\n\n```\n\n----------------------------------------\n\nTITLE: Implementing API Connection Condition Check in ESPHome\nDESCRIPTION: Configuration for checking if any client is connected to the ESPHome native API, useful for conditional automation logic.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/api.rst#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  if:\n    condition:\n      api.connected:\n    then:\n      - logger.log: API is connected!\n```\n\n----------------------------------------\n\nTITLE: Downgrading Arduino Framework for ESP8266 FastLED Compatibility\nDESCRIPTION: Configuration snippet to downgrade the Arduino framework version for ESP8266 to ensure compatibility with FastLED. This is necessary due to issues with Arduino 3 or newer versions.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/light/fastled.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nesp8266:\n  framework:\n    version: 2.7.4\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video with HTML iframe\nDESCRIPTION: HTML code to embed a YouTube video player showing the Year of the Voice - Chapter 4 stream replay\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/changelog/2023.10.0.rst#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube-nocookie.com/embed/YzgYYkOrnhQ\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n```\n\n----------------------------------------\n\nTITLE: Suspending Component Updates in ESPHome YAML\nDESCRIPTION: Demonstrates how to suspend automatic updates for a PollingComponent using the component.suspend action. This stops the component from being refreshed.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/automations/actions.rst#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - component.suspend: my_component\n\n    # The same as:\n    - lambda: 'id(my_component).stop_poller();'\n```\n\n----------------------------------------\n\nTITLE: Using Lambda Functions in ESPHome Conditions\nDESCRIPTION: Demonstrates how to use lambda functions to create custom conditions in ESPHome automations. This allows for more complex conditional logic.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/automations/actions.rst#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - if:\n        condition:\n          # Should return either true or false\n          lambda: |-\n            return id(some_sensor).state < 30;\n        # ...\n```\n\n----------------------------------------\n\nTITLE: Updating Component Manually in ESPHome YAML\nDESCRIPTION: Shows how to manually call the update() method of a component using the component.update action. This is useful for triggering updates on-demand.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/automations/actions.rst#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - component.update: my_component\n\n    # The same as:\n    - lambda: 'id(my_component).update();'\n```\n\n----------------------------------------\n\nTITLE: SEO Configuration for Changelog Page\nDESCRIPTION: YAML configuration block defining SEO metadata for the changelog documentation page including description, image, and author information.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/changelog/v1.17.0.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n.. seo::\n    :description: Changelog for ESPHome version 1.17.0.\n    :image: /_static/changelog-1.17.0.png\n    :author: ESPHome\n    :author_twitter: @esphome_\n```\n\n----------------------------------------\n\nTITLE: Examples of Local External Components Configuration\nDESCRIPTION: Examples of using local paths for external components, including both absolute and relative path configurations, which are useful when developing components or manually controlling their origin.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/external_components.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nexternal_components:\n  - source:\n      path: /copied_components\n\n# shorthand\nexternal_components:\n  - source: my_components\n```\n\n----------------------------------------\n\nTITLE: Stopping a Valve Using Action in YAML\nDESCRIPTION: YAML configuration for an action to stop a valve with a specific ID when triggered.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/valve/index.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - valve.stop: valve_1\n```\n\n----------------------------------------\n\nTITLE: Configuring Fan Copy in ESPHome\nDESCRIPTION: YAML configuration for creating a copy of an existing fan. Requires source_id to specify the original fan.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/copy.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nfan:\n  - platform: copy\n    source_id: source_fan\n    name: \"Copy of source_fan\"\n```\n\n----------------------------------------\n\nTITLE: Template Cover State Publishing Configuration\nDESCRIPTION: Example showing how to publish states to a template cover using the cover.template.publish action.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/cover/template.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncover:\n  - platform: template\n    name: \"Template Cover\"\n    id: template_cov\n\n# in some trigger\non_...:\n  - cover.template.publish:\n      id: template_cov\n      state: OPEN\n\n  # Templated\n  - cover.template.publish:\n      id: template_cov\n      state: !lambda 'return COVER_OPEN;'\n```\n\n----------------------------------------\n\nTITLE: Configuring LD2410 Sensor in YAML\nDESCRIPTION: This configuration allows you to set up the LD2410 sensor component, specifying options such as UART settings, throttle time, and component ID for identification.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ld2410.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nld2410:\n\n```\n\n----------------------------------------\n\nTITLE: Updated micro_wake_word Configuration\nDESCRIPTION: New configuration format for micro_wake_word component version 2, supporting multiple models per device and VAD model capability.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/changelog/2024.7.0.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmicro_wake_word:\n  models:\n    - okay_nabu\n```\n\n----------------------------------------\n\nTITLE: ESPHome Automation with Toggle Switch\nDESCRIPTION: Configuration showing how to toggle a switch using a button press trigger\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/automations/actions.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nswitch:\n  - platform: gpio\n    pin: GPIOXX\n    name: \"Living Room Dehumidifier\"\n    id: dehumidifier1\n\nbinary_sensor:\n  - platform: gpio\n    pin: GPIOXX\n    name: \"Living Room Dehumidifier Toggle Button\"\n    on_press:\n      then:\n        - switch.toggle: dehumidifier1\n```\n\n----------------------------------------\n\nTITLE: Configuring OTA Updates with Password in YAML for ESPHome\nDESCRIPTION: Example of how to update the OTA configuration with a password to use the new esphome platform. This change is required after updating to ESPHome 2024.6.0.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/changelog/2024.6.0.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Old\nota:\n  password: \"xxxx\"\n\n# New\nota:\n  platform: esphome\n  password: \"xxxx\"\n```\n\n----------------------------------------\n\nTITLE: Advancing to Next Valve in YAML\nDESCRIPTION: Action to advance to the next valve numerically, with optional delay before activation.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sprinkler.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - sprinkler.next_valve: sprinkler_ctrlr\n```\n\n----------------------------------------\n\nTITLE: PMWCS3 Water Calibration Action\nDESCRIPTION: This YAML snippet shows how to set up the water calibration action for the PMWCS3 sensor. Similar to the air calibration, this procedure also lasts for 30 seconds and requires the sensor ID.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/pmwcs3.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: pmwcs3\n    id: pmwcs3_id\n    # ...\n\n# in some trigger\non_...:\n  - sensor.pmwcs3_id.water_calibration:\n      id: pmwcs3_id\n```\n\n----------------------------------------\n\nTITLE: RST Directive for SEO Configuration\nDESCRIPTION: ReStructuredText directive that configures SEO metadata for the page, including description and image.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/projects/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. seo::\n    :description: Install ready-made projects directly on your device.\n    :image: auto-fix.svg\n```\n\n----------------------------------------\n\nTITLE: Configuring SEN21231 Person Sensor in ESPHome YAML\nDESCRIPTION: Example configuration for integrating the Person Sensor with ESPHome, using the sensor platform and specifying an optional ID for reference\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/sen21231.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nsensor:\n  - platform: sen21231\n    id: person_sensor\n```\n\n----------------------------------------\n\nTITLE: RTTTL Alert Sound Playback\nDESCRIPTION: Plays a short alert sound using RTTTL format when an emulated tag is scanned.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/pn7150.rst#2025-04-21_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\non_emulated_tag_scan:\n  then:\n    - rtttl.play: \"alert:d=32,o=5,b=160:e6,p,e6,p,e6\"\n```\n\n----------------------------------------\n\nTITLE: Setup Mode Configuration for Finding Thresholds\nDESCRIPTION: Configuration example for enabling setup mode to determine appropriate touch threshold values through logging.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/esp32_touch.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry for finding threshold values\nesp32_touch:\n  setup_mode: true\n\nbinary_sensor:\n```\n\n----------------------------------------\n\nTITLE: uFire EC Sensor Reset Configuration\nDESCRIPTION: Configuration example for resetting the EC sensor calibration. Shows the basic setup for the reset action.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ufire_ec.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: ufire_ec\n    id: ufire_ec_board\n    # ...\n\n# in some trigger\non_...:\n  - sensor.ufire_ec_board.reset:\n      id: ufire_ec_board\n```\n\n----------------------------------------\n\nTITLE: Touch Update Event Handler\nDESCRIPTION: Example of handling touch update events with state checking and coordinate logging.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/touchscreen/index.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\non_update:\n    - lambda: |-\n          for (auto touch: touches)  {\n              if (touch.state <= 2) {\n                 ESP_LOGI(\"Touch points:\", \"id=%d x=%d, y=%d\", touch.id, touch.x, touch.y);\n              }\n          }\n```\n\n----------------------------------------\n\nTITLE: Restoring NVS Partition in ESP32\nDESCRIPTION: Commands to wipe and restore the NVS (Non-Volatile Storage) partition when component states are not being restored properly after reboot. Uses dd and esptool.py to write zeros to the NVS partition.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/faq.rst#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndd if=/dev/zero of=nvs_zero bs=1 count=20480\nesptool.py --chip esp32 --port /dev/ttyUSB0 write_flash 0x009000 nvs_zero\n```\n\n----------------------------------------\n\nTITLE: Defining Text Sensors for MicroNova in YAML\nDESCRIPTION: This YAML configuration defines text sensors for MicroNova, particularly monitoring the stove status. The optional `stove_state` parameter helps users keep track of the current operational state of the stove.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/micronova.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntext_sensor:\n  - platform: micronova\n    stove_state:\n      name: Stove status\n```\n\n----------------------------------------\n\nTITLE: Configuring Cover Copy in ESPHome\nDESCRIPTION: YAML configuration for creating a copy of an existing cover. Requires source_id to specify the original cover.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/copy.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncover:\n  - platform: copy\n    source_id: source_cover\n    name: \"Copy of source_cover\"\n```\n\n----------------------------------------\n\nTITLE: M5Stack ESP32 Camera Configuration in YAML\nDESCRIPTION: Partial YAML configuration for the M5Stack ESP32 camera board. Includes a warning about potential overheating issues.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/esp32_camera.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nesp32_camera:\n  external_clock:\n```\n\n----------------------------------------\n\nTITLE: Running ESPHome Docs Container\nDESCRIPTION: Command to run the ESPHome documentation container image for local development.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/contributing.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -v \"${PWD}/\":/workspaces/esphome-docs -p 8000:8000 -it ghcr.io/esphome/esphome-docs\n```\n\n----------------------------------------\n\nTITLE: Basic ESPHome Switch and Sensor Configuration\nDESCRIPTION: Configuration for a GPIO switch and binary sensor setup in ESPHome\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/automations/actions.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nswitch:\n  - platform: gpio\n    pin: GPIOXX\n    name: \"Living Room Dehumidifier\"\n\nbinary_sensor:\n  - platform: gpio\n    pin: GPIOXX\n    name: \"Living Room Dehumidifier Toggle Button\"\n```\n\n----------------------------------------\n\nTITLE: Duty Time Running Condition in ESPHome Automation\nDESCRIPTION: Shows how to check if a duty time sensor is currently running or not in an automation condition\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/duty_time.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  if:\n    condition:\n      # Same syntax for 'is_not_running'\n      sensor.duty_time.is_running: my_climate_work_time\n```\n\n----------------------------------------\n\nTITLE: ESPHome Repeat Action Example\nDESCRIPTION: Example of using the repeat action to flash a light multiple times\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/automations/actions.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - repeat:\n      count: 5\n      then:\n        - light.turn_on: some_light\n        - delay: 1s\n        - light.turn_off: some_light\n        - delay: 10s\n```\n\n----------------------------------------\n\nTITLE: Setting EZO Sensor to Sleep Mode\nDESCRIPTION: Lambda function to put an EZO sensor into low-power sleep mode.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ezo.rst#2025-04-21_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nid(ph_ezo).set_sleep();\n```\n\n----------------------------------------\n\nTITLE: Configuring Beeper On Action for Haier Climate Device\nDESCRIPTION: YAML configuration to enable beep feedback for commands sent to a Haier climate device. Only supported by hOn devices.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/climate/haier.rst#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    climate.haier.beeper_on: device_id\n```\n\n----------------------------------------\n\nTITLE: Logging Number Value in ESPHome Lambda\nDESCRIPTION: A lambda function to log the value of a number component using ESP_LOGI.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display_menu/index.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nlambda: 'ESP_LOGI(\"number\", \"value: %f\", x);'\n```\n\n----------------------------------------\n\nTITLE: Checking Valve Operation in C++ Lambda\nDESCRIPTION: C++ lambda expression to check the current operation of a valve in ESPHome.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/valve/index.rst#2025-04-21_snippet_12\n\nLANGUAGE: cpp\nCODE:\n```\nif (id(my_valve).current_operation == ValveOperation::VALVE_OPERATION_IDLE) {\n  // Valve is idle\n} else if (id(my_valve).current_operation == ValveOperation::VALVE_OPERATION_OPENING) {\n  // Valve is currently opening\n} else if (id(my_valve).current_operation == ValveOperation::VALVE_OPERATION_CLOSING) {\n  // Valve is currently closing\n}\n```\n\n----------------------------------------\n\nTITLE: Activating Python Virtual Environment for ESPHome\nDESCRIPTION: Shows how to activate the Python virtual environment for ESPHome development.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/contributing.rst#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n# Activate venv\nsource venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Accessing Text Sensor in C++ Lambda\nDESCRIPTION: Examples of how to interact with text sensors from within C++ lambda functions, including publishing state and retrieving current value.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/text_sensor/index.rst#2025-04-21_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\n// Within lambda, push a value of \"Hello World\"\nid(my_sensor).publish_state(\"Hello World\");\n\n// For example, create a custom log message when a value is received:\nstd::string val = id(my_sensor).state;\nESP_LOGI(\"main\", \"Value of my sensor: %s\", val.c_str());\n```\n\n----------------------------------------\n\nTITLE: Page Change Component Update Configuration\nDESCRIPTION: YAML configuration for handling component updates when Nextion pages change using a lambda function.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/nextion.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- platform: nextion\n  id: current_page\n  nextion_id: nextion1\n  name: current_page\n  variable_name: current_page\n  on_value:\n    lambda: |-\n      id(nextion1).update_components_by_page_prefix(\"page\"+x+\".\");\n```\n\n----------------------------------------\n\nTITLE: Getting Current Time in C++ Lambda\nDESCRIPTION: This code snippet demonstrates how to get the current local time or UTC time within a C++ lambda function in ESPHome.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/time/index.rst#2025-04-21_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nauto time = id(sntp_time).now();\n```\n\n----------------------------------------\n\nTITLE: Image Alignment in Display Lambda\nDESCRIPTION: Lambda function demonstrating different image alignment options when displaying images on a display.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/image.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ndisplay:\n  - platform: ...\n    # ...\n    lambda: |-\n      // Aligned on left by default\n      it.image(0, 0, id(my_image));\n\n      // Aligned on right edge\n      it.image(it.get_width(), 0, id(my_image), ImageAlign::TOP_RIGHT);\n```\n\n----------------------------------------\n\nTITLE: PCF8563 Write Time Action in YAML\nDESCRIPTION: Shows how to trigger a synchronization of the current system time to the RTC hardware using the pcf8563.write_time action. This action needs to be explicitly called to update the RTC.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/time/pcf8563.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  - pcf8563.write_time\n\n  # in case you need to specify the DS1307 id\n  - pcf8563.write_time:\n      id: pcf8563_time\n```\n\n----------------------------------------\n\nTITLE: Setting LED State for EZO Sensor\nDESCRIPTION: Lambda function to turn the LED on an EZO sensor on or off.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ezo.rst#2025-04-21_snippet_16\n\nLANGUAGE: cpp\nCODE:\n```\nid(ph_ezo).set_led_state(true);\n```\n\n----------------------------------------\n\nTITLE: Installing ESPHome on Linux\nDESCRIPTION: Command to install ESPHome using pip within a virtual environment on Linux.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/installing_esphome.rst#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npip3 install esphome\n```\n\n----------------------------------------\n\nTITLE: Initializing TLC59208F Chip with Single Output\nDESCRIPTION: Minimal configuration for a single TLC59208F chip with one output channel at IÂ²C address 0x10\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/output/tlc59208f.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntlc59208f:\n  address: 0x10\n  id: tlc59208f_1\n\noutput:\n  - platform: tlc59208f\n    tlc59208f_id: 'tlc59208f_1'\n    channel: 0\n```\n\n----------------------------------------\n\nTITLE: Version Number Declaration\nDESCRIPTION: A plaintext version number specification of 3.8\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/runtime.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n3.8\n```\n\n----------------------------------------\n\nTITLE: Configuring Digital Outputs with Arduino Port Expander\nDESCRIPTION: Illustrates the configuration of digital outputs using the Arduino Port Expander. This allows controlling digital outputs on the Arduino board through ESPHome.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/cookbook/arduino_port_extender.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\noutput:\n- platform: custom\n  type: binary\n  lambda: |-\n    return {ape_binary_output(ape, 3),\n            ape_binary_output(ape, 4)};\n  outputs:\n    - id: output_pin_3\n      inverted: true\n    - id: output_pin_4\n      inverted: true\n\nswitch:\n  - platform: output\n    name: Switch pin 3\n    output: output_pin_3\n\nlight:\n  - platform: binary\n    name: Switch pin 4\n    output: output_pin_4\n```\n\n----------------------------------------\n\nTITLE: Setting up Python Virtual Environment and Installing ESPHome on Mac\nDESCRIPTION: Commands to create and activate a Python virtual environment, then install ESPHome using pip on macOS.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/installing_esphome.rst#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ python3 -m venv venv\n$ source venv/bin/activate\n(venv) $ pip install esphome\n(venv) $ esphome version\n```\n\n----------------------------------------\n\nTITLE: Cover Operation Check in C++\nDESCRIPTION: Lambda example for checking current cover operation status.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/cover/index.rst#2025-04-21_snippet_12\n\nLANGUAGE: cpp\nCODE:\n```\nif (id(my_cover).current_operation == CoverOperation::COVER_OPERATION_IDLE) {\n  // Cover is idle\n} else if (id(my_cover).current_operation == CoverOperation::COVER_OPERATION_OPENING) {\n  // Cover is currently opening\n} else if (id(my_cover).current_operation == CoverOperation::COVER_OPERATION_CLOSING) {\n  // Cover is currently closing\n}\n```\n\n----------------------------------------\n\nTITLE: ESPHome Change OTA Password with Lambda\nDESCRIPTION: Changes the OTA password using a lambda function executed during boot. This approach is useful when the existing password is unknown or needs to be updated programmatically.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/ota/esphome.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n    esphome:\n      on_boot:\n        - lambda: |-\n            id(my_ota).set_auth_password(\"New password\");\n\n    ota:\n      - platform: esphome\n        id: my_ota\n        password: \"Old password\"\n```\n\n----------------------------------------\n\nTITLE: RF Code Output Examples\nDESCRIPTION: Example log output showing both decoded RC Switch protocol and raw RF codes from the receiver.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/setting_up_rmt_devices.rst#2025-04-21_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n[D][remote.rc_switch] Received RCSwitch: protocol=2 data='100010000000000010111110'\\n\\n[D][remote.raw] Received Raw: 4088, -1542, 1019, -510, 513, -1019, 510, -509, 511, -510, 1020,\\n[D][remote.raw]   -1020, 1022, -1019, 510, -509, 511, -510, 511, -509, 511, -510,\\n[D][remote.raw]   1020, -1019, 510, -511, 1020, -510, 512, -508, 510, -1020, 1022\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Request Component in ESPHome YAML\nDESCRIPTION: Basic configuration entry for adding the HTTP request component to an ESPHome device. This enables the device to make HTTP/HTTPS requests.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/http_request.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\nhttp_request:\n```\n\n----------------------------------------\n\nTITLE: Stopping DF-Player Playback in ESPHome\nDESCRIPTION: Action to completely stop audio playback on the DF-Player module.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/dfplayer.rst#2025-04-21_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  then:\n    - dfplayer.stop\n```\n\n----------------------------------------\n\nTITLE: Directory Table Configuration in RestructuredText\nDESCRIPTION: Defines an image table with components and their icons/images using RestructuredText syntax. Lists components like DAC7678, Sprinkler, Feedback Cover with their respective paths and image assets.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/changelog/2022.8.0.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. imgtable::\n    :columns: 3\n\n    DAC7678, components/output/dac7678, dac7678.svg\n    Sprinkler, components/sprinkler, sprinkler-variant.svg, dark-invert\n    Feedback Cover, components/cover/feedback, feedback_cover.svg, dark-invert\n    SMT100, components/sensor/smt100, smt100.jpg, Moisture & Temperature\n    Whynter IR Climate, components/climate/climate_ir, air-conditioner-ir.svg, dark-invert\n    Bluetooth Proxy, components/bluetooth_proxy, bluetooth.svg, dark-invert\n```\n\n----------------------------------------\n\nTITLE: Touchscreen Calibration Debug Configuration\nDESCRIPTION: Configuration example for debugging and calibrating a touchscreen using raw coordinate logging.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/touchscreen/index.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Touchscreen\ntouchscreen:\n  platform: xpt2046\n  id: my_touchscreen\n  cs_pin: GPIOXX\n  on_touch:\n    - lambda: |-\n          ESP_LOGI(\"cal\", \"x=%d, y=%d, x_raw=%d, y_raw=%0d\",\n              touch.x,\n              touch.y,\n              touch.x_raw,\n              touch.y_raw\n              );\n```\n\n----------------------------------------\n\nTITLE: Displaying Images with Captions in RST\nDESCRIPTION: Shows how to use the figure directive to display an image with an optional caption in reStructuredText.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/contributing.rst#2025-04-21_snippet_6\n\nLANGUAGE: rst\nCODE:\n```\n.. figure:: images/dashboard_states.png\n    :align: center\n    :width: 40.0%\n\n    Optional figure caption.\n```\n\n----------------------------------------\n\nTITLE: Setting Up PCA9685 Output Channel in ESPHome\nDESCRIPTION: In this YAML example, a PCA9685 output channel is configured with a specified frequency and channel ID. The 'id' is required and identifies the output component, whereas the 'channel' indicates the specific PWM channel, ranging from 0 to 15. When multiple PCA9685s are present, 'pca9685_id' can be used to specify the appropriate hub.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/output/pca9685.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration entry\npca9685:\n  - frequency: 500\n\n# Individual outputs\noutput:\n  - platform: pca9685\n    id: 'pca9685_output1'\n    channel: 0\n```\n\n----------------------------------------\n\nTITLE: Configuring OTA on End Automation (YAML)\nDESCRIPTION: This code snippet specifies an action to log a message after a successful OTA update. It is triggered right before the device reboots, allowing for additional actions to be performed post-update.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/ota/index.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nota:\n  - platform: ...\n    on_end:\n      then:\n        - logger.log: \"OTA end\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Home Assistant Sensor Attributes in YAML\nDESCRIPTION: Example configuration for reading Home Assistant entity attributes into an ESPHome sensor. This allows accessing data like the brightness of a light or current temperature of a climate device.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/changelog/v1.19.0.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsensor:\n  - platform: homeassistant\n    id: current_temperature\n    entity_id: climate.living_room\n    attribute: current_temperature\n```\n\n----------------------------------------\n\nTITLE: Initializing I2C for CCS811 Communication in ESPHome\nDESCRIPTION: This snippet demonstrates the basic I2C configuration required for the CCS811 sensor to communicate with the ESPHome device. The SDA and SCL pins need to be defined for the I2C bus.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/sensor/ccs811.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"i2c:\\n  sda: D0\\n  scl: D1\"\n```\n\n----------------------------------------\n\nTITLE: Implementing on_state Trigger for Alarm Panel in YAML\nDESCRIPTION: YAML configuration for adding an on_state trigger to an Alarm Control Panel, which activates when the alarm changes state.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/alarm_control_panel/index.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nalarm_control_panel:\n  # ...\n  on_state:\n    then:\n      - logger.log: \"Alarm Panel State Changed!\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a Numeric Keypad with LVGL and Key Collector in ESPHome\nDESCRIPTION: This snippet creates a numeric keypad using LVGL buttonmatrix widget integrated with a key collector to handle input sequences. It includes configuration for a LED that changes color based on correct code entry and displays feedback in a label.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/cookbook/lvgl.rst#2025-04-21_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nlvgl:\n  ...\n  pages:\n    - id: keypad_page\n      widgets:\n        - led:\n            id: lvgl_led\n            x: 30\n            y: 47\n            color: 0xFF0000\n            brightness: 70%\n        - obj:\n            width: 140\n            height: 25\n            align_to:\n              id: lvgl_led\n              align: OUT_RIGHT_MID\n              x: 17\n            border_width: 1\n            border_color: 0\n            border_opa: 50%\n            pad_all: 0\n            bg_opa: 80%\n            bg_color: 0xFFFFFF\n            shadow_color: 0\n            shadow_opa: 50%\n            shadow_width: 10\n            shadow_spread: 3\n            radius: 5\n            widgets:\n              - label:\n                  id: lvgl_label\n                  align: CENTER\n                  text: \"Enter code and \\uF00C\"\n                  text_align: CENTER\n        - buttonmatrix:\n            id: lvgl_keypad\n            x: 20\n            y: 85\n            width: 200\n            height: 190\n            items:\n              pressed:\n                bg_color: 0xFFFF00\n            rows:\n              - buttons:\n                  - text: 1\n                    control:\n                      no_repeat: true\n                  - text: 2\n                    control:\n                      no_repeat: true\n                  - text: 3\n                    control:\n                      no_repeat: true\n              - buttons:\n                  - text: 4\n                    control:\n                      no_repeat: true\n                  - text: 5\n                    control:\n                      no_repeat: true\n                  - text: 6\n                    control:\n                      no_repeat: true\n              - buttons:\n                  - text: 7\n                    control:\n                      no_repeat: true\n                  - text: 8\n                    control:\n                      no_repeat: true\n                  - text: 9\n                    control:\n                      no_repeat: true\n              - buttons:\n                  - text: \"\\uF55A\"\n                    key_code: \"*\"\n                    control:\n                      no_repeat: true\n                  - text: 0\n                    control:\n                      no_repeat: true\n                  - text: \"\\uF00C\"\n                    key_code: \"#\"\n                    control:\n                      no_repeat: true\n\nkey_collector:\n  - source_id: lvgl_keypad\n    min_length: 4\n    max_length: 4\n    end_keys: \"#\"\n    end_key_required: true\n    back_keys: \"*\"\n    allowed_keys: \"0123456789*#\"\n    timeout: 5s\n    on_progress:\n      - if:\n          condition:\n            lambda: return (0 != x.compare(std::string{\"\"}));\n          then:\n            - lvgl.label.update:\n                id: lvgl_label\n                text: !lambda 'return x.c_str();'\n          else:\n            - lvgl.label.update:\n                id: lvgl_label\n                text: \"Enter code and \\uF00C\"\n    on_result:\n      - if:\n          condition:\n            lambda: return (0 == x.compare(std::string{\"1234\"}));\n          then:\n            - lvgl.led.update:\n                id: lvgl_led\n                color: 0x00FF00\n          else:\n            - lvgl.led.update:\n                id: lvgl_led\n                color: 0xFF0000\n```\n\n----------------------------------------\n\nTITLE: Waveshare ESP32-S3 Touch 4.3 Display Configuration\nDESCRIPTION: Complete configuration for Waveshare ESP32-S3 Touch 4.3\" display including timing parameters and specific pin assignments.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/display/rpi_dpi_rgb.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndisplay:\n  - platform: rpi_dpi_rgb\n    color_order: RGB\n    pclk_frequency: 16MHz\n    dimensions:\n      width: 800\n      height: 480\n    de_pin:\n      number: 5\n    hsync_pin:\n      number: 46\n      ignore_strapping_warning: true\n    vsync_pin:\n      number: 3\n      ignore_strapping_warning: true\n    pclk_pin: 7\n    hsync_back_porch: 30\n    hsync_front_porch: 210\n    hsync_pulse_width: 30\n    vsync_back_porch: 4\n    vsync_front_porch: 4\n    vsync_pulse_width: 4\n    data_pins:\n      red:\n        - 1         #r3\n        - 2         #r4\n        - 42        #r5\n        - 41        #r6\n        - 40        #r7\n      blue:\n        - 14        #b3\n        - 38        #b4\n        - 18        #b5\n        - 17        #b6\n        - 10        #b7\n      green:\n        - 39        #g2\n        - 0         #g3\n        - 45        #g4\n        - 48        #g5\n        - 47        #g6\n        - 21        #g7\n```\n\n----------------------------------------\n\nTITLE: Configuring Time Has Time Condition in YAML\nDESCRIPTION: This snippet demonstrates how to use the time.has_time condition in an automation to check if time has been set and is valid.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/time/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\non_...:\n  if:\n    condition:\n      time.has_time:\n    then:\n      - logger.log: Time has been set and is valid!\n```\n\n----------------------------------------\n\nTITLE: Remote Image Configuration\nDESCRIPTION: Configuration for downloading and using a remote image with RGB565 color format from a URL.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/image.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n  - file: https://esphome.io/_images/logo.png\n    type: rgb565\n    id: esphome_logo\n    resize: 200x162\n```\n\n----------------------------------------\n\nTITLE: Importing Entity State Attribute as Binary Sensor in ESPHome YAML\nDESCRIPTION: This YAML configuration shows how to import a specific attribute from a Home Assistant entity as a binary sensor in ESPHome. It requires Home Assistant 2021.6 or newer.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/binary_sensor/homeassistant.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nbinary_sensor:\n  - platform: homeassistant\n    id: muted\n    entity_id: media_player.mega_speakers\n    attribute: is_volume_muted\n```\n\n----------------------------------------\n\nTITLE: RST Formatting for GitHub Contributors List\nDESCRIPTION: A list of contributors formatted in reStructuredText (RST) syntax with inline links to GitHub profiles\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/guides/supporters.rst#2025-04-21_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n- `hellotomtom (@hellotomtom) <https://github.com/hellotomtom>`__\n- `Jimmy Hedman (@HeMan) <https://github.com/HeMan>`__\n```\n\n----------------------------------------\n\nTITLE: Configuring Seeed MR24HPC1 Switch - YAML\nDESCRIPTION: This YAML snippet sets up a switch for the seeed_mr24hpc1 that enables or disables the underlying open function. This feature is useful for observing additional environmental data.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/seeed_mr24hpc1.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n\"    switch:\\n      - platform: seeed_mr24hpc1\\n        underlying_open_function:\\n          name: Underlying Open Function Info Output Switch\"\n```\n\n----------------------------------------\n\nTITLE: Accessing IP Addresses in IPv6 Support\nDESCRIPTION: Code has been updated to support IPv6 functionality. The single IP address getter methods have been renamed to return a list of all IP addresses. This affects external components and network-related code.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/changelog/2024.3.0.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Old method\nnetwork::get_ip_address()\nwifi::global_wifi_component->get_ip_address()\nethernet::global_eth_component->get_ip_address()\n\n# New method\n::get_ip_addresses()  # Returns list of all IP addresses\n```\n\n----------------------------------------\n\nTITLE: Generating MD5 Hash on Windows PowerShell\nDESCRIPTION: This PowerShell command generates the MD5 hash of a firmware binary file on Windows and saves it to a file in ASCII encoding. The resulting file can then be used for MD5 checksum verification during the OTA update process.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/components/ota/http_request.rst#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n(Get-FileHash -Path firmware.ota.bin -Algorithm md5).Hash.ToLower() | Out-File -FilePath firmware.md5 -Encoding ASCII\n\n```\n\n----------------------------------------\n\nTITLE: Legacy micro_wake_word Configuration\nDESCRIPTION: Previous configuration format for the micro_wake_word component before version 2 update.\nSOURCE: https://github.com/esphome/esphome-docs/blob/current/changelog/2024.7.0.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmicro_wake_word:\n  model: okay_nabu\n```"
  }
]