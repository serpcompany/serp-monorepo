[
  {
    "owner": "apache",
    "repo": "age",
    "content": "TITLE: Connecting to PostgreSQL and Setting Up AGE\nDESCRIPTION: This snippet demonstrates how to connect to PostgreSQL and set up the AGE extension. It uses the psycopg and age libraries to establish a connection and create a graph.\nSOURCE: https://github.com/apache/age/blob/master/drivers/python/samples/apache-age-basic.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport psycopg \nimport age\n\nGRAPH_NAME = \"test_graph\"\nag = age.connect(host=\"172.17.0.2\", port=\"5432\", dbname=\"postgre\", user=\"postgres\", password=\"agens\", graph=GRAPH_NAME)\nconn = ag.connection\n```\n\n----------------------------------------\n\nTITLE: Connecting to PostgreSQL with AGE Extension\nDESCRIPTION: Shows different methods to connect to a PostgreSQL database with AGE extension, including specifying a graph name and using connection parameters or DSN.\nSOURCE: https://github.com/apache/age/blob/master/drivers/python/samples/apache-age-note.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nag = age.connect(graph=\"(graph name}\", host=\"{host}\", port=\"{port}\", dbname=\"{dbname}\", user=\"{db username}\", password=\"{password}\")\n\n# or \nDSN = \"host={host} port={port} dbname={dbname} user={db username} password={password}\"\nag = age.connect(graph=\"(graph name}\", dsn=DSN)\n\n# or Without Graph Name : you can make a new graph later.\n\nag = age.connect(host=\"{host}\", port=\"{port}\", dbname=\"{dbname}\", user=\"{db username}\", password=\"{password}\")\n\n# And set graph - if you don't have one yet, setGraph make that.)\nag = age.setGraph(\"{graph name}\")\n```\n\n----------------------------------------\n\nTITLE: Creating Vertices and Edges with Cypher Queries\nDESCRIPTION: This snippet shows how to execute Cypher queries to create vertices (Person nodes) and edges (workWith relationships) in the graph. It also demonstrates error handling and transaction management.\nSOURCE: https://github.com/apache/age/blob/master/drivers/python/samples/apache-age-basic.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwith conn.cursor() as cursor:\n    try :\n        cursor.execute(\"\"\"SELECT * from cypher(%s, $$ CREATE (n:Person {name: 'Joe', title: 'Developer'}) $$) as (v agtype); \"\"\", (GRAPH_NAME,) )\n        cursor.execute(\"\"\"SELECT * from cypher(%s, $$ CREATE (n:Person {name: 'Smith', title: 'Developer'}) $$) as (v agtype); \"\"\", (GRAPH_NAME,))\n        cursor.execute(\"\"\"SELECT * from cypher(%s, $$ \n            CREATE (n:Person {name: 'Tom', title: 'Manager'}) \n            RETURN n\n            $$) as (v agtype); \"\"\", (GRAPH_NAME,))\n        for row in cursor:\n            print(\"CREATED::\", row[0])\n        \n        \n        cursor.execute(\"\"\"SELECT * from cypher(%s, $$ \n            MATCH (a:Person {name: 'Joe'}), (b:Person {name: 'Smith'}) CREATE (a)-[r:workWith {weight: 5}]->(b)\n            $$) as (v agtype); \"\"\", (GRAPH_NAME,))\n        \n        cursor.execute(\"\"\"SELECT * from cypher(%s, $$ \n            MATCH (a:Person {name: 'Smith'}), (b:Person {name: 'Tom'}) CREATE (a)-[r:workWith {weight: 3}]->(b)\n            $$) as (v agtype); \"\"\", (GRAPH_NAME,))\n        \n        # When data inserted or updated, You must commit.\n        conn.commit()\n    except Exception as ex:\n        print(type(ex), ex)\n        # if exception occurs, you must rollback all transaction. \n        conn.rollback()\n```\n\n----------------------------------------\n\nTITLE: Setting up Apache AGE Connection with PostgreSQL\nDESCRIPTION: Establishes a connection to PostgreSQL database and configures Apache AGE with a specific graph name. This initialization is required before performing any graph operations with AGE.\nSOURCE: https://github.com/apache/age/blob/master/drivers/python/samples/networkx.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport psycopg\nfrom age.networkx import *\nfrom age import *\nimport networkx as nx\n\nconn = psycopg.connect(\n    host=\"localhost\",\n    port=\"5432\",\n    dbname=\"postgres\",\n    user=\"moontasir\",\n    password=\"254826\")\ngraphName = 'bitnine_global_inic'\n\n\nage.setUpAge(conn, graphName)\n```\n\n----------------------------------------\n\nTITLE: Establishing AGE Connection with DSN\nDESCRIPTION: Demonstrates how to establish a connection to AGE using a DSN (Data Source Name) and specifying a graph name.\nSOURCE: https://github.com/apache/age/blob/master/drivers/python/samples/apache-age-note.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport age\nfrom age.gen.AgtypeParser import *\n\nGRAPH_NAME = \"test_graph\"\nDSN = \"host=172.17.0.2 port=5432 dbname=postgres user=postgres password=agens\"\n\nag = age.connect(graph=GRAPH_NAME, dsn=DSN)\n```\n\n----------------------------------------\n\nTITLE: Querying Apache AGE Graph Database in Java\nDESCRIPTION: Java code demonstrating how to connect to a PostgreSQL database with AGE extension, execute a Cypher query, and process the results as Agtype objects. It includes setting up the connection, configuring AGE, and iterating through the query results.\nSOURCE: https://github.com/apache/age/blob/master/drivers/jdbc/README.md#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport org.apache.age.jdbc.base.Agtype;\nimport org.postgresql.jdbc.PgConnection;\n\nimport java.sql.*;\n\npublic class Sample {\n    static final String DB_URL = \"jdbc:postgresql://localhost:5432/demo\";\n    static final String USER = \"postgres\";\n    static final String PASS = \"pass\";\n\n    public static void main(String[] args) {\n\n        // Open a connection\n        try {\n\n            PgConnection connection = DriverManager.getConnection(DB_URL, USER, PASS).unwrap(PgConnection.class);\n            connection.addDataType(\"agtype\", Agtype.class);\n\n            // configure AGE\n            Statement stmt = connection.createStatement();\n            stmt.execute(\"CREATE EXTENSION IF NOT EXISTS age;\");\n            stmt.execute(\"LOAD 'age'\");\n            stmt.execute(\"SET search_path = ag_catalog, \\\"$user\\\", public;\");\n\n            // Run cypher\n            ResultSet rs = stmt.executeQuery(\"SELECT * from cypher('demo_graph', $$ MATCH (n) RETURN n $$) as (n agtype);\");\n\n            while (rs.next()) {\n\n                // Returning Result as Agtype\n                Agtype returnedAgtype = rs.getObject(1, Agtype.class);\n\n                String nodeLabel = returnedAgtype.getMap().getObject(\"label\").toString();\n                String nodeProp =  returnedAgtype.getMap().getObject(\"properties\").toString();\n\n                System.out.println(\"Vertex : \" + nodeLabel + \", \\tProps : \" + nodeProp);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Apache AGE Connection with Non-Superuser\nDESCRIPTION: Python code example showing how to connect to Apache AGE as a non-superuser, using the load_from_plugins parameter to load the AGE extension from the PostgreSQL plugins directory.\nSOURCE: https://github.com/apache/age/blob/master/drivers/python/README.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nag = age.connect(host='localhost', port=5432, user='dbuser', password='strong_password', \n                   dbname=postgres, load_from_plugins=True, graph='graph_name)\n```\n\n----------------------------------------\n\nTITLE: Creating and Querying Additional Vertices and Edges\nDESCRIPTION: This snippet demonstrates creating additional vertices and edges, including handling of floating-point values. It also shows how to query and print the properties of the newly created relationships.\nSOURCE: https://github.com/apache/age/blob/master/drivers/python/samples/apache-age-basic.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nwith conn.cursor() as cursor:\n    try :\n        cursor.execute(\"\"\"SELECT * from cypher(%s, $$ \n            CREATE (n:Person {name: 'Jack', title: 'Developer', score:-6.45161290322581e+46}) \n            $$) as (v agtype); \"\"\", (GRAPH_NAME,) )\n        cursor.execute(\"\"\"SELECT * from cypher(%s, $$ \n            CREATE (n:Person {name: 'John', title: 'Developer'}) \n            $$) as (v agtype); \"\"\", (GRAPH_NAME,))\n\n        cursor.execute(\"\"\"SELECT * from cypher(%s, $$ \n            MATCH (a:Person {name: 'Jack'}), (b:Person {name: 'John'}) \n            CREATE (a)-[r:workWith {weight: 2}]->(b)\n            $$) as (v agtype); \"\"\", (GRAPH_NAME,))\n        \n        # When data inserted or updated, You must commit \n        conn.commit()\n    except Exception as ex:\n        print(ex)\n        conn.rollback()\n\nwith conn.cursor() as cursor:\n    try :\n        cursor.execute(\"\"\"SELECT * from cypher(%s, $$ \n            MATCH p=(a )-[b]->(c) RETURN a , b, c \n            $$) as (ta agtype, tb agtype, tc agtype); \"\"\", (GRAPH_NAME,))\n        \n        for row in cursor:\n            print(row[0][\"name\"], row[1].properties, row[2][\"name\"])\n            \n    except Exception as ex:\n        print(ex)\n        conn.rollback()\n```\n\n----------------------------------------\n\nTITLE: Initializing Apache AGE Connection in TypeScript\nDESCRIPTION: Demonstrates how to create a PostgreSQL client connection, register Apache AGE types, and create a new graph. This setup is required before executing any graph operations with Apache AGE.\nSOURCE: https://github.com/apache/age/blob/master/drivers/nodejs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {types, Client, QueryResultRow} from \"pg\";\nimport {setAGETypes} from \"../src\";\n\nconst config = {\n    user: 'postgres',\n    host: '127.0.0.1',\n    database: 'postgres',\n    password: 'postgres',\n    port: 25432,\n}\n\nconst client = new Client(config);\nawait client.connect();\nawait setAGETypes(client, types);\n\nawait client.query(`SELECT create_graph('age-first-time');`);\n```\n\n----------------------------------------\n\nTITLE: Converting All Apache AGE Graph Data to NetworkX\nDESCRIPTION: Retrieves the entire graph from Apache AGE and converts it to a NetworkX graph object. This provides a complete in-memory representation of the database graph for analysis with NetworkX algorithms.\nSOURCE: https://github.com/apache/age/blob/master/drivers/python/samples/networkx.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nG = age_to_networkx(conn, graphName)\nprint(G)\n```\n\n----------------------------------------\n\nTITLE: Creating and Modifying Vertices in AGE\nDESCRIPTION: Shows how to create vertices, set properties, and remove properties using Cypher queries in AGE. Demonstrates both single and multiple result handling.\nSOURCE: https://github.com/apache/age/blob/master/drivers/python/samples/apache-age-note.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Create Vertices\nag.execCypher(\"CREATE (n:Person {name: 'Joe'})\")\nag.execCypher(\"CREATE (n:Person {name: 'Smith'})\")\n    \n# Execution with one agtype result\ncursor = ag.execCypher(\"CREATE (n:Person {name: %s}) RETURN n\", params=('Jack',))\nfor row in cursor:\n    print(\"CREATED: \", row[0]) \n    \ncursor = ag.execCypher(\"CREATE (n:Person {name: %s, title: 'Developer'}) RETURN id(n)\", params=('Andy',))\nfor row in cursor:\n    print(\"CREATED: \", row[0])\n    \n\n# Execution with one result as SQL TYPE \ncursor = ag.execCypher(\"MATCH (n:Person {name: %s}) SET n.title=%s RETURN n.title\", cols=[\"a VARCHAR\"], params=('Smith','Manager',))\nfor row in cursor:\n    print(\"SET: \", row[0])\n\n\n# Execution with one result as SQL TYPE \ncursor = ag.execCypher(\"MATCH (n:Person {name: %s}) REMOVE n.title RETURN id(n)\", cols=[\"a BIGINT\"], params=('Smith',))\nfor row in cursor:\n    print(\"REMOVE Prop: \", row[0])\n\n# You must commit explicitly\nag.commit()\n```\n\n----------------------------------------\n\nTITLE: Querying Scalar Values and Properties in Apache AGE using Python\nDESCRIPTION: This snippet demonstrates how to query scalar values, properties, and specific property values from nodes in Apache AGE using Cypher queries.\nSOURCE: https://github.com/apache/age/blob/master/drivers/python/samples/apache-age-note.ipynb#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# Query scalar value\nprint(\"-- Query scalar value --------------------\")\nfor row in ag.execCypher(\"MATCH (n:Person) RETURN id(n)\"):\n    print(row[0])\n    \n# Query properties \nprint(\"-- Query properties --------------------\")\n\nfor row in ag.execCypher(\"MATCH (n:Person) RETURN properties(n)\"):\n    print(row[0])\n    \n# Query properties value\nprint(\"-- Query property value --------------------\")\nfor row in ag.execCypher(\"MATCH (n:Person {name: 'Andy'}) RETURN n.title\"):\n    print(row[0])\n```\n\n----------------------------------------\n\nTITLE: Querying Vertices in AGE\nDESCRIPTION: Demonstrates how to query vertices in AGE using Cypher, including single and multi-column results. Shows how to access vertex properties and attributes.\nSOURCE: https://github.com/apache/age/blob/master/drivers/python/samples/apache-age-note.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Query Vertices with parsed row cursor.\nprint(\"-- Query Vertices  --------------------\")\ncursor = ag.execCypher(\"MATCH (n:Person) RETURN n\")\nfor row in cursor:\n    vertex = row[0]\n    print(vertex.id, vertex.label, vertex[\"name\"])\n    print(\"-->\", vertex)\n\n# Query Vertices with with multi column\nprint(\"-- Query Vertices with with multi columns. --------------------\")\ncursor = ag.execCypher(\"MATCH (n:Person) RETURN label(n), n.name\", cols=['label VARCHAR', 'name'])\nfor row in cursor:\n    label = row[0]\n    name = row[1]\n    print(label, name) \n```\n\n----------------------------------------\n\nTITLE: Accessing Vertex Properties in Go for Apache AGE\nDESCRIPTION: This snippet demonstrates how to access properties of a Vertex type in Go when using the Apache AGE driver. It shows methods for retrieving the vertex ID, label, and accessing specific properties.\nSOURCE: https://github.com/apache/age/blob/master/drivers/golang/TYPES.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nvertex.Id() int64\nvertex.Label() string\nvertex.Prop(string) interface{}\n```\n\n----------------------------------------\n\nTITLE: Creating Relationships in AGE\nDESCRIPTION: Shows how to create relationships between vertices in AGE using Cypher queries. Demonstrates both auto-commit and explicit commit approaches.\nSOURCE: https://github.com/apache/age/blob/master/drivers/python/samples/apache-age-note.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Create Edges\nag.execCypher(\"MATCH (a:Person), (b:Person) WHERE a.name = 'Joe' AND b.name = 'Smith' CREATE (a)-[r:workWith {weight: 3}]->(b)\")\nag.execCypher(\"MATCH (a:Person), (b:Person) WHERE  a.name = 'Andy' AND b.name = 'Tom' CREATE (a)-[r:workWith {weight: 1}]->(b)\")\nag.execCypher(\"MATCH (a:Person {name: 'Jack'}), (b:Person {name: 'Andy'}) CREATE (a)-[r:workWith {weight: 5}]->(b)\")\n\nag.commit()\n\n# With Params and Return\ncursor = ag.execCypher(\"\"\"MATCH (a:Person), (b:Person) \n        WHERE  a.name = %s AND b.name = %s \n        CREATE p=((a)-[r:workWith]->(b)) \n        RETURN p\"\"\",  \n        params=('Andy', 'Smith',))\n\nfor row in cursor:\n    print(row[0])\n\nag.commit()\n\n# With many columns Return\ncursor = ag.execCypher(\"\"\"MATCH (a:Person {name: 'Joe'}), (b:Person {name: 'Jack'}) \n        CREATE (a)-[r:workWith {weight: 5}]->(b) \n        RETURN a, r, b \"\"\", cols=['a','r', 'b'])\n\nfor row in cursor:\n    print(\"(a)\", row[0], \": (r)\", row[1], \": (b)\", row[2])\n    \n\nag.commit()\n```\n\n----------------------------------------\n\nTITLE: Manipulating Edge Data in Go for Apache AGE\nDESCRIPTION: This code snippet illustrates how to work with Edge types in Go when using the Apache AGE driver. It provides methods for accessing the edge ID, label, start and end vertex IDs, and specific properties.\nSOURCE: https://github.com/apache/age/blob/master/drivers/golang/TYPES.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nedge.Id() int64\nedge.Label() string\nedge.StartId() int64\nedge.EndId() int64\nedge.Prop(string) interface{}\n```\n\n----------------------------------------\n\nTITLE: Querying Vertices and Paths in AGE\nDESCRIPTION: This snippet demonstrates how to query vertices and paths in the graph using Cypher. It shows how to iterate over the results and access properties of vertices and edges.\nSOURCE: https://github.com/apache/age/blob/master/drivers/python/samples/apache-age-basic.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwith conn.cursor() as cursor:\n    try:\n        print(\"------- [Select Vertices] --------\")\n        cursor.execute(\"\"\"SELECT * from cypher(%s, $$ MATCH (n) RETURN n $$) as (v agtype); \"\"\", (GRAPH_NAME,))\n        for row in cursor:\n            vertex = row[0]\n            print(vertex.id, vertex.label, vertex[\"name\"], vertex[\"title\"])\n            print(\"-->\", vertex)\n            \n        print(type(cursor))\n        print(\"------- [Select Paths] --------\")\n        cursor.execute(\"\"\"SELECT * from cypher(%s, $$ MATCH p=()-[]->() RETURN p LIMIT 10 $$) as (v agtype); \"\"\", (GRAPH_NAME,))\n        for row in cursor:\n            path = row[0]\n            v1 = path[0]\n            e1 = path[1]\n            v2 = path[2]\n            print(v1.gtype , v1[\"name\"], e1.gtype , e1.label, e1[\"weight\"], v2.gtype , v2[\"name\"])\n            print(\"-->\", path)\n    except Exception as ex:\n        print(type(ex), ex)\n        # if exception occurs, you must rollback even though just retrieving.\n        conn.rollback()\n```\n\n----------------------------------------\n\nTITLE: Creating a Random Directed Graph with NetworkX\nDESCRIPTION: Generates a random directed graph using NetworkX with custom node labels and properties. The script creates nodes with two different labels ('Number' and 'Integer') and connects them with random edges labeled as 'Connection'.\nSOURCE: https://github.com/apache/age/blob/master/drivers/python/samples/networkx.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport random\nnum_nodes = 5\nnum_edges = 10\nG = nx.DiGraph()\ntry:\n    for i in range(num_nodes//2):\n        G.add_node(i, label='Number',properties={'name' : i})\n    for i in range(num_nodes//2,num_nodes):\n        G.add_node(i, label='Integer',properties={'age' : i*2} )\n    for i in range(num_edges):\n        source = random.randint(0, num_nodes-1)\n        target = random.randint(0, num_nodes-1)\n        G.add_edge(source, target, label='Connection' ,properties={'st' : source , 'ed':target})\nexcept Exception as e:\n    raise e\nprint(G)\n```\n\n----------------------------------------\n\nTITLE: Querying Relationships in AGE\nDESCRIPTION: This snippet shows how to query relationships between nodes in the graph. It demonstrates how to return specific properties of the vertices and edges in the relationships.\nSOURCE: https://github.com/apache/age/blob/master/drivers/python/samples/apache-age-basic.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nwith conn.cursor() as cursor:\n    try:\n        cursor.execute(\"\"\"SELECT * from cypher(%s, $$ \n            MATCH p=(a)-[b]->(c) RETURN a.name, label(b), c.name \n            $$) as (a agtype, b agtype, c agtype); \"\"\", (GRAPH_NAME,))\n        for row in cursor:\n            print(row[0], row[1], row[2])\n            print(\"-->\", row)\n    except Exception as ex:\n        print(ex)\n        conn.rollback()\n```\n\n----------------------------------------\n\nTITLE: Traversing Path Objects in Go for Apache AGE\nDESCRIPTION: This snippet shows how to work with Path objects in Go when using the Apache AGE driver. It includes methods for getting the path size, retrieving entities (vertices or edges) at specific indices, and type-specific retrieval of vertices and edges.\nSOURCE: https://github.com/apache/age/blob/master/drivers/golang/TYPES.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npath.Size() int // quantity of vertices and edges in this path\npath.Get(index int) Entity // *Vertex or *Edge\npath.GetAsVertex(index int) *Vertex\npath.GetAsEdge(index int) *Edge\n```\n\n----------------------------------------\n\nTITLE: Querying Relationships in AGE\nDESCRIPTION: Demonstrates how to query relationships in AGE, including path queries and accessing edge properties. Shows both single and multi-column result handling.\nSOURCE: https://github.com/apache/age/blob/master/drivers/python/samples/apache-age-note.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ncursor = ag.execCypher(\"MATCH p=()-[:workWith]-() RETURN p\")\nfor row in cursor:\n    path = row[0]\n    print(\"START:\", path[0])\n    print(\"EDGE:\", path[1])\n    print(\"END:\", path[2])  \n\nprint(\"-- [Query path with multi columns --------\")\ncursor = ag.execCypher(\"MATCH p=(a)-[b]-(c) WHERE b.weight>%s RETURN a,label(b), b.weight, c\", cols=[\"a\",\"bl\",\"bw\", \"c\"], params=(2,))\nfor row in cursor:\n    start = row[0]\n    edgel = row[1]\n    edgew = row[2]\n    end = row[3]\n    print(start[\"name\"] , edgel, edgew, end[\"name\"]) \n```\n\n----------------------------------------\n\nTITLE: Using Big Number Types in Go for Apache AGE Numeric Values\nDESCRIPTION: This code snippet shows how Apache AGE's numeric type is mapped to Go's big number types. It uses *big.Int for integer values and *big.Float for floating-point values, allowing for arbitrary precision arithmetic.\nSOURCE: https://github.com/apache/age/blob/master/drivers/golang/TYPES.md#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n*big.Int\n*big.Float\n```\n\n----------------------------------------\n\nTITLE: Querying Paths and Accessing Path Elements\nDESCRIPTION: This snippet shows how to query paths in the graph and access individual elements of the path, including vertex and edge properties.\nSOURCE: https://github.com/apache/age/blob/master/drivers/python/samples/apache-age-basic.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nwith conn.cursor() as cursor:\n    try:\n        cursor.execute(\"\"\"SELECT * from cypher(%s, $$ \n            MATCH p=(a)-[b]->(c) RETURN p  \n            $$) as (v agtype); \"\"\", (GRAPH_NAME,))\n        for row in cursor:\n            path = row[0]\n            print(path[0][\"name\"], path[1].id, path[1].properties, path[2][\"name\"])\n    except Exception as ex:\n        print(ex)\n        conn.rollback()\n```\n\n----------------------------------------\n\nTITLE: Importing AGE Python Module\nDESCRIPTION: Demonstrates how to import the AGE Python module, which is required for all AGE operations.\nSOURCE: https://github.com/apache/age/blob/master/drivers/python/samples/apache-age-note.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport age\n```\n\n----------------------------------------\n\nTITLE: Converting NetworkX Graph to Apache AGE\nDESCRIPTION: Transfers a NetworkX graph to the Apache AGE graph database. This function persists the in-memory graph structure into the AGE database with the specified graph name.\nSOURCE: https://github.com/apache/age/blob/master/drivers/python/samples/networkx.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nnetworkx_to_age(conn, G, graphName)\n```\n\n----------------------------------------\n\nTITLE: Installing Apache AGE Extension in PostgreSQL\nDESCRIPTION: SQL commands to create, load, and configure the AGE extension in PostgreSQL. Sets up the required extension and configures the search path to access AGE functionality.\nSOURCE: https://github.com/apache/age/blob/master/drivers/golang/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE EXTENSION age;\nLOAD 'age';\nSET search_path = ag_catalog, \"$user\", public;\n```\n\n----------------------------------------\n\nTITLE: Converting NetworkX Graph to Apache AGE Example\nDESCRIPTION: Python code example showing how to convert a NetworkX directed graph to an Apache AGE graph, creating nodes and edges in the AGE database.\nSOURCE: https://github.com/apache/age/blob/master/drivers/python/README.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Create a Networkx DiGraph\nG = nx.DiGraph()\nG.add_node(1)\nG.add_node(2)\nG.add_edge(1, 2)\n\n# Convert and insert the graph into the Age database\ngraphName = \"sample_graph\"\nnetworkx_to_age(connection, G, graphName)\n```\n\n----------------------------------------\n\nTITLE: Creating Vertices in AGE with Cypher\nDESCRIPTION: SQL commands to create two labeled vertices with properties using the Cypher query language in Apache AGE.\nSOURCE: https://github.com/apache/age/blob/master/README.md#2025-04-21_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * \nFROM cypher('graph_name', $$\n    CREATE (:label {property:\"Node A\"})\n$$) as (v agtype);\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * \nFROM cypher('graph_name', $$\n    CREATE (:label {property:\"Node B\"})\n$$) as (v agtype);\n```\n\n----------------------------------------\n\nTITLE: Converting Apache AGE Graph to NetworkX Example\nDESCRIPTION: Python code example demonstrating how to convert an Apache AGE graph database into a NetworkX directed graph for further graph analysis.\nSOURCE: https://github.com/apache/age/blob/master/drivers/python/README.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Call the function to convert data into a Networkx graph\ngraph = age_to_networkx(connection, graphName=\"MyGraph\" )\n```\n\n----------------------------------------\n\nTITLE: Creating a Graph in AGE\nDESCRIPTION: SQL command to create a new graph in Apache AGE using the create_graph function.\nSOURCE: https://github.com/apache/age/blob/master/README.md#2025-04-21_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nSELECT create_graph('graph_name');\n```\n\n----------------------------------------\n\nTITLE: Adding Subgraphs from AGE to NetworkX using Cypher Queries\nDESCRIPTION: Demonstrates how to selectively retrieve portions of an AGE graph using Cypher queries and build a NetworkX graph incrementally. The example shows querying for specific node labels and relationships to construct a filtered graph representation.\nSOURCE: https://github.com/apache/age/blob/master/drivers/python/samples/networkx.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nG = age_to_networkx(conn, graphName, \n                    query=\"\"\"\nSELECT * from cypher('%s', $$\n        MATCH (V:Integer)\n        RETURN V\n$$) as (V agtype);\n\"\"\" % graphName)\n\nG = age_to_networkx(conn, graphName, G=G,\n                    query=\"\"\"\nSELECT * from cypher('%s', $$\n        MATCH (V:Number)\n        RETURN V\n$$) as (V agtype);\n\"\"\" % graphName)\n\nG = age_to_networkx(conn, graphName, G=G,\n                    query=\"\"\"\nSELECT * from cypher('%s', $$\n        MATCH (V)-[R]->(V2)\n        RETURN V,R,V2\n$$) as (V agtype, R agtype, V2 agtype);\n\"\"\" % graphName)\nprint(G)\n```\n\n----------------------------------------\n\nTITLE: Loading Apache AGE Extension in PostgreSQL\nDESCRIPTION: SQL commands to enable and load the Apache AGE extension in a PostgreSQL database, setting up the search path to include the AGE catalog schema.\nSOURCE: https://github.com/apache/age/blob/master/drivers/python/README.md#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nCREATE EXTENSION age;\nLOAD 'age';\nSET search_path = ag_catalog, \"$user\", public;\n```\n\n----------------------------------------\n\nTITLE: Creating Nodes and Relationships in Apache AGE using Python\nDESCRIPTION: This snippet demonstrates how to create Country nodes and distance relationships between them using Apache AGE. It also shows how to handle transactions and error handling.\nSOURCE: https://github.com/apache/age/blob/master/drivers/python/samples/apache-age-note.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nwith ag.connection.cursor() as cursor:\n    try :\n        ag.cypher(cursor, \"CREATE (n:Country {name: %s}) \", params=('USA',))\n        ag.cypher(cursor, \"CREATE (n:Country {name: %s}) \", params=('France',))\n        ag.cypher(cursor, \"CREATE (n:Country {name: %s}) \", params=('Korea',))\n        ag.cypher(cursor, \"CREATE (n:Country {name: %s}) \", params=('Russia',))\n\n        # You must commit explicitly after all executions.\n        ag.connection.commit()\n    except Exception as ex:\n        ag.rollback()\n        raise ex\n\nwith ag.connection.cursor() as cursor:\n    try :# Create Edges\n        ag.cypher(cursor,\"MATCH (a:Country), (b:Country) WHERE a.name = 'USA' AND b.name = 'France' CREATE (a)-[r:distance {unit:'miles', value: 4760}]->(b)\")\n        ag.cypher(cursor,\"MATCH (a:Country), (b:Country) WHERE  a.name = 'France' AND b.name = 'Korea' CREATE (a)-[r:distance {unit: 'km', value: 9228}]->(b)\")\n        ag.cypher(cursor,\"MATCH (a:Country {name: 'Korea'}), (b:Country {name: 'Russia'}) CREATE (a)-[r:distance {unit:'km', value: 3078}]->(b)\")\n\n        # You must commit explicitly\n        ag.connection.commit()\n    except Exception as ex:\n        ag.rollback()\n        raise ex\n```\n\n----------------------------------------\n\nTITLE: Creating AGE Extension in PostgreSQL\nDESCRIPTION: SQL command to create the Apache AGE extension in the PostgreSQL database.\nSOURCE: https://github.com/apache/age/blob/master/README.md#2025-04-21_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nCREATE EXTENSION age;\n```\n\n----------------------------------------\n\nTITLE: Querying and Traversing Paths in Apache AGE using Python\nDESCRIPTION: This snippet shows how to execute a Cypher query to find paths between countries and traverse the resulting path, printing node and edge information.\nSOURCE: https://github.com/apache/age/blob/master/drivers/python/samples/apache-age-note.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ncursor = ag.execCypher(\"\"\"MATCH p=(:Country {name:\"USA\"})-[:distance]-(:Country)-[:distance]-(:Country) \n        RETURN p\"\"\")\n\nfor row in cursor:\n    path = row[0]\n    indent = \"\"\n    for e in path:\n        if e.gtype == age.TP_VERTEX:\n            print(indent, e.label, e[\"name\"])\n        elif e.gtype == age.TP_EDGE:\n            print(indent, e.label, e[\"value\"], e[\"unit\"])\n        else:\n            print(indent, \"Unknown element.\", e)\n            \n        indent += \" >\"\n```\n\n----------------------------------------\n\nTITLE: Loading AGE Extension\nDESCRIPTION: SQL command to load the Apache AGE extension into the current PostgreSQL session.\nSOURCE: https://github.com/apache/age/blob/master/README.md#2025-04-21_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nLOAD 'age';\n```\n\n----------------------------------------\n\nTITLE: Using COLLECT in AGE Queries\nDESCRIPTION: Shows how to use the COLLECT function in AGE queries to group related data. Demonstrates both cursor-based and direct execution approaches.\nSOURCE: https://github.com/apache/age/blob/master/drivers/python/samples/apache-age-note.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nwith ag.connection.cursor() as cursor:\n    ag.cypher(cursor, \"MATCH (a)-[:workWith]-(c) WITH a as V, COLLECT(c) as CV RETURN V.name, CV\", cols=[\"V\",\"CV\"])\n    for row in cursor:\n        nm = row[0]\n        collected = row[1]\n        print(nm, \"workWith\", [i[\"name\"] for i in collected])\n\nfor row in ag.execCypher(\"MATCH (a)-[:workWith]-(c) WITH a as V, COLLECT(c) as CV RETURN V.name, CV\", cols=[\"V1\",\"CV\"]):\n    nm = row[0]\n    collected = row[1]\n    print(nm, \"workWith\", [i[\"name\"] for i in collected])\n```\n\n----------------------------------------\n\nTITLE: Setting Search Path for AGE\nDESCRIPTION: SQL command to configure the search path to include the AGE catalog, allowing access to AGE functions.\nSOURCE: https://github.com/apache/age/blob/master/README.md#2025-04-21_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nSET search_path = ag_catalog, \"$user\", public;\n```\n\n----------------------------------------\n\nTITLE: Executing Cypher Queries with Apache AGE in TypeScript\nDESCRIPTION: Shows how to execute Cypher queries for creating graph nodes and retrieving data from an Apache AGE graph. The first query creates four Part nodes with different part numbers, while the second query retrieves all nodes in the graph.\nSOURCE: https://github.com/apache/age/blob/master/drivers/nodejs/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait client?.query(`\n    SELECT *\n    from cypher('age-first-time', $$\n        CREATE (a:Part {part_num: '123'}),\n            (b:Part {part_num: '345'}),\n            (c:Part {part_num: '456'}),\n            (d:Part {part_num: '789'})\n    $$) as (a agtype);\n`)\n\nconst results: QueryResultRow = await client?.query<QueryResultRow>(`\n    SELECT *\n    from cypher('age-first-time', $$\n        MATCH (a) RETURN a\n    $$) as (a agtype);\n`)!\n```\n\n----------------------------------------\n\nTITLE: Building Apache AGE Python Driver from Source\nDESCRIPTION: Command to build and install the Apache AGE Python driver package from source code using setup.py.\nSOURCE: https://github.com/apache/age/blob/master/drivers/python/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython setup.py install\n```\n\n----------------------------------------\n\nTITLE: Initializing AGE Result Handler and String Evaluation Function\nDESCRIPTION: Sets up the Apache AGE result handler and defines a function to parse and evaluate expressions, displaying their types and values for debugging purposes.\nSOURCE: https://github.com/apache/age/blob/master/drivers/python/samples/apache-age-agtypes.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport unittest\nfrom decimal import Decimal\nimport age \n\nresultHandler = age.newResultHandler()\n    \ndef evalExp(exp):\n    value = resultHandler.parse(exp) \n    print(type(value), \"|\", exp, \" --> \" ,value )\n    \n    \n```\n\n----------------------------------------\n\nTITLE: Installing Apache AGE with Custom PostgreSQL Path\nDESCRIPTION: Command to build and install the Apache AGE extension specifying a custom path to PostgreSQL installation.\nSOURCE: https://github.com/apache/age/blob/master/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmake PG_CONFIG=/path/to/postgres/bin/pg_config install\n```\n\n----------------------------------------\n\nTITLE: Parsing Various Data Types with AGE Result Handler\nDESCRIPTION: Demonstrates parsing different data formats including maps (JSON objects), arrays, strings, integers, floats, numeric values with various precisions, boolean values, and special number formats like scientific notation, NaN, and infinity.\nSOURCE: https://github.com/apache/age/blob/master/drivers/python/samples/apache-age-agtypes.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmapStr = '{\"name\": \"Smith\", \"num\":123, \"yn\":true, \"bigInt\":123456789123456789123456789123456789::numeric}' \narrStr =  '[\"name\", \"Smith\", \"num\", 123, \"yn\", true, 123456789123456789123456789123456789.8888::numeric]' \nstrStr =  '\"abcd\"' \nintStr =  '1234' \nfloatStr =  '1234.56789' \nnumericStr1 =  '12345678901234567890123456789123456789.789::numeric' \nnumericStr2 =  '12345678901234567890123456789123456789::numeric' \nboolStr = 'true' \n\nevalExp(mapStr)\nevalExp(arrStr)\nevalExp(strStr)\nevalExp(intStr)\nevalExp(floatStr)\nevalExp(numericStr1)\nevalExp(numericStr2)\nevalExp(boolStr)\n\nevalExp('-6.45161290322581e+46') \nevalExp('-123456789.99::numeric') \nevalExp('-6.45161290322581e+46::numeric') \nevalExp('1234') \nevalExp('NaN') \nevalExp('-Infinity') \nevalExp('Infinity') \n```\n\n----------------------------------------\n\nTITLE: Running AGE Python Driver Tests\nDESCRIPTION: Command to run the test suite for the Apache AGE Python driver, connecting to a PostgreSQL database with AGE extension. The test requires connection parameters and a graph name.\nSOURCE: https://github.com/apache/age/blob/master/drivers/python/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython test_age_py.py \\\n-host \"127.0.0.1\" \\\n-db \"postgres\" \\\n-u \"postgres\" \\\n-pass \"agens\" \\\n-port 5432 \\\n-gn \"test_graph\"\n```\n\n----------------------------------------\n\nTITLE: Parsing and Accessing AGE Vertex Properties\nDESCRIPTION: Shows how to parse a vertex representation from AGE and access its properties including ID, label, and different value types like strings, integers, floats, large numeric values, booleans, and null values.\nSOURCE: https://github.com/apache/age/blob/master/drivers/python/samples/apache-age-agtypes.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nvertexExp = '''{{\"id\": 2251799813685425, \"label\": \"Person\", \n    \"properties\": {{\"name\": \"Smith\", \"numInt\":123, \"numFloat\": 384.23424, \n    \"bigInt\":123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789::numeric, \n    \"bigFloat\":123456789123456789123456789123456789.12345::numeric, \n    \"yn\":true, \"nullVal\": null}}}}::vertex'''\n\nvertex = age.parseAgeValue(vertexExp)\nprint(type(vertex.id), vertex.id)\nprint(type(vertex.label), vertex.label)\nprint(type(vertex[\"name\"]), vertex[\"name\"])\nprint(type(vertex[\"numInt\"]), vertex[\"numInt\"])\nprint(type(vertex[\"numFloat\"]), vertex[\"numFloat\"])\nprint(type(vertex[\"bigInt\"]), vertex[\"bigInt\"])\nprint(type(vertex[\"bigFloat\"]), vertex[\"bigFloat\"])\nprint(type(vertex[\"yn\"]), vertex[\"yn\"])\nprint(type(vertex[\"nullVal\"]), vertex[\"nullVal\"])\n```\n\n----------------------------------------\n\nTITLE: Connecting to PostgreSQL in Docker\nDESCRIPTION: Command to connect to the PostgreSQL instance running in the Docker container with Apache AGE installed.\nSOURCE: https://github.com/apache/age/blob/master/README.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it age psql -d postgresDB -U postgresUser\n```\n\n----------------------------------------\n\nTITLE: Parsing and Accessing AGE Path with Vertices and Edges\nDESCRIPTION: Demonstrates parsing a path object from AGE which contains vertices and edges, then accessing the properties of each element in the path including IDs, labels, and custom properties.\nSOURCE: https://github.com/apache/age/blob/master/drivers/python/samples/apache-age-agtypes.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npathExp = '''[{\"id\": 2251799813685425, \"label\": \"Person\", \"properties\": {\"name\": \"Smith\"}}::vertex, \n    {\"id\": 2533274790396576, \"label\": \"workWith\", \"end_id\": 2251799813685425, \"start_id\": 2251799813685424, \n        \"properties\": {\"weight\": 3, \"bigFloat\":123456789123456789123456789.12345::numeric}}::edge, \n    {\"id\": 2251799813685424, \"label\": \"Person\", \"properties\": {\"name\": \"Joe\"}}::vertex]::path'''\n\npath = age.parseAgeValue(pathExp)\nvertexStart = path[0]\nedge = path[1]\nvertexEnd = path[2]\n\nprint(type(vertexStart.id), vertexStart.id)\nprint(type(vertexStart.label), vertexStart.label)\nprint(type(vertexStart[\"name\"]), vertexStart[\"name\"])\n\nprint(type(edge.id), edge.id)\nprint(type(edge.label), edge.label)\nprint(type(edge[\"weight\"]), edge[\"weight\"])\nprint(type(edge[\"bigFloat\"]), edge[\"bigFloat\"])\n\nprint(type(vertexEnd.id), vertexEnd.id)\nprint(type(vertexEnd.label), vertexEnd.label)\nprint(type(vertexEnd[\"name\"]), vertexEnd[\"name\"])\n\n\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for Apache AGE Python Driver\nDESCRIPTION: Commands to install the necessary dependencies for the Apache AGE Python driver. This includes setting up the development environment, cloning the repository, and installing required Python packages.\nSOURCE: https://github.com/apache/age/blob/master/drivers/python/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update\nsudo apt-get install python3-dev libpq-dev\ngit clone https://github.com/apache/age.git\ncd age/drivers/python\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies from Requirements File\nDESCRIPTION: Command to install all Python package dependencies listed in the requirements.txt file for the Apache AGE Python driver.\nSOURCE: https://github.com/apache/age/blob/master/drivers/python/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Running AGE Python Data Type Unit Tests\nDESCRIPTION: Command to run the unit tests for AGE Python data types, which verify the correct handling and conversion of AGE-specific data types.\nSOURCE: https://github.com/apache/age/blob/master/drivers/python/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython -m unittest -v test_agtypes.py\n```\n\n----------------------------------------\n\nTITLE: Running NetworkX Integration Tests for Apache AGE\nDESCRIPTION: Command to run tests for the NetworkX integration with Apache AGE, which allows converting between NetworkX graphs and AGE graph database structures.\nSOURCE: https://github.com/apache/age/blob/master/drivers/python/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npython test_networkx.py \\\n-host \"127.0.0.1\" \\\n-db \"postgres\" \\\n-u \"postgres\" \\\n-pass \"agens\" \\\n-port 5432\n```\n\n----------------------------------------\n\nTITLE: Installing Go Driver for Apache AGE on Linux/OSX\nDESCRIPTION: Shell command to install the Apache AGE Go driver on Linux or OSX systems by executing the installation script from the correct directory.\nSOURCE: https://github.com/apache/age/blob/master/drivers/golang/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd age/drivers/golang\n./install.sh\n```\n\n----------------------------------------\n\nTITLE: Installing Go Driver for Apache AGE with Go Modules\nDESCRIPTION: Commands to install the Apache AGE Go driver using Go module system, either via go get or by adding a requirement to go.mod file.\nSOURCE: https://github.com/apache/age/blob/master/drivers/golang/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/apache/age/drivers/golang\n```\n\n----------------------------------------\n\nTITLE: Running Go Tests for Apache AGE Driver\nDESCRIPTION: Command to run Go tests for the Apache AGE driver. Requires Apache AGE to be installed in the test database and a test graph to be created.\nSOURCE: https://github.com/apache/age/blob/master/drivers/golang/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd age/drivers/golang/age\ngo test . -v\n```\n\n----------------------------------------\n\nTITLE: Building Apache AGE Java Driver from Source\nDESCRIPTION: Commands to clone the Apache AGE repository and build the Java driver using Gradle. The resulting JAR file needs to be added to the classpath of the Java project.\nSOURCE: https://github.com/apache/age/blob/master/drivers/jdbc/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/apache/age.git\ncd age/drivers/jdbc\n\ngradle assemble\n```\n\n----------------------------------------\n\nTITLE: Generating Agtype Parser with ANTLR4 for Python3\nDESCRIPTION: This command generates the Agtype parser using ANTLR4 for Python3. It requires Java 8+ and the ANTLR4 jar file. The generated files are output to the ../age/gen directory.\nSOURCE: https://github.com/apache/age/blob/master/drivers/python/antlr/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# prerequisites : \n#    - java over 8\n#    - download ANTLR4 from https://www.antlr.org/download/antlr-4.11.1-complete.jar\n#    - java -cp antlr-4.11.1-complete.jar org.antlr.v4.Tool  -Dlanguage=Python3 -visitor -o ../age/gen ../../Agtype.g4 \n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for age_py Module\nDESCRIPTION: This command runs the unit tests for the age_py module using Python's unittest framework in verbose mode.\nSOURCE: https://github.com/apache/age/blob/master/drivers/python/antlr/README.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npython -m unittest -v test_age_py.py\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for agtypes Module\nDESCRIPTION: This command runs the unit tests for the agtypes module using Python's unittest framework in verbose mode.\nSOURCE: https://github.com/apache/age/blob/master/drivers/python/antlr/README.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npython -m unittest -v test_agtypes.py\n```\n\n----------------------------------------\n\nTITLE: Deleting Graph and Closing Connection\nDESCRIPTION: This snippet demonstrates how to delete the graph and close the database connection, which is important for proper resource management.\nSOURCE: https://github.com/apache/age/blob/master/drivers/python/samples/apache-age-basic.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nage.deleteGraph(conn, GRAPH_NAME)\nconn.close()\n```\n\n----------------------------------------\n\nTITLE: Closing Connection and Cleaning Up in Apache AGE using Python\nDESCRIPTION: This snippet shows how to delete a graph and close the connection to Apache AGE. It's important for proper resource management and cleanup after using the database.\nSOURCE: https://github.com/apache/age/blob/master/drivers/python/samples/apache-age-note.ipynb#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# Clear test data\nage.deleteGraph(ag.connection, GRAPH_NAME)\n# connection close\nag.close()\n```\n\n----------------------------------------\n\nTITLE: Installing Required Libraries for AGE on CentOS\nDESCRIPTION: Command to install the necessary dependencies for building Apache AGE from source on CentOS systems.\nSOURCE: https://github.com/apache/age/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyum install gcc glibc glib-common readline readline-devel zlib zlib-devel flex bison\n```\n\n----------------------------------------\n\nTITLE: Installing Required Libraries for AGE on Fedora\nDESCRIPTION: Command to install the necessary dependencies for building Apache AGE from source on Fedora systems.\nSOURCE: https://github.com/apache/age/blob/master/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndnf install gcc glibc bison flex readline readline-devel zlib zlib-devel\n```\n\n----------------------------------------\n\nTITLE: Installing Required Libraries for AGE on Ubuntu\nDESCRIPTION: Command to install the necessary dependencies for building Apache AGE from source on Ubuntu systems.\nSOURCE: https://github.com/apache/age/blob/master/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install build-essential libreadline-dev zlib1g-dev flex bison\n```\n\n----------------------------------------\n\nTITLE: Installing PostgreSQL on Ubuntu\nDESCRIPTION: Command to install PostgreSQL using the Ubuntu package manager, required before installing Apache AGE.\nSOURCE: https://github.com/apache/age/blob/master/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install postgresql\n```\n\n----------------------------------------\n\nTITLE: Checking PostgreSQL Configuration\nDESCRIPTION: Command to verify the PostgreSQL installation and configuration, showing the version and installation paths.\nSOURCE: https://github.com/apache/age/blob/master/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npg_config\n```\n\n----------------------------------------\n\nTITLE: Building and Installing Apache AGE\nDESCRIPTION: Command to build and install the Apache AGE extension from the source code directory.\nSOURCE: https://github.com/apache/age/blob/master/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmake install\n```\n\n----------------------------------------\n\nTITLE: Pulling Apache AGE Docker Image\nDESCRIPTION: Command to download the official Apache AGE Docker image for containerized deployment.\nSOURCE: https://github.com/apache/age/blob/master/README.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull apache/age\n```\n\n----------------------------------------\n\nTITLE: Creating Apache AGE Docker Container\nDESCRIPTION: Command to create and run a Docker container with Apache AGE, setting up port forwarding and database credentials.\nSOURCE: https://github.com/apache/age/blob/master/README.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker run \\\n    --name age  \\\n    -p 5455:5432 \\\n    -e POSTGRES_USER=postgresUser \\\n    -e POSTGRES_PASSWORD=postgresPW \\\n    -e POSTGRES_DB=postgresDB \\\n    -d \\\n    apache/age\n```\n\n----------------------------------------\n\nTITLE: Creating Edges Between Vertices in AGE\nDESCRIPTION: SQL command to create an edge between two vertices with properties using the Cypher query language in Apache AGE.\nSOURCE: https://github.com/apache/age/blob/master/README.md#2025-04-21_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * \nFROM cypher('graph_name', $$\n    MATCH (a:label), (b:label)\n    WHERE a.property = 'Node A' AND b.property = 'Node B'\n    CREATE (a)-[e:RELTYPE {property:a.property + '<->' + b.property}]->(b)\n    RETURN e\n$$) as (e agtype);\n```\n\n----------------------------------------\n\nTITLE: Querying Connected Nodes in AGE\nDESCRIPTION: SQL command to query connected nodes and their relationships using the Cypher query language in Apache AGE.\nSOURCE: https://github.com/apache/age/blob/master/README.md#2025-04-21_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * from cypher('graph_name', $$\n        MATCH (V)-[R]-(V2)\n        RETURN V,R,V2\n$$) as (V agtype, R agtype, V2 agtype);\n```\n\n----------------------------------------\n\nTITLE: Handling Special Float Values in Go for Apache AGE\nDESCRIPTION: This snippet demonstrates how to represent special float values (NaN, -Infinity, Infinity) from Apache AGE in Go using the math package. It shows the Go equivalents for these special float values.\nSOURCE: https://github.com/apache/age/blob/master/drivers/golang/TYPES.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmath.Nan(), math.Inf(-1), math.Inf(1)\n```\n\n----------------------------------------\n\nTITLE: Defining Python Dependencies for Apache AGE\nDESCRIPTION: This requirements file lists the Python packages needed for the Apache AGE project. It includes psycopg (PostgreSQL adapter) with no binary compilation, ANTLR runtime for parsing, setuptools for packaging, and networkx for graph operations.\nSOURCE: https://github.com/apache/age/blob/master/drivers/python/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npsycopg --no-binary :all: psycopg\nantlr4-python3-runtime==4.11.1\nsetuptools\nnetworkx\n```"
  }
]