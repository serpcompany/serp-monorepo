[
  {
    "owner": "leaferjs",
    "repo": "docs",
    "content": "TITLE: Drawing Rounded Corners on Rect Element\nDESCRIPTION: This code snippet demonstrates how to draw rounded corners on a Rect element in Leafer.js. It shows how to modify the corners property of the Rect element to achieve different rounded corner effects.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/basic/display.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Rect/corners.ts\n```\n\n----------------------------------------\n\nTITLE: Setting Style with JSON\nDESCRIPTION: This snippet demonstrates how to set an element's style using a JSON object in Leaferjs.  It references the [Import/Export] documentation for additional details.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/basic/style.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/json/set.ts\n```\n\n----------------------------------------\n\nTITLE: Setting Stroke Options\nDESCRIPTION: This snippet illustrates how to set various stroke options in Leaferjs, such as `strokeAlign`, `strokeWidth`, `strokeCap`, `strokeJoin`, `dashPattern`, and `dashOffset`. It provides a comprehensive example of customizing the appearance of an element's stroke.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/basic/style.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/basic/style/stroke-options.ts\n```\n\n----------------------------------------\n\nTITLE: Exporting JSON Object with Options\nDESCRIPTION: Exports a Leafer.js element as a JSON object. It takes an optional configuration object `IJSONOptions` to customize the exported JSON, where the `matrix` property controls whether the transformation matrix is included. The exported data conforms to the `IUIInputData` interface.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/json.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IJSONOptions {\n  matrix?: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Adjusting Rectangle Display Order using zIndex - TypeScript\nDESCRIPTION: This code snippet demonstrates how to adjust the display order of rectangles within a Leafer scene using the `zIndex` property.  It creates two rectangles and sets different `zIndex` values to control which rectangle appears on top. This example uses Leafer's UI elements and requires Leafer's core library as a dependency.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/zIndex.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/zIndex/rect.ts\n```\n\n----------------------------------------\n\nTITLE: Initializing Leafer with Fixed Size in Window - Typescript\nDESCRIPTION: This code snippet shows how to initialize a Leafer instance with a fixed width and height, targeting the window object as the view. It creates a Leafer instance and appends it to the document body.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/basic/leafer.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Integrating Leafer.js in Nuxt.js Vue Component\nDESCRIPTION: This Vue component demonstrates how to integrate Leafer.js into a Nuxt.js application.  It dynamically imports Leafer-UI within the `mounted` hook to ensure the canvas context is available, then initializes Leafer and adds a draggable rectangle to the canvas. It uses `Vue.extend` for compatibility.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/framework/nuxt/index.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\">\nimport Vue from 'vue'\n\nexport default Vue.extend({\n  name: 'IndexPage',\n  async mounted() {\n    // 必须在 mounted 中异步加载代码，才有 canvas context 环境\n    const { Leafer, Rect } = await import('leafer-ui')\n\n    const leafer = new Leafer({ view: window })\n\n    const rect = new Rect({\n      x: 100,\n      y: 100,\n      width: 200,\n      height: 200,\n      fill: '#32cd79',\n      cornerRadius: [50, 80, 0, 80],\n      draggable: true,\n    })\n\n    leafer.add(rect)\n  },\n  destroyed() {\n    // 销毁leafer\n  },\n})\n</script>\n\n<template>\n  <div id=\"leafer-view\"></div>\n</template>\n\n<style scoped>\n#leafer-view {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Property Event Example - JavaScript\nDESCRIPTION: Illustrates how to listen for and handle PropertyEvent.CHANGE events in Leafer.js using JavaScript. This example shows how to access event properties like target, attrName, oldValue, and newValue. It requires importing necessary Leafer.js interfaces and classes.  The event is dispatched after the leafer.ready event.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/event/basic/Property.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<<< @/code/event/leafer/property.js\n```\n\n----------------------------------------\n\nTITLE: Adding Mouse Hover Event Listener\nDESCRIPTION: This code snippet demonstrates how to add mouse enter and leave event listeners to a rectangle in Leafer.js. It showcases the basic usage of event handling for creating interactive effects.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/basic/event.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/basic/event/hover.ts#listen\n```\n\n----------------------------------------\n\nTITLE: Initializing Leafer with Auto Resize - Padding Left - Typescript\nDESCRIPTION: This snippet shows how to create a Leafer instance that automatically resizes with a left padding. The leafer will adjust its size based on parent resize events, while maintaining a left padding.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/basic/leafer.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Drawing with Pen Tool using Leafer.js (TypeScript)\nDESCRIPTION: This code snippet demonstrates drawing with a pen tool in Leafer.js using TypeScript. It shows how to handle mouse events and draw lines on the canvas, taking into account potential viewport transformations (scaling and panning) to ensure accurate drawing even after zooming or moving the view. It relies on the Leafer.js library for canvas manipulation and event handling.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/advanced/coordinate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Pen/draw.ts\n```\n\n----------------------------------------\n\nTITLE: Moving Element with move() - LeaferJS (TypeScript)\nDESCRIPTION: Demonstrates how to use the `move()` method to reposition an element along the X and Y axes.  The move function can take individual x and y values, or a point object as input. No dependencies beyond LeaferJS are required.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/position.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// 沿 X/Y 轴同时移动 10 像素\nrect.move(10, 10)\n\n// 使用 point 沿 X/Y 轴同时移动 10 像素\nrect.move({ x: 10, y: 10 })\n```\n\n----------------------------------------\n\nTITLE: Starting Leafer Application\nDESCRIPTION: This code snippet demonstrates how to start or restart a Leafer application. It is used to initialize or resume the rendering and layout processes, enabling the application to respond to user interactions and data updates.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Leafer.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Leafer Core Package Exports\nDESCRIPTION: This code snippet shows how to import and export modules from the 'leafer-core' package, including core functionalities like Leafer, event handling, math utilities, task management, runtime environment, and debugging tools. It also includes replaceable packages like UI components and integrations with Interaction, LeaferCanvas, and LeaferData.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/design/tree.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// 稳定的package\nimport { Leafer } from 'leafer-core'\nexport * from 'leafer-tree'\nexport * as event from 'leafer-event'\nexport * as math from 'leafer-math'\nexport * from 'leafer-task'\nexport * from 'leafer-runtime'\nexport * from 'leafer-debug'\n\n// 可替换的package\nexport * as ui from 'leafer-ui'\n\nimport { Interaction } from 'leafer-interaction' // 可选\nimport { LeaferCanvas } from 'leafer-canvas'\nimport { LeaferData } from 'leafer-data'\n\nimport { Layouter } from 'leafer-layouter'\nimport { Rendererer } from 'leafer-renderer'\nimport { Selector } from 'leafer-selector' // 可选\n\nLeafer.class.Interaction = Interaction\nLeafer.class.LeaferCanvas = LeaferCanvas\nLeafer.class.LeaferData = LeaferData\n\nLeafer.class.Layouter = Layouter\nLeafer.class.Renderer = Rendererer\nLeafer.class.Selector = Selector\n```\n\n----------------------------------------\n\nTITLE: Defining Star UI Component with LeaferUI\nDESCRIPTION: This code defines a custom UI component named 'Star' using the LeaferUI framework. It involves defining interfaces for data input (IStarInputData) and processing (IStarDataProcessor), creating a custom data processor class (StarDataProcessor), and implementing the Star component class itself. The Star class extends the UI class from LeaferUI and includes properties for controlling the number of points and the inner radius of the star.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/custom/ui.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  UI,\n  UIDataProcessor,\n  PathDataHelper,\n  dataProcessor,\n  pathType,\n} from 'leafer-ui'\n\nimport {\n  IUI,\n  IUIDataProcessor,\n  IUIInputData,\n  IPathCommandData,\n} from 'leafer-ui-interface'\n\n// 描述类\ninterface IStar extends IUI {\n  points: number | string\n  innerRadius: number\n}\n\n// 描述输入的数据格式\ninterface IStarInputData extends IUIInputData {\n  points?: number | string\n  innerRadius?: number\n}\n\n// 描述计算后的数据格式\ninterface IStarDataProcessor extends IUIDataProcessor {\n  points?: number\n  innerRadius?: number\n}\n\n// 数据处理容器， 默认会自动处理，可以重写set逻辑\nclass StarDataProcessor extends UIDataProcessor {\n  private _points: number\n  set points(value: number | string) {\n    // do something...\n    this._points = Number(value)\n  }\n}\n\n// Star\nexport class Star extends UI implements IStart {\n  @dataProcessor(StarDataProcessor)\n  public __: IStartDataProcessor\n\n  @pathType(5)\n  public points: number | string\n\n  @pathType(0.38)\n  public innerRadius: number\n\n  constructor(data?: IStartInputData) {\n    super(data)\n  }\n\n  public __updatePathData() {\n    const { width, height, points, innerRadius } = this.__\n    const rx = width / 2,\n      ry = height / 2,\n      data: IPathCommandData = []\n\n    this.__.path__ = { data }\n\n    PathDataHelper.begin(data)\n    PathDataHelper.moveTo(rx, 0)\n\n    for (let i = 1; i < points * 2; i++) {\n      PathDataHelper.lineTo(\n        rx +\n          (i % 2 === 0 ? rx : rx * innerRadius) *\n            Math.sin((i * Math.PI) / points),\n        ry -\n          (i % 2 === 0 ? ry : ry * innerRadius) *\n            Math.cos((i * Math.PI) / points)\n      )\n    }\n\n    PathDataHelper.close()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Elements from JSON Data\nDESCRIPTION: This code snippet illustrates how to create elements in Leafer.js from JSON data. It demonstrates the process of importing and exporting UI elements using JSON format.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/basic/display.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/json/create.ts\n```\n\n----------------------------------------\n\nTITLE: Initializing Event Listener with IEventMap - Typescript\nDESCRIPTION: This code demonstrates how to initialize event listeners using the IEventMap interface in Leaferjs. It shows how to define event handlers for different event types, including standard events like 'tap' and pointer events like PointerEvent.DOWN. The example includes defining the event listener as well as optional configurations for the event, like 'once'.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/on.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface IEventMap {\n  [name: string]: IEventListener | [IEventListener, IEventOption]\n}\n\n// 示例\nnew Rect({\n  fill: '#32cd79',\n  event: {\n    tap: function () {\n      console.log('tap')\n    },\n    [PointerEvent.DOWN]: [\n      function () {\n        console.log('pointer.down')\n      },\n      'once', // 同 on() 的第二个参数\n    ],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Leafer in React\nDESCRIPTION: This code snippet demonstrates how to initialize Leafer.js within a React component using the useEffect hook. It creates a Leafer instance, adds a Rect element, and ensures proper cleanup by destroying the Leafer instance when the component unmounts. This is crucial for preventing memory leaks, especially in development environments where the useEffect hook might execute multiple times. The component renders a div with id 'leafer-view' that Leafer uses as a view.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/framework/react/index.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useEffect } from 'react'\nimport { Leafer, Rect } from 'leafer-ui'\n\nexport default function App() {\n  useEffect(() => {\n    const leafer = new Leafer({ view: 'leafer-view' })\n\n    const rect = new Rect({\n      x: 100,\n      y: 100,\n      width: 200,\n      height: 200,\n      fill: '#32cd79',\n      cornerRadius: [50, 80, 0, 80],\n      draggable: true,\n    })\n\n    leafer.add(rect)\n\n    return () => {\n      leafer.destroy() // 开发环境useEffect会执行2次，必须及时销毁\n    }\n  })\n\n  return (\n    <div\n      id=\"leafer-view\"\n      style={{\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '100%',\n      }}\n    ></div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Editor and Resize Plugins with PNPM\nDESCRIPTION: This snippet shows how to install the @leafer-in/editor and @leafer-in/resize plugins using pnpm. It ensures that all dependencies are correctly managed and installed within the project.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/index.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm add @leafer-in/editor\npnpm add @leafer-in/resize\n```\n\n----------------------------------------\n\nTITLE: Converting Polygon to Path in Leaferjs (Typescript)\nDESCRIPTION: Demonstrates how to convert a polygon element into a path in Leaferjs. This is achieved by assigning the result of the `getPath()` method to the `path` property of the polygon, enabling path editing capabilities.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/path.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// 如多边形内部转成路径，方便进行路径编辑\npolygon.path = polygon.getPath()\n```\n\n----------------------------------------\n\nTITLE: Creating Leafer Instance in Vue Component (App.vue)\nDESCRIPTION: This snippet demonstrates how to create a Leafer instance and add a Rect shape within a Vue component's mounted lifecycle hook. It imports necessary modules from 'leafer-ui', initializes Leafer with a specified view, and adds a draggable rectangle with custom properties.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/framework/vue/index.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { onMounted } from 'vue'\nimport { Leafer, Rect } from 'leafer-ui'\n\nonMounted(() => {\n  const leafer = new Leafer({ view: 'leafer-view' })\n\n  const rect = new Rect({\n    x: 100,\n    y: 100,\n    width: 200,\n    height: 200,\n    fill: '#32cd79',\n    cornerRadius: [50, 80, 0, 80],\n    draggable: true,\n  })\n\n  leafer.add(rect)\n})\n</script>\n\n<template>\n  <div id=\"leafer-view\"></div>\n</template>\n\n<style scoped>\n#leafer-view {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Displaying Text\nDESCRIPTION: This code snippet demonstrates how to display text using the Text element in Leafer.js. It shows how to set the text content and style properties for rendering text on the canvas.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/basic/display.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Text/text.ts\n```\n\n----------------------------------------\n\nTITLE: Listening for Image Load Events - JavaScript\nDESCRIPTION: This code snippet demonstrates how to listen for image load events (load, loaded, error) in JavaScript using Leaferjs. It mirrors the TypeScript example and shows how to attach event listeners and handle image loading states.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/event/basic/Image.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<<< @/code/event/image/image.js\n```\n\n----------------------------------------\n\nTITLE: Creating Vue + Leafer Template Project (npm)\nDESCRIPTION: This command creates a new Leafer project with a Vue3 + TypeScript + Leafer template in the current directory. It is useful for quickly setting up a Leafer development environment.\nSOURCE: https://github.com/leaferjs/docs/blob/main/create/leafer.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm create leafer@latest vue-template\n```\n\n----------------------------------------\n\nTITLE: Using Path Data in Leaferjs (Typescript)\nDESCRIPTION: Shows how to define and use path data directly in Leaferjs. This involves setting the `path` property of an element with either an `IPathString` (SVG path string) or an `IPathCommandData` object.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/path.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/path/path.ts\n```\n\n----------------------------------------\n\nTITLE: Changing Visibility\nDESCRIPTION: This snippet demonstrates how to change the visibility of an element in Leaferjs, allowing it to be hidden or shown. The `main` export likely contains the logic for toggling the `visible` property.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/basic/style.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/visible/change.ts#main\n```\n\n----------------------------------------\n\nTITLE: Animate Car with Motion Path in LeaferJS\nDESCRIPTION: This snippet demonstrates animating a car along a motion path in LeaferJS. It requires the motion path and animate plugins to be installed. The code defines the car's movement along a pre-defined path.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/plugin/motion-path.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/animate/car.ts\n```\n\n----------------------------------------\n\nTITLE: Changing Origin with LocalTransform and SetTransform - Typescript\nDESCRIPTION: Demonstrates how to change the origin point of a Leaferjs element while maintaining its current position. It involves capturing the current transform, setting the new origin, and then reapplying the captured transform using `setTransform()` to adjust the element's position automatically. Relies on `localTransform` and `setTransform` methods.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/origin.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// 多边形原始 origin\npolygon.origin = 'center'\n\n// 切换 origind 点\nconst transform = { ...polygon.localTransform } // 采集 transform\n\npolygon.origin = 'right'\n\npolygon.setTransform(transform) // 重设 transform，会自动处理 origin 的变化\n```\n\n----------------------------------------\n\nTITLE: Transition Options Type Definition - Typescript\nDESCRIPTION: Defines the `ITransition` type, which can be a boolean, number (duration), easing string, or an object with animation options. This type is used to configure transition effects in Leaferjs.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/transition.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// 过渡选项，  number 表示duration， string 表示 easing， object 表示动画选项对象，\ntype ITransition = boolean | number | IAnimateEasingName | IAnimateOptions\n```\n\n----------------------------------------\n\nTITLE: Initializing Leafer with Fixed Size in Div - Typescript\nDESCRIPTION: This code snippet demonstrates initializing a Leafer instance within a div element, setting a fixed width and height. The Leafer instance is appended to the specified div.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/basic/leafer.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Load Image Resource - TypeScript\nDESCRIPTION: This code snippet demonstrates how to load an image resource using the `loadImage` method in Leafer.js. It waits for the image to load before adding it to the application. The snippet relies on the Leafer.js library.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/resource/Resource.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/resource/image/load.ts\n```\n\n----------------------------------------\n\nTITLE: Listening for Image Load Event (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to listen for the image load event using TypeScript. This allows you to execute specific actions when the image has fully loaded.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Image.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/event/image/image.ts\n```\n\n----------------------------------------\n\nTITLE: Export Entire Canvas (Screenshot)\nDESCRIPTION: Demonstrates how to export the entire LeaferJS canvas as a screenshot.  This captures the current state of the entire application canvas, including all elements and background. Requires the LeaferJS export plugin.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/basic/export.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/export/screenshot.ts\n```\n\n----------------------------------------\n\nTITLE: Animation Ending: Keep End State (to.ts)\nDESCRIPTION: Demonstrates how to configure an animation to persist its final state after completion using the 'to' option within the 'ending' property. This example applies to various animation types including 'animation', 'transition', 'set', and 'animate' within Leafer.js.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/animate/options/ending.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/animate/options/ending/animation/to.ts [animation]\n```\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/animate/options/ending/transition/to.ts [transition]\n```\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/animate/options/ending/set/to.ts [set]\n```\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/animate/options/ending/animate/to.ts [animate]\n```\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/animate/options/ending/to.ts [Animate]\n```\n\n----------------------------------------\n\nTITLE: Initializing Leafer in VitePress Component (Vue + TS)\nDESCRIPTION: This code snippet demonstrates how to initialize a Leafer instance within a Vue component's `mounted` lifecycle hook. It asynchronously imports Leafer and Rect from 'leafer-ui', creates a Leafer instance associated with the window, and adds a configurable Rect element. The component also includes a `unmounted` lifecycle hook for destroying Leafer and CSS for styling.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/framework/vitepress/index.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\">\nexport default {\n  async mounted() {\n    // 必须在 mounted 中异步加载代码，才有 canvas context 环境\n    const { Leafer, Rect } = await import('leafer-ui')\n\n    const leafer = new Leafer({ view: window })\n\n    const rect = new Rect({\n      x: 100,\n      y: 100,\n      width: 200,\n      height: 200,\n      fill: '#32cd79',\n      cornerRadius: [50, 80, 0, 80],\n      draggable: true,\n    })\n\n    leafer.add(rect)\n  },\n  unmounted() {\n    // 销毁leafer\n  },\n}\n</script>\n\n<template>\n  <div id=\"leafer-view\"></div>\n</template>\n\n<style scoped>\n#leafer-view {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Initializing Leafer with Auto Grow - Typescript\nDESCRIPTION: This code initializes a Leafer instance with auto-growth enabled, meaning the canvas will automatically expand to fit its content.  This is useful for embedding Leafer elements into HTML without explicit size constraints.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/basic/leafer.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Rect Element with Background Color\nDESCRIPTION: This code snippet demonstrates how to create a Rect element with a specified background color in Leafer.js. It shows a standard creation approach using the Rect class and setting its properties.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/basic/display.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/basic/display/create.ts\n```\n\n----------------------------------------\n\nTITLE: Image Fill (Cover Mode)\nDESCRIPTION: This code snippet shows how to use an image as a fill for a LeaferJS UI element, specifically using the 'cover' mode. The 'cover' mode ensures the image fills the entire element while maintaining its aspect ratio. It depends on the LeaferJS paint module and image handling capabilities.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/fill.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/fill/image/cover.ts\n```\n\n----------------------------------------\n\nTITLE: Button State Management with LeaferJS (button.ts)\nDESCRIPTION: This code snippet demonstrates how to manage button states (e.g., hover, press) using LeaferJS. It utilizes LeaferJS's state management features to apply different styles based on the current state of the button. The `button` property applied to the parent element automatically synchronizes interaction states with the child elements.\nSOURCE: https://github.com/leaferjs/docs/blob/main/blog/2024-09-20.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/state/button.ts\n```\n\n----------------------------------------\n\nTITLE: Drop Element to Group (Javascript)\nDESCRIPTION: This JavaScript code snippet demonstrates how to use the `dropTo` function to move a UI element to a new parent Group within the Leaferjs framework. It allows specifying the index within the parent Group where the element will be placed. The element's world position remains unchanged during the transfer.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/dropTo.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<<< @/code/event-ui/drop/simple.js\n```\n\n----------------------------------------\n\nTITLE: Creating Leafer View in Next.js Client Component (TSX)\nDESCRIPTION: This snippet shows how to create a Leafer instance inside a Next.js client component.  It uses `useEffect` to ensure the canvas context is available. The `Leafer` and `Rect` classes are dynamically imported from `leafer-ui`. A `Rect` object is created and added to the Leafer instance. The component also handles Leafer instance destruction during unmounting using a cleanup function in `useEffect` to prevent memory leaks in development environments.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/framework/next/index.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n'use client' // 标识为client代码\n\nimport { useEffect } from 'react'\nimport { ILeafer } from '@leafer-ui/interface'\n\nexport default function LeaferView() {\n  useEffect(() => {\n    let leafer: ILeafer\n    let isDestroy = false\n\n    import('leafer-ui').then(({ Leafer, Rect }) => {\n      // 必须在 useEffect 中异步加载代码，才有 canvas context 环境\n      if (isDestroy) return\n\n      leafer = new Leafer({ view: 'leafer-view' })\n\n      const rect = new Rect({\n        x: 100,\n        y: 100,\n        width: 200,\n        height: 200,\n        fill: '#32cd79',\n        cornerRadius: [50, 80, 0, 80],\n        draggable: true,\n      })\n\n      leafer.add(rect)\n    })\n\n    return () => {\n      if (leafer) leafer.destroy() // 开发环境useEffect会执行2次，必须及时销毁\n      isDestroy = true\n    }\n  })\n\n  return (\n    <div\n      id=\"leafer-view\"\n      style={{\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '100%',\n      }}\n    ></div>\n  )\n}\n\n```\n\n----------------------------------------\n\nTITLE: Export to JSON\nDESCRIPTION: Shows how to export a LeaferJS element to a JSON object.  This allows for serialization and storage of the element's properties and structure.  The resulting JSON can be used to recreate the element later. Requires the LeaferJS export plugin.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/basic/export.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/json/export.ts\n```\n\n----------------------------------------\n\nTITLE: Extending Rect to create Custom Element (Leafer.js)\nDESCRIPTION: Demonstrates how to create a custom element by inheriting from the Rect element in Leafer.js. This allows adding custom data properties to the element. The code extends `Rect` and can override methods for custom behavior.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/custom/extends.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Leafer, Rect, RenderEvent } from 'leafer-ui'\n\nconst leafer = new Leafer({\n    view: document.querySelector('#app'),\n    width: 400,\n    height: 300,\n    autoRender: false\n})\n\nclass CustomRect extends Rect {\n    customData: string\n\n    constructor(options: any) {\n        super(options)\n        this.customData = options.customData || 'default value'\n    }\n\n    render(event: RenderEvent) {\n        super.render(event)\n        // Custom rendering logic here, using this.customData\n        console.log('Custom rendering with data:', this.customData)\n    }\n}\n\nleafer.add(new CustomRect({\n    x: 50,\n    y: 50,\n    width: 100,\n    height: 80,\n    fill: 'red',\n    customData: 'Hello, Custom Rect!'\n}))\n\nleafer.render()\n\n\n```\n\n----------------------------------------\n\nTITLE: Kill Animation Example (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to use the `kill()` method of the `Animate` class in Leaferjs to forcefully stop and destroy an animation. It is assumed that you have an instance of the `Animate` class and want to immediately terminate the animation it controls. No specific dependencies beyond Leaferjs's animation module are explicitly shown in this snippet.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/animate/Animate/kill.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n // This is a placeholder, the actual code is in @/code/plugin/animate/animate/kill.ts\n // Refer to the file for the real implementation\n // Example usage might look like this:\n // animationInstance.kill();\n```\n\n----------------------------------------\n\nTITLE: Solid Color Fill\nDESCRIPTION: This code snippet demonstrates how to apply a solid color fill to a LeaferJS UI element. It sets the 'fill' property to a hexadecimal color value. This is a basic example for understanding how to use solid fills in LeaferJS.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/fill.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/fill/solid/a.ts\n```\n\n----------------------------------------\n\nTITLE: Export to Base64 Encoded String\nDESCRIPTION: Illustrates how to export a LeaferJS element to a Base64 encoded string.  The exported data is returned as a string, making it suitable for embedding in HTML or other text-based formats. Requires the LeaferJS export plugin.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/basic/export.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/export/string.ts\n```\n\n----------------------------------------\n\nTITLE: Create a Custom Rect Element (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to create a custom Rect element in Leafer.js using TypeScript.  It imports the Rect class from the '@leafer-ui/core' package and extends it to create a custom component. This shows the base structure for custom element creation for Leafer.js using TypeScript.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/custom/base/register.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Rect } from '@leafer-ui/core'\n\nexport class CustomRect extends Rect {}\n```\n\n----------------------------------------\n\nTITLE: Drawing Shadow with Offset - Typescript\nDESCRIPTION: Example code for drawing a shadow with specified x and y offsets using LeaferJS. This code snippet likely demonstrates how to create a UI element and apply a `ShadowEffect` to it, showcasing the effect of offset properties on the shadow's position.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/shadow.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/shadow/offset.ts\n```\n\n----------------------------------------\n\nTITLE: BlendMode Multiply Example Typescript\nDESCRIPTION: Example code demonstrating the 'multiply' blend mode.  It shows how the top layer pixels are multiplied with the corresponding pixels in the bottom layer, resulting in a darker image. The code is assumed to be in a file named multiply.ts.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/blendMode.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/blendMode/multiply.ts\n```\n\n----------------------------------------\n\nTITLE: Editor Config Around Center Scaling TypeScript\nDESCRIPTION: This code snippet demonstrates how to configure the editor to scale around the center point in Leaferjs. It sets the 'around' property to 'center', which corresponds to {x:0.5, y: 0.5}, ensuring scaling is performed relative to the element's center.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/config/control.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/editor/config/around.ts\n```\n\n----------------------------------------\n\nTITLE: Enable Decorators in tsconfig.json (TypeScript)\nDESCRIPTION: This snippet demonstrates how to enable decorator support in a TypeScript project by setting the `experimentalDecorators` option to `true` within the `compilerOptions` section of the `tsconfig.json` file. This is a prerequisite for using decorators to register editing tools.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/editOuter/register.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"experimentalDecorators\": true // 开启装饰器功能\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Plugin in a Web Environment (TypeScript)\nDESCRIPTION: This TypeScript code snippet shows how to import and use a LeaferJS plugin in a web environment. It imports `Leafer` and `Rect` from `leafer-ui`, and `Selector` and `SelectEvent` from `leafer-x-selector`, and then initializes the `Selector` plugin. Requires importing `leafer-x-selector` after `leafer-ui`.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/dev.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Leafer, Rect } from 'leafer-ui'\nimport { Selector, SelectEvent } from 'leafer-x-selector' // 必需在leafer-ui之后导入\n\n// 具体逻辑\nconst selector = new Selector()\n```\n\n----------------------------------------\n\nTITLE: Getting Bounds and Layout Points - Typescript\nDESCRIPTION: This code snippet demonstrates how to retrieve bounds and layout points for a rectangle using different coordinate systems and bounds types in Leafer.js. It showcases the usage of `getBounds`, `getLayoutBounds`, and `getLayoutPoints` methods with various parameters.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/bounds.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype ILocationType = 'world' | 'local' | 'inner' // 坐标体系\ntype IBoundsType = 'content' | 'box' | 'stroke' | 'margin' | 'render' // 边界类型\n\nrect.getBounds('box', 'local')\nrect.getLayoutBounds('box', 'inner')\nrect.getLayoutPoints('box', rect.leafer)\n\n// 结合Bounds使用\nnew Bounds(rect.getBounds('box', 'local'))\n```\n\n----------------------------------------\n\nTITLE: Dragging DOM Element to Frame (TypeScript)\nDESCRIPTION: This TypeScript code snippet demonstrates dragging a DOM element onto a Leafer.js Frame and creating a corresponding graphic element. Similar to the previous example, it utilizes browser native coordinate conversion methods, but specifically targets adding the created element to a Frame within the Leafer.js structure. This approach allows precise control over the element's placement within the Leafer.js hierarchy.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/advanced/coordinate.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/advanced/coordinate/browser/drop-frame.ts [添加到 Frame]\n```\n\n----------------------------------------\n\nTITLE: Gradient Transition Animation with LeaferJS (gradient.ts)\nDESCRIPTION: This code snippet demonstrates how to create smooth transitions involving gradients using LeaferJS.  It allows you to animate between solid colors and gradients, or between different types of gradients.  The snippet is part of a plugin that is currently in development. It uses LeaferJS's animation capabilities to create dynamic gradient effects.\nSOURCE: https://github.com/leaferjs/docs/blob/main/blog/2024-09-20.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/animate/gradient.ts\n```\n\n----------------------------------------\n\nTITLE: Animate Duration with Animation (Ease)\nDESCRIPTION: Defines the duration property within an animation easing configuration in Leafer.js.  It shows how to specify a duration for a standard animation using the `animation` method. The duration property controls how long the animation takes to complete.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/animate/options/duration.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/animate/options/duration/animation/ease.ts [animation]\n```\n\n----------------------------------------\n\nTITLE: Pick Element by Point\nDESCRIPTION: Demonstrates how to use the `pick` method in Leafer.js to pick an element at a specific point. It utilizes the `IPointData` interface to represent the point and the `IPickOptions` interface to configure the picking behavior, such as enabling through-picking. The `IPickResult` interface provides information about the picked element and its path.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/pick.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IPickOptions {\n  hitRadius?: number // 拾取半径， 默认为0\n  through?: boolean // 是否获取穿透路径，默认为false\n  findList?: ILeaf[] // 从指定的元素列表中拾取\n  exclude?: ILeafList // 排除指定的元素\n  ignoreHittable?: boolean // 忽略元素的hittable属性，默认为false\n}\n\ninterface IPickResult {\n  target: ILeaf // 拾取到的目标元素\n  path: ILeafList // 拾取路径，一般用于事件冒泡\n  throughPath?: ILeafList // 穿透路径，可以找到被目标元素遮挡的底部元素\n}\n```\n\n----------------------------------------\n\nTITLE: Remove UI Element - LeaferJS - TypeScript\nDESCRIPTION: Removes the current UI element from its parent. This code snippet demonstrates the basic usage of the `remove()` method to remove an element.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/remove.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/basic/remove/remove.ts\n```\n\n----------------------------------------\n\nTITLE: Getting Canvas Object\nDESCRIPTION: This snippet shows how to access the canvas object associated with a Leafer instance. The canvas object provides a platform-agnostic interface for interacting with the underlying rendering surface, allowing you to draw directly onto the canvas.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Leafer.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Listening to Editor Select Event - Typescript\nDESCRIPTION: This code snippet demonstrates how to listen to the `EditorEvent.SELECT` event in LeaferJS using Typescript. It uses `app.editor.on()` to register a callback function that will be executed when a selection event occurs.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/event/EditorEvent.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/editor/event/select.ts\n```\n\n----------------------------------------\n\nTITLE: Locking Aspect Ratio with lockRatio Property (Typescript)\nDESCRIPTION: This code snippet demonstrates how to use the `lockRatio` property to maintain the aspect ratio of a Leafer UI element when its width and height are automatically adjusted. The `lockRatio` property is set to `true` to enable aspect ratio preservation. The code is written in Typescript.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/flow/Flow/lockRatio.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/flow/lockRatio/lock.ts\n```\n\n----------------------------------------\n\nTITLE: Filtering Debug Messages - Leaferjs (Typescript)\nDESCRIPTION: This code snippet shows how to filter debug messages based on their type using the `Debug.filter` property.  It allows you to specify which types of messages (e.g., 'RunTime', 'Life') should be printed to the console.  The expected input is a string or an array of strings representing the message types to include.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/debug/basic.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nDebug.filter = 'RunTime' // or ['RunTime', 'Life']\n```\n\n----------------------------------------\n\nTITLE: Adding Mouse Hover Event Listener\nDESCRIPTION: This code snippet demonstrates how to add mouse enter and leave event listeners to a rectangle in Leafer.js. It showcases the basic usage of event handling for creating interactive effects.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/basic/event.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<<< @/code/basic/event/hover.js#listen\n```\n\n----------------------------------------\n\nTITLE: Animate Loop with Ease\nDESCRIPTION: Demonstrates how to implement looping animations using easing functions in Leaferjs. The snippets cover different animation types like 'animation', 'transition', 'set', and 'animate', showcasing the application of ease functions within each. These are used to configure how the animation progresses during each loop iteration.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/animate/options/loop.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nRefer to @/code/plugin/animate/options/loop/animation/ease.ts for animation code.\n```\n\nLANGUAGE: typescript\nCODE:\n```\nRefer to @/code/plugin/animate/options/loop/transition/ease.ts for transition code.\n```\n\nLANGUAGE: typescript\nCODE:\n```\nRefer to @/code/plugin/animate/options/loop/set/ease.ts for set code.\n```\n\nLANGUAGE: typescript\nCODE:\n```\nRefer to @/code/plugin/animate/options/loop/animate/ease.ts for animate code.\n```\n\nLANGUAGE: typescript\nCODE:\n```\nRefer to @/code/plugin/animate/options/loop/ease.ts for Animate code.\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Properties (leafer-in/flow/flow.ts)\nDESCRIPTION: Imports leafer and combines various Flow layout properties in a single example. This code snippet provides a comprehensive demonstration of different attributes working together.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/flow/index.md#_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\n<<< @/code/plugin/flow/flow.ts\n```\n\n----------------------------------------\n\nTITLE: Stopping Event Propagation - Javascript\nDESCRIPTION: Demonstrates how to stop event propagation to parent nodes using the `stop()` method in Leaferjs with Javascript.  Requires Leaferjs library to be installed.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/event/flow.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n<<< @/code/event/stop.js\n```\n\n----------------------------------------\n\nTITLE: Listening to Animation Events (Transition)\nDESCRIPTION: This code snippet demonstrates listening for animation events specifically within a transition animation context in Leafer.js. It provides an example implementation for handling events like 'created', 'play', 'pause', 'stop', 'seek', 'update', and 'completed' when a transition animation is running.  The event handlers can be used to perform actions at different points in the transition's lifecycle.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/animate/options/event.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/animate/options/event/transition/ease.ts [transition]\n```\n\n----------------------------------------\n\nTITLE: Listening for Image Error Event (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to listen for the image error event using JavaScript. This allows you to handle cases where the image fails to load.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Image.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n<<< @/code/event/image/error.js\n```\n\n----------------------------------------\n\nTITLE: Initializing Events\nDESCRIPTION: This code snippet shows how to initialize and listen to events in Leafer.js by passing an event object. This approach enables rapid event listener setup. Note that the event object cannot be exported as JSON.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/basic/event.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/basic/event/event.ts#listen\n```\n\n----------------------------------------\n\nTITLE: Extending Group to create Custom Element (Leafer.js)\nDESCRIPTION: Demonstrates creating a custom element by inheriting from the Group element in Leafer.js.  This allows grouping multiple elements together into a single custom element. Requires importing Leafer, Group, and Rect.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/custom/extends.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Leafer, Group, Rect } from 'leafer-ui'\n\nconst leafer = new Leafer({\n    view: document.querySelector('#app'),\n    width: 400,\n    height: 300,\n    autoRender: false\n})\n\nclass CustomGroup extends Group {\n    constructor() {\n        super()\n        this.add(new Rect({ x: 10, y: 10, width: 50, height: 50, fill: 'green' }))\n        this.add(new Rect({ x: 70, y: 10, width: 50, height: 50, fill: 'yellow' }))\n    }\n}\n\nleafer.add(new CustomGroup())\n\nleafer.render()\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Scale in Leafer.js (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to set and get the scale of an element in Leafer.js using the `scale` property. It shows how to set uniform scaling using a number and non-uniform scaling using an object with `x` and `y` properties.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/layout.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nleaf.scale = 2 // scaleX = 2, scaleY = 2\nconsole.log(leaf.scale) // 2\n\nleaf.scale = { x: 1, y: 2 } // scaleX = 1, scaleY = 2\nconsole.log(leaf.scale) // {x:1, y: 2}\n```\n\n----------------------------------------\n\nTITLE: Animation Style Transition Interface\nDESCRIPTION: Defines the interface for a style transition animation in Leaferjs. It extends the IAnimateOptions interface and includes a 'style' property that specifies the UI style to animate.  Requires the animate plugin. It defines the structure for animating UI styles.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/animation.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IStyleAnimation extends IAnimateOptions {\n  style: IUIInputData // 元素样式\n  // ...动画选项属性\n}\n```\n\n----------------------------------------\n\nTITLE: Leafer App Editor Frame Example (simple.ts)\nDESCRIPTION: This simplified code snippet demonstrates a basic setup of an editor frame using Leafer's App component, providing a minimal implementation.  It aims to highlight the core concepts and structure without the complexity of the full example. It is part of a larger example illustrating the usage of the graphics editor plugin.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/App.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/editor/frame/simple.ts [简化]\n```\n\n----------------------------------------\n\nTITLE: Transform Element Using Editor Methods (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to use the `scaleOf`, `rotateOf`, and `skewOf` methods of the Leaferjs editor to transform a selected element. It calculates the necessary adjustments based on the element's current properties to achieve a desired transformation.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/Editor/transform.md#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n// 当前选中元素\nconst { element } = app.editor\n\n// 想缩放到指定 scale， 需除以元素当前 scale，如下：\napp.editor.scaleOf('center', 1.5 / element.scale)\n\n// 想旋转到指定 rotation， 需减去元素当前 rotation，如下：\napp.editor.rotateOf('center', 45 - element.rotation)\n\n// 想倾斜到指定 skewX， 需减去元素当前 skewX，如下：\napp.editor.skewOf('center', 45 - element.skewX)\n```\n\n----------------------------------------\n\nTITLE: Application Destruction in Leafer.js (TypeScript)\nDESCRIPTION: Demonstrates how to completely destroy a Leafer.js application instance. This involves releasing all resources, including display objects, event listeners, and other application-related data. This should be done when the application is no longer needed to prevent memory leaks.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/basic/remove.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/basic/remove/destroy-leafer.ts\n```\n\n----------------------------------------\n\nTITLE: Creating Graphic Modes in Leaferjs Editor (JavaScript)\nDESCRIPTION: This JavaScript code snippet shows how to create custom graphic creation modes in Leaferjs editor plugin. It likely involves setting up a state or context which enables users to add graphic primitives through interactions within the editor. Dependencies may include Leaferjs core library.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/index.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n<<< @/code/plugin/editor/create-mode.js\n```\n\n----------------------------------------\n\nTITLE: Using Internal Editor (JavaScript)\nDESCRIPTION: This JavaScript code snippet provides an example of using an internal editor within Leaferjs. It showcases how to configure the internal editor and observe its effect on element editing and interaction.  This includes potentially setting the 'editInner' property.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/editInner/use.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<<< @/code/plugin/editor/editInner/use/index.js\n```\n\n----------------------------------------\n\nTITLE: Center Flow Alignment Typescript\nDESCRIPTION: This snippet demonstrates centering child elements within the Flow layout by setting the `flowAlign` property to `'center'`.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/flow/Flow/flowAlign.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/flow/flowAlign/center.ts\n```\n\n----------------------------------------\n\nTITLE: Drawing Line to a Target Point - Leafer Component (TypeScript)\nDESCRIPTION: This code snippet (Leafer part) creates a line that extends to a specified target point using Leafer.js. It shows the Leafer component's implementation.  The complete example also comprises a separate 'App' component for integration.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Line.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Line/lineto.ts [Leafer]\n```\n\n----------------------------------------\n\nTITLE: Image with Fixed Width, Auto Height (App)\nDESCRIPTION: This code snippet demonstrates how to set a fixed width for the Image element, while the height adjusts automatically to maintain the aspect ratio within an App environment.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Image.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Image/app/width.ts\n```\n\n----------------------------------------\n\nTITLE: Pen Tool Implementation (JavaScript)\nDESCRIPTION: This code snippet provides the JavaScript equivalent of the pen tool implementation. It offers the same functionality as the TypeScript version, drawing lines and enabling canvas manipulation using LeaferJS. The complete code is located at `@/code/display/Pen/draw.js`.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/event/ui/Drag.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<<< @/code/display/Pen/draw.js\n```\n\n----------------------------------------\n\nTITLE: Creating and Setting Rect Width/Height in LeaferJS (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to create a Rect element in LeaferJS and set its width and height properties. It shows the basic usage of the width and height attributes for a rectangle.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/size.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Rect/rect.ts\n```\n\n----------------------------------------\n\nTITLE: Set element properties using set() - TypeScript\nDESCRIPTION: This code snippet demonstrates how to set element properties using the `set()` method in Leafer. It shows how to update the x and y coordinates of a rectangle.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/data.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// 设置 x、y 属性\nrect.set({ x: 100, y: 200 })\n```\n\n----------------------------------------\n\nTITLE: Linear Gradient Fill\nDESCRIPTION: This code snippet demonstrates how to apply a linear gradient fill to a LeaferJS UI element.  It shows how to configure the gradient stops and colors.  It depends on the LeaferJS paint module and related configurations for gradients.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/fill.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/fill/linear/a.ts\n```\n\n----------------------------------------\n\nTITLE: Transition Button Component - TypeScript\nDESCRIPTION: This snippet demonstrates how to implement transition effects for a button component in LeaferJS. It requires the animation plugin to be installed. The component uses properties to define the transition.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/plugin/state.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/transition/button.ts\n```\n\n----------------------------------------\n\nTITLE: Element Edit Outer - TypeScript\nDESCRIPTION: Illustrates how to set the `editOuter` property of an element to define the outer editing tool used for manipulating its size and shape.  The example mentions the default tool and an option for customization.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/editable.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/editor/editable/editOuter.ts\n```\n\n----------------------------------------\n\nTITLE: Handling Selection Events in Leaferjs Editor (TypeScript)\nDESCRIPTION: This TypeScript code snippet demonstrates how to handle selection events within the Leaferjs editor plugin. It showcases the implementation for capturing and processing select events, likely involving event listeners and corresponding handler functions.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/index.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/editor/event/select.ts\n```\n\n----------------------------------------\n\nTITLE: Creating Bounds with data object - Typescript\nDESCRIPTION: This snippet shows how to create a `Bounds` object using an existing data object that conforms to the `{ x, y, width, height }` structure. This method is useful when bounds data is already available in a structured format. It provides an alternative to passing individual arguments.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/math/Bounds.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nconst boundsData = { x: 0, y: 0, width: 100, height: 100 }\n\nconst bounds = new Bounds(boundsData)\n```\n\n----------------------------------------\n\nTITLE: Animate Seek with Value (seconds) - Typescript\nDESCRIPTION: This code snippet demonstrates how to use the `seek` method of the `Animate` class to jump to a specific time in seconds. It shows how to pass a numeric value (representing seconds) to the `seek` method to control the animation's current time.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/animate/Animate/seek.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/animate/animate/seek/value.ts\n```\n\n----------------------------------------\n\nTITLE: Moving element event example\nDESCRIPTION: This TypeScript code demonstrates how to handle the `EditorMoveEvent.MOVE` event within a Leafer.js application.  It listens for the event on the editor and performs an action when the element is moved. The specific action is not defined in the snippet, but it sets up the event listener.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/event/EditorMoveEvent.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Assuming 'app' is your Leafer app instance and 'editor' is the editor instance.\n\n// Listen for the move event.\napp.editor.on(EditorMoveEvent.MOVE, (e) => {\n  // e.moveX and e.moveY contain the movement distances in world coordinates.\n  // Add your custom logic here to handle the move event.\n  // For example, update other UI elements or perform calculations based on the movement.\n  console.log(`Element moved by X: ${e.moveX}, Y: ${e.moveY}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Moving Element with Animated Transition - LeaferJS (TypeScript)\nDESCRIPTION: Illustrates how to use the `move()` method with a transition to animate the movement of an element. The transition can be specified as a boolean (true for default animation) or a number representing the duration in seconds. It relies on the LeaferJS animation module.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/position.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// 动画过渡移动\nrect.move(10, 10, true)\n\nrect.move(10, 10, 2) // 过渡 2 秒\n```\n\n----------------------------------------\n\nTITLE: Enabling Zoom Mode - App Configuration in Leafer.js\nDESCRIPTION: This code snippet demonstrates how to enable zoom mode using mouse wheel in Leafer.js application. This allows users to directly zoom the view by scrolling the mouse wheel. The zoom is configured using the `wheel.zoomMode` property within the app config.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/config/app/wheel.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/app/viewport/app/zoom-mode.ts [App]\n```\n\n----------------------------------------\n\nTITLE: Setting Padding (leafer-in/flow/padding/padding.ts)\nDESCRIPTION: Imports leafer and demonstrates how to add padding around the content of the flow container using the padding property. This creates space between the container's border and its child elements.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/flow/index.md#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\n<<< @/code/plugin/flow/padding/padding.ts\n```\n\n----------------------------------------\n\nTITLE: Apply selectedStyle to UI Element - Typescript\nDESCRIPTION: This code snippet demonstrates how to apply a specific style to a Leafer UI element when it is in the 'selected' state. It utilizes the `selectedStyle` property to define the styling. This functionality depends on the 'interactive state plugin'.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/state/selected.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/state/selectedStyle.ts\n```\n\n----------------------------------------\n\nTITLE: Defining IEraserType in Typescript\nDESCRIPTION: This Typescript code snippet defines the `IEraserType` type, which specifies the possible types of erasers in Leaferjs. It supports 'path' for high-performance erasing using path clipping and 'pixel' for complex effects using pixel transparency.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/eraser.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype IEraserType =\n  | 'path' // 路径eraser，高性能，使用路径裁剪后擦除\n  | 'pixel' // 像素eraser，使用每个像素的透明度，可以制作出复杂的效果\n```\n\n----------------------------------------\n\nTITLE: Drawing Ellipse Sector Ring\nDESCRIPTION: This code snippet demonstrates how to draw an ellipse sector ring in Leafer.js using the Ellipse element. It showcases the properties needed to create a sector ring shape.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/basic/display.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Ellipse/sectorRing.ts\n```\n\n----------------------------------------\n\nTITLE: Handling Rotate Event (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates a simple implementation for handling rotate events within a LeaferJS application. It shows how to listen for 'rotate' events and access the rotation angle. Requires the viewport plugin to be installed.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/event/ui/Rotate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/event-ui/rotate/simple.ts\n```\n\n----------------------------------------\n\nTITLE: Custom Graphics Demo with Canvas Context (Leafer.js)\nDESCRIPTION: This TypeScript code demonstrates a custom graphic implementation in Leafer.js by directly interacting with the canvas context. It showcases how to define the shape, handle drawing, and manage styles without relying on Leafer's built-in elements. It emphasizes the importance of resetting styles and managing clip and filter effects.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/custom/context.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Custom/demo.ts\n```\n\n----------------------------------------\n\nTITLE: Flow Layout along X axis\nDESCRIPTION: This code snippet, located in '@/code/plugin/flow/flow/x.ts', demonstrates how to use the flow layout with the x-axis in LeaferJS. It shows the configuration required to automatically arrange elements horizontally.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/flow/Flow/flow.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/flow/flow/x.ts\n```\n\n----------------------------------------\n\nTITLE: Skew Cursor Configuration in Leafer (TypeScript)\nDESCRIPTION: This code snippet configures the skew cursor in the Leafer editor. An SVG string, incorporating a rotation based on the `rotation` variable, is defined for the cursor's appearance.  It sets the rotation origin using the x and y coordinates.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/config/cursor.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  url: `\n<svg width=\"24\" height=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n  <g transform=\"rotate(90,12,12),rotate({{rotation}},12,12)\">\n    <path\n      fill-rule=\"evenodd\"\n      d=\"M17 10.4L21 10.4L15.5 6V8.4H6V10.4H15.5H17ZM8.5 14.4H7L3 14.4L8.5 18.9V16.4H19V14.4H8.5Z\"\n      fill=\"black\"\n    />\n  </g>\n</svg>` // svg字符串，{{rotation}}为旋转变量\n  x: 12 // x轴旋转中心点\n  y: 12 // y轴旋转中心点\n}\n```\n\n----------------------------------------\n\nTITLE: Scaling Elements with scaleOf() in LeaferJS (TypeScript)\nDESCRIPTION: This code snippet illustrates how to use the `scaleOf()` method in LeaferJS to incrementally scale an element around a specified origin. It covers scaling around the center point, scaling to a specific scale, and using the transition parameter to animate the scaling process.  The `resize` parameter can be used to translate scale operations to width/height changes.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/scale.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// 围绕中心点继续缩放1.5倍\nrect.scaleOf('center', 1.5)\n\n// 想缩放到指定 scale， 需除以元素当前 scale，如下：\nrect.scaleOf({ x: 50, y: 50 }, 1.5 / rect.scale)\n\n// 动画过渡\nrect.scaleOf('center', 1.5, true) // = rect.scaleOf('center', 1.5, 1.5, false, true)\n\nrect.scaleOf('center', 1.5, { duration: 2 }) // 过渡 2 秒  = rect.scaleOf('center', 1.5, 1.5, false, 2)\n```\n\n----------------------------------------\n\nTITLE: Manually Rotating Elements in Leaferjs Editor (TypeScript)\nDESCRIPTION: This TypeScript code snippet shows how to manually rotate elements within the Leaferjs editor plugin.  It likely involves directly manipulating the transform properties of Leaferjs elements to achieve the desired rotation effect.  Dependencies may include Leaferjs core library and related utility functions.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/index.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/editor/rotate.ts\n```\n\n----------------------------------------\n\nTITLE: Drawing with Leaferjs PathCreator (Typescript)\nDESCRIPTION: Illustrates how to use the Leaferjs PathCreator (pen) to draw paths on an element. The pen modifies the element's `path` property. Important: use pen to complete a drawing sequence immediately after accessing it.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/path.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/path/pen.ts\n```\n\n----------------------------------------\n\nTITLE: Adding dataType Property to Text Element (addAttr)\nDESCRIPTION: Illustrates how to add a `dataType` property to a text element using the `addAttr` method. Properties defined with `dataType` won't trigger re-layout or re-rendering when their values change. This is suitable for properties that affect only the underlying data without visual impact.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/custom/addAttr.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/custom/addAttr-datatype.ts\n```\n\n----------------------------------------\n\nTITLE: Export Element to File (Image)\nDESCRIPTION: Demonstrates how to export a LeaferJS element to an image file using the asynchronous `export` method. Requires the LeaferJS export plugin.  The `export` function is called on a Leafer element instance, exporting it as a file.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/basic/export.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/export/file.ts\n```\n\n----------------------------------------\n\nTITLE: Custom State Implementation - TypeScript\nDESCRIPTION: This snippet showcases how to implement custom states for UI elements in LeaferJS. It requires the state plugin to be installed. The component defines different states and transitions between them.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/plugin/state.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/state/state.ts\n```\n\n----------------------------------------\n\nTITLE: Creating Shapes in Editor - TypeScript\nDESCRIPTION: This code snippet demonstrates how to create shapes in an editor using TypeScript, showcasing the interaction between bounding boxes and coordinate systems. It involves drawing rectangles on a canvas and ensuring they are accurately placed even after scaling or translating the view. This snippet likely uses mouse events (drag start/end) to define the rectangle's boundaries and relies on LeaferJS API for drawing shapes.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/advanced/bounds.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/editor/create-mode.ts\n```\n\n----------------------------------------\n\nTITLE: Installing Leafer.js Viewport with NPM\nDESCRIPTION: This command installs the @leafer-in/viewport package using npm.  It adds the viewport plugin to your project, enabling zoom and pan viewport functionality. After installation, you can use the viewport API in your Leafer.js application.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/viewport/index.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @leafer-in/viewport\n```\n\n----------------------------------------\n\nTITLE: Defining Hit Types for Stroke in LeaferJS (TypeScript)\nDESCRIPTION: This TypeScript code snippet defines the `IHitType` type, which specifies the interaction type for an element's stroke in LeaferJS. It includes options for path-based collision detection, pixel-based collision detection (excluding transparent pixels), always colliding with the stroke, or never colliding with the stroke.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/hitStroke.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype IHitType =\n  | 'path' // 碰撞可见 stroke 的路径形状\n  | 'pixel' // 碰撞可见 stroke 的像素点（排除 PNG/SVG 图片中的透明像素）\n  | 'all' // 总是碰撞 stroke, 即使不可见\n  | 'none' // 不碰撞 stroke\n```\n\n----------------------------------------\n\nTITLE: Path Creation - Cafe Example (App)\nDESCRIPTION: This snippet, presumably from '@/code/display/Path/app/cafe.ts', shows the application-level code for integrating the path element. It provides the context in which the Leafer path creation code is used.  It's designed to run within the 'App' context.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Path.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Path/app/cafe.ts [App]\n```\n\n----------------------------------------\n\nTITLE: Animation with Join: Ease Example (Animate)\nDESCRIPTION: This TypeScript code snippet demonstrates the usage of the 'join' property in Leaferjs when using the `animate` method directly on a Leafer element. It showcases how to configure an animation to include the element's initial state as a keyframe, thereby creating a smooth transition from the initial state to the defined target values.  This example specifically focuses on animating properties like 'x', 'y', and 'fill' with easing.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/animate/options/join.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Leafer, Circle } from '@leafer/core'\nimport { Render } from '@leafer/render'\n\nLeafer.use(Render)\n\nconst leafer = new Leafer({ view: true, width: 200, height: 200 })\n\nconst circle = new Circle({ x: 50, y: 50, radius: 20, fill: 'red' })\nleafer.add(circle)\n\ncircle.animate({\n    join: true,\n    duration: 2,\n    iterations: Infinity,\n    values: {\n        x: [50, 150],\n        y: [50, 150],\n        fill: ['red', 'blue']\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Group Element\nDESCRIPTION: This code snippet demonstrates how to create a Group element in Leafer.js. It illustrates how to group multiple child elements together for collective transformations and positioning.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/basic/display.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Group/create.ts\n```\n\n----------------------------------------\n\nTITLE: MoveEvent Simple Example (JavaScript)\nDESCRIPTION: Demonstrates a simple implementation of the MoveEvent using JavaScript. This example likely showcases how to listen for move events and handle the moveX and moveY properties to update the position of an element. It assumes the Viewport plugin is installed.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/event/ui/Move.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<<< @/code/event-ui/move/simple.js\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Leafer Instance in a Mini Program\nDESCRIPTION: This code demonstrates how to create a basic Leafer instance and add a draggable rectangle to it within a Mini Program. It initializes Leafer with a view and eventer, creates a Rect object with specified properties (position, size, color, and draggable behavior), and adds the rectangle to the Leafer instance.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/ui/miniapp/start.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Leafer, Rect } from '@leafer-ui/miniapp'\n\nPage({\n  onReady() {\n    // this 为当前小程序页面实例\n    const leafer = new Leafer({ view: 'leafer', eventer: this })\n\n    const rect = new Rect({\n      x: 100,\n      y: 100,\n      width: 100,\n      height: 100,\n      fill: '#32cd79',\n      draggable: true,\n    })\n\n    leafer.add(rect)\n  },\n  receiveEvent() {}, // 约定接收交互事件的方法名\n})\n```\n\n----------------------------------------\n\nTITLE: Export with Watermark\nDESCRIPTION: Illustrates how to add a watermark to the exported image of a LeaferJS element using the `onCanvas` option.  The `onCanvas` function allows custom drawing on the canvas before exporting, enabling watermarks or other modifications. Requires the LeaferJS export plugin.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/basic/export.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/export/onCanvas.ts\n```\n\n----------------------------------------\n\nTITLE: Drop Element to Group (Typescript)\nDESCRIPTION: This TypeScript code snippet demonstrates how to use the `dropTo` function to move a UI element to a new parent Group within the Leaferjs framework. It allows specifying the index within the parent Group where the element will be placed. The element's world position remains unchanged during the transfer.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/dropTo.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/event-ui/drop/simple.ts\n```\n\n----------------------------------------\n\nTITLE: Rounded Corner Radius Configuration - Typescript\nDESCRIPTION: This code snippet shows how to configure different corner radius values for a rounded rectangle in Leaferjs using Typescript. It demonstrates the different ways to specify corner radius values.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Rect.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncornerRadius: [20, 10, 20, 10] // [topLeft, topRight, bottomRight, bottomLeft]\ncornerRadius: [20, 10, 20] // [topLeft, (topRight-bottomLeft), bottomRight]\ncornerRadius: [20, 10] // [ (topLeft-bottomRight), (topRight-bottomLeft)]\ncornerRadius: 20 // all\n```\n\n----------------------------------------\n\nTITLE: Using innerRadius for ring creation\nDESCRIPTION: Explains the use of `innerRadius` to create rings or annular sectors with Ellipse. `innerRadius` specifies the ratio of the inner radius to the outer radius, with values ranging from 0.0 to 1.0.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Ellipse.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// 圆环\ninnerRadius: 0.5\n```\n\n----------------------------------------\n\nTITLE: Cloning Leafer element with position setting (TypeScript)\nDESCRIPTION: This example demonstrates how to clone a Leafer UI element and set its position. The `clone` method is used to create a copy, and the `x` and `y` properties are modified to position the cloned element.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/clone.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/clone/clone.ts\n```\n\n----------------------------------------\n\nTITLE: Creating Graphic Modes in Leaferjs Editor (TypeScript)\nDESCRIPTION: This TypeScript code snippet shows how to create custom graphic creation modes in Leaferjs editor plugin. It likely involves setting up a state or context which enables users to add graphic primitives through interactions within the editor.  Dependencies may include Leaferjs core library.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/index.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/editor/create-mode.ts\n```\n\n----------------------------------------\n\nTITLE: Center with Top Y-Axis Alignment Typescript\nDESCRIPTION: Example showing centering the main content and aligning the y-axis to the top (from). This likely involves using the `IFlowAxisAlign` interface with `content` set to `'center'` and `y` set to `'from'`.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/flow/Flow/flowAlign.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/flow/flowAlign/y/from.ts\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Scale Properties in LeaferJS (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to set and get the scaleX and scaleY properties of a LeaferJS element using the unified 'scale' property. It shows how to assign a number to set both scaleX and scaleY equally, and how to assign an object with 'x' and 'y' properties for independent scaling.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/scale.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nrect.scale = 2 // scaleX = 2, scaleY = 2\nconsole.log(rect.scale) // 2\n\nrect.scale = { x: 1, y: 2 } // scaleX = 1, scaleY = 2\nconsole.log(rect.scale) // {x:1, y: 2}\n```\n\n----------------------------------------\n\nTITLE: Customizing Circle Control Point\nDESCRIPTION: This snippet shows how to customize the circle control point, allowing you to define its style and functionality. The example demonstrates creating a custom button with a pointer cursor and a tap event that triggers an alert.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/config/style.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ncircle: {\n  pointType: 'button',\n  cursor: 'pointer',\n  event: {\n    tap: function () {\n      alert('button')\n    },\n  },\n}, // 变为自定义按钮\n```\n\n----------------------------------------\n\nTITLE: Animation with Join: Ease Example (Animate Class)\nDESCRIPTION: This TypeScript code snippet illustrates how to use the 'join' property within the `Animate` class to control whether the starting state of an animated element is included as a keyframe.  It emphasizes the creation of an `Animate` instance and its configuration with the `join` property, affecting how the animation initializes. It shows animating x, y, and fill properties.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/animate/options/join.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Leafer, Circle, Animate } from '@leafer/core'\nimport { Render } from '@leafer/render'\n\nLeafer.use(Render)\n\nconst leafer = new Leafer({ view: true, width: 200, height: 200 })\n\nconst circle = new Circle({ x: 50, y: 50, radius: 20, fill: 'red' })\nleafer.add(circle)\n\nconst animate = new Animate(circle, {\n    join: true,\n    duration: 2,\n    iterations: Infinity,\n    values: {\n        x: [50, 150],\n        y: [50, 150],\n        fill: ['red', 'blue']\n    }\n})\n\nanimate.play()\n```\n\n----------------------------------------\n\nTITLE: Clearing Element Content in LeaferJS (TypeScript)\nDESCRIPTION: This snippet illustrates how to clear all children from a LeaferJS element without destroying the element itself. It iterates through the children and destroys them individually. It depends on the Leafer and UI elements from `leafer-ui`.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/destroy.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// clear.ts\nimport { Leafer, UI } from 'leafer-ui'\n\nconst leafer = new Leafer({ width: 300, height: 200, });\ndocument.body.appendChild(leafer.view)\n\nconst box = new UI()\nbox.width = 100\nbox.height = 60\nbox.x = 50\nbox.y = 30\nleafer.add(box)\n\nconst child = new UI()\nchild.width = 30\nchild.height = 30\nchild.x = 10\nchild.y = 10\nbox.add(child)\n\nsetTimeout(() => {\n    box.children.forEach(item => item.destroy())\n}, 1000)\n```\n\n----------------------------------------\n\nTITLE: Listening to Editor Select Event - Typescript\nDESCRIPTION: This code snippet demonstrates how to listen to the `EditorEvent.SELECT` event in Leaferjs. This event is triggered when an element is selected or deselected in the editor. The `editor.target` property can be used to retrieve the selected element.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/Event.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/editor/event/select.ts\n```\n\n----------------------------------------\n\nTITLE: Reverse Animation with Ease (Set)\nDESCRIPTION: Illustrates how to directly set a property in reverse using the 'reverse' property with the Leafer.js Animate plugin. This snippet shows how to reverse the direction of a property update using set functionality and easing effects. It involves using set options with animation properties.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/animate/options/reverse.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/animate/options/reverse/set/ease.ts [set]\n```\n\n----------------------------------------\n\nTITLE: Incremental Rotation with rotateOf method - Typescript\nDESCRIPTION: This code snippet demonstrates how to use the `rotateOf` method to rotate an element incrementally around a specified origin point.  It shows examples with a string origin ('center'), an IPointData object ({ x: 50, y: 50 }), and with different `transition` options (boolean or number for duration). It requires a `rect` object representing the UI element.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/rotation.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// 围绕中心点继续旋转 45度\nrect.rotateOf('center', 45)\n\n// 想旋转到指定 rotation， 需减去元素当前 rotation，如下：\nrect.rotateOf({ x: 50, y: 50 }, 45 - rect.rotation)\n\n// 动画过渡\nrect.rotateOf('center', 45, true)\n\nrect.rotateOf('center', 45, 2) // 过渡 2 秒\n```\n\n----------------------------------------\n\nTITLE: Animate Loop Count\nDESCRIPTION: Shows how to control the number of loop iterations in Leaferjs animations. The examples illustrate how to set a specific loop count for different animation types ('animation', 'transition', 'set', 'animate'). This involves specifying the desired number of repetitions for the animation sequence.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/animate/options/loop.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nRefer to @/code/plugin/animate/options/loop/animation/count.ts for animation code.\n```\n\nLANGUAGE: typescript\nCODE:\n```\nRefer to @/code/plugin/animate/options/loop/transition/count.ts for transition code.\n```\n\nLANGUAGE: typescript\nCODE:\n```\nRefer to @/code/plugin/animate/options/loop/set/count.ts for set code.\n```\n\nLANGUAGE: typescript\nCODE:\n```\nRefer to @/code/plugin/animate/options/loop/animate/count.ts for animate code.\n```\n\nLANGUAGE: typescript\nCODE:\n```\nRefer to @/code/plugin/animate/options/loop/count.ts for Animate code.\n```\n\n----------------------------------------\n\nTITLE: Leaferjs Editor Full Example (TypeScript)\nDESCRIPTION: Demonstrates the underlying implementation principles of the Leaferjs editor plugin using TypeScript. This provides insights into how the editor functions internally.  It assumes a basic Leaferjs project setup is already in place.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/index.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/editor/full.ts [实现原理]\n```\n\n----------------------------------------\n\nTITLE: Drawing a Rounded Hexagon with Polygon - Typescript (Leafer)\nDESCRIPTION: This code snippet (from corner.ts) shows how to draw a rounded hexagon using the Polygon element in Leafer.js by utilizing the `cornerRadius` property. The content is included dynamically using the <<< syntax.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Polygon.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Polygon/corner.ts [Leafer]\n```\n\n----------------------------------------\n\nTITLE: Locking and Unlocking Layout\nDESCRIPTION: This code snippet shows how to lock and unlock the layout of a Leafer instance. Locking the layout prevents updates, allowing for multiple modifications before a single layout update, improving performance for large lists.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Leafer.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nleafer.lockLayout()\n\nlist.forEach((target) => {\n  // 拦截多次布局： rotateOf会产生布局数据修改，getInnerPoint发现布局有变化，会再请求布局\n  target.rotateOf(target.getInnerPoint(worldOrigin), rotation)\n})\n\nleafer.unlockLayout()\n```\n\n----------------------------------------\n\nTITLE: Setting focusStyle in Leafer.js (TypeScript)\nDESCRIPTION: This snippet demonstrates setting the `focusStyle` property on a Leafer element using TypeScript.  The `focusStyle` defines the visual appearance of the element when it receives focus. It uses IUIInputData to specify styles such as fill, stroke, and other visual properties.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/state/focus.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/state/focusStyle.ts\n```\n\n----------------------------------------\n\nTITLE: Customizing Point Styles and Events\nDESCRIPTION: This snippet illustrates customizing control points with specific styles and events. It demonstrates how to create a custom button with an image fill and a tap event that triggers an alert. It also shows how to define different point types like rotate, resize-rotate, and skew.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/config/style.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\npoint: [\n  {\n    // 支持 Box 元素的所有属性\n    pointType: 'button', // 变为自定义按钮\n    event: {\n      tap: function () {\n        alert('button')\n      },\n    },\n    fill: {\n      // 使用图片\n      type: 'image',\n      url: '/image/leafer.jpg',\n    },\n  },\n  { pointType: 'rotate' }, // 变为旋转按钮\n  { pointType: 'resize-rotate' }, // 变为 resize + 旋转按钮\n  { pointType: 'skew' }, // 变为倾斜按钮\n]\n```\n\n----------------------------------------\n\nTITLE: Animate Class with Delay\nDESCRIPTION: Shows how to integrate the delay property within the Leaferjs Animate class. This snippet demonstrates the usage of delay within the context of the overall Animate class and its configuration.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/animate/options/delay.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/animate/options/delay/ease.ts [Animate]\n```\n\n----------------------------------------\n\nTITLE: Setting Properties Using JSON\nDESCRIPTION: Shows how to update the properties of an existing Leafer element using a JSON object. This approach uses the `set` method to apply the JSON data to the element's properties, allowing for dynamic updates.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/json.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Float Property to Text Element (addAttr)\nDESCRIPTION: Demonstrates how to use `addAttr` to add a custom float property to a text element. This showcases the basic syntax and usage of the `addAttr` method for extending element properties in Leaferjs.  It illustrates adding a property that can influence layout and rendering.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/custom/addAttr.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/custom/addAttr.ts\n```\n\n----------------------------------------\n\nTITLE: Finding elements by ID in Leafer.js\nDESCRIPTION: This snippet demonstrates how to find UI elements by their ID within a Leafer.js application. It utilizes the `find` method with the `id` property to locate the desired element. The code is written in TypeScript.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/find.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/find/id.ts\n```\n\n----------------------------------------\n\nTITLE: Check if Element is Being Dragged (TypeScript)\nDESCRIPTION: This code snippet shows how to check if a specific element is currently being dragged in LeaferJS. It uses the `leafer.interaction.isDrag(leaf)` method, which returns a boolean value indicating whether the element `leaf` is being dragged. This functionality is crucial for implementing drag-and-drop interactions.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/event/ui/Drag.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nleafer.interaction.isDrag(leaf)\n```\n\n----------------------------------------\n\nTITLE: Drawing Vertical Line - Leafer Component (TypeScript)\nDESCRIPTION: This code snippet (Leafer part) focuses on the Leafer component implementation for drawing a vertical line using Leafer.js. The snippet forms a segment of a bigger example that usually involves an additional 'App' component to facilitate integration.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Line.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Line/vertical.ts [Leafer]\n```\n\n----------------------------------------\n\nTITLE: Using Rect Instead of Image (Leafer)\nDESCRIPTION: This code snippet showcases how to use the Rect element as a substitute for the Image element when setting the fill property. The Rect element automatically adapts to the image dimensions even without specifying width and height. It supports multiple fills and offers greater flexibility for image styling.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Image.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Image/rect.ts\n```\n\n----------------------------------------\n\nTITLE: Waiting for Leafer Instance in UI Element (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to use the `waitLeafer` method to execute a callback function when an element has the `leafer` property assigned. This is useful for performing actions that require access to the Leafer instance after the element has been added to the application. The `bind` parameter can be used to specify the `this` context for the callback function. It waits until a UI element has its `leafer` property set before executing the provided function.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/leafer.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/leafer/wait.ts\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Editor Configuration (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to access a custom editor's configuration within the Leaferjs application. It uses the `app.editor.mergeConfig.anyEditor` path to retrieve the configuration object. This shows how to extend editor configurations for various custom editors.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/config/innerEditor.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// 内部通过此方式访问\napp.editor.mergeConfig.anyEditor\n```\n\n----------------------------------------\n\nTITLE: Creating a Frame Element\nDESCRIPTION: This code snippet demonstrates how to create a Frame element in Leafer.js. It shows how to create a frame with a white background and clipping of content that exceeds width and height, similar to an HTML page.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/basic/display.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Frame/create.ts\n```\n\n----------------------------------------\n\nTITLE: BlendMode Screen Example Typescript\nDESCRIPTION: Example code demonstrating the 'screen' blend mode. The pixels are inverted, multiplied, and then inverted again, resulting in a brighter image (opposite of multiply). The code is assumed to be in a file named screen.ts.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/blendMode.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/blendMode/screen.ts\n```\n\n----------------------------------------\n\nTITLE: Listening to Animation Events via on() (Animate - Overall)\nDESCRIPTION: This code snippet illustrates using the on() method to listen for animation events with the main Animate class in Leafer.js.  It provides the implementation of the listeners for various animation events such as created, play, pause, stop, seek, update and completed.  This technique is analogous to the standard event listening practices used for elements, providing a familiar interface for handling animations.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/animate/options/event.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/animate/options/event/on.ts [Animate]\n```\n\n----------------------------------------\n\nTITLE: Creating Matrix via Property Values - Typescript\nDESCRIPTION: Creates a new Matrix object with specific property values (a, b, c, d, e, f). This snippet shows how to initialize a Matrix with scale and translation values using the constructor's numerical arguments.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/math/Matrix.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Matrix } from 'leafer-ui'\n\nconst matrix = new Matrix(2, 0, 0, 2, 100, 100)\n```\n\n----------------------------------------\n\nTITLE: Creating a Box Element\nDESCRIPTION: This code snippet demonstrates how to create a Box element in Leafer.js. It shows how to create a box with similar functionality to a Group, but also with rect appearance styles.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/basic/display.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Box/create.ts\n```\n\n----------------------------------------\n\nTITLE: Element Edit Inner - TypeScript\nDESCRIPTION: Shows how to set the `editInner` property of an element to define the inner editing tool used for manipulating its internal details such as paths or text.  The example mentions default inner editors for different types of elements and customization options.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/editable.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/editor/editable/editInner.ts\n```\n\n----------------------------------------\n\nTITLE: Including Leafer.js View Plugin via Script Tag (Minified)\nDESCRIPTION: This HTML snippet includes the minified version of the `@leafer-in/view` plugin via a script tag.  It makes the plugin functionalities accessible through the global variable `LeaferIN.view`. The minified version is smaller, leading to faster load times.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/view/index.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/@leafer-in/view@1.5.3/dist/view.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Setting a circle as mask - Typescript\nDESCRIPTION: This code snippet demonstrates how to set a circle as a mask in Leaferjs using Typescript. It is intended to be used within a Leaferjs project, and no external dependencies outside of the Leaferjs library are needed.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/mask.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/mask/ui.ts\n```\n\n----------------------------------------\n\nTITLE: Drawing Curves with Pen - Leafer\nDESCRIPTION: This snippet illustrates how to draw curves using the Pen element in Leafer. It involves defining the path data to create curved lines. The setStyle method is used to define the appearance of the curve, such as color and thickness.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Pen.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Pen/line.ts [Leafer]\n```\n\n----------------------------------------\n\nTITLE: Disable Rotation in Leafer Editor (rotateable)\nDESCRIPTION: This code snippet demonstrates how to disable the rotation feature within the Leafer editor configuration. By setting the `rotateable` property to `false`, users will be unable to rotate elements within the editor.  The configuration can be applied either globally via `app.editor.config` or to individual elements using their `editConfig` property.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/config/enable.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/editor/config/rotateable.ts\n```\n\n----------------------------------------\n\nTITLE: Editor Before Select Hook Example (TypeScript)\nDESCRIPTION: Illustrates the usage of the `beforeSelect` hook in the Leaferjs editor configuration. This hook allows interception and modification of element selection events before they occur.  The hook takes a `data` object containing the selected `target` and returns `false` to prevent selection or a modified `target` to alter the selection.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/config/event.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nbeforeSelect(data) {\n    const { target } = data // target 可以为单个元素或多个元素，需要自己判断一下\n    return true // return false | target\n}\n```\n\n----------------------------------------\n\nTITLE: Drawing boxShadow Shadow - Typescript\nDESCRIPTION: Example code for drawing a boxShadow-like shadow using the `box` property within `ShadowEffect` in LeaferJS. This snippet demonstrates how to configure the shadow to only appear outside the bounds of the UI element, mimicking the behavior of CSS `box-shadow`.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/shadow.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/shadow/box.ts\n```\n\n----------------------------------------\n\nTITLE: Clearing Elements in Leafer.js (TypeScript)\nDESCRIPTION: Explains how to clear all elements from a container (e.g., a Leafer instance or a Group). This removes all child elements from the container. The specific behavior of the clear() method might vary depending on the Leafer.js version, such as whether it also destroys the removed elements.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/basic/remove.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/basic/remove/clear.ts\n```\n\n----------------------------------------\n\nTITLE: Generating a poster by exporting to an image (index.ts)\nDESCRIPTION: Creates a rectangle and exports it as an image, saving it to the album. It imports Leafer and Rect from '@leafer-editor/miniapp'. A Leafer instance with specified width and height is created. A Rect object is created and added to the leafer instance. The leafer instance is then exported as a PNG image and saved to the album.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/editor/miniapp/start.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Leafer, Rect } from '@leafer-editor/miniapp'\n\nPage({\n  onReady() {\n    // 自动创建一个 350*800 的离屏画布\n    const leafer = new Leafer({ width: 350, height: 800 })\n\n    const rect = new Rect({\n      x: 100,\n      y: 100,\n      width: 100,\n      height: 100,\n      fill: '#32cd79',\n    })\n\n    leafer.add(rect)\n\n    // 自动保存到相册\n    leafer.export('album.png', { screenshot: true }).then(() => {\n      // 提示保存到相册成功逻辑\n    })\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Flow Wrap X Axis (leafer-in/flow/flowWrap/x.ts)\nDESCRIPTION: Imports leafer and creates a container with horizontal flow layout that wraps to the next line when elements exceed the container width.  Demonstrates the flowWrap property.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/flow/index.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n<<< @/code/plugin/flow/flowWrap/x.ts\n```\n\n----------------------------------------\n\nTITLE: Initializing Stroke Style\nDESCRIPTION: This snippet shows how to create a rectangle with a dashed border style using Leaferjs. It demonstrates the basic setup for styling an element's stroke.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/basic/style.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/basic/style/stroke.ts\n```\n\n----------------------------------------\n\nTITLE: Panning View on Drag (App Config) - Typescript\nDESCRIPTION: Configures the LeaferJS app to allow panning the view by dragging.  The `drag` property is set to true, disabling interaction with other elements and enabling panning on any drag interaction.  This is suitable for a preview mode.  See the paired Leafer configuration for additional context.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/config/app/move.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/app/config/app/drag.ts [App]\n```\n\n----------------------------------------\n\nTITLE: Detecting Bounding Box Collisions - TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates how to detect collisions between bounding boxes of elements. It showcases how to use bounding box information (likely AABB) to determine if two elements are overlapping. The code probably utilizes LeaferJS's built-in functions for bounding box calculations and collision detection.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/advanced/bounds.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/advanced/bounds/test.ts\n```\n\n----------------------------------------\n\nTITLE: Installing leafer-draw with npm\nDESCRIPTION: This command installs the leafer-draw package using npm.  It adds leafer-draw as a dependency to your project. Run this command in your project's root directory.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/draw/start.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install leafer-draw\n```\n\n----------------------------------------\n\nTITLE: Reverse Animation with Ease (Animation)\nDESCRIPTION: Demonstrates how to use the 'reverse' property within an animation using the Animate plugin in Leafer.js. This snippet focuses on creating a reversed animation with easing effects. The code defines the animation configuration including the reverse option.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/animate/options/reverse.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/animate/options/reverse/animation/ease.ts [animation]\n```\n\n----------------------------------------\n\nTITLE: Setting a group of circles as mask - Typescript\nDESCRIPTION: This code snippet illustrates the use of a group of circles as a mask in Leaferjs, implemented in Typescript.  It shows how to group elements and use the group as a mask.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/mask.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/mask/group.ts\n```\n\n----------------------------------------\n\nTITLE: Animate Car with Path Animation in LeaferJS (car.ts)\nDESCRIPTION: This code snippet demonstrates how to create a path animation for a car using LeaferJS. It likely involves defining a path and animating the car element along that path. The animation may include properties such as duration, easing, and looping.  The snippet leverages LeaferJS's animation capabilities to move the car smoothly along the specified path.\nSOURCE: https://github.com/leaferjs/docs/blob/main/blog/2024-09-20.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/animate/car.ts\n```\n\n----------------------------------------\n\nTITLE: ICursorType Definition\nDESCRIPTION: Defines the ICursorType type in TypeScript, representing various CSS cursor names and an IImageCursor interface.  It includes a union of string literals for standard cursor types and an interface for defining image cursors with a URL and optional x/y coordinates.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/cursor.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype ICursorType =\n  | IImageCursor\n  | ''\n  | 'auto'\n  | 'default'\n  | 'none'\n  | 'context-menu'\n  | 'help'\n  | 'pointer'\n  | 'progress'\n  | 'wait'\n  | 'cell'\n  | 'crosshair'\n  | 'text'\n  | 'vertical-text'\n  | 'alias'\n  | 'copy'\n  | 'move'\n  | 'no-drop'\n  | 'not-allowed'\n  | 'grab'\n  | 'grabbing'\n  | 'e-resize'\n  | 'n-resize'\n  | 'ne-resize'\n  | 'nw-resize'\n  | 's-resize'\n  | 'se-resize'\n  | 'sw-resize'\n  | 'w-resize'\n  | 'ew-resize'\n  | 'ns-resize'\n  | 'nesw-resize'\n  | 'nwse-resize'\n  | 'col-resize'\n  | 'row-resize'\n  | 'all-scroll'\n  | 'zoom -in'\n  | 'zoom-out'\n\ninterface IImageCursor {\n  url: string\n  x?: number\n  y?: number\n}\n```\n\n----------------------------------------\n\nTITLE: Importing @leafer-in/html via script tag\nDESCRIPTION: Import the full version of the @leafer-in/html plugin using a script tag to enable HTMLText functionality in LeaferJS. It then extracts the HTMLText object from the global LeaferIN.html variable for use in your code.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/html/index.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/@leafer-in/html@1.5.3/dist/html.js\"></script>\n<script>\n  const { HTMLText } = LeaferIN.html\n</script>\n```\n\n----------------------------------------\n\nTITLE: Dispatching UI Event - Leafer.js (TypeScript)\nDESCRIPTION: Illustrates how to simulate dispatching a UI event (e.g., PointEvent.DOWN) using the `emit` method in Leafer.js. This requires the Leafer.js core with UI event handling capabilities.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/emit.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/event/emit/ui.ts\n```\n\n----------------------------------------\n\nTITLE: Finding elements using a function in Leafer.js\nDESCRIPTION: This snippet demonstrates finding UI elements using a custom function with the `find` method in Leafer.js. The function allows for complex selection logic. The code is written in TypeScript.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/find.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/find/method.ts\n```\n\n----------------------------------------\n\nTITLE: Rotating Around Origin\nDESCRIPTION: This snippet demonstrates how to rotate an element around its origin point in Leaferjs.  It showcases the use of the `origin` property for transformations, similar to CSS's `transform-origin`.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/basic/style.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/origin/rotate.ts\n```\n\n----------------------------------------\n\nTITLE: Transition Easing with Delay (Transition)\nDESCRIPTION: Illustrates how to use the delay property within the transition function in Leaferjs. The snippet demonstrates delaying the start of a transition effect, showcasing the control offered by the 'delay' property over transition start times.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/animate/options/delay.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/animate/options/delay/transition/ease.ts [transition]\n```\n\n----------------------------------------\n\nTITLE: Switching and Maintaining Element Position with around in LeaferJS (TypeScript)\nDESCRIPTION: This code snippet shows how to change the 'around' point of a LeaferJS polygon and then use the `setTransform` method to maintain the element's visual position.  It involves capturing the current `localTransform`, updating the `around` property to a new value (e.g., 'right'), and then resetting the transform using `setTransform`. This process ensures that the polygon's appearance remains consistent after the 'around' point change.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/around.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// 多边形原始 around\npolygon.around = 'center'\n\n// 切换 around 点\nconst transform = { ...polygon.localTransform } // 采集  transform\n\npolygon.around = 'right'\n\npolygon.setTransform(transform) // 重设 transform，会自动处理 around 的变化\n```\n\n----------------------------------------\n\nTITLE: Transition with attrs property in Leaferjs\nDESCRIPTION: Demonstrates the usage of the 'attrs' property in Leaferjs's transition function. The 'attrs' array specifies which properties of the element should transition.  This example focuses on the transition API. It assumes a Leaferjs environment is set up.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/animate/options/attrs.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/animate/options/attrs/transition/ease.ts [transition]\n```\n\n----------------------------------------\n\nTITLE: Exporting Leafer Content as Image\nDESCRIPTION: This code snippet demonstrates how to export the content of a Leafer instance as an image and save it to the device's album.  The `export` method returns a promise that resolves when the export is complete.  A success callback should be added to handle post-export logic.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/ui/miniapp/start.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nleafer.export('album.png').then(() => {\n  // 提示保存到相册成功逻辑\n})\n```\n\n----------------------------------------\n\nTITLE: Using the Plugin in a Miniapp Environment (TypeScript)\nDESCRIPTION: This TypeScript code snippet shows how to import and use a LeaferJS plugin in a Miniapp environment. It imports `Leafer` and `Rect` from `@leafer-ui/miniapp`, and `Selector` and `SelectEvent` from `leafer-x-selector`, and then initializes the `Selector` plugin. Requires importing `leafer-x-selector` after `leafer-ui`.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/dev.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Leafer, Rect } from '@leafer-ui/miniapp'\nimport { Selector, SelectEvent } from 'leafer-x-selector' // 必需在leafer-ui之后导入\n\n// 具体逻辑\nconst selector = new Selector()\n```\n\n----------------------------------------\n\nTITLE: Set Image Cursor\nDESCRIPTION: Illustrates how to set an image as a cursor in Leafer, including specifying the URL of the image (PNG or SVG) and optional x and y offset values.  The x and y parameters allow positioning the cursor hotspot relative to the image.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/cursor.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/cursor/image.ts\n```\n\n----------------------------------------\n\nTITLE: Conditional Element Removal in Leafer.js (TypeScript)\nDESCRIPTION: Shows how to conditionally remove elements based on a given condition using the find() method and then removing the found elements. Requires the installation of the find elements plugin or integration with leafer-game or leafer-editor, which include the plugin. The parameters are the same as the find() method, allowing for complex selection criteria.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/basic/remove.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/basic/remove/remove-tag.ts\n```\n\n----------------------------------------\n\nTITLE: Finding LeaferJS Elements by Name in TypeScript\nDESCRIPTION: Demonstrates how to use the 'find' method to locate elements within a LeaferJS application based on their 'name' property. This snippet assumes the 'find' plugin is installed or integrated through 'leafer-game' or 'leafer-editor'.  It showcases the syntax for specifying the name property in the search criteria.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/name.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// This is a placeholder, the real code should be here.\n// Example: finding an element by name.\n// Assumes Leafer and find plugin are available.\n\n// const foundElement = app.stage.find(item => item.name === \"exampleName\");\n// if (foundElement) { ... }\n```\n\n----------------------------------------\n\nTITLE: Immediately Stopping Event Propagation - JavaScript\nDESCRIPTION: Demonstrates how to immediately stop event propagation in Leafer.js using the `stopNow()` method within a JavaScript context. The `stopNow()` method prevents the event from propagating to both parent and sibling elements, halting the event flow immediately.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/event/basic/Event.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<<< @/code/event/stopNow.js\n```\n\n----------------------------------------\n\nTITLE: Combining Pen with Text - Leafer\nDESCRIPTION: This snippet demonstrates how to combine the Pen element with text in Leafer. It involves adding text elements to the Pen, allowing you to draw paths around or integrate text within the Pen's rendering. The text element becomes a child element of the Pen.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Pen.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Pen/text.ts [Leafer]\n```\n\n----------------------------------------\n\nTITLE: Drawing a Free-Form Polygon - Typescript (Leafer)\nDESCRIPTION: This code snippet (from points.ts) illustrates how to create a free-form polygon by defining the `points` array of the Polygon element in Leafer.js. Actual code is included using the <<< syntax.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Polygon.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Polygon/points.ts [Leafer]\n```\n\n----------------------------------------\n\nTITLE: Creating Group element with add() method (App)\nDESCRIPTION: Demonstrates how to create a Group element and add child elements to it using the `add()` method in the application context of Leafer. It highlights the application-specific aspects of creating and managing a Leafer Group. It requires Leafer core library.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Group.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Group/app/create.ts [App]\n```\n\n----------------------------------------\n\nTITLE: Flow Layout Auto Width and Height Example\nDESCRIPTION: This code snippet demonstrates the use of the `autoWidth` property in Leafer.js combined with height settings to create responsive layouts.  It illustrates how both width and height can be configured to adapt to the available space. This example shows simultaneous width and height adjustments.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/flow/Flow/autoWidth.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Leafer, Rect, Flow } from 'leafer-ui'\n\nconst leafer = new Leafer({\n    view: document.querySelector('#root'),\n    width: 300,\n    height: 160,\n    plugins: [new Flow()],\n    autoRender: true\n})\n\nleafer.add(new Rect({\n    width: 100,\n    height: 50,\n    fill: '#45B97C'\n}), new Rect({\n    autoWidth: 1,\n    height: 50,\n    fill: '#E36159'\n}), new Rect({\n    width: 50,\n    autoWidth: 1,\n    height: 50,\n    fill: '#FBB13C'\n}), new Rect({\n    width: 50,\n    height: 50,\n    autoWidth: 1,\n    fill: '#2A4B7C'\n}))\n```\n\n----------------------------------------\n\nTITLE: Image Global Settings (Cross-Origin)\nDESCRIPTION: This code snippet illustrates the global configuration for handling cross-origin images in Leafer.js. Setting the configuration to null allows rendering cross-origin images that are not permitted by the server, but it disables exporting the canvas content due to browser restrictions.  It is typically adjusted based on the security requirements of the application.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Image.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Image/cross.ts\n```\n\n----------------------------------------\n\nTITLE: Destroying Element in LeaferJS (TypeScript)\nDESCRIPTION: This snippet demonstrates how to destroy a UI element in LeaferJS. It uses the `destroy()` method to remove the element and its children from the display list and release its resources. The code shows an example of how to remove an element.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/destroy.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// destroy.ts\nimport { Leafer, UI } from 'leafer-ui'\n\nconst leafer = new Leafer({ width: 300, height: 200, });\ndocument.body.appendChild(leafer.view)\n\nconst box = new UI()\nbox.width = 100\nbox.height = 60\nbox.x = 50\nbox.y = 30\nleafer.add(box)\n\nsetTimeout(() => {\n    box.destroy()\n}, 1000)\n```\n\n----------------------------------------\n\nTITLE: Default Linear Gradient Typescript\nDESCRIPTION: This snippet (referenced from `@/code/property/fill/linear/a.ts`) demonstrates a default linear gradient in Leafer.js.  It creates a gradient that transitions vertically from the top center to the bottom center of the element. The specific code contents are found in the linked file.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/paint/linear.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/fill/linear/a.ts\n```\n\n----------------------------------------\n\nTITLE: Manually Opening Inner Editor - Leaferjs (Typescript)\nDESCRIPTION: This code snippet demonstrates how to manually open the internal editor for a text element in Leaferjs. It likely involves creating a Leafer instance and a text element, then calling the `openInnerEditor` method on the editor to activate the editing state.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/Editor/innerEditor.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/editor/editor/innerEditor.ts\n```\n\n----------------------------------------\n\nTITLE: Using Canvas Context\nDESCRIPTION: This code snippet demonstrates how to access and use the Canvas context in Leafer.js. It illustrates how to draw and manipulate pixels directly on the canvas.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/basic/display.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Canvas/context.ts\n```\n\n----------------------------------------\n\nTITLE: Initializing Leafer with Fixed Size in Canvas - Typescript\nDESCRIPTION: This snippet shows initializing a Leafer instance using a canvas element as the view. The Leafer is created with a fixed width and height.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/basic/leafer.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Keyframes Animation Interface\nDESCRIPTION: Defines the interface for a keyframes animation in Leaferjs. It extends the IAnimateOptions interface and includes a 'keyframes' property that specifies the list of keyframes. Requires the animate plugin. Defines animation through set keyframes.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/animation.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IKeyframesAnimation extends IAnimateOptions {\n  keyframes: IKeyframe[] // 关键帧对象列表\n  // ...动画选项属性\n}\n```\n\n----------------------------------------\n\nTITLE: Listening to Animation Events via on() (Animate)\nDESCRIPTION: This snippet demonstrates how to use the on() method to listen for animation events in Leafer.js specifically for the 'animate' type. It shows how to attach event listeners and handle events such as 'created', 'play', 'pause', 'stop', 'seek', 'update', and 'completed', similar to how event listeners are used with DOM elements.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/animate/options/event.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/animate/options/event/animate/on.ts [animate]\n```\n\n----------------------------------------\n\nTITLE: Using Rect Instead of Image (App)\nDESCRIPTION: This code snippet showcases how to use the Rect element as a substitute for the Image element when setting the fill property within an App environment. The Rect element automatically adapts to the image dimensions even without specifying width and height. It supports multiple fills and offers greater flexibility for image styling.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Image.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Image/app/rect.ts\n```\n\n----------------------------------------\n\nTITLE: Listening to Editor Select Event - Javascript\nDESCRIPTION: This code snippet demonstrates how to listen to the `EditorEvent.SELECT` event in LeaferJS using Javascript. It uses `app.editor.on()` to register a callback function that will be executed when a selection event occurs.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/event/EditorEvent.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<<< @/code/plugin/editor/event/select.js\n```\n\n----------------------------------------\n\nTITLE: Listening to Rendering Events in LeaferJS\nDESCRIPTION: This code snippet demonstrates how to listen to render events within a LeaferJS instance. It utilizes the 'render' event to execute a callback function when rendering occurs. This allows developers to hook into the rendering process and perform custom actions during different render stages.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/life/render.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/event/leafer/render.ts\n```\n\n----------------------------------------\n\nTITLE: Loading SVG from URL in Leaferjs\nDESCRIPTION: This snippet demonstrates how to load an SVG image using a URL within Leaferjs. It showcases the basic implementation for incorporating SVG images into a Leaferjs application using a remote resource. The code requires the Leaferjs library to be properly installed and configured.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/SVG.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/SVG/svg-url.ts\n```\n\n----------------------------------------\n\nTITLE: Finding Elements by className - TypeScript\nDESCRIPTION: This code snippet demonstrates how to find elements within a LeaferJS application using the `className` property. It assumes the `find` plugin is installed or is part of a larger package like `leafer-game` or `leafer-editor`.  The `find()` method is used to locate elements based on their CSS class name. The example showcases the instantiation of a new UI element with a specific class name, and then searching for it using the `find()` method.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/className.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Box - Leafer\nDESCRIPTION: Demonstrates how to create a Box element using Leafer.  This involves importing the necessary modules and instantiating a Box object. The complete code is located in the file specified.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Box.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Box/create.ts [Leafer]\n```\n\n----------------------------------------\n\nTITLE: Remove Single Event (off) - JavaScript\nDESCRIPTION: This snippet demonstrates how to remove a single event listener using the 'off' method in JavaScript.  It shows the syntax for unsubscribing from a particular event type and listener. The snippet assumes the Leaferjs library is already loaded. Input: the event type and listener function to remove. Output: none directly, the listener is removed from the event target.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/off.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<<< @/code/event/off/one.js\n```\n\n----------------------------------------\n\nTITLE: Import LeaferUI (module.min) as ES module\nDESCRIPTION: Imports LeaferUI as an ES module, using the module.min build.  This approach leverages modern JavaScript module syntax.  The minified version is used for optimal performance.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/framework/html.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import { Leafer } from 'https://unpkg.com/leafer-ui@1.5.3/dist/web.module.min.js'\n  // ...\n</script>\n```\n\n----------------------------------------\n\nTITLE: Drawing Diagonal Line - Leafer Component (TypeScript)\nDESCRIPTION: This code snippet (Leafer part) demonstrates the creation of a diagonal line within Leafer.js. It outlines the Leafer component's specific code for generating the diagonal line, intended for use within a broader application setup involving an App component.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Line.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Line/line.ts [Leafer]\n```\n\n----------------------------------------\n\nTITLE: Drawing Curve with Curvature - Leafer Component (TypeScript)\nDESCRIPTION: This code snippet (Leafer part) illustrates how to create a curve with a specific curvature value using the Line element in Leafer.js. The curvature is controlled by a number between 0 and 1. It reflects the Leafer component's approach, which is typically used along with an App component.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Line.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Line/curve-number.ts [Leafer]\n```\n\n----------------------------------------\n\nTITLE: Drag Bounds within Frame - TypeScript\nDESCRIPTION: This code snippet demonstrates how to restrict an element's draggable area to within its parent Frame in Leafer.js. It leverages the `dragBounds` property set to `'parent'`.  It assumes a Leafer.js project setup and a parent Frame containing the element to be dragged.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/dragBounds.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/dragBounds/frame.ts\n```\n\n----------------------------------------\n\nTITLE: Creating Adaptive Text Background - Leafer\nDESCRIPTION: Demonstrates creating a Box element with a text background that adapts to the content. It involves configuring the Box to dynamically adjust its size based on the enclosed text. The complete code is located in the file specified.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Box.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Box/text.ts [Leafer]\n```\n\n----------------------------------------\n\nTITLE: Custom Shape with Leafer.js (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to create a custom shape using Leafer.js. It requires importing necessary modules from the leafer-ui library.  The `__updateBoxBounds()` method should be rewritten to define the correct element boundaries for rendering and collision detection. The bounds definition ensures correct rendering and efficient collision detection.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/custom/path.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Custom/shape.ts [自定义图形]\n```\n\n----------------------------------------\n\nTITLE: BlendMode ColorBurn Example Typescript\nDESCRIPTION: Example code demonstrating the 'color-burn' blend mode.  It shows how the inverted bottom layer is divided by the top layer, and then the result is inverted. The code is assumed to be in a file named color-burn.ts.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/blendMode.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/blendMode/color-burn.ts\n```\n\n----------------------------------------\n\nTITLE: Set Cursor Name\nDESCRIPTION: Shows how to set a cursor using a predefined name (e.g., 'pointer') in Leafer. This example likely sets the cursor property of a UI element to a specific cursor type.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/cursor.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/cursor/name.ts\n```\n\n----------------------------------------\n\nTITLE: Register Edit Tool (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to register a custom edit tool in Leaferjs using TypeScript. It likely involves using the `registerEditTool()` method and defining a unique tag for the tool.  The specifics of the code are not available in this context but inferred from the description.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/editOuter/register.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/editor/editOuter/register/index.ts\n```\n\n----------------------------------------\n\nTITLE: Importing leafer-game as ES module (module)\nDESCRIPTION: This code snippet demonstrates how to import leafer-game as an ES module. It imports `Leafer`, `Editor`, and `Arrow` directly from the `web.module.js` file hosted on unpkg. This approach is compatible with modern browsers and module bundlers.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/game/start.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import {\n    Leafer,\n    Editor,\n    Arrow,\n  } from 'https://unpkg.com/leafer-game@1.5.3/dist/web.module.js'\n  // ...\n</script>\n```\n\n----------------------------------------\n\nTITLE: Destroying LeaferJS Application (TypeScript)\nDESCRIPTION: This snippet demonstrates how to completely destroy a LeaferJS application instance. It calls the `destroy()` method on the main `leafer` object, which removes all elements and releases all resources associated with the application. This is typically done when the application is no longer needed.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/destroy.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// destroy-leafer.ts\nimport { Leafer, UI } from 'leafer-ui'\n\nconst leafer = new Leafer({ width: 300, height: 200, });\ndocument.body.appendChild(leafer.view)\n\nconst box = new UI()\nbox.width = 100\nbox.height = 60\nbox.x = 50\nbox.y = 30\nleafer.add(box)\n\nsetTimeout(() => {\n    leafer.destroy()\n}, 1000)\n```\n\n----------------------------------------\n\nTITLE: Animate: Play Animation\nDESCRIPTION: This snippet demonstrates the usage of the `play()` method of the Animate class to start an animation. It assumes the existence of an animation instance. The method initiates the playback of the animation from its current state.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/animate/Animate/play.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n代码内容缺失\n```\n\n----------------------------------------\n\nTITLE: Modify Text Default Fill Color - changeAttr2.ts\nDESCRIPTION: This code snippet demonstrates how to modify the default fill color of text elements to a variable color using the `changeAttr` method. It shows the usage of a function to dynamically determine the property's default value. It assumes the existence of a `Text` element and the LeaferJS library.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/custom/changeAttr.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// 修改文本默认填充色为可变颜色\nText.changeAttr('fill', () => {\n  return Math.random() > 0.5 ? 'red' : 'blue';\n});\n```\n\n----------------------------------------\n\nTITLE: Animate Duration with Transition (Ease)\nDESCRIPTION: Illustrates the use of the duration property for a transition easing configuration in Leafer.js. It demonstrates how to set the duration for a transition effect. The duration property determines the length of the transition animation.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/animate/options/duration.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/animate/options/duration/transition/ease.ts [transition]\n```\n\n----------------------------------------\n\nTITLE: Finding Element by ID in LeaferJS (TypeScript)\nDESCRIPTION: Demonstrates how to use the `findOne` method to find a UI element by its ID in LeaferJS.  It requires the find element plugin to be installed. The `findOne` method is called with the ID as the condition.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/findOne.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n<<< @/code/property/findOne/id.ts\n```\n\n----------------------------------------\n\nTITLE: Drawing Inner Shadow with Blur Typescript\nDESCRIPTION: This snippet shows how to draw an inner shadow using the innerShadow property with a blur effect in Leafer.js.  It is assumed that this code snippet is located in '@/code/property/innerShadow/blur.ts'.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/innerShadow.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/innerShadow/blur.ts\n```\n\n----------------------------------------\n\nTITLE: Combining Pen with Shapes - Leafer\nDESCRIPTION: This snippet demonstrates how to combine the Pen element with other shape components in Leafer. It involves adding existing shape elements to the Pen, allowing you to create complex compositions. The add method is used to incorporate the shape components.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Pen.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Pen/add.ts [Leafer]\n```\n\n----------------------------------------\n\nTITLE: Handling Image Load Errors - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to specifically listen for and handle image load errors, mirroring the TypeScript implementation. It outlines the process of attaching an event listener to capture the ImageEvent.ERROR and provides example error handling.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/event/basic/Image.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n<<< @/code/event/image/error.js\n```\n\n----------------------------------------\n\nTITLE: Flow Layout along Y axis\nDESCRIPTION: This code snippet, located in '@/code/plugin/flow/flow/y.ts', demonstrates how to use the flow layout with the y-axis in LeaferJS. It shows the configuration required to automatically arrange elements vertically.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/flow/Flow/flow.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/flow/flow/y.ts\n```\n\n----------------------------------------\n\nTITLE: Handling Element Grouping Events in Editor (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to handle element grouping events within the leaferjs editor. It illustrates the use of `app.editor.on()` to listen for specific events related to grouping operations, providing a practical example of how to implement grouping functionality within the editor environment. This snippet comes from the `/code/plugin/editor/event/group.ts` file.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/event/EditorGroupEvent.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/editor/event/group.ts\n```\n\n----------------------------------------\n\nTITLE: BlendMode Hue Example Typescript\nDESCRIPTION: Example code demonstrating the 'hue' blend mode. Preserves the luma and chroma of the bottom layer, while adopting the hue of the top layer. The code is assumed to be in a file named hue.ts.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/blendMode.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/blendMode/hue.ts\n```\n\n----------------------------------------\n\nTITLE: Locking and Unlocking Elements in LeaferJS Editor (TypeScript)\nDESCRIPTION: This snippet demonstrates how to lock and unlock elements using the LeaferJS Editor plugin. The `lock()` method prevents the selected element from being edited, while the `unlock()` method restores editing functionality. This example assumes you have an instance of the Editor element and a selected element to operate on.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/Editor/lock.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// lock.ts\neditor.lock()\n\n// unlock\neditor.unlock()\n```\n\n----------------------------------------\n\nTITLE: Installing Leafer Flow and Resize Plugins\nDESCRIPTION: These commands install the @leafer-in/flow and @leafer-in/resize plugins using npm, pnpm, yarn, and bun.  These plugins are required to use the Flow element for automatic layout. Installation makes the Flow element available within LeaferJS.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/flow/index.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install @leafer-in/flow\nnpm install @leafer-in/resize\n```\n\n----------------------------------------\n\nTITLE: Animate Duration with Animate Method (Ease)\nDESCRIPTION: Demonstrates using the duration property directly with the `animate` method in Leafer.js. It provides an example of animating properties with a specified duration using the animate API. The duration value sets the animation length.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/animate/options/duration.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/animate/options/duration/animate/ease.ts [animate]\n```\n\n----------------------------------------\n\nTITLE: Leaferjs Editor: Manually Select Elements\nDESCRIPTION: This snippet demonstrates how to manually select elements in the Leaferjs editor using the provided API. It shows the usage of the `select` function within the context of the editor plugin.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/Editor/select.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/editor/editor/select.ts\n```\n\n----------------------------------------\n\nTITLE: Creating a Color Swing Animation with LeaferJS (color.ts)\nDESCRIPTION: This code snippet demonstrates how to create a color swing animation using LeaferJS. It is used to generate a back-and-forth color animation effect.  The code leverages LeaferJS to animate color properties, creating a dynamic and visually interesting effect.\nSOURCE: https://github.com/leaferjs/docs/blob/main/blog/2024-09-20.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/animation/color.ts\n```\n\n----------------------------------------\n\nTITLE: Listening to Animation Events (Animate - Overall)\nDESCRIPTION: This code snippet provides a comprehensive example of how to listen for animation events using Animate in Leafer.js. It contains implementations for the common animation events, such as created, play, pause, stop, seek, update and completed. Developers can attach custom functions to these events to tailor the animations behavior based on specific requirements.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/animate/options/event.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/animate/options/event/ease.ts [Animate]\n```\n\n----------------------------------------\n\nTITLE: Importing Arrow plugin via Script Tag (arrow.min)\nDESCRIPTION: Import the Arrow plugin via script tag. This makes the Arrow class available through the global LeaferIN.arrow object. The arrow.min.js version is used.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/arrow/index.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/@leafer-in/arrow@1.5.3/dist/arrow.min.js\"></script>\n<script>\n  const { Arrow } = LeaferIN.arrow\n</script>\n```\n\n----------------------------------------\n\nTITLE: Animate Seek with Percent - Typescript\nDESCRIPTION: This code snippet demonstrates how to use the `seek` method of the `Animate` class to jump to a specific percentage of the total animation duration. It shows how to pass an object conforming to the `IPercentData` interface to the `seek` method, allowing control based on the animation's percentage completion.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/animate/Animate/seek.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/animate/animate/seek/percent.ts\n```\n\n----------------------------------------\n\nTITLE: Configuration for custom navigation (index.json)\nDESCRIPTION: Configures the page for custom navigation and auto page orientation in the JSON file. This setting allows the developer to control the navigation bar appearance and ensures the application adapts to device orientation changes.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/editor/miniapp/start.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"navigationStyle\": \"custom\",\n  \"pageOrientation\": \"auto\"\n}\n```\n\n----------------------------------------\n\nTITLE: Overflow Handling in a Box - Leafer\nDESCRIPTION: Illustrates how to manage content overflow within a Box element using the overflow property. It demonstrates setting the overflow property to control the visibility of content exceeding the Box's dimensions. The complete code is located in the file specified.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Box.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Box/overflow.ts [Leafer]\n```\n\n----------------------------------------\n\nTITLE: Animation Options Interface - Typescript\nDESCRIPTION: Defines the `IAnimateOptions` interface for configuring animation properties such as easing, delay, duration, ending state, reverse, swing, loop, speed, join, autoplay, attributes, and events. These options allow fine-grained control over animation behavior in Leaferjs.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/transition.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// 动画选项\ninterface IAnimateOptions {\n  easing?: IAnimateEasing // 缓动方式，默认为 ease\n\n  delay?: number // 延迟时间，以秒为单位， 默认为 0\n  duration?: number // 动画时长，以秒为单位，默认为 0.2\n  ending?: IAnimateEnding // 动画结束时的状态，可设置from、to，默认auto\n\n  reverse?: boolean // 是否反向动画 to -> from，默认为 false\n  swing?: boolean | number // 是否摇摆循环播放，可设置次数（到达 to 的次数） from -> to，to -> from -> to ... ，默认 false\n\n  loop?: boolean | number // 是否循环播放，可设置次数，默认为 false\n  loopDelay?: number // 进入下一次循环播放的延迟时间，默认为0\n\n  speed?: number // 动画播放的倍速，值越大播放越快，默认为 1 倍速\n\n  join?: boolean //  是否加入动画前的元素状态作为 from 关键帧\n  autoplay?: boolean // 是否自动播放\n\n  attrs?: string[] // 参与动画过渡效果的元素属性列表， 默认为所有\n  event?: IAnimateEvents // 监听事件\n}\n```\n\n----------------------------------------\n\nTITLE: Text Decoration Type\nDESCRIPTION: Defines the TypeScript type for text decoration, including underline and strikethrough options, with optional color customization via an object. Includes the ITextDecorationData interface to customize color of the text decoration.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Text.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype ITextDecoration =\n  | 'under' // 下划线\n  | 'delete' // 删除线\n  | 'under-delete' // 下划线 + 删除线\n  | 'none'\n  | ITextDecorationData\n\ninterface ITextDecorationData {\n  type: ITextDecorationType // 装饰线类型 under / delete / under-delete\n  color: IColor // 装饰线颜色\n}\n\n// 使用类型\ntext.textDecoration = 'under' // 下划线\n\n// 使用对象\ntext.textDecoration = { type: 'under', color: 'red' } // 标红的下划线\n```\n\n----------------------------------------\n\nTITLE: Finding elements by tag in Leafer.js\nDESCRIPTION: This snippet demonstrates how to find UI elements by their tag using the `findTag` method in Leafer.js.  The code showcases the use of `tag` as a selection criteria for locating elements within the Leafer display tree. The code is implemented in TypeScript.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/find.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/find/tag.ts\n```\n\n----------------------------------------\n\nTITLE: Listening for Pointer Events with Strings\nDESCRIPTION: This code snippet demonstrates how to listen for pointer enter and leave events using string-based event names in Leafer.js.  It relies on the defined naming rules for event types.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/basic/event.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nrect.on('pointer.enter', onEnter)\nrect.on('pointer.leave', onLeave)\n```\n\n----------------------------------------\n\nTITLE: FlowItemBox Layout with Stroke Box Type (Typescript)\nDESCRIPTION: This code snippet demonstrates how the FlowItemBox component lays out its child elements using the 'stroke' box type.  This means the layout is based on the stroke box of the child elements, including the stroke width. Useful when borders/strokes should influence layout.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/flow/Flow/itemBox.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n @/code/plugin/flow/itemBox/stroke.ts\n```\n\n----------------------------------------\n\nTITLE: Converting Movement Distance to Local (Leaferjs)\nDESCRIPTION: This code snippet illustrates converting a movement distance to the local coordinate system using Leaferjs. It uses the `worldToLocal` method with the `distance` parameter set to `true`. This indicates that the conversion should treat the coordinates as a movement vector rather than a fixed point.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/point/high.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/basic/coordinate/move.ts\n```\n\n----------------------------------------\n\nTITLE: GradientPaintString SCSS Example\nDESCRIPTION: Demonstrates how to define gradient fills using GradientPaintString in SCSS. It includes examples for linear and radial gradients, specifying rotation, stretch, and color stops.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/interface/ui/String.md#_snippet_5\n\nLANGUAGE: scss\nCODE:\n```\n// 参数模版\ntype(rotation?, strech?, colorStop...) blendMode? opacity? visible?\ntype(from, to, stretch?, colorStop...) ... // 逗号分隔多个填充\n\n// 应用示例\nfill: linear(#ff0000, #ffff00); // gradient(color...)\nfill: linear(60deg, #ff0000, #ffff00); // gradient(rotation, color...)\nfill: radial(0 0.5, 1 0.5, #ff0000 0.2, #ffff00 80%); // gradient(from, to, color...)\nfill: radial(10deg, 20%, #ff0000, #ffff00); // gradient(rotation, stretch, color...)\n```\n\n----------------------------------------\n\nTITLE: Panning View on Drag (Leafer Config) - Typescript\nDESCRIPTION: Configures the LeaferJS instance for drag-to-pan behavior. Likely used in conjunction with the app configuration to enable the panning functionality.  Examine the specific code pointed to by the path for the exact implementation.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/config/app/move.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/app/config/drag.ts [Leafer]\n```\n\n----------------------------------------\n\nTITLE: Automatic Height (leafer-in/flow/autoHeight/height.ts)\nDESCRIPTION: Imports leafer and configures elements with `autoHeight`, allocating remaining vertical space to specified children.  It demonstrates how elements fill available height proportionally.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/flow/index.md#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\n<<< @/code/plugin/flow/autoHeight/height.ts\n```\n\n----------------------------------------\n\nTITLE: Defining IHitType enum in Typescript\nDESCRIPTION: This TypeScript code defines the `IHitType` enum, which specifies the type of hit detection to use for an element's fill. The options include path-based detection, pixel-based detection (for PNG/SVG images), always hit, and never hit. It controls how the element responds to user interaction based on its fill.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/hitFill.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype IHitType =\n  | 'path' // 碰撞可见 fill 的路径形状\n  | 'pixel' // 碰撞可见 fill 的像素点（排除 PNG/SVG 图片中的透明像素）\n  | 'all' // 总是碰撞 fill, 即使不可见\n  | 'none' // 不碰撞 fill\n```\n\n----------------------------------------\n\nTITLE: Listening to Animation Events (Set)\nDESCRIPTION: This snippet illustrates how to listen for animation events in Leafer.js within the context of a 'set' animation.  It showcases example event handlers for events such as 'created', 'play', 'pause', 'stop', 'seek', 'update', and 'completed'. These handlers can be used to trigger custom actions or logic when the animation is at different states.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/animate/options/event.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/animate/options/event/set/ease.ts [set]\n```\n\n----------------------------------------\n\nTITLE: IExportFileType Type Definition\nDESCRIPTION: Defines the `IExportFileType` type, which specifies the supported file types for export operations in Leafer.js. It includes options like 'canvas', 'json', 'jpg', 'png', and 'webp'.  BMP format support depends on the platform.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/export.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype IExportFileType = 'canvas' | 'json' | 'jpg' | 'png' | 'webp' ｜ 'bmp' // 后续会支持svg、pdf, bmp 格式需平台自身支持\n```\n\n----------------------------------------\n\nTITLE: Multiple Fill Overlays\nDESCRIPTION: This code snippet demonstrates how to apply multiple fill overlays to a LeaferJS UI element. It shows how to stack different fill types. The opacity property is currently only effective for color objects and images.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/fill.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/fill/mutil/a.ts\n```\n\n----------------------------------------\n\nTITLE: Creating Group element with children property (Leafer)\nDESCRIPTION: Shows how to create a Group element and add child elements to it by directly manipulating the `children` property in Leafer. It illustrates a direct way of adding elements to the Group.  It requires Leafer core library.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Group.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Group/children.ts [Leafer]\n```\n\n----------------------------------------\n\nTITLE: Including TextEditor via Script Tag (minified)\nDESCRIPTION: This code snippet demonstrates how to include the Leaferjs TextEditor plugin via a script tag.  It fetches the minified version from unpkg and makes the `TextEditor` class available through the global `LeaferIN.textEditor` object.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/text-editor/index.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/@leafer-in/text-editor@1.5.3/dist/text-editor.min.js\"></script>\n<script>\n  const { TextEditor } = LeaferIN.textEditor\n</script>\n```\n\n----------------------------------------\n\nTITLE: Export High-Definition Image\nDESCRIPTION: Shows how to export a LeaferJS element as a high-definition image by adjusting the `pixelRatio` option.  The `pixelRatio` parameter scales the output resolution, resulting in a higher-quality image. Requires the LeaferJS export plugin.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/basic/export.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/export/pixelRatio.ts\n```\n\n----------------------------------------\n\nTITLE: Initializing Leafer with Auto Grow Height - Typescript\nDESCRIPTION: This snippet showcases initializing a Leafer instance that automatically grows in height to accommodate its content. Width remains fixed, while height expands as needed.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/basic/leafer.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Leafer with Taro in Vue\nDESCRIPTION: This code snippet demonstrates a basic Leafer.js integration within a Taro Vue component. It initializes a Leafer instance, creates a Rect object, and adds it to the Leafer instance. It also binds touch events to the Leafer instance to enable user interaction. It utilizes the '@leafer-ui/miniapp' package, Taro, and Vue.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/ui/miniapp/taro.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <canvas\n    id=\"leafer\"\n    type=\"2d\"\n    @touchstart=\"receiveEvent\"\n    @touchmove=\"receiveEvent\"\n    @touchend=\"receiveEvent\"\n    @touchcancel=\"receiveEvent\"\n  ></canvas>\n</template>\n\n<script setup lang=\"ts\">\nimport Taro from '@tarojs/taro'\nimport { Leafer, Rect, useCanvas } from '@leafer-ui/miniapp'\n\nuseCanvas('canvas', Taro) // 绑定平台全局变量\n\nlet leafer: Leafer\n\nTaro.useReady(() => {\n  leafer = new Leafer({ view: 'leafer' })\n\n  const rect = new Rect({\n    x: 100,\n    y: 100,\n    width: 100,\n    height: 100,\n    fill: '#32cd79',\n    draggable: true,\n  })\n\n  leafer.add(rect)\n})\n\nfunction receiveEvent(event: TouchEvent) {\n  leafer.receiveEvent(event) // 需手动接收、传递画布交互事件给leafer\n}\n</script>\n\n<style>\npage {\n  height: 100%;\n}\n#leafer {\n  width: 100%;\n  height: 100%;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Installing Leafer.js Viewport with Bun\nDESCRIPTION: This command installs the @leafer-in/viewport package using bun. It adds the viewport plugin to your project, enabling zoom and pan viewport functionality. After installation, you can use the viewport API in your Leafer.js application.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/viewport/index.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nbun add @leafer-in/viewport\n```\n\n----------------------------------------\n\nTITLE: Setting a Ring as an Eraser in Leaferjs (UI)\nDESCRIPTION: This example demonstrates how to set a UI element, specifically a ring, as an eraser in Leaferjs. By setting the `eraser` property to `true` on the ring element, it will erase the content of elements below it within the same Group.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/eraser.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/eraser/ui.ts\n```\n\n----------------------------------------\n\nTITLE: Initializing App with manual start\nDESCRIPTION: This code snippet demonstrates how to initialize an App instance with the `start` property set to `false`, allowing for manual control over the rendering process. This is useful when dealing with a large number of graphics that are created asynchronously, as it can improve creation speed. The snippet is expected to be placed within a TypeScript file.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/config/app/base.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/app/config/app/start.ts [App]\n```\n\n----------------------------------------\n\nTITLE: Simulating Move Event in Leafer.js (TypeScript)\nDESCRIPTION: Simulates a move (pan) event using the `move` method on the `leafer.interaction` instance. Requires an `IMoveEvent` data object to specify the translation details, such as deltaX and deltaY.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/event/simulation.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/interaction/move.ts\n```\n\n----------------------------------------\n\nTITLE: Listening to element lifecycle events using 'on'\nDESCRIPTION: This code snippet demonstrates listening to element lifecycle events using the `on` method in LeaferJS. It provides an alternative way to attach event listeners for various lifecycle stages such as mounting, unmounting, and destruction of a UI element. The code snippet uses the `on` method to directly bind event listeners to the UI element, allowing for a more flexible approach to handling lifecycle events.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/life/ui.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/life/ui/on.ts\n```\n\n----------------------------------------\n\nTITLE: Vue3 App Component with Leafer Rect\nDESCRIPTION: This Vue3 component demonstrates the usage of reactive data with a Leafer.js Rect element. It initializes a Rect, accesses its reactive proxy data (proxyData), and updates the width property via timeouts and a click handler, showcasing the synchronization between the reactive proxy and the element's data.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/proxy.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { Rect } from 'leafer-ui'\nimport './proxyData' // 重写 proxyData，全局只需引入一次\n\nconst rect = new Rect()\n\nconst proxyData = rect.proxyData // 获取 rect 的响应式代理数据\n\nsetTimeout(() => {\n  proxyData.width = 1 // 修改响应式代理数据, 同步更新页面\n}, 1000)\n\nsetTimeout(() => {\n  rect.width = 2 // 修改rect数据, 同步更新页面\n}, 2000)\n</script>\n\n<template>\n  <div class=\"rect\" @click=\"rect.width = 3\">{{ proxyData.width }}</div>\n</template>\n\n<style scoped>\n.rect {\n  font-size: 200px;\n  cursor: pointer;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Animation with attrs property in Leaferjs\nDESCRIPTION: Demonstrates the usage of the 'attrs' property in Leaferjs's animate function.  The 'attrs' array specifies which properties of the element should be animated during the transition. This example shows how to animate only the 'x' property. It assumes a Leaferjs environment is set up and that the target element is available.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/animate/options/attrs.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/animate/options/attrs/animation/ease.ts [animation]\n```\n\n----------------------------------------\n\nTITLE: Editor Before Move Hook Example (TypeScript)\nDESCRIPTION: Shows the usage of the `beforeMove` hook within the Leaferjs editor configuration. This hook enables interception and adjustment of element movement events before they are applied. The hook receives a `data` object containing the `target`, `x`, and `y` values, allowing developers to return `false` to block the move or a modified `{ x, y }` object to change the move delta.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/config/event.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nbeforeMove(data) {\n    const { target, x, y } = data\n    return true // return false | { x, y }\n}\n```\n\n----------------------------------------\n\nTITLE: Remove Single Event (off) - TypeScript\nDESCRIPTION: This snippet demonstrates how to remove a single event listener using the 'off' method in TypeScript. It showcases the basic syntax for unsubscribing from a specific event type with a particular listener function. No external dependencies are required beyond the Leaferjs library itself. The expected input would be the event type and listener function to remove, with no direct output.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/off.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/event/off/one.ts\n```\n\n----------------------------------------\n\nTITLE: Installing Leafer.js View Plugin with npm\nDESCRIPTION: This command installs the `@leafer-in/view` plugin using npm.  It allows for view control functionalities within Leafer.js applications. This is one of the package manager installation options.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/view/index.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @leafer-in/view\n```\n\n----------------------------------------\n\nTITLE: Custom Element Method Implementation - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to define and implement custom methods within a LeaferJS custom element.  It defines the element's structure and functionality by adding custom functions. The defined methods can be used to control animations or any other operations specific to the custom element.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/custom/base/method.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Custom/base/method/index.ts\n```\n\n----------------------------------------\n\nTITLE: Image Global Settings (Cache)\nDESCRIPTION: This code snippet demonstrates the global configuration for image caching in Leafer.js.  It shows how to dynamically adjust the caching settings based on application needs. It's used for managing image resources and optimizing performance.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Image.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Image/setting.ts\n```\n\n----------------------------------------\n\nTITLE: Creating Leafer Element from JSON\nDESCRIPTION: Illustrates how to create a Leafer element directly from a JSON object using a constructor or factory method. This approach allows for creating new elements with properties defined in the JSON.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/json.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Defining StrokeJoin Type\nDESCRIPTION: Defines the `StrokeJoin` type, which specifies how the corners of a stroke are rendered. The options are 'miter', 'bevel', and 'round'.  This controls how the stroke is joined at corners, influencing the appearance of sharp angles. Used to style the corners of stroked shapes.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/stroke.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype StrokeJoin =  'miter' ｜ 'bevel' | 'round' //  直角 ｜ 平角 ｜ 圆角\n```\n\n----------------------------------------\n\nTITLE: Accessing Middle Data in Leafer UI (TypeScript)\nDESCRIPTION: This snippet shows how to access the middle or processed data for UI element properties. This intermediate data representation is useful for values like percentages that depend on parent object calculations. The processed value is accessible through `this.__.__middle.width`, such as converting '70%' to a decimal representation.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/custom/attr.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nthis.width = '70%'\n\nconsole.log(this.width) // '70%'\nconsole.log(this.__.__middle.width) // { percent: 0.7 }\n```\n\n----------------------------------------\n\nTITLE: Creating Graphic Mode - TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates how to create a graphic mode within the Leafer.js editor. It involves setting up the necessary components and event listeners to enable users to draw and manipulate graphic elements within the editor. This example targets the TypeScript implementation.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/Editor/state.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/editor/create-mode.ts\n```\n\n----------------------------------------\n\nTITLE: ZoomEvent Simple Example (TypeScript)\nDESCRIPTION: Demonstrates a simple ZoomEvent example in TypeScript.  This example illustrates how to handle zoom events, potentially involving capturing the scale and reacting to zoom start, zoom, and zoom end events. It requires the viewport plugin or leafer-editor which integrates the plugin.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/event/ui/Zoom.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n<<< @/code/event-ui/zoom/simple.ts\n```\n\n----------------------------------------\n\nTITLE: Configuring App Zoom Range - Typescript\nDESCRIPTION: This code snippet demonstrates how to configure the zoom range of a LeaferJS App instance, including setting minimum and maximum zoom levels. It shows usage within an App context.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/config/app/zoom.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/app/viewport/app/zoom-config.ts [App]\n```\n\n----------------------------------------\n\nTITLE: Drawing a Corner Polygon\nDESCRIPTION: This code snippet shows how to draw a polygon with a corner using the Polygon element in Leafer.js. It shows how to define the points that form the polygon.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/basic/display.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Polygon/corner.ts\n```\n\n----------------------------------------\n\nTITLE: Image with Fixed Height, Auto Width\nDESCRIPTION: This code snippet demonstrates how to set a fixed height for the Image element, while the width adjusts automatically to maintain the aspect ratio.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Image.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Image/height.ts\n```\n\n----------------------------------------\n\nTITLE: Setting Edit Outer - LeaferJS (JavaScript)\nDESCRIPTION: This snippet shows how to set the `editOuter` property of an element in LeaferJS using JavaScript.  It illustrates the use of the `setEditOuter()` static method to link a specific editor tool with an element, dynamically altering the getter behavior of the `editOuter` property. This enables the element to utilize custom editing functionalities. The function accepts the editor tool name as a string, which is then used to modify how the element can be edited.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/editOuter/use.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n/// @/code/plugin/editor/editOuter/use/index.js\n```\n\n----------------------------------------\n\nTITLE: Swipe Event Example in TypeScript\nDESCRIPTION: Demonstrates a simple swipe event implementation using Leaferjs. The code snippet (simple.ts) illustrates how to listen for and handle swipe events, likely involving functions to detect swipe direction and trigger corresponding actions. It requires Leaferjs to be installed as a dependency.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/event/ui/Swipe.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/event-ui/swipe/simple.ts\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Hover State for Button in LeaferJS\nDESCRIPTION: This TypeScript snippet shows how to create a button in LeaferJS where the hover state is automatically synchronized between the parent button and its child elements. The `button` property is set to `true` to enable this synchronization. It relies on the LeaferJS UI element and related state management features.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/state/state.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/transition/button.ts\n```\n\n----------------------------------------\n\nTITLE: Mobile Editor Configuration\nDESCRIPTION: This code shows a configuration example tailored for mobile devices. It focuses on editor settings relevant to a mobile context.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/config/style.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/editor/config/mobile.ts\n```\n\n----------------------------------------\n\nTITLE: Defining NPM package name and Global Variable\nDESCRIPTION: This code illustrates the naming convention of leafer-x plugins using the selector plugin as an example. It demonstrates how a plugin should be named using npm package name (leafer-x-plugin_name) and the corresponding global variable (LeaferX.plugin_name). This convention ensures consistency and ease of use.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/dev.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nleafer-x-selector  # npm 包名：读作 leafer 乘以 selector （插件）\n\nLeaferX.selector # 全局变量\n```\n\n----------------------------------------\n\nTITLE: Button Transition Effects in LeaferJS (button.ts)\nDESCRIPTION: This code snippet demonstrates how to create smooth transition effects between different button states using LeaferJS. It utilizes LeaferJS's transition features to animate style changes, creating a more polished user experience. The transitions are triggered by state changes, such as hover or press, rather than direct property modifications.\nSOURCE: https://github.com/leaferjs/docs/blob/main/blog/2024-09-20.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/transition/button.ts\n```\n\n----------------------------------------\n\nTITLE: Handling Image Load Errors - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to specifically listen for and handle image load errors within Leaferjs. It outlines the process of attaching an event listener to capture the ImageEvent.ERROR and provides error handling logic.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/event/basic/Image.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/event/image/error.ts\n```\n\n----------------------------------------\n\nTITLE: Installing leafer-draw with bun\nDESCRIPTION: This command installs the leafer-draw package using bun. It adds leafer-draw as a dependency to your project. Bun is a new JavaScript runtime.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/draw/start.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nbun add leafer-draw\n```\n\n----------------------------------------\n\nTITLE: Rotating Around Point\nDESCRIPTION: This snippet shows how to rotate an element around a specified point using the `around` property in Leaferjs.  This is similar to anchor points in game engines and involves moving the element's internal around point to its (x,y) coordinates.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/basic/style.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/around/rotate.ts\n```\n\n----------------------------------------\n\nTITLE: Pausing Animation with pause() Method - Typescript\nDESCRIPTION: This code snippet demonstrates how to use the `pause()` method of the `Animate` class to pause an animation.  It showcases the basic syntax and context for pausing an animation within Leafer.js.  The code is assumed to be part of a larger Leafer.js project.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/animate/Animate/pause.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Leafer, Circle, Animate } from 'leafer-ui'\n\nconst leafer = new Leafer();\nleafer.run();\n\nconst circle = new Circle({ centerX: 100, centerY: 100, radius: 50, fill: 'red' });\nleafer.add(circle);\n\nconst animate = new Animate({\n    from: { x: 100 },\n    to: { x: 300 },\n    duration: 1000,\n    loop: true\n});\n\ncircle.animate(animate);\n\n// Pause the animation\nanimate.pause();\n```\n\n----------------------------------------\n\nTITLE: Apply Hover Style to UI Element (Leafer TS)\nDESCRIPTION: This code snippet demonstrates how to apply a hover style to a UI element in Leafer using the `hoverStyle` property. When the mouse cursor enters the element, the specified style changes are applied, and they are automatically reverted when the cursor leaves. Requires the interaction state plugin.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/state/hover.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/state/hoverStyle.ts\n```\n\n----------------------------------------\n\nTITLE: Setting width and height for Ellipse\nDESCRIPTION: Demonstrates how to set the width and height properties of an Ellipse to create a circle or an ellipse. The `width` property defines the X axis diameter, while the `height` property defines the Y axis diameter.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Ellipse.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// 圆\nwidth: 100\nheight: 100\n\n// 椭圆\nwidth: 50\nheight: 100\n```\n\n----------------------------------------\n\nTITLE: Drawing a Triangle with Polygon - Typescript (Leafer)\nDESCRIPTION: This code snippet (from triangle.ts) shows how to draw a triangle using the Polygon element in Leafer.js. The exact code is retrieved dynamically during build time using the <<< syntax.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Polygon.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Polygon/triangle.ts [Leafer]\n```\n\n----------------------------------------\n\nTITLE: Stopping Animation with Animate.stop() in Leaferjs\nDESCRIPTION: This code snippet demonstrates how to use the `stop()` method of the `Animate` class in Leaferjs to stop an animation. The example is located at `@/code/plugin/animate/animate/stop.ts` and provides a practical use case for stopping animations within the Leaferjs framework.  It is a core functionality of the animate plugin.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/animate/Animate/stop.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/animate/animate/stop.ts\n```\n\n----------------------------------------\n\nTITLE: Listening to Animation Events (Animation)\nDESCRIPTION: This snippet showcases how to listen for various animation events in Leafer.js when using the 'animation' type.  It demonstrates the implementation of callbacks for events such as 'created', 'play', 'pause', 'stop', 'seek', 'update', and 'completed'.  This allows developers to execute custom logic at different stages of the animation lifecycle.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/animate/options/event.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/animate/options/event/animation/ease.ts [animation]\n```\n\n----------------------------------------\n\nTITLE: Leafer Instance Structure\nDESCRIPTION: This code snippet shows the typical tree structure of a Leafer instance, consisting of a root Leafer object, a view for managing viewport transformations, and shapes that represent user-created graphics. This hierarchy allows for efficient organization and manipulation of visual elements.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/design/tree.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// 树结构\nleafer ————  view (视窗平移、缩放) —— shape (用户创建的图形)\n```\n\n----------------------------------------\n\nTITLE: Importing and Using LeaferView in Next.js Page (TSX)\nDESCRIPTION: This snippet demonstrates how to import and use the `LeaferView` component, which encapsulates the Leafer.js instance, within a Next.js page component. It simply imports the `LeaferView` and renders it within the `Home` component.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/framework/next/index.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport LeaferView from './leafer-view' // 引入client组件\n\nexport default function Home() {\n  return <LeaferView />\n}\n\n```\n\n----------------------------------------\n\nTITLE: Installing Arrow plugin with pnpm\nDESCRIPTION: Install the @leafer-in/arrow plugin using pnpm. This allows the use of arrow elements in Leaferjs.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/arrow/index.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm add @leafer-in/arrow\n```\n\n----------------------------------------\n\nTITLE: Button with Transition Effects - Typescript\nDESCRIPTION: Configuration for a button element showcasing transition effects.  This example, referenced from an external file (@/code/property/transition/button.ts), demonstrates how to apply transition properties to button states like hover or press to create animated visual feedback. The external file is not included here but is referenced.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/transition.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/transition/button.ts\n```\n\n----------------------------------------\n\nTITLE: Resetting Element Style\nDESCRIPTION: This snippet illustrates how to reset the style of an element in Leaferjs. The `main` export is used, implying it contains the logic for reverting the element to its default style.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/basic/style.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/basic/style/reset.ts#main\n```\n\n----------------------------------------\n\nTITLE: Modifying Element Style\nDESCRIPTION: This snippet demonstrates how to modify the style of an existing element in Leaferjs. It focuses on the `main` export from the specified file, which is assumed to contain the style modification logic.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/basic/style.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/basic/style/change.ts#main\n```\n\n----------------------------------------\n\nTITLE: Controlled Direction Linear Gradient Typescript\nDESCRIPTION: This snippet (referenced from `@/code/property/fill/linear/from.ts`) shows how to control the direction of a linear gradient in Leafer.js. It creates a gradient that transitions from the top-left corner to the bottom-right corner, resulting in a 45-degree gradient. The specific code contents are found in the linked file.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/paint/linear.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/fill/linear/from.ts\n```\n\n----------------------------------------\n\nTITLE: Creating a Frame - App - Typescript\nDESCRIPTION: Illustrates creating a Frame element using the App-specific API in Leafer. This snippet, intended to be viewed alongside the Leafer core example, shows how to integrate a Frame into a Leafer application, likely handling application-level configurations and event bindings.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Frame.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Frame/app/create.ts [App]\n```\n\n----------------------------------------\n\nTITLE: Dragging DOM Element to Canvas (TypeScript)\nDESCRIPTION: This TypeScript code snippet showcases how to drag a DOM element onto a Leafer.js canvas and create a corresponding graphic element. It uses browser native coordinate conversion methods to translate the DOM element's position into the Leafer.js coordinate system, ensuring proper placement of the graphic on the canvas. It requires access to the Leafer instance (tree) for adding the new element.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/advanced/coordinate.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/advanced/coordinate/browser/drop.ts [添加到 tree]\n```\n\n----------------------------------------\n\nTITLE: Immediately Stopping Event Propagation - Typescript\nDESCRIPTION: Demonstrates how to immediately stop event propagation to parent and sibling nodes using the `stopNow()` method in Leaferjs with Typescript.  Requires Leaferjs library to be installed.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/event/flow.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/event/stopNow.ts\n```\n\n----------------------------------------\n\nTITLE: ScaleOf with Resize Parameter - TypeScript\nDESCRIPTION: This code snippet illustrates the usage of the `scaleOf` method with the `resize` parameter in Leaferjs. It shows how scaling operations can be converted to width and height adjustments within the editor plugin, as demonstrated in the provided example.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/resize.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/editor/resize/scale.ts\n```\n\n----------------------------------------\n\nTITLE: Get Motion Path Length - Leafer.js - Typescript\nDESCRIPTION: Demonstrates how to get the total length of a motion path using the `getMotionTotal()` method in Leafer.js. This assumes that the Leafer.js library and motion path plugin are already installed and initialized. The `getMotionTotal` method is available on both UI elements and motion path elements.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/getMotionTotal.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/contest/dragon/step3.ts\n```\n\n----------------------------------------\n\nTITLE: Installing LeaferJS filter plugin with bun\nDESCRIPTION: This command installs the @leafer-in/filter package using bun.  Enables the use of custom filters in LeaferJS applications. This command integrates the filter support into the project.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/filter/index.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nbun add @leafer-in/filter\n```\n\n----------------------------------------\n\nTITLE: Dispatching UI Event - Leafer.js (JavaScript)\nDESCRIPTION: Illustrates how to simulate dispatching a UI event (e.g., PointEvent.DOWN) using the `emit` method in Leafer.js. This is the Javascript version of the UI event dispatch.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/emit.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<<< @/code/event/emit/ui.js\n```\n\n----------------------------------------\n\nTITLE: Convert Native Image to URL - TypeScript\nDESCRIPTION: This snippet showcases how to convert a native image object to a URL using Leafer.js's resource management capabilities. This involves setting the image with a key and then retrieving the URL. The snippet relies on the Leafer.js library.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/resource/Resource.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/resource/image/image.ts\n```\n\n----------------------------------------\n\nTITLE: Drawing Polyline - App Component (TypeScript)\nDESCRIPTION: This code snippet (App part) integrates the Leafer component, responsible for drawing polylines, into a full application structure.  It illustrates how the Leafer component's polyline drawing features are used in the app's rendering process.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Line.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Line/app/points.ts [App]\n```\n\n----------------------------------------\n\nTITLE: Fixed Gap (leafer-in/flow/gap/gap.ts)\nDESCRIPTION: Imports leafer and creates a container with a fixed gap between child elements using the gap property.  The example shows how to add spacing between elements in a flow layout.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/flow/index.md#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\n<<< @/code/plugin/flow/gap/gap.ts\n```\n\n----------------------------------------\n\nTITLE: Defining IRangeSize Interface\nDESCRIPTION: This TypeScript code defines the `IRangeSize` interface, which is used to specify the minimum and maximum values for a size range. It's used in the `widthRange` property to limit the autoWidth effect within specified bounds.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/flow/Flow/widthRange.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IRangeSize {\n  min?: number\n  max?: number\n}\n```\n\n----------------------------------------\n\nTITLE: Importing leafer-editor as a module (module)\nDESCRIPTION: This snippet demonstrates how to import leafer-editor as an ES module, specifically the unminified version. It imports Leafer, Editor, and Arrow from the specified CDN URL.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/editor/start.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import {\n    Leafer,\n    Editor,\n    Arrow,\n  } from 'https://unpkg.com/leafer-editor@1.5.3/dist/web.module.js'\n  // ...\n</script>\n```\n\n----------------------------------------\n\nTITLE: Drawing Horizontal Line - Leafer Component (TypeScript)\nDESCRIPTION: This code snippet (Leafer part) draws a horizontal line using Leafer.js. It represents the Leafer component's implementation for rendering a horizontal line. The complete example includes a separate 'App' component to integrate the Leafer component within a larger application.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Line.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Line/horizontal.ts [Leafer]\n```\n\n----------------------------------------\n\nTITLE: Drawing a Corner Star\nDESCRIPTION: This code snippet demonstrates how to draw a star with corners using the Star element in Leafer.js. It illustrates how to define the properties to create a star shape with specific corner characteristics.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/basic/display.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Star/corner.ts\n```\n\n----------------------------------------\n\nTITLE: Element Edit Config - TypeScript\nDESCRIPTION: Demonstrates how to set the `editConfig` property of an element to customize its editing behavior within the Leafer.js editor.  The specific implementation details are expected to be found in an external file referenced by the provided file path.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/editable.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/editor/editable/editConfig.ts\n```\n\n----------------------------------------\n\nTITLE: Drawing Rounded Corner Polyline - Leafer Component (TypeScript)\nDESCRIPTION: This code snippet shows how to draw a polyline with rounded corners using Leafer.js.  It demonstrates the Leafer component's implementation for creating this effect, using `cornerRadius` property, within a complete application.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Line.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Line/corner.ts [Leafer]\n```\n\n----------------------------------------\n\nTITLE: Text Wrap Type\nDESCRIPTION: Defines the TypeScript type for text wrapping options in Leaferjs' Text element. The options include 'normal', 'none', and 'break'.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Text.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype ITextWrap =\n｜'normal'  // 在允许的换行点自动换行，不断开word\n| 'none'  // 强制不换行\n| 'break' // 可断开word换行，类似 CSS 的 break-all\n```\n\n----------------------------------------\n\nTITLE: Animate Path with Motion Path in LeaferJS\nDESCRIPTION: This snippet showcases animating an arbitrary path using the motion path functionality in LeaferJS. It depends on the motion path and animation plugins.  The code illustrates how to define and apply a motion path to a shape.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/plugin/motion-path.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/animate/path.ts\n```\n\n----------------------------------------\n\nTITLE: Installing Text Editor Plugin with NPM\nDESCRIPTION: This command installs the text-editor plugin from @leafer-in using npm. It's a prerequisite for using the TextEditor component in Leaferjs.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/text-editor/index.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @leafer-in/text-editor\n```\n\n----------------------------------------\n\nTITLE: Image with Default Width and Height (Leafer)\nDESCRIPTION: This code snippet demonstrates how to use the Image element with default width and height settings in Leafer.js. The image will be displayed using its original dimensions if width and height are not explicitly set.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Image.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Image/stretch.ts\n```\n\n----------------------------------------\n\nTITLE: BlendMode SourceOut Example Typescript\nDESCRIPTION: Example code demonstrating the 'source-out' blend mode. Draws the new shape where it does not overlap with the existing canvas content. The code is assumed to be in a file named source-out.ts.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/blendMode.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/blendMode/source-out.ts\n```\n\n----------------------------------------\n\nTITLE: Animate with attrs property in Leaferjs (Specific)\nDESCRIPTION: Demonstrates usage of 'attrs' in Leaferjs's 'animate' function, focusing on a different 'animate' api compared to the first code snippet.  This might represent a different way to call or configure the animate functionality. Assumes Leaferjs environment.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/animate/options/attrs.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/animate/options/attrs/animate/ease.ts [animate]\n```\n\n----------------------------------------\n\nTITLE: Importing leafer-ui as a module (module)\nDESCRIPTION: This snippet demonstrates how to import leafer-ui as an ES module in your HTML file.  It downloads the unminified module version of leafer-ui from a CDN. This approach requires setting `type=\"module\"` on the script tag.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/ui/start.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import { Leafer } from 'https://unpkg.com/leafer-ui@1.5.3/dist/web.module.js'\n  // ...\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Line width and rotation (TypeScript)\nDESCRIPTION: This code snippet demonstrates setting the width and rotation properties of a Line element in Leafer.js to create a vertical line.  It sets the `width` to 100 and the `rotation` to 90 degrees.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Line.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// 竖线\nwidth: 100\nrotation: 90\n```\n\n----------------------------------------\n\nTITLE: Importing leafer-editor via script tag (web.min)\nDESCRIPTION: This snippet demonstrates how to import leafer-editor using a script tag, specifically the minified version for web browsers. It defines global variables Leafer, Editor and Arrow from the LeaferUI namespace.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/editor/start.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/leafer-editor@1.5.3/dist/web.min.js\"></script>\n<script>\n  const { Leafer, Editor, Arrow } = LeaferUI\n  // ...\n</script>\n```\n\n----------------------------------------\n\nTITLE: Adding Set Logic for Width Property in Leafer.js (TypeScript)\nDESCRIPTION: This TypeScript code snippet demonstrates how to add custom set logic for the 'width' property in a Leafer.js custom element's data processing class. It defines a `setWidth` method that performs calculations (rounding up the value) and stores it in a private variable.  It illustrates how to override the default setter behavior.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/custom/base/attr.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// 添加 width 的set处理逻辑\nexport class CustomData extends RectData {\n  _width: number // 计算数据的私有变量\n\n  //会自动转为 width 的 setter函数 并移除掉，所以不要调用super.setWidth(value)\n  setWidth(value: number): void {\n    this._width = Math.ceil(value)\n    // 通过 this.__leaf 可访问元素自身\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Animate Car with Motion Path - Typescript\nDESCRIPTION: This snippet demonstrates how to animate a car along a motion path in LeaferJS using Typescript. It requires the motion path and animation plugins to be installed or the use of leafer-game which has them integrated. It shows the basic setup for defining and utilizing a motion path for animation.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/motionPath.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/animate/car.ts\n```\n\n----------------------------------------\n\nTITLE: Set with attrs property in Leaferjs\nDESCRIPTION: Demonstrates using 'attrs' within Leaferjs's 'set' function. The 'attrs' property might define which properties are affected by the 'set' operation in relation to later animations.  This snippet shows how to apply 'attrs' when using the set API. It assumes a Leaferjs environment.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/animate/options/attrs.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/animate/options/attrs/set/ease.ts [set]\n```\n\n----------------------------------------\n\nTITLE: Setting Edit Outer - LeaferJS (TypeScript)\nDESCRIPTION: This snippet demonstrates how to set the `editOuter` property of an element in LeaferJS using TypeScript. It uses the `setEditOuter()` static method to associate a specific editor tool with an element. This effectively modifies the getter method of the `editOuter` property to enable the custom editor tool. This approach allows for attaching custom editing behaviors to elements.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/editOuter/use.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/// @/code/plugin/editor/editOuter/use/index.ts\n```\n\n----------------------------------------\n\nTITLE: Include LeaferJS Color Plugin via Script Tag\nDESCRIPTION: Includes the full version of the LeaferJS color plugin using a script tag. This allows access to the plugin's functionalities through the global variable LeaferIN.color. Requires a browser environment.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/color/index.md#_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"https://unpkg.com/@leafer-in/color@1.5.3/dist/color.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Around Alignment and Coordinate Definition in LeaferJS (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to define the 'around' property of a LeaferJS rectangle using both alignment strings (IAlign) and coordinate points (IUnitPointData). The alignment strings allow for quick positioning of the anchor point using predefined locations such as 'center', 'top-left', etc.  The IUnitPointData interface provides fine-grained control over the x and y coordinates of the anchor point, with options to specify coordinates in pixels or as percentages of the element's dimensions.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/around.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// 方位\ntype IAlign =\n  | 'top-left'\n  | 'top'\n  | 'top-right'\n  | 'right'\n  | 'bottom-right'\n  | 'bottom'\n  | 'bottom-left'\n  | 'left'\n  | 'center'\n\nrect.around = 'center'\n\n// 坐标点\ninterface IUnitPointData {\n  type?: 'percent' | 'px'\n  x: number\n  y: number\n}\n\nrect.around = {\n  type: 'percent',\n  x: 0.5, // 50% width  百分比坐标点\n  y: 0.5, // 50% height\n}\n\nrect.around = {\n  x: 50, // 50px 像素值坐标点\n  y: 50, // 50px\n}\n```\n\n----------------------------------------\n\nTITLE: Disabled Style Example - TypeScript\nDESCRIPTION: This example demonstrates how to use the `disabledStyle` property to apply specific styles when a UI element is disabled. It showcases how to define and apply styles such as color and opacity when the `disabled` property is set to true. The code snippet is from the file `@/code/property/state/disabledStyle.ts`.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/state/disabled.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/state/disabledStyle.ts\n```\n\n----------------------------------------\n\nTITLE: Combining Pen with Text - App\nDESCRIPTION: This snippet shows the application code for combining the Pen element with text elements. It showcases how text integration with the Pen is managed within the application. The application code likely handles text creation, styling, and positioning within the Leafer scene.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Pen.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Pen/app/text.ts [App]\n```\n\n----------------------------------------\n\nTITLE: Editor Before Rotate Hook Example (TypeScript)\nDESCRIPTION: Explains the usage of the `beforeRotate` hook within the Leaferjs editor configuration.  This hook facilitates the interception and modification of element rotation events before their execution. The hook's `data` parameter includes the `target`, `origin`, and `rotation` values.  Returning `false` cancels the rotation, while returning a numeric `rotation` value adjusts the rotation amount.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/config/event.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nbeforeRotate(data) {\n    const { target, origin, rotation } = data\n    return true // return false | rotation\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Dragging Example (JavaScript)\nDESCRIPTION: This code snippet provides the JavaScript equivalent of the manual dragging example. It showcases the same functionality as the TypeScript version, demonstrating dragging elements using LeaferJS. The complete code is located at `@/code/event-ui/drag/simple.js`.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/event/ui/Drag.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<<< @/code/event-ui/drag/simple.js\n```\n\n----------------------------------------\n\nTITLE: Linear Fill Example\nDESCRIPTION: This snippet provides an example of how to implement a linear fill style in Leaferjs.  It shows the basic structure and properties needed to create a linear gradient fill.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/basic/style.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/fill/linear/a.ts\n```\n\n----------------------------------------\n\nTITLE: Install LeaferJS Color Plugin with NPM\nDESCRIPTION: Installs the @leafer-in/color plugin using npm. This command adds the color functionalities to the LeaferJS project, enabling color format conversions and name-to-value lookups. Requires npm to be installed.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/color/index.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install @leafer-in/color\n```\n\n----------------------------------------\n\nTITLE: Installing @leafer-in/motion-path with yarn\nDESCRIPTION: This command installs the @leafer-in/motion-path package using yarn, another popular JavaScript package manager.  It adds the package and its dependencies to your project's node_modules directory. You can then use the motion path functionality within your Leaferjs application.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/motion-path/index.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @leafer-in/motion-path\n```\n\n----------------------------------------\n\nTITLE: Synchronously Export to Base64 String\nDESCRIPTION: Demonstrates synchronously exporting a LeaferJS element to a Base64 encoded string using `syncExport`.  Unlike the asynchronous `export`, `syncExport` blocks execution until the export is complete.  Requires the LeaferJS export plugin.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/basic/export.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/syncExport/string.ts\n```\n\n----------------------------------------\n\nTITLE: Creating Group element with children property (App)\nDESCRIPTION: Shows how to create a Group element and add child elements to it by directly manipulating the `children` property within an application using Leafer. This showcases the application-specific context for adding elements. It requires Leafer core library.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Group.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Group/app/children.ts [App]\n```\n\n----------------------------------------\n\nTITLE: Stopping Event Propagation - TypeScript\nDESCRIPTION: Demonstrates how to stop event propagation in Leafer.js using the `stop()` method within a TypeScript context. The `stop()` method prevents the event from propagating further up the DOM tree, but allows other event listeners on the same element to be executed.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/event/basic/Event.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/event/stop.ts\n```\n\n----------------------------------------\n\nTITLE: Creating a Frame - Leafer - Typescript\nDESCRIPTION: Demonstrates creating a Frame element using Leafer's core API. This snippet, part of a larger code group, showcases how to instantiate and configure a Frame within a Leafer application, likely setting properties such as size and background.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Frame.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Frame/create.ts [Leafer]\n```\n\n----------------------------------------\n\nTITLE: Opacity Linear Gradient Typescript\nDESCRIPTION: This snippet (referenced from `@/code/property/fill/linear/opacity.ts`) demonstrates how to set the opacity of a linear gradient in Leafer.js. This is typically used to create overlay effects. The specific code contents are found in the linked file.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/paint/linear.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/fill/linear/opacity.ts\n```\n\n----------------------------------------\n\nTITLE: Finding Element by Inner ID in LeaferJS (TypeScript)\nDESCRIPTION: Demonstrates how to use the `findOne` method to find a UI element by its inner ID in LeaferJS. It requires the find element plugin to be installed. The `findOne` method is called with the inner ID as the condition.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/findOne.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n<<< @/code/property/findOne/innerId.ts\n```\n\n----------------------------------------\n\nTITLE: Installing Leafer.js Viewport with Yarn\nDESCRIPTION: This command installs the @leafer-in/viewport package using yarn.  It adds the viewport plugin to your project, enabling zoom and pan viewport functionality. After installation, you can use the viewport API in your Leafer.js application.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/viewport/index.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @leafer-in/viewport\n```\n\n----------------------------------------\n\nTITLE: Installing @leafer-in/html with npm\nDESCRIPTION: Install the @leafer-in/html plugin using npm to enable HTMLText functionality in LeaferJS. This command adds the plugin to your project's dependencies.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/html/index.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @leafer-in/html\n```\n\n----------------------------------------\n\nTITLE: Update Editor Manually - Leaferjs Editor (TS)\nDESCRIPTION: This TypeScript code snippet demonstrates how to manually update the Leaferjs Editor. It is used to immediately display configured intermediate control points. This snippet requires the Leaferjs Editor plugin to be installed and configured.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/Editor/update.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// You need to import the necessary modules from Leaferjs.\n// import { Leafer, ... } from 'leafer-js';\n\n// Assuming you have an instance of the editor called 'editor'\n\n// Call the update method to manually refresh the editor's layout and styles.\n// This is useful for situations where changes are not automatically reflected.\n\n// editor.update();\n\n// Example usage: after configuring intermediate control points\n\n// editor.update();\n```\n\n----------------------------------------\n\nTITLE: Image with Default Width and Height (App)\nDESCRIPTION: This code snippet demonstrates how to use the Image element with default width and height settings in an App environment. The image will be displayed using its original dimensions if width and height are not explicitly set.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Image.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Image/app/stretch.ts\n```\n\n----------------------------------------\n\nTITLE: Custom Cursor Registration\nDESCRIPTION: Demonstrates how to replace system cursor names or register custom cursor names using `Cursor.set()` in Leafer. This assumes there is a Cursor object or class in the Leafer context that provides the set method.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/cursor.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/cursor/custom.ts\n```\n\n----------------------------------------\n\nTITLE: Loading SVG from String in Leaferjs\nDESCRIPTION: This snippet demonstrates how to load an SVG image from a string variable within Leaferjs.  It showcases the method for modifying SVG image colors by loading the SVG as a string. The code requires the Leaferjs library to be properly installed and configured.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/SVG.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/SVG/svg.ts\n```\n\n----------------------------------------\n\nTITLE: Initializing Leafer with manual start\nDESCRIPTION: This code snippet demonstrates how to initialize a Leafer instance with the `start` property set to `false`, allowing for manual control over the rendering process. This is useful when dealing with a large number of graphics that are created asynchronously, as it can improve creation speed. The snippet is expected to be placed within a TypeScript file.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/config/app/base.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/app/config/start.ts [Leafer]\n```\n\n----------------------------------------\n\nTITLE: Listening for Image Load Events - TypeScript\nDESCRIPTION: This code snippet demonstrates how to listen for image load events (load, loaded, error) in TypeScript using Leaferjs. It shows how to attach event listeners to an ILeaferImage object and handle the different image loading states.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/event/basic/Image.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/event/image/image.ts\n```\n\n----------------------------------------\n\nTITLE: Defining a Plugin Class in TypeScript\nDESCRIPTION: This code snippet demonstrates how to define a simple LeaferJS plugin class using TypeScript. It imports the `Group` class from the `@leafer-ui/core` package and extends it to create a `Selector` class. This plugin leverages the core LeaferUI functionality for creating a grouped element.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/dev.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Group } from '@leafer-ui/core'\n\nexport class Selector extends Group {}\n```\n\n----------------------------------------\n\nTITLE: Chained Matrix Operations - Typescript\nDESCRIPTION: Demonstrates chaining matrix methods for sequential transformations. The snippet sets the matrix and then applies scaling in a single, fluent operation, showcasing the return type of the methods.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/math/Matrix.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst matrix = new Matrix()\n\nmatrix.set(2, 0, 0, 2, 100, 100).scale(0.5) // { a: 1, b: 0, c: 0, d: 1, e: 100, f: 100 }\n```\n\n----------------------------------------\n\nTITLE: Resizing Leafer - Typescript\nDESCRIPTION: This TypeScript code demonstrates how to handle the ResizeEvent in Leafer.  It shows how to access the new width, height and pixel ratio after the resize. This code snippet is used to illustrate the usage of the ResizeEvent in a Leafer application.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/event/basic/Resize.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/event/leafer/resize.ts\n```\n\n----------------------------------------\n\nTITLE: Center with Center Y-Axis Alignment Typescript\nDESCRIPTION: Demonstrates centering the main content and also centering on the y-axis.  This likely uses `IFlowAxisAlign` with `content` set to `'center'` and `y` to `'center'`.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/flow/Flow/flowAlign.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/flow/flowAlign/y/center.ts\n```\n\n----------------------------------------\n\nTITLE: Defining IAlign and IUnitPointData for Origin - Typescript\nDESCRIPTION: Defines the IAlign type, which represents predefined alignment positions such as 'center', 'top-left', etc., and the IUnitPointData interface for specifying origin coordinates using either pixel values or percentages.  These are used to set the origin property of Leaferjs elements.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/origin.md#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n// 方位\ntype IAlign =\n  | 'top-left'\n  | 'top'\n  | 'top-right'\n  | 'right'\n  | 'bottom-right'\n  | 'bottom'\n  | 'bottom-left'\n  | 'left'\n  | 'center'\n\nrect.origin = 'center'\n\n// 坐标点\ninterface IUnitPointData {\n  type?: 'percent' | 'px'\n  x: number\n  y: number\n}\n\nrect.origin = {\n  type: 'percent',\n  x: 0.5, // 50% width  百分比坐标点\n  y: 0.5, // 50% height\n}\n\nrect.origin = {\n  x: 50, // 50px 像素值坐标点\n  y: 50, // 50px\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Touch (App)\nDESCRIPTION: This snippet demonstrates how to configure multi-touch settings within an App configuration in LeaferJS. It shows how to disable multi-touch functionality. The example code is located in '@/code/app/config/app/multiTouch.ts'.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/config/app/multiTouch.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/app/config/app/multiTouch.ts [App]\n```\n\n----------------------------------------\n\nTITLE: Installing LeaferJS State Plugin with Bun\nDESCRIPTION: This snippet demonstrates how to install the LeaferJS state plugin using bun. The plugin allows you to easily add interactive states to your LeaferJS elements. Make sure you have bun installed and configured in your project.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/state/index.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nbun add @leafer-in/state\n```\n\n----------------------------------------\n\nTITLE: Animate Speed - Transition Example (Typescript)\nDESCRIPTION: This example shows how to use the `speed` property with a Leaferjs transition to control the speed of the transition effect.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/animate/options/speed.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @/code/plugin/animate/options/speed/transition/ease.ts [transition]\n```\n\n----------------------------------------\n\nTITLE: Setting Dash Pattern\nDESCRIPTION: Sets the dash pattern for a rectangle's stroke using the `dashPattern` property.  This example creates a dashed stroke with segments of 20 units and gaps of 10 units.  Requires a `rect` object representing a rectangle. Creates a dashed line effect.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/stroke.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nrect.dashPattern = [20, 10] // [线段，间隙]\n```\n\n----------------------------------------\n\nTITLE: Creating a Rect Element with Simple Syntax\nDESCRIPTION: This code snippet demonstrates a concise way to create a Rect element in Leafer.js. It showcases a simplified syntax for defining basic properties of the rectangle.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/basic/display.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/basic/display/simple.ts\n```\n\n----------------------------------------\n\nTITLE: IAlign Type Definition Typescript\nDESCRIPTION: Defines the `IAlign` type, which specifies the alignment options for background images, similar to CSS's `background-position`.  It includes options for top-left, top, top-right, right, bottom-right, bottom, bottom-left, left, and center alignment.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/paint/image.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// 方位\ntype IAlign =\n  | 'top-left'\n  | 'top'\n  | 'top-right'\n  | 'right'\n  | 'bottom-right'\n  | 'bottom'\n  | 'bottom-left'\n  | 'left'\n  | 'center'\n```\n\n----------------------------------------\n\nTITLE: Flow Layout Auto Width Example\nDESCRIPTION: This code snippet demonstrates the use of the `autoWidth` property in Leafer.js to automatically expand the width of a UI element within a flow layout.  It showcases how the element's width adjusts to fill available space, influenced by the `autoWidth` value. This example focuses on width only.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/flow/Flow/autoWidth.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Leafer, Rect, Flow } from 'leafer-ui'\n\nconst leafer = new Leafer({\n    view: document.querySelector('#root'),\n    width: 300,\n    height: 160,\n    plugins: [new Flow()],\n    autoRender: true\n})\n\nleafer.add(new Rect({\n    width: 100,\n    height: 100,\n    fill: '#45B97C'\n}), new Rect({\n    autoWidth: 1,\n    height: 100,\n    fill: '#E36159'\n}))\n```\n\n----------------------------------------\n\nTITLE: ZoomEvent Simple Example (JavaScript)\nDESCRIPTION: Demonstrates a simple ZoomEvent example in JavaScript. This example showcases how to handle zoom events, likely involving capturing the scale and reacting to zoom start, zoom, and zoom end events. It depends on the viewport plugin or leafer-editor which integrates the plugin.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/event/ui/Zoom.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<<< @/code/event-ui/zoom/simple.js\n```\n\n----------------------------------------\n\nTITLE: Leaferjs Editor Start Example (TypeScript)\nDESCRIPTION: Illustrates the basic setup of the Leaferjs editor plugin in TypeScript, demonstrating the necessary configurations and initialization steps. This snippet serves as a starting point for integrating the editor into a Leaferjs application. It assumes a basic Leaferjs project setup is already in place.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/index.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/editor/start.ts [editor]\n```\n\n----------------------------------------\n\nTITLE: Configuring Leafer Zoom Range - Typescript\nDESCRIPTION: This code snippet demonstrates how to configure the zoom range of a LeaferJS instance, including setting minimum and maximum zoom levels. It shows usage within a Leafer context.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/config/app/zoom.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/app/viewport/zoom-config.ts [Leafer]\n```\n\n----------------------------------------\n\nTITLE: Adding Mutable Float Property to Text Element (addAttr)\nDESCRIPTION: Demonstrates how to add a mutable float property to a text element using the `addAttr` method. It illustrates creating a property that supports dynamic changes and potentially triggers re-layout or re-rendering of the element. This example showcases a more advanced scenario where the property's value can be updated.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/custom/addAttr.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/custom/addAttr2.ts\n```\n\n----------------------------------------\n\nTITLE: Install LeaferJS Color Plugin with Yarn\nDESCRIPTION: Installs the @leafer-in/color plugin using yarn. This command adds the color functionalities to the LeaferJS project, enabling color format conversions and name-to-value lookups. Requires yarn to be installed.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/color/index.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nyarn add @leafer-in/color\n```\n\n----------------------------------------\n\nTITLE: Installing Text Editor Plugin with Yarn\nDESCRIPTION: This command installs the text-editor plugin from @leafer-in using yarn. It's a prerequisite for using the TextEditor component in Leaferjs.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/text-editor/index.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @leafer-in/text-editor\n```\n\n----------------------------------------\n\nTITLE: Removing Pointer Event Listeners\nDESCRIPTION: This code snippet illustrates how to remove previously added pointer enter and leave event listeners from a rectangle in Leafer.js. It showcases the use of the `off` method for unbinding event handlers.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/basic/event.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nrect.off('pointer.enter', onEnter)\nrect.off('pointer.leave', onLeave)\n```\n\n----------------------------------------\n\nTITLE: Handling Selection Events in Leaferjs Editor (JavaScript)\nDESCRIPTION: This JavaScript code snippet demonstrates how to handle selection events within the Leaferjs editor plugin. It likely contains event listeners and handler functions implemented in JavaScript to capture and process select events.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/index.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n<<< @/code/plugin/editor/event/select.js\n```\n\n----------------------------------------\n\nTITLE: Stretching an Image\nDESCRIPTION: This code snippet shows how to stretch an Image element in Leafer.js. It demonstrates how to use the stretch property to adjust the image's appearance.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/basic/display.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Image/stretch.ts\n```\n\n----------------------------------------\n\nTITLE: Defining StrokeCap Type\nDESCRIPTION: Defines the `StrokeCap` type, which specifies the shape of the ends of a stroke.  The options are 'none', 'round', and 'square'.  This affects how the stroke is rendered at its endpoints. Used to customize the visual appearance of line ends.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/stroke.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype StrokeCap =\n  | 'none' // 无\n  | 'round' // 圆形\n  | 'square' // 方形\n```\n\n----------------------------------------\n\nTITLE: Flow Layout along X axis reversed\nDESCRIPTION: This code snippet, located in '@/code/plugin/flow/flow/x-reverse.ts', demonstrates how to use the reversed flow layout with the x-axis in LeaferJS. It shows the configuration required to automatically arrange elements horizontally in reverse order.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/flow/Flow/flow.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/flow/flow/x-reverse.ts\n```\n\n----------------------------------------\n\nTITLE: Canvas Context Drawing Example (App)\nDESCRIPTION: This code snippet demonstrates the application-side code for drawing on a Leafer canvas using the context API. It complements the Leafer-specific code and provides the context within which the canvas operations are performed.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Canvas.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Canvas/app/context.ts [App]\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Touch (Leafer)\nDESCRIPTION: This snippet demonstrates how to configure multi-touch settings within a Leafer application.  It shows how to disable multi-touch functionality. It is assumed this code resides in '@/code/app/config/multiTouch.ts'.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/config/app/multiTouch.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/app/config/multiTouch.ts [Leafer]\n```\n\n----------------------------------------\n\nTITLE: Importing Scroll Plugin with script tag (full)\nDESCRIPTION: Imports the ScrollBar plugin using a script tag, accessing its functionality through the global LeaferIN.scroll object. This method requires including the scroll.js file in your HTML.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/scroll/index.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/@leafer-in/scroll@1.5.3/dist/scroll.js\"></script>\n<script>\n  const { ScrollBar } = LeaferIN.scroll\n</script>\n```\n\n----------------------------------------\n\nTITLE: Client Point Interface\nDESCRIPTION: Defines the IClientPointData interface for representing client coordinates, typically from browser events. It includes clientX and clientY properties to store the horizontal and vertical coordinates, respectively.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Leafer.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IClientPointData {\n  clientX: number\n  clientY: number\n}\n```\n\n----------------------------------------\n\nTITLE: Simultaneous Click Events\nDESCRIPTION: This code snippet demonstrates how to configure the application to trigger `tap`, `double_tap`, and `long_tap` events simultaneously by setting `pointer.tapMore` to true.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/event/ui/Pointer.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/event-ui/pointer/tapMulti.ts\n```\n\n----------------------------------------\n\nTITLE: Creating a Box - App\nDESCRIPTION: Shows how to create a Box element within a Leafer App context. This likely involves integrating the Box into the application's scene graph. The complete code is located in the file specified.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Box.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Box/app/create.ts [App]\n```\n\n----------------------------------------\n\nTITLE: Defining ILeaferType enum in Typescript\nDESCRIPTION: This code snippet defines an enum-like type, `ILeaferType`, in Typescript, which specifies the different types of Leafer scenes that can be configured. It includes options like 'block', 'viewport', 'editor', 'design', 'board', 'document', 'app', 'website', 'game', 'player', 'chart', and 'custom'. This type is used to define the type of the viewport.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/config/app/type.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype ILeaferType =\n  | 'block' // 块状融入场景\n  ｜'viewport' // 基础视口场景\n  | 'editor' // 图形编辑场景\n  | 'design' // 设计场景\n  | 'board' // 白板场景\n  | 'document' // 文档场景\n  | 'app' // 应用场景\n  | 'website' // 网站场景\n  | 'game' // 游戏场景\n  | 'player' // 动画播放场景\n  | 'chart' // 图表场景\n  | 'custom' // 自定义\n```\n\n----------------------------------------\n\nTITLE: Rotate Cursor Configuration in Leafer (TypeScript)\nDESCRIPTION: This code snippet defines the configuration for the rotate cursor in the Leafer editor. It uses an SVG string, including a rotation transform that relies on the `rotation` variable, along with the x and y coordinates of the rotation point. It allows for a customized visual rotation cursor.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/config/cursor.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  url: `\n<svg width=\"24\" height=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n  <g transform=\"rotate(135,12,12),rotate({{rotation}},12,12)\">\n    <path\n      fill-rule=\"evenodd\"\n      d=\"M17 3L20.4 7.5H17.9C17.7 13.1 13.1 17.7 7.5 17.9V20.4L3 17L7.5 13.5V15.9C12.0 15.7 15.7 12.0 15.9 7.5H13.5L17 3Z\"\n      fill=\"black\"\n    />\n  </g>\n</svg>` // svg字符串， {{rotation}}为旋转变量\n  x: 12 // x轴旋转中心点\n  y: 12 // y轴旋转中心点\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @leafer-draw/node with bun\nDESCRIPTION: Installs the @leafer-draw/node package using bun. This allows you to use the drawing functionalities in a Node.js environment. It requires bun to be installed.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/draw/node/start.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nbun add @leafer-draw/node\n```\n\n----------------------------------------\n\nTITLE: Accessing Input Data - TypeScript\nDESCRIPTION: Illustrates accessing the raw input data directly from the element and using the `get` method, highlighting the return values when the data is explicitly set vs. when relying on default values.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/data.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst rect = new Rect()\n\nrect.get('width') //  undefined，返回输入数据\nrect.width // 100，返回输入数据优先, 不存在则返回默认值\n```\n\n----------------------------------------\n\nTITLE: Image with Fixed Width, Auto Height (Leafer)\nDESCRIPTION: This code snippet demonstrates how to set a fixed width for the Image element, while the height adjusts automatically to maintain the aspect ratio in Leafer.js.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Image.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Image/width.ts\n```\n\n----------------------------------------\n\nTITLE: Listening to element lifecycle events using initialization\nDESCRIPTION: This code snippet demonstrates how to listen for element lifecycle events during the initialization phase using the initialization method in LeaferJS.  It shows how to attach event listeners for different lifecycle states such as mounting, unmounting, and destruction of a UI element. The code uses the `ChildEvent` and `PropertyEvent` classes to handle the respective event notifications.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/life/ui.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/life/ui/index.ts\n```\n\n----------------------------------------\n\nTITLE: Combining Pen with Images - App\nDESCRIPTION: This snippet presents the application code for combining the Pen element with images. It shows how the Leafer image integration with the Pen is handled within the application. The application code likely manages image loading and placement within the Leafer context.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Pen.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Pen/app/image.ts [App]\n```\n\n----------------------------------------\n\nTITLE: Center Alignment (leafer-in/flow/flowAlign/center.ts)\nDESCRIPTION: Imports leafer and configures the flowAlign property to center-align child elements within the container. This example demonstrates how to horizontally align elements when flow direction is set to 'x'.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/flow/index.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\n<<< @/code/plugin/flow/flowAlign/center.ts\n```\n\n----------------------------------------\n\nTITLE: Manual Element Grouping in Editor\nDESCRIPTION: This TypeScript code snippet demonstrates how to manually group elements within the LeaferJS Editor. It showcases the usage of the `group` method to create a new group from selected elements. The code also sets the `editable` property to `true` and `hitChildren` to `false` on the newly created group.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/Editor/group.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngroup.editable = true\ngroup.hitChildren = false\n```\n\n----------------------------------------\n\nTITLE: Initializing Leafer with Auto Grow Width - Typescript\nDESCRIPTION: This snippet demonstrates creating a Leafer instance that automatically grows in width to accommodate its content.  Height remains fixed, while width expands as needed.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/basic/leafer.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Padding Array Example\nDESCRIPTION: Illustrates setting the padding property using different array configurations to control the padding on each side of the text.  Shows examples with 4, 3, 2, and 1 values.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Text.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\npadding: [20, 10, 20, 10] // [top, right, bottom, left]\npadding: [20, 10, 20] // [top, (right-left), bottom]\npadding: [20, 10] // [ (top-bottom), (right-left)]\npadding: 20 // all\n```\n\n----------------------------------------\n\nTITLE: Animate Completed Example\nDESCRIPTION: This code snippet demonstrates the usage of the 'completed' property of the Animate class in Leafer.js. It likely showcases how to check if an animation has finished executing.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/animate/Animate/state.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/animate/animate/completed.ts\n```\n\n----------------------------------------\n\nTITLE: Animate Speed - Animate Example (Typescript)\nDESCRIPTION: This example demonstrates the usage of the `speed` property within a Leaferjs `animate` call, altering the playback speed of the animation defined within.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/animate/options/speed.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// @/code/plugin/animate/options/speed/animate/ease.ts [animate]\n```\n\n----------------------------------------\n\nTITLE: Including TextEditor via Script Tag\nDESCRIPTION: This code snippet demonstrates how to include the Leaferjs TextEditor plugin via a script tag. It fetches the full version from unpkg and makes the `TextEditor` class available through the global `LeaferIN.textEditor` object.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/text-editor/index.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/@leafer-in/text-editor@1.5.3/dist/text-editor.js\"></script>\n<script>\n  const { TextEditor } = LeaferIN.textEditor\n</script>\n```\n\n----------------------------------------\n\nTITLE: Path Drawing with Pen\nDESCRIPTION: This snippet, from '@/code/property/path/Path/pen.ts', demonstrates using the `pen` property to draw paths, showing how to create custom shapes programmatically. It uses the PathCreator API to define the path geometry.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Path.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/path/Path/pen.ts\n```\n\n----------------------------------------\n\nTITLE: IPathString Example\nDESCRIPTION: This code snippet demonstrates how to define a path using a string format that supports both SVG and Canvas drawing commands. The string represents a sequence of drawing commands such as moveTo, lineTo, and closePath.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/interface/ui/PathData.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = 'M 0 0 L 100 100 L 0 100 Z'\n```\n\n----------------------------------------\n\nTITLE: Animate Speed - Animation Example (Typescript)\nDESCRIPTION: This example demonstrates how to set the `speed` property to 5 for a Leaferjs animation. The animation will play 5 times faster than its original duration.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/animate/options/speed.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// @/code/plugin/animate/options/speed/animation/ease.ts [animation]\n```\n\n----------------------------------------\n\nTITLE: Resizing a Group in LeaferJS without Scale (TypeScript)\nDESCRIPTION: This code snippet illustrates how to adjust the size of a Group element in LeaferJS without using the scale property. It likely uses `resizeWidth()` and `resizeHeight()` methods or similar to modify the dimensions.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/size.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/resize/group.ts\n```\n\n----------------------------------------\n\nTITLE: Canvas Context Settings Interface Definition\nDESCRIPTION: Defines the interface for configuring the rendering context of a canvas. It includes properties for alpha, colorSpace, desynchronized, and willReadFrequently.  These settings are applied when calling `canvas.getContext('2d', settings)`.  It allows customization of the canvas's rendering behavior.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Canvas.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncanvas.getContext('2d', settings)\n\ninterface ICanvasRenderingContext2DSettings {\n  alpha?: boolean // 画布是否包含alpha通道， 默认为false\n  colorSpace?: 'display-p3' | 'srgb' // 颜色空间， 默认为srgb\n  desynchronized?: boolean // 低延时渲染，默认为false\n  willReadFrequently?: boolean // 用于 getImageData() 加速， 默认为false\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Point Type Configuration\nDESCRIPTION: This code snippet demonstrates how to set the pointType configuration, which allows customization of control point functionality. It includes setting the pointType to 'resize' for a default resize button.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/config/style.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\npoint: { pointType: 'resize' }, // 默认 resize 按钮\n```\n\n----------------------------------------\n\nTITLE: Installing @leafer-in/motion-path with bun\nDESCRIPTION: This command installs the @leafer-in/motion-path package using bun, a JavaScript runtime and package manager.  It adds the package and its dependencies to your project. After the installation, you can implement motion paths in your Leaferjs project.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/motion-path/index.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nbun add @leafer-in/motion-path\n```\n\n----------------------------------------\n\nTITLE: Disabling partial rendering in Leafer\nDESCRIPTION: This code snippet demonstrates how to disable partial rendering for a Leafer instance by setting the `usePartRender` property to `false` in the leafer config. Partial rendering optimizes performance by only rendering changed portions of the scene, but disabling it may be necessary in some cases. The snippet is expected to be placed within a TypeScript file.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/config/app/base.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/app/config/partRender.ts [Leafer]\n```\n\n----------------------------------------\n\nTITLE: Editor Buttons Configuration\nDESCRIPTION: Configures editor buttons with fixed direction. This code snippet, likely written in TypeScript, demonstrates how to set up editor button configurations, particularly focusing on maintaining a fixed button direction even when the element is rotated or flipped.  It showcases the use of properties such as `buttonsDirection` and `buttonsFixed` to customize the button group's behavior within the LeaferJS editor.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/config/buttons.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/editor/buttons.ts\n```\n\n----------------------------------------\n\nTITLE: Inner Shadow Blur Example\nDESCRIPTION: This snippet demonstrates how to apply a blur effect to an element's inner shadow in Leaferjs. It shows the properties and configuration required to create a blurred inner shadow.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/basic/style.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/innerShadow/blur.ts\n```\n\n----------------------------------------\n\nTITLE: Element Destruction in Leafer.js (TypeScript)\nDESCRIPTION: Illustrates how to completely destroy an element, releasing all associated resources. This involves removing the element from the display list and freeing up memory. The specific implementation details of the destroy() method depend on the Leafer.js version and element type.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/basic/remove.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/basic/remove/destroy.ts\n```\n\n----------------------------------------\n\nTITLE: Including LeaferJS filter plugin via script tag\nDESCRIPTION: This script tag includes the full version of the LeaferJS filter plugin.  It loads the filter.js file from the unpkg CDN, providing access to the plugin's functionality through the `LeaferIN.filter` global variable.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/filter/index.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/@leafer-in/filter@1.5.3/dist/filter.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Dispatching a Pointer Event\nDESCRIPTION: This code snippet shows how to manually dispatch a pointer enter event on a rectangle in Leafer.js. It demonstrates the usage of the `emit` method to trigger events programmatically.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/basic/event.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nrect.emit('pointer.enter', { current: rect })\n```\n\n----------------------------------------\n\nTITLE: Simulating Rotate Event in Leafer.js (JavaScript)\nDESCRIPTION: Simulates a rotate event using the `rotate` method on the `leafer.interaction` instance. Requires an `IRotateEvent` data object to specify the rotation details, such as the angle and center point.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/event/simulation.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n<<< @/code/interaction/rotate.js\n```\n\n----------------------------------------\n\nTITLE: FlowGap Auto Spacing Example\nDESCRIPTION: Demonstrates using the 'auto' gap option, which automatically distributes remaining space equally between elements.  This is expected from the `auto.ts` file.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/flow/Flow/gap.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/flow/gap/auto.ts\n```\n\n----------------------------------------\n\nTITLE: Platform Render Request Animation Frame\nDESCRIPTION: This code snippet demonstrates a cross-platform method similar to `window.requestAnimationFrame` for requesting rendering or animation frames, typically at a rate of 60 frames per second.  It abstracts the platform-specific implementation details, providing a consistent interface for triggering rendering updates. The specifics of the code depends on the actual content of the imported file.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/event/basic/Render.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/platform/render.ts\n```\n\n----------------------------------------\n\nTITLE: Defining StrokeAlign Type\nDESCRIPTION: Defines the `StrokeAlign` type, which specifies the alignment of the stroke. The options are 'inside', 'center', and 'outside'.  This determines whether the stroke is drawn inside, centered on, or outside the element's border. Used to control the appearance of strokes on UI elements.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/stroke.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype StrokeAlign = 'inside' | 'center' | 'outside' //  内部  |  居中 ｜ 外部\n```\n\n----------------------------------------\n\nTITLE: Rounded Hexagon App Implementation - Typescript\nDESCRIPTION: This snippet (from app/corner.ts) details the app implementation of a rounded hexagon using Leafer.js Polygon element and Typescript. The code is dynamically included via the <<< syntax.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Polygon.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Polygon/app/corner.ts [App]\n```\n\n----------------------------------------\n\nTITLE: Creating Group using tag object\nDESCRIPTION: Demonstrates creating a Group element using a tag object in Leafer. This snippet shows a declarative approach to defining and creating the Group and its properties. It relies on Leafer's tag-based instantiation. It requires Leafer core library.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Group.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/basic/display/tag.ts\n```\n\n----------------------------------------\n\nTITLE: Creating a Leafer instance with a draggable rectangle (index.ts)\nDESCRIPTION: Creates a Leafer instance and adds a draggable rectangle to it. It imports Leafer and Rect from '@leafer-editor/miniapp'. It initializes a Leafer instance, creates a Rect object with specified dimensions, color, and draggable property, and adds the rectangle to the Leafer stage.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/editor/miniapp/start.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Leafer, Rect } from '@leafer-editor/miniapp'\n\nPage({\n  onReady() {\n    // this 为当前小程序页面实例\n    const leafer = new Leafer({ view: 'leafer', eventer: this })\n\n    const rect = new Rect({\n      x: 100,\n      y: 100,\n      width: 100,\n      height: 100,\n      fill: '#32cd79',\n      draggable: true,\n    })\n\n    leafer.add(rect)\n  },\n  receiveEvent() {}, // 约定接收交互事件的方法名\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Leafer Flow and Resize Plugins\nDESCRIPTION: These commands install the @leafer-in/flow and @leafer-in/resize plugins using npm, pnpm, yarn, and bun.  These plugins are required to use the Flow element for automatic layout. Installation makes the Flow element available within LeaferJS.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/flow/index.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nbun add @leafer-in/flow\nbun add @leafer-in/resize\n```\n\n----------------------------------------\n\nTITLE: Setting a translucent circle as mask - Typescript\nDESCRIPTION: This code snippet shows how to use a translucent circle as a mask within Leaferjs, leveraging Typescript. It is designed for Leaferjs environments, and focuses on how opacity interacts with masking.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/mask.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/mask/opacity.ts\n```\n\n----------------------------------------\n\nTITLE: Disable Flow Layout in Leafer.js (TypeScript)\nDESCRIPTION: This TypeScript code snippet demonstrates how to prevent an element from participating in automatic layout in Leafer.js by setting the `inFlow` property to `false`.  This allows for manual positioning of the element. The code assumes a Leafer.js context and the availability of Leafer UI components.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/flow/Flow/inFlow.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n//@/code/plugin/flow/inFlow/out.ts\n```\n\n----------------------------------------\n\nTITLE: Listening for Capture Events - Javascript\nDESCRIPTION: Demonstrates how to listen for capture events in Leaferjs using Javascript. This allows you to capture events as they travel down the DOM tree towards the target element.  Requires Leaferjs library to be installed.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/event/flow.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<<< @/code/event/capture/on.js\n```\n\n----------------------------------------\n\nTITLE: Installing LeaferJS Locally (Shell)\nDESCRIPTION: This snippet provides the shell commands to clone the LeaferJS repository, navigate to the directory, install dependencies, and start the local development server. It utilizes git to clone the repository with submodules and npm to manage dependencies.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/runtime.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone  https://github.com/leaferjs/LeaferJS.git --recurse-submodules\n\ncd LeaferJS\n\nnpm install\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Importing leafer-draw as a module (module.min)\nDESCRIPTION: This HTML snippet imports leafer-draw as an ES module, referencing the minified version from unpkg. It uses the `import` statement to import the `Leafer` object.  This requires a module-compatible environment.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/draw/start.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import { Leafer } from 'https://unpkg.com/leafer-draw@1.5.3/dist/web.module.min.js'\n  // ...\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring startAngle and endAngle\nDESCRIPTION: Illustrates how to use `startAngle` and `endAngle` to define the arc of an ellipse, creating a sector. These properties represent the starting and ending angles of the arc, respectively, and range from -180 to 180 degrees.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Ellipse.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// 扇形\nstartAngle: -60\nendAngle: 180\n```\n\n----------------------------------------\n\nTITLE: Drawing a Smooth Polygon - Typescript (Leafer)\nDESCRIPTION: This code snippet (from curve.ts) demonstrates creating a smooth polygon by setting the `curve` property of the Polygon element in Leafer.js. Actual code is included using the <<< syntax.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Polygon.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Polygon/curve.ts [Leafer]\n```\n\n----------------------------------------\n\nTITLE: Modify Font Size by Dragging Control Point - Typescript\nDESCRIPTION: This snippet demonstrates how to modify the font size of an element by dragging a control point within the Leaferjs editor. The code is likely related to event handling and updating the fontSize property of the text element.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/config/base.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/editor/config/style/point/fontSize.ts\n```\n\n----------------------------------------\n\nTITLE: Setting the Line toPoint Property (TypeScript)\nDESCRIPTION: This snippet illustrates how to set the `toPoint` property of a Line element. The toPoint property defines the target point relative to the element's origin, and the `width` and `rotation` are automatically calculated based on it.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Line.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nline.toPoint = { x: 0, y: 100 }\n\nconsole.log(line.toPoint) // {x: 0, y: 100})  会根据 width 与 rotation 自动换算\n```\n\n----------------------------------------\n\nTITLE: Animate Swing Loop\nDESCRIPTION: Explains how to create animations that swing back and forth between starting and ending points in Leaferjs.  The snippets demonstrate the 'swing' loop option across different animation types ('animation', 'transition', 'set', 'animate'). Swing loops create a pendulum-like effect.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/animate/options/loop.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nRefer to @/code/plugin/animate/options/loop/animation/swing.ts for animation code.\n```\n\nLANGUAGE: typescript\nCODE:\n```\nRefer to @/code/plugin/animate/options/loop/transition/swing.ts for transition code.\n```\n\nLANGUAGE: typescript\nCODE:\n```\nRefer to @/code/plugin/animate/options/loop/set/swing.ts for set code.\n```\n\nLANGUAGE: typescript\nCODE:\n```\nRefer to @/code/plugin/animate/options/loop/animate/swing.ts for animate code.\n```\n\nLANGUAGE: typescript\nCODE:\n```\nRefer to @/code/plugin/animate/options/loop/swing.ts for Animate code.\n```\n\n----------------------------------------\n\nTITLE: Importing Leafer Flow and Resize via Script Tags\nDESCRIPTION: This code imports the @leafer-in/flow and @leafer-in/resize plugins using script tags, making the Flow class available via the global LeaferIN.flow object.  This allows using the Flow element without a package manager. The Flow class is then extracted for direct use.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/flow/index.md#_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"https://unpkg.com/@leafer-in/flow@1.5.3/dist/flow.js\"></script>\n<script src=\"https://unpkg.com/@leafer-in/resize@1.5.3/dist/resize.js\"></script>\n<script>\n  const { Flow } = LeaferIN.flow\n</script>\n```\n\n----------------------------------------\n\nTITLE: Destroying Animate Instance\nDESCRIPTION: This code snippet demonstrates how to use the `destroy()` method on an `Animate` instance to immediately stop the animation.  The animation will halt in its current state without completing any remaining steps. This example is taken from the Leaferjs plugin animate.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/animate/Animate/destroy.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Importing leafer-editor as a module (module.min)\nDESCRIPTION: This snippet demonstrates how to import leafer-editor as an ES module, specifically the minified version. It imports Leafer, Editor, and Arrow from the specified CDN URL.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/editor/start.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import {\n    Leafer,\n    Editor,\n    Arrow,\n  } from 'https://unpkg.com/leafer-editor@1.5.3/dist/web.module.min.js'\n  // ...\n</script>\n```\n\n----------------------------------------\n\nTITLE: BlendMode Luminosity Example Typescript\nDESCRIPTION: Example code demonstrating the 'luminosity' blend mode. Preserves the hue and chroma of the bottom layer, while adopting the luma of the top layer. The code is assumed to be in a file named luminosity.ts.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/blendMode.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/blendMode/luminosity.ts\n```\n\n----------------------------------------\n\nTITLE: Frame Coordinate Retrieval (Leafer)\nDESCRIPTION: This snippet shows how to get frame coordinates by specifying a relative UI element.  It demonstrates using the `relative` parameter in coordinate conversion methods. Requires the Leafer framework.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/point/index.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/point/frame.ts\n```\n\n----------------------------------------\n\nTITLE: Simulating Zoom Event in Leafer.js (TypeScript)\nDESCRIPTION: Simulates a zoom event using the `zoom` method on the `leafer.interaction` instance. Requires an `IZoomEvent` data object to specify the zoom details, such as scale and center point.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/event/simulation.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/interaction/zoom.ts\n```\n\n----------------------------------------\n\nTITLE: Install Leaferjs Animate and Color plugins\nDESCRIPTION: These commands install the @leafer-in/animate and @leafer-in/color plugins using npm, pnpm, yarn, and bun.  These plugins are required to use the Animate class. The animate plugin provides animation functionality, and the color plugin handles color transitions.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/animate/index.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @leafer-in/animate\nnpm install @leafer-in/color\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @leafer-in/animate\npnpm add @leafer-in/color\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @leafer-in/animate\nyarn add @leafer-in/color\n```\n\nLANGUAGE: sh\nCODE:\n```\nbun add @leafer-in/animate\nbun add @leafer-in/color\n```\n\n----------------------------------------\n\nTITLE: Importing leafer-ui via script tags (web)\nDESCRIPTION: This snippet demonstrates how to include leafer-ui in your HTML file using script tags. It downloads and executes the unminified version of leafer-ui from a CDN.  It also shows how to access LeaferUI global object and how to use different aliases for Image, PointerEvent, and DragEvent to avoid naming conflicts with browser built-ins.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/ui/start.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/leafer-ui@1.5.3/dist/web.js\"></script>\n<script>\n  const { Leafer } = LeaferUI // 全局变量，包含 leafer-ui的所有功能\n\n  // Image、PointerEvent、DragEvent 会与浏览器的全局变量冲突，请使用以下别名代替\n  const { MyImage, MyPointerEvent, MyDragEvent } = LeaferUI\n\n  // ...\n</script>\n```\n\n----------------------------------------\n\nTITLE: Drawing Colored Shapes with Pen - App\nDESCRIPTION: This snippet shows the corresponding application code for drawing colored shapes using the Pen element. It demonstrates how the Leafer component is integrated into a larger application context. The application code typically manages the overall structure and interaction with the Leafer component.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Pen.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Pen/app/color.ts [App]\n```\n\n----------------------------------------\n\nTITLE: Cloning the Plugin Development Template\nDESCRIPTION: This code snippet provides the command to clone the LeaferJS plugin development template from GitHub. This template includes necessary configurations and tools (Typescript, Rollup.js, Vite, and Vitest) to quickly start developing plugins, saving time from manual setup.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/dev.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/leaferjs/leafer-x\n```\n\n----------------------------------------\n\nTITLE: Bottom Center Flow Alignment Typescript\nDESCRIPTION: Shows bottom center alignment using `flowAlign` set to `'bottom'`.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/flow/Flow/flowAlign.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/flow/flowAlign/bottom.ts\n```\n\n----------------------------------------\n\nTITLE: Setting a Path as an Eraser in Leaferjs\nDESCRIPTION: This snippet demonstrates using a path element as an eraser in Leaferjs. Using paths as erasers provides flexibility in defining the exact shape of the erased area.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/eraser.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/eraser/path.ts\n```\n\n----------------------------------------\n\nTITLE: Installing LeaferJS filter plugin with pnpm\nDESCRIPTION: This command installs the @leafer-in/filter package using pnpm. It provides the necessary filter functionalities for LeaferJS. This command integrates the filter into the project.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/filter/index.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @leafer-in/filter\n```\n\n----------------------------------------\n\nTITLE: Printing Selected Elements List in Editor\nDESCRIPTION: This code snippet demonstrates how to access and print the list of selected elements within the LeaferJS Editor. It relies on the Editor's API to retrieve the currently selected elements and then logs them to the console. The code assumes that you have access to the editor instance.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/Editor/list.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Editor } from '@leafer/editor'\n\n// Assuming you have an editor instance\nlet editor: Editor;\n\n// Function to print the selected elements\nfunction printSelectedElements(editor: Editor) {\n  const selectedElements = editor.selector.list;\n  console.log(\"Selected Elements:\", selectedElements);\n}\n\n// Example usage (assuming the editor is initialized and accessible)\n// printSelectedElements(editor);\n```\n\n----------------------------------------\n\nTITLE: BlendMode DestinationOut Example Typescript\nDESCRIPTION: Example code demonstrating the 'destination-out' blend mode. Only preserves the non-overlapping part of the existing canvas content and the new shape. The code is assumed to be in a file named destination-out.ts.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/blendMode.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/blendMode/destination-out.ts\n```\n\n----------------------------------------\n\nTITLE: BlendMode Type Definition Typescript\nDESCRIPTION: Defines the BlendMode type, which is a union of string literals representing different blend modes. These blend modes determine how the pixels of an element are blended with the pixels of the elements behind it. Includes standard blend modes and compositing operators.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/blendMode.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype BlendMode =\n  | 'pass-through' // 穿透，默认值，性能最好\n  | 'normal' // 正常，会单独绘制在一个层上，大量使用会有性能问题，一般用于隔离Group内的混合样式，防止影响Group外的元素\n  | 'multiply' // 正片叠底---\n  | 'darken' // 变暗\n  | 'color-burn' // 颜色加深\n  | 'lighten' // 变亮---\n  | 'color-dodge' // 颜色减淡\n  | 'screen' // 滤色\n  | 'overlay' // 叠加---\n  | 'hard-light' // 强光\n  | 'soft-light' // 柔光\n  | 'difference' // 差集---\n  | 'exclusion' // 排除\n  | 'hue' // 色相 ---\n  | 'saturation' // 饱和度\n  | 'color' // 颜色\n  | 'luminosity' // 明度\n  // other\n  | 'source-over' // 在现有画布上绘制新图形。\n  | 'source-in' // 仅在新形状和目标画布重叠的地方绘制新形状。其他的都是透明的。\n  | 'source-out' // 在不与现有画布内容重叠的地方绘制新图形。\n  | 'source-atop' // 只在与现有画布内容重叠的地方绘制新图形。\n  | 'destination-over' // 在现有画布内容的后面绘制新的图形。\n  | 'destination-in' // 仅保留现有画布内容和新形状重叠的部分。其他的都是透明的。\n  | 'destination-out' // 仅保留现有画布内容和新形状不重叠的部分。\n  | 'destination-atop' // 仅保留现有画布内容和新形状重叠的部分。新形状是在现有画布内容的后面绘制的。\n  | 'xor' // 形状在重叠处变为透明，并在其他地方正常绘制。\n  | 'copy' // 只显示新图形。\n```\n\n----------------------------------------\n\nTITLE: Installing Leafer.js Viewport with PNPM\nDESCRIPTION: This command installs the @leafer-in/viewport package using pnpm. It adds the viewport plugin to your project, enabling zoom and pan viewport functionality. After installation, you can use the viewport API in your Leafer.js application.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/viewport/index.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @leafer-in/viewport\n```\n\n----------------------------------------\n\nTITLE: Center with Bottom Y-Axis Alignment Typescript\nDESCRIPTION: Shows centering the main content but aligning the y-axis to the bottom (to).  This likely uses `IFlowAxisAlign` interface with `content` set to `'center'` and `y` set to `'to'`.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/flow/Flow/flowAlign.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/flow/flowAlign/y/to.ts\n```\n\n----------------------------------------\n\nTITLE: Importing leafer-ui as a module (module.min)\nDESCRIPTION: This snippet demonstrates how to import leafer-ui as an ES module in your HTML file.  It downloads the minified module version of leafer-ui from a CDN. This approach requires setting `type=\"module\"` on the script tag.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/ui/start.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import { Leafer } from 'https://unpkg.com/leafer-ui@1.5.3/dist/web.module.min.js'\n  // ...\n</script>\n```\n\n----------------------------------------\n\nTITLE: Drawing Horizontal Line - App Component (TypeScript)\nDESCRIPTION: This code snippet (App part) demonstrates how to integrate the Leafer component, responsible for drawing a horizontal line, within a larger application. It builds upon the Leafer component's implementation and shows how it's incorporated into an overall application structure.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Line.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Line/app/horizontal.ts [App]\n```\n\n----------------------------------------\n\nTITLE: Creating an App instance with graphics editor (index.ts)\nDESCRIPTION: Creates an App instance with a graphics editor, optimizing for mobile experience. It imports App and Rect from '@leafer-editor/miniapp'. An App instance is initialized with configurations for mobile, tree, sky and editor components.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/editor/miniapp/start.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { App, Rect } from '@leafer-editor/miniapp'\n\nPage({\n  onReady() {\n    // this 为当前小程序页面实例\n    const app = new App({\n      view: 'leafer',\n      mobile: true, // 优化手机端体验\n      tree: { canvas: 'leafer-tree' }, // 需指定canvas\n      sky: { canvas: 'leafer-sky' },\n      editor: {}, // 会自动创建 editor实例\n      eventer: this,\n    })\n\n    const rect = new Rect({\n      x: 100,\n      y: 100,\n      width: 100,\n      height: 100,\n      fill: '#32cd79',\n      editable: true,\n    })\n\n    app.tree.add(rect)\n  },\n  receiveEvent() {}, // 约定接收交互事件的方法名\n})\n```\n\n----------------------------------------\n\nTITLE: Loading Custom Control Points Example (Typescript)\nDESCRIPTION: Demonstrates how to load custom control points into the view during the `onLoad()` lifecycle method of the inner editor.  This method is automatically called when the user opens the inner editor, typically by double-clicking on an element. The exact code example is not provided in this text, but it is located in the specified Typescript file.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/editInner/load.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/editor/editInner/load/index.ts\n```\n\n----------------------------------------\n\nTITLE: Leafer Extension Capabilities\nDESCRIPTION: This snippet illustrates the extensibility of Leafer through boosters, official plugins like animation, third-party plugins, and integration with frameworks like Vue and React. It also mentions the potential for creating custom plugins for various use cases.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/design/tree.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nextends ———— booster (加速器) —— design (支持在线设计、白板、无代码平台等场景, 需商业授权)\n    |            |\n    |            ╚—— 可扩展其他场景 // 如游戏、页面应用、文档类场景\n    |\n    |——————— 官方插件 —— animate (动画)\n    |          |\n    |          ╚—— 通用需求制作插件 // 如创建工具、编辑工具\n    |\n    |——————— 第三方插件\n    |\n    ╚——————— 可与Vue、React结合\n```\n\n----------------------------------------\n\nTITLE: Drawing Trend Chart - Leafer Component (TypeScript)\nDESCRIPTION: This code snippet (Leafer part) showcases how to construct a trend chart using the Line element of Leafer.js. This snippet reflects the Leafer component's side of implementation. This Leafer component is typically accompanied by an App component to facilitate the integration of the charting component into a larger application.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Line.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Line/chart.ts [Leafer]\n```\n\n----------------------------------------\n\nTITLE: Displaying an SVG Image\nDESCRIPTION: This code snippet demonstrates how to display an SVG image using the SVG element in Leafer.js. It shows how to load and render an SVG file within the framework.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/basic/display.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/SVG/svg.ts\n```\n\n----------------------------------------\n\nTITLE: Initializing Events\nDESCRIPTION: This code snippet shows how to initialize and listen to events in Leafer.js by passing an event object. This approach enables rapid event listener setup. Note that the event object cannot be exported as JSON.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/basic/event.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<<< @/code/basic/event/event.js#listen\n```\n\n----------------------------------------\n\nTITLE: Including motion-path.min.js via script tag\nDESCRIPTION: This script tag includes the minified version of the @leafer-in/motion-path library directly in your HTML. It exposes the library's functionality through the global variable LeaferIN.motion-path. This approach allows you to use the motion path feature without using a package manager.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/motion-path/index.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/@leafer-in/motion-path@1.5.3/dist/motion-path.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Frame Overflow Type Definition - Typescript\nDESCRIPTION: Defines the type `IOverflow` which specifies how content exceeding the frame's dimensions should be handled.  It can be either 'show' to display the overflow or 'hide' to clip it. This snippet shows the possible values for the overflow property of a Frame element.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Frame.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype IOverflow = 'show' | 'hide'\n```\n\n----------------------------------------\n\nTITLE: Installing Scroll Plugin with npm\nDESCRIPTION: Installs the @leafer-in/scroll plugin using npm.  This plugin is required to use the ScrollBar element.  Run this command in your project's root directory.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/scroll/index.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @leafer-in/scroll\n```\n\n----------------------------------------\n\nTITLE: Range Size Interface Definition - TypeScript\nDESCRIPTION: Defines the `IRangeSize` interface used for specifying the minimum and maximum values for width and height ranges. This interface is used to constrain the dimensions of elements within the editor.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/editable.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IRangeSize {\n  min?: number\n  max?: number\n}\n\nrect.widthRange = { min: 10, max: 200 }\n```\n\n----------------------------------------\n\nTITLE: Editor Config Lock Ratio Scaling TypeScript\nDESCRIPTION: This code snippet shows how to lock the aspect ratio while scaling in the Leaferjs editor. It utilizes the 'lockRatio' property to maintain the width-to-height ratio of the element during scaling operations.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/config/control.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/editor/config/lockRatio.ts\n```\n\n----------------------------------------\n\nTITLE: Skew Element Incrementally - skewOf() TypeScript\nDESCRIPTION: Demonstrates how to incrementally skew an element around a specified origin using the skewOf() method in TypeScript.  It shows how to skew relative to the current skew and how to use transitions.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/skew.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// 围绕中心继续倾斜X轴 45度\nrect.skewOf('center', 45)\n\n// 想倾斜到指定 skewX， 需减去元素当前 skewX，如下：\nrect.skewOf({ x: 50, y: 50 }, 45 - rect.skewX)\n\n// 动画过渡\nrect.skewOf('center', 45, 0, true)\n\nrect.skewOf('center', 45, 0, 2) // 过渡 2 秒\n```\n\n----------------------------------------\n\nTITLE: Flow Layout X Axis Example (TypeScript)\nDESCRIPTION: This code snippet is an example demonstrating the flow layout on the X-axis in Leafer.js using the Flow plugin.  It likely involves setting properties related to horizontal arrangement and spacing of elements within a container. Refer to the 'x.ts' file within the flow plugin examples for the complete code.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/plugin/flow.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/flow/x.ts\n```\n\n----------------------------------------\n\nTITLE: Chained Bounds operations - Typescript\nDESCRIPTION: This example illustrates how to chain multiple methods on a `Bounds` object for fluent manipulation. It first sets the bounds and then performs a `hitPoint` check to see if a given point falls within the bounds.  Chaining allows for concise and readable code when performing a series of operations.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/math/Bounds.md#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nconst bounds = new Bounds()\n\nbounds.set(0, 0, 100, 100).hitPoint({ x: 50, y: 50 }) // true\n```\n\n----------------------------------------\n\nTITLE: Importing leafer-draw as a module (module)\nDESCRIPTION: This HTML snippet imports leafer-draw as an ES module, referencing the unminified version from unpkg. It uses the `import` statement to import the `Leafer` object.  This requires a module-compatible environment and is useful for debugging.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/draw/start.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import { Leafer } from 'https://unpkg.com/leafer-draw@1.5.3/dist/web.module.js'\n  // ...\n</script>\n```\n\n----------------------------------------\n\nTITLE: Child Event Example (JavaScript)\nDESCRIPTION: Demonstrates the usage of child events in Leafer.js using JavaScript. It likely shows how to listen for and handle events like ADD and REMOVE on a Leafer.js element.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/event/basic/Child.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<<< @/code/event/leafer/child.js\n```\n\n----------------------------------------\n\nTITLE: IBoundsData Interface Definition\nDESCRIPTION: Defines the `IBoundsData` interface, which represents a rectangular bounding box.  It includes `x` and `y` coordinates for the top-left corner, as well as `width` and `height` properties.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/interface/math/Math.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IBoundsData {\n  x: number\n  y: number\n  width: number\n  height: number\n}\n```\n\n----------------------------------------\n\nTITLE: Immediately Stopping Event Propagation - TypeScript\nDESCRIPTION: Demonstrates how to immediately stop event propagation in Leafer.js using the `stopNow()` method within a TypeScript context. The `stopNow()` method prevents the event from propagating to both parent and sibling elements, halting the event flow immediately.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/event/basic/Event.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/event/stopNow.ts\n```\n\n----------------------------------------\n\nTITLE: Simulating Pointer Down Event in Leafer.js (TypeScript)\nDESCRIPTION: Simulates a pointer down event using the `pointerDown` method on the `leafer.interaction` instance.  It dispatches a pointer down event, which can trigger subsequent events like `tap` if a `pointerUp` event follows.  Requires an `IPointerEvent` data object.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/event/simulation.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/interaction/pointer-down.ts\n```\n\n----------------------------------------\n\nTITLE: BlendMode Overlay Example Typescript\nDESCRIPTION: Example code demonstrating the 'overlay' blend mode. It combines multiply and screen effects. Dark areas become darker, and light areas become lighter. The code is assumed to be in a file named overlay.ts.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/blendMode.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/blendMode/overlay.ts\n```\n\n----------------------------------------\n\nTITLE: Custom Element Data Class Registration (TypeScript)\nDESCRIPTION: This snippet shows an example of how to define and register a custom data processing class in TypeScript for a custom element in Leaferjs. It involves defining data interfaces, creating a data processing class, and registering the class. The snippet includes an example of initializing input data for type checking and hinting.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/custom/base/data.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n // @/code/display/Custom/base/data/index.ts\n```\n\n----------------------------------------\n\nTITLE: Including Resize Plugin via Script (Minified)\nDESCRIPTION: This HTML script tag includes the minified version of the @leafer-in/resize plugin directly into your HTML file.  It makes the plugin's functionality accessible through the global variable `LeaferIN.resize`.  It fetches the file from unpkg.com CDN.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/resize/index.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/@leafer-in/resize@1.5.3/dist/resize.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Installing Resize Plugin with PNPM\nDESCRIPTION: This command installs the @leafer-in/resize plugin using pnpm.  It adds the plugin to your project's node_modules directory and updates your package.json file.  This requires pnpm to be installed.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/resize/index.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @leafer-in/resize\n```\n\n----------------------------------------\n\nTITLE: Custom Element Attributes (TypeScript)\nDESCRIPTION: Defines custom attributes for a display object using TypeScript. Includes properties for width, height, and fill, and demonstrates how to define them within a class extending a base data class. Properties are typed as numbers and a string, respectively.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/custom/base/attr.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// index.ts\nimport { RectData, Data, Property } from '@leafer/core'\n\nexport interface ICustomData extends Data {\n    width: number\n    height: number\n    fill: string\n}\n\nexport class CustomData extends RectData implements ICustomData {\n    @Property public width: number = 100\n    @Property public height: number = 50\n    @Property public fill: string = 'red'\n}\n```\n\n----------------------------------------\n\nTITLE: BlendMode Exclusion Example Typescript\nDESCRIPTION: Example code demonstrating the 'exclusion' blend mode. Similar to difference, but with lower contrast. The code is assumed to be in a file named exclusion.ts.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/blendMode.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/blendMode/exclusion.ts\n```\n\n----------------------------------------\n\nTITLE: Concise Style Modification\nDESCRIPTION: This snippet showcases a concise method for modifying element styles in Leaferjs. It utilizes the `main` export from the specified file to demonstrate a simplified style update.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/basic/style.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/basic/style/set.ts#main\n```\n\n----------------------------------------\n\nTITLE: Editor Buttons Configuration (buttons.ts)\nDESCRIPTION: Illustrates the configuration of buttons within the Leaferjs Editor, specifically focusing on their placement and orientation within the editor's button group. The code example is located in the `buttons.ts` file within the `/code/plugin/editor/` directory.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/Editor/display.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/editor/buttons.ts\n```\n\n----------------------------------------\n\nTITLE: Element Not in Flow (leafer-in/flow/inFlow/out.ts)\nDESCRIPTION: Imports leafer and demonstrates the inFlow property set to false.  Elements with `inFlow = false` are excluded from the automatic flow layout, allowing manual positioning.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/flow/index.md#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\n<<< @/code/plugin/flow/inFlow/out.ts\n```\n\n----------------------------------------\n\nTITLE: Installing Leafer Flow and Resize Plugins\nDESCRIPTION: These commands install the @leafer-in/flow and @leafer-in/resize plugins using npm, pnpm, yarn, and bun.  These plugins are required to use the Flow element for automatic layout. Installation makes the Flow element available within LeaferJS.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/flow/index.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\npnpm add @leafer-in/flow\npnpm add @leafer-in/resize\n```\n\n----------------------------------------\n\nTITLE: Point Type Customization - Middle Point Example\nDESCRIPTION: Illustrates point type customization for the `middlePoint` property. This allows developers to specify how the mid-point handles behave when interacting with the editor.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/config/style.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/editor/config/style/middlePoint/pointType.ts [middlePoint]\n```\n\n----------------------------------------\n\nTITLE: Canvas Configuration for Leafer\nDESCRIPTION: This code snippet defines the wxml structure required to host the canvas used by Leafer. It's configured to pass touch events to the `receiveEvent` method. \nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/ui/miniapp/start.md#_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<canvas\n    id=\"leafer\"\n    type=\"2d\"\n    catchtouchstart=\"receiveEvent\"\n    catchtouchmove=\"receiveEvent\"\n    catchtouchend=\"receiveEvent\"\n    catchtouchcancel=\"receiveEvent\"\n></canvas>\n```\n\n----------------------------------------\n\nTITLE: Disabling Interaction with hittable Property - TypeScript\nDESCRIPTION: This snippet demonstrates how to disable interaction for an element using the hittable property in Leafer. Setting hittable to false prevents the element from responding to any interaction events.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/hit.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/// @/code/property/hit/hittable.ts\n```\n\n----------------------------------------\n\nTITLE: BlendMode HardLight Example Typescript\nDESCRIPTION: Example code demonstrating the 'hard-light' blend mode. Similar to overlay, it combines multiply and screen effects, but with the top and bottom layers switched. The code is assumed to be in a file named hard-light.ts.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/blendMode.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/blendMode/hard-light.ts\n```\n\n----------------------------------------\n\nTITLE: Joining String Path - TypeScript\nDESCRIPTION: This TypeScript code demonstrates how to continue drawing on an existing string path in Leaferjs. It illustrates the method of joining an existing path string and adding new drawing commands to it. This code is from '@/code/path/drawer/join-string.ts'.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/path/PathCreator.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/path/drawer/join-string.ts\n```\n\n----------------------------------------\n\nTITLE: Combining Pen with Images - Leafer\nDESCRIPTION: This snippet illustrates how to combine the Pen element with images in Leafer. It involves adding image elements to the Pen, allowing you to draw paths around or integrate images within the Pen's rendering. The image is added as a child element of the Pen.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Pen.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Pen/image.ts [Leafer]\n```\n\n----------------------------------------\n\nTITLE: Installing @leafer-draw/miniapp with bun\nDESCRIPTION: These commands demonstrate how to install the @leafer-draw/miniapp package using various package managers (npm, pnpm, yarn, and bun).  Choose the command that corresponds to your preferred package manager.  This installs the necessary dependencies for using the library in your project.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/draw/miniapp/start.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nbun add @leafer-draw/miniapp\n```\n\n----------------------------------------\n\nTITLE: Hide Editor on Move - Typescript\nDESCRIPTION: This snippet showcases how to hide the editor box when an element is being moved in the Leaferjs editor. The code likely involves event listeners that detect element movement and toggle the visibility of the editor controls.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/config/base.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/editor/config/hide-move.ts\n```\n\n----------------------------------------\n\nTITLE: Installing LeaferJS filter plugin with yarn\nDESCRIPTION: This command installs the @leafer-in/filter package using yarn. It's required to enable custom filters in LeaferJS. Execution of this command sets up the filter component within the project.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/filter/index.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @leafer-in/filter\n```\n\n----------------------------------------\n\nTITLE: BlendMode Lighten Example Typescript\nDESCRIPTION: Example code demonstrating the 'lighten' blend mode. The colors of overlapping graphics are determined by adding the color values. The code is assumed to be in a file named lighten.ts.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/blendMode.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/blendMode/lighten.ts\n```\n\n----------------------------------------\n\nTITLE: Installing @leafer-in/motion-path with pnpm\nDESCRIPTION: This command installs the @leafer-in/motion-path package using pnpm, a fast and disk space efficient package manager for JavaScript. It adds the package to your project and links it from the global store, saving disk space.  The package becomes available for use in your Leaferjs project.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/motion-path/index.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @leafer-in/motion-path\n```\n\n----------------------------------------\n\nTITLE: Animation Options Interface (IAnimateOptions)\nDESCRIPTION: Defines the structure of animation options used in Leafer.js animations. It includes properties for easing, delay, duration, ending state, reverse playback, swing effect, looping, speed, joining initial state, autoplay, animated attributes, and event listeners.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/animate.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// 动画选项\ninterface IAnimateOptions {\n  easing?: IAnimateEasing // 缓动方式，默认为 ease\n\n  delay?: number // 延迟时间，以秒为单位， 默认为 0\n  duration?: number // 动画时长，以秒为单位，默认为 0.2\n  ending?: IAnimateEnding // 动画结束时的状态，可设置from、to，默认auto\n\n  reverse?: boolean // 是否反向动画 to -> from，默认为 false\n  swing?: boolean | number // 是否摇摆循环播放，可设置次数（到达 to 的次数） from -> to，to -> from -> to ... ，默认 false\n\n  loop?: boolean | number // 是否循环播放，可设置次数，默认为 false\n  loopDelay?: number // 进入下一次循环播放的延迟时间，默认为0\n\n  speed?: number // 动画播放的倍速，值越大播放越快，默认为 1 倍速\n\n  join?: boolean //  是否加入动画前的元素状态作为 from 关键帧\n  autoplay?: boolean // 是否自动播放\n\n  attrs?: string[] // 参与动画过渡效果的元素属性列表， 默认为所有\n  event?: IAnimateEvents // 监听事件\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Leafer App Structure with Editor in uniapp\nDESCRIPTION: This snippet showcases a more complex Leafer.js setup within uniapp, incorporating a graphical editor. It demonstrates the use of the 'App' class, multiple canvases for different layers (tree and sky), and the '@leafer-in/editor' plugin. It requires '@dcloudio/uni-app', '@leafer-ui/miniapp', and '@leafer-in/editor' dependencies.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/ui/miniapp/uniapp.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <view\n    id=\"leafer\"\n    @touchstart=\"receiveEvent\"\n    @touchmove=\"receiveEvent\"\n    @touchend=\"receiveEvent\"\n    @touchcancel=\"receiveEvent\"\n  >\n    <canvas id=\"leafer-tree\" type=\"2d\"></canvas>\n    <canvas id=\"leafer-sky\" type=\"2d\"></canvas>\n  </view>\n</template>\n\n<script setup lang=\"ts\">\nimport { onReady } from '@dcloudio/uni-app'\nimport { App, Rect, useCanvas } from '@leafer-ui/miniapp'\nimport '@leafer-in/editor' // 导入图形编辑器插件\n\nuseCanvas('canvas', uni) // 绑定平台全局变量\n\nlet app: App\n\nonReady(() => {\n  app = new App({\n    view: 'leafer',\n    mobile: true, // 优化手机端体验\n    tree: { canvas: 'leafer-tree' }, // 需指定canvas\n    sky: { canvas: 'leafer-sky' },\n    editor: {}, // 会自动创建 editor实例\n  })\n\n  const rect = new Rect({\n    x: 100,\n    y: 100,\n    width: 100,\n    height: 100,\n    fill: '#32cd79',\n    editable: true,\n  })\n\n  app.tree.add(rect)\n})\n\nfunction receiveEvent(event: TouchEvent) {\n  app.receiveEvent(event) // 需手动接收、传递画布交互事件给leafer\n}\n</script>\n\n<style>\npage {\n  height: 100%;\n}\n#leafer {\n  width: 100%;\n  height: 100%;\n}\n#leafer-tree {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n}\n#leafer-sky {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: IFourNumber CornerRadius Usage\nDESCRIPTION: Demonstrates how the `IFourNumber` type is used to represent corner radius values.  It shows how an array of numbers can be interpreted as topLeft, topRight, bottomRight, and bottomLeft corner radii, with shorthand notations for fewer values.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/interface/math/Math.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncornerRadius: [20, 10, 20, 10] // [topLeft, topRight, bottomRight, bottomLeft]\ncornerRadius: [20, 10, 20] // [topLeft, (topRight-bottomLeft), bottomRight]\ncornerRadius: [20, 10] // [ (topLeft-bottomRight), (topRight-bottomLeft)]\ncornerRadius: 20 // all\n```\n\n----------------------------------------\n\nTITLE: Animation with Join: Ease Example (Animation)\nDESCRIPTION: This TypeScript code snippet demonstrates an animation configuration using the 'join' property within the Animation class.  It shows how to define easing functions and keyframes when animating an element, including the effect of 'join' on the animation's starting point. The animation uses easing for a smooth transition between keyframes.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/animate/options/join.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Leafer, Circle, Animation } from '@leafer/core'\nimport { Render } from '@leafer/render'\n\nLeafer.use(Render)\n\nconst leafer = new Leafer({ view: true, width: 200, height: 200 })\n\nconst circle = new Circle({ x: 50, y: 50, radius: 20, fill: 'red' })\nleafer.add(circle)\n\nconst animation = new Animation({\n    target: circle,\n    join: true,\n    duration: 2,\n    iterations: Infinity,\n    values: {\n        x: [50, 150],\n        y: [50, 150],\n        fill: ['red', 'blue']\n    }\n})\n\nanimation.play()\n```\n\n----------------------------------------\n\nTITLE: IExportOptions Interface Definition\nDESCRIPTION: Defines the `IExportOptions` interface, providing a comprehensive set of options to configure export behavior. Includes settings for image quality, data format (blob), background fill, scaling, size, padding, pixel ratio, smoothing, canvas context, slicing, trimming, screenshot area, JSON options, relative coordinate system, and custom canvas drawing.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/export.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IExportOptions {\n  quality?: number // 设置 jpg / webp 的图片质量\n  blob?: boolean // 导出二进制数据\n\n  fill?: string // 设置一个默认背景填充色\n\n  scale?: number | IPointData // 缩放比例，默认为1，可用于生成小尺寸的缩略图\n  size?: number | IOptionSizeData // 导出宽高（单独设置宽或高，另一边可自适应原始比例，同时设置宽高会拉伸），自动换算出缩放比例 scale\n  padding?: number | number[] // 设置内边距, 支持数字或数组 [top, right, bottom, left]\n\n  pixelRatio?: number // 像素比，默认为1倍图，可导出适配高清屏的2倍图、3倍图...\n  smooth?: boolean // 设置画布的平滑绘制属性，默认同当前leafer画布\n  contextSettings?: ICanvasRenderingContext2DSettings // 原生画布的 context 设置, 默认同当前leafer画布\n\n  slice?: boolean // 是否为切片，将导出切片bounds内的画布上所有内容\n  trim?: boolean // 是否裁剪透明像素，默认false\n  screenshot?: IBoundsData | boolean // 以当前视图比例导出截图，可指定一个截图区域\n\n  json?: IJSONOptions // json导出选项\n\n  relative?: ILocationType | IUI // 相对坐标系 或父元素 的缩放比例导出，默认Leafer为 inner, 其他元素为 local，可以单独设置: inner |  local | world\n  onCanvas?: IExportOnCanvasFunction // onCanvas(canvas => { }) 用于叠加绘制自定义内容\n}\n\ninterface IOptionSizeData {\n  width?: number // 宽度，当单独设置宽度时，高度自适应原始比例\n  height?: number // 高度，当单独设置高度时，宽度自适应原始比例\n}\n\ninterface IJSONOptions {\n  matrix?: boolean\n}\n\ninterface IExportOnCanvasFunction {\n  (canvas: ILeaferCanvas): void\n}\n\ninterface ICanvasRenderingContext2DSettings {\n  alpha?: boolean // 画布是否包含alpha通道， 默认为false\n  colorSpace?: 'display-p3' | 'srgb' // 颜色空间， 默认为srgb\n  desynchronized?: boolean // 低延时渲染，默认为false\n  willReadFrequently?: boolean // 用于 getImageData() 加速， 默认为false\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Leafer.js Viewport with Script Tag (Minified)\nDESCRIPTION: This script tag imports the minified version of the Leafer.js viewport plugin. By including this tag in your HTML, you can access the viewport plugin's functionality through the global variable LeaferIN.viewport.  Use this for production environments where file size is a concern.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/viewport/index.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/@leafer-in/viewport@1.5.3/dist/viewport.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Creating a Leafer App with Editor in a Mini Program\nDESCRIPTION: This code shows how to create a Leafer App instance with the editor plugin in a Mini Program. It initializes Leafer with view, mobile optimization, canvas specifications for tree and sky layers, and the editor plugin. A rectangle with editable properties is then added to the tree layer.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/ui/miniapp/start.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { App, Rect } from '@leafer-ui/miniapp'\nimport '@leafer-in/editor' // 导入图形编辑器插件\n\nPage({\n  onReady() {\n    // this 为当前小程序页面实例\n    const app = new App({\n      view: 'leafer',\n      mobile: true, // 优化手机端体验\n      tree: { canvas: 'leafer-tree' }, // 需指定canvas\n      sky: { canvas: 'leafer-sky' },\n      editor: {}, // 会自动创建 editor实例\n      eventer: this,\n    })\n\n    const rect = new Rect({\n      x: 100,\n      y: 100,\n      width: 100,\n      height: 100,\n      fill: '#32cd79',\n      editable: true,\n    })\n\n    app.tree.add(rect)\n  },\n  receiveEvent() {}, // 约定接收交互事件的方法名\n})\n```\n\n----------------------------------------\n\nTITLE: Installing @leafer-in/html with yarn\nDESCRIPTION: Install the @leafer-in/html plugin using yarn to enable HTMLText functionality in LeaferJS. This command adds the plugin to your project's dependencies.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/html/index.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @leafer-in/html\n```\n\n----------------------------------------\n\nTITLE: Listening for Image Load in Fill - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to listen for image load events when the image is used as a fill property within Leaferjs. It outlines the process of attaching event listeners to an ImagePaint object and handling loading states when the image is part of the fill.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/event/basic/Image.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/event/image/rect.ts\n```\n\n----------------------------------------\n\nTITLE: RadialGradient from UnitPointData Typescript\nDESCRIPTION: Defines the IUnitPointData interface, which represents a coordinate point with optional type ('percent' or 'px') for the from and to properties of a radial gradient. This allows specifying the starting and ending points of the gradient using precise coordinates in pixels or percentages.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/paint/radial.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IUnitPointData {\n  type?: 'percent' | 'px'\n  x: number\n  y: number\n}\n\nfrom: {\n  type: 'percent',\n  x: 0.5, // 50% width  百分比坐标点\n  y: 0.5, // 50% height\n}\n\nfrom: {\n  x: 50, // 50px 像素值坐标点\n  y: 50, // 50px\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Element Attributes (JavaScript)\nDESCRIPTION: Defines custom attributes for a display object using JavaScript. Includes properties for width, height, and fill, mirroring the TypeScript version. Provides an equivalent definition without TypeScript's type annotations and decorators.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/custom/base/attr.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// index.js\nimport { RectData, Property } from '@leafer/core'\n\nexport class CustomData extends RectData {\n    constructor() {\n        super();\n        this.width = 100;\n        this.height = 50;\n        this.fill = 'red';\n    }\n}\n\nProperty(CustomData.prototype, 'width')\nProperty(CustomData.prototype, 'height')\nProperty(CustomData.prototype, 'fill')\n```\n\n----------------------------------------\n\nTITLE: Animate Easing with Delay (Animation)\nDESCRIPTION: Illustrates how to use the delay property within the animation function in Leaferjs.  This code snippet demonstrates a delayed start to an animation easing effect. It showcases the application of the 'delay' property to control when the animation begins after a specified duration.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/animate/options/delay.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/animate/options/delay/animation/ease.ts [animation]\n```\n\n----------------------------------------\n\nTITLE: Drawing Rounded Corner Polyline - App Component (TypeScript)\nDESCRIPTION: This code snippet shows how to integrate a Leafer component for drawing a polyline with rounded corners into the larger application. It focuses on the integration specifics within the application's overall structure.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Line.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Line/corner.ts [App]\n```\n\n----------------------------------------\n\nTITLE: Defining BlurEffect Interface in LeaferJS\nDESCRIPTION: This code snippet defines the `BlurEffect` interface in TypeScript, including properties for blur radius and visibility. It allows for applying blur effects to layers or backgrounds within the LeaferJS framework.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/interface/ui/Effect.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface BlurEffect {\n  blur: number\n  visible?: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Getting element's path string\nDESCRIPTION: This snippet demonstrates how to use the `getPathString` function to retrieve the string path representation of an element. It can be configured to return a curved path, the path used for rendering (including rounded corners), and the precision of decimal places.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/getPathString.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// @ts-nocheck\nimport { Leafer, Path, Group } from '@leafer/core'\n\nconst leafer = new Leafer({ view: document.body })\n\nconst path = new Path({ stroke: 'black', fill: 'rgba(255,255,0,0.5)', shape: 'M10 10 L90 10 L90 90 L10 90 Z' })\n\nleafer.add(path)\n\nconsole.log(path.getPathString())\n\nconst group = new Group()\n\nleafer.add(group)\n\nconst path2 = new Path({ x: 100, stroke: 'black', fill: 'rgba(255,255,0,0.5)', shape: 'M10 10 L90 10 L90 90 L10 90 Z' })\n\ngroup.add(path2)\n\nconsole.log(group.getPathString())\n```\n\n----------------------------------------\n\nTITLE: Editable Element Selection - TypeScript\nDESCRIPTION: Demonstrates that only editable elements can be selected within the Leafer.js editor. The actual code implementation is external and located at a specified file path.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/editable.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/editor/editable.ts\n```\n\n----------------------------------------\n\nTITLE: Including motion-path.js via script tag\nDESCRIPTION: This script tag includes the unminified version of the @leafer-in/motion-path library directly in your HTML. It exposes the library's functionality through the global variable LeaferIN.motion-path, providing access to the motion path features in your Leaferjs project without a package manager.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/motion-path/index.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/@leafer-in/motion-path@1.5.3/dist/motion-path.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Dragon Eye Interaction\nDESCRIPTION: This snippet adds the interactive functionality of drawing the dragon's eyes. When the user clicks on the dragon's head, eyes are added, bringing the dragon to life and initiating its flight along the defined path.  It includes event handling and updating the dragon's appearance.\nSOURCE: https://github.com/leaferjs/docs/blob/main/contest/guide.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/contest/dragon/step3.ts\n```\n\n----------------------------------------\n\nTITLE: Drag and Drop to Tree (Leafer)\nDESCRIPTION: This snippet demonstrates dragging a DOM element and adding it to the Leafer tree structure.  It illustrates the use of browser coordinate conversion. Requires Leafer and browser DOM elements.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/point/index.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/advanced/coordinate/browser/drop.ts [添加到 tree]\n```\n\n----------------------------------------\n\nTITLE: Listening for Image Load in Fill - JavaScript\nDESCRIPTION: This JavaScript snippet mirrors the TypeScript example, demonstrating how to listen for image load events when the image is used as a fill property. It outlines the process of attaching event listeners to an ImagePaint object and handling loading states for fill images.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/event/basic/Image.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<<< @/code/event/image/rect.js\n```\n\n----------------------------------------\n\nTITLE: Listening for Capture Events - Typescript\nDESCRIPTION: Demonstrates how to listen for capture events in Leaferjs using Typescript. This allows you to capture events as they travel down the DOM tree towards the target element.  Requires Leaferjs library to be installed.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/event/flow.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/event/capture/on.ts\n```\n\n----------------------------------------\n\nTITLE: Install LeaferJS Color Plugin with Bun\nDESCRIPTION: Installs the @leafer-in/color plugin using bun. This command adds the color functionalities to the LeaferJS project, enabling color format conversions and name-to-value lookups. Requires bun to be installed.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/color/index.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nbun add @leafer-in/color\n```\n\n----------------------------------------\n\nTITLE: Registering an Inner Editor (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to register an inner editor within the Leaferjs framework. It likely involves using the `registerInnerEditor()` function (though the exact code is external). This function associates a specific editor class with a unique tag, allowing Leaferjs to instantiate the appropriate editor when needed.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/editInner/register.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/editor/editInner/register/index.ts\n```\n\n----------------------------------------\n\nTITLE: FlowGap Auto Y Axis Spacing Example\nDESCRIPTION: Illustrates setting the 'auto' gap option specifically for the Y axis, distributing the remaining vertical space between elements. This is expected from `auto.ts` in the `y` subdirectory.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/flow/Flow/gap.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/flow/gap/y/auto.ts\n```\n\n----------------------------------------\n\nTITLE: BlendMode ColorDodge Example Typescript\nDESCRIPTION: Example code demonstrating the 'color-dodge' blend mode. The bottom layer is divided by the inverted top layer. The code is assumed to be in a file named color-dodge.ts.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/blendMode.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/blendMode/color-dodge.ts\n```\n\n----------------------------------------\n\nTITLE: Point Type Customization - Point Example\nDESCRIPTION: Illustrates point type customization for the main `point` property within the editor configuration. This allows developers to define specific behaviors for the corner control points.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/config/style.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/editor/config/style/point/pointType.ts [point]\n```\n\n----------------------------------------\n\nTITLE: Animate Speed - Set Example (Typescript)\nDESCRIPTION: This snippet illustrates how to apply the `speed` property when setting animation properties in Leaferjs. The animation's speed will be adjusted based on the provided value.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/animate/options/speed.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @/code/plugin/animate/options/speed/set/ease.ts [set]\n```\n\n----------------------------------------\n\nTITLE: BlendMode Copy Example Typescript\nDESCRIPTION: Example code demonstrating the 'copy' blend mode. Only the new shape is displayed. The code is assumed to be in a file named copy.ts.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/blendMode.md#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/blendMode/copy.ts\n```\n\n----------------------------------------\n\nTITLE: IPathCommandObject Definitions\nDESCRIPTION: This code snippet defines the TypeScript interfaces for different path command objects (MoveTo, LineTo, BezierCurveTo, QuadraticCurveTo, ClosePath). Each interface represents a specific drawing command and its parameters, offering high readability and ease of modification.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/interface/ui/PathData.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport type IPathCommandObject =\n  | MoveToCommandObject\n  | LineToCommandObject\n  | BezierCurveToCommandObject\n  | QuadraticCurveToCommandObject\n  | ClosePathCommandObject // M | L | C | Q | Z   canvas可以绘制的命令\n\n// 路径命令对象\nexport interface MoveToCommandObject {\n  name: 'M' //  moveTo\n  x: number\n  y: number\n}\nexport interface LineToCommandObject {\n  name: 'L' // lineTo\n  x: number\n  y: number\n}\n\nexport interface BezierCurveToCommandObject {\n  name: 'C' // bezierCurveTo\n  x1: number\n  y1: number\n  x2: number\n  y2: number\n  x: number\n  y: number\n}\n\nexport interface QuadraticCurveToCommandObject {\n  name: 'Q' // quadraticCurveTo\n  x1: number\n  y1: number\n  x: number\n  y: number\n}\n\nexport interface ClosePathCommandObject {\n  name: 'Z' // closePath\n}\n```\n\n----------------------------------------\n\nTITLE: Finding elements by className in Leafer.js\nDESCRIPTION: This snippet shows how to find UI elements based on their className within the Leafer.js framework. The `find` method is used in conjunction with a specified `className` to retrieve all matching elements. The code is written in TypeScript.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/find.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/find/className.ts\n```\n\n----------------------------------------\n\nTITLE: ShadowEffect Interface Definition - Typescript\nDESCRIPTION: Defines the structure of the ShadowEffect interface used to configure outer shadows in LeaferJS. It specifies properties like x and y offsets, blur radius, spread, color, blend mode, visibility, and a box property to mimic CSS boxShadow behavior, only showing shadows outside the element.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/shadow.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ShadowEffect {\n  x: number\n  y: number\n  blur: number\n  spread?: number\n  color: Color\n  blendMode?: BlendMode\n  visible?: boolean\n  box?: boolean // 和 CSS3 中的 boxShadow 效果一致, 只显示图形外部的阴影\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IAnimateEasing Typescript\nDESCRIPTION: Defines the `IAnimateEasing` type, which specifies the available easing options for animations in Leaferjs.  It includes predefined easing types (ease, linear, ease-in, ease-out, ease-in-out), trigonometric functions, quadratic, cubic, quartic, quintic, exponential, circular, back, elastic, bounce, cubic-bezier, and steps.  It also includes the interfaces for cubic bezier and steps easing.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/animate/options/easing.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype IAnimateEasing =\n  | 'ease' // 默认值，慢速开始，中间快，缓慢结束\n  | 'linear' // 线性缓动，匀速进行\n\n  // 缓动\n  | 'ease-in' // 缓慢开始，之后加快\n  | 'ease-out' // 开始快，缓慢结束\n  | 'ease-in-out' // 缓慢开始和结束\n\n  // 三角函数\n  | 'sine-in'\n  | 'sine-out'\n  | 'sine-in-out'\n  // 二次方\n  | 'quad-in'\n  | 'quad-out'\n  | 'quad-in-out'\n  // 三次方\n  | 'cubic-in'\n  | 'cubic-out'\n  | 'cubic-in-out'\n  // 四次方\n  | 'quart-in'\n  | 'quart-out'\n  | 'quart-in-out'\n  // 五次方\n  | 'quint-in'\n  | 'quint-out'\n  | 'quint-in-out'\n  // 指数\n  | 'expo-in'\n  | 'expo-out'\n  | 'expo-in-out'\n  // 平方根\n  | 'circ-in'\n  | 'circ-out'\n  | 'circ-in-out'\n  // 拉力\n  | 'back-in'\n  | 'back-out'\n  | 'back-in-out'\n  // 多次回弹\n  | 'elastic-in'\n  | 'elastic-out'\n  | 'elastic-in-out'\n  // 重力反弹\n  | 'bounce-in'\n  | 'bounce-out'\n  | 'bounce-in-out'\n  | ICubicBezierEasing\n  | IStepsEasing\n\ninterface ICubicBezierEasing {\n  name: 'cubic-bezier' // 三次贝塞尔曲线 0,0, x1,y1, x2,y2, 1,1\n  value: [number, number, number, number] // [x1, y1, x2, y2]\n}\n\ninterface IStepsEasing {\n  name: 'steps' // 步长动画\n  // 第一个参数为步数\n  // 第二个参数为取整步数的数学方法 Math.floor(t * steps) / steps， 默认为 floor\n  value: number | [number, 'floor' | 'round' | 'ceil']\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Component Import\nDESCRIPTION: This snippet imports the `Case.vue` component, likely a custom component used within the Vue application. It is used to display interactive examples or cases within the documentation or application.\nSOURCE: https://github.com/leaferjs/docs/blob/main/contest/guide.md#_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\nimport Case from '/component/Case.vue'\n```\n\n----------------------------------------\n\nTITLE: Remove Multiple Events (off) - TypeScript (constMore)\nDESCRIPTION: This snippet shows how to remove multiple event listeners using the 'off' method with an array of event types in TypeScript (using constMore variable).  It highlights using an array of event type strings. The code relies on the Leaferjs library.  Input: array of event types. Output: none directly, the listeners for all the specified event types are removed.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/off.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/event/off/constMore.ts\n```\n\n----------------------------------------\n\nTITLE: IAnimateEnding Type Definition\nDESCRIPTION: Defines the IAnimateEnding type in TypeScript, which controls the animation's style at the end. The options are 'auto', 'from', and 'to'. 'auto' is the default, 'from' returns to the initial state, and 'to' maintains the final state.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/animate/options/ending.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype IAnimateEnding = 'auto' | 'from' | 'to'\n```\n\n----------------------------------------\n\nTITLE: Leafer Core Architecture\nDESCRIPTION: This snippet illustrates the fundamental components of the Leafer architecture: Tree, Branch, Leaf, Layouter, and Eventer. These components work together to manage the structure, layout, and interaction within a Leafer application.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/design/tree.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// leafer.js\nTree —— Branch—— Leaf —— Layouter / Eventer\n```\n\n----------------------------------------\n\nTITLE: Reverse Animation with Ease (Animate)\nDESCRIPTION: Demonstrates the combined use of animation and the 'reverse' property within the Leafer.js Animate plugin for creating reversed animations. This code shows how to set up an animation to play in reverse, using the animate method. This includes specifying easing functions.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/animate/options/reverse.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/animate/options/reverse/animate/ease.ts [animate]\n```\n\n----------------------------------------\n\nTITLE: Importing LeaferJS Export Plugin via Script Tag\nDESCRIPTION: Imports the full version of the LeaferJS export plugin via a script tag.  This makes the export functionality available through the global LeaferIN.export variable. Requires a browser environment and access to unpkg.com.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/export/index.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/@leafer-in/export@1.5.3/dist/export.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: FlowGap Fit Spacing Example\nDESCRIPTION: Shows the usage of the 'fit' gap option, allowing for negative space distribution among elements. This is sourced from the `fit.ts` file.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/flow/Flow/gap.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/flow/gap/fit.ts\n```\n\n----------------------------------------\n\nTITLE: Customizing Editor Styles\nDESCRIPTION: This snippet demonstrates how to apply custom styles to the editor, allowing developers to modify the appearance of various editor elements and controls. It assumes inheritance from a base style.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/config/style.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/editor/config/points.ts\n```\n\n----------------------------------------\n\nTITLE: Drawing a Pentagon with Polygon - Typescript (Leafer)\nDESCRIPTION: This code snippet (from pentagon.ts) demonstrates creating a pentagon using the Polygon element in Leafer.js.  The actual code is included dynamically with the <<< syntax.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Polygon.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Polygon/pentagon.ts [Leafer]\n```\n\n----------------------------------------\n\nTITLE: Set with Delay (Set)\nDESCRIPTION: Illustrates how to use the delay property when using the set function in Leaferjs. The snippet demonstrates setting properties with a delayed effect, showcasing control over the timing of property updates with the 'delay' property.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/animate/options/delay.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/animate/options/delay/set/ease.ts [set]\n```\n\n----------------------------------------\n\nTITLE: Move element to top of Group - Leafer.js - Typescript\nDESCRIPTION: Moves a selected element to the top of its containing group using the toTop() method. This snippet demonstrates how to bring a specific element forward in the rendering order within the Leafer.js framework.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/Editor/zIndex.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/editor/editor/top.ts\n```\n\n----------------------------------------\n\nTITLE: Finding elements by innerId in Leafer.js\nDESCRIPTION: This snippet illustrates how to find UI elements by their inner ID using the `find` method.  It showcases the use of `innerId` as a selection criteria for locating elements within the Leafer display tree. The code is implemented in TypeScript.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/find.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/find/innerId.ts\n```\n\n----------------------------------------\n\nTITLE: Handling Rotate Event (JavaScript)\nDESCRIPTION: This JavaScript snippet provides a simple implementation for handling rotate events within a LeaferJS application.  It demonstrates how to listen for 'rotate' events and access the rotation angle. Requires the viewport plugin to be installed.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/event/ui/Rotate.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<<< @/code/event-ui/rotate/simple.js\n```\n\n----------------------------------------\n\nTITLE: Animate Duration with Set (Ease)\nDESCRIPTION: Shows how to use the duration property within a 'set' animation context in Leafer.js. It shows how long to take for the 'set' animation. The duration property dictates the timeframe of the set operation.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/animate/options/duration.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/animate/options/duration/set/ease.ts [set]\n```\n\n----------------------------------------\n\nTITLE: Drawing Curve with Curvature - App Component (TypeScript)\nDESCRIPTION: This code snippet (App part) depicts how the Leafer component, which draws a curve with a specific curvature, is integrated in an application. It concentrates on the application-level specifics of how the Leafer component is used within the application's design.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Line.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Line/app/curve-number.ts [App]\n```\n\n----------------------------------------\n\nTITLE: Free-Form Polygon App Implementation - Typescript\nDESCRIPTION: This snippet (from app/points.ts) shows the app-specific implementation of a free-form polygon using Leafer.js Polygon element and Typescript. The actual code is dynamically included via the <<< syntax.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Polygon.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Polygon/app/points.ts [App]\n```\n\n----------------------------------------\n\nTITLE: BlendMode SourceAtop Example Typescript\nDESCRIPTION: Example code demonstrating the 'source-atop' blend mode. Only draws the new shape where it overlaps with the existing canvas content. The code is assumed to be in a file named source-atop.ts.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/blendMode.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/blendMode/source-atop.ts\n```\n\n----------------------------------------\n\nTITLE: Including LeaferJS Find Plugin via Script Tag (full)\nDESCRIPTION: This script tag includes the full version of the LeaferJS find plugin.  It exposes the plugin's functionalities through the global variable LeaferIN.find, making them accessible within your web application.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/find/index.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/@leafer-in/find@1.5.3/dist/find.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Drawing with Pen Tool using Leafer.js (JavaScript)\nDESCRIPTION: This code snippet demonstrates drawing with a pen tool in Leafer.js using JavaScript. It's the JavaScript equivalent of the TypeScript example, showcasing how to handle mouse events and draw lines on the canvas. It takes into account potential viewport transformations to ensure accurate drawing, leveraging Leafer.js for canvas manipulation and event handling.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/advanced/coordinate.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<<< @/code/display/Pen/draw.js\n```\n\n----------------------------------------\n\nTITLE: Add Custom Asynchronous Task - TypeScript\nDESCRIPTION: This snippet shows how to add a custom asynchronous task to the Leafer.js resource manager. Exporting an image will wait for this task to finish before proceeding. Requires the Leafer.js library.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/resource/Resource.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/resource/task.ts\n```\n\n----------------------------------------\n\nTITLE: Custom Element Method Implementation - JavaScript\nDESCRIPTION: This JavaScript snippet shows the equivalent implementation of custom methods for a LeaferJS custom element in JavaScript. It provides a similar structure and functionality as the TypeScript version, but in JavaScript syntax. The defined methods enable controlling animations and other element-specific behaviors.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/custom/base/method.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<<< @/code/display/Custom/base/method/index.js\n```\n\n----------------------------------------\n\nTITLE: Including Leafer.js View Plugin via Script Tag\nDESCRIPTION: This HTML snippet includes the full version of the `@leafer-in/view` plugin via a script tag. It makes the plugin functionalities accessible through the global variable `LeaferIN.view`. This version is unminified, making it easier to debug.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/view/index.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/@leafer-in/view@1.5.3/dist/view.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Installing @leafer-editor/node with pnpm\nDESCRIPTION: This command installs the @leafer-editor/node package using pnpm.  This is necessary to use the graphical editor features in a Node.js environment. It adds the package as a dependency to your project.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/editor/node/napi.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @leafer-editor/node\n```\n\n----------------------------------------\n\nTITLE: Trend Chart App Implementation - Typescript\nDESCRIPTION: This snippet (from app/chart.ts) shows the app-specific implementation of a trend chart using Leafer.js Polygon element and Typescript. The actual code is dynamically included via the <<< syntax.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Polygon.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Polygon/app/chart.ts [App]\n```\n\n----------------------------------------\n\nTITLE: Top-Right Flow Alignment Typescript\nDESCRIPTION: Example code showing how to align child elements to the top-right corner within a Leaferjs Flow layout. This would involve setting `flowAlign` to `'top-right'`.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/flow/Flow/flowAlign.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/flow/flowAlign/top-right.ts\n```\n\n----------------------------------------\n\nTITLE: BlendMode SoftLight Example Typescript\nDESCRIPTION: Example code demonstrating the 'soft-light' blend mode. A softer version of hard-light. Pure black or pure white does not result in pure black or pure white. The code is assumed to be in a file named soft-light.ts.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/blendMode.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/blendMode/soft-light.ts\n```\n\n----------------------------------------\n\nTITLE: Displaying Bottom Rotation Control Point\nDESCRIPTION: This snippet focuses on displaying and customizing the rotation control point specifically at the bottom of the editor. It assumes inheritance from base styles and only requires overriding necessary properties.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/config/style.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/editor/config/rotate-point.ts\n```\n\n----------------------------------------\n\nTITLE: MoveEvent Simple Example (TypeScript)\nDESCRIPTION: Demonstrates a simple implementation of the MoveEvent using TypeScript. This example likely showcases how to listen for move events and handle the moveX and moveY properties to update the position of an element. It assumes the Viewport plugin is installed.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/event/ui/Move.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/event-ui/move/simple.ts\n```\n\n----------------------------------------\n\nTITLE: Installing @leafer-ui/worker using pnpm\nDESCRIPTION: Installs the @leafer-ui/worker package using pnpm. This provides an alternative package manager for including the LeaferUI library in your project's Web Worker setup. The package is installed from the pnpm registry.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/ui/worker/start.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\npnpm add @leafer-ui/worker\n```\n\n----------------------------------------\n\nTITLE: Bottom-Right Flow Alignment Typescript\nDESCRIPTION: Demonstrates bottom-right alignment with `flowAlign` set to `'bottom-right'`.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/flow/Flow/flowAlign.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/flow/flowAlign/bottom-right.ts\n```\n\n----------------------------------------\n\nTITLE: Drag Control Point to Modify Font Size\nDESCRIPTION: This code snippet details how to implement drag functionality on control points to dynamically adjust the font size of a text element, and dragging borders to control width and height.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/config/style.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/editor/config/style/point/fontSize.ts\n```\n\n----------------------------------------\n\nTITLE: Installing LeaferJS Find Plugin with bun\nDESCRIPTION: This command installs the @leafer-in/find package using bun. It integrates the plugin as a dependency into your project, providing access to its functionalities for searching elements within a LeaferJS environment.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/find/index.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nbun add @leafer-in/find\n```\n\n----------------------------------------\n\nTITLE: Page Transition Animation with LeaferJS (page.ts)\nDESCRIPTION: This code snippet showcases creating page transition animations using LeaferJS. It shows how to animate elements when a page enters or exits, enabling smooth and visually appealing navigation. This likely uses the animation or transition features of LeaferJS to control the appearance and movement of elements during page transitions.\nSOURCE: https://github.com/leaferjs/docs/blob/main/blog/2024-09-20.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/animation/page.ts\n```\n\n----------------------------------------\n\nTITLE: Creating a LeaferX Plugin Template (npm)\nDESCRIPTION: This command generates a project template suitable for developing LeaferX plugins and upper-level applications. See the plugin development documentation for more details.\nSOURCE: https://github.com/leaferjs/docs/blob/main/create/leafer.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm create leafer@latest plugin\n```\n\n----------------------------------------\n\nTITLE: Combining Pen with Shapes - App\nDESCRIPTION: This snippet shows the corresponding application code for combining the Pen element with shape components. It showcases the interaction between Leafer and the application layer when integrating shapes with the Pen. The application layer likely controls the creation and management of shape elements.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Pen.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Pen/app/add.ts [App]\n```\n\n----------------------------------------\n\nTITLE: Drawing Curve Path - TypeScript\nDESCRIPTION: This TypeScript code demonstrates how to create a new path and draw a curve on it using Leaferjs. It shows the basic implementation for creating a path drawer and adding curve commands to it. This code is from '@/code/path/drawer/curve.ts'.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/path/PathCreator.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/path/drawer/curve.ts\n```\n\n----------------------------------------\n\nTITLE: Drawing a Smooth Polygon with Custom Curvature - Typescript (Leafer)\nDESCRIPTION: This code snippet (from curve-number.ts) shows how to draw a smooth polygon with a custom curvature (0.2) using the `curve` property with a numeric value on the Polygon element in Leafer.js. Actual code is included using the <<< syntax.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Polygon.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Polygon/curve-number.ts [Leafer]\n```\n\n----------------------------------------\n\nTITLE: Defining IAnimateEvents Interface in Typescript\nDESCRIPTION: This TypeScript interface defines the structure for animation events in Leafer.js. It includes events for animation creation, playback control (play, pause, stop, seek), updates during the animation, and completion of the animation. Each event is associated with an IAnimateEventFunction, which takes an optional Animate instance as a parameter.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/animate/options/event.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IAnimateEvents {\n  created?: IAnimateEventFunction // 动画实例创建事件\n\n  play?: IAnimateEventFunction // 播放动画事件\n  pause?: IAnimateEventFunction // 暂停动画事件\n  stop?: IAnimateEventFunction // 停止动画事件\n  seek?: IAnimateEventFunction // 定位跳转动画事件\n\n  update?: IAnimateEventFunction // 更新动画事件，每一次样式变化都会触发\n  completed?: IAnimateEventFunction // 动画完成事件\n}\n\ninterface IAnimateEventFunction {\n  (animate?: Animate): void\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Arrow plugin with yarn\nDESCRIPTION: Install the @leafer-in/arrow plugin using yarn. This allows the use of arrow elements in Leaferjs.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/arrow/index.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @leafer-in/arrow\n```\n\n----------------------------------------\n\nTITLE: Installing Arrow plugin with npm\nDESCRIPTION: Install the @leafer-in/arrow plugin using npm. This allows the use of arrow elements in Leaferjs.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/arrow/index.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @leafer-in/arrow\n```\n\n----------------------------------------\n\nTITLE: Robot Element Implementation in LeaferJS (index.ts)\nDESCRIPTION: This code snippet shows the implementation of a Robot element in LeaferJS, designed for game development. The Robot element is like a game sprite with integrated frame playback and action presets. It likely involves loading and parsing a sprite sheet to create an animated game element with actions like walking and attacking.\nSOURCE: https://github.com/leaferjs/docs/blob/main/blog/2024-09-20.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/robot/index.ts\n```\n\n----------------------------------------\n\nTITLE: FlowGap X and Y Axis Gap Example\nDESCRIPTION: Displays how to configure separate gaps for the X and Y axes using the `IPointGap` interface. This snippet is expected from `gap.ts` in the `y` subdirectory.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/flow/Flow/gap.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/flow/gap/y/gap.ts\n```\n\n----------------------------------------\n\nTITLE: Setting Canvas Global Variable\nDESCRIPTION: This code snippet demonstrates how to bind a canvas to a global variable, allowing Leafer to interact with different platforms. In this example, the `useCanvas` function binds the canvas with ID 'canvas' to the `wx` global variable, which is commonly used in WeChat Mini Programs.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/ui/miniapp/start.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useCanvas } from '@leafer-ui/miniapp'\n\nuseCanvas('canvas', wx) // 默认全局变量绑定微信小程序, 可绑定到其他平台， 内部常用的属性方法需同 wx 一致\n```\n\n----------------------------------------\n\nTITLE: Leaferjs Fixed Buttons Configuration (TypeScript)\nDESCRIPTION: Illustrates how to add fixed buttons to elements in the Leaferjs editor using TypeScript.  This snippet shows how to configure the orientation of the button group to maintain a fixed position, even when the element is rotated or flipped. It assumes a basic Leaferjs project setup and familiarity with editor configuration options.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/index.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/editor/buttons.ts\n```\n\n----------------------------------------\n\nTITLE: Installing @leafer-ui/node\nDESCRIPTION: These commands install the @leafer-ui/node package using different package managers: npm, pnpm, yarn, and bun.  @leafer-ui/node enables server-side rendering capabilities.  Choose the command corresponding to your preferred package manager.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/ui/node/start.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @leafer-ui/node\n```\n\n----------------------------------------\n\nTITLE: Triangle App Implementation - Typescript\nDESCRIPTION: This code snippet (from app/triangle.ts) shows how a triangle is implemented in the application (App) using Polygon in Typescript with Leafer.js. The code is dynamically included using the <<< syntax during documentation generation.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Polygon.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Polygon/app/triangle.ts [App]\n```\n\n----------------------------------------\n\nTITLE: Finding element by innerId - Typescript\nDESCRIPTION: This code snippet demonstrates how to find an element using its innerId in LeaferJS. It requires the find element plugin or leafer-game/leafer-editor which includes the plugin.  The innerId is a temporary runtime ID and should not be used for remote storage.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/innerId.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/findOne/innerId.ts\n```\n\n----------------------------------------\n\nTITLE: Fixing Export Bug in Mini Program npm Packages\nDESCRIPTION: This snippet provides a workaround for an export bug that can occur when using npm packages in Mini Programs. It involves replacing a specific code section in the compiled output to ensure correct functionality. The bug is caused by `__TEMP__` being overwritten by subsequent packages, leading to incorrect access to the content of `__TEMP__[k]`. The replacement introduces `__TEMP2__` to preserve the original value.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/ui/miniapp/start.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n# 在 miniprogram_npm 文件夹中查找以下内容\n Object.defineProperty(exports, k, { enumerable: true, configurable: true, get: function() { return __TEMP__[k]; } });\n\n# 替换为\nvar __TEMP2__ =__TEMP__; Object.defineProperty(exports, k, { enumerable: true, configurable: true, get: function() { return __TEMP2__[k]; } });\n\n# 产生bug的原因： __TEMP__ 会被后面的包覆盖掉，导致 get 不到 __TEMP__[k] 的内容\n```\n\n----------------------------------------\n\nTITLE: Resize Cursor Configuration in Leafer (TypeScript)\nDESCRIPTION: This code snippet defines the configuration for the resize cursor in the Leafer editor. It uses an SVG string to represent the cursor's appearance and specifies the rotation variable, along with the x and y coordinates for the rotation center. This configuration allows for a customized resize cursor that can rotate dynamically.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/config/cursor.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  url: `\n<svg width=\"24\" height=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n  <g transform=\"rotate({{rotation}},12,12)\">\n    <path\n      fill-rule=\"evenodd\"\n      d=\"M3 11.4L7.5 8.0V10.4H16.5V8.0L21 11.4L16.5 14.9V12.4H7.5V14.9L3 11.4Z\"\n      fill=\"black\"\n    />\n  </g>\n</svg>` // svg字符串, {{rotation}}为旋转变量\n  x: 12 // x轴旋转中心点\n  y: 12 // y轴旋转中心点\n}\n```\n\n----------------------------------------\n\nTITLE: Define Overflow Type\nDESCRIPTION: Defines the `IOverflow` type, which can be either 'show' or 'hide'. This type is used to control how content is displayed when it exceeds the bounds of its container. When set to `hide`, the content is clipped.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/clip.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype IOverflow = 'show' | 'hide'\n```\n\n----------------------------------------\n\nTITLE: Dispatching Custom Event - Leafer.js (TypeScript)\nDESCRIPTION: Demonstrates how to emit a custom event with custom data using the `emit` method in Leafer.js. The event parameter is a custom object. This snippet requires Leafer.js core.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/emit.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/event/emit/custom.ts\n```\n\n----------------------------------------\n\nTITLE: Initializing Data Processor in Leafer UI (TypeScript)\nDESCRIPTION: This code snippet shows the instantiation of the data processor for a UI element. The `DataProcessor` is responsible for handling and storing the processed data.  A new data processing instance is created when initializing a UI element.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/custom/attr.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nthis.__ = new this.__DataProcessor(this) // 初始化 UI 的时候会创建如下数据处理实例\n```\n\n----------------------------------------\n\nTITLE: Import LeaferUI (module) as ES module\nDESCRIPTION: Imports LeaferUI as an ES module, using the module build. This approach leverages modern JavaScript module syntax. The non-minified version is used for debugging or development.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/framework/html.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import { Leafer } from 'https://unpkg.com/leafer-ui@1.5.3/dist/web.module.js'\n  // ...\n</script>\n```\n\n----------------------------------------\n\nTITLE: Extending Pen to create Custom Element (Leafer.js)\nDESCRIPTION: Demonstrates how to create a custom element by inheriting from the Pen element in Leafer.js.  Suitable for drawing complex custom effects by overriding the `render` method and defining custom drawing logic. Requires importing Leafer and Pen.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/custom/extends.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Leafer, Pen, RenderEvent } from 'leafer-ui'\n\nconst leafer = new Leafer({\n    view: document.querySelector('#app'),\n    width: 400,\n    height: 300,\n    autoRender: false\n})\n\nclass CustomPen extends Pen {\n    render(event: RenderEvent) {\n        const context = event.context\n        context.beginPath()\n        context.moveTo(50, 50)\n        context.lineTo(150, 80)\n        context.lineTo(80, 150)\n        context.closePath()\n        context.fillStyle = 'blue'\n        context.fill()\n    }\n}\n\nleafer.add(new CustomPen())\n\nleafer.render()\n```\n\n----------------------------------------\n\nTITLE: Box Overflow Clipping Example\nDESCRIPTION: This example demonstrates how to clip content exceeding the bounds of a Box element using the `overflow` property. The code snippet is included from the file '@/code/display/Box/overflow.ts'.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/clip.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Box/overflow.ts\n```\n\n----------------------------------------\n\nTITLE: Shadow Offset Example\nDESCRIPTION: This snippet demonstrates how to apply an offset to an element's shadow in Leaferjs.  It shows the properties needed to control the shadow's position relative to the element.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/basic/style.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/shadow/offset.ts\n```\n\n----------------------------------------\n\nTITLE: Drawing a Horizontal Line\nDESCRIPTION: This code snippet demonstrates how to draw a horizontal line using the Line element in Leafer.js. It highlights the configuration needed to create a simple horizontal line.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/basic/display.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Line/horizontal.ts\n```\n\n----------------------------------------\n\nTITLE: Installing @leafer-game/node with bun\nDESCRIPTION: Installs the @leafer-game/node package using bun, a fast all-in-one JavaScript runtime.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/game/node/start.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nbun add @leafer-game/node\n```\n\n----------------------------------------\n\nTITLE: Installing LeaferJS Find Plugin with yarn\nDESCRIPTION: This command installs the @leafer-in/find package using yarn.  It adds the plugin as a project dependency allowing usage of its element finding features in a LeaferJS project.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/find/index.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @leafer-in/find\n```\n\n----------------------------------------\n\nTITLE: Installing @leafer-draw/worker with npm\nDESCRIPTION: This snippet shows how to install the @leafer-draw/worker package using npm. It adds the package to your project's dependencies, allowing you to use it in your application.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/draw/worker/start.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @leafer-draw/worker\n```\n\n----------------------------------------\n\nTITLE: Adaptive Text Background in App - Leafer\nDESCRIPTION: Shows how to create a Box element with an adaptive text background within a Leafer App context. This likely involves integrating the Box into the application's scene graph and managing the text background within that context. The complete code is located in the file specified.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Box.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Box/app/text.ts [App]\n```\n\n----------------------------------------\n\nTITLE: FlowGap Fixed Value Example\nDESCRIPTION: Illustrates setting a fixed numeric gap between elements in a flow layout. This snippet is expected to be extracted from the `gap.ts` file, defining how a fixed space is applied between each child element.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/flow/Flow/gap.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/flow/gap/gap.ts\n```\n\n----------------------------------------\n\nTITLE: BlendMode Saturation Example Typescript\nDESCRIPTION: Example code demonstrating the 'saturation' blend mode. Preserves the luma and hue of the bottom layer, while adopting the chroma of the top layer. The code is assumed to be in a file named saturation.ts.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/blendMode.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/blendMode/saturation.ts\n```\n\n----------------------------------------\n\nTITLE: Document Viewport Configuration (Leafer)\nDESCRIPTION: This is a placeholder for the actual code. The code demonstrates how to configure the document viewport type for the Leafer in Leafer.js. Document limits scroll area, and limit scale range.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/config/app/type.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/app/config/type/document.ts [Leafer]\n```\n\n----------------------------------------\n\nTITLE: Auto Panning on Drag to Border (Leafer Config) - Typescript\nDESCRIPTION: Configures the LeaferJS instance to trigger auto-panning functionality when elements are dragged to the border of the view. Likely used with the app configuration. Consult code at the path for specific implementation details.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/config/app/move.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/app/config/autoMove.ts [Leafer]\n```\n\n----------------------------------------\n\nTITLE: Setting sides for a Pentagon - Typescript\nDESCRIPTION: This code snippet demonstrates how to set the `sides` property of a Polygon element to 5 in TypeScript, creating a pentagon.  This property determines the number of sides the polygon will have.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Polygon.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// 五边形\nsides: 5\n```\n\n----------------------------------------\n\nTITLE: Defining IAlign Typescript\nDESCRIPTION: This code snippet defines the `IAlign` type, which represents different alignment options like 'top-left', 'top', 'top-right', 'right', 'bottom-right', 'bottom', 'bottom-left', 'left', and 'center'. It's used to specify the starting and ending points of a linear gradient in Leafer.js. No external dependencies required.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/paint/linear.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype IAlign =\n  | 'top-left'\n  | 'top'\n  | 'top-right'\n  | 'right'\n  | 'bottom-right'\n  | 'bottom'\n  | 'bottom-left'\n  | 'left'\n  | 'center'\n\nfrom: 'top'\n```\n\n----------------------------------------\n\nTITLE: Installing Scroll Plugin with pnpm\nDESCRIPTION: Installs the @leafer-in/scroll plugin using pnpm.  This plugin is required to use the ScrollBar element.  Run this command in your project's root directory.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/scroll/index.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @leafer-in/scroll\n```\n\n----------------------------------------\n\nTITLE: IFourNumber Padding Usage\nDESCRIPTION: Demonstrates how the `IFourNumber` type is used to represent padding values in CSS-like syntax.  It shows how an array of numbers can be interpreted as top, right, bottom, and left padding values, with shorthand notations for fewer values.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/interface/math/Math.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\npadding: [20, 10, 20, 10] // [top, right, bottom, left]\npadding: [20, 10, 20] // [top, (right-left), bottom]\npadding: [20, 10] // [ (top-bottom), (right-left)]\npadding: 20 // all\n```\n\n----------------------------------------\n\nTITLE: Installing @leafer-game/miniapp with npm\nDESCRIPTION: Installs the @leafer-game/miniapp package using npm. This command adds the package to your project's dependencies, allowing you to use its functionalities.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/game/miniapp/start.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @leafer-game/miniapp\n```\n\n----------------------------------------\n\nTITLE: Animate - Autoplay Example (animate/ease.ts)\nDESCRIPTION: This TypeScript code snippet demonstrates how to configure the autoplay option within the Animate class. It showcases the implementation of easing functions and disabling autoplay for animations. The example is extracted from the animate/ease.ts file in the Leaferjs project.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/animate/options/autoplay.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/animate/options/autoplay/animate/ease.ts [animate]\n```\n\n----------------------------------------\n\nTITLE: Creating Shapes in Editor - JavaScript\nDESCRIPTION: This JavaScript code snippet provides an alternative implementation for creating shapes in an editor.  It showcases the interaction between bounding boxes and coordinate systems similar to the TypeScript version. The core functionality involves drawing rectangles in response to mouse events, accounting for any transformations applied to the canvas to ensure accurate placement.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/advanced/bounds.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<<< @/code/plugin/editor/create-mode.js\n```\n\n----------------------------------------\n\nTITLE: LeaferJS WatchEvent Example (TypeScript)\nDESCRIPTION: This snippet demonstrates the usage of WatchEvent in LeaferJS using TypeScript. It is likely part of a larger example showcasing how to observe and react to data changes within the LeaferJS framework.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/event/basic/Watch.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/event/leafer/watch.ts\n```\n\n----------------------------------------\n\nTITLE: Leafer App Editor Frame - index.ts\nDESCRIPTION: This code snippet demonstrates the main implementation of a Leafer App within a graphic editor context. It likely includes initialization, layer management (ground, tree, sky) and the core logic for the editor application. It showcases the practical application of the App structure and its benefits for performance.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/advanced/app.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/editor/frame/index.ts [editor]\n```\n\n----------------------------------------\n\nTITLE: Custom Viewport Configuration (App)\nDESCRIPTION: This is a placeholder for the actual code. The code demonstrates how to configure the custom viewport type for the App in Leafer.js. Custom allows to define own scale and translate logic.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/config/app/type.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/app/config/type/app/custom.ts [App]\n```\n\n----------------------------------------\n\nTITLE: Quickly setting a mask using a custom function - Typescript\nDESCRIPTION: This code snippet presents a custom function for quickly setting a mask element within a Leaferjs Group, using Typescript. It shows how to automate the mask creation process.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/mask.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/mask/fast.ts\n```\n\n----------------------------------------\n\nTITLE: Removing Capture Events - Javascript\nDESCRIPTION: Demonstrates how to remove capture event listeners in Leaferjs using Javascript. This prevents the registered function from being executed when the event is captured. Requires Leaferjs library to be installed.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/event/flow.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<<< @/code/event/capture/off.js\n```\n\n----------------------------------------\n\nTITLE: Installing leafer-draw with pnpm\nDESCRIPTION: This command installs the leafer-draw package using pnpm. It adds leafer-draw as a dependency to your project.  pnpm is an alternative package manager for Node.js.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/draw/start.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add leafer-draw\n```\n\n----------------------------------------\n\nTITLE: Installing LeaferJS Export Plugin with PNPM\nDESCRIPTION: Installs the @leafer-in/export plugin using pnpm. This allows you to use the export functionality within your LeaferJS project.  Requires pnpm to be installed and configured in your environment.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/export/index.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @leafer-in/export\n```\n\n----------------------------------------\n\nTITLE: BlendMode DestinationOver Example Typescript\nDESCRIPTION: Example code demonstrating the 'destination-over' blend mode. Draws the new shape behind the existing canvas content. The code is assumed to be in a file named destination-over.ts.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/blendMode.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/blendMode/destination-over.ts\n```\n\n----------------------------------------\n\nTITLE: Using Internal Editor (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to use an internal editor in Leaferjs using TypeScript. It likely involves setting up the internal editor for a specific element and observing its behavior when the element is selected and edited.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/editInner/use.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/editor/editInner/use/index.ts\n```\n\n----------------------------------------\n\nTITLE: Including Resize Plugin via Script (Unminified)\nDESCRIPTION: This HTML script tag includes the unminified version of the @leafer-in/resize plugin directly into your HTML file. It makes the plugin's functionality accessible through the global variable `LeaferIN.resize`.  It fetches the file from unpkg.com CDN.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/resize/index.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/@leafer-in/resize@1.5.3/dist/resize.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Animate Speed - Animate Class (Typescript)\nDESCRIPTION: This example provides context related to the `Animate` class.  It is presumably a usage example for speed within the class.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/animate/options/speed.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// @/code/plugin/animate/options/speed/ease.ts [Animate]\n```\n\n----------------------------------------\n\nTITLE: Installing Leafer Robot plugin with PNPM\nDESCRIPTION: Installs the @leafer-in/robot plugin using pnpm. This plugin provides the Robot element for creating animated characters within Leafer.js. It is required to use the Robot element.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/robot/index.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @leafer-in/robot\n```\n\n----------------------------------------\n\nTITLE: Initializing Leafer with Auto Resize - Full - Typescript\nDESCRIPTION: This code demonstrates creating a Leafer instance that automatically resizes when its parent's dimensions change. This 'full' configuration likely means it takes up the full space of its parent.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/basic/leafer.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Reverse Animation with Ease (Animate Class)\nDESCRIPTION: Presents the overall implementation of the 'reverse' property within the Animate class in the Leafer.js Animate plugin. The snippet provides context around how the reverse property is integrated into the Animate class. It involves creating and configuring animations within the leafer environment.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/animate/options/reverse.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/animate/options/reverse/ease.ts [Animate]\n```\n\n----------------------------------------\n\nTITLE: Drawing a Line with Pen in LeaferJS\nDESCRIPTION: This code snippet demonstrates how to draw a line using the Pen API in LeaferJS. It showcases the basic usage of the Pen object to create and manipulate paths.\nSOURCE: https://github.com/leaferjs/docs/blob/main/blog/2024-07-09.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Pen/line.ts\n```\n\n----------------------------------------\n\nTITLE: Importing Leafer Flow and Resize via Script Tags\nDESCRIPTION: This code imports the @leafer-in/flow and @leafer-in/resize plugins using script tags, making the Flow class available via the global LeaferIN.flow object.  This allows using the Flow element without a package manager. The Flow class is then extracted for direct use.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/flow/index.md#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"https://unpkg.com/@leafer-in/flow@1.5.3/dist/flow.min.js\"></script>\n<script src=\"https://unpkg.com/@leafer-in/resize@1.5.3/dist/resize.min.js\"></script>\n<script>\n  const { Flow } = LeaferIN.flow\n</script>\n```\n\n----------------------------------------\n\nTITLE: Overflow Handling in a Box - App\nDESCRIPTION: Shows how to handle content overflow within a Box element within a Leafer App context. This likely involves integrating the Box into the application's scene graph and managing overflow within that context. The complete code is located in the file specified.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Box.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Box/app/overflow.ts [App]\n```\n\n----------------------------------------\n\nTITLE: Defining the Canvas element (WXML)\nDESCRIPTION: Defines a canvas element in WXML (Weixin Markup Language) for rendering the Leafer content. The canvas is configured with event handlers (catchtouchstart, catchtouchmove, catchtouchend, catchtouchcancel) that call the receiveEvent function to handle user interactions.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/game/miniapp/start.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<canvas\n    id=\"leafer\"\n    type=\"2d\"\n    catchtouchstart=\"receiveEvent\"\n    catchtouchmove=\"receiveEvent\"\n    catchtouchend=\"receiveEvent\"\n    catchtouchcancel=\"receiveEvent\"\n></canvas>\n```\n\n----------------------------------------\n\nTITLE: Installing leafer-draw with yarn\nDESCRIPTION: This command installs the leafer-draw package using yarn. It adds leafer-draw as a dependency to your project. Yarn is another alternative package manager for Node.js.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/draw/start.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add leafer-draw\n```\n\n----------------------------------------\n\nTITLE: BlendMode Color Example Typescript\nDESCRIPTION: Example code demonstrating the 'color' blend mode. Preserves the luma of the bottom layer, while adopting the hue and chroma of the top layer. The code is assumed to be in a file named color.ts.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/blendMode.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/blendMode/color.ts\n```\n\n----------------------------------------\n\nTITLE: Importing Arrow plugin via Script Tag (arrow)\nDESCRIPTION: Import the Arrow plugin via script tag. This makes the Arrow class available through the global LeaferIN.arrow object. The arrow.js version is used.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/arrow/index.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/@leafer-in/arrow@1.5.3/dist/arrow.js\"></script>\n<script>\n  const { Arrow } = LeaferIN.arrow\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining States for a UI Element in LeaferJS\nDESCRIPTION: This TypeScript snippet demonstrates how to define and apply different states (e.g., 'normal', 'hover', 'press') to a UI element in LeaferJS. It utilizes the `states` property to define the styles for each state and the `state` property to switch between them.  It requires the '交互状态插件' to be installed.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/state/state.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/state/state.ts\n```\n\n----------------------------------------\n\nTITLE: IEditPointType Type Definition\nDESCRIPTION: Defines the IEditPointType type alias in TypeScript, which can be one of the following string literals: 'rotate', 'resize', 'resize-rotate', or 'button'. This type is used to specify the type of the EditPoint (e.g., rotate button, resize button). No dependencies.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/EditPoint.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype IEditPointType =\n  | 'rotate' // 旋转按钮\n  | 'resize' // resize 按钮\n  | 'resize-rotate' // reisze + 旋转按钮\n  | 'button' // 自定义按钮\n```\n\n----------------------------------------\n\nTITLE: Importing Case Component\nDESCRIPTION: Imports the `Case` component from a specified file path.  This component is likely used for displaying examples or test cases within the documentation.  Requires the `Case.vue` file to exist at the given path.  Allows embedding interactive examples within the documentation page.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/stroke.md#_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\nimport Case from '/component/Case.vue'\n```\n\n----------------------------------------\n\nTITLE: Accessing Computed Data - TypeScript\nDESCRIPTION: Shows how to access the final computed data value based on input and middle data. This example calculates the width of a rectangle as a percentage of its parent's width.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/data.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst box = new Box({ width: 100 })\nconst rect = new Rect({ width: '50%' })\n\nbox.add(rect)\n\n// `rect.__` 会自动添加同元素数据属性一样的 setter/getter\n\nrect.__.width // 50, 返回计算数据 50% = 100 * (50 / 100)，box.width变化时会自动更新\n```\n\n----------------------------------------\n\nTITLE: Checking App Ready State\nDESCRIPTION: This snippet illustrates how to check if the Leafer application is ready, indicating that the initial layout has been completed. The ready state signifies that the application is prepared for further interactions and updates.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Leafer.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Using create-leafer After Global Installation (npx)\nDESCRIPTION: After global installation, the `create-leafer` or `leafer` command can be used with `npx` to run various functions, such as creating a Vue template, initializing a project, or creating a plugin.\nSOURCE: https://github.com/leaferjs/docs/blob/main/create/leafer.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx leafer vue-template\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx leafer init\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx leafer plugin\n```\n\n----------------------------------------\n\nTITLE: Installing Leafer.js View Plugin with bun\nDESCRIPTION: This command installs the `@leafer-in/view` plugin using bun.  It allows for view control functionalities within Leafer.js applications. This is one of the package manager installation options.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/view/index.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nbun add @leafer-in/view\n```\n\n----------------------------------------\n\nTITLE: Installing @leafer-editor/worker with Bun\nDESCRIPTION: This command installs the @leafer-editor/worker package using the bun package manager. It adds the package to your project's dependencies, allowing you to use its functionalities.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/editor/worker/start.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nbun add @leafer-editor/worker\n```\n\n----------------------------------------\n\nTITLE: World to Inner Coordinate Conversion (Leafer)\nDESCRIPTION: This snippet demonstrates how to convert from world coordinates to inner coordinates using Leafer.  It showcases the `getInnerPoint` method and its usage. Requires the Leafer framework.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/point/index.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/point/inner.ts\n```\n\n----------------------------------------\n\nTITLE: Line Height Example\nDESCRIPTION: Illustrates setting the lineHeight property of a Text element using the IUnitData interface. The example sets the line height to 150%.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Text.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntext.lineHeight = {\n  type: 'percent',\n  value: 1.5, // 150%\n}\n```\n\n----------------------------------------\n\nTITLE: Solid Fill Example in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create and apply a solid fill using the SolidPaint object in Leafer.js. It shows how to set the color property and assign the SolidPaint object to the fill property of a UI element.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/paint/solid.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/fill/solid/a.ts\n```\n\n----------------------------------------\n\nTITLE: Convert Leafer Canvas to URL - TypeScript\nDESCRIPTION: This snippet demonstrates how to convert a LeaferCanvas object to a URL. This uses Leafer.js's cross-platform canvas handling capabilities. Requires the Leafer.js library.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/resource/Resource.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/resource/image/leafer-canvas.ts\n```\n\n----------------------------------------\n\nTITLE: Manual Dragging Example (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to manually drag elements in LeaferJS. It likely involves setting the `draggable` property to true or using `DragEvent.setList()` to enable dragging functionality. The complete code is located at `@/code/event-ui/drag/simple.ts`.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/event/ui/Drag.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/event-ui/drag/simple.ts\n```\n\n----------------------------------------\n\nTITLE: Import LeaferUI (web.min) with alias\nDESCRIPTION: Imports LeaferUI using a script tag, specifically the web.min build.  Defines aliases for Image, PointerEvent, and DragEvent to avoid conflicts with browser global variables.  This approach provides a minified, browser-compatible version of the library.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/framework/html.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/leafer-ui@1.5.3/dist/web.min.js\"></script>\n<script>\n  const { Leafer } = LeaferUI // 全局变量，包含 leafer-ui 的所有功能\n\n  // Image、PointerEvent、DragEvent 会与浏览器的全局变量冲突，请使用以下别名代替\n  const { MyImage, MyPointerEvent, MyDragEvent } = LeaferUI\n\n  // ...\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing leafer-editor via script tag (web)\nDESCRIPTION: This snippet demonstrates how to import leafer-editor using a script tag, specifically the unminified version for web browsers. It defines global variables Leafer, Editor and Arrow from the LeaferUI namespace.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/editor/start.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/leafer-editor@1.5.3/dist/web.js\"></script>\n<script>\n  const { Leafer, Editor, Arrow } = LeaferUI\n  // ...\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing leafer-draw via script tag (web)\nDESCRIPTION: This HTML snippet imports leafer-draw using a script tag, referencing the unminified web version from unpkg. It makes the `Leafer` object available globally. This version is useful for debugging.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/draw/start.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/leafer-draw@1.5.3/dist/web.js\"></script>\n<script>\n  const { Leafer } = LeaferUI\n  // ...\n</script>\n```\n\n----------------------------------------\n\nTITLE: Quick Style Modification\nDESCRIPTION: This snippet demonstrates how to quickly modify the styles of the editor, likely involving properties like stroke, fill, etc., that affect the visual appearance of the editor elements.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/config/style.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/editor/config/rect.ts\n```\n\n----------------------------------------\n\nTITLE: Removing Capture Events - Typescript\nDESCRIPTION: Demonstrates how to remove capture event listeners in Leaferjs using Typescript. This prevents the registered function from being executed when the event is captured. Requires Leaferjs library to be installed.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/event/flow.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/event/capture/off.ts\n```\n\n----------------------------------------\n\nTITLE: Image with Fixed Height, Auto Width (App)\nDESCRIPTION: This code snippet demonstrates how to set a fixed height for the Image element, while the width adjusts automatically to maintain the aspect ratio within an App environment.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Image.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Image/app/height.ts\n```\n\n----------------------------------------\n\nTITLE: CornerRadiusString SCSS Example\nDESCRIPTION: Demonstrates how to use CornerRadiusString in SCSS to define the corner radius of a rectangle. It shows different ways to specify the values for topLeft, topRight, bottomRight, and bottomLeft corners using shorthand notations.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/interface/ui/String.md#_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n// 参数模版\ntopLeft topRight bottomRight bottomLeft\n\n// 应用示例\ncorner-radius: 20 10 20 10; // topLeft topRight bottomRight bottomLeft\ncorner-radius: 20 10 20; // topLeft (topRight-bottomLeft) bottomRight\ncorner-radius: 20 10; // (topLeft-bottomRight) (topRight-bottomLeft)\n```\n\n----------------------------------------\n\nTITLE: Leafer.js Proxy Data Implementation in Vue3\nDESCRIPTION: This TypeScript snippet extends Leafer's UI class to enable reactive data using Vue 3's `shallowReactive` and `watch` functions. It defines a `proxyData` getter, and implements `setProxyAttr`, `getProxyAttr`, and `createProxyData` to manage the reactive data and synchronize it with the Leafer element's properties. It requires `vue` and `leafer-ui` as dependencies.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/proxy.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { shallowReactive, watch } from 'vue'\n\nimport { UI, defineKey } from 'leafer-ui'\n\n// 定义proxyData\n\ndefineKey(UI.prototype, 'proxyData', {\n  get() {\n    return this.__proxyData\n      ? this.__proxyData\n      : (this.__proxyData = this.createProxyData())\n  },\n})\n\n// 设置元素属性时，内部同步设置代理数据\n\nUI.prototype.setProxyAttr = function (name: string, newValue: unknown): void {\n  const data = this.__proxyData as any\n  if (data[name] !== newValue) data[name] = newValue\n}\n\n// 获取元素属性时，内部优先返回代理数据\n\nUI.prototype.getProxyAttr = function (name: string): any {\n  const value = (this.__proxyData as any)[name]\n  return value === undefined ? this.__.__get(name) : value\n}\n\n// 创建响应式数据\n\nUI.prototype.createProxyData = function () {\n  // 1.获取所有样式数据(含默认值)\n  const data = this.__.__getData()\n\n  // 2. 生成响应式数据\n  const proxyData = shallowReactive(data)\n\n  // 3.观察响应式数据变化，同步更新元素数据\n  for (const name in data) {\n    watch(\n      () => proxyData[name], // source\n      (newValue) => {\n        if (this.__.__get(name) !== newValue) (this as any)[name] = newValue\n      } // callback\n    )\n  }\n\n  return proxyData\n}\n```\n\n----------------------------------------\n\nTITLE: Using custom fonts with @napi-rs/canvas\nDESCRIPTION: This code snippet demonstrates how to register and use custom fonts with the `@napi-rs/canvas` library in a Node.js environment. It registers two font files and then uses them to draw text on a canvas, saving the result as a PNG image.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/ui/node/napi.md#_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nconst { writeFileSync } = require('fs')\nconst { join } = require('path')\n\nconst { createCanvas, GlobalFonts } = require('@napi-rs/canvas')\n\nGlobalFonts.registerFromPath(\n  join(__dirname, '..', 'fonts', 'AppleColorEmoji@2x.ttf'),\n  'Apple Emoji'\n)\nGlobalFonts.registerFromPath(\n  join(__dirname, '..', '__test__', 'fonts', 'COLRv1.ttf'),\n  'COLRv1'\n)\n\nconsole.info(GlobalFonts.families)\n\nconst canvas = createCanvas(760, 360)\nconst ctx = canvas.getContext('2d')\n\nctx.font = '50px Apple Emoji'\nctx.strokeText('😀😃😄😁😆😅😂🤣☺️😊😊😇', 50, 150)\n\nctx.font = '100px COLRv1'\nctx.fillText('abc', 50, 300)\n\nconst b = canvas.toBuffer('image/png')\n\nwriteFileSync(join(__dirname, 'draw-emoji.png'), b)\n```\n\n----------------------------------------\n\nTITLE: Animate Loop Delay\nDESCRIPTION: Illustrates how to introduce a delay between loop iterations in Leaferjs animations. The provided snippets showcase setting a delay for various animation types ('animation', 'transition', 'set', 'animate'). This is useful for creating pauses between repetitions of the animation sequence.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/animate/options/loop.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nRefer to @/code/plugin/animate/options/loop/animation/delay.ts for animation code.\n```\n\nLANGUAGE: typescript\nCODE:\n```\nRefer to @/code/plugin/animate/options/loop/transition/delay.ts for transition code.\n```\n\nLANGUAGE: typescript\nCODE:\n```\nRefer to @/code/plugin/animate/options/loop/set/delay.ts for set code.\n```\n\nLANGUAGE: typescript\nCODE:\n```\nRefer to @/code/plugin/animate/options/loop/animate/delay.ts for animate code.\n```\n\nLANGUAGE: typescript\nCODE:\n```\nRefer to @/code/plugin/animate/options/loop/delay.ts for Animate code.\n```\n\n----------------------------------------\n\nTITLE: Installing Editor and Resize Plugins with NPM\nDESCRIPTION: This snippet demonstrates how to install the @leafer-in/editor and @leafer-in/resize plugins using npm. These plugins are required to use the Editor element in Leafer.js. Run these commands in your project's root directory.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/index.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @leafer-in/editor\nnpm install @leafer-in/resize\n```\n\n----------------------------------------\n\nTITLE: Arrow Type Definition (TypeScript)\nDESCRIPTION: TypeScript definition for IArrowType, defining the available arrow types and their properties. This includes predefined types like 'angle', 'arrow', 'triangle', 'circle', 'square', 'diamond', 'mark' and the option to define custom arrows via IPathDataArrow.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/arrow/index.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntype IArrowType =\n  | 'none'\n  | 'angle' // 角度箭头（性能好）\n  | 'angle-side' // 单边角度箭头\n  | 'arrow' // 标准箭头\n  | 'triangle' // 三角形箭头\n  | 'triangle-flip' // 反向三角形箭头\n  | 'circle' // 圆形箭头\n  | 'circle-line' // 圆形箭头（线性）\n  | 'square' // 方形箭头\n  | 'square-line' // 方形箭头（线性）\n  | 'diamond' // 菱形箭头\n  | 'diamond-line' // 菱形箭头（线性）\n  | 'mark' // 标注箭头\n  | IPathDataArrow // 按照线宽为 1 自定义，箭头末端为（0，0），内部会自动处理缩放、旋转角度。\n\ninterface IPathDataArrow {\n  connect?: IPathDataArrowOffset // 箭头与线条的连接点位置\n  offset?: IPathDataArrowOffset // 箭头偏移距离，与末端对齐\n  path: IPathCommandData // 只支持 M、L、C、Q、O 绘图命令\n}\n\ninterface IPathDataArrowOffset {\n  x?: number // 偏移距离（x轴）\n  bevelJoin?: number // strokeJoin 为 bevel 时增加的偏移距离（x轴）\n  roundJoin?: number // strokeJoin 为 round 时增加的偏移距离（x轴）\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @leafer-in/html with bun\nDESCRIPTION: Install the @leafer-in/html plugin using bun to enable HTMLText functionality in LeaferJS. This command adds the plugin to your project's dependencies.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/html/index.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nbun add @leafer-in/html\n```\n\n----------------------------------------\n\nTITLE: Installing @napi-rs/canvas via npm\nDESCRIPTION: This command installs the @napi-rs/canvas package using npm. It provides Canvas functionality in a Node.js environment, based on Skia and Rust for performance.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/game/node/napi.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @napi-rs/canvas\n```\n\n----------------------------------------\n\nTITLE: Block Viewport Configuration (App)\nDESCRIPTION: This is a placeholder for the actual code. The code demonstrates how to configure the block viewport type for the App in Leafer.js. Block viewports allow elements to integrate into the browser page like regular HTML block elements, responding to interaction events.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/config/app/type.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/app/config/type/block.ts\n```\n\n----------------------------------------\n\nTITLE: Animate Keyframe Interface\nDESCRIPTION: Defines the interface for an animated keyframe in Leaferjs. It includes style, easing, delay, duration, swing, loop, autoDelay, and autoDuration properties. Requires the animate plugin. Defines the structure for each keyframe in an animation.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/animation.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IAnimateKeyframe {\n  style: IUIInputData // 元素样式\n\n  easing?: IAnimateEasing // 单独设置关键帧缓动方式\n  delay?: number // 单独设置关键帧延迟播放时长。\n  duration?: number // 单独设置关键帧的固定时长，设置后将忽略 autoDuration\n\n  swing?: number // 摇摆次数（到达 to 的次数），from -> to，to -> from -> to ... ，默认 0\n  loop?: number // 循环次数，默认为 0\n\n  // 分配剩余时间：（总时长 - 总关键帧固定时长）/ 总权重 * 当前权重\n  autoDelay?: number // 自动 delay 的权重， 默认为 0\n  autoDuration?: number // 自动 duration 的权重， 默认为 1\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Editor and Resize Plugins with Yarn\nDESCRIPTION: This snippet illustrates installing the @leafer-in/editor and @leafer-in/resize plugins using yarn. Yarn is a popular package manager known for its speed and reliability.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/index.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @leafer-in/editor\nyarn add @leafer-in/resize\n```\n\n----------------------------------------\n\nTITLE: Importing Leafer.js Viewport with Script Tag (Full)\nDESCRIPTION: This script tag imports the full version of the Leafer.js viewport plugin. By including this tag in your HTML, you can access the viewport plugin's functionality through the global variable LeaferIN.viewport. This version is useful for development and debugging.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/viewport/index.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/@leafer-in/viewport@1.5.3/dist/viewport.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Drawing a Path\nDESCRIPTION: This code snippet showcases how to draw a path using the Path element in Leafer.js. It is drawing a cafe related path with a specific data array.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/basic/display.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Path/cafe.ts\n```\n\n----------------------------------------\n\nTITLE: Image Fill Clipping Example\nDESCRIPTION: This example demonstrates how to clip an image using the `clip` mode within image fill properties. The code snippet is included from the file '@/code/property/fill/image/clip.ts'.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/clip.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/fill/image/clip.ts\n```\n\n----------------------------------------\n\nTITLE: Install @napi-rs/canvas with yarn\nDESCRIPTION: Installs the @napi-rs/canvas package using yarn. This package provides a Canvas implementation for Node.js environments using Rust and Skia. No dependencies are required beyond a Node.js environment.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/draw/node/napi.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @napi-rs/canvas\n```\n\n----------------------------------------\n\nTITLE: Text Overflow Type\nDESCRIPTION: Defines the TypeScript type for handling text overflow.  Allows for 'show' or 'hide' overflow, or a custom string for ellipsis.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Text.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntype IOverflow = 'show' | 'hide'\n\n// 自定义省略文本\n\ntext.textOverflow = '...'\n```\n\n----------------------------------------\n\nTITLE: Chained method calls on a Point in LeaferJS (TypeScript)\nDESCRIPTION: This example demonstrates how to use chained method calls on a Point object in LeaferJS. It creates a new Point instance, sets its coordinates using the set method, and then calculates the distance to another point using the getDistance method, demonstrating the fluent API.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/math/Point.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst point = new Point()\n\npoint.set(100, 100).getDistance({ x: 200, y: 100 }) // 100\n```\n\n----------------------------------------\n\nTITLE: Installing Text Editor Plugin with Bun\nDESCRIPTION: This command installs the text-editor plugin from @leafer-in using bun. It's a prerequisite for using the TextEditor component in Leaferjs.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/text-editor/index.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nbun add @leafer-in/text-editor\n```\n\n----------------------------------------\n\nTITLE: Updating LeaferJS Locally (Shell)\nDESCRIPTION: This snippet provides the shell command to update the local LeaferJS repository with the latest changes. It utilizes git pull with the --recurse-submodules option to ensure that submodules are also updated.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/runtime.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngit pull --recurse-submodules\n```\n\n----------------------------------------\n\nTITLE: IAlign Type Definition\nDESCRIPTION: Defines the `IAlign` type, a union of string literals representing different alignment points within an element, relative to its content. It includes options such as 'top-left', 'top', 'top-right', 'right', 'bottom-right', 'bottom', 'bottom-left', 'left', and 'center'.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/interface/math/Math.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype IAlign =\n  | 'top-left'\n  | 'top'\n  | 'top-right'\n  | 'right'\n  | 'bottom-right'\n  | 'bottom'\n  | 'bottom-left'\n  | 'left'\n  | 'center'\n```\n\n----------------------------------------\n\nTITLE: Listening for the 'ready' event\nDESCRIPTION: This snippet demonstrates how to listen for the 'ready' event on a Leafer instance. The 'ready' event is triggered when the application is ready for rendering. This allows you to execute custom logic when the application is initialized.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/life/app.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Leafer, LeaferEvent } from 'leafer-ui'\n\nconst leafer = new Leafer({\n    view: document.querySelector('#leafer')!,\n    width: 400,\n    height: 300,\n})\n\nleafer.on(LeaferEvent.READY, () => {\n    console.log('Leafer is ready!')\n})\n```\n\n----------------------------------------\n\nTITLE: Importing @leafer-in/html via script tag (minified)\nDESCRIPTION: Import the minified version of the @leafer-in/html plugin using a script tag to enable HTMLText functionality in LeaferJS. It then extracts the HTMLText object from the global LeaferIN.html variable for use in your code.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/html/index.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/@leafer-in/html@1.5.3/dist/html.min.js\"></script>\n<script>\n  const { HTMLText } = LeaferIN.html\n</script>\n```\n\n----------------------------------------\n\nTITLE: Custom Event Name Modification (JavaScript)\nDESCRIPTION: This JavaScript code snippet illustrates how to globally modify the string name corresponding to an event name constant in Leaferjs. It provides an example of altering the default event name, targeting UIEvent-derived events, to ensure compatibility with pre-existing codebases. The specific implementation details would be within the linked file.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/event/name.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// @/code/event/changeName.js\n```\n\n----------------------------------------\n\nTITLE: Flipping element along X axis in Leaferjs\nDESCRIPTION: This snippet demonstrates how to flip a rectangular element along the X axis using the `flip` method. It shows the basic usage without transition and with boolean and number transition parameters.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/flip.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// 按X轴镜像元素\nrect.flip('x')\n\n// 动画过渡\nrect.flip('x', true)\n\nrect.flip('x', 2) // 过渡 2 秒\n```\n\n----------------------------------------\n\nTITLE: Installing @leafer-game/node via yarn\nDESCRIPTION: This command installs the @leafer-game/node package using yarn. It's required for using leafer-game features in a Node.js environment.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/game/node/napi.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @leafer-game/node\n```\n\n----------------------------------------\n\nTITLE: Setting Motion with Percentage in Leaferjs (Typescript)\nDESCRIPTION: This code snippet demonstrates how to set the 'motion' property of a Leaferjs rectangle element using a percentage value. It positions the element at 50% of the defined motion path. It requires the motion path plugin to be installed and available.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/motion.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nrect.motion = {\n  type: 'percent',\n  value: 0.5, // 50%\n}\n```\n\n----------------------------------------\n\nTITLE: Install skia-canvas with yarn\nDESCRIPTION: Installs the skia-canvas package using yarn. skia-canvas provides Canvas functionality in server-side environments, based on the Skia graphics library.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/editor/node/start.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nyarn add skia-canvas\n```\n\n----------------------------------------\n\nTITLE: Installing Editor and Resize Plugins with Bun\nDESCRIPTION: This snippet demonstrates installing the @leafer-in/editor and @leafer-in/resize plugins using bun. Bun is a newer JavaScript runtime that is designed for speed and modern workflows.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/index.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nbun add @leafer-in/editor\nbun add @leafer-in/resize\n```\n\n----------------------------------------\n\nTITLE: Linear Stroke Example\nDESCRIPTION: This snippet demonstrates how to create a linear gradient stroke style for an element in Leaferjs.  It shows the configuration required to apply a linear gradient to the element's border.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/basic/style.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/stroke/linear/a.ts\n```\n\n----------------------------------------\n\nTITLE: BlendMode Darken Example Typescript\nDESCRIPTION: Example code demonstrating the 'darken' blend mode.  It shows how the darkest pixel values between the two layers are retained. The code is assumed to be in a file named darken.ts.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/blendMode.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/blendMode/darken.ts\n```\n\n----------------------------------------\n\nTITLE: Rotating element event example\nDESCRIPTION: This example demonstrates how to listen for the `EditorRotateEvent.ROTATE` event on the Leafer.js editor and access the rotation angle.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/event/EditorRotateEvent.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/editor/event/rotate.ts\n```\n\n----------------------------------------\n\nTITLE: Install @napi-rs/canvas with bun\nDESCRIPTION: Installs the @napi-rs/canvas package using bun. This package provides a Canvas implementation for Node.js environments using Rust and Skia. No dependencies are required beyond a Node.js environment.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/draw/node/napi.md#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nbun add @napi-rs/canvas\n```\n\n----------------------------------------\n\nTITLE: Install @napi-rs/canvas with npm\nDESCRIPTION: Installs the @napi-rs/canvas package using npm. This package provides a Canvas implementation for Node.js environments using Rust and Skia. No dependencies are required beyond a Node.js environment.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/draw/node/napi.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @napi-rs/canvas\n```\n\n----------------------------------------\n\nTITLE: Path Data Usage\nDESCRIPTION: This snippet, from '@/code/property/path/Path/path.ts', demonstrates using path data directly to define the shape of a Path element. It's likely using `IPathString`, `IPathCommandData`, or `IPathCommandObject` to define the path.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Path.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/path/Path/path.ts\n```\n\n----------------------------------------\n\nTITLE: IPointData Interface Definition\nDESCRIPTION: Defines the `IPointData` interface, which represents a 2D point with `x` and `y` coordinates.  Both coordinates are numbers.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/interface/math/Math.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IPointData {\n  x: number\n  y: number\n}\n```\n\n----------------------------------------\n\nTITLE: Simulating Rotate Event in Leafer.js (TypeScript)\nDESCRIPTION: Simulates a rotate event using the `rotate` method on the `leafer.interaction` instance. Requires an `IRotateEvent` data object to specify the rotation details, such as the angle and center point.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/event/simulation.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/interaction/rotate.ts\n```\n\n----------------------------------------\n\nTITLE: Installing @leafer-ui/node with pnpm\nDESCRIPTION: This command installs the @leafer-ui/node package using pnpm. This allows the leafer-ui library to be used within a Node.js environment.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/ui/node/napi.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @leafer-ui/node\n```\n\n----------------------------------------\n\nTITLE: Animate Class with attrs property in Leaferjs\nDESCRIPTION: Demonstrates the Animate class in Leaferjs with emphasis on the 'attrs' property. This snippet likely shows how 'attrs' is integrated within the class structure and its methods. It assumes a Leaferjs environment is set up and defines the Animate class.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/animate/options/attrs.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/animate/options/attrs/ease.ts [Animate]\n```\n\n----------------------------------------\n\nTITLE: Getting Leafer UI Version in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import the version variable from the 'leafer-ui' package and print it to the console. It requires the 'leafer-ui' package to be installed. The output will be a string representing the current version of the leafer-ui package.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/update.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { version } from 'leafer-ui'\n\nconsole.log(version)\n```\n\n----------------------------------------\n\nTITLE: Vue Component Setup\nDESCRIPTION: Vue component setup with script tag, importing a 'Case.vue' component. It uses Vue's composition API, specifically `<script setup>`, which automatically registers the imported component for use in the template.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/cursor.md#_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport Case from '/component/Case.vue'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing @leafer-game/node via bun\nDESCRIPTION: This command installs the @leafer-game/node package using bun. It's required for using leafer-game features in a Node.js environment.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/game/node/napi.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nbun add @leafer-game/node\n```\n\n----------------------------------------\n\nTITLE: Installing skia-canvas with yarn\nDESCRIPTION: Installs the skia-canvas package using yarn. skia-canvas provides Canvas functionality within the Node.js environment. This package is required to be installed seperately.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/draw/node/start.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nyarn add skia-canvas\n```\n\n----------------------------------------\n\nTITLE: Installing Scroll Plugin with bun\nDESCRIPTION: Installs the @leafer-in/scroll plugin using bun.  This plugin is required to use the ScrollBar element.  Run this command in your project's root directory.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/scroll/index.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nbun add @leafer-in/scroll\n```\n\n----------------------------------------\n\nTITLE: Layout Event Example\nDESCRIPTION: Illustrates the usage of LayoutEvent in Leafer.js, demonstrating how to listen and respond to layout-related events. The example code provides a practical implementation scenario for understanding the event lifecycle.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/event/basic/Layout.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types='../../../../src/index' />\n\nimport { Leafer, Rect, LayoutEvent } from '@leafer/web'\n\nconst leafer = new Leafer({ view: document.body })\n\nconst rect = new Rect({\n    width: 100,\n    height: 50,\n    fill: 'red'\n})\n\nleafer.add(rect)\n\nleafer.on(LayoutEvent.LAYOUT, () => {\n    console.log('layout')\n})\n\nleafer.on(LayoutEvent.END, () => {\n    console.log('layout end')\n})\n\n\nleafer.layout.request()\n```\n\n----------------------------------------\n\nTITLE: Custom Viewport Configuration (Leafer)\nDESCRIPTION: This is a placeholder for the actual code. The code demonstrates how to configure the custom viewport type for the Leafer in Leafer.js. Custom allows to define own scale and translate logic.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/config/app/type.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/app/config/type/custom.ts [Leafer]\n```\n\n----------------------------------------\n\nTITLE: Top-Left Flow Alignment Typescript\nDESCRIPTION: Example code demonstrating how to align child elements to the top-left corner within a Leaferjs Flow layout using the `flowAlign` property. This snippet likely sets `flowAlign` to `'top-left'`.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/flow/Flow/flowAlign.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/flow/flowAlign/top-left.ts\n```\n\n----------------------------------------\n\nTITLE: Installing @leafer-game/node via npm\nDESCRIPTION: This command installs the @leafer-game/node package using npm. It's required for using leafer-game features in a Node.js environment.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/game/node/napi.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @leafer-game/node\n```\n\n----------------------------------------\n\nTITLE: Listening for Image Load Event (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to listen for the image load event using JavaScript. This allows you to execute specific actions when the image has fully loaded.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Image.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n<<< @/code/event/image/image.js\n```\n\n----------------------------------------\n\nTITLE: Remove Multiple Events (off) - JavaScript (more)\nDESCRIPTION: This snippet shows how to remove multiple event listeners using the 'off' method with an array of event types in JavaScript (using the more variable). This snippet showcases the syntax when using an array of event types for removing the listeners. Requires the Leaferjs library. Input: Array of event type strings. Output: the associated listeners are removed, no direct output.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/off.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n<<< @/code/event/off/more.js\n```\n\n----------------------------------------\n\nTITLE: IFlowAlign Type Definition in Typescript\nDESCRIPTION: Defines the `IFlowAlign` type, which represents the possible values for aligning child elements within a Flow layout. It includes options for top-left, top, top-right, right, bottom-right, bottom, bottom-left, left, center, and baseline alignment.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/flow/Flow/flowAlign.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype IFlowAlign =\n  | 'top-left'\n  | 'top'\n  | 'top-right'\n  | 'right'\n  | 'bottom-right'\n  | 'bottom'\n  | 'bottom-left'\n  | 'left'\n  | 'center'\n  | IBaseLineAlign\n\n// 后续支持baseline\ntype IBaseLineAlign = 'baseline-left' | 'baseline-center' | 'baseline-right'\n```\n\n----------------------------------------\n\nTITLE: Installing @leafer-draw/worker with pnpm\nDESCRIPTION: This snippet shows how to install the @leafer-draw/worker package using pnpm. It adds the package to your project's dependencies, allowing you to use it in your application.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/draw/worker/start.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @leafer-draw/worker\n```\n\n----------------------------------------\n\nTITLE: Star: Configuring Corners and Inner Radius (Pentagram)\nDESCRIPTION: This code snippet demonstrates how to configure the `corners` and `innerRadius` properties of the `Star` element to create a standard five-pointed star (pentagram).  The `corners` property is set to 5, defining the number of points, and the `innerRadius` is set to 0.382, which is a common ratio for pentagrams.  This configuration results in a classic star shape.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Star.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// 五角星\ncorners: 5\ninnerRadius: 0.382\n```\n\n----------------------------------------\n\nTITLE: Installing @leafer-game/miniapp with bun\nDESCRIPTION: Installs the @leafer-game/miniapp package using bun. This command adds the package to your project's dependencies, allowing you to use its functionalities.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/game/miniapp/start.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nbun add @leafer-game/miniapp\n```\n\n----------------------------------------\n\nTITLE: Conditional Remove with Tag - LeaferJS - TypeScript\nDESCRIPTION: Removes child elements based on a specified tag. This is similar to using `find()` and then removing the found elements. The parameters for the tag are consistent with the `find()` method.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/remove.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/basic/remove/remove-tag.ts\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue App (main.ts)\nDESCRIPTION: This snippet shows the standard way to initialize a Vue application using createApp and mount it to a DOM element with the ID 'app'. It imports the createApp function from 'vue' and the main App component.  Dependencies include Vue.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/framework/vue/index.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp } from 'vue'\nimport App from './App.vue'\n\ncreateApp(App).mount('#app')\n```\n\n----------------------------------------\n\nTITLE: Registering an Inner Editor (JavaScript)\nDESCRIPTION: This JavaScript code snippet demonstrates how to register an inner editor, likely using a `registerInnerEditor()` function analogous to the TypeScript example. It uses a globally unique tag name to associate a specific editor class. During the editor's loading process, the tag is used to determine and instantiate the correct editor implementation.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/editInner/register.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<<< @/code/plugin/editor/editInner/register/index.js\n```\n\n----------------------------------------\n\nTITLE: Including LeaferJS Find Plugin via Script Tag (minified)\nDESCRIPTION: This script tag includes the minified version of the LeaferJS find plugin. It exposes the plugin's functionalities through the global variable LeaferIN.find, making them available for use in your web application.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/find/index.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/@leafer-in/find@1.5.3/dist/find.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Install @leafer-draw/node with yarn\nDESCRIPTION: Installs the @leafer-draw/node package using yarn. This provides drawing capabilities for Node.js environments. No dependencies are required beyond a Node.js environment.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/draw/node/napi.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @leafer-draw/node\n```\n\n----------------------------------------\n\nTITLE: Defining IRangeSize interface in Typescript\nDESCRIPTION: This code snippet defines the IRangeSize interface in Typescript, which is used to specify the minimum and maximum height range for the heightRange property in Leaferjs.  It allows for setting the `min` and `max` height values.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/flow/Flow/heightRange.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IRangeSize {\n  min?: number\n  max?: number\n}\n```\n\n----------------------------------------\n\nTITLE: Path Data Initialization in Leafer.js (Typescript)\nDESCRIPTION: This code snippet demonstrates how to initialize path data using a one-dimensional array in Leafer.js. The array represents a series of path commands and their corresponding arguments. The example shows a move command (M), two line commands (L), and a close path command (Z).\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/interface/ui/IPathCommandData.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst pathData = [1, 0, 0, 2, 100, 100, 2, 0, 100, 11] // M 0 0 L 100 100 L 0 100 Z\n```\n\n----------------------------------------\n\nTITLE: Installing Text Editor Plugin with PNPM\nDESCRIPTION: This command installs the text-editor plugin from @leafer-in using pnpm. It's a prerequisite for using the TextEditor component in Leaferjs.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/text-editor/index.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @leafer-in/text-editor\n```\n\n----------------------------------------\n\nTITLE: Canvas Graphic Element Drawing Example (Leafer)\nDESCRIPTION: This code snippet shows how to draw graphic elements on a Leafer canvas. It probably uses Leafer's built-in shape and drawing primitives. The source file at the specified path contains implementation details.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Canvas.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Canvas/draw.ts [Leafer]\n```\n\n----------------------------------------\n\nTITLE: Importing Leafer Robot plugin with script tag\nDESCRIPTION: Imports the Leafer Robot plugin using a script tag. This allows access to the Robot element through the global variable LeaferIN.robot. It requires the robot.js file.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/robot/index.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/@leafer-in/robot@1.5.3/dist/robot.js\"></script>\n<script>\n  const { Robot } = LeaferIN.robot\n</script>\n```\n\n----------------------------------------\n\nTITLE: Animation Options Interface\nDESCRIPTION: Defines the interface for animation options in Leaferjs. It includes properties for easing, delay, duration, ending, reverse, swing, loop, loopDelay, speed, join, autoplay, attrs, and events. Requires the animate plugin.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/animation.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IAnimateOptions {\n  easing?: IAnimateEasing // 缓动方式，默认为 ease\n\n  delay?: number // 延迟时间，以秒为单位， 默认为 0\n  duration?: number // 动画时长，以秒为单位，默认为 0.2\n  ending?: IAnimateEnding // 动画结束时的状态，可设置from、to，默认auto\n\n  reverse?: boolean // 是否反向动画 to -> from，默认为 false\n  swing?: boolean | number // 是否摇摆循环播放，可设置次数（到达 to 的次数） from -> to，to -> from -> to ... ，默认 false\n\n  loop?: boolean | number // 是否循环播放，可设置次数，默认为 false\n  loopDelay?: number // 进入下一次循环播放的延迟时间，默认为0\n\n  speed?: number // 动画播放的倍速，值越大播放越快，默认为 1 倍速\n\n  join?: boolean //  是否加入动画前的元素状态作为 from 关键帧\n  autoplay?: boolean // 是否自动播放\n\n  attrs?: string[] // 参与动画过渡效果的元素属性列表， 默认为所有\n  event?: IAnimateEvents // 监听事件\n}\n```\n\n----------------------------------------\n\nTITLE: Removing layout.decomposeTransform() Method (TS)\nDESCRIPTION: This code snippet specifies that the `layout.decomposeTransform()` method has been removed from LeaferJS. Developers relying on this method will need to adjust their code accordingly.\nSOURCE: https://github.com/leaferjs/docs/blob/main/update/index.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n移除 layout.decomposeTransform() 方法\n```\n\n----------------------------------------\n\nTITLE: Installing LeaferJS Find Plugin with pnpm\nDESCRIPTION: This command installs the @leafer-in/find package using pnpm. It adds the plugin as a dependency to your project, enabling you to use its features for element searching in LeaferJS.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/find/index.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @leafer-in/find\n```\n\n----------------------------------------\n\nTITLE: Top Center Flow Alignment Typescript\nDESCRIPTION: Example code demonstrating how to align child elements to the top center within a Leaferjs Flow layout. This snippet likely sets `flowAlign` to `'top'`.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/flow/Flow/flowAlign.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/flow/flowAlign/top.ts\n```\n\n----------------------------------------\n\nTITLE: Importing leafer-ui via script tags (web.min)\nDESCRIPTION: This snippet demonstrates how to include leafer-ui in your HTML file using script tags. It downloads and executes the minified version of leafer-ui from a CDN.  It also shows how to access LeaferUI global object and how to use different aliases for Image, PointerEvent, and DragEvent to avoid naming conflicts with browser built-ins.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/ui/start.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/leafer-ui@1.5.3/dist/web.min.js\"></script>\n<script>\n  const { Leafer } = LeaferUI // 全局变量，包含 leafer-ui 的所有功能\n\n  // Image、PointerEvent、DragEvent 会与浏览器的全局变量冲突，请使用以下别名代替\n  const { MyImage, MyPointerEvent, MyDragEvent } = LeaferUI\n\n  // ...\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing @leafer-ui/worker using yarn\nDESCRIPTION: Installs the @leafer-ui/worker package using yarn. This offers yet another package manager option to incorporate the LeaferUI library within your project for Web Worker usage. The package is installed from the yarn registry.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/ui/worker/start.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nyarn add @leafer-ui/worker\n```\n\n----------------------------------------\n\nTITLE: Stopping Event Propagation - JavaScript\nDESCRIPTION: Demonstrates how to stop event propagation in Leafer.js using the `stop()` method within a JavaScript context. The `stop()` method prevents the event from propagating further up the DOM tree, but allows other event listeners on the same element to be executed.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/event/basic/Event.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<<< @/code/event/stop.js\n```\n\n----------------------------------------\n\nTITLE: Installing skia-canvas with bun\nDESCRIPTION: Installs the skia-canvas package using bun.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/game/node/start.md#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nbun add skia-canvas\n```\n\n----------------------------------------\n\nTITLE: Enabling Decorators in tsconfig.json (TypeScript)\nDESCRIPTION: This code snippet shows how to enable the `experimentalDecorators` option in the `tsconfig.json` file. This is a prerequisite for using decorators in TypeScript, which are often used when defining and registering inner editors in Leaferjs. The compiler option is crucial for the correct compilation and execution of code that utilizes decorators.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/editInner/register.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"experimentalDecorators\": true // 开启装饰器功能\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IUnitPointData Interface Typescript\nDESCRIPTION: This code defines the `IUnitPointData` interface in Typescript, used to specify gradient control points with either 'percent' or 'px' units. It includes `x` and `y` coordinates as numbers. The interface allows precise control over gradient start and end positions in Leafer.js. No external dependencies required.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/paint/linear.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IUnitPointData {\n  type?: 'percent' | 'px'\n  x: number\n  y: number\n}\n\nfrom: {\n  type: 'percent',\n  x: 0.5, // 50% width  百分比坐标点\n  y: 0, // 0% height\n}\n\nfrom: {\n  x: 50, // 50px 像素值坐标点\n  y: 0, //  0px\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @napi-rs/canvas with npm\nDESCRIPTION: This command installs the @napi-rs/canvas package using npm. @napi-rs/canvas is required to replace Canvas functionality in a server-side environment.  It is based on skia and is a high-performance, zero-system-dependency library.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/editor/node/napi.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @napi-rs/canvas\n```\n\n----------------------------------------\n\nTITLE: Vertical Align Type\nDESCRIPTION: Defines the TypeScript type for vertical alignment options within a text element, including top, middle, and bottom.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Text.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntype IVerticalAlign =\n  | 'top' // 顶部对齐\n  | 'middle' // 垂直居中对齐\n  | 'bottom' // 底部对齐\n```\n\n----------------------------------------\n\nTITLE: Finding Element by Function in LeaferJS (TypeScript)\nDESCRIPTION: Demonstrates how to use the `findOne` method to find a UI element using a custom function in LeaferJS. It requires the find element plugin to be installed. The `findOne` method is called with the function as the condition.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/findOne.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n<<< @/code/property/findOne/method.ts\n```\n\n----------------------------------------\n\nTITLE: Defining ShadowEffect Interface in LeaferJS\nDESCRIPTION: This code snippet defines the `ShadowEffect` interface in TypeScript, specifying properties such as x and y offsets, blur radius, spread, color, blend mode, visibility, and a box property for creating a box-shadow effect. The `box` property mimics the CSS3 boxShadow effect, displaying the shadow only outside the shape.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/interface/ui/Effect.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ShadowEffect {\n  x: number\n  y: number\n  blur: number\n  spread?: number\n  color: Color\n  blendMode?: BlendMode\n  visible?: boolean\n  box?: boolean // 和 CSS3 中的 boxShadow 效果一致, 只显示图形外部的阴影\n}\n```\n\n----------------------------------------\n\nTITLE: Drawing a Path with Pen and Color\nDESCRIPTION: This code snippet demonstrates how to draw a path with specific color using the Pen element in Leafer.js. It illustrates how to use the Pen element for drawing colored paths.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/basic/display.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Pen/color.ts\n```\n\n----------------------------------------\n\nTITLE: ShadowString SCSS Example\nDESCRIPTION: Explains how to use ShadowString in SCSS to define shadow effects. It covers specifying the x and y offset, blur radius, spread radius, color, blend mode, and visibility.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/interface/ui/String.md#_snippet_7\n\nLANGUAGE: scss\nCODE:\n```\n// 参数模版\nx y blur spread? color blendMode? visible?\n\n// 应用示例\nshadow: 2 4 10 rgba(0,0,0,0.2); // x y blur color\nshadow: 2 4 10 20 rgba(0,0,0,0.2) darken; //  x y blur spread color blendMode\n```\n\n----------------------------------------\n\nTITLE: Installing @leafer-draw/miniapp with pnpm\nDESCRIPTION: These commands demonstrate how to install the @leafer-draw/miniapp package using various package managers (npm, pnpm, yarn, and bun).  Choose the command that corresponds to your preferred package manager.  This installs the necessary dependencies for using the library in your project.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/draw/miniapp/start.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @leafer-draw/miniapp\n```\n\n----------------------------------------\n\nTITLE: Installing @napi-rs/canvas with npm\nDESCRIPTION: This command installs the @napi-rs/canvas package using npm.  @napi-rs/canvas provides canvas functionality in a Node.js environment using a Rust-based Skia implementation for performance.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/ui/node/napi.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @napi-rs/canvas\n```\n\n----------------------------------------\n\nTITLE: StringColor Type Alias - Typescript\nDESCRIPTION: Defines `StringColor` as a string type alias, enabling the use of various CSS color string formats, such as hexadecimal (#FF0000), rgb(255, 0, 0), hsl, and hsb color representations.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/interface/ui/Color.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype StringColor = string\n// 支持 css 的各类颜色字符串， 如: #FF00000 rgb(255, 0, 0) hsl, hsb\n```\n\n----------------------------------------\n\nTITLE: Waiting for Parent Element in LeaferJS (Typescript)\nDESCRIPTION: This code snippet demonstrates how to use the `waitParent` method to execute a callback function when an element has a parent. The callback will be executed immediately if the parent already exists, otherwise, it will wait for the parent to be available before execution. An optional 'bind' parameter allows setting the 'this' context of the callback function.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/parent.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Leafer, Group, UI } from '@leafer/leafer'\n\nconst leafer = new Leafer()\nleafer.run()\n\nconst group = new Group()\n\nconst ui = new UI()\n\ngroup.add(ui)\n\nui.waitParent(() => {\n    console.log('UI element has a parent now!')\n})\n\nleafer.add(group)\n```\n\n----------------------------------------\n\nTITLE: Dragon Drawing Material\nDESCRIPTION: This snippet provides the resources or materials needed to draw the dragon, including the head (without eyes), body, claws, and tail. These parts are then placed onto the predefined flight path. It likely defines shapes, colors, and possibly functions to assemble the dragon.\nSOURCE: https://github.com/leaferjs/docs/blob/main/contest/guide.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/contest/dragon/dragon.ts\n```\n\n----------------------------------------\n\nTITLE: Installing @leafer-game/node with pnpm\nDESCRIPTION: Installs the @leafer-game/node package using pnpm, a performant alternative to npm.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/game/node/start.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @leafer-game/node\n```\n\n----------------------------------------\n\nTITLE: IFlowAxisAlign Interface Definition in Typescript\nDESCRIPTION: Defines the `IFlowAxisAlign` interface, which allows for further customization of alignment along the x and y axes within a row or column. The `content` property specifies the overall alignment, while `x` and `y` define the alignment along the respective axes, defaulting to 'from' if not set.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/flow/Flow/flowAlign.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IFlowAxisAlign {\n  content?: IFlowAlign\n  x?: IAxisAlign // 行内 x 轴对齐，不设置时为 from\n  y?: IAxisAlign // 行内 y 轴对齐，不设置时为 from\n}\n```\n\n----------------------------------------\n\nTITLE: Mask UI Example\nDESCRIPTION: This snippet provides an example of how to use a mask to create complex clipping effects in Leaferjs. It shows how to assign an element as a mask and the resulting visual effect.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/basic/style.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/mask/ui.ts\n```\n\n----------------------------------------\n\nTITLE: Leafer App Editor Frame - origin.ts\nDESCRIPTION: This code snippet illustrates the underlying implementation principles of the Leafer App editor frame. It provides insight into the fundamental mechanisms and architectural choices that drive the App structure and its interaction with Leafer instances. It helps to grasp the internal workings and design considerations behind the layered rendering approach.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/advanced/app.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/editor/frame/origin.ts [实现原理]\n```\n\n----------------------------------------\n\nTITLE: Implementing \"Bloom\" Game Logic with LeaferJS\nDESCRIPTION: This snippet contains the core logic for the \"Bloom\" game using LeaferJS.  It likely involves creating and manipulating LeaferJS elements, handling user interactions, and managing the game's state. Specific dependencies and details would be found within the referenced code file.\nSOURCE: https://github.com/leaferjs/docs/blob/main/contest/bloom/guide.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/game/bloom.ts\n```\n\n----------------------------------------\n\nTITLE: Remove Multiple Events (off) - TypeScript (more)\nDESCRIPTION: This snippet shows how to remove multiple event listeners using the 'off' method with an array of event types in TypeScript (using the more variable). This snippet utilizes an array to specify event types. Requires the Leaferjs library. Input: array of event types to remove. Output: no direct output; the listeners for provided event types are removed.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/off.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/event/off/more.ts\n```\n\n----------------------------------------\n\nTITLE: Installing skia-canvas with bun\nDESCRIPTION: Installs the skia-canvas package using bun. skia-canvas provides Canvas functionality within the Node.js environment. This package is required to be installed seperately.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/draw/node/start.md#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nbun add skia-canvas\n```\n\n----------------------------------------\n\nTITLE: Leafer.zoom() Usage Examples\nDESCRIPTION: These TypeScript snippets demonstrate how to use the `leafer.zoom()` method to fit the content to the view, with and without animation.  The first example fits the content, while the second example adds a transition animation. The third example adds a 2 second transition animation\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/view/index.md#_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\n// 缩放到合适大小，并居中显示\nleafer.zoom('fit')\n\n// 动画过渡\nleafer.zoom('fit', null, null, true)\n\nleafer.zoom('fit', null, null, 2) // 过渡 2 秒\n```\n\n----------------------------------------\n\nTITLE: Excluding Debug Messages - Leaferjs (Typescript)\nDESCRIPTION: This code snippet demonstrates how to exclude specific types of debug messages from being printed to the console using the `Debug.exclude` property. You can define which message types (e.g., 'Life') should be excluded from the output. The expected input is a string or an array of strings representing the message types to exclude.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/debug/basic.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nDebug.exclude = 'Life' // or ['RunTime', 'Life']\n```\n\n----------------------------------------\n\nTITLE: Importing @leafer-draw/worker via importScripts (unminified)\nDESCRIPTION: This snippet demonstrates how to import the unminified version of @leafer-draw/worker in a Web Worker environment using importScripts. It fetches the worker.js file from unpkg and makes its functionality accessible through the global LeaferUI variable.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/draw/worker/start.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimportScripts('https://unpkg.com/@leafer-draw/worker@1.5.3/dist/worker.js')\n```\n\n----------------------------------------\n\nTITLE: Property Event Example - TypeScript\nDESCRIPTION: Illustrates how to listen for and handle PropertyEvent.CHANGE events in Leafer.js using TypeScript. This example shows how to access event properties like target, attrName, oldValue, and newValue. It requires importing necessary Leafer.js interfaces and classes.  The event is dispatched after the leafer.ready event.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/event/basic/Property.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/event/leafer/property.ts\n```\n\n----------------------------------------\n\nTITLE: Installing Leafer.js View Plugin with yarn\nDESCRIPTION: This command installs the `@leafer-in/view` plugin using yarn. It allows for view control functionalities within Leafer.js applications. This is one of the package manager installation options.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/view/index.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @leafer-in/view\n```\n\n----------------------------------------\n\nTITLE: Installing @leafer-game/worker with pnpm\nDESCRIPTION: This command installs the @leafer-game/worker package using pnpm.  It adds the package as a dependency to your project. This allows you to use its game development functionalities within a Web Worker environment.  No specific input or output is generated by this command besides the installation process.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/game/worker/start.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @leafer-game/worker\n```\n\n----------------------------------------\n\nTITLE: Installing skia-canvas with pnpm\nDESCRIPTION: Installs the skia-canvas package using pnpm. skia-canvas provides Canvas functionality within the Node.js environment. This package is required to be installed seperately.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/draw/node/start.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\npnpm add skia-canvas\n```\n\n----------------------------------------\n\nTITLE: Importing Editor and Resize Plugins via Script Tags (editor.min)\nDESCRIPTION: This snippet shows how to import the @leafer-in/editor and @leafer-in/resize plugins using script tags. This method allows you to use the plugins without a package manager, by directly including the minified JavaScript files in your HTML.  It accesses the Editor class via the global LeaferIN.editor object.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/index.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/@leafer-in/editor@1.5.3/dist/editor.min.js\"></script>\n<script src=\"https://unpkg.com/@leafer-in/resize@1.5.3/dist/resize.min.js\"></script>\n<script>\n  const { Editor } = LeaferIN.editor\n</script>\n```\n\n----------------------------------------\n\nTITLE: IAxisAlign Type Definition in Typescript\nDESCRIPTION: Defines the `IAxisAlign` type, representing the alignment options for the x and y axes within a row or column. Options include 'from' (align to the start of the axis), 'center', and 'to' (align to the end of the axis).\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/flow/Flow/flowAlign.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// from 表示对齐行内轴起点， to 表示对齐行内轴终点\ntype IAxisAlign = 'from' | 'center' | 'to'\n```\n\n----------------------------------------\n\nTITLE: Immediately Stopping Event Propagation - Javascript\nDESCRIPTION: Demonstrates how to immediately stop event propagation to parent and sibling nodes using the `stopNow()` method in Leaferjs with Javascript.  Requires Leaferjs library to be installed.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/event/flow.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n<<< @/code/event/stopNow.js\n```\n\n----------------------------------------\n\nTITLE: Install @leafer-editor/miniapp with yarn\nDESCRIPTION: Installs the @leafer-editor/miniapp package using yarn. This command adds the package and its dependencies to your project using yarn, allowing you to use its functionalities in your mini-program.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/editor/miniapp/start.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @leafer-editor/miniapp\n```\n\n----------------------------------------\n\nTITLE: Leafer App Editor Frame Example (origin.ts)\nDESCRIPTION: This code snippet reveals the underlying implementation principles of an editor frame using Leafer's App component.  It provides insights into the fundamental mechanisms and algorithms employed in the editor's architecture. It is part of a larger example illustrating the usage of the graphics editor plugin.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/App.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/editor/frame/origin.ts [实现原理]\n```\n\n----------------------------------------\n\nTITLE: Installing @leafer-game/worker with yarn\nDESCRIPTION: This command installs the @leafer-game/worker package using yarn.  It adds the package as a dependency to your project, enabling its functionalities for game development in a Web Worker environment.  No input or output besides the installation process.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/game/worker/start.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @leafer-game/worker\n```\n\n----------------------------------------\n\nTITLE: AngularGradient From Alignment Definition Typescript\nDESCRIPTION: Defines the `IAlign` type, which represents alignment options like 'top-left', 'top', 'center', etc.  It's used to specify the starting and ending points of the gradient relative to the element. It also defines the `IUnitPointData` interface for specifying coordinates with optional 'percent' or 'px' types.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/paint/angular.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// 方位\ntype IAlign =\n  | 'top-left'\n  | 'top'\n  | 'top-right'\n  | 'right'\n  | 'bottom-right'\n  | 'bottom'\n  | 'bottom-left'\n  | 'left'\n  | 'center'\n\nfrom: 'center'\n\n// 坐标点\ninterface IUnitPointData {\n  type?: 'percent' | 'px'\n  x: number\n  y: number\n}\n\nfrom: {\n  type: 'percent',\n  x: 0.5, // 50% width  百分比坐标点\n  y: 0.5, // 50% height\n}\n\nfrom: {\n  x: 50, // 50px 像素值坐标点\n  y: 50, // 50px\n}\n```\n\n----------------------------------------\n\nTITLE: Naming Non-Data Attributes in Leafer.js (TypeScript)\nDESCRIPTION: This TypeScript code snippet illustrates the naming convention for non-data attributes (variables) within a Leafer.js custom element's data processing class. It emphasizes that such variables must be prefixed with two underscores (`__`) to avoid conflicts with automatically generated properties. This ensures proper functionality and avoids unexpected behavior.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/custom/base/attr.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// 其他变量命名\nexport class CustomData extends RectData {\n  __isAutoSize: number // 非数据属性，用来辅助业务逻辑\n}\n```\n\n----------------------------------------\n\nTITLE: Get Element Path\nDESCRIPTION: This code snippet demonstrates how to obtain the numerical path of an element in Leafer.js using the `getPath` method. The `getPath` method is called on a UI element, and the returned `IPathCommandData` contains the path information. The snippet likely resides within a test or example context to showcase the method's functionality.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/getPath.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/getPath/get.ts\n```\n\n----------------------------------------\n\nTITLE: Using positionType Decorator in Leafer UI (TypeScript)\nDESCRIPTION: This code snippet demonstrates the usage of the `@positionType` decorator, which defines a property as a positioning type. This decorator is used for properties like `x` and `y` which determine the element's position. It affects layout and rendering.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/custom/attr.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n  @positionType(0)\n  public x: number\n```\n\n----------------------------------------\n\nTITLE: Modify Text Default Fill Color - changeAttr.ts\nDESCRIPTION: This code snippet demonstrates how to modify the default fill color of text elements to red using the `changeAttr` method. It shows the basic usage of the method to change a property's default value globally for a specific element type. It assumes the existence of a `Text` element and the LeaferJS library.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/custom/changeAttr.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// 修改文本默认填充色为红色\nText.changeAttr('fill', 'red');\n```\n\n----------------------------------------\n\nTITLE: Accessing Middle Data - TypeScript\nDESCRIPTION: Demonstrates how to access the intermediate data representation, such as a percentage value, before it's converted into a computed value. Note: currently is reserved and might not be fully implemented.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/data.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst box = new Box({ width: 200 })\nconst rect = new Rect({ width: '50%' }) // 仅演示，目前是预留了中间数据层，还未使用\n\nbox.add(rect)\n\nrect.__.__getMiddle('width') // { type: 'percent', value: 0.5 }， 返回中间数据\n```\n\n----------------------------------------\n\nTITLE: IPathCommandData Example\nDESCRIPTION: This code snippet illustrates how to define a path using a numerical array format optimized for Canvas drawing. Each number in the array represents a drawing command or its associated parameters. Requires [PathCreator](/reference/path/PathCreator.md).\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/interface/ui/PathData.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = [1, 0, 0, 2, 100, 100, 2, 0, 100, 11] // M 0 0 L 100 100 L 0 100 Z\n```\n\n----------------------------------------\n\nTITLE: Editor Before Skew Hook Example (TypeScript)\nDESCRIPTION: Illustrates the use of the `beforeSkew` hook in the Leaferjs editor configuration.  This hook allows interception and modification of element skewing events. It takes a `data` object containing `target`, `origin`, `skewX`, and `skewY` values. Returning `false` will cancel the skew operation, and returning a `{ skewX, skewY }` object will modify the skew values.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/config/event.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nbeforeSkew(data) {\n    const { target, origin, skewX, skewY } = data\n    return true // return false | { skewX, skewY }\n}\n```\n\n----------------------------------------\n\nTITLE: Standard Element Removal in Leafer.js (TypeScript)\nDESCRIPTION: Demonstrates how to remove an element from its parent using the standard remove() method in Leafer.js. Assumes a Leafer.js application and a display object (e.g., a Shape) have been created. The element is removed from the display list, and its resources are potentially released, depending on the implementation.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/basic/remove.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/basic/remove/remove.ts\n```\n\n----------------------------------------\n\nTITLE: Importing @leafer-game/worker via importScripts (unminified)\nDESCRIPTION: This code imports the unminified version of the @leafer-game/worker library into a Web Worker environment using `importScripts`. It makes the library's functionality accessible through the global `LeaferUI` variable. The script is fetched from unpkg CDN. Requires network access to unpkg.com.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/game/worker/start.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimportScripts('https://unpkg.com/@leafer-game/worker@1.5.3/dist/worker.js')\n```\n\n----------------------------------------\n\nTITLE: Installing @napi-rs/canvas with yarn\nDESCRIPTION: This command installs the @napi-rs/canvas package using yarn. @napi-rs/canvas is required to replace Canvas functionality in a server-side environment.  It is based on skia and is a high-performance, zero-system-dependency library.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/editor/node/napi.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @napi-rs/canvas\n```\n\n----------------------------------------\n\nTITLE: Installing skia-canvas\nDESCRIPTION: These commands install the skia-canvas package using different package managers: npm, pnpm, yarn, and bun. skia-canvas provides Canvas functionality in a server environment using skia. Installation may take a while.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/ui/node/start.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm install skia-canvas\n```\n\n----------------------------------------\n\nTITLE: CDN Version Download URLs\nDESCRIPTION: These URLs provide direct access to the CDN-hosted versions of the @leafer-ui/miniapp library.  You can download these files and include them in your project, but using CDN versions limits plugin usage.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/ui/miniapp/start.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nhttps://unpkg.com/@leafer-ui/miniapp@1.5.3/dist/miniapp.module.js\n\nhttps://unpkg.com/@leafer-ui/miniapp@1.5.3/dist/miniapp.module.min.js\n```\n\n----------------------------------------\n\nTITLE: Installing @leafer-draw/node with pnpm\nDESCRIPTION: Installs the @leafer-draw/node package using pnpm. This allows you to use the drawing functionalities in a Node.js environment. It requires pnpm to be installed.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/draw/node/start.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @leafer-draw/node\n```\n\n----------------------------------------\n\nTITLE: Running a Node.js script with node\nDESCRIPTION: This command executes a JavaScript file using the Node.js runtime. `index.js` is the script to be executed.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/ui/node/napi.md#_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nnode index.js\n```\n\n----------------------------------------\n\nTITLE: Eraser UI Example\nDESCRIPTION: This snippet demonstrates how to use the eraser functionality in Leaferjs to create complex erasing effects. It shows how to designate an element as an eraser, removing parts of underlying elements.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/basic/style.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/eraser/ui.ts\n```\n\n----------------------------------------\n\nTITLE: BlendMode SourceOver Example Typescript\nDESCRIPTION: Example code demonstrating the 'source-over' blend mode. Draws the new shape on top of the existing canvas content. The code is assumed to be in a file named source-over.ts.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/blendMode.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/blendMode/source-over.ts\n```\n\n----------------------------------------\n\nTITLE: Editor Before Scale Hook Example (TypeScript)\nDESCRIPTION: Demonstrates the use of the `beforeScale` hook in the Leaferjs editor.  This hook is used to intercept and modify element scaling operations.  It receives a `data` object with `target`, `origin`, `scaleX`, and `scaleY` values, allowing modification of the scaling before it's applied. Returns `false` to prevent the scale or a new `{ scaleX, scaleY }` object to modify the scale.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/config/event.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nbeforeScale(data) {\n    const { target, origin, scaleX, scaleY } = data\n    return true // return false | { scaleX, scaleY }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Stroke Visibility for Hit Testing in LeaferJS (TypeScript)\nDESCRIPTION: This code snippet, located in `@/code/property/hit/stroke-visible.ts`, demonstrates how to configure stroke visibility for hit testing in LeaferJS. It likely showcases how to set and use the `hitStroke` property to control whether the stroke of a UI element is interactive and responds to user interactions.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/hitStroke.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/hit/stroke-visible.ts\n```\n\n----------------------------------------\n\nTITLE: Canvas configuration for Leafer instance (index.wxml)\nDESCRIPTION: Configures a canvas element for the Leafer instance in the WXML file. The canvas element is bound to touch events that trigger the 'receiveEvent' method in the page instance. This allows the Leafer instance to receive and handle touch interactions.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/editor/miniapp/start.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<canvas\n    id=\"leafer\"\n    type=\"2d\"\n    catchtouchstart=\"receiveEvent\"\n    catchtouchmove=\"receiveEvent\"\n    catchtouchend=\"receiveEvent\"\n    catchtouchcancel=\"receiveEvent\"\n></canvas>\n```\n\n----------------------------------------\n\nTITLE: FlowItemBox Layout with Box Box Type (Typescript)\nDESCRIPTION: This code snippet demonstrates how the FlowItemBox component lays out its child elements using the 'box' box type. This means the layout is based on the content box of the child elements, excluding any borders or padding.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/flow/Flow/itemBox.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n @/code/plugin/flow/itemBox/box.ts\n```\n\n----------------------------------------\n\nTITLE: Installing @napi-rs/canvas via yarn\nDESCRIPTION: This command installs the @napi-rs/canvas package using yarn. It provides Canvas functionality in a Node.js environment, based on Skia and Rust for performance.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/game/node/napi.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @napi-rs/canvas\n```\n\n----------------------------------------\n\nTITLE: ITextEditorConfig Interface\nDESCRIPTION: Defines the configuration options for the TextEditor. Currently, it includes a boolean flag `selectAll` to control whether the text is automatically selected when the editor opens.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/text-editor/index.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ITextEditorConfig {\n  selectAll: boolean // 是否自动全选文本，默认为true\n}\n```\n\n----------------------------------------\n\nTITLE: Installing leafer-ui via bun\nDESCRIPTION: This command installs the leafer-ui package using bun. Bun is a new JavaScript runtime and package manager focused on speed and simplicity.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/ui/start.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nbun add leafer-ui\n```\n\n----------------------------------------\n\nTITLE: Importing Case Component in Vue\nDESCRIPTION: Imports the `Case` component in Vue. This component is used to display interactive examples and demonstrations.  It is used within the `script setup` block of a Vue component.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Canvas.md#_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport Case from '/component/Case.vue'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing @leafer-draw/worker via importScripts (minified)\nDESCRIPTION: This snippet demonstrates how to import the minified version of @leafer-draw/worker in a Web Worker environment using importScripts. It fetches the worker.min.js file from unpkg and makes its functionality accessible through the global LeaferUI variable.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/draw/worker/start.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimportScripts('https://unpkg.com/@leafer-draw/worker@1.5.3/dist/worker.min.js')\n```\n\n----------------------------------------\n\nTITLE: Using the Plugin in a Web Environment (HTML)\nDESCRIPTION: This HTML code snippet demonstrates how to include and use a LeaferJS plugin directly in an HTML file using `<script>` tags. It imports `LeaferUI` and `LeaferX.selector`, then initializes the `Selector` plugin. It relies on the LeaferUI and the specific plugin being available via CDN.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/dev.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/leafer-ui\"></script>\n<script src=\"https://unpkg.com/leafer-x-selector\"></script>\n<script>\n  const { Leafer, Rect } = LeaferUI\n  const { Selector, SelectEvent } = LeaferX.selector\n\n  // 具体逻辑\n  const selector = new Selector()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring page navigation and orientation (JSON)\nDESCRIPTION: Configures the page's navigation style and orientation in JSON format.  navigationStyle is set to \"custom\", indicating a custom navigation bar, and pageOrientation is set to \"auto\", allowing the page to automatically adjust its orientation based on the device's orientation.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/game/miniapp/start.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"navigationStyle\": \"custom\",\n  \"pageOrientation\": \"auto\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing LeaferJS State Plugin with Yarn\nDESCRIPTION: This snippet demonstrates how to install the LeaferJS state plugin using yarn. The plugin allows you to easily add interactive states to your LeaferJS elements. Make sure you have yarn installed and configured in your project.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/state/index.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @leafer-in/state\n```\n\n----------------------------------------\n\nTITLE: Installing leafer-editor with pnpm\nDESCRIPTION: This snippet shows how to install the leafer-editor package using pnpm. It's a simple command-line instruction.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/editor/start.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add leafer-editor\n```\n\n----------------------------------------\n\nTITLE: Hiding Element without Space (LeaferJS)\nDESCRIPTION: This code snippet demonstrates how to hide an element in LeaferJS and also remove it from the layout by setting the 'visible' property to '0'.  This is similar to setting `display: none` in CSS.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/visible.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/visible/none.ts\n```\n\n----------------------------------------\n\nTITLE: JSON Configuration for Multi-Canvas Leafer App\nDESCRIPTION: This JSON snippet configures the navigation style and page orientation for the Mini Program page hosting a Leafer app. Setting `navigationStyle` to `custom` allows for a custom navigation bar, and `pageOrientation` to `auto` allows the page to rotate automatically based on device orientation.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/ui/miniapp/start.md#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"navigationStyle\": \"custom\",\n  \"pageOrientation\": \"auto\"\n}\n```\n\n----------------------------------------\n\nTITLE: Converting to Local Coordinates (Leaferjs)\nDESCRIPTION: This code snippet demonstrates how to convert coordinates to the local coordinate system within Leaferjs. It uses the `worldToLocal` method, which is available on UI elements, to perform the transformation.  The example showcases a basic conversion scenario.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/point/high.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/basic/coordinate/to.ts\n```\n\n----------------------------------------\n\nTITLE: Installing @leafer-ui/node with npm\nDESCRIPTION: This command installs the @leafer-ui/node package using npm. This allows the leafer-ui library to be used within a Node.js environment.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/ui/node/napi.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @leafer-ui/node\n```\n\n----------------------------------------\n\nTITLE: Installing skia-canvas with yarn\nDESCRIPTION: Installs the skia-canvas package using yarn.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/game/node/start.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nyarn add skia-canvas\n```\n\n----------------------------------------\n\nTITLE: Install @leafer-editor/node with yarn\nDESCRIPTION: Installs the @leafer-editor/node package using yarn, another popular package manager for JavaScript projects.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/editor/node/start.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @leafer-editor/node\n```\n\n----------------------------------------\n\nTITLE: IRotationPointData Interface Definition - Typescript\nDESCRIPTION: Defines the structure of the object returned by the `getMotionPoint` method, containing x and y coordinates, and a rotation value. This interface describes the data format for the coordinate point on the motion path, including its orientation.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/getMotionPoint.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IRotationPointData {\n  x: number\n  y: number\n  rotation: number\n}\n```\n\n----------------------------------------\n\nTITLE: Leaf Find Function Update\nDESCRIPTION: This code snippet shows the change in the expected return value of the function passed to the `leaf.find` method. The function should now return a number instead of a boolean value.\nSOURCE: https://github.com/leaferjs/docs/blob/main/update/index.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nleaf.find((child) => (child.fill ? 1 : 0)) //  传入的函数由之前返回布尔值变为数字。\n```\n\n----------------------------------------\n\nTITLE: Auto Panning on Drag to Border (App Config) - Typescript\nDESCRIPTION: Configures the LeaferJS app to automatically pan the view when an element is dragged to the edge of the screen. The `dragOut` property is set to trigger this behavior. See the paired Leafer configuration for the exact implementation and dependencies.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/config/app/move.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/app/config/app/autoMove.ts [App]\n```\n\n----------------------------------------\n\nTITLE: Leafer.js Image Export Example in TypeScript\nDESCRIPTION: This TypeScript code demonstrates how to create a Leafer instance, add a rectangle to it, and export the content as an image file in a WeChat Mini Program. It uses the `@leafer-draw/miniapp` package.  The code initializes a Leafer canvas, creates a rectangle, adds it to the canvas, and exports it as 'album.png', automatically saving to the user's photo album.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/draw/miniapp/start.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Leafer, Rect } from '@leafer-draw/miniapp'\n\nPage({\n  onReady() {\n    // 自动创建一个 350*800 的离屏画布\n    const leafer = new Leafer({ width: 350, height: 800 })\n\n    const rect = new Rect({\n      x: 100,\n      y: 100,\n      width: 100,\n      height: 100,\n      fill: '#32cd79',\n    })\n\n    leafer.add(rect)\n\n    // 自动保存到相册\n    leafer.export('album.png', { screenshot: true }).then(() => {\n      // 提示保存到相册成功逻辑\n    })\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Simulating Drag Event in Leafer.js (TypeScript)\nDESCRIPTION: Simulates a drag event. Requires the implementation of `pointerDown` and `pointerMove` events in sequence to simulate the drag interaction. The interaction instance will then dispatch the appropriate drag event.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/event/simulation.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/interaction/drag.ts\n```\n\n----------------------------------------\n\nTITLE: Install @leafer-editor/node with npm\nDESCRIPTION: Installs the @leafer-editor/node package using npm. This package provides tools for online graphic editing in a Node.js environment.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/editor/node/start.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @leafer-editor/node\n```\n\n----------------------------------------\n\nTITLE: Importing @leafer-ui/worker via worker.js\nDESCRIPTION: Imports the full version of the @leafer-ui/worker library into a Web Worker scope using `importScripts`. This makes the LeaferUI functionality accessible through the global `LeaferUI` variable. The file is fetched from unpkg.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/ui/worker/start.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimportScripts('https://unpkg.com/@leafer-ui/worker@1.5.3/dist/worker.js')\n```\n\n----------------------------------------\n\nTITLE: Installing @leafer-ui/node\nDESCRIPTION: These commands install the @leafer-ui/node package using different package managers: npm, pnpm, yarn, and bun.  @leafer-ui/node enables server-side rendering capabilities.  Choose the command corresponding to your preferred package manager.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/ui/node/start.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nbun add @leafer-ui/node\n```\n\n----------------------------------------\n\nTITLE: Install skia-canvas with pnpm\nDESCRIPTION: Installs the skia-canvas package using pnpm. skia-canvas provides Canvas functionality in server-side environments, based on the Skia graphics library.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/editor/node/start.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\npnpm add skia-canvas\n```\n\n----------------------------------------\n\nTITLE: Animate Easing with Delay (Animate)\nDESCRIPTION: Demonstrates using the delay property with the 'animate' function in Leaferjs. This snippet shows how to apply a delay to an animation, allowing for controlled start times based on a specified duration.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/animate/options/delay.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/animate/options/delay/animate/ease.ts [animate]\n```\n\n----------------------------------------\n\nTITLE: Flow Layout along Y axis reversed\nDESCRIPTION: This code snippet, located in '@/code/plugin/flow/flow/y-reverse.ts', demonstrates how to use the reversed flow layout with the y-axis in LeaferJS. It shows the configuration required to automatically arrange elements vertically in reverse order.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/flow/Flow/flow.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/flow/flow/y-reverse.ts\n```\n\n----------------------------------------\n\nTITLE: Leafer App Editor Frame - simple.ts\nDESCRIPTION: This code snippet represents a simplified version of the Leafer App editor frame implementation. It probably focuses on the essential elements of the App structure and layer management without the full complexity of the complete editor. It helps in understanding the core concepts without being overwhelmed by editor-specific functionalities.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/advanced/app.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/editor/frame/simple.ts [简化]\n```\n\n----------------------------------------\n\nTITLE: Color Type Definition - Typescript\nDESCRIPTION: Defines the `Color` type as a union of `StringColor`, `RGB`, and `RGBA`. This allows for representing colors using strings, RGB objects, or RGBA objects within the Leafer framework.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/interface/ui/Color.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Color = StringColor | RGB | RGBA\n```\n\n----------------------------------------\n\nTITLE: Automatic Width (leafer-in/flow/autoWidth/width.ts)\nDESCRIPTION: Imports leafer and shows elements using autoWidth, distributing remaining width amongst specified children.  Demonstrates how to make elements fill available horizontal space proportionally.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/flow/index.md#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\n<<< @/code/plugin/flow/autoWidth/width.ts\n```\n\n----------------------------------------\n\nTITLE: Install @napi-rs/canvas with pnpm\nDESCRIPTION: Installs the @napi-rs/canvas package using pnpm. This package provides a Canvas implementation for Node.js environments using Rust and Skia. No dependencies are required beyond a Node.js environment.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/draw/node/napi.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @napi-rs/canvas\n```\n\n----------------------------------------\n\nTITLE: Unit Data Interface\nDESCRIPTION: Defines the TypeScript interface for representing unit data, which includes a type ('percent' or 'px') and a value (number), used for properties like letterSpacing and lineHeight.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Text.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IUnitData {\n  type: 'percent' ｜ 'px'\n  value: number\n}\n\ntext.letterSpacing = {\n  type: 'percent',\n  value: 0.5, // 50%\n}\n```\n\n----------------------------------------\n\nTITLE: Installing leafer-ui via npm\nDESCRIPTION: This command installs the leafer-ui package using npm. It's a straightforward way to add leafer-ui to your project, making it accessible for import and use within your JavaScript or TypeScript files.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/ui/start.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install leafer-ui\n```\n\n----------------------------------------\n\nTITLE: Pointer Event Naming Convention\nDESCRIPTION: This code snippet demonstrates the event naming convention used in Leaferjs, with a focus on pointer events. It shows how event names are constructed using the event type and event name, separated by a period, to enhance readability. There are some exceptions to the pointer event naming (tap, double_tap, long_press, long_tap) where 'pointer.' is ommitted.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/event/name.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nPointerEvent.DOWN = 'pointer.down' // 事件类型.事件名称， 提高可读性\n\nZoomEvent.ZOOM = 'zoom'  // 事件类型与事件名称一样，可以省略\nZoomEvent.START = 'zoom.start'\nZoomEvent.END = 'zoom.end'\n\n// 例外情况：\n// 以下 PointerEvent 事件不用加 pointer 前缀\n'tap'｜'double_tap'｜'long_press'｜'long_tap'\n```\n\n----------------------------------------\n\nTITLE: Defining IFlowType for Flow Layout\nDESCRIPTION: This code snippet defines the IFlowType type in TypeScript. It specifies the possible values for the 'flow' property, which determines the direction of the automatic layout. The allowed values are 'x', 'y', 'x-reverse', and 'y-reverse', representing horizontal, vertical, and reversed horizontal/vertical layouts respectively.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/flow/Flow/flow.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype IFlowType = 'x' | 'y' | 'x-reverse' | 'y-reverse' // 轴方向，reverse 表示反向\n```\n\n----------------------------------------\n\nTITLE: Loading Custom Fonts with skia-canvas\nDESCRIPTION: This code snippet demonstrates how to load custom fonts using the `FontLibrary.use()` method from the `skia-canvas` package.  It shows how to load fonts with default family names and also with custom aliases.  The paths to the font files are specified as arguments.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/ui/node/start.md#_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nimport { FontLibrary } from 'skia-canvas'\n\n// with default family name\nFontLibrary.use([\n  'fonts/Oswald-Regular.ttf',\n  'fonts/Oswald-SemiBold.ttf',\n  'fonts/Oswald-Bold.ttf',\n])\n\n// with an alias\nFontLibrary.use('Grizwald', [\n  'fonts/Oswald-Regular.ttf',\n  'fonts/Oswald-SemiBold.ttf',\n  'fonts/Oswald-Bold.ttf',\n])\n```\n\n----------------------------------------\n\nTITLE: Viewport Configuration (App)\nDESCRIPTION: This is a placeholder for the actual code. The code demonstrates how to configure the viewport type for the App in Leafer.js. Viewport allows scaling and moving of the view with scroll/touchpad.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/config/app/type.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/app/config/type/app/viewport.ts [App]\n```\n\n----------------------------------------\n\nTITLE: Install @leafer-editor/node with bun\nDESCRIPTION: Installs the @leafer-editor/node package using bun, a new JavaScript runtime and package manager.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/editor/node/start.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nbun add @leafer-editor/node\n```\n\n----------------------------------------\n\nTITLE: Installing Arrow plugin with bun\nDESCRIPTION: Install the @leafer-in/arrow plugin using bun. This allows the use of arrow elements in Leaferjs.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/arrow/index.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nbun add @leafer-in/arrow\n```\n\n----------------------------------------\n\nTITLE: Drawing Line to a Target Point - App Component (TypeScript)\nDESCRIPTION: This code snippet (App part) integrates the Leafer component (drawing a line to a target point) into an application. It builds upon the Leafer component's implementation and showcases how it's embedded within the app's structure.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Line.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Line/app/lineto.ts [App]\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for Multi-Canvas Leafer App\nDESCRIPTION: This CSS snippet styles the page and canvases for the Leafer App. It positions the canvases absolutely to overlay them within the main container.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/ui/miniapp/start.md#_snippet_12\n\nLANGUAGE: css\nCODE:\n```\npage {\n  height: 100%;\n}\n#leafer {\n  width: 100%;\n  height: 100%;\n}\n#leafer-tree {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n}\n#leafer-sky {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @leafer-ui/miniapp with pnpm\nDESCRIPTION: This snippet shows how to install the @leafer-ui/miniapp package using pnpm. It ensures that the required dependencies are added to your project.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/ui/miniapp/start.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @leafer-ui/miniapp\n```\n\n----------------------------------------\n\nTITLE: Installing @leafer-game/node via pnpm\nDESCRIPTION: This command installs the @leafer-game/node package using pnpm. It's required for using leafer-game features in a Node.js environment.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/game/node/napi.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @leafer-game/node\n```\n\n----------------------------------------\n\nTITLE: Canvas setup for the graphics editor App (index.wxml)\nDESCRIPTION: Sets up the canvases for the graphics editor app's tree and sky layers in the WXML file. The canvases are positioned absolutely within the main view, enabling layering and rendering of different components.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/editor/miniapp/start.md#_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<view\n    id=\"leafer\"\n    catchtouchstart=\"receiveEvent\"\n    catchtouchmove=\"receiveEvent\"\n    catchtouchend=\"receiveEvent\"\n    catchtouchcancel=\"receiveEvent\"\n>\n<canvas id=\"leafer-tree\"  type=\"2d\"></canvas>\n<canvas id=\"leafer-sky\" type=\"2d\"></canvas>\n</view>\n```\n\n----------------------------------------\n\nTITLE: RadialGradient from Alignment Typescript\nDESCRIPTION: Defines the IAlign type, which represents possible alignment values for the from and to properties of a radial gradient. This allows specifying the starting and ending points of the gradient using predefined positions such as 'top-left', 'center', or 'bottom-right'.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/paint/radial.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype IAlign =\n  | 'top-left'\n  | 'top'\n  | 'top-right'\n  | 'right'\n  | 'bottom-right'\n  | 'bottom'\n  | 'bottom-left'\n  | 'left'\n  | 'center'\n\nfrom: 'center'\n```\n\n----------------------------------------\n\nTITLE: Forcing Attribute Update in Leafer UI (TypeScript)\nDESCRIPTION: The `__updateAttr` method forces an update to a specific attribute, triggering a change event. It emits an `AttrEvent` with the attribute's name and value, notifying the system of the change. The method checks if the UI element has a root and gets the input value of the attribute to emit in the event.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/custom/attr.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\npublic __updateAttr(attrName: string): void {\n  if (this.root) {\n    const value = this.__.__getInput(attrName)\n    this.root.emitEvent(\n      new AttrEvent(AttrEvent.CHANGE, this, attrName, value, value)\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Plugin in a Node Environment (TypeScript)\nDESCRIPTION: This TypeScript code snippet shows how to import and use a LeaferJS plugin in a Node.js environment. It imports `Leafer` and `Rect` from `@leafer-ui/node`, and `Selector` and `SelectEvent` from `leafer-x-selector`, and then initializes the `Selector` plugin. Requires importing `leafer-x-selector` after `leafer-ui`.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/dev.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Leafer, Rect } from '@leafer-ui/node'\nimport { Selector, SelectEvent } from 'leafer-x-selector' // 必需在leafer-ui之后导入\n\n// 具体逻辑\nconst selector = new Selector()\n```\n\n----------------------------------------\n\nTITLE: Installing @leafer-draw/node with npm\nDESCRIPTION: Installs the @leafer-draw/node package using npm. This allows you to use the drawing functionalities in a Node.js environment. It requires npm to be installed.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/draw/node/start.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @leafer-draw/node\n```\n\n----------------------------------------\n\nTITLE: WindingRule Type Definition\nDESCRIPTION: Defines the WindingRule type used to determine how overlapping paths are filled.  It accepts either 'nonzero' or 'evenodd'. This enum controls the fill algorithm when paths intersect, creating effects like addition, intersection, or subtraction.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Path.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype WindingRule: =  \"nonzero\" | \"evenodd\"\n```\n\n----------------------------------------\n\nTITLE: Installing @leafer-ui/node with bun\nDESCRIPTION: This command installs the @leafer-ui/node package using bun. This allows the leafer-ui library to be used within a Node.js environment.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/ui/node/napi.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nbun add @leafer-ui/node\n```\n\n----------------------------------------\n\nTITLE: RGBA Interface Definition - Typescript\nDESCRIPTION: Defines the `RGBA` interface, extending the `RGB` interface with an `a` property representing the alpha (transparency) component. The `r`, `g`, and `b` values are in the range of 0 to 255, while `a` is in the range of 0 to 1.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/interface/ui/Color.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RGBA {\n  r: number\n  g: number\n  b: number\n  a: number\n}\n```\n\n----------------------------------------\n\nTITLE: Matrix Decompose Change\nDESCRIPTION: This code snippet notes that the `decompose()` method of the `Matrix` class has been renamed to `getLayout()`. Also copy() is removed for Point / Matrix / Bounds, use set(data) directly\nSOURCE: https://github.com/leaferjs/docs/blob/main/update/index.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nMatrix // decompose() 改为 getLayout()\nBounds // setByList()改为 setList()\nPoint / Matrix / Bounds // 移除copy() ，直接set(data)\n// 移除resizeable， 改用 editSize\n```\n\n----------------------------------------\n\nTITLE: BlendMode DestinationAtop Example Typescript\nDESCRIPTION: Example code demonstrating the 'destination-atop' blend mode. Only preserves the overlapping part of the existing canvas content and the new shape. The new shape is drawn behind the existing content. The code is assumed to be in a file named destination-atop.ts.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/blendMode.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/blendMode/destination-atop.ts\n```\n\n----------------------------------------\n\nTITLE: Register Edit Tool (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to register a custom edit tool in Leaferjs using JavaScript. It likely involves using the `registerEditTool()` method and defining a unique tag for the tool.  The specifics of the code are not available in this context but inferred from the description.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/editOuter/register.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<<< @/code/plugin/editor/editOuter/register/index.js\n```\n\n----------------------------------------\n\nTITLE: Removing Group elements with tag\nDESCRIPTION: Illustrates how to remove Group elements based on specific conditions using `find()` in Leafer. The snippet highlights conditional removal functionality. It requires Leafer core library.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Group.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/basic/remove/remove-tag.ts\n```\n\n----------------------------------------\n\nTITLE: Importing LeaferJS Export Plugin via Script Tag (Minified)\nDESCRIPTION: Imports the minified version of the LeaferJS export plugin via a script tag.  This makes the export functionality available through the global LeaferIN.export variable. Requires a browser environment and access to unpkg.com.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/export/index.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/@leafer-in/export@1.5.3/dist/export.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Listening to Animation Events (Animate)\nDESCRIPTION: This snippet provides an example of listening for animation events for the animate type in Leafer.js. It contains the implementation of callbacks for events such as created, play, pause, stop, seek, update, and completed. Event handlers enable custom actions at different stages of the animation's lifecycle.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/animate/options/event.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/animate/options/event/animate/ease.ts [animate]\n```\n\n----------------------------------------\n\nTITLE: Using CDN Version of @leafer-game/miniapp\nDESCRIPTION: Provides CDN links to the @leafer-game/miniapp library. Using these links allows you to directly include the library in your project without installing it via a package manager. Note that extra plugins are unavailable when using the CDN version.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/game/miniapp/start.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n\nhttps://unpkg.com/@leafer-game/miniapp@1.5.3/dist/miniapp.module.js\n\nhttps://unpkg.com/@leafer-game/miniapp@1.5.3/dist/miniapp.module.min.js\n\n\n```\n\n----------------------------------------\n\nTITLE: Leafer App Editor Frame Example (index.ts)\nDESCRIPTION: This code snippet showcases the implementation of an editor frame using Leafer's App component. It demonstrates how to set up the application structure, potentially including layers like 'ground', 'tree', and 'sky' for rendering different elements of the editor.  It's part of a larger example illustrating the usage of the graphics editor plugin.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/App.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/editor/frame/index.ts [editor]\n```\n\n----------------------------------------\n\nTITLE: Installing LeaferJS Export Plugin with Bun\nDESCRIPTION: Installs the @leafer-in/export plugin using bun. This allows you to use the export functionality within your LeaferJS project. Requires bun to be installed and configured in your environment.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/export/index.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nbun add @leafer-in/export\n```\n\n----------------------------------------\n\nTITLE: Path Winding - Group Example (Leafer)\nDESCRIPTION: This snippet, presumably from '@/code/display/Path/group.ts', demonstrates how to use winding rules on paths to create effects. Specifically, it showcases a rounded rectangle intersecting with a circle to create a cutout effect. This snippet focuses on the Leafer specific parts.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Path.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Path/group.ts [Leafer]\n```\n\n----------------------------------------\n\nTITLE: Accessing Path Editor Configuration (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to access the path editor's configuration within the Leaferjs application. It uses the `app.editor.mergeConfig.pathEditor` path to retrieve the configuration object. This allows for customization of the path editing behavior.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/config/innerEditor.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// 内部通过此方式访问\napp.editor.mergeConfig.pathEditor\n```\n\n----------------------------------------\n\nTITLE: Install skia-canvas with npm\nDESCRIPTION: Installs the skia-canvas package using npm. skia-canvas provides Canvas functionality in server-side environments, based on the Skia graphics library. This is required to replace the canvas functionalities in the server.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/editor/node/start.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm install skia-canvas\n```\n\n----------------------------------------\n\nTITLE: Installing @leafer-ui/worker using npm\nDESCRIPTION: Installs the @leafer-ui/worker package using npm. This allows you to use the LeaferUI library within your project's Web Worker environment.  The package is installed from the npm registry.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/ui/worker/start.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install @leafer-ui/worker\n```\n\n----------------------------------------\n\nTITLE: Drawing a Trend Chart - Typescript (Leafer)\nDESCRIPTION: This code snippet (from chart.ts) demonstrates how to create a trend chart using the Polygon element in Leafer.js.  The chart is drawn by appropriately setting the polygon's points. The actual code is included dynamically using the <<< syntax.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Polygon.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Polygon/chart.ts [Leafer]\n```\n\n----------------------------------------\n\nTITLE: Remove Multiple Events (off) - JavaScript (constMore)\nDESCRIPTION: This snippet shows how to remove multiple event listeners using the 'off' method with an array of event types in JavaScript (using constMore variable). The example uses an array containing multiple event type strings. Assumes Leaferjs library is loaded. Input: array of event types. Output: listeners for the specified event types removed.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/off.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<<< @/code/event/off/constMore.js\n```\n\n----------------------------------------\n\nTITLE: Enable Decorators in tsconfig.json\nDESCRIPTION: This code snippet demonstrates how to enable decorator support in a TypeScript project by setting the 'experimentalDecorators' option to true within the 'compilerOptions' section of the tsconfig.json file. Decorators are necessary for using certain features within Leafer.js and other libraries.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/custom/base/register.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"experimentalDecorators\": true // 开启装饰器功能\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Animation Ending: Back to Start (ease.ts)\nDESCRIPTION: Demonstrates how to configure an animation to return to its starting state after completion using the 'from' option within the 'ending' property. This example applies to various animation types including 'animation', 'transition', 'set', and 'animate' within Leafer.js.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/animate/options/ending.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/animate/options/ending/animation/ease.ts [animation]\n```\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/animate/options/ending/transition/ease.ts [transition]\n```\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/animate/options/ending/set/ease.ts [set]\n```\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/animate/options/ending/animate/ease.ts [animate]\n```\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/animate/options/ending/ease.ts [Animate]\n```\n\n----------------------------------------\n\nTITLE: Using Decorators with Class and Properties (TypeScript)\nDESCRIPTION: This example demonstrates the usage of decorators in a Leafer UI component. `registerUI` is a class decorator, while `boundsType` is a property decorator for `width` and `height`. Decorators are used to add metadata or modify the behavior of classes and their properties.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/custom/attr.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n@registerUI()\nexport class Star extends UI implements IStar {\n  @boundsType(100)\n  public width: __Number\n\n  @boundsType(100)\n  public height: __Number\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Leafer Event Handling\nDESCRIPTION: Example of handling Leafer events. This demonstrates how to listen to different lifecycle events within a Leafer application, such as `start`, `ready`, and `stop`, to execute specific logic at various stages of the application's lifecycle. It showcases the basic structure for capturing and responding to these key events.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/event/basic/Leafer.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/event/leafer/leafer.ts\n```\n\n----------------------------------------\n\nTITLE: Robot Actions Interface Definition\nDESCRIPTION: Defines the interface for robot actions, which are presets of image frame sequences. It defines actions that can be a single frame, an array of frames, or a more complex animation object.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/robot/index.md#_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\ninterface IRobotActions {\n  [name: string]: number | number[] | IRobotAnimation // 图片帧编号（默认从0开始）\n}\n\ninterface IRobotAnimation {\n  keyframes: number[] // 图片帧编号\n  loop?: boolean | number\n  FPS?: number\n}\n```\n\n----------------------------------------\n\nTITLE: Design Viewport Configuration (App)\nDESCRIPTION: This is a placeholder for the actual code. The code demonstrates how to configure the design viewport type for the App in Leafer.js. Design adds middle mouse and limits scale.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/config/app/type.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/app/config/type/app/design.ts [App]\n```\n\n----------------------------------------\n\nTITLE: Canvas Graphic Element Drawing Example (App)\nDESCRIPTION: This code snippet demonstrates how to use graphic elements to draw on Leafer canvas on the application side. It is often paired with a Leafer-specific component. The file path points to implementation details.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Canvas.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Canvas/app/draw.ts [App]\n```\n\n----------------------------------------\n\nTITLE: Creating a Leafer instance and adding a draggable rectangle (TypeScript)\nDESCRIPTION: This TypeScript code snippet demonstrates how to create a Leafer instance and add a draggable rectangle to it within a mini-program page.  It imports necessary modules from the '@leafer-game/miniapp' package, initializes Leafer with the specified view and eventer, creates a Rect object with specified properties including draggable: true, and adds the rectangle to the Leafer instance.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/game/miniapp/start.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Leafer, Rect } from '@leafer-game/miniapp'\n\nPage({\n  onReady() {\n    // this 为当前小程序页面实例\n    const leafer = new Leafer({ view: 'leafer', eventer: this })\n\n    const rect = new Rect({\n      x: 100,\n      y: 100,\n      width: 100,\n      height: 100,\n      fill: '#32cd79',\n      draggable: true,\n    })\n\n    leafer.add(rect)\n  },\n  receiveEvent() {}, // 约定接收交互事件的方法名\n})\n```\n\n----------------------------------------\n\nTITLE: Installing @leafer-editor/worker with PNPM\nDESCRIPTION: This command installs the @leafer-editor/worker package using the pnpm package manager. It adds the package to your project's dependencies, allowing you to use its functionalities.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/editor/worker/start.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @leafer-editor/worker\n```\n\n----------------------------------------\n\nTITLE: BlendMode DestinationIn Example Typescript\nDESCRIPTION: Example code demonstrating the 'destination-in' blend mode. Only preserves the overlapping part of the existing canvas content and the new shape. The rest is transparent. The code is assumed to be in a file named destination-in.ts.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/blendMode.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/blendMode/destination-in.ts\n```\n\n----------------------------------------\n\nTITLE: Setting a path as mask - Typescript\nDESCRIPTION: This code snippet demonstrates how to use a path as a mask in Leaferjs using Typescript. It is important for creating complex masking effects.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/mask.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/mask/path.ts\n```\n\n----------------------------------------\n\nTITLE: Stopping Event Propagation - Typescript\nDESCRIPTION: Demonstrates how to stop event propagation to parent nodes using the `stop()` method in Leaferjs with Typescript.  Requires Leaferjs library to be installed.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/event/flow.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/event/stop.ts\n```\n\n----------------------------------------\n\nTITLE: Running Plugin Development Commands\nDESCRIPTION: These commands are used to run, build, and test the LeaferJS plugin during development. `npm run start` starts the development server, `npm run build` builds the plugin for production, and `npm run test` executes the automated tests to ensure the plugin's functionality.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/dev.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start # 开始运行项目\nnpm run build # 打包插件代码，同时会创建types\nnpm run test # 自动化测试\n```\n\n----------------------------------------\n\nTITLE: ScrollBar Config Interface\nDESCRIPTION: Defines the interface for the ScrollBar configuration object. This configuration can be passed as the second argument when instantiating a ScrollBar.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/scroll/index.md#_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\ninterface IScrollBarConfig {\n  theme?: IScrollBarTheme // 主题样式\n  padding?: IFourNumber // 画布四周的padding\n  minSize?: number // 滚动条的最小尺寸, 默认为10\n}\n\ntype IScrollBarTheme = 'light' | 'dark' | IBoxInputData\n```\n\n----------------------------------------\n\nTITLE: Disable Local Rendering for App Config - Typescript\nDESCRIPTION: This code snippet demonstrates how to disable local rendering within the App configuration in Leafer.js. Disabling local rendering is useful when the element's bounding box cannot be accurately determined. It modifies the `partRender` property in the app config.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/advanced/partRender.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/app/config/app/partRender.ts [App]\n```\n\n----------------------------------------\n\nTITLE: Importing LeaferJS State Plugin via Script Tag (Minified)\nDESCRIPTION: This snippet demonstrates how to import the LeaferJS state plugin using a script tag in your HTML.  This method uses the minified version of the plugin for smaller file size.  The plugin's functionality will be accessible via the global variable `LeaferIN.state`.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/state/index.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/@leafer-in/state@1.5.3/dist/state.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Running an ES module with node\nDESCRIPTION: This command executes a JavaScript ES module file using the Node.js runtime. `index.mjs` is the ES module script to be executed.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/ui/node/napi.md#_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nnode index.mjs\n```\n\n----------------------------------------\n\nTITLE: Installing skia-canvas\nDESCRIPTION: These commands install the skia-canvas package using different package managers: npm, pnpm, yarn, and bun. skia-canvas provides Canvas functionality in a server environment using skia. Installation may take a while.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/ui/node/start.md#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nbun add skia-canvas\n```\n\n----------------------------------------\n\nTITLE: Installing LeaferJS Export Plugin with NPM\nDESCRIPTION: Installs the @leafer-in/export plugin using npm.  This allows you to use the export functionality within your LeaferJS project. Requires npm to be installed and configured in your environment.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/export/index.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @leafer-in/export\n```\n\n----------------------------------------\n\nTITLE: Importing leafer-draw via script tag (web.min)\nDESCRIPTION: This HTML snippet imports leafer-draw using a script tag, referencing the minified web version from unpkg.  It makes the `Leafer` object available globally. The minified version reduces file size for faster loading.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/draw/start.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/leafer-draw@1.5.3/dist/web.min.js\"></script>\n<script>\n  const { Leafer } = LeaferUI\n  // ...\n</script>\n```\n\n----------------------------------------\n\nTITLE: Accessing Computed Data in Leafer UI (TypeScript)\nDESCRIPTION: This snippet demonstrates how to access the final computed data for UI element properties, which represents the converted numerical data. The final, calculated value is accessed via `this.__[attrName]`. For example, after processing, the `width` value is a number type, such as 10.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/custom/attr.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(this.__.width) // 10  通过 this.__[attrName] 可以获取最终的计算数据\n```\n\n----------------------------------------\n\nTITLE: Including LeaferJS filter plugin via script tag (minified)\nDESCRIPTION: This script tag includes the minified version of the LeaferJS filter plugin. It uses the unpkg CDN to load the filter.min.js file.  This makes the `LeaferIN.filter` global variable available for use.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/filter/index.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/@leafer-in/filter@1.5.3/dist/filter.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: BlendMode Xor Example Typescript\nDESCRIPTION: Example code demonstrating the 'xor' blend mode. The shape becomes transparent where it overlaps, and is drawn normally elsewhere. The code is assumed to be in a file named xor.ts.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/blendMode.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/blendMode/xor.ts\n```\n\n----------------------------------------\n\nTITLE: Installing LeaferJS State Plugin with NPM\nDESCRIPTION: This snippet demonstrates how to install the LeaferJS state plugin using npm. The plugin allows you to easily add interactive states to your LeaferJS elements. Make sure you have npm installed and configured in your project.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/state/index.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @leafer-in/state\n```\n\n----------------------------------------\n\nTITLE: Drawing Colored Shapes with Pen - Leafer\nDESCRIPTION: This snippet demonstrates how to use the Pen element in Leafer to draw shapes with different colors. It involves setting the style of the pen using the setStyle method and defining the path to be drawn. The resulting shape will have the specified color.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Pen.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Pen/color.ts [Leafer]\n```\n\n----------------------------------------\n\nTITLE: Animate - Autoplay Example (ease.ts)\nDESCRIPTION: This TypeScript code snippet demonstrates the general structure for handling the autoplay and animation properties. It provides a higher-level view, possibly from a parent or configuration file for animations, showcasing how these properties can be set or managed. The example is extracted from the ease.ts file in the Leaferjs project.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/animate/options/autoplay.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/animate/options/autoplay/ease.ts [Animate]\n```\n\n----------------------------------------\n\nTITLE: Plugin Mechanism Change (TS)\nDESCRIPTION: This snippet explains that the plugin mechanism has changed to enable on-demand code loading. It also states that previous plugins assigned the LeaferUI object to `PluginManager.pow`. This change requires developers to update their plugin implementation to align with the new mechanism.\nSOURCE: https://github.com/leaferjs/docs/blob/main/update/index.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n为了实现按需引入代码，插件机制已改变，并提供了一种新的方式\n之前的插件需要给 PluginManager.pow 赋值 LeaferUI 对象\n```\n\n----------------------------------------\n\nTITLE: Flow Layout Auto Height and Height Example\nDESCRIPTION: This TypeScript code snippet shows how `autoHeight` interacts with explicitly set `height` property. It demonstrates a use case where both `height` and `autoHeight` are defined on a UI element within a flow layout. Dependencies include Leaferjs core and any plugins used for the flow layout.  The snippet is named 'both.ts' indicating that both properties are being used together.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/flow/Flow/autoHeight.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/flow/autoHeight/both.ts\n```\n\n----------------------------------------\n\nTITLE: Drawing Polyline - Leafer Component (TypeScript)\nDESCRIPTION: This code snippet (Leafer part) is responsible for drawing a polyline, also known as a broken line or a series of connected line segments, using Leafer.js. It demonstrates the implementation within the Leafer component and relies on an accompanying App component for complete integration.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Line.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Line/points.ts [Leafer]\n```\n\n----------------------------------------\n\nTITLE: IGap and IPointGap Types\nDESCRIPTION: Defines the TypeScript types `IGap` and `IPointGap` for specifying gaps between elements in a flow layout. `IGap` can be a number, 'auto', or 'fit', while `IPointGap` allows for separate X and Y axis gap settings.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/flow/Flow/gap.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// 设置 auto / fit 会均分剩余的空间，auto 最小值为 0，fit 允许为负数。\ntype IGap = number | 'auto' | 'fit'\n\ninterface IPointGap {\n  x?: IGap // 单独设置 x 轴间距\n  y?: IGap // 单独设置 y 轴间距\n}\n```\n\n----------------------------------------\n\nTITLE: Robot Element Implementation\nDESCRIPTION: This code snippet demonstrates the implementation of a Robot element using the leaferjs Robot plugin. It likely shows how to define actions, load sprite sheets, and control the robot's behavior based on user input or game logic.  It is dependent on the Robot plugin being installed.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/plugin/robot.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/robot/index.ts\n```\n\n----------------------------------------\n\nTITLE: Installing @leafer-draw/node with yarn\nDESCRIPTION: Installs the @leafer-draw/node package using yarn. This allows you to use the drawing functionalities in a Node.js environment. It requires yarn to be installed.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/draw/node/start.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @leafer-draw/node\n```\n\n----------------------------------------\n\nTITLE: Installing @leafer-editor/worker with NPM\nDESCRIPTION: This command installs the @leafer-editor/worker package using the npm package manager. It adds the package to your project's dependencies, allowing you to use its functionalities.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/editor/worker/start.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @leafer-editor/worker\n```\n\n----------------------------------------\n\nTITLE: Leaferjs Rotate Point Style Configuration (TypeScript)\nDESCRIPTION: Demonstrates how to configure the style of the rotation control points in the Leaferjs editor using TypeScript. This snippet allows customizing the appearance of the rotation handles. It assumes a basic Leaferjs project setup and familiarity with editor configuration options.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/index.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/editor/config/rotate-point.ts\n```\n\n----------------------------------------\n\nTITLE: PaintString TypeScript Example\nDESCRIPTION: Presents TypeScript type definition and usage examples for PaintString, showcasing how to define SolidPaint, GradientPaint, and ImagePaint using string shorthand notations in LeaferJS.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/interface/ui/String.md#_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\ntype PaintString = SolidPaintString | GradientPaintString | ImagePaintString\n\n// 使用字符串简写示例\nconst solidPaint = '#FF0000 darken'\nconst gradientPaint = 'linear(180deg, #FF0000, #FFFF00)'\nconst imagePaint = 'image(url, fit, 200%) lighten 80%'\nconst multiplePaint = 'image(url, fit, 200%) lighten, rgba(255,0,0,0.5)'\n```\n\n----------------------------------------\n\nTITLE: Using aliasType Decorator in Leafer UI (TypeScript)\nDESCRIPTION: This code snippet demonstrates the usage of the `@aliasType` decorator, which creates an alias for a specific property. This allows accessing the same value through different property names. In this example, `alpha` is aliased to `opacity`.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/custom/attr.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n  @aliasType('opacity')\n  public alpha: number\n```\n\n----------------------------------------\n\nTITLE: Pen Tool Implementation (TypeScript)\nDESCRIPTION: This code snippet showcases the implementation of a pen tool using LeaferJS. It likely involves drawing lines based on mouse movement during drag events and allows for zooming and panning of the canvas. The complete code is located at `@/code/display/Pen/draw.ts`.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/event/ui/Drag.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Pen/draw.ts\n```\n\n----------------------------------------\n\nTITLE: Finding Element by Class Name in LeaferJS (TypeScript)\nDESCRIPTION: Demonstrates how to use the `findOne` method to find a UI element by its class name in LeaferJS. It requires the find element plugin to be installed. The `findOne` method is called with the class name as the condition.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/findOne.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n<<< @/code/property/findOne/className.ts\n```\n\n----------------------------------------\n\nTITLE: Importing @leafer-ui/worker via worker.min.js\nDESCRIPTION: Imports the minified version of the @leafer-ui/worker library into a Web Worker scope using `importScripts`.  This makes the LeaferUI functionality accessible through the global `LeaferUI` variable. The file is fetched from unpkg.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/ui/worker/start.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimportScripts('https://unpkg.com/@leafer-ui/worker@1.5.3/dist/worker.min.js')\n```\n\n----------------------------------------\n\nTITLE: Skew Element Event Example\nDESCRIPTION: Example code demonstrating the skew element event in TypeScript.  This snippet is intended to show how to implement and handle EditorSkewEvent, presumably using the LeaferJS framework. It relies on external LeaferJS APIs, so it needs a full LeaferJS project.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/event/EditorSkewEvent.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/editor/event/skew.ts\n```\n\n----------------------------------------\n\nTITLE: Removing and Replacing a LeaferJS Selector Method (TS)\nDESCRIPTION: This code snippet illustrates the removal of the `leafer.selector.find()` method and its replacement with element methods `find()` and `findOne()`. This change alters how elements are selected within the LeaferJS framework.\nSOURCE: https://github.com/leaferjs/docs/blob/main/update/index.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nleafer.selector.find() // 该方法已移除，改用元素方法 find() / findOne()\n```\n\n----------------------------------------\n\nTITLE: Custom Line with Leafer.js (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to create a custom line using Leafer.js. It requires importing necessary modules from the leafer-ui library. The `strokeAlign` property needs to be modified to `center` to draw a non-closed line. The element bounds should also be defined to ensure correct rendering and collision detection.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/custom/path.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Custom/line.ts [自定义线条]\n```\n\n----------------------------------------\n\nTITLE: Disable Resizing in Leafer Editor (resizeable)\nDESCRIPTION: This code snippet shows how to disable the resizing functionality in the Leafer editor. Setting the `resizeable` property to `false` prevents users from changing the size of elements in the editor. This configuration can be applied at the application level using `app.editor.config` or to individual elements via their `editConfig` attribute.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/config/enable.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/editor/config/resizeable.ts\n```\n\n----------------------------------------\n\nTITLE: Handling Tap Events\nDESCRIPTION: This code snippet demonstrates how to listen for `tap`, `double_tap`, and `long_tap` events, where only one of these events will be triggered by default.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/event/ui/Pointer.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/event-ui/pointer/tap.ts\n```\n\n----------------------------------------\n\nTITLE: ImagePaintMode Enum Definition Typescript\nDESCRIPTION: Defines the `ImagePaintMode` enum, which specifies the tiling mode for `ImagePaint` objects in Leaferjs.  It includes options for normal, cover, fit, stretch, clip, and repeat modes. These modes determine how the image is rendered within the filled or stroked area.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/paint/image.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype ImagePaintMode =\n  | 'normal' // 正常\n  | 'cover' // 覆盖（相当于background-size: cover）\n  | 'fit' // 适应 (相当于background-size: contain)\n  | 'stretch' // 拉伸，会改变图片比例\n  | 'clip' // 裁剪\n  | 'repeat' // 平铺 (相当于background-repeat: repeat)\n```\n\n----------------------------------------\n\nTITLE: Keyframe Animation in LeaferJS (keyframes.ts)\nDESCRIPTION: This code snippet demonstrates the creation of complex timeline animations using keyframes in LeaferJS. It allows for precise control over each frame's delay, duration, and easing. The code leverages LeaferJS's keyframe animation features to create sophisticated and customized animation sequences.\nSOURCE: https://github.com/leaferjs/docs/blob/main/blog/2024-09-20.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/animation/keyframes.ts\n```\n\n----------------------------------------\n\nTITLE: Keyframe Object Definition\nDESCRIPTION: Defines the type for a single keyframe in a Leaferjs keyframes animation. It can be either a simple IUIInputData object or an IAnimateKeyframe interface, which allows for more fine-grained control over each keyframe. Requires the animate plugin.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/animation.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype IKeyframe = IUIInputData | IAnimateKeyframe\n```\n\n----------------------------------------\n\nTITLE: Leaferjs Editable Element Example (TypeScript)\nDESCRIPTION: Shows how to enable the 'editable' property on an element in Leaferjs to make it selectable by the editor. This property is essential for elements to be interactive within the editor. It requires a basic Leaferjs project setup and understanding of UI element properties.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/index.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/editor/editable.ts\n```\n\n----------------------------------------\n\nTITLE: Installing leafer-editor with yarn\nDESCRIPTION: This snippet shows how to install the leafer-editor package using yarn. It's a simple command-line instruction.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/editor/start.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add leafer-editor\n```\n\n----------------------------------------\n\nTITLE: Installing leafer-game with bun\nDESCRIPTION: This code snippet demonstrates how to install the leafer-game package using bun. It uses the `bun add` command to add the package to the project's dependencies. This requires bun to be installed on the system.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/game/start.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nbun add leafer-game\n```\n\n----------------------------------------\n\nTITLE: Modifying Fill Object\nDESCRIPTION: This snippet shows how to modify the properties of a fill object in Leaferjs.  It highlights the limitation that Leaferjs only detects changes to first-level properties.  Directly modifying nested properties will not trigger a render update.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/basic/style.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/basic/style/change-fill.ts\n```\n\n----------------------------------------\n\nTITLE: Animate property transitions using set() - TypeScript\nDESCRIPTION: This code snippet showcases how to animate property transitions using the `set()` method with different transition configurations in Leafer. It demonstrates animating x and y coordinates.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/data.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// 动画过渡\nrect.set({ x: 100, y: 200 }, true)\n\nrect.set({ x: 100, y: 200 }, 2) // 过渡 2 秒\n```\n\n----------------------------------------\n\nTITLE: Installing Leafer Robot plugin with Yarn\nDESCRIPTION: Installs the @leafer-in/robot plugin using Yarn. This plugin provides the Robot element for creating animated characters within Leafer.js. It is required to use the Robot element.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/robot/index.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @leafer-in/robot\n```\n\n----------------------------------------\n\nTITLE: Importing @leafer-editor/worker worker.min.js\nDESCRIPTION: This code imports the @leafer-editor/worker library's minified worker file using importScripts. This provides access to the library's functionality through the LeaferUI global variable.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/editor/worker/start.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimportScripts(\n  'https://unpkg.com/@leafer-editor/worker@1.5.3/dist/worker.min.js'\n)\n```\n\n----------------------------------------\n\nTITLE: Text Case Type\nDESCRIPTION: Defines the TypeScript type for text case options in Leaferjs' Text element.  It allows for 'title', 'upper', 'lower', and 'none' cases.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Text.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype ITextCase =\n  | 'title' // 单词首字母大写\n  | 'upper' // 全部大写\n  | 'lower' // 全部小写\n  | 'none'\n```\n\n----------------------------------------\n\nTITLE: Path Winding - Group Example (App)\nDESCRIPTION: This snippet, presumably from '@/code/display/Path/app/group.ts', contains the application-level code that integrates with the Leafer path creation and winding rules example.  This snippet focuses on application specific parts.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Path.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Path/app/group.ts [App]\n```\n\n----------------------------------------\n\nTITLE: Import LeaferUI (web) with alias\nDESCRIPTION: Imports LeaferUI using a script tag, specifically the web build. Defines aliases for Image, PointerEvent, and DragEvent to avoid conflicts with browser global variables.  This provides a non-minified, browser-compatible version of the library.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/framework/html.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/leafer-ui@1.5.3/dist/web.js\"></script>\n<script>\n  const { Leafer } = LeaferUI // 全局变量，包含 leafer-ui的所有功能\n\n  // Image、PointerEvent、DragEvent 会与浏览器的全局变量冲突，请使用以下别名代替\n  const { MyImage, MyPointerEvent, MyDragEvent } = LeaferUI\n\n  // ...\n</script>\n```\n\n----------------------------------------\n\nTITLE: Canvas Context Drawing Example (Leafer)\nDESCRIPTION: This code snippet demonstrates how to draw on a Leafer canvas using the context API.  It likely involves getting the 2D rendering context and then using its methods to draw shapes, lines, and text. The exact implementation details are in the linked file.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Canvas.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Canvas/context.ts [Leafer]\n```\n\n----------------------------------------\n\nTITLE: Installing @leafer-ui/miniapp with npm\nDESCRIPTION: This snippet demonstrates how to install the @leafer-ui/miniapp package using npm. It ensures that the necessary dependencies are added to your project.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/ui/miniapp/start.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @leafer-ui/miniapp\n```\n\n----------------------------------------\n\nTITLE: Animate Page example in Leafer.js\nDESCRIPTION: This is a placeholder for the code from @/code/property/animation/page.ts. The actual code would demonstrate a page animation use case in Leafer.js. It would likely involve creating and controlling animations for UI elements using the Leafer.js API.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/plugin/animate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nPlaceholder for @/code/property/animation/page.ts\n```\n\n----------------------------------------\n\nTITLE: Installing Scroll Plugin with yarn\nDESCRIPTION: Installs the @leafer-in/scroll plugin using yarn.  This plugin is required to use the ScrollBar element.  Run this command in your project's root directory.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/scroll/index.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @leafer-in/scroll\n```\n\n----------------------------------------\n\nTITLE: Setting Flow Element Padding\nDESCRIPTION: This TypeScript code snippet demonstrates how to set the padding property of a Flow element in Leafer.js. The `padding` property accepts an array of numbers representing the top, right, bottom, and left padding values.  It shows different ways to specify padding, including providing a single value for all sides, two values for top/bottom and right/left, three values for top, right/left, and bottom, and four individual values. This example is essential for understanding how to control the layout and spacing within Flow elements.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/flow/Flow/padding.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\npadding: [20, 10, 20, 10] // [top, right, bottom, left]\npadding: [20, 10, 20] // [top, (right-left), bottom]\npadding: [20, 10] // [ (top-bottom), (right-left)]\npadding: 20 // all\n```\n\n----------------------------------------\n\nTITLE: Configuring Viewport Layer\nDESCRIPTION: This code demonstrates how to configure a specific group as the viewport layer, allowing for custom scaling and panning.  Two snippets are provided, one for the main leafer, and one for the app instance.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Leafer.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Text Editor Configuration (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to access the text editor's configuration within the Leaferjs application. It uses the `app.editor.mergeConfig.textEditor` path to retrieve the configuration object. This allows for customization of the text editing behavior.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/config/innerEditor.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// 内部通过此方式访问\napp.editor.mergeConfig.textEditor\n```\n\n----------------------------------------\n\nTITLE: Offsetting Element with offsetX and offsetY in LeaferJS\nDESCRIPTION: This code snippet demonstrates how to offset an element's position using the offsetX and offsetY properties in LeaferJS. It shows a basic example of setting these properties to visually move the element relative to its original position.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/offset.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/offset/offset.ts\n```\n\n----------------------------------------\n\nTITLE: Installing leafer-editor with bun\nDESCRIPTION: This snippet shows how to install the leafer-editor package using bun. It's a simple command-line instruction.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/editor/start.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nbun add leafer-editor\n```\n\n----------------------------------------\n\nTITLE: Include LeaferJS Color Plugin via Script Tag (Minified)\nDESCRIPTION: Includes the minified version of the LeaferJS color plugin using a script tag. This allows access to the plugin's functionalities through the global variable LeaferIN.color. Requires a browser environment.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/color/index.md#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"https://unpkg.com/@leafer-in/color@1.5.3/dist/color.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Using Decorators in JavaScript (JavaScript)\nDESCRIPTION: This example demonstrates how the decorators shown in TypeScript can be used in standard JavaScript. Decorators in JavaScript are just functions that can modify the target class or property.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/custom/attr.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nregisterUI()(Star) // 类\nboundsType(100)(Star.prototype, 'width') // 类属性\nboundsType(100)(Star.prototype, 'height')\n```\n\n----------------------------------------\n\nTITLE: Initializing Leafer with Auto Resize - Padding - Typescript\nDESCRIPTION: This snippet showcases creating a Leafer instance that automatically resizes with general padding. The leafer will adjust its size based on parent resize events, while respecting the specified padding.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/basic/leafer.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Running Node.js\nDESCRIPTION: These commands run a Node.js application using either the common JS format (index.js) or the ECMAScript module format (index.mjs). The command `node index.js` is used for CommonJS modules, while `node index.mjs` is used for ES modules.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/ui/node/start.md#_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nnode index.mjs\n```\n\n----------------------------------------\n\nTITLE: Installing @leafer-game/miniapp with pnpm\nDESCRIPTION: Installs the @leafer-game/miniapp package using pnpm. This command adds the package to your project's dependencies, allowing you to use its functionalities.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/game/miniapp/start.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @leafer-game/miniapp\n```\n\n----------------------------------------\n\nTITLE: Creating a Point with property values in LeaferJS (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to create a Point object in LeaferJS by providing x and y coordinates as arguments to the constructor. It imports the Point class from 'leafer-ui' and initializes a new Point instance with the specified values.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/math/Point.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Point } from 'leafer-ui'\n\nconst point = new Point(100, 100)\n```\n\n----------------------------------------\n\nTITLE: Left Flow Alignment Typescript\nDESCRIPTION: Example of aligning children to the left side within the Flow layout, achieved by setting `flowAlign` to `'left'`.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/flow/Flow/flowAlign.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/flow/flowAlign/left.ts\n```\n\n----------------------------------------\n\nTITLE: Configuring Zoom Mode - Leafer Configuration in Leafer.js\nDESCRIPTION: This code snippet focuses on setting up the configuration for zoom mode in Leafer.js itself.  It likely showcases how the framework internally handles the `wheel.zoomMode` configuration option.  It's a Leafer-level configuration, distinct from the app-level configuration.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/config/app/wheel.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/app/viewport/zoom-mode.ts [Leafer]\n```\n\n----------------------------------------\n\nTITLE: Install @leafer-editor/miniapp with npm\nDESCRIPTION: Installs the @leafer-editor/miniapp package using npm. This command adds the package and its dependencies to your project, allowing you to use its functionalities in your mini-program.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/editor/miniapp/start.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @leafer-editor/miniapp\n```\n\n----------------------------------------\n\nTITLE: Installing Resize Plugin with NPM\nDESCRIPTION: This command installs the @leafer-in/resize plugin using npm.  It adds the plugin to your project's node_modules directory and updates your package.json file. This requires Node.js and npm to be installed.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/resize/index.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @leafer-in/resize\n```\n\n----------------------------------------\n\nTITLE: Creating Bounds with property values - Typescript\nDESCRIPTION: This code snippet demonstrates how to create a new `Bounds` object in Leafer UI using specific x, y, width, and height values. It initializes a bounds with its top-left corner at (0, 0) and dimensions of 100x100 pixels. This is a basic and direct way to define a rectangular area.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/math/Bounds.md#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { Bounds } from 'leafer-ui'\n\nconst bounds = new Bounds(0, 0, 100, 100)\n```\n\n----------------------------------------\n\nTITLE: Installing skia-canvas\nDESCRIPTION: These commands install the skia-canvas package using different package managers: npm, pnpm, yarn, and bun. skia-canvas provides Canvas functionality in a server environment using skia. Installation may take a while.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/ui/node/start.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nyarn add skia-canvas\n```\n\n----------------------------------------\n\nTITLE: Arrow animation example in Leafer.js\nDESCRIPTION: This is a placeholder for the code from @/code/plugin/arrow/animate.ts.  The actual code would demonstrate how to animate arrows or arrow-like UI elements using the Leafer.js API, likely involving the arrow plugin.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/plugin/animate.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nPlaceholder for @/code/plugin/arrow/animate.ts\n```\n\n----------------------------------------\n\nTITLE: Installing @napi-rs/canvas with pnpm\nDESCRIPTION: This command installs the @napi-rs/canvas package using pnpm. @napi-rs/canvas is required to replace Canvas functionality in a server-side environment.  It is based on skia and is a high-performance, zero-system-dependency library.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/editor/node/napi.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @napi-rs/canvas\n```\n\n----------------------------------------\n\nTITLE: Installing leafer-game with yarn\nDESCRIPTION: This code snippet demonstrates how to install the leafer-game package using yarn. It uses the `yarn add` command to add the package to the project's dependencies. This requires Node.js and yarn to be installed on the system.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/game/start.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add leafer-game\n```\n\n----------------------------------------\n\nTITLE: Installing Resize Plugin with Bun\nDESCRIPTION: This command installs the @leafer-in/resize plugin using bun. It adds the plugin to your project's node_modules directory and updates your package.json file. This requires Bun to be installed.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/resize/index.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nbun add @leafer-in/resize\n```\n\n----------------------------------------\n\nTITLE: DashPatternString SCSS Example\nDESCRIPTION: Shows how to use DashPatternString in SCSS to create dashed stroke patterns. It demonstrates the use of multiple pattern values to define the length of dashes and gaps.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/interface/ui/String.md#_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n// 参数模版\npattern1 pattern2 ...\n\n// 应用示例\ndash-pattern: 10 10;\n```\n\n----------------------------------------\n\nTITLE: Configuring the page for custom navigation (index.json)\nDESCRIPTION: Configures the page to use custom navigation and allows auto page orientation in the JSON file. This setting ensures the mini-program respects user's device orientation settings.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/editor/miniapp/start.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"navigationStyle\": \"custom\",\n  \"pageOrientation\": \"auto\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Point from a data object in LeaferJS (TypeScript)\nDESCRIPTION: This code snippet shows how to create a Point object using a data object that contains x and y properties. It first defines a pointData object with x and y values and then passes this object to the Point constructor to create a new Point instance.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/math/Point.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst pointData = { x: 100, y: 100 }\n\nconst point = new Point(pointData)\n```\n\n----------------------------------------\n\nTITLE: Bottom-Left Flow Alignment Typescript\nDESCRIPTION: Snippet demonstrating bottom-left alignment using `flowAlign` set to `'bottom-left'`.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/flow/Flow/flowAlign.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/flow/flowAlign/bottom-left.ts\n```\n\n----------------------------------------\n\nTITLE: Installing leafer-editor with npm\nDESCRIPTION: This snippet shows how to install the leafer-editor package using npm. It's a simple command-line instruction.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/editor/start.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install leafer-editor\n```\n\n----------------------------------------\n\nTITLE: Import Leaferjs Animate and Color plugins via script tags\nDESCRIPTION: This snippet imports the @leafer-in/animate and @leafer-in/color plugins using script tags. These plugins are essential for utilizing the Animate class and its features. The example then accesses the Animate class through the global LeaferIN.animate object.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/animate/index.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/@leafer-in/animate@1.5.3/dist/animate.min.js\"></script>\n<script src=\"https://unpkg.com/@leafer-in/color@1.5.3/dist/color.min.js\"></script>\n<script>\n  const { Animate } = LeaferIN.animate\n</script>\n```\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/@leafer-in/animate@1.5.3/dist/animate.js\"></script>\n<script src=\"https://unpkg.com/@leafer-in/color@1.5.3/dist/color.js\"></script>\n<script>\n  const { Animate } = LeaferIN.animate\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing @leafer-editor/node with npm\nDESCRIPTION: This command installs the @leafer-editor/node package using npm.  This is necessary to use the graphical editor features in a Node.js environment. It adds the package as a dependency to your project.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/editor/node/napi.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @leafer-editor/node\n```\n\n----------------------------------------\n\nTITLE: Importing Leafer Robot plugin with script tag (minified)\nDESCRIPTION: Imports the Leafer Robot plugin using a script tag. This allows access to the Robot element through the global variable LeaferIN.robot.  It requires the robot.min.js file.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/robot/index.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/@leafer-in/robot@1.5.3/dist/robot.min.js\"></script>\n<script>\n  const { Robot } = LeaferIN.robot\n</script>\n```\n\n----------------------------------------\n\nTITLE: Install @leafer-editor/miniapp with pnpm\nDESCRIPTION: Installs the @leafer-editor/miniapp package using pnpm. This command adds the package and its dependencies to your project using pnpm, allowing you to use its functionalities in your mini-program.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/editor/miniapp/start.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @leafer-editor/miniapp\n```\n\n----------------------------------------\n\nTITLE: Installing leafer-game with npm\nDESCRIPTION: This code snippet demonstrates how to install the leafer-game package using npm.  It uses the `npm install` command to add the package to the project's dependencies. This requires Node.js and npm to be installed on the system.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/game/start.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install leafer-game\n```\n\n----------------------------------------\n\nTITLE: Document Viewport Configuration (App)\nDESCRIPTION: This is a placeholder for the actual code. The code demonstrates how to configure the document viewport type for the App in Leafer.js. Document limits scroll area, and limit scale range.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/config/app/type.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/app/config/type/app/document.ts [App]\n```\n\n----------------------------------------\n\nTITLE: Finding Element by Tag in LeaferJS (TypeScript)\nDESCRIPTION: Demonstrates how to use the `findOne` method to find a UI element by its tag in LeaferJS. It requires the find element plugin to be installed. The `findOne` method is called with the tag as the condition.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/findOne.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n<<< @/code/property/findOne/tag.ts\n```\n\n----------------------------------------\n\nTITLE: Leaferjs Event Flow - Typescript\nDESCRIPTION: Illustrates the event flow in Leaferjs using Typescript. It shows how events propagate through the DOM tree during the capture and bubbling phases. Requires Leaferjs library to be installed.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/event/flow.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/event/flow.ts\n```\n\n----------------------------------------\n\nTITLE: Viewport Configuration Implementation\nDESCRIPTION: This is a placeholder for the actual code. The code demonstrates the implementation principles of viewport in Leafer.js. It explains the underlying logic for scaling and moving the view.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/config/app/type.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/app/config/type/origin/viewport.ts [实现原理]\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for Leafer Canvas\nDESCRIPTION: This CSS snippet provides basic styling for the page and Leafer canvas. It ensures that the canvas takes up the full height and width of the page.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/ui/miniapp/start.md#_snippet_8\n\nLANGUAGE: css\nCODE:\n```\npage {\n  height: 100%;\n}\n#leafer {\n  width: 100%;\n  height: 100%;\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Opacity\nDESCRIPTION: This snippet illustrates how to change the opacity of an element in Leaferjs, controlling its transparency.  The `main` export likely modifies the element's opacity value.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/basic/style.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/opacity/change.ts#main\n```\n\n----------------------------------------\n\nTITLE: Installing @leafer-editor/node with yarn\nDESCRIPTION: This command installs the @leafer-editor/node package using yarn.  This is necessary to use the graphical editor features in a Node.js environment. It adds the package as a dependency to your project.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/editor/node/napi.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @leafer-editor/node\n```\n\n----------------------------------------\n\nTITLE: Installing @leafer-game/node with npm\nDESCRIPTION: Installs the @leafer-game/node package using npm. This package extends @leafer-ui/node with game-specific functionalities.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/game/node/start.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @leafer-game/node\n```\n\n----------------------------------------\n\nTITLE: Automatic Layout - X Axis (leafer-in/flow/x.ts)\nDESCRIPTION: Imports leafer and creates a container with horizontal flow layout and child elements. Demonstrates basic usage of the flow property for arranging elements along the x-axis.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/flow/index.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n<<< @/code/plugin/flow/x.ts\n```\n\n----------------------------------------\n\nTITLE: Installing @napi-rs/canvas via bun\nDESCRIPTION: This command installs the @napi-rs/canvas package using bun. It provides Canvas functionality in a Node.js environment, based on Skia and Rust for performance.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/game/node/napi.md#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nbun add @napi-rs/canvas\n```\n\n----------------------------------------\n\nTITLE: BlendMode SourceIn Example Typescript\nDESCRIPTION: Example code demonstrating the 'source-in' blend mode. Only draws the new shape where it overlaps with the target canvas. The rest is transparent. The code is assumed to be in a file named source-in.ts.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/blendMode.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/blendMode/source-in.ts\n```\n\n----------------------------------------\n\nTITLE: Installing @leafer-ui/node with yarn\nDESCRIPTION: This command installs the @leafer-ui/node package using yarn. This allows the leafer-ui library to be used within a Node.js environment.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/ui/node/napi.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @leafer-ui/node\n```\n\n----------------------------------------\n\nTITLE: Importing LeaferJS State Plugin via Script Tag\nDESCRIPTION: This snippet demonstrates how to import the LeaferJS state plugin using a script tag in your HTML. This method uses the unminified version of the plugin. The plugin's functionality will be accessible via the global variable `LeaferIN.state`.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/state/index.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/@leafer-in/state@1.5.3/dist/state.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Installing @leafer-editor/node with bun\nDESCRIPTION: This command installs the @leafer-editor/node package using bun.  This is necessary to use the graphical editor features in a Node.js environment. It adds the package as a dependency to your project.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/editor/node/napi.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nbun add @leafer-editor/node\n```\n\n----------------------------------------\n\nTITLE: IKeyframe and IAnimateKeyframe definition\nDESCRIPTION: Defines the TypeScript interfaces `IKeyframe` and `IAnimateKeyframe` used in Leaferjs animations. `IKeyframe` is a type alias that can be either `IUIInputData` or `IAnimateKeyframe`. `IAnimateKeyframe` specifies the structure for defining individual animation keyframes, including style, easing, delay, duration, swing, loop, autoDelay, and autoDuration properties.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/animate/Animate/style.md#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\ntype IKeyframe = IUIInputData | IAnimateKeyframe\n\ninterface IAnimateKeyframe {\n  style: IUIInputData // 元素样式\n\n  easing?: IAnimateEasing // 单独设置关键帧缓动方式\n  delay?: number // 单独设置关键帧延迟播放时长。\n  duration?: number // 单独设置关键帧的固定时长，设置后将忽略 autoDuration\n\n  swing?: number // 摇摆次数（到达 to 的次数），from -> to，to -> from -> to ... ，默认 0\n  loop?: number // 循环次数，默认为 0\n\n  // 分配剩余时间：（总时长 - 总关键帧固定时长）/ 总权重 * 当前权重\n  autoDelay?: number // 自动 delay 的权重， 默认为 0\n  autoDuration?: number // 自动 duration 的权重， 默认为 1\n}\n```\n\n----------------------------------------\n\nTITLE: Styling the Leafer canvas (index.wxss)\nDESCRIPTION: Defines the styles for the Leafer canvas and the page container in the WXSS file. It sets the height of the page and the width and height of the Leafer canvas to 100%, ensuring that the canvas fills the entire page.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/editor/miniapp/start.md#_snippet_6\n\nLANGUAGE: css\nCODE:\n```\npage {\n  height: 100%;\n}\n#leafer {\n  width: 100%;\n  height: 100%;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @leafer-game/miniapp with yarn\nDESCRIPTION: Installs the @leafer-game/miniapp package using yarn. This command adds the package to your project's dependencies, allowing you to use its functionalities.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/game/miniapp/start.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @leafer-game/miniapp\n```\n\n----------------------------------------\n\nTITLE: Hiding Element with Visible Property (LeaferJS)\nDESCRIPTION: This code snippet demonstrates how to hide an element in LeaferJS by setting the 'visible' property to 'false'. The element will be hidden, but it will still occupy its layout space.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/visible.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/visible/visible.ts\n```\n\n----------------------------------------\n\nTITLE: Install @leafer-draw/node with bun\nDESCRIPTION: Installs the @leafer-draw/node package using bun. This provides drawing capabilities for Node.js environments. No dependencies are required beyond a Node.js environment.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/draw/node/napi.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nbun add @leafer-draw/node\n```\n\n----------------------------------------\n\nTITLE: Installing @napi-rs/canvas via pnpm\nDESCRIPTION: This command installs the @napi-rs/canvas package using pnpm. It provides Canvas functionality in a Node.js environment, based on Skia and Rust for performance.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/game/node/napi.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @napi-rs/canvas\n```\n\n----------------------------------------\n\nTITLE: Disabling partial rendering in App\nDESCRIPTION: This code snippet demonstrates how to disable partial rendering for a App instance by setting the `usePartRender` property to `false` in the app config. Partial rendering optimizes performance by only rendering changed portions of the scene, but disabling it may be necessary in some cases. The snippet is expected to be placed within a TypeScript file.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/config/app/base.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/app/config/app/partRender.ts [App]\n```\n\n----------------------------------------\n\nTITLE: Installing Resize Plugin with Yarn\nDESCRIPTION: This command installs the @leafer-in/resize plugin using yarn. It adds the plugin to your project's node_modules directory and updates your package.json file.  This requires Yarn to be installed.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/resize/index.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @leafer-in/resize\n```\n\n----------------------------------------\n\nTITLE: Paint Type Definition (Leaferjs)\nDESCRIPTION: Defines the Paint type in Leaferjs, which is a union of SolidPaint, LinearGradient, RadialGradient, AngularGradient, and ImagePaint. This allows for different paint types to be used interchangeably where a Paint object is expected.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/interface/ui/Paint.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Paint =\n  | SolidPaint\n  | LinearGradient\n  | RadialGradient\n  | AngularGradient\n  | ImagePaint\n```\n\n----------------------------------------\n\nTITLE: Resizing Group without Scale - TypeScript\nDESCRIPTION: This code snippet demonstrates how to resize a group in Leaferjs without using the scale property. It shows a practical example of adjusting the bounding box of a group element by modifying its width and height directly.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/resize.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/resize/group.ts\n```\n\n----------------------------------------\n\nTITLE: Installing @leafer-ui/node\nDESCRIPTION: These commands install the @leafer-ui/node package using different package managers: npm, pnpm, yarn, and bun.  @leafer-ui/node enables server-side rendering capabilities.  Choose the command corresponding to your preferred package manager.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/ui/node/start.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @leafer-ui/node\n```\n\n----------------------------------------\n\nTITLE: Installing LeaferJS filter plugin with npm\nDESCRIPTION: This command installs the @leafer-in/filter package using npm. It is a prerequisite for using custom filters in LeaferJS. This command adds the filter functionality to the project.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/filter/index.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @leafer-in/filter\n```\n\n----------------------------------------\n\nTITLE: Installing @leafer-in/motion-path with npm\nDESCRIPTION: This command installs the @leafer-in/motion-path package using npm, a popular JavaScript package manager.  It adds the package and its dependencies to your project's node_modules directory and updates the package.json file. This allows you to use motion path features in your Leaferjs project.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/motion-path/index.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @leafer-in/motion-path\n```\n\n----------------------------------------\n\nTITLE: Displaying innerName of a Rectangle Element (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to access and display the `innerName` property of a rectangle element in Leafer.js. The `innerName` is a runtime-generated string that uniquely identifies the element. The snippet assumes that a `rect` object of type `leafer.Rectangle` has been created and added to the Leafer instance.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/innerName.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Example code is missing in provided text, but would typically show\n// creation of a leafer.Rectangle and accessing its innerName property\n// something like:\n// const rect = new leafer.Rectangle({ x: 10, y: 10, width: 50, height: 50 });\n// console.log(rect.innerName); \n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Mode - Leaferjs (Typescript)\nDESCRIPTION: This code snippet demonstrates how to enable the debug mode in Leaferjs by setting the `Debug.enable` property to `true`.  This allows you to observe the internal state of the Leaferjs application. There are no external dependencies beyond the `leafer-ui` package.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/debug/basic.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Debug } from 'leafer-ui'\n\nDebug.enable = true\n```\n\n----------------------------------------\n\nTITLE: Basic Leafer Initialization in uniapp with Vue\nDESCRIPTION: This snippet demonstrates the basic structure for integrating Leafer.js into a uniapp project using Vue. It includes setting up the canvas, initializing Leafer, and handling touch events. It requires the '@dcloudio/uni-app' and '@leafer-ui/miniapp' dependencies.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/ui/miniapp/uniapp.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <canvas\n    id=\"leafer\"\n    type=\"2d\"\n    @touchstart=\"receiveEvent\"\n    @touchmove=\"receiveEvent\"\n    @touchend=\"receiveEvent\"\n    @touchcancel=\"receiveEvent\"\n  ></canvas>\n</template>\n\n<script setup lang=\"ts\">\nimport { onReady } from '@dcloudio/uni-app'\nimport { Leafer, Rect, useCanvas } from '@leafer-ui/miniapp'\n\nuseCanvas('canvas', uni) // 绑定平台全局变量\n\nlet leafer: Leafer\n\nonReady(() => {\n  leafer = new Leafer({ view: 'leafer' })\n\n  const rect = new Rect({\n    x: 100,\n    y: 100,\n    width: 100,\n    height: 100,\n    fill: '#32cd79',\n    draggable: true,\n  })\n\n  leafer.add(rect)\n})\n\nfunction receiveEvent(event: TouchEvent) {\n  leafer.receiveEvent(event) // 需手动接收、传递画布交互事件给leafer\n}\n</script>\n\n<style>\npage {\n  height: 100%;\n}\n#leafer {\n  width: 100%;\n  height: 100%;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Installing Leafer.js View Plugin with pnpm\nDESCRIPTION: This command installs the `@leafer-in/view` plugin using pnpm. It allows for view control functionalities within Leafer.js applications. This is one of the package manager installation options.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/view/index.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @leafer-in/view\n```\n\n----------------------------------------\n\nTITLE: Drawing Curves with Pen - App\nDESCRIPTION: This snippet presents the application code for drawing curves using the Pen element. It shows the integration of the Leafer curve drawing functionality into the application environment. This snippet likely handles setup and coordination of the Leafer component.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Pen.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Pen/app/line.ts [App]\n```\n\n----------------------------------------\n\nTITLE: Press Style Implementation\nDESCRIPTION: This code snippet demonstrates how to use the `pressStyle` property to change the background color of a UI element when the mouse button is pressed. The `pressStyle` property accepts an `IUIInputData` object, allowing for customization of various UI properties.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/state/press.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/state/pressStyle.ts\n```\n\n----------------------------------------\n\nTITLE: Installing core dependencies\nDESCRIPTION: Dependencies that must be manually installed when experiencing a 'module not defined' error.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/ui/miniapp/start.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n@leafer/core\n@leafer-ui/core\n@leafer-ui/draw\n```\n\n----------------------------------------\n\nTITLE: Installing @napi-rs/canvas with bun\nDESCRIPTION: This command installs the @napi-rs/canvas package using bun. @napi-rs/canvas is required to replace Canvas functionality in a server-side environment.  It is based on skia and is a high-performance, zero-system-dependency library.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/editor/node/napi.md#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nbun add @napi-rs/canvas\n```\n\n----------------------------------------\n\nTITLE: Installing Leafer Robot plugin with NPM\nDESCRIPTION: Installs the @leafer-in/robot plugin using npm. This plugin provides the Robot element for creating animated characters within Leafer.js. It is required to use the Robot element.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/robot/index.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @leafer-in/robot\n```\n\n----------------------------------------\n\nTITLE: Smooth Polygon App Implementation - Typescript\nDESCRIPTION: This snippet (from app/curve.ts) shows the app-specific implementation of a smooth polygon using Leafer.js Polygon element and Typescript. The actual code is dynamically included via the <<< syntax.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Polygon.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Polygon/app/curve.ts [App]\n```\n\n----------------------------------------\n\nTITLE: Finding elements by tag in LeaferJS\nDESCRIPTION: This code snippet demonstrates how to find elements by their tag (class name) using the `find()` method in LeaferJS. It requires the `find` plugin to be installed. It uses a root element and searches for elements with the tag 'tag'.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/tag.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// 查找元素\nroot.find('tag')\n\n// 查找一个元素\nroot.findOne('tag')\n\n```\n\n----------------------------------------\n\nTITLE: Installing LeaferJS Export Plugin with Yarn\nDESCRIPTION: Installs the @leafer-in/export plugin using yarn. This allows you to use the export functionality within your LeaferJS project. Requires yarn to be installed and configured in your environment.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/export/index.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @leafer-in/export\n```\n\n----------------------------------------\n\nTITLE: Installing Leafer Flow and Resize Plugins\nDESCRIPTION: These commands install the @leafer-in/flow and @leafer-in/resize plugins using npm, pnpm, yarn, and bun.  These plugins are required to use the Flow element for automatic layout. Installation makes the Flow element available within LeaferJS.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/flow/index.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nyarn add @leafer-in/flow\nyarn add @leafer-in/resize\n```\n\n----------------------------------------\n\nTITLE: Reverse Animation with Ease (Transition)\nDESCRIPTION: Shows how to apply the 'reverse' property in a transition animation using the Leafer.js Animate plugin. This snippet defines a transition with specified easing and a reversed direction. It illustrates setting up a transition to animate properties backwards.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/animate/options/reverse.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/animate/options/reverse/transition/ease.ts [transition]\n```\n\n----------------------------------------\n\nTITLE: Defining BlendMode Type in TypeScript\nDESCRIPTION: This code snippet defines the BlendMode type as a union of string literals in TypeScript. It lists all available blend modes, including 'pass-through', 'normal', 'multiply', 'darken', 'color-burn', 'lighten', 'color-dodge', 'screen', 'overlay', 'hard-light', 'soft-light', 'difference', 'exclusion', 'hue', 'saturation', 'color', and 'luminosity'. It provides type safety and autocompletion for blend mode options.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/interface/ui/BlendMode.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype BlendMode =\n  | 'pass-through' // 穿透，性能最好\n  | 'normal' // 正常，会单独绘制在一个层上，大量使用会有性能问题\n  | 'multiply' // 正片叠底---\n  | 'darken' // 变暗\n  | 'color-burn' // 颜色加深\n  | 'lighten' // 变亮---\n  | 'color-dodge' // 颜色减淡\n  | 'screen' // 滤色\n  | 'overlay' // 叠加---\n  | 'hard-light' // 强光\n  | 'soft-light' // 柔光\n  | 'difference' // 差集---\n  | 'exclusion' // 排除\n  | 'hue' // 色相 ---\n  | 'saturation' // 饱和度\n  | 'color' // 颜色\n  | 'luminosity' // 明度\n```\n\n----------------------------------------\n\nTITLE: Installing @leafer-draw/worker with yarn\nDESCRIPTION: This snippet shows how to install the @leafer-draw/worker package using yarn. It adds the package to your project's dependencies, allowing you to use it in your application.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/draw/worker/start.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @leafer-draw/worker\n```\n\n----------------------------------------\n\nTITLE: Export to Binary Data (Blob)\nDESCRIPTION: Shows how to export a LeaferJS element to binary data represented as a Blob.  Blobs are suitable for handling large amounts of binary data, such as images or audio. Requires the LeaferJS export plugin.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/basic/export.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/export/blob.ts\n```\n\n----------------------------------------\n\nTITLE: Animate Duration within Animate Class (Ease)\nDESCRIPTION: Illustrates how the duration property is used within the `Animate` class in Leafer.js. It demonstrates how `duration` is integrated as part of the overall animation management within the class. This snippet emphasizes the `duration`'s location within the larger system.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/animate/options/duration.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/animate/options/duration/ease.ts [Animate]\n```\n\n----------------------------------------\n\nTITLE: Installing Leafer Robot plugin with Bun\nDESCRIPTION: Installs the @leafer-in/robot plugin using Bun. This plugin provides the Robot element for creating animated characters within Leafer.js. It is required to use the Robot element.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/robot/index.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nbun add @leafer-in/robot\n```\n\n----------------------------------------\n\nTITLE: Destroying on Unload\nDESCRIPTION: This code shows how to listen for the browser unload event and automatically destroy the Leafer instance. This ensures that resources are properly released when the page is closed or navigated away from.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Leafer.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Loading Custom Control Points Example (Javascript)\nDESCRIPTION: Demonstrates how to load custom control points into the view during the `onLoad()` lifecycle method of the inner editor. This method is automatically called when the user opens the inner editor. The exact code example is not provided in this text, but it is located in the specified Javascript file.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/editInner/load.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<<< @/code/plugin/editor/editInner/load/index.js\n```\n\n----------------------------------------\n\nTITLE: Installing skia-canvas with npm\nDESCRIPTION: Installs the skia-canvas package using npm. This package provides Canvas functionality in server-side environments based on Skia. Installation may take a while due to compilation.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/game/node/start.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm install skia-canvas\n```\n\n----------------------------------------\n\nTITLE: Installing leafer-game with pnpm\nDESCRIPTION: This code snippet demonstrates how to install the leafer-game package using pnpm. It uses the `pnpm add` command to add the package to the project's dependencies. This requires Node.js and pnpm to be installed on the system.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/game/start.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add leafer-game\n```\n\n----------------------------------------\n\nTITLE: Text Align Type\nDESCRIPTION: Defines the TypeScript type for text alignment options, including left, center, right, justify, and both (for forced justification).\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Text.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntype ITextAlign =\n  | 'left' // 左对齐\n  | 'center' // 居中对齐\n  | 'right' // 右对齐\n  | 'justify' // 两端对齐段落\n  | 'both' // 强制两端对齐文本，补充 justify 的不足\n```\n\n----------------------------------------\n\nTITLE: Installing LeaferJS Find Plugin with npm\nDESCRIPTION: This command installs the @leafer-in/find package using npm. It adds the plugin as a dependency to your project, allowing you to use its functionalities for finding elements within a LeaferJS application.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/find/index.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @leafer-in/find\n```\n\n----------------------------------------\n\nTITLE: Install LeaferJS Color Plugin with PNPM\nDESCRIPTION: Installs the @leafer-in/color plugin using pnpm. This command adds the color functionalities to the LeaferJS project, enabling color format conversions and name-to-value lookups. Requires pnpm to be installed.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/color/index.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\npnpm add @leafer-in/color\n```\n\n----------------------------------------\n\nTITLE: Installing @leafer-game/node with yarn\nDESCRIPTION: Installs the @leafer-game/node package using yarn, another popular package manager.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/game/node/start.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @leafer-game/node\n```\n\n----------------------------------------\n\nTITLE: Installing leafer-ui via pnpm\nDESCRIPTION: This command installs the leafer-ui package using pnpm. pnpm is an alternative package manager that offers space efficiency and faster installation times.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/ui/start.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add leafer-ui\n```\n\n----------------------------------------\n\nTITLE: Drawing Curve - Leafer Component (TypeScript)\nDESCRIPTION: This code snippet (Leafer part) demonstrates the process of drawing a smooth curve using the Line element in Leafer.js. It represents the Leafer component's implementation, which is usually complemented by an App component.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Line.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Line/curve.ts [Leafer]\n```\n\n----------------------------------------\n\nTITLE: Pentagon App Implementation - Typescript\nDESCRIPTION: This snippet (from app/pentagon.ts) shows the app-specific implementation of a pentagon using Leafer.js Polygon element and Typescript. The actual code is dynamically included via the <<< syntax.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Polygon.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Polygon/app/pentagon.ts [App]\n```\n\n----------------------------------------\n\nTITLE: Flow Layout Auto Height Example\nDESCRIPTION: This TypeScript code snippet demonstrates how to utilize the `autoHeight` property in Leaferjs's flow layout to automatically adjust the height of an element based on the available space.  It typically involves setting the `autoHeight` property to a value greater than 0 (e.g., 1) on a UI element within a flow layout container. This will cause the element to expand and fill the remaining vertical space.  Dependencies include Leaferjs core and potentially any relevant plugin for the flow layout functionality.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/flow/Flow/autoHeight.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/flow/autoHeight/height.ts\n```\n\n----------------------------------------\n\nTITLE: Install @leafer-editor/node with pnpm\nDESCRIPTION: Installs the @leafer-editor/node package using pnpm, a fast, disk space efficient package manager.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/editor/node/start.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @leafer-editor/node\n```\n\n----------------------------------------\n\nTITLE: RGB Interface Definition - Typescript\nDESCRIPTION: Defines the `RGB` interface with `r`, `g`, and `b` properties, each of which is a number representing the red, green, and blue components of a color. The values are expected to be in the range of 0 to 255.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/interface/ui/Color.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RGB {\n  r: number\n  g: number\n  b: number\n}\n```\n\n----------------------------------------\n\nTITLE: IRepeat Type Definition Typescript\nDESCRIPTION: Defines the `IRepeat` type, representing how an image should be repeated along the x and y axes when using the `repeat` mode in `ImagePaint`. It can be set to boolean value which repeats in both direction or 'x' or 'y' to repeat only in the specified direction.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/paint/image.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype IRepeat = boolean | 'x' | 'y'\n```\n\n----------------------------------------\n\nTITLE: Installing LeaferJS State Plugin with PNPM\nDESCRIPTION: This snippet demonstrates how to install the LeaferJS state plugin using pnpm. The plugin allows you to easily add interactive states to your LeaferJS elements. Make sure you have pnpm installed and configured in your project.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/state/index.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @leafer-in/state\n```\n\n----------------------------------------\n\nTITLE: Installing @leafer-game/worker with npm\nDESCRIPTION: This command installs the @leafer-game/worker package using npm. It adds the package as a dependency to your project, allowing you to utilize its functionalities for game development within a Web Worker environment. No specific input or output is generated by this command other than the installation process.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/game/worker/start.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @leafer-game/worker\n```\n\n----------------------------------------\n\nTITLE: Inner Distance Conversion (Leafer)\nDESCRIPTION: This snippet demonstrates how to convert movement distances using the `distance` parameter. It showcases converting the distance moved, rather than absolute coordinates. Requires the Leafer framework.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/point/index.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/point/move.ts\n```\n\n----------------------------------------\n\nTITLE: Install @leafer-draw/node with npm\nDESCRIPTION: Installs the @leafer-draw/node package using npm. This package provides drawing capabilities for Node.js environments. No dependencies are required beyond a Node.js environment.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/draw/node/napi.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @leafer-draw/node\n```\n\n----------------------------------------\n\nTITLE: Creating Matrix via Data Object - Typescript\nDESCRIPTION: Creates a new Matrix object from a data object containing the matrix properties (a, b, c, d, e, f).  This provides an alternative initialization method using an object literal.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/math/Matrix.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst matrixData = { a: 2, b: 0, c: 0, d: 2, e: 100, f: 100 }\n\nconst matrix = new Matrix(matrixData)\n```\n\n----------------------------------------\n\nTITLE: Smooth Polygon (Custom Curvature) App Implementation - Typescript\nDESCRIPTION: This snippet (from app/curve-number.ts) shows the app implementation of a smooth polygon with custom curvature using Leafer.js and Typescript. The actual code is dynamically included via the <<< syntax.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Polygon.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Polygon/app/curve-number.ts [App]\n```\n\n----------------------------------------\n\nTITLE: BlurEffect Interface Definition\nDESCRIPTION: This code defines the `BlurEffect` interface in TypeScript. It specifies the structure for configuring background blur effects, including the blur intensity (number) and visibility (boolean). The interface is used for the `backgroundBlur` property of UI elements in LeaferJS.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/backgroundBlur.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface BlurEffect {\n  blur: number\n  visible?: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @leafer-editor/worker with Yarn\nDESCRIPTION: This command installs the @leafer-editor/worker package using the yarn package manager. It adds the package to your project's dependencies, allowing you to use its functionalities.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/editor/worker/start.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @leafer-editor/worker\n```\n\n----------------------------------------\n\nTITLE: BlurEffect Interface Definition\nDESCRIPTION: Defines the `BlurEffect` interface in TypeScript. This interface allows configuring the blur amount and visibility of the blur effect. The `blur` property specifies the blur radius, and the `visible` property controls whether the blur effect is applied.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/blur.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface BlurEffect {\n  blur: number\n  visible?: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Leaferjs Middle Point Style Configuration (TypeScript)\nDESCRIPTION: Shows how to display and modify the style of the middle control points in the Leaferjs editor using TypeScript. It allows for precise customization of individual control point styles. It assumes a basic Leaferjs project setup and familiarity with editor configuration options.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/index.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/editor/config/middle.ts\n```\n\n----------------------------------------\n\nTITLE: Viewport Configuration (Leafer)\nDESCRIPTION: This is a placeholder for the actual code. The code demonstrates how to configure the viewport type for the Leafer in Leafer.js. Viewport allows scaling and moving of the view with scroll/touchpad.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/config/app/type.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/app/config/type/viewport.ts [Leafer]\n```\n\n----------------------------------------\n\nTITLE: Define Text Overflow Type\nDESCRIPTION: Defines how text overflow is handled.  It can be set to 'show' or 'hide', similar to the general overflow.  Additionally, it allows a custom string to be used as an ellipsis when text is clipped, for example using \"...\".\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/clip.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype IOverflow = 'show' | 'hide'\n\n// 自定义省略内容\n\ntext.textOverflow = '...'\n```\n\n----------------------------------------\n\nTITLE: Styling canvases for the graphics editor App (index.wxss)\nDESCRIPTION: Styles the canvases for the graphics editor app. It sets the height of the page to 100%, and the width and height of each canvas (#leafer, #leafer-tree, #leafer-sky) to 100%.  It also sets the position of the #leafer-tree and #leafer-sky canvases to absolute, allowing them to overlay each other.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/editor/miniapp/start.md#_snippet_10\n\nLANGUAGE: css\nCODE:\n```\npage {\n  height: 100%;\n}\n#leafer {\n  width: 100%;\n  height: 100%;\n}\n#leafer-tree {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n}\n#leafer-sky {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n}\n```\n\n----------------------------------------\n\nTITLE: Install @leafer-draw/node with pnpm\nDESCRIPTION: Installs the @leafer-draw/node package using pnpm. This provides drawing capabilities for Node.js environments. No dependencies are required beyond a Node.js environment.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/draw/node/napi.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @leafer-draw/node\n```\n\n----------------------------------------\n\nTITLE: Right Flow Alignment Typescript\nDESCRIPTION: Example code aligning elements to the right using `flowAlign` set to `'right'`.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/flow/Flow/flowAlign.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/flow/flowAlign/right.ts\n```\n\n----------------------------------------\n\nTITLE: Adding or Removing Leafer Dependencies (npm)\nDESCRIPTION: This command allows users to add or remove Leafer dependencies in their project. It guides the user through an interactive process to select the desired dependencies. The project must already include Leafer related dependencies for the command to run successfully.\nSOURCE: https://github.com/leaferjs/docs/blob/main/create/leafer.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm create leafer@latest add\n```\n\n----------------------------------------\n\nTITLE: Disable Local Rendering for Leafer Config - Typescript\nDESCRIPTION: This code snippet demonstrates how to disable local rendering within the Leafer configuration.  Similar to the App config, this is done when accurate bounding box determination is not possible. It modifies the `partRender` property in the Leafer instance.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/advanced/partRender.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/app/config/partRender.ts [Leafer]\n```\n\n----------------------------------------\n\nTITLE: Importing leafer-game as ES module (module.min)\nDESCRIPTION: This code snippet demonstrates how to import leafer-game as an ES module, specifically the minified version.  It imports `Leafer`, `Editor`, and `Arrow` directly from the `web.module.min.js` file hosted on unpkg. This approach is compatible with modern browsers and module bundlers.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/game/start.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import {\n    Leafer,\n    Editor,\n    Arrow,\n  } from 'https://unpkg.com/leafer-game@1.5.3/dist/web.module.min.js'\n  // ...\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing leafer-game with script tag (web.min)\nDESCRIPTION: This code snippet demonstrates how to import leafer-game using a script tag, specifically the minified web version. It loads the `web.min.js` file from unpkg and then accesses `Leafer`, `Robot`, and `Animate` from the `LeaferUI` global object. This method is suitable for direct use in HTML files without a module bundler.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/game/start.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/leafer-game@1.5.3/dist/web.min.js\"></script>\n<script>\n  const { Leafer, Robot, Animate } = LeaferUI\n  // ...\n</script>\n```\n\n----------------------------------------\n\nTITLE: Design Viewport Configuration Implementation\nDESCRIPTION: This is a placeholder for the actual code. The code demonstrates the implementation principles of design viewport in Leafer.js. It explains the underlying logic for graphic editing, design products.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/config/app/type.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/app/config/type/origin/design.ts [实现原理]\n```\n\n----------------------------------------\n\nTITLE: Displaying Right-Click Menu (Typescript)\nDESCRIPTION: This code snippet demonstrates how to display a right-click menu in a graphics editor using PointerEvent. It is written in Typescript.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/event/ui/Pointer.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/event-ui/pointer/editor-menu.ts\n```\n\n----------------------------------------\n\nTITLE: Resizing Leafer - Javascript\nDESCRIPTION: This JavaScript code demonstrates how to handle the ResizeEvent in Leafer. It shows how to access the new width, height and pixel ratio after the resize. This code snippet is used to illustrate the usage of the ResizeEvent in a Leafer application.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/event/basic/Resize.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<<< @/code/event/leafer/resize.js\n```\n\n----------------------------------------\n\nTITLE: Installing @leafer-draw/miniapp with npm\nDESCRIPTION: These commands demonstrate how to install the @leafer-draw/miniapp package using various package managers (npm, pnpm, yarn, and bun).  Choose the command that corresponds to your preferred package manager.  This installs the necessary dependencies for using the library in your project.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/draw/miniapp/start.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @leafer-draw/miniapp\n```\n\n----------------------------------------\n\nTITLE: Installing @leafer-game/worker with bun\nDESCRIPTION: This command installs the @leafer-game/worker package using bun. It adds the package as a dependency to your project for Web Worker game development. No input or output except the installation.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/game/worker/start.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nbun add @leafer-game/worker\n```\n\n----------------------------------------\n\nTITLE: BlendMode Difference Example Typescript\nDESCRIPTION: Example code demonstrating the 'difference' blend mode. The bottom layer is subtracted from the top layer (or vice versa), always resulting in a positive value. The code is assumed to be in a file named difference.ts.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/blendMode.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/blendMode/difference.ts\n```\n\n----------------------------------------\n\nTITLE: Dropping elements into a Group (JavaScript)\nDESCRIPTION: This JavaScript code snippet demonstrates how to handle the DropEvent for placing elements into a Group in Leaferjs. It provides the equivalent implementation in JavaScript for handling the drop event and associated UI interactions.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/event/ui/Drop.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<<< @/code/event-ui/drop/simple.js\n```\n\n----------------------------------------\n\nTITLE: Installing @leafer-ui/miniapp with bun\nDESCRIPTION: This snippet demonstrates how to install the @leafer-ui/miniapp package using bun. It will add the required dependencies to your project.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/ui/miniapp/start.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nbun add @leafer-ui/miniapp\n```\n\n----------------------------------------\n\nTITLE: SolidPaintString SCSS Example\nDESCRIPTION: Illustrates the usage of SolidPaintString in SCSS to define solid color fills. It covers specifying color, blend mode, opacity, and visibility using a string shorthand notation.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/interface/ui/String.md#_snippet_4\n\nLANGUAGE: scss\nCODE:\n```\n// 参数模版\ncolor blendMode? opacity? visible? // 逗号分隔多个颜色\n\n// 应用示例\nfill: #ff0000; // color\nfill: #ff0000 darken; // color, blendMode\nfill: #ff0000 100% hide, #ffff0080; // color, opacity, visible\n```\n\n----------------------------------------\n\nTITLE: ColorStop Interface Definition - Typescript\nDESCRIPTION: Defines the `ColorStop` interface, which represents a color stop in a gradient. It includes an `offset` property (number) indicating the position of the color stop along the gradient, and a `color` property of type `Color` representing the color at that stop.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/interface/ui/Color.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ColorStop {\n  offset: number\n  color: Color\n}\n```\n\n----------------------------------------\n\nTITLE: Leafer.js Render Event Example\nDESCRIPTION: This code snippet illustrates an example usage of render events within Leafer.js. It demonstrates how to listen for and respond to specific rendering events, such as before, render, and after events.  The specific implementation depends on the actual content of the imported file.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/event/basic/Render.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/event/leafer/render.ts\n```\n\n----------------------------------------\n\nTITLE: Installing @leafer-draw/miniapp with yarn\nDESCRIPTION: These commands demonstrate how to install the @leafer-draw/miniapp package using various package managers (npm, pnpm, yarn, and bun).  Choose the command that corresponds to your preferred package manager.  This installs the necessary dependencies for using the library in your project.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/draw/miniapp/start.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @leafer-draw/miniapp\n```\n\n----------------------------------------\n\nTITLE: Using dataType Decorator in Leafer UI (TypeScript)\nDESCRIPTION: This code snippet demonstrates the usage of the `@dataType` decorator, which defines a property as a basic data type. This is typically used for properties that don't directly affect the UI, such as `id` or `name`. Properties with `@dataType` do not trigger UI updates when modified.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/custom/attr.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n  @dataType()\n  public name: number\n```\n\n----------------------------------------\n\nTITLE: Initializing Leafer with Fixed Size by ID - Typescript\nDESCRIPTION: This code snippet illustrates how to initialize a Leafer instance using an element's ID as the view parameter.  It assumes an element with the provided ID exists in the DOM.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/basic/leafer.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Installing @leafer-draw/worker with bun\nDESCRIPTION: This snippet shows how to install the @leafer-draw/worker package using bun. It adds the package to your project's dependencies, allowing you to use it in your application.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/draw/worker/start.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nbun add @leafer-draw/worker\n```\n\n----------------------------------------\n\nTITLE: Editor Scale Event Example (resize)\nDESCRIPTION: Example code showing how to use the EditorScaleEvent to handle element scaling (resizing) in leaferjs. This assumes the code resides in a file named scale.ts within the @/code/plugin/editor/event/ directory. The provided snippet (represented by '<<< @/code/plugin/editor/event/scale.ts') from the actual scale.ts file should demonstrate usage of the described event.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/event/EditorScaleEvent.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nSee @/code/plugin/editor/event/scale.ts for the actual code snippet example.\n```\n\n----------------------------------------\n\nTITLE: Dragon Flight Path Setup\nDESCRIPTION: This snippet sets up the dragon's flight path, which can be created either by user input (mouse drawing) or through an automatically generated path. This is the first step in creating the \"Drawing Dragon\" game.\nSOURCE: https://github.com/leaferjs/docs/blob/main/contest/guide.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/contest/dragon/step1.ts\n```\n\n----------------------------------------\n\nTITLE: Installing @leafer-in/html with pnpm\nDESCRIPTION: Install the @leafer-in/html plugin using pnpm to enable HTMLText functionality in LeaferJS. This command adds the plugin to your project's dependencies.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/html/index.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @leafer-in/html\n```\n\n----------------------------------------\n\nTITLE: Drawing Vertical Line - App Component (TypeScript)\nDESCRIPTION: This code snippet (App part) is about integrating the Leafer component into a broader application, where the Leafer component draws a vertical line. This portion outlines the application-level specifics of how this component interacts within the larger context.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Line.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Line/app/vertical.ts [App]\n```\n\n----------------------------------------\n\nTITLE: IOptionSizeData Interface Definition Typescript\nDESCRIPTION: Defines the `IOptionSizeData` interface, which allows setting the width or height of an image while maintaining its aspect ratio. If both width and height are provided, the image will be stretched to fit the specified dimensions.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/paint/image.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// 单独设置宽或高，另一边可自适应原始比例，同时设置宽高会拉伸\ninterface IOptionSizeData {\n  width?: number // 宽度，当单独设置宽度时，高度自适应原始比例\n  height?: number // 高度，当单独设置高度时，宽度自适应原始比例\n}\n```\n\n----------------------------------------\n\nTITLE: Register a Custom Element (TypeScript)\nDESCRIPTION: This code snippet, located at '@/code/display/Custom/base/register/index.ts', shows how to register a custom element in Leafer.js using TypeScript. The exact implementation details are not available, but it involves using a 'registerUI()' method to associate a tag name with the custom element class.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/custom/base/register.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Custom/base/register/index.ts\n```\n\n----------------------------------------\n\nTITLE: Importing @leafer-game/worker via importScripts (minified)\nDESCRIPTION: This code imports the minified version of the @leafer-game/worker library into a Web Worker environment using `importScripts`. It makes the library's functionality accessible through the global `LeaferUI` variable. The script is fetched from unpkg CDN. Requires network access to unpkg.com.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/game/worker/start.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimportScripts('https://unpkg.com/@leafer-game/worker@1.5.3/dist/worker.min.js')\n```\n\n----------------------------------------\n\nTITLE: Custom Element Data Class Registration (JavaScript)\nDESCRIPTION: This snippet shows an example of how to define and register a custom data processing class in JavaScript for a custom element in Leaferjs. It involves creating a data processing class and registering the class. Note that the interfaces and type definitions common in TypeScript may not exist here.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/custom/base/data.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// @/code/display/Custom/base/data/index.js\n```\n\n----------------------------------------\n\nTITLE: IMatrixData Interface Definition\nDESCRIPTION: Defines the `IMatrixData` interface, which represents a 2D transformation matrix.  It includes properties for `a`, `b`, `c`, `d`, `e` (tx), and `f` (ty). `e` and `f` represent the translation components of the matrix.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/interface/math/Math.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IMatrixData {\n  a: number\n  b: number\n  c: number\n  d: number\n  e: number // tx\n  f: number // ty\n}\n```\n\n----------------------------------------\n\nTITLE: Installing leafer-ui via yarn\nDESCRIPTION: This command installs the leafer-ui package using yarn. Yarn is another popular package manager known for its speed, reliability, and security.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/ui/start.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add leafer-ui\n```\n\n----------------------------------------\n\nTITLE: Transition Options Definition (ITransition)\nDESCRIPTION: Defines the types allowed for transition options in Leafer.js animations. It can be an animation options object, an easing name string, or a duration number.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/animate.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// 过渡选项，  object 表示动画选项对象， number 表示duration，  string 表示  easing\ntype ITransition = IAnimateOptions | IAnimateEasingName | number\n```\n\n----------------------------------------\n\nTITLE: Installing @leafer-ui/worker using bun\nDESCRIPTION: Installs the @leafer-ui/worker package using bun.  This is another option for including the LeaferUI library in your project's Web Worker environment using a faster javascript runtime. The package is installed from the bun registry.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/ui/worker/start.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nbun add @leafer-ui/worker\n```\n\n----------------------------------------\n\nTITLE: Importing Scroll Plugin with script tag (minified)\nDESCRIPTION: Imports the ScrollBar plugin using a script tag, accessing its functionality through the global LeaferIN.scroll object. This method requires including the scroll.min.js file in your HTML.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/scroll/index.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/@leafer-in/scroll@1.5.3/dist/scroll.min.js\"></script>\n<script>\n  const { ScrollBar } = LeaferIN.scroll\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing Editor and Resize Plugins via Script Tags (editor)\nDESCRIPTION: This snippet shows how to import the @leafer-in/editor and @leafer-in/resize plugins using script tags. This method allows you to use the plugins without a package manager, by directly including the JavaScript files in your HTML. It accesses the Editor class via the global LeaferIN.editor object.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/index.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/@leafer-in/editor@1.5.3/dist/editor.js\"></script>\n<script src=\"https://unpkg.com/@leafer-in/resize@1.5.3/dist/resize.js\"></script>\n<script>\n  const { Editor } = LeaferIN.editor\n</script>\n```\n\n----------------------------------------\n\nTITLE: WXML for Leafer App with Multiple Canvases\nDESCRIPTION: This XML snippet configures the WXML structure required to host multiple canvases for the Leafer App (tree and sky). It ensures that touch events are captured and passed to the `receiveEvent` method for interaction.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/ui/miniapp/start.md#_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<view\n    id=\"leafer\"\n    catchtouchstart=\"receiveEvent\"\n    catchtouchmove=\"receiveEvent\"\n    catchtouchend=\"receiveEvent\"\n    catchtouchcancel=\"receiveEvent\"\n>\n<canvas id=\"leafer-tree\"  type=\"2d\"></canvas>\n<canvas id=\"leafer-sky\" type=\"2d\"></canvas>\n</view>\n```\n\n----------------------------------------\n\nTITLE: Defining FlowWrap type\nDESCRIPTION: This TypeScript code snippet defines the `IFlowWrap` type, which specifies whether automatic line wrapping is enabled. It can be a boolean value or the string 'reverse', indicating that the row order should be reversed.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/flow/Flow/flowWrap.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype IFlowWrap = boolean | 'reverse' // reverse表示颠倒行顺序\n```\n\n----------------------------------------\n\nTITLE: IExportResult Interface Definition\nDESCRIPTION: Defines the `IExportResult` interface, which represents the result of an export operation.  It includes the exported data (as a canvas, blob, string, or boolean), the width and height of the image, and the render and trim bounds for further processing.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/export.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IExportResult {\n  data: ILeaferCanvas | IBlob | string | boolean // data为无时表示导出失败\n\n  width?: number // 图片宽度(实际像素)\n  height?: number // 图片高度(实际像素)\n\n  renderBounds?: IBoundsData // 相对父元素的导出bounds，可用于切图定位还原\n  trimBounds?: IBoundsData // 裁剪透明像素后的bounds，相对导出bounds，可用于切图定位还原\n}\n```\n\n----------------------------------------\n\nTITLE: Animate Color example in Leafer.js\nDESCRIPTION: This is a placeholder for the code from @/code/property/animation/color.ts.  The actual code would demonstrate how to animate the color property of Leafer.js UI elements. It likely involves using the animation or transition APIs to modify color values over time.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/plugin/animate.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nPlaceholder for @/code/property/animation/color.ts\n```\n\n----------------------------------------\n\nTITLE: Child Event Example (TypeScript)\nDESCRIPTION: Demonstrates the usage of child events in Leafer.js using TypeScript. It likely shows how to listen for and handle events like ADD and REMOVE on a Leafer.js element.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/event/basic/Child.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/event/leafer/child.ts\n```\n\n----------------------------------------\n\nTITLE: Globally Installing create-leafer (npm)\nDESCRIPTION: This command installs the create-leafer tool globally, allowing it to be used from any directory. It is recommended to update regularly to use the latest features.  Alternatively, using `npm create leafer@latest` avoids the need for global installation and ensures the latest version is used.\nSOURCE: https://github.com/leaferjs/docs/blob/main/create/leafer.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -g create-leafer@latest\n```\n\n----------------------------------------\n\nTITLE: Path Animation in LeaferJS (path.ts)\nDESCRIPTION: This code snippet showcases the implementation of path animation in LeaferJS. It allows an element to move along a specified path, or animate its own stroke. The snippet is part of a plugin that's still in development. It utilizes LeaferJS's animation capabilities to smoothly move elements along a defined path.\nSOURCE: https://github.com/leaferjs/docs/blob/main/blog/2024-09-20.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/animate/path.ts\n```\n\n----------------------------------------\n\nTITLE: Listening for Image Error Event (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to listen for the image error event using TypeScript. This allows you to handle cases where the image fails to load.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Image.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/event/image/error.ts\n```\n\n----------------------------------------\n\nTITLE: Install skia-canvas with bun\nDESCRIPTION: Installs the skia-canvas package using bun. skia-canvas provides Canvas functionality in server-side environments, based on the Skia graphics library.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/editor/node/start.md#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nbun add skia-canvas\n```\n\n----------------------------------------\n\nTITLE: SVG Pattern Fill in Leaferjs\nDESCRIPTION: This snippet shows how to use an SVG image as a pattern fill in Leaferjs, demonstrating the use of SVGs to fill shapes like rectangles. It exemplifies the usage of pattern fills for graphical elements. The code requires the Leaferjs library to be properly installed and configured.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/SVG.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/SVG/svg-rect.ts\n```\n\n----------------------------------------\n\nTITLE: Installing skia-canvas with pnpm\nDESCRIPTION: Installs the skia-canvas package using pnpm.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/game/node/start.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\npnpm add skia-canvas\n```\n\n----------------------------------------\n\nTITLE: Dropping elements into a Group (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to handle the DropEvent to place elements into a Group in Leaferjs using TypeScript.  It shows the basic implementation for handling a drop event and integrating it with UI elements.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/event/ui/Drop.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/event-ui/drop/simple.ts\n```\n\n----------------------------------------\n\nTITLE: Animate Keyframes example in Leafer.js\nDESCRIPTION: This is a placeholder for the code from @/code/property/animation/keyframes.ts.  The actual code would demonstrate the use of keyframes to create complex animations in Leafer.js. It likely involves defining a sequence of property values at specific times and using the animation API to interpolate between them.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/plugin/animate.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nPlaceholder for @/code/property/animation/keyframes.ts\n```\n\n----------------------------------------\n\nTITLE: Renaming Star Element Points Property (TS)\nDESCRIPTION: This snippet documents the change in the Star element where the `points` property has been renamed to `corners`. This change affects how developers define the shape of Star elements within LeaferJS.\nSOURCE: https://github.com/leaferjs/docs/blob/main/update/index.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\npoints 属性变为 corners\n```\n\n----------------------------------------\n\nTITLE: Drawing Diagonal Line - App Component (TypeScript)\nDESCRIPTION: This code snippet (App part) showcases how the Leafer component, designed to draw a diagonal line, is integrated within a larger application. It uses the Leafer component's implementation to render the diagonal line as part of the overall application layout.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Line.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Line/app/line.ts [App]\n```\n\n----------------------------------------\n\nTITLE: Custom Viewport Configuration Implementation\nDESCRIPTION: This is a placeholder for the actual code. The code demonstrates the implementation principles of custom viewport in Leafer.js. It explains the underlying logic custom scaling and moving.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/config/app/type.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/app/config/type/origin/custom.ts [实现原理]\n```\n\n----------------------------------------\n\nTITLE: Showing Repaint Areas - Leaferjs (Typescript)\nDESCRIPTION: This code snippet shows how to enable the visualization of repaint areas in the Leaferjs application by setting the `Debug.showRepaint` property to `true`.  This can be useful for identifying performance bottlenecks related to unnecessary repaints.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/debug/basic.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nDebug.showRepaint = true\n```\n\n----------------------------------------\n\nTITLE: Importing leafer-game with script tag (web)\nDESCRIPTION: This code snippet demonstrates how to import leafer-game using a script tag, specifically the unminified web version. It loads the `web.js` file from unpkg and then accesses `Leafer`, `Robot`, and `Animate` from the `LeaferUI` global object. This method is suitable for direct use in HTML files without a module bundler.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/game/start.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/leafer-game@1.5.3/dist/web.js\"></script>\n<script>\n  const { Leafer, Robot, Animate } = LeaferUI\n  // ...\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Group element with add() method (Leafer)\nDESCRIPTION: Demonstrates how to create a Group element and add child elements to it using the `add()` method in Leafer.  The code shows the basic structure for creating and adding children to a Leafer Group. It requires Leafer core library.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Group.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Group/create.ts [Leafer]\n```\n\n----------------------------------------\n\nTITLE: Creating a Rect Element Using a Tag\nDESCRIPTION: This code snippet demonstrates how to create a Rect element in Leafer.js using a tag-based approach. It highlights the use of a specific tag or identifier for creating and referencing the rectangle.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/basic/display.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/basic/display/tag.ts\n```\n\n----------------------------------------\n\nTITLE: Disable Hit Children Interaction in Leafer.js\nDESCRIPTION: This code snippet demonstrates how to disable interaction with child elements by setting the `hitChildren` property to `false`. This prevents events from being propagated to the children, effectively making them non-interactive. It is part of the hitChildren property documentation.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/hitChildren.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UIRect } from '@leafer/ui'\n\nconst rect = new UIRect()\n\nrect.width = 100\nrect.height = 100\nrect.fill = 'red'\n\nrect.hitChildren = false // disable hit children\n\n```\n\n----------------------------------------\n\nTITLE: Keyframe Object Definition (IKeyframe)\nDESCRIPTION: Defines the structure of a keyframe object used in Leafer.js animations. It includes properties for styling, easing, delay, duration, swing, loop, and automatic delay/duration calculations based on weight.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/animate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// 关键帧对象\ntype IKeyframe = IUIInputData | IAnimateKeyframe\n\ninterface IAnimateKeyframe {\n  style: IUIInputData // 元素样式\n\n  easing?: IAnimateEasing // 单独设置关键帧缓动方式\n  delay?: number // 单独设置关键帧延迟播放时长。\n  duration?: number // 单独设置关键帧的固定时长，设置后将忽略 autoDuration\n\n  swing?: number // 摇摆次数（到达 to 的次数），from -> to，to -> from -> to ... ，默认 0\n  loop?: number // 循环次数，默认为 0\n\n  // 分配剩余时间：（总时长 - 总关键帧固定时长）/ 总权重 * 当前权重\n  autoDelay?: number // 自动 delay 的权重， 默认为 0\n  autoDuration?: number // 自动 duration 的权重， 默认为 1\n}\n```\n\n----------------------------------------\n\nTITLE: Installing skia-canvas with npm\nDESCRIPTION: Installs the skia-canvas package using npm. skia-canvas provides Canvas functionality within the Node.js environment. This package is required to be installed seperately.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/draw/node/start.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm install skia-canvas\n```\n\n----------------------------------------\n\nTITLE: Installing @napi-rs/canvas with bun\nDESCRIPTION: This command installs the @napi-rs/canvas package using bun.  @napi-rs/canvas provides canvas functionality in a Node.js environment using a Rust-based Skia implementation for performance.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/ui/node/napi.md#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nbun add @napi-rs/canvas\n```\n\n----------------------------------------\n\nTITLE: Register a Custom Element (JavaScript)\nDESCRIPTION: This code snippet, located at '@/code/display/Custom/base/register/index.js', shows how to register a custom element in Leafer.js using JavaScript. The exact implementation details are not available, but it likely involves a 'registerUI()' function or similar mechanism to associate a tag name with the custom element constructor.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/custom/base/register.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<<< @/code/display/Custom/base/register/index.js\n```\n\n----------------------------------------\n\nTITLE: Renaming Pen and PathCreator Tool Methods (TS)\nDESCRIPTION: This snippet shows the renaming of `moveToEllipse()` to `drawEllipse()` and `moveToArc()` to `drawArc()` within the Pen and PathCreator tools. It also highlights the addition of the `drawPoints()` method. These changes affect how developers create paths and shapes using these tools.\nSOURCE: https://github.com/leaferjs/docs/blob/main/update/index.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nmoveToEllipse() 变为 drawEllipse()\nmoveToArc() 变为 drawArc()\n增加 drawPoints() 方法\n```\n\n----------------------------------------\n\nTITLE: Defining ShadowEffect Interface Typescript\nDESCRIPTION: This code defines the `ShadowEffect` interface used for configuring inner shadows in Leafer.js. It specifies properties like x, y, blur, spread, color, blendMode, and visibility for customizing the shadow effect. This interface allows for granular control over the appearance of inner shadows applied to UI elements.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/innerShadow.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ShadowEffect {\n  x: number\n  y: number\n  blur: number\n  spread?: number\n  color: Color\n  blendMode?: BlendMode\n  visible?: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Leafer App with Editor in Taro/Vue\nDESCRIPTION: This code snippet demonstrates a more complex Leafer.js integration with a graphical editor using the App structure within a Taro Vue component.  It initializes a Leafer App instance with tree and sky canvases, and integrates the editor plugin. A Rect object is created and added to the app's tree. It also binds touch events to the App instance. It utilizes the '@leafer-ui/miniapp' and '@leafer-in/editor' packages, Taro, and Vue.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/ui/miniapp/taro.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <view\n    id=\"leafer\"\n    @touchstart=\"receiveEvent\"\n    @touchmove=\"receiveEvent\"\n    @touchend=\"receiveEvent\"\n    @touchcancel=\"receiveEvent\"\n  >\n    <canvas id=\"leafer-tree\" type=\"2d\"></canvas>\n    <canvas id=\"leafer-sky\" type=\"2d\"></canvas>\n  </view>\n</template>\n\n<script setup lang=\"ts\">\nimport Taro from '@tarojs/taro'\nimport { App, Rect, useCanvas } from '@leafer-ui/miniapp'\nimport '@leafer-in/editor' // 导入图形编辑器插件\n\nuseCanvas('canvas', Taro) // 绑定平台全局变量\n\nlet app: App\n\nTaro.useReady(() => {\n  app = new App({\n    view: 'leafer',\n    mobile: true, // 优化手机端体验\n    tree: { canvas: 'leafer-tree' }, // 需指定canvas\n    sky: { canvas: 'leafer-sky' },\n    editor: {}, // 会自动创建 editor实例\n  })\n\n  const rect = new Rect({\n    x: 100,\n    y: 100,\n    width: 100,\n    height: 100,\n    fill: '#32cd79',\n    editable: true,\n  })\n\n  app.tree.add(rect)\n})\n\nfunction receiveEvent(event: TouchEvent) {\n  app.receiveEvent(event) // 需手动接收、传递画布交互事件给leafer\n}\n</script>\n\n<style>\npage {\n  height: 100%;\n}\n#leafer {\n  width: 100%;\n  height: 100%;\n}\n#leafer-tree {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n}\n#leafer-sky {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Importing @leafer-editor/worker worker.js\nDESCRIPTION: This code imports the @leafer-editor/worker library's worker file using importScripts. This provides access to the library's functionality through the LeaferUI global variable.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/editor/worker/start.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimportScripts('https://unpkg.com/@leafer-editor/worker@1.5.3/dist/worker.js')\n```\n\n----------------------------------------\n\nTITLE: Installing @leafer-ui/node\nDESCRIPTION: These commands install the @leafer-ui/node package using different package managers: npm, pnpm, yarn, and bun.  @leafer-ui/node enables server-side rendering capabilities.  Choose the command corresponding to your preferred package manager.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/ui/node/start.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @leafer-ui/node\n```\n\n----------------------------------------\n\nTITLE: Setting a Semi-Transparent Ring as Eraser in Leaferjs\nDESCRIPTION: This snippet demonstrates using a semi-transparent ring as an eraser in Leaferjs.  This showcases how transparency affects the eraser effect, allowing for partial or feathered erasing.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/eraser.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/eraser/opacity.ts\n```\n\n----------------------------------------\n\nTITLE: Robot Keyframe Interface Definition\nDESCRIPTION: Defines the interface for robot keyframes, used to specify image sequences for the robot animation. It defines the image source, optional offset, size for sprite sheets and total frames.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/robot/index.md#_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\ninterface IRobotKeyframe {\n  url: string // 图片\n\n  offset?: IPointData // 定位坐标，从此处开始从左往右、自上而下的读取多帧图片， 默认为 0,0\n  size?: number | ISizeData // 每一帧的尺寸，非雪碧图的独立图片可不设置\n  total?: number // 一张图上有多帧时，必须设置读取总数，否则会按1帧处理\n}\n```\n\n----------------------------------------\n\nTITLE: Drag and Drop to Frame (Leafer)\nDESCRIPTION: This snippet demonstrates dragging a DOM element and adding it to a Leafer Frame element.  It illustrates browser coordinate conversion for placing elements in a Frame. Requires Leafer and browser DOM elements.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/point/index.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/advanced/coordinate/browser/drop-frame.ts [添加到 Frame]\n```\n\n----------------------------------------\n\nTITLE: Custom Event Name Modification (TypeScript)\nDESCRIPTION: This code snippet shows how to globally modify the string name corresponding to an event name constant in Leaferjs using TypeScript. It demonstrates how to change the default event name for events that inherit from UIEvent. This is useful for maintaining compatibility with existing business code.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/event/name.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// @/code/event/changeName.ts\n```\n\n----------------------------------------\n\nTITLE: Joining Array Path - TypeScript\nDESCRIPTION: This TypeScript code demonstrates how to continue drawing on an existing numeric path array in Leaferjs. It illustrates the method of joining an existing path array and adding new drawing commands to it. This code is from '@/code/path/drawer/join-array.ts'.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/path/PathCreator.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/path/drawer/join-array.ts\n```\n\n----------------------------------------\n\nTITLE: Drawing Trend Chart - App Component (TypeScript)\nDESCRIPTION: This code snippet (App part) describes the integration of a Leafer component responsible for drawing trend charts within a larger application context. The provided snippet focuses on the application-level specifics of how the charting component is implemented within the larger application.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Line.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Line/app/chart.ts [App]\n```\n\n----------------------------------------\n\nTITLE: Point Type Customization - Circle Example\nDESCRIPTION: Illustrates point type customization for the `circle` property, which typically handles rotation control.  This allows developers to customize the appearance and interaction of the rotation handle.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/config/style.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/editor/config/style/circle/pointType.ts [circle]\n```\n\n----------------------------------------\n\nTITLE: Defining IMaskType in Typescript\nDESCRIPTION: This code snippet defines the `IMaskType` type in Typescript, which represents the different types of masks supported by Leaferjs. It includes path, pixel, grayscale, clipping, and clipping-path mask types, each offering different performance and visual effects.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/mask.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype IMaskType =\n｜'path'  // 路径遮罩，高性能，使用路径裁剪，不显示自身\n| 'pixel' // 像素遮罩，使用每个像素的透明度，可以制作出复杂的效果，不显示自身\n| 'grayscale' // 灰度遮罩，性能较差，会将色彩转为灰度值，再转为透明度遮罩（黑色为透明，白色为不透明），不显示自身\n| 'clipping' // 剪贴遮罩，和PS中的剪贴蒙版一样的效果，使用每个像素的透明度，并会显示自身\n| 'clipping-path' // 剪贴路径遮罩，高性能，和 clipping 类似，不同的是使用路径裁剪\n```\n\n----------------------------------------\n\nTITLE: Installing @napi-rs/canvas with pnpm\nDESCRIPTION: This command installs the @napi-rs/canvas package using pnpm.  @napi-rs/canvas provides canvas functionality in a Node.js environment using a Rust-based Skia implementation for performance.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/ui/node/napi.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @napi-rs/canvas\n```\n\n----------------------------------------\n\nTITLE: JSON Configuration for Mini Program Page\nDESCRIPTION: This JSON snippet configures the navigation style and page orientation for the Mini Program page. Setting `navigationStyle` to `custom` allows for a custom navigation bar, and `pageOrientation` to `auto` allows the page to rotate automatically based on device orientation.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/ui/miniapp/start.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"navigationStyle\": \"custom\",\n  \"pageOrientation\": \"auto\"\n}\n```\n\n----------------------------------------\n\nTITLE: StrokeWidthString SCSS Example\nDESCRIPTION: Illustrates how to use StrokeWidthString in SCSS to define the stroke width of a shape. It provides examples of setting the stroke width for all sides, top/bottom and left/right, top, left/right and bottom, and individual sides.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/interface/ui/String.md#_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n// 参数模版\ntop left bottom right\n\n// 应用示例\nstroke-width: 2 // all\nstroke-width: 2 1 // (top bottom) (left right)\nstroke-width: 2 1 1 // top (left right) bottom\nstroke-width: 2 1 2 1 // top left bottom right\n```\n\n----------------------------------------\n\nTITLE: Custom State Transition in LeaferJS (state.ts)\nDESCRIPTION: This code snippet demonstrates how to switch between custom states in LeaferJS.  It shows how to define and transition between different visual states of an element based on user interaction or other triggers. The snippet leverages LeaferJS's state management features to enable dynamic visual changes.\nSOURCE: https://github.com/leaferjs/docs/blob/main/blog/2024-09-20.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/state/state.ts\n```\n\n----------------------------------------\n\nTITLE: Styling the page and canvas (WXSS)\nDESCRIPTION: Styles the page and canvas element in WXSS (Weixin Style Sheets). The page is set to have a height of 100%, and the canvas element (identified by the id 'leafer') is styled to occupy the full width and height of its parent container.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/game/miniapp/start.md#_snippet_7\n\nLANGUAGE: css\nCODE:\n```\npage {\n  height: 100%;\n}\n#leafer {\n  width: 100%;\n  height: 100%;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Graphic Mode - JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to create a graphic mode within the Leafer.js editor. It involves setting up the necessary components and event listeners to enable users to draw and manipulate graphic elements within the editor. This example targets the JavaScript implementation.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/Editor/state.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<<< @/code/plugin/editor/create-mode.js\n```\n\n----------------------------------------\n\nTITLE: Creating Leafer Instance\nDESCRIPTION: Demonstrates the creation of Leafer instances which is necessary when working with or manipulating UI elements from JSON configurations.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/json.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Right-Click Menu (Javascript)\nDESCRIPTION: This code snippet demonstrates how to display a right-click menu in a graphics editor using PointerEvent. It is written in Javascript.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/event/ui/Pointer.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<<< @/code/event-ui/pointer/editor-menu.js\n```\n\n----------------------------------------\n\nTITLE: Installing @napi-rs/canvas with yarn\nDESCRIPTION: This command installs the @napi-rs/canvas package using yarn.  @napi-rs/canvas provides canvas functionality in a Node.js environment using a Rust-based Skia implementation for performance.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/ui/node/napi.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @napi-rs/canvas\n```\n\n----------------------------------------\n\nTITLE: Layout Check Update\nDESCRIPTION: This code snippet illustrates the change in the method name used to update the layout of a leaf element. `leaf.__layout.checkUpdate()` is now `leaf.__layout.update()`.\nSOURCE: https://github.com/leaferjs/docs/blob/main/update/index.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nleaf.__layout.checkUpdate() // 变更为leaf.__layout.update()\n```\n\n----------------------------------------\n\nTITLE: Direction9 Enum Definition\nDESCRIPTION: Defines the Direction9 enum in TypeScript, representing nine possible directions (topLeft, top, topRight, right, bottomRight, bottom, bottomLeft, left, center).  This enum is used to specify the direction of the EditPoint. No dependencies.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/EditPoint.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum Direction9 {\n  topLeft,\n  top,\n  topRight,\n  right,\n  bottomRight,\n  bottom,\n  bottomLeft,\n  left,\n  center,\n}\n```\n\n----------------------------------------\n\nTITLE: Installing skia-canvas\nDESCRIPTION: These commands install the skia-canvas package using different package managers: npm, pnpm, yarn, and bun. skia-canvas provides Canvas functionality in a server environment using skia. Installation may take a while.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/ui/node/start.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\npnpm add skia-canvas\n```\n\n----------------------------------------\n\nTITLE: Updating Leafer Dependency Versions (npm)\nDESCRIPTION: This command checks and updates the versions of Leafer dependencies in the project's package.json file. It scans for Leafer-related dependencies, fetches the latest Leafer version, and updates the package.json. Users should run `npm install` after updating.\nSOURCE: https://github.com/leaferjs/docs/blob/main/create/leafer.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm create leafer@latest update\n```\n\n----------------------------------------\n\nTITLE: Convert Native Canvas to URL - TypeScript\nDESCRIPTION: This snippet illustrates converting a native canvas object to a URL using Leafer.js.  It sets a canvas resource with a specific key and retrieves its corresponding URL for use in the application.  Requires the Leafer.js library.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/resource/Resource.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/resource/image/canvas.ts\n```\n\n----------------------------------------\n\nTITLE: Running Node.js\nDESCRIPTION: These commands run a Node.js application using either the common JS format (index.js) or the ECMAScript module format (index.mjs). The command `node index.js` is used for CommonJS modules, while `node index.mjs` is used for ES modules.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/ui/node/start.md#_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nnode index.js\n```\n\n----------------------------------------\n\nTITLE: Displaying Sponsor Links in HTML\nDESCRIPTION: This HTML snippet creates a flexible container to display sponsor links. Each sponsor is represented by an anchor tag (`<a>`) with a link to their profile or website. The `style` attribute applies flexbox properties for responsive arrangement.\nSOURCE: https://github.com/leaferjs/docs/blob/main/sponsor/index.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<p style=\"display: flex;flex-wrap: wrap;justify-content: center;gap: 15px;\">\n  <a target=\"_blank\" href=\"\">Lauginwing</a>\n  <a target=\"_blank\" href=\"https://afdian.com/u/ea0cd73ce9ba11ef99f052540025c377\">在路上</a>\n  <a target=\"_blank\" href=\"\">张余🌈</a>\n  <a target=\"_blank\" href=\"https://afdian.com/u/47adc7c4d40911ef90cb52540025c377\">Jerry</a>\n  <a target=\"_blank\" href=\"\">李狗嗨。💢</a>\n  <a target=\"_blank\" href=\"https://afdian.com/u/ee3b249cbdb111efb10152540025c377\">李维亮</a>\n  <a target=\"_blank\" href=\"https://afdian.com/u/a7bfb854bdaa11ef8cef52540025c377\">朝夕</a>\n  <a target=\"_blank\" href=\"\">SaltedFish</a>\n  <a target=\"_blank\" href=\"\">zhk</a>\n  <a target=\"_blank\" href=\"\">格子</a>\n  <a target=\"_blank\" href=\"\">等等</a>\n  <a target=\"_blank\" href=\"\">goosen</a>\n  <a target=\"_blank\" href=\"\">建伟F4nniu</a>\n  <a target=\"_blank\" href=\"\">梁福斌</a>\n  <a target=\"_blank\" href=\"\">江万江</a>\n  <a target=\"_blank\" href=\"\">杨超</a>\n  <a target=\"_blank\" href=\"\">ToB Dev</a>\n  <a target=\"_blank\" href=\"https://juejin.cn/post/7294509366556262463\">前端之虎陈随易</a>\n  <a target=\"_blank\" href=\"\">A☀️云☀️A</a>\n  <a target=\"_blank\" href=\"https://afdian.com/u/87144c9ab3a611ef95c652540025c377\">ʚ LMT ɞ</a>\n  <a target=\"_blank\" href=\"https://afdian.com/u/c9c82db89b6911ef94fc52540025c377\">爱发电用户_c9c82</a>\n  <a target=\"_blank\" href=\"https://www.wktline.com\">轻简历</a>\n  <a target=\"_blank\" href=\"https://afdian.com/u/0fac07aca31a11efad4d52540025c377\">爱发电用户_0fac0</a>\n  <a target=\"_blank\" href=\"https://wangyesheji.cn\">wangyesheji.cn</a>\n  <a target=\"_blank\" href=\"https://afdian.com/u/94507ba6959f11ef8b6f52540025c377\">风间</a>\n  <a target=\"_blank\" href=\"https://afdian.com/u/d8c0943c911811ef965152540025c377\">爱发电用户_Tqsm</a>\n  <a target=\"_blank\" href=\"https://afdian.com/u/578d9a988bcf11ef819952540025c377\">爱发电用户_6KpE</a>\n  <a target=\"_blank\" href=\"https://afdian.com/u/578d9a988bcf11ef819952540025c377\">dongdong</a>\n  <a target=\"_blank\" href=\"https://afdian.com/u/87ac17cc87b511efb5df52540025c377\">zwm</a>\n  <a target=\"_blank\" href=\"https://afdian.com/u/3725c15e76fd11ef953e52540025c377\">爱发电用户_3725c</a>\n  <a target=\"_blank\" href=\"https://afdian.com/u/235e90cc757e11ef96d952540025c377\">Noth1ng</a>\n  <a target=\"_blank\" href=\"https://afdian.com/u/be5888dc6ec411efb1e952540025c377\">纳西妲の√</a>\n  <a target=\"_blank\" href=\"https://afdian.com/u/1423ca3e547011ef9f7f52540025c377\">爱发电用户_Ahb9</a>\n  <a target=\"_blank\" href=\"https://afdian.com/u/1423ca3e547011ef9f7f52540025c377\">爱发电用户_7617d</a>\n  <a target=\"_blank\" href=\"https://afdian.com/u/b80b370465eb11ef8d785254001e7c00\">冷漠</a>\n  <a target=\"_blank\" href=\"https://afdian.com/u/6955bc12629711ef81cf52540025c377\">爱发电用户_9RXB</a>\n  <a target=\"_blank\" href=\"https://afdian.com/a/smzdd\">今日值得读</a>\n  <a target=\"_blank\" href=\"https://afdian.com/u/1423ca3e547011ef9f7f52540025c377\">爱发电用户_49sT</a>\n  <a target=\"_blank\" href=\"https://afdian.com/u/9ae69cfa546011ef80be52540025c377\">爱发电用户_NFCS</a>\n  <a target=\"_blank\" href=\"https://afdian.com/u/43ad8ae4539711efa87b52540025c377\">爱发电用户_43ad8</a>\n  <a target=\"_blank\" href=\"https://afdian.com/u/304552da4e5511ef871752540025c377\">爱发电用户_30455</a>\n  <a target=\"_blank\" href=\"https://afdian.com/u/39788252424b11efb06752540025c377\">xiaozhang</a>\n  <a target=\"_blank\" href=\"https://github.com/ztkuaikuai\">砖吐筷筷</a>\n  <a target=\"_blank\" href=\"https://afdian.com/u/b47b3370420811efbe7752540025c377\">爱发电用户_b47b3</a>\n  <a target=\"_blank\" href=\"https://afdian.com/u/37c6a5f80fff11ee8d5252540025c377\">longbow1998</a>\n  <a target=\"_blank\" href=\"https://afdian.com/u/b76b83cc3ff211efbb045254001e7c00\">爱发电用户_5d755</a>\n  <a target=\"_blank\" href=\"https://afdian.com/u/b76b83cc3ff211efbb045254001e7c00\">爱发电用户_b76b8</a>\n  <a target=\"_blank\" href=\"https://afdian.com/u/e70c252c3f7611ef9d6852540025c377\">爱发电用户_e70c2</a>\n  <a target=\"_blank\" href=\"https://afdian.com/u/039dc65a2ed811ef95ba52540025c377\">爱发电用户_039dc</a>\n  <a target=\"_blank\" href=\"https://github.com/Barrior\">花祁</a>\n  <a target=\"_blank\" href=\"https://afdian.com/u/99f39a84003f11efbef552540025c377\">爱发电用户_99f39</a>\n  <a target=\"_blank\" href=\"https://afdian.com/u/87664e7cfdf411ee9ce652540025c377\">坤坤</a>\n  <a target=\"_blank\" href=\"https://afdian.com/u/3fd1999afd5911eeaeeb5254001e7c00\">爱发电用户_X6hp</a>\n  <a target=\"_blank\" href=\"https://afdian.com/u/9f6fb3c0fcad11eea0a55254001e7c00\">爱发电用户_s5u9</a>\n  <a target=\"_blank\" href=\"https://afdian.com/u/dcd4b080fba411eeb64652540025c377\">曹吉美爸爸</a>\n  <a target=\"_blank\" href=\"\">啸沧海</a>\n  <a target=\"_blank\" href=\"\">Ronny</a>\n  <a target=\"_blank\" href=\"\">Biu</a>\n  <a target=\"_blank\" href=\"\">王志强</a>\n  <a target=\"_blank\" href=\"\">PD.新城คิดถึง</a>\n  <a target=\"_blank\" href=\"\">糖颂缘冥倾</a>\n  <a target=\"_blank\" href=\"\">ALBERT.</a>\n  <a target=\"_blank\" href=\"https://afdian.com/u/2a3b3698f61c11eeafec52540025c377\">爱发电用户_UXEV</a>\n  <a target=\"_blank\" href=\"https://afdian.com/u/ad7e2bd2f5a911eeb25352540025c377\">SaltedFish</a>\n  <a target=\"_blank\" href=\"https://afdian.com/u/8230187ef5a811eeba2d5254001e7c00\">爱发电用户_76f9d</a>\n  <a target=\"_blank\" href=\"https://afdian.com/a/leaferjs\">Leafer</a>\n  <a target=\"_blank\" href=\"https://afdian.com/u/9889bbdaf03911eeb2cf52540025c377\">爱发电用户_Pbm7</a>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Vue Component Import\nDESCRIPTION: This code snippet imports the `Case.vue` component within a Vue.js setup script.  This is likely used to render a specific case or example within the documentation page.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/config/cursor.md#_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\nimport Case from '/component/Case.vue'\n```\n\n----------------------------------------\n\nTITLE: Opening Inner Editor Event\nDESCRIPTION: Example code for opening the inner editor. This snippet demonstrates how to trigger the open event for the inner editor in Leaferjs.\nSOURCE: https://github.com/leaferjs/docs/blob/main/plugin/in/editor/event/InnerEditorEvent.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/plugin/editor/event/innerEditor.ts\n```\n\n----------------------------------------\n\nTITLE: Drawing Curve - App Component (TypeScript)\nDESCRIPTION: This code snippet shows how the Leafer component, responsible for drawing a smooth curve, integrates into a larger application structure. It highlights how the component is used in the application to render curves.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Line.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Line/app/curve.ts [App]\n```\n\n----------------------------------------\n\nTITLE: Renaming Static Helper Methods (TS)\nDESCRIPTION: This snippet details the renaming of several static helper methods in LeafHelper. `LeafHelper.moveWorld()` is now `LeafHelper.move()`, `LeafHelper.zoomOfWorld()` is now `LeafHelper.zoomOf()`, and `LeafHelper.rotateOfWorld()` is now `LeafHelper.rotateOf()`. The old methods have been removed. Developers must update their code to use the new method names.\nSOURCE: https://github.com/leaferjs/docs/blob/main/update/index.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nLeafHelper.moveWorld() // =  LeafHelper.move() 已移除\nLeafHelper.zoomOfWorld() // = LeafHelper.zoomOf() 已移除\nLeafHelper.rotateOfWorld() // = LeafHelper.rotateOf() 已移除\n```\n\n----------------------------------------\n\nTITLE: Install @leafer-editor/miniapp with bun\nDESCRIPTION: Installs the @leafer-editor/miniapp package using bun. This command adds the package and its dependencies to your project using bun, allowing you to use its functionalities in your mini-program.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/editor/miniapp/start.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nbun add @leafer-editor/miniapp\n```\n\n----------------------------------------\n\nTITLE: Vue Component Import\nDESCRIPTION: This snippet imports the `Case` component from the `/component/Case.vue` file. This component is likely used within the current Vue component to display or handle specific cases or examples related to the documentation.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/transform.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\nimport Case from '/component/Case.vue'\n```\n\n----------------------------------------\n\nTITLE: Initializing Leafer in an Existing Project (npm)\nDESCRIPTION: This command guides the user through an interactive process to add Leafer-related scene packages and official plugins to an existing project.  It's recommended to use a build tool like Vite or Webpack to configure the project environment before using this command.\nSOURCE: https://github.com/leaferjs/docs/blob/main/create/leafer.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm create leafer@latest init\n```\n\n----------------------------------------\n\nTITLE: ImagePaintString SCSS Example\nDESCRIPTION: Provides examples of using ImagePaintString in SCSS to define image fills. It showcases specifying the image URL, mode, transform, filters, blend mode, opacity, and visibility.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/interface/ui/String.md#_snippet_6\n\nLANGUAGE: scss\nCODE:\n```\n// 参数模版\nimage(url, mode, transform?) filter?(num) blendMode? opacity? visible?\nimage(url, mode, translate?, scale?, rotation?) ... // 逗号分隔多个填充\n// translate?, scale?, rotation?顺序可以改变\n\n// 应用示例\nfill: image(t.png, fit); // image(url, mode)\nfill: image(t.png, cover, 90deg); // image(url, mode, rotation)\nfill: image(t.png, clip, 10 10); // image(url, mode, offset)\nfill: image(t.png, clip, 5 6, 20%, 6deg); // offset, scale, rotation\nfill: image(t.png, repeat, 200%) exposure(0.5) darken; // image() filter()... blendMode\n```\n\n----------------------------------------\n\nTITLE: Text Padding Change\nDESCRIPTION: This code snippet demonstrates the change in behavior of text padding when there is no width or height specified for the text element. Adding padding in such cases now affects the position of the content.\nSOURCE: https://github.com/leaferjs/docs/blob/main/update/index.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntext.padding // 没有宽高的文本增加padding， 内容的位置会改变（更符合使用逻辑）\n```\n\n----------------------------------------\n\nTITLE: Font Weight Types\nDESCRIPTION: Defines the TypeScript types for numeric and string font weights used in the Text element styling. Includes numeric values from 100 to 900 and string literals like 'thin', 'extra-light', etc.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Text.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype IFontWeightNumer = 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900\n\ntype IFontWeightString =\n  | 'thin' // 100\n  | 'extra-light' // 200\n  | 'light' // 300\n  | 'normal' // 400\n  | 'medium' // 500\n  | 'semi-bold' // 600\n  | 'bold' // 700\n  | 'extra-bold' // 800\n  | 'black' // 900\n```\n\n----------------------------------------\n\nTITLE: LeaferJS WatchEvent Example (JavaScript)\nDESCRIPTION: This snippet demonstrates the usage of WatchEvent in LeaferJS using JavaScript. It provides an example of how to implement data observation and response in a JavaScript environment using the LeaferJS framework.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/event/basic/Watch.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<<< @/code/event/leafer/watch.js\n```\n\n----------------------------------------\n\nTITLE: Path Creation - Cafe Example (Leafer)\nDESCRIPTION: This snippet, presumably from '@/code/display/Path/cafe.ts', demonstrates how to create a path element using Leafer.  The specifics of the code are not provided, but it serves as an example usage of the Path element within the Leafer framework.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/Path.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/display/Path/cafe.ts [Leafer]\n```\n\n----------------------------------------\n\nTITLE: Installing @leafer-ui/miniapp with yarn\nDESCRIPTION: This snippet illustrates how to install the @leafer-ui/miniapp package using yarn. This adds the required dependencies to your project.\nSOURCE: https://github.com/leaferjs/docs/blob/main/guide/install/ui/miniapp/start.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @leafer-ui/miniapp\n```\n\n----------------------------------------\n\nTITLE: Setting a Group as an Eraser in Leaferjs\nDESCRIPTION: This demonstrates using a group of elements as an eraser in Leaferjs. This approach allows for more complex eraser shapes and patterns to be created.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/UI/eraser.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/property/eraser/group.ts\n```\n\n----------------------------------------\n\nTITLE: Document Viewport Configuration Implementation\nDESCRIPTION: This is a placeholder for the actual code. The code demonstrates the implementation principles of document viewport in Leafer.js. It explains the underlying logic suitable for documentation projects.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/config/app/type.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/app/config/type/origin/document.ts [实现原理]\n```\n\n----------------------------------------\n\nTITLE: Design Viewport Configuration (Leafer)\nDESCRIPTION: This is a placeholder for the actual code. The code demonstrates how to configure the design viewport type for the Leafer in Leafer.js. Design adds middle mouse and limits scale.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/config/app/type.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/code/app/config/type/design.ts [Leafer]\n```\n\n----------------------------------------\n\nTITLE: Accessing Input Data in Leafer UI (TypeScript)\nDESCRIPTION: This snippet demonstrates how to access input data for UI element properties directly and through the internal `__input` property. Setting a property like `width` stores the raw value, which can be accessed via `this.width` or `this.__.__input.width`. This data is the initial unprocessed value.\nSOURCE: https://github.com/leaferjs/docs/blob/main/reference/display/custom/attr.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nthis.width = '10px'\n\nconsole.log(this.width) // '10px'\nconsole.log(this.__.__input.width) // '10px'\n```"
  }
]