[
  {
    "owner": "isaac-sim",
    "repo": "isaacsimzmq",
    "content": "TITLE: Cloning and Building Project with Shell Commands - Bash\nDESCRIPTION: This snippet outlines the steps to clone the Isaac Sim ZMQ Bridge repository, navigate into its directory, and execute the build script using Bash. It requires git for repository cloning and a Linux terminal environment. The build.sh script may involve compiling C++ extensions or preparing the Python environment. Inputs are not required beyond the commands themselves; the output is a ready-to-use local codebase.\nSOURCE: https://github.com/isaac-sim/isaacsimzmq/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/isaac-sim/IsaacSimZMQ.git\ncd IsaacSimZMQ\n./build.sh\n```\n\n----------------------------------------\n\nTITLE: Running Isaac Sim Container with Volumes - Bash\nDESCRIPTION: This snippet launches a new Docker container for Isaac Sim with GPU support, required environment variables, and multiple mounted volumes for persistent data, extensions, and assets. It assumes Docker, NVIDIA Container Toolkit, and an appropriate GPU-equipped system. Key parameters include the mounting of code and asset directories into the container, and the use of host networking. Expected behavior is an interactive shell inside the container, ready for additional setup.\nSOURCE: https://github.com/isaac-sim/isaacsimzmq/blob/main/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name isaac-sim --entrypoint bash -it --runtime=nvidia --gpus all -e \"ACCEPT_EULA=Y\" --rm --network=host \\\n    -e \"PRIVACY_CONSENT=Y\" \\\n    -v ~/docker/isaac-sim/cache/kit:/isaac-sim/kit/cache:rw \\\n    -v ~/docker/isaac-sim/cache/ov:/root/.cache/ov:rw \\\n    -v ~/docker/isaac-sim/cache/pip:/root/.cache/pip:rw \\\n    -v ~/docker/isaac-sim/cache/glcache:/root/.cache/nvidia/GLCache:rw \\\n    -v ~/docker/isaac-sim/cache/computecache:/root/.nv/ComputeCache:rw \\\n    -v ~/docker/isaac-sim/logs:/root/.nvidia-omniverse/logs:rw \\\n    -v ~/docker/isaac-sim/data:/root/.local/share/ov/data:rw \\\n    -v ~/docker/isaac-sim/documents:/root/Documents:rw \\\n    -v $(pwd)/exts:/root/Documents/exts:rw \\\n    -v $(pwd)/assets:/root/Documents/assets:rw \\\n    nvcr.io/nvidia/isaac-sim:4.5.0\n```\n\n----------------------------------------\n\nTITLE: Building and Running Server Container - Bash\nDESCRIPTION: This snippet shows how to build and run the Python-based server Docker container by executing two scripts in sequence. The server container is used for handling communication with Isaac Sim, and must be run from the isaac-zmq-server directory. Each script handles build and container startup, respectively. No additional input is required.\nSOURCE: https://github.com/isaac-sim/isaacsimzmq/blob/main/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd isaac-zmq-server\n./build_server.sh\n./run_server.sh\n```\n\n----------------------------------------\n\nTITLE: Running Python Server Example - Bash\nDESCRIPTION: This Bash snippet is run inside the server container to start the Python example server. It launches the example.py script, which implements the communication logic with Isaac Sim. No arguments are required for the default mode. The code assumes a Python interpreter is available and all dependencies are satisfied.\nSOURCE: https://github.com/isaac-sim/isaacsimzmq/blob/main/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npython example.py\n```\n\n----------------------------------------\n\nTITLE: Starting Multi-Camera Server Instances - Bash\nDESCRIPTION: These commands illustrate running multiple Python server instances in separate containers for different camera feeds (main and gripper) in the Franka RMPFlow Multi Camera example. The --subscribe_only and --port flags configure the instance for a specific camera channel. Dependencies include the previously built Docker containers and server scripts. Outputs are running server processes awaiting data from Isaac Sim.\nSOURCE: https://github.com/isaac-sim/isaacsimzmq/blob/main/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Inside the first container\npython example.py # server 1 for main camera\n\n# In a second container\npython example.py --subscribe_only 1 --port 5591 # server 2 for gripper camera\n```\n\n----------------------------------------\n\nTITLE: Running Isaac Sim in Headless Mode - Bash\nDESCRIPTION: This snippet demonstrates running Isaac Sim in Python-only headless (standalone) mode, suitable for CI/CD and automation. The ISAACSIM_PYTHON environment variable should point to Isaac Sim's python.sh executable. The $ISAACSIM_PYTHON variable is then used to execute the example_headless.py script with the --ext-folder argument. This requires a properly installed Isaac Sim and prepared extensions directory.\nSOURCE: https://github.com/isaac-sim/isaacsimzmq/blob/main/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nexport ISAACSIM_PYTHON=<your isaac sim install path>/python.sh\n\n# from this repo root\n$ISAACSIM_PYTHON exts/isaacsim.zmq.bridge.examples/isaacsim/zmq/bridge/examples/example_headless.py --ext-folder ./exts\n```\n\n----------------------------------------\n\nTITLE: Build Docker image for ZMQ server\nDESCRIPTION: This script builds the Docker image for the Isaac Sim ZMQ server. It navigates to the `isaac-zmq-server` directory and executes the `build_server.sh` script. This script likely contains commands to build the Docker image using a Dockerfile in that directory.\nSOURCE: https://github.com/isaac-sim/isaacsimzmq/blob/main/isaac-zmq-server/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd isaac-zmq-server\n./build_server.sh\n./run_server.sh\n```\n\n----------------------------------------\n\nTITLE: Run multiple ZMQ servers for multi-camera setup\nDESCRIPTION: These commands start two instances of the `example.py` server within separate containers. The first server runs with default settings, handling the main camera feed. The second server runs with the `--subscribe_only 1` flag and a different port (`5591`), indicating it's configured to subscribe to and process data from the gripper camera.  The `--subscribe_only` flag suggests the server operates in a read-only mode.\nSOURCE: https://github.com/isaac-sim/isaacsimzmq/blob/main/isaac-zmq-server/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Inside the container\npython example.py # server 1 for main camera\n# in a second container\npython example.py --subscribe_only 1 --port 5591 # server 2 for gripper camera\n```\n\n----------------------------------------\n\nTITLE: Selecting Example Mission in Python Script - Python\nDESCRIPTION: This snippet shows how to select a mission object within the example_headless.py script by assigning the relevant mission class. It demonstrates how to switch between FrankaVisionMission and FrankaMultiVisionMission for different mission scenarios. The snippet requires that relevant mission classes are imported or accessible in the script. No input/output parameters are involved in this assignment, but changing this line alters simulation behavior.\nSOURCE: https://github.com/isaac-sim/isaacsimzmq/blob/main/README.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# In exts/isaacsim.zmq.bridge.examples/isaacsim/zmq/bridge/examples/example_headless.py\n# select an example mission here\nmission = FrankaVisionMission()\n# mission = FrankaMultiVisionMission()\n```\n\n----------------------------------------\n\nTITLE: Installing Container Dependencies - Bash\nDESCRIPTION: This Bash command updates the container's package list and installs the libunwind8 library, needed for Isaac Sim or bridge functionality. The snippet must be executed inside the running container. Inputs are not required; the output is the successful installation of the library. It presumes apt-based package management.\nSOURCE: https://github.com/isaac-sim/isaacsimzmq/blob/main/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\napt-get update\napt-get install -y libunwind8\n```\n\n----------------------------------------\n\nTITLE: Run the ZMQ server inside the container\nDESCRIPTION: This command executes the `example.py` script inside the Docker container.  This script acts as the server and handles communication with Isaac Sim using ZMQ. It might rely on dependencies installed during the Docker image build, likely involving ZMQ and Protobuf.\nSOURCE: https://github.com/isaac-sim/isaacsimzmq/blob/main/isaac-zmq-server/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython example.py\n```\n\n----------------------------------------\n\nTITLE: Pulling Isaac Sim Docker Container - Bash\nDESCRIPTION: This single Bash command pulls the specified NVIDIA Isaac Sim container image from NVIDIA's NGC registry. The docker pull command requires Docker to be installed and configured. The image tag (4.5.0) must match the Isaac Sim version requirement. No input parameters are necessary, and the result is a local copy of the Isaac Sim container image.\nSOURCE: https://github.com/isaac-sim/isaacsimzmq/blob/main/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull nvcr.io/nvidia/isaac-sim:4.5.0\n```\n\n----------------------------------------\n\nTITLE: Displaying Docker Startup Error - bash\nDESCRIPTION: This snippet shows a known, harmless error message related to MIT-SHM and X_ShmPutImage that may appear when running the Isaac Sim ZMQ bridge example app inside a Docker container. The error can be safely ignored.\nSOURCE: https://github.com/isaac-sim/isaacsimzmq/blob/main/README.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nX Error of failed request:  BadValue (integer parameter out of range for operation)\n  Major opcode of failed request:  130 (MIT-SHM)\n  Minor opcode of failed request:  3 (X_ShmPutImage)\n  Value in failed request:  0x300\n  Serial number of failed request:  135\n  Current serial number in output stream:  136\n```"
  }
]