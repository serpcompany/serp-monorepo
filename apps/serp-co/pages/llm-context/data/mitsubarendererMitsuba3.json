[
  {
    "owner": "mitsuba-renderer",
    "repo": "mitsuba3",
    "content": "TITLE: Declaring Sensor in XML for Mitsuba 3\nDESCRIPTION: Example of how to declare a sensor in Mitsuba 3's XML scene description language. It includes the sensor type, parameters, and nested sampler and film declarations.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/plugin_reference/section_sensors.rst#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<scene version=3.0.0>\n    <!-- .. scene contents .. -->\n\n    <sensor type=\".. sensor type ..\">\n        <!-- .. sensor parameters .. -->\n\n        <sampler type=\".. sampler type ..\">\n            <!-- .. sampler parameters .. -->\n        </sampler>\n\n        <film type=\".. film type ..\">\n            <!-- .. film parameters .. -->\n        </film>\n    </sensor>\n</scene>\n```\n\n----------------------------------------\n\nTITLE: Declaring Shapes with BSDFs in Mitsuba 3 Scenes\nDESCRIPTION: Examples showing how to declare shapes with associated BSDFs in Mitsuba 3 scene descriptions using both XML and Python formats. The examples demonstrate direct BSDF declaration within a shape and referencing a previously declared BSDF.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/plugin_reference/section_shapes.rst#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<scene version=3.0.0>\n    <!-- .. scene contents .. -->\n\n    <shape type=\".. shape type ..\">\n        .. shape parameters ..\n\n        <bsdf type=\".. BSDF type ..\">\n            .. bsdf parameters ..\n        </bsdf>\n\n        <!-- Alternatively: reference a named BSDF that\n            has been declared previously\n\n            <ref id=\"my_bsdf\"/>\n        -->\n    </shape>\n</scene>\n```\n\nLANGUAGE: python\nCODE:\n```\n'type': 'scene',\n\n# .. scene contents ..\n\n'shape_id': {\n    'type': '<shape_type>',\n    'bsdf_id': {\n        'type': '<bsdf_type>',\n        # .. bsdf parameters ..\n    }\n\n    # Alternatively, reference a named BSDF that had been declared previously\n    'bsdf_id' : {\n        'type' : 'ref',\n        'id' : 'some_bsdf_id'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Cornell Box Scene with Mitsuba 3 in Python\nDESCRIPTION: Python code snippet demonstrating how to render the Cornell Box scene using Mitsuba 3. It sets the variant, loads the scene, renders it, and saves the output as an EXR file.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/index.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport mitsuba as mi\n\nmi.set_variant('scalar_rgb')\n\nimg = mi.render(mi.load_dict(mi.cornell_box()))\n\nmi.Bitmap(img).write('cbox.exr')\n```\n\n----------------------------------------\n\nTITLE: Complete BSDF Evaluation Example\nDESCRIPTION: Comprehensive example showing how to evaluate a polarized BSDF including all necessary coordinate transformations and Mueller matrix handling.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/key_topics/polarization.rst#2025-04-21_snippet_41\n\nLANGUAGE: cpp\nCODE:\n```\nBSDFContext ctx;\nSurfaceInteraction3f si = ...;\n\nVector3f wo = ...;\nVector3f wi = ...;\n\nVector3f wo_local = si.to_local(wo);\nsi.wi = si.to_local(wi);\n\nSpectrum bsdf_val = bsdf->eval(ctx, si, wo_local);\n\nbsdf_val = si.to_world_mueller(bsdf_val, -wo_local, si.wi);\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Path Tracer in Mitsuba 3 Scene Definition\nDESCRIPTION: Shows how to declare a unidirectional path tracer as an integrator within a Mitsuba 3 scene. The example sets a maximum path depth of 5 and includes a simple sphere with a diffuse BSDF to be rendered.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/plugin_reference/section_integrators.rst#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<scene version=3.0.0>\n    <!-- Instantiate a unidirectional path tracer,\n        which renders paths up to a depth of 5 -->\n    <integrator type=\"path\">\n        <integer name=\"max_depth\" value=\"5\"/>\n    </integrator>\n\n    <!-- Some geometry to be rendered -->\n    <shape type=\"sphere\">\n        <bsdf type=\"diffuse\"/>\n    </shape>\n</scene>\n```\n\nLANGUAGE: python\nCODE:\n```\n'type': 'scene',\n# Instantiate a unidirectional path tracer, which renders\n# paths up to a depth of 5\n'integrator_id': {\n    'type': 'path',\n    'max_depth': 5\n},\n\n# Some geometry to be rendered\n'shape_id': {\n    'type': 'sphere',\n    'bsdf': {\n        'type': 'diffuse'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Scene with Mitsuba 3 in Python\nDESCRIPTION: This code snippet demonstrates how to use Mitsuba 3 to render a simple scene (Cornell box) and save the output as an EXR file. It shows the basic steps of importing the library, setting the renderer variant, loading a scene, rendering it, and saving the result.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Import the library using the alias \"mi\"\nimport mitsuba as mi\n# Set the variant of the renderer\nmi.set_variant('scalar_rgb')\n# Load a scene\nscene = mi.load_dict(mi.cornell_box())\n# Render the scene\nimg = mi.render(scene)\n# Write the rendered image to an EXR file\nmi.Bitmap(img).write('cbox.exr')\n```\n\n----------------------------------------\n\nTITLE: Configuring Direct Texture Usage in Mitsuba 3\nDESCRIPTION: Example showing how to configure a texture directly within a BSDF definition, including UV transformation parameters for scaling and translation. Demonstrates texture parameter configuration with transform operations.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/plugin_reference/section_textures.rst#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<scene version=3.0.0>\n    <!-- Create a BSDF that supports textured parameters -->\n    <bsdf type=\".. BSDF type ..\" id=\"my_textured_material\">\n        <texture type=\".. texture type ..\" name=\".. parameter name ..\">\n            <!-- .. Texture parameters go here .. -->\n\n            <transform name=\"to_uv\">\n                <!-- Scale texture by factor of 2 -->\n                <scale x=\"2\" y=\"2\"/>\n                <!-- Offset texture by [0.5, 1.0] -->\n                <translate x=\"0.5\" y=\"1.0\"/>\n            </transform>\n        </texture>\n\n        <!-- .. Non-spatially varying BSDF parameters ..-->\n    </bsdf>\n</scene>\n```\n\nLANGUAGE: python\nCODE:\n```\n'type': 'scene',\n\n# .. scene contents ..\n\n# Create a BSDF that supports textured parameters\n'my_textured_material': {\n    'type': '<bsdf_type>',\n    '<parameter_name>' : {\n        'type': '<texture_type>':        \n        # .. texture parameters ..\n        'to_uv': mi.scalar_rgb.ScalarTransform4f.scale([2, 2, 0]).translate([0.5, 1.0, 0]) # Third dimension is ignored\n    }\n\n    # .. non-spatially varying BSDF parameters ..\n}\n```\n\n----------------------------------------\n\nTITLE: Evaluating Polarized BSDF in Local Space\nDESCRIPTION: Demonstrates the process of evaluating a polarized BSDF by transforming directions between world and local space with proper Stokes vector handling.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/key_topics/polarization.rst#2025-04-21_snippet_39\n\nLANGUAGE: cpp\nCODE:\n```\nBSDFContext ctx;\nSurfaceInteraction3f si = ...;\n\nVector3f wo = ...;\nVector3f wi = ...;\n\nVector3f wo_local = si.to_local(wo);\nsi.wi = si.to_local(wi);\n\nSpectrum bsdf_val = bsdf->eval(ctx, si, wo_local);\n\nVector3f bo_local = stokes_basis(-wo_local);\nVector3f bi_local = stokes_basis(si.wi);\n```\n\n----------------------------------------\n\nTITLE: Configuring HDR Film in Mitsuba 3 (Python)\nDESCRIPTION: A Python dictionary example showing how to configure an HDR film with full HD resolution and Gaussian filter in Mitsuba 3. This configuration is structured as nested dictionaries that represent the scene hierarchy and film properties.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/plugin_reference/section_films.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n'type': 'scene',\n\n# .. scene contents ..\n\n'sensor_id': {\n    'type': '<sensor_type>'\n\n    # Write to a high dynamic range EXR image\n    'film_id': {\n        'type': 'hdrfilm',\n        # Specify the desired resolution (e.g. full HD)\n        'width': 1920,\n        'height': 1080,\n        # Use a Gaussian reconstruction filter\n        'filter': { 'type': 'gaussian' }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Scene Setup in Mitsuba XML\nDESCRIPTION: Complete scene definition with path tracer, perspective camera, sampler, film, glass dragon mesh and area light source.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/key_topics/scene_format.rst#2025-04-21_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<scene version=\"3.0.0\">\n    <integrator type=\"path\">\n        <!-- Instantiate a path tracer with a max. path length of 8 -->\n        <integer name=\"max_depth\" value=\"8\"/>\n    </integrator>\n\n    <!-- Instantiate a perspective camera with 45 degrees field of view -->\n    <sensor type=\"perspective\">\n        <!-- Rotate the camera around the Y axis by 180 degrees -->\n        <transform name=\"to_world\">\n            <rotate y=\"1\" angle=\"180\"/>\n        </transform>\n        <float name=\"fov\" value=\"45\"/>\n\n        <!-- Render with 32 samples per pixel using a basic\n             independent sampling strategy -->\n        <sampler type=\"independent\">\n            <integer name=\"sample_count\" value=\"32\"/>\n        </sampler>\n\n        <!-- Generate an EXR image at HD resolution -->\n        <film type=\"hdrfilm\">\n            <integer name=\"width\" value=\"1920\"/>\n            <integer name=\"height\" value=\"1080\"/>\n        </film>\n    </sensor>\n\n    <!-- Add a dragon mesh made of rough glass (stored as OBJ file) -->\n    <shape type=\"obj\">\n        <string name=\"filename\" value=\"dragon.obj\"/>\n\n        <bsdf type=\"roughdielectric\">\n            <!-- Tweak the roughness parameter of the material -->\n            <float name=\"alpha\" value=\"0.01\"/>\n        </bsdf>\n    </shape>\n\n    <!-- Add another mesh, this time, stored using Mitsuba's own\n         (compact) binary representation -->\n    <shape type=\"serialized\">\n        <string name=\"filename\" value=\"lightsource.serialized\"/>\n        <transform name=\"to_world\">\n            <translate x=\"5\" y=\"-3\" z=\"1\"/>\n        </transform>\n\n        <!-- This mesh is an area emitter -->\n        <emitter type=\"area\">\n            <rgb name=\"radiance\" value=\"100,400,100\"/>\n        </emitter>\n    </shape>\n</scene>\n```\n\n----------------------------------------\n\nTITLE: Implementing Chi^2 Tests for Distribution Validation in Mitsuba 3\nDESCRIPTION: Example of using the mitsuba.chi2 module to implement Pearson's chi-square test for validating sampling strategies against reference distributions. This is used for testing BSDFs, Emitters, and other sampling code.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/developer_guide/testing.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport mitsuba as mi\nmi.set_variant('llvm_rgb')\n\n# some sampling code\ndef my_sample(sample):\n    return mi.warp.square_to_cosine_hemisphere(sample)\n\n# the corresponding probability density function\ndef my_pdf(p):\n    return mi.warp.square_to_cosine_hemisphere_pdf(p)\n\nchi2 = mi.ChiSquareTest(\n    domain=mi.SphericalDomain(),\n    sample_func=my_sample,\n    pdf_func=my_pdf,\n    sample_dim=2\n)\n\nassert chi2.run()\n```\n\n----------------------------------------\n\nTITLE: Creating an Area Light from a Geometric Shape in Mitsuba 3\nDESCRIPTION: Demonstration of how to turn a geometric shape (sphere) into an area light source. The area light is defined as a child of the shape element with a specified radiance value.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/plugin_reference/section_emitters.rst#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<scene version=3.0.0>\n    <!-- .. scene contents .. -->\n\n    <shape type=\"sphere\">\n        <emitter type=\"area\">\n            <rgb name=\"radiance\" value=\"1\"/>\n        </emitter>\n    </shape>\n</scene>\n```\n\nLANGUAGE: python\nCODE:\n```\n'type': 'scene',\n\n# .. scene contents ..\n\n'type': 'sphere',\n'emitter': {\n    'type': 'area',\n    'radiance': {\n        'type': 'rgb',\n        'value': 1.0,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mitsuba Scene Components in Python\nDESCRIPTION: This snippet demonstrates how to set up various components of a Mitsuba scene using a Python dictionary. It includes configurations for a perspective sensor, HDR film, sampler, constant emitter, and a sphere shape with a diffuse BSDF.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/key_topics/scene_format.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n{\n    \"mysensor\": {\n        \"type\": \"perspective\",\n        \"near_clip\": 1.0,\n        \"far_clip\": 1000.0,\n        \"to_world\": mi.ScalarTransform4f.look_at(origin=[1, 1, 1],\n                                                 target=[0, 0, 0],\n                                                 up=[0, 0, 1]),\n        \"myfilm\": {\n            \"type\": \"hdrfilm\",\n            \"rfilter\": {\n                \"type\": \"box\"\n            },\n            \"width\": 1024,\n            \"height\": 768,\n        }, \"mysampler\": {\n            \"type\": \"independent\",\n            \"sample_count\": 4,\n        },\n    },\n    \"myemitter\": {\n        \"type\": \"constant\"\n    },\n    \"myshape\": {\n        \"type\": \"sphere\",\n        \"mybsdf\": {\n            \"type\": \"diffuse\",\n            \"reflectance\": {\n                \"type\": \"rgb\",\n                \"value\": [0.8, 0.1, 0.1],\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: BSDF Sampling Implementation\nDESCRIPTION: Example implementation of BSDF sampling with proper handling of polarization states and coordinate transformations.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/key_topics/polarization.rst#2025-04-21_snippet_42\n\nLANGUAGE: cpp\nCODE:\n```\nBSDFContext ctx;\nSurfaceInteraction3f si = ...;\n\nVector3f wi = ...;\nsi.wi = si.to_local(wi);\n\nauto [bs, bsdf_weight] = bsdf->sample(ctx, sampler.next_1d(), sampler.next_2d());\n\nVector3f wo = si.to_world(bs.wo);\n\nbsdf_weight = si.to_world_mueller(bsdf_weight, -bs.wo, si.wi);\n```\n\n----------------------------------------\n\nTITLE: Defining a Spectrum Plugin in Python for Mitsuba 3\nDESCRIPTION: This snippet illustrates how to define a spectrum plugin within a BSDF in a Python dictionary representation of a Mitsuba 3 scene. It shows the structure for specifying spectrum parameters in a Python-based scene description.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/plugin_reference/section_spectra.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n'type': 'scene',\n'bsdf_id': {\n    'type': '<bsdf_type>',\n\n    '<parameter name>': {\n        'type': '<spectrum type>',\n        # .. spectrum parameters ..\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Mitsuba 3 via pip\nDESCRIPTION: Command to install Mitsuba 3 using pip package manager. This will also install Dr.Jit if not already available on the system.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install mitsuba\n```\n\n----------------------------------------\n\nTITLE: Mitsuba Variant Configuration\nDESCRIPTION: Example configuration for enabled Mitsuba variants in mitsuba.conf file.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/developer_guide/compiling.rst#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n\"enabled\": [\n    \"scalar_rgb\", \"scalar_spectral\", \"cuda_ad_rgb\", \"llvm_ad_rgb\", \"llvm_ad_spectral\"\n],\n```\n\n----------------------------------------\n\nTITLE: Rotating Mueller Matrix Reference Frames in C++\nDESCRIPTION: Implements functions for rotating Mueller matrix reference frames, including general case, collinear case, and rotating optical elements.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/key_topics/polarization.rst#2025-04-21_snippet_37\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename Vector3,\n          typename Float = dr::value_t<Vector3>,\n          typename MuellerMatrix = MuellerMatrix<Float>>\nMuellerMatrix rotate_mueller_basis(const MuellerMatrix &M,\n                                   const Vector3 &in_forward,\n                                   const Vector3 &in_basis_current,\n                                   const Vector3 &in_basis_target,\n                                   const Vector3 &out_forward,\n                                   const Vector3 &out_basis_current,\n                                   const Vector3 &out_basis_target) {\n    MuellerMatrix R_in  = rotate_stokes_basis(in_forward,\n                                              in_basis_current,\n                                              in_basis_target);\n    MuellerMatrix R_out = rotate_stokes_basis(out_forward,\n                                              out_basis_current,\n                                              out_basis_target);\n    return R_out * M * transpose(R_in);\n}\n\ntemplate <typename Vector3,\n          typename Float = dr::value_t<Vector3>,\n          typename MuellerMatrix = MuellerMatrix<Float>>\nMuellerMatrix rotate_mueller_basis_collinear(const MuellerMatrix &M,\n                                             const Vector3 &forward,\n                                             const Vector3 &basis_current,\n                                             const Vector3 &basis_target) {\n    MuellerMatrix R = rotate_stokes_basis(forward, basis_current, basis_target);\n    return R * M * transpose(R);\n}\n\ntemplate <typename Float>\nMuellerMatrix<Float> rotated_element(Float theta,\n                                     const MuellerMatrix<Float> &M) {\n    MuellerMatrix<Float> R = rotator(theta), Rt = transpose(R);\n    return Rt * M * R;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Scene with Single Mesh in Mitsuba XML\nDESCRIPTION: A minimal scene definition containing just a single OBJ mesh with default camera and lighting settings.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/key_topics/scene_format.rst#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<scene version=\"3.0.0\">\n    <shape type=\"obj\">\n        <string name=\"filename\" value=\"dragon.obj\"/>\n    </shape>\n</scene>\n```\n\n----------------------------------------\n\nTITLE: Configuring BSDFs in XML Scene Description\nDESCRIPTION: Example showing how to define and assign BSDFs to shapes in Mitsuba 3 using XML format. Demonstrates both named BSDF creation with reuse and direct BSDF assignment to shapes.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/plugin_reference/section_bsdfs.rst#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<scene version=3.0.0>\n    <!-- Creating a named BSDF for later use -->\n    <bsdf type=\".. BSDF type ..\" id=\"my_named_material\">\n        <!-- BSDF parameters go here -->\n    </bsdf>\n\n    <shape type=\"sphere\">\n        <!-- Example of referencing a named material -->\n        <ref id=\"my_named_material\"/>\n    </shape>\n\n    <shape type=\"sphere\">\n        <!-- Example of instantiating an unnamed material -->\n        <bsdf type=\".. BSDF type ..\">\n            <!-- BSDF parameters go here -->\n        </bsdf>\n    </shape>\n</scene>\n```\n\n----------------------------------------\n\nTITLE: Cloning Mitsuba Repository\nDESCRIPTION: Command to clone the Mitsuba 3 repository with all submodules using the stable branch.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/developer_guide/compiling.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone -b stable --recursive https://github.com/mitsuba-renderer/mitsuba3\n```\n\n----------------------------------------\n\nTITLE: Masked Function Macro Usage in C++\nDESCRIPTION: Example of the MI_MASKED_FUNCTION macro which combines mask optimization with profiler phase tracking to enable performance analysis during rendering.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/developer_guide/writing_plugin.rst#2025-04-21_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nvoid my_method(..., Mask mask) {\n    MI_MASKED_FUNCTION(ProfilerPhase::MyMethod, active);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Scene-wide Attributes in XML and Python\nDESCRIPTION: Shows how to set scene-wide attributes, specifically Embree's robust intersection mode, in both XML and Python scene configurations.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/plugin_reference.rst#2025-04-21_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<scene version=\"3.0.0\">\n    <boolean name=\"embree_use_robust_intersection\" value=\"true\"/>\n</scene>\n```\n\nLANGUAGE: python\nCODE:\n```\n{\n    'type': 'scene',\n    'embree_use_robust_intersection': True,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Point Light Emitter in Mitsuba 3\nDESCRIPTION: Example of how to set up a point light emitter illuminating a sphere in a Mitsuba 3 scene. The point light has a specified intensity and position defined in 3D coordinates.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/plugin_reference/section_emitters.rst#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<scene version=3.0.0>\n    <!-- .. scene contents .. -->\n\n    <emitter type=\"point\">\n        <rgb name=\"intensity\" value=\"1\"/>\n        <point name=\"position\" x=\"0\" y=\"0\" z=\"-2\"/>\n    </emitter>\n\n    <shape type=\"sphere\"/>\n</scene>\n```\n\nLANGUAGE: python\nCODE:\n```\n'type': 'scene',\n\n# .. scene contents ..\n\n'emitter_id': {\n    'type': 'point'\n    'position': [0, 0, -2],\n    'intensity': {\n        'type': 'spectrum',\n        'value': 1.0,\n    }\n},\n\n'shape_id': {\n    'type': 'sphere'\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing Horizontal Operations in JIT Backends\nDESCRIPTION: Demonstrates the use of alternative reduction operations to optimize performance in JIT backends by avoiding costly horizontal reductions.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/developer_guide/variants_cpp.rst#2025-04-21_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\nMask condition = ...;\nif (any_or<true>(condition)) {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Extended Types Import Macro Usage in C++\nDESCRIPTION: Example of MI_IMPORT_TYPES which imports both core types and rendering-related types, with optional custom type imports for template instantiation.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/developer_guide/writing_plugin.rst#2025-04-21_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\nusing Float    = float;\nusing Spectrum = Spectrum<Float, 4>;\n\nMI_IMPORT_TYPES(MyType1, MyType2)\n```\n\n----------------------------------------\n\nTITLE: Configuring Stokes Integrator in XML\nDESCRIPTION: XML configuration for enabling Stokes vector output in Mitsuba 3 using the specialized Stokes integrator plugin.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/key_topics/polarization.rst#2025-04-21_snippet_46\n\nLANGUAGE: xml\nCODE:\n```\n<integrator type=\"stokes\">\n    <!-- Note how there is still a normal path tracer nested inside that\n         will do the actual simulation. -->\n    <integrator type=\"path\"/>\n</integrator>\n```\n\n----------------------------------------\n\nTITLE: Object Referencing in Mitsuba Scene Configuration\nDESCRIPTION: This snippet illustrates how to reference objects within a Mitsuba scene configuration using Python dictionaries. It shows how to define BSDFs and reference them in shape definitions using both keys and IDs.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/key_topics/scene_format.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n{\n    \"type\": \"scene\", # this BSDF can be referenced using its key \"bsdf_id_0\"\n    \"bsdf_key_0\": {\n        \"type\": \"roughconductor\"\n    },\n\n    \"shape_0\": {\n        \"type\": \"sphere\",\n        \"mybsdf\": {\n            \"type\": \"ref\",\n            \"id\": \"bsdf_key_0\"\n        }\n    }\n\n    # this BSDF can be referenced using its key \"bsdf_key_1\" or its id \"bsdf_id_1\"\n    \"bsdf_key_1\": {\n        \"type\": \"roughconductor\",\n        \"id\": \"bsdf_id_1\"\n    },\n\n    \"shape_2\": {\n        \"type\": \"sphere\",\n        \"mybsdf\": {\n            \"type\": \"ref\",\n            \"id\": \"bsdf_id_1\"\n        }\n    },\n\n    \"shape_3\": {\n        \"type\": \"sphere\",\n        \"mybsdf\": {\n            \"type\": \"ref\",\n            \"id\": \"bsdf_key_1\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Media for Shapes in Mitsuba\nDESCRIPTION: This example demonstrates how to attach participating media to shapes in a Mitsuba scene. It shows how to specify both interior and exterior media directly or reference previously declared media using the ref element.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/plugin_reference/section_media.rst#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<scene version=3.0.0>\n    <shape type=\".. shape type ..\">\n        .. shape parameters ..\n\n        <medium name=\"interior\" type=\"... medium type ...\">\n            ... medium parameters ...\n        </medium>\n        <medium name=\"exterior\" type=\"... medium type ...\">\n            ... medium parameters ...\n        </medium>\n        <!-- Alternatively: reference named media that\n            have been declared previously\n            <ref name=\"interior\" id=\"myMedium1\"/>\n            <ref name=\"exterior\" id=\"myMedium2\"/>\n        -->\n    </shape>\n</scene>\n```\n\nLANGUAGE: python\nCODE:\n```\n'type': 'scene',\n'shape_id': {\n    'type': '<shape_type>',\n    # .. shape parameters ..\n\n    'interior': {\n        'type': '<medium_type>',\n        # .. medium parameters ..\n    },\n    'exterior': {\n        'type': '<medium_type>',\n        # .. medium parameters ..\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running pytest for Mitsuba 3\nDESCRIPTION: Commands to run the test suite using pytest, including options for running specific tests or excluding slow tests. Also shows how to use the build system's pytest target for parallel execution.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/developer_guide/testing.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npytest\n\n# or to run a single test file\npytest src/bsdfs/tests/test_diffuse.py\n```\n\nLANGUAGE: bash\nCODE:\n```\npytest -m 'not slow'\n```\n\nLANGUAGE: bash\nCODE:\n```\nninja pytest\n```\n\n----------------------------------------\n\nTITLE: Constructing Stokes Basis Vector in C++\nDESCRIPTION: Constructs a unique Stokes basis vector for a given unit vector omega using the coordinate_system function.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/key_topics/polarization.rst#2025-04-21_snippet_35\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename Vector3>\nVector3 stokes_basis(const Vector3 &omega) {\n    return coordinate_system(omega).first;\n}\n```\n\n----------------------------------------\n\nTITLE: Python Dictionary Scene Configuration\nDESCRIPTION: Demonstrates how to configure a Mitsuba scene using Python dictionaries instead of XML.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/key_topics/scene_format.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nscene = mi.load_dict({\n    \"type\": \"scene\",\n    \"myintegrator\": {\n        \"type\": \"path\"\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Basic MyPlugin Template Structure in C++\nDESCRIPTION: A complete example showing the structure of a Mitsuba plugin including base imports, type imports, masked function usage, and RTTI declarations.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/developer_guide/writing_plugin.rst#2025-04-21_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nNAMESPACE_BEGIN(mitsuba)\n\ntemplate <typename Float, typename Spectrum>\nclass MyPlugin : public PluginInterface<Float, Spectrum> {\npublic:\n    MI_IMPORT_BASE(PluginInterface, m_some_member, some_method)\n    MI_IMPORT_TYPES()\n\n    MyPlugin();\n\n    Spectrum foo(..., Mask active) const override {\n        MI_MASKED_FUNCTION(ProfilerPhase::MyEval, active)\n        // ...\n    }\n\n    /// Declare RTTI data structures\n    MI_DECLARE_CLASS()\nprotected:\n    /// Important: declare a protected virtual destructor\n    virtual ~MyPlugin();\n\n};\n\n/// Implement RTTI data structures\nMI_IMPLEMENT_CLASS_VARIANT(MyPlugin, PluginInterface)\nMI_EXPORT_PLUGIN(MyPlugin, \"Description of my plugin\")\nNAMESPACE_END(mitsuba)\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Plugin with Nested Elements in XML and Python\nDESCRIPTION: Demonstrates how to instantiate a plugin with both basic parameters and nested plugins (both named and unnamed) in XML and Python formats.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/plugin_reference.rst#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<integrator type=\"amazing\">\n    <boolean name=\"softer_rays\" value=\"true\"/>\n    <float name=\"dark_matter\" value=\"0.44\"/>\n    <!-- Nested unnamed integrator -->\n    <integrator type=\"path\"/>\n    <!-- Nested texture named puppies -->\n    <texture name=\"puppies\" type=\"bitmap\">\n        <string name=\"filename\" value=\"cute.jpg\"/>\n    </texture>\n</integrator>\n```\n\nLANGUAGE: python\nCODE:\n```\n{\n    'type': 'amazing',\n    'softer_rays': True,\n    'dark_matter': 0.44,\n    # Nested unnamed integrator\n    'foo': {\n        'type': 'path'\n    },\n    # Nested texture named puppies\n    'puppies': {\n        'type': 'bitmap',\n        'filename': 'cute.jpg'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Computing Local Stokes Basis Vectors\nDESCRIPTION: Simple example showing how to compute the local Stokes basis vectors for incident and outgoing directions.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/key_topics/polarization.rst#2025-04-21_snippet_43\n\nLANGUAGE: cpp\nCODE:\n```\nVector3f bo_local = stokes_basis(-wo_local);\nVector3f bi_local = stokes_basis(wi_local);\n```\n\n----------------------------------------\n\nTITLE: Declaring Sensor in Python for Mitsuba 3\nDESCRIPTION: Python dictionary representation of a sensor declaration in Mitsuba 3. It includes the sensor type and nested film and sampler declarations with their respective types.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/plugin_reference/section_sensors.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n'type': 'scene',\n\n# .. scene contents ..\n\n'sensor_id': {\n    'type': '<sensor_type>',\n\n    'film_id': {\n        'type': '<film_type>',\n        # ...\n    },\n    'sampler_id': {\n        'type': '<sampler_type>',\n        # ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Spectrum Plugin in XML for Mitsuba 3\nDESCRIPTION: This snippet shows how to explicitly add a uniform spectrum plugin to a BSDF in an XML scene description for Mitsuba 3. It demonstrates the structure for defining spectrum parameters within a BSDF context.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/plugin_reference/section_spectra.rst#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<scene version=3.0.0>\n    <bsdf type=\".. BSDF type ..\">\n        <!-- Explicitly add a uniform spectrum plugin -->\n        <spectrum type=\".. spectrum type ..\" name=\".. parameter name ..\">\n            <!-- Spectrum parameters go here -->\n        </spectrum>\n    </bsdf>\n</scene>\n```\n\n----------------------------------------\n\nTITLE: Mueller Matrix Components Calculation\nDESCRIPTION: Definition of Mueller matrix components for polarized light interactions, showing the matrix structure and calculation of its elements.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/key_topics/polarization.rst#2025-04-21_snippet_28\n\nLANGUAGE: tex\nCODE:\n```\n\\begin{equation}\n    \\begin{bmatrix}\n        A & B & 0 & 0 \\\\\n        B & A & 0 & 0 \\\\\n        0 & 0 & C & S \\\\\n        0 & 0 & -S & C\n    \\end{bmatrix}\n\\end{equation}\n```\n\n----------------------------------------\n\nTITLE: Configuring BSDFs in Python Scene Description\nDESCRIPTION: Example showing how to define and assign BSDFs to shapes in Mitsuba 3 using Python dictionary format. Shows both named BSDF creation with reuse and direct BSDF assignment to shapes.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/plugin_reference/section_bsdfs.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n'type': 'scene',\n# Create a named BSDF for later use\n'my_named_material': {\n    'type': '<bsdf_type>',\n    # ...\n},\n\n'shape_id_0': {\n    # Example of instantiating a named material\n    'bsdf' : {\n        'type' : 'ref',\n        'id' : 'my_named_material'\n    }\n},\n\n'shape_id_1': {\n    # Example of instantiating an unnamed material\n    'bsdf' : {\n       'type': '<bsdf_type>',\n       # ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: General Structure of Fresnel Mueller Matrix\nDESCRIPTION: Simplified representation of the Mueller matrix for Fresnel equations, showing the non-zero entry pattern. This template is used for comparing measured data with analytical predictions.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/key_topics/polarization.rst#2025-04-21_snippet_26\n\nLANGUAGE: math\nCODE:\n```\n\\begin{equation}\n    \\begin{bmatrix}\n        A & B & 0 & 0 \\\\\n        B & A & 0 & 0 \\\\\n        0 & 0 & C & S1 \\\\\n        0 & 0 & S2 & C\n    \\end{bmatrix}\n\\end{equation}\n```\n\n----------------------------------------\n\nTITLE: Windows Build Configuration\nDESCRIPTION: Commands for configuring and building Mitsuba on Windows.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/developer_guide/compiling.rst#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# To be safe, explicitly ask for the 64 bit version of Visual Studio\ncmake -G \"Visual Studio 17 2022\" -A x64 -B build\n\ncmake --build build --config Release\n```\n\n----------------------------------------\n\nTITLE: Basic Scene Rendering Command\nDESCRIPTION: Command to render a Mitsuba scene file using default settings\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/developer_guide/compiling.rst#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nmitsuba scene.xml\n```\n\n----------------------------------------\n\nTITLE: Configuring HDR Film in Mitsuba 3 (XML)\nDESCRIPTION: An XML example showing how to configure an HDR film with full HD resolution and Gaussian filter in Mitsuba 3. The film element is nested inside a sensor declaration and controls the output format and properties of the rendered image.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/plugin_reference/section_films.rst#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<scene version=3.0.0>\n    <!-- .. scene contents -->\n\n    <sensor type=\".. sensor type ..\">\n        <!-- .. sensor parameters .. -->\n\n        <!-- Write to a high dynamic range EXR image -->\n        <film type=\"hdrfilm\">\n            <!-- Specify the desired resolution (e.g. full HD) -->\n            <integer name=\"width\" value=\"1920\"/>\n            <integer name=\"height\" value=\"1080\"/>\n\n            <!-- Use a Gaussian reconstruction filter. -->\n            <rfilter type=\"gaussian\"/>\n        </film>\n    </sensor>\n</scene>\n```\n\n----------------------------------------\n\nTITLE: Linux Build Commands\nDESCRIPTION: Commands for building Mitsuba on Linux systems.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/developer_guide/compiling.rst#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Create a directory where build products are stored\nmkdir build\ncd build\ncmake -GNinja ..\nninja\n```\n\n----------------------------------------\n\nTITLE: Measured Mueller Matrix for Air Calibration\nDESCRIPTION: Mueller matrix reconstructed from measurements without a sample (air), used as a calibration reference. This matrix is close to the identity matrix but accounts for system imperfections.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/key_topics/polarization.rst#2025-04-21_snippet_24\n\nLANGUAGE: math\nCODE:\n```\n\\begin{equation}\n    \\mathbf{M}^{\\text{air}} = \\begin{bmatrix}\n        1.00048 &  0.04183 & -0.00323 & -0.00198 \\\\\n        0.00466 &  1.03467 & -0.00114 & -0.01816 \\\\\n       -0.01167 &  0.00397 &  1.03684 & -0.00046 \\\\\n        0.00007 & -0.00043 &  0.00172 &  0.99927\n    \\end{bmatrix}\n\\end{equation}\n```\n\n----------------------------------------\n\nTITLE: Linux Dependency Installation\nDESCRIPTION: Commands to install required dependencies on Ubuntu Linux.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/developer_guide/compiling.rst#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Install recent versions build tools, including Clang\nsudo apt install clang-17 cmake ninja-build\n\n# Install libraries for image I/O\nsudo apt install libpng-dev libjpeg-dev\n\n# Install required Python packages\nsudo apt install libpython3-dev python3-distutils\n```\n\n----------------------------------------\n\nTITLE: XML Scene with References\nDESCRIPTION: Example showing how to use references to reuse materials and textures efficiently in a scene definition.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/key_topics/scene_format.rst#2025-04-21_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<scene version=\"3.0.0\">\n    <texture type=\"bitmap\" id=\"my_image\">\n        <string name=\"filename\" value=\"textures/my_image.jpg\"/>\n    </texture>\n\n    <bsdf type=\"diffuse\" id=\"my_material\">\n        <ref name=\"reflectance\" id=\"my_image\"/>\n    </bsdf>\n\n    <shape type=\"obj\">\n        <string name=\"filename\" value=\"meshes/my_shape.obj\"/>\n        <ref id=\"my_material\"/>\n    </shape>\n</scene>\n```\n\n----------------------------------------\n\nTITLE: Variant-Specific Scene Rendering Command\nDESCRIPTION: Command to render a scene using a specific variant (scalar_spectral_polarized) that was previously enabled in mitsuba.conf\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/developer_guide/compiling.rst#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nmitsuba -m scalar_spectral_polarized scene.xml\n```\n\n----------------------------------------\n\nTITLE: Assigning Media to Sensors in Mitsuba\nDESCRIPTION: This example shows how to assign a medium to sensors in a scene, which is important when a medium permeates a volume of space that includes sensors. It demonstrates how to define a medium and reference it from a sensor configuration.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/plugin_reference/section_media.rst#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<scene version=3.0.0>\n    <!-- .. scene contents .. -->\n\n    <medium type=\"homogeneous\" id=\"fog\">\n        <!-- .. homogeneous medium parameters .. -->\n    </medium>\n    <sensor type=\"perspective\">\n        <!-- .. perspective camera parameters .. -->\n        <!-- Reference the fog medium from within the sensor declaration\n            to make it aware that it is embedded inside this medium -->\n        <ref id=\"fog\"/>\n    </sensor>\n</scene>\n```\n\nLANGUAGE: python\nCODE:\n```\n'type': 'scene',\n\n# .. scene contents ..\n\n'fog': {\n    'type': 'homogeneous',\n    # .. homogeneous medium parameters ..\n},\n\n'sensor_id': {\n    'type': 'perspective',\n    # .. perspective camera parameters ..\n\n    # Reference the fog medium\n    'medium' : {\n        'type' : 'ref',\n        'id' : 'fog'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating System Configuration Information for Mitsuba 3 (Python)\nDESCRIPTION: This code snippet shows how to generate system configuration information for Mitsuba 3 using a Python command. It's used to provide detailed system information when reporting issues.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/issue_template.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npython -m mitsuba.sys_info\n```\n\n----------------------------------------\n\nTITLE: Calculating Dual-Rotating Retarders Measurement Signal\nDESCRIPTION: Formula for computing the intensity signal in a dual-rotating retarders (DRR) ellipsometry setup, where the signal passes through polarizers and quarter-wave plates before and after interaction with a sample.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/key_topics/polarization.rst#2025-04-21_snippet_22\n\nLANGUAGE: math\nCODE:\n```\n\\begin{equation}\n    f(\\phi) = \\mathbf{P}(\\pi/2) \\cdot \\mathbf{Q}(\\phi) \\cdot \\mathbf{M} \\cdot \\mathbf{Q}(5\\phi) \\cdot \\mathbf{P}(0)\n\\end{equation}\n```\n\n----------------------------------------\n\nTITLE: Defining Spectrum Properties in XML\nDESCRIPTION: Shows how to specify spectrum properties using either text or binary spectrum files in Mitsuba scene configurations.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/key_topics/scene_format.rst#2025-04-21_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<spectrum name=\"color_property\" filename=\"measured_spectrum.spd\"/>\n<spectrum name=\"color_property\" filename=\"measured_binary_spectrum.spb\"/>\n```\n\n----------------------------------------\n\nTITLE: Using Adapter Functions for Plugin Testing in Mitsuba 3\nDESCRIPTION: Demonstration of using Adapter functions from the mitsuba.chi2 module to wrap different plugins (e.g., BSDF, Emitter) for testing purposes. This example tests a roughdielectric BSDF.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/developer_guide/testing.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport mitsuba as mi\nimport drjit as dr\n\nmi.set_variant('llvm_rgb')\n\nxml = \"\"\"<float name=\"alpha\" value=\"0.5\"/>\n         <boolean name=\"sample_visible\" value=\"false\"/>\n         <string name=\"distribution\" value=\"ggx\"/>\n      \"\"\"\nwi = dr.normalize([0.2, -0.6, -0.5])\nsample_func, pdf_func = mi.BSDFAdapter(\"roughdielectric\", xml, wi=wi)\n\nchi2 = mi.ChiSquareTest(\n    domain=mi.SphericalDomain(),\n    sample_func=sample_func,\n    pdf_func=pdf_func,\n    sample_dim=3\n)\n\nassert chi2.run()\n\n# Forces the chi2 test to dump the plotting script (optional)\nchi2._dump_tables()\n```\n\n----------------------------------------\n\nTITLE: Configuring Named Texture References in Mitsuba 3\nDESCRIPTION: Example showing how to define named textures at the scene level and reference them within BSDF definitions. This approach is useful for reusing the same texture across multiple materials.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/plugin_reference/section_textures.rst#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<scene version=3.0.0>\n    <!-- Create a named texture at the top level -->\n    <texture type=\".. texture type ..\" id=\"my_named_texture\">\n        <!-- .. Texture parameters go here .. -->\n    </texture>\n\n    <!-- Create a BSDF that supports textured parameters -->\n    <bsdf type=\".. BSDF type ..\">\n        <!-- Example of referencing a named texture -->\n        <ref id=\"my_named_texture\" name=\".. parameter name ..\"/>\n\n        <!-- .. Non-spatially varying BSDF parameters ..-->\n    </bsdf>\n</scene>\n```\n\nLANGUAGE: python\nCODE:\n```\n'type': 'scene',\n\n# .. scene contents ..\n\n'texture_id': {\n    'type': '<texture_type>':    \n    # .. texture parameters ..\n},\n\n# Create a BSDF that supports textured parameters\n'my_textured_material': {\n    'type': '<bsdf_type>',\n    '<parameter_name>' : {\n        'type' : 'ref',\n        'id' : 'texture_id'\n    }\n\n    # .. non-spatially varying BSDF parameters ..\n}\n```\n\n----------------------------------------\n\nTITLE: Using Python Fixtures for Variant Testing in Mitsuba 3\nDESCRIPTION: Example of how to use Python fixtures to run tests on specific variants of the Mitsuba 3 renderer. This allows for targeted testing of different configurations.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/developer_guide/testing.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# This test will run on all available variants\ndef test_hello_world(variants_all):\n    print(f'Hello {mi.variant()}')\n    assert True\n```\n\n----------------------------------------\n\nTITLE: Spectrum Data File Format Example\nDESCRIPTION: Example of a spectral data file format showing wavelength and measurement pairs with comments.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/key_topics/scene_format.rst#2025-04-21_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n# This file contains a measured spectral power/reflectance distribution\n406.13 0.703313\n413.88 0.744563\n422.03 0.791625\n430.62 0.822125\n435.09 0.834000\n...\n```\n\n----------------------------------------\n\nTITLE: macOS Build Commands\nDESCRIPTION: Commands for building Mitsuba on macOS systems.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/developer_guide/compiling.rst#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmkdir build\ncd build\ncmake -GNinja ..\nninja\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Basic Plugin in XML and Python\nDESCRIPTION: Shows how to instantiate a hypothetical 'amazing' integrator plugin with basic parameters in both XML and Python formats.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/plugin_reference.rst#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<integrator type=\"amazing\">\n    <boolean name=\"softer_rays\" value=\"true\"/>\n    <float name=\"dark_matter\" value=\"0.44\"/>\n</integrator>\n```\n\nLANGUAGE: python\nCODE:\n```\n{\n    'type': 'amazing',\n    'softer_rays': True,\n    'dark_matter': 0.44\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Library Properties and Dependencies\nDESCRIPTION: Sets up library properties including optimization flags and links required dependencies like nanothread, rgb2spec, Embree, and DrJit.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/src/render/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_definitions(mitsuba-render\n  PRIVATE -DMI_BUILD_MODULE=MI_MODULE_LIB)\n\nset_target_properties(mitsuba-render PROPERTIES\n  INTERPROCEDURAL_OPTIMIZATION ON)\n\nset_target_properties(mitsuba-render PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\n\n# Link to nanothread and rgb2spec\ntarget_link_libraries(mitsuba-render PRIVATE nanothread rgb2spec)\n\n# Link to Embree\nif (MI_ENABLE_EMBREE)\n    target_link_libraries(mitsuba-render PRIVATE embree)\nendif()\n\ntarget_link_libraries(mitsuba-render PUBLIC drjit)\n\nif (MI_ENABLE_JIT)\n  target_link_libraries(mitsuba-render PUBLIC drjit-core)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Sphere Shape Definition in Mitsuba XML\nDESCRIPTION: Scene containing a sphere primitive with specified radius.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/key_topics/scene_format.rst#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<scene version=\"3.0.0\">\n    <shape type=\"sphere\">\n        <float name=\"radius\" value=\"10\"/>\n    </shape>\n</scene>\n```\n\n----------------------------------------\n\nTITLE: Core Types Import Macro Usage in C++\nDESCRIPTION: Example of using MI_IMPORT_CORE_TYPES to automatically import all of Mitsuba's core types like vectors and points based on the Float type.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/developer_guide/writing_plugin.rst#2025-04-21_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nusing Float = float;\n\nMI_IMPORT_CORE_TYPES()\n```\n\n----------------------------------------\n\nTITLE: Mueller Matrix Component Calculations\nDESCRIPTION: Mathematical formulas for calculating the individual components (A, B, C, S) of the Mueller matrix using Fresnel coefficients and phase shifts.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/key_topics/polarization.rst#2025-04-21_snippet_29\n\nLANGUAGE: tex\nCODE:\n```\n\\begin{align}\n    A &= \\frac{F_{\\bot} + F_{\\parallel}}{2}\n    \\\\\n    B &= \\frac{F_{\\bot} - F_{\\parallel}}{2}\n    \\\\\n    C &= \\cos(\\delta_{\\bot} - \\delta_{\\parallel}) \\cdot \\sqrt{F_{\\bot} \\cdot F_{\\parallel}}\n    \\\\\n    S &= \\sin(\\delta_{\\bot} - \\delta_{\\parallel}) \\cdot \\sqrt{F_{\\bot} \\cdot F_{\\parallel}}\n\\end{align}\n```\n\n----------------------------------------\n\nTITLE: Implementing Branching Logic for Vectorized Backends\nDESCRIPTION: Compares scalar and vectorized branching logic in Mitsuba, using dr::select for conditional operations in vectorized backends.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/developer_guide/variants_cpp.rst#2025-04-21_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\n// --------------------\n// Scalar code (discouraged)\n\nScene scene = ...;\nRay3f ray = ...;\nSurfaceInteraction3f si = scene->ray_intersect(ray);\n\nif (si.is_valid())\n    return 1.f;\nelse\n    return 0.f;\n\n// --------------------\n// Generic code\n\nScene scene = ...;\nRay3f ray = ...;\nSurfaceInteraction3f si = scene->ray_intersect(ray);\n\nreturn dr::select(si.is_valid(), 1.0f, 0.f);\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Properties and Dependencies for Mitsuba Core\nDESCRIPTION: Sets compile definitions, build properties, and links required libraries for the Mitsuba core library. Includes conditional linking based on platform and build options.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/src/core/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset_property(\n  SOURCE util.cpp\n  PROPERTY COMPILE_DEFINITIONS\n  MI_BRANCH=\"${GIT_BRANCH}\" MI_HASH=\"${GIT_COMMIT_HASH}\"\n)\n\ntarget_compile_definitions(mitsuba-core\n  PRIVATE ${PNG_DEFINES} -DMI_BUILD_MODULE=MI_MODULE_LIB)\n\nset_target_properties(mitsuba-core PROPERTIES\n  INTERPROCEDURAL_OPTIMIZATION ON)\n\nset_target_properties(mitsuba-core PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\n\ntarget_link_libraries(mitsuba-core PRIVATE\n  ${PNG_LIBRARIES}\n  ${ZLIB_LIBRARY}\n  nanothread\n  pugixml\n  ${PNG_LIBRARIES} ${JPEG_LIBRARIES} IlmImf\n)\n\nif (CMAKE_SYSTEM_PROCESSOR MATCHES \"(x86_64)|(amd64)|(AMD64)\")\n  target_link_libraries(mitsuba-core PRIVATE asmjit)\nendif()\n\nif (NOT MSVC)\n  target_link_libraries(mitsuba-core PRIVATE ${CMAKE_DL_LIBS})\nendif()\n\ntarget_link_libraries(mitsuba-core PUBLIC drjit)\ntarget_link_libraries(mitsuba-core PRIVATE fast_float)\n\nif (MI_ENABLE_JIT)\n  target_link_libraries(mitsuba-core PUBLIC drjit-core)\nendif()\n\nif (MI_ENABLE_AUTODIFF)\n  target_link_libraries(mitsuba-core PUBLIC drjit-extra)\nendif()\n\nif (MI_ENABLE_PYTHON)\n  add_subdirectory(python)\n  set(CORE_PY_V_SRC ${CORE_PY_V_SRC} PARENT_SCOPE)\n  set(CORE_PY_SRC   ${CORE_PY_SRC}   PARENT_SCOPE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Implementing Variant-Specific Code with constexpr\nDESCRIPTION: Shows how to use if constexpr statements to write variant-specific code that is resolved at compile-time, avoiding runtime overhead.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/developer_guide/variants_cpp.rst#2025-04-21_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\nRay3f ray = ...;\nMask active = ...;\nSpectrum result = compute_stuff(ray, active);\n\nColor3f xyz;\nif constexpr (is_monochromatic_v<Spectrum>)\n    xyz = result.x();\nelse if constexpr (is_rgb_v<Spectrum>)\n    xyz = srgb_to_xyz(result, active);\nelse\n    xyz = spectrum_to_xyz(result, ray.wavelengths, active);\n```\n\n----------------------------------------\n\nTITLE: Fourier Series Expansion for Mueller Matrix Reconstruction\nDESCRIPTION: Expansion of the measured signal in a 12-term Fourier series, which allows direct inference of the Mueller matrix entries for the material being observed in the DRR setup.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/key_topics/polarization.rst#2025-04-21_snippet_23\n\nLANGUAGE: math\nCODE:\n```\n\\begin{equation}\n    f(\\phi) = a_0 + \\sum_{k=1}^{12} \\big( a_k \\cos(2k \\phi) + b_k \\sin(2k \\phi) \\big)\n\\end{equation}\n```\n\n----------------------------------------\n\nTITLE: Defining the Main Mitsuba Shared Library with Dependencies in CMake\nDESCRIPTION: Creates the main Mitsuba shared library and links it against the core and render components. Enables link-time optimization and adds compiler-specific link options for GCC.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/src/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(mitsuba SHARED)\ntarget_link_libraries(mitsuba PUBLIC mitsuba-core)\ntarget_link_libraries(mitsuba PUBLIC mitsuba-render)\nset_target_properties(mitsuba PROPERTIES INTERPROCEDURAL_OPTIMIZATION ON)\n\nif (CMAKE_CXX_COMPILER_ID MATCHES \"^(GNU)$\")\n  # Treat undefined symbols as errors when linking\n  target_link_libraries(mitsuba PRIVATE -Wl,--no-undefined)\n  # Silence an incorrect warning message in GCC LTO builds\n  target_link_options(mitsuba PRIVATE -Walloc-size-larger-than=18446744073709551615)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Using Variant-Specific Pointer Types in Mitsuba\nDESCRIPTION: Illustrates how to use variant-specific pointer types imported by MI_IMPORT_TYPES, which handle differences between scalar and vectorized variants.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/developer_guide/variants_cpp.rst#2025-04-21_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\n// Imports BSDFPtr, EmitterPtr, etc..\nMI_IMPORT_TYPES()\n\nScene scene = ...;\nMask active = ...;\nRay3f ray = ...;\nSurfaceInteraction3f si = scene->ray_intersect(ray, active);\n\n// Array of pointers if Float is an array\nBSDFPtr bsdf = si.bsdf();\n\n// Dr.Jit is able to dispatch method calls involving arrays of pointers\nbsdf->eval(..., active);\n```\n\n----------------------------------------\n\nTITLE: Explicit Reduction Comparison in C++ with Dr.Jit 1.0.0\nDESCRIPTION: Shows how to perform element-wise comparison and explicit reduction using the == operator and dr::all function in Dr.Jit 1.0.0. This replaces the deprecated dr::eq and dr::neq functions.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/porting_3_6.rst#2025-04-21_snippet_10\n\nLANGUAGE: cpp\nCODE:\n```\nbool res = dr::all(a == b);\n```\n\n----------------------------------------\n\nTITLE: Using Active Masks in Mitsuba Functions\nDESCRIPTION: Shows how to use active masks in Mitsuba functions to optimize computation for valid entries in vectorized backends.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/developer_guide/variants_cpp.rst#2025-04-21_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\n// Mask specifying the active lanes\nMask active = ...;\n\nScene scene = ...;\nRay3f ray = ...;\nSurfaceInteraction3f si = scene->ray_intersect(ray, active);\n\nreturn dr::select(active & si.is_valid(), 1.0f, 0.f);\n```\n\n----------------------------------------\n\nTITLE: Adding Mitsuba Plugins in CMake\nDESCRIPTION: Adds various rendering plugin directories to the build process, including BSDFs, emitters, films, integrators, and other rendering components. Exposes the plugin targets to the parent scope.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/src/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(bsdfs)\nadd_subdirectory(emitters)\nadd_subdirectory(films)\nadd_subdirectory(integrators)\nadd_subdirectory(media)\nadd_subdirectory(phase)\nadd_subdirectory(rfilters)\nadd_subdirectory(samplers)\nadd_subdirectory(sensors)\nadd_subdirectory(shapes)\nadd_subdirectory(spectra)\nadd_subdirectory(textures)\nadd_subdirectory(volumes)\nset(MI_PLUGIN_TARGETS \"${MI_PLUGIN_TARGETS}\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Implementing Fresnel-based pBSDF Evaluation\nDESCRIPTION: Complete example showing how to implement a polarization-aware BSDF evaluation using Fresnel equations, including transport mode handling and Mueller matrix transformations.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/key_topics/polarization.rst#2025-04-21_snippet_45\n\nLANGUAGE: cpp\nCODE:\n```\nVector3f wo_local = ...;\nVector3f wi_local = ...;\n\nVector3f wo_hat = ctx.mode == TransportMode::Radiance ? wo_local : wi_local,\n         wi_hat = ctx.mode == TransportMode::Radiance ? wi_local : wo_local;\n\ndr::Complex<UnpolarizedSpectrum> eta = ...;\n\nUnpolarizedSpectrum cos_theta = Frame3f::cos_theta(wo_hat);\nSpectrum value = mueller::specular_reflection(cos_theta, eta);\n\nvalue = mueller::reverse(value);\n\nVector3f n(0, 0, 1);\nVector3f s_axis_in  = dr::normalize(dr::cross(n, -wo_hat)),\n         s_axis_out = dr::normalize(dr::cross(n, wi_hat));\n\nvalue = mueller::rotate_mueller_basis(value,\n                                      -wo_hat, s_axis_in, mueller::stokes_basis(-wo_hat),\n                                       wi_hat, s_axis_out, mueller::stokes_basis(wi_hat));\n```\n\n----------------------------------------\n\nTITLE: Simplified Vectorized Getter in C++ with Dr.Jit 1.0.0\nDESCRIPTION: Demonstrates the simplified initialization of vectorized getters in custom C++ plugins with Dr.Jit 1.0.0. The dr::set_attr call is no longer necessary, reducing potential errors.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/porting_3_6.rst#2025-04-21_snippet_13\n\nLANGUAGE: cpp\nCODE:\n```\n// Registered getter as DRJIT_CALL_GETTER\nuint32_t Base::getter() const { return m_getter; }\n\nMyPlugin(const Properties &props) : Base(props) {\n  ...\n  m_getter = m_components[0];\n}\n```\n\n----------------------------------------\n\nTITLE: Bitmap Texture Initialization Example\nDESCRIPTION: Example showing bitmap texture initialization with half-precision storage and potential pitfalls during optimization.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/porting_3_6.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport mitsuba as mi\nimport drjit as dr\nmi.set_variant('cuda_ad_rgb')\n\nbitmap = mi.load_dict({\n    \"type\" : \"bitmap\",\n    \"filename\" : \"my_image.png\"\n})\n\nparams = mi.traverse(bitmap)\n\nx = dr.ones(mi.TensorXf, shape=(9,10,3))\n\nparams['data'] = x\nparams.update()\n\ntype(params['data'])\n```\n\n----------------------------------------\n\nTITLE: Using Type Aliases in Mitsuba C++ Functions\nDESCRIPTION: Demonstrates how to use the MI_IMPORT_TYPES macro to import type aliases in a templated function, allowing use of Mitsuba types without explicit templating.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/developer_guide/variants_cpp.rst#2025-04-21_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename Float, typename Spectrum>\nvoid my_function() {\n    /// Import type aliases (e.g. using Vector3f = Vector<Float, 3>;)\n    MI_IMPORT_TYPES()\n\n    // Can now use those types as if they were not templated\n    Point3f p(4.f, 3.f, 0.f);\n    Vector3f v(1.f, 0.f, 0.f);\n    Ray3f ray(p, v);\n    std::cout << ray << std::endl;\n}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding Python Bindings in CMake\nDESCRIPTION: Conditionally adds Python bindings to the build process if the MI_ENABLE_PYTHON option is enabled.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/src/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif (MI_ENABLE_PYTHON)\n  add_subdirectory(python)\nendif()\n```\n\n----------------------------------------\n\nTITLE: C++ Loop Implementation with Dr.Jit\nDESCRIPTION: Example of implementing loops in C++ using dr::while_loop with manual state tracking.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/porting_3_6.rst#2025-04-21_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\nFloat x;\nBool y;\n\ndr::tie(x, y) = dr::while_loop(dr::make_tuple(x, y), /* initial state */\n  [](const Float& x, const Bool& y) { return y; },   /* condition     */\n  [](Float& x, Bool& y) { ... });                    /* body          */\n\nx += 1;\n```\n\n----------------------------------------\n\nTITLE: Calculating Transmittance in LaTeX\nDESCRIPTION: Formula for calculating transmittance (T) as the ratio of transmitted power to incident power, using beam areas and intensities.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/key_topics/polarization.rst#2025-04-21_snippet_11\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{align}\n    T = \\frac{\\text{transmitted power}}{\\text{incident power}} = \\frac{A_t I_t}{A_i I_i}\n\\end{align}\n```\n\n----------------------------------------\n\nTITLE: Defining Variant Types in Mitsuba Configuration\nDESCRIPTION: Example of how variant types are defined in the mitsuba.conf file, specifying float and spectrum types for a scalar_rgb variant.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/developer_guide/variants_cpp.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"scalar_rgb\": {\n    \"float\": \"float\",\n    \"spectrum\": \"Color<Float, 3>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up CUDA PTX Resources\nDESCRIPTION: Configures CUDA PTX resource handling by gathering PTX files and using bin2c to convert them into C++ source files when CUDA is enabled.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/src/render/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif (MI_ENABLE_CUDA)\n  # Glob up PTX files\n  file(GLOB resources \"${PROJECT_SOURCE_DIR}/resources/ptx/*.ptx\")\n\n  # Concatenate resource files into a comma separated string\n  string (REGEX REPLACE \"([^\\\\]|^);\" \"\\\\1,\" resources_string \"${resources}\")\n  string (REGEX REPLACE \"[\\\\](.)\" \"\\\\1\" resources_string \"${resources_string}\")\n\n  # Create command line for running bin2c cmake script\n  set(bin2c_cmdline\n    -DOUTPUT_C=librender_ptx.cpp\n    -DOUTPUT_H=librender_ptx.h\n    \"-DINPUT_FILES=${resources_string}\"\n    -P \"${PROJECT_SOURCE_DIR}/ext/nanogui/resources/bin2c.cmake\")\n\n  # Run bin2c on resource files\n  add_custom_command(\n    OUTPUT librender_ptx.cpp librender_ptx.h\n    COMMAND ${CMAKE_COMMAND} ARGS ${bin2c_cmdline}\n    DEPENDS ${resources}\n    COMMENT \"Running bin2c\"\n    PRE_BUILD VERBATIM)\n\n  set(LIBRENDER_EXTRA_SRC librender_ptx.cpp librender_ptx.h)\n  include_directories(${CMAKE_CURRENT_BINARY_DIR})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Updated Loop Implementation using Dr.Jit Syntax Decorator\nDESCRIPTION: Modern implementation using the @dr.syntax decorator which automatically handles state management and simplifies loop implementation.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/porting_3_6.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport drjit as dr\nimport mitsuba as mi\n\nvar = mi.Float(32)\nrng = mi.PCG32(size=102400)\n\n@dr.syntax\ndef foo(var, rng):\n  count = mi.UInt(0)\n\n  while count < 10:\n    var     += rng.next_float32()\n    count   += 1\n\n  return var, rng\n\nvar, rng = foo(var, rng)\nvar += 1\n```\n\n----------------------------------------\n\nTITLE: Basic Reflection and Refraction Laws (LaTeX)\nDESCRIPTION: Fundamental equations describing the relationship between incident, reflected and refracted angles, including Snell's law with refractive indices.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/key_topics/polarization.rst#2025-04-21_snippet_6\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{align}\n    \\textbf{Reflection}: \\;\\;& \\theta_i = \\theta_r \\\\\n    \\textbf{Refraction}: \\;\\;& \\eta_i \\cdot \\sin\\theta_i = \\eta_t \\cdot \\sin\\theta_t\n\\end{align}\n```\n\n----------------------------------------\n\nTITLE: Instantiating Template Types for Mitsuba Variants\nDESCRIPTION: Shows how the template types Float and Spectrum are instantiated based on the variant definition in mitsuba.conf.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/developer_guide/variants_cpp.rst#2025-04-21_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nFloat    = float;\nSpectrum = Color<Float, 3>;\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories in CMake for Mitsuba Core\nDESCRIPTION: Sets up include directories for external dependencies including PNG, PugiXML, AsmJit, Zlib, OpenEXR, and JPEG libraries.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/src/core/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories(\n  ${PNG_INCLUDE_DIRS}\n  ${PUGIXML_INCLUDE_DIRS}\n  ${ASMJIT_INCLUDE_DIRS}\n  ${ZLIB_INCLUDE_DIR}\n  ${OPENEXR_INCLUDE_DIRS}\n  ${JPEG_INCLUDE_DIRS}\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Operation Examples with Dr.Jit\nDESCRIPTION: Comparison between using dr.select and symbolic if-statements, demonstrating performance considerations.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/porting_3_6.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nx = dr.arange(mi.Float, 5)\ny = dr.select(x < 2, 1, 2)\n```\n\nLANGUAGE: python\nCODE:\n```\n@dr.syntax\ndef bad_code(x : mi.Float):\n  out : mi.Float  = mi.Float(0)\n  if x < 2:\n    out = mi.Float(1)\n  else\n    out = mi.Float(2)\n\n  return out\n\nx = dr.arange(mi.Float, 5)\ny = bad_code()\n```\n\n----------------------------------------\n\nTITLE: Configuring Mitsuba Render Library Sources\nDESCRIPTION: Defines the main library target with all source files and headers for the Mitsuba renderer, including conditional sources based on build options.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/src/render/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(mitsuba-render OBJECT\n  ${INC_DIR}/fwd.h\n  ${INC_DIR}/ior.h\n  ${INC_DIR}/microfacet.h\n  ${INC_DIR}/records.h\n\n  bsdf.cpp         ${INC_DIR}/bsdf.h\n  emitter.cpp      ${INC_DIR}/emitter.h\n  endpoint.cpp     ${INC_DIR}/endpoint.h\n  film.cpp         ${INC_DIR}/film.h\n                   ${INC_DIR}/fresnel.h\n  imageblock.cpp   ${INC_DIR}/imageblock.h\n  integrator.cpp   ${INC_DIR}/integrator.h\n                   ${INC_DIR}/interaction.h\n  medium.cpp       ${INC_DIR}/medium.h\n  mesh.cpp         ${INC_DIR}/mesh.h\n  microfacet.cpp   ${INC_DIR}/microfacet.h\n                   ${INC_DIR}/mueller.h\n  phase.cpp        ${INC_DIR}/phase.h\n  sampler.cpp      ${INC_DIR}/sampler.h\n  scene.cpp        ${INC_DIR}/scene.h\n  sensor.cpp       ${INC_DIR}/sensor.h\n  shape.cpp        ${INC_DIR}/shape.h\n  texture.cpp      ${INC_DIR}/texture.h\n                   ${INC_DIR}/microflake.h\n  spiral.cpp       ${INC_DIR}/spiral.h\n  srgb.cpp         ${INC_DIR}/srgb.h\n                   ${INC_DIR}/optix/common.h\n  optix_api.cpp    ${INC_DIR}/optix_api.h\n  shapegroup.cpp   ${INC_DIR}/shapegroup.h\n  volume.cpp       ${INC_DIR}/volume.h\n  volumegrid.cpp   ${INC_DIR}/volumegrid.h\n  ${LIBRENDER_EXTRA_SRC}\n)\n```\n\n----------------------------------------\n\nTITLE: Migrating Enoki to Dr.Jit Namespace in C++\nDESCRIPTION: This snippet shows how to update C++ code to use Dr.Jit instead of Enoki. The namespace and function calls need to be updated to match the new API.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/key_topics/differences.rst#2025-04-21_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\n// Before\nnamespace ek = enoki;\n... = ek::sin(...);\n\n// Now\nnamespace dr = drjit;\n... = dr::sin(...);\n```\n\n----------------------------------------\n\nTITLE: Configuring External Dependencies and Core Library Components for Mitsuba in CMake\nDESCRIPTION: Sets up include directories for external dependencies (robin_map) and adds the core and render subdirectories to the build process.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/src/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories(\n  ${CMAKE_CURRENT_SOURCE_DIR}/../ext/nanobind/ext/robin_map/include\n)\n\nadd_subdirectory(core)\nadd_subdirectory(render)\n```\n\n----------------------------------------\n\nTITLE: Implementing Local-World Space Transformations in C++\nDESCRIPTION: Core transformation functions to convert vectors between world and local coordinate spaces using an orthogonal frame (s, t, n).\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/key_topics/polarization.rst#2025-04-21_snippet_38\n\nLANGUAGE: cpp\nCODE:\n```\nVector3f to_local(const Vector3f &v) const {\n    return Vector3f(dr::dot(v, s), dr::dot(v, t), dr::dot(v, n));\n}\n\nVector3f to_world(const Vector3f &v) const {\n    return s * v.x() + t * v.y() + n * v.z();\n}\n```\n\n----------------------------------------\n\nTITLE: Mitsuba Plugin Creation Method\nDESCRIPTION: Added bindings for PluginManager.create_object() to enable plugin instantiation through Python interface.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/release_notes.rst#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nmi.PluginManager.create_object()\n```\n\n----------------------------------------\n\nTITLE: Building File Format Shape Plugins in CMake for Mitsuba3\nDESCRIPTION: Adds build targets for file format related shape plugins (obj, ply, blender, serialized) that allow Mitsuba3 to load geometry from various file formats.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/src/shapes/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_plugin(obj          obj.cpp)\nadd_plugin(ply          ply.cpp)\nadd_plugin(blender      blender.cpp)\nadd_plugin(serialized   serialized.cpp)\n```\n\n----------------------------------------\n\nTITLE: Migrating Enoki to Dr.Jit Imports in Python\nDESCRIPTION: This snippet demonstrates how to update Python import statements and function calls when migrating from Enoki to Dr.Jit in Mitsuba 3.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/key_topics/differences.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Before\nimport enoki as ek\n... = ek.sin(...)\n\n# Now\nimport drjit as dr\n... = dr.sin(...)\n```\n\n----------------------------------------\n\nTITLE: Adding Mitsuba Executable in CMake\nDESCRIPTION: Adds the Mitsuba executable component to the build process.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/src/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(mitsuba)\n```\n\n----------------------------------------\n\nTITLE: Mueller Matrix World Space Transformation\nDESCRIPTION: Implementation of the to_world_mueller function that transforms Mueller matrices from local to world space while handling polarization states correctly.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/key_topics/polarization.rst#2025-04-21_snippet_40\n\nLANGUAGE: cpp\nCODE:\n```\nSpectrum to_world_mueller(const Spectrum &M_local,\n                              const Vector3f &in_forward_local,\n                              const Vector3f &out_forward_local) const {\n    if constexpr (is_polarized_v<Spectrum>) {\n        Vector3f in_forward_world  = to_world(in_forward_local),\n                 out_forward_world = to_world(out_forward_local);\n\n        Vector3f in_basis_current = to_world(mueller::stokes_basis(in_forward_local)),\n                 in_basis_target  = mueller::stokes_basis(in_forward_world);\n\n        Vector3f out_basis_current = to_world(mueller::stokes_basis(out_forward_local)),\n                 out_basis_target  = mueller::stokes_basis(out_forward_world);\n\n        return mueller::rotate_mueller_basis(M_local,\n                                             in_forward_world, in_basis_current, in_basis_target,\n                                             out_forward_world, out_basis_current, out_basis_target);\n    } else {\n        return M_local;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Rendering Test Suite for Mitsuba 3\nDESCRIPTION: Commands to run the rendering test suite, which renders test scenes and applies the Z-test for image comparison. This suite tests interactions between renderer components across different variants.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/developer_guide/testing.rst#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npytest src/render/tests/test_renders.py\n```\n\nLANGUAGE: bash\nCODE:\n```\npython src/render/tests/test_renders.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Emitter Plugins in Mitsuba3 with CMake\nDESCRIPTION: This CMake script defines the emitters plugin collection for the Mitsuba3 renderer. It first sets a common prefix for all emitter plugins, then registers each individual emitter type (such as area, point, constant, environment map, etc.) with their respective source files, and finally propagates the plugin targets to the parent scope.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/src/emitters/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(MI_PLUGIN_PREFIX \"emitters\")\n\nadd_plugin(area            area.cpp)\nadd_plugin(point           point.cpp)\nadd_plugin(constant        constant.cpp)\nadd_plugin(envmap          envmap.cpp)\nadd_plugin(directional     directional.cpp)\nadd_plugin(directionalarea directionalarea.cpp)\nadd_plugin(spot            spot.cpp)\nadd_plugin(projector       projector.cpp)\nadd_plugin(sunsky          sunsky.cpp)\nset(MI_PLUGIN_TARGETS \"${MI_PLUGIN_TARGETS}\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Loop State in C++ with Dr.Jit 1.0.0\nDESCRIPTION: Demonstrates how to define a custom traversable data type for loop state in Dr.Jit 1.0.0. This allows specifying the entire loop state locally, including multiple variables and a condition flag.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/porting_3_6.rst#2025-04-21_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\nstruct LoopState {\n  Float foo;\n  Float bar;\n  Float more;\n  Bool active;\n} = ls { x1, x2, x3, active };\n\ndr::tie(ls) = dr::while_loop(dr::make_tuple(ls),   /* initial state */\n  [](const LoopState& ls) { return ls.active; },   /* condition     */\n  [](LoopState& ls) { ... });                      /* body          */\n```\n\n----------------------------------------\n\nTITLE: Configuring Mitsuba3 Integrator Plugins in CMake\nDESCRIPTION: Sets up CMake build configuration for multiple Mitsuba3 renderer plugins. Defines the plugin prefix as 'integrators' and adds multiple plugins including AOV, depth, direct illumination, moment, path tracing, and volume path tracing implementations.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/src/integrators/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(MI_PLUGIN_PREFIX \"integrators\")\n\nadd_plugin(aov        aov.cpp)\nadd_plugin(depth      depth.cpp)\nadd_plugin(direct     direct.cpp)\nadd_plugin(moment     moment.cpp)\nadd_plugin(path       path.cpp)\nadd_plugin(ptracer    ptracer.cpp)\nadd_plugin(stokes     stokes.cpp)\nadd_plugin(volpath    volpath.cpp)\nadd_plugin(volpathmis volpathmis.cpp)\n\nset(MI_PLUGIN_TARGETS \"${MI_PLUGIN_TARGETS}\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Rotating Stokes Vector Reference Frames in C++\nDESCRIPTION: Implements two functions for rotating Stokes vector reference frames: one using a direct angle, and another inferring the angle from basis vectors.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/key_topics/polarization.rst#2025-04-21_snippet_36\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename Float>\nMuellerMatrix<Float> rotator(Float theta) {\n    auto [s, c] = dr::sincos(2.f * theta);\n    return MuellerMatrix<Float>(\n        1, 0, 0, 0,\n        0, c, s, 0,\n        0, -s, c, 0,\n        0, 0, 0, 1\n    );\n}\n\ntemplate <typename Vector3,\n          typename Float = dr::value_t<Vector3>,\n          typename MuellerMatrix = MuellerMatrix<Float>>\nMuellerMatrix rotate_stokes_basis(const Vector3 &forward,\n                                  const Vector3 &basis_current,\n                                  const Vector3 &basis_target) {\n    Float theta = unit_angle(dr::normalize(basis_current),\n                             dr::normalize(basis_target));\n\n    auto flip = dr::dot(forward, dr::cross(basis_current, basis_target)) < 0;\n    dr::masked(theta, flip) *= -1.f;\n    return rotator(theta);\n}\n```\n\n----------------------------------------\n\nTITLE: Position Specification Change in Mitsuba XML\nDESCRIPTION: Shows the difference between old and new notation for specifying positions, translations, and other vector quantities in Mitsuba scene files.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/key_topics/differences.rst#2025-04-21_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<!-- old notation -->\n<point name=\"position\" x=\"0\" y=\"0\" z=\"-100\"/>\n\n<!-- new notation -->\n<point name=\"position\" value=\"0, 0, -100\"/>\n```\n\n----------------------------------------\n\nTITLE: Setting up Mitsuba3 Sensor Plugins using CMake\nDESCRIPTION: Configures the build system for Mitsuba3 sensor plugins. Sets the plugin prefix to 'sensors' and adds multiple sensor plugin targets including perspective, orthographic, radiancemeter, thinlens, irradiancemeter, distant, and batch sensors. Each plugin is built from its corresponding source file.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/src/sensors/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(MI_PLUGIN_PREFIX \"sensors\")\n\nadd_plugin(perspective     perspective.cpp)\nadd_plugin(orthographic    orthographic.cpp)\nadd_plugin(radiancemeter   radiancemeter.cpp)\nadd_plugin(thinlens        thinlens.cpp)\nadd_plugin(irradiancemeter irradiancemeter.cpp)\nadd_plugin(distant         distant.cpp)\nadd_plugin(batch           batch.cpp)\n\nset(MI_PLUGIN_TARGETS \"${MI_PLUGIN_TARGETS}\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Accessing Matrix Elements in C++ with Dr.Jit 1.0.0\nDESCRIPTION: Illustrates how to access elements of a dr::Matrix in Dr.Jit 1.0.0. The internal storage has changed from column-major to row-major ordering, affecting direct access to matrix entries.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/porting_3_6.rst#2025-04-21_snippet_11\n\nLANGUAGE: cpp\nCODE:\n```\ndr::Matrix<Float, 3> m = ...;\n\n// Returned array is now first row, not column!\nauto& v = m.entry(0);\n```\n\n----------------------------------------\n\nTITLE: Registering BSDF Plugins in Mitsuba3 with CMake\nDESCRIPTION: Registers multiple BSDF (Bidirectional Scattering Distribution Function) plugins for the Mitsuba3 renderer. Each call to add_plugin creates a build target for a specific BSDF implementation, associating it with its corresponding source file.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/src/bsdfs/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_plugin(blendbsdf            blendbsdf.cpp)\nadd_plugin(bumpmap              bumpmap.cpp)\nadd_plugin(conductor            conductor.cpp)\nadd_plugin(dielectric           dielectric.cpp)\nadd_plugin(diffuse              diffuse.cpp)\nadd_plugin(hair                 hair.cpp)\nadd_plugin(mask                 mask.cpp)\nadd_plugin(measured             measured.cpp)\nadd_plugin(normalmap            normalmap.cpp)\nadd_plugin(null                 null.cpp)\nadd_plugin(plastic              plastic.cpp)\nadd_plugin(roughconductor       roughconductor.cpp)\nadd_plugin(roughdielectric      roughdielectric.cpp)\nadd_plugin(roughplastic         roughplastic.cpp)\nadd_plugin(thindielectric       thindielectric.cpp)\nadd_plugin(twosided             twosided.cpp)\nadd_plugin(polarizer            polarizer.cpp)\nadd_plugin(retarder             retarder.cpp)\nadd_plugin(circular             circular.cpp)\nadd_plugin(measured_polarized   measured_polarized.cpp)\nadd_plugin(pplastic             pplastic.cpp)\nadd_plugin(principled           principled.cpp)\nadd_plugin(principledthin       principledthin.cpp)\n```\n\n----------------------------------------\n\nTITLE: Computing Stokes Reference Frame Vectors in CPP\nDESCRIPTION: Demonstrates how to calculate the perpendicular vectors for the Stokes reference frame relative to the surface normal and light directions.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/key_topics/polarization.rst#2025-04-21_snippet_44\n\nLANGUAGE: cpp\nCODE:\n```\nVector3f n(0, 0, 1);  // Surface normal\nVector3f s_axis_in  = dr::normalize(dr::cross(n, -wo_local)),\n         s_axis_out = dr::normalize(dr::cross(n, wi_local));\n```\n\n----------------------------------------\n\nTITLE: Implementing Handedness Change Matrix for Fresnel Convention\nDESCRIPTION: Defines a matrix to handle the left-handed coordinate system created by reflected field vectors in the Fresnel convention, effectively functioning as a half-wave plate to switch signs to the Verdet convention.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/key_topics/polarization.rst#2025-04-21_snippet_20\n\nLANGUAGE: math\nCODE:\n```\n\\begin{equation}\n    \\begin{bmatrix}\n        1 & 0 & 0 & 0 \\\\\n        0 & 1 & 0 & 0 \\\\\n        0 & 0 & -1 & 0 \\\\\n        0 & 0 & 0 & -1\n    \\end{bmatrix}\n\\end{equation}\n```\n\n----------------------------------------\n\nTITLE: Setting Non-Vectorized Core Python Source Files in CMake\nDESCRIPTION: Defines CORE_PY_SRC variable containing a list of non-vectorized implementation source files for the Mitsuba3 core Python bindings. Includes basic utility files for atomic operations, logging, filesystem handling, and thread management.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/src/core/python/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(CORE_PY_SRC\n  ${CMAKE_CURRENT_SOURCE_DIR}/atomic.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/appender.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/argparser.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/bitmap.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/cast.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/filesystem.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/formatter.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/fresolver.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/logger.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/misc.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/mmap.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/object.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/progress.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/rfilter.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/stream.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/struct.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/thread.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/timer.cpp\n  PARENT_SCOPE\n)\n```\n\n----------------------------------------\n\nTITLE: Vectorized Getter Initialization in C++ with Dr.Jit (Pre-1.0.0)\nDESCRIPTION: Shows how vectorized getters were initialized in custom C++ plugins using dr::set_attr in versions of Dr.Jit prior to 1.0.0. This step is no longer required in Dr.Jit 1.0.0.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/porting_3_6.rst#2025-04-21_snippet_12\n\nLANGUAGE: cpp\nCODE:\n```\nMyPlugin(const Properties &props) : Base(props) {\n  ...\n  m_getter = m_components[0];\n  dr::set_attr(this, \"getter\", m_getter);\n}\n```\n\n----------------------------------------\n\nTITLE: Building Primitive Shape Plugins in CMake for Mitsuba3\nDESCRIPTION: Adds build targets for basic geometric primitives (cylinder, disk, rectangle, sdfgrid, sphere, cube) and curve primitives (bsplinecurve, linearcurve) that define standard shapes for the renderer.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/src/shapes/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_plugin(cylinder     cylinder.cpp)\nadd_plugin(disk         disk.cpp)\nadd_plugin(rectangle    rectangle.cpp)\nadd_plugin(sdfgrid      sdfgrid.cpp)\nadd_plugin(sphere       sphere.cpp)\nadd_plugin(cube         cube.cpp)\nadd_plugin(bsplinecurve bsplinecurve.cpp)\nadd_plugin(linearcurve  linearcurve.cpp)\n```\n\n----------------------------------------\n\nTITLE: Conductor Reflection Mueller Matrix\nDESCRIPTION: Complex Mueller matrix for reflection from conductors incorporating both polarization and retardation effects.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/key_topics/polarization.rst#2025-04-21_snippet_19\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{equation}\n    \\frac{1}{2} \\begin{bmatrix}\n        R_{\\bot} + R_{\\parallel} & R_{\\bot} - R_{\\parallel} & 0 & 0 \\\\\n        R_{\\bot} - R_{\\parallel} & R_{\\bot} + R_{\\parallel} & 0 & 0 \\\\\n        0 & 0 & 2 \\sqrt{R_{\\bot} R_{\\parallel}} \\cos\\Delta & -2 \\sqrt{R_{\\bot} R_{\\parallel}} \\sin\\Delta \\\\\n        0 & 0 & 2 \\sqrt{R_{\\bot} R_{\\parallel}} \\sin\\Delta &  2 \\sqrt{R_{\\bot} R_{\\parallel}} \\cos\\Delta\n    \\end{bmatrix}\n\\end{equation}\n```\n\n----------------------------------------\n\nTITLE: Adding Resource Paths in Mitsuba Scene Configuration\nDESCRIPTION: This snippet shows how to add a resource path to the list of search paths in a Mitsuba scene configuration using Python dictionaries. It demonstrates setting up a path for texture files and referencing a texture using a relative path.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/key_topics/scene_format.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n{\n    \"type\": \"scene\",\n    'foo': { 'type': 'resources', 'path': '/home/username/data/textures'},\n    \"bsdf\": {\n        \"type\": \"diffuse\",\n        \"reflectance\": {\n            \"type\": \"bitmap\",\n            \"filename\": \"my_texture.exr\", # relative to the folder defined above\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updated Transform Creation Method\nDESCRIPTION: New method for creating and chaining transforms starting with identity transform constructor.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/porting_3_6.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nx = mi.Transform4f().translate([1,2,3]).scale(3.0).rotate([1, 0, 0], 0.5)\n```\n\n----------------------------------------\n\nTITLE: Adding Texture Plugins in Mitsuba 3\nDESCRIPTION: Adds multiple texture plugins (bitmap, checkerboard, mesh_attribute, volume) to the build system with their corresponding source files.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/src/textures/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_plugin(bitmap         bitmap.cpp)\nadd_plugin(checkerboard   checkerboard.cpp)\nadd_plugin(mesh_attribute mesh_attribute.cpp)\nadd_plugin(volume         volume.cpp)\n```\n\n----------------------------------------\n\nTITLE: Total Internal Reflection Mueller Matrix\nDESCRIPTION: Mueller matrix representation for total internal reflection case where all light is reflected and phase shift exists.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/key_topics/polarization.rst#2025-04-21_snippet_18\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{equation}\n    \\begin{bmatrix}\n        1 & 0 & 0 & 0 \\\\\n        0 & 1 & 0 & 0 \\\\\n        0 & 0 & \\cos\\Delta & -\\sin\\Delta \\\\\n        0 & 0 & \\sin\\Delta & \\cos\\Delta\n    \\end{bmatrix}\n\\end{equation}\n```\n\n----------------------------------------\n\nTITLE: XML Transformation Definition\nDESCRIPTION: Demonstrates how to define complex transformations using translation and rotation in XML format.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/key_topics/scene_format.rst#2025-04-21_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<transform name=\"trafo_property\">\n    <translate value=\"-1, 3, 4\"/>\n    <rotate y=\"1\" angle=\"45\"/>\n</transform>\n```\n\n----------------------------------------\n\nTITLE: Base Class Import Macro Expansion in C++\nDESCRIPTION: Shows how MI_IMPORT_BASE expands into multiple using statements to import members and methods from a base class in template-heavy code.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/developer_guide/writing_plugin.rst#2025-04-21_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nMI_IMPORT_BASE(Name, m_some_member, some_method)\n```\n\n----------------------------------------\n\nTITLE: Configuring Mitsuba3 Sampler Plugins in CMake\nDESCRIPTION: This CMake script sets up the build configuration for Mitsuba3 sampler plugins. It defines the plugin prefix and adds multiple sampler plugins to the build process. The script includes independent, stratified, multijitter, orthogonal, and ldsampler plugins.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/src/samplers/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(MI_PLUGIN_PREFIX \"samplers\")\n\nadd_plugin(independent  independent.cpp)\nadd_plugin(stratified   stratified.cpp)\nadd_plugin(multijitter  multijitter.cpp)\nadd_plugin(orthogonal   orthogonal.cpp)\nadd_plugin(ldsampler    ldsampler.cpp)\n\nset(MI_PLUGIN_TARGETS \"${MI_PLUGIN_TARGETS}\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring Phase Function Plugins in CMake\nDESCRIPTION: Sets up phase function plugins for the Mitsuba3 renderer including HG (Henyey-Greenstein), isotropic, blended phase, Rayleigh scattering, SGGX, and tabulated phase functions. Establishes plugin prefix and registers targets.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/src/phase/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(MI_PLUGIN_PREFIX \"phasefunctions\")\n\nadd_plugin(hg hg.cpp)\nadd_plugin(isotropic isotropic.cpp)\nadd_plugin(blendphase blendphase.cpp)\nadd_plugin(rayleigh rayleigh.cpp)\nadd_plugin(sggx sggx.cpp)\nadd_plugin(tabphase tabphase.cpp)\n\nset(MI_PLUGIN_TARGETS \"${MI_PLUGIN_TARGETS}\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Transmission Mueller Matrix Equation\nDESCRIPTION: LaTeX equation showing the Mueller matrix for transmission through a dielectric medium, demonstrating how parallel and perpendicular transmittance components affect light polarization.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/key_topics/polarization.rst#2025-04-21_snippet_16\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{equation}\n    \\frac{1}{2} \\cdot \\begin{bmatrix}\n        T_{\\bot} + T_{\\parallel} & T_{\\bot} - T_{\\parallel} & 0 & 0 \\\\\n        T_{\\bot} - T_{\\parallel} & T_{\\bot} + T_{\\parallel} & 0 & 0 \\\\\n        0 & 0 & 2 \\sqrt{T_{\\bot} T_{\\parallel}} & 0 \\\\\n        0 & 0 & 0 & 2 \\sqrt{T_{\\bot} T_{\\parallel}}\n    \\end{bmatrix}\n\\end{equation}\n```\n\n----------------------------------------\n\nTITLE: Polarization Visualization in HTML\nDESCRIPTION: HTML code for embedding a video that demonstrates the interaction of unpolarized light with two linear polarizers, illustrating Malus' law in action. The visualization helps explain the mathematical concepts visually.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/key_topics/polarization.rst#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<center>\n    <video style=\"max-width:80%;\" loop autoplay muted\n        src=\"https://rgl.s3.eu-central-1.amazonaws.com/media/uploads/tzeltner/2021/06/17/malus.mp4\"></video>\n</center>\n```\n\n----------------------------------------\n\nTITLE: Managing Resource Files for Mitsuba3 in CMake\nDESCRIPTION: Sets up custom commands to copy various resource files (IOR data, Sunsky data) to the appropriate locations in the build directory and for installation. This ensures that the renderer has access to necessary data files.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/CMakeLists.txt#2025-04-21_snippet_18\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_target(copy-resources ALL DEPENDS ${MI_COPY_FILES})\n\n# IOR data\nfile(GLOB IOR_FILES \"${CMAKE_CURRENT_SOURCE_DIR}/resources/data/ior/*spd\")\nadd_custom_command(\n  TARGET copy-resources DEPENDS IOR_FILES\n  COMMAND ${CMAKE_COMMAND} -E copy_directory\n  \"${CMAKE_CURRENT_SOURCE_DIR}/resources/data/ior\"\n  \"${MI_BINARY_DIR}/data/ior\"\n)\nif (MSVC AND MI_ENABLE_PYTHON)\n  add_custom_command(\n    TARGET copy-resources DEPENDS IOR_FILES\n    COMMAND ${CMAKE_COMMAND} -E copy_directory\n    \"${CMAKE_CURRENT_SOURCE_DIR}/resources/data/ior\"\n    \"${MI_BINARY_DIR}/python/mitsuba/data/ior\"\n  )\nendif()\ninstall(\n  DIRECTORY ${MI_BINARY_DIR}/data/ior\n  DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}\n)\n\n# Sunsky data\nfile(GLOB SUNSKY_FILES \"${CMAKE_CURRENT_SOURCE_DIR}/resources/data/sunsky/output/*.bin\")\nadd_custom_command(\n  TARGET copy-resources DEPENDS SUNSKY_FILES\n  COMMAND ${CMAKE_COMMAND} -E copy_directory\n  \"${CMAKE_CURRENT_SOURCE_DIR}/resources/data/sunsky/output\"\n  \"${MI_BINARY_DIR}/data/sunsky\"\n)\nif (MSVC AND MI_ENABLE_PYTHON)\n  add_custom_command(\n    TARGET copy-resources DEPENDS SUNSKY_FILES\n    COMMAND ${CMAKE_COMMAND} -E copy_directory\n    \"${CMAKE_CURRENT_SOURCE_DIR}/resources/data/sunsky/output\"\n    \"${MI_BINARY_DIR}/python/mitsuba/data/sunsky\"\n  )\nendif()\ninstall(\n  DIRECTORY ${MI_BINARY_DIR}/data/sunsky\n  DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Spectral Plugins in Mitsuba3 using CMake\nDESCRIPTION: This CMake script configures the build process for various spectral plugins in the Mitsuba3 renderer. It sets a common prefix for all spectral plugins and adds each plugin individually to the build system. The script also propagates the plugin targets to the parent scope for further processing.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/src/spectra/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(MI_PLUGIN_PREFIX \"spectra\")\n\nadd_plugin(blackbody blackbody.cpp)\nadd_plugin(d65 d65.cpp)\nadd_plugin(irregular irregular.cpp)\nadd_plugin(regular regular.cpp)\nadd_plugin(rawconstant rawconstant.cpp)\nadd_plugin(srgb srgb.cpp)\nadd_plugin(uniform uniform.cpp)\n\nset(MI_PLUGIN_TARGETS \"${MI_PLUGIN_TARGETS}\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Building Organizational Shape Plugins in CMake for Mitsuba3\nDESCRIPTION: Adds build targets for organizational plugins (shapegroup, instance, merge) that handle grouping, instancing, and merging of shapes within the scene.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/src/shapes/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_plugin(shapegroup   shapegroup.cpp)\nadd_plugin(instance     instance.cpp)\nadd_plugin(merge        merge.cpp)\n```\n\n----------------------------------------\n\nTITLE: Reflection Amplitude Coefficients (LaTeX)\nDESCRIPTION: Equations for perpendicular and parallel reflection amplitude coefficients relating incident and reflected electric fields.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/key_topics/polarization.rst#2025-04-21_snippet_7\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{align}\n    r_{\\bot}\n    =\n    \\frac{E_r^{\\bot}}{E_i^{\\bot}}\n    =\n    \\frac{\\eta_i \\cos\\theta_i - \\eta_t \\cos\\theta_t}{\\eta_i \\cos\\theta_i + \\eta_t \\cos\\theta_t}\n    = -\\frac{\\sin(\\theta_i - \\theta_t)}{\\sin(\\theta_i + \\theta_t)}\n\\end{align}\n```\n\n----------------------------------------\n\nTITLE: Mask Argument Macro Usage in C++\nDESCRIPTION: Demonstration of the MI_MASK_ARGUMENT macro which optimizes masked operations by setting the mask to true for scalar variants, allowing compiler optimizations.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/developer_guide/writing_plugin.rst#2025-04-21_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nvoid my_method(..., Mask active) {\n    MI_MASK_ARGUMENT(active);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Build Output Locations in CMake for Mitsuba3\nDESCRIPTION: Configures the output directories for various build types (Release, Debug, RelWithDebInfo, MinSizeRel) for the Mitsuba3 project and its dependencies.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/CMakeLists.txt#2025-04-21_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\nset_target_properties(mitsuba-bin mitsuba ${MI_DEPEND}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY ${MI_BINARY_DIR}\n  LIBRARY_OUTPUT_DIRECTORY ${MI_BINARY_DIR}\n  RUNTIME_OUTPUT_DIRECTORY_RELEASE ${MI_BINARY_DIR}\n  LIBRARY_OUTPUT_DIRECTORY_RELEASE ${MI_BINARY_DIR}\n  RUNTIME_OUTPUT_DIRECTORY_DEBUG ${MI_BINARY_DIR}\n  LIBRARY_OUTPUT_DIRECTORY_DEBUG ${MI_BINARY_DIR}\n  RUNTIME_OUTPUT_DIRECTORY_RELNODEBINFO ${MI_BINARY_DIR}\n  LIBRARY_OUTPUT_DIRECTORY_RELNODEBINFO ${MI_BINARY_DIR}\n  RUNTIME_OUTPUT_DIRECTORY_MINSIZEREL ${MI_BINARY_DIR}\n  LIBRARY_OUTPUT_DIRECTORY_MINSIZEREL ${MI_BINARY_DIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Embree Linking for Mitsuba3 Shape Plugins\nDESCRIPTION: Conditionally links the Embree ray tracing kernel library to specific shape plugins (sphere, instance) when Embree support is enabled. This provides acceleration for ray-shape intersection tests.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/src/shapes/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif (MI_ENABLE_EMBREE)\n    target_link_libraries(sphere   PRIVATE embree)\n    target_link_libraries(instance PRIVATE embree)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Film Plugins in Mitsuba3 with CMake\nDESCRIPTION: This CMake script configures the film plugins for the Mitsuba3 renderer. It sets a plugin prefix for films, adds two specific film plugins (hdrfilm and specfilm) by specifying their source files, and exports the plugin targets to the parent scope.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/src/films/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(MI_PLUGIN_PREFIX \"films\")\n\nadd_plugin(hdrfilm  hdrfilm.cpp)\nadd_plugin(specfilm  specfilm.cpp)\n\nset(MI_PLUGIN_TARGETS \"${MI_PLUGIN_TARGETS}\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Homogeneous and Heterogeneous Media Plugins in Mitsuba3\nDESCRIPTION: Registers two media plugins (homogeneous and heterogeneous) to be compiled from their respective source files.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/src/media/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_plugin(homogeneous homogeneous.cpp)\nadd_plugin(heterogeneous heterogeneous.cpp)\n```\n\n----------------------------------------\n\nTITLE: Malus' Law Mathematical Expression\nDESCRIPTION: Formula representing Malus' law, which describes the intensity of light passing through two polarizers. The equation shows that the transmitted intensity is proportional to the square of the cosine of the angle between the polarizer orientations.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/key_topics/polarization.rst#2025-04-21_snippet_3\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{equation}\n    \\mathbf{s}_0' = \\frac{\\cos^2(\\theta)}{2} \\cdot \\mathbf{s}_0\n\\end{equation}\n```\n\n----------------------------------------\n\nTITLE: Luminance Calculation Method\nDESCRIPTION: Fixed luminance calculation functionality for monochromatic modes in the renderer.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/release_notes.rst#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nmi.luminance()\n```\n\n----------------------------------------\n\nTITLE: Creating Default Configuration File\nDESCRIPTION: Generates a default mitsuba.conf configuration file if none exists, using the default variants specified in the cache variable MI_DEFAULT_VARIANTS.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT EXISTS ${CMAKE_CURRENT_BINARY_DIR}/mitsuba.conf)\n  set(MI_DEFAULT_VARIANTS \"scalar_rgb,scalar_spectral,cuda_ad_rgb,llvm_ad_rgb,llvm_ad_spectral\" CACHE STRING \"Default Mitsuba variants that should be included if no mitsuba.conf file exists\")\n  string(REPLACE \",\" \";\" MI_DEFAULT_VARIANTS \"${MI_DEFAULT_VARIANTS}\")\n  message(STATUS \"MI_DEFAULT_VARIANTS: ${MI_DEFAULT_VARIANTS}\")\n  mark_as_advanced(MI_DEFAULT_VARIANTS)\n  foreach(TMP ${MI_DEFAULT_VARIANTS})\n    string(APPEND INSERT_CONFIGURATIONS_HERE \"\\\"${TMP}\\\", \")\n  endforeach()\n  string(REGEX REPLACE \", $\" \"\" INSERT_CONFIGURATIONS_HERE \"${INSERT_CONFIGURATIONS_HERE}\")\n  configure_file(${CMAKE_CURRENT_SOURCE_DIR}/resources/mitsuba.conf.template\n                 ${CMAKE_CURRENT_BINARY_DIR}/mitsuba.conf @ONLY)\n  unset(INSERT_CONFIGURATIONS_HERE)\n  set(MI_COPIED_CONFIG_FILE 1)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Volume Plugins to Build System\nDESCRIPTION: Adds two volume-related plugins (constvolume and gridvolume) to the build system, specifying their source files.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/src/volumes/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_plugin(constvolume  const.cpp)\nadd_plugin(gridvolume   grid.cpp)\n```\n\n----------------------------------------\n\nTITLE: Camera-Space Stokes Vector Alignment\nDESCRIPTION: Implementation of the final coordinate frame rotation to align Stokes vectors with the camera's horizontal axis.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/key_topics/polarization.rst#2025-04-21_snippet_47\n\nLANGUAGE: cpp\nCODE:\n```\n// From `src/integrators/stokes.cpp`\n\n// Call a nested integrator (e.g. the path tracer)\nauto [result, mask] = integrator->sample(scene, sampler, ray, ...);\n\n// Compute the implicit Stokes reference for the incoming light path\nVector3f basis_out = mueller::stokes_basis(-ray.d);\n\n// Get the camera transformation and evaluate for the current sampled `time`\nTransform4f transform = scene->sensors()[0]->world_transform()->eval(ray.time);\n\n// Compute the output Stokes reference that aligns horizontally with the camera\nVector3f vertical = transform * Vector3f(0.f, 1.f, 0.f);\nVector3f basis_cam = dr::cross(ray.d, vertical);\n\n// Perform the final Mueller matrix reference frame rotation on the output\nresult = mueller::rotate_stokes_basis(-ray.d, basis_out, basis_cam) * result;\n\n// Extract the first column of the Mueller matrix, i.e. the Stokes vector\nauto const &stokes = result.entry(0);\n```\n\n----------------------------------------\n\nTITLE: Linear Polarizer Mueller Matrix Definition\nDESCRIPTION: Mathematical representation of the Mueller matrix for a linear polarizer in its standard orientation. This matrix transforms unpolarized light into horizontally polarized light.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/key_topics/polarization.rst#2025-04-21_snippet_1\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{equation}\n    \\mathbf{L} =\n    \\frac{1}{2} \\begin{bmatrix} 1 & 1 & 0 & 0 \\\\ 1 & 1 & 0 & 0 \\\\ 0 & 0 & 0 & 0 \\\\ 0 & 0 & 0 & 0 \\end{bmatrix}\n\\end{equation}\n```\n\n----------------------------------------\n\nTITLE: Legacy Loop Implementation in Python using mitsuba.Loop\nDESCRIPTION: Example showing how loops were previously implemented using mitsuba.Loop constructor, which required manual state management.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/porting_3_6.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport mitsuba as mi\n\nvar = mi.Float(32)\nrng = mi.PCG32(size=102400)\n\ndef foo(var, rng):\n  count   = mi.UInt(0)\n  loop    = mi.Loop(state=lambda: (var, rng, count))\n\n  while loop(count < 10):\n    var     += rng.next_float32()\n    count   += 1\n\n  return var, rng\n\nvar, rng = foo(var, rng)\nvar += 1\n```\n\n----------------------------------------\n\nTITLE: Preventing In-tree Builds\nDESCRIPTION: Blocks in-tree builds to avoid polluting the source directory, providing detailed instructions on how to properly set up an out-of-tree build.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif (PROJECT_SOURCE_DIR STREQUAL \"${PROJECT_BINARY_DIR}\")\n  message(FATAL_ERROR \"In-tree builds are not permitted. To recover, delete \"\n          \"'CMakeCache.txt', the 'CMakeFiles' directory and inform CMake about \"\n          \"the source (-S) and build (-B) paths. For example to compile to a \"\n          \"directory labeled 'build' using the Ninja generator, enter\\n\"\n          \"  $ rm -Rf CMakeCache.txt CMakeFiles\\n\"\n          \"  $ cmake -S . -B build -G Ninja\\n\"\n          \"  $ cmake --build build\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Scalar Source Files for Mitsuba3 Render Module\nDESCRIPTION: This CMake code block sets the RENDER_PY_SRC variable with a list of scalar implementation source files for the Mitsuba3 render module. It includes fewer components compared to the vectorized version, focusing on core elements like emitters, BSDFs, and interactions. The PARENT_SCOPE keyword indicates that this variable should be visible in the parent scope.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/src/render/python/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(RENDER_PY_SRC\n  ${CMAKE_CURRENT_SOURCE_DIR}/emitter.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/bsdf.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/shape.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/microfacet.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/interaction.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/phase.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/sensor.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/spiral.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/film.cpp\n  PARENT_SCOPE\n)\n```\n\n----------------------------------------\n\nTITLE: Mueller Matrix Rotation Equation for Optical Elements\nDESCRIPTION: Mathematical formula showing how to derive the Mueller matrix of a rotated optical element using transformation matrices. The equation expresses the rotated element's Mueller matrix M(θ) in terms of original matrix M and rotation matrices R(θ).\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/key_topics/polarization.rst#2025-04-21_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{equation}\n    \\mathbf{s}''' = \\mathbf{R}(-\\theta) \\cdot \\mathbf{s}'' = \\underbrace{\\mathbf{R}(-\\theta) \\cdot \\mathbf{M} \\cdot \\mathbf{R}(\\theta)}_{\\mathbf{M}(\\theta)} \\cdot \\mathbf{s}\n\\end{equation}\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for Mitsuba 3 Documentation\nDESCRIPTION: This code snippet lists the required Python packages and their versions for building the Mitsuba 3 renderer documentation. It includes Sphinx, IPython, Pygments extensions, bibliography tools, and various Sphinx plugins for enhanced documentation features.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsphinx==8.1.3\nIPython==8.8.0\npygments-mathematica==0.3.5\npybtex==0.24.0\nnbsphinx==0.9.5\nfuro==2024.8.6\nsphinxcontrib-bibtex==2.6.3\nsphinxcontrib-youtube==1.4.1\nsphinx-design==0.6.1\nsphinx-gallery==0.18.0\nsphinx-copybutton==0.5.2\nsphinx-hoverxref==1.4.1\nsphinx_tabs==3.4.5\nsphinx-toolbox==3.8.1\n```\n\n----------------------------------------\n\nTITLE: Checking Git Submodules Initialization\nDESCRIPTION: Verifies that the required Git submodules have been properly initialized, displaying an error message with recovery instructions if they're missing.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT IS_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}/ext/drjit/ext/drjit-core/ext/nanothread/ext/cmake-defaults\")\n  message(FATAL_ERROR \"The Mitsuba 3 dependencies are missing! \"\n    \"You probably did not clone the project with --recursive. It is possible to recover \"\n    \"by invoking\\n$ git submodule update --init --recursive\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Vectorized Core Python Source Files in CMake\nDESCRIPTION: Defines CORE_PY_V_SRC variable containing a list of vectorized implementation source files for the Mitsuba3 core Python bindings. Includes files for various core functionality like bounding boxes, distributions, frames, and mathematical operations.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/src/core/python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(CORE_PY_V_SRC\n  ${CMAKE_CURRENT_SOURCE_DIR}/drjit_v.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/bbox_v.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/bsphere_v.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/distr_1d_v.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/distr_2d_v.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/frame_v.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/math_v.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/object_v.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/qmc_v.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/properties_v.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/random_v.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/ray_v.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/rfilter_v.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/spectrum_v.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/spline_v.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/transform_v.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/vector_v.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/warp_v.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/xml_v.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/quad_v.cpp\n  PARENT_SCOPE\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Depolarizing Mueller Matrices\nDESCRIPTION: Helper function that creates a depolarizing Mueller matrix with only its (1,1) entry used. Used for Lambertian materials, light sources, and BSDFs without polarization implementation.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/key_topics/polarization.rst#2025-04-21_snippet_33\n\nLANGUAGE: cpp\nCODE:\n```\n// From `include/mitsuba/core/spectrum.h`\n\ntemplate <typename T>\nauto depolarizer(const T &s = T(1)) {\n    if constexpr (is_polarized_v<T>) {\n        T result = dr::zero<T>();\n        result(0, 0) = s(0, 0);\n        return result;\n    } else {\n        return s;\n    }\n}\n\n// Example use case, where the value returned from the texture is of type\n// `UnpolarizedSpectrum`.\nSpectrum s = depolarizer<Spectrum>(m_texture->eval(si, active));\n```\n\n----------------------------------------\n\nTITLE: Element-wise Comparison in C++ with Dr.Jit (Pre-1.0.0)\nDESCRIPTION: Shows how element-wise comparisons were performed using dr::eq and dr::neq functions in versions of Dr.Jit prior to 1.0.0. These functions are now deprecated.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/porting_3_6.rst#2025-04-21_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\nFloat a, b = ... ;\nFloat res = dr::eq(a, b);\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building Mitsuba Renderer Executable in CMake\nDESCRIPTION: This CMake script configures the build process for the Mitsuba renderer executable. It includes the AsmJit library headers, enables position-independent code, creates the main executable, and sets up platform-specific dependencies for x86_64/AMD64 architectures and Unix systems.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/src/mitsuba/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(\n  ${ASMJIT_INCLUDE_DIRS}\n)\n\nset(CMAKE_POSITION_INDEPENDENT_CODE ON)\n\nadd_executable(mitsuba-bin mitsuba.cpp)\n\ntarget_link_libraries(mitsuba-bin PRIVATE mitsuba)\n\nif (CMAKE_SYSTEM_PROCESSOR MATCHES \"x86_64|AMD64\")\n  target_link_libraries(mitsuba-bin PRIVATE asmjit)\nendif()\n\nif (UNIX AND NOT APPLE)\n  target_link_libraries(mitsuba-bin PRIVATE dl)\nendif()\n\nset_target_properties(mitsuba-bin PROPERTIES OUTPUT_NAME mitsuba)\n```\n\n----------------------------------------\n\nTITLE: Setting BSDF Plugin Prefix in CMake\nDESCRIPTION: Sets the plugin prefix to 'bsdfs' for all subsequently defined plugins. This prefix is used to organize the plugins within the Mitsuba3 renderer's plugin architecture.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/src/bsdfs/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(MI_PLUGIN_PREFIX \"bsdfs\")\n```\n\n----------------------------------------\n\nTITLE: Constructing Orthogonal Stokes Basis Vectors\nDESCRIPTION: Demonstrates the beginning of a function for constructing orthogonal Stokes basis vectors from unit vectors, representing coordinate systems implicitly.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/key_topics/polarization.rst#2025-04-21_snippet_34\n\nLANGUAGE: cpp\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Implicit Reduction Comparison in C++ with Dr.Jit (Pre-1.0.0)\nDESCRIPTION: Demonstrates how comparison operators (== and !=) implicitly evaluated and reduced the result in versions of Dr.Jit prior to 1.0.0.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/porting_3_6.rst#2025-04-21_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\nbool res = a == b;\n```\n\n----------------------------------------\n\nTITLE: Adding Reconstruction Filter Plugins\nDESCRIPTION: Adds multiple reconstruction filter plugins by specifying their source files. Each plugin is built from its corresponding CPP file.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/src/rfilters/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_plugin(box        box.cpp)\nadd_plugin(tent       tent.cpp)\nadd_plugin(lanczos    lanczos.cpp)\nadd_plugin(mitchell   mitchell.cpp)\nadd_plugin(catmullrom catmullrom.cpp)\nadd_plugin(gaussian   gaussian.cpp)\n```\n\n----------------------------------------\n\nTITLE: Creating Git Tag for Mitsuba Release\nDESCRIPTION: This Git command creates an annotated tag for the new Mitsuba release. It should be run after committing the release changes.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/release.rst#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit tag -a vX.Y.Z -m \"vX.Y.Z release\"\n```\n\n----------------------------------------\n\nTITLE: Exporting Plugin Targets to Parent Scope in CMake\nDESCRIPTION: Exports the MI_PLUGIN_TARGETS variable to the parent scope, making the list of defined plugin targets available to other CMake files in the project hierarchy. This allows for further processing or dependency management at higher levels of the build system.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/src/bsdfs/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(MI_PLUGIN_TARGETS \"${MI_PLUGIN_TARGETS}\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Legacy Transform Creation in Python\nDESCRIPTION: Previous method of creating and chaining transforms using static functions, which could lead to unexpected behavior.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/porting_3_6.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nx = mi.Transform4f.translate([1,2,3]).scale(3.0).rotate([1, 0, 0], 0.5)\ny = x.scale(3.0)\n```\n\n----------------------------------------\n\nTITLE: Setting Build Output Directory\nDESCRIPTION: Determines the output directory for build products, with special handling for MSVC generators that use configuration-specific subdirectories.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\n# Directory for build products\nif (MSVC)\n  # MSVC: .. with generator expression for build type\n  set(MI_BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>)\nelse()\n  set(MI_BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR})\nendif()\n\nset(MI_COPY_FILES \"\")\n```\n\n----------------------------------------\n\nTITLE: Updating Stable Branch with New Mitsuba Release\nDESCRIPTION: This Git command updates the stable branch with the new release version. It should be run after the release tag has been pushed to the remote repository.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/release.rst#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngit pull --ff-only origin vX.Y.Z\n```\n\n----------------------------------------\n\nTITLE: Setting Plugin Targets for Parent Scope in Mitsuba3 CMake\nDESCRIPTION: Propagates the list of plugin targets to the parent scope to make them accessible in the parent CMake context. This allows the parent CMake file to know which plugins were defined.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/src/shapes/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(MI_PLUGIN_TARGETS \"${MI_PLUGIN_TARGETS}\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Mitsuba 0.6 XML Scene Format Example (Old Style)\nDESCRIPTION: Shows an example of the XML scene format in Mitsuba 0.6, which uses camelCase notation for parameter names and individual coordinate attributes for positions and transforms.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/key_topics/differences.rst#2025-04-21_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<sensor type=\"perspective\">\n    <string name=\"fovAxis\" value=\"smaller\"/>\n    <float name=\"nearClip\" value=\"10\"/>\n    <float name=\"farClip\" value=\"2800\"/>\n    <float name=\"focusDistance\" value=\"1000\"/>\n    <transform name=\"toWorld\">\n        <translate x=\"0\" y=\"0\" z=\"-100\"/>\n    </transform>\n    ...\n</sensor>\n```\n\n----------------------------------------\n\nTITLE: Configuring scikit-build Dependencies\nDESCRIPTION: Sets up installation paths and finds the Dr.Jit dependency when building with scikit-build, using Python to locate the right CMake directory.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif (SKBUILD)\n\n  set(CMAKE_INSTALL_LIBDIR mitsuba)\n  set(CMAKE_INSTALL_BINDIR mitsuba)\n  set(CMAKE_INSTALL_DATAROOTDIR mitsuba/data)\n  set(CMAKE_INSTALL_INCLUDEDIR mitsuba/include)\n\n  set(MI_DRJIT_CMAKE_DIR \"\" CACHE STRING \"Location of Dr.Jit's CMake directory that should be used instead of the output of `drjit.get_cmake_dir()` when building with scikit-build.\")\n  mark_as_advanced(MI_DRJIT_CMAKE_DIR)\n\n  if(\"${MI_DRJIT_CMAKE_DIR}\" STREQUAL \"\")\n    execute_process(\n      COMMAND\n      \"${PYTHON_EXECUTABLE}\" -c\n      \"import drjit; print(drjit.get_cmake_dir())\"\n      OUTPUT_VARIABLE MI_DRJIT_CMAKE_DIR\n      OUTPUT_STRIP_TRAILING_WHITESPACE COMMAND_ECHO STDOUT)\n  endif()\n\n  list(APPEND CMAKE_PREFIX_PATH \"${MI_DRJIT_CMAKE_DIR}\")\n  find_package(drjit CONFIG REQUIRED)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Git Commit for Mitsuba Release\nDESCRIPTION: This Git command creates a commit for the new Mitsuba release. It should be run after updating the version number and release notes.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/release.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit commit -am \"vX.Y.Z release\"\n```\n\n----------------------------------------\n\nTITLE: Propagating Plugin Targets to Parent Scope\nDESCRIPTION: Sets the MI_PLUGIN_TARGETS variable in the parent scope to make the texture plugin targets visible to parent CMake files.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/src/textures/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(MI_PLUGIN_TARGETS \"${MI_PLUGIN_TARGETS}\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Using is_polarized_v Type Trait in Mitsuba 3\nDESCRIPTION: Shows how to detect polarized Spectrum types with a C++17 constexpr type trait, allowing conditional code compilation based on whether polarization is enabled.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/key_topics/polarization.rst#2025-04-21_snippet_30\n\nLANGUAGE: cpp\nCODE:\n```\n// From `include/mitsuba/core/traits.h`\ntemplate <typename T> constexpr bool is_polarized_v = ...\n\n// Example use case\nif constexpr (is_polarized_v<Spectrum>) {\n    // ... only compiled in polarized modes ...\n}\n```\n\n----------------------------------------\n\nTITLE: Copying Shared Libraries for Python on Windows in CMake\nDESCRIPTION: Sets up a custom target to copy shared libraries to Python folders on Windows, as Windows doesn't use rpath. This ensures that Python bindings can find the necessary libraries.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/CMakeLists.txt#2025-04-21_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\nif (MSVC AND MI_ENABLE_PYTHON)\n  set(COPY_TARGETS mitsuba ${MI_DEPEND} ${MI_PLUGIN_TARGETS})\n  add_custom_target(copy-targets ALL DEPENDS ${COPY_TARGETS})\n\n  foreach(target ${COPY_TARGETS})\n    get_target_property(TARGET_FOLDER ${target} FOLDER)\n    if(TARGET_FOLDER MATCHES \"plugins/.*$\")\n        set(COPY_TARGET_DESTINATION ${MI_BINARY_DIR}/python/mitsuba/plugins/$<TARGET_FILE_NAME:${target}>)\n    else()\n        set(COPY_TARGET_DESTINATION ${MI_BINARY_DIR}/python/mitsuba/$<TARGET_FILE_NAME:${target}>)\n    endif()\n    add_custom_command(\n      TARGET copy-targets POST_BUILD\n      COMMAND ${CMAKE_COMMAND} -E copy_if_different\n        $<TARGET_FILE:${target}> ${COPY_TARGET_DESTINATION}\n      DEPENDS ${target}\n    )\n  endforeach(target)\n\n  add_dependencies(copy-targets-python copy-targets)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Build Defaults\nDESCRIPTION: Configures default build settings for Mitsuba using a shared CMake script from the Realistic Graphics Lab.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(P \"MI\") # <-- prefix for CMake variables, used by the following script\nset(MI_VERSION_FILE \"${CMAKE_CURRENT_SOURCE_DIR}/include/mitsuba/mitsuba.h\")\ninclude(ext/drjit/ext/drjit-core/ext/nanothread/ext/cmake-defaults/CMakeLists.txt)\n```\n\n----------------------------------------\n\nTITLE: Defining Read-Only Copy Function in CMake\nDESCRIPTION: Defines a macro 'ro_copy' to create a read-only copy of a file, handling different behaviors for Unix and non-Unix systems.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nmacro (ro_copy IN_FILE OUT_FILE)\n  set(OUT_FILE_1 \"${CMAKE_CURRENT_BINARY_DIR}/${OUT_FILE}\")\n  set(OUT_FILE_2 \"${MI_BINARY_DIR}/${OUT_FILE}\")\n  if (UNIX)\n    add_custom_command(\n      OUTPUT ${OUT_FILE_2} DEPENDS ${IN_FILE} ${ARGN}\n      COMMAND ${CMAKE_COMMAND} -E copy ${IN_FILE} ${OUT_FILE_2} && chmod a=r ${OUT_FILE_2})\n    list(APPEND MI_COPY_FILES ${OUT_FILE_2})\n  else()\n    add_custom_command(\n      OUTPUT ${OUT_FILE_1} DEPENDS ${IN_FILE} ${ARGN}\n      COMMAND ${CMAKE_COMMAND} -E copy ${IN_FILE} ${OUT_FILE_1}\n      COMMAND ${CMAKE_COMMAND} -E copy ${IN_FILE} ${OUT_FILE_2}\n    )\n    list(APPEND MI_COPY_FILES ${OUT_FILE_1})\n  endif()\nendmacro()\n```\n\n----------------------------------------\n\nTITLE: Setting Volume Plugin Prefix in CMake\nDESCRIPTION: Sets the plugin prefix for volume-related plugins to 'volumes' for organizational purposes in the build system.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/src/volumes/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(MI_PLUGIN_PREFIX \"volumes\")\n```\n\n----------------------------------------\n\nTITLE: Extracting Unpolarized Component from Mueller Matrix\nDESCRIPTION: Helper function that extracts the (1,1) entry from a Mueller matrix, converting any Spectrum to its unpolarized form. Used for Russian Roulette and final image output.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/key_topics/polarization.rst#2025-04-21_snippet_32\n\nLANGUAGE: cpp\nCODE:\n```\n// From `include/mitsuba/core/spectrum.h`\n\ntemplate <typename T>\nunpolarized_spectrum_t<T> unpolarized_spectrum(const T& s) {\n    if constexpr (is_polarized_v<T>) {\n        // First entry of the Mueller matrix is the unpolarized spectrum\n        return s(0, 0);\n    } else {\n        return s;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Mitsuba3 Components in CMake\nDESCRIPTION: Defines installation rules for Mitsuba3 binaries, libraries, header files, and data files. This ensures that all necessary components are properly installed on the target system.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/CMakeLists.txt#2025-04-21_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(\n  TARGETS mitsuba-bin mitsuba ${MI_DEPEND}\n  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n)\n\ninstall(\n  DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/include/mitsuba\n  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}\n)\n\ninstall(\n  FILES ${TINYFORMAT_INCLUDE_DIRS}/tinyformat.h\n  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}\n)\n\ninstall(\n  FILES ${CMAKE_CURRENT_BINARY_DIR}/include/mitsuba/core/config.h\n  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/mitsuba/core\n)\n\ninstall(\n  FILES ${CMAKE_CURRENT_BINARY_DIR}/data/srgb.coeff\n  DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Shape Plugin Prefix in CMake for Mitsuba3\nDESCRIPTION: Sets the plugin prefix for all shape plugins in the Mitsuba3 renderer. This defines a common namespace for the shape-related plugins.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/src/shapes/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(MI_PLUGIN_PREFIX \"shapes\")\n```\n\n----------------------------------------\n\nTITLE: Linux Test Dependencies\nDESCRIPTION: Commands to install additional dependencies for running tests on Linux.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/developer_guide/compiling.rst#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# For running tests\nsudo apt install python3-pytest python3-pytest-xdist python3-numpy\n```\n\n----------------------------------------\n\nTITLE: Updating Parent Scope Plugin Targets\nDESCRIPTION: Propagates the updated plugin targets list to the parent scope in the CMake configuration hierarchy.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/src/volumes/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(MI_PLUGIN_TARGETS \"${MI_PLUGIN_TARGETS}\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Fresnel Equations Implementation in ART\nDESCRIPTION: Mathematical formulation of Fresnel equations as implemented in ART renderer, including perpendicular and parallel components along with phase shifts calculations.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/key_topics/polarization.rst#2025-04-21_snippet_27\n\nLANGUAGE: tex\nCODE:\n```\n\\begin{align}\n    F_{\\bot} &= \\frac{a^{2} + b^{2} - 2 a \\cos\\theta + \\cos^{2}\\theta}{a^{2} + b^{2} + 2 a \\cos\\theta + \\cos^{2}\\theta}\n    \\\\\n    F_{\\parallel} &= \\frac{a^{2} + b^{2} - 2 a \\sin\\theta \\tan\\theta + \\sin^{2}\\theta \\tan^{2}\\theta}{a^{2} + b^{2} + 2 a \\sin\\theta \\tan\\theta + \\sin^{2}\\theta \\tan^{2}\\theta} F_{\\bot}\n    \\\\\n    \\tan\\delta_{\\bot} &= \\frac{2 b \\cos\\theta}{\\cos^{2}\\theta - a^{2} - b^{2}}\n    \\\\\n    \\tan\\delta_{\\parallel} &= \\frac{2 \\cos\\theta \\left[ (n^{2} - k^{2})b - 2 n k a \\right]}{(n^{2} + k^{2})^{2} \\cos^{2}\\theta - a^{2} - b^{2}}\n\\end{align}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mitsuba 3 CMake Project Setup\nDESCRIPTION: Defines the minimum CMake version requirements and sets up the Mitsuba project with CXX and C language support.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required (VERSION 3.13...3.18)\n\nproject(mitsuba\n  DESCRIPTION\n    \"Mitsuba\"\n  LANGUAGES\n    CXX C\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Texture Plugin Prefix in CMake\nDESCRIPTION: Sets the MI_PLUGIN_PREFIX variable to 'textures' to organize the texture plugins in the build system.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/src/textures/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(MI_PLUGIN_PREFIX \"textures\")\n```\n\n----------------------------------------\n\nTITLE: Creating Git Pull All Alias\nDESCRIPTION: Git configuration command to create an alias that pulls updates and syncs submodules in one step.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/developer_guide/compiling.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global alias.pullall '!f(){ git pull \"$@\" && git submodule update --init --recursive; }; f'\n```\n\n----------------------------------------\n\nTITLE: Setting Media Plugin Prefix in Mitsuba3 CMake Configuration\nDESCRIPTION: Sets the plugin prefix to 'media' for organizing media-related plugins in the Mitsuba3 renderer.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/src/media/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(MI_PLUGIN_PREFIX \"media\")\n```\n\n----------------------------------------\n\nTITLE: Converting Polarized to Unpolarized Spectrum Types\nDESCRIPTION: Demonstrates the unpolarized_spectrum_t type trait that converts a polarized Spectrum type to its unpolarized form, useful when working with data that lacks polarization information.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/key_topics/polarization.rst#2025-04-21_snippet_31\n\nLANGUAGE: cpp\nCODE:\n```\n// From `include/mitsuba/core/traits.h`\ntemplate <typename T> using unpolarized_spectrum_t = ...\n\n// Example use case\nusing UnpolarizedSpectrum = unpolarized_spectrum_t<Spectrum>;\n```\n\n----------------------------------------\n\nTITLE: Setting Feature Flags Based on Variant Configuration\nDESCRIPTION: Analyzes the configured variants to determine which features should be enabled, such as CUDA, LLVM, JIT compilation, and automatic differentiation support.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nlist(LENGTH MI_VARIANTS MI_VARIANTS_COUNT)\n\nmessage(STATUS \"Mitsuba: building the following variants:\")\nforeach (MI_VARIANT ${MI_VARIANTS})\n  string(REPLACE \"|\" \";\" MI_VARIANT ${MI_VARIANT})\n  list(GET MI_VARIANT 0 MI_VARIANT_NAME)\n  list(GET MI_VARIANT 1 MI_VARIANT_FLOAT)\n  list(GET MI_VARIANT 2 MI_VARIANT_SPECTRUM)\n  set(MI_VARIANT_NAMES ${MI_VARIANT_NAMES} ${MI_VARIANT_NAME})\n  message(STATUS \" * ${MI_VARIANT_NAME}\")\nendforeach()\n\nstring(REPLACE \";\" \" \" MI_VARIANT_NAMES_STR \"${MI_VARIANT_NAMES}\")\n\nif (MI_VARIANTS MATCHES \"cuda_\")\n  set(MI_ENABLE_CUDA ON)\nendif()\n\nif (MI_VARIANTS MATCHES \"llvm_\")\n  set(MI_ENABLE_LLVM ON)\nendif()\n\nif (MI_ENABLE_LLVM OR MI_ENABLE_CUDA)\n  set(MI_ENABLE_JIT ON)\nendif()\n\nif (MI_VARIANTS MATCHES \"ad_\")\n  set(MI_ENABLE_AUTODIFF ON)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Build Commands\nDESCRIPTION: Sets up custom build commands to generate coefficient files using the optimization tool. Creates a custom target for running the optimization process.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/ext/rgb2spec/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/srgb.coeff\n  DEPENDS rgb2spec_opt\n  COMMAND $<TARGET_FILE:rgb2spec_opt> 64 ${CMAKE_CURRENT_BINARY_DIR}/srgb.coeff\n)\n\nadd_custom_target(\n  rgb2spec_opt_run\n  DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/srgb.coeff\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation Build Targets for Mitsuba 3 (Bash)\nDESCRIPTION: Runs cmake in the build folder to generate build targets related to documentation for the Mitsuba 3 renderer project.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/developer_guide/documentation.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd build\ncmake -GNinja ..\n```\n\n----------------------------------------\n\nTITLE: Propagating Plugin Targets to Parent Scope in Mitsuba3 Build System\nDESCRIPTION: Exports the plugin targets to the parent scope in the CMake build system, making them accessible to the parent CMake file.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/src/media/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(MI_PLUGIN_TARGETS \"${MI_PLUGIN_TARGETS}\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Running Polarization Visualization Tool in Mitsuba 3\nDESCRIPTION: Command to run the polarization visualization tool (polvis) to create false-color visualizations from EXR images containing Stokes vector information. The tool supports various visualization types including raw Stokes components and more intuitive representations.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/key_topics/polarization.rst#2025-04-21_snippet_48\n\nLANGUAGE: python\nCODE:\n```\npython -m mitsuba.python.polvis <filename>.exr <flags>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Configuration File Tracking\nDESCRIPTION: Configures CMake to track changes in the mitsuba.conf file, ensuring that CMake is re-run if the configuration changes.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(${CMAKE_CURRENT_BINARY_DIR}/mitsuba.conf\n               ${CMAKE_CURRENT_BINARY_DIR}/ext/unused)\n```\n\n----------------------------------------\n\nTITLE: Setting up OpenMP Dependencies\nDESCRIPTION: Configures OpenMP support for non-Apple platforms. Finds and links OpenMP if available.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/ext/rgb2spec/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT APPLE)\n  find_package(OpenMP)\n  if(OpenMP_CXX_FOUND)\n      target_link_libraries(rgb2spec_opt PRIVATE OpenMP::OpenMP_CXX)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building HTML Documentation for Mitsuba 3 (Bash)\nDESCRIPTION: Builds the 'mkdoc' target using Ninja to generate HTML documentation files in the 'build/html' folder for the Mitsuba 3 renderer project.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/developer_guide/documentation.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nninja mkdoc\n```\n\n----------------------------------------\n\nTITLE: Setting Plugin Prefix for Reconstruction Filters\nDESCRIPTION: Defines the plugin prefix for reconstruction filters in Mitsuba3.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/src/rfilters/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(MI_PLUGIN_PREFIX \"rfilters\")\n```\n\n----------------------------------------\n\nTITLE: Parsing Configuration and Generating Derived Files\nDESCRIPTION: Uses Python to parse the mitsuba.conf file and generate derivative configuration files for C++ and Python, ensuring proper variant configuration.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT Python_EXECUTABLE)\n  # We require Python for the next step, even if Python bindings are deactivated\n  find_package(Python COMPONENTS Interpreter REQUIRED)\nendif()\n\nexecute_process(\n  COMMAND ${Python_EXECUTABLE}\n  ${CMAKE_CURRENT_SOURCE_DIR}/resources/configure.py\n  ${CMAKE_CXX_COMPILER_ID} ${CMAKE_CXX_COMPILER_VERSION} ${CMAKE_CURRENT_SOURCE_DIR}\n  WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n  OUTPUT_VARIABLE MI_VARIANTS\n  ERROR_VARIABLE MI_VARIANTS_ERR\n)\n\nif (MI_VARIANTS_ERR)\n  message(FATAL_ERROR \"Could not run resources/configure.py script: ${MI_VARIANTS_ERR}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring RGB2Spec Optimization Executable\nDESCRIPTION: Creates the rgb2spec_opt executable target and configures its C++ standard requirements. Sets C++11 as the required standard without extensions.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/ext/rgb2spec/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(rgb2spec_opt rgb2spec_opt.cpp)\nset_target_properties(rgb2spec_opt PROPERTIES\n  CXX_STANDARD 11\n  CXX_STANDARD_REQUIRED YES\n  CXX_EXTENSIONS NO)\n```\n\n----------------------------------------\n\nTITLE: Updated Parameter Names for Regular and Blackbody Plugins\nDESCRIPTION: Parameter renaming in regular and blackbody plugins from lambda_min/lambda_max to wavelength_min/wavelength_max for improved clarity.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/release_notes.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# Old parameters\nlambda_min, lambda_max\n\n# New parameters\nwavelength_min, wavelength_max\n```\n\n----------------------------------------\n\nTITLE: Extracting NVIDIA Linux Driver in WSL\nDESCRIPTION: Command to extract the contents of the NVIDIA Linux driver installer without installing it. This extracts the necessary files that will be used to enable OptiX in WSL.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/optix_setup.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ bash NVIDIA-Linux-x86_64-*.run -x --target driver\n```\n\n----------------------------------------\n\nTITLE: Defining Mitsuba 3 Build Options\nDESCRIPTION: Configures available options for Mitsuba's build, including Python bindings, Embree integration, sanitizers, debugger settings, and profiler integrations.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\noption(MI_ENABLE_PYTHON \"Build Python bindings for Mitsuba, Dr.Jit, and NanoGUI?\" ON)\n\noption(MI_ENABLE_EMBREE  \"Use Embree for ray tracing operations?\" ON)\n\noption(MI_SANITIZE_ADDRESS \"Enable GCC/Clang address sanitizer?\" OFF) # To catch out-of-bounds accesses\noption(MI_SANITIZE_MEMORY  \"Enable GCC/Clang memory sanitizer?\"  OFF) # To catch use of uninitialized memory\n\noption(MI_THROW_TRAPS_DEBUGGER \"Trap the debugger on calls to `Throw`?\" OFF)\nif(MI_THROW_TRAPS_DEBUGGER)\n  add_definitions(-DMI_THROW_TRAPS_DEBUGGER)\nendif()\n\noption(MI_PROFILER_ITTNOTIFY \"Forward profiler events (to Intel VTune)?\" OFF)\noption(MI_PROFILER_NVTX      \"Forward profiler events (to NVIDIA Nsight)?\" OFF)\n\nif (NOT APPLE)\n  option(MI_ENABLE_OPTIX_DEBUG_VALIDATION \"Enable debug flag for OptiX\" OFF)\nendif()\n\noption(MI_STABLE_ABI \"Build Python extension using the CPython stable ABI? (Only relevant when using scikit-build)\" OFF)\nmark_as_advanced(MI_STABLE_ABI)\n```\n\n----------------------------------------\n\nTITLE: Creating RGB2Spec Library Target\nDESCRIPTION: Defines the static library target for rgb2spec and sets position-independent code property.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/ext/rgb2spec/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(rgb2spec STATIC rgb2spec.c)\nset_property(TARGET rgb2spec PROPERTY POSITION_INDEPENDENT_CODE ON)\n```\n\n----------------------------------------\n\nTITLE: Mitsuba 3 XML Scene Format Example (New Style)\nDESCRIPTION: Demonstrates the updated XML scene format in Mitsuba 3, which uses underscore_case notation for parameter names and combined coordinate attributes for positions and transforms.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/key_topics/differences.rst#2025-04-21_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<sensor type=\"perspective\">\n    <string name=\"fov_axis\" value=\"smaller\"/>\n    <float name=\"near_clip\" value=\"10\"/>\n    <float name=\"far_clip\" value=\"2800\"/>\n    <float name=\"focus_distance\" value=\"1000\"/>\n    <transform name=\"to_world\">\n        <translate value=\"0, 0, -100\"/>\n    </transform>\n    ...\n</sensor>\n```\n\n----------------------------------------\n\nTITLE: Creating Symbolic Link for CUDA Driver in WSL\nDESCRIPTION: Command to create a symbolic link that exposes the already installed CUDA driver to runtime loading, making it accessible to applications like Mitsuba that require CUDA functionality.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/optix_setup.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ ln -s /usr/lib/wsl/lib/libcuda.so /usr/lib/x86_64-linux-gnu/\n```\n\n----------------------------------------\n\nTITLE: Defining Relative Phase Shift in Opposite Form\nDESCRIPTION: Presents an alternative form of the relative phase shift between parallel and perpendicular components, which reverses the sign and affects the sine expressions in related Mueller matrices.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/key_topics/polarization.rst#2025-04-21_snippet_21\n\nLANGUAGE: math\nCODE:\n```\n\\begin{align}\n    \\Delta' =  \\delta_\\bot - \\delta_\\parallel = -\\Delta\n\\end{align}\n```\n\n----------------------------------------\n\nTITLE: Configuring Clang/GCC Address Sanitizer in CMake\nDESCRIPTION: Sets up compiler and linker flags for address and memory sanitizers when using Clang or GCC compilers.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nif ((MI_SANITIZE_ADDRESS OR MI_SANITIZE_MEMORY) AND\n    (CMAKE_CXX_COMPILER_ID MATCHES \"(GNU|Clang)\"))\n  if (U_CMAKE_BUILD_TYPE MATCHES REL)\n    set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -O1\")\n    set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -O1\")\n    add_compile_options(-O1 -fno-optimize-sibling-calls)\n  endif()\n\n  add_compile_options(-fno-omit-frame-pointer)\n\n  if (MI_SANITIZE_ADDRESS)\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fsanitize=address\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fsanitize=address\")\n    set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -fsanitize=address\")\n    set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -fsanitize=address\")\n    message(STATUS \"Mitsuba: enabling the address sanitizer.\")\n  endif()\n\n  if (MI_SANITIZE_MEMORY)\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fsanitize=memory\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fsanitize=memory\")\n    set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -fsanitize=memory\")\n    set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -fsanitize=memory\")\n    message(STATUS \"Mitsuba: enabling the memory sanitizer.\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring RGB2Spec CMake Project\nDESCRIPTION: Sets up the CMake project requirements and default build configuration. Establishes minimum CMake version and project name, with a default Release build type if none specified.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/ext/rgb2spec/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13...3.18)\nproject(rgb2spec)\n\n# Set a default build configuration (Release)\nif (NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  message(STATUS \"Setting build type to 'Release' as none was specified.\")\n  set(CMAKE_BUILD_TYPE Release CACHE STRING \"Choose the type of build.\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS \"Debug\" \"Release\"\n    \"MinSizeRel\" \"RelWithDebInfo\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Preparing OptiX Files for Manual Installation in WSL\nDESCRIPTION: Complex command that creates a directory, copies required OptiX-related files with appropriate naming, and opens two Explorer windows to facilitate manual file copying between WSL and Windows directories.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/optix_setup.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ mkdir driver-dist && cp driver/libnvoptix.so.* driver-dist/libnvoptix.so.1 && cp driver/libnvidia-ptxjitcompiler.so.* driver-dist/libnvidia-ptxjitcompiler.so.1 && cp driver/libnvidia-rtcore.so.* driver-dist && cp driver/libnvidia-gpucomp.so.* driver-dist && cp driver/nvoptix.bin driver-dist && explorer.exe driver-dist && explorer.exe \"C:\\Windows\\System32\\lxss\\lib\"\n```\n\n----------------------------------------\n\nTITLE: Calibration Correction for Material Measurements\nDESCRIPTION: Formula for applying calibration correction to material measurements by multiplying the inverse of the air measurement matrix, removing systematic errors in the setup.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/key_topics/polarization.rst#2025-04-21_snippet_25\n\nLANGUAGE: math\nCODE:\n```\n\\begin{equation}\n    \\mathbf{M}^{\\text{final}} = (\\mathbf{M}^{\\text{air}})^{-1} \\cdot \\mathbf{M}\n\\end{equation}\n```\n\n----------------------------------------\n\nTITLE: Defining Mitsuba Plugin Creation Function in CMake\nDESCRIPTION: Creates a function 'add_plugin' to simplify the process of adding Mitsuba plugins to the build system, setting up target properties and installation rules.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/CMakeLists.txt#2025-04-21_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nset(MI_PLUGIN_TARGETS \"\")\nfunction(add_plugin)\n  list(GET ARGV 0 TARGET)\n  list(REMOVE_AT ARGV 0)\n  add_library(${TARGET} SHARED ${ARGV})\n  target_link_libraries(${TARGET} PRIVATE mitsuba)\n  set_target_properties(${TARGET} PROPERTIES\n    PREFIX \"\"\n    LIBRARY_OUTPUT_DIRECTORY ${MI_BINARY_DIR}/plugins\n    RUNTIME_OUTPUT_DIRECTORY ${MI_BINARY_DIR}/plugins\n    FOLDER plugins/${MI_PLUGIN_PREFIX}/${TARGET}\n  )\n  install(\n    TARGETS ${TARGET}\n    ARCHIVE DESTINATION ${CMAKE_INSTALL_BINDIR}/plugins\n    LIBRARY DESTINATION ${CMAKE_INSTALL_BINDIR}/plugins\n    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}/plugins\n  )\n  list(APPEND MI_PLUGIN_TARGETS ${TARGET})\n  set(MI_PLUGIN_TARGETS \"${MI_PLUGIN_TARGETS}\" PARENT_SCOPE)\nendfunction(add_plugin)\n```\n\n----------------------------------------\n\nTITLE: Configuring Bibliography Using ReStructuredText\nDESCRIPTION: RST directives to conditionally display a bibliography section in HTML/text output formats using a references.bib file.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/zz_bibliography.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. only:: html or text\n\n    Bibliography\n    ============\n\n    .. bibliography:: references.bib\n```\n\n----------------------------------------\n\nTITLE: Shutting Down WSL After Configuration\nDESCRIPTION: PowerShell command to completely shut down the WSL instance after the OptiX configuration, ensuring the changes take effect when WSL is restarted.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/optix_setup.rst#2025-04-21_snippet_3\n\nLANGUAGE: pwsh-session\nCODE:\n```\nC:\\Users\\...> wsl --shutdown\n```\n\n----------------------------------------\n\nTITLE: Setting Dependencies for Mitsuba3 in CMake\nDESCRIPTION: Defines the list of dependencies for the Mitsuba3 project, including conditional additions based on system architecture and build options.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/CMakeLists.txt#2025-04-21_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nset(MI_DEPEND\n  IlmImf IlmThread Imath Iex IexMath Half pugixml\n)\n\nif (CMAKE_SYSTEM_PROCESSOR MATCHES \"(x86_64)|(amd64)|(AMD64)\")\n  set(MI_DEPEND ${MI_DEPEND} asmjit)\nendif()\n\nlist(APPEND MI_DEPEND png jpeg)\n\nif (WIN32)\nlist(APPEND MI_DEPEND zlib)\nendif()\n\nif (MI_ENABLE_EMBREE)\n  list(APPEND MI_DEPEND embree)\nendif()\n\nif (NOT SKBUILD)\n  list(APPEND MI_DEPEND nanothread)\n\n  if (MI_ENABLE_JIT)\n    list(APPEND MI_DEPEND drjit-core)\n  endif()\n\n  if (MI_ENABLE_AUTODIFF)\n    list(APPEND MI_DEPEND drjit-extra)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Updating Submodules\nDESCRIPTION: Command to update submodules if repository was cloned without the --recursive flag.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/developer_guide/compiling.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit submodule update --init --recursive\n```\n\n----------------------------------------\n\nTITLE: BibTeX Citation for Mitsuba 3\nDESCRIPTION: BibTeX entry for citing Mitsuba 3 in academic projects. Includes author information, version, and year of publication.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/index.rst#2025-04-21_snippet_2\n\nLANGUAGE: bibtex\nCODE:\n```\n@software{jakob2022mitsuba3,\n    title = {Mitsuba 3 renderer},\n    author = {Wenzel Jakob and Sébastien Speierer and Nicolas Roussel and Merlin Nimier-David and Delio Vicini and Tizian Zeltner and Baptiste Nicolet and Miguel Crespo and Vincent Leroy and Ziyi Zhang},\n    note = {https://mitsuba-renderer.org},\n    version = {3.0.1},\n    year = 2022,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Vectorized Source Files for Mitsuba3 Render Module\nDESCRIPTION: This CMake code block sets the RENDER_PY_V_SRC variable with a list of vectorized implementation source files for the Mitsuba3 render module. It includes various components such as BSDFs, emitters, integrators, and more. The PARENT_SCOPE keyword indicates that this variable should be visible in the parent scope.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/src/render/python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(RENDER_PY_V_SRC\n  ${CMAKE_CURRENT_SOURCE_DIR}/bsdf_v.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/emitter_v.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/endpoint_v.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/film_v.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/fresnel_v.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/imageblock_v.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/interaction_v.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/integrator_v.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/medium_v.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/mueller_v.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/microfacet_v.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/microflake_v.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/optixdenoiser_v.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/phase_v.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/records_v.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/sampler_v.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/scene_v.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/sensor_v.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/shape_v.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/srgb_v.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/texture_v.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/volume_v.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/volumegrid_v.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/signal.h\n  PARENT_SCOPE\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Documentation Dependencies for Mitsuba 3 (Bash)\nDESCRIPTION: Installs additional packages required to generate HTML documentation for the Mitsuba 3 renderer project using pip.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/developer_guide/documentation.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -r docs/requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Inserting Banner Image in reStructuredText\nDESCRIPTION: This snippet inserts a banner image at the top of the documentation page, setting its width to 100% and aligning it to the center.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/api_reference.rst#2025-04-21_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. image:: ../resources/data/docs/images/banners/banner_07.jpg\n    :width: 100%\n    :align: center\n```\n\n----------------------------------------\n\nTITLE: Rotated Linear Polarizer Mueller Matrix\nDESCRIPTION: The Mueller matrix for a linear polarizer rotated by angle θ, derived by applying rotation transformations to the standard linear polarizer Mueller matrix. This allows calculating polarization effects at arbitrary angles.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/key_topics/polarization.rst#2025-04-21_snippet_2\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{equation}\n    \\mathbf{L}(\\theta) =\n    \\frac{1}{2} \\begin{bmatrix}\n        1 & \\cos(2\\theta) & \\sin(2\\theta) & 0 \\\\\n        \\cos(2\\theta) & \\cos^2(2\\theta) & \\sin(2\\theta)\\cos(2\\theta) & 0 \\\\\n        \\sin(2\\theta) & \\sin(2\\theta)\\cos(2\\theta) & \\sin^2(2\\theta) & 0 \\\\\n        0 & 0 & 0 & 0\n    \\end{bmatrix}\n\\end{equation}\n```\n\n----------------------------------------\n\nTITLE: Generating API References for Mitsuba 3 (Bash)\nDESCRIPTION: Executes commands to generate API references and rebuild documentation to update them for the Mitsuba 3 renderer project.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/developer_guide/documentation.rst#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nninja mkdoc-api\nninja mkdoc # Rebuild the documentation to update the API references\n```\n\n----------------------------------------\n\nTITLE: Including ReStructuredText Documentation Sections\nDESCRIPTION: A collection of directives that include specific sections of the Mitsuba 3 API documentation. Each section includes specific line ranges from the extracted_rst_api.rst file.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/generated/mitsuba_api.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: generated/extracted_rst_api.rst\n  :start-line: 20616\n  :end-line: 20712\n```\n\n----------------------------------------\n\nTITLE: Transmission Amplitude Coefficients (LaTeX)\nDESCRIPTION: Mathematical expressions for transmission amplitude coefficients in both perpendicular and parallel configurations.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/key_topics/polarization.rst#2025-04-21_snippet_8\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{align}\n    t_{\\bot}\n    &=\n    \\frac{E_t^{\\bot}}{E_i^{\\bot}}\n    =\n    \\frac{2 \\cos\\theta_i \\sin\\theta_t}{\\sin(\\theta_i + \\theta_t)}\n    =\n    \\frac{2 \\eta_i \\cos\\theta_i}{\\eta_i \\cos\\theta_i + \\eta_t \\cos\\theta_t}\n\\end{align}\n```\n\n----------------------------------------\n\nTITLE: Setting Notebook Cell as Thumbnail in Documentation (JSON)\nDESCRIPTION: Adds metadata to a Jupyter notebook cell to use its output image as a thumbnail in the documentation gallery for the Mitsuba 3 renderer project.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/developer_guide/documentation.rst#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"nbsphinx-thumbnail\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Phase Shift Equation (LaTeX)\nDESCRIPTION: Expression for calculating the relative phase shift between parallel and perpendicular wave components.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/key_topics/polarization.rst#2025-04-21_snippet_9\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{align}\n    \\Delta = \\delta_\\parallel - \\delta_\\bot = \\arg(r_\\parallel) - \\arg(r_\\bot)\n\\end{align}\n```\n\n----------------------------------------\n\nTITLE: Defining Mitsuba Core Library Object Files\nDESCRIPTION: Creates an object library for Mitsuba core components, listing all header and source files to be compiled.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/src/core/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_DIR \"../../include/mitsuba/core\")\n\nadd_library(mitsuba-core OBJECT\n  ${INC_DIR}/../mitsuba.h\n  ${INC_DIR}/atomic.h\n  ${INC_DIR}/frame.h\n  ${INC_DIR}/fwd.h\n  ${INC_DIR}/hash.h\n  ${INC_DIR}/math.h\n  ${INC_DIR}/jit.h\n  ${INC_DIR}/simd.h\n  ${INC_DIR}/platform.h\n  ${INC_DIR}/variant.h\n\n  string.cpp        ${INC_DIR}/string.h\n  appender.cpp      ${INC_DIR}/appender.h\n  argparser.cpp     ${INC_DIR}/argparser.h\n                    ${INC_DIR}/bbox.h\n  bitmap.cpp        ${INC_DIR}/bitmap.h\n                    ${INC_DIR}/bsphere.h\n  class.cpp         ${INC_DIR}/class.h\n                    ${INC_DIR}/distr_1d.h\n                    ${INC_DIR}/distr_2d.h\n  dstream.cpp       ${INC_DIR}/dstream.h\n  filesystem.cpp    ${INC_DIR}/filesystem.h\n  formatter.cpp     ${INC_DIR}/formatter.h\n  fresolver.cpp     ${INC_DIR}/fresolver.h\n  fstream.cpp       ${INC_DIR}/fstream.h\n  jit.cpp           ${INC_DIR}/jit.h\n  logger.cpp        ${INC_DIR}/logger.h\n  mmap.cpp          ${INC_DIR}/mmap.h\n  tensor.cpp        ${INC_DIR}/tensor.h\n  mstream.cpp       ${INC_DIR}/mstream.h\n  object.cpp        ${INC_DIR}/object.h\n  plugin.cpp        ${INC_DIR}/plugin.h\n  profiler.cpp      ${INC_DIR}/profiler.h\n  progress.cpp      ${INC_DIR}/progress.h\n  properties.cpp    ${INC_DIR}/properties.h\n  qmc.cpp           ${INC_DIR}/qmc.h\n                    ${INC_DIR}/random.h\n                    ${INC_DIR}/ray.h\n  rfilter.cpp       ${INC_DIR}/rfilter.h\n  spectrum.cpp      ${INC_DIR}/spectrum.h\n                    ${INC_DIR}/spline.h\n  stream.cpp        ${INC_DIR}/stream.h\n  struct.cpp        ${INC_DIR}/struct.h\n  thread.cpp        ${INC_DIR}/thread.h\n                    ${INC_DIR}/timer.h\n  transform.cpp     ${INC_DIR}/transform.h\n                    ${INC_DIR}/traits.h\n  util.cpp          ${INC_DIR}/util.h\n                    ${INC_DIR}/vector.h\n                    ${INC_DIR}/warp.h\n  xml.cpp           ${INC_DIR}/xml.h\n  zstream.cpp       ${INC_DIR}/zstream.h\n                    ${INC_DIR}/quad.h\n\n  dither-matrix256.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Hiding Notebook Cell in Documentation (JSON)\nDESCRIPTION: Adds metadata to a Jupyter notebook cell to hide it in the generated documentation for the Mitsuba 3 renderer project.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/developer_guide/documentation.rst#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"nbsphinx\": \"hidden\"\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Reflectance in LaTeX\nDESCRIPTION: Formula for calculating reflectance (R) as the ratio of reflected power to incident power, using beam areas and intensities.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/key_topics/polarization.rst#2025-04-21_snippet_10\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{align}\n    R = \\frac{\\text{reflected power}}{\\text{incident power}} = \\frac{A_r I_r}{A_i I_i}\n\\end{align}\n```\n\n----------------------------------------\n\nTITLE: Circular Polarization Visualization in HTML\nDESCRIPTION: HTML code for embedding a video that demonstrates the creation of circularly polarized light using a linear polarizer and a quarter-wave plate. The visualization helps explain polarization transformation principles.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/key_topics/polarization.rst#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<center>\n    <video style=\"max-width:80%;\" loop autoplay muted\n        src=\"https://rgl.s3.eu-central-1.amazonaws.com/media/uploads/tzeltner/2021/06/17/qwp_circular.mp4\"></video>\n</center>\n```\n\n----------------------------------------\n\nTITLE: Calculating Intensity in LaTeX\nDESCRIPTION: Formula for calculating intensity (I) using refractive index, speed of light, vacuum permittivity, and electric field.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/key_topics/polarization.rst#2025-04-21_snippet_12\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{align}\n    I = \\eta \\frac{c_0 \\, \\epsilon_0}{2} {|E|}^{2}\n\\end{align}\n```\n\n----------------------------------------\n\nTITLE: Regenerating Mitsuba Documentation with Ninja\nDESCRIPTION: This command regenerates the Mitsuba documentation using the mkoc, mkdoc-api, and docstrings targets. It should be run in the build folder to update the documentation before a release.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/release.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nninja docstrings && ninja && ninja mkdoc-api mkdoc\n```\n\n----------------------------------------\n\nTITLE: Final Reflectance Formula in LaTeX\nDESCRIPTION: Simplified formula for reflectance (R) using refractive indices and electric field amplitudes.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/key_topics/polarization.rst#2025-04-21_snippet_13\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{align}\n    R\n    = \\frac{\\eta_i {|E_r|}^{2}}{\\eta_i {|E_i|}^{2}} = |r|^{2}\n\\end{align}\n```\n\n----------------------------------------\n\nTITLE: Scene Gallery Grid Item Structure in RST\nDESCRIPTION: reStructuredText grid item card template used for displaying scene thumbnails with download links and artist attribution. Includes centered image alignment and styling classes.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/gallery.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. grid-item-card:: `🅱️ <https://benedikt-bitterli.me/resources/>`_ `Bedroom <https://rgl.s3.eu-central-1.amazonaws.com/scenes/bedroom.zip>`_\n        :class-title: sd-text-center sd-font-weight-bold\n        :class-body: sd-text-center\n\n        .. image:: ../resources/data/docs/images/gallery_thumbnails/bedroom.png\n            :height: 130\n            :align: center\n\n        by `SlykDrako <https://www.blendswap.com/user/SlykDrako>`_\n```\n\n----------------------------------------\n\nTITLE: Final Transmittance Formula in LaTeX\nDESCRIPTION: Simplified formula for transmittance (T) using cosine of angles, refractive indices, and electric field amplitudes.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/key_topics/polarization.rst#2025-04-21_snippet_14\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{align}\n    T\n    = \\frac{\\cos\\theta_t \\eta_t {|E_t|}^{2}}{\\cos\\theta_i \\eta_i {|E_i|}^{2}} = \\frac{\\cos\\theta_t}{\\cos\\theta_i } \\frac{\\eta_t}{\\eta_i} |t|^{2}\n\\end{align}\n```\n\n----------------------------------------\n\nTITLE: Propagating Plugin Targets to Parent Scope\nDESCRIPTION: Sets the plugin targets variable in the parent scope to ensure visibility of the defined targets in the parent CMake configuration.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/src/rfilters/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(MI_PLUGIN_TARGETS \"${MI_PLUGIN_TARGETS}\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Documentation Banner Grid Layout in RST\nDESCRIPTION: reStructuredText grid layout for documentation banners section showing a 3-column grid of downloadable banner images with consistent styling.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/gallery.rst#2025-04-21_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. grid:: 3\n\n    .. grid-item-card:: `Banner 1 <https://rgl.s3.eu-central-1.amazonaws.com/scenes/banner_01.zip>`_\n        :class-title: sd-text-center sd-font-weight-bold\n        :class-body: sd-text-center\n\n        .. image:: ../resources/data/docs/images/banners/banner_01.jpg\n            :height: 90\n            :align: center\n```\n\n----------------------------------------\n\nTITLE: Mueller Matrix for Dielectric Reflection in LaTeX\nDESCRIPTION: Mueller matrix formulation for dielectric reflection, incorporating perpendicular and parallel reflectance components.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/key_topics/polarization.rst#2025-04-21_snippet_15\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{equation}\n    \\frac{1}{2} \\cdot \\begin{bmatrix}\n        R_{\\bot} + R_{\\parallel} & R_{\\bot} - R_{\\parallel} & 0 & 0 \\\\\n        R_{\\bot} - R_{\\parallel} & R_{\\bot} + R_{\\parallel} & 0 & 0 \\\\\n        0 & 0 & 2 \\sqrt{R_{\\bot} R_{\\parallel}} & 0 \\\\\n        0 & 0 & 0 & 2 \\sqrt{R_{\\bot} R_{\\parallel}}\n    \\end{bmatrix}\n\\end{equation}\n```\n\n----------------------------------------\n\nTITLE: Displaying Banner Image in reStructuredText\nDESCRIPTION: This snippet shows how to include and format a banner image in reStructuredText. It sets the image width to 100% and aligns it to the center.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/how_to_guides.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. image:: ../resources/data/docs/images/banners/banner_04.jpg\n    :width: 100%\n    :align: center\n```\n\n----------------------------------------\n\nTITLE: Total Internal Reflection Phase Angle Maximum\nDESCRIPTION: Mathematical equation for calculating the angle of maximum phase shift during total internal reflection based on refractive indices.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/key_topics/polarization.rst#2025-04-21_snippet_17\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{equation}\n    \\arg \\max_\\theta \\Delta(\\theta) = \\arccos\\sqrt{\\frac{1 - (\\eta_t / \\eta_i)^2}{1 + (\\eta_t / \\eta_i)^2}}\n\\end{equation}\n```\n\n----------------------------------------\n\nTITLE: Setting Document Properties in reStructuredText\nDESCRIPTION: This snippet sets the table of contents depth and creates a reference label for the API section using reStructuredText directives.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/api_reference.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n:tocdepth: 3\n.. _sec-api:\n```\n\n----------------------------------------\n\nTITLE: Including Generated API Documentation in reStructuredText\nDESCRIPTION: This snippet includes the automatically generated Mitsuba API documentation file into the main documentation using the 'include' directive.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/api_reference.rst#2025-04-21_snippet_2\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. include:: generated/mitsuba_api.rst\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents in reStructuredText\nDESCRIPTION: This snippet demonstrates how to create a table of contents in reStructuredText. It sets the maximum depth to 1 and uses a glob pattern to include all files matching the specified pattern.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/how_to_guides.rst#2025-04-21_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n    :glob:\n\n    how_to_guides/transformation_toolbox\n    how_to_guides/image_io_and_manipulation\n    how_to_guides/mesh_io_and_manipulation\n    how_to_guides/use_optimizers\n```\n\n----------------------------------------\n\nTITLE: RST Image and Gallery Declaration\nDESCRIPTION: ReStructuredText markup for displaying a banner image and creating a tutorial gallery navigation structure.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/inverse_rendering_tutorials.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: ../../resources/data/docs/images/banners/banner_04.jpg\n    :width: 100%\n    :align: center\n\n.. nbgallery::\n\n    inverse_rendering/gradient_based_opt\n    inverse_rendering/forward_inverse_rendering\n    inverse_rendering/caustics_optimization\n    inverse_rendering/object_pose_estimation\n    inverse_rendering/projective_sampling_integrators\n    inverse_rendering/volume_optimization\n    inverse_rendering/shape_optimization\n    inverse_rendering/radiance_field_reconstruction\n    inverse_rendering/polarizer_optimization\n    inverse_rendering/pytorch_mitsuba_interoperability\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Documentation Index Configuration\nDESCRIPTION: RST markup for configuring a documentation index page with an image banner and table of contents tree structure. Includes section headers and toctree directive for organizing documentation topics.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/key_topics.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: ../resources/data/docs/images/banners/banner_02.jpg\n    :width: 100%\n    :align: center\n\nKey Topics\n==========\n\nOverview\n--------\n\nThe following document aim at clarifying a particular part of the system or the\nbackground theory. They will often be referred by the tutorials and guides for\nin depth knowledge about a specific subject.\n\nTopics\n------\n\n.. toctree::\n    :maxdepth: 1\n    :glob:\n\n    key_topics/variants\n    key_topics/scene_format\n    key_topics/differences\n    key_topics/polarization\n```\n\n----------------------------------------\n\nTITLE: RST Include Directives\nDESCRIPTION: Series of RST include directives referencing sections from extracted_rst_api.rst with different line ranges\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/generated/mitsuba_api.rst#2025-04-21_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. include:: generated/extracted_rst_api.rst\n  :start-line: 22057\n  :end-line: 22067\n```\n\n----------------------------------------\n\nTITLE: RST Image Directive Configuration\nDESCRIPTION: Configures a banner image display with width and alignment settings using reStructuredText syntax.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/others_tutorials.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: ../../resources/data/docs/images/banners/banner_02.jpg\n    :width: 100%\n    :align: center\n```\n\n----------------------------------------\n\nTITLE: RST Navigation Gallery Configuration\nDESCRIPTION: Defines a navigation gallery in reStructuredText linking to tutorials about BSDF analysis, granular phase functions, and custom plugins.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/src/others_tutorials.rst#2025-04-21_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. nbgallery::\n\n    others/bsdf_deep_dive\n    others/granular_phase_function\n    others/custom_plugin\n```\n\n----------------------------------------\n\nTITLE: Pushing Mitsuba Release Changes and Tags\nDESCRIPTION: These Git commands push the release commit and tag to the remote repository. They should be run after creating the release tag.\nSOURCE: https://github.com/mitsuba-renderer/mitsuba3/blob/master/docs/release.rst#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit push\n```\n\nLANGUAGE: shell\nCODE:\n```\ngit push --tags\n```"
  }
]