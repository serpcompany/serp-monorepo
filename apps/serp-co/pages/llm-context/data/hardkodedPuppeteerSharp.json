[
  {
    "owner": "hardkoded",
    "repo": "puppeteer-sharp",
    "content": "TITLE: Taking Screenshots with Puppeteer Sharp in C#\nDESCRIPTION: Demonstrates how to use Puppeteer Sharp to launch a headless browser, navigate to a webpage, and take a screenshot. This example includes downloading the browser if needed.\nSOURCE: https://github.com/hardkoded/puppeteer-sharp/blob/master/docfx_project/docs/index.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing var browserFetcher = new BrowserFetcher();\nawait browserFetcher.DownloadAsync();\nvar browser = await Puppeteer.LaunchAsync(new LaunchOptions\n{\n    Headless = true\n});\nvar page = await browser.NewPageAsync();\nawait page.GoToAsync(\"http://www.google.com\");\nawait page.ScreenshotAsync(outputFile);\n```\n\n----------------------------------------\n\nTITLE: Taking Screenshots with Puppeteer Sharp in C#\nDESCRIPTION: Demonstrates how to launch a headless browser, navigate to a webpage, and take a screenshot. Uses BrowserFetcher to download the required browser revision.\nSOURCE: https://github.com/hardkoded/puppeteer-sharp/blob/master/docfx_project/api/index.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing var browserFetcher = new BrowserFetcher();\nawait browserFetcher.DownloadAsync(BrowserFetcher.DefaultRevision);\nvar browser = await Puppeteer.LaunchAsync(new LaunchOptions\n{\n    Headless = true\n});\nvar page = await browser.NewPageAsync();\nawait page.GoToAsync(\"http://www.google.com\");\nawait page.ScreenshotAsync(outputFile);\n```\n\n----------------------------------------\n\nTITLE: Taking Screenshots with Puppeteer Sharp in C#\nDESCRIPTION: This snippet demonstrates how to use Puppeteer Sharp to launch a browser, navigate to a webpage, and take a screenshot. It includes downloading the browser if needed.\nSOURCE: https://github.com/hardkoded/puppeteer-sharp/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar browserFetcher = new BrowserFetcher();\nawait browserFetcher.DownloadAsync();\nawait using var browser = await Puppeteer.LaunchAsync(\n    new LaunchOptions { Headless = true });\nawait using var page = await browser.NewPageAsync();\nawait page.GoToAsync(\"http://www.google.com\");\nawait page.ScreenshotAsync(outputFile);\n```\n\n----------------------------------------\n\nTITLE: Capturing Page Screenshot using Puppeteer-Sharp in C#\nDESCRIPTION: Initializes a Puppeteer browser instance, navigates to a specified URL, and captures a screenshot of the page. The code demonstrates browser setup, page navigation, and screenshot capture using ScreenshotAsync method. The screenshot is saved to a specified file path.\nSOURCE: https://github.com/hardkoded/puppeteer-sharp/blob/master/docfx_project/docs/Page.ScreenshotAsync.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing var browserFetcher = new BrowserFetcher();\nawait browserFetcher.DownloadAsync(BrowserFetcher.DefaultRevision);\n\nvar url = \"https://www.somepage.com\";\nvar file = \".\\\\somepage.jpg\";\n\nvar launchOptions = new LaunchOptions()\n{\n    Headless = false\n};\n\nusing (var browser = await Puppeteer.LaunchAsync(launchOptions))\nusing (var page = await browser.NewPageAsync())\n{\n    await page.GoToAsync(url);\n    await page.ScreenshotAsync(file);\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting All Links from a Web Page with Puppeteer Sharp\nDESCRIPTION: This snippet demonstrates how to extract all hyperlinks from a web page using Puppeteer Sharp's EvaluateExpressionAsync method. It launches a browser, navigates to Google, executes JavaScript to collect all anchor tag URLs, and then prints them to the console.\nSOURCE: https://github.com/hardkoded/puppeteer-sharp/blob/master/docfx_project/docs/Page.EvaluateExpressionAsync.GetAllLinks.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing (var browser = await Puppeteer.LaunchAsync(options))\nusing (var page = await browser.NewPageAsync())\n{\n    await page.GoToAsync(\"http://www.google.com\");\n    var jsSelectAllAnchors = @\"Array.from(document.querySelectorAll('a')).map(a => a.href);\";\n    var urls = await page.EvaluateExpressionAsync<string[]>(jsSelectAllAnchors);\n    foreach (string url in urls)\n    {\n        Console.WriteLine($\"Url: {url}\");\n    }\n    Console.WriteLine(\"Press any key to continue...\");\n    Console.ReadLine();\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nArray.from(document.querySelectorAll('a')).map(a => a.href);\n```\n\n----------------------------------------\n\nTITLE: Extracting Href Links from Web Page using Puppeteer Sharp in C#\nDESCRIPTION: This code snippet demonstrates how to use Puppeteer Sharp to navigate to a web page, extract all href links, and print them to the console. It initializes a browser instance, creates a new page, navigates to a specified URL, and then uses JavaScript evaluation to retrieve all anchor tags and their href attributes.\nSOURCE: https://github.com/hardkoded/puppeteer-sharp/blob/master/samples/get-all-links/README.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.Threading.Tasks;\nusing PuppeteerSharp;\n\nclass Program\n{\n    public static async Task Main()\n    {\n        await new BrowserFetcher().DownloadAsync(BrowserFetcher.DefaultChromiumRevision);\n        \n        using var browser = await Puppeteer.LaunchAsync(new LaunchOptions\n        {\n            Headless = true\n        });\n        using var page = await browser.NewPageAsync();\n        \n        await page.GoToAsync(\"https://github.com/hardkoded/puppeteer-sharp\");\n        \n        var links = await page.EvaluateExpressionAsync<string[]>(\n            \"Array.from(document.querySelectorAll('a')).map(a => a.href);\");\n        \n        foreach (var link in links)\n        {\n            Console.WriteLine(link);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating PDF Files with Puppeteer Sharp in C#\nDESCRIPTION: This snippet illustrates the process of launching a browser, navigating to a webpage, and generating a PDF file. It includes steps to ensure fonts are loaded properly before PDF generation.\nSOURCE: https://github.com/hardkoded/puppeteer-sharp/blob/master/README.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar browserFetcher = new BrowserFetcher();\nawait browserFetcher.DownloadAsync();\nawait using var browser = await Puppeteer.LaunchAsync(new LaunchOptions { Headless = true });\nawait using var page = await browser.NewPageAsync();\nawait page.GoToAsync(\"http://www.google.com\"); // In case of fonts being loaded from a CDN, use WaitUntilNavigation.Networkidle0 as a second param.\nawait page.EvaluateExpressionHandleAsync(\"document.fonts.ready\"); // Wait for fonts to be loaded. Omitting this might result in no text rendered in pdf.\nawait page.PdfAsync(outputFile);\n```\n\n----------------------------------------\n\nTITLE: Downloading and Using Multiple Chrome Versions with Puppeteer Sharp in C#\nDESCRIPTION: This snippet demonstrates how to download specific Chrome versions using BrowserFetcher, launch browsers with those versions, navigate to a website, and generate PDFs. It showcases the process for two different Chrome versions (118 and 119).\nSOURCE: https://github.com/hardkoded/puppeteer-sharp/blob/master/docfx_project/docs/DownloadFetcher.Download.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nConsole.WriteLine(\"Downloading browsers\");\n\nvar browserFetcher = new BrowserFetcher(SupportedBrowser.Chrome);\nvar chrome118 = await browserFetcher.DownloadAsync(\"118.0.5993.70\");\nvar chrome119 = await browserFetcher.DownloadAsync(\"119.0.5997.0\");\n\nConsole.WriteLine(\"Navigating\");\nawait using (var browser = await Puppeteer.LaunchAsync(new()\n{\n    ExecutablePath = chrome118.GetExecutablePath(),\n}))\n{\n    await using var page = await browser.NewPageAsync();\n    await page.GoToAsync(\"https://www.whatismybrowser.com/\");\n\n    Console.WriteLine(\"Generating PDF\");\n    await page.PdfAsync(Path.Combine(Directory.GetCurrentDirectory(), \"118.pdf\"));\n\n    Console.WriteLine(\"Export completed\");\n}\n\nawait using (var browser = await Puppeteer.LaunchAsync(new()\n{\n    ExecutablePath = chrome119.GetExecutablePath(),\n}))\n{\n    await using var page = await browser.NewPageAsync();\n    await page.GoToAsync(\"https://www.whatismybrowser.com/\");\n\n    Console.WriteLine(\"Generating PDF\");\n    await page.PdfAsync(Path.Combine(Directory.GetCurrentDirectory(), \"119.pdf\"));\n\n    Console.WriteLine(\"Export completed\");\n}\n```\n\n----------------------------------------\n\nTITLE: Generating PDF Files with Puppeteer Sharp in C#\nDESCRIPTION: Demonstrates how to launch a headless browser, navigate to a webpage, and generate a PDF file from the page content.\nSOURCE: https://github.com/hardkoded/puppeteer-sharp/blob/master/docfx_project/api/index.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nawait new BrowserFetcher().DownloadAsync(BrowserFetcher.DefaultRevision);\nvar browser = await Puppeteer.LaunchAsync(new LaunchOptions\n{\n    Headless = true\n});\nvar page = await browser.NewPageAsync();\nawait page.GoToAsync(\"http://www.google.com\");\nawait page.PdfAsync(outputFile);\n```\n\n----------------------------------------\n\nTITLE: Generating PDF Files with Puppeteer Sharp in C#\nDESCRIPTION: Demonstrates how to use Puppeteer Sharp to launch a headless browser, navigate to a webpage, and generate a PDF file of the page content.\nSOURCE: https://github.com/hardkoded/puppeteer-sharp/blob/master/docfx_project/docs/index.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing var browserFetcher = new BrowserFetcher();\nawait browserFetcher.DownloadAsync();\nvar browser = await Puppeteer.LaunchAsync(new LaunchOptions\n{\n    Headless = true\n});\nvar page = await browser.NewPageAsync();\nawait page.GoToAsync(\"http://www.google.com\");\nawait page.PdfAsync(outputFile);\n```\n\n----------------------------------------\n\nTITLE: Generating PDF Files with Custom Options in Puppeteer Sharp\nDESCRIPTION: Shows how to create a PDF with custom page format, margins, and header/footer templates. Demonstrates the use of PdfOptions to precisely control PDF generation.\nSOURCE: https://github.com/hardkoded/puppeteer-sharp/blob/master/docfx_project/api/index.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing var browserFetcher = new BrowserFetcher();\nawait browserFetcher.DownloadAsync(BrowserFetcher.DefaultRevision);\nvar browser = await Puppeteer.LaunchAsync(new LaunchOptions\n{\n    Headless = true\n});\nvar page = await browser.NewPageAsync();\nawait page.GoToAsync(\"http://www.google.com\");\nawait page.PdfAsync(outputFile, new PdfOptions\n{\n    Format = PaperFormat.A4,\n    DisplayHeaderFooter = true,\n    MarginOptions = new MarginOptions\n    {\n        Top = \"20px\",\n        Right = \"20px\",\n        Bottom = \"40px\",\n        Left = \"20px\"\n    },\n    FooterTemplate = \"<div id=\\\"footer-template\\\" style=\\\"font-size:10px !important; color:#808080; padding-left:10px\\\">Footer Text</div>\"\n});\n```\n\n----------------------------------------\n\nTITLE: Waiting for Selector and Interacting with Page Elements using Puppeteer Sharp in C#\nDESCRIPTION: This code snippet demonstrates how to use Puppeteer Sharp to navigate to a web page, type into a search box, wait for a selector to appear, and then click on it. It utilizes Page.WaitForSelectorAsync() to ensure the selector is available before interacting with it.\nSOURCE: https://github.com/hardkoded/puppeteer-sharp/blob/master/docfx_project/docs/Page.WaitForSelectorAsync.Searching.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing (var browser = await Puppeteer.LaunchAsync(options))\nusing (var page = await browser.NewPageAsync())\n{\n    await page.GoToAsync(\"https://developers.google.com/web/\");\n    // Type into search box.\n    await page.TypeAsync(\"#searchbox input\", \"Headless Chrome\");\n\n    // Wait for suggest overlay to appear and click \"show all results\".\n    var allResultsSelector = \".devsite-suggest-all-results\";\n    await page.WaitForSelectorAsync(allResultsSelector);\n    await page.ClickAsync(allResultsSelector);\n\n    // continue the operation\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Network Requests with Puppeteer Sharp in C#\nDESCRIPTION: This snippet demonstrates how to monitor network requests by attaching an event handler to the Page.Request event. The code launches a headless browser, navigates to a webpage, and logs all outgoing request methods, URLs, and headers to the console.\nSOURCE: https://github.com/hardkoded/puppeteer-sharp/blob/master/docfx_project/docs/Page.Request.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing var browser = await Puppeteer.LaunchAsync(new () { Headless = true });\nvar page = await browser.NewPageAsync();\npage.Request += (sender, e) =>\n{\n    Console.WriteLine($\"Request: {e.Request.Method} {e.Request.Url}\");\n    foreach (var header in e.Request.Headers)\n    {\n        Console.WriteLine($\"{header.Key}: {header.Value}\");\n    }\n};\nawait page.GoToAsync(\"https://example.com\");\n```\n\n----------------------------------------\n\nTITLE: Converting JavaScript Data to Typed .NET Objects with Puppeteer Sharp\nDESCRIPTION: This snippet demonstrates how to extract data from a webpage using JavaScript and convert it to strongly-typed .NET objects. It first creates a Data class to hold title and URL information, then uses Puppeteer Sharp to navigate to Hacker News, execute JavaScript to collect story links, and map the results to an array of Data objects.\nSOURCE: https://github.com/hardkoded/puppeteer-sharp/blob/master/docfx_project/docs/Page.EvaluateFunctionAsync.ComplexJSObjects.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Data\n{\n    public string Title { get; set; }\n    public string Url { get; set; }\n}\n\nusing (var browser = await Puppeteer.LaunchAsync(options))\nusing (var page = await browser.NewPageAsync())\n{\n    await page.GoToAsync(\"https://news.ycombinator.com/\");\n    Console.WriteLine(\"Get all urls from page\");\n    var jsCode = @\"() => {\nconst selectors = Array.from(document.querySelectorAll('a[class=\"\"storylink\"\"']'));\nreturn selectors.map( t=> {return { title: t.innerHTML, url: t.href}});\n}\";\n    var results = await page.EvaluateFunctionAsync<Data[]>(jsCode);\n    foreach (var result in results)\n    {\n        Console.WriteLine(result.ToString());\n    }\n    Console.WriteLine(\"Press any key to continue...\");\n    Console.ReadLine();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Viewport in Puppeteer Sharp\nDESCRIPTION: Shows how to change the viewport dimensions before taking screenshots or performing other operations. This allows customizing the view size to specific requirements.\nSOURCE: https://github.com/hardkoded/puppeteer-sharp/blob/master/docfx_project/docs/index.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.SetViewportAsync(new ViewPortOptions\n{\n    Width = 500,\n    Height = 500\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Viewport for Screenshots in Puppeteer Sharp (C#)\nDESCRIPTION: This code shows how to set the viewport size before taking a screenshot using Puppeteer Sharp. It's useful for controlling the dimensions of the captured area.\nSOURCE: https://github.com/hardkoded/puppeteer-sharp/blob/master/README.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nawait Page.SetViewportAsync(new ViewPortOptions\n{\n    Width = 500,\n    Height = 500\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Viewport Size in Puppeteer Sharp\nDESCRIPTION: Shows how to change the viewport dimensions before taking a screenshot, allowing for customized screenshot sizes.\nSOURCE: https://github.com/hardkoded/puppeteer-sharp/blob/master/docfx_project/api/index.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.SetViewport(new ViewPortOptions\n{\n    Width = 500,\n    Height = 500\n});\n```\n\n----------------------------------------\n\nTITLE: Waiting for DOM Elements with Puppeteer Sharp\nDESCRIPTION: Demonstrates how to wait for a specific selector to appear on the page before proceeding with operations. This is useful for handling SPAs or pages with dynamically loaded content.\nSOURCE: https://github.com/hardkoded/puppeteer-sharp/blob/master/docfx_project/docs/index.md#2025-04-21_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var page = await browser.NewPageAsync())\n{\n    await page.GoToAsync(\"http://www.spapage.com\");\n    await page.WaitForSelectorAsync(\"div.main-content\")\n    await page.PdfAsync(outputFile));\n}\n```\n\n----------------------------------------\n\nTITLE: Waiting for DOM Elements with Puppeteer Sharp\nDESCRIPTION: Demonstrates how to wait for a specific element to appear on the page before proceeding with operations. This ensures that the page is in the expected state before actions are performed.\nSOURCE: https://github.com/hardkoded/puppeteer-sharp/blob/master/docfx_project/api/index.md#2025-04-21_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var page = await Browser.NewPageAsync())\n{\n    await page.GoToAsync(\"http://www.spapage.com\");\n    await page.WaitForSelectorAsync(\"div.main-content\");\n    await page.PdfAsync(outputFile));\n}\n```\n\n----------------------------------------\n\nTITLE: Evaluating JavaScript with Puppeteer Sharp\nDESCRIPTION: Shows how to execute JavaScript expressions and functions in the context of the browser page. This example demonstrates evaluating both simple expressions and functions with parameters.\nSOURCE: https://github.com/hardkoded/puppeteer-sharp/blob/master/docfx_project/docs/index.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var page = await browser.NewPageAsync())\n{\n    var seven = await page.EvaluateExpressionAsync<int>(\"()=> 4 + 3\");\n    var someObject = await page.EvaluateFunctionAsync<dynamic>(\"(value) => ({a: value})\", 5);\n    Console.WriteLine(someObject.a);\n}\n```\n\n----------------------------------------\n\nTITLE: Evaluating JavaScript in Puppeteer Sharp\nDESCRIPTION: Shows how to execute JavaScript expressions and functions in the browser context and retrieve their results. Demonstrates two different evaluation methods and handling of return values.\nSOURCE: https://github.com/hardkoded/puppeteer-sharp/blob/master/docfx_project/api/index.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var page = await Browser.NewPageAsync())\n{\n    var seven = await page.EvaluateExpressionAsync<int>(\"4 + 3\");\n    var someObject = await page.EvaluateFunctionAsync<dynamic>(\"(value) => ({a: value})\", 5);\n    Console.WriteLine(someObject.a);\n}\n```\n\n----------------------------------------\n\nTITLE: Evaluating JavaScript with Puppeteer Sharp in C#\nDESCRIPTION: This snippet shows how to evaluate JavaScript expressions and functions in a page using Puppeteer Sharp. It demonstrates both simple expressions and more complex function evaluations.\nSOURCE: https://github.com/hardkoded/puppeteer-sharp/blob/master/README.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nawait using var page = await browser.NewPageAsync();\nvar seven = await page.EvaluateExpressionAsync<int>(\"4 + 3\");\nvar someObject = await page.EvaluateFunctionAsync<JsonElement>(\"(value) => ({a: value})\", 5);\nConsole.WriteLine(someObject.GetProperty(\"a\").GetString());\n```\n\n----------------------------------------\n\nTITLE: Extracting Element Text with Puppeteer Sharp\nDESCRIPTION: Shows how to query for an element on a page and extract its inner text. This example demonstrates the DOM manipulation capabilities of Puppeteer Sharp.\nSOURCE: https://github.com/hardkoded/puppeteer-sharp/blob/master/docfx_project/docs/index.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var page = await browser.NewPageAsync())\n{\n    await page.GoToAsync(\"https://www.hardkoded.com/blog/ui-testing-with-puppeteer-released\");\n    var pageHeaderHandle = await page.QuerySelectorAsync(\"h1\");\n    var innerTextHandle = await pageHeaderHandle.GetPropertyAsync(\"innerText\");\n    var innerText = await innerTextHandle.JsonValueAsync();\n    // Inner Text: UI testing with Puppeteer book officially released!\n}\n```\n\n----------------------------------------\n\nTITLE: Waiting for Simple JavaScript Expression in Puppeteer Sharp (C#)\nDESCRIPTION: This snippet demonstrates how to use WaitForExpressionAsync to wait for a simple JavaScript expression to become true before proceeding. It navigates to a webpage and waits for a specific element's text to match a regular expression.\nSOURCE: https://github.com/hardkoded/puppeteer-sharp/blob/master/docfx_project/docs/Page.WaitForFunctionAsync.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var browser = await Puppeteer.LaunchAsync(options))\nusing (var page = await browser.NewPageAsync())\n{\n    await page.GoToAsync(\"https://www.somepage.com\");\n    await Page.WaitForExpressionAsync(\"document.queryselector('#status_info').innerText.match('^Showing ([1-9][0-9]*?) to ([1-9][0-9]*?)') of ([1-9][0-9]*?) entries') != null\");\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting HTML Content in Puppeteer Sharp\nDESCRIPTION: Demonstrates how to set custom HTML content in a page, retrieve the rendered content, and generate a PDF from it. This is useful for creating documents from dynamically generated HTML.\nSOURCE: https://github.com/hardkoded/puppeteer-sharp/blob/master/docfx_project/api/index.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing(var page = await Browser.NewPageAsync())\n{\n    await page.SetContentAsync(\"<div>My Receipt</div>\");\n    var result = await page.GetContentAsync();\n    await page.PdfAsync(outputFile);\n    SaveHtmlToDB(result);\n}\n```\n\n----------------------------------------\n\nTITLE: Waiting for Complex JavaScript Function in Puppeteer Sharp (C#)\nDESCRIPTION: This snippet shows how to use WaitForFunctionAsync to wait for a more complex JavaScript evaluation. It wraps the evaluation logic inside a function and waits for it to return true. This method is useful for more elaborate conditions or multi-line JavaScript code.\nSOURCE: https://github.com/hardkoded/puppeteer-sharp/blob/master/docfx_project/docs/Page.WaitForFunctionAsync.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar waitTask = Page.WaitForFunctionAsync(@\"() =>\n{\n    return document.queryselector('#status_info').innerText.match('^Showing ([1-9][0-9]*?) to ([1-9][0-9]*?)') of ([1-9][0-9]*?) entries') != null;\n}\");\n```\n\n----------------------------------------\n\nTITLE: Waiting for JavaScript Conditions with Puppeteer Sharp\nDESCRIPTION: Shows how to wait for a specific JavaScript condition to be met before continuing execution. This example waits for the window width to become less than 100 pixels after a viewport change.\nSOURCE: https://github.com/hardkoded/puppeteer-sharp/blob/master/docfx_project/docs/index.md#2025-04-21_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var page = await Browser.NewPageAsync())\n{\n    await page.GoToAsync(\"http://www.spapage.com\");\n    var watchDog = page.WaitForFunctionAsync(\" () => window.innerWidth < 100\");\n    await page.SetViewportAsync(new ViewPortOptions { Width = 50, Height = 50 });\n    await watchDog;\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting HTML Content with Puppeteer Sharp in C#\nDESCRIPTION: This code demonstrates how to inject HTML content into a page and retrieve the resulting content using Puppeteer Sharp. It's useful for dynamic content manipulation.\nSOURCE: https://github.com/hardkoded/puppeteer-sharp/blob/master/README.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nawait using var page = await browser.NewPageAsync();\nawait page.SetContentAsync(\"<div>My Receipt</div>\");\nvar result = await page.GetContentAsync();\n```\n\n----------------------------------------\n\nTITLE: Injecting HTML Content with Puppeteer Sharp\nDESCRIPTION: Demonstrates how to set custom HTML content on a page, retrieve the resulting HTML, and save it as a PDF. This is useful for generating dynamic content without an actual website.\nSOURCE: https://github.com/hardkoded/puppeteer-sharp/blob/master/docfx_project/docs/index.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing(var page = await browser.NewPageAsync())\n{\n    await page.SetContentAsync(\"<div>My Receipt</div>\");\n    var result = await page.GetContentAsync();\n    await page.PdfAsync(outputFile);\n    SaveHtmlToDB(result);\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Remote Browser with Puppeteer Sharp\nDESCRIPTION: Demonstrates how to connect to a remote browser instance using a WebSocket endpoint. This approach allows using an externally managed browser instead of launching a local instance.\nSOURCE: https://github.com/hardkoded/puppeteer-sharp/blob/master/docfx_project/docs/index.md#2025-04-21_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nvar options = new ConnectOptions()\n{\n    BrowserWSEndpoint = $\"wss://www.externalbrowser.io?token={apikey}\"\n};\n\nvar url = \"https://www.google.com/\";\n\nusing (var browser = await PuppeteerSharp.Puppeteer.ConnectAsync(options))\n{\n    using (var page = await browser.NewPageAsync())\n    {\n        await page.GoToAsync(url);\n        await page.PdfAsync(\"wot.pdf\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Remote Browser with Puppeteer Sharp\nDESCRIPTION: Demonstrates how to connect to an external browser instance using a WebSocket endpoint. This approach allows for controlling a browser running on a different machine or in a different environment.\nSOURCE: https://github.com/hardkoded/puppeteer-sharp/blob/master/docfx_project/api/index.md#2025-04-21_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nvar options = new ConnectOptions()\n{\n    BrowserWSEndpoint = $\"wss://www.externalbrowser.io?token={apikey}\"\n};\n\nvar url = \"https://www.google.com/\";\n\nusing (var browser = await PuppeteerSharp.Puppeteer.ConnectAsync(options))\n{\n    using (var page = await browser.NewPageAsync())\n    {\n        await page.GoToAsync(url);\n        await page.PdfAsync(\"wot.pdf\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Launching Chrome with Extension using PuppeteerSharp in C#\nDESCRIPTION: Demonstrates how to initialize PuppeteerSharp and launch Chrome with a specific extension enabled for testing. The code downloads the browser if needed, configures launch options to load the extension, and creates a new page for testing.\nSOURCE: https://github.com/hardkoded/puppeteer-sharp/blob/master/docfx_project/docs/ChromeExtension.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing var browserFetcher = new BrowserFetcher();\nawait browserFetcher.DownloadAsync(BrowserFetcher.DefaultRevision);\n\nvar pathToExtension = \"path/to/extension\";\nvar launchOptions = new LaunchOptions()\n{\n    Headless = false,\n    Args = new []\n    {\n        $@\"--disable-extensions-except=\"\"{pathToExtension}\"\"\",\n        $@\"--load-extension=\"\"{pathToExtension}\"\"\"\n    }\n};\n\nusing (var browser = await Puppeteer.LaunchAsync(launchOptions))\nusing (var page = await browser.NewPageAsync())\n{\n    // test your extension here\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading Chrome to Custom Location using Puppeteer Sharp\nDESCRIPTION: This snippet demonstrates how to use BrowserFetcherOptions to specify a custom download path for Chrome and download it using Puppeteer Sharp. It sets a custom download path and uses BrowserFetcher to download Chrome to that location.\nSOURCE: https://github.com/hardkoded/puppeteer-sharp/blob/master/docfx_project/docs/ReuseChrome.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar downloadPath = \"/Users/dario/chrome\";\nvar browserFetcherOptions = new BrowserFetcherOptions { Path = downloadPath };\nvar browserFetcher = new BrowserFetcher(browserFetcherOptions);\nvar installedBrowser = await browserFetcher.DownloadAsync();\n```\n\n----------------------------------------\n\nTITLE: Launching Chrome from Custom Location using Puppeteer Sharp\nDESCRIPTION: This snippet shows how to use Puppeteer.LaunchAsync() with LaunchOptions to start Chrome from a specific location. It sets the ExecutablePath property to the custom Chrome location and launches the browser in headless mode.\nSOURCE: https://github.com/hardkoded/puppeteer-sharp/blob/master/docfx_project/docs/ReuseChrome.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar options = new LaunchOptions { Headless = true, ExecutablePath = installedBrowser.GetExecutablePath() };\n\nawait using var browser = await Puppeteer.LaunchAsync(options);\nawait using var page = await browser.NewPageAsync();\nawait page.GoToAsync(\"about:blank\");\n```\n\n----------------------------------------\n\nTITLE: Waiting for JavaScript Conditions with Puppeteer Sharp\nDESCRIPTION: Shows how to wait for a specific JavaScript condition to be met before proceeding with operations. This example waits for the window to be resized below a certain width.\nSOURCE: https://github.com/hardkoded/puppeteer-sharp/blob/master/docfx_project/api/index.md#2025-04-21_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var page = await Browser.NewPageAsync())\n{\n    await page.GoToAsync(\"http://www.spapage.com\");\n    var watchDog = page.WaitForFunctionAsync(\"window.innerWidth < 100\");\n    await Page.SetViewport(new ViewPortOptions { Width = 50, Height = 50 });\n    await watchDog;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Puppeteer-Sharp Browser and Page in C#\nDESCRIPTION: A minimal example demonstrating how to launch a browser instance and create a new page using Puppeteer-Sharp. The snippet shows the proper structure for a test case with Arrange, Act, and Assert sections.\nSOURCE: https://github.com/hardkoded/puppeteer-sharp/blob/master/ISSUE_TEMPLATE.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Arrange\nvar options = new LaunchOptions { /*  */ };\nvar chromiumRevision = BrowserFetcher.DefaultRevision;\nvar browser = await Puppeteer.LaunchAsync(options, chromiumRevision);\nvar page = browser.NewPageAsync();\n\n// Act\n...\n\n// Assert\n...\n```\n\n----------------------------------------\n\nTITLE: Checking Sandbox Permissions in PuppeteerSharp\nDESCRIPTION: This code snippet demonstrates how to verify if PuppeteerSharp successfully applied sandbox permissions by checking the InstalledBrowser.PermissionsFixed property. It's crucial for ensuring PDF generation functionality in server environments.\nSOURCE: https://github.com/hardkoded/puppeteer-sharp/blob/master/docfx_project/docs/IssuesGeneratingPdfFiles.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar browserFetcher = new BrowserFetcher();\nvar installedBrowser = await browserFetcher.DownloadAsync(BrowserFetcher.);\n\nif (!installedBrowser.PermissionsFixed)\n{\n    Console.WriteLine(\"Sandbox permissions were not applied. You need to run your application as an administrator.\");\n    return;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Serilog Logger with Puppeteer-Sharp in C#\nDESCRIPTION: This code demonstrates how to use the ILoggerFactory with Serilog when launching a browser with Puppeteer-Sharp. The logger is passed as a parameter to the LaunchAsync method.\nSOURCE: https://github.com/hardkoded/puppeteer-sharp/blob/master/docfx_project/docs/LogCDPCommunication.md#2025-04-21_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\nusing (var browser = await Puppeteer.LaunchAsync(browserOptions, GetLoggerFactory(fileName)))\n{\n    //Some code\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ILoggerFactory with Serilog for File Logging in C#\nDESCRIPTION: This method creates an ILoggerFactory configured with Serilog to log Connection messages at Trace level to a specified file. It sets up filters to specifically target Connection-related logs.\nSOURCE: https://github.com/hardkoded/puppeteer-sharp/blob/master/docfx_project/docs/LogCDPCommunication.md#2025-04-21_snippet_0\n\nLANGUAGE: cs\nCODE:\n```\nprivate static ILoggerFactory GetLoggerFactory(string file)\n{\n    var factory = new LoggerFactory();\n    var filter = new FilterLoggerSettings\n    {\n        { \"Connection\", LogLevel.Trace }\n    };\n\n    factory.WithFilter(filter).AddFile(file, LogLevel.Trace);\n\n    return factory;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ILoggerFactory with Microsoft.Extensions.Logging for Console in C#\nDESCRIPTION: This method creates an ILoggerFactory configured with Microsoft.Extensions.Logging to output logs to the console in Systemd format. It sets the minimum log level to Trace to capture all CDP messages.\nSOURCE: https://github.com/hardkoded/puppeteer-sharp/blob/master/docfx_project/docs/LogCDPCommunication.md#2025-04-21_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\nprivate static ILoggerFactory GetLoggerFactory()\n{\n    var loggerFactory = Microsoft.Extensions.Logging.LoggerFactory.Create(builder =>\n    {\n        builder\n            .AddConsole(options => options.Format = ConsoleLoggerFormat.Systemd)\n            .SetMinimumLevel(LogLevel.Trace);\n    });\n\n    return loggerFactory;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Console Logger with Puppeteer-Sharp in C#\nDESCRIPTION: This code shows how to use the ILoggerFactory with console logging when launching a browser with Puppeteer-Sharp. The logger factory is passed as a parameter to the LaunchAsync method.\nSOURCE: https://github.com/hardkoded/puppeteer-sharp/blob/master/docfx_project/docs/LogCDPCommunication.md#2025-04-21_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\nusing (var browser = await Puppeteer.LaunchAsync(browserOptions, GetLoggerFactory()))\n{\n    //Some code\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Example of Puppeteer Sharp with AOT Serialization\nDESCRIPTION: A full example showing how to configure and use Puppeteer Sharp with custom class serialization in an AOT environment, including browser initialization, page navigation, and evaluation with a custom class.\nSOURCE: https://github.com/hardkoded/puppeteer-sharp/blob/master/docfx_project/docs/AOT.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nclass MainClass\n{\n    public static async Task Main(string[] args)\n    {\n        Puppeteer.ExtraJsonSerializerContext = DemoJsonSerializationContext.Default;\n        var options = new LaunchOptions { Headless = true };\n\n        var browserFetcher = new BrowserFetcher();\n        await browserFetcher.DownloadAsync();\n\n        await using var browser = await Puppeteer.LaunchAsync(options);\n        await using var page = await browser.NewPageAsync();\n\n        await page.GoToAsync(\"https://www.google.com\");\n\n        var result = await page.EvaluateFunctionAsync<TestClass>(\"test => test\", new TestClass { Name = \"Dario\"});\n    }\n}\n\npublic class TestClass\n{\n    public string Name { get; set; }\n}\n\n[JsonSerializable(typeof(TestClass))]\npublic partial class DemoJsonSerializationContext : JsonSerializerContext\n{}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Class for Puppeteer Sharp Evaluation\nDESCRIPTION: Example of a simple custom class that will be used with Puppeteer Sharp's evaluation functions.\nSOURCE: https://github.com/hardkoded/puppeteer-sharp/blob/master/docfx_project/docs/AOT.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class TestClass\n{\n    public string Name { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a JSON Serialization Context\nDESCRIPTION: Implementation of a JSON serialization context for a custom class, which is necessary when using custom classes with Puppeteer Sharp in an AOT environment.\nSOURCE: https://github.com/hardkoded/puppeteer-sharp/blob/master/docfx_project/docs/AOT.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[JsonSerializable(typeof(TestClass))]\npublic partial class DemoJsonSerializationContext : JsonSerializerContext\n{}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Serialization Context in Puppeteer Sharp\nDESCRIPTION: How to set a custom serialization context for Puppeteer Sharp before launching the browser.\nSOURCE: https://github.com/hardkoded/puppeteer-sharp/blob/master/docfx_project/docs/AOT.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nPuppeteer.ExtraJsonSerializerContext = DemoJsonSerializationContext.Default;\n```\n\n----------------------------------------\n\nTITLE: Building and Running Puppeteer Sharp Samples with .NET Core CLI\nDESCRIPTION: These commands are used to build and run any sample in the Puppeteer Sharp samples folder. They should be executed from the CLI in the directory of the desired sample.\nSOURCE: https://github.com/hardkoded/puppeteer-sharp/blob/master/samples/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet build\ndotnet run\n```\n\n----------------------------------------\n\nTITLE: Manually Fixing Browser Permissions for PuppeteerSharp\nDESCRIPTION: This bash command shows how to manually fix sandbox permissions by running the setup.exe file that comes with the downloaded browser. It's important to run this command as an administrator to ensure proper permission application.\nSOURCE: https://github.com/hardkoded/puppeteer-sharp/blob/master/docfx_project/docs/IssuesGeneratingPdfFiles.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd <path-to-browser>\n.\\setup.exe --configure-browser-in-directory=\"<path-to-browser>\"\n```\n\n----------------------------------------\n\nTITLE: Creating Self-Signed Certificate for Test Server in PowerShell\nDESCRIPTION: PowerShell script to generate a self-signed certificate for the Puppeteer Sharp test server. The script creates a certificate named 'Puppeteer' and exports it to the specified file path.\nSOURCE: https://github.com/hardkoded/puppeteer-sharp/blob/master/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-SelfSignedCertificate -Subject \"localhost\" -FriendlyName \"Puppeteer\" -CertStoreLocation \"cert:\\CurrentUser\\My\"\n\nGet-ChildItem -Path cert:\\CurrentUSer\\my | where { $_.friendlyname -eq \"Puppeteer\" } | Export-Certificate -FilePath C:\\projects\\puppeteer-sharp\\lib\\PuppeteerSharp.TestServer\\testCert.cer\n```\n\n----------------------------------------\n\nTITLE: Defining Frame Structure for Puppeteer Sharp Testing\nDESCRIPTION: A hierarchical representation of the frame structure used for testing frame navigation and interactions in Puppeteer Sharp. It shows the parent-child relationships between different frame HTML files served from a local test server.\nSOURCE: https://github.com/hardkoded/puppeteer-sharp/blob/master/lib/PuppeteerSharp.Tests/Screenshots/nested-frames.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://localhost:<PORT>/frames/nested-frames.html\n    http://localhost:<PORT>/frames/two-frames.html\n        http://localhost:<PORT>/frames/frame.html\n        http://localhost:<PORT>/frames/frame.html\n    http://localhost:<PORT>/frames/frame.html\n```\n\n----------------------------------------\n\nTITLE: Configuring DocFX Template Files\nDESCRIPTION: List of customized template files and their modifications for Puppeteer-Sharp documentation. Changes include GitHub issues integration, logo updates, and removal of inherited members section.\nSOURCE: https://github.com/hardkoded/puppeteer-sharp/blob/master/docfx_project/readme.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `conceptual.html.primary.js`: Add the `docurl` pointing to the GitHub issues page.\n* 'logo.svg` is the puppeteer-sharp logo.\n* `ManagedReference.common.js` is the same as the one in `common` but we are setting the `docurl` to point to the GitHub issues page.\n* `token.json`. We change the `improveThisDoc` text.\n* `partials/class.header.tmpl.partial`: The `inherited members` section was removed.\n```\n\n----------------------------------------\n\nTITLE: Defining and Executing JavaScript Function for Coverage Analysis\nDESCRIPTION: This snippet defines a function 'foo' with conditional statements, ternary operators, and arrow functions. The function is then called, likely for code coverage testing purposes.\nSOURCE: https://github.com/hardkoded/puppeteer-sharp/blob/master/lib/PuppeteerSharp.Tests/Screenshots/golden-chromium/jscoverage-involved.txt#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction foo() {\n  if (1 > 2)\n    console.log(1);\n  if (1 < 2)\n    console.log(2);\n  let x = 1 > 2 ? 'foo' : 'bar';\n  let y = 1 < 2 ? 'foo' : 'bar';\n  let z = () => {};\n  let q = () => {};\n  q();\n}\n\nfoo();\n```\n\n----------------------------------------\n\nTITLE: CSS Coverage JSON Structure with Ranges and Text Content\nDESCRIPTION: A JSON structure that contains CSS coverage analysis data. It includes the URL being tested, ranges that indicate which parts of the CSS are used (defined by start and end positions), and the full CSS text content for reference.\nSOURCE: https://github.com/hardkoded/puppeteer-sharp/blob/master/lib/PuppeteerSharp.Tests/Screenshots/golden-chromium/csscoverage-involved.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"url\": \"http://localhost:<PORT>/csscoverage/involved.html\",\n    \"ranges\": [\n      {\n        \"start\": 149,\n        \"end\": 297\n      },\n      {\n        \"start\": 327,\n        \"end\": 433\n      }\n    ],\n    \"text\": \"\\n@charset \\\"utf-8\\\";\\n@namespace svg url(http://www.w3.org/2000/svg);\\n@font-face {\\n  font-family: \\\"Example Font\\\";\\n  src: url(\\\"./Dosis-Regular.ttf\\\");\\n}\\n\\n#fluffy {\\n  border: 1px solid black;\\n  z-index: 1;\\n  /* -webkit-disabled-property: rgb(1, 2, 3) */\\n  -lol-cats: \\\"dogs\\\" /* non-existing property */\\n}\\n\\n@media (min-width: 1px) {\\n  span {\\n    -webkit-border-radius: 10px;\\n    font-family: \\\"Example Font\\\";\\n    animation: 1s identifier;\\n  }\\n}\\n\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: CSS Stylesheet with Media Queries and Font Definitions\nDESCRIPTION: A CSS stylesheet that includes a charset declaration, namespace definition, font-face rule, element styling, and media queries. The stylesheet demonstrates various CSS features including custom font loading, element styling, and responsive design with media queries.\nSOURCE: https://github.com/hardkoded/puppeteer-sharp/blob/master/lib/PuppeteerSharp.Tests/Screenshots/golden-chromium/csscoverage-involved.txt#2025-04-21_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@charset \"utf-8\";\n@namespace svg url(http://www.w3.org/2000/svg);\n@font-face {\n  font-family: \"Example Font\";\n  src: url(\"./Dosis-Regular.ttf\");\n}\n\n#fluffy {\n  border: 1px solid black;\n  z-index: 1;\n  /* -webkit-disabled-property: rgb(1, 2, 3) */\n  -lol-cats: \"dogs\" /* non-existing property */\n}\n\n@media (min-width: 1px) {\n  span {\n    -webkit-border-radius: 10px;\n    font-family: \"Example Font\";\n    animation: 1s identifier;\n  }\n}\n```"
  }
]