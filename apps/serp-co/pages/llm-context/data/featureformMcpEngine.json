[
  {
    "owner": "featureform",
    "repo": "mcp-engine",
    "content": "TITLE: Configuring MCPEngine Server with OAuth Authentication and Scoped Tool\nDESCRIPTION: This Python snippet shows how to configure an MCPEngine server with OAuth 2.1 authentication using an Identity Provider (IdP). It initializes `MCPEngine` with an `IdpConfig` pointing to an issuer URL. The `add` tool is decorated with `@mcp.auth(scopes=[\"calc:read\"])`, requiring the authenticated user to possess the 'calc:read' scope to execute the tool. The `Context` object (`ctx`) provides access to user information (ID, roles) and logging within the tool.\nSOURCE: https://github.com/featureform/mcp-engine/blob/main/README.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom mcpengine import MCPEngine, Context\nfrom mcpengine.server.auth.providers.config import IdpConfig\n\nmcp = MCPEngine(\n    \"SecureDemo\",\n    idp_config=IdpConfig(\n        issuer_url=\"https://your-idp.example.com/realms/some-realm\",\n    ),\n)\n\n\n@mcp.auth(scopes=[\"calc:read\"])\n@mcp.tool()\ndef add(a: int, b: int, ctx: Context) -> int:\n    ctx.info(f\"User {ctx.user_id} with roles {ctx.roles} called add.\")\n    return a + b\n```\n\n----------------------------------------\n\nTITLE: Implementing an Authenticated SQLite Query Tool with MCPEngine\nDESCRIPTION: This Python code defines an MCPEngine server named 'SQLiteExplorer' with OAuth authentication enabled. It provides a tool `query_db` decorated with `@mcp.auth(scopes=[\"database:read\"])`, requiring the user to have the 'database:read' scope. The tool accepts an SQL query string, connects to a local SQLite database ('data.db'), executes the query, logs the action using the `Context` object, and returns the fetched rows as a string, or an error message if an exception occurs. Requires `sqlite3` and `mcpengine` libraries.\nSOURCE: https://github.com/featureform/mcp-engine/blob/main/README.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport sqlite3\nfrom mcpengine import MCPEngine, Context\nfrom mcpengine.server.auth.providers.config import IdpConfig\n\nmcp = MCPEngine(\n    \"SQLiteExplorer\",\n    idp_config=IdpConfig(\n        issuer_url=\"https://your-idp.example.com/realms/some-realm\",\n    ),\n)\n\n\n@mcp.auth(scopes=[\"database:read\"])\n@mcp.tool()\ndef query_db(sql: str, ctx: Context) -> str:\n    conn = sqlite3.connect(\"data.db\")\n    try:\n        rows = conn.execute(sql).fetchall()\n        ctx.info(f\"User {ctx.user.id} executed query: {sql}\")\n        return str(rows)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n```\n\n----------------------------------------\n\nTITLE: Defining an LLM-Invokable Tool in MCPEngine\nDESCRIPTION: This Python snippet illustrates how to define a tool using the `@mcp.tool` decorator in MCPEngine. The `send_email` function becomes an LLM-invokable tool that accepts 'to' and 'body' string arguments. It returns a confirmation message \"Email Sent!\". Tools can perform actions, computations, or have side effects.\nSOURCE: https://github.com/featureform/mcp-engine/blob/main/README.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom mcpengine import MCPEngine\n\nmcp = MCPEngine(\"Demo\")\n\n\n@mcp.tool()\ndef send_email(to: str, body: str):\n    return \"Email Sent!\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Read-Only Resource in MCPEngine\nDESCRIPTION: This Python code demonstrates defining a read-only resource using the `@mcp.resource` decorator in MCPEngine. The `get_config` function is exposed as a resource accessible via the URI 'config://app'. When accessed, it returns the string \"Configuration Data\". Resources are intended to provide static or read-only context to LLMs.\nSOURCE: https://github.com/featureform/mcp-engine/blob/main/README.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom mcpengine import MCPEngine\n\nmcp = MCPEngine(\"Demo\")\n\n\n@mcp.resource(\"config://app\")\ndef get_config() -> str:\n    return \"Configuration Data\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Reusable Prompt Template in MCPEngine\nDESCRIPTION: This Python example shows how to define a reusable conversation template, or prompt, using the `@mcp.prompt` decorator in MCPEngine. The `debug_prompt` function takes an 'error_msg' string and returns a formatted debugging string. Prompts allow standardizing interactions with the LLM.\nSOURCE: https://github.com/featureform/mcp-engine/blob/main/README.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom mcpengine import MCPEngine\n\nmcp = MCPEngine(\"Demo\")\n\n\n@mcp.prompt()\ndef debug_prompt(error_msg: str):\n    return f\"Debug: {error_msg}\"\n```\n\n----------------------------------------\n\nTITLE: Implementing an Echo Server with Resource and Tool in MCPEngine\nDESCRIPTION: This Python snippet creates a simple MCPEngine \"Demo\" server demonstrating both a resource and a tool that echo back input. The `echo_resource` function, accessed via 'echo://{msg}', returns a formatted string including the input message. The `echo_tool` function similarly takes a message string and returns a different formatted echo string. This illustrates the basic structure for defining different endpoint types.\nSOURCE: https://github.com/featureform/mcp-engine/blob/main/README.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom mcpengine import MCPEngine\n\nmcp = MCPEngine(\"Demo\")\n\n\n@mcp.resource(\"echo://{msg}\")\ndef echo_resource(msg: str):\n    return f\"Resource echo: {msg}\"\n\n\n@mcp.tool()\ndef echo_tool(msg: str):\n    return f\"Tool echo: {msg}\"\n```\n\n----------------------------------------\n\nTITLE: Defining an MCPEngine Tool that Returns an Image\nDESCRIPTION: This Python snippet demonstrates defining an MCPEngine tool that returns an image. The `thumbnail` function, decorated with `@mcp.tool`, takes a file path string and is expected to return an `Image` object (imported from `mcpengine`). The function body performing the image processing is omitted for brevity.\nSOURCE: https://github.com/featureform/mcp-engine/blob/main/README.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom mcpengine import MCPEngine, Image\n\nmcp = MCPEngine(\"Demo\")\n\n\n@mcp.tool()\ndef thumbnail(path: str) -> Image:\n    # ... function body omitted\n    pass\n```\n\n----------------------------------------\n\nTITLE: Starting the MCPEngine Proxy for Claude Desktop Integration\nDESCRIPTION: This Bash command starts the MCPEngine proxy, connecting it to a running MCPEngine server located at 'http://localhost:8000/sse'. The proxy listens for standard I/O (stdio) communication from an LLM host like Claude Desktop and translates it into HTTP/SSE requests to the specified server endpoint, handling authentication if required.\nSOURCE: https://github.com/featureform/mcp-engine/blob/main/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmcpengine proxy http://localhost:8000/sse\n```\n\n----------------------------------------\n\nTITLE: Defining Python Project Dependencies\nDESCRIPTION: This snippet lists the required Python packages and their minimum versions for the project. It follows the standard pip requirements file format, specifying dependencies like 'python-dotenv' for environment variables, 'requests' for HTTP requests, 'mcp' (presumably a custom package), and 'uvicorn' for ASGI server implementation. This file is typically used with 'pip install -r <filename>' to set up the project environment.\nSOURCE: https://github.com/featureform/mcp-engine/blob/main/examples/clients/simple-chatbot/mcp_simple_chatbot/requirements.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npython-dotenv>=1.0.0\nrequests>=2.31.0\nmcp>=1.0.0\nuvicorn>=0.32.1\n```\n\n----------------------------------------\n\nTITLE: Installing MCPEngine via uv or pip\nDESCRIPTION: This snippet shows the command-line instructions for installing the MCPEngine library along with its CLI extras using either the `uv` or `pip` package managers. This installation is a prerequisite for using the MCPEngine server and proxy functionalities.\nSOURCE: https://github.com/featureform/mcp-engine/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuv add \"mcpengine[cli]\"\n# or\npip install \"mcpengine[cli]\"\n```\n\n----------------------------------------\n\nTITLE: Displaying MCPEngine CLI Help\nDESCRIPTION: This Bash command executes the installed MCPEngine command-line interface with the '--help' flag. It's used to display available commands, options, and general usage information for the MCPEngine CLI tools.\nSOURCE: https://github.com/featureform/mcp-engine/blob/main/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmcpengine --help\n```\n\n----------------------------------------\n\nTITLE: Interacting with MCP Server via Stdio Client (Python)\nDESCRIPTION: Python script demonstrating how to connect to the MCP Simple Resource server using the `mcpengine` client library over stdio. It initializes a client session, lists available resources, and reads the content of the 'file:///greeting.txt' resource. Requires the `asyncio` and `mcpengine` libraries, and the server process (`uv run mcp-simple-resource`) to be executable.\nSOURCE: https://github.com/featureform/mcp-engine/blob/main/examples/servers/simple-resource/README.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom mcpengine.types import AnyUrl\nfrom mcpengine.client.session import ClientSession\nfrom mcpengine.client.stdio import StdioServerParameters, stdio_client\n\n\nasync def main():\n    async with stdio_client(\n        StdioServerParameters(command=\"uv\", args=[\"run\", \"mcp-simple-resource\"])\n    ) as (read, write):\n        async with ClientSession(read, write) as session:\n            await session.initialize()\n\n            # List available resources\n            resources = await session.list_resources()\n            print(resources)\n\n            # Get a specific resource\n            resource = await session.read_resource(AnyUrl(\"file:///greeting.txt\"))\n            print(resource)\n\n\nasyncio.run(main())\n\n```\n\n----------------------------------------\n\nTITLE: Creating Claude Desktop Configuration File\nDESCRIPTION: This Bash command creates an empty configuration file (`claude_desktop_config.json`) in the standard Application Support directory for the Claude application on macOS. This file is used in the subsequent step to configure Claude Desktop to connect to an MCP server.\nSOURCE: https://github.com/featureform/mcp-engine/blob/main/README.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ntouch ~/Library/Application\\ Support/Claude/claude_desktop_config.json\n```\n\n----------------------------------------\n\nTITLE: Interacting with MCP Simple Tool Server Using Fetch - Python\nDESCRIPTION: Demonstrates usage of the MCP client in Python to connect to the mcp-simple-tool server via the stdio transport, list available tools, and call the fetch tool with a target URL. Requires the mcpengine Python package and a running server endpoint. Inputs include command and arguments for server launch as well as parameters (e.g., url) for the fetch tool; outputs are the available tool list and fetch results. Intended for asynchronous execution and assumes network connectivity.\nSOURCE: https://github.com/featureform/mcp-engine/blob/main/examples/servers/simple-tool/README.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\\nfrom mcpengine.client.session import ClientSession\\nfrom mcpengine.client.stdio import StdioServerParameters, stdio_client\\n\\n\\nasync def main():\\n    async with stdio_client(\\n        StdioServerParameters(command=\\\"uv\\\", args=[\\\"run\\\", \\\"mcp-simple-tool\\\"])\\n    ) as (read, write):\\n        async with ClientSession(read, write) as session:\\n            await session.initialize()\\n\\n            # List available tools\\n            tools = await session.list_tools()\\n            print(tools)\\n\\n            # Call the fetch tool\\n            result = await session.call_tool(\\\"fetch\\\", {\\\"url\\\": \\\"https://example.com\\\"})\\n            print(result)\\n\\n\\nasyncio.run(main())\\n\n```\n\n----------------------------------------\n\nTITLE: Starting MCP Simple Tool Server via CLI - Bash\nDESCRIPTION: Starts the mcp-simple-tool server using the uv execution environment in Bash. The commands show two modes: default stdio transport or SSE transport with a custom port. No external dependencies besides uv and the server code are required. These commands take no input parameters except optional CLI flags and output server logs directly to the console.\nSOURCE: https://github.com/featureform/mcp-engine/blob/main/examples/servers/simple-tool/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Using stdio transport (default)\\nuv run mcp-simple-tool\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Using SSE transport on custom port\\nuv run mcp-simple-tool --transport sse --port 8000\n```\n\n----------------------------------------\n\nTITLE: Querying MCP Simple Prompt via STDIO Client – Python\nDESCRIPTION: This Python script demonstrates how to interact asynchronously with an MCP Simple Prompt server using the MCP engine client libraries. It initializes a stdio client connection to the server, lists available prompts, and retrieves a 'simple' prompt with optional context and topic arguments. Dependencies include 'asyncio', 'mcpengine.client.session', and 'mcpengine.client.stdio'. The script accepts key parameters for connecting to the server process and customizing the prompt request; it expects server responses as prompt lists or crafted prompt strings, with errors possible if the server is misconfigured or unavailable.\nSOURCE: https://github.com/featureform/mcp-engine/blob/main/examples/servers/simple-prompt/README.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom mcpengine.client.session import ClientSession\nfrom mcpengine.client.stdio import StdioServerParameters, stdio_client\n\n\nasync def main():\n    async with stdio_client(\n        StdioServerParameters(command=\"uv\", args=[\"run\", \"mcp-simple-prompt\"])\n    ) as (read, write):\n        async with ClientSession(read, write) as session:\n            await session.initialize()\n\n            # List available prompts\n            prompts = await session.list_prompts()\n            print(prompts)\n\n            # Get the prompt with arguments\n            prompt = await session.get_prompt(\n                \"simple\",\n                {\n                    \"context\": \"User is a software developer\",\n                    \"topic\": \"Python async programming\",\n                },\n            )\n            print(prompt)\n\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Starting MCP Simple Prompt Server with UV Run – Bash\nDESCRIPTION: These Bash commands show how to start the MCP Simple Prompt server either with the default stdio transport or with a custom SSE transport and port using the 'uv run' command. The server is initialized with customizable transport options and port selection, enabling users to adapt the deployment to different infrastructural setups. There are no required dependencies beyond the 'uv' tool and the 'mcp-simple-prompt' entrypoint; all command arguments such as '--transport' and '--port' are optional, and outputs/errors are managed by the invoked server.\nSOURCE: https://github.com/featureform/mcp-engine/blob/main/examples/servers/simple-prompt/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Using stdio transport (default)\nuv run mcp-simple-prompt\n\n# Using SSE transport on custom port\nuv run mcp-simple-prompt --transport sse --port 8000\n```\n\n----------------------------------------\n\nTITLE: Starting the MCP Simple Resource Server (Bash)\nDESCRIPTION: Bash commands to start the MCP Simple Resource server using the `uv run` command. Demonstrates launching with the default stdio transport and optionally with the SSE transport on a specified port (8000). Requires `uv` to be installed.\nSOURCE: https://github.com/featureform/mcp-engine/blob/main/examples/servers/simple-resource/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Using stdio transport (default)\nuv run mcp-simple-resource\n\n# Using SSE transport on custom port\nuv run mcp-simple-resource --transport sse --port 8000\n```\n\n----------------------------------------\n\nTITLE: Configuring Claude Desktop to Use Smack MCP Server via Docker Proxy\nDESCRIPTION: This JSON configuration snippet defines an MCP server named 'smack_mcp_server' for Claude Desktop. It specifies a 'bash' command to either attach to an existing 'mcpengine_proxy' Docker container or run a new one. The container runs the `mcpengine-proxy` image, connecting to the Smack service running at 'http://localhost:8000' within the Docker network. This allows Claude Desktop to communicate with the Dockerized Smack service via the proxy.\nSOURCE: https://github.com/featureform/mcp-engine/blob/main/README.md#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"smack_mcp_server\": {\n      \"command\": \"bash\",\n      \"args\": [\n        \"docker attach mcpengine_proxy || docker run --rm -i --net=host --name mcpengine_proxy featureformcom/mcpengine-proxy -host=http://localhost:8000 -debug -client_id=optional -client_secret=optional\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting MCPEngine Proxy via CLI for Smack Example\nDESCRIPTION: This Bash command provides an alternative way (compared to the JSON configuration) to connect Claude Desktop to the Smack example service. It runs the `mcpengine proxy` command directly, pointing it to the Smack service's endpoint at 'http://localhost:8000'. This command should be run in the terminal where Claude Desktop expects its stdio MCP server.\nSOURCE: https://github.com/featureform/mcp-engine/blob/main/README.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nmcpengine proxy http://localhost:8000\n```\n\n----------------------------------------\n\nTITLE: Configuring Claude Desktop with Docker Proxy (JSON)\nDESCRIPTION: This JSON configuration block defines a custom MCP server named `smack_mcp_server` for Claude Desktop. It uses a bash command within the `args` to either attach to an existing `mcpengine_proxy` Docker container or run a new one. The container runs the `mcpengine-proxy`, connects to the Smack service at `localhost:8000`, and exposes it to Claude Desktop as a local stdio server. Optional client ID and secret for OAuth can be passed.\nSOURCE: https://github.com/featureform/mcp-engine/blob/main/examples/servers/smack/README.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"smack_mcp_server\": {\n      \"command\": \"bash\",\n      \"args\": [\n        \"docker attach mcpengine_proxy || docker run --rm -i --net=host --name mcpengine_proxy featureformcom/mcpengine-proxy -host=http://localhost:8000 -debug -client_id=optional -client_secret=optional\",\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests with pytest via uv Bash\nDESCRIPTION: Executes the project's test suite using `pytest`. The command is run via `uv run`, which manages the execution within the project's defined virtual environment. This step verifies that code changes pass all existing tests.\nSOURCE: https://github.com/featureform/mcp-engine/blob/main/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nuv run pytest\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies using uv Bash\nDESCRIPTION: Uses the `uv sync` command to install all project dependencies, including development (`--dev`) and optional (`--all-extras`) dependencies, based on the versions specified in the lock file (`--frozen`). This ensures a reproducible development environment. Requires the `uv` tool to be installed.\nSOURCE: https://github.com/featureform/mcp-engine/blob/main/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nuv sync --frozen --all-extras --dev\n```\n\n----------------------------------------\n\nTITLE: Performing Static Type Checking with pyright via uv Bash\nDESCRIPTION: Runs the `pyright` static type checker on the codebase. This command, executed via `uv run`, helps identify type errors and enforce type hinting conventions within the Python code, improving code quality and reliability.\nSOURCE: https://github.com/featureform/mcp-engine/blob/main/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nuv run pyright\n```\n\n----------------------------------------\n\nTITLE: Formatting Code with ruff format via uv Bash\nDESCRIPTION: Runs the `ruff format` command using `uv run` to automatically format the code in the current directory (`.`) according to the project's defined style rules. This ensures consistent code formatting across the project.\nSOURCE: https://github.com/featureform/mcp-engine/blob/main/CONTRIBUTING.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nuv run ruff format .\n```\n\n----------------------------------------\n\nTITLE: Running MCPEngine Container with Command-Line Arguments (Bash)\nDESCRIPTION: This command runs the 'mcpengine:latest' Docker image as a container, mapping port 8181, running interactively, and removing on exit. It configures the application by passing command-line arguments directly to the container's entrypoint or command. Arguments include -host, -sse_path, -debug, -client_id, and -client_secret.\nSOURCE: https://github.com/featureform/mcp-engine/blob/main/mcpengine-proxy/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm -p 8181:8181 mcpengine:latest \\\n  -host localhost:8000 \\\n  -sse_path /sse \\\n  -debug=false \\\n  -client_id your_client_id \\\n  -client_secret your_client_secret\n```\n\n----------------------------------------\n\nTITLE: Running Tests with pytest via uv (Bash)\nDESCRIPTION: This command executes the test suite using `pytest` run via the `uv` tool. This is the required method for running tests in the project.\nSOURCE: https://github.com/featureform/mcp-engine/blob/main/CLAUDE.md#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\nuv run pytest\n```\n\n----------------------------------------\n\nTITLE: Fixing Code with Ruff via uv (Bash)\nDESCRIPTION: This command attempts to automatically fix linting errors and style violations detected by Ruff in the current directory (`.`). It is executed via the `uv run` command.\nSOURCE: https://github.com/featureform/mcp-engine/blob/main/CLAUDE.md#_snippet_10\n\nLANGUAGE: Bash\nCODE:\n```\nuv run ruff check . --fix\n```\n\n----------------------------------------\n\nTITLE: Running Type Checking with Pyright via uv (Bash)\nDESCRIPTION: This command runs static type checking on the Python codebase using Pyright, executed via the `uv run` command. This helps ensure type safety and correctness.\nSOURCE: https://github.com/featureform/mcp-engine/blob/main/CLAUDE.md#_snippet_11\n\nLANGUAGE: Bash\nCODE:\n```\nuv run pyright\n```\n\n----------------------------------------\n\nTITLE: Linting Code with ruff check via uv Bash\nDESCRIPTION: Executes the `ruff check` command using `uv run` to lint the codebase in the current directory (`.`). This checks for compliance with style guides (like PEP 8) and identifies potential code issues.\nSOURCE: https://github.com/featureform/mcp-engine/blob/main/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nuv run ruff check .\n```\n\n----------------------------------------\n\nTITLE: Checking Code with Ruff via uv (Bash)\nDESCRIPTION: This command checks Python code in the current directory (`.`) for linting errors and style violations using Ruff, executed via the `uv run` command.\nSOURCE: https://github.com/featureform/mcp-engine/blob/main/CLAUDE.md#_snippet_9\n\nLANGUAGE: Bash\nCODE:\n```\nuv run ruff check .\n```\n\n----------------------------------------\n\nTITLE: Formatting Code with Ruff via uv (Bash)\nDESCRIPTION: This command formats Python code in the current directory (`.`) using the Ruff formatter, executed via the `uv run` command. This ensures code adheres to the project's formatting standards.\nSOURCE: https://github.com/featureform/mcp-engine/blob/main/CLAUDE.md#_snippet_8\n\nLANGUAGE: Bash\nCODE:\n```\nuv run ruff format .\n```\n\n----------------------------------------\n\nTITLE: Running Tools with uv (Bash)\nDESCRIPTION: This command executes a specified development tool (e.g., linters, formatters, test runners) within the environment managed by `uv`. This is the standard way to run tools like `pytest`, `ruff`, or `pyright`.\nSOURCE: https://github.com/featureform/mcp-engine/blob/main/CLAUDE.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nuv run tool\n```\n\n----------------------------------------\n\nTITLE: Adding 'Reported-by' Trailer to Git Commit (Bash)\nDESCRIPTION: This command adds a 'Reported-by' trailer to a Git commit message. This should be used when a commit addresses a bug or feature reported by a specific user, replacing `<name>` with the user's name.\nSOURCE: https://github.com/featureform/mcp-engine/blob/main/CLAUDE.md#_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\ngit commit --trailer \"Reported-by:<name>\"\n```\n\n----------------------------------------\n\nTITLE: Adding 'Github-Issue' Trailer to Git Commit (Bash)\nDESCRIPTION: This command adds a 'Github-Issue' trailer to a Git commit message, linking the commit to a specific GitHub issue. Replace `<number>` with the relevant issue number.\nSOURCE: https://github.com/featureform/mcp-engine/blob/main/CLAUDE.md#_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\ngit commit --trailer \"Github-Issue:#<number>\"\n```\n\n----------------------------------------\n\nTITLE: Installing Packages with uv (Bash)\nDESCRIPTION: This command installs a Python package using the `uv` package manager. It is the required method for adding dependencies in this project.\nSOURCE: https://github.com/featureform/mcp-engine/blob/main/CLAUDE.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nuv add package\n```\n\n----------------------------------------\n\nTITLE: Upgrading Development Packages with uv (Bash)\nDESCRIPTION: This command upgrades a specific development package using the `uv` package manager. The `--dev` flag indicates it's a development dependency, and `--upgrade-package` specifies the package to upgrade.\nSOURCE: https://github.com/featureform/mcp-engine/blob/main/CLAUDE.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nuv add --dev package --upgrade-package package\n```\n\n----------------------------------------\n\nTITLE: Starting MCPEngine with Docker Compose (Bash)\nDESCRIPTION: This command starts the services defined in the 'docker-compose.yml' file in detached mode ('-d'), meaning they run in the background. It typically uses the configuration specified in a '.env' file in the same directory. Requires Docker Compose and a 'docker-compose.yml' file.\nSOURCE: https://github.com/featureform/mcp-engine/blob/main/mcpengine-proxy/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Using the Convenience Run Script (Bash)\nDESCRIPTION: These commands demonstrate how to use the provided 'run-docker.sh' script. The first command makes the script executable. Subsequent commands show how to run it with default settings, custom command-line options (overriding host, enabling debug, setting client credentials), or building the image before running.\nSOURCE: https://github.com/featureform/mcp-engine/blob/main/mcpengine-proxy/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Make the script executable first\nchmod +x run-docker.sh\n\n# Run with default settings\n./run-docker.sh\n\n# Run with custom options\n./run-docker.sh --host api.example.com:8080 --debug --client-id abc123 --client-secret xyz789\n\n# Build the image before running\n./run-docker.sh --build --host localhost:9000\n```\n\n----------------------------------------\n\nTITLE: Running MCPEngine Container with Environment Variables (Bash)\nDESCRIPTION: This command runs the 'mcpengine:latest' Docker image as a container. It maps the host's port 8181 to the container's port 8181, runs interactively ('-it'), removes the container upon exit ('--rm'), and configures the application using environment variables ('-e'). Key parameters include HOST, SSE_PATH, DEBUG, CLIENT_ID, and CLIENT_SECRET.\nSOURCE: https://github.com/featureform/mcp-engine/blob/main/mcpengine-proxy/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm \\\n  -p 8181:8181 \\\n  -e HOST=localhost:8000 \\\n  -e SSE_PATH=/sse \\\n  -e DEBUG=false \\\n  -e CLIENT_ID=your_client_id \\\n  -e CLIENT_SECRET=your_client_secret \\\n  mcpengine:latest\n```\n\n----------------------------------------\n\nTITLE: Building the MCPEngine Docker Image (Bash)\nDESCRIPTION: This command builds a Docker image for the MCPEngine Proxy. It uses the Dockerfile present in the current directory ('.') and tags the resulting image as 'mcpengine:latest'. Requires Docker to be installed.\nSOURCE: https://github.com/featureform/mcp-engine/blob/main/mcpengine-proxy/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t mcpengine:latest .\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Environment Configuration (.env)\nDESCRIPTION: This snippet shows the content of a '.env' file used for configuring the MCPEngine service via Docker Compose. It defines environment variables like HOST, SSE_PATH, DEBUG, CLIENT_ID, and CLIENT_SECRET, which are typically read by a 'docker-compose.yml' file.\nSOURCE: https://github.com/featureform/mcp-engine/blob/main/mcpengine-proxy/README.md#_snippet_3\n\nLANGUAGE: dotenv\nCODE:\n```\nHOST=localhost:8000\nSSE_PATH=/sse\nDEBUG=false\nCLIENT_ID=your_client_id\nCLIENT_SECRET=your_client_secret\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic MCPEngine Server with a Tool and Resource in Python\nDESCRIPTION: This Python snippet demonstrates the basic setup of an MCPEngine server. It imports `MCPEngine`, initializes an instance named \"Demo\", and defines two endpoints using decorators: `add` as a callable tool that sums two integers, and `get_greeting` as a read-only resource identified by a URI template that returns a personalized greeting. Requires the `mcpengine` library.\nSOURCE: https://github.com/featureform/mcp-engine/blob/main/README.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# server.py\nfrom mcpengine import MCPEngine\n\nmcp = MCPEngine(\"Demo\")\n\n\n@mcp.tool()\ndef add(a: int, b: int) -> int:\n    return a + b\n\n\n@mcp.resource(\"greeting://{name}\")\ndef get_greeting(name: str) -> str:\n    return f\"Hello, {name}!\"\n```\n\n----------------------------------------\n\nTITLE: Checking MCPEngine Container Health (Bash)\nDESCRIPTION: This command inspects a running Docker container named 'mcpengine' and extracts its health status using the '--format' option. It relies on the container having a HEALTHCHECK instruction defined in its Dockerfile.\nSOURCE: https://github.com/featureform/mcp-engine/blob/main/mcpengine-proxy/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker inspect --format='{{.State.Health.Status}}' mcpengine\n```\n\n----------------------------------------\n\nTITLE: Viewing MCPEngine Container Logs (Bash)\nDESCRIPTION: This command displays the logs generated by the Docker container named 'mcpengine'. This is useful for monitoring the application's output and debugging issues.\nSOURCE: https://github.com/featureform/mcp-engine/blob/main/mcpengine-proxy/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker logs mcpengine\n```\n\n----------------------------------------\n\nTITLE: Viewing MCPEngine Logs with Docker Compose (Bash)\nDESCRIPTION: This command displays the aggregated logs for the service named 'mcpengine' as managed by Docker Compose. It's used when the container was started using 'docker-compose up'.\nSOURCE: https://github.com/featureform/mcp-engine/blob/main/mcpengine-proxy/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose logs mcpengine\n```\n\n----------------------------------------\n\nTITLE: Starting Smack Service with Docker Compose (Bash)\nDESCRIPTION: This command uses Docker Compose to build the necessary Docker images and start the Smack service along with its dependencies, including a PostgreSQL database. The service will be accessible on http://localhost:8000.\nSOURCE: https://github.com/featureform/mcp-engine/blob/main/examples/servers/smack/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up --build\n```\n\n----------------------------------------\n\nTITLE: Cloning Repository and Navigating to Smack Example (Bash)\nDESCRIPTION: This snippet shows the bash commands required to clone the `mcp-engine` repository from GitHub and then change the current directory to the `smack` example located within the cloned repository.\nSOURCE: https://github.com/featureform/mcp-engine/blob/main/examples/servers/smack/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/featureform/mcp-engine.git\ncd mcp-engine/examples/smack\n```\n\n----------------------------------------\n\nTITLE: Claude Desktop Configuration File Path (Bash/Path)\nDESCRIPTION: This indicates the typical file path on macOS for the Claude Desktop configuration file (`claude_desktop_config.json`). This JSON file is used to configure custom MCP servers for Claude Desktop.\nSOURCE: https://github.com/featureform/mcp-engine/blob/main/examples/servers/smack/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n~/Library/Application Support/Claude/claude_desktop_config.json\n```\n\n----------------------------------------\n\nTITLE: Cloning Repository and Starting Smack Example with Docker Compose\nDESCRIPTION: These Bash commands first clone the `mcp-engine` git repository, change the directory to the Smack example, and then use `docker-compose up --build` to build and start the Smack messaging service example. This demonstrates deploying an MCPEngine application using Docker containers.\nSOURCE: https://github.com/featureform/mcp-engine/blob/main/README.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/featureform/mcp-engine.git\ncd mcp-engine/examples/servers/smack\ndocker-compose up --build\n```\n\n----------------------------------------\n\nTITLE: Cloning the Forked Repository using Git Bash\nDESCRIPTION: This command clones the developer's forked version of the `python-sdk` repository to their local machine. Replace `YOUR-USERNAME` with the actual GitHub username. This step is part of the initial development setup after forking the main repository.\nSOURCE: https://github.com/featureform/mcp-engine/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/YOUR-USERNAME/python-sdk.git\n```\n\n----------------------------------------\n\nTITLE: Running MCPEngine Proxy Locally (Bash)\nDESCRIPTION: This command starts the MCPEngine proxy locally. The proxy listens for standard I/O (stdio) MCP requests and forwards them to the Smack service's Server-Sent Events (SSE) endpoint running at http://localhost:8000/sse. It can also handle OAuth authentication if configured.\nSOURCE: https://github.com/featureform/mcp-engine/blob/main/examples/servers/smack/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmcpengine proxy http://localhost:8000/sse\n```\n\n----------------------------------------\n\nTITLE: Forbidden Package Installation Command with uv (Bash)\nDESCRIPTION: This command `uv pip install` is explicitly forbidden for package management in this project. Developers must use `uv add` instead.\nSOURCE: https://github.com/featureform/mcp-engine/blob/main/CLAUDE.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nuv pip install\n```\n\n----------------------------------------\n\nTITLE: Forbidden Package Version Syntax (Text)\nDESCRIPTION: Using the `@latest` syntax to specify package versions is forbidden. Developers must specify concrete versions or ranges as appropriate, avoiding this potentially unstable specifier.\nSOURCE: https://github.com/featureform/mcp-engine/blob/main/CLAUDE.md#_snippet_4\n\nLANGUAGE: Text\nCODE:\n```\n@latest\n```"
  }
]