[
  {
    "owner": "soxhub",
    "repo": "openpyxl",
    "content": "TITLE: Creating and Manipulating Excel Files with Openpyxl in Python\nDESCRIPTION: This snippet demonstrates the basic usage of openpyxl to create a new Excel workbook, add data to cells, append rows, handle automatic type conversion, and save the file. It shows how to access the active worksheet, assign values directly to cells, and work with different data types including datetime objects.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/README.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom openpyxl import Workbook\nwb = Workbook()\n\n# grab the active worksheet\nws = wb.active\n\n# Data can be assigned directly to cells\nws['A1'] = 42\n\n# Rows can also be appended\nws.append([1, 2, 3])\n\n# Python types will automatically be converted\nimport datetime\nws['A2'] = datetime.datetime.now()\n\n# Save the file\nwb.save(\"sample.xlsx\")\n```\n\n----------------------------------------\n\nTITLE: Assigning values to cells\nDESCRIPTION: Code showing how to assign string and numeric values to cells after accessing them.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/tutorial.rst#2025-04-22_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n>>> c.value = 'hello, world'\n>>> print(c.value)\n'hello, world'\n\n>>> d.value = 3.14\n>>> print(d.value)\n3.14\n```\n\n----------------------------------------\n\nTITLE: Writing Large Datasets with OpenPyxl Write-Only Mode\nDESCRIPTION: Example of creating a large Excel file using write-only mode to efficiently generate 100 rows x 200 columns of data with minimal memory usage.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/optimized.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom openpyxl import Workbook\nwb = Workbook(write_only=True)\nws = wb.create_sheet()\n\n# now we'll fill it with 100 rows x 200 columns\n\nfor irow in range(100):\n    ws.append(['%d' % i for i in range(200)])\n# save the file\nwb.save('new_big_file.xlsx')\n```\n\n----------------------------------------\n\nTITLE: Saving a workbook to a file\nDESCRIPTION: Code demonstrating how to save a workbook to a file using the save method. This operation will overwrite existing files without warning.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/tutorial.rst#2025-04-22_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n>>> wb = Workbook()\n>>> wb.save('balances.xlsx')\n```\n\n----------------------------------------\n\nTITLE: Reading Large Excel Files with OpenPyxl Read-Only Mode\nDESCRIPTION: Demonstrates how to open and read large Excel files using OpenPyxl's read-only mode for memory efficiency. Shows basic file opening and cell iteration with proper cleanup.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/optimized.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom openpyxl import load_workbook\nwb = load_workbook(filename='large_file.xlsx', read_only=True)\nws = wb['big_data']\n\nfor row in ws.rows:\n    for cell in row:\n        print(cell.value)\n\n# Close the workbook after reading\nwb.close()\n```\n\n----------------------------------------\n\nTITLE: Converting Pandas DataFrame to Excel using OpenPyXL\nDESCRIPTION: Basic example of converting a Pandas DataFrame to Excel worksheet using dataframe_to_rows function. Includes index and header in the conversion process.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/pandas.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom openpyxl.utils.dataframe import dataframe_to_rows\nwb = Workbook()\nws = wb.active\n\nfor r in dataframe_to_rows(df, index=True, header=True):\n    ws.append(r)\n```\n\n----------------------------------------\n\nTITLE: Initializing Workbook and Adding Data\nDESCRIPTION: Creates a new workbook and adds tree data using OpenPyXL. Demonstrates basic workbook creation and data insertion using list of lists.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/usage.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom openpyxl import Workbook\n\nwb = Workbook()\nws = wb.active\ntreeData = [[\"Type\", \"Leaf Color\", \"Height\"], [\"Maple\", \"Red\", 549], [\"Oak\", \"Green\", 783], [\"Pine\", \"Green\", 1204]]\n```\n\n----------------------------------------\n\nTITLE: Accessing and modifying individual cells\nDESCRIPTION: Code demonstrating how to access a cell directly as a key of the worksheet or using the cell method with row and column notation.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/tutorial.rst#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> c = ws['A4']\n>>> ws['A4'] = 4\n>>> d = ws.cell(row=4, column=2, value=10)\n```\n\n----------------------------------------\n\nTITLE: Creating a Worksheet Table with OpenPyXL in Python\nDESCRIPTION: This snippet demonstrates how to create a worksheet table using OpenPyXL. It includes setting up the table data, defining the table style, and adding the table to a worksheet.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/worksheet_tables.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom openpyxl import Workbook\nfrom openpyxl.worksheet.table import Table, TableStyleInfo\n\nwb = Workbook()\nws = wb.active\n\ndata = [\n    ['Fruit', '2011', '2012', '2013', '2014'],\n    ['Apples', 3, 2, 3, 4],\n    ['Pears', 2, 5, 3, 4],\n    ['Bananas', 5, 8, 2, 4],\n    ['Oranges', 6, 3, 4, 5],\n]\n\n# add data to worksheet\nfor row in data:\n    ws.append(row)\n\ntab = Table(displayName=\"Table1\", ref=\"A1:E5\")\n\n# Add a default style with striped rows and banded columns\nstyle = TableStyleInfo(name=\"TableStyleMedium9\", showFirstColumn=False,\n                       showLastColumn=False, showRowStripes=True, showColumnStripes=True)\ntab.tableStyleInfo = style\n\nws.add_table(tab)\nwb.save(\"table.xlsx\")\n```\n\n----------------------------------------\n\nTITLE: Adding a Simple Formula in OpenPyXL\nDESCRIPTION: This snippet demonstrates how to create a workbook, add a simple SUM formula to cell A1, and save the workbook using OpenPyXL.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/simple_formulae.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom openpyxl import Workbook\nwb = Workbook()\nws = wb.active\n# add a simple formula\nws[\"A1\"] = \"=SUM(1, 1)\"\nwb.save(\"formula.xlsx\")\n```\n\n----------------------------------------\n\nTITLE: Using rows property to iterate through all rows\nDESCRIPTION: Code demonstrating how to use the rows property to iterate through all rows in a worksheet, even non-contiguous ones.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/tutorial.rst#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> ws = wb.active\n>>> ws['C9'] = 'hello world'\n>>> tuple(ws.rows)\n((<Cell Sheet.A1>, <Cell Sheet.B1>, <Cell Sheet.C1>),\n(<Cell Sheet.A2>, <Cell Sheet.B2>, <Cell Sheet.C2>),\n(<Cell Sheet.A3>, <Cell Sheet.B3>, <Cell Sheet.C3>),\n(<Cell Sheet.A4>, <Cell Sheet.B4>, <Cell Sheet.C4>),\n(<Cell Sheet.A5>, <Cell Sheet.B5>, <Cell Sheet.C5>),\n(<Cell Sheet.A6>, <Cell Sheet.B6>, <Cell Sheet.C6>),\n(<Cell Sheet.A7>, <Cell Sheet.B7>, <Cell Sheet.C7>),\n(<Cell Sheet.A8>, <Cell Sheet.B8>, <Cell Sheet.C8>),\n(<Cell Sheet.A9>, <Cell Sheet.B9>, <Cell Sheet.C9>))\n```\n\n----------------------------------------\n\nTITLE: Creating Styled Cells in Write-Only Mode\nDESCRIPTION: Demonstrates how to create cells with custom styles, fonts, and comments in write-only mode using WriteOnlyCell.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/optimized.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom openpyxl import Workbook\nwb = Workbook(write_only = True)\nws = wb.create_sheet()\nfrom openpyxl.cell import WriteOnlyCell\nfrom openpyxl.comments import Comment\nfrom openpyxl.styles import Font\ncell = WriteOnlyCell(ws, value=\"hello world\")\ncell.font = Font(name='Courier', size=36)\ncell.comment = Comment(text=\"A comment\", author=\"Author's Name\")\nws.append([cell, 3.14, None])\nwb.save('write_only_file.xlsx')\n```\n\n----------------------------------------\n\nTITLE: Initializing Default Styles in OpenPyXL\nDESCRIPTION: Demonstrates setting up default style objects including Font, PatternFill, Border, Alignment and Protection with their default values.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/styles.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom openpyxl.styles import PatternFill, Border, Side, Alignment, Protection, Font\nfont = Font(name='Calibri',\n    size=11,\n    bold=False,\n    italic=False,\n    vertAlign=None,\n    underline='none',\n    strike=False,\n    color='FF000000')\nfill = PatternFill(fill_type=None,\n    start_color='FFFFFFFF',\n    end_color='FF000000')\nborder = Border(left=Side(border_style=None, color='FF000000'),\n    right=Side(border_style=None, color='FF000000'),\n    top=Side(border_style=None, color='FF000000'),\n    bottom=Side(border_style=None, color='FF000000'),\n    diagonal=Side(border_style=None, color='FF000000'),\n    diagonal_direction=0,\n    outline=Side(border_style=None, color='FF000000'),\n    vertical=Side(border_style=None, color='FF000000'),\n    horizontal=Side(border_style=None, color='FF000000'))\nalignment=Alignment(horizontal='general',\n    vertical='bottom',\n    text_rotation=0,\n    wrap_text=False,\n    shrink_to_fit=False,\n    indent=0)\nnumber_format = 'General'\nprotection = Protection(locked=True, hidden=False)\n```\n\n----------------------------------------\n\nTITLE: Loading a workbook from a file\nDESCRIPTION: Code showing how to load an existing workbook from a file using the load_workbook function and access a specific sheet and cell value.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/tutorial.rst#2025-04-22_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n>>> from openpyxl import load_workbook\n>>> wb = load_workbook(filename = 'empty_book.xlsx')\n>>> sheet_ranges = wb['range names']\n>>> print(sheet_ranges['D18'].value)\n3\n```\n\n----------------------------------------\n\nTITLE: Using columns property to iterate through all columns\nDESCRIPTION: Code demonstrating how to use the columns property to iterate through all columns in a worksheet, returning cells in column order.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/tutorial.rst#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n>>> tuple(ws.columns)\n((<Cell Sheet.A1>,\n<Cell Sheet.A2>,\n<Cell Sheet.A3>,\n<Cell Sheet.A4>,\n<Cell Sheet.A5>,\n<Cell Sheet.A6>,\n...\n<Cell Sheet.B7>,\n<Cell Sheet.B8>,\n<Cell Sheet.B9>),\n(<Cell Sheet.C1>,\n<Cell Sheet.C2>,\n<Cell Sheet.C3>,\n<Cell Sheet.C4>,\n<Cell Sheet.C5>,\n<Cell Sheet.C6>,\n<Cell Sheet.C7>,\n<Cell Sheet.C8>,\n<Cell Sheet.C9>))\n```\n\n----------------------------------------\n\nTITLE: Inserting Image into Excel Worksheet using OpenPyXL\nDESCRIPTION: Demonstrates how to create a workbook, add an image to a worksheet, and position it relative to cells. The code shows importing required modules, creating a new workbook, loading an image, and anchoring it to a specific cell location.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/images.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom openpyxl import Workbook\nfrom openpyxl.drawing.image import Image\n\nwb = Workbook()\nws = wb.active\nws['A1'] = 'You should see three logos below'\n\n# create an image\nimg = Image('logo.png')\n\n# add to worksheet and anchor next to cells\nws.add_image(img, 'A1')\nwb.save('logo.xlsx')\n```\n\n----------------------------------------\n\nTITLE: Creating a workbook and accessing the active worksheet\nDESCRIPTION: Code to create a new workbook and access its active worksheet. A workbook is always created with at least one worksheet, accessible via the active property.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/tutorial.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> from openpyxl import Workbook\n>>> wb = Workbook()\n>>> ws = wb.active\n```\n\n----------------------------------------\n\nTITLE: Creating and Applying List Validation in OpenPyXL\nDESCRIPTION: This snippet demonstrates how to create a data validation object with list validation, set custom error and prompt messages, and apply it to specific cells and ranges in an Excel worksheet using OpenPyXL.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/validation.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom openpyxl import Workbook\nfrom openpyxl.worksheet.datavalidation import DataValidation\n\n# Create the workbook and worksheet we'll be working with\nwb = Workbook()\nws = wb.active\n\n# Create a data-validation object with list validation\ndv = DataValidation(type=\"list\", formula1='\"Dog,Cat,Bat\"', allow_blank=True)\n\n# Optionally set a custom error message\ndv.error ='Your entry is not in the list'\ndv.errorTitle = 'Invalid Entry'\n\n# Optionally set a custom prompt message\ndv.prompt = 'Please select from the list'\ndv.promptTitle = 'List Selection'\n\n# Add the data-validation object to the worksheet\nws.add_data_validation(dv)\n\n# Create some cells, and add them to the data-validation object\nc1 = ws[\"A1\"]\nc1.value = \"Dog\"\ndv.add(c1)\nc2 = ws[\"A2\"]\nc2.value = \"An invalid value\"\ndv.add(c2)\n\n# Or, apply the validation to a range of cells\ndv.add('B1:B1048576') # This is the same as for the whole of column B\n\n# Check with a cell is in the validator\n\"B4\" in dv\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Bar Charts with OpenPyxl\nDESCRIPTION: Example code for creating vertical, horizontal and stacked bar charts. The chart type can be switched between 'col' and 'bar', and overlap needs to be set to 100 for stacked charts.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/charts/bar.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nbar.py (snippet referenced but not provided in content)\n```\n\n----------------------------------------\n\nTITLE: Applying Various Conditional Formatting Rules in OpenPyXL\nDESCRIPTION: Demonstrates how to apply various conditional formatting rules to a workbook using OpenPyXL. It includes color scales, cell comparison rules, and formula-based rules.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/formatting.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom openpyxl import Workbook\nfrom openpyxl.styles import Color, PatternFill, Font, Border\nfrom openpyxl.styles.differential import DifferentialStyle\nfrom openpyxl.formatting.rule import ColorScaleRule, CellIsRule, FormulaRule\n\nwb = Workbook()\nws = wb.active\n\nredFill = PatternFill(start_color='EE1111', end_color='EE1111', fill_type='solid')\n\nws.conditional_formatting.add('A1:A10',\n            ColorScaleRule(start_type='min', start_color='AA0000',\n                          end_type='max', end_color='00AA00')\n                          )\n\nws.conditional_formatting.add('B1:B10',\n               ColorScaleRule(start_type='percentile', start_value=10, start_color='AA0000',\n                           mid_type='percentile', mid_value=50, mid_color='0000AA',\n                           end_type='percentile', end_value=90, end_color='00AA00')\n                             )\n\nws.conditional_formatting.add('C2:C10',\n            CellIsRule(operator='lessThan', formula=['C$1'], stopIfTrue=True, fill=redFill))\n\nws.conditional_formatting.add('D2:D10',\n            CellIsRule(operator='between', formula=['1','5'], stopIfTrue=True, fill=redFill))\n\nws.conditional_formatting.add('E1:E10',\n            FormulaRule(formula=['ISBLANK(E1)'], stopIfTrue=True, fill=redFill))\n\nmyFont = Font()\nmyBorder = Border()\nws.conditional_formatting.add('E1:E10',\n            FormulaRule(formula=['E1=0'], font=myFont, border=myBorder, fill=redFill))\n\nred_text = Font(color=\"9C0006\")\nred_fill = PatternFill(bgColor=\"FFC7CE\")\ndxf = DifferentialStyle(font=red_text, fill=red_fill)\nrule = Rule(type=\"containsText\", operator=\"containsText\", text=\"highlight\", dxf=dxf)\nrule.formula = ['NOT(ISERROR(SEARCH(\"highlight\",A1)))']\n```\n\n----------------------------------------\n\nTITLE: Write-Only Mode DataFrame Export\nDESCRIPTION: Optimized conversion of DataFrame to Excel using write-only mode for better memory efficiency. Includes custom cell formatting for the first row.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/pandas.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom openpyxl.cell.cell import WriteOnlyCell\nwb = Workbook(write_only=True)\nws = wb.create_sheet()\n\ncell = WriteOnlyCell(ws)\ncell.style = 'Pandas'\n\ndef format_first_row(row, cell):\n    for c in row:\n        cell.value = c\n        yield cell\n\nrows = dataframe_to_rows(df)\nfirst_row = format_first_row(next(rows), cell)\nws.append(first_row)\n\nfor row in rows:\n    row = list(row)\n    cell.value = row[0]\n    row[0] = cell\n    ws.append(row)\n\nwb.save(\"openpyxl_stream.xlsx\")\n```\n\n----------------------------------------\n\nTITLE: Enabling and Disabling Worksheet Protection in OpenPyXL\nDESCRIPTION: This code demonstrates how to enable and disable worksheet protection using different methods in OpenPyXL. It shows setting protection directly and using enable()/disable() methods.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/protection.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> ws = wb.active\n>>> ws.protection.sheet = True\n>>> ws.protection.enable()\n>>> ws.protection.disable()\n```\n\n----------------------------------------\n\nTITLE: Creating a Bar Chart with OpenPyXL in Python\nDESCRIPTION: This snippet demonstrates how to create a simple bar chart using OpenPyXL. It creates a workbook, populates data, defines a chart, adds data to the chart, and saves the result to an Excel file.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/charts/introduction.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom openpyxl import Workbook\nwb = Workbook()\nws = wb.active\nfor i in range(10):\n    ws.append([i])\n\nfrom openpyxl.chart import BarChart, Reference, Series\nvalues = Reference(ws, min_col=1, min_row=1, max_col=1, max_row=10)\nchart = BarChart()\nchart.add_data(values)\nws.add_chart(chart, \"E15\")\nwb.save(\"SampleChart.xlsx\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Conditional Formatting Rule in OpenPyXL\nDESCRIPTION: Demonstrates how to create a basic conditional formatting rule using OpenPyXL. It includes importing necessary modules, creating a differential style, and defining a rule.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/formatting.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom openpyxl.formatting import Rule\nfrom openpyxl.styles import Font, PatternFill, Border\nfrom openpyxl.styles.differential import DifferentialStyle\ndxf = DifferentialStyle(font=Font(bold=True), fill=PatternFill(start_color='EE1111', end_color='EE1111'))\nrule = Rule(type='cellIs', dxf=dxf, formula=[\"10\"])\n```\n\n----------------------------------------\n\nTITLE: Styling Merged Cells in OpenPyXL\nDESCRIPTION: Demonstrates how to apply styles to merged cells including borders, fills, fonts and alignment.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/styles.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom openpyxl.styles import Border, Side, PatternFill, Font, GradientFill, Alignment\nfrom openpyxl import Workbook\n\nwb = Workbook()\nws = wb.active\nws.merge_cells('B2:F4')\n\ntop_left_cell = ws['B2']\ntop_left_cell.value = \"My Cell\"\n\nthin = Side(border_style=\"thin\", color=\"000000\")\ndouble = Side(border_style=\"double\", color=\"ff0000\")\n\ntop_left_cell.border = Border(top=double, left=thin, right=thin, bottom=double)\ntop_left_cell.fill = PatternFill(\"solid\", fgColor=\"DDDDDD\")\ntop_left_cell.fill = fill = GradientFill(stop=(\"000000\", \"FFFFFF\"))\ntop_left_cell.font  = Font(b=True, color=\"FF0000\")\ntop_left_cell.alignment = Alignment(horizontal=\"center\", vertical=\"center\")\n\nwb.save(\"styled.xlsx\")\n```\n\n----------------------------------------\n\nTITLE: Creating Cell Range Validation in OpenPyXL\nDESCRIPTION: This snippet shows how to create a data validation rule based on a cell range in OpenPyXL, using a list of values from another sheet.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/validation.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom openpyxl.utils import quote_sheetname\ndv = DataValidation(type=\"list\",\n                    formula1=\"{0}!$B$1:$B$10\".format(quote_sheetname(sheetname))\n                    )\n```\n\n----------------------------------------\n\nTITLE: Accessing ranges of cells\nDESCRIPTION: Code showing how to access ranges of cells, specific columns, or specific rows using slicing syntax.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/tutorial.rst#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> cell_range = ws['A1':'C2']\n>>> colC = ws['C']\n>>> col_range = ws['C:D']\n>>> row10 = ws[10]\n>>> row_range = ws[5:10]\n```\n\n----------------------------------------\n\nTITLE: Appending Data to Worksheet\nDESCRIPTION: Demonstrates how to append multiple rows of data to a worksheet using a loop.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/usage.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfor row in treeData:\n    ws.append(row)\n```\n\n----------------------------------------\n\nTITLE: Accessing Tables in a Worksheet with OpenPyXL in Python\nDESCRIPTION: This snippet shows how to access tables in a worksheet using OpenPyXL. It demonstrates getting a table by name or range, iterating through all tables, and getting table names and ranges.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/worksheet_tables.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Get Table by name or range\nws.tables[\"Table1\"]\n# or\nws.tables[\"A1:D10\"]\n```\n\nLANGUAGE: python\nCODE:\n```\n# Iterate through all tables in a worksheet\nfor table in ws.tables.values():\n    print(table)\n```\n\nLANGUAGE: python\nCODE:\n```\n# Get table name and range of all tables in a worksheet\nws.tables.items()\n# [('Table1', 'A1:D10')]\n```\n\n----------------------------------------\n\nTITLE: Iterating through rows in a worksheet\nDESCRIPTION: Code showing how to use the iter_rows method to iterate through rows in a worksheet within specified boundaries.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/tutorial.rst#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> for row in ws.iter_rows(min_row=1, max_col=3, max_row=2):\n...    for cell in row:\n...        print(cell)\n<Cell Sheet1.A1>\n<Cell Sheet1.B1>\n<Cell Sheet1.C1>\n<Cell Sheet1.A2>\n<Cell Sheet1.B2>\n<Cell Sheet1.C2>\n```\n\n----------------------------------------\n\nTITLE: Converting Excel Worksheet to DataFrame - Simple\nDESCRIPTION: Basic conversion of worksheet values to Pandas DataFrame without headers or indices.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/pandas.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndf = DataFrame(ws.values)\n```\n\n----------------------------------------\n\nTITLE: Creating a ColorScale Rule in OpenPyXL\nDESCRIPTION: Shows how to create a ColorScale conditional formatting rule in OpenPyXL. It includes creating format objects, defining colors, and constructing the ColorScale and Rule objects.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/formatting.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom openpyxl.formatting.rule import ColorScale, FormatObject\nfrom openpyxl.styles import Color\nfrom openpyxl.formatting.rule import Rule\n\nfirst = FormatObject(type='min')\nlast = FormatObject(type='max')\ncolors = [Color('AA0000'), Color('00AA00')]\ncs2 = ColorScale(cfvo=[first, last], color=colors)\nmid = FormatObject(type='num', val=40)\ncolors.insert(1, Color('00AA00'))\ncs3 = ColorScale(cfvo=[first, mid, last], color=colors)\nrule = Rule(type='colorScale', colorScale=cs3)\n```\n\n----------------------------------------\n\nTITLE: Creating Rich Text with Formatted Blocks in Python using OpenPyXL\nDESCRIPTION: Demonstrates how to create a rich text string with mixed formatting using CellRichText and TextBlock objects with InlineFont styling.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/rich_text.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom openpyxl.cell.text import InlineFont\nfrom openpyxl.cell.rich_text import TextBlock, CellRichText\nrich_string1 = CellRichText(\n   'This is a test ',\n   TextBlock(InlineFont(b=True), 'xxx'),\n  'yyy'\n)\n```\n\n----------------------------------------\n\nTITLE: Applying Cell Styles in OpenPyXL\nDESCRIPTION: Shows how to apply font styles to specific cells and demonstrates that cell styles are immutable once assigned.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/styles.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom openpyxl.styles import colors\nfrom openpyxl.styles import Font, Color\nfrom openpyxl import Workbook\nwb = Workbook()\nws = wb.active\n\na1 = ws['A1']\nd4 = ws['D4']\nft = Font(color=\"FF0000\")\na1.font = ft\nd4.font = ft\n\n# If you want to change the color of a Font, you need to reassign it:\na1.font = Font(color=\"FF0000\", italic=True) # the change only affects A1\n```\n\n----------------------------------------\n\nTITLE: Converting Excel Worksheet to DataFrame - With Headers\nDESCRIPTION: Advanced conversion of worksheet to DataFrame preserving headers and indices, suitable for worksheets created by Pandas.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/pandas.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom itertools import islice\ndata = ws.values\ncols = next(data)[1:]\ndata = list(data)\nidx = [r[0] for r in data]\ndata = (islice(r, 1, None) for r in data)\ndf = DataFrame(data, index=idx, columns=cols)\n```\n\n----------------------------------------\n\nTITLE: Creating an IconSet Rule in OpenPyXL\nDESCRIPTION: Demonstrates how to create an IconSet conditional formatting rule in OpenPyXL. It includes defining format objects, creating an IconSet, and assigning it to a rule.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/formatting.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom openpyxl.formatting.rule import IconSet, FormatObject\nfrom openpyxl.formatting.rule import Rule\n\nfirst = FormatObject(type='percent', val=0)\nsecond = FormatObject(type='percent', val=33)\nthird = FormatObject(type='percent', val=67)\niconset = IconSet(iconSet='3TrafficLights1', cfvo=[first, second, third], showValue=None, percent=None, reverse=None)\nrule = Rule(type='iconSet', iconSet=iconset)\n```\n\n----------------------------------------\n\nTITLE: Accessing and Modifying Pivot Table Properties in OpenPyXL\nDESCRIPTION: This code snippet demonstrates how to load an Excel workbook, access a pivot table from a specific worksheet, and modify its cache refresh settings. It uses the OpenPyXL library to interact with the Excel file and pivot table objects.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/pivot.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom openpyxl import load_workbook\nwb = load_workbook(\"campaign.xlsx\")\nws = wb[\"Results\"]\npivot = ws._pivots[0] # any will do as they share the same cache\npivot.cache.refreshOnLoad = True\n```\n\n----------------------------------------\n\nTITLE: Accessing Global Defined Names in OpenPyXL\nDESCRIPTION: This snippet demonstrates how to access global defined names in a workbook and retrieve the cells they reference. It shows how to iterate through the destinations of a defined name.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/defined_names.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndefn = wb.defined_names[\"my_range\"]\n# the destinations attribute contains a list of ranges in the definitions\ndests = defn.destinations # returns a generator of (worksheet title, cell range) tuples\n\ncells = []\nfor title, coord in dests:\n    ws = wb[title]\n    cells.append(ws[coord])\n```\n\n----------------------------------------\n\nTITLE: Formula Translation in OpenPyXL\nDESCRIPTION: Shows how to use the Translator class to move formulas from one location to another in a worksheet. The example demonstrates translating a SUM formula one column to the right while maintaining relative references.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/formula.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom openpyxl.formula.translate import Translator\nws['F2'] = \"=SUM(B2:E2)\"\n# move the formula one colum to the right\nws['G2'] = Translator(\"=SUM(B2:E2)\", origin=\"F2\").translate_formula(\"G2\")\nws['G2'].value\n```\n\n----------------------------------------\n\nTITLE: Manipulating Tables in OpenPyXL with Python\nDESCRIPTION: This snippet demonstrates how to manipulate tables in a worksheet using OpenPyXL. It includes deleting a table and getting the number of tables in a worksheet.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/worksheet_tables.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Delete a table\ndel ws.tables[\"Table1\"]\n```\n\nLANGUAGE: python\nCODE:\n```\n# The number of tables in a worksheet\nlen(ws.tables)\n# 1\n```\n\n----------------------------------------\n\nTITLE: Adding a Comment to a Cell in OpenPyXL (Python)\nDESCRIPTION: This snippet demonstrates how to create a comment and add it to a cell in an Excel workbook using OpenPyXL. It shows how to set the comment text and author attributes.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/comments.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom openpyxl import Workbook\nfrom openpyxl.comments import Comment\nwb = Workbook()\nws = wb.active\ncomment = ws[\"A1\"].comment\ncomment = Comment('This is the comment text', 'Comment Author')\ncomment.text\ncomment.author\n```\n\n----------------------------------------\n\nTITLE: Handling Dynamic Named Ranges in OpenPyXL\nDESCRIPTION: This code snippet demonstrates how to handle dynamic named ranges in OpenPyXL, specifically for setting print areas. It shows loading a workbook, accessing a defined name, and setting it as the print area.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/defined_names.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom openpyxl import load_workbook\nwb = load_workbook(\"Example.xlsx\")\nws = wb.active\narea = ws.defined_names[\"TestArea\"] # Globally defined named ranges can be used too\nws.print_area = area.value          # value is the cell range the defined name currently covers\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Pie Chart with OpenPyXL in Python\nDESCRIPTION: This code snippet demonstrates how to create a basic pie chart using OpenPyXL. It includes data series setup and chart configuration.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/charts/pie.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: pie.py\n```\n\n----------------------------------------\n\nTITLE: Copying worksheets within a workbook\nDESCRIPTION: Code showing how to create a copy of a worksheet within the same workbook. Only cells and certain worksheet attributes are copied, not images or charts.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/tutorial.rst#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> source = wb.active\n>>> target = wb.copy_worksheet(source)\n```\n\n----------------------------------------\n\nTITLE: Creating Date and Time Validation in OpenPyXL\nDESCRIPTION: This snippet shows how to create data validation rules for dates and times in OpenPyXL.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/validation.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndv = DataValidation(type=\"date\")\n\n# or time:\ndv = DataValidation(type=\"time\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Layout Settings in OpenPyXL\nDESCRIPTION: Demonstrates how to set page orientation and paper size for worksheet printing.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/print_settings.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nwb = Workbook()\nws = wb.active\n\nws.page_setup.orientation = ws.ORIENTATION_LANDSCAPE\nws.page_setup.paperSize = ws.PAPERSIZE_A5\n```\n\n----------------------------------------\n\nTITLE: Creating 2D Line Charts with OpenPyXL in Python\nDESCRIPTION: This code snippet demonstrates how to create different types of 2D line charts (standard, stacked, and percentStacked) using OpenPyXL. It sets up data, creates chart objects, and adds them to a worksheet.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/charts/line.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom openpyxl import Workbook\nfrom openpyxl.chart import (\n    LineChart,\n    Reference,\n)\nfrom openpyxl.chart.axis import DateAxis\n\nwb = Workbook()\nws = wb.active\n\nrows = [\n    ['Date', 'Batch 1', 'Batch 2', 'Batch 3'],\n    ['2011-01-01', 40, 30, 25],\n    ['2011-01-02', 40, 25, 30],\n    ['2011-01-03', 50, 30, 45],\n    ['2011-01-04', 30, 25, 40],\n    ['2011-01-05', 25, 35, 30],\n    ['2011-01-06', 20, 40, 35],\n]\n\nfor row in rows:\n    ws.append(row)\n\nc1 = LineChart()\nc1.title = \"Line Chart\"\nc1.style = 13\nc1.y_axis.title = 'Size'\nc1.x_axis.title = 'Test Number'\n\ndata = Reference(ws, min_col=2, min_row=1, max_col=4, max_row=7)\nc1.add_data(data, titles_from_data=True)\n\n# Style the lines\ns1 = c1.series[0]\ns1.marker.symbol = \"triangle\"\ns1.marker.graphicalProperties.solidFill = \"FF0000\" # Marker filling\ns1.marker.graphicalProperties.line.solidFill = \"FF0000\" # Marker outline\n\ns1.graphicalProperties.line.noFill = True\n\ns2 = c1.series[1]\ns2.graphicalProperties.line.solidFill = \"00AAAA\"\ns2.graphicalProperties.line.dashStyle = \"sysDot\"\ns2.graphicalProperties.line.width = 100050 # width in EMUs\n\ns2 = c1.series[2]\ns2.smooth = True # Make the line smooth\n\nws.add_chart(c1, \"A10\")\n\nfrom copy import deepcopy\n\nc2 = deepcopy(c1)\nc2.style = 12\nc2.title = \"Stacked Line Chart\"\nc2.grouping = \"stacked\"\nws.add_chart(c2, \"G10\")\n\nc3 = deepcopy(c1)\nc3.title = \"Percent Stacked Line Chart\"\nc3.grouping = \"percentStacked\"\nws.add_chart(c3, \"A27\")\n\nfrom openpyxl.chart.axis import DateAxis, CategoryAxis\n\nc4 = LineChart()\nc4.title = \"Date Axis\"\nc4.style = 13\nc4.y_axis.title = \"Size\"\nc4.y_axis.crossAx = 500\nc4.x_axis = DateAxis(crossAx=100)\nc4.x_axis.number_format = 'd-mmm'\nc4.x_axis.majorTimeUnit = \"days\"\nc4.x_axis.title = \"Date\"\n\nc4.add_data(data, titles_from_data=True)\ndates = Reference(ws, min_col=1, min_row=2, max_row=7)\nc4.set_categories(dates)\n\nws.add_chart(c4, \"G27\")\n\nwb.save(\"line.xlsx\")\n```\n\n----------------------------------------\n\nTITLE: Creating Basic CustomFilters in OpenPyXL\nDESCRIPTION: Creates custom filters to filter values less than 10 and greater than 90, and shows how to apply them to a specific column in a filter range.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/filters.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom openpyxl.worksheet.filters import CustomFilter, CustomFilters\nflt1 = CustomFilter(operator=\"lessThan\", val=10)\nflt2 = CustomFilter(operator=\"greaterThan\", val=90)\n\ncfs = CustomFilters(customFilter=[flt1, flt2])\ncol = FilterColumn(colId=2, customFilters=cfs) # apply to **third** column in the range\nfilters.filter.append(col)\n```\n\n----------------------------------------\n\nTITLE: Configuring Worksheet Views in OpenPyXL\nDESCRIPTION: This code snippet shows how to set worksheet view properties such as zoom scale, formula visibility, and tab selection using OpenPyXL's sheet_view attribute.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/worksheet_properties.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom openpyxl.workbook import Workbook\n\nwb = Workbook()\nws = wb.active\n\nws.sheet_view.zoomScale = 85 # Sets 85% zoom\nws.sheet_view.showFormulas = True\nws.sheet_view.tabSelected = True\n```\n\n----------------------------------------\n\nTITLE: Creating 2D Area Charts with OpenPyXL in Python\nDESCRIPTION: This code snippet demonstrates how to create 2D area charts using OpenPyXL. It shows different grouping options including standard, stacked, and percentStacked. The chart is then added to a worksheet and saved to an Excel file.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/charts/area.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom openpyxl import Workbook\nfrom openpyxl.chart import AreaChart, Reference, Series\n\nwb = Workbook()\nws = wb.active\n\nrows = [\n    ['Number', 'Batch 1', 'Batch 2'],\n    [2, 40, 30],\n    [3, 40, 25],\n    [4, 50, 30],\n    [5, 30, 10],\n    [6, 25, 5],\n    [7, 50, 10],\n]\n\nfor row in rows:\n    ws.append(row)\n\ncharttypes = ['standard', 'stacked', 'percentStacked']\n\nfor i, t in enumerate(charttypes, 1):\n    chart = AreaChart()\n    chart.title = f\"{t.capitalize()} Area Chart\"\n    chart.style = 13\n    chart.x_axis.title = 'Number'\n    chart.y_axis.title = 'Percentage'\n\n    cats = Reference(ws, min_col=1, min_row=1, max_row=7)\n    data = Reference(ws, min_col=2, max_col=3, min_row=1, max_row=7)\n    chart.add_data(data, titles_from_data=True)\n    chart.set_categories(cats)\n\n    if t == 'percentStacked':\n        chart.grouping = \"percentStacked\"\n    elif t == 'stacked':\n        chart.grouping = \"stacked\"\n\n    ws.add_chart(chart, f\"A{10+i*15}\")\n\nwb.save(\"area.xlsx\")\n```\n\n----------------------------------------\n\nTITLE: Setting Worksheet Properties and Page Setup in OpenPyXL\nDESCRIPTION: This snippet demonstrates how to set various worksheet properties, including tab color, filter mode, and page setup properties. It also shows how to modify outline properties.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/worksheet_properties.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom openpyxl.workbook import Workbook\nfrom openpyxl.worksheet.properties import WorksheetProperties, PageSetupProperties\n\nwb = Workbook()\nws = wb.active\n\nwsprops = ws.sheet_properties\nwsprops.tabColor = \"1072BA\"\nwsprops.filterMode = False\nwsprops.pageSetUpPr = PageSetupProperties(fitToPage=True, autoPageBreaks=False)\nwsprops.outlinePr.summaryBelow = False\nwsprops.outlinePr.applyStyles = True\nwsprops.pageSetUpPr.autoPageBreaks = True\n```\n\n----------------------------------------\n\nTITLE: Creating DateGroupItem Filters in OpenPyXL\nDESCRIPTION: Shows how to create date filters to filter by specific datetime criteria such as month or year, and how to apply multiple date filters to a column.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/filters.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom openpyxl.worksheet.filters import DateGroupItem\ndf1 = DateGroupItem(month=3, dateTimeGrouping=\"month\")\ncol = FilterColumn(colId=1) # second column\ncol.filters.dateGroupItem.append(df1)\n\ndf2 = DateGroupItem(year=1984, dateTimeGrouping=\"year\") # add another element\ncol.filters.dateGroupItem.append(df2)\nfilters.filter.append(col)\n```\n\n----------------------------------------\n\nTITLE: Setting ISO Dates Format in OpenPyXL Workbook\nDESCRIPTION: Demonstrates how to configure an OpenPyXL workbook to store dates and times in ISO 8601 format. This provides more explicit date/time representation compared to Excel's numeric format.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/datetime.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport openpyxl\nwb = openpyxl.Workbook()\nwb.iso_dates = True\n```\n\n----------------------------------------\n\nTITLE: Creating a DataBar Rule in OpenPyXL\nDESCRIPTION: Shows how to create a DataBar conditional formatting rule in OpenPyXL. It includes defining format objects, creating a DataBar, and assigning it to a rule.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/formatting.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom openpyxl.formatting.rule import DataBar, FormatObject\nfrom openpyxl.formatting.rule import Rule\n\nfirst = FormatObject(type='min')\nsecond = FormatObject(type='max')\ndata_bar = DataBar(cfvo=[first, second], color=\"638EC6\", showValue=None, minLength=None, maxLength=None)\nrule = Rule(type='dataBar', dataBar=data_bar)\n```\n\n----------------------------------------\n\nTITLE: Creating Decimal Number Validation in OpenPyXL\nDESCRIPTION: This snippet demonstrates how to create data validation rules for decimal numbers in OpenPyXL. It includes examples for any decimal number and a decimal number between 0 and 1.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/validation.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndv = DataValidation(type=\"decimal\")\n\n# Any decimal number between 0 and 1:\ndv = DataValidation(type=\"decimal\",\n                    operator=\"between\",\n                    formula1=0,\n                    formula2=1)\n```\n\n----------------------------------------\n\nTITLE: Setting Workbook Protection Password in OpenPyXL\nDESCRIPTION: This snippet demonstrates how to set a password to protect the structure of a workbook using OpenPyXL. It sets the workbook password and enables structure locking.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/protection.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> wb.security.workbookPassword = '...'\n>>> wb.security.lockStructure = True\n```\n\n----------------------------------------\n\nTITLE: Formatting Entire Rows Based on Conditions in OpenPyXL\nDESCRIPTION: Shows how to apply conditional formatting to entire rows in OpenPyXL based on a condition. It uses an expression rule with a formula to identify rows meeting the condition.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/formatting.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nws.append(['Software', 'Developer', 'Version'])\nws.append(['Excel', 'Microsoft', '2016'])\nws.append(['openpyxl', 'Open source', '2.6'])\nws.append(['OpenOffice', 'Apache', '4.1.4'])\nws.append(['Word', 'Microsoft', '2010'])\n\nred_fill = PatternFill(bgColor=\"FFC7CE\")\ndxf = DifferentialStyle(fill=red_fill)\nr = Rule(type=\"expression\", dxf=dxf, stopIfTrue=True)\nr.formula = ['$A2=\"Microsoft\"']\nws.conditional_formatting.add(\"A1:C10\", r)\n```\n\n----------------------------------------\n\nTITLE: Saving a workbook to a stream\nDESCRIPTION: Code demonstrating how to save a workbook to a stream using a NamedTemporaryFile, which is useful for web applications.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/tutorial.rst#2025-04-22_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n>>> from tempfile import NamedTemporaryFile\n>>> from openpyxl import Workbook\n>>> wb = Workbook()\n>>> with NamedTemporaryFile() as tmp:\n            wb.save(tmp.name)\n            tmp.seek(0)\n            stream = tmp.read()\n```\n\n----------------------------------------\n\nTITLE: Generating Bubble Chart with Multiple Series using OpenPyXL in Python\nDESCRIPTION: This code snippet demonstrates how to create a bubble chart with two series using OpenPyXL. It sets up the chart data, creates a BubbleChart object, adds the data series, and applies styling to the chart.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/charts/bubble.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom openpyxl import Workbook\nfrom openpyxl.chart import BubbleChart, Series, Reference\n\nwb = Workbook()\nws = wb.active\n\nrows = [\n    (\"Number of Products\", \"Sales in USD\", \"Market share\"),\n    (14, 12200, 15),\n    (20, 60000, 33),\n    (18, 24400, 10),\n    (22, 32000, 42),\n    (),\n    (12, 8200, 18),\n    (15, 50000, 30),\n    (19, 22400, 15),\n    (25, 25000, 50),\n]\n\nfor row in rows:\n    ws.append(row)\n\nchart = BubbleChart()\nchart.style = 18 # use a preset style\n\n# add the first series of data\nxvalues = Reference(ws, min_col=1, min_row=2, max_row=5)\nyvalues = Reference(ws, min_col=2, min_row=2, max_row=5)\nsize = Reference(ws, min_col=3, min_row=2, max_row=5)\nseries = Series(values=yvalues, xvalues=xvalues, zvalues=size, title=\"2013\")\nchart.series.append(series)\n\n# add the second series of data\nxvalues = Reference(ws, min_col=1, min_row=7, max_row=10)\nyvalues = Reference(ws, min_col=2, min_row=7, max_row=10)\nsize = Reference(ws, min_col=3, min_row=7, max_row=10)\nseries = Series(values=yvalues, xvalues=xvalues, zvalues=size, title=\"2014\")\nchart.series.append(series)\n\n# place the chart on the sheet\nws.add_chart(chart, \"E1\")\n\nwb.save(\"bubble.xlsx\")\n```\n\n----------------------------------------\n\nTITLE: Accessing cell values with values property\nDESCRIPTION: Code showing how to use the values property to iterate over all rows in a worksheet and access just the cell values instead of Cell objects.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/tutorial.rst#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfor row in ws.values:\n   for value in row:\n     print(value)\n```\n\n----------------------------------------\n\nTITLE: Creating an Array Formula in OpenPyXL\nDESCRIPTION: This example demonstrates how to create an array formula that applies to a range of cells (E2:E11) using the ArrayFormula class in OpenPyXL.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/simple_formulae.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom openpyxl import Workbook\nfrom openpyxl.worksheet.formula import ArrayFormula\n\nwb = Workbook()\nws = wb.active\nws[\"E2\"] = ArrayFormula(\"E2:E11\", \"=SUM(C2:C11*D2:D11)\")\n```\n\n----------------------------------------\n\nTITLE: Checking Formula Availability in OpenPyXL\nDESCRIPTION: This code shows how to check if a specific formula name is available in OpenPyXL using the FORMULAE utility.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/simple_formulae.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom openpyxl.utils import FORMULAE\n\"HEX2DEC\" in FORMULAE\n```\n\n----------------------------------------\n\nTITLE: Getting worksheet names and iterating through worksheets\nDESCRIPTION: Code showing how to view all worksheet names in a workbook and how to iterate through all worksheets of a workbook.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/tutorial.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> print(wb.sheetnames)\n['Sheet2', 'New Title', 'Sheet1']\n\n>>> for sheet in wb:\n...     print(sheet.title)\n```\n\n----------------------------------------\n\nTITLE: Creating Scatter Charts in OpenPyXL\nDESCRIPTION: Example code demonstrating how to create a scatter chart with a reference to scatter.py. The documentation notes that while the specification mentions different scatter chart types ('line', 'lineMarker', 'marker', 'smooth', 'smoothMarker'), these are just shortcuts for other settings and series styles should be set manually for consistency.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/charts/scatter.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. literalinclude:: scatter.py\n\n\n.. image:: scatter.png\n   :alt: \"Sample scatter chart\"\n```\n\n----------------------------------------\n\nTITLE: Creating Colored Rich Text in OpenPyXL\nDESCRIPTION: Demonstrates how to create rich text with colored text segments using InlineFont with color property.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/rich_text.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nred = InlineFont(color='00FF0000')\nrich_string1 = CellRichText(['When the color ', TextBlock(red, 'red'), ' is used, you can expect ', TextBlock(red, 'danger')])\n```\n\n----------------------------------------\n\nTITLE: Creating Global Defined Names in OpenPyXL\nDESCRIPTION: This code demonstrates how to create a global defined name in OpenPyXL. It includes importing necessary modules, creating a workbook and worksheet, and defining a global range.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/defined_names.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom openpyxl import Workbook\nfrom openpyxl.workbook.defined_name import DefinedName\nfrom openpyxl.utils import quote_sheetname, absolute_coordinate\nwb = Workbook()\nws = wb.active\n# make sure sheetnames and cell references are quoted correctly\nref =  \"{quote_sheetname(ws.title)}!{absolute_coordinate('A1:A5')}\"\n\ndefn = DefinedName(\"global_range\", attr_text=ref)\nwb.defined_names[\"global_range\"] = defn\n\n# key and `name` must be the same, the `.add()` method makes this easy\nwb.defined_names.add(new_range)\n```\n\n----------------------------------------\n\nTITLE: Creating Bar Chart\nDESCRIPTION: Sets up a bar chart with basic properties including titles and axis labels.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/usage.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom openpyxl.chart import BarChart, Series, Reference\n\nchart = BarChart()\nchart.type = \"col\"\nchart.title = \"Tree Height\"\nchart.y_axis.title = 'Height (cm)'\nchart.x_axis.title = 'Tree Type'\nchart.legend = None\n```\n\n----------------------------------------\n\nTITLE: Changing Axis Orientation in openpyxl Charts (Python)\nDESCRIPTION: This snippet demonstrates how to change the orientation of chart axes in openpyxl. It creates multiple scatter charts with different combinations of normal and reversed axis orientations for both x and y axes.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/charts/limits_and_scaling.rst#2025-04-22_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom openpyxl import Workbook\nfrom openpyxl.chart import ScatterChart, Reference, Series\n\nwb = Workbook()\nws = wb.active\n\nfor i in range(1, 15):\n    ws.append([i, i])\n\n# Create charts with different axis orientations\ncharts = [\n    (ScatterChart(), 'C1', 'Normal'),\n    (ScatterChart(), 'J1', 'X reversed'),\n    (ScatterChart(), 'C15', 'Y reversed'),\n    (ScatterChart(), 'J15', 'Both reversed')\n]\n\nfor chart, anchor, title in charts:\n    chart.title = title\n    chart.x_axis.title = 'x'\n    chart.y_axis.title = 'y'\n    chart.width = 15\n    chart.height = 10\n\n    x = Reference(ws, min_col=1, min_row=1, max_row=14)\n    y = Reference(ws, min_col=2, min_row=1, max_row=14)\n    series = Series(y, x)\n    chart.series.append(series)\n\n    if 'X reversed' in title:\n        chart.x_axis.scaling.orientation = 'maxMin'\n    if 'Y reversed' in title:\n        chart.y_axis.scaling.orientation = 'maxMin'\n\n    ws.add_chart(chart, anchor)\n\nwb.save('orientation.xlsx')\n```\n\n----------------------------------------\n\nTITLE: Setting Worksheet Protection Password in OpenPyXL\nDESCRIPTION: This snippet shows how to set a password for worksheet protection in OpenPyXL. When a password is set, users must provide it to disable or modify the configured protections.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/protection.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> ws = wb.active\n>>> ws.protection.password = '...'\n```\n\n----------------------------------------\n\nTITLE: Creating Named Styles in OpenPyXL\nDESCRIPTION: Shows how to create and apply named styles that can be reused across multiple cells.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/styles.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom openpyxl.styles import NamedStyle, Font, Border, Side\nhighlight = NamedStyle(name=\"highlight\")\nhighlight.font = Font(bold=True, size=20)\nbd = Side(style='thick', color=\"000000\")\nhighlight.border = Border(left=bd, top=bd, right=bd, bottom=bd)\n\nwb.add_named_style(highlight)\n\nws['A1'].style = highlight\nws['D5'].style = 'highlight'\n```\n\n----------------------------------------\n\nTITLE: Creating Worksheet-Specific Defined Names in OpenPyXL\nDESCRIPTION: This snippet illustrates how to create a defined name that is specific to a particular worksheet in OpenPyXL. It includes setting the worksheet title and creating a local named range.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/defined_names.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# create a local named range (only valid for a specific sheet)\nws = wb[\"Sheet\"]\nws.title = \"My Sheet\"\n# make sure sheetnames  and cell referencesare quoted correctly\nref = f\"{quote_sheetname(ws.title)}!{absolute_coordinate('A6')}\"\n\ndefn = DefinedName(\"private_range\", attr_text=ref)\nws.defined_names.add(defn)\nprint(ws.defined_names[\"private_range\"].attr_text)\n```\n\n----------------------------------------\n\nTITLE: Setting Print Options in OpenPyXL\nDESCRIPTION: Demonstrates how to set basic print options like horizontal and vertical centering of content on the page.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/print_settings.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom openpyxl.workbook import Workbook\n\nwb = Workbook()\nws = wb.active\n\nws.print_options.horizontalCentered = True\nws.print_options.verticalCentered = True\n```\n\n----------------------------------------\n\nTITLE: Creating NumberFilters in OpenPyXL\nDESCRIPTION: Demonstrates the difference between CustomFilter and NumberFilter, showing how NumberFilter explicitly handles numerical values.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/filters.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom openpyxl.worksheet.filters import NumberFilter, CustomerFilter\nflt1 = CustomFilter(operator=\"lessThan\", val=10)\nflt1.val == \"10\"\nflt2 = NumberFilter(operator=\"lessThan\", val=10)\nflt2.val == 10.0\n```\n\n----------------------------------------\n\nTITLE: Creating Whole Number Validation in OpenPyXL\nDESCRIPTION: This snippet shows how to create a data validation rule for whole numbers in OpenPyXL. It includes an example for any whole number and a whole number above 100.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/validation.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndv = DataValidation(type=\"whole\")\n\n# Any whole number above 100:\ndv = DataValidation(type=\"whole\",\n                    operator=\"greaterThan\",\n                    formula1=100)\n```\n\n----------------------------------------\n\nTITLE: Iterating through columns in a worksheet\nDESCRIPTION: Code showing how to use the iter_cols method to iterate through columns in a worksheet within specified boundaries.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/tutorial.rst#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> for col in ws.iter_cols(min_row=1, max_col=3, max_row=2):\n...     for cell in col:\n...         print(cell)\n<Cell Sheet1.A1>\n<Cell Sheet1.A2>\n<Cell Sheet1.B1>\n<Cell Sheet1.B2>\n<Cell Sheet1.C1>\n<Cell Sheet1.C2>\n```\n\n----------------------------------------\n\nTITLE: Creating 3D Bar Charts with OpenPyxl\nDESCRIPTION: Example code for creating three-dimensional bar charts using OpenPyxl.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/charts/bar.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nbar3d.py (snippet referenced but not provided in content)\n```\n\n----------------------------------------\n\nTITLE: Creating Text Length Validation in OpenPyXL\nDESCRIPTION: This snippet demonstrates how to create a data validation rule for text length in OpenPyXL, limiting the string to at most 15 characters.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/validation.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndv = DataValidation(type=\"textLength\",\n                    operator=\"lessThanOrEqual\"),\n                    formula1=15)\n```\n\n----------------------------------------\n\nTITLE: Assigning Comments to Multiple Cells in OpenPyXL (Python)\nDESCRIPTION: This example shows how OpenPyXL automatically creates copies of comments when assigning the same comment to multiple cells. It demonstrates that the comments are distinct objects for each cell.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/comments.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom openpyxl import Workbook\nfrom openpyxl.comments import Comment\nwb=Workbook()\nws=wb.active\ncomment = Comment(\"Text\", \"Author\")\nws[\"A1\"].comment = comment\nws[\"B2\"].comment = comment\nws[\"A1\"].comment is comment\nws[\"B2\"].comment is comment\n```\n\n----------------------------------------\n\nTITLE: Accessing Worksheet-Specific Defined Names in OpenPyXL\nDESCRIPTION: This snippet shows how to access defined names that are specific to a particular worksheet in OpenPyXL.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/defined_names.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nws = wb[\"Sheet\"]\ndefn = ws.defined_names[\"private_range\"]\n```\n\n----------------------------------------\n\nTITLE: Using values_only parameter for cell iterations\nDESCRIPTION: Code showing how to use the values_only parameter with iter_rows to return just the cell values instead of Cell objects.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/tutorial.rst#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n>>> for row in ws.iter_rows(min_row=1, max_col=3, max_row=2, values_only=True):\n...   print(row)\n\n(None, None, None)\n(None, None, None)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Validation Rule in OpenPyXL\nDESCRIPTION: This snippet demonstrates how to create a custom data validation rule in OpenPyXL using a formula.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/validation.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndv = DataValidation(type=\"custom\",\n                    formula1\"=SOMEFORMULA\")\n```\n\n----------------------------------------\n\nTITLE: Complex Chart Formatting using XML and OpenPyXL\nDESCRIPTION: Demonstrates how to apply complex formatting to chart data labels using XML. The example shows formatting a specific data point with custom text properties and positioning.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/charts/graphical.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<txPr>\n  <a:bodyPr wrap=\"square\" lIns=\"38100\" tIns=\"19050\" rIns=\"38100\" bIns=\"19050\" anchor=\"ctr\" xmlns:a=\"http://schemas.openxmlformats.org/drawingml/2006/main\">\n    <a:spAutoFit />\n  </a:bodyPr>\n  <a:lstStyle xmlns:a=\"http://schemas.openxmlformats.org/drawingml/2006/main\" />\n  <a:p xmlns:a=\"http://schemas.openxmlformats.org/drawingml/2006/main\">\n    <a:pPr>\n      <a:defRPr>\n        <a:solidFill>\n          <a:srgbClr val=\"0070C0\" />\n        </a:solidFill>\n      </a:defRPr>\n    </a:pPr>\n    <a:endParaRPr lang=\"de-DE\" />\n  </a:p>\n</txPr>\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom openpyxl.chart.text import RichText\nfrom openpyxl.xml.functions import fromstring\n\nxml = fromstring(txt)\ntext_props = RichText.from_tree(xml)\n\nhighlight = chart.series[2]\nhighlight.graphicalProperties.line.prstDash = \"solid\"\nhighlight.graphicalProperties.ln.solidFill = \"0070C0\"\nhighlight.graphicalProperties.line.width = 40000\nhighlight.dLbls = DataLabelList()\nhighlight = DataLabel(idx=3, showSerName=True, dLblPos=\"b\", txPr=text_props)\nhighlight.dLbls.dLbl.append(label)\n```\n\n----------------------------------------\n\nTITLE: Changing worksheet title and accessing by name\nDESCRIPTION: Code demonstrating how to change a worksheet's title and then access it using the new title as a key of the workbook.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/tutorial.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nws.title = \"New Title\"\n>>> ws3 = wb[\"New Title\"]\n```\n\n----------------------------------------\n\nTITLE: Styling DataFrame Export to Excel\nDESCRIPTION: Converts DataFrame to Excel with custom styling applied to header and index cells using the 'Pandas' style.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/pandas.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwb = Workbook()\nws = wb.active\n\nfor r in dataframe_to_rows(df, index=True, header=True):\n    ws.append(r)\n\nfor cell in ws['A'] + ws[1]:\n    cell.style = 'Pandas'\n\nwb.save(\"pandas_openpyxl.xlsx\")\n```\n\n----------------------------------------\n\nTITLE: Configuring InlineFont Properties in OpenPyXL\nDESCRIPTION: Shows how to create an InlineFont object with various formatting properties like font name, size, bold, italics, and other text attributes.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/rich_text.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ninline_font = InlineFont(rFont='Calibri', # Font name\n                         sz=22,           # in 1/144 in. (1/2 point) units, must be integer\n                         charset=None,    # character set (0 to 255), less required with UTF-8\n                         family=None,     # Font family\n                         b=True,          # Bold (True/False)\n                         i=None,          # Italics (True/False)\n                         strike=None,     # strikethrough\n                         outline=None,\n                         shadow=None,\n                         condense=None,\n                         extend=None,\n                         color=None,\n                         u=None,\n                         vertAlign=None,\n                         scheme=None,\n                         )\n```\n\n----------------------------------------\n\nTITLE: Generating a 3D Pie Chart with OpenPyXL in Python\nDESCRIPTION: This code snippet shows how to create a 3D pie chart using OpenPyXL. It includes the necessary configurations to add a 3D effect to the chart.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/charts/pie.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: pie3D.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Headers with Formatting in OpenPyXL\nDESCRIPTION: Shows how to set up formatted headers with custom text, font, size, and color. Includes page number and total pages placeholders.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/print_settings.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom openpyxl.workbook import Workbook\n\nwb = Workbook()\nws = wb.active\n\nws.oddHeader.left.text = \"Page &[Page] of &N\"\nws.oddHeader.left.size = 14\nws.oddHeader.left.font = \"Tahoma,Bold\"\nws.oddHeader.left.color = \"CC3366\"\n```\n\n----------------------------------------\n\nTITLE: Applying Manual Layout to Legend in openpyxl\nDESCRIPTION: This example demonstrates how to apply a manual layout to the legend of a chart. It creates a new ManualLayout instance and assigns it to the legend's layout property.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/charts/chart_layout.rst#2025-04-22_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nlegend.layout = ManualLayout()\n```\n\n----------------------------------------\n\nTITLE: Creating Grouped Columns and Rows (Outline) in OpenPyXL\nDESCRIPTION: This snippet demonstrates how to create grouped (outlined) columns and rows in an Excel worksheet using OpenPyXL. It groups columns A to D and rows 1 to 10, setting them as hidden.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/worksheet_properties.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport openpyxl\nwb = openpyxl.Workbook()\nws = wb.create_sheet()\nws.column_dimensions.group('A','D', hidden=True)\nws.row_dimensions.group(1,10, hidden=True)\nwb.save('group.xlsx')\n```\n\n----------------------------------------\n\nTITLE: Setting Print Titles in OpenPyXL\nDESCRIPTION: Demonstrates how to set print titles that will repeat on each printed page, including column and row titles.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/print_settings.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom openpyxl.workbook import Workbook\n\nwb = Workbook()\nws = wb.active\n\nws.print_title_cols = 'A:B' # the first two cols\nws.print_title_rows = '1:1' # the first row\n```\n\n----------------------------------------\n\nTITLE: DataValidation Alias Example\nDESCRIPTION: Shows the use of hide_drop_down alias for showDropDown in DataValidation to match Excel's behavior.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/changes.rst#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nDataValidation(hide_drop_down=True)\n```\n\n----------------------------------------\n\nTITLE: Assigning Rich Text to Worksheet Cells in OpenPyXL\nDESCRIPTION: Shows how to create a workbook and assign rich text objects to worksheet cells.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/rich_text.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom openpyxl import Workbook\nwb = Workbook()\nws = wb.active\nws['A1'] = rich_string1\nws['A2'] = 'Simple string'\n```\n\n----------------------------------------\n\nTITLE: Creating Radar Charts with openpyxl in Python\nDESCRIPTION: Example code showing how to create both standard and filled radar charts using openpyxl. The snippet references a radar.py file that demonstrates the implementation but the actual code is not provided in the excerpt.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/charts/radar.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: radar.py\n```\n\n----------------------------------------\n\nTITLE: Formatting Cell Fonts\nDESCRIPTION: Shows how to apply bold formatting to header cells using Font styling.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/usage.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom openpyxl.styles import Font\n\nft = Font(bold=True)\nfor row in ws[\"A1:C1\"]:\n    for cell in row:\n        cell.font = ft\n```\n\n----------------------------------------\n\nTITLE: Combining CustomFilters with AND Logic\nDESCRIPTION: Shows how to combine CustomFilters using AND logic instead of the default OR logic.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/filters.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncfs.and_ = True\n```\n\n----------------------------------------\n\nTITLE: Defining Print Area in OpenPyXL\nDESCRIPTION: Shows how to specify a specific range of cells as the print area for the worksheet.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/print_settings.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom openpyxl.workbook import Workbook\n\nwb = Workbook()\nws = wb.active\n\nws.print_area = 'A1:F10'\n```\n\n----------------------------------------\n\nTITLE: Gauge Chart Implementation with OpenPyXL\nDESCRIPTION: Creates a gauge chart by combining a doughnut chart with four segments (three colored sections and one invisible) and a pie chart with three segments (two invisible and one visible acting as the needle). Uses graphical properties of data points to achieve the gauge effect.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/charts/gauge.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom openpyxl import Workbook\nfrom openpyxl.chart import DoughnutChart, PieChart, Reference, Series\n\nwb = Workbook()\nws = wb.active\n\n# Add data\ndata = [\n    ['Donut', 'Pie'],\n    [25, 2],\n    [25, 96],\n    [25, 2],\n    [25],\n]\n\nfor row in data:\n    ws.append(row)\n\n# First chart is a donut chart\ndonut = DoughnutChart()\ndonut.title = \"Gauge Chart\"\n\nlabels = Reference(ws, min_col=1, min_row=2, max_row=5)\ndata = Reference(ws, min_col=1, min_row=1, max_row=5)\nseries = Series(data, labels)\ndonut.series = [series]\ndonut.style = 26\n\n# Second chart is a pie chart\npie = PieChart()\ndata = Reference(ws, min_col=2, min_row=1, max_row=4)\nseries = Series(data, labels)\npie.series = [series]\n\n# Set properties of the donut chart data points\nseries = donut.series[0]\npt = series.data_points[3]\npt.graphicalProperties.noFill = True # the last quarter is invisible\n\n# Set properties of the pie chart data points\nseries = pie.series[0]\npt = series.data_points[0]\npt.graphicalProperties.noFill = True # the first slice is invisible\npt = series.data_points[2]\npt.graphicalProperties.noFill = True # the last slice is invisible\n\n# Place and size the charts\npie.width = 1.5\npie.height = 1.5\ndonut.width = 1.5\ndonut.height = 1.5\n\nws.add_chart(donut)\nws.add_chart(pie, \"E15\")\n\nwb.save(\"gauge.xlsx\")\n```\n\n----------------------------------------\n\nTITLE: Creating Mixed Size Rich Text in OpenPyXL\nDESCRIPTION: Shows how to create rich text with varying font sizes using predefined InlineFont objects and TextBlocks.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/rich_text.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nbig = InlineFont(sz=\"30.0\")\nmedium = InlineFont(sz=\"20.0\")\nsmall = InlineFont(sz=\"10.0\")\nbold = InlineFont(b=True)\nb = TextBlock\nrich_string2 = CellRichText(\n      b(big, 'M'),\n      b(medium, 'i'),\n      b(small, 'x'),\n      b(medium, 'e'),\n      b(big, 'd')\n)\n```\n\n----------------------------------------\n\nTITLE: Converting Units for Comment Dimensions in OpenPyXL (Python)\nDESCRIPTION: This example demonstrates how to use the OpenPyXL units module to convert measurements (such as points) to pixels when setting comment dimensions. It shows the conversion process and setting the dimensions on a comment.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/comments.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom openpyxl import Workbook\nfrom openpyxl.comments import Comment\nfrom openpyxl.utils import units\n\nwb=Workbook()\nws=wb.active\n\ncomment = Comment(\"Text\", \"Author\")\ncomment.width = units.points_to_pixels(300)\ncomment.height = units.points_to_pixels(50)\n\nws[\"A1\"].comment = comment\n```\n\n----------------------------------------\n\nTITLE: Creating StringFilters in OpenPyXL\nDESCRIPTION: Demonstrates how to create a StringFilter with the contains operator, and how to apply it as an exclusion filter.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/filters.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom openpyxl.worksheet.filters import StringFilter\nfil = StringFilter(\"contains\", \"xml\", exclude=True)\n```\n\n----------------------------------------\n\nTITLE: Setting Axis Minima and Maxima in openpyxl Charts (Python)\nDESCRIPTION: This snippet demonstrates how to set manual minimum and maximum values for chart axes in openpyxl. It creates a scatter chart and sets specific limits for both x and y axes.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/charts/limits_and_scaling.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom openpyxl import Workbook\nfrom openpyxl.chart import ScatterChart, Reference, Series\n\nwb = Workbook()\nws = wb.active\n\nfor i in range(1, 15):\n    ws.append([i, i])\n\nchart = ScatterChart()\nchart.title = \"Scatter Chart\"\nchart.style = 13\nchart.x_axis.title = 'x'\nchart.y_axis.title = 'x'\n\nxdata = Reference(ws, min_col=1, min_row=1, max_row=14)\nydata = Reference(ws, min_col=2, min_row=1, max_row=14)\nseries = Series(ydata, xdata, title_from_data=True)\nchart.series.append(series)\n\n# Set manual limits\nchart.x_axis.scaling.min = 0\nchart.x_axis.scaling.max = 12\nchart.y_axis.scaling.min = 0\nchart.y_axis.scaling.max = 12\n\nws.add_chart(chart, \"C1\")\nwb.save(\"minmax.xlsx\")\n```\n\n----------------------------------------\n\nTITLE: Setting TwoCell Anchor for Chart Positioning in OpenPyXL\nDESCRIPTION: Demonstrates how to create and configure a TwoCellAnchor to position a chart between cells A9 and C20. The anchor coordinates are set using 0-based indexing for rows and columns.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/charts/anchors.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom openpyxl.drawing.spreadsheet_drawing import TwoCellAnchor\n\nanchor = TwoCellAnchor()\nanchor._from.col = 0 #A\nanchor._from.row = 8 # row 9, using 0-based indexing\nanchor.to.col = 2 #C\nanchor.to.row = 19 # row 20\n\nchart.anchor = anchor\n```\n\n----------------------------------------\n\nTITLE: Installing openpyxl with pip\nDESCRIPTION: Command to install the openpyxl package using pip, preferably in a Python virtual environment without system packages.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/tutorial.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install openpyxl\n```\n\n----------------------------------------\n\nTITLE: Removing Chart Border in OpenPyXL\nDESCRIPTION: Removes the border from a chart by setting the line properties to have no fill and no dash style.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/charts/graphical.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom openpyxl.chart.shapes import GraphicalProperties\nchart.graphical_properties = GraphicalProperties()\nchart.graphical_properties.line.noFill = True\nchart.graphical_properties.line.prstDash = None\n```\n\n----------------------------------------\n\nTITLE: Creating new worksheets at different positions\nDESCRIPTION: Code showing how to create new worksheets in a workbook at different positions: at the end (default), at the beginning, or at a specific position.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/tutorial.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> ws1 = wb.create_sheet(\"Mysheet\") # insert at the end (default)\n# or\n>>> ws2 = wb.create_sheet(\"Mysheet\", 0) # insert at first position\n# or\n>>> ws3 = wb.create_sheet(\"Mysheet\", -1) # insert at the penultimate position\n```\n\n----------------------------------------\n\nTITLE: Creating 3D Line Charts with OpenPyXL in Python\nDESCRIPTION: This code snippet shows how to create a 3D line chart using OpenPyXL. It sets up data, creates a 3D line chart object, and adds it to a worksheet. The third axis in the 3D chart represents the legend for the series.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/charts/line.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom openpyxl import Workbook\nfrom openpyxl.chart import (\n    LineChart3D,\n    Reference,\n)\n\nwb = Workbook()\nws = wb.active\n\nrows = [\n    ['Aliens', 2, 3, 4, 5, 6, 7],\n    ['Humans', 10, 40, 50, 20, 10, 50],\n]\n\nfor row in rows:\n    ws.append(row)\n\nchart = LineChart3D()\nchart.title = \"3D Line Chart\"\nchart.legend = None\nchart.style = 15\nchart.y_axis.title = 'Size'\nchart.x_axis.title = 'Test Number'\n\ndata = Reference(ws, min_col=2, min_row=1, max_col=7, max_row=2)\nchart.add_data(data, titles_from_data=True)\n\nws.add_chart(chart, \"A10\")\n\nwb.save(\"line3D.xlsx\")\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Properties in Python using openpyxl\nDESCRIPTION: This code shows how to import necessary classes and create a new CustomPropertyList with a StringProperty. It demonstrates the process of adding a new custom property to a workbook.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/workbook_custom_doc_props.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom openpyxl.packaging.custom import (\n    BoolProperty,\n    DateTimeProperty,\n    FloatProperty,\n    IntProperty,\n    LinkProperty,\n    StringProperty,\n    CustomPropertyList,\n)\n\nprops = CustomePropertyList()\nprops.append(StringProperty(name=\"PropName1\", value=\"Something\"))\n```\n\n----------------------------------------\n\nTITLE: Adding Data References to Chart\nDESCRIPTION: Creates data references for the chart and adds them to the chart object.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/usage.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndata = Reference(ws, min_col=3, min_row=2, max_row=4, max_col=3)\ncategories = Reference(ws, min_col=1, min_row=2, max_row=4, max_col=1)\n\nchart.add_data(data)\nchart.set_categories(categories)\n```\n\n----------------------------------------\n\nTITLE: Creating 3D Area Charts with OpenPyXL in Python\nDESCRIPTION: This code snippet shows how to create a 3D area chart using OpenPyXL. It demonstrates setting up the chart data, configuring the chart properties, and adding it to a worksheet. The resulting chart uses the third axis to replace the legend.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/charts/area.rst#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom openpyxl import Workbook\nfrom openpyxl.chart import (\n    AreaChart3D,\n    Reference,\n    Series,\n)\n\nwb = Workbook()\nws = wb.active\n\nrows = [\n    ['Number', 'Batch 1', 'Batch 2'],\n    [2, 30, 40],\n    [3, 25, 40],\n    [4, 30, 50],\n    [5, 10, 30],\n    [6, 5, 25],\n    [7, 10, 50],\n]\n\nfor row in rows:\n    ws.append(row)\n\nchart = AreaChart3D()\nchart.title = \"Area Chart\"\nchart.style = 13\nchart.x_axis.title = 'Test'\nchart.y_axis.title = 'Percentage'\nchart.legend = None\n\ncats = Reference(ws, min_col=1, min_row=1, max_row=7)\ndata = Reference(ws, min_col=2, max_col=3, min_row=1, max_row=7)\nchart.add_data(data, titles_from_data=True)\nchart.set_categories(cats)\n\nws.add_chart(chart, \"A10\")\n\nwb.save(\"area3D.xlsx\")\n```\n\n----------------------------------------\n\nTITLE: Manually Adding Column Headings to Tables in OpenPyXL with Python\nDESCRIPTION: This snippet shows how to manually add column headings to tables in write-only mode using OpenPyXL. It demonstrates setting headerRowCount to False or initializing column headings manually.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/worksheet_tables.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Add tables without headings\ntable.headerRowCount = False\n```\n\nLANGUAGE: python\nCODE:\n```\n# Initialise the column headings manually\nheadings = [\"Fruit\", \"2011\", \"2012\", \"2013\", \"2014\"] # all values must be strings\ntable._initialise_columns()\nfor column, value in zip(table.tableColumns, headings):\n    column.name = value\n```\n\n----------------------------------------\n\nTITLE: Creating BlankFilters in OpenPyXL\nDESCRIPTION: Shows how to create a BlankFilter to exclude blank cells from the filter results.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/filters.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom openpyxl.worksheet.filters import BlankFilter\nblank = BlankFilter()\n```\n\n----------------------------------------\n\nTITLE: Saving a workbook as a template\nDESCRIPTION: Code showing how to save a workbook as a template by setting the template attribute to True before saving.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/tutorial.rst#2025-04-22_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n>>> wb = load_workbook('document.xlsx')\n>>> wb.template = True\n>>> wb.save('document_template.xltx')\n```\n\n----------------------------------------\n\nTITLE: Listing Python Package Dependencies for OpenPyXL\nDESCRIPTION: This snippet lists the required Python packages and their versions for the OpenPyXL project. It includes core dependencies like pip and lxml, testing tools like pytest and tox, and optional packages like pillow and pandas for additional functionality.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npip>=18.0\nlxml==5.0.1\npytest\npillow\ntox\npandas\n```\n\n----------------------------------------\n\nTITLE: Setting Table as Print Area in OpenPyXL with Python\nDESCRIPTION: This snippet demonstrates how to set a table as a print area in OpenPyXL. It shows how to extract the range of the table and define the print area as the appropriate cell range.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/worksheet_tables.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom openpyxl import load_workbook\nwb = load_workbook(\"QueryTable.xlsx\")\nws = wb.active\ntable_range = ws.tables[\"InvoiceData\"]\nws.print_area = table_range.ref        # Ref is the cell range the table currently covers\n```\n\n----------------------------------------\n\nTITLE: Saving Comments with Dimensions in OpenPyXL (Python)\nDESCRIPTION: This snippet illustrates how to create a comment with specific dimensions (width and height in pixels) and save it to an Excel workbook. It shows the process of setting comment attributes and saving the workbook.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/comments.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom openpyxl import Workbook\nfrom openpyxl.comments import Comment\nfrom openpyxl.utils import units\n\nwb=Workbook()\nws=wb.active\n\ncomment = Comment(\"Text\", \"Author\")\ncomment.width = 300\ncomment.height = 50\n\nws[\"A1\"].comment = comment\n\nwb.save('commented_book.xlsx')\n```\n\n----------------------------------------\n\nTITLE: Version 2.1.0 Cell Protection Features\nDESCRIPTION: Major update introducing read_only and write_only flags for workbooks, worksheet protection support, and cell style management improvements. Added xmlfile support for faster worksheet writing.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/changes.rst#2025-04-22_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Loading Workbooks with keep_links Example\nDESCRIPTION: Example of using the keep_links option when loading workbooks to handle external links and cached copies of external workbooks. This is useful when dealing with large external references.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/changes.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nload_workbook(filename, keep_links=False)\n```\n\n----------------------------------------\n\nTITLE: Formula Tokenization with OpenPyXL\nDESCRIPTION: Demonstrates how to use the Tokenizer class to break down Excel formulas into their constituent tokens. The example shows tokenization of an IF function with nested MAX function, displaying the value, type, and subtype of each token.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/formula.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom openpyxl.formula import Tokenizer\ntok = Tokenizer(\"\"\"=IF($A$1,\\\"then True\\\",MAX(DEFAULT_VAL,'Sheet 2'!B1))\"\"\")\nprint(\"\\n\".join(\"%12s%11s%9s\" % (t.value, t.type, t.subtype) for t in tok.items))\n```\n\n----------------------------------------\n\nTITLE: Cell Range Iteration Example\nDESCRIPTION: Demonstrates accessing worksheet rows and columns using generators that start from the top of the worksheet.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/changes.rst#2025-04-22_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nws.rows # returns generator starting from top\nws.columns # returns generator starting from top\nws.iter_cols() # method for column iteration\n```\n\n----------------------------------------\n\nTITLE: Setting Raw Hashed Password for Workbook Protection in OpenPyXL\nDESCRIPTION: This snippet illustrates how to set a pre-hashed password for workbook protection, bypassing the default hashing algorithm in OpenPyXL.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/protection.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nhashed_password = ...\nwb.security.set_workbook_password(hashed_password, already_hashed=True)\n```\n\n----------------------------------------\n\nTITLE: Setting Revisions Password for Shared Workbooks in OpenPyXL\nDESCRIPTION: This code shows how to set a password to prevent removal of change tracking and change history in a shared workbook using OpenPyXL.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/protection.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> wb.security.revisionsPassword = '...'\n```\n\n----------------------------------------\n\nTITLE: Version 2.1.2 Regex Fix in Python\nDESCRIPTION: Pull request 30 fixes regex handling for positive exponentials. This addresses bug fixes related to defined names with formulae and cell hyperlink reading.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/changes.rst#2025-04-22_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Positioning Legend in openpyxl Chart\nDESCRIPTION: This code snippet shows how to position the legend of a chart. In this case, it sets the legend position to 'tr' (top right). Other options include 'r' (right), 'l' (left), 't' (top), and 'b' (bottom).\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/charts/chart_layout.rst#2025-04-22_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nlegend.position = 'tr'\n```\n\n----------------------------------------\n\nTITLE: Creating a Gradient Pie Chart with OpenPyXL in Python\nDESCRIPTION: This code snippet illustrates how to create a pie chart with gradient series using OpenPyXL. It demonstrates the setup for applying gradient effects to chart slices.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/charts/pie.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: pie-gradient.py\n```\n\n----------------------------------------\n\nTITLE: Benchmarking OpenPyXL with Python 3.6.9\nDESCRIPTION: Performance benchmark results for OpenPyXL 3.0.1 running on Python 3.6.9. It shows execution times for different operations in read-only mode.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/read_performance.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nVersions:\npython: 3.6.9\nxlread: 1.2.0\nopenpyxl: 3.0.1\n\nopenpyxl, read-only\n    Workbook loaded 1.14s\n    OptimizationData 23.17s\n    Output Model 0.00s\n    >>DATA>> 0.00s\n    Store days 0% 23.92s\n    Store days 100% 17.35s\n    Total time 65.59s\n    0 cells in total\n```\n\n----------------------------------------\n\nTITLE: Looping Over Custom Properties in Python using openpyxl\nDESCRIPTION: This snippet demonstrates how to iterate over all custom document properties in a workbook and print their names and values.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/workbook_custom_doc_props.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> for prop in wb.custom_doc_props.props:\n>>>    print(f\"{prop.name}: {prop.value}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Excel Date System in OpenPyXL\nDESCRIPTION: Demonstrates how to set the date system of a workbook to the 1904 calendar system. This affects how dates are calculated and stored in the workbook.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/datetime.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwb.epoch = openpyxl.utils.datetime.CALENDAR_MAC_1904\n```\n\n----------------------------------------\n\nTITLE: Benchmarking OpenPyXL with Python 3.7.5\nDESCRIPTION: Performance benchmark results for OpenPyXL 3.0.1 running on Python 3.7.5. It shows execution times for different operations in read-only mode.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/read_performance.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nVersions:\npython: 3.7.5\nxlread: 1.2.0\nopenpyxl: 3.0.1\n\nopenpyxl, read-only\n    Workbook loaded 0.98s\n    OptimizationData 21.35s\n    Output Model 0.00s\n    >>DATA>> 0.00s\n    Store days 0% 20.70s\n    Store days 100% 16.16s\n    Total time 59.19s\n    0 cells in total\n```\n\n----------------------------------------\n\nTITLE: Configuring Chartsheet View in OpenPyXL\nDESCRIPTION: Shows how to access and modify the zoom-to-fit property of a chartsheet view. This controls whether the chart fits the printer page format or the window display.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/charts/chartsheet.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ncs.sheetViews.sheetView[0].zoomToFit\n```\n\n----------------------------------------\n\nTITLE: Excel High-Low Lines Bug Workaround in Python\nDESCRIPTION: Code snippet demonstrating a workaround for an Excel bug where high-low lines are only shown if data series contains dummy values. Uses OpenPyXL's chart data source components to inject dummy values.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/charts/stock.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom openpyxl.chart.data_source import NumData, NumVal\npts = [NumVal(idx=i) for i in range(len(data) - 1)]\ncache = NumData(pt=pts)\nc1.series[-1].val.numRef.numCache = cache\n```\n\n----------------------------------------\n\nTITLE: Benchmarking OpenPyXL with Python 3.8.0\nDESCRIPTION: Performance benchmark results for OpenPyXL 3.0.1 running on Python 3.8.0. It shows execution times for different operations in read-only mode.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/read_performance.txt#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nVersions:\npython: 3.8.0\nxlread: 1.2.0\nopenpyxl: 3.0.1\n\nopenpyxl, read-only\n    Workbook loaded 0.90s\n    OptimizationData 19.58s\n    Output Model 0.00s\n    >>DATA>> 0.00s\n    Store days 0% 19.35s\n    Store days 100% 15.02s\n    Total time 54.85s\n    0 cells in total\n```\n\n----------------------------------------\n\nTITLE: Deleting Custom Properties in Python using openpyxl\nDESCRIPTION: This snippet illustrates how to add a new custom property, check its existence, delete it, and then save the workbook. It demonstrates the process of managing custom properties in openpyxl.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/workbook_custom_doc_props.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwb.custom_doc_props.append(StringProperty(name=\"PropName6\", value=\"Something\"))\n# check the property\nprop = wb.custom_doc_props[\"PropName6\"]\n\n# delete the string property:\ndel prop[\"PropName6\"]\n\n# save the file\nwb.save('outfile.xlsx')\n```\n\n----------------------------------------\n\nTITLE: Applying Logarithmic Scaling to Chart Axes in openpyxl (Python)\nDESCRIPTION: This code snippet shows how to apply logarithmic scaling to chart axes in openpyxl. It creates multiple scatter charts with different logarithmic scaling configurations, including setting custom logarithm bases.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/charts/limits_and_scaling.rst#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport math\nfrom openpyxl import Workbook\nfrom openpyxl.chart import ScatterChart, Reference, Series\n\nwb = Workbook()\nws = wb.active\n\nfor i in range(1, 101):\n    ws.append([i, i])\n\n# Create charts with different scaling\ncharts = [\n    (ScatterChart(), 'C1', 'Neither'),\n    (ScatterChart(), 'J1', 'Log x'),\n    (ScatterChart(), 'C15', 'Log y'),\n    (ScatterChart(), 'J15', 'Log x and y'),\n    (ScatterChart(), 'C30', 'Log x and y, base e')\n]\n\nfor chart, anchor, title in charts:\n    chart.title = title\n    chart.x_axis.title = 'x'\n    chart.y_axis.title = 'y'\n    chart.width = 15\n    chart.height = 10\n\n    x = Reference(ws, min_col=1, min_row=1, max_row=100)\n    y = Reference(ws, min_col=2, min_row=1, max_row=100)\n    series = Series(y, x)\n    chart.series.append(series)\n\n    if 'Log x' in title:\n        chart.x_axis.scaling.logBase = 10\n    if 'Log y' in title:\n        chart.y_axis.scaling.logBase = 10\n    if 'base e' in title:\n        chart.x_axis.scaling.logBase = math.e\n        chart.y_axis.scaling.logBase = math.e\n\n    ws.add_chart(chart, anchor)\n\nwb.save('log.xlsx')\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Development Setup\nDESCRIPTION: Commands for installing development and production dependencies and setting up the package for development.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/development.rst#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n(openpyxl-env) $ pip install -U -r requirements.txt\n(openpyxl-env) $ pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Checking Excel Date System in OpenPyXL\nDESCRIPTION: Shows how to determine which date system (1900 or 1904) a workbook is using. The date system affects how date/time numbers are interpreted in Excel worksheets.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/datetime.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport openpyxl\nwb = openpyxl.Workbook()\nif wb.epoch == openpyxl.utils.datetime.CALENDAR_WINDOWS_1900:\n    print(\"This workbook is using the 1900 date system.\")\n```\n\n----------------------------------------\n\nTITLE: Setting Chart Background Transparency in OpenPyXL\nDESCRIPTION: Sets a chart's background to transparent using GraphicalProperties. This snippet demonstrates how to remove the fill from a chart's background.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/charts/graphical.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom openpyxl.chart.shapes import GraphicalProperties\nchart.graphical_properties = GraphicalProperties()\nchart.graphical_properties.noFill = True\n```\n\n----------------------------------------\n\nTITLE: Running Tests with tox\nDESCRIPTION: Command for running tests across multiple Python versions and configurations using tox.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/development.rst#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ tox openpyxl\n```\n\n----------------------------------------\n\nTITLE: Setting Chart Layout Target in openpyxl\nDESCRIPTION: This example demonstrates how to set the layout target to 'inner' instead of the default 'outer'. This determines whether the layout applies to the inner or outer area of the chart.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/charts/chart_layout.rst#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nlayout.layoutTarget = inner\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart Patterns with OpenPyXL\nDESCRIPTION: Code example showing how to apply patterns to chart elements using graphicalProperties in OpenPyXL. References both a Python implementation file and a pattern.png result image.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/charts/pattern.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: pattern.py\n```\n\n----------------------------------------\n\nTITLE: Activating Virtual Environment\nDESCRIPTION: Commands for activating the virtual environment on Unix/Linux and Windows systems.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/development.rst#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ source bin/activate  # or ./openpyxl-env/Scripts/activate on Windows\n```\n\n----------------------------------------\n\nTITLE: Saving Workbook with Chart\nDESCRIPTION: Adds the chart to the worksheet and saves the workbook to a file.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/usage.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nws.add_chart(chart, \"E1\")\nwb.save(\"TreeData.xlsx\")\n```\n\n----------------------------------------\n\nTITLE: Converting Font to InlineFont in OpenPyXL\nDESCRIPTION: Demonstrates how to create an InlineFont object from an existing Font object with specific formatting properties.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/rich_text.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom openpyxl.cell.text import Font\nfont = Font(name='Calibri',\n            size=11,\n            bold=False,\n            italic=False,\n            vertAlign=None,\n            underline='none',\n            strike=False,\n            color='00FF0000')\ninline_font = InlineFont(font)\n```\n\n----------------------------------------\n\nTITLE: Running Memory Benchmarks\nDESCRIPTION: Command for running long-term memory benchmarks using tox with the memory profile.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/development.rst#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ntox -e memory\n```\n\n----------------------------------------\n\nTITLE: Setting Chart Layout Mode in openpyxl\nDESCRIPTION: This snippet shows how to set the layout mode for a chart's x-axis to 'edge' instead of the default 'factor'. This affects how the chart is positioned within its container.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/charts/chart_layout.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nlayout.xMode = edge\n```\n\n----------------------------------------\n\nTITLE: Configuring Mercurial to Track Upstream Repository\nDESCRIPTION: Configuration for the Mercurial hgrc file to add an upstream remote reference to the original repository.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/development.rst#2025-04-22_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[paths]\ndefault = ...\nopenpyxl-master = https://foss.heptapod.net/openpyxl/openpyxl\n```\n\n----------------------------------------\n\nTITLE: Installing Pillow for image support\nDESCRIPTION: Command to install the Pillow library which is required for including images in openpyxl files.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/tutorial.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install pillow\n```\n\n----------------------------------------\n\nTITLE: Cloning the Repository with Mercurial\nDESCRIPTION: Commands for cloning the openpyxl repository from Heptapod using Mercurial and checking out the current version branch.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/development.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ hg clone https://foss.heptapod.net/openpyxl/openpyxl\n$ hg up |version|\n```\n\n----------------------------------------\n\nTITLE: Resetting Worksheet Dimensions in Read-Only Mode\nDESCRIPTION: Shows how to reset worksheet dimensions when the file's dimension information is incorrect in read-only mode.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/optimized.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nws.reset_dimensions()\n```\n\n----------------------------------------\n\nTITLE: XML Namespace Generation in OpenPyXL\nDESCRIPTION: Examples showing the incorrect and correct ways to generate XML namespace tags in OpenPyXL. The correct approach uses fully qualified namespace URIs instead of direct prefix notation.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/openpyxl/tests/notes_on_namespaces.rst#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\nElement(\"c:valAx\")\n```\n\nLANGUAGE: xml\nCODE:\n```\nElement(\"{http://schemas.openxmlformats.org/drawingml/2006/chart}valAx\")\n```\n\n----------------------------------------\n\nTITLE: Memory Profiling with Pympler\nDESCRIPTION: Python code example showing how to use Pympler to profile memory usage in style table reading function.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/development.rst#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# in openpyxl/reader/style.py\nfrom pympler import muppy, summary\n\ndef read_style_table(xml_source):\n  ...\n  if cell_xfs is not None:  # ~ line 47\n      initialState = summary.summarize(muppy.get_objects())  # Capture the initial state\n      for index, cell_xfs_node in enumerate(cell_xfs_nodes):\n         ...\n         table[index] = new_style\n      finalState = summary.summarize(muppy.get_objects())  # Capture the final state\n      diff = summary.get_diff(initialState, finalState)  # Compare\n      summary.print_(diff)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Virtual Environment for Development\nDESCRIPTION: Commands for creating and activating a virtual environment for openpyxl development.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/development.rst#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ cd openpyxl\n$ virtualenv openpyxl-env\n```\n\n----------------------------------------\n\nTITLE: Building and Testing Documentation\nDESCRIPTION: Command for testing documentation syntax and building documentation using tox.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/development.rst#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ntox -e doc\n```\n\n----------------------------------------\n\nTITLE: Listing Python Package Dependencies\nDESCRIPTION: Requirements file listing necessary Python packages for the OpenPyXL project including core dependencies and documentation tools. Includes lxml for XML processing, pandas for data manipulation, and sphinx_rtd_theme for documentation rendering.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npip\nlxml\npandas\nsphinx_rtd_theme\n```\n\n----------------------------------------\n\nTITLE: Parallelized Read Performance Results\nDESCRIPTION: Performance timing results from a parallelized read operation showing various stages of processing including workbook loading, data processing, and storage operations.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/performance.rst#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nParallised Read\n    Workbook loaded 1.12s\n    >>DATA>> 2.27s\n    Output Model 2.30s\n    Store days 100% 37.18s\n    OptimizationData 44.09s\n    Store days 0% 45.60s\n    Total time 46.76s\n```\n\n----------------------------------------\n\nTITLE: Running Tests with pytest\nDESCRIPTION: Command for running tests using pytest with flags to stop at first error and display reasons for failures.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/development.rst#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n(openpxyl-env) $ pytest -xrf openpyxl  # the flags will stop testing at the first error\n```\n\n----------------------------------------\n\nTITLE: Installing specific version from source\nDESCRIPTION: Command to install openpyxl directly from source code repository at a specific version.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/tutorial.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install -e hg+https://foss.heptapod.net/openpyxl/openpyxl/@\\ |version|\\ #egg=openpyxl\n```\n\n----------------------------------------\n\nTITLE: Checking Test Coverage\nDESCRIPTION: Command for running tests with coverage information to ensure 100% unit test coverage.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/development.rst#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npy.test --cov openpyxl\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Specific Package\nDESCRIPTION: Command for running tests specifically for a particular package or module with coverage information.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/development.rst#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npy.test --cov openpyxl/cell openpyxl/cell\n```\n\n----------------------------------------\n\nTITLE: Pulling Updates from Upstream Repository\nDESCRIPTION: Command to fetch the latest changes from the upstream openpyxl repository.\nSOURCE: https://github.com/soxhub/openpyxl/blob/master/doc/development.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ hg pull openpyxl-master\n```"
  }
]