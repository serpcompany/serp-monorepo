[
  {
    "owner": "statelyai",
    "repo": "xstate",
    "content": "TITLE: Creating a Traffic Light Finite State Machine in JavaScript\nDESCRIPTION: Example showing a simple traffic light state machine with three states (green, yellow, red) that transition on a TIMER event. Demonstrates how to create the machine, instantiate an actor, subscribe to state changes, and send events to trigger state transitions.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/README.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine, createActor } from 'xstate';\n\nconst lightMachine = createMachine({\n  id: 'light',\n  initial: 'green',\n  states: {\n    green: {\n      on: {\n        TIMER: 'yellow'\n      }\n    },\n    yellow: {\n      on: {\n        TIMER: 'red'\n      }\n    },\n    red: {\n      on: {\n        TIMER: 'green'\n      }\n    }\n  }\n});\n\nconst actor = createActor(lightMachine);\n\nactor.subscribe((state) => {\n  console.log(state.value);\n});\n\nactor.start();\n// logs 'green'\n\nactor.send({ type: 'TIMER' });\n// logs 'yellow'\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic State Machine in JavaScript using XState\nDESCRIPTION: This snippet demonstrates how to create a basic state machine for a traffic light using the createMachine() function from XState. It defines the machine identifier, initial state, context, and state definitions.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/machines.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine } from 'xstate';\n\nconst lightMachine = createMachine({\n  // Machine identifier\n  id: 'light',\n\n  // Initial state\n  initial: 'green',\n\n  // Local context for entire machine\n  context: {\n    elapsed: 0,\n    direction: 'east'\n  },\n\n  // State definitions\n  states: {\n    green: {\n      /* ... */\n    },\n    yellow: {\n      /* ... */\n    },\n    red: {\n      /* ... */\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a Basic Toggle State Machine in TypeScript\nDESCRIPTION: Example demonstrating how to create a toggle state machine with XState. The machine toggles between 'inactive' and 'active' states and increments a count when entering the active state. Shows how to create the machine, instantiate an actor, and interact with it by sending events.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/README.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMachine, createActor, assign } from 'xstate';\n\n// State machine\nconst toggleMachine = createMachine({\n  id: 'toggle',\n  initial: 'inactive',\n  context: {\n    count: 0\n  },\n  states: {\n    inactive: {\n      on: {\n        TOGGLE: { target: 'active' }\n      }\n    },\n    active: {\n      entry: assign({ count: ({ context }) => context.count + 1 }),\n      on: {\n        TOGGLE: { target: 'inactive' }\n      }\n    }\n  }\n});\n\n// Actor (instance of the machine logic, like a store)\nconst toggleActor = createActor(toggleMachine);\ntoggleActor.subscribe((state) => console.log(state.value, state.context));\ntoggleActor.start();\n// => logs 'inactive', { count: 0 }\n\ntoggleActor.send({ type: 'TOGGLE' });\n// => logs 'active', { count: 1 }\n\ntoggleActor.send({ type: 'TOGGLE' });\n// => logs 'inactive', { count: 1 }\n```\n\n----------------------------------------\n\nTITLE: Creating a Toggle Button Component with XState and React\nDESCRIPTION: Example of implementing a toggle button using the useMachine hook from @xstate/react. The code creates a state machine with inactive and active states and a React component that renders a button that toggles between these states.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-react/README.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useMachine } from '@xstate/react';\nimport { createMachine } from 'xstate';\n\nconst toggleMachine = createMachine({\n  id: 'toggle',\n  initial: 'inactive',\n  states: {\n    inactive: {\n      on: { TOGGLE: 'active' }\n    },\n    active: {\n      on: { TOGGLE: 'inactive' }\n    }\n  }\n});\n\nexport const Toggler = () => {\n  const [state, send] = useMachine(toggleMachine);\n\n  return (\n    <button onClick={() => send({ type: 'TOGGLE' })}>\n      {state.value === 'inactive'\n        ? 'Click to activate'\n        : 'Active! Click to deactivate'}\n    </button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using useInterpret and useSelector with XState in React\nDESCRIPTION: Shows how to use the useInterpret hook to create a service from a machine, and then use useSelector to select specific state values from that service. This pattern is useful for creating and managing XState services within React components.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/packages/xstate-react/index.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useInterpret, useSelector } from '@xstate/react';\nimport { someMachine } from '../path/to/someMachine';\n\nconst selectCount = (state) => state.context.count;\n\nconst App = () => {\n  const service = useInterpret(someMachine);\n  const count = useSelector(service, selectCount);\n\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing a Traffic Light Finite State Machine with XState\nDESCRIPTION: Example of creating a traffic light state machine that cycles between green, yellow, and red states upon receiving TIMER events. Shows basic state transitions and actor usage for a finite state machine.\nSOURCE: https://github.com/statelyai/xstate/blob/main/README.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine, createActor } from 'xstate';\n\nconst lightMachine = createMachine({\n  id: 'light',\n  initial: 'green',\n  states: {\n    green: {\n      on: {\n        TIMER: 'yellow'\n      }\n    },\n    yellow: {\n      on: {\n        TIMER: 'red'\n      }\n    },\n    red: {\n      on: {\n        TIMER: 'green'\n      }\n    }\n  }\n});\n\nconst actor = createActor(lightMachine);\n\nactor.subscribe((state) => {\n  console.log(state.value);\n});\n\nactor.start();\n// logs 'green'\n\nactor.send({ type: 'TIMER' });\n// logs 'yellow'\n```\n\n----------------------------------------\n\nTITLE: XState Actor Management Quick Reference\nDESCRIPTION: Complete reference guide showing various patterns for spawning different types of actors, syncing state, and sending events between actors.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/actors.md#2025-04-20_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { spawn } from 'xstate';\n\n// Spawn actors in assign action creators\n// ...\n{\n  actions: assign({\n    someRef: (context, event) => spawn(someMachine)\n  });\n}\n// ...\n\n// Spawn different types of actors\n// ...\n{\n  actions: assign({\n    // From a promise\n    promiseRef: (context, event) =>\n      spawn(\n        new Promise((resolve, reject) => {\n          // ...\n        }),\n        'my-promise'\n      ),\n\n    // From a callback\n    callbackRef: (context, event) =>\n      spawn((callback, receive) => {\n        // send to parent\n        callback('SOME_EVENT');\n\n        // receive from parent\n        receive((event) => {\n          // handle event\n        });\n\n        // disposal\n        return () => {\n          /* do cleanup here */\n        };\n      }),\n\n    // From an observable\n    observableRef: (context, event) => spawn(someEvent$),\n\n    // From a machine\n    machineRef: (context, event) =>\n      spawn(\n        createMachine({\n          // ...\n        })\n      )\n  });\n}\n// ...\n\n// Sync state with an actor\n// ...\n{\n  actions: assign({\n    someRef: () => spawn(someMachine, { sync: true })\n  });\n}\n// ...\n\n// Getting a snapshot from an actor\nservice.onTransition((state) => {\n  const { someRef } = state.context;\n\n  someRef.getSnapshot();\n  // => State { ... }\n});\n\n// Send event to actor\n// ...\n{\n  actions: send(\n    { type: 'SOME_EVENT' },\n    {\n      to: (context) => context.someRef\n    }\n  );\n}\n// ...\n\n// Send event with data to actor\n// ...\n{\n  actions: send((context, event) => ({ ...event, type: 'SOME_EVENT' }), {\n    to: (context) => context.someRef\n  });\n}\n// ...\n\n// Send event from actor to parent\n// ...\n{\n  actions: sendParent({ type: 'ANOTHER_EVENT' });\n}\n// ...\n\n// Send event with data from actor to parent\n// ...\n{\n  actions: sendParent((context, event) => ({\n    ...context,\n    type: 'ANOTHER_EVENT'\n  }));\n}\n// ...\n\n// Reference actors from context\nsomeService.onTransition((state) => {\n  const { someRef } = state.context;\n\n  console.log(someRef);\n  // => { id: ..., send: ... }\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking Effects in XState Machine Testing\nDESCRIPTION: Illustrates how to mock side-effects like actions and services in an XState machine for testing purposes. This example uses machine.withConfig(...) to override service implementations and action behaviors.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/testing.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { fetchMachine } from '../path/to/fetchMachine';\n\nit('should eventually reach \"success\"', (done) => {\n  let userAlerted = false;\n\n  const mockFetchMachine = fetchMachine.withConfig({\n    services: {\n      fetchFromAPI: (_, event) =>\n        new Promise((resolve) => {\n          setTimeout(() => {\n            resolve({ id: event.id });\n          }, 50);\n        })\n    },\n    actions: {\n      alertUser: () => {\n        // set a flag instead of executing the original action\n        userAlerted = true;\n      }\n    }\n  });\n\n  const fetchService = interpret(mockFetchMachine).onTransition((state) => {\n    if (state.matches('success')) {\n      // assert that effects were executed\n      expect(userAlerted).toBeTruthy();\n      done();\n    }\n  });\n\n  fetchService.start();\n\n  fetchService.send({ type: 'FETCH', id: 42 });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Toggle State Machine with XState\nDESCRIPTION: Example of creating a simple toggle state machine with XState that tracks state between 'active' and 'inactive' states while maintaining a count in context. Demonstrates basic machine definition, actor creation, and event sending.\nSOURCE: https://github.com/statelyai/xstate/blob/main/README.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMachine, createActor, assign } from 'xstate';\n\n// State machine\nconst toggleMachine = createMachine({\n  id: 'toggle',\n  initial: 'inactive',\n  context: {\n    count: 0\n  },\n  states: {\n    inactive: {\n      on: {\n        TOGGLE: { target: 'active' }\n      }\n    },\n    active: {\n      entry: assign({ count: ({ context }) => context.count + 1 }),\n      on: {\n        TOGGLE: { target: 'inactive' }\n      }\n    }\n  }\n});\n\n// Actor (instance of the machine logic, like a store)\nconst toggleActor = createActor(toggleMachine);\ntoggleActor.subscribe((state) => console.log(state.value, state.context));\ntoggleActor.start();\n// => logs 'inactive', { count: 0 }\n\ntoggleActor.send({ type: 'TOGGLE' });\n// => logs 'active', { count: 1 }\n\ntoggleActor.send({ type: 'TOGGLE' });\n// => logs 'inactive', { count: 1 }\n```\n\n----------------------------------------\n\nTITLE: Transitioning States in XState (JavaScript)\nDESCRIPTION: This code demonstrates how to transition between states in an XState machine and the structure of the returned state object.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/statenodes.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst nextState = fetchMachine.transition('pending', { type: 'FULFILL' });\n// State {\n//   value: { success: 'items' },\n//   actions: [],\n//   context: undefined,\n//   ...\n// }\n```\n\n----------------------------------------\n\nTITLE: Implementing Actions in XState State Machine\nDESCRIPTION: Comprehensive example demonstrating different types of actions (entry, exit, transition) and their implementations in an XState machine configuration.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/actions.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst triggerMachine = createMachine(\n  {\n    id: 'trigger',\n    initial: 'inactive',\n    states: {\n      inactive: {\n        on: {\n          TRIGGER: {\n            target: 'active',\n            // transition actions\n            actions: ['activate', 'sendTelemetry']\n          }\n        }\n      },\n      active: {\n        // entry actions\n        entry: ['notifyActive', 'sendTelemetry'],\n        // exit actions\n        exit: ['notifyInactive', 'sendTelemetry'],\n        on: {\n          STOP: { target: 'inactive' }\n        }\n      }\n    }\n  },\n  {\n    actions: {\n      // action implementations\n      activate: (context, event) => {\n        console.log('activating...');\n      },\n      notifyActive: (context, event) => {\n        console.log('active!');\n      },\n      notifyInactive: (context, event) => {\n        console.log('inactive!');\n      },\n      sendTelemetry: (context, event) => {\n        console.log('time:', Date.now());\n      }\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Glass Filling Machine with Context in XState\nDESCRIPTION: This snippet demonstrates how to create a state machine for filling a glass of water using context to track the amount. It includes actions to add water, guards to check if the glass is full, and transitions between states.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/context.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine, assign } from 'xstate';\n\n// Action to increment the context amount\nconst addWater = assign({\n  amount: (context, event) => context.amount + 1\n});\n\n// Guard to check if the glass is full\nfunction glassIsFull(context, event) {\n  return context.amount >= 10;\n}\n\nconst glassMachine = createMachine(\n  {\n    id: 'glass',\n    // the initial context (extended state) of the statechart\n    context: {\n      amount: 0\n    },\n    initial: 'empty',\n    states: {\n      empty: {\n        on: {\n          FILL: {\n            target: 'filling',\n            actions: 'addWater'\n          }\n        }\n      },\n      filling: {\n        // Transient transition\n        always: {\n          target: 'full',\n          cond: 'glassIsFull'\n        },\n        on: {\n          FILL: {\n            target: 'filling',\n            actions: 'addWater'\n          }\n        }\n      },\n      full: {}\n    }\n  },\n  {\n    actions: { addWater },\n    guards: { glassIsFull }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Using useMachine Hook for Local State Management in React\nDESCRIPTION: Demonstrates how to use the useMachine hook from @xstate/react to manage local state in a React component. The example shows a toggle button component using a state machine.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/recipes/react.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useMachine } from '@xstate/react';\nimport { toggleMachine } from '../path/to/toggleMachine';\n\nfunction Toggle() {\n  const [current, send] = useMachine(toggleMachine);\n\n  return (\n    <button onClick={() => send('TOGGLE')}>\n      {current.matches('inactive') ? 'Off' : 'On'}\n    </button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Typegen with XState in TypeScript\nDESCRIPTION: This example shows how to use XState's typegen feature to automatically generate intelligent typings. It includes setting up the machine with schema and tsTypes, and implementing typed actions.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/typescript.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMachine } from 'xstate';\n\nconst machine = createMachine(\n  {\n    tsTypes: {} as import('./filename.typegen').Typegen0,\n    schema: {\n      context: {} as { value: string },\n      events: {} as { type: 'FOO'; value: string } | { type: 'BAR' }\n    },\n    context: {\n      value: ''\n    },\n    initial: 'a',\n    states: {\n      a: {\n        on: {\n          FOO: {\n            actions: 'consoleLogValue',\n            target: 'b'\n          }\n        }\n      },\n      b: {\n        entry: 'consoleLogValueAgain'\n      }\n    }\n  },\n  {\n    actions: {\n      consoleLogValue: (context, event) => {\n        // Wow! event is typed to { type: 'FOO' }\n        console.log(event.value);\n      },\n      consoleLogValueAgain: (context, event) => {\n        // Wow! event is typed to { type: 'FOO' }\n        console.log(event.value);\n      }\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Toggle State Machine\nDESCRIPTION: Example of creating a simple toggle state machine with two states (active/inactive) and toggle transitions\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/packages/xstate-test/index.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine } from 'xstate';\n\nconst toggleMachine = createMachine({\n  id: 'toggle',\n  initial: 'inactive',\n  states: {\n    inactive: {\n      on: {\n        TOGGLE: 'active'\n      }\n    },\n    active: {\n      on: {\n        TOGGLE: 'inactive'\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Global State Context Provider Setup\nDESCRIPTION: Implementation of a React Context provider using XState's useInterpret hook for global state management.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/recipes/react.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { createContext } from 'react';\nimport { useInterpret } from '@xstate/react';\nimport { authMachine } from './authMachine';\n\nexport const GlobalStateContext = createContext({});\n\nexport const GlobalStateProvider = (props) => {\n  const authService = useInterpret(authMachine);\n\n  return (\n    <GlobalStateContext.Provider value={{ authService }}>\n      {props.children}\n    </GlobalStateContext.Provider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Context with Factory Function in XState\nDESCRIPTION: This example demonstrates using a factory function to create a machine with dynamic initial context. It allows passing external values to initialize the machine's context.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/context.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst createCounterMachine = (count, time) => {\n  return createMachine({\n    id: 'counter',\n    // values provided from function arguments\n    context: {\n      count,\n      time\n    }\n    // ...\n  });\n};\n\nconst counterMachine = createCounterMachine(42, Date.now());\n```\n\n----------------------------------------\n\nTITLE: Defining Context Types in XState with TypeScript\nDESCRIPTION: Shows how to add proper type inference for context in an XState machine using TypeScript, including the use of the schema property.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/context.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMachine } from 'xstate';\n\ninterface CounterContext {\n  count: number;\n  user?: {\n    name: string;\n  };\n}\n\nconst machine = createMachine({\n  schema: {\n    context: {} as CounterContext\n  },\n  // ...\n  context: {\n    count: 0,\n    user: undefined\n  }\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Basic XState Machine Structure\nDESCRIPTION: Initial setup of an XState machine with basic import and creation\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/start.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine } from 'xstate';\n\nconst promiseMachine = createMachine(/* ... */);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Hierarchical State Machine for Traffic Lights with Pedestrian States\nDESCRIPTION: Advanced example demonstrating a hierarchical state machine that combines traffic light states with nested pedestrian states. The red state contains pedestrian substates (walk, wait, stop) that are active when the main state is red. Shows composition of state machines and handling of nested state transitions.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/README.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine, createActor } from 'xstate';\n\nconst pedestrianStates = {\n  initial: 'walk',\n  states: {\n    walk: {\n      on: {\n        PED_TIMER: 'wait'\n      }\n    },\n    wait: {\n      on: {\n        PED_TIMER: 'stop'\n      }\n    },\n    stop: {}\n  }\n};\n\nconst lightMachine = createMachine({\n  id: 'light',\n  initial: 'green',\n  states: {\n    green: {\n      on: {\n        TIMER: 'yellow'\n      }\n    },\n    yellow: {\n      on: {\n        TIMER: 'red'\n      }\n    },\n    red: {\n      on: {\n        TIMER: 'green'\n      },\n      ...pedestrianStates\n    }\n  }\n});\n\nconst actor = createActor(lightMachine);\n\nactor.subscribe((state) => {\n  console.log(state.value);\n});\n\nactor.start();\n// logs 'green'\n\nactor.send({ type: 'TIMER' });\n// logs 'yellow'\n\nactor.send({ type: 'TIMER' });\n// logs { red: 'walk' }\n\nactor.send({ type: 'PED_TIMER' });\n// logs { red: 'wait' }\n```\n\n----------------------------------------\n\nTITLE: Migrating Send Action to SendTo/Raise\nDESCRIPTION: Shows the migration path from deprecated send() to the new sendTo() and raise() action creators in XState v5.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/actions.md#2025-04-20_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n-send({ type: 'EVENT' }, { to: 'someActor' });\n+sendTo('someActor', { type: 'EVENT' });\n\n-send({ type: 'EVENT' });\n+raise({ type: 'EVENT' });\n```\n\n----------------------------------------\n\nTITLE: Implementing Actions in XState Machine Configuration\nDESCRIPTION: This snippet shows how to define and implement actions in an XState machine. It demonstrates referencing an action by string in the machine config and providing its implementation in the second argument of createMachine().\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/machines.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst lightMachine = createMachine(\n  {\n    id: 'light',\n    initial: 'green',\n    states: {\n      green: {\n        // action referenced via string\n        entry: 'alertGreen'\n      }\n    }\n  },\n  {\n    actions: {\n      // action implementation\n      alertGreen: (context, event) => {\n        alert('Green!');\n      }\n    },\n    delays: {\n      /* ... */\n    },\n    guards: {\n      /* ... */\n    },\n    services: {\n      /* ... */\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Machines with Model API in TypeScript\nDESCRIPTION: Shows how to create machines using the model API without requiring explicit type parameters using the new .createMachine() method directly on the model.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_167\n\nLANGUAGE: typescript\nCODE:\n```\nconst machine = model.createMachine(/* ... */)\n```\n\n----------------------------------------\n\nTITLE: Using the state machine in React with useMachine hook\nDESCRIPTION: Implementation of the Promise state machine in a React component using the useMachine hook from @xstate/react. This demonstrates how to integrate state machines with React's component-based architecture.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/start.md#2025-04-20_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useMachine } from '@xstate/react';\n\nconst Component = () => {\n  const [state, send] = useMachine(promiseMachine);\n\n  return (\n    <div>\n      {/** You can listen to what state the service is in */}\n      {state.matches('pending') && <p>Loading...</p>}\n      {state.matches('rejected') && <p>Promise Rejected</p>}\n      {state.matches('resolved') && <p>Promise Resolved</p>}\n      <div>\n        {/** You can send events to the running service */}\n        <button onClick={() => send('RESOLVE')}>Resolve</button>\n        <button onClick={() => send('REJECT')}>Reject</button>\n      </div>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Migrating from interpret() to createActor() in XState\nDESCRIPTION: Example showing how to migrate from the deprecated 'interpret' function to the new 'createActor' function.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_109\n\nLANGUAGE: typescript\nCODE:\n```\n-import { interpret } from 'xstate';\n+import { createActor } from 'xstate';\n\n-const actor = interpret(machine);\n+const actor = createActor(machine);\n```\n\n----------------------------------------\n\nTITLE: Basic XState Interpreter Usage\nDESCRIPTION: Shows how to create, start and use an XState interpreter service to manage state transitions and send events. Demonstrates basic interpreter lifecycle methods including start, send events, and stop.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/interpretation.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine, interpret } from 'xstate';\n\nconst machine = createMachine(/* machine config */);\n\n// Interpret the machine, and add a listener for whenever a transition occurs.\nconst service = interpret(machine).onTransition((state) => {\n  console.log(state.value);\n});\n\n// Start the service\nservice.start();\n\n// Send events\nservice.send({ type: 'SOME_EVENT' });\n\n// Stop the service when you are no longer using it.\nservice.stop();\n```\n\n----------------------------------------\n\nTITLE: Implementing Eventless Transitions in XState Game Machine\nDESCRIPTION: Shows how to use the 'always' property to create eventless transitions that are automatically evaluated when entering states or receiving events.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/transitions.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst gameMachine = createMachine(\n  {\n    id: 'game',\n    initial: 'playing',\n    context: {\n      points: 0\n    },\n    states: {\n      playing: {\n        // Eventless transition\n        // Will transition to either 'win' or 'lose' immediately upon\n        // entering 'playing' state or receiving AWARD_POINTS event\n        // if the condition is met.\n        always: [\n          { target: 'win', cond: 'didPlayerWin' },\n          { target: 'lose', cond: 'didPlayerLose' }\n        ],\n        on: {\n          // Self-transition\n          AWARD_POINTS: {\n            actions: assign({\n              points: 100\n            })\n          }\n        }\n      },\n      win: { type: 'final' },\n      lose: { type: 'final' }\n    }\n  },\n  {\n    guards: {\n      didPlayerWin: (context, event) => {\n        // check if player won\n        return context.points > 99;\n      },\n      didPlayerLose: (context, event) => {\n        // check if player lost\n        return context.points < 0;\n      }\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Local State Management with useMachine Hook\nDESCRIPTION: Basic example of using XState's useMachine hook for local state management in a React toggle component.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/recipes/react.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useMachine } from '@xstate/react';\nimport { toggleMachine } from '../path/to/toggleMachine';\n\nfunction Toggle() {\n  const [current, send] = useMachine(toggleMachine);\n\n  return (\n    <button onClick={() => send('TOGGLE')}>\n      {current.matches('inactive') ? 'Off' : 'On'}\n    </button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Events to XState Service in JavaScript\nDESCRIPTION: Shows different ways to send events to a running XState service, highlighting the object-based approach which is the preferred method.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/interpretation.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nservice.start();\n\n// As an object (preferred):\nservice.send({ type: 'CLICK', x: 40, y: 21 });\n```\n\n----------------------------------------\n\nTITLE: Initializing and Transitioning States in XState\nDESCRIPTION: This snippet demonstrates how to create a machine, access its initial state, and perform a state transition. It shows the structure of the State object returned by these operations.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/states.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst lightMachine = createMachine({\n  id: 'light',\n  initial: 'green',\n  states: {\n    green: {\n      /* ... */\n    }\n    // ...\n  }\n});\n\nconsole.log(lightMachine.initialState);\n// State {\n//   value: 'green',\n//   actions: [],\n//   context: undefined,\n//   // ...\n// }\n\nconsole.log(lightMachine.transition('yellow', { type: 'TIMER' }));\n// State {\n//   value: { red: 'walk' },\n//   actions: [],\n//   context: undefined,\n//   // ...\n// }\n```\n\n----------------------------------------\n\nTITLE: Defining Schema for XState Machine in TypeScript\nDESCRIPTION: This snippet demonstrates how to define the schema for an XState machine, including context and events types. It provides strong typing for the machine's context and events.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/typescript.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMachine } from 'xstate';\n\nconst lightMachine = createMachine({\n  schema: {\n    // The context (extended state) of the machine\n    context: {} as { elapsed: number },\n    // The events this machine handles\n    events: {} as\n      | { type: 'TIMER' }\n      | { type: 'POWER_OUTAGE' }\n      | { type: 'PED_COUNTDOWN'; duration: number }\n  }\n  /* Other config... */\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Self-Transitions in XState\nDESCRIPTION: Shows how to implement internal and external self-transitions in XState state machines. Demonstrates the difference between transition types and their effects on state actions.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/actions.md#2025-04-20_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst counterMachine = createMachine({\n  id: 'counter',\n  initial: 'counting',\n  states: {\n    counting: {\n      entry: 'enterCounting',\n      exit: 'exitCounting',\n      on: {\n        // self-transitions\n        INC: { actions: 'increment' }, // internal (implicit)\n        DEC: { target: 'counting', actions: 'decrement' }, // external\n        DO_NOTHING: { internal: true, actions: 'logNothing' } // internal (explicit)\n      }\n    }\n  }\n});\n\n// External transition (exit + transition actions + entry)\nconst stateA = counterMachine.transition('counting', { type: 'DEC' });\nstateA.actions;\n// ['exitCounting', 'decrement', 'enterCounting']\n\n// Internal transition (transition actions)\nconst stateB = counterMachine.transition('counting', { type: 'DO_NOTHING' });\nstateB.actions;\n// ['logNothing']\n\nconst stateC = counterMachine.transition('counting', { type: 'INC' });\nstateB.actions;\n// ['increment']\n```\n\n----------------------------------------\n\nTITLE: Traffic Light State Machine Example\nDESCRIPTION: Shows implementation of a basic traffic light state machine with three states (green, yellow, red) and timer-based transitions.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/packages/core/index.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine, createActor } from 'xstate';\n\nconst lightMachine = createMachine({\n  id: 'light',\n  initial: 'green',\n  states: {\n    green: {\n      on: {\n        TIMER: 'yellow'\n      }\n    },\n    yellow: {\n      on: {\n        TIMER: 'red'\n      }\n    },\n    red: {\n      on: {\n        TIMER: 'green'\n      }\n    }\n  }\n});\n\nconst actor = createActor(lightMachine);\n\nactor.subscribe((state) => {\n  console.log(state.value);\n});\n\nactor.start();\n// logs 'green'\n\nactor.send({ type: 'TIMER' });\n// logs 'yellow'\n```\n\n----------------------------------------\n\nTITLE: Implementing Actions in XState State Machine\nDESCRIPTION: This snippet demonstrates how to implement entry, exit, and transition actions in an XState state machine. It includes action implementations and shows how to use them in state definitions.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/actions.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst triggerMachine = createMachine(\n  {\n    id: 'trigger',\n    initial: 'inactive',\n    states: {\n      inactive: {\n        on: {\n          TRIGGER: {\n            target: 'active',\n            // transition actions\n            actions: ['activate', 'sendTelemetry']\n          }\n        }\n      },\n      active: {\n        // entry actions\n        entry: ['notifyActive', 'sendTelemetry'],\n        // exit actions\n        exit: ['notifyInactive', 'sendTelemetry'],\n        on: {\n          STOP: { target: 'inactive' }\n        }\n      }\n    }\n  },\n  {\n    actions: {\n      // action implementations\n      activate: (context, event) => {\n        console.log('activating...');\n      },\n      notifyActive: (context, event) => {\n        console.log('active!');\n      },\n      notifyInactive: (context, event) => {\n        console.log('inactive!');\n      },\n      sendTelemetry: (context, event) => {\n        console.log('time:', Date.now());\n      }\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Escalate Action in XState (JavaScript)\nDESCRIPTION: Shows how to use the escalate action creator to send an error to the parent machine. This example demonstrates error escalation from a child machine to its parent.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/actions.md#2025-04-20_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine, actions } from 'xstate';\nconst { escalate } = actions;\n\nconst childMachine = createMachine({\n  // ...\n  // This will be sent to the parent machine that invokes this child\n  entry: escalate({ message: 'This is some error' })\n});\n\nconst parentMachine = createMachine({\n  // ...\n  invoke: {\n    src: childMachine,\n    onError: {\n      actions: (context, event) => {\n        console.log(event.data);\n        //  {\n        //    type: ...,\n        //    data: {\n        //      message: 'This is some error'\n        //    }\n        //  }\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Toggle State Machine\nDESCRIPTION: Example of creating and using a simple toggle state machine with two states (active/inactive) and transition handling.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/packages/core/index.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine, interpret } from 'xstate';\n\n// Stateless machine definition\n// machine.transition(...) is a pure function used by the interpreter.\nconst toggleMachine = createMachine({\n  id: 'toggle',\n  initial: 'inactive',\n  states: {\n    inactive: { on: { TOGGLE: 'active' } },\n    active: { on: { TOGGLE: 'inactive' } }\n  }\n});\n\n// Machine instance with internal state\nconst toggleService = interpret(toggleMachine)\n  .onTransition((state) => console.log(state.value))\n  .start();\n// => 'inactive'\n\ntoggleService.send({ type: 'TOGGLE' });\n// => 'active'\n\ntoggleService.send({ type: 'TOGGLE' });\n// => 'inactive'\n```\n\n----------------------------------------\n\nTITLE: Defining a Guard Function for XState Transitions\nDESCRIPTION: This snippet demonstrates how to create a guard function and use it in an XState machine definition to control transitions based on conditions.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/guards.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst searchValid = (context, event) => {\n  return context.canSearch && event.query && event.query.length > 0;\n};\n\nconst searchMachine = createMachine(\n  {\n    id: 'search',\n    initial: 'idle',\n    context: {\n      canSearch: true\n    },\n    states: {\n      idle: {\n        on: {\n          SEARCH: [\n            {\n              target: 'searching',\n              // Only transition to 'searching' if the guard (cond) evaluates to true\n              cond: searchValid // or { type: 'searchValid' }\n            },\n            { target: '.invalid' }\n          ]\n        },\n        initial: 'normal',\n        states: {\n          normal: {},\n          invalid: {}\n        }\n      },\n      searching: {\n        entry: 'executeSearch'\n        // ...\n      },\n      searchError: {\n        // ...\n      }\n    }\n  },\n  {\n    guards: {\n      searchValid // optional, if the implementation doesn't change\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Using XState Guards with Context and Events\nDESCRIPTION: This example shows how to use XState guards with machine context and events, demonstrating the behavior of guarded transitions.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/guards.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { interpret } from 'xstate';\n\nconst searchService = interpret(searchMachine)\n  .onTransition((state) => console.log(state.value))\n  .start();\n\nsearchService.send({ type: 'SEARCH', query: '' });\n// => 'idle'\n\nsearchService.send({ type: 'SEARCH', query: 'something' });\n// => 'searching'\n```\n\n----------------------------------------\n\nTITLE: Implementing Parallel State Machine with XState in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a parallel state machine using XState. It models a word processor with toggleable bold, underline, italics, and list formatting options. The machine uses parallel states to manage multiple independent features simultaneously.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/packages/core/index.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMachine, createActor } from 'xstate';\n\nconst wordMachine = createMachine({\n  id: 'word',\n  type: 'parallel',\n  states: {\n    bold: {\n      initial: 'off',\n      states: {\n        on: {\n          on: { TOGGLE_BOLD: 'off' }\n        },\n        off: {\n          on: { TOGGLE_BOLD: 'on' }\n        }\n      }\n    },\n    underline: {\n      initial: 'off',\n      states: {\n        on: {\n          on: { TOGGLE_UNDERLINE: 'off' }\n        },\n        off: {\n          on: { TOGGLE_UNDERLINE: 'on' }\n        }\n      }\n    },\n    italics: {\n      initial: 'off',\n      states: {\n        on: {\n          on: { TOGGLE_ITALICS: 'off' }\n        },\n        off: {\n          on: { TOGGLE_ITALICS: 'on' }\n        }\n      }\n    },\n    list: {\n      initial: 'none',\n      states: {\n        none: {\n          on: {\n            BULLETS: 'bullets',\n            NUMBERS: 'numbers'\n          }\n        },\n        bullets: {\n          on: {\n            NONE: 'none',\n            NUMBERS: 'numbers'\n          }\n        },\n        numbers: {\n          on: {\n            BULLETS: 'bullets',\n            NONE: 'none'\n          }\n        }\n      }\n    }\n  }\n});\n\nconst actor = createActor(wordMachine);\n\nactor.subscribe((state) => {\n  console.log(state.value);\n});\n\nactor.start();\n// logs {\n//   bold: 'off',\n//   italics: 'off',\n//   underline: 'off',\n//   list: 'none'\n// }\n\nactor.send({ type: 'TOGGLE_BOLD' });\n// logs {\n//   bold: 'on',\n//   italics: 'off',\n//   underline: 'off',\n//   list: 'none'\n// }\n\nactor.send({ type: 'TOGGLE_ITALICS' });\n// logs {\n//   bold: 'on',\n//   italics: 'on',\n//   underline: 'off',\n//   list: 'none'\n// }\n```\n\n----------------------------------------\n\nTITLE: Configuring XState Machine States\nDESCRIPTION: Definition of a promise machine with initial state and basic state nodes\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/start.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine } from 'xstate';\n\nconst promiseMachine = createMachine({\n  id: 'promise',\n  initial: 'pending',\n  states: {\n    pending: {},\n    resolved: {},\n    rejected: {}\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Parallel State Machine\nDESCRIPTION: Example of a parallel state machine for text formatting with multiple independent states for bold, underline, italics, and list formatting.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/packages/core/index.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst wordMachine = createMachine({\n  id: 'word',\n  type: 'parallel',\n  states: {\n    bold: {\n      initial: 'off',\n      states: {\n        on: {\n          on: { TOGGLE_BOLD: 'off' }\n        },\n        off: {\n          on: { TOGGLE_BOLD: 'on' }\n        }\n      }\n    },\n    underline: {\n      initial: 'off',\n      states: {\n        on: {\n          on: { TOGGLE_UNDERLINE: 'off' }\n        },\n        off: {\n          on: { TOGGLE_UNDERLINE: 'on' }\n        }\n      }\n    },\n    italics: {\n      initial: 'off',\n      states: {\n        on: {\n          on: { TOGGLE_ITALICS: 'off' }\n        },\n        off: {\n          on: { TOGGLE_ITALICS: 'on' }\n        }\n      }\n    },\n    list: {\n      initial: 'none',\n      states: {\n        none: {\n          on: { BULLETS: 'bullets', NUMBERS: 'numbers' }\n        },\n        bullets: {\n          on: { NONE: 'none', NUMBERS: 'numbers' }\n        },\n        numbers: {\n          on: { BULLETS: 'bullets', NONE: 'none' }\n        }\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Listening for State Transitions in XState Interpreter\nDESCRIPTION: Shows how to register a listener for state transitions using the onTransition method, which is called whenever a state transition occurs in the state machine.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/interpretation.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Interpret the machine\nconst service = interpret(machine);\n\n// Add a state listener, which is called whenever a state transition occurs.\nservice.onTransition((state) => {\n  console.log(state.value);\n});\n\nservice.start();\n```\n\n----------------------------------------\n\nTITLE: Defining State Transitions in XState\nDESCRIPTION: This snippet demonstrates how to define state transitions in XState using the 'on' property. It shows both shorthand and object notation for transitions, as well as how to use the machine's transition method.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/transitions.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine } from 'xstate';\n\nconst promiseMachine = createMachine({\n  id: 'promise',\n  initial: 'pending',\n  states: {\n    pending: {\n      on: {\n        // state transition (shorthand)\n        // this is equivalent to { target: 'resolved' }\n        RESOLVE: 'resolved',\n\n        // state transition (object)\n        REJECT: {\n          target: 'rejected'\n        }\n      }\n    },\n    resolved: {\n      type: 'final'\n    },\n    rejected: {\n      type: 'final'\n    }\n  }\n});\n\nconst { initialState } = promiseMachine;\n\nconsole.log(initialState.value);\n// => 'pending'\n\nconst nextState = promiseMachine.transition(initialState, { type: 'RESOLVE' });\n\nconsole.log(nextState.value);\n// => 'resolved'\n```\n\n----------------------------------------\n\nTITLE: Hierarchical Traffic Light with Pedestrian States\nDESCRIPTION: Advanced example showing nested state machine implementation with pedestrian crossing states.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/README.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine, createActor } from 'xstate';\n\nconst pedestrianStates = {\n  initial: 'walk',\n  states: {\n    walk: {\n      on: {\n        PED_TIMER: 'wait'\n      }\n    },\n    wait: {\n      on: {\n        PED_TIMER: 'stop'\n      }\n    },\n    stop: {}\n  }\n};\n\nconst lightMachine = createMachine({\n  id: 'light',\n  initial: 'green',\n  states: {\n    green: {\n      on: {\n        TIMER: 'yellow'\n      }\n    },\n    yellow: {\n      on: {\n        TIMER: 'red'\n      }\n    },\n    red: {\n      on: {\n        TIMER: 'green'\n      },\n      ...pedestrianStates\n    }\n  }\n});\n\nconst actor = createActor(lightMachine);\n\nactor.subscribe((state) => {\n  console.log(state.value);\n});\n\nactor.start();\n// logs 'green'\n\nactor.send({ type: 'TIMER' });\n// logs 'yellow'\n\nactor.send({ type: 'TIMER' });\n// logs { red: 'walk' }\n\nactor.send({ type: 'PED_TIMER' });\n// logs { red: 'wait' }\n```\n\n----------------------------------------\n\nTITLE: Basic XState Interpreter Usage in JavaScript\nDESCRIPTION: Demonstrates how to create, start, and use an XState interpreter service to manage a state machine, including transition listening, sending events, and stopping the service.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/interpretation.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine, interpret } from 'xstate';\n\nconst machine = createMachine(/* machine config */);\n\n// Interpret the machine, and add a listener for whenever a transition occurs.\nconst service = interpret(machine).onTransition((state) => {\n  console.log(state.value);\n});\n\n// Start the service\nservice.start();\n\n// Send events\nservice.send({ type: 'SOME_EVENT' });\n\n// Stop the service when you are no longer using it.\nservice.stop();\n```\n\n----------------------------------------\n\nTITLE: Spawning Observable Actors in XState\nDESCRIPTION: Demonstrates how to spawn an observable as an actor using RxJS interval and map operators. The observable emits count updates at specified intervals.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/actors.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { interval } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nconst createCounterObservable = (ms) => interval(ms)\n  .pipe(map(count => ({ type: 'COUNT.UPDATE', count })))\n\nconst machine = createMachine({\n  context: { ms: 1000 },\n  // ...\n  {\n    actions: assign({\n      counterRef: ({ ms }) => spawn(createCounterObservable(ms))\n    })\n  }\n  // ...\n  on: {\n    'COUNT.UPDATE': { /* ... */ }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Events to Named Actors in XState\nDESCRIPTION: Example showing how to reference and send events to actors using a named identifier instead of context references. The actor is spawned with a name and then referenced by that name.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/actors.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst loginMachine = createMachine({\n  // ...\n  entry: assign({\n    formRef: () => spawn(formMachine, 'form')\n  }),\n  states: {\n    idle: {\n      on: {\n        LOGIN: {\n          actions: send({ type: 'SUBMIT' }, { to: 'form' })\n        }\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Subreddit Machine in XState\nDESCRIPTION: Creates a state machine for managing subreddit loading states and data. Handles loading, success, and failure states with support for refreshing content.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/tutorials/reddit.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst createSubredditMachine = (subreddit) => {\n  return createMachine({\n    id: 'subreddit',\n    initial: 'loading',\n    context: {\n      subreddit,\n      posts: null,\n      lastUpdated: null\n    },\n    states: {\n      loading: {\n        invoke: {\n          id: 'fetch-subreddit',\n          src: invokeFetchSubreddit,\n          onDone: {\n            target: 'loaded',\n            actions: assign({\n              posts: (_, event) => event.data,\n              lastUpdated: () => Date.now()\n            })\n          },\n          onError: 'failure'\n        }\n      },\n      loaded: {\n        on: {\n          REFRESH: 'loading'\n        }\n      },\n      failure: {\n        on: {\n          RETRY: 'loading'\n        }\n      }\n    }\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Flight Booking XState Machine Implementation\nDESCRIPTION: Complete implementation of the flight booking state machine using XState. Handles state transitions, form validation, and context updates for the flight booking interface.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/tutorials/7guis/flight.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine, assign } from 'xstate';\n\nexport const flightMachine = createMachine({\n  id: 'flight',\n  initial: 'editing',\n  context: {\n    startDate: undefined,\n    returnDate: undefined,\n    trip: 'oneWay' // or 'roundTrip'\n  },\n  states: {\n    editing: {\n      on: {\n        'startDate.UPDATE': {\n          actions: assign({\n            startDate: (_, event) => event.value\n          })\n        },\n        'returnDate.UPDATE': {\n          actions: assign({\n            returnDate: (_, event) => event.value\n          }),\n          cond: (context) => context.trip === 'roundTrip'\n        },\n        SET_TRIP: {\n          actions: assign({\n            trip: (_, event) => event.value\n          }),\n          cond: (_, event) =>\n            event.value === 'oneWay' || event.value === 'roundTrip'\n        },\n        SUBMIT: {\n          target: 'submitted',\n          cond: (context) => {\n            if (context.trip === 'oneWay') {\n              return !!context.startDate;\n            } else {\n              return (\n                !!context.startDate &&\n                !!context.returnDate &&\n                context.returnDate > context.startDate\n              );\n            }\n          }\n        }\n      }\n    },\n    submitted: {\n      type: 'final'\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Delayed Transitions in XState\nDESCRIPTION: This snippet demonstrates how to create a state machine with delayed transitions using the 'after' property. It shows a traffic light example with automatic transitions between states after specified delays.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/delays.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst lightDelayMachine = createMachine({\n  id: 'lightDelay',\n  initial: 'green',\n  states: {\n    green: {\n      after: {\n        // after 1 second, transition to yellow\n        1000: { target: 'yellow' }\n      }\n    },\n    yellow: {\n      after: {\n        // after 0.5 seconds, transition to red\n        500: { target: 'red' }\n      }\n    },\n    red: {\n      after: {\n        // after 2 seconds, transition to green\n        2000: { target: 'green' }\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: XState Context Quick Reference Examples\nDESCRIPTION: Collection of common context manipulation patterns including initial context setting, dynamic context, and context assignments.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/context.md#2025-04-20_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// Set initial context\nconst machine = createMachine({\n  context: {\n    count: 0,\n    user: undefined\n  }\n});\n\n// Set dynamic initial context\nconst createSomeMachine = (count, user) => {\n  return createMachine({\n    context: {\n      count,\n      user\n    }\n  });\n};\n\n// Custom initial context\nconst myMachine = machine.withContext({\n  count: 10,\n  user: {\n    name: 'David'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Parallel State Machines with XState in TypeScript\nDESCRIPTION: This example demonstrates how to create a parallel state machine to manage multiple independent states (bold, underline, italics, and list formatting) concurrently. Each child state has its own events and transitions, allowing for independent state changes while maintaining a unified state object.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/README.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMachine, createActor } from 'xstate';\n\nconst wordMachine = createMachine({\n  id: 'word',\n  type: 'parallel',\n  states: {\n    bold: {\n      initial: 'off',\n      states: {\n        on: {\n          on: { TOGGLE_BOLD: 'off' }\n        },\n        off: {\n          on: { TOGGLE_BOLD: 'on' }\n        }\n      }\n    },\n    underline: {\n      initial: 'off',\n      states: {\n        on: {\n          on: { TOGGLE_UNDERLINE: 'off' }\n        },\n        off: {\n          on: { TOGGLE_UNDERLINE: 'on' }\n        }\n      }\n    },\n    italics: {\n      initial: 'off',\n      states: {\n        on: {\n          on: { TOGGLE_ITALICS: 'off' }\n        },\n        off: {\n          on: { TOGGLE_ITALICS: 'on' }\n        }\n      }\n    },\n    list: {\n      initial: 'none',\n      states: {\n        none: {\n          on: {\n            BULLETS: 'bullets',\n            NUMBERS: 'numbers'\n          }\n        },\n        bullets: {\n          on: {\n            NONE: 'none',\n            NUMBERS: 'numbers'\n          }\n        },\n        numbers: {\n          on: {\n            BULLETS: 'bullets',\n            NONE: 'none'\n          }\n        }\n      }\n    }\n  }\n});\n\nconst actor = createActor(wordMachine);\n\nactor.subscribe((state) => {\n  console.log(state.value);\n});\n\nactor.start();\n// logs {\n//   bold: 'off',\n//   italics: 'off',\n//   underline: 'off',\n//   list: 'none'\n// }\n\nactor.send({ type: 'TOGGLE_BOLD' });\n// logs {\n//   bold: 'on',\n//   italics: 'off',\n//   underline: 'off',\n//   list: 'none'\n// }\n\nactor.send({ type: 'TOGGLE_ITALICS' });\n// logs {\n//   bold: 'on',\n//   italics: 'on',\n//   underline: 'off',\n//   list: 'none'\n// }\n```\n\n----------------------------------------\n\nTITLE: Configuring and Using a Fetch State Machine in React\nDESCRIPTION: Example of creating and configuring a fetch state machine with custom actions and services in a React component. This demonstrates a complete implementation with state handling for idle, loading, success, and failure states.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/packages/xstate-react/index.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst fetchMachine = createMachine({\n  id: 'fetch',\n  initial: 'idle',\n  context: {\n    data: undefined,\n    error: undefined\n  },\n  states: {\n    idle: {\n      on: { FETCH: 'loading' }\n    },\n    loading: {\n      invoke: {\n        src: 'fetchData',\n        onDone: {\n          target: 'success',\n          actions: assign({\n            data: (_, event) => event.data\n          })\n        },\n        onError: {\n          target: 'failure',\n          actions: assign({\n            error: (_, event) => event.data\n          })\n        }\n      }\n    },\n    success: {\n      entry: 'notifySuccess',\n      type: 'final'\n    },\n    failure: {\n      on: {\n        RETRY: 'loading'\n      }\n    }\n  }\n});\n\nconst Fetcher = ({ onResolve }) => {\n  const [state, send] = useMachine(fetchMachine, {\n    actions: {\n      notifySuccess: (ctx) => onResolve(ctx.data)\n    },\n    services: {\n      fetchData: (_, e) =>\n        fetch(`some/api/${e.query}`).then((res) => res.json())\n    }\n  });\n\n  switch (state.value) {\n    case 'idle':\n      return (\n        <button onClick={() => send({ type: 'FETCH', query: 'something' })}>\n          Search for something\n        </button>\n      );\n    case 'loading':\n      return <div>Searching...</div>;\n    case 'success':\n      return <div>Success! Data: {state.context.data}</div>;\n    case 'failure':\n      return (\n        <>\n          <p>{state.context.error.message}</p>\n          <button onClick={() => send('RETRY')}>Retry</button>\n        </>\n      );\n    default:\n      return null;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Guards in XState Transitions\nDESCRIPTION: This snippet demonstrates how to use multiple guards in XState to control transitions to different states based on various conditions.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/guards.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine, actions, interpret, assign } from 'xstate';\n\nconst doorMachine = createMachine(\n  {\n    id: 'door',\n    initial: 'closed',\n    context: {\n      level: 'user',\n      alert: false // alert when intrusions happen\n    },\n    states: {\n      closed: {\n        initial: 'idle',\n        states: {\n          idle: {},\n          error: {}\n        },\n        on: {\n          SET_ADMIN: {\n            actions: assign({ level: 'admin' })\n          },\n          SET_ALARM: {\n            actions: assign({ alert: true })\n          },\n          OPEN: [\n            // Transitions are tested one at a time.\n            // The first valid transition will be taken.\n            { target: 'opened', cond: 'isAdmin' },\n            { target: '.error', cond: 'shouldAlert' },\n            { target: '.idle' }\n          ]\n        }\n      },\n      opened: {\n        on: {\n          CLOSE: { target: 'closed' }\n        }\n      }\n    }\n  },\n  {\n    guards: {\n      isAdmin: (context) => context.level === 'admin',\n      shouldAlert: (context) => context.alert === true\n    }\n  }\n);\n\nconst doorService = interpret(doorMachine)\n  .onTransition((state) => console.log(state.value))\n  .start();\n// => { closed: 'idle' }\n\ndoorService.send({ type: 'OPEN' });\n// => { closed: 'idle' }\n\ndoorService.send({ type: 'SET_ALARM' });\n// => { closed: 'idle' }\n// (state does not change, but context changes)\n\ndoorService.send({ type: 'OPEN' });\n// => { closed: 'error' }\n\ndoorService.send({ type: 'SET_ADMIN' });\n// => { closed: 'error' }\n// (state does not change, but context changes)\n\ndoorService.send({ type: 'OPEN' });\n// => 'opened'\n// (since context.isAdmin === true)\n```\n\n----------------------------------------\n\nTITLE: Dynamic Delay Expressions in XState\nDESCRIPTION: This snippet illustrates how to use dynamic delay expressions in XState. It shows both string delay references and direct function implementations for specifying delays based on context or events.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/delays.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst lightDelayMachine = createMachine(\n  {\n    id: 'lightDelay',\n    initial: 'green',\n    context: {\n      trafficLevel: 'low'\n    },\n    states: {\n      green: {\n        after: {\n          // after 1 second, transition to yellow\n          LIGHT_DELAY: { target: 'yellow' }\n        }\n      },\n      yellow: {\n        after: {\n          YELLOW_LIGHT_DELAY: { target: 'red' }\n        }\n      }\n      // ...\n    }\n  },\n  {\n    // String delays configured here\n    delays: {\n      LIGHT_DELAY: (context, event) => {\n        return context.trafficLevel === 'low' ? 1000 : 3000;\n      },\n      YELLOW_LIGHT_DELAY: 500 // static value\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Parallel State Machine in XState\nDESCRIPTION: Demonstrates how to create a parallel state machine for managing text formatting options like bold, italics, underline, and list styles. Each formatting option operates independently and can be toggled between different states.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/README.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMachine, createActor } from 'xstate';\n\nconst wordMachine = createMachine({\n  id: 'word',\n  type: 'parallel',\n  states: {\n    bold: {\n      initial: 'off',\n      states: {\n        on: {\n          on: { TOGGLE_BOLD: 'off' }\n        },\n        off: {\n          on: { TOGGLE_BOLD: 'on' }\n        }\n      }\n    },\n    underline: {\n      initial: 'off',\n      states: {\n        on: {\n          on: { TOGGLE_UNDERLINE: 'off' }\n        },\n        off: {\n          on: { TOGGLE_UNDERLINE: 'on' }\n        }\n      }\n    },\n    italics: {\n      initial: 'off',\n      states: {\n        on: {\n          on: { TOGGLE_ITALICS: 'off' }\n        },\n        off: {\n          on: { TOGGLE_ITALICS: 'on' }\n        }\n      }\n    },\n    list: {\n      initial: 'none',\n      states: {\n        none: {\n          on: {\n            BULLETS: 'bullets',\n            NUMBERS: 'numbers'\n          }\n        },\n        bullets: {\n          on: {\n            NONE: 'none',\n            NUMBERS: 'numbers'\n          }\n        },\n        numbers: {\n          on: {\n            BULLETS: 'bullets',\n            NONE: 'none'\n          }\n        }\n      }\n    }\n  }\n});\n\nconst actor = createActor(wordMachine);\n\nactor.subscribe((state) => {\n  console.log(state.value);\n});\n\nactor.start();\n\nactor.send({ type: 'TOGGLE_BOLD' });\n\nactor.send({ type: 'TOGGLE_ITALICS' });\n```\n\n----------------------------------------\n\nTITLE: Extending Machine Configuration in XState\nDESCRIPTION: Demonstrates how to extend an existing machine using .withConfig() to override action implementations.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/machines.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst noAlertLightMachine = lightMachine.withConfig({\n  actions: {\n    alertGreen: (context, event) => {\n      console.log('green');\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Traffic Light State Machine Example\nDESCRIPTION: Implementation of a basic traffic light system using finite state machine pattern.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/README.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine, createActor } from 'xstate';\n\nconst lightMachine = createMachine({\n  id: 'light',\n  initial: 'green',\n  states: {\n    green: {\n      on: {\n        TIMER: 'yellow'\n      }\n    },\n    yellow: {\n      on: {\n        TIMER: 'red'\n      }\n    },\n    red: {\n      on: {\n        TIMER: 'green'\n      }\n    }\n  }\n});\n\nconst actor = createActor(lightMachine);\n\nactor.subscribe((state) => {\n  console.log(state.value);\n});\n\nactor.start();\n// logs 'green'\n\nactor.send({ type: 'TIMER' });\n// logs 'yellow'\n```\n\n----------------------------------------\n\nTITLE: Creating Temperature Converter State Machine with XState in JavaScript\nDESCRIPTION: This code snippet defines a state machine for a temperature converter using XState. It handles bidirectional conversion between Celsius and Fahrenheit, updating the context based on user input events.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/tutorials/7guis/temperature.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine, assign } from 'xstate';\n\nexport const temperatureMachine = createMachine({\n  initial: 'active',\n  context: { C: undefined, F: undefined },\n  states: {\n    active: {\n      on: {\n        CELSIUS: {\n          actions: assign({\n            C: (_, event) => event.value,\n            F: (_, event) =>\n              event.value.length ? +event.value * (9 / 5) + 32 : ''\n          })\n        },\n        FAHRENHEIT: {\n          actions: assign({\n            C: (_, event) =>\n              event.value.length ? (+event.value - 32) * (5 / 9) : '',\n            F: (_, event) => event.value\n          })\n        }\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Internal Transitions in XState\nDESCRIPTION: This snippet demonstrates how to define internal transitions in XState. Internal transitions do not exit the current state node and can be specified using relative targets or by setting { internal: true }. It shows examples of different ways to define internal transitions.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/transitions.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine } from 'xstate';\n\nconst wordMachine = createMachine({\n  id: 'word',\n  initial: 'left',\n  states: {\n    left: {},\n    right: {},\n    center: {},\n    justify: {}\n  },\n  on: {\n    // internal transitions\n    LEFT_CLICK: '.left',\n    RIGHT_CLICK: { target: '.right' }, // same as '.right'\n    CENTER_CLICK: { target: '.center', internal: true }, // same as '.center'\n    JUSTIFY_CLICK: { target: '.justify', internal: true } // same as '.justify'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using StateIn Guard Instead of 'in' Property in XState\nDESCRIPTION: Migration example showing how to replace the removed 'in' property with the new stateIn() guard creator for state-based transitions in XState v5.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_142\n\nLANGUAGE: javascript\nCODE:\n```\nimport { stateIn } from 'xstate/guards';\n\n// ...\non: {\n  SOME_EVENT: {\n    target: 'somewhere',\n-   in: '#someState'\n+   cond: stateIn('#someState')\n  }\n}\n// ...\n```\n\n----------------------------------------\n\nTITLE: Creating Basic State Machine in XState\nDESCRIPTION: Demonstrates the basic configuration of a state machine using createMachine() function, including machine identifier, initial state, context, and state definitions.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/machines.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine } from 'xstate';\n\nconst lightMachine = createMachine({\n  // Machine identifier\n  id: 'light',\n\n  // Initial state\n  initial: 'green',\n\n  // Local context for entire machine\n  context: {\n    elapsed: 0,\n    direction: 'east'\n  },\n\n  // State definitions\n  states: {\n    green: {\n      /* ... */\n    },\n    yellow: {\n      /* ... */\n    },\n    red: {\n      /* ... */\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Migrating from schema to types in XState Machine Configuration\nDESCRIPTION: Shows how to update machine configuration from using the schema property to the new types property for TypeScript type definitions. Also demonstrates how to move tsTypes to types.typegen.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nconst machine = createMachine({\n  // schema: { ... }\n  types: {} as {\n    context: { ... };\n    events: { ... };\n    // ...\n  }\n});\n\nconst machine = createMachine({\n  // tsTypes: { ... }\n  types: {} as {\n    typegen: {};\n    context: { ... };\n    events: { ... };\n    // ...\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Interpreting Delayed Actions in XState\nDESCRIPTION: This code snippet demonstrates how to interpret and test delayed actions in XState using the interpreter and SimulatedClock. It shows both real-time interpretation and simulated time advancement for testing purposes.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/delays.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { interpret } from 'xstate';\n\nconst service = interpret(lightDelayMachine).onTransition((state) =>\n  console.log(state.value)\n);\n\nservice.start();\n// => 'green'\n\n// (after 1 second)\n\n// => 'yellow'\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { interpret } from 'xstate';\n// import { SimulatedClock } from 'xstate/lib/interpreter'; // < 4.6.0\nimport { SimulatedClock } from 'xstate/lib/SimulatedClock'; // >= 4.6.0\n\nconst simulatedClock = new SimulatedClock();\nconst service = interpret(lightDelayMachine, {\n  clock: simulatedClock\n}).onTransition((state) => console.log(state.value));\n\nservice.start();\n// => 'green'\n\n// move the SimulatedClock forward by 1 second\nsimulatedClock.increment(1000);\n// => 'yellow'\n```\n\n----------------------------------------\n\nTITLE: Invoking Promise Service in XState\nDESCRIPTION: Example of invoking a Promise-based API call service in XState with success and error handling. The machine fetches user data and handles both successful and failed responses.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/communication.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst userMachine = createMachine({\n  id: 'user',\n  initial: 'idle',\n  context: {\n    userId: 42,\n    user: undefined,\n    error: undefined\n  },\n  states: {\n    idle: {\n      on: {\n        FETCH: { target: 'loading' }\n      }\n    },\n    loading: {\n      invoke: {\n        id: 'getUser',\n        src: (context, event) => fetchUser(context.userId),\n        onDone: {\n          target: 'success',\n          actions: assign({ user: (context, event) => event.data })\n        },\n        onError: {\n          target: 'failure',\n          actions: assign({ error: (context, event) => event.data })\n        }\n      }\n    },\n    success: {},\n    failure: {\n      on: {\n        RETRY: { target: 'loading' }\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Parallel State Nodes in XState\nDESCRIPTION: This snippet demonstrates how to create a parallel state node in XState. It shows a file machine with simultaneous 'upload' and 'download' states, allowing concurrent operations.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/parallel.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst fileMachine = createMachine({\n  id: 'file',\n  type: 'parallel',\n  states: {\n    upload: {\n      initial: 'idle',\n      states: {\n        idle: {\n          on: {\n            INIT_UPLOAD: { target: 'pending' }\n          }\n        },\n        pending: {\n          on: {\n            UPLOAD_COMPLETE: { target: 'success' }\n          }\n        },\n        success: {}\n      }\n    },\n    download: {\n      initial: 'idle',\n      states: {\n        idle: {\n          on: {\n            INIT_DOWNLOAD: { target: 'pending' }\n          }\n        },\n        pending: {\n          on: {\n            DOWNLOAD_COMPLETE: { target: 'success' }\n          }\n        },\n        success: {}\n      }\n    }\n  }\n});\n\nconsole.log(fileMachine.initialState.value);\n// => {\n//   upload: 'idle',\n//   download: 'idle'\n// }\n```\n\n----------------------------------------\n\nTITLE: Sending Events to Specific Targets in XState (JavaScript)\nDESCRIPTION: Demonstrates how to use the send action creator to send events to specific targets, such as invoked services or spawned actors. It also shows how to use target expressions to dynamically determine the recipient.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/actions.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\ninvoke: {\n  id: 'some-service-id',\n  src: 'someService',\n  // ...\n},\n// ...\n// Indicates to send { type: 'SOME_EVENT' } to the invoked service\nactions: send({ type: 'SOME_EVENT' }, { to: 'some-service-id' })\n```\n\nLANGUAGE: javascript\nCODE:\n```\nentry: assign({\n  someActor: () => {\n    return spawn(someMachine, 'some-actor-name');\n  }\n}),\n  // ...\n\n  // Send { type: 'SOME_EVENT' } to the actor ref\n  {\n    actions: send(\n      { type: 'SOME_EVENT' },\n      {\n        to: (context) => context.someActor\n      }\n    )\n  };\n```\n\n----------------------------------------\n\nTITLE: Passing Input Data to Machines with createActor\nDESCRIPTION: Demonstrates how to pass input data to a machine using the new input property in createActor. The input data is passed in the xstate.init event and can be accessed in the context.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nconst greetMachine = createMachine({\n  context: ({ input }) => ({\n    greeting: `Hello ${input.name}!`\n  }),\n  entry: (_, event) => {\n    event.type; // 'xstate.init'\n    event.input; // { name: 'David' }\n  }\n  // ...\n});\n\nconst actor = createActor(greetMachine, {\n  // Pass input data to the machine\n  input: { name: 'David' }\n}).start();\n```\n\n----------------------------------------\n\nTITLE: Using useMachine Hook with React and XState\nDESCRIPTION: Example of using the useMachine hook to create a toggle button component with XState in React.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/packages/xstate-react/index.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useMachine } from '@xstate/react';\nimport { createMachine } from 'xstate';\n\nconst toggleMachine = createMachine({\n  id: 'toggle',\n  initial: 'inactive',\n  states: {\n    inactive: {\n      on: { TOGGLE: 'active' }\n    },\n    active: {\n      on: { TOGGLE: 'inactive' }\n    }\n  }\n});\n\nexport const Toggler = () => {\n  const [state, send] = useMachine(toggleMachine);\n\n  return (\n    <button onClick={() => send('TOGGLE')}>\n      {state.value === 'inactive'\n        ? 'Click to activate'\n        : 'Active! Click to deactivate'}\n    </button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring XState Machine in Vue 3 Component\nDESCRIPTION: Comprehensive example of configuring and using an XState machine in a Vue 3 component, including custom actions and services.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/packages/xstate-vue/index.md#2025-04-20_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { assign, createMachine } from 'xstate';\nimport { useMachine } from '@xstate/vue';\n\nconst fetchMachine = createMachine({\n  id: 'fetch',\n  initial: 'idle',\n  context: {\n    data: undefined,\n    error: undefined\n  },\n  states: {\n    idle: {\n      on: { FETCH: 'loading' }\n    },\n    loading: {\n      invoke: {\n        src: 'fetchData',\n        onDone: {\n          target: 'success',\n          actions: assign({\n            data: (_context, event) => event.data\n          })\n        },\n        onError: {\n          target: 'failure',\n          actions: assign({\n            error: (_context, event) => event.data\n          })\n        }\n      }\n    },\n    success: {\n      entry: 'notifySuccess',\n      type: 'final'\n    },\n    failure: {\n      on: {\n        RETRY: 'loading'\n      }\n    }\n  }\n});\n\nconst props = defineProps({\n  onResolve: {\n    type: Function,\n    default: () => {}\n  }\n});\n\nconst { state, send } = useMachine(fetchMachine, {\n  actions: {\n    notifySuccess: (ctx) => props.onResolve(ctx.data)\n  },\n  services: {\n    fetchData: (_context, event) =>\n      fetch(`some/api/${event.query}`).then((res) => res.json())\n  }\n});\n</script>\n\n<template>\n  <template v-if=\"state.value === 'idle'\">\n    <button @click=\"send({ type: 'FETCH', query: 'something' })\">\n      Search for something\n    </button>\n  </template>\n\n  <template v-else-if=\"state.value === 'loading'\">\n    <div>Searching...</div>\n  </template>\n\n  <template v-else-if=\"state.value === 'success'\">\n    <div>Success! {{ state.context.data }}</div>\n  </template>\n\n  <template v-else-if=\"state.value === 'failure'\">\n    <p>{{ state.context.error.message }}</p>\n    <button @click=\"send('RETRY')\">Retry</button>\n  </template>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using the Machine Transition Method in XState\nDESCRIPTION: This snippet shows how to use the machine.transition() method to determine the next state based on the current state and an event. It demonstrates transitioning from one state to another in a light machine.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/transitions.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst lightMachine = createMachine({\n  /* ... */\n});\n\nconst greenState = lightMachine.initialState;\n\n// determine next state based on current state and event\nconst yellowState = lightMachine.transition(greenState, { type: 'TIMER' });\n\nconsole.log(yellowState.value);\n// => 'yellow'\n```\n\n----------------------------------------\n\nTITLE: Creating Machine from Model with Type Safety\nDESCRIPTION: Shows how to create a state machine from a model while maintaining type safety for context and events.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/models.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst machine = userModel.createMachine({\n  context: userModel.initialContext,\n  initial: 'active',\n  states: {\n    active: {\n      on: {\n        updateName: {\n          actions: userModel.assign({\n            name: (_, event) => event.value // inferred\n          })\n        }\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Spawning Machines in XState\nDESCRIPTION: This snippet demonstrates how to spawn a machine actor within a parent machine. It shows the creation of a remote machine and a parent machine that spawns the remote machine as a child actor.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/actors.md#2025-04-20_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst remoteMachine = createMachine({\n  id: 'remote',\n  initial: 'offline',\n  states: {\n    offline: {\n      on: {\n        WAKE: 'online'\n      }\n    },\n    online: {\n      after: {\n        1000: {\n          actions: sendParent({ type: 'REMOTE.ONLINE' })\n        }\n      }\n    }\n  }\n});\n\nconst parentMachine = createMachine({\n  id: 'parent',\n  initial: 'waiting',\n  context: {\n    localOne: null\n  },\n  states: {\n    waiting: {\n      entry: assign({\n        localOne: () => spawn(remoteMachine)\n      }),\n      on: {\n        'LOCAL.WAKE': {\n          actions: send({ type: 'WAKE' }, { to: (context) => context.localOne })\n        },\n        'REMOTE.ONLINE': { target: 'connected' }\n      }\n    },\n    connected: {}\n  }\n});\n\nconst parentService = interpret(parentMachine)\n  .onTransition((state) => console.log(state.value))\n  .start();\n\nparentService.send({ type: 'LOCAL.WAKE' });\n// => 'waiting'\n// ... after 1000ms\n// => 'connected'\n```\n\n----------------------------------------\n\nTITLE: Invoking Child Machines in XState\nDESCRIPTION: Shows how to invoke child state machines and handle their completion data.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/communication.md#2025-04-20_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst someMachine = createMachine({ /* ... */ });\n\n// ...\n{\n  invoke: {\n    src: someMachine,\n    onDone: {\n      target: 'finished',\n      actions: (context, event) => {\n        // Child machine's done data (.data property of its final state)\n        console.log(event.data);\n      }\n    }\n  }\n}\n// ...\n```\n\n----------------------------------------\n\nTITLE: Using Signal with fromPromise for Cancellation in TypeScript\nDESCRIPTION: Demonstrates how to use the signal parameter in fromPromise to enable cancellation of fetch requests when the actor is stopped or the state transitions. This helps prevent memory leaks and unnecessary network requests.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst logic = fromPromise(({ signal }) =>\n  fetch('https://api.example.com', { signal })\n);\n```\n\n----------------------------------------\n\nTITLE: Stopping Actors in XState\nDESCRIPTION: Example showing how to stop actors using the stop action creator. It demonstrates stopping an actor both by reference and by ID.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/actors.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst someMachine = createMachine({\n  // ...\n  entry: [\n    // Stopping an actor by reference\n    stop((context) => context.someActorRef),\n    // Stopping an actor by ID\n    stop('some-actor')\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a Basic Toggle State Machine\nDESCRIPTION: Example of defining a simple state machine with two states (active and inactive) and using the XState interpreter to execute transitions between states.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/packages/core/index.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine, interpret } from 'xstate';\n\n// Stateless machine definition\n// machine.transition(...) is a pure function used by the interpreter.\nconst toggleMachine = createMachine({\n  id: 'toggle',\n  initial: 'inactive',\n  states: {\n    inactive: { on: { TOGGLE: 'active' } },\n    active: { on: { TOGGLE: 'inactive' } }\n  }\n});\n\n// Machine instance with internal state\nconst toggleService = interpret(toggleMachine)\n  .onTransition((state) => console.log(state.value))\n  .start();\n// => 'inactive'\n\ntoggleService.send({ type: 'TOGGLE' });\n// => 'active'\n\ntoggleService.send({ type: 'TOGGLE' });\n// => 'inactive'\n```\n\n----------------------------------------\n\nTITLE: Starting and Stopping XState Services in JavaScript\nDESCRIPTION: Shows how to initialize, stop, and restart an XState service, as well as how to start a service from a specific state rather than the machine's initial state.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/interpretation.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst service = interpret(machine);\n\n// Start the machine\nservice.start();\n\n// Stop the machine\nservice.stop();\n\n// Restart the machine\nservice.start();\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Starts the service from the specified state,\n// instead of from the machine's initial state.\nservice.start(previousState);\n```\n\n----------------------------------------\n\nTITLE: Machine Transition Method Example\nDESCRIPTION: Shows how to use the machine.transition() method to determine the next state based on current state and event.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/transitions.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst lightMachine = createMachine({\n  /* ... */\n});\n\nconst greenState = lightMachine.initialState;\n\n// determine next state based on current state and event\nconst yellowState = lightMachine.transition(greenState, { type: 'TIMER' });\n\nconsole.log(yellowState.value);\n// => 'yellow'\n```\n\n----------------------------------------\n\nTITLE: Hierarchical Transitions in XState\nDESCRIPTION: This example illustrates hierarchical transitions in XState, demonstrating how transitions are prioritized based on their depth in the state tree. It shows transitions between nested states and how parent state transitions are superseded by more specific child state transitions.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/transitions.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst wizardMachine = createMachine({\n  id: 'wizard',\n  initial: 'open',\n  states: {\n    open: {\n      initial: 'step1',\n      states: {\n        step1: {\n          on: {\n            NEXT: { target: 'step2' }\n          }\n        },\n        step2: {\n          /* ... */\n        },\n        step3: {\n          /* ... */\n        }\n      },\n      on: {\n        NEXT: { target: 'goodbye' },\n        CLOSE: { target: 'closed' }\n      }\n    },\n    goodbye: {\n      on: {\n        CLOSE: { target: 'closed' }\n      }\n    },\n    closed: {\n      type: 'final'\n    }\n  }\n});\n\n// { open: 'step1' }\nconst { initialState } = wizardMachine;\n\n// the NEXT transition defined on 'open.step1'\n// supersedes the NEXT transition defined\n// on the parent 'open' state\nconst nextStepState = wizardMachine.transition(initialState, { type: 'NEXT' });\nconsole.log(nextStepState.value);\n// => { open: 'step2' }\n\n// there is no CLOSE transition on 'open.step1'\n// so the event is passed up to the parent\n// 'open' state, where it is defined\nconst closedState = wizardMachine.transition(initialState, { type: 'CLOSE' });\nconsole.log(closedState.value);\n// => 'closed'\n```\n\n----------------------------------------\n\nTITLE: Invoking Callbacks in XState\nDESCRIPTION: This snippet demonstrates how to invoke a callback in XState, including sending events to the parent machine and performing cleanup when the state is exited.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/communication.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\ncounting: {\n  invoke: {\n    id: 'incInterval',\n    src: (context, event) => (callback, onReceive) => {\n      // This will send the 'INC' event to the parent every second\n      const id = setInterval(() => callback('INC'), 1000);\n\n      // Perform cleanup\n      return () => clearInterval(id);\n    }\n  },\n  on: {\n    INC: { actions: assign({ counter: context => context.counter + 1 }) }\n  }\n}\n// ...\n```\n\n----------------------------------------\n\nTITLE: Marking final states in the Promise state machine\nDESCRIPTION: Complete Promise state machine with final state types for resolved and rejected states. This indicates that the machine terminates when it reaches either of these states.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/start.md#2025-04-20_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { createMachine } from 'xstate';\n\nconst promiseMachine = createMachine({\n  id: 'promise',\n  initial: 'pending',\n  states: {\n    pending: {\n      on: {\n        RESOLVE: { target: 'resolved' },\n        REJECT: { target: 'rejected' }\n      }\n    },\n    resolved: {\n      type: 'final'\n    },\n    rejected: {\n      type: 'final'\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking Side Effects in XState Machine Tests\nDESCRIPTION: This snippet demonstrates how to mock services and actions in XState machines during testing. It uses the machine.withConfig() method to replace the implementation of services with test doubles and track action executions without performing actual side effects.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/testing.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { fetchMachine } from '../path/to/fetchMachine';\n\nit('should eventually reach \"success\"', (done) => {\n  let userAlerted = false;\n\n  const mockFetchMachine = fetchMachine.withConfig({\n    services: {\n      fetchFromAPI: (_, event) =>\n        new Promise((resolve) => {\n          setTimeout(() => {\n            resolve({ id: event.id });\n          }, 50);\n        })\n    },\n    actions: {\n      alertUser: () => {\n        // set a flag instead of executing the original action\n        userAlerted = true;\n      }\n    }\n  });\n\n  const fetchService = interpret(mockFetchMachine).onTransition((state) => {\n    if (state.matches('success')) {\n      // assert that effects were executed\n      expect(userAlerted).toBeTruthy();\n      done();\n    }\n  });\n\n  fetchService.start();\n\n  fetchService.send({ type: 'FETCH', id: 42 });\n});\n```\n\n----------------------------------------\n\nTITLE: Using History States in a Payment State Machine\nDESCRIPTION: Demonstration of using history states to remember and return to previous states in a payment process state machine with method selection and review states.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/packages/core/index.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst paymentMachine = createMachine({\n  id: 'payment',\n  initial: 'method',\n  states: {\n    method: {\n      initial: 'cash',\n      states: {\n        cash: { on: { SWITCH_CHECK: 'check' } },\n        check: { on: { SWITCH_CASH: 'cash' } },\n        hist: { type: 'history' }\n      },\n      on: { NEXT: 'review' }\n    },\n    review: {\n      on: { PREVIOUS: 'method.hist' }\n    }\n  }\n});\n\nconst checkState = paymentMachine.transition('method.cash', {\n  type: 'SWITCH_CHECK'\n});\n\n// => State {\n//   value: { method: 'check' },\n//   history: State { ... }\n// }\n\nconst reviewState = paymentMachine.transition(checkState, { type: 'NEXT' });\n\n// => State {\n//   value: 'review',\n//   history: State { ... }\n// }\n\nconst previousState = paymentMachine.transition(reviewState, {\n  type: 'PREVIOUS'\n}).value;\n\n// => { method: 'check' }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Initial Context from Machine's Initial State in XState\nDESCRIPTION: This example demonstrates how to access the initial context of a machine from its initial state, which is preferred over directly accessing machine.context.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/context.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ndynamicCounterMachine.initialState.context;\n// => { count: 42, time: 1543687816981 }\n```\n\n----------------------------------------\n\nTITLE: Sending Events Between Parent and Child Machines in XState\nDESCRIPTION: This snippet shows how to send events between parent and child machines in XState, using ping and pong machines as an example.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/communication.md#2025-04-20_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine, interpret, send, sendParent } from 'xstate';\n\n// Parent machine\nconst pingMachine = createMachine({\n  id: 'ping',\n  initial: 'active',\n  states: {\n    active: {\n      invoke: {\n        id: 'pong',\n        src: pongMachine\n      },\n      // Sends 'PING' event to child machine with ID 'pong'\n      entry: send({ type: 'PING' }, { to: 'pong' }),\n      on: {\n        PONG: {\n          actions: send({ type: 'PING' }, { to: 'pong', delay: 1000 })\n        }\n      }\n    }\n  }\n});\n\n// Invoked child machine\nconst pongMachine = createMachine({\n  id: 'pong',\n  initial: 'active',\n  states: {\n    active: {\n      on: {\n        PING: {\n          // Sends 'PONG' event to parent machine\n          actions: sendParent(\n            { type: 'PONG' },\n            {\n              delay: 1000\n            }\n          )\n        }\n      }\n    }\n  }\n});\n\nconst service = interpret(pingMachine).start();\n\n// => 'ping'\n// ...\n// => 'pong'\n// ..\n// => 'ping'\n// ...\n// => 'pong'\n// ...\n```\n\n----------------------------------------\n\nTITLE: Transition Actions Example in XState\nDESCRIPTION: Example demonstrating how to implement transition-specific actions in a state machine when moving between states.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/actions.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\n{\n  idle: {\n    on: {\n      LOAD: {\n        target: 'loading',\n        // this action is executed only on this transition\n        actions: 'fetchData'\n    }\n  },\n  loading: {\n    // ...\n  }\n}\n// ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Parallel State Machine in XState\nDESCRIPTION: Creates a parallel state machine for word processing features with multiple independent states (bold, underline, italics, list) that can be toggled simultaneously. Demonstrates state management for text formatting options using XState's parallel state type.\nSOURCE: https://github.com/statelyai/xstate/blob/main/README.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMachine, createActor } from 'xstate';\n\nconst wordMachine = createMachine({\n  id: 'word',\n  type: 'parallel',\n  states: {\n    bold: {\n      initial: 'off',\n      states: {\n        on: {\n          on: { TOGGLE_BOLD: 'off' }\n        },\n        off: {\n          on: { TOGGLE_BOLD: 'on' }\n        }\n      }\n    },\n    underline: {\n      initial: 'off',\n      states: {\n        on: {\n          on: { TOGGLE_UNDERLINE: 'off' }\n        },\n        off: {\n          on: { TOGGLE_UNDERLINE: 'on' }\n        }\n      }\n    },\n    italics: {\n      initial: 'off',\n      states: {\n        on: {\n          on: { TOGGLE_ITALICS: 'off' }\n        },\n        off: {\n          on: { TOGGLE_ITALICS: 'on' }\n        }\n      }\n    },\n    list: {\n      initial: 'none',\n      states: {\n        none: {\n          on: {\n            BULLETS: 'bullets',\n            NUMBERS: 'numbers'\n          }\n        },\n        bullets: {\n          on: {\n            NONE: 'none',\n            NUMBERS: 'numbers'\n          }\n        },\n        numbers: {\n          on: {\n            BULLETS: 'bullets',\n            NONE: 'none'\n          }\n        }\n      }\n    }\n  }\n});\n\nconst actor = createActor(wordMachine);\n\nactor.subscribe((state) => {\n  console.log(state.value);\n});\n\nactor.start();\n// logs {\n//   bold: 'off',\n//   italics: 'off',\n//   underline: 'off',\n//   list: 'none'\n// }\n\nactor.send({ type: 'TOGGLE_BOLD' });\n// logs {\n//   bold: 'on',\n//   italics: 'off',\n//   underline: 'off',\n//   list: 'none'\n// }\n\nactor.send({ type: 'TOGGLE_ITALICS' });\n// logs {\n//   bold: 'on',\n//   italics: 'on',\n//   underline: 'off',\n//   list: 'none'\n// }\n```\n\n----------------------------------------\n\nTITLE: Spawning Child State Machines in XState\nDESCRIPTION: Shows how to spawn a child state machine that communicates with its parent through events. Includes setup of both remote and parent machines with state transitions.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/actors.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst remoteMachine = createMachine({\n  id: 'remote',\n  initial: 'offline',\n  states: {\n    offline: {\n      on: {\n        WAKE: 'online'\n      }\n    },\n    online: {\n      after: {\n        1000: {\n          actions: sendParent({ type: 'REMOTE.ONLINE' })\n        }\n      }\n    }\n  }\n});\n\nconst parentMachine = createMachine({\n  id: 'parent',\n  initial: 'waiting',\n  context: {\n    localOne: null\n  },\n  states: {\n    waiting: {\n      entry: assign({\n        localOne: () => spawn(remoteMachine)\n      }),\n      on: {\n        'LOCAL.WAKE': {\n          actions: send({ type: 'WAKE' }, { to: (context) => context.localOne })\n        },\n        'REMOTE.ONLINE': { target: 'connected' }\n      }\n    },\n    connected: {}\n  }\n});\n\nconst parentService = interpret(parentMachine)\n  .onTransition((state) => console.log(state.value))\n  .start();\n\nparentService.send({ type: 'LOCAL.WAKE' });\n// => 'waiting'\n// ... after 1000ms\n// => 'connected'\n```\n\n----------------------------------------\n\nTITLE: Using Setup Function for Machine Creation in TypeScript\nDESCRIPTION: The setup function allows defining implementations for actors, actions, guards, and delays that will be used in the created machine, providing strong typing and improved organization.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_87\n\nLANGUAGE: typescript\nCODE:\n```\nimport { setup, createMachine } from 'xstate';\n\nconst fetchUser = fromPromise(async ({ input }) => {\n  const response = await fetch(`/user/${input.id}`);\n  const user = await response.json();\n  return user;\n});\n\nconst machine = setup({\n  actors: {\n    fetchUser\n  },\n  actions: {\n    clearUser: assign({ user: undefined })\n  },\n  guards: {\n    isUserAdmin: (_, params) => params.user.role === 'admin'\n  }\n}).createMachine({\n  // ...\n  invoke: {\n    // Strongly typed!\n    src: 'fetchUser',\n    input: ({ context }) => ({ id: context.userId }),\n    onDone: {\n      guard: {\n        type: 'isUserAdmin',\n        params: ({ context }) => ({ user: context.user })\n      },\n      target: 'success',\n      actions: assign({ user: ({ event }) => event.output })\n    },\n    onError: {\n      target: 'failure',\n      actions: 'clearUser'\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Spawning Actors from Behaviors with useSpawn in React\nDESCRIPTION: Demonstrates how to use the useSpawn hook to create actors from behaviors like fromReducer. This example shows a counter component that manages state with a reducer-based behavior.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-react/CHANGELOG.md#2025-04-20_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { fromReducer } from 'xstate/lib/behaviors';\nimport { useActor, useSpawn } from '@xstate/react';\n\ntype CountEvent = { type: 'INC' } | { type: 'DEC' };\n\nconst countBehavior = fromReducer(\n  (count: number, event: CountEvent): number => {\n    if (event.type === 'INC') {\n      return count + 1;\n    } else if (event.type === 'DEC') {\n      return count - 1;\n    }\n\n    return count;\n  },\n  0 // initial state\n);\n\nconst countMachine = createMachine({\n  invoke: {\n    id: 'count',\n    src: () => fromReducer(countReducer, 0)\n  },\n  on: {\n    INC: {\n      actions: forwardTo('count')\n    },\n    DEC: {\n      actions: forwardTo('count')\n    }\n  }\n});\n\nconst Component = () => {\n  const countActorRef = useSpawn(countBehavior);\n  const [count, send] = useActor(countActorRef);\n\n  return (\n    <div>\n      Count: {count}\n      <button onClick={() => send({ type: 'INC' })}>Increment</button>\n      <button onClick={() => send({ type: 'DEC' })}>Decrement</button>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Timer Machine with XState in JavaScript\nDESCRIPTION: This snippet defines the timer machine using XState, including states for running and paused, context management, and event handling for ticks, duration updates, and resets.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/tutorials/7guis/timer.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const timerMachine = createMachine({\n  initial: 'running',\n  context: {\n    elapsed: 0,\n    duration: 5,\n    interval: 0.1\n  },\n  states: {\n    running: {\n      invoke: {\n        src: (context) => (cb) => {\n          const interval = setInterval(() => {\n            cb('TICK');\n          }, 1000 * context.interval);\n\n          return () => {\n            clearInterval(interval);\n          };\n        }\n      },\n      on: {\n        '': {\n          target: 'paused',\n          cond: (context) => {\n            return context.elapsed >= context.duration;\n          }\n        },\n        TICK: {\n          actions: assign({\n            elapsed: (context) =>\n              +(context.elapsed + context.interval).toFixed(2)\n          })\n        }\n      }\n    },\n    paused: {\n      on: {\n        '': {\n          target: 'running',\n          cond: (context) => context.elapsed < context.duration\n        }\n      }\n    }\n  },\n  on: {\n    'DURATION.UPDATE': {\n      actions: assign({\n        duration: (_, event) => event.value\n      })\n    },\n    RESET: {\n      actions: assign({\n        elapsed: 0\n      })\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Local Component Store with React Hooks\nDESCRIPTION: Demonstrates using the useStore and useSelector hooks to create and interact with a local component store in React, including event triggering with payloads.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-store/CHANGELOG.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useStore, useSelector } from '@xstate/store/react';\n\nfunction Counter() {\n  const store = useStore({\n    context: {\n      name: 'David',\n      count: 0\n    },\n    on: {\n      inc: (ctx, { by }: { by: number }) => ({\n        ...ctx,\n        count: ctx.count + by\n      })\n    }\n  });\n  const count = useSelector(store, (state) => state.count);\n\n  return (\n    <div>\n      <div>Count: {count}</div>\n      <button onClick={() => store.trigger.inc({ by: 1 })}>\n        Increment by 1\n      </button>\n      <button onClick={() => store.trigger.inc({ by: 5 })}>\n        Increment by 5\n      </button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Transitioning States in XState (JavaScript)\nDESCRIPTION: Demonstrates how to create a machine, access its initial state, and perform a state transition. The code shows the structure of the State object returned by these operations.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/states.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst lightMachine = createMachine({\n  id: 'light',\n  initial: 'green',\n  states: {\n    green: {\n      /* ... */\n    }\n    // ...\n  }\n});\n\nconsole.log(lightMachine.initialState);\n// State {\n//   value: 'green',\n//   actions: [],\n//   context: undefined,\n//   // ...\n// }\n\nconsole.log(lightMachine.transition('yellow', { type: 'TIMER' }));\n// State {\n//   value: { red: 'walk' },\n//   actions: [],\n//   context: undefined,\n//   // ...\n// }\n```\n\n----------------------------------------\n\nTITLE: Handling Promise Rejection in XState\nDESCRIPTION: This snippet shows how to handle promise rejection in XState, including custom error handling and assigning error messages to the machine's context.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/communication.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst search = (context, event) =>\n  new Promise((resolve, reject) => {\n    if (!event.query.length) {\n      return reject('No query specified');\n      // or:\n      // throw new Error('No query specified');\n    }\n\n    return resolve(getSearchResults(event.query));\n  });\n\n// ...\nconst searchMachine = createMachine({\n  id: 'search',\n  initial: 'idle',\n  context: {\n    results: undefined,\n    errorMessage: undefined\n  },\n  states: {\n    idle: {\n      on: {\n        SEARCH: { target: 'searching' }\n      }\n    },\n    searching: {\n      invoke: {\n        id: 'search',\n        src: search,\n        onError: {\n          target: 'failure',\n          actions: assign({\n            errorMessage: (context, event) => {\n              // event is:\n              // { type: 'xstate.error.actor', data: 'No query specified' }\n              return event.data;\n            }\n          })\n        },\n        onDone: {\n          target: 'success',\n          actions: assign({ results: (_, event) => event.data })\n        }\n      }\n    },\n    success: {},\n    failure: {}\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using state.matches() Method in XState\nDESCRIPTION: This snippet illustrates how to use the state.matches() method to check if the current state matches a given state value. It shows various ways of matching, including string and object notation.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/states.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(state.value);\n// => { red: 'stop' }\n\nconsole.log(state.matches('red'));\n// => true\n\nconsole.log(state.matches('red.stop'));\n// => true\n\nconsole.log(state.matches({ red: 'stop' }));\n// => true\n\nconsole.log(state.matches('green'));\n// => false\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Guard Functions in XState\nDESCRIPTION: This example shows how to create a search machine with a guarded transition that only allows searching when certain conditions are met. It demonstrates defining a guard function to validate search queries based on context and event data.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/guards.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst searchValid = (context, event) => {\n  return context.canSearch && event.query && event.query.length > 0;\n};\n\nconst searchMachine = createMachine(\n  {\n    id: 'search',\n    initial: 'idle',\n    context: {\n      canSearch: true\n    },\n    states: {\n      idle: {\n        on: {\n          SEARCH: [\n            {\n              target: 'searching',\n              // Only transition to 'searching' if the guard (cond) evaluates to true\n              cond: searchValid // or { type: 'searchValid' }\n            },\n            { target: '.invalid' }\n          ]\n        },\n        initial: 'normal',\n        states: {\n          normal: {},\n          invalid: {}\n        }\n      },\n      searching: {\n        entry: 'executeSearch'\n        // ...\n      },\n      searchError: {\n        // ...\n      }\n    }\n  },\n  {\n    guards: {\n      searchValid // optional, if the implementation doesn't change\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Parallel File Upload/Download State Machine in XState\nDESCRIPTION: Demonstrates creating a parallel state machine that handles file uploads and downloads simultaneously. The machine contains two independent compound states that can be active at the same time, each with their own idle, pending, and success states.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/parallel.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst fileMachine = createMachine({\n  id: 'file',\n  type: 'parallel',\n  states: {\n    upload: {\n      initial: 'idle',\n      states: {\n        idle: {\n          on: {\n            INIT_UPLOAD: { target: 'pending' }\n          }\n        },\n        pending: {\n          on: {\n            UPLOAD_COMPLETE: { target: 'success' }\n          }\n        },\n        success: {}\n      }\n    },\n    download: {\n      initial: 'idle',\n      states: {\n        idle: {\n          on: {\n            INIT_DOWNLOAD: { target: 'pending' }\n          }\n        },\n        pending: {\n          on: {\n            DOWNLOAD_COMPLETE: { target: 'success' }\n          }\n        },\n        success: {}\n      }\n    }\n  }\n});\n\nconsole.log(fileMachine.initialState.value);\n// => {\n//   upload: 'idle',\n//   download: 'idle'\n// }\n```\n\n----------------------------------------\n\nTITLE: Basic Toggle Machine Implementation\nDESCRIPTION: Example showing how to create a simple toggle machine with XState and use it in a React component using the useMachine hook\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/packages/xstate-react/index.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useMachine } from '@xstate/react';\nimport { createMachine } from 'xstate';\n\nconst toggleMachine = createMachine({\n  id: 'toggle',\n  initial: 'inactive',\n  states: {\n    inactive: {\n      on: { TOGGLE: 'active' }\n    },\n    active: {\n      on: { TOGGLE: 'inactive' }\n    }\n  }\n});\n\nexport const Toggler = () => {\n  const [state, send] = useMachine(toggleMachine);\n\n  return (\n    <button onClick={() => send('TOGGLE')}>\n      {state.value === 'inactive'\n        ? 'Click to activate'\n        : 'Active! Click to deactivate'}\n    </button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Narrowing Event Types for Assign Actions in XState\nDESCRIPTION: Demonstrates how to narrow the event type that an assign action accepts by specifying the event type in the second argument of model.assign(). This improves type safety for referenced actions.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/models.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst assignAge = userModel.assign(\n  {\n    // The `event.type` here is restricted to \"updateAge\"\n    age: (_, event) => event.value // inferred as `number`\n  },\n  'updateAge' // Restricts the `event` allowed by the \"assignAge\" action\n);\n\nconst machine = userModel.createMachine({\n  context: userModel.initialContext,\n  initial: 'active',\n  states: {\n    active: {\n      on: {\n        updateAge: {\n          actions: assignAge\n        }\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Forbidden Transitions in XState Form Machine\nDESCRIPTION: Example of implementing forbidden transitions to prevent logging events from being processed in specific states.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/transitions.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst formMachine = createMachine({\n  id: 'form',\n  initial: 'firstPage',\n  states: {\n    firstPage: {\n      /* ... */\n    },\n    secondPage: {\n      /* ... */\n    },\n    userInfoPage: {\n      on: {\n        // explicitly forbid the LOG event from doing anything\n        // or taking any transitions to any other state\n        LOG: undefined\n      }\n    }\n  },\n  on: {\n    LOG: {\n      actions: 'logTelemetry'\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Glass Filling State Machine with Context\nDESCRIPTION: Demonstrates creating a state machine that simulates filling a glass with water using context to track the amount. Shows context initialization, assign actions, and guards based on context values.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/context.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine, assign } from 'xstate';\n\n// Action to increment the context amount\nconst addWater = assign({\n  amount: (context, event) => context.amount + 1\n});\n\n// Guard to check if the glass is full\nfunction glassIsFull(context, event) {\n  return context.amount >= 10;\n}\n\nconst glassMachine = createMachine(\n  {\n    id: 'glass',\n    // the initial context (extended state) of the statechart\n    context: {\n      amount: 0\n    },\n    initial: 'empty',\n    states: {\n      empty: {\n        on: {\n          FILL: {\n            target: 'filling',\n            actions: 'addWater'\n          }\n        }\n      },\n      filling: {\n        // Transient transition\n        always: {\n          target: 'full',\n          cond: 'glassIsFull'\n        },\n        on: {\n          FILL: {\n            target: 'filling',\n            actions: 'addWater'\n          }\n        }\n      },\n      full: {}\n    }\n  },\n  {\n    actions: { addWater },\n    guards: { glassIsFull }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Spawning child actors outside assign in XState v5\nDESCRIPTION: Child actors can now be spawned directly outside of `assign(...)` action creators using the `spawnChild(...)` function.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_72\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMachine, spawnChild } from 'xstate';\n\nconst listenerMachine = createMachine({\n  // ...\n});\n\nconst parentMachine = createMachine({\n  // ...\n  on: {\n    'listener.create': {\n      entry: spawnChild(listenerMachine, { id: 'listener' })\n    }\n  }\n  // ...\n});\n\nconst actor = createActor(parentMachine).start();\n\nactor.send({ type: 'listener.create' });\n\nactor.getSnapshot().children.listener; // ActorRefFrom<typeof listenerMachine>\n```\n\n----------------------------------------\n\nTITLE: Creating Type-Safe Transition Functions with EventInputByType\nDESCRIPTION: Demonstrates how to use the EventInputByType utility type to create type-safe transition functions for each defined event in an XState store. This enables strongly-typed event handlers with proper parameter validation.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-store/CHANGELOG.md#2025-04-20_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createStore, type EventFromStore, type Store } from '@xstate/store';\n\n/**\n * Extract the event where `Type` matches the event's `type` from the given\n * `Store`.\n */\ntype EventByType<\n  TStore extends Store<any, any>,\n  Type extends EventFromStore<TStore>['type']\n> = Extract<EventFromStore<TStore>, { type: Type }>;\n\n/**\n * Extract a specific store event's \"input\" type (the event type without the\n * `type` property).\n */\ntype EventInputByType<\n  TStore extends Store<any, any>,\n  Type extends EventFromStore<TStore>['type']\n> = Omit<EventByType<TStore, Type>, 'type'>;\n\nconst store = createStore(\n  { count: 0 },\n  {\n    add: (context, event: { addend: number }) => ({\n      count: context.count + event.addend\n    }),\n    multiply: (context, event: { multiplier: number }) => ({\n      count: context.count * event.multiplier\n    })\n  }\n);\n\nconst add = (input: EventInputByType<typeof store, 'add'>) =>\n  store.send({ type: 'add', addend: input.addend });\n\nadd({ addend: 1 }); // sends { type: 'add', addend: 1 }\n\nconst multiply = (input: EventInputByType<typeof store, 'multiply'>) =>\n  store.send({ type: 'multiply', multiplier: input.multiplier });\n\nmultiply({ multiplier: 2 }); // sends { type: 'multiply', multiplier: 2 }\n```\n\n----------------------------------------\n\nTITLE: Spawning a Machine Actor in XState\nDESCRIPTION: Example showing how to spawn a state machine actor within an assign action. The code adds a new todo item with a spawned todo machine actor reference.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/actors.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine, spawn } from 'xstate';\nimport { todoMachine } from './todoMachine';\n\nconst todosMachine = createMachine({\n  // ...\n  on: {\n    'NEW_TODO.ADD': {\n      actions: assign({\n        todos: (context, event) => [\n          ...context.todos,\n          {\n            todo: event.todo,\n            // add a new todoMachine actor with a unique name\n            ref: spawn(todoMachine, `todo-${event.id}`)\n          }\n        ]\n      })\n    }\n    // ...\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Parent-Child Communication in XState\nDESCRIPTION: This snippet shows how to implement parent-child communication in XState using the onReceive function in a callback invocation. It demonstrates a ping-pong interaction between the parent and child.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/communication.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst pingPongMachine = createMachine({\n  id: 'pinger',\n  initial: 'active',\n  states: {\n    active: {\n      invoke: {\n        id: 'ponger',\n        src: (context, event) => (callback, onReceive) => {\n          // Whenever parent sends 'PING',\n          // send parent 'PONG' event\n          onReceive((e) => {\n            if (e.type === 'PING') {\n              callback('PONG');\n            }\n          });\n        }\n      },\n      entry: send({ type: 'PING' }, { to: 'ponger' }),\n      on: {\n        PONG: { target: 'done' }\n      }\n    },\n    done: {\n      type: 'final'\n    }\n  }\n});\nconst actor = interpret(pingPongMachine);\nactor.subscribe({ complete: () => done() });\nactor.start();\n```\n\n----------------------------------------\n\nTITLE: Configuring a Fetch Machine in Vue Component\nDESCRIPTION: Complete Vue component example showing how to configure a state machine with custom services and actions for handling API requests.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/packages/xstate-vue/index.md#2025-04-20_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { assign, createMachine } from 'xstate';\nimport { useMachine } from '@xstate/vue';\n\nconst fetchMachine = createMachine({\n  id: 'fetch',\n  initial: 'idle',\n  context: {\n    data: undefined,\n    error: undefined\n  },\n  states: {\n    idle: {\n      on: { FETCH: 'loading' }\n    },\n    loading: {\n      invoke: {\n        src: 'fetchData',\n        onDone: {\n          target: 'success',\n          actions: assign({\n            data: (_context, event) => event.data\n          })\n        },\n        onError: {\n          target: 'failure',\n          actions: assign({\n            error: (_context, event) => event.data\n          })\n        }\n      }\n    },\n    success: {\n      entry: 'notifySuccess',\n      type: 'final'\n    },\n    failure: {\n      on: {\n        RETRY: 'loading'\n      }\n    }\n  }\n});\n\nconst props = defineProps({\n  onResolve: {\n    type: Function,\n    default: () => {}\n  }\n});\n\nconst { state, send } = useMachine(fetchMachine, {\n  actions: {\n    notifySuccess: (ctx) => props.onResolve(ctx.data)\n  },\n  services: {\n    fetchData: (_context, event) =>\n      fetch(`some/api/${event.query}`).then((res) => res.json())\n  }\n});\n</script>\n\n<template>\n  <template v-if=\"state.value === 'idle'\">\n    <button @click=\"send({ type: 'FETCH', query: 'something' })\">\n      Search for something\n    </button>\n  </template>\n\n  <template v-else-if=\"state.value === 'loading'\">\n    <div>Searching...</div>\n  </template>\n\n  <template v-else-if=\"state.value === 'success'\">\n    <div>Success! {{ state.context.data }}</div>\n  </template>\n\n  <template v-else-if=\"state.value === 'failure'\">\n    <p>{{ state.context.error.message }}</p>\n    <button @click=\"send('RETRY')\">Retry</button>\n  </template>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Sequence State Machine in JavaScript with XState\nDESCRIPTION: This snippet demonstrates how to create a simple state machine for a three-step sequence using XState. It shows transitions between states and includes an optional 'PREV' event for backward navigation.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/patterns/sequence.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst stepMachine = createMachine({\n  id: 'step',\n  initial: 'one',\n  states: {\n    one: {\n      on: { NEXT: 'two' }\n    },\n    two: {\n      on: { NEXT: 'three', PREV: 'one' }\n    },\n    three: {\n      type: 'final'\n    }\n  }\n});\n\nconsole.log(stepMachine.transition('one', { type: 'NEXT' }).value);\n// => 'two'\n```\n\n----------------------------------------\n\nTITLE: Serializing Guards in XState\nDESCRIPTION: This snippet demonstrates how to serialize guards in XState, allowing for easier debugging, serialization, testing, and visualization of guards.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/guards.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst searchMachine = createMachine(\n  {\n    // ...\n    states: {\n      idle: {\n        on: {\n          SEARCH: {\n            target: 'searching',\n            // The 'searchValid' guard implementation details are\n            // specified in the machine config\n            cond: 'searchValid' // or { type: 'searchValid' }\n          }\n        }\n      }\n      // ...\n    }\n  },\n  {\n    guards: {\n      searchValid: (context, event) => {\n        return context.canSearch && event.query && event.query.length > 0;\n      }\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Actions with Choose in XState\nDESCRIPTION: Example showing how to use the 'choose' action creator to implement conditional actions. This allows for actions to be executed based on conditions, similar to an if-else structure where only the first matched condition causes associated actions to be executed.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_177\n\nLANGUAGE: javascript\nCODE:\n```\nentry: [\n  choose([\n    { cond: (ctx) => ctx > 100, actions: raise('TOGGLE') },\n    {\n      cond: 'hasMagicBottle',\n      actions: [assign((ctx) => ({ counter: ctx.counter + 1 }))]\n    },\n    { actions: ['fallbackAction'] }\n  ])\n]\n```\n\n----------------------------------------\n\nTITLE: Inspecting actor system updates in XState v5\nDESCRIPTION: Actor system updates can now be inspected using the `inspect` option in `createActor(logic, { inspect })`. This allows observing actor creation, event sending, and snapshot emissions.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_83\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMachine } from 'xstate';\n\nconst machine = createMachine({\n  // ...\n});\n\nconst actor = createActor(machine, {\n  inspect: (inspectionEvent) => {\n    if (inspectionEvent.type === '@xstate.actor') {\n      console.log(inspectionEvent.actorRef);\n    }\n\n    if (inspectionEvent.type === '@xstate.event') {\n      console.log(inspectionEvent.sourceRef);\n      console.log(inspectionEvent.targetRef);\n      console.log(inspectionEvent.event);\n    }\n\n    if (inspectionEvent.type === '@xstate.snapshot') {\n      console.log(inspectionEvent.actorRef);\n      console.log(inspectionEvent.event);\n      console.log(inspectionEvent.snapshot);\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Parallel State Machine for Text Formatting\nDESCRIPTION: Example of a parallel state machine for text formatting where multiple states (bold, underline, italics, list) can be active simultaneously.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/packages/core/index.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst wordMachine = createMachine({\n  id: 'word',\n  type: 'parallel',\n  states: {\n    bold: {\n      initial: 'off',\n      states: {\n        on: {\n          on: { TOGGLE_BOLD: 'off' }\n        },\n        off: {\n          on: { TOGGLE_BOLD: 'on' }\n        }\n      }\n    },\n    underline: {\n      initial: 'off',\n      states: {\n        on: {\n          on: { TOGGLE_UNDERLINE: 'off' }\n        },\n        off: {\n          on: { TOGGLE_UNDERLINE: 'on' }\n        }\n      }\n    },\n    italics: {\n      initial: 'off',\n      states: {\n        on: {\n          on: { TOGGLE_ITALICS: 'off' }\n        },\n        off: {\n          on: { TOGGLE_ITALICS: 'on' }\n        }\n      }\n    },\n    list: {\n      initial: 'none',\n      states: {\n        none: {\n          on: { BULLETS: 'bullets', NUMBERS: 'numbers' }\n        },\n        bullets: {\n          on: { NONE: 'none', NUMBERS: 'numbers' }\n        },\n        numbers: {\n          on: { BULLETS: 'bullets', NONE: 'none' }\n        }\n      }\n    }\n  }\n});\n\nconst boldState = wordMachine.transition('bold.off', {\n  type: 'TOGGLE_BOLD'\n}).value;\n\n// {\n//   bold: 'on',\n//   italics: 'off',\n//   underline: 'off',\n//   list: 'none'\n// }\n\nconst nextState = wordMachine.transition(\n  {\n    bold: 'off',\n    italics: 'off',\n    underline: 'on',\n    list: 'bullets'\n  },\n  { type: 'TOGGLE_ITALICS' }\n).value;\n\n// {\n//   bold: 'off',\n//   italics: 'on',\n//   underline: 'on',\n//   list: 'bullets'\n// }\n```\n\n----------------------------------------\n\nTITLE: Syncing Actor State in XState\nDESCRIPTION: Demonstrates how to enable state synchronization between parent and child actors using the sync option in spawn. Includes snapshot retrieval example.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/actors.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\n{\n  actions: assign({\n    // Actor will send update event to parent whenever its state changes\n    someRef: () => spawn(todoMachine, { sync: true })\n  });\n}\n// ...\n```\n\n----------------------------------------\n\nTITLE: TypeScript Integration with XState\nDESCRIPTION: Demonstrates proper TypeScript integration with XState including context type definitions and type inference for actions.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/context.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMachine } from 'xstate';\n\ninterface CounterContext {\n  count: number;\n  user?: {\n    name: string;\n  };\n}\n\nconst machine = createMachine({\n  schema: {\n    context: {} as CounterContext\n  },\n  // ...\n  context: {\n    count: 0,\n    user: undefined\n  }\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Using XState Store with Immer for Immutable Updates\nDESCRIPTION: Demonstrates how to integrate XState Store with Immer using createStoreWithProducer to enable mutable-style syntax for immutable updates to state.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-store/README.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createStoreWithProducer } from '@xstate/store';\nimport { produce } from 'immer'; // or { create } from 'mutative'\n\nconst donutStore = createStoreWithProducer(produce, {\n  context: {\n    donuts: 0,\n    favoriteFlavor: 'chocolate'\n  },\n  on: {\n    addDonut: (context) => {\n      context.donuts++; // \"Mutation\" (thanks to the producer)\n    },\n    changeFlavor: (context, event: { flavor: string }) => {\n      context.favoriteFlavor = event.flavor;\n    },\n    eatAllDonuts: (context) => {\n      context.donuts = 0;\n    }\n  }\n});\n\n// Everything else is the same!\n```\n\n----------------------------------------\n\nTITLE: Referencing Assign Actions in XState Machine Options (JavaScript)\nDESCRIPTION: Shows how to define assign actions as strings or functions and reference them in the machine options for better organization and reusability.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/context.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst countMachine = createMachine({\n  initial: 'start',\n  context: { count: 0 }\n  states: {\n    start: {\n      entry: 'increment'\n    }\n  }\n}, {\n  actions: {\n    increment: assign({ count: context => context.count + 1 }),\n    decrement: assign({ count: context => context.count - 1 })\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Sequences with XState in JavaScript\nDESCRIPTION: This code snippet illustrates how to model asynchronous sequences using XState. It demonstrates invoking Promise-based services in sequence, fetching user information and then fetching friends' data based on the retrieved user info.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/patterns/sequence.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getUserInfo(context) {\n  return fetch(`/api/users/${context.userId}`).then((response) =>\n    response.json()\n  );\n}\n\nfunction getUserFriends(context) {\n  const { friends } = context.user;\n\n  return Promise.all(\n    friends.map((friendId) =>\n      fetch(`/api/users/${friendId}/`).then((response) => response.json())\n    )\n  );\n}\n\nconst friendsMachine = createMachine({\n  id: 'friends',\n  context: { userId: 42, user: undefined, friends: undefined },\n  initial: 'gettingUser',\n  states: {\n    gettingUser: {\n      invoke: {\n        src: getUserInfo,\n        onDone: {\n          target: 'gettingFriends',\n          actions: assign({\n            user: (context, event) => event.data\n          })\n        }\n      }\n    },\n    gettingFriends: {\n      invoke: {\n        src: getUserFriends,\n        onDone: {\n          target: 'success',\n          actions: assign({\n            friends: (context, event) => event.data\n          })\n        }\n      }\n    },\n    success: {\n      type: 'final'\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Invoking Child Machine in XState\nDESCRIPTION: This snippet demonstrates how to invoke a child machine in XState, showing parent-child communication and handling the onDone transition.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/communication.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine, interpret, send, sendParent } from 'xstate';\n\n// Invoked child machine\nconst minuteMachine = createMachine({\n  id: 'timer',\n  initial: 'active',\n  states: {\n    active: {\n      after: {\n        60000: { target: 'finished' }\n      }\n    },\n    finished: { type: 'final' }\n  }\n});\n\nconst parentMachine = createMachine({\n  id: 'parent',\n  initial: 'pending',\n  states: {\n    pending: {\n      invoke: {\n        src: minuteMachine,\n        // The onDone transition will be taken when the\n        // minuteMachine has reached its top-level final state.\n        onDone: 'timesUp'\n      }\n    },\n    timesUp: {\n      type: 'final'\n    }\n  }\n});\n\nconst service = interpret(parentMachine)\n  .onTransition((state) => console.log(state.value))\n  .start();\n// => 'pending'\n// ... after 1 minute\n// => 'timesUp'\n```\n\n----------------------------------------\n\nTITLE: Invoking Hot Observable in XState\nDESCRIPTION: This snippet shows how to invoke a hot observable in XState, using a mouse movement event stream as an example.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/communication.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { fromEvent } from 'rxjs';\n\nconst mouseMove$ = fromEvent(document.body, 'mousemove');\n\nconst mouseMachine = createMachine({\n  id: 'mouse',\n  // ...\n  invoke: {\n    src: (context, event) => mouseMove$\n  },\n  on: {\n    mousemove: {\n      /* ... */\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using useSelector Hook with React and XState\nDESCRIPTION: Example of using the useSelector hook to select and subscribe to specific state from an XState service in a React component.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/packages/xstate-react/index.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useSelector } from '@xstate/react';\n\n// tip: optimize selectors by defining them externally when possible\nconst selectCount = (state) => state.context.count;\n\nconst App = ({ service }) => {\n  const count = useSelector(service, selectCount);\n\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Type Extraction from Models\nDESCRIPTION: Demonstrates how to extract context and event types from an XState model using utility types.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/models.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ContextFrom, EventFrom } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nconst someModel = createModel(\n  {\n    /* ... */\n  },\n  {\n    events: {\n      /* ... */\n    }\n  }\n);\n\ntype SomeContext = ContextFrom<typeof someModel>;\ntype SomeEvent = EventFrom<typeof someModel>;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Traffic Light Finite State Machine\nDESCRIPTION: Example of creating a finite state machine for a traffic light with three states (green, yellow, red) that cycle based on TIMER events.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/packages/core/index.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine } from 'xstate';\n\nconst lightMachine = createMachine({\n  id: 'light',\n  initial: 'green',\n  states: {\n    green: {\n      on: {\n        TIMER: 'yellow'\n      }\n    },\n    yellow: {\n      on: {\n        TIMER: 'red'\n      }\n    },\n    red: {\n      on: {\n        TIMER: 'green'\n      }\n    }\n  }\n});\n\nconst currentState = 'green';\n\nconst nextState = lightMachine.transition(currentState, {\n  type: 'TIMER'\n}).value;\n\n// => 'yellow'\n```\n\n----------------------------------------\n\nTITLE: Using Function Assigner with assign Action in XState\nDESCRIPTION: This example demonstrates using the assign action with a function assigner to update the machine's context. It returns a partial updated context object.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/context.md#2025-04-20_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// example: context assigner\n\n// ...\n\n  // return a partial (or full) updated context\n  actions: assign((context, event) => {\n    return {\n      count: context.count + event.value,\n      message: 'Count changed'\n    }\n  }),\n// ...\n```\n\n----------------------------------------\n\nTITLE: Persisting and Restoring State in XState\nDESCRIPTION: This snippet shows how to persist a state object to JSON format and restore it using State.create(). It also demonstrates how to start an interpreted service from a restored state, maintaining history and correct event representations.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/states.md#2025-04-20_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst jsonState = JSON.stringify(currentState);\n\n// Example: persisting to localStorage\ntry {\n  localStorage.setItem('app-state', jsonState);\n} catch (e) {\n  // unable to save to localStorage\n}\n\nimport { State, interpret } from 'xstate';\nimport { myMachine } from '../path/to/myMachine';\n\n// Retrieving the state definition from localStorage, if localStorage is empty use machine initial state\nconst stateDefinition =\n  JSON.parse(localStorage.getItem('app-state')) || myMachine.initialState;\n\n// Use State.create() to restore state from a plain object\nconst previousState = State.create(stateDefinition);\n\n// This will start the service at the specified State\nconst service = interpret(myMachine).start(previousState);\n```\n\n----------------------------------------\n\nTITLE: Typing Promise-based Services in XState\nDESCRIPTION: Using schema.services to type the return data from promise-based services. This provides type safety for both the service implementation and the onDone event handler.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/typescript.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMachine } from 'xstate';\n\ncreateMachine(\n  {\n    schema: {\n      services: {} as {\n        myService: {\n          // The data that gets returned from the service\n          data: { id: string };\n        };\n      }\n    },\n    invoke: {\n      src: 'myService',\n      onDone: {\n        actions: 'consoleLogId'\n      }\n    }\n  },\n  {\n    services: {\n      myService: async () => {\n        // This return type is now type-safe\n        return {\n          id: '1'\n        };\n      }\n    },\n    actions: {\n      consoleLogId: (context, event) => {\n        // This event type is now type-safe\n        console.log(event.data.id);\n      }\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a State Machine in XState for Vue\nDESCRIPTION: Defines a toggle state machine using XState that can switch between 'inactive' and 'active' states. This machine is completely decoupled from Vue and can be imported into Vue components.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/recipes/vue.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine } from 'xstate';\n\n// This machine is completely decoupled from Vue\nexport const toggleMachine = createMachine({\n  id: 'toggle',\n  context: {\n    /* some data */\n  },\n  initial: 'inactive',\n  states: {\n    inactive: {\n      on: { TOGGLE: 'active' }\n    },\n    active: {\n      on: { TOGGLE: 'inactive' }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Dynamic Action Creation with pure() in XState\nDESCRIPTION: Shows how to use the pure() action creator to dynamically generate actions based on current state context and events. The example demonstrates sending events to multiple actors.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/actions.md#2025-04-20_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine, actions } from 'xstate';\n\nconst { pure } = actions;\n\n// Dynamically send an event to every invoked sample actor\nconst sendToAllSampleActors = pure((context, event) => {\n  return context.sampleActors.map((sampleActor) => {\n    return send('SOME_EVENT', { to: sampleActor });\n  });\n});\n// => {\n//   type: ActionTypes.Pure,\n//   get: () => ... // evaluates to array of send() actions\n// }\n\nconst machine = createMachine({\n  // ...\n  states: {\n    active: {\n      entry: sendToAllSampleActors\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Delay Expressions in XState\nDESCRIPTION: This snippet shows how to use delay expressions in XState. It demonstrates a dynamic delay machine where the delay is determined from a custom event property and the initial context.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/delays.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst dynamicDelayMachine = createMachine({\n  id: 'dynamicDelay',\n  context: {\n    initialDelay: 1000\n  },\n  initial: 'idle',\n  states: {\n    idle: {\n      on: {\n        ACTIVATE: { target: 'pending' }\n      }\n    },\n    pending: {\n      entry: send(\n        { type: 'FINISH' },\n        {\n          // delay determined from custom event.wait property\n          delay: (context, event) => context.initialDelay + event.wait || 0\n        }\n      ),\n      on: {\n        FINISH: { target: 'finished' }\n      }\n    },\n    finished: { type: 'final' }\n  }\n});\n\nconst dynamicDelayService = interpret(dynamicDelayMachine);\ndynamicDelayService.subscribe({ complete: () => console.log('done!') });\ndynamicDelayService.start();\n\ndynamicDelayService.send({\n  type: 'ACTIVATE',\n  // arbitrary property\n  wait: 2000\n});\n```\n\n----------------------------------------\n\nTITLE: Ping-Pong Machine Communication\nDESCRIPTION: Illustrates bidirectional communication between parent and child machines using send and sendParent actions.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/communication.md#2025-04-20_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine, interpret, send, sendParent } from 'xstate';\n\n// Parent machine\nconst pingMachine = createMachine({\n  id: 'ping',\n  initial: 'active',\n  states: {\n    active: {\n      invoke: {\n        id: 'pong',\n        src: pongMachine\n      },\n      entry: send({ type: 'PING' }, { to: 'pong' }),\n      on: {\n        PONG: {\n          actions: send({ type: 'PING' }, { to: 'pong', delay: 1000 })\n        }\n      }\n    }\n  }\n});\n\n// Invoked child machine\nconst pongMachine = createMachine({\n  id: 'pong',\n  initial: 'active',\n  states: {\n    active: {\n      on: {\n        PING: {\n          actions: sendParent(\n            { type: 'PONG' },\n            {\n              delay: 1000\n            }\n          )\n        }\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Flight Booking State Machine Implementation in JavaScript\nDESCRIPTION: Complete XState machine implementation for flight booking form, handling state transitions, context updates, and validation logic for both one-way and round-trip flights.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/tutorials/7guis/flight.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine, assign } from 'xstate';\n\nexport const flightMachine = createMachine({\n  id: 'flight',\n  initial: 'editing',\n  context: {\n    startDate: undefined,\n    returnDate: undefined,\n    trip: 'oneWay' // or 'roundTrip'\n  },\n  states: {\n    editing: {\n      on: {\n        'startDate.UPDATE': {\n          actions: assign({\n            startDate: (_, event) => event.value\n          })\n        },\n        'returnDate.UPDATE': {\n          actions: assign({\n            returnDate: (_, event) => event.value\n          }),\n          cond: (context) => context.trip === 'roundTrip'\n        },\n        SET_TRIP: {\n          actions: assign({\n            trip: (_, event) => event.value\n          }),\n          cond: (_, event) =>\n            event.value === 'oneWay' || event.value === 'roundTrip'\n        },\n        SUBMIT: {\n          target: 'submitted',\n          cond: (context) => {\n            if (context.trip === 'oneWay') {\n              return !!context.startDate;\n            } else {\n              return (\n                !!context.startDate &&\n                !!context.returnDate &&\n                context.returnDate > context.startDate\n              );\n            }\n          }\n        }\n      }\n    },\n    submitted: {\n      type: 'final'\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Typestates in XState with TypeScript\nDESCRIPTION: This example illustrates the use of typestates in XState to narrow down the shape of the overall state context based on the state value. It defines a user machine with different states and their corresponding context shapes.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/typescript.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMachine, interpret } from 'xstate';\n\ninterface User {\n  name: string;\n}\n\ninterface UserContext {\n  user?: User;\n  error?: string;\n}\n\ntype UserEvent =\n  | { type: 'FETCH'; id: string }\n  | { type: 'RESOLVE'; user: User }\n  | { type: 'REJECT'; error: string };\n\ntype UserTypestate =\n  | {\n      value: 'idle';\n      context: UserContext & {\n        user: undefined;\n        error: undefined;\n      };\n    }\n  | {\n      value: 'loading';\n      context: UserContext;\n    }\n  | {\n      value: 'success';\n      context: UserContext & { user: User; error: undefined };\n    }\n  | {\n      value: 'failure';\n      context: UserContext & { user: undefined; error: string };\n    };\n\nconst userMachine = createMachine<UserContext, UserEvent, UserTypestate>({\n  id: 'user',\n  initial: 'idle',\n  states: {\n    idle: {\n      /* ... */\n    },\n    loading: {\n      /* ... */\n    },\n    success: {\n      /* ... */\n    },\n    failure: {\n      /* ... */\n    }\n  }\n});\n\nconst userService = interpret(userMachine);\n\nuserService.subscribe((state) => {\n  if (state.matches('success')) {\n    // from the UserState typestate, `user` will be defined\n    state.context.user.name;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Sequences with XState Service Invocation\nDESCRIPTION: This example shows how to model asynchronous operations in sequence using XState's invoke mechanism. It fetches user information followed by fetching friend data, with each step updating the context through assign actions when the async operations complete.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/patterns/sequence.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Returns a Promise, e.g.:\n// {\n//   id: 42,\n//   name: 'David',\n//   friends: [2, 3, 5, 7, 9] // friend IDs\n// }\nfunction getUserInfo(context) {\n  return fetch(`/api/users/${context.userId}`).then((response) =>\n    response.json()\n  );\n}\n\n// Returns a Promise\nfunction getUserFriends(context) {\n  const { friends } = context.user;\n\n  return Promise.all(\n    friends.map((friendId) =>\n      fetch(`/api/users/${friendId}/`).then((response) => response.json())\n    )\n  );\n}\n\nconst friendsMachine = createMachine({\n  id: 'friends',\n  context: { userId: 42, user: undefined, friends: undefined },\n  initial: 'gettingUser',\n  states: {\n    gettingUser: {\n      invoke: {\n        src: getUserInfo,\n        onDone: {\n          target: 'gettingFriends',\n          actions: assign({\n            user: (context, event) => event.data\n          })\n        }\n      }\n    },\n    gettingFriends: {\n      invoke: {\n        src: getUserFriends,\n        onDone: {\n          target: 'success',\n          actions: assign({\n            friends: (context, event) => event.data\n          })\n        }\n      }\n    },\n    success: {\n      type: 'final'\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Syncing External Data with XState using useEffect in React\nDESCRIPTION: Shows how to synchronize data from external hooks (like SWR) with an XState machine using React's useEffect hook.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/recipes/react.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst Component = () => {\n  const { data, error } = useSWR('/api/user', fetcher);\n\n  const [state, send] = useMachine(machine);\n\n  useEffect(() => {\n    send({\n      type: 'DATA_CHANGED',\n      data,\n      error\n    });\n  }, [data, error, send]);\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Hierarchical (Nested) State Machine\nDESCRIPTION: Demonstration of a hierarchical state machine where the 'red' state of a traffic light contains nested pedestrian states (walk, wait, stop).\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/packages/core/index.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine } from 'xstate';\n\nconst pedestrianStates = {\n  initial: 'walk',\n  states: {\n    walk: {\n      on: {\n        PED_TIMER: 'wait'\n      }\n    },\n    wait: {\n      on: {\n        PED_TIMER: 'stop'\n      }\n    },\n    stop: {}\n  }\n};\n\nconst lightMachine = createMachine({\n  id: 'light',\n  initial: 'green',\n  states: {\n    green: {\n      on: {\n        TIMER: 'yellow'\n      }\n    },\n    yellow: {\n      on: {\n        TIMER: 'red'\n      }\n    },\n    red: {\n      on: {\n        TIMER: 'green'\n      },\n      ...pedestrianStates\n    }\n  }\n});\n\nconst currentState = 'yellow';\n\nconst nextState = lightMachine.transition(currentState, {\n  type: 'TIMER'\n}).value;\n// => {\n//   red: 'walk'\n// }\n\nlightMachine.transition('red.walk', { type: 'PED_TIMER' }).value;\n// => {\n//   red: 'wait'\n// }\n```\n\n----------------------------------------\n\nTITLE: Configuring Fan State Machine with History States in XState\nDESCRIPTION: Demonstrates the configuration of a state machine for a fan with history states. Includes shallow history state implementation and history state with default target.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/history.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst fanMachine = createMachine({\n  id: 'fan',\n  initial: 'fanOff',\n  states: {\n    fanOff: {\n      on: {\n        // transitions to history state\n        POWER: { target: 'fanOn.hist' },\n        HIGH_POWER: { target: 'fanOn.highPowerHist' }\n      }\n    },\n    fanOn: {\n      initial: 'first',\n      states: {\n        first: {\n          on: {\n            SWITCH: { target: 'second' }\n          }\n        },\n        second: {\n          on: {\n            SWITCH: { target: 'third' }\n          }\n        },\n        third: {},\n\n        // shallow history state\n        hist: {\n          type: 'history',\n          history: 'shallow' // optional; default is 'shallow'\n        },\n\n        // shallow history state with default\n        highPowerHist: {\n          type: 'history',\n          target: 'third'\n        }\n      },\n      on: {\n        POWER: { target: 'fanOff' }\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Inline Action Implementation in XState State Machine\nDESCRIPTION: This snippet shows how to implement an inline action directly in the machine config. This method is useful for quick prototyping but should be refactored for better maintainability.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/actions.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\nTRIGGER: {\n  target: 'active',\n  actions: (context, event) => { console.log('activating...'); }\n}\n// ...\n```\n\n----------------------------------------\n\nTITLE: Persisting and Restoring State in XState (JavaScript)\nDESCRIPTION: Demonstrates how to persist a state object to JSON format and restore it using State.create(). This is useful for saving and loading application state, such as in local storage.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/states.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst jsonState = JSON.stringify(currentState);\n\n// Example: persisting to localStorage\ntry {\n  localStorage.setItem('app-state', jsonState);\n} catch (e) {\n  // unable to save to localStorage\n}\n\nimport { State, interpret } from 'xstate';\nimport { myMachine } from '../path/to/myMachine';\n\n// Retrieving the state definition from localStorage, if localStorage is empty use machine initial state\nconst stateDefinition =\n  JSON.parse(localStorage.getItem('app-state')) || myMachine.initialState;\n\n// Use State.create() to restore state from a plain object\nconst previousState = State.create(stateDefinition);\n\n// This will start the service at the specified State\nconst service = interpret(myMachine).start(previousState);\n```\n\n----------------------------------------\n\nTITLE: Installing XState via NPM\nDESCRIPTION: Command to install XState package using NPM package manager\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/start.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install xstate --save\n```\n\n----------------------------------------\n\nTITLE: Creating and Using XState Store in TypeScript\nDESCRIPTION: Demonstrates how to create and use an XState store with initial context and transitions. The store maintains state and can be updated by sending events with specific transition types.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-store/CHANGELOG.md#2025-04-20_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createStore } from '@xstate/store';\n\nconst store = createStore(\n  // initial context\n  { count: 0, greeting: 'hello' },\n  // transitions\n  {\n    inc: {\n      count: (context) => context.count + 1\n    },\n    updateBoth: {\n      count: () => 42,\n      greeting: 'hi'\n    }\n  }\n);\n\nstore.send({\n  type: 'inc'\n});\n\nconsole.log(store.getSnapshot());\n// Logs:\n// {\n//   status: 'active',\n//   context: {\n//     count: 1,\n//     greeting: 'hello'\n//   }\n// }\n```\n\n----------------------------------------\n\nTITLE: Implementing Machine Options in XState\nDESCRIPTION: Shows how to implement actions, delays, guards, and services using the options object in createMachine(). Demonstrates referencing actions via strings and providing their implementations.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/machines.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst lightMachine = createMachine(\n  {\n    id: 'light',\n    initial: 'green',\n    states: {\n      green: {\n        // action referenced via string\n        entry: 'alertGreen'\n      }\n    }\n  },\n  {\n    actions: {\n      // action implementation\n      alertGreen: (context, event) => {\n        alert('Green!');\n      }\n    },\n    delays: {\n      /* ... */\n    },\n    guards: {\n      /* ... */\n    },\n    services: {\n      /* ... */\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Invoking Promises in XState\nDESCRIPTION: This snippet demonstrates how to invoke a promise in XState, including handling success and error cases. It fetches user data and updates the machine's context accordingly.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/communication.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst fetchUser = (userId) =>\n  fetch(`url/to/user/${userId}`).then((response) => response.json());\n\nconst userMachine = createMachine({\n  id: 'user',\n  initial: 'idle',\n  context: {\n    userId: 42,\n    user: undefined,\n    error: undefined\n  },\n  states: {\n    idle: {\n      on: {\n        FETCH: { target: 'loading' }\n      }\n    },\n    loading: {\n      invoke: {\n        id: 'getUser',\n        src: (context, event) => fetchUser(context.userId),\n        onDone: {\n          target: 'success',\n          actions: assign({ user: (context, event) => event.data })\n        },\n        onError: {\n          target: 'failure',\n          actions: assign({ error: (context, event) => event.data })\n        }\n      }\n    },\n    success: {},\n    failure: {\n      on: {\n        RETRY: { target: 'loading' }\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using useMachine Hook with React and XState\nDESCRIPTION: Example of using the useMachine hook to create a toggle button component with XState in React. It demonstrates importing necessary functions, creating a machine, and using the hook in a functional component.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/packages/xstate-react/index.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useMachine } from '@xstate/react';\nimport { createMachine } from 'xstate';\n\nconst toggleMachine = createMachine({\n  id: 'toggle',\n  initial: 'inactive',\n  states: {\n    inactive: {\n      on: { TOGGLE: 'active' }\n    },\n    active: {\n      on: { TOGGLE: 'inactive' }\n    }\n  }\n});\n\nexport const Toggler = () => {\n  const [state, send] = useMachine(toggleMachine);\n\n  return (\n    <button onClick={() => send('TOGGLE')}>\n      {state.value === 'inactive'\n        ? 'Click to activate'\n        : 'Active! Click to deactivate'}\n    </button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using useSelector Hook with React and XState\nDESCRIPTION: Demonstration of the useSelector hook to efficiently select and use specific parts of the state from an XState service in a React component. It includes an example with a compare function for optimization.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/packages/xstate-react/index.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useSelector } from '@xstate/react';\n\n// tip: optimize selectors by defining them externally when possible\nconst selectCount = (state) => state.context.count;\n\nconst App = ({ service }) => {\n  const count = useSelector(service, selectCount);\n\n  // ...\n};\n\n// With compare function:\nconst selectUser = (state) => state.context.user;\nconst compareUser = (prevUser, nextUser) => prevUser.id === nextUser.id;\n\nconst App = ({ service }) => {\n  const user = useSelector(service, selectUser, compareUser);\n\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Using Object Assigner with assign Action in XState\nDESCRIPTION: This snippet shows how to use the assign action with an object assigner to update the machine's context. It demonstrates incrementing a count and assigning a static message.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/context.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine, assign } from 'xstate';\n// example: property assigner\n\n// ...\n  actions: assign({\n    // increment the current count by the event value\n    count: (context, event) => context.count + event.value,\n\n    // assign static value to the message (no function needed)\n    message: 'Count changed'\n  }),\n// ...\n```\n\n----------------------------------------\n\nTITLE: Error Escalation Pattern\nDESCRIPTION: Demonstrates error escalation from child to parent machine using the escalate action creator.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/actions.md#2025-04-20_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine, actions } from 'xstate';\nconst { escalate } = actions;\n\nconst childMachine = createMachine({\n  // ...\n  // This will be sent to the parent machine that invokes this child\n  entry: escalate({ message: 'This is some error' })\n});\n\nconst parentMachine = createMachine({\n  // ...\n  invoke: {\n    src: childMachine,\n    onError: {\n      actions: (context, event) => {\n        console.log(event.data);\n        //  {\n        //    type: ...,\n        //    data: {\n        //      message: 'This is some error'\n        //    }\n        //  }\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Promise Rejection Handling in XState\nDESCRIPTION: Demonstrates error handling for Promise rejections in XState. Includes example of search functionality with error message handling in the machine context.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/communication.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst searchMachine = createMachine({\n  id: 'search',\n  initial: 'idle',\n  context: {\n    results: undefined,\n    errorMessage: undefined\n  },\n  states: {\n    idle: {\n      on: {\n        SEARCH: { target: 'searching' }\n      }\n    },\n    searching: {\n      invoke: {\n        id: 'search',\n        src: search,\n        onError: {\n          target: 'failure',\n          actions: assign({\n            errorMessage: (context, event) => event.data\n          })\n        },\n        onDone: {\n          target: 'success',\n          actions: assign({ results: (_, event) => event.data })\n        }\n      }\n    },\n    success: {},\n    failure: {}\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Typestates with XState\nDESCRIPTION: Creating a state machine with typestates to narrow context types based on state values. This helps prevent impossible states and provides strong typing for state-specific context properties.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/typescript.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMachine, interpret } from 'xstate';\n\ninterface User {\n  name: string;\n}\n\ninterface UserContext {\n  user?: User;\n  error?: string;\n}\n\ntype UserEvent =\n  | { type: 'FETCH'; id: string }\n  | { type: 'RESOLVE'; user: User }\n  | { type: 'REJECT'; error: string };\n\ntype UserTypestate =\n  | {\n      value: 'idle';\n      context: UserContext & {\n        user: undefined;\n        error: undefined;\n      };\n    }\n  | {\n      value: 'loading';\n      context: UserContext;\n    }\n  | {\n      value: 'success';\n      context: UserContext & { user: User; error: undefined };\n    }\n  | {\n      value: 'failure';\n      context: UserContext & { user: undefined; error: string };\n    };\n\nconst userMachine = createMachine<UserContext, UserEvent, UserTypestate>({\n  id: 'user',\n  initial: 'idle',\n  states: {\n    idle: {\n      /* ... */\n    },\n    loading: {\n      /* ... */\n    },\n    success: {\n      /* ... */\n    },\n    failure: {\n      /* ... */\n    }\n  }\n});\n\nconst userService = interpret(userMachine);\n\nuserService.subscribe((state) => {\n  if (state.matches('success')) {\n    // from the UserState typestate, `user` will be defined\n    state.context.user.name;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Transient State Nodes in XState (JavaScript)\nDESCRIPTION: Demonstrates how to create a transient state node using an 'always' transition. This example shows a state machine that immediately transitions to a time-based state.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/statenodes.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst timeOfDayMachine = createMachine({\n  id: 'timeOfDay',\n  initial: 'unknown',\n  context: {\n    time: undefined\n  },\n  states: {\n    // Transient state\n    unknown: {\n      always: [\n        { target: 'morning', cond: 'isBeforeNoon' },\n        { target: 'afternoon', cond: 'isBeforeSix' },\n        { target: 'evening' }\n      ]\n    },\n    morning: {},\n    afternoon: {},\n    evening: {}\n  }\n}, {\n  guards: {\n    isBeforeNoon: // ...\n    isBeforeSix: // ...\n  }\n});\n\nconst timeOfDayService = interpret(timeOfDayMachine.withContext({ time: Date.now() }))\n  .onTransition(state => console.log(state.value))\n  .start();\n\n// => 'morning' (assuming the time is before noon)\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a Beeping Activity in XState\nDESCRIPTION: This snippet shows how to create a beeping activity function and use it in a machine configuration. It demonstrates passing context to the activity and defining the activity in the machine options.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/activities.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction createBeepingActivity(context, activity) {\n  // Start the beeping activity\n  const interval = setInterval(() => {\n    console.log('BEEP!');\n  }, context.interval);\n\n  // Return a function that stops the beeping activity\n  return () => clearInterval(interval);\n}\n\nconst toggleMachine = createMachine(\n  {\n    id: 'toggle',\n    initial: 'inactive',\n    context: {\n      interval: 1000 // beep every second\n    },\n    states: {\n      inactive: {\n        on: {\n          TOGGLE: { target: 'active' }\n        }\n      },\n      active: {\n        activities: ['beeping'],\n        on: {\n          TOGGLE: { target: 'inactive' }\n        }\n      }\n    }\n  },\n  {\n    activities: {\n      beeping: createBeepingActivity\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Spawning Callback Actors in XState\nDESCRIPTION: Example of spawning a callback as an actor that creates a counter interval. The callback function receives events and can be used to update its internal state.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/actors.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst counterInterval = (callback, receive) => {\n  let count = 0;\n\n  const intervalId = setInterval(() => {\n    callback({ type: 'COUNT.UPDATE', count });\n    count++;\n  }, 1000);\n\n  receive(event => {\n    if (event.type === 'INC') {\n      count++;\n    }\n  });\n\n  return () => { clearInterval(intervalId); }\n}\n\nconst machine = createMachine({\n  // ...\n  {\n    actions: assign({\n      counterRef: () => spawn(counterInterval)\n    })\n  }\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Events to Actors in XState\nDESCRIPTION: Example demonstrating how to send events to actors using the send action with a target expression. The reference to the actor is stored in context.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/actors.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst machine = createMachine({\n  // ...\n  states: {\n    active: {\n      entry: assign({\n        someRef: () => spawn(someMachine)\n      }),\n      on: {\n        SOME_EVENT: {\n          // Use a target expression to send an event\n          // to the actor reference\n          actions: send({ type: 'PING' }, { to: (context) => context.someRef })\n        }\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Complete Reddit State Machine with Data Assignment\nDESCRIPTION: Finalizes the Reddit state machine by assigning the fetched posts to context when the API call succeeds. This completes the data flow from selection to display in the application.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/tutorials/reddit.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst redditMachine = createMachine({\n  /* ... */\n  context: {\n    subreddit: null,\n    posts: null\n  },\n  states: {\n    idle: {},\n    selected: {\n      initial: 'loading',\n      states: {\n        loading: {\n          invoke: {\n            id: 'fetch-subreddit',\n            src: invokeFetchSubreddit,\n            onDone: {\n              target: 'loaded',\n              actions: assign({\n                posts: (context, event) => event.data\n              })\n            },\n            onError: 'failed'\n          }\n        },\n        loaded: {},\n        failed: {}\n      }\n    }\n  },\n  on: {\n    /* ... */\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Parallel Tasks with Final States in XState\nDESCRIPTION: This example shows how to model parallel tasks in a shopping cart scenario using XState. It demonstrates the use of final states in parallel state nodes and how onDone transitions work when all parallel tasks are completed.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/final.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst shoppingMachine = createMachine({\n  id: 'shopping',\n  initial: 'cart',\n  states: {\n    cart: {\n      type: 'parallel',\n      states: {\n        user: {\n          initial: 'pending',\n          states: {\n            pending: {\n              entry: 'getUser',\n              on: {\n                RESOLVE_USER: { target: 'success' },\n                REJECT_USER: { target: 'failure' }\n              }\n            },\n            success: { type: 'final' },\n            failure: {}\n          }\n        },\n        items: {\n          initial: 'pending',\n          states: {\n            pending: {\n              entry: 'getItems',\n              on: {\n                RESOLVE_ITEMS: { target: 'success' },\n                REJECT_ITEMS: { target: 'failure' }\n              }\n            },\n            success: { type: 'final' },\n            failure: {}\n          }\n        }\n      },\n      onDone: 'confirm'\n    },\n    confirm: {\n      // ...\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Counter State Machine with XState in JavaScript\nDESCRIPTION: This code creates an XState machine that models a simple counter UI. It defines a single 'active' state with context containing a count property initialized to 0. The machine handles an INCREMENT event by using the assign action to increase the count by 1.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/tutorials/7guis/counter.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine, assign } from 'xstate';\n\nexport const counterMachine = createMachine({\n  initial: 'active',\n  context: { count: 0 },\n  states: {\n    active: {\n      on: {\n        INCREMENT: {\n          actions: assign({ count: (ctx) => ctx.count + 1 })\n        }\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Complete TypeScript Form Example with XState Immer\nDESCRIPTION: A fully typed example of a form handling application using XState with Immer. Shows interface definitions, event type definitions, and how to use createUpdater with proper typing in a complete state machine implementation.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/packages/xstate-immer/index.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMachine } from 'xstate';\nimport { createUpdater, ImmerUpdateEvent } from '@xstate/immer';\n\ninterface FormContext {\n  name: string;\n  age: number | undefined;\n}\n\ntype NameUpdateEvent = ImmerUpdateEvent<'UPDATE_NAME', string>;\ntype AgeUpdateEvent = ImmerUpdateEvent<'UPDATE_AGE', number>;\n\nconst nameUpdater = createUpdater<FormContext, NameUpdateEvent>(\n  'UPDATE_NAME',\n  (ctx, { input }) => {\n    ctx.name = input;\n  }\n);\n\nconst ageUpdater = createUpdater<FormContext, AgeUpdateEvent>(\n  'UPDATE_AGE',\n  (ctx, { input }) => {\n    ctx.age = input;\n  }\n);\n\ntype FormEvent =\n  | NameUpdateEvent\n  | AgeUpdateEvent\n  | {\n      type: 'SUBMIT';\n    };\n\nconst formMachine = createMachine({\n  schema: {\n    context: {} as FormContext,\n    events: {} as FormEvent\n  },\n  initial: 'editing',\n  context: {\n    name: '',\n    age: undefined\n  },\n  states: {\n    editing: {\n      on: {\n        [nameUpdater.type]: { actions: nameUpdater.action },\n        [ageUpdater.type]: { actions: ageUpdater.action },\n        SUBMIT: 'submitting'\n      }\n    },\n    submitting: {\n      // ...\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an XState Machine with Immer Integration\nDESCRIPTION: Demonstrates how to create an XState machine using Immer for state updates, including custom updaters and state transitions.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/packages/xstate-immer/index.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst levelUpdater = createUpdater('UPDATE_LEVEL', (ctx, { input }) => {\n  ctx.level = input;\n});\n\nconst toggleMachine = createMachine({\n  id: 'toggle',\n  context: {\n    count: 0,\n    level: 0\n  },\n  initial: 'inactive',\n  states: {\n    inactive: {\n      on: {\n        TOGGLE: {\n          target: 'active',\n          actions: assign((ctx) => ctx.count++)\n        }\n      }\n    },\n    active: {\n      on: {\n        TOGGLE: {\n          target: 'inactive'\n        },\n        [levelUpdater.type]: {\n          actions: levelUpdater.action\n        }\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Subreddit Component with React and XState\nDESCRIPTION: React component that uses the subreddit machine to display posts from a specific subreddit. It handles loading, error states, and provides refresh functionality.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/tutorials/reddit.md#2025-04-20_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nconst Subreddit = ({ name }) => {\n  // Only create the machine based on the subreddit name once\n  const subredditMachine = useMemo(() => {\n    return createSubredditMachine(name);\n  }, [name]);\n\n  const [current, send] = useMachine(subredditMachine);\n\n  if (current.matches('failure')) {\n    return (\n      <div>\n        Failed to load posts.{' '}\n        <button onClick={(_) => send('RETRY')}>Retry?</button>\n      </div>\n    );\n  }\n\n  const { subreddit, posts, lastUpdated } = current.context;\n\n  return (\n    <section\n      data-machine={subredditMachine.id}\n      data-state={current.toStrings().join(' ')}\n    >\n      {current.matches('loading') && <div>Loading posts...</div>}\n      {posts && (\n        <>\n          <header>\n            <h2>{subreddit}</h2>\n            <small>\n              Last updated: {lastUpdated}{' '}\n              <button onClick={(_) => send('REFRESH')}>Refresh</button>\n            </small>\n          </header>\n          <ul>\n            {posts.map((post) => {\n              return <li key={post.id}>{post.title}</li>;\n            })}\n          </ul>\n        </>\n      )}\n    </section>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating XState Counter Machine in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a counter machine using XState. It defines an 'active' state with an 'INCREMENT' event that updates the count in the context. The machine uses the assign action to increment the count by 1 on each INCREMENT event.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/tutorials/7guis/counter.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine, assign } from 'xstate';\n\nexport const counterMachine = createMachine({\n  initial: 'active',\n  context: { count: 0 },\n  states: {\n    active: {\n      on: {\n        INCREMENT: {\n          actions: assign({ count: (ctx) => ctx.count + 1 })\n        }\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Transient Transitions in XState\nDESCRIPTION: Demonstrates how to use transient transitions in an XState machine. These transitions are taken immediately upon entering a state if conditions are met, without requiring an event trigger.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/transitions.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst gameMachine = createMachine(\n  {\n    id: 'game',\n    initial: 'playing',\n    context: {\n      points: 0\n    },\n    states: {\n      playing: {\n        on: {\n          // Transient transition\n          // Will transition to either 'win' or 'lose' immediately upon\n          // (re)entering 'playing' state if the condition is met.\n          '': [\n            { target: 'win', cond: 'didPlayerWin' },\n            { target: 'lose', cond: 'didPlayerLose' }\n          ],\n          // Self-transition\n          AWARD_POINTS: {\n            actions: assign({\n              points: 100\n            })\n          }\n        }\n      },\n      win: { type: 'final' },\n      lose: { type: 'final' }\n    }\n  },\n  {\n    guards: {\n      didPlayerWin: (context, event) => {\n        // check if player won\n        return context.points > 99;\n      },\n      didPlayerLose: (context, event) => {\n        // check if player lost\n        return context.points < 0;\n      }\n    }\n  }\n);\n\nconst gameService = interpret(gameMachine)\n  .onTransition((state) => console.log(state.value))\n  .start();\n\n// Still in 'playing' state because no conditions of\n// transient transition were met\n// => 'playing'\n\n// When 'AWARD_POINTS' is sent, a self-transition to 'PLAYING' occurs.\n// The transient transition to 'win' is taken because the 'didPlayerWin'\n// condition is satisfied.\ngameService.send({ type: 'AWARD_POINTS' });\n// => 'win'\n```\n\n----------------------------------------\n\nTITLE: Implementing Transient Transitions in XState Game Machine\nDESCRIPTION: Demonstrates how to create a game state machine with transient transitions that immediately transition to 'win' or 'lose' states based on point conditions.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/transitions.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst gameMachine = createMachine(\n  {\n    id: 'game',\n    initial: 'playing',\n    context: {\n      points: 0\n    },\n    states: {\n      playing: {\n        on: {\n          // Transient transition\n          // Will transition to either 'win' or 'lose' immediately upon\n          // (re)entering 'playing' state if the condition is met.\n          '': [\n            { target: 'win', cond: 'didPlayerWin' },\n            { target: 'lose', cond: 'didPlayerLose' }\n          ],\n          // Self-transition\n          AWARD_POINTS: {\n            actions: assign({\n              points: 100\n            })\n          }\n        }\n      },\n      win: { type: 'final' },\n      lose: { type: 'final' }\n    }\n  },\n  {\n    guards: {\n      didPlayerWin: (context, event) => {\n        // check if player won\n        return context.points > 99;\n      },\n      didPlayerLose: (context, event) => {\n        // check if player lost\n        return context.points < 0;\n      }\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Delayed Events in XState\nDESCRIPTION: This code demonstrates how to send delayed events and cancel them in XState. It uses the 'send' action creator with a delay option and the 'cancel' action creator to prevent delayed events from being sent.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/delays.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { actions } from 'xstate';\nconst { send, cancel } = actions;\n\n// action to send the 'TIMER' event after 1 second\nconst sendTimerAfter1Second = send(\n  { type: 'TIMER' },\n  {\n    delay: 1000,\n    id: 'oneSecondTimer' // give the event a unique ID\n  }\n);\n\nconst cancelTimer = cancel('oneSecondTimer'); // pass the ID of event to cancel\n\nconst toggleMachine = createMachine({\n  id: 'toggle',\n  initial: 'inactive',\n  states: {\n    inactive: {\n      entry: sendTimerAfter1Second,\n      on: {\n        TIMER: { target: 'active' },\n        CANCEL: { actions: cancelTimer }\n      }\n    },\n    active: {}\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Entry Actions in XState State Machine\nDESCRIPTION: This snippet shows how to use entry actions in an XState state machine. Entry actions are executed whenever a state is entered, regardless of the transition that led to it.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/actions.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\n{\n  idle: {\n    on: {\n      LOAD: 'loading'\n    }\n  },\n  loading: {\n    // this action is executed whenever the 'loading' state is entered\n    entry: 'fetchData'\n  }\n}\n// ...\n```\n\n----------------------------------------\n\nTITLE: Invoking Child Machines in XState\nDESCRIPTION: Shows how to invoke child state machines within a parent machine and handle their completion data.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/communication.md#2025-04-20_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst someMachine = createMachine({ /* ... */ });\n\n// ...\n{\n  invoke: {\n    src: someMachine,\n    onDone: {\n      target: 'finished',\n      actions: (context, event) => {\n        // Child machine's done data (.data property of its final state)\n        console.log(event.data);\n      }\n    }\n  }\n}\n// ...\n```\n\n----------------------------------------\n\nTITLE: Basic Context Modeling in JavaScript\nDESCRIPTION: Demonstrates how to create a basic user model with context and assign values using XState's createModel function.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/models.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createModel } from 'xstate/lib/model';\n\nconst userModel = createModel({\n  name: 'Someone',\n  age: 0\n});\n\n// ...\n\nconst machine = userModel.createMachine({\n  context: userModel.initialContext,\n  // ...\n  entry: userModel.assign({ name: '' })\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Reddit API Fetch\nDESCRIPTION: Adds async fetching of subreddit data using Promise invocation in the state machine\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/tutorials/reddit.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction invokeFetchSubreddit(context) {\n  const { subreddit } = context;\n\n  return fetch(`https://www.reddit.com/r/${subreddit}.json`)\n    .then((response) => response.json())\n    .then((json) => json.data.children.map((child) => child.data));\n}\n\nconst redditMachine = createMachine({\n  /* ... */\n  states: {\n    idle: {},\n    selected: {\n      invoke: {\n        id: 'fetch-subreddit',\n        src: invokeFetchSubreddit\n      }\n    }\n  },\n  on: {\n    /* ... */\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Spawning Todo Machine Actor in XState\nDESCRIPTION: Example showing how to spawn a new todo machine actor within an assignment action when handling a NEW_TODO.ADD event.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/actors.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine, spawn } from 'xstate';\nimport { todoMachine } from './todoMachine';\n\nconst todosMachine = createMachine({\n  // ...\n  on: {\n    'NEW_TODO.ADD': {\n      actions: assign({\n        todos: (context, event) => [\n          ...context.todos,\n          {\n            todo: event.todo,\n            // add a new todoMachine actor with a unique name\n            ref: spawn(todoMachine, `todo-${event.id}`)\n          }\n        ]\n      })\n    }\n    // ...\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Wildcard to Listen for Any Emitted Event in TypeScript\nDESCRIPTION: Shows how to use the wildcard ('*') listener to capture any events emitted by an actor, providing a way to monitor all emitted events regardless of their type.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nactor.on('*', (emitted) => {\n  console.log(emitted); // Any emitted event\n});\n```\n\n----------------------------------------\n\nTITLE: Context Consumer with useActor\nDESCRIPTION: Example of consuming global state using useActor hook in a React component.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/recipes/react.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useContext } from 'react';\nimport { GlobalStateContext } from './globalState';\nimport { useActor } from '@xstate/react';\n\nexport const SomeComponent = (props) => {\n  const globalServices = useContext(GlobalStateContext);\n  const [state] = useActor(globalServices.authService);\n\n  return state.matches('loggedIn') ? 'Logged In' : 'Logged Out';\n};\n```\n\n----------------------------------------\n\nTITLE: Sending Events from Actors to Parent in XState\nDESCRIPTION: This snippet shows how to send events from an actor to its parent using the sendParent action creator. It includes examples of sending a simple event and sending an event with data using an expression.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/actors.md#2025-04-20_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\n{\n  actions: sendParent({ type: 'ANOTHER_EVENT' });\n}\n// ...\n\n// ...\n{\n  actions: sendParent((context, event) => ({\n    ...context,\n    type: 'ANOTHER_EVENT'\n  }));\n}\n// ...\n```\n\n----------------------------------------\n\nTITLE: Using Tags in XState State Nodes (JavaScript)\nDESCRIPTION: This snippet demonstrates how to add tags to state nodes and use them to categorize different states, such as loading states.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/statenodes.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst machine = createMachine({\n  initial: 'idle',\n  states: {\n    idle: {\n      on: {\n        FETCH: 'loadingUser'\n      }\n    },\n    loadingUser: {\n      tags: ['loading']\n      // ...\n    },\n    loadingFriends: {\n      tags: ['loading']\n      // ...\n    },\n    editing: {\n      // ...\n    }\n  }\n});\n\nmachine.initialState.hasTag('loading');\n// => false\n\nmachine.transition(machine.initialState, 'FETCH').hasTag('loading');\n// => true\n```\n\n----------------------------------------\n\nTITLE: Inline Guard Implementation in XState\nDESCRIPTION: A quick example showing how to prototype guard functions by defining them inline within the machine configuration. This approach is useful for rapid development but should be refactored for better maintainability.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/guards.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\nSEARCH: {\n  target: 'searching',\n  cond: (context, event) => context.canSearch && event.query && event.query.length > 0\n}\n// ...\n```\n\n----------------------------------------\n\nTITLE: Configuring XState Machines with Custom Actions and Services in React\nDESCRIPTION: Illustrates how to configure an existing XState machine with custom actions and services when using it in a React component. This example shows a fetch machine with configurable 'fetchData' service and 'notifySuccess' action.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/packages/xstate-react/index.md#2025-04-20_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine } from 'xstate';\nimport { fromPromise } from 'xstate/actors';\n\nconst fetchMachine = createMachine({\n  id: 'fetch',\n  initial: 'idle',\n  context: {\n    data: undefined,\n    error: undefined\n  },\n  states: {\n    idle: {\n      on: { FETCH: 'loading' }\n    },\n    loading: {\n      invoke: {\n        src: 'fetchData',\n        onDone: {\n          target: 'success',\n          actions: assign({\n            data: (_, event) => event.data\n          })\n        },\n        onError: {\n          target: 'failure',\n          actions: assign({\n            error: (_, event) => event.data\n          })\n        }\n      }\n    },\n    success: {\n      entry: 'notifySuccess',\n      type: 'final'\n    },\n    failure: {\n      on: {\n        RETRY: 'loading'\n      }\n    }\n  }\n});\n\nconst Fetcher = ({ onResolve }) => {\n  const [state, send] = useMachine(fetchMachine, {\n    actions: {\n      notifySuccess: (ctx) => onResolve(ctx.data)\n    },\n    actors: {\n      fetchData: (_, event) =>\n        fromPromise(() =>\n          fetch(`some/api/${event.query}`).then((res) => res.json())\n        )\n    }\n  });\n\n  switch (state.value) {\n    case 'idle':\n      return (\n        <button onClick={() => send({ type: 'FETCH', query: 'something' })}>\n          Search for something\n        </button>\n      );\n    case 'loading':\n      return <div>Searching...</div>;\n    case 'success':\n      return <div>Success! Data: {state.context.data}</div>;\n    case 'failure':\n      return (\n        <>\n          <p>{state.context.error.message}</p>\n          <button onClick={() => send('RETRY')}>Retry</button>\n        </>\n      );\n    default:\n      return null;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Input Data Passing in XState Interpretation\nDESCRIPTION: Shows how to pass input data to a machine during interpretation through the xstate.init event.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_131\n\nLANGUAGE: javascript\nCODE:\n```\nconst greetMachine = createMachine({\n  context: ({ input }) => ({\n    greeting: `Hello ${input.name}!`\n  }),\n  entry: (_, event) => {\n    event.type; // 'xstate.init'\n    event.input; // { name: 'David' }\n  }\n  // ...\n});\n\nconst actor = interpret(greetMachine, {\n  // Pass input data to the machine\n  input: { name: 'David' }\n}).start();\n```\n\n----------------------------------------\n\nTITLE: Checking State Changes in XState\nDESCRIPTION: This snippet demonstrates how to use the state.changed property to determine if a state has changed from its previous state. It shows examples of changed and unchanged states.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/states.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { initialState } = lightMachine;\n\nconsole.log(initialState.changed);\n// => undefined\n\nconst nextState = lightMachine.transition(initialState, { type: 'TIMER' });\n\nconsole.log(nextState.changed);\n// => true\n\nconst unchangedState = lightMachine.transition(nextState, {\n  type: 'UNKNOWN_EVENT'\n});\n\nconsole.log(unchangedState.changed);\n// => false\n```\n\n----------------------------------------\n\nTITLE: Implementing History States in XState\nDESCRIPTION: Shows how to implement history states in a payment machine to remember previous state configurations. The machine can switch between payment methods and return to the last selected method using history state.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/README.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine, createActor } from 'xstate';\n\nconst paymentMachine = createMachine({\n  id: 'payment',\n  initial: 'method',\n  states: {\n    method: {\n      initial: 'cash',\n      states: {\n        cash: {\n          on: {\n            SWITCH_CHECK: 'check'\n          }\n        },\n        check: {\n          on: {\n            SWITCH_CASH: 'cash'\n          }\n        },\n        hist: { type: 'history' }\n      },\n      on: { NEXT: 'review' }\n    },\n    review: {\n      on: { PREVIOUS: 'method.hist' }\n    }\n  }\n});\n\nconst actor = createActor(paymentMachine);\n\nactor.subscribe((state) => {\n  console.log(state.value);\n});\n\nactor.start();\n\nactor.send({ type: 'SWITCH_CHECK' });\n\nactor.send({ type: 'NEXT' });\n\nactor.send({ type: 'PREVIOUS' });\n```\n\n----------------------------------------\n\nTITLE: Customizing Initial Context in XState Machines\nDESCRIPTION: This snippet shows how to customize the initial context of an XState machine using the .withContext() method. It demonstrates replacing the original context with a new one and also how to merge with the original context.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/machines.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst lightMachine = // (same as first example)\n\nconst testLightMachine = lightMachine.withContext({\n  elapsed: 1000,\n  direction: 'north'\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst testLightMachine = lightMachine.withContext({\n  // merge with original context\n  ...lightMachine.context,\n  elapsed: 1000\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing History States in XState Payment Flow\nDESCRIPTION: Demonstrates the use of history states in a payment processing flow, allowing the system to remember and return to previous payment method selections. Uses XState's history state type to maintain state memory.\nSOURCE: https://github.com/statelyai/xstate/blob/main/README.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine, createActor } from 'xstate';\n\nconst paymentMachine = createMachine({\n  id: 'payment',\n  initial: 'method',\n  states: {\n    method: {\n      initial: 'cash',\n      states: {\n        cash: {\n          on: {\n            SWITCH_CHECK: 'check'\n          }\n        },\n        check: {\n          on: {\n            SWITCH_CASH: 'cash'\n          }\n        },\n        hist: { type: 'history' }\n      },\n      on: { NEXT: 'review' }\n    },\n    review: {\n      on: { PREVIOUS: 'method.hist' }\n    }\n  }\n});\n\nconst actor = createActor(paymentMachine);\n\nactor.subscribe((state) => {\n  console.log(state.value);\n});\n\nactor.start();\n// logs {\n//   value: { method: 'cash' },\n// }\n\nactor.send({ type: 'SWITCH_CHECK' });\n// logs {\n//   value: { method: 'check' },\n// }\n\nactor.send({ type: 'NEXT' });\n// logs {\n//   value: 'review',\n// }\n\nactor.send({ type: 'PREVIOUS' });\n// logs {\n//   value: { method: 'check' },\n// }\n```\n\n----------------------------------------\n\nTITLE: Defining State Machine with Metadata in XState\nDESCRIPTION: Example of creating a state machine with metadata properties defined for different states. Shows how to structure metadata for a fetch operation with various states like idle, loading, success, and failure.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/states.md#2025-04-20_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst fetchMachine = createMachine({\n  id: 'fetch',\n  initial: 'idle',\n  states: {\n    idle: {\n      on: { FETCH: { target: 'loading' } }\n    },\n    loading: {\n      after: {\n        3000: 'failure.timeout'\n      },\n      on: {\n        RESOLVE: { target: 'success' },\n        REJECT: { target: 'failure' },\n        TIMEOUT: { target: 'failure.timeout' } // manual timeout\n      },\n      meta: {\n        message: 'Loading...'\n      }\n    },\n    success: {\n      meta: {\n        message: 'The request succeeded!'\n      }\n    },\n    failure: {\n      initial: 'rejection',\n      states: {\n        rejection: {\n          meta: {\n            message: 'The request failed.'\n          }\n        },\n        timeout: {\n          meta: {\n            message: 'The request timed out.'\n          }\n        }\n      },\n      meta: {\n        alert: 'Uh oh.'\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing XState Machine in React\nDESCRIPTION: React component implementation using useMachine hook from @xstate/react\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/start.md#2025-04-20_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useMachine } from '@xstate/react';\n\nconst Component = () => {\n  const [state, send] = useMachine(promiseMachine);\n\n  return (\n    <div>\n      {/** You can listen to what state the service is in */}\n      {state.matches('pending') && <p>Loading...</p>}\n      {state.matches('rejected') && <p>Promise Rejected</p>}\n      {state.matches('resolved') && <p>Promise Resolved</p>}\n      <div>\n        {/** You can send events to the running service */}\n        <button onClick={() => send('RESOLVE')}>Resolve</button>\n        <button onClick={() => send('REJECT')}>Reject</button>\n      </div>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Traffic Light State Machine in XState\nDESCRIPTION: Creates a traffic light state machine with nested pedestrian states. The machine handles transitions between traffic light colors and pedestrian walking states, demonstrating compound state implementation.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/hierarchical.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst pedestrianStates = {\n  initial: 'walk',\n  states: {\n    walk: {\n      on: {\n        PED_COUNTDOWN: { target: 'wait' }\n      }\n    },\n    wait: {\n      on: {\n        PED_COUNTDOWN: { target: 'stop' }\n      }\n    },\n    stop: {},\n    blinking: {}\n  }\n};\n\nconst lightMachine = createMachine({\n  key: 'light',\n  initial: 'green',\n  states: {\n    green: {\n      on: {\n        TIMER: { target: 'yellow' }\n      }\n    },\n    yellow: {\n      on: {\n        TIMER: { target: 'red' }\n      }\n    },\n    red: {\n      on: {\n        TIMER: { target: 'green' }\n      },\n      ...pedestrianStates\n    }\n  },\n  on: {\n    POWER_OUTAGE: { target: '.red.blinking' },\n    POWER_RESTORED: { target: '.red' }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Syncing State with Spawned Actors in XState\nDESCRIPTION: This snippet shows how to enable state synchronization between a parent machine and a spawned child machine using the 'sync' option. It also demonstrates how to access the synchronized state using getSnapshot().\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/actors.md#2025-04-20_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\n{\n  actions: assign({\n    // Actor will send update event to parent whenever its state changes\n    someRef: () => spawn(todoMachine, { sync: true })\n  });\n}\n// ...\n\nsomeService.onTransition((state) => {\n  const { someRef } = state.context;\n\n  console.log(someRef.getSnapshot());\n  // => State {\n  //   value: ...,\n  //   context: ...\n  // }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Higher-Level Guards (and, or, not) in XState\nDESCRIPTION: Example of using the newly supported higher-level guard composers (and, or, not) in XState v5 to create complex conditional transitions.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_143\n\nLANGUAGE: javascript\nCODE:\n```\nimport { and, or, not } from 'xstate/guards';\n\nconst someMachine = createMachine({\n  // ...\n  on: {\n    EVENT: {\n      target: 'somewhere',\n      guard: and([\n        'stringGuard',\n        or([{ type: 'anotherGuard' }, not(() => false)])\n      ])\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Transitions with Null Events in XState\nDESCRIPTION: Shows how to use null events with conditional guards to immediately determine the next state based on context data.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/events.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst isAdult = ({ age }) => age >= 18;\nconst isMinor = ({ age }) => age < 18;\n\nconst ageMachine = createMachine({\n  id: 'age',\n  context: { age: undefined }, // age unknown\n  initial: 'unknown',\n  states: {\n    unknown: {\n      on: {\n        // immediately take transition that satisfies conditional guard.\n        // otherwise, no transition occurs\n        '': [\n          { target: 'adult', cond: isAdult },\n          { target: 'child', cond: isMinor }\n        ]\n      }\n    },\n    adult: { type: 'final' },\n    child: { type: 'final' }\n  }\n});\n\nconsole.log(ageMachine.initialState.value);\n// => 'unknown'\n\nconst personData = { age: 28 };\n\nconst personMachine = ageMachine.withContext(personData);\n\nconsole.log(personMachine.initialState.value);\n// => 'adult'\n```\n\n----------------------------------------\n\nTITLE: Conditional Delayed Transitions in XState\nDESCRIPTION: This code snippet shows how to implement conditional delayed transitions in XState. It demonstrates both single and multiple delay conditions, as well as array-based conditional delayed transitions.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/delays.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nstates: {\n  green: {\n    after: {\n      1000: [\n        { target: 'yellow', cond: 'trafficIsLight' },\n        { target: 'green' } // reenter 'green' state\n      ]\n    }\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nstates: {\n  green: {\n    after: {\n      1000: { target: 'yellow', cond: 'trafficIsLight' },\n      2000: { target: 'yellow' } // always transition to 'yellow' after 2 seconds\n    }\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nstates: {\n  green: {\n    after: [\n      { delay: 1000, target: 'yellow', cond: 'trafficIsLight' },\n      { delay: 2000, target: 'yellow' }\n    ];\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Complex State Machine in XState (JavaScript)\nDESCRIPTION: This snippet shows a more complex state machine with nested states, including success and failure states with substates.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/statenodes.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst fetchMachine = createMachine({\n  id: 'fetch',\n\n  // Initial state\n  initial: 'idle',\n\n  // States\n  states: {\n    idle: {\n      on: {\n        FETCH: { target: 'pending' }\n      }\n    },\n    pending: {\n      on: {\n        FULFILL: { target: 'success' },\n        REJECT: { target: 'failure' }\n      }\n    },\n    success: {\n      // Initial child state\n      initial: 'items',\n\n      // Child states\n      states: {\n        items: {\n          on: {\n            'ITEM.CLICK': { target: 'item' }\n          }\n        },\n        item: {\n          on: {\n            BACK: { target: 'items' }\n          }\n        }\n      }\n    },\n    failure: {\n      on: {\n        RETRY: { target: 'pending' }\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Context Assignment Examples\nDESCRIPTION: Demonstrates different ways to use the assign action to update context, including object and function assigners.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/context.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine, assign } from 'xstate';\n// example: property assigner\n\n// ...\n  actions: assign({\n    // increment the current count by the event value\n    count: (context, event) => context.count + event.value,\n\n    // assign static value to the message (no function needed)\n    message: 'Count changed'\n  }),\n// ...\n```\n\n----------------------------------------\n\nTITLE: Event Propagation in Nested States with XState\nDESCRIPTION: This example illustrates event propagation in nested states using XState. When a child state doesn't handle an event, it's propagated to its parent state for handling.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/hierarchical.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(lightMachine.transition({ red: 'stop' }, { type: 'TIMER' }).value);\n// => 'green'\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Actor Context with React and XState\nDESCRIPTION: Example of creating a React Context for an XState actor using createActorContext, and demonstrating how to provide and consume the context in React components. It shows usage of useActor, useSelector, and useActorRef hooks from the created context.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/packages/xstate-react/index.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createActorContext } from '@xstate/react';\nimport { someMachine } from '../path/to/someMachine';\nconst SomeMachineContext = createActorContext(someMachine);\nfunction App() {\n  return (\n    <SomeMachineContext.Provider>\n      <SomeComponent />\n    </SomeMachineContext.Provider>\n  );\n}\n\n// Consuming the actor in a component:\nimport { SomeMachineContext } from '../path/to/SomeMachineContext';\nfunction SomeComponent() {\n  // Read full snapshot and get `send` function from `useActor()`\n  const [state, send] = SomeMachineContext.useActor();\n  // Or derive a specific value from the snapshot with `useSelector()`\n  const count = SomeMachineContext.useSelector((state) => state.context.count);\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => send('INCREMENT')}>Increment</button>\n    </div>\n  );\n}\n\n// Reading the actor ref:\nimport { SomeMachineContext } from '../path/to/SomeMachineContext';\nfunction SomeComponent() {\n  const actorRef = SomeMachineContext.useActorRef();\n  return (\n    <div>\n      <button onClick={() => actorRef.send('INCREMENT')}>Increment</button>\n    </div>\n  );\n}\n\n// Providing a similar machine:\nimport { SomeMachineContext } from '../path/to/SomeMachineContext';\nimport { someMachine } from '../path/to/someMachine';\nfunction SomeComponent() {\n  return (\n    <SomeMachineContext.Provider\n      machine={() =>\n        someMachine.withConfig({\n          /* ... */\n        })\n      }\n    >\n      <SomeOtherComponent />\n    </SomeMachineContext.Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Available Imports from XState Core in v5\nDESCRIPTION: Overview of the available imports from the XState core package, showing action creators, actor functions, and guard functions that can be imported directly.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  // actions\n  // sendTo (removed)\n  pure,\n\n  // interpret helpers\n  waitFor,\n\n  // actor functions\n  fromPromise,\n  fromObservable,\n  fromCallback,\n  fromEventObservable,\n  fromTransition,\n\n  // guard functions\n  stateIn,\n  not,\n  and,\n  or\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Test Assertions to State Machine with Puppeteer\nDESCRIPTION: Extends the toggle machine by adding test assertions for each state using the meta.test property. Utilizes Puppeteer to verify the UI state in each machine state.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/packages/xstate-test/index.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// ...\n\nconst toggleMachine = createMachine({\n  id: 'toggle',\n  initial: 'inactive',\n  states: {\n    inactive: {\n      on: {\n        /* ... */\n      },\n      meta: {\n        test: async (page) => {\n          await page.waitFor('input:checked');\n        }\n      }\n    },\n    active: {\n      on: {\n        /* ... */\n      },\n      meta: {\n        test: async (page) => {\n          await page.waitFor('input:not(:checked)');\n        }\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Combined State Metadata in XState\nDESCRIPTION: Demonstrates how to access the combined metadata from multiple state nodes when transitioning to a specific state.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/states.md#2025-04-20_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst failureTimeoutState = fetchMachine.transition('loading', {\n  type: 'TIMEOUT'\n});\n\nconsole.log(failureTimeoutState.meta);\n// => {\n//   failure: {\n//     alert: 'Uh oh.'\n//   },\n//   'failure.timeout': {\n//     message: 'The request timed out.'\n//   }\n// }\n```\n\n----------------------------------------\n\nTITLE: Implementing Flight Booker State Machine with XState\nDESCRIPTION: Complete implementation of the Flight Booker state machine using XState. It defines the machine with editing and submitted states, handlers for updating form values, and validation logic for ensuring proper date constraints when submitting the form.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/tutorials/7guis/flight.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine, assign } from 'xstate';\n\nexport const flightMachine = createMachine({\n  id: 'flight',\n  initial: 'editing',\n  context: {\n    startDate: undefined,\n    returnDate: undefined,\n    trip: 'oneWay' // or 'roundTrip'\n  },\n  states: {\n    editing: {\n      on: {\n        'startDate.UPDATE': {\n          actions: assign({\n            startDate: (_, event) => event.value\n          })\n        },\n        'returnDate.UPDATE': {\n          actions: assign({\n            returnDate: (_, event) => event.value\n          }),\n          cond: (context) => context.trip === 'roundTrip'\n        },\n        SET_TRIP: {\n          actions: assign({\n            trip: (_, event) => event.value\n          }),\n          cond: (_, event) =>\n            event.value === 'oneWay' || event.value === 'roundTrip'\n        },\n        SUBMIT: {\n          target: 'submitted',\n          cond: (context) => {\n            if (context.trip === 'oneWay') {\n              return !!context.startDate;\n            } else {\n              return (\n                !!context.startDate &&\n                !!context.returnDate &&\n                context.returnDate > context.startDate\n              );\n            }\n          }\n        }\n      }\n    },\n    submitted: {\n      type: 'final'\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Initial Context in XState Machine\nDESCRIPTION: This example demonstrates how to specify the initial context for a counter machine in XState. It shows setting various properties in the context object.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/context.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst counterMachine = createMachine({\n  id: 'counter',\n  // initial context\n  context: {\n    count: 0,\n    message: 'Currently empty',\n    user: {\n      name: 'David'\n    },\n    allowedToIncrement: true\n    // ... etc.\n  },\n  states: {\n    // ...\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Named Actions in XState with React Router\nDESCRIPTION: Demonstrates how to implement named actions in XState and use them with React Router for navigation within a React component.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/recipes/react.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine } from 'xstate';\n\nexport const machine = createMachine({\n  initial: 'toggledOff',\n  states: {\n    toggledOff: {\n      on: {\n        TOGGLE: 'toggledOn'\n      }\n    },\n    toggledOn: {\n      entry: ['goToOtherPage']\n    }\n  }\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { machine } from './machine';\nimport { useMachine } from '@xstate/react';\nimport { useHistory } from 'react-router';\n\nconst Component = () => {\n  const history = useHistory();\n\n  const [state, send] = useMachine(machine, {\n    actions: {\n      goToOtherPage: () => {\n        history.push('/other-page');\n      }\n    }\n  });\n\n  return null;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing In-State Guards in XState\nDESCRIPTION: This example demonstrates using the 'in' property as a guard that checks if a specific state is active. It shows a traffic light machine that only transitions from red to green when in the 'stop' substate.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/guards.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst lightMachine = createMachine({\n  id: 'light',\n  initial: 'green',\n  states: {\n    green: {\n      on: {\n        TIMER: { target: 'yellow' }\n      }\n    },\n    yellow: {\n      on: {\n        TIMER: { target: 'red' }\n      }\n    },\n    red: {\n      initial: 'walk',\n      states: {\n        walk: {\n          /* ... */\n        },\n        wait: {\n          /* ... */\n        },\n        stop: {\n          /* ... */\n        }\n      },\n      on: {\n        TIMER: [\n          {\n            target: 'green',\n            in: '#light.red.stop'\n          }\n        ]\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Pure Action Creator in XState\nDESCRIPTION: Demonstrates the pure() action creator which returns action objects based on current state context and events. Shows how to dynamically create actions using pure functions.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/actions.md#2025-04-20_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine, actions } from 'xstate';\n\nconst { pure } = actions;\n\n// Dynamically send an event to every invoked sample actor\nconst sendToAllSampleActors = pure((context, event) => {\n  return context.sampleActors.map((sampleActor) => {\n    return send('SOME_EVENT', { to: sampleActor });\n  });\n});\n\nconst machine = createMachine({\n  // ...\n  states: {\n    active: {\n      entry: sendToAllSampleActors\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Interpreting and Using XState Machine with Immer\nDESCRIPTION: Shows how to interpret the XState machine and send events to update its state using Immer-based actions.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/packages/xstate-immer/index.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst toggleService = interpret(toggleMachine)\n  .onTransition((state) => {\n    console.log(state.context);\n  })\n  .start();\n\ntoggleService.send({ type: 'TOGGLE' });\n// { count: 1, level: 0 }\n\ntoggleService.send(levelUpdater.update(9));\n// { count: 1, level: 9 }\n\ntoggleService.send({ type: 'TOGGLE' });\n// { count: 2, level: 9 }\n\ntoggleService.send(levelUpdater.update(-100));\n// Notice how the level is not updated in 'inactive' state:\n// { count: 2, level: 9 }\n```\n\n----------------------------------------\n\nTITLE: Complete Form Example with XState and Immer TypeScript Implementation\nDESCRIPTION: A comprehensive example showing a complete form implementation using XState with Immer, including context types, event definitions, and state machine configuration.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/packages/xstate-immer/index.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMachine } from 'xstate';\nimport { createUpdater, ImmerUpdateEvent } from '@xstate/immer';\n\ninterface FormContext {\n  name: string;\n  age: number | undefined;\n}\n\ntype NameUpdateEvent = ImmerUpdateEvent<'UPDATE_NAME', string>;\ntype AgeUpdateEvent = ImmerUpdateEvent<'UPDATE_AGE', number>;\n\nconst nameUpdater = createUpdater<FormContext, NameUpdateEvent>(\n  'UPDATE_NAME',\n  (ctx, { input }) => {\n    ctx.name = input;\n  }\n);\n\nconst ageUpdater = createUpdater<FormContext, AgeUpdateEvent>(\n  'UPDATE_AGE',\n  (ctx, { input }) => {\n    ctx.age = input;\n  }\n);\n\ntype FormEvent =\n  | NameUpdateEvent\n  | AgeUpdateEvent\n  | {\n      type: 'SUBMIT';\n    };\n\nconst formMachine = createMachine({\n  schema: {\n    context: {} as FormContext,\n    events: {} as FormEvent\n  },\n  initial: 'editing',\n  context: {\n    name: '',\n    age: undefined\n  },\n  states: {\n    editing: {\n      on: {\n        [nameUpdater.type]: { actions: nameUpdater.action },\n        [ageUpdater.type]: { actions: ageUpdater.action },\n        SUBMIT: 'submitting'\n      }\n    },\n    submitting: {\n      // ...\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Done Data in XState\nDESCRIPTION: This snippet demonstrates how to handle done data from a child machine in XState, using a secret machine example.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/communication.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst secretMachine = createMachine({\n  id: 'secret',\n  initial: 'wait',\n  context: {\n    secret: '42'\n  },\n  states: {\n    wait: {\n      after: {\n        1000: { target: 'reveal' }\n      }\n    },\n    reveal: {\n      type: 'final',\n      data: {\n        secret: (context, event) => context.secret\n      }\n    }\n  }\n});\n\nconst parentMachine = createMachine({\n  id: 'parent',\n  initial: 'pending',\n  context: {\n    revealedSecret: undefined\n  },\n  states: {\n    pending: {\n      invoke: {\n        id: 'secret',\n        src: secretMachine,\n        onDone: {\n          target: 'success',\n          actions: assign({\n            revealedSecret: (context, event) => {\n              // event is:\n              // { type: 'xstate.done.actor.secret', data: { secret: '42' } }\n              return event.data.secret;\n            }\n          })\n        }\n      }\n    },\n    success: {\n      type: 'final'\n    }\n  }\n});\n\nconst service = interpret(parentMachine)\n  .onTransition((state) => console.log(state.context))\n  .start();\n// => { revealedSecret: undefined }\n// ...\n// => { revealedSecret: '42' }\n```\n\n----------------------------------------\n\nTITLE: Replacing autoForward with Explicit Event Forwarding in XState\nDESCRIPTION: Demonstrates how to replace the removed autoForward property with explicit event forwarding using the sendTo action. This requires manually defining which events should be forwarded to child actors.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_33\n\nLANGUAGE: diff\nCODE:\n```\ninvoke: {\n  id: 'child',\n  src: 'someSrc',\n- autoForward: true\n},\n// ...\non: {\n  // ...\n+ EVENT_TO_FORWARD: {\n+   actions: sendTo('child', (_, event) => event)\n+ }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Toggle State Machine Implementation\nDESCRIPTION: Example of creating and using a simple toggle state machine with context management and event handling.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/README.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMachine, createActor, assign } from 'xstate';\n\n// State machine\nconst toggleMachine = createMachine({\n  id: 'toggle',\n  initial: 'inactive',\n  context: {\n    count: 0\n  },\n  states: {\n    inactive: {\n      on: {\n        TOGGLE: { target: 'active' }\n      }\n    },\n    active: {\n      entry: assign({ count: ({ context }) => context.count + 1 }),\n      on: {\n        TOGGLE: { target: 'inactive' }\n      }\n    }\n  }\n});\n\n// Actor (instance of the machine logic, like a store)\nconst toggleActor = createActor(toggleMachine);\ntoggleActor.subscribe((state) => console.log(state.value, state.context));\ntoggleActor.start();\n// => logs 'inactive', { count: 0 }\n\ntoggleActor.send({ type: 'TOGGLE' });\n// => logs 'active', { count: 1 }\n\ntoggleActor.send({ type: 'TOGGLE' });\n// => logs 'inactive', { count: 1 }\n```\n\n----------------------------------------\n\nTITLE: Basic Toggle State Machine Implementation\nDESCRIPTION: Demonstrates creating a simple toggle state machine with context management using XState. Shows basic machine definition, actor creation, state subscription, and event handling.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/packages/core/index.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMachine, createActor, assign } from 'xstate';\n\n// State machine\nconst toggleMachine = createMachine({\n  id: 'toggle',\n  initial: 'inactive',\n  context: {\n    count: 0\n  },\n  states: {\n    inactive: {\n      on: {\n        TOGGLE: { target: 'active' }\n      }\n    },\n    active: {\n      entry: assign({ count: ({ context }) => context.count + 1 }),\n      on: {\n        TOGGLE: { target: 'inactive' }\n      }\n    }\n  }\n});\n\n// Actor (instance of the machine logic, like a store)\nconst toggleActor = createActor(toggleMachine);\ntoggleActor.subscribe((state) => console.log(state.value, state.context));\ntoggleActor.start();\n// => logs 'inactive', { count: 0 }\n\ntoggleActor.send({ type: 'TOGGLE' });\n// => logs 'active', { count: 1 }\n\ntoggleActor.send({ type: 'TOGGLE' });\n// => logs 'inactive', { count: 1 }\n```\n\n----------------------------------------\n\nTITLE: Extending XState Machines with Custom Configuration\nDESCRIPTION: This snippet demonstrates how to extend an existing XState machine using the .withConfig() method. It shows how to override the implementation of an action in the extended machine.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/machines.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst lightMachine = // (same as above example)\n\nconst noAlertLightMachine = lightMachine.withConfig({\n  actions: {\n    alertGreen: (context, event) => {\n      console.log('green');\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Choose Action Creator in XState\nDESCRIPTION: Shows how to use the choose() action creator to conditionally execute actions based on specified conditions. The example demonstrates multiple conditional branches with different actions.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/actions.md#2025-04-20_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { actions } from 'xstate';\n\nconst { choose, log } = actions;\n\nconst maybeDoThese = choose([\n  {\n    cond: 'cond1',\n    actions: [\n      // selected when \"cond1\" is true\n      log('cond1 chosen!')\n    ]\n  },\n  {\n    cond: 'cond2',\n    actions: [\n      // selected when \"cond1\" is false and \"cond2\" is true\n      log((context, event) => {\n        /* ... */\n      }),\n      log('another action')\n    ]\n  },\n  {\n    cond: (context, event) => {\n      // some condition\n      return false;\n    },\n    actions: [\n      // selected when \"cond1\" and \"cond2\" are false and the inline `cond` is true\n      (context, event) => {\n        // some other action\n      }\n    ]\n  },\n  {\n    actions: [\n      log('fall-through action')\n      // selected when \"cond1\", \"cond2\", and \"cond3\" are false\n    ]\n  }\n]);\n```\n\n----------------------------------------\n\nTITLE: Transitioning Parallel States in XState\nDESCRIPTION: Shows how to transition between states in a parallel state machine using object state values. The example demonstrates transitioning the upload state while maintaining the download state.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/parallel.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(\n  fileMachine.transition(\n    {\n      upload: 'pending',\n      download: 'idle'\n    },\n    { type: 'UPLOAD_COMPLETE' }\n  ).value\n);\n// => {\n//   upload: 'success',\n//   download: 'idle'\n// }\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Subreddit Fetching in XState\nDESCRIPTION: Defines an invoked Promise to fetch subreddit data and handles the loading, loaded, and failed states for the asynchronous operation.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/tutorials/reddit.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction invokeFetchSubreddit(context) {\n  const { subreddit } = context;\n\n  return fetch(`https://www.reddit.com/r/${subreddit}.json`)\n    .then((response) => response.json())\n    .then((json) => json.data.children.map((child) => child.data));\n}\n\nconst redditMachine = createMachine({\n  /* ... */\n  states: {\n    idle: {},\n    selected: {\n      initial: 'loading',\n      states: {\n        loading: {\n          invoke: {\n            id: 'fetch-subreddit',\n            src: invokeFetchSubreddit,\n            onDone: {\n              target: 'loaded',\n              actions: assign({\n                posts: (context, event) => event.data\n              })\n            },\n            onError: 'failed'\n          }\n        },\n        loaded: {},\n        failed: {}\n      }\n    }\n  },\n  on: {\n    /* ... */\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Service Invocation in XState\nDESCRIPTION: Demonstrates how to configure a service invocation using string references and the services property in machine options.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/communication.md#2025-04-20_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst userMachine = createMachine(\n  {\n    id: 'user',\n    // ...\n    states: {\n      // ...\n      loading: {\n        invoke: {\n          src: 'getUser',\n          // ...\n        }\n      },\n      // ...\n    }\n  },\n  {\n  services: {\n    getUser: (context, event) => fetchUser(context.user.id)\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Custom XState Integration in Ember Handlebars Template\nDESCRIPTION: Shows a custom integration of XState in an Ember Handlebars template with a toggle button that displays different text based on the machine state.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/recipes/ember.md#2025-04-20_snippet_6\n\nLANGUAGE: handlebars\nCODE:\n```\n<button type='button' {{on 'click' (fn this.transition 'TOGGLE')}}>\n  {{if this.isInactive 'Off' 'On'}}\n</button>\n```\n\n----------------------------------------\n\nTITLE: Basic Counter Implementation in XState\nDESCRIPTION: Creates a basic counter machine with increment and decrement functionality using XState. The counter state is stored in context and can be modified through INC and DEC events.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/examples/counter.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine, interpret, assign } from 'xstate';\n\nconst increment = (context) => context.count + 1;\nconst decrement = (context) => context.count - 1;\n\nconst counterMachine = createMachine({\n  initial: 'active',\n  context: {\n    count: 0\n  },\n  states: {\n    active: {\n      on: {\n        INC: { actions: assign({ count: increment }) },\n        DEC: { actions: assign({ count: decrement }) }\n      }\n    }\n  }\n});\n\nconst counterService = interpret(counterMachine)\n  .onTransition((state) => console.log(state.context.count))\n  .start();\n// => 0\n\ncounterService.send({ type: 'INC' });\n// => 1\n\ncounterService.send({ type: 'INC' });\n// => 2\n\ncounterService.send({ type: 'DEC' });\n// => 1\n```\n\n----------------------------------------\n\nTITLE: XState Effects Overview Documentation\nDESCRIPTION: Markdown documentation detailing the categorization of side-effects in XState statecharts, including fire-and-forget effects and invoked effects with their respective implementations and behaviors.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/effects.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Effects\n\nIn statecharts, \"side-effects\" can be grouped into two categories:\n\n**\"Fire-and-forget\" effects**, which execute a synchronous side-effect with no events sent back to the statechart, or _send an event synchronously_ back to the statechart:\n\n- [Actions](./actions.md) - single, discrete effects\n- [Activities](./activities.md) - continuous effects that are disposed when the state they were started in is exited\n\n**Invoked effects**, which execute a side-effect that can send and receive events _asynchronously_:\n\n- [Invoked Promises](./communication.md#invoking-promises) - single, discrete effects over time that may `resolve` or `reject` once, which are sent as events to the parent machine\n- [Invoked Callbacks](./communication.md#invoking-callbacks) - continuous effects over time that may send multiple events, as well as listen for events sent directly to it, to/from the parent machine\n- [Invoked Observables](./communication.md#invoking-observables) - continuous effects over time that may send multiple events triggered by messages from the observed stream\n- [Invoked Machines](./communication.md#invoking-machines) - continuous effects represented by `Machine` instances that can send/receive events, but also notify the parent machine when it has reached its [final state](./final.md)\n```\n\n----------------------------------------\n\nTITLE: Implementing State Machine with Meta Data in XState\nDESCRIPTION: Example of creating a state machine with meta data properties defined for different states. Demonstrates a fetch machine with loading, success, and failure states, each containing custom meta data properties.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/states.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst fetchMachine = createMachine({\n  id: 'fetch',\n  initial: 'idle',\n  states: {\n    idle: {\n      on: { FETCH: { target: 'loading' } }\n    },\n    loading: {\n      after: {\n        3000: 'failure.timeout'\n      },\n      on: {\n        RESOLVE: { target: 'success' },\n        REJECT: { target: 'failure' },\n        TIMEOUT: { target: 'failure.timeout' } // manual timeout\n      },\n      meta: {\n        message: 'Loading...'\n      }\n    },\n    success: {\n      meta: {\n        message: 'The request succeeded!'\n      }\n    },\n    failure: {\n      initial: 'rejection',\n      states: {\n        rejection: {\n          meta: {\n            message: 'The request failed.'\n          }\n        },\n        timeout: {\n          meta: {\n            message: 'The request timed out.'\n          }\n        }\n      },\n      meta: {\n        alert: 'Uh oh.'\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing History States with XState in JavaScript\nDESCRIPTION: This snippet shows how to use history states in XState to remember and return to previous states. It models a payment process with cash and check options, allowing navigation between method selection and review stages while preserving the last selected payment method.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/packages/core/index.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine, createActor } from 'xstate';\n\nconst paymentMachine = createMachine({\n  id: 'payment',\n  initial: 'method',\n  states: {\n    method: {\n      initial: 'cash',\n      states: {\n        cash: {\n          on: {\n            SWITCH_CHECK: 'check'\n          }\n        },\n        check: {\n          on: {\n            SWITCH_CASH: 'cash'\n          }\n        },\n        hist: { type: 'history' }\n      },\n      on: { NEXT: 'review' }\n    },\n    review: {\n      on: { PREVIOUS: 'method.hist' }\n    }\n  }\n});\n\nconst actor = createActor(paymentMachine);\n\nactor.subscribe((state) => {\n  console.log(state.value);\n});\n\nactor.start();\n// logs {\n//   value: { method: 'cash' },\n// }\n\nactor.send({ type: 'SWITCH_CHECK' });\n// logs {\n//   value: { method: 'check' },\n// }\n\nactor.send({ type: 'NEXT' });\n// logs {\n//   value: 'review',\n// }\n\nactor.send({ type: 'PREVIOUS' });\n// logs {\n//   value: { method: 'check' },\n// }\n```\n\n----------------------------------------\n\nTITLE: Event Modeling with TypeScript in XState\nDESCRIPTION: Shows how to model events with TypeScript, including event creators and type-safe context updates based on events.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/guides/models.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createModel } from 'xstate/lib/model';\n\nconst userModel = createModel(\n  // 初始 context\n  {\n    name: 'David',\n    age: 30\n  },\n  {\n    // 创建事件\n    events: {\n      updateName: (value) => ({ value }),\n      updateAge: (value) => ({ value }),\n      anotherEvent: () => ({}) // 没有内容\n    }\n  }\n);\n\nconst machine = userModel.createMachine(\n  {\n    context: userModel.initialContext,\n    initial: 'active',\n    states: {\n      active: {\n        on: {\n          updateName: {\n            actions: userModel.assign({\n              name: (_, event) => event.value\n            })\n          },\n          updateAge: {\n            actions: 'assignAge'\n          }\n        }\n      }\n    }\n  },\n  {\n    actions: {\n      assignAge: userModel.assign({\n        age: (_, event) => event.value // 推断\n      })\n    }\n  }\n);\n\n// 这会发送以下事件：\n// {\n//   type: 'updateName',\n//   value: 'David'\n// }\nconst nextState = machine.transition(\n  undefined,\n  userModel.events.updateName('David')\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing 'In State' Guards in XState\nDESCRIPTION: This example demonstrates how to use 'in state' guards in XState to check if a specific state node is active before allowing a transition.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/guards.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst lightMachine = createMachine({\n  id: 'light',\n  initial: 'green',\n  states: {\n    green: {\n      on: {\n        TIMER: { target: 'yellow' }\n      }\n    },\n    yellow: {\n      on: {\n        TIMER: { target: 'red' }\n      }\n    },\n    red: {\n      initial: 'walk',\n      states: {\n        walk: {\n          /* ... */\n        },\n        wait: {\n          /* ... */\n        },\n        stop: {\n          /* ... */\n        }\n      },\n      on: {\n        TIMER: [\n          {\n            target: 'green',\n            in: '#light.red.stop'\n          }\n        ]\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Using XState Actor Context in React\nDESCRIPTION: Example of creating an XState actor context and using it in React components to access state and send events.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/packages/xstate-react/index.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createActorContext } from '@xstate/react';\nimport { someMachine } from '../path/to/someMachine';\n\nconst SomeMachineContext = createActorContext(someMachine);\n\nfunction App() {\n  return (\n    <SomeMachineContext.Provider>\n      <SomeComponent />\n    </SomeMachineContext.Provider>\n  );\n}\n\nfunction SomeComponent() {\n  const [state, send] = SomeMachineContext.useActor();\n  const count = SomeMachineContext.useSelector((state) => state.context.count);\n\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => send('INCREMENT')}>Increment</button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Initial Context in XState\nDESCRIPTION: Shows how to modify the initial context of a machine using .withContext() and how to properly merge with existing context.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/machines.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst testLightMachine = lightMachine.withContext({\n  elapsed: 1000,\n  direction: 'north'\n});\n\nconst testLightMachine = lightMachine.withContext({\n  // merge with original context\n  ...lightMachine.context,\n  elapsed: 1000\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing System-based Actor Communication in XState\nDESCRIPTION: Demonstrates how actors can communicate within a system using the key prop for registration and reference. Systems are implicitly created and allow actors to reference each other.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_128\n\nLANGUAGE: javascript\nCODE:\n```\nconst machine = createMachine({\n  // ...\n  invoke: {\n    src: emailMachine,\n    // Registers `emailMachine` as `emailer` on the system\n    key: 'emailer'\n  }\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst machine = createMachine({\n  // ...\n  entry: assign({\n    emailer: (ctx, ev, { spawn }) => spawn(emailMachine, { key: 'emailer' })\n  })\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst anotherMachine = createMachine({\n  // ...\n  entry: sendTo(\n    (ctx, ev, { system }) => {\n      return system.get('emailer');\n    },\n    { type: 'SEND_EMAIL', subject: 'Hello', body: 'World' }\n  )\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Implicit system\nconst actor1 = interpret(machine).start();\n\n// Another implicit system\nconst actor2 = interpret(machine).start();\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Loading States\nDESCRIPTION: Enhances the selected state with child states for handling loading, loaded, and failed states during the API request. This hierarchical approach provides clear separation of concerns for different phases of data fetching.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/tutorials/reddit.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst redditMachine = createMachine({\n  /* ... */\n  states: {\n    idle: {},\n    selected: {\n      initial: 'loading',\n      states: {\n        loading: {\n          invoke: {\n            id: 'fetch-subreddit',\n            src: invokeFetchSubreddit,\n            onDone: 'loaded',\n            onError: 'failed'\n          }\n        },\n        loaded: {},\n        failed: {}\n      }\n    }\n  },\n  on: {\n    /* ... */\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Activity Implementation with Context - XState\nDESCRIPTION: Example showing how to implement an activity with context and configure it in a machine.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/activities.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction createBeepingActivity(context, activity) {\n  // Start the beeping activity\n  const interval = setInterval(() => {\n    console.log('BEEP!');\n  }, context.interval);\n\n  // Return a function that stops the beeping activity\n  return () => clearInterval(interval);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Delayed Transitions in XState\nDESCRIPTION: Creates a traffic light state machine with automatic delayed transitions between states using fixed millisecond delays.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/delays.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst lightDelayMachine = createMachine({\n  id: 'lightDelay',\n  initial: 'green',\n  states: {\n    green: {\n      after: {\n        // after 1 second, transition to yellow\n        1000: { target: 'yellow' }\n      }\n    },\n    yellow: {\n      after: {\n        // after 0.5 seconds, transition to red\n        500: { target: 'red' }\n      }\n    },\n    red: {\n      after: {\n        // after 2 seconds, transition to green\n        2000: { target: 'green' }\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Subreddit Component Using Actor Services in React\nDESCRIPTION: Updated Subreddit component that uses the useService hook to connect to a spawned subreddit actor. This approach allows the subreddit to continue processing even when the component is unmounted.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/tutorials/reddit.md#2025-04-20_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n// ./Subreddit.jsx\n\nconst Subreddit = ({ service }) => {\n  const [current, send] = useService(service);\n\n  // ... same code as previous Subreddit component\n};\n```\n\n----------------------------------------\n\nTITLE: Callback Service with Parent-Child Communication\nDESCRIPTION: Implementation of a ping-pong pattern using callback invocation in XState. Shows how to set up bi-directional communication between parent and child services.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/communication.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst pingPongMachine = createMachine({\n  id: 'pinger',\n  initial: 'active',\n  states: {\n    active: {\n      invoke: {\n        id: 'ponger',\n        src: (context, event) => (callback, onReceive) => {\n          onReceive((e) => {\n            if (e.type === 'PING') {\n              callback('PONG');\n            }\n          });\n        }\n      },\n      entry: send({ type: 'PING' }, { to: 'ponger' }),\n      on: {\n        PONG: { target: 'done' }\n      }\n    },\n    done: {\n      type: 'final'\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Parallel Final States in XState Shopping Cart\nDESCRIPTION: Example demonstrating parallel final states in a shopping cart implementation, where multiple parallel tasks must complete before transitioning to the next state.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/final.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst shoppingMachine = createMachine({\n  id: 'shopping',\n  initial: 'cart',\n  states: {\n    cart: {\n      type: 'parallel',\n      states: {\n        user: {\n          initial: 'pending',\n          states: {\n            pending: {\n              entry: 'getUser',\n              on: {\n                RESOLVE_USER: { target: 'success' },\n                REJECT_USER: { target: 'failure' }\n              }\n            },\n            success: { type: 'final' },\n            failure: {}\n          }\n        },\n        items: {\n          initial: 'pending',\n          states: {\n            pending: {\n              entry: 'getItems',\n              on: {\n                RESOLVE_ITEMS: { target: 'success' },\n                REJECT_ITEMS: { target: 'failure' }\n              }\n            },\n            success: { type: 'final' },\n            failure: {}\n          }\n        }\n      },\n      onDone: 'confirm'\n    },\n    confirm: {\n      // ...\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Updated useMachine Hook Return Values in XState v5\nDESCRIPTION: Shows changes to the useMachine hook's return values in v5, where 'state' was renamed to 'snapshot' and 'service' was renamed to 'actorRef'.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-svelte/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\nconst {\n- state,\n+ snapshot,\n  send,\n- service\n+ actorRef\n} = useMachine(machine);\n```\n\n----------------------------------------\n\nTITLE: Testing Pure Logic with State Transitions in XState\nDESCRIPTION: This snippet demonstrates how to test state machine logic by using the machine.transition() function to assert that a specific state is reached given an initial state and an event. This approach focuses on pure logic without testing side effects.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/testing.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { lightMachine } from '../path/to/lightMachine';\n\nit('should reach \"yellow\" given \"green\" when the \"TIMER\" event occurs', () => {\n  const expectedValue = 'yellow'; // the expected state value\n\n  const actualState = lightMachine.transition('green', { type: 'TIMER' });\n\n  expect(actualState.matches(expectedValue)).toBeTruthy();\n});\n```\n\n----------------------------------------\n\nTITLE: Replacing 'in' Property with stateIn() Guard in XState Transitions\nDESCRIPTION: Shows how to replace the deprecated 'in' property for transitions with the new stateIn() guard creator. This change requires importing the stateIn function from 'xstate/guards' and using it as a guard condition instead.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_32\n\nLANGUAGE: diff\nCODE:\n```\n+ import { stateIn } from 'xstate/guards';\n\n// ...\non: {\n  SOME_EVENT: {\n    target: 'somewhere',\n-   in: '#someState'\n+   guard: stateIn('#someState')\n  }\n}\n// ...\n```\n\n----------------------------------------\n\nTITLE: Typing Promise Services in XState with TypeScript\nDESCRIPTION: This snippet demonstrates how to use generated types to specify the return type of promise-based services in XState. It shows how to define service schemas and implement type-safe services and actions.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/typescript.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMachine } from 'xstate';\n\ncreateMachine(\n  {\n    schema: {\n      services: {} as {\n        myService: {\n          // The data that gets returned from the service\n          data: { id: string };\n        };\n      }\n    },\n    invoke: {\n      src: 'myService',\n      onDone: {\n        actions: 'consoleLogId'\n      }\n    }\n  },\n  {\n    services: {\n      myService: async () => {\n        // This return type is now type-safe\n        return {\n          id: '1'\n        };\n      }\n    },\n    actions: {\n      consoleLogId: (context, event) => {\n        // This event type is now type-safe\n        console.log(event.data.id);\n      }\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing system in Actor Logic Creator Functions\nDESCRIPTION: The system can now be accessed in all actor logic creator functions, providing a consistent way to interact with the XState system.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_62\n\nLANGUAGE: typescript\nCODE:\n```\nfromPromise(({ system }) => { ... });\n\nfromTransition((state, event, { system }) => { ... });\n\nfromObservable(({ system }) => { ... });\n\nfromEventObservable(({ system }) => { ... });\n\nfromCallback((sendBack, receive, { system }) => { ... });\n```\n\n----------------------------------------\n\nTITLE: Implementing Self-Transitions in XState\nDESCRIPTION: Demonstrates internal and external self-transitions in XState, showing how entry and exit actions are handled differently for each type. Includes examples of action execution order.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/actions.md#2025-04-20_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst counterMachine = createMachine({\n  id: 'counter',\n  initial: 'counting',\n  states: {\n    counting: {\n      entry: 'enterCounting',\n      exit: 'exitCounting',\n      on: {\n        // self-transitions\n        INC: { actions: 'increment' }, // internal (implicit)\n        DEC: { target: 'counting', actions: 'decrement' }, // external\n        DO_NOTHING: { internal: true, actions: 'logNothing' } // internal (explicit)\n      }\n    }\n  }\n});\n\n// External transition (exit + transition actions + entry)\nconst stateA = counterMachine.transition('counting', { type: 'DEC' });\nstateA.actions;\n// ['exitCounting', 'decrement', 'enterCounting']\n\n// Internal transition (transition actions)\nconst stateB = counterMachine.transition('counting', { type: 'DO_NOTHING' });\nstateB.actions;\n// ['logNothing']\n\nconst stateC = counterMachine.transition('counting', { type: 'INC' });\nstateB.actions;\n// ['increment']\n```\n\n----------------------------------------\n\nTITLE: App Component Using Actor Services in React\nDESCRIPTION: Updated App component that passes the spawned subreddit actor to the Subreddit component. This allows the service to maintain state independently of the component lifecycle.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/tutorials/reddit.md#2025-04-20_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\n// ./App.jsx\n\nconst App = () => {\n  const [current, send] = useMachine(redditMachine);\n  const { subreddit } = current.context;\n\n  return (\n    <main>\n      {/* ... */}\n      {subreddit && <Subreddit service={subreddit} key={subreddit.id} />}\n    </main>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Initial Context Configuration\nDESCRIPTION: Demonstrates different ways to specify initial context in a state machine, including static values and lazy initialization.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/context.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst counterMachine = createMachine({\n  id: 'counter',\n  // initial context\n  context: {\n    count: 0,\n    message: 'Currently empty',\n    user: {\n      name: 'David'\n    },\n    allowedToIncrement: true\n    // ... etc.\n  },\n  states: {\n    // ...\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic State Node in XState (JavaScript)\nDESCRIPTION: Example of defining a simple state node within an XState machine. This snippet shows the 'idle' state with a transition to 'pending' on a 'FETCH' event.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/statenodes.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  states: {\n    // state node\n    idle: {\n      on: {\n        FETCH: {\n          target: 'pending';\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring XState Machines with Options in Svelte\nDESCRIPTION: Example of configuring an XState machine by passing options to useMachine as the second argument. Demonstrates setting up custom services and actions for a fetch data flow.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/packages/xstate-svelte/index.md#2025-04-20_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { useMachine } from '@xstate/svelte';\n  import { createMachine, assign } from 'xstate';\n\n  const fetchMachine = createMachine({\n    id: 'fetch',\n    initial: 'idle',\n    context: {\n      data: undefined,\n      error: undefined\n    },\n    states: {\n      idle: {\n        on: { FETCH: 'loading' }\n      },\n      loading: {\n        invoke: {\n          src: 'fetchData',\n          onDone: {\n            target: 'success',\n            actions: assign({\n              data: (_, event) => event.data\n            })\n          },\n          onError: {\n            target: 'failure',\n            actions: assign({\n              error: (_, event) => event.data\n            })\n          }\n        }\n      },\n      success: {\n        entry: 'notifySuccess',\n        type: 'final'\n      },\n      failure: {\n        on: {\n          RETRY: 'loading'\n        }\n      }\n    }\n  });\n\n  const onResolve = (data) => {\n    // Do something with data\n  };\n\n  const { state, send } = useMachine(fetchMachine, {\n    actions: {\n      notifySuccess: (context) => onResolve(context.data)\n    },\n    services: {\n      fetchData: (_, event) =>\n        fetch(`some/api/${event.query}`).then((res) => res.json())\n    }\n  });\n</script>\n\n{#if $state.value === 'idle'}\n  <button on:click={() => send({ type: 'FETCH', query: 'something' })}>\n    Search for something\n  </button>\n{:else if $state.value === 'loading'}\n  <div>Searching...</div>\n{:else if $state.value === 'success'}\n  <div>Success! Data: {$state.context.data}</div>\n{:else if $state.value === 'failure'}\n  <p>{$state.context.error.message}</p>\n  <button on:click={() => send('RETRY')}>Retry</button>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Handling Unhandled Events in XState\nDESCRIPTION: This snippet shows how XState handles events that are not explicitly handled by any state in the machine. In non-strict mode, the state remains unchanged.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/hierarchical.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(lightMachine.transition('green', { type: 'UNKNOWN' }).value);\n// => 'green'\n```\n\n----------------------------------------\n\nTITLE: Event Type Assertion Solution in XState\nDESCRIPTION: Shows the solution for event typing issues by implementing type checking on the event type before accessing properties.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/typescript.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMachine(config, {\n  actions: {\n    consoleLogData: (context, event) => {\n      if (event.type !== 'EVENT_WITH_FLAG') return\n      // No more error at .flag!\n      console.log(event.flag);\n    };\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using withContext for Existing Machines in XState\nDESCRIPTION: This snippet shows how to use the withContext method to create a new machine instance with dynamically provided context for an existing machine definition.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/context.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst counterMachine = createMachine({\n  /* ... */\n});\n\n// retrieved dynamically\nconst someContext = { count: 42, time: Date.now() };\n\nconst dynamicCounterMachine = counterMachine.withContext(someContext);\n```\n\n----------------------------------------\n\nTITLE: Creating State Machine from Model in XState\nDESCRIPTION: Shows how to create a state machine from a model using model.createMachine with proper type inference.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/guides/models.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst machine = userModel.createMachine({\n  context: userModel.initialContext,\n  initial: 'active',\n  states: {\n    active: {\n      on: {\n        updateName: {\n          actions: userModel.assign({\n            name: (_, event) => event.value // 推断\n          })\n        }\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Guards with Parameters in XState\nDESCRIPTION: This example shows how to create custom guards with serialized parameters. It demonstrates passing additional configuration data to the guard via a guard object, allowing for more dynamic and reusable guard logic.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/guards.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst searchMachine = createMachine(\n  {\n    // ...\n    states: {\n      idle: {\n        on: {\n          SEARCH: {\n            target: 'searching',\n            // Custom guard object\n            cond: {\n              type: 'searchValid',\n              minQueryLength: 3\n            }\n          }\n        }\n      }\n      // ...\n    }\n  },\n  {\n    guards: {\n      searchValid: (context, event, { cond }) => {\n        // cond === { type: 'searchValid', minQueryLength: 3 }\n        return (\n          context.canSearch &&\n          event.query &&\n          event.query.length > cond.minQueryLength\n        );\n      }\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Sending Events to Actors in XState\nDESCRIPTION: This snippet demonstrates how to send events to actors using the send action creator. It shows both sending a simple event and sending an event with data using an expression.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/actors.md#2025-04-20_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\n{\n  actions: send(\n    { type: 'SOME_EVENT' },\n    {\n      to: (context) => context.someRef\n    }\n  );\n}\n// ...\n\n// ...\n{\n  actions: send((context, event) => ({ ...event, type: 'SOME_EVENT' }), {\n    to: (context) => context.someRef\n  });\n}\n// ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Transient State Nodes in XState (JavaScript)\nDESCRIPTION: This snippet demonstrates how to create a transient state node that immediately transitions to another state based on conditions.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/statenodes.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst timeOfDayMachine = createMachine({\n  id: 'timeOfDay',\n  initial: 'unknown',\n  context: {\n    time: undefined\n  },\n  states: {\n    // Transient state\n    unknown: {\n      always: [\n        { target: 'morning', cond: 'isBeforeNoon' },\n        { target: 'afternoon', cond: 'isBeforeSix' },\n        { target: 'evening' }\n      ]\n    },\n    morning: {},\n    afternoon: {},\n    evening: {}\n  }\n}, {\n  guards: {\n    isBeforeNoon: // ...\n    isBeforeSix: // ...\n  }\n});\n\nconst timeOfDayService = interpret(timeOfDayMachine.withContext({ time: Date.now() }))\n  .onTransition(state => console.log(state.value))\n  .start();\n\n// => 'morning' (assuming the time is before noon)\n```\n\n----------------------------------------\n\nTITLE: Using toPromise with XState actors\nDESCRIPTION: Example of toPromise function which creates a promise from an actor that resolves with the actor snapshot's output when done, or rejects with the actor snapshot's error when it fails.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMachine, createActor, toPromise } from 'xstate';\n\nconst machine = createMachine({\n  // ...\n  states: {\n    // ...\n    done: { type: 'final', output: 42 }\n  }\n});\n\nconst actor = createActor(machine);\n\nactor.start();\n\nconst output = await toPromise(actor);\n\nconsole.log(output);\n// => 42\n```\n\n----------------------------------------\n\nTITLE: Using Higher-Level Guards for Composition in XState\nDESCRIPTION: Demonstrates the new support for higher-level guards that can compose other guards using and(), or(), and not() functions. These functions allow for creating complex guard conditions by combining simpler ones.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nimport { and, or, not } from 'xstate/guards';\n\nconst someMachine = createMachine({\n  // ...\n  on: {\n    EVENT: {\n      target: 'somewhere',\n      guard: and([\n        'stringGuard',\n        or([{ type: 'anotherGuard' }, not(() => false)])\n      ])\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using context factories with self reference in XState\nDESCRIPTION: Example showing how to use context factories that receive the self reference, which can be passed as part of the input to spawned actors.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nsetup({\n  /* ... */\n}).createMachine({\n  context: ({ spawn, self }) => {\n    return {\n      childRef: spawn('child', { input: { parent: self } })\n    };\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: XState Context with Previous Values\nDESCRIPTION: Shows how to model context with explicit previous values to handle intermediate states properly and improve testing and debugging.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/context.md#2025-04-20_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst counterMachine = createMachine({\n  id: 'counter',\n  context: { count: 0, prevCount: undefined },\n  initial: 'active',\n  states: {\n    active: {\n      on: {\n        INC_TWICE: {\n          actions: [\n            (context) => console.log(`Before: ${context.prevCount}`),\n            assign({\n              count: (context) => context.count + 1,\n              prevCount: (context) => context.count\n            }), // count === 1, prevCount === 0\n            assign({ count: (context) => context.count + 1 }), // count === 2\n            (context) => console.log(`After: ${context.count}`)\n          ]\n        }\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Machine Output in XState\nDESCRIPTION: Shows how to define the final output of a state machine using the output property at the top level of the machine config. This output will be available when the machine reaches its final state.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_97\n\nLANGUAGE: typescript\nCODE:\n```\nconst machine = createMachine({\n  initial: 'started',\n  states: {\n    started: {\n      // ...\n    },\n    finished: {\n      type: 'final'\n      // moved to the top level\n      //\n      // output: {\n      //   status: 200\n      // }\n    }\n  },\n  // This will be the final output of the machine\n  // present on `snapshot.output` and in the done events received by the parent\n  // when the machine reaches the top-level final state (\"finished\")\n  output: {\n    status: 200\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Inference with XState Models\nDESCRIPTION: Demonstrates how TypeScript infers types from model definitions, including context properties and event payloads. Shows explicit type declarations for arrays and event parameters.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/models.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createModel } from 'xstate/lib/model';\n\nconst userModel = createModel(\n  {\n    name: 'David', // inferred as `string`\n    age: 30, // inferred as `number`\n    friends: [] as string[] // explicit type\n  },\n  {\n    events: {\n      updateName: (value: string) => ({ value }),\n      updateAge: (value: number) => ({ value }),\n      anotherEvent: () => ({}) // no payload\n    }\n  }\n);\n\n// Context inferred as:\n// {\n//   name: string;\n//   age: number;\n//   friends: string[];\n// }\n\n// Events inferred as:\n// | { type: 'updateName'; value: string; }\n// | { type: 'updateAge'; value: number; }\n// | { type: 'anotherEvent'; }\n```\n\n----------------------------------------\n\nTITLE: Flight Booking TypeScript Interface Definitions\nDESCRIPTION: TypeScript interfaces defining the context and events for the flight booking state machine. Includes context interface for flight details and union type for possible events.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/tutorials/7guis/flight.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface FlightContext {\n  startDate?: string;\n  returnDate?: string;\n  trip: 'oneWay' | 'roundTrip';\n}\n\ntype FlightEvent =\n  | {\n      type: 'SET_TRIP';\n      value: 'oneWay' | 'roundTrip';\n    }\n  | {\n      type: 'startDate.UPDATE';\n      value: string;\n    }\n  | {\n      type: 'returnDate.UPDATE';\n      value: string;\n    }\n  | { type: 'SUBMIT' };\n```\n\n----------------------------------------\n\nTITLE: Beeping Toggle Machine Implementation - XState\nDESCRIPTION: Example of implementing a toggle machine with a beeping activity that runs while in the active state.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/activities.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst toggleMachine = createMachine(\n  {\n    id: 'toggle',\n    initial: 'inactive',\n    states: {\n      inactive: {\n        on: {\n          TOGGLE: { target: 'active' }\n        }\n      },\n      active: {\n        // The 'beeping' activity will take place as long as\n        // the machine is in the 'active' state\n        activities: ['beeping'],\n        on: {\n          TOGGLE: { target: 'inactive' }\n        }\n      }\n    }\n  },\n  {\n    activities: {\n      beeping: () => {\n        // Start the beeping activity\n        const interval = setInterval(() => console.log('BEEP!'), 1000);\n\n        // Return a function that stops the beeping activity\n        return () => clearInterval(interval);\n      }\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Invoking Machine with Context in XState\nDESCRIPTION: This snippet shows how to invoke a child machine with context derived from the parent machine's context in XState.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/communication.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst timerMachine = createMachine({\n  id: 'timer',\n  context: {\n    duration: 1000 // default duration\n  }\n  /* ... */\n});\n\nconst parentMachine = createMachine({\n  id: 'parent',\n  initial: 'active',\n  context: {\n    customDuration: 3000\n  },\n  states: {\n    active: {\n      invoke: {\n        id: 'timer',\n        src: timerMachine,\n        // Deriving child context from parent context\n        data: {\n          duration: (context, event) => context.customDuration\n        }\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Temperature Converter State Machine with XState in JavaScript\nDESCRIPTION: This code snippet creates an XState machine for a temperature converter. It handles conversion between Celsius and Fahrenheit, updating both values simultaneously when either input changes. The machine has a single 'active' state and uses context to store temperature values.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/tutorials/7guis/temperature.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine, assign } from 'xstate';\n\nexport const temperatureMachine = createMachine({\n  initial: 'active',\n  context: { C: undefined, F: undefined },\n  states: {\n    active: {\n      on: {\n        CELSIUS: {\n          actions: assign({\n            C: (_, event) => event.value,\n            F: (_, event) =>\n              event.value.length ? +event.value * (9 / 5) + 32 : ''\n          })\n        },\n        FAHRENHEIT: {\n          actions: assign({\n            C: (_, event) =>\n              event.value.length ? (+event.value - 32) * (5 / 9) : '',\n            F: (_, event) => event.value\n          })\n        }\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Respond Action in XState\nDESCRIPTION: This snippet demonstrates how to use the respond action in XState for communication between services, using an authentication server and client example.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/communication.md#2025-04-20_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine, send, actions } from 'xstate';\n\nconst { respond } = actions;\n\nconst authServerMachine = createMachine({\n  id: 'server',\n  initial: 'waitingForCode',\n  states: {\n    waitingForCode: {\n      on: {\n        CODE: {\n          actions: respond('TOKEN', { delay: 1000 })\n        }\n      }\n    }\n  }\n});\n\nconst authClientMachine = createMachine({\n  id: 'client',\n  initial: 'idle',\n  states: {\n    idle: {\n      on: {\n        AUTH: { target: 'authorizing' }\n      }\n    },\n    authorizing: {\n      invoke: {\n        id: 'auth-server',\n        src: authServerMachine\n      },\n      entry: send({ type: 'CODE' }, { to: 'auth-server' }),\n      on: {\n        TOKEN: { target: 'authorized' }\n      }\n    },\n    authorized: {\n      type: 'final'\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: XState WaitFor Pattern\nDESCRIPTION: Demonstrates using the waitFor utility to handle async operations with XState machines, including timeout configuration.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/interpretation.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { interpret, createMachine } from 'xstate';\nimport { waitFor } from 'xstate/lib/waitFor';\n\nconst machine = createMachine({\n  initial: 'pending',\n  states: {\n    pending: {\n      after: {\n        3000: {\n          target: 'done'\n        }\n      }\n    },\n    done: {}\n  }\n});\n\nconst myFunc = async () => {\n  const actor = interpret(machine).start();\n\n  const doneState = await waitFor(actor, (state) => state.matches('done'));\n\n  console.log(doneState.value); // 'done'\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Schema Types in XState with TypeScript\nDESCRIPTION: Creating a state machine with typed schema for context and events. This provides type safety for context and events throughout the machine definition.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/typescript.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMachine } from 'xstate';\n\nconst lightMachine = createMachine({\n  schema: {\n    // The context (extended state) of the machine\n    context: {} as { elapsed: number },\n    // The events this machine handles\n    events: {} as\n      | { type: 'TIMER' }\n      | { type: 'POWER_OUTAGE' }\n      | { type: 'PED_COUNTDOWN'; duration: number }\n  }\n  /* Other config... */\n});\n```\n\n----------------------------------------\n\nTITLE: Assign Action TypeScript Issues in XState\nDESCRIPTION: Shows TypeScript strict mode issues with assign actions and demonstrates the workaround by adding an unused context parameter.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/typescript.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Context {\n  something: boolean;\n}\n\ncreateMachine({\n  schema: {\n    context: {} as Context\n  },\n  context: {\n    something: true\n  },\n  entry: [\n    // Type 'AssignAction<{ something: false; }, AnyEventObject>' is not assignable to type 'string'.\n    assign(() => {\n      return {\n        something: false\n      };\n    }),\n    // Type 'AssignAction<{ something: false; }, AnyEventObject>' is not assignable to type 'string'.\n    assign({\n      something: false\n    }),\n    // Type 'AssignAction<{ something: false; }, AnyEventObject>' is not assignable to type 'string'.\n    assign({\n      something: () => false\n    })\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Spawning Callback Actor with Counter Interval\nDESCRIPTION: Example of spawning a callback actor that maintains a counter and responds to increment events while updating count periodically.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/actors.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst counterInterval = (callback, receive) => {\n  let count = 0;\n\n  const intervalId = setInterval(() => {\n    callback({ type: 'COUNT.UPDATE', count });\n    count++;\n  }, 1000);\n\n  receive(event => {\n    if (event.type === 'INC') {\n      count++;\n    }\n  });\n\n  return () => { clearInterval(intervalId); }\n}\n\nconst machine = createMachine({\n  // ...\n  {\n    actions: assign({\n      counterRef: () => spawn(counterInterval)\n    })\n  }\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Migrating from useMachine to useActor in React\nDESCRIPTION: Example showing the migration from the deprecated useMachine hook to the new useActor hook, which works with machines and any other kind of actor logic. Also demonstrates replacing useSpawn with useActorRef.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-react/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n-const [state, send] = useMachine(machine);\n+const [state, send] = useActor(machine);\nconst [state, send] = useActor(fromTransition(...));\n```\n\n----------------------------------------\n\nTITLE: Setting Up XState Typegen Machine\nDESCRIPTION: Creating a machine with typegen capabilities. This requires adding the tsTypes property to enable automatic generation of type definitions for actions, guards, and services.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/typescript.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMachine } from 'xstate';\n\nconst machine = createMachine({\n  schema: {\n    context: {} as { value: string },\n    events: {} as { type: 'FOO'; value: string } | { type: 'BAR' }\n  },\n  initial: 'a',\n  states: {\n    a: {\n      on: {\n        FOO: {\n          actions: 'consoleLogValue',\n          target: 'b'\n        }\n      }\n    },\n    b: {\n      entry: 'consoleLogValueAgain'\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Wildcard Transitions in XState\nDESCRIPTION: Demonstrates the use of wildcard transitions in XState, which are activated by any event. This is useful for defining catch-all transitions that handle any unspecified event.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/transitions.md#2025-04-20_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst quietMachine = createMachine({\n  id: 'quiet',\n  initial: 'idle',\n  states: {\n    idle: {\n      on: {\n        WHISPER: undefined,\n        // On any event besides a WHISPER, transition to the 'disturbed' state\n        '*': 'disturbed'\n      }\n    },\n    disturbed: {}\n  }\n});\n\nquietMachine.transition(quietMachine.initialState, { type: 'WHISPER' });\n// => State { value: 'idle' }\n\nquietMachine.transition(quietMachine.initialState, { type: 'SOME_EVENT' });\n// => State { value: 'disturbed' }\n```\n\n----------------------------------------\n\nTITLE: Using MachineConfig Type for External Configuration\nDESCRIPTION: Using the MachineConfig type to define a machine configuration object outside the createMachine function. This helps prevent inference errors when defining configurations separately.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/typescript.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MachineConfig } from 'xstate';\n\nconst myMachineConfig: MachineConfig<TContext, any, TEvent> = {\n  id: 'controller',\n  initial: 'stopped',\n  states: {\n    stopped: {\n      /* ... */\n    },\n    started: {\n      /* ... */\n    }\n  }\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Final State Data Communication\nDESCRIPTION: Demonstrates how to pass data from a child machine's final state to its parent machine using the done event.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/communication.md#2025-04-20_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst secretMachine = createMachine({\n  id: 'secret',\n  initial: 'wait',\n  context: {\n    secret: '42'\n  },\n  states: {\n    wait: {\n      after: {\n        1000: { target: 'reveal' }\n      }\n    },\n    reveal: {\n      type: 'final',\n      data: (context, event) => ({\n        secret: context.secret\n      })\n    }\n  }\n});\n\nconst parentMachine = createMachine({\n  id: 'parent',\n  initial: 'pending',\n  context: {\n    revealedSecret: undefined\n  },\n  states: {\n    pending: {\n      invoke: {\n        id: 'secret',\n        src: secretMachine,\n        onDone: {\n          target: 'success',\n          actions: assign({\n            revealedSecret: (context, event) => {\n              return event.data.secret;\n            }\n          })\n        }\n      }\n    },\n    success: {\n      type: 'final'\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Conditional Delayed Transitions in XState\nDESCRIPTION: Demonstrates how to implement conditional delayed transitions based on traffic conditions with multiple possible delays.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/delays.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nstates: {\n  green: {\n    after: {\n      1000: [\n        { target: 'yellow', cond: 'trafficIsLight' },\n        { target: 'green' } // reenter 'green' state\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using External Statecharts in Ember Components\nDESCRIPTION: Shows how to import statecharts from external locations and invoke them directly in Ember components with Ember 3.25+.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/recipes/ember.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport Component from '@glimmer/component';\nimport { createMachine } from 'xstate';\nimport SomeMachine from '...somewhere...';\n\nexport default class extends Component {\n  MyLocalMachine = SomeMachine;\n  CustomMachine = createMachine(...);\n}\n```\n\n----------------------------------------\n\nTITLE: Sequentially Assigning Context in XState (JavaScript)\nDESCRIPTION: Demonstrates how multiple assign actions can be stacked and run sequentially to update the context in an XState machine.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/context.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\n  actions: [\n    assign({ count: 3 }), // context.count === 3\n    assign({ count: context => context.count * 2 }) // context.count === 6\n  ],\n// ...\n```\n\n----------------------------------------\n\nTITLE: Sending Events to Actor References in XState\nDESCRIPTION: Demonstrates how to send events to actor references using the send action and target expressions.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/actors.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst machine = createMachine({\n  // ...\n  states: {\n    active: {\n      entry: assign({\n        someRef: () => spawn(someMachine)\n      }),\n      on: {\n        SOME_EVENT: {\n          // Use a target expression to send an event\n          // to the actor reference\n          actions: send({ type: 'PING' }, { to: (context) => context.someRef })\n        }\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Inline Implementation Solution in XState\nDESCRIPTION: Demonstrates an alternative solution using inline action implementation where event types are properly inferred.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/typescript.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMachine } from 'xstate';\n\ncreateMachine({\n  schema: {\n    context: {} as Context,\n    events: {} as Event\n  },\n  on: {\n    EVENT_WITH_FLAG: {\n      actions: (context, event) => {\n        // No more error, because we know which event\n        // is responsible for calling this action\n        console.log(event.flag);\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Quick Reference Examples in XState\nDESCRIPTION: Quick reference examples showing default ID generation, custom ID assignment, and different ways of targeting state nodes in XState.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/ids.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst lightMachine = createMachine({\n  id: 'light',\n  initial: 'green',\n  states: {\n    // ID: \"light.green\"\n    green: {\n      /* ... */\n    },\n    // ID: \"light.yellow\"\n    yellow: {\n      /* ... */\n    },\n    // ID: \"light.red\"\n    red: {\n      /* ... */\n    }\n  }\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\nstates: {\n  active: {\n    id: 'custom-active', // can be any unique string\n    // ...\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\non: {\n  EVENT: { target: '#light.yellow' }, // target default ID\n  ANOTHER_EVENT: { target: '#custom-id' } // target custom ID\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Invocations in XState and SCXML\nDESCRIPTION: Demonstrates how to define invocations (for calling external services or child state machines) in XState and the equivalent SCXML syntax.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/scxml.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// XState\n{\n  loading: {\n    invoke: {\n      src: 'someSource',\n      id: 'someID',\n      autoForward: true, // currently for machines only!\n      onDone: 'success',\n      onError: 'failure'\n    }\n  }\n}\n```\n\nLANGUAGE: xml\nCODE:\n```\n<!-- SCXML -->\n<state id=\"loading\">\n  <invoke id=\"someID\" src=\"someSource\" autoforward />\n  <transition event=\"done.invoke.someID\" target=\"success\" />\n  <transition event=\"error.platform\" cond=\"_event.src === 'someID'\" target=\"failure\" />\n</state>\n```\n\n----------------------------------------\n\nTITLE: Controlling Action Execution in XState Interpreter\nDESCRIPTION: Demonstrates how to control when actions are executed by disabling automatic execution and manually calling service.execute() at the appropriate time.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/interpretation.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst service = interpret(machine, {\n  execute: false // do not execute actions on state transitions\n});\n\nservice.onTransition((state) => {\n  // execute actions on next animation frame\n  // instead of immediately\n  requestAnimationFrame(() => service.execute(state));\n});\n\nservice.start();\n```\n\n----------------------------------------\n\nTITLE: Using Immer assign Function in XState\nDESCRIPTION: Demonstrates how to use the Immer-based assign function to update nested state in an XState machine.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/packages/xstate-immer/index.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine } from 'xstate';\nimport { assign } from '@xstate/immer';\n\nconst userMachine = createMachine({\n  id: 'user',\n  context: {\n    name: null,\n    address: {\n      city: null,\n      state: null,\n      country: null\n    }\n  },\n  initial: 'active',\n  states: {\n    active: {\n      on: {\n        CHANGE_COUNTRY: {\n          actions: assign((context, event) => {\n            context.address.country = event.value;\n          })\n        }\n      }\n    }\n  }\n});\n\nconst { initialState } = userMachine;\n\nconst nextState = userMachine.transition(initialState, {\n  type: 'UPDATE_COUNTRY',\n  country: 'USA'\n});\n\nnextState.context.address.country;\n// => 'USA'\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Actions with choose() in XState\nDESCRIPTION: Demonstrates using the choose() action creator to conditionally execute actions based on multiple conditions. The example shows how to define fallback actions and handle multiple condition branches.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/actions.md#2025-04-20_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { actions } from 'xstate';\n\nconst { choose, log } = actions;\n\nconst maybeDoThese = choose([\n  {\n    cond: 'cond1',\n    actions: [\n      // selected when \"cond1\" is true\n      log('cond1 chosen!')\n    ]\n  },\n  {\n    cond: 'cond2',\n    actions: [\n      // selected when \"cond1\" is false and \"cond2\" is true\n      log((context, event) => {\n        /* ... */\n      }),\n      log('another action')\n    ]\n  },\n  {\n    cond: (context, event) => {\n      // some condition\n      return false;\n    },\n    actions: [\n      // selected when \"cond1\" and \"cond2\" are false and the inline `cond` is true\n      (context, event) => {\n        // some other action\n      }\n    ]\n  },\n  {\n    actions: [\n      log('fall-through action')\n      // selected when \"cond1\", \"cond2\", and \"cond3\" are false\n    ]\n  }\n]);\n```\n\n----------------------------------------\n\nTITLE: Using createActorContext with React and XState\nDESCRIPTION: Example of how to use the new createActorContext helper to create a React Context for an XState machine, allowing components to access the actor's state and send functions through custom hooks provided by the context.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-react/CHANGELOG.md#2025-04-20_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createActorContext } from '@xstate/react';\nimport { someMachine } from './someMachine';\n\n// Create a React Context object that will interpret the machine\nconst SomeContext = createActorContext(someMachine);\n\nfunction SomeComponent() {\n  // Get the current state and `send` function\n  const [state, send] = SomeContext.useActor();\n\n  // Or select some derived state\n  const someValue = SomeContext.useSelector((state) => state.context.someValue);\n\n  // Or get a reference to the actor\n  const actorRef = SomeContext.useActorRef();\n\n  return (/* ... */);\n}\n\nfunction App() {\n  return (\n    <SomeContext.Provider>\n      <SomeComponent />\n    </SomeContext.Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Counter Machine Path Generation in XState JavaScript\nDESCRIPTION: Example demonstrating how to generate shortest paths for a counter state machine with custom INC event payloads and a count limit filter. The machine tracks a count in its context and responds to INC events with different values. The path generation is limited to states where count <= 5 to prevent infinite traversal.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/packages/xstate-graph/index.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst counterMachine = createMachine({\n  id: 'counter',\n  initial: 'active',\n  context: { count: 0 },\n  states: {\n    active: {\n      on: {\n        INC: {\n          actions: assign({ count: (ctx, e) => ctx.count + e.value })\n        }\n      }\n    }\n  }\n});\n\nconst shortestPaths = getShortestPaths(counterMachine, {\n  events: {\n    INC: [\n      { type: 'INC', value: 1 },\n      { type: 'INC', value: 2 }\n    ]\n  },\n  filter: (state) => state.context.count <= 5\n});\n\nconsole.log(shortestPaths);\n// => {\n//   '\"active\" | {\"count\":0}': {\n//     state: { value: 'active', context: { count: 0 } },\n//     weight: 0,\n//     path: []\n//   },\n//   '\"active\" | {\"count\":1}': {\n//     state: { value: 'active', context: { count: 1 } },\n//     weight: 1,\n//     path: [\n//       {\n//         state: { value: 'active', context: { count: 0 } },\n//         event: { type: 'INC', value: 1 }\n//       }\n//     ]\n//   },\n//   '\"active\" | {\"count\":2}': {\n//     state: { value: 'active', context: { count: 2 } },\n//     weight: 1,\n//     path: [\n//       {\n//         state: { value: 'active', context: { count: 0 } },\n//         event: { type: 'INC', value: 2 }\n//       }\n//     ]\n//   },\n//   '\"active\" | {\"count\":3}': {\n//     state: { value: 'active', context: { count: 3 } },\n//     weight: 2,\n//     path: [\n//       {\n//         state: { value: 'active', context: { count: 0 } },\n//         event: { type: 'INC', value: 1 }\n//       },\n//       {\n//         state: { value: 'active', context: { count: 1 } },\n//         event: { type: 'INC', value: 2 }\n//       }\n//     ]\n//   },\n//   ...\n// };\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Target Transitions in XState\nDESCRIPTION: Shows how to define transitions with multiple target state nodes in XState. This is useful for transitioning to multiple states simultaneously in parallel state machines.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/transitions.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst settingsMachine = createMachine({\n  id: 'settings',\n  type: 'parallel',\n  states: {\n    mode: {\n      initial: 'active',\n      states: {\n        inactive: {},\n        pending: {},\n        active: {}\n      }\n    },\n    status: {\n      initial: 'enabled',\n      states: {\n        disabled: {},\n        enabled: {}\n      }\n    }\n  },\n  on: {\n    // Multiple targets\n    DEACTIVATE: {\n      target: ['.mode.inactive', '.status.disabled']\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining State Nodes in XState (JavaScript)\nDESCRIPTION: This snippet shows how to define state nodes in an XState machine, including transitions between states.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/statenodes.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\n{\n  states: {\n    // state node\n    idle: {\n      on: {\n        FETCH: {\n          target: 'pending';\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Transition Actions in XState State Machine\nDESCRIPTION: This snippet demonstrates how to use transition actions in an XState state machine. Transition actions are executed only when a specific transition occurs.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/actions.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\n{\n  idle: {\n    on: {\n      LOAD: {\n        target: 'loading',\n        // this action is executed only on this transition\n        actions: 'fetchData'\n    }\n  },\n  loading: {\n    // ...\n  }\n}\n// ...\n```\n\n----------------------------------------\n\nTITLE: Batching Results and Assigning Multiple Properties to XState Context\nDESCRIPTION: Demonstrates how to return multiple values from a service and assign them to the state machine's context. This pattern allows for organizing related data updates together.\nSOURCE: https://github.com/statelyai/xstate/blob/main/examples/workflow-media-scanner/README.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n//  fileHandlers.ts\n\n...\n return { dirsToEvaluate, dirsToReport };\n```\n\nLANGUAGE: typescript\nCODE:\n```\n//  mediaScannerMachine.ts\n\nactions: assign(({ event }) => {\n  return {\n    dirsToEvaluate: event.output['dirsToEvaluate'],\n    dirsToReport: event.output['dirsToReport']\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Final States in XState Machine\nDESCRIPTION: Complete promise machine implementation with final states defined\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/start.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine } from 'xstate';\n\nconst promiseMachine = createMachine({\n  id: 'promise',\n  initial: 'pending',\n  states: {\n    pending: {\n      on: {\n        RESOLVE: { target: 'resolved' },\n        REJECT: { target: 'rejected' }\n      }\n    },\n    resolved: {\n      type: 'final'\n    },\n    rejected: {\n      type: 'final'\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Final States in XState Light Machine\nDESCRIPTION: Example showing how to implement final states in a traffic light state machine with parallel crosswalk states. Demonstrates the usage of final state type and onDone transitions.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/final.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst lightMachine = createMachine({\n  id: 'light',\n  initial: 'green',\n  states: {\n    green: {\n      on: {\n        TIMER: { target: 'yellow' }\n      }\n    },\n    yellow: {\n      on: {\n        TIMER: { target: 'red' }\n      }\n    },\n    red: {\n      type: 'parallel',\n      states: {\n        crosswalkNorth: {\n          initial: 'walk',\n          states: {\n            walk: {\n              on: {\n                PED_WAIT: { target: 'wait' }\n              }\n            },\n            wait: {\n              on: {\n                PED_STOP: { target: 'stop' }\n              }\n            },\n            stop: {\n              // 'stop' is a final state node for 'crosswalkNorth'\n              type: 'final'\n            }\n          },\n          onDone: {\n            actions: 'stopCrosswalkNorth'\n          }\n        },\n        crosswalkEast: {\n          initial: 'walk',\n          states: {\n            walk: {\n              on: {\n                PED_WAIT: { target: 'wait' }\n              }\n            },\n            wait: {\n              on: {\n                PED_STOP: { target: 'stop' }\n              }\n            },\n            stop: {\n              // 'stop' is a final state node for 'crosswalkEast'\n              type: 'final'\n            }\n          },\n          onDone: {\n            actions: 'stopCrosswalkEast'\n          }\n        }\n      },\n      onDone: 'green'\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Hierarchical State Machine\nDESCRIPTION: Implementation of a hierarchical state machine combining traffic light states with nested pedestrian crossing states.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/packages/core/index.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine } from 'xstate';\n\nconst pedestrianStates = {\n  initial: 'walk',\n  states: {\n    walk: {\n      on: {\n        PED_TIMER: 'wait'\n      }\n    },\n    wait: {\n      on: {\n        PED_TIMER: 'stop'\n      }\n    },\n    stop: {}\n  }\n};\n\nconst lightMachine = createMachine({\n  id: 'light',\n  initial: 'green',\n  states: {\n    green: {\n      on: {\n        TIMER: 'yellow'\n      }\n    },\n    yellow: {\n      on: {\n        TIMER: 'red'\n      }\n    },\n    red: {\n      on: {\n        TIMER: 'green'\n      },\n      ...pedestrianStates\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Handlers in XState Machine Options with TypeScript\nDESCRIPTION: This snippet demonstrates how to implement event handlers in XState machine options using TypeScript. It shows the issue with typing events in action implementations and provides a solution using type assertions.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/typescript.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMachine } from 'xstate';\n\ninterface Context {}\n\ntype Event =\n  | { type: 'EVENT_WITH_FLAG'; flag: boolean }\n  | {\n      type: 'EVENT_WITHOUT_FLAG';\n    };\n\ncreateMachine(\n  {\n    schema: {\n      context: {} as Context,\n      events: {} as Event\n    },\n    on: {\n      EVENT_WITH_FLAG: {\n        actions: 'consoleLogData'\n      }\n    }\n  },\n  {\n    actions: {\n      consoleLogData: (context, event) => {\n        // This will error at .flag\n        console.log(event.flag);\n      }\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Specifying Action Types for XState Machines\nDESCRIPTION: Example showing how to define typed actions for machines, including actions with parameters and type checking.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_107\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMachine({\n  types: {} as {\n    actions: { type: 'greet'; params: { name: string } };\n  },\n  entry: [\n    {\n      type: 'greet',\n      params: {\n        name: 'David'\n      }\n    },\n    // @ts-expect-error\n    { type: 'greet' },\n    // @ts-expect-error\n    { type: 'unknownAction' }\n  ]\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Toggle Component with XState in SolidJS\nDESCRIPTION: Example demonstrating how to use the useActor hook to create a simple toggle button component with XState state machine integration in SolidJS.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-solid/README.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useActor } from '@xstate/solid';\nimport { createMachine } from 'xstate';\n\nconst toggleMachine = createMachine({\n  id: 'toggle',\n  initial: 'inactive',\n  states: {\n    inactive: {\n      on: { TOGGLE: 'active' }\n    },\n    active: {\n      on: { TOGGLE: 'inactive' }\n    }\n  }\n});\n\nexport const Toggler = () => {\n  const [snapshot, send] = useActor(toggleMachine);\n\n  return (\n    <button onclick={() => send({ type: 'TOGGLE' })}>\n      {snapshot.value === 'inactive'\n        ? 'Click to activate'\n        : 'Active! Click to deactivate'}\n    </button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic XState Machine for Ember\nDESCRIPTION: Creates a decoupled toggle state machine that can be used with Ember. The machine contains inactive and active states with a TOGGLE event to switch between them.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/recipes/ember.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine } from 'xstate';\n\n// This machine is completely decoupled from Ember\nexport const toggleMachine = createMachine({\n  id: 'toggle',\n  context: {\n    /* some data */\n  },\n  initial: 'inactive',\n  states: {\n    inactive: {\n      on: { TOGGLE: 'active' }\n    },\n    active: {\n      on: { TOGGLE: 'inactive' }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Internal Transitions Example\nDESCRIPTION: Shows how to implement internal transitions in XState, which don't exit their state node and can be defined using relative targets.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/transitions.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine } from 'xstate';\n\nconst wordMachine = createMachine({\n  id: 'word',\n  initial: 'left',\n  states: {\n    left: {},\n    right: {},\n    center: {},\n    justify: {}\n  },\n  on: {\n    // internal transitions\n    LEFT_CLICK: '.left',\n    RIGHT_CLICK: { target: '.right' }, // same as '.right'\n    CENTER_CLICK: { target: '.center', internal: true }, // same as '.center'\n    JUSTIFY_CLICK: { target: '.justify', internal: true } // same as '.justify'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating RxJS Observable from XState Service in JavaScript\nDESCRIPTION: This snippet shows how to create an RxJS observable from an XState interpreted machine (service). It imports necessary functions from XState and RxJS, creates and starts a machine service, and then creates an observable that can be subscribed to for state updates.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/recipes/rxjs.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine, interpret } from 'xstate';\nimport { from } from 'rxjs';\n\nconst machine = createMachine(/* ... */);\nconst service = interpret(machine).start();\n\nconst state$ = from(service);\n\nstate$.subscribe((state) => {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Next Events and Checking State Changes in XState (JavaScript)\nDESCRIPTION: Shows how to use state.nextEvents to get possible next events, and state.changed to check if the state has changed from the previous one. These methods are useful for UI updates and transition logic.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/states.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { initialState } = lightMachine;\n\nconsole.log(initialState.nextEvents);\n// => ['TIMER', 'EMERGENCY']\n\nconsole.log(initialState.changed);\n// => undefined\n\nconst nextState = lightMachine.transition(initialState, { type: 'TIMER' });\n\nconsole.log(nextState.changed);\n// => true\n\nconst unchangedState = lightMachine.transition(nextState, {\n  type: 'UNKNOWN_EVENT'\n});\n\nconsole.log(unchangedState.changed);\n// => false\n```\n\n----------------------------------------\n\nTITLE: Using XState Immer Basic Example\nDESCRIPTION: A comprehensive example showing how to use the Immer utilities with XState. It demonstrates a toggle machine with a counter and level updater, using both the assign function and createUpdater pattern.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/packages/xstate-immer/index.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine, interpret } from 'xstate';\nimport { assign, createUpdater } from '@xstate/immer';\n\nconst levelUpdater = createUpdater('UPDATE_LEVEL', (ctx, { input }) => {\n  ctx.level = input;\n});\n\nconst toggleMachine = createMachine({\n  id: 'toggle',\n  context: {\n    count: 0,\n    level: 0\n  },\n  initial: 'inactive',\n  states: {\n    inactive: {\n      on: {\n        TOGGLE: {\n          target: 'active',\n          // Immutably update context the same \"mutable\"\n          // way as you would do with Immer!\n          actions: assign((ctx) => ctx.count++)\n        }\n      }\n    },\n    active: {\n      on: {\n        TOGGLE: {\n          target: 'inactive'\n        },\n        // Use the updater for more convenience:\n        [levelUpdater.type]: {\n          actions: levelUpdater.action\n        }\n      }\n    }\n  }\n});\n\nconst toggleService = interpret(toggleMachine)\n  .onTransition((state) => {\n    console.log(state.context);\n  })\n  .start();\n\ntoggleService.send({ type: 'TOGGLE' });\n// { count: 1, level: 0 }\n\ntoggleService.send(levelUpdater.update(9));\n// { count: 1, level: 9 }\n\ntoggleService.send({ type: 'TOGGLE' });\n// { count: 2, level: 9 }\n\ntoggleService.send(levelUpdater.update(-100));\n// Notice how the level is not updated in 'inactive' state:\n// { count: 2, level: 9 }\n```\n\n----------------------------------------\n\nTITLE: Path Traversal with Custom Events and Filtering\nDESCRIPTION: Example showing how to use getShortestPaths with custom event payloads and state filtering. Demonstrates traversing a counter machine with INC events and context-based filtering.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/packages/xstate-graph/index.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst counterMachine = createMachine({\n  id: 'counter',\n  initial: 'active',\n  context: { count: 0 },\n  states: {\n    active: {\n      on: {\n        INC: {\n          actions: assign({ count: (ctx, e) => ctx.count + e.value })\n        }\n      }\n    }\n  }\n});\n\nconst shortestPaths = getShortestPaths(counterMachine, {\n  events: {\n    INC: [\n      { type: 'INC', value: 1 },\n      { type: 'INC', value: 2 }\n    ]\n  },\n  filter: (state) => state.context.count <= 5\n});\n\nconsole.log(shortestPaths);\n// => {\n//   '\"active\" | {\"count\":0}': {\n//     state: { value: 'active', context: { count: 0 } },\n//     weight: 0,\n//     path: []\n//   },\n//   '\"active\" | {\"count\":1}': {\n//     state: { value: 'active', context: { count: 1 } },\n//     weight: 1,\n//     path: [\n//       {\n//         state: { value: 'active', context: { count: 0 } },\n//         event: { type: 'INC', value: 1 }\n//       }\n//     ]\n//   },\n//   '\"active\" | {\"count\":2}': {\n//     state: { value: 'active', context: { count: 2 } },\n//     weight: 1,\n//     path: [\n//       {\n//         state: { value: 'active', context: { count: 0 } },\n//         event: { type: 'INC', value: 2 }\n//       }\n//     ]\n//   },\n//   '\"active\" | {\"count\":3}': {\n//     state: { value: 'active', context: { count: 3 } },\n//     weight: 2,\n//     path: [\n//       {\n//         state: { value: 'active', context: { count: 0 } },\n//         event: { type: 'INC', value: 1 }\n//       },\n//       {\n//         state: { value: 'active', context: { count: 1 } },\n//         event: { type: 'INC', value: 2 }\n//       }\n//     ]\n//   },\n//   ...\n// };\n```\n\n----------------------------------------\n\nTITLE: Sending Updates from Child Actors in XState\nDESCRIPTION: Shows how to explicitly send updates from child actors to parent machines using sendUpdate(). Recommended approach for controlled state updates.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/actors.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine, sendUpdate } from 'xstate';\n\nconst childMachine = createMachine({\n  // ...\n  on: {\n    SOME_EVENT: {\n      actions: [\n        // ...\n        // Creates an action that sends an update event to parent\n        sendUpdate()\n      ]\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using useInterpret Hook with React and XState\nDESCRIPTION: Example of using the useInterpret hook to create a service from an XState machine in a React component. It shows how to use the hook with options and a listener function.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/packages/xstate-react/index.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useInterpret } from '@xstate/react';\nimport { someMachine } from '../path/to/someMachine';\n\nconst App = () => {\n  const service = useInterpret(\n    someMachine,\n    {\n      actions: {\n        /* ... */\n      }\n    },\n    (state) => {\n      // subscribes to state changes\n      console.log(state);\n    }\n  );\n\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Emitting Events from Promise Actors in TypeScript\nDESCRIPTION: Demonstrates how to emit events from a promise actor using the emit function provided in the actor scope. This allows promise actors to communicate intermediate results or status updates.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst logic = fromPromise(async ({ emit }) => {\n  // ...\n  emit({\n    type: 'emitted',\n    msg: 'hello'\n  });\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Using Type Definitions for Actors in XState v5\nDESCRIPTION: Actor types can now be specified in the .types property of createMachine, providing strong typing for actors, their IDs, and event payloads.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_61\n\nLANGUAGE: typescript\nCODE:\n```\nconst fetcher = fromPromise(() => fetchUser());\n\nconst machine = createMachine({\n  types: {} as {\n    actors: {\n      src: 'fetchData'; // src name (inline behaviors ideally inferred)\n      id: 'fetch1' | 'fetch2'; // possible ids (optional)\n      logic: typeof fetcher;\n    };\n  },\n  invoke: {\n    src: 'fetchData', // strongly typed\n    id: 'fetch2', // strongly typed\n    onDone: {\n      actions: ({ event }) => {\n        event.output; // strongly typed as { result: string }\n      }\n    },\n    input: { foo: 'hello' } // strongly typed\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Self Reference in XState Actions\nDESCRIPTION: Shows how to use the self actor reference in action metas for referencing the ActorRef in event payloads.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_129\n\nLANGUAGE: typescript\nCODE:\n```\n// Sender\nactions: sendTo('somewhere', (ctx, ev, { self }) => ({\n  type: 'EVENT',\n  ref: self\n})),\n\n// ...\n\n// Responder\nactions: sendTo((ctx, ev) => ev.ref, ...)\n```\n\n----------------------------------------\n\nTITLE: Testing XState Services with Asynchronous State Transitions\nDESCRIPTION: Shows how to test the behavior and output of XState services by asserting that it eventually reaches an expected state, given an initial state and a sequence of events. This example uses the interpret function and onTransition callback.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/testing.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { fetchMachine } from '../path/to/fetchMachine';\n\nit('should eventually reach \"success\"', (done) => {\n  const fetchService = interpret(fetchMachine).onTransition((state) => {\n    // this is where you expect the state to eventually\n    // be reached\n    if (state.matches('success')) {\n      done();\n    }\n  });\n\n  fetchService.start();\n\n  // send zero or more events to the service that should\n  // cause it to eventually reach its expected state\n  fetchService.send({ type: 'FETCH', id: 42 });\n});\n```\n\n----------------------------------------\n\nTITLE: Replacing 'in' Property with stateIn() and stateNotIn() Guards\nDESCRIPTION: Demonstrates how to replace the 'in' transition property with stateIn() and stateNotIn() guards. Shows both basic usage and pattern matching similar to snapshot.matches().\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_41\n\nLANGUAGE: diff\nCODE:\n```\nimport {\n  createMachine,\n+ stateIn\n} from 'xstate/guards';\n\nconst machine = createMachine({\n  // ...\n  on: {\n    SOME_EVENT: {\n      target: 'anotherState',\n-     in: '#someState',\n+     cond: stateIn('#someState')\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Multiple Guards with Prioritized Evaluation in XState\nDESCRIPTION: This example demonstrates using an array of conditional transitions that are evaluated in order. It shows a door machine that transitions to different states based on user level and alert status when handling an OPEN event.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/guards.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine, actions, interpret, assign } from 'xstate';\n\nconst doorMachine = createMachine(\n  {\n    id: 'door',\n    initial: 'closed',\n    context: {\n      level: 'user',\n      alert: false // alert when intrusions happen\n    },\n    states: {\n      closed: {\n        initial: 'idle',\n        states: {\n          idle: {},\n          error: {}\n        },\n        on: {\n          SET_ADMIN: {\n            actions: assign({ level: 'admin' })\n          },\n          SET_ALARM: {\n            actions: assign({ alert: true })\n          },\n          OPEN: [\n            // Transitions are tested one at a time.\n            // The first valid transition will be taken.\n            { target: 'opened', cond: 'isAdmin' },\n            { target: '.error', cond: 'shouldAlert' },\n            { target: '.idle' }\n          ]\n        }\n      },\n      opened: {\n        on: {\n          CLOSE: { target: 'closed' }\n        }\n      }\n    }\n  },\n  {\n    guards: {\n      isAdmin: (context) => context.level === 'admin',\n      shouldAlert: (context) => context.alert === true\n    }\n  }\n);\n\nconst doorService = interpret(doorMachine)\n  .onTransition((state) => console.log(state.value))\n  .start();\n// => { closed: 'idle' }\n\ndoorService.send({ type: 'OPEN' });\n// => { closed: 'idle' }\n\ndoorService.send({ type: 'SET_ALARM' });\n// => { closed: 'idle' }\n// (state does not change, but context changes)\n\ndoorService.send({ type: 'OPEN' });\n// => { closed: 'error' }\n\ndoorService.send({ type: 'SET_ADMIN' });\n// => { closed: 'error' }\n// (state does not change, but context changes)\n\ndoorService.send({ type: 'OPEN' });\n// => 'opened'\n// (since context.isAdmin === true)\n```\n\n----------------------------------------\n\nTITLE: Lazy Machine Initialization with useMachine Hook\nDESCRIPTION: Demonstrates how to lazily initialize a machine in the useMachine hook to avoid unnecessary machine initializations on component rerenders.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-react/CHANGELOG.md#2025-04-20_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst [state, send] = useMachine(() => createMachine(/* ... */));\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Invoking Services and Capturing Results in XState\nDESCRIPTION: Shows how to invoke a service from within an XState machine, pass input from the context, and handle both successful and error outcomes. The example includes assigning output to the machine's context.\nSOURCE: https://github.com/statelyai/xstate/blob/main/examples/workflow-media-scanner/README.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninvoke: {\n  id: 'checkFilePermissions',\n  input: ({ context: { directoriesToCheck } }) => ({\n    directoriesToCheck\n  }),\n  src: fromPromise(async ({ input: { directoriesToCheck } }) =>\n    await checkFilePermissions(directoriesToCheck)\n  ),\n  onDone: [\n    {\n      target: 'EvaluatingFiles',\n      actions: assign(({ event }) => {\n        return {\n          dirsToEvaluate: event.output['dirsToEvaluate'],\n          dirsToReport: event.output['dirsToReport']\n        };\n      })\n    }\n  ],\n  onError: [\n    {\n      target: 'ReportingErrors',\n      actions: assign(({ event }) => {\n        return {\n          dirsToReport: event.error['dirsToReport']\n        };\n      })\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Global State Provider with React Context and XState\nDESCRIPTION: Shows how to set up a global state provider using React Context and XState's useInterpret hook. This approach provides a static reference to the running machine service, avoiding unnecessary re-renders.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/recipes/react.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { createContext } from 'react';\nimport { useInterpret } from '@xstate/react';\nimport { authMachine } from './authMachine';\n\nexport const GlobalStateContext = createContext({});\n\nexport const GlobalStateProvider = (props) => {\n  const authService = useInterpret(authMachine);\n\n  return (\n    <GlobalStateContext.Provider value={{ authService }}>\n      {props.children}\n    </GlobalStateContext.Provider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Static Assignment in XState (JavaScript)\nDESCRIPTION: Shows how to perform a static assignment to update the context in an XState machine.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/context.md#2025-04-20_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\nactions: assign({\n  counter: 42\n}),\n// ...\n```\n\n----------------------------------------\n\nTITLE: Using Tags in XState State Nodes (JavaScript)\nDESCRIPTION: Demonstrates how to add tags to state nodes and use them to categorize states. This example shows tagging loading states and checking for tags using state.hasTag().\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/statenodes.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst machine = createMachine({\n  initial: 'idle',\n  states: {\n    idle: {\n      on: {\n        FETCH: 'loadingUser'\n      }\n    },\n    loadingUser: {\n      tags: ['loading']\n      // ...\n    },\n    loadingFriends: {\n      tags: ['loading']\n      // ...\n    },\n    editing: {\n      // ...\n    }\n  }\n});\n\nmachine.initialState.hasTag('loading');\n// => false\n\nmachine.transition(machine.initialState, { type: 'FETCH' }).hasTag('loading');\n// => true\n```\n\n----------------------------------------\n\nTITLE: Spawning Different Types of Actors in XState\nDESCRIPTION: This snippet showcases how to spawn various types of actors in XState, including promises, callbacks, observables, and machines. It demonstrates the syntax for each type within an assign action.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/actors.md#2025-04-20_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\n{\n  actions: assign({\n    // From a promise\n    promiseRef: (context, event) =>\n      spawn(\n        new Promise((resolve, reject) => {\n          // ...\n        }),\n        'my-promise'\n      ),\n\n    // From a callback\n    callbackRef: (context, event) =>\n      spawn((callback, receive) => {\n        // send to parent\n        callback('SOME_EVENT');\n\n        // receive from parent\n        receive((event) => {\n          // handle event\n        });\n\n        // disposal\n        return () => {\n          /* do cleanup here */\n        };\n      }),\n\n    // From an observable\n    observableRef: (context, event) => spawn(someEvent$),\n\n    // From a machine\n    machineRef: (context, event) =>\n      spawn(\n        createMachine({\n          // ...\n        })\n      )\n  });\n}\n// ...\n```\n\n----------------------------------------\n\nTITLE: Creating Subreddit React Component\nDESCRIPTION: React component implementation that uses the subreddit machine to display posts. Handles loading, error, and success states with refresh functionality.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/tutorials/reddit.md#2025-04-20_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nconst Subreddit = ({ name }) => {\n  const subredditMachine = useMemo(() => {\n    return createSubredditMachine(name);\n  }, [name]);\n\n  const [current, send] = useMachine(subredditMachine);\n\n  if (current.matches('failure')) {\n    return (\n      <div>\n        Failed to load posts.{' '}\n        <button onClick={(_) => send('RETRY')}>Retry?</button>\n      </div>\n    );\n  }\n\n  const { subreddit, posts, lastUpdated } = current.context;\n\n  return (\n    <section\n      data-machine={subredditMachine.id}\n      data-state={current.toStrings().join(' ')}\n    >\n      {current.matches('loading') && <div>Loading posts...</div>}\n      {posts && (\n        <>\n          <header>\n            <h2>{subreddit}</h2>\n            <small>\n              Last updated: {lastUpdated}{' '}\n              <button onClick={(_) => send('REFRESH')}>Refresh</button>\n            </small>\n          </header>\n          <ul>\n            {posts.map((post) => {\n              return <li key={post.id}>{post.title}</li>;\n            })}\n          </ul>\n        </>\n      )}\n    </section>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Migrating eventless transitions\nDESCRIPTION: Shows migration from using empty string transitions to the new always property\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_146\n\nLANGUAGE: diff\nCODE:\n```\nsomeState: {\n  on: {\n    // Will no longer work\n-   '': { target: 'anotherState' }\n  },\n+ always: { target: 'anotherState' }\n}\n```\n\n----------------------------------------\n\nTITLE: Matching Complex States in XState with React Rendering\nDESCRIPTION: Demonstrates different approaches to matching complex state values in XState when rendering React components. This includes using if/else blocks, switch statements with true expressions, and ternary operators for conditional rendering based on state matches.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/packages/xstate-react/index.md#2025-04-20_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// Using if/else blocks\nif (state.matches('idle')) {\n  return /* ... */;\n} else if (state.matches({ loading: 'user' })) {\n  return /* ... */;\n} else if (state.matches({ loading: 'friends' })) {\n  return /* ... */;\n} else {\n  return null;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Using switch with true expression\nswitch (true) {\n  case state.matches('idle'):\n    return /* ... */;\n  case state.matches({ loading: 'user' }):\n    return /* ... */;\n  case state.matches({ loading: 'friends' }):\n    return /* ... */;\n  default:\n    return null;\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// Using ternary operators in JSX\nconst Loader = () => {\n  const [state, send] = useMachine(/* ... */);\n\n  return (\n    <div>\n      {state.matches('idle') ? (\n        <Loader.Idle />\n      ) : state.matches({ loading: 'user' }) ? (\n        <Loader.LoadingUser />\n      ) : state.matches({ loading: 'friends' }) ? (\n        <Loader.LoadingFriends />\n      ) : null}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: State Transitions with History States in XState\nDESCRIPTION: Shows the behavior of state transitions using history states, demonstrating how the machine remembers and returns to previous states when using history nodes.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/history.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst firstState = fanMachine.transition(fanMachine.initialState, {\n  type: 'POWER'\n});\nconsole.log(firstState.value);\n// transitions to the initial state of 'fanOn' since there is no history\n// => {\n//   fanOn: 'first'\n// }\n\nconst secondState = fanMachine.transition(firstState, { type: 'SWITCH' });\nconsole.log(secondState.value);\n// => {\n//   fanOn: 'second'\n// }\n\nconst thirdState = fanMachine.transition(secondState, { type: 'POWER' });\nconsole.log(thirdState.value);\n// => 'fanOff'\n\nconsole.log(thirdState.history);\n// => State {\n//   value: { fanOn: 'second' },\n//   actions: []\n// }\n\nconst fourthState = fanMachine.transition(thirdState, { type: 'POWER' });\nconsole.log(fourthState.value);\n// transitions to 'fanOn.second' from history\n// => {\n//   fanOn: 'second'\n// }\n```\n\n----------------------------------------\n\nTITLE: Dispatching Events to Global XState Service in React\nDESCRIPTION: Illustrates how to dispatch events to a global XState service directly from a React component using the service's send function.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/recipes/react.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useContext } from 'react';\nimport { GlobalStateContext } from './globalState';\n\nexport const SomeComponent = (props) => {\n  const globalServices = useContext(GlobalStateContext);\n\n  return (\n    <button\n      onClick={() => globalServices.authService.send({ type: 'LOG_OUT' })}\n    >\n      Log Out\n    </button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Initial State with Actions in XState\nDESCRIPTION: The .initial property of a state node configuration can now include executable content like actions, allowing actions to be executed when transitioning to the initial state.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_136\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\ninitial: {\n  target: 'someTarget',\n  actions: [/* initial actions */]\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Services in XState\nDESCRIPTION: Shows how to reference services and actors directly from the state object using the .children property.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/communication.md#2025-04-20_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst machine = createMachine({\n  // ...\n  invoke: [\n    { id: 'notifier', src: createNotifier },\n    { id: 'logger', src: createLogger }\n  ]\n  // ...\n});\n\nconst service = interpret(machine)\n  .onTransition((state) => {\n    state.children.notifier; // service from createNotifier()\n    state.children.logger; // service from createLogger()\n  })\n  .start();\n```\n\n----------------------------------------\n\nTITLE: Updated Guard Object Interface\nDESCRIPTION: Shows the new structure for guard objects where parameters are placed in the params property.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_67\n\nLANGUAGE: diff\nCODE:\n```\n-cond: {\n+guard: {\n- name: 'searchValid', // `name` property no longer used\n  type: 'searchValid',\n- minQueryLength: 3\n+ params: {\n+   minQueryLength: 3\n+ }\n}\n```\n\n----------------------------------------\n\nTITLE: Spawning Observable Actors in XState\nDESCRIPTION: Example of spawning an RxJS observable as an actor. The observable emits count updates at a specified interval which are handled by the parent machine.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/actors.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { interval } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nconst createCounterObservable = (ms) => interval(ms)\n  .pipe(map(count => ({ type: 'COUNT.UPDATE', count })))\n\nconst machine = createMachine({\n  context: { ms: 1000 },\n  // ...\n  {\n    actions: assign({\n      counterRef: ({ ms }) => spawn(createCounterObservable(ms))\n    })\n  }\n  // ...\n  on: {\n    'COUNT.UPDATE': { /* ... */ }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Actors in a System\nDESCRIPTION: Actors are now always part of a \"system\", which is a collection of actors that can communicate with each other. Systems are implicitly created and can be used to get and set references to any actor in the system via the 'systemId' prop.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nconst machine = createMachine({\n  // ...\n  invoke: {\n    src: emailMachine,\n    // Registers `emailMachine` as `emailer` on the system\n    systemId: 'emailer'\n  }\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst machine = createMachine({\n  // ...\n  entry: assign({\n    emailer: (ctx, ev, { spawn }) =>\n      spawn(emailMachine, { systemId: 'emailer' })\n  })\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst anotherMachine = createMachine({\n  // ...\n  entry: sendTo(\n    (ctx, ev, { system }) => {\n      return system.get('emailer');\n    },\n    { type: 'SEND_EMAIL', subject: 'Hello', body: 'World' }\n  )\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Final States and Converting State to Strings in XState (JavaScript)\nDESCRIPTION: Demonstrates how to use state.done to check if a state is final, and state.toStrings() to get an array of state value paths. These methods are useful for determining machine completion and representing states as strings.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/states.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst answeringMachine = createMachine({\n  initial: 'unanswered',\n  states: {\n    unanswered: {\n      on: {\n        ANSWER: { target: 'answered' }\n      }\n    },\n    answered: {\n      type: 'final'\n    }\n  }\n});\n\nconst { initialState } = answeringMachine;\ninitialState.done; // false\n\nconst answeredState = answeringMachine.transition(initialState, {\n  type: 'ANSWER'\n});\nansweredState.done; // true\n\nconsole.log(state.value);\n// => { red: 'stop' }\n\nconsole.log(state.toStrings());\n// => ['red', 'red.stop']\n```\n\n----------------------------------------\n\nTITLE: Event Propagation in Nested States\nDESCRIPTION: Shows how events are propagated up to parent states when not handled by child states, demonstrating the transition from red.stop to green state.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/hierarchical.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(lightMachine.transition({ red: 'stop' }, { type: 'TIMER' }).value);\n// => 'green'\n```\n\n----------------------------------------\n\nTITLE: Dispatching Events to Global XState Store in SolidJS\nDESCRIPTION: Demonstration of dispatching events to a global XState store using the send function.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/recipes/solid.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useContext } from 'solid-js';\nimport { GlobalStateContext } from './globalState';\n\nexport const SomeComponent = (props) => {\n  const {\n    authService: [, send]\n  } = useContext(GlobalStateContext);\n  return <button onClick={() => send({ type: 'LOG_OUT' })}>Log Out</button>;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing a Toggle Machine in Vue 3 with XState\nDESCRIPTION: Vue 3 component using the composition API to implement a toggle machine with XState. It demonstrates the usage of useMachine and createMachine functions.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/packages/xstate-vue/index.md#2025-04-20_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { useMachine } from '@xstate/vue';\nimport { createMachine } from 'xstate';\n\nconst toggleMachine = createMachine({\n  id: 'toggle',\n  initial: 'inactive',\n  states: {\n    inactive: {\n      on: { TOGGLE: 'active' }\n    },\n    active: {\n      on: { TOGGLE: 'inactive' }\n    }\n  }\n});\n\nconst { state, send } = useMachine(toggleMachine);\n</script>\n\n<template>\n  <button @click=\"send('TOGGLE')\">\n    {{\n      state.value === 'inactive'\n        ? 'Click to activate'\n        : 'Active! Click to deactivate'\n    }}\n  </button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: XState Invoke Property Configuration\nDESCRIPTION: Reference example showing the complete configuration options for the invoke property in XState machines.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/communication.md#2025-04-20_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst machine = createMachine({\n  // ...\n  states: {\n    someState: {\n      invoke: {\n        // The `src` property can be:\n        // - a string\n        // - a machine\n        // - a function that returns...\n        src: (context, event) => {\n          // - a promise\n          // - a callback handler\n          // - an observable\n        },\n        id: 'some-id',\n        // (optional) forward machine events to invoked service (currently for machines only!)\n        autoForward: true,\n        // (optional) the transition when the invoked promise/observable/machine is done\n        onDone: { target: /* ... */ },\n        // (optional) the transition when an error from the invoked service occurs\n        onError: { target: /* ... */ }\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Invoking Callbacks in XState\nDESCRIPTION: Shows how to implement callback-based services in XState with bi-directional communication between parent and child.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/communication.md#2025-04-20_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\n{\n  invoke: (context, event) => (callback, onReceive) => {\n    // Send event back to parent\n    callback({ type: 'SOME_EVENT' });\n\n    // Receive events from parent\n    onReceive(event => {\n      if (event.type === 'DO_SOMETHING') {\n        // ...\n      }\n    });\n  },\n  // Error from callback\n  onError: {\n    target: 'failure',\n    // Error data is on event.data property\n    actions: (context, event) => console.log(event.data)\n  }\n},\non: {\n  SOME_EVENT: { /* ... */ }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Actions in XState and SCXML\nDESCRIPTION: Shows how to define entry, exit, and transition actions in XState and their corresponding elements in SCXML.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/scxml.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  start: {\n    entry: 'showStartScreen',\n    exit: 'logScreenChange',\n    on: {\n      STOP: {\n        target: 'stop',\n        actions: ['logStop', 'stopEverything']\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: xml\nCODE:\n```\n<state id=\"start\">\n  <onentry>\n    <script>showStartScreen();</script>\n  </onentry>\n  <onexit>\n    <script>logScreenChange();</script>\n  </onexit>\n  <transition event=\"STOP\" target=\"stop\">\n    <script>logStop();</script>\n    <script>stopEverything();</script>\n  </transition>\n</state>\n```\n\n----------------------------------------\n\nTITLE: Configuring External Transitions with Relative Targets in XState\nDESCRIPTION: Demonstrates how to make relative targets external transitions by setting internal: false, which causes the parent state to exit and reenter during the transition.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/ids.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\non: {\n  SELECT_FIRST: {\n    target: { target: '.first' },\n    internal: false // external transition, will exit/reenter parent state node\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using XState Immer for State Management\nDESCRIPTION: A complete example showing how to use @xstate/immer with XState, including the assign function for immutable updates and createUpdater for defining cohesive update events and actions.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-immer/README.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine, interpret } from 'xstate';\nimport { assign, createUpdater } from '@xstate/immer';\n\nconst levelUpdater = createUpdater('UPDATE_LEVEL', (ctx, { input }) => {\n  ctx.level = input;\n});\n\nconst toggleMachine = createMachine({\n  id: 'toggle',\n  context: {\n    count: 0,\n    level: 0\n  },\n  initial: 'inactive',\n  states: {\n    inactive: {\n      on: {\n        TOGGLE: {\n          target: 'active',\n          // Immutably update context the same \"mutable\"\n          // way as you would do with Immer!\n          actions: assign((ctx) => ctx.count++)\n        }\n      }\n    },\n    active: {\n      on: {\n        TOGGLE: {\n          target: 'inactive'\n        },\n        // Use the updater for more convenience:\n        [levelUpdater.type]: {\n          actions: levelUpdater.action\n        }\n      }\n    }\n  }\n});\n\nconst toggleService = interpret(toggleMachine)\n  .onTransition((state) => {\n    console.log(state.context);\n  })\n  .start();\n\ntoggleService.send({ type: 'TOGGLE' });\n// { count: 1, level: 0 }\n\ntoggleService.send(levelUpdater.update(9));\n// { count: 1, level: 9 }\n\ntoggleService.send({ type: 'TOGGLE' });\n// { count: 2, level: 9 }\n\ntoggleService.send(levelUpdater.update(-100));\n// Notice how the level is not updated in 'inactive' state:\n// { count: 2, level: 9 }\n```\n\n----------------------------------------\n\nTITLE: Invoking Observables in XState\nDESCRIPTION: Demonstrates how to integrate RxJS observables with XState machines, including event mapping.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/communication.md#2025-04-20_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport { map } from 'rxjs/operators';\n\n// ...\n{\n  invoke: {\n    src: (context, event) => createSomeObservable(/* ... */).pipe(\n        map(value => ({ type: 'SOME_EVENT', value }))\n      ),\n    onDone: 'finished'\n  }\n},\non: {\n  SOME_EVENT: /* ... */\n}\n// ...\n```\n\n----------------------------------------\n\nTITLE: Using Store.transition Method for Preview State Changes\nDESCRIPTION: Shows how to use the store.transition method to compute the next state and effects without actually updating the store, useful for previewing state changes.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-store/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst [nextState, effects] = store.transition(store.getSnapshot(), {\n  type: 'increment',\n  by: 1\n});\n```\n\n----------------------------------------\n\nTITLE: Invoking Callbacks in XState\nDESCRIPTION: Example of using callback invocations in XState with bidirectional communication.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/communication.md#2025-04-20_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\n{\n  invoke: (context, event) => (callback, onReceive) => {\n    // Send event back to parent\n    callback({ type: 'SOME_EVENT' });\n\n    // Receive events from parent\n    onReceive(event => {\n      if (event.type === 'DO_SOMETHING') {\n        // ...\n      }\n    });\n  },\n  // Error from callback\n  onError: {\n    target: 'failure',\n    // Error data is on event.data property\n    actions: (context, event) => console.log(event.data)\n  }\n},\non: {\n  SOME_EVENT: { /* ... */ }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Null Events for Immediate Transitions in XState\nDESCRIPTION: Demonstrates the use of null events (represented by an empty string) to trigger immediate transitions upon entering a state.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/events.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// contrived example\nconst skipMachine = createMachine({\n  id: 'skip',\n  initial: 'one',\n  states: {\n    one: {\n      on: { CLICK: 'two' }\n    },\n    two: {\n      // null event '' always occurs once state is entered\n      // immediately take the transition to 'three'\n      on: { '': 'three' }\n    },\n    three: {\n      type: 'final'\n    }\n  }\n});\n\nconst { initialState } = skipMachine;\nconst nextState = skipMachine.transition(initialState, { type: 'CLICK' });\n\nconsole.log(nextState.value);\n// => 'three'\n```\n\n----------------------------------------\n\nTITLE: Using Named Actions in XState (Recommended Pattern)\nDESCRIPTION: Demonstrating the recommended pattern of using named actions in XState. Named actions provide better visualization, more readable code, and support for overrides.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/typescript.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMachine(\n  {\n    entry: ['sayHello']\n  },\n  {\n    actions: {\n      sayHello: () => {\n        console.log('Hello!');\n      }\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Inspecting Actor System Updates with XState\nDESCRIPTION: This code demonstrates how to use the inspect option to observe actor system events. It shows the different types of inspection events: actor creation, event sending, and snapshot updates.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_95\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMachine } from 'xstate';\n\nconst machine = createMachine({\n  // ...\n});\n\nconst actor = createActor(machine, {\n  inspect: (inspectionEvent) => {\n    if (inspectionEvent.type === '@xstate.actor') {\n      console.log(inspectionEvent.actorRef);\n    }\n\n    if (inspectionEvent.type === '@xstate.event') {\n      console.log(inspectionEvent.sourceRef);\n      console.log(inspectionEvent.targetRef);\n      console.log(inspectionEvent.event);\n    }\n\n    if (inspectionEvent.type === '@xstate.snapshot') {\n      console.log(inspectionEvent.actorRef);\n      console.log(inspectionEvent.event);\n      console.log(inspectionEvent.snapshot);\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using getInitialSnapshot for Machine Testing\nDESCRIPTION: Shows how to use the getInitialSnapshot() function in XState 5.6.2 to get a mock of the initial snapshot when interacting with machines without creating an actor.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getInitialSnapshot } from 'xstate';\nimport { someMachine } from './someMachine';\n\n// Returns the initial snapshot (state) of the machine\nconst initialSnapshot = getInitialSnapshot(\n  someMachine,\n  { name: 'Mateusz' } // optional input\n);\n```\n\n----------------------------------------\n\nTITLE: Using Object Notation for Hierarchical States\nDESCRIPTION: Example showing how to use object notation to represent and transition hierarchical states in a traffic light state machine.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/packages/core/index.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\nconst waitState = lightMachine.transition(\n  { red: 'walk' },\n  { type: 'PED_TIMER' }\n).value;\n\n// => { red: 'wait' }\n\nlightMachine.transition(waitState, { type: 'PED_TIMER' }).value;\n\n// => { red: 'stop' }\n\nlightMachine.transition({ red: 'stop' }, { type: 'TIMER' }).value;\n\n// => 'green'\n```\n\n----------------------------------------\n\nTITLE: Persisting and Rehydrating XState Machine State\nDESCRIPTION: Example of persisting and rehydrating machine state using the useMachine hook options.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/packages/xstate-react/index.md#2025-04-20_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst persistedState = JSON.parse(localStorage.getItem('some-persisted-state-key')) || someMachine.initialState;\n\nconst App = () => {\n  const [state, send] = useMachine(someMachine, {\n    state: persistedState // provide persisted state config object here\n  });\n\n  return (/* ... */)\n}\n```\n\n----------------------------------------\n\nTITLE: Reddit Machine with Actor Implementation\nDESCRIPTION: Enhanced version of the Reddit machine that implements the Actor pattern for managing subreddit instances.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/tutorials/reddit.md#2025-04-20_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst redditMachine = createMachine({\n  context: {\n    subreddits: {},\n    subreddit: null\n  },\n  on: {\n    SELECT: {\n      target: '.selected',\n      actions: assign((context, event) => {\n        let subreddit = context.subreddits[event.name];\n\n        if (subreddit) {\n          return {\n            ...context,\n            subreddit\n          };\n        }\n\n        subreddit = spawn(createSubredditMachine(event.name));\n\n        return {\n          subreddits: {\n            ...context.subreddits,\n            [event.name]: subreddit\n          },\n          subreddit\n        };\n      })\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using onSnapshot for invoked actors in XState v5\nDESCRIPTION: The `onSnapshot: { ... }` transition object is now supported for invoked machines, observables, promises, and transition functions.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_78\n\nLANGUAGE: typescript\nCODE:\n```\nconst machine = createMachine({\n  // ...\n  invoke: [\n    {\n      src: createMachine({ ... }),\n      onSnapshot: {\n        actions: (context, event) => {\n          event.snapshot; // machine state\n        }\n      }\n    },\n    {\n      src: fromObservable(() => ...),\n      onSnapshot: {\n        actions: (context, event) => {\n          event.snapshot; // observable value\n        }\n      }\n    },\n    {\n      src: fromTransition((state, event) => { ... }, /* ... */),\n      onSnapshot: {\n        actions: (context, event) => {\n          event.snapshot; // transition function return value\n        }\n      }\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Enhanced Reddit Machine with Actor Support\nDESCRIPTION: Extended version of the reddit machine that implements actor model support for managing multiple subreddit instances and caching.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/tutorials/reddit.md#2025-04-20_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst redditMachine = createMachine({\n  context: {\n    subreddits: {},\n    subreddit: null\n  },\n  on: {\n    SELECT: {\n      target: '.selected',\n      actions: assign((context, event) => {\n        let subreddit = context.subreddits[event.name];\n\n        if (subreddit) {\n          return {\n            ...context,\n            subreddit\n          };\n        }\n\n        subreddit = spawn(createSubredditMachine(event.name));\n\n        return {\n          subreddits: {\n            ...context.subreddits,\n            [event.name]: subreddit\n          },\n          subreddit\n        };\n      })\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Reddit Parent State Machine in JavaScript\nDESCRIPTION: Implements the main Reddit state machine that manages subreddit selection and handles the overall application state.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/tutorials/reddit.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst redditMachine = createMachine({\n  id: 'reddit',\n  initial: 'idle',\n  context: {\n    subreddit: null\n  },\n  states: {\n    idle: {},\n    selected: {} // no invocations!\n  },\n  on: {\n    SELECT: {\n      target: '.selected',\n      actions: assign({\n        subreddit: (context, event) => event.name\n      })\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting State Node Meta in XState Machine Setup\nDESCRIPTION: Shows how to define metadata for state nodes in an XState machine using the setup function with types. This metadata can later be accessed via getMeta() to retrieve information about the current state.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst machine = setup({\n  types: {\n    meta: {} as {\n      layout: string;\n    }\n  }\n}).createMachine({\n  initial: 'home',\n  states: {\n    home: {\n      meta: {\n        layout: 'full'\n      }\n    }\n  }\n});\n\nconst actor = createActor(machine).start();\n\nactor.getSnapshot().getMeta().home;\n// => { layout: 'full' }\n// if in \"home\" state\n```\n\n----------------------------------------\n\nTITLE: XState Transition Listeners\nDESCRIPTION: Example of setting up transition listeners in XState to monitor state changes using onTransition method.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/interpretation.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Interpret the machine\nconst service = interpret(machine);\n\n// Add a state listener, which is called whenever a state transition occurs.\nservice.onTransition((state) => {\n  console.log(state.value);\n});\n\nservice.start();\n```\n\n----------------------------------------\n\nTITLE: React UI Implementation with XState\nDESCRIPTION: React component implementation using the Reddit XState machine with @xstate/react hooks\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/tutorials/reddit.md#2025-04-20_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { useMachine } from '@xstate/react';\nimport { redditMachine } from '../path/to/redditMachine';\n\nconst subreddits = ['frontend', 'reactjs', 'vuejs'];\n\nconst App = () => {\n  const [current, send] = useMachine(redditMachine);\n  const { subreddit, posts } = current.context;\n\n  return (\n    <main>\n      <header>\n        <select\n          onChange={(e) => {\n            send({ type: 'SELECT', name: e.target.value });\n          }}\n        >\n          {subreddits.map((subreddit) => {\n            return <option key={subreddit}>{subreddit}</option>;\n          })}\n        </select>\n      </header>\n      <section>\n        <h1>{current.matches('idle') ? 'Select a subreddit' : subreddit}</h1>\n        {current.matches({ selected: 'loading' }) && <div>Loading...</div>}\n        {current.matches({ selected: 'loaded' }) && (\n          <ul>\n            {posts.map((post) => (\n              <li key={post.title}>{post.title}</li>\n            ))}\n          </ul>\n        )}\n      </section>\n    </main>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Strict Tags for XState Machines\nDESCRIPTION: Example of how to define a strict set of allowed tags for a state machine to improve type safety.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_104\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMachine({\n  types: {} as {\n    tags: 'pending' | 'success' | 'error';\n  }\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Initial State Transitions in XState\nDESCRIPTION: Demonstrates how initial states are handled in compound states, showing the transition from yellow to red state which automatically enters the initial walk substate.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/hierarchical.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(lightMachine.transition('yellow', { type: 'TIMER' }).value);\n// => {\n//   red: 'walk'\n// }\n```\n\n----------------------------------------\n\nTITLE: Enqueuing Effects in State Transitions with XState\nDESCRIPTION: New feature that allows enqueuing effects in state transitions, enabling asynchronous operations that can trigger other events after completion.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-store/CHANGELOG.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst store = createStore({\n  context: {\n    count: 0\n  },\n  on: {\n    incrementDelayed: (context, event, enq) => {\n      enq.effect(async () => {\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n        store.send({ type: 'increment' });\n      });\n\n      return context;\n    },\n    increment: (context) => ({ count: context.count + 1 })\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Main React App Component\nDESCRIPTION: Main React application component that uses the reddit machine and renders the Subreddit component when a subreddit is selected.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/tutorials/reddit.md#2025-04-20_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nconst App = () => {\n  const [current, send] = useMachine(redditMachine);\n  const { subreddit } = current.context;\n\n  return (\n    <main>\n      <header>{/* ... */}</header>\n      {subreddit && <Subreddit name={subreddit} key={subreddit} />}\n    </main>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Service Response Handling\nDESCRIPTION: Shows how to implement response handling between services using the respond action creator in XState.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/communication.md#2025-04-20_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine, send, actions } from 'xstate';\n\nconst { respond } = actions;\n\nconst authServerMachine = createMachine({\n  id: 'server',\n  initial: 'waitingForCode',\n  states: {\n    waitingForCode: {\n      on: {\n        CODE: {\n          actions: respond('TOKEN', { delay: 1000 })\n        }\n      }\n    }\n  }\n});\n\nconst authClientMachine = createMachine({\n  id: 'client',\n  initial: 'idle',\n  states: {\n    idle: {\n      on: {\n        AUTH: { target: 'authorizing' }\n      }\n    },\n    authorizing: {\n      invoke: {\n        id: 'auth-server',\n        src: authServerMachine\n      },\n      entry: send({ type: 'CODE' }, { to: 'auth-server' }),\n      on: {\n        TOKEN: { target: 'authorized' }\n      }\n    },\n    authorized: {\n      type: 'final'\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Emitting Events from Transition Actors in TypeScript\nDESCRIPTION: Shows how to emit events from a transition actor using the emit function provided in the actor scope. This enables transition actors to communicate state changes or other information.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst logic = fromTransition((state, event, { emit }) => {\n  // ...\n  emit({\n    type: 'emitted',\n    msg: 'hello'\n  });\n  // ...\n  return state;\n}, {});\n```\n\n----------------------------------------\n\nTITLE: Custom XState Integration in Ember Component Class\nDESCRIPTION: Demonstrates a custom integration of XState in an Ember component class without using addons. It shows how to create, start, and stop the interpreter, track state changes, and send events.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/recipes/ember.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport Component from '@glimmer/component';\nimport { tracked } from '@glimmer/tracking';\nimport { action } from '@ember/object';\nimport { interpret } from 'xstate';\nimport { toggleMachine } from '../path/to/toggleMachine';\n\nexport default class ToggleButton extends Component {\n  @tracked current;\n\n  get context() {\n    return this.current.context;\n  }\n\n  get isInactive() {\n    return this.current.matches('inactive');\n  }\n\n  constructor() {\n    super(...arguments);\n    this.toggleInterpreter = interpret(toggleMachine);\n    this.toggleInterpreter\n      .onTransition((state) => (this.current = state))\n      .start();\n  }\n\n  willDestroy() {\n    super.willDestroy(...arguments);\n    this.toggleInterpreter.stop();\n  }\n\n  @action\n  transition(...args) {\n    this.toggleInterpreter.send(...args);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Hierarchical Traffic Light with Pedestrian States\nDESCRIPTION: Demonstrates a more complex hierarchical state machine combining traffic light states with nested pedestrian crossing states.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/packages/core/index.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine, createActor } from 'xstate';\n\nconst pedestrianStates = {\n  initial: 'walk',\n  states: {\n    walk: {\n      on: {\n        PED_TIMER: 'wait'\n      }\n    },\n    wait: {\n      on: {\n        PED_TIMER: 'stop'\n      }\n    },\n    stop: {}\n  }\n};\n\nconst lightMachine = createMachine({\n  id: 'light',\n  initial: 'green',\n  states: {\n    green: {\n      on: {\n        TIMER: 'yellow'\n      }\n    },\n    yellow: {\n      on: {\n        TIMER: 'red'\n      }\n    },\n    red: {\n      on: {\n        TIMER: 'green'\n      },\n      ...pedestrianStates\n    }\n  }\n});\n\nconst actor = createActor(lightMachine);\n\nactor.subscribe((state) => {\n  console.log(state.value);\n});\n\nactor.start();\n// logs 'green'\n\nactor.send({ type: 'TIMER' });\n// logs 'yellow'\n\nactor.send({ type: 'TIMER' });\n// logs { red: 'walk' }\n\nactor.send({ type: 'PED_TIMER' });\n// logs { red: 'wait' }\n```\n\n----------------------------------------\n\nTITLE: SendTo Action Creator Usage in XState\nDESCRIPTION: Example of using the sendTo action creator to send typed events to specific actor references. The action creator allows for better type safety when sending events between actors.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_162\n\nLANGUAGE: javascript\nCODE:\n```\nimport { actions } from 'xstate';\n\nconst { sendTo } = actions;\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// ...\nentry: sendTo(\n  (ctx) => ctx.someActorRef,\n  { type: 'EVENT_FOR_ACTOR' }\n),\n// ...\n```\n\n----------------------------------------\n\nTITLE: Emitting Events from Callback Actors in TypeScript\nDESCRIPTION: Demonstrates how to emit events from a callback actor using the emit function provided in the actor scope. This enables callback actors to communicate with other actors or their parent.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst logic = fromCallback(({ emit }) => {\n  // ...\n  emit({\n    type: 'emitted',\n    msg: 'hello'\n  });\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Referencing Services in XState State Object\nDESCRIPTION: Shows how to reference services and actors directly from the state object using the .children property.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/communication.md#2025-04-20_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst machine = createMachine({\n  // ...\n  invoke: [\n    { id: 'notifier', src: createNotifier },\n    { id: 'logger', src: createLogger }\n  ]\n  // ...\n});\n\nconst service = interpret(machine)\n  .onTransition((state) => {\n    state.children.notifier; // service from createNotifier()\n    state.children.logger; // service from createLogger()\n  })\n  .start();\n```\n\n----------------------------------------\n\nTITLE: Alternative State Machine Design with Nested States\nDESCRIPTION: An alternative approach to modeling the Flight Booker state machine using nested states for trip types instead of context values. This snippet demonstrates how to use state hierarchies with entry actions to set context values.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/tutorials/7guis/flight.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\ninitial: 'oneWay',\nstates: {\n  oneWay: {\n    entry: assign({ trip: 'oneWay' }),\n    // ...\n  },\n  roundTrip: {\n    entry: assign({ trip: 'roundTrip' }),\n    // ...\n  }\n},\n// ...\n```\n\n----------------------------------------\n\nTITLE: Using Send Action Creator in XState State Machine\nDESCRIPTION: This snippet shows how to use the send action creator to send an event to the machine itself. It creates a 'send' action object that tells the service to send the specified event.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/actions.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine, send } from 'xstate';\n\nconst lazyStubbornMachine = createMachine({\n  id: 'stubborn',\n  initial: 'inactive',\n  states: {\n    inactive: {\n      on: {\n        TOGGLE: {\n          target: 'active',\n          // send the TOGGLE event again to the service\n          actions: send('TOGGLE')\n        }\n      }\n    },\n    active: {\n      on: {\n        TOGGLE: { target: 'inactive' }\n      }\n    }\n  }\n});\n\nconst nextState = lazyStubbornMachine.transition('inactive', {\n  type: 'TOGGLE'\n});\n\nnextState.value;\n// => 'active'\nnextState.actions;\n// => [{ type: 'xstate.send', event: { type: 'TOGGLE' }}]\n\n// The service will proceed to send itself the { type: 'TOGGLE' } event.\n```\n\n----------------------------------------\n\nTITLE: Implementing a Toggle Component with XState in Svelte\nDESCRIPTION: Complete Svelte component example that demonstrates how to use the useMachine hook to create a toggle functionality. The example includes defining a state machine with 'active' and 'inactive' states and binding the send function to a button click event.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-svelte/README.md#2025-04-20_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { useMachine } from '@xstate/svelte';\n  import { createMachine } from 'xstate';\n\n  const toggleMachine = createMachine({\n    id: 'toggle',\n    initial: 'inactive',\n    states: {\n      inactive: {\n        on: { TOGGLE: 'active' }\n      },\n      active: {\n        on: { TOGGLE: 'inactive' }\n      }\n    }\n  });\n\n  const { state, send } = useMachine(toggleMachine);\n</script>\n\n<button on:click={() => send('TOGGLE')}>\n  {$state.value === 'inactive'\n    ? 'Click to activate'\n    : 'Active! Click to deactivate'}\n</button>\n```\n\n----------------------------------------\n\nTITLE: Event Modeling with TypeScript\nDESCRIPTION: Shows how to model events with payload types and create a state machine that handles these events in a type-safe manner.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/models.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createModel } from 'xstate/lib/model';\n\nconst userModel = createModel(\n  // Initial context\n  {\n    name: 'David',\n    age: 30\n  },\n  {\n    // Event creators\n    events: {\n      updateName: (value) => ({ value }),\n      updateAge: (value) => ({ value }),\n      anotherEvent: () => ({}) // no payload\n    }\n  }\n);\n\nconst machine = userModel.createMachine(\n  {\n    context: userModel.initialContext,\n    initial: 'active',\n    states: {\n      active: {\n        on: {\n          updateName: {\n            actions: userModel.assign({\n              name: (_, event) => event.value\n            })\n          },\n          updateAge: {\n            actions: 'assignAge'\n          }\n        }\n      }\n    }\n  },\n  {\n    actions: {\n      assignAge: userModel.assign({\n        age: (_, event) => event.value\n      })\n    }\n  }\n);\n\nconst nextState = machine.transition(\n  undefined,\n  userModel.events.updateName('David')\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Context to Reddit State Machine\nDESCRIPTION: Extends the Reddit state machine by adding context to store the selected subreddit. The context will maintain application state across transitions.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/tutorials/reddit.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\n\nconst redditMachine = createMachine({\n  id: 'reddit',\n  initial: 'idle',\n  context: {\n    subreddit: null // none selected\n  },\n  states: {\n    /* ... */\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Chaining Interpreter Methods in XState\nDESCRIPTION: This snippet demonstrates how to chain multiple interpreter methods when setting up an XState service. It includes setting up transition and completion listeners before starting the service.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/interpretation.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst service = interpret(machine)\n  .onTransition((state) => console.log(state))\n  .onDone(() => console.log('done'))\n  .start(); // returns started service\n```\n\n----------------------------------------\n\nTITLE: Creating and using a state machine in a Vue 3 component\nDESCRIPTION: Complete example of creating a toggle state machine and integrating it into a Vue component using the useMachine composition function. Shows how to handle state transitions and render different UI based on machine state.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-vue/README.md#2025-04-20_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { useMachine } from '@xstate/vue';\nimport { createMachine } from 'xstate';\n\nconst toggleMachine = createMachine({\n  id: 'toggle',\n  initial: 'inactive',\n  states: {\n    inactive: {\n      on: { TOGGLE: 'active' }\n    },\n    active: {\n      on: { TOGGLE: 'inactive' }\n    }\n  }\n});\n\nconst { snapshot, send } = useMachine(toggleMachine);\n</script>\n\n<template>\n  <button @click=\"send({ type: 'TOGGLE' })\">\n    {{\n      snapshot.value === 'inactive'\n        ? 'Click to activate'\n        : 'Active! Click to deactivate'\n    }}\n  </button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Final States in XState Statechart\nDESCRIPTION: This example demonstrates how to create a statechart for a traffic light system with parallel states for crosswalks. It shows how to define final states and use onDone transitions.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/final.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst lightMachine = createMachine({\n  id: 'light',\n  initial: 'green',\n  states: {\n    green: {\n      on: {\n        TIMER: { target: 'yellow' }\n      }\n    },\n    yellow: {\n      on: {\n        TIMER: { target: 'red' }\n      }\n    },\n    red: {\n      type: 'parallel',\n      states: {\n        crosswalkNorth: {\n          initial: 'walk',\n          states: {\n            walk: {\n              on: {\n                PED_WAIT: { target: 'wait' }\n              }\n            },\n            wait: {\n              on: {\n                PED_STOP: { target: 'stop' }\n              }\n            },\n            stop: {\n              // 'stop' is a final state node for 'crosswalkNorth'\n              type: 'final'\n            }\n          },\n          onDone: {\n            actions: 'stopCrosswalkNorth'\n          }\n        },\n        crosswalkEast: {\n          initial: 'walk',\n          states: {\n            walk: {\n              on: {\n                PED_WAIT: { target: 'wait' }\n              }\n            },\n            wait: {\n              on: {\n                PED_STOP: { target: 'stop' }\n              }\n            },\n            stop: {\n              // 'stop' is a final state node for 'crosswalkEast'\n              type: 'final'\n            }\n          },\n          onDone: {\n            actions: 'stopCrosswalkEast'\n          }\n        }\n      },\n      onDone: 'green'\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Transitioning State Using Events in XState\nDESCRIPTION: Demonstrates how to use the transition method of an XState machine to move to the next state based on an event.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/events.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine } from 'xstate';\n\nconst lightMachine = createMachine({\n  /* ... */\n});\n\nconst { initialState } = lightMachine;\n\nnextState = lightMachine.transition(nextState, { type: 'TIMER' });\nconsole.log(nextState.value);\n// => 'red'\n```\n\n----------------------------------------\n\nTITLE: Using Lazy Initialization for Context in XState\nDESCRIPTION: This snippet shows how to lazily initialize the context in an XState machine. The context is defined as a function that returns the initial context object, which is only created when the machine is used.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/context.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst counterMachine = createMachine({\n  id: 'counter',\n  // initial context\n  context: () => ({\n    count: 0,\n    message: 'Currently empty',\n    user: {\n      name: 'David'\n    },\n    allowedToIncrement: true\n    // ... etc.\n  }),\n  states: {\n    // ...\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Invocations in XState and SCXML (JavaScript/XML)\nDESCRIPTION: Demonstrates how invocations are defined in XState using the invoke property and the equivalent SCXML representation using the <invoke> element.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/scxml.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// XState\n{\n  loading: {\n    invoke: {\n      src: 'someSource',\n      id: 'someID',\n      autoForward: true, // currently for machines only!\n      onDone: 'success',\n      onError: 'failure'\n    }\n  }\n}\n```\n\nLANGUAGE: xml\nCODE:\n```\n<!-- SCXML -->\n<state id=\"loading\">\n  <invoke id=\"someID\" src=\"someSource\" autoforward />\n  <transition event=\"done.invoke.someID\" target=\"success\" />\n  <transition event=\"error.platform\" cond=\"_event.src === 'someID'\" target=\"failure\" />\n</state>\n```\n\n----------------------------------------\n\nTITLE: Implementing Fan State Machine with History States in XState\nDESCRIPTION: Demonstrates the implementation of a fan state machine using both shallow history states and history states with default targets. The machine handles power switching and state transitions with history preservation.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/history.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst fanMachine = createMachine({\n  id: 'fan',\n  initial: 'fanOff',\n  states: {\n    fanOff: {\n      on: {\n        // transitions to history state\n        POWER: { target: 'fanOn.hist' },\n        HIGH_POWER: { target: 'fanOn.highPowerHist' }\n      }\n    },\n    fanOn: {\n      initial: 'first',\n      states: {\n        first: {\n          on: {\n            SWITCH: { target: 'second' }\n          }\n        },\n        second: {\n          on: {\n            SWITCH: { target: 'third' }\n          }\n        },\n        third: {},\n\n        // shallow history state\n        hist: {\n          type: 'history',\n          history: 'shallow' // optional; default is 'shallow'\n        },\n\n        // shallow history state with default\n        highPowerHist: {\n          type: 'history',\n          target: 'third'\n        }\n      },\n      on: {\n        POWER: { target: 'fanOff' }\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using PromiseActorRef Type with fromPromise in TypeScript\nDESCRIPTION: Illustrates the PromiseActorRef type with the fromPromise function to create an actor that fetches data from an external API and returns a resolved value. It specifies Output type for the resolved data and Input type for configuration.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fromPromise, createActor } from 'xstate';\n\n/** The actor's resolved output. */\ntype Output = string;\n/** The actor's input. */\ntype Input = { message: string };\n\n/** Actor logic that fetches the url of an image of a cat saying `input.message`. */\nconst logic = fromPromise<Output, Input>(async ({ input, self }) => {\n  self;\n  // ^? PromiseActorRef<Output, Input>\n\n  const data = await fetch(`https://cataas.com/cat/says/${input.message}`);\n  const url = await data.json();\n  return url;\n});\n\nconst actor = createActor(logic, { input: { message: 'hello world' } });\n//    ^? PromiseActorRef<Output, Input>\n```\n\n----------------------------------------\n\nTITLE: Dynamically Resolving Action Parameters in XState\nDESCRIPTION: Example of how to dynamically resolve parameters for actions using a function that receives the context.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_102\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMachine({\n  types: {} as {\n    actions:\n      | { type: 'greet'; params: { surname: string } }\n      | { type: 'poke' };\n  },\n  entry: {\n    type: 'greet',\n    params: ({ context }) => ({\n      surname: 'Doe'\n    })\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Optimizing Performance with useSelector Hook in React and XState\nDESCRIPTION: Shows how to use the useSelector hook from @xstate/react to optimize performance by selectively updating components based on specific state changes.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/recipes/react.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useContext } from 'react';\nimport { GlobalStateContext } from './globalState';\nimport { useSelector } from '@xstate/react';\n\nconst loggedInSelector = (state) => {\n  return state.matches('loggedIn');\n};\n\nexport const SomeComponent = (props) => {\n  const globalServices = useContext(GlobalStateContext);\n  const isLoggedIn = useSelector(globalServices.authService, loggedInSelector);\n\n  return isLoggedIn ? 'Logged In' : 'Logged Out';\n};\n```\n\n----------------------------------------\n\nTITLE: Adding tsTypes to XState Machine for Typegen\nDESCRIPTION: Configuring a machine with the tsTypes property to enable automatic type generation. This allows the VS Code extension or CLI to generate type definitions for the machine.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/typescript.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst machine = createMachine({\n  tsTypes: {},\n  schema: {\n    context: {} as { value: string },\n    events: {} as { type: 'FOO'; value: string } | { type: 'BAR' }\n  },\n  initial: 'a',\n  states: {\n    /* ... */\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Reddit App Machine in XState\nDESCRIPTION: Defines the top-level state machine for the Reddit application that manages subreddit selection. This machine is simpler as it delegates subreddit-specific logic to the subreddit machine.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/tutorials/reddit.md#2025-04-20_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst redditMachine = createMachine({\n  id: 'reddit',\n  initial: 'idle',\n  context: {\n    subreddit: null\n  },\n  states: {\n    idle: {},\n    selected: {} // no invocations!\n  },\n  on: {\n    SELECT: {\n      target: '.selected',\n      actions: assign({\n        subreddit: (context, event) => event.name\n      })\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Dynamic Event Expression with Send\nDESCRIPTION: Demonstrates using send with an event expression function that dynamically creates events based on context and triggering event.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/actions.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { send } from 'xstate';\n\n// contrived example - reads from the `context` and sends\n// the dynamically created event\nconst sendName = send((context, event) => ({\n  type: 'NAME',\n  name: context.user.name\n}));\n\nconst machine = createMachine({\n  // ...\n  on: {\n    TOGGLE: {\n      actions: sendName\n    }\n  }\n  //...\n});\n```\n\n----------------------------------------\n\nTITLE: Creating EventByType Utility Type for XState Store Events\nDESCRIPTION: Shows how to create a custom EventByType utility type that extracts the specific type of store event where Type matches the event's type property. This enables type-safe event handling for specific event types.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-store/CHANGELOG.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type EventFromStore, type Store } from '@xstate/store';\n\n/**\n * Extract the event where `Type` matches the event's `type` from the given\n * `Store`.\n */\ntype EventByType<\n  TStore extends Store<any, any>,\n  // creates a type-safe relationship between `Type` and the `type` keys of the\n  // store's events\n  Type extends EventFromStore<TStore>['type']\n> = Extract<EventFromStore<TStore>, { type: Type }>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Respond Action in XState (JavaScript)\nDESCRIPTION: Shows how to use the respond action creator to send a response back to the service that sent the triggering event. This example demonstrates communication between a parent service and an invoked child service.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/actions.md#2025-04-20_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst authServerMachine = createMachine({\n  initial: 'waitingForCode',\n  states: {\n    waitingForCode: {\n      on: {\n        CODE: {\n          actions: respond({ type: 'TOKEN' }, { delay: 10 })\n        }\n      }\n    }\n  }\n});\n\nconst authClientMachine = createMachine({\n  initial: 'idle',\n  states: {\n    idle: {\n      on: {\n        AUTH: { target: 'authorizing' }\n      }\n    },\n    authorizing: {\n      invoke: {\n        id: 'auth-server',\n        src: authServerMachine\n      },\n      entry: send('CODE', { to: 'auth-server' }),\n      on: {\n        TOKEN: { target: 'authorized' }\n      }\n    },\n    authorized: {\n      type: 'final'\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Interpreter for XState in JavaScript\nDESCRIPTION: This code demonstrates a minimal implementation of a custom interpreter for XState state machines. It manages the current state, listeners, and provides methods for sending events and managing subscriptions.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/interpretation.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst machine = createMachine(/* machine config */);\n\n// Keep track of the current state, and start\n// with the initial state\nlet currentState = machine.initialState;\n\n// Keep track of the listeners\nconst listeners = new Set();\n\n// Have a way of sending/dispatching events\nfunction send(event) {\n  // Remember: machine.transition() is a pure function\n  currentState = machine.transition(currentState, event);\n\n  // Get the side-effect actions to execute\n  const { actions } = currentState;\n\n  actions.forEach((action) => {\n    // If the action is executable, execute it\n    typeof action.exec === 'function' && action.exec();\n  });\n\n  // Notify the listeners\n  listeners.forEach((listener) => listener(currentState));\n}\n\nfunction listen(listener) {\n  listeners.add(listener);\n}\n\nfunction unlisten(listener) {\n  listeners.delete(listener);\n}\n\n// Now you can listen and send events to update state\nlisten((state) => {\n  console.log(state.value);\n});\n\nsend('SOME_EVENT');\n```\n\n----------------------------------------\n\nTITLE: Adding transitions to the Promise state machine\nDESCRIPTION: Enhancement of the Promise state machine by adding transitions from the pending state to resolved or rejected states. This defines how the machine reacts to RESOLVE and REJECT events.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/start.md#2025-04-20_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { createMachine } from 'xstate';\n\nconst promiseMachine = createMachine({\n  id: 'promise',\n  initial: 'pending',\n  states: {\n    pending: {\n      on: {\n        RESOLVE: { target: 'resolved' },\n        REJECT: { target: 'rejected' }\n      }\n    },\n    resolved: {},\n    rejected: {}\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Local State Management with XState in SolidJS\nDESCRIPTION: Example showing how to use XState for local component state management using the useMachine hook to create a toggle button component.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/recipes/solid.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useMachine } from '@xstate/solid';\nimport { toggleMachine } from '../path/to/toggleMachine';\n\nfunction Toggle() {\n  const [current, send] = useMachine(toggleMachine);\n\n  return (\n    <button onClick={() => send({ type: 'TOGGLE' })}>\n      {current.matches('inactive') ? 'Off' : 'On'}\n    </button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Invoke Meta Data in Service Creators with XState\nDESCRIPTION: Example showing how to access resolved invoke.data values in service creators through the meta object passed as the third argument. This allows accessing data transformations in all types of invoked services.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_175\n\nLANGUAGE: javascript\nCODE:\n```\nconst machine = createMachine({\n  initial: 'pending',\n  context: {\n    id: 42\n  },\n  states: {\n    pending: {\n      invoke: {\n        src: 'fetchUser',\n        data: {\n          userId: (context) => context.id\n        },\n        onDone: 'success'\n      }\n    },\n    success: {\n      type: 'final'\n    }\n  }\n},\n{\n  services: {\n    fetchUser: (ctx, _, { data }) => {\n      return fetch(`some/api/user/${data.userId}`)\n        .then(response => response.json());\n    }\n  }\n}\n)\n```\n\n----------------------------------------\n\nTITLE: Using enqueueActions with self and system references in XState\nDESCRIPTION: Example of the updated argument object for enqueueActions that includes self and system properties, allowing access to these references within action definitions.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n// ...\nentry: enqueueActions(({ self, system }) => {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Using the Emit Action Creator in XState\nDESCRIPTION: Shows how to use the new emit() action creator to make actors function as event emitters in XState 5.9.0. This allows events to be received by actor listeners.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { emit } from 'xstate';\n\nconst machine = createMachine({\n  // ...\n  on: {\n    something: {\n      actions: emit({\n        type: 'emitted',\n        some: 'data'\n      })\n    }\n  }\n  // ...\n});\n\nconst actor = createActor(machine).start();\n\nactor.on('emitted', (event) => {\n  console.log(event);\n});\n\nactor.send({ type: 'something' });\n// logs:\n// {\n//   type: 'emitted',\n//   some: 'data'\n// }\n```\n\n----------------------------------------\n\nTITLE: XState Machine with Generated Typegen Import\nDESCRIPTION: A machine with the auto-generated typegen import reference. This connects the machine to the generated type definitions file created by the XState VS Code extension or CLI.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/typescript.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst machine = createMachine({\n  tsTypes: {} as import('./filename.typegen').Typegen0\n  /* ... */\n});\n```\n\n----------------------------------------\n\nTITLE: Basic State Node Identification in XState\nDESCRIPTION: Demonstrates how to use default state node IDs in an XState machine, where IDs are automatically generated based on the node's path. Shows targeting state nodes using their default IDs in transitions.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/ids.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst lightMachine = createMachine({\n  id: 'light',\n  initial: 'green',\n  states: {\n    green: {\n      // default ID: 'light.green'\n      on: {\n        // You can target state nodes by their default ID.\n        // This is the same as TIMER: 'yellow'\n        TIMER: { target: '#light.yellow' }\n      }\n    },\n    yellow: {\n      on: {\n        TIMER: { target: 'red' }\n      }\n    },\n    red: {\n      on: {\n        TIMER: { target: 'green' }\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using ember-statecharts with XState in a Component\nDESCRIPTION: Demonstrates how to use the ember-statecharts addon's useMachine API to integrate an XState machine into an Ember component. It includes state matching decorators and an action to send events to the machine.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/recipes/ember.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Component from '@glimmmer/component';\nimport { action } from '@ember/object';\n\nimport { useMachine, matchesState } from 'ember-statecharts';\n\n// @use (https://github.com/emberjs/rfcs/pull/567) is still WIP - polyfill it\nimport { use } from 'ember-usable';\n\nimport toggleMachine from './path/to/toggleMachine';\n\nexport default class ToggleComponent extends Component {\n  @use statechart = useMachine(toggleMachine);\n\n  @matchesState('active')\n  isActive;\n\n  @matchesState('inactive')\n  isInactive;\n\n  @action\n  toggle() {\n    this.statechart.send({ type: 'TOGGLE' });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Forbidden Transitions in XState\nDESCRIPTION: Demonstrates how to define forbidden transitions in XState, which specify that no state transition should occur for a given event. This is useful for preventing certain events from being handled in specific states.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/transitions.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst formMachine = createMachine({\n  id: 'form',\n  initial: 'firstPage',\n  states: {\n    firstPage: {\n      /* ... */\n    },\n    secondPage: {\n      /* ... */\n    },\n    userInfoPage: {\n      on: {\n        // explicitly forbid the LOG event from doing anything\n        // or taking any transitions to any other state\n        LOG: undefined\n      }\n    }\n  },\n  on: {\n    LOG: {\n      actions: 'logTelemetry'\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Installing XState Package\nDESCRIPTION: Basic npm installation command for adding XState to a project.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/packages/core/index.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install xstate\n```\n\n----------------------------------------\n\nTITLE: Nested Parallel State Nodes in XState\nDESCRIPTION: This example illustrates a more complex state machine with nested parallel states. It shows a traffic light system where the 'red' state contains parallel sub-states for 'walkSign' and 'pedestrian'.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/parallel.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst lightMachine = createMachine({\n  // not a parallel machine\n  id: 'light',\n  initial: 'green',\n  states: {\n    green: {\n      on: {\n        TIMER: { target: 'yellow' }\n      }\n    },\n    yellow: {\n      on: {\n        TIMER: { target: 'red' }\n      }\n    },\n\n    // nested parallel machine\n    red: {\n      type: 'parallel',\n      states: {\n        walkSign: {\n          initial: 'solid',\n          states: {\n            solid: {\n              on: {\n                COUNTDOWN: { target: 'flashing' }\n              }\n            },\n            flashing: {\n              on: {\n                STOP_COUNTDOWN: { target: 'solid' }\n              }\n            }\n          }\n        },\n        pedestrian: {\n          initial: 'walk',\n          states: {\n            walk: {\n              on: {\n                COUNTDOWN: { target: 'wait' }\n              }\n            },\n            wait: {\n              on: {\n                STOP_COUNTDOWN: { target: 'stop' }\n              }\n            },\n            stop: {\n              type: 'final'\n            }\n          }\n        }\n      }\n    }\n  }\n});\n\nconsole.log(lightMachine.transition('yellow', { type: 'TIMER' }).value);\n// {\n//   red: {\n//     walkSign: 'solid',\n//     pedestrian: 'walk'\n//   }\n// }\n```\n\n----------------------------------------\n\nTITLE: Transitioning to Initial Nested State in XState\nDESCRIPTION: This code snippet shows how to transition to an initial nested state in XState. It demonstrates that when entering a compound state, its initial substate is automatically entered.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/hierarchical.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(lightMachine.transition('yellow', { type: 'TIMER' }).value);\n// => {\n//   red: 'walk'\n// }\n```\n\n----------------------------------------\n\nTITLE: Parent-Child Machine Communication in XState\nDESCRIPTION: Demonstrates communication between parent and child machines using invoke functionality. The parent machine invokes a minute timer machine and transitions when the timer completes.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/communication.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine, interpret, send, sendParent } from 'xstate';\n\n// Invoked child machine\nconst minuteMachine = createMachine({\n  id: 'timer',\n  initial: 'active',\n  states: {\n    active: {\n      after: {\n        60000: { target: 'finished' }\n      }\n    },\n    finished: { type: 'final' }\n  }\n});\n\nconst parentMachine = createMachine({\n  id: 'parent',\n  initial: 'pending',\n  states: {\n    pending: {\n      invoke: {\n        src: minuteMachine,\n        // The onDone transition will be taken when the\n        // minuteMachine has reached its top-level final state.\n        onDone: 'timesUp'\n      }\n    },\n    timesUp: {\n      type: 'final'\n    }\n  }\n});\n\nconst service = interpret(parentMachine)\n  .onTransition((state) => console.log(state.value))\n  .start();\n```\n\n----------------------------------------\n\nTITLE: State Matching with If/Else Blocks in XState\nDESCRIPTION: Shows how to match hierarchical and parallel machine states using if/else conditionals.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/packages/xstate-react/index.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nif (state.matches('idle')) {\n  return /* ... */;\n} else if (state.matches({ loading: 'user' })) {\n  return /* ... */;\n} else if (state.matches({ loading: 'friends' })) {\n  return /* ... */;\n} else {\n  return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Using setup() Function to Configure Machine Dependencies in TypeScript\nDESCRIPTION: The setup() function allows defining implementations for actors, actions, guards, and delays that will be used in the created machine, with strong typing support.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_90\n\nLANGUAGE: typescript\nCODE:\n```\nimport { setup, createMachine } from 'xstate';\n\nconst fetchUser = fromPromise(async ({ input }) => {\n  const response = await fetch(`/user/${input.id}`);\n  const user = await response.json();\n  return user;\n});\n\nconst machine = setup({\n  actors: {\n    fetchUser\n  },\n  actions: {\n    clearUser: assign({ user: undefined })\n  },\n  guards: {\n    isUserAdmin: (_, params) => params.user.role === 'admin'\n  }\n}).createMachine({\n  // ...\n  invoke: {\n    // Strongly typed!\n    src: 'fetchUser',\n    input: ({ context }) => ({ id: context.userId }),\n    onDone: {\n      guard: {\n        type: 'isUserAdmin',\n        params: ({ context }) => ({ user: context.user })\n      },\n      target: 'success',\n      actions: assign({ user: ({ event }) => event.output })\n    },\n    onError: {\n      target: 'failure',\n      actions: 'clearUser'\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Immer Updaters in XState\nDESCRIPTION: Shows how to create and use Immer updaters for more convenient context updates in XState machines.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/packages/xstate-immer/index.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine } from 'xstate';\nimport { createUpdater } from '@xstate/immer';\n\nconst nameUpdater = createUpdater('UPDATE_NAME', (context, { input }) => {\n  context.name = input;\n});\n\nconst ageUpdater = createUpdater('UPDATE_AGE', (context, { input }) => {\n  context.age = input;\n});\n\nconst formMachine = createMachine({\n  initial: 'editing',\n  context: {\n    name: '',\n    age: null\n  },\n  states: {\n    editing: {\n      on: {\n        [nameUpdater.type]: { actions: nameUpdater.action },\n        [ageUpdater.type]: { actions: ageUpdater.action }\n      }\n    }\n  }\n});\n\nconst service = interpret(formMachine)\n  .onTransition((state) => {\n    console.log(state.context);\n  })\n  .start();\n\nservice.send(nameUpdater.update('David'));\n// => { name: 'David', age: null }\n\nservice.send(ageUpdater.update(100));\n// => { name: 'David', age: 100 }\n```\n\n----------------------------------------\n\nTITLE: Tracking Changed States in XState Transitions\nDESCRIPTION: Demonstrates how to use state.changed to only trigger transition handlers when the state actually changes, rather than on every transition.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/interpretation.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nservice.onTransition((state) => {\n  if (state.changed) {\n    console.log(state.value);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using createUpdater() for Form Handling in JavaScript\nDESCRIPTION: Example of using createUpdater to manage a form with name and age fields. Demonstrates how to create updaters, their types, actions, and usage in a state machine definition.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/packages/xstate-immer/index.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine } from 'xstate';\nimport { createUpdater } from '@xstate/immer';\n\n// The second argument is an Immer update event that looks like:\n// {\n//   type: 'UPDATE_NAME',\n//   input: 'David' // or any string\n// }\nconst nameUpdater = createUpdater('UPDATE_NAME', (context, { input }) => {\n  context.name = input;\n});\n\nconst ageUpdater = createUpdater('UPDATE_AGE', (context, { input }) => {\n  context.age = input;\n});\n\nconst formMachine = createMachine({\n  initial: 'editing',\n  context: {\n    name: '',\n    age: null\n  },\n  states: {\n    editing: {\n      on: {\n        // The updater.type can be used directly for transitions\n        // where the updater.action function will be applied\n        [nameUpdater.type]: { actions: nameUpdater.action },\n        [ageUpdater.type]: { actions: ageUpdater.action }\n      }\n    }\n  }\n});\n\nconst service = interpret(formMachine)\n  .onTransition((state) => {\n    console.log(state.context);\n  })\n  .start();\n\n// The event object sent will look like:\n// {\n//   type: 'UPDATE_NAME',\n//   input: 'David'\n// }\nservice.send(nameUpdater.update('David'));\n// => { name: 'David', age: null }\n\n// The event object sent will look like:\n// {\n//   type: 'UPDATE_AGE',\n//   input: 100\n// }\nservice.send(ageUpdater.update(100));\n// => { name: 'David', age: 100 }\n```\n\n----------------------------------------\n\nTITLE: Defining State Node Types in XState (JavaScript)\nDESCRIPTION: Illustrates how to explicitly define different types of state nodes, including atomic, compound, parallel, final, and history states.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/statenodes.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst machine = createMachine({\n  id: 'fetch',\n  initial: 'idle',\n  states: {\n    idle: {\n      type: 'atomic',\n      on: {\n        FETCH: { target: 'pending' }\n      }\n    },\n    pending: {\n      type: 'parallel',\n      states: {\n        resource1: {\n          type: 'compound',\n          initial: 'pending',\n          states: {\n            pending: {\n              on: {\n                'FULFILL.resource1': { target: 'success' }\n              }\n            },\n            success: {\n              type: 'final'\n            }\n          }\n        },\n        resource2: {\n          type: 'compound',\n          initial: 'pending',\n          states: {\n            pending: {\n              on: {\n                'FULFILL.resource2': { target: 'success' }\n              }\n            },\n            success: {\n              type: 'final'\n            }\n          }\n        }\n      },\n      onDone: 'success'\n    },\n    success: {\n      type: 'compound',\n      initial: 'items',\n      states: {\n        items: {\n          on: {\n            'ITEM.CLICK': { target: 'item' }\n          }\n        },\n        item: {\n          on: {\n            BACK: { target: 'items' }\n          }\n        },\n        hist: {\n          type: 'history',\n          history: 'shallow'\n        }\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: TypeScript Types for assign() Function\nDESCRIPTION: Example of how to properly type the assign function when using TypeScript. Shows how to define context and event interfaces and pass them as generic types to assign.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/packages/xstate-immer/index.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SomeContext {\n  name: string;\n}\n\ninterface SomeEvent {\n  type: 'SOME_EVENT';\n  value: string;\n}\n\n// ...\n\n{\n  actions: assign<SomeContext, SomeEvent>((context, event) => {\n    context.name = event.value;\n    // ... etc.\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from Machine() to createMachine()\nDESCRIPTION: The Machine() function has been removed in XState v5. This example shows how to migrate to the createMachine() function instead.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_53\n\nLANGUAGE: diff\nCODE:\n```\n-import { Machine } from 'xstate';\n+import { createMachine } from 'xstate';\n\n-const machine = Machine({\n+const machine = createMachine({\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Restoring Persisted State in XState v5\nDESCRIPTION: Restoring persisted state is now done by passing the state into the 'snapshot' property of the 'createActor' options argument. The persisted snapshot is obtained from an actor by calling 'actor.getPersistedSnapshot()'.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nconst actor = createActor(machine).start();\n\nconst persistedSnapshot = actor.getPersistedSnapshot();\n\n// ...\n\nconst restoredActor = createActor(machine, {\n  snapshot: persistedSnapshot\n}).start();\n```\n\n----------------------------------------\n\nTITLE: Using getSimplePaths Function with XState Machine\nDESCRIPTION: Shows how to use the getSimplePaths function with a feedback machine, illustrating the structure of the returned object containing all simple paths.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/packages/xstate-graph/index.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine } from 'xstate';\nimport { getSimplePaths } from '@xstate/graph';\n\nconst feedbackMachine = createMachine({\n  id: 'feedback',\n  initial: 'question',\n  states: {\n    question: {\n      on: {\n        CLICK_GOOD: 'thanks',\n        CLICK_BAD: 'form',\n        CLOSE: 'closed',\n        ESC: 'closed'\n      }\n    },\n    form: {\n      on: {\n        SUBMIT: 'thanks',\n        CLOSE: 'closed',\n        ESC: 'closed'\n      }\n    },\n    thanks: {\n      on: {\n        CLOSE: 'closed',\n        ESC: 'closed'\n      }\n    },\n    closed: {\n      type: 'final'\n    }\n  }\n});\n\nconst simplePaths = getSimplePaths(feedbackMachine);\n\nconsole.log(simplePaths);\n// => {\n//   '\"question\"': {\n//     state: { value: 'question', context: undefined },\n//     paths: [[]]\n//   },\n//   '\"thanks\"': {\n//     state: { value: 'thanks', context: undefined },\n//     paths: [\n//       [\n//         {\n//           state: { value: 'question', context: undefined },\n//           event: { type: 'CLICK_GOOD' }\n//         }\n//       ],\n//       [\n//         {\n//           state: { value: 'question', context: undefined },\n//           event: { type: 'CLICK_BAD' }\n//         },\n//         {\n//           state: { value: 'form', context: undefined },\n//           event: { type: 'SUBMIT' }\n//         }\n//       ]\n//     ]\n//   },\n//   '\"closed\"': {\n//     state: { value: 'closed', context: undefined },\n//     paths: [\n//       [\n//         {\n//           state: { value: 'question', context: undefined },\n//           event: { type: 'CLICK_GOOD' }\n//         },\n//         {\n//           state: { value: 'thanks', context: undefined },\n//           event: { type: 'CLOSE' }\n//         }\n//       ],\n//       [\n//         {\n//           state: { value: 'question', context: undefined },\n//           event: { type: 'CLICK_GOOD' }\n//         },\n//         {\n//           state: { value: 'thanks', context: undefined },\n//           event: { type: 'ESC' }\n//         }\n//       ],\n//       ...\n//     ]\n//   },\n//   ...\n// };\n```\n\n----------------------------------------\n\nTITLE: Using ForwardTo Action in XState (JavaScript)\nDESCRIPTION: Demonstrates the usage of the forwardTo action creator to forward the most recent event to a specified service. This example shows how to forward events to an alert service.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/actions.md#2025-04-20_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine, forwardTo, interpret } from 'xstate';\n\nfunction alertService(_, receive) {\n  receive((event) => {\n    if (event.type === 'ALERT') {\n      alert(event.message);\n    }\n  });\n}\n\nconst parentMachine = createMachine({\n  id: 'parent',\n  invoke: {\n    id: 'alerter',\n    src: () => alertService\n  },\n  on: {\n    ALERT: { actions: forwardTo('alerter') }\n  }\n});\n\nconst parentService = interpret(parentMachine).start();\n\nparentService.send({ type: 'ALERT', message: 'hello world' });\n// => alerts \"hello world\"\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Interfaces for Flight Booker State Machine\nDESCRIPTION: TypeScript interfaces defining the context and events for the Flight Booker state machine. The context includes fields for startDate, returnDate, and trip type, while events cover updating the trip type, dates, and submission.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/tutorials/7guis/flight.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface FlightContext {\n  startDate?: string;\n  returnDate?: string;\n  trip: 'oneWay' | 'roundTrip';\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntype FlightEvent =\n  | {\n      type: 'SET_TRIP';\n      value: 'oneWay' | 'roundTrip';\n    }\n  | {\n      type: 'startDate.UPDATE';\n      value: string;\n    }\n  | {\n      type: 'returnDate.UPDATE';\n      value: string;\n    }\n  | { type: 'SUBMIT' };\n```\n\n----------------------------------------\n\nTITLE: Batched Events in XState\nDESCRIPTION: Shows how to send multiple events as a batch to an XState service, including both string events and event objects.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/interpretation.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nservice.send([\n  // String events\n  'CLICK',\n  'CLICK',\n  'ANOTHER_EVENT',\n  // Event objects\n  { type: 'CLICK', x: 40, y: 21 },\n  { type: 'KEYDOWN', key: 'Escape' }\n]);\n```\n\n----------------------------------------\n\nTITLE: Sending Events to Counter Interval Actor\nDESCRIPTION: Shows how to send increment events to a spawned counter interval actor.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/actors.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst machine = createMachine({\n  // ...\n  on: {\n    'COUNTER.INC': {\n      actions: send({ type: 'INC' }, { to: (context) => context.counterRef })\n    }\n  }\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring XState Fetch Machine with React Components\nDESCRIPTION: Demonstrates creating and configuring a fetch machine with custom actions and services, including state handling for different fetch states.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/packages/xstate-react/index.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst fetchMachine = createMachine({\n  id: 'fetch',\n  initial: 'idle',\n  context: {\n    data: undefined,\n    error: undefined\n  },\n  states: {\n    idle: {\n      on: { FETCH: 'loading' }\n    },\n    loading: {\n      invoke: {\n        src: 'fetchData',\n        onDone: {\n          target: 'success',\n          actions: assign({\n            data: (_, event) => event.data\n          })\n        },\n        onError: {\n          target: 'failure',\n          actions: assign({\n            error: (_, event) => event.data\n          })\n        }\n      }\n    },\n    success: {\n      entry: 'notifySuccess',\n      type: 'final'\n    },\n    failure: {\n      on: {\n        RETRY: 'loading'\n      }\n    }\n  }\n});\n\nconst Fetcher = ({ onResolve }) => {\n  const [state, send] = useMachine(fetchMachine, {\n    actions: {\n      notifySuccess: (ctx) => onResolve(ctx.data)\n    },\n    services: {\n      fetchData: (_, e) =>\n        fetch(`some/api/${e.query}`).then((res) => res.json())\n    }\n  });\n\n  switch (state.value) {\n    case 'idle':\n      return (\n        <button onClick={() => send({ type: 'FETCH', query: 'something' })}>\n          Search for something\n        </button>\n      );\n    case 'loading':\n      return <div>Searching...</div>;\n    case 'success':\n      return <div>Success! Data: {state.context.data}</div>;\n    case 'failure':\n      return (\n        <>\n          <p>{state.context.error.message}</p>\n          <button onClick={() => send('RETRY')}>Retry</button>\n        </>\n      );\n    default:\n      return null;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Subreddit Selection Event in XState\nDESCRIPTION: Adds a top-level transition for the 'SELECT' event to handle subreddit selection, updating the context and transitioning to the 'selected' state.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/tutorials/reddit.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst redditMachine = createMachine({\n  id: 'reddit',\n  initial: 'idle',\n  context: {\n    subreddit: null // none selected\n  },\n  states: {\n    /* ... */\n  },\n  on: {\n    SELECT: {\n      target: '.selected',\n      actions: assign({\n        subreddit: (context, event) => event.name\n      })\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Type-safe partial event descriptors in XState v5\nDESCRIPTION: Partial event descriptors now provide type safety for event properties based on the event type.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_73\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMachine({\n  types: {} as {\n    events:\n      | { type: 'mouse.click.up'; direction: 'up' }\n      | { type: 'mouse.click.down'; direction: 'down' }\n      | { type: 'mouse.move' }\n      | { type: 'keypress' };\n  },\n  on: {\n    'mouse.click.*': {\n      actions: ({ event }) => {\n        event.type;\n        // 'mouse.click.up' | 'mouse.click.down'\n        event.direction;\n        // 'up' | 'down'\n      }\n    },\n    'mouse.*': {\n      actions: ({ event }) => {\n        event.type;\n        // 'mouse.click.up' | 'mouse.click.down' | 'mouse.move'\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Using XState Graph Utilities\nDESCRIPTION: Example of importing createMachine from xstate and getSimplePaths from @xstate/graph, then using them to create a machine and get its simple paths.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/packages/xstate-graph/index.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine } from 'xstate';\nimport { getSimplePaths } from '@xstate/graph';\n\nconst machine = createMachine(/* ... */);\nconst paths = getSimplePaths(machine);\n```\n\n----------------------------------------\n\nTITLE: Restarting Activities in XState\nDESCRIPTION: This snippet demonstrates how to manually restart activities when restoring a persisted state in XState. It shows how to add start actions to the restored state for previously active activities.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/activities.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { State, actions } from 'xstate';\n\n// ...\n\nconst restoredState = State.create(somePersistedStateJSON);\n\n// Select activities to be restarted\nObject.keys(restoredState.activities).forEach((activityKey) => {\n  if (restoredState.activities[activityKey]) {\n    // Filter activities, and then add the start() action to the restored state\n    restoredState.actions.push(actions.start(activityKey));\n  }\n});\n\n// This will start someService\n// with the activities restarted.\nsomeService.start(restoredState);\n```\n\n----------------------------------------\n\nTITLE: Implementing Timer Machine with XState in JavaScript\nDESCRIPTION: This snippet shows the complete implementation of the timer machine using XState. It defines the initial state, context, states (running and paused), and transitions based on various events.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/tutorials/7guis/timer.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const timerMachine = createMachine({\n  initial: 'running',\n  context: {\n    elapsed: 0,\n    duration: 5,\n    interval: 0.1\n  },\n  states: {\n    running: {\n      invoke: {\n        src: (context) => (cb) => {\n          const interval = setInterval(() => {\n            cb('TICK');\n          }, 1000 * context.interval);\n\n          return () => {\n            clearInterval(interval);\n          };\n        }\n      },\n      on: {\n        '': {\n          target: 'paused',\n          cond: (context) => {\n            return context.elapsed >= context.duration;\n          }\n        },\n        TICK: {\n          actions: assign({\n            elapsed: (context) =>\n              +(context.elapsed + context.interval).toFixed(2)\n          })\n        }\n      }\n    },\n    paused: {\n      on: {\n        '': {\n          target: 'running',\n          cond: (context) => context.elapsed < context.duration\n        }\n      }\n    }\n  },\n  on: {\n    'DURATION.UPDATE': {\n      actions: assign({\n        duration: (_, event) => event.value\n      })\n    },\n    RESET: {\n      actions: assign({\n        elapsed: 0\n      })\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Vue 2 Component with XState Interpret\nDESCRIPTION: Shows direct integration of XState with Vue 2 using the interpret utility. Demonstrates service initialization, state management, and event handling within a traditional Vue component structure.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/recipes/vue.md#2025-04-20_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- Toggle.vue -->\n<template>\n  <button v-on:click=\"send('TOGGLE');\">\n    {{ current.matches(\"inactive\") ? \"Off\" : \"On\" }}\n  </button>\n</template>\n\n<script>\n  import { interpret } from 'xstate';\n  import { toggleMachine } from '../path/to/toggleMachine';\n\n  export default {\n    name: 'Toggle',\n    created() {\n      // Start service on component creation\n      this.toggleService\n        .onTransition((state) => {\n          // Update the current state component data property with the next state\n          this.current = state;\n          // Update the context component data property with the updated context\n          this.context = state.context;\n        })\n        .start();\n    },\n    data() {\n      return {\n        // Interpret the machine and store it in data\n        toggleService: interpret(toggleMachine),\n\n        // Start with the machine's initial state\n        current: toggleMachine.initialState,\n\n        // Start with the machine's initial context\n        context: toggleMachine.context\n      };\n    },\n    methods: {\n      // Send events to the service\n      send(event) {\n        this.toggleService.send(event);\n      }\n    }\n  };\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom DevTools Adapter in XState\nDESCRIPTION: Example of creating a custom devtools adapter function for XState that takes a service as input and can subscribe to state changes.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_141\n\nLANGUAGE: javascript\nCODE:\n```\nconst myCustomDevTools = (service) => {\n  console.log('Got a service!');\n\n  service.subscribe((state) => {\n    // ...\n  });\n};\n\nconst service = interpret(someMachine, {\n  devTools: myCustomDevTools\n});\n```\n\n----------------------------------------\n\nTITLE: Spawning Promise Actors in XState\nDESCRIPTION: Example of spawning a promise as an actor. The promise fetches data and returns a response that will be sent back as a 'done' event.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/actors.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Returns a promise\nconst fetchData = (query) => {\n  return fetch(`http://example.com?query=${event.query}`).then((data) =>\n    data.json()\n  );\n};\n\n// ...\n{\n  actions: assign({\n    ref: (_, event) => spawn(fetchData(event.query))\n  });\n}\n// ...\n```\n\n----------------------------------------\n\nTITLE: Initializing XState Inspector\nDESCRIPTION: Basic setup code for importing and configuring the XState inspector with default options.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/packages/xstate-inspect/index.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { inspect } from '@xstate/inspect';\n\ninspect({\n  // options\n  // url: 'https://stately.ai/viz?inspect', // (default)\n  iframe: false // open in new window\n});\n```\n\n----------------------------------------\n\nTITLE: Relative Targeting in XState\nDESCRIPTION: Shows how to use relative targets in XState by using dot notation to reference child state nodes. Includes example of internal vs external transitions using the internal property.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/ids.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst optionsMachine = createMachine({\n  id: 'options',\n  initial: 'first',\n  states: {\n    first: {},\n    second: {},\n    third: {}\n  },\n  on: {\n    SELECT_FIRST: { target: '.first' }, // resolves to 'options.first'\n    SELECT_SECOND: { target: '.second' }, // 'options.second'\n    SELECT_THIRD: { target: '.third' } // 'options.third'\n  }\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\non: {\n  SELECT_FIRST: {\n    target: '.first',\n    internal: false // external transition, will exit/reenter parent state node\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Store with XState Store\nDESCRIPTION: Demonstrates how to create a simple store for managing donuts using the createStore function, including defining the initial context, event handlers, subscribing to state changes, and triggering events.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-store/README.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createStore } from '@xstate/store';\n\nexport const donutStore = createStore({\n  context: {\n    donuts: 0,\n    favoriteFlavor: 'chocolate'\n  },\n  on: {\n    addDonut: (context) => ({\n      ...context,\n      donuts: context.donuts + 1\n    }),\n    changeFlavor: (context, event: { flavor: string }) => ({\n      ...context,\n      favoriteFlavor: event.flavor\n    }),\n    eatAllDonuts: (context) => ({\n      ...context,\n      donuts: 0\n    })\n  }\n});\n\ndonutStore.subscribe((snapshot) => {\n  console.log(snapshot.context);\n});\n\n// Equivalent to\n// donutStore.send({ type: 'addDonut' });\ndonutStore.trigger.addDonut();\n// => { donuts: 1, favoriteFlavor: 'chocolate' }\n\n// donutStore.send({\n//   type: 'changeFlavor',\n//   flavor: 'strawberry' // Strongly-typed!\n// });\ndonutStore.trigger.changeFlavor({ flavor: 'strawberry' });\n// => { donuts: 1, favoriteFlavor: 'strawberry' }\n```\n\n----------------------------------------\n\nTITLE: TypeScript Types for createUpdater() Function\nDESCRIPTION: Example showing how to properly type the createUpdater function with TypeScript. Demonstrates using the ImmerUpdateEvent type to create strongly typed updaters.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/packages/xstate-immer/index.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createUpdater, ImmerUpdateEvent } from '@xstate/immer';\n\n// This is the same as:\n// {\n//   type: 'UPDATE_NAME';\n//   input: string;\n// }\ntype NameUpdateEvent = ImmerUpdateEvent<'UPDATE_NAME', string>;\n\nconst nameUpdater = createUpdater<SomeContext, NameUpdateEvent>(\n  'UPDATE_NAME',\n  (ctx, { input }) => {\n    ctx.name = input;\n  }\n);\n\n// You should use NameUpdateEvent directly as part of the event type\n// in createMachine<SomeContext, SomeEvent>.\n```\n\n----------------------------------------\n\nTITLE: Transitioning Parallel State Nodes in XState\nDESCRIPTION: This snippet shows how to transition between states in a parallel state node. It demonstrates transitioning the 'upload' state while keeping the 'download' state unchanged.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/parallel.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(\n  fileMachine.transition(\n    {\n      upload: 'pending',\n      download: 'idle'\n    },\n    { type: 'UPLOAD_COMPLETE' }\n  ).value\n);\n// => {\n//   upload: 'success',\n//   download: 'idle'\n// }\n```\n\n----------------------------------------\n\nTITLE: Typing children IDs with setup in XState v5\nDESCRIPTION: Children IDs can now be typed using `types.children` in combination with the `setup` function.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_75\n\nLANGUAGE: typescript\nCODE:\n```\nconst machine = setup({\n  types: {} as {\n    children: {\n      myId: 'actorKey';\n    };\n  },\n  actors: {\n    actorKey: child\n  }\n}).createMachine({});\n\nconst actorRef = createActor(machine).start();\n\nactorRef.getSnapshot().children.myId; // ActorRefFrom<typeof child> | undefined\n```\n\n----------------------------------------\n\nTITLE: Updating Actor Subscription Method\nDESCRIPTION: Change from using deprecated onDone() method to using subscribe() with complete callback for handling actor completion.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_63\n\nLANGUAGE: diff\nCODE:\n```\n- actor.onDone(() => { ... })\n+ actor.subscribe({\n+  complete() {\n+    // ...\n+  }\n+})\n```\n\n----------------------------------------\n\nTITLE: Testing XState Services with Mocked Implementations\nDESCRIPTION: Demonstrates how to test services by mocking them using .withConfig() and running assertions.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/communication.md#2025-04-20_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { interpret } from 'xstate';\nimport { assert } from 'chai';\nimport { userMachine } from '../path/to/userMachine';\n\nconst mockFetchUser = async (userId) => {\n  // Mock however you want, but ensure that the same\n  // behavior and response format is used\n  return { name: 'Test', location: 'Anywhere' };\n};\n\nconst testUserMachine = userMachine.withConfig({\n  services: {\n    getUser: (context, event) => mockFetchUser(context.id)\n  }\n});\n\ndescribe('userMachine', () => {\n  it('should go to the \"success\" state when a user is found', (done) => {\n    interpret(testUserMachine)\n      .onTransition((state) => {\n        if (state.matches('success')) {\n          assert.deepEqual(state.context.user, {\n            name: 'Test',\n            location: 'Anywhere'\n          });\n\n          done();\n        }\n      })\n      .start();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Machine for Inspection\nDESCRIPTION: Example showing how to configure an XState machine for inspection by enabling devTools.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/packages/xstate-inspect/index.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { interpret } from 'xstate';\nimport { inspect } from '@xstate/inspect';\n// ...\n\nconst service = interpret(someMachine, { devTools: true });\n```\n\n----------------------------------------\n\nTITLE: Implementing Eventless ('Always') Transitions in XState\nDESCRIPTION: Shows how to use eventless transitions in XState, which are always taken when the machine is in the state where they are defined and their condition is true. These are checked immediately when entering the state and after receiving any actionable event.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/transitions.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst gameMachine = createMachine(\n  {\n    id: 'game',\n    initial: 'playing',\n    context: {\n      points: 0\n    },\n    states: {\n      playing: {\n        // Eventless transition\n        // Will transition to either 'win' or 'lose' immediately upon\n        // entering 'playing' state or receiving AWARD_POINTS event\n        // if the condition is met.\n        always: [\n          { target: 'win', cond: 'didPlayerWin' },\n          { target: 'lose', cond: 'didPlayerLose' }\n        ],\n        on: {\n          // Self-transition\n          AWARD_POINTS: {\n            actions: assign({\n              points: 100\n            })\n          }\n        }\n      },\n      win: { type: 'final' },\n      lose: { type: 'final' }\n    }\n  },\n  {\n    guards: {\n      didPlayerWin: (context, event) => {\n        // check if player won\n        return context.points > 99;\n      },\n      didPlayerLose: (context, event) => {\n        // check if player lost\n        return context.points < 0;\n      }\n    }\n  }\n);\n\nconst gameService = interpret(gameMachine)\n  .onTransition((state) => console.log(state.value))\n  .start();\n\n// Still in 'playing' state because no conditions of\n// transient transition were met\n// => 'playing'\n\n// When 'AWARD_POINTS' is sent, a self-transition to 'PLAYING' occurs.\n// The transient transition to 'win' is taken because the 'didPlayerWin'\n// condition is satisfied.\ngameService.send({ type: 'AWARD_POINTS' });\n// => 'win'\n```\n\n----------------------------------------\n\nTITLE: Enabling DevTools for XState Machines in JavaScript\nDESCRIPTION: Demonstrates how to enable development tools for interpreted XState machines by adding the devTools option when interpreting a machine.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/packages/xstate-inspect/index.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { interpret } from 'xstate';\nimport { inspect } from '@xstate/inspect';\n// ...\n\nconst service = interpret(someMachine, { devTools: true });\n```\n\n----------------------------------------\n\nTITLE: Testing Reddit State Machine with XState Interpreter\nDESCRIPTION: Demonstrates how to test the Reddit state machine using XState's interpreter. This integration test verifies that the machine transitions correctly and loads posts when a subreddit is selected.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/tutorials/reddit.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { interpret } from 'xstate';\nimport { assert } from 'chai';\n\nimport { redditMachine } from '../path/to/redditMachine';\n\ndescribe('reddit machine (live)', () => {\n  it('should load posts of a selected subreddit', (done) => {\n    const redditService = interpret(redditMachine)\n      .onTransition((state) => {\n        // when the state finally reaches 'selected.loaded',\n        // the test has succeeded.\n\n        if (state.matches({ selected: 'loaded' })) {\n          assert.isNotEmpty(state.context.posts);\n\n          done();\n        }\n      })\n      .start(); // remember to start the service!\n\n    // Test that when the 'SELECT' event is sent, the machine eventually\n    // reaches the { selected: 'loaded' } state with posts\n    redditService.send({ type: 'SELECT', name: 'reactjs' });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Pure Logic in XState Machine Transitions\nDESCRIPTION: Demonstrates how to test the pure logic of an XState machine using the machine.transition(...) function. This snippet asserts that a specific state is reached given an initial state and an event.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/testing.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { lightMachine } from '../path/to/lightMachine';\n\nit('should reach \"yellow\" given \"green\" when the \"TIMER\" event occurs', () => {\n  const expectedValue = 'yellow'; // the expected state value\n\n  const actualState = lightMachine.transition('green', { type: 'TIMER' });\n\n  expect(actualState.matches(expectedValue)).toBeTruthy();\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Meta Data to State Nodes in XState (JavaScript)\nDESCRIPTION: This code shows how to add meta data to state nodes in an XState machine, which can be useful for describing properties of each state.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/statenodes.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst fetchMachine = createMachine({\n  id: 'fetch',\n  initial: 'idle',\n  states: {\n    idle: {\n      on: {\n        FETCH: { target: 'loading' }\n      }\n    },\n    loading: {\n      after: {\n        3000: { target: 'failure.timeout' }\n      },\n      on: {\n        RESOLVE: { target: 'success' },\n        REJECT: { target: 'failure' },\n        TIMEOUT: { target: 'failure.timeout' } // manual timeout\n      },\n      meta: {\n        message: 'Loading...'\n      }\n    },\n    success: {\n      meta: {\n        message: 'The request succeeded!'\n      }\n    },\n    failure: {\n      initial: 'rejection',\n      states: {\n        rejection: {\n          meta: {\n            message: 'The request failed.'\n          }\n        },\n        timeout: {\n          meta: {\n            message: 'The request timed out.'\n          }\n        }\n      },\n      meta: {\n        alert: 'Uh oh.'\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Type-Safe Partial Event Descriptors in XState\nDESCRIPTION: Demonstrates how to use partial event descriptors with type safety, allowing event pattern matching while preserving type information.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_103\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMachine({\n  types: {} as {\n    events:\n      | { type: 'mouse.click.up'; direction: 'up' }\n      | { type: 'mouse.click.down'; direction: 'down' }\n      | { type: 'mouse.move' }\n      | { type: 'keypress' };\n  },\n  on: {\n    'mouse.click.*': {\n      actions: ({ event }) => {\n        event.type;\n        // 'mouse.click.up' | 'mouse.click.down'\n        event.direction;\n        // 'up' | 'down'\n      }\n    },\n    'mouse.*': {\n      actions: ({ event }) => {\n        event.type;\n        // 'mouse.click.up' | 'mouse.click.down' | 'mouse.move'\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Delayed Events with Send Action in XState\nDESCRIPTION: Demonstrates how to send delayed events and cancel them using send and cancel action creators.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/delays.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst toggleMachine = createMachine({\n  id: 'toggle',\n  initial: 'inactive',\n  states: {\n    inactive: {\n      entry: sendTimerAfter1Second,\n      on: {\n        TIMER: { target: 'active' },\n        CANCEL: { actions: cancelTimer }\n      }\n    },\n    active: {}\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using createActorContext with Provider Options in React\nDESCRIPTION: Example showing the migration from passing options to createActorContext to using the options prop on the Provider component. This approach allows passing machine configuration options at the Provider level.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-react/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n-const SomeContext = createActorContext(someMachine,\n-  { actions: { ... } });\n+const SomeContext = createActorContext(someMachine);\n\n// ...\n\n-<SomeContext.Provider>\n+<SomeContext.Provider options={{ actions: { ... } }}>\n```\n\n----------------------------------------\n\nTITLE: Accessing Declarative Actions in XState State Machine\nDESCRIPTION: This snippet demonstrates how to access the declarative actions from a state transition. The actions property of the returned State instance contains an array of action objects to be executed.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/actions.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst activeState = triggerMachine.transition('inactive', { type: 'TRIGGER' });\n\nconsole.log(activeState.actions);\n// [\n//   { type: 'activate', exec: ... },\n//   { type: 'sendTelemetry', exec: ... },\n//   { type: 'notifyActive', exec: ... },\n//   { type: 'sendTelemetry', exec: ... }\n// ]\n```\n\n----------------------------------------\n\nTITLE: Testing Delayed Transitions with SimulatedClock\nDESCRIPTION: Shows how to test delayed transitions using XState's SimulatedClock for deterministic timing control.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/delays.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst service = interpret(lightDelayMachine, {\n  clock: new SimulatedClock()\n}).onTransition((state) => console.log(state.value));\n\nservice.start();\n// => 'green'\n\n// move the SimulatedClock forward by 1 second\nservice.clock.increment(1000);\n// => 'yellow'\n```\n\n----------------------------------------\n\nTITLE: Defining a Traffic Light Machine with Activities in XState\nDESCRIPTION: This snippet demonstrates a more complex machine for a traffic light system with multiple states and activities. It shows how activities are defined, started, and stopped in different states.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/activities.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst lightMachine = createMachine({\n  key: 'light',\n  initial: 'green',\n  states: {\n    green: {\n      on: {\n        TIMER: { target: 'yellow' }\n      }\n    },\n    yellow: {\n      on: {\n        TIMER: { target: 'red' }\n      }\n    },\n    red: {\n      initial: 'walk',\n      // the 'activateCrosswalkLight' activity is started upon entering\n      // the 'light.red' state, and stopped upon exiting it.\n      activities: ['activateCrosswalkLight'],\n      on: {\n        TIMER: { target: 'green' }\n      },\n      states: {\n        walk: {\n          on: {\n            PED_WAIT: { target: 'wait' }\n          }\n        },\n        wait: {\n          // the 'blinkCrosswalkLight' activity is started upon entering\n          // the 'light.red.wait' state, and stopped upon exiting it\n          // or its parent state.\n          activities: ['blinkCrosswalkLight'],\n          on: {\n            PED_STOP: { target: 'stop' }\n          }\n        },\n        stop: {}\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Default DevTools in XState\nDESCRIPTION: How to attach XState devtools to the global window.__xstate__ object using the simplified devTools option in interpret().\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_140\n\nLANGUAGE: javascript\nCODE:\n```\nconst service = interpret(someMachine, {\n  devTools: true // attaches via window.__xstate__.register(service)\n});\n```\n\n----------------------------------------\n\nTITLE: Persisting and Rehydrating XState in React Components\nDESCRIPTION: Shows how to persist and rehydrate XState machine state in React components using the useMachine hook's options. This is useful for maintaining state across page reloads or application restarts.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/packages/xstate-react/index.md#2025-04-20_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\n\n// Get the persisted state config object from somewhere, e.g. localStorage\nconst persistedState = JSON.parse(localStorage.getItem('some-persisted-state-key')) || someMachine.initialState;\n\nconst App = () => {\n  const [state, send] = useMachine(someMachine, {\n    state: persistedState // provide persisted state config object here\n  });\n\n  // state will initially be that persisted state, not the machine's initialState\n\n  return (/* ... */)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing History State Machine\nDESCRIPTION: Example of a payment processing state machine with history state tracking for remembering previous payment method selections.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/packages/core/index.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst paymentMachine = createMachine({\n  id: 'payment',\n  initial: 'method',\n  states: {\n    method: {\n      initial: 'cash',\n      states: {\n        cash: { on: { SWITCH_CHECK: 'check' } },\n        check: { on: { SWITCH_CASH: 'cash' } },\n        hist: { type: 'history' }\n      },\n      on: { NEXT: 'review' }\n    },\n    review: {\n      on: { PREVIOUS: 'method.hist' }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Running XState Typegen Command\nDESCRIPTION: Command to run typegen against TypeScript files using a glob pattern. Generates typegen files and imports them automatically.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/packages/xstate-cli/index.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nxstate typegen \"src/**/*.ts?(x)\"\n```\n\n----------------------------------------\n\nTITLE: Adding Meta Data to State Nodes in XState (JavaScript)\nDESCRIPTION: Shows how to add meta data to state nodes using the .meta property. This example includes meta data for various states in a fetch machine.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/statenodes.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst fetchMachine = createMachine({\n  id: 'fetch',\n  initial: 'idle',\n  states: {\n    idle: {\n      on: {\n        FETCH: { target: 'loading' }\n      }\n    },\n    loading: {\n      after: {\n        3000: { target: 'failure.timeout' }\n      },\n      on: {\n        RESOLVE: { target: 'success' },\n        REJECT: { target: 'failure' },\n        TIMEOUT: { target: 'failure.timeout' } // manual timeout\n      },\n      meta: {\n        message: 'Loading...'\n      }\n    },\n    success: {\n      meta: {\n        message: 'The request succeeded!'\n      }\n    },\n    failure: {\n      initial: 'rejection',\n      states: {\n        rejection: {\n          meta: {\n            message: 'The request failed.'\n          }\n        },\n        timeout: {\n          meta: {\n            message: 'The request timed out.'\n          }\n        }\n      },\n      meta: {\n        alert: 'Uh oh.'\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Counter with Min/Max Guards in XState\nDESCRIPTION: Extends the basic counter with guard conditions to implement minimum and maximum limits. Prevents increment above 10 and decrement below 0 using conditional transitions.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/examples/counter.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst isNotMax = (context) => context.count < 10;\nconst isNotMin = (context) => context.count >= 0;\n\nconst counterMachine = createMachine({\n  initial: 'active',\n  context: {\n    count: 0\n  },\n  states: {\n    active: {\n      on: {\n        INC: {\n          actions: assign({ count: increment }),\n          cond: isNotMax\n        },\n        DEC: {\n          actions: assign({ count: decrement }),\n          cond: isNotMin\n        }\n      }\n    }\n  }\n});\n\n// assume context is { count: 9 }\ncounterService.send({ type: 'INC' });\n// => 10\n\ncounterService.send({ type: 'INC' }); // no transition taken!\n// => 10\n```\n\n----------------------------------------\n\nTITLE: Defining a basic Promise state machine\nDESCRIPTION: Initial configuration of a Promise state machine with an id, initial state, and three states (pending, resolved, rejected). This sets up the basic structure of the machine.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/start.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { createMachine } from 'xstate';\n\nconst promiseMachine = createMachine({\n  id: 'promise',\n  initial: 'pending',\n  states: {\n    pending: {},\n    resolved: {},\n    rejected: {}\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Possible State Changes in XState (JavaScript)\nDESCRIPTION: Illustrates the use of state.can() method to determine if an event will cause a state change. This method is useful for predicting state transitions and conditional UI updates based on possible events.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/states.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst machine = createMachine({\n  initial: 'inactive',\n  states: {\n    inactive: {\n      on: {\n        TOGGLE: 'active'\n      }\n    },\n    active: {\n      on: {\n        DO_SOMETHING: { actions: ['something'] }\n      }\n    }\n  }\n});\n\nconst inactiveState = machine.initialState;\n\ninactiveState.can({ type: 'TOGGLE' }); // true\ninactiveState.can({ type: 'DO_SOMETHING' }); // false\n\n// Also takes in full event objects:\ninactiveState.can({\n  type: 'DO_SOMETHING',\n  data: 42\n}); // false\n\nconst activeState = machine.transition(inactiveState, { type: 'TOGGLE' });\n\nactiveState.can({ type: 'TOGGLE' }); // false\nactiveState.can({ type: 'DO_SOMETHING' }); // true, since an action will be executed\n```\n\n----------------------------------------\n\nTITLE: Using getNextSnapshot with TypeScript in XState\nDESCRIPTION: Example of using the getNextSnapshot function to determine the next state snapshot for a given actor logic based on an existing snapshot and event. If the snapshot is undefined, the initial snapshot is used.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getNextSnapshot } from 'xstate';\nimport { trafficLightMachine } from './trafficLightMachine.ts';\n\nconst nextSnapshot = getNextSnapshot(\n  trafficLightMachine, // actor logic\n  undefined, // snapshot (or initial state if undefined)\n  { type: 'TIMER' }\n); // event object\n\nconsole.log(nextSnapshot.value);\n// => 'yellow'\n\nconst nextSnapshot2 = getNextSnapshot(\n  trafficLightMachine, // actor logic\n  nextSnapshot, // snapshot\n  { type: 'TIMER' }\n); // event object\n\nconsole.log(nextSnapshot2.value);\n// =>'red'\n```\n\n----------------------------------------\n\nTITLE: Configuring Service with Metadata Source in XState\nDESCRIPTION: Shows how to configure a service invocation using an object source with metadata that can be accessed in the service implementation.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/communication.md#2025-04-20_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst machine = createMachine(\n  {\n    initial: 'searching',\n    states: {\n      searching: {\n        invoke: {\n          src: {\n            type: 'search',\n            endpoint: 'example.com'\n          }\n          // ...\n        }\n        // ...\n      }\n    }\n  },\n  {\n    services: {\n      search: (context, event, { src }) => {\n        console.log(src);\n        // => { endpoint: 'example.com' }\n      }\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Service with Metadata Source in XState\nDESCRIPTION: Shows how to specify invoke source as an object with type and metadata, available in XState 4.12+.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/communication.md#2025-04-20_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst machine = createMachine(\n  {\n    initial: 'searching',\n    states: {\n      searching: {\n        invoke: {\n          src: {\n            type: 'search',\n            endpoint: 'example.com'\n          }\n          // ...\n        }\n        // ...\n      }\n    }\n  },\n  {\n    services: {\n      search: (context, event, { src }) => {\n        console.log(src);\n        // => { endpoint: 'example.com' }\n      }\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Renaming spawn to spawnChild Action Creator in TypeScript\nDESCRIPTION: The spawn(...) action creator has been renamed to spawnChild(...) to avoid confusion with the spawn function used inside assign().\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_89\n\nLANGUAGE: typescript\nCODE:\n```\nimport { spawnChild, assign } from 'xstate';\n\nconst childMachine = createMachine({\n  on: {\n    someEvent: {\n      actions: [\n        // spawnChild(...) instead of spawn(...)\n        spawnChild('someSrc'),\n\n        // spawn() is used inside of assign()\n        assign({\n          anotherRef: ({ spawn }) => spawn('anotherSrc')\n        })\n      ]\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using String Shorthand for Simple Events in XState\nDESCRIPTION: Shows how events with only a type property can be represented as a string shorthand in XState.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/events.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// equivalent to { type: 'TIMER' }\nconst timerEvent = 'TIMER';\n```\n\n----------------------------------------\n\nTITLE: Invoking Multiple Services in XState\nDESCRIPTION: This snippet shows how to invoke multiple services in XState by specifying them in an array.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/communication.md#2025-04-20_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\ninvoke: [\n  { id: 'service1', src: 'someService' },\n  { id: 'service2', src: 'someService' },\n  { id: 'logService', src: 'logService' }\n],\n// ...\n```\n\n----------------------------------------\n\nTITLE: Basic Toggle Machine Implementation in Svelte\nDESCRIPTION: Simple example showing how to create and use a toggle state machine in a Svelte component using useMachine hook\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/packages/xstate-svelte/index.md#2025-04-20_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { useMachine } from '@xstate/svelte';\n  import { createMachine } from 'xstate';\n\n  const toggleMachine = createMachine({\n    id: 'toggle',\n    initial: 'inactive',\n    states: {\n      inactive: {\n        on: { TOGGLE: 'active' }\n      },\n      active: {\n        on: { TOGGLE: 'inactive' }\n      }\n    }\n  });\n\n  const { state, send } = useMachine(toggleMachine);\n</script>\n\n<button on:click={() => send('TOGGLE')}>\n  {$state.value === 'inactive'\n    ? 'Click to activate'\n    : 'Active! Click to deactivate'}\n</button>\n```\n\n----------------------------------------\n\nTITLE: Spawning Persistable Actors\nDESCRIPTION: Demonstrates how to create spawned actors that can be deeply persisted and restored using referenced sources.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_68\n\nLANGUAGE: typescript\nCODE:\n```\nconst machine = createMachine({\n  context: ({ spawn }) => ({\n    // This will be persisted\n    ref: spawn('reducer', { id: 'child' })\n\n    // This cannot be persisted:\n    // ref: spawn(fromTransition((s) => s, { count: 42 }), { id: 'child' })\n  })\n}).provide({\n  actors: {\n    reducer: fromTransition((s) => s, { count: 42 })\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Matching Hierarchical States with if/else in React\nDESCRIPTION: Demonstrates how to match hierarchical or parallel state values using if/else if/else blocks with the state.matches() method in React components.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/packages/xstate-react/index.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\nif (state.matches('idle')) {\n  return /* ... */;\n} else if (state.matches({ loading: 'user' })) {\n  return /* ... */;\n} else if (state.matches({ loading: 'friends' })) {\n  return /* ... */;\n} else {\n  return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Prefix Wildcard Event Descriptors in XState\nDESCRIPTION: Demonstrates the usage of prefix wildcard event descriptors that match events starting with a specific prefix. Shows valid and invalid wildcard patterns.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_151\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\non: {\n  'mouse.click': {/* ... */},\n  // Matches events such as:\n  // \"pointer.move\"\n  // \"pointer.move.out\"\n  // \"pointer\"\n  'pointer.*': {/* ... */}\n}\n// ...\n```\n\n----------------------------------------\n\nTITLE: Invoking Promises in XState\nDESCRIPTION: Example of invoking promises in XState with success and error handling.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/communication.md#2025-04-20_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// Function that returns a promise\nconst getDataFromAPI = () => fetch(/* ... */)\n    .then(data => data.json());\n\n\n// ...\n{\n  invoke: (context, event) => getDataFromAPI,\n  // resolved promise\n  onDone: {\n    target: 'success',\n    // resolved promise data is on event.data property\n    actions: (context, event) => console.log(event.data)\n  },\n  // rejected promise\n  onError: {\n    target: 'failure',\n    // rejected promise data is on event.data property\n    actions: (context, event) => console.log(event.data)\n  }\n}\n// ...\n```\n\n----------------------------------------\n\nTITLE: External Transitions in XState\nDESCRIPTION: This example shows how to define external transitions in XState. External transitions exit and re-enter the state node in which they are defined. By default, transitions are external, but can be explicitly set using { internal: false }.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/transitions.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\non: {\n  // external transitions\n  LEFT_CLICK: 'word.left',\n  RIGHT_CLICK: 'word.right',\n  CENTER_CLICK: { target: '.center', internal: false }, // same as 'word.center'\n  JUSTIFY_CLICK: { target: 'word.justify', internal: false } // same as 'word.justify'\n}\n// ...\n```\n\n----------------------------------------\n\nTITLE: Using CallbackActorRef Type with fromCallback in TypeScript\nDESCRIPTION: Demonstrates how to use the CallbackActorRef type with the fromCallback function to create an actor that logs when it receives specific events. This actor accepts Event type events and Input type parameters.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fromCallback, createActor } from 'xstate';\n\n/** The events the actor receives. */\ntype Event = { type: 'someEvent' };\n/** The actor's input. */\ntype Input = { name: string };\n\n/** Actor logic that logs whenever it receives an event of type `someEvent`. */\nconst logic = fromCallback<Event, Input>(({ self, input, receive }) => {\n  self;\n  // ^? CallbackActorRef<Event, Input>\n\n  receive((event) => {\n    if (event.type === 'someEvent') {\n      console.log(`${input.name}: received \"someEvent\" event`);\n      // logs 'myActor: received \"someEvent\" event'\n    }\n  });\n});\n\nconst actor = createActor(logic, { input: { name: 'myActor' } });\n//    ^? CallbackActorRef<Event, Input>\n```\n\n----------------------------------------\n\nTITLE: Accessing Spawned Services and Checking Tags in XState (JavaScript)\nDESCRIPTION: Shows how to use state.children to access spawned services/actors, and state.hasTag() to check if the current state configuration has a specific tag. These methods are useful for managing child processes and state categorization.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/states.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst machine = createMachine({\n  // ...\n  invoke: [\n    { id: 'notifier', src: createNotifier },\n    { id: 'logger', src: createLogger }\n  ]\n  // ...\n});\n\nconst service = invoke(machine)\n  .onTransition((state) => {\n    state.children.notifier; // service from createNotifier()\n    state.children.logger; // service from createLogger()\n  })\n  .start();\n\nconst machine = createMachine({\n  initial: 'green',\n  states: {\n    green: {\n      tags: 'go' // single tag\n    },\n    yellow: {\n      tags: 'go'\n    },\n    red: {\n      tags: ['stop', 'other'] // multiple tags\n    }\n  }\n});\n\nconst canGo = state.hasTag('go');\n// => `true` if in 'green' or 'yellow' state\n```\n\n----------------------------------------\n\nTITLE: Using state.can() Method in XState\nDESCRIPTION: This snippet demonstrates the use of the state.can() method to determine if an event will cause a state change. It checks whether the machine will transition to a different state or execute actions in response to an event.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/states.md#2025-04-20_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst machine = createMachine({\n  initial: 'inactive',\n  states: {\n    inactive: {\n      on: {\n        TOGGLE: 'active'\n      }\n    },\n    active: {\n      on: {\n        DO_SOMETHING: { actions: ['something'] }\n      }\n    }\n  }\n});\n\nconst inactiveState = machine.initialState;\n\ninactiveState.can({ type: 'TOGGLE' }); // true\ninactiveState.can({ type: 'DO_SOMETHING' }); // false\n\ninactiveState.can({\n  type: 'DO_SOMETHING',\n  data: 42\n}); // false\n\nconst activeState = machine.transition(inactiveState, { type: 'TOGGLE' });\n\nactiveState.can({ type: 'TOGGLE' }); // false\nactiveState.can({ type: 'DO_SOMETHING' }); // true, since an action will be executed\n```\n\n----------------------------------------\n\nTITLE: Implementing XState in a Stencil Component\nDESCRIPTION: Demonstrates how to use XState within a Stencil component. The component interprets the toggle machine, subscribes to state changes, and manages the service lifecycle in the component lifecycle methods.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/recipes/stencil.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Component, h, State } from \"@stencil/core\";\nimport { interpret } from \"xstate\";\nimport { toggleMachine } from \"../helpers/toggle-machine\";\n\n@Component({\n  tag: \"my-toggle\",\n  styleUrl: \"toggle.css\",\n  shadow: true\n})\nexport class Toggle {\n  private _service = interpret(toggleMachine);\n\n  @State() state = this._service.getSnapshot();\n\n  componentWillLoad() {\n    this._service.subscribe(state => {\n      this.state = state;\n    });\n\n    this._service.start();\n  }\n\n  disconnectedCallback() {\n    this._service.stop();\n  }\n\n  render() {\n    const { send } = this._service;\n\n    return (\n      <button onClick={() => send(\"toggle\")}>\n        {this.state.value === \"inactive\" ? \"Off\" : \"On\"}\n      </button>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running XState Machine in Node.js\nDESCRIPTION: Example of interpreting and running the state machine in Node.js environment\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/start.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine, interpret } from 'xstate';\n\nconst promiseMachine = createMachine({\n  /* ... */\n});\n\nconst promiseService = interpret(promiseMachine).onTransition((state) =>\n  console.log(state.value)\n);\n\n// Start the service\npromiseService.start();\n// => 'pending'\n\npromiseService.send({ type: 'RESOLVE' });\n// => 'resolved'\n```\n\n----------------------------------------\n\nTITLE: Implementing History States with XState in JavaScript\nDESCRIPTION: This example demonstrates how to use history states in XState to remember and return to previous states. The payment machine allows switching between cash and check methods, and when returning from the review state, it restores the last active payment method using a history state.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/README.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine, createActor } from 'xstate';\n\nconst paymentMachine = createMachine({\n  id: 'payment',\n  initial: 'method',\n  states: {\n    method: {\n      initial: 'cash',\n      states: {\n        cash: {\n          on: {\n            SWITCH_CHECK: 'check'\n          }\n        },\n        check: {\n          on: {\n            SWITCH_CASH: 'cash'\n          }\n        },\n        hist: { type: 'history' }\n      },\n      on: { NEXT: 'review' }\n    },\n    review: {\n      on: { PREVIOUS: 'method.hist' }\n    }\n  }\n});\n\nconst actor = createActor(paymentMachine);\n\nactor.subscribe((state) => {\n  console.log(state.value);\n});\n\nactor.start();\n// logs {\n//   value: { method: 'cash' },\n// }\n\nactor.send({ type: 'SWITCH_CHECK' });\n// logs {\n//   value: { method: 'check' },\n// }\n\nactor.send({ type: 'NEXT' });\n// logs {\n//   value: 'review',\n// }\n\nactor.send({ type: 'PREVIOUS' });\n// logs {\n//   value: { method: 'check' },\n// }\n```\n\n----------------------------------------\n\nTITLE: Specifying Output Types for XState Machines\nDESCRIPTION: Example demonstrating how to define strongly typed output for state machines that can be accessed in snapshots.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_108\n\nLANGUAGE: typescript\nCODE:\n```\nconst machine = createMachine({\n  types: {} as {\n    output: {\n      result: 'pass' | 'fail';\n      score: number;\n    };\n  }\n  // ...\n});\n\nconst actor = createActor(machine);\n\n// ...\n\nconst snapshot = actor.getSnapshot();\n\nif (snapshot.output) {\n  snapshot.output.result;\n  // strongly typed as 'pass' | 'fail'\n  snapshot.output.score;\n  // strongly typed as number\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Fetch Machine Implementation\nDESCRIPTION: Advanced example demonstrating a configurable fetch machine with multiple states, services, and actions in a SolidJS component.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/packages/xstate-solid/index.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst fetchMachine = createMachine({\n  id: 'fetch',\n  initial: 'idle',\n  context: {\n    data: undefined,\n    error: undefined\n  },\n  states: {\n    idle: {\n      on: { FETCH: 'loading' }\n    },\n    loading: {\n      invoke: {\n        src: 'fetchData',\n        onDone: {\n          target: 'success',\n          actions: assign({\n            data: (_, event) => event.data\n          })\n        },\n        onError: {\n          target: 'failure',\n          actions: assign({\n            error: (_, event) => event.data\n          })\n        }\n      }\n    },\n    success: {\n      entry: 'notifySuccess',\n      type: 'final'\n    },\n    failure: {\n      on: {\n        RETRY: 'loading'\n      }\n    }\n  }\n});\n\nconst Fetcher = ({ onResolve }) => {\n  const [state, send] = useMachine(fetchMachine, {\n    actions: {\n      notifySuccess: (ctx) => onResolve(ctx.data)\n    },\n    services: {\n      fetchData: (_, e) =>\n        fetch(`some/api/${e.query}`).then((res) => res.json())\n    }\n  });\n\n  return (\n    <Switch fallback={null}>\n      <Match when={state.matches('idle')}>\n        <button onClick={() => send({ type: 'FETCH', query: 'something' })}>\n          Search for something\n        </button>\n      </Match>\n      <Match when={state.matches('loading')}>\n        <div>Searching...</div>\n      </Match>\n      <Match when={state.matches('success')}>\n        <div>Success! Data: {state.context.data}</div>\n      </Match>\n      <Match when={state.matches('failure')}>\n        <div>\n          <p>{state.context.error.message}</p>\n          <button onClick={() => send({ type: 'RETRY' })}>Retry</button>\n        </div>\n      </Match>\n    </Switch>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Event Typing in Machine Options with XState TypeScript\nDESCRIPTION: Demonstrates the issue with event typing when using named actions in createMachine options and shows how to properly type events using type assertion.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/typescript.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMachine } from 'xstate';\n\ninterface Context {}\n\ntype Event =\n  | { type: 'EVENT_WITH_FLAG'; flag: boolean }\n  | {\n      type: 'EVENT_WITHOUT_FLAG';\n    };\n\ncreateMachine(\n  {\n    schema: {\n      context: {} as Context,\n      events: {} as Event\n    },\n    on: {\n      EVENT_WITH_FLAG: {\n        actions: 'consoleLogData'\n      }\n    }\n  },\n  {\n    actions: {\n      consoleLogData: (context, event) => {\n        // This will error at .flag\n        console.log(event.flag);\n      }\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Using Log Action in XState (JavaScript)\nDESCRIPTION: Demonstrates the usage of the log action creator for logging state context and events. This example shows different ways to use the log action, including custom expressions and labels.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/actions.md#2025-04-20_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine, actions } from 'xstate';\nconst { log } = actions;\n\nconst loggingMachine = createMachine({\n  id: 'logging',\n  context: { count: 42 },\n  initial: 'start',\n  states: {\n    start: {\n      entry: log('started!'),\n      on: {\n        FINISH: {\n          target: 'end',\n          actions: log(\n            (context, event) => `count: ${context.count}, event: ${event.type}`,\n            'Finish label'\n          )\n        }\n      }\n    },\n    end: {}\n  }\n});\n\nconst endState = loggingMachine.transition('start', { type: 'FINISH' });\n\nendState.actions;\n// [\n//   {\n//     type: 'xstate.log',\n//     label: 'Finish label',\n//     expr: (context, event) => ...\n//   }\n// ]\n```\n\n----------------------------------------\n\nTITLE: New Transition Object Syntax in XState 4\nDESCRIPTION: Demonstrates the new XState 4 syntax for defining transitions as objects with explicit target and actions properties, noting that arrays are no longer required for single actions.\nSOURCE: https://github.com/statelyai/xstate/blob/main/migration.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst machine = createMachine({\n  // ...\n  states: {\n    green: {\n      on: {\n        // ✅ will work in v4\n        TIMER: {\n          target: 'yellow',\n          actions: 'doSomething' // notice: array not necessary anymore!\n        }\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Beeping Activity in XState\nDESCRIPTION: This snippet shows how to implement a 'beeping' activity in XState. It defines a toggle machine with an active state that has a beeping activity, and demonstrates how to start and stop the activity.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/activities.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst toggleMachine = createMachine(\n  {\n    id: 'toggle',\n    initial: 'inactive',\n    states: {\n      inactive: {\n        on: {\n          TOGGLE: { target: 'active' }\n        }\n      },\n      active: {\n        // The 'beeping' activity will take place as long as\n        // the machine is in the 'active' state\n        activities: ['beeping'],\n        on: {\n          TOGGLE: { target: 'inactive' }\n        }\n      }\n    }\n  },\n  {\n    activities: {\n      beeping: () => {\n        // Start the beeping activity\n        const interval = setInterval(() => console.log('BEEP!'), 1000);\n\n        // Return a function that stops the beeping activity\n        return () => clearInterval(interval);\n      }\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Using useSelector with XState in Svelte\nDESCRIPTION: Example of how to use the useSelector hook to subscribe to an actor and create a Svelte store representing the selected state.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-svelte/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  // It won't be updated unless the selected value changed.\n  const value = useSelector(service, (state) => state.context.value);\n</script>\n\n<p>{$value}</p>\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic XState Toggle Machine\nDESCRIPTION: Creates a simple state machine that models a toggle between active and inactive states, with a TOGGLE event to transition between them.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/packages/xstate-test/index.md#2025-04-20_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { createMachine } from 'xstate';\n\nconst toggleMachine = createMachine({\n  id: 'toggle',\n  initial: 'inactive',\n  states: {\n    inactive: {\n      on: {\n        TOGGLE: 'active'\n      }\n    },\n    active: {\n      on: {\n        TOGGLE: 'inactive'\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Migration from useService to useActor in React\nDESCRIPTION: Shows the deprecation notice for useService hook and how to migrate to useActor instead. Both hooks provide the same functionality, but useActor is the preferred approach for future compatibility.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-react/CHANGELOG.md#2025-04-20_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n-const [state, send] = useService(service);\n+const [state, send] = useActor(service);\n```\n\n----------------------------------------\n\nTITLE: Subreddit React Component Implementation\nDESCRIPTION: React component that uses the subreddit state machine to display subreddit content and handle loading states.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/tutorials/reddit.md#2025-04-20_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nconst Subreddit = ({ name }) => {\n  const subredditMachine = useMemo(() => {\n    return createSubredditMachine(name);\n  }, [name]);\n\n  const [current, send] = useMachine(subredditMachine);\n\n  if (current.matches('failure')) {\n    return (\n      <div>\n        Failed to load posts.{' '}\n        <button onClick={(_) => send('RETRY')}>Retry?</button>\n      </div>\n    );\n  }\n\n  const { subreddit, posts, lastUpdated } = current.context;\n\n  return (\n    <section\n      data-machine={subredditMachine.id}\n      data-state={current.toStrings().join(' ')}\n    >\n      {current.matches('loading') && <div>Loading posts...</div>}\n      {posts && (\n        <>\n          <header>\n            <h2>{subreddit}</h2>\n            <small>\n              Last updated: {lastUpdated}{' '}\n              <button onClick={(_) => send('REFRESH')}>Refresh</button>\n            </small>\n          </header>\n          <ul>\n            {posts.map((post) => {\n              return <li key={post.id}>{post.title}</li>;\n            })}\n          </ul>\n        </>\n      )}\n    </section>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing self in actor logic creators in XState v5\nDESCRIPTION: Actor logic creators now have access to `self`, allowing for self-referential operations.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_81\n\nLANGUAGE: typescript\nCODE:\n```\nconst promiseLogic = fromPromise(({ self }) => { ... });\n\nconst observableLogic = fromObservable(({ self }) => { ... });\n\nconst callbackLogic = fromCallback((sendBack, receive, { self }) => { ... });\n\nconst transitionLogic = fromTransition((state, event, { self }) => { ... }, ...);\n```\n\n----------------------------------------\n\nTITLE: Automatic Type Inference for Assign Actions in XState (TypeScript)\nDESCRIPTION: Illustrates how TypeScript can automatically infer types for context and events in assign actions within an XState machine.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/context.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CounterContext {\n  count: number;\n}\n\nconst machine = createMachine({\n  schema: {\n    context: {} as CounterContext\n  },\n  // ...\n  context: {\n    count: 0\n  },\n  // ...\n  {\n    on: {\n      INCREMENT: {\n        // Inferred automatically in most cases\n        actions: assign({\n          count: (context) => {\n            // context: { count: number }\n            return context.count + 1;\n          }\n        })\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Event Types in XState Entry Actions with TypeScript\nDESCRIPTION: This example illustrates the issue with event types in inline entry actions in XState and provides a solution using type assertions. It shows how to properly type events in entry actions to avoid TypeScript errors.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/typescript.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMachine } from 'xstate';\n\ninterface Context {}\n\ntype Event =\n  | { type: 'EVENT_WITH_FLAG'; flag: boolean }\n  | {\n      type: 'EVENT_WITHOUT_FLAG';\n    };\n\ncreateMachine({\n  schema: {\n    context: {} as Context,\n    events: {} as Event\n  },\n  initial: 'state1',\n  states: {\n    state1: {\n      on: {\n        EVENT_WITH_FLAG: {\n          target: 'state2'\n        }\n      }\n    },\n    state2: {\n      entry: [\n        (context, event) => {\n          // This will error at .flag\n          console.log(event.flag);\n        }\n      ]\n    }\n  }\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nentry: [\n  (context, event) => {\n    if (event.type !== 'EVENT_WITH_FLAG') return;\n    // No more error at .flag!\n    console.log(event.flag);\n  }\n];\n```\n\n----------------------------------------\n\nTITLE: Defining Toggle State Machine in XState\nDESCRIPTION: Creates a basic toggle state machine with inactive and active states, including state transitions triggered by TOGGLE events.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/recipes/vue.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine } from 'xstate';\n\n// This machine is completely decoupled from Vue\nexport const toggleMachine = createMachine({\n  id: 'toggle',\n  context: {\n    /* some data */\n  },\n  initial: 'inactive',\n  states: {\n    inactive: {\n      on: { TOGGLE: 'active' }\n    },\n    active: {\n      on: { TOGGLE: 'inactive' }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing React UI for XState Reddit Machine\nDESCRIPTION: Shows how to use the XState Reddit machine in a React component using the useMachine hook from @xstate/react.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/tutorials/reddit.md#2025-04-20_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { useMachine } from '@xstate/react';\nimport { redditMachine } from '../path/to/redditMachine';\n\nconst subreddits = ['frontend', 'reactjs', 'vuejs'];\n\nconst App = () => {\n  const [current, send] = useMachine(redditMachine);\n  const { subreddit, posts } = current.context;\n\n  return (\n    <main>\n      <header>\n        <select\n          onChange={(e) => {\n            send('SELECT', { name: e.target.value });\n          }}\n        >\n          {subreddits.map((subreddit) => {\n            return <option key={subreddit}>{subreddit}</option>;\n          })}\n        </select>\n      </header>\n      <section>\n        <h1>{current.matches('idle') ? 'Select a subreddit' : subreddit}</h1>\n        {current.matches({ selected: 'loading' }) && <div>Loading...</div>}\n        {current.matches({ selected: 'loaded' }) && (\n          <ul>\n            {posts.map((post) => (\n              <li key={post.title}>{post.title}</li>\n            ))}\n          </ul>\n        )}\n      </section>\n    </main>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Invoking Observables in XState\nDESCRIPTION: Example of integrating RxJS observables with XState services.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/communication.md#2025-04-20_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport { map } from 'rxjs/operators';\n\n// ...\n{\n  invoke: {\n    src: (context, event) => createSomeObservable(/* ... */).pipe(\n        map(value => ({ type: 'SOME_EVENT', value }))\n      ),\n    onDone: 'finished'\n  }\n},\non: {\n  SOME_EVENT: /* ... */\n}\n// ...\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useMachine with a Toggle Machine in Svelte\nDESCRIPTION: Example showing how to create a simple toggle machine with XState and use it in a Svelte component via useMachine. Demonstrates state access with Svelte's reactive syntax and event sending.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/packages/xstate-svelte/index.md#2025-04-20_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { useMachine } from '@xstate/svelte';\n  import { createMachine } from 'xstate';\n\n  const toggleMachine = createMachine({\n    id: 'toggle',\n    initial: 'inactive',\n    states: {\n      inactive: {\n        on: { TOGGLE: 'active' }\n      },\n      active: {\n        on: { TOGGLE: 'inactive' }\n      }\n    }\n  });\n\n  const { state, send } = useMachine(toggleMachine);\n</script>\n\n<button on:click={() => send('TOGGLE')}>\n  {$state.value === 'inactive'\n    ? 'Click to activate'\n    : 'Active! Click to deactivate'}\n</button>\n```\n\n----------------------------------------\n\nTITLE: Using Shallow Comparison with useSelector in React and XState\nDESCRIPTION: Demonstrates how to use the shallowEqual comparator with useSelector to handle non-primitive values returned by selectors. This is useful when the selector returns objects or arrays that may have the same values but different references.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/packages/xstate-react/index.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useSelector, shallowEqual } from '@xstate/react';\n\n// ...\n\nconst selectUser = (state) => state.context.user;\n\nconst App = ({ service }) => {\n  // shallowEqual comparator is needed to compare the object, whose\n  // reference might change despite the shallow object values being equal\n  const user = useSelector(service, selectUser, shallowEqual);\n\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Using state.hasTag() Method in XState\nDESCRIPTION: This snippet illustrates the use of the state.hasTag() method to determine if the current state configuration has a state node with a given tag. It's useful for checking state characteristics without direct state matching.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/states.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst machine = createMachine({\n  initial: 'green',\n  states: {\n    green: {\n      tags: 'go' // single tag\n    },\n    yellow: {\n      tags: 'go'\n    },\n    red: {\n      tags: ['stop', 'other'] // multiple tags\n    }\n  }\n});\n\nconst canGo = state.hasTag('go');\n// => `true` if in 'green' or 'yellow' state\n```\n\n----------------------------------------\n\nTITLE: Consuming Global State with useActor Hook in React\nDESCRIPTION: Demonstrates how to use the useActor hook to subscribe to and consume state from a global XState service within a React component.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/recipes/react.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useContext } from 'react';\nimport { GlobalStateContext } from './globalState';\nimport { useActor } from '@xstate/react';\n\nexport const SomeComponent = (props) => {\n  const globalServices = useContext(GlobalStateContext);\n  const [state] = useActor(globalServices.authService);\n\n  return state.matches('loggedIn') ? 'Logged In' : 'Logged Out';\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Event Sending Syntax in XState\nDESCRIPTION: Example demonstrating the new required syntax for sending events in XState, using object notation instead of separate type and payload arguments.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_133\n\nLANGUAGE: typescript\nCODE:\n```\n-actor.send('SOME_EVENT')\n+actor.send({ type: 'SOME_EVENT' })\n\n-actor.send('EVENT', { some: 'payload' })\n+actor.send({ type: 'EVENT', some: 'payload' })\n```\n\n----------------------------------------\n\nTITLE: Invoking Promises in XState\nDESCRIPTION: Demonstrates how to invoke promises in XState with handling for both success and error cases.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/communication.md#2025-04-20_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// Function that returns a promise\nconst getDataFromAPI = () => fetch(/* ... */)\n    .then(data => data.json());\n\n\n// ...\n{\n  invoke: (context, event) => getDataFromAPI,\n  // resolved promise\n  onDone: {\n    target: 'success',\n    // resolved promise data is on event.data property\n    actions: (context, event) => console.log(event.data)\n  },\n  // rejected promise\n  onError: {\n    target: 'failure',\n    // rejected promise data is on event.data property\n    actions: (context, event) => console.log(event.data)\n  }\n}\n// ...\n```\n\n----------------------------------------\n\nTITLE: Using useActor with a Counter Behavior in Vue\nDESCRIPTION: Example of using useActor and useSpawn hooks with a reducer-based counter behavior in Vue. The component creates a simple counter with increment and decrement functionality.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-vue/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    Count: {{ count }}\n    <button @click=\"send({ type: 'INC' })\">Increment</button>\n    <button @click=\"send({ type: 'DEC' })\">Decrement</button>\n  </div>\n</template>\n\n<script>\nimport { fromReducer } from 'xstate/lib/behaviors';\nimport { useActor, useSpawn } from '@xstate/vue';\n\ntype CountEvent = { type: 'INC' } | { type: 'DEC' };\n\nconst countBehavior = fromReducer(\n  (count: number, event: CountEvent): number => {\n    if (event.type === 'INC') {\n      return count + 1;\n    } else if (event.type === 'DEC') {\n      return count - 1;\n    }\n\n    return count;\n  },\n  0 // initial state\n);\n\nconst countMachine = createMachine({\n  invoke: {\n    id: 'count',\n    src: () => fromReducer(countReducer, 0)\n  },\n  on: {\n    INC: {\n      actions: forwardTo('count')\n    },\n    DEC: {\n      actions: forwardTo('count')\n    }\n  }\n});\n\nexport default {\n  setup() {\n    const countActorRef = useSpawn(countBehavior);\n    const { state: count, send } = useActor(countActorRef);\n\n    return { count, send };\n  }\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating XState Toggle Machine\nDESCRIPTION: Definition of a basic XState machine with toggle functionality between active and inactive states\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/recipes/svelte.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine } from 'xstate';\n\n// This machine is completely decoupled from Svelte\nexport const toggleMachine = createMachine({\n  id: 'toggle',\n  initial: 'inactive',\n  states: {\n    inactive: {\n      on: { TOGGLE: 'active' }\n    },\n    active: {\n      on: { TOGGLE: 'inactive' }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Basic XState Immer Usage Example\nDESCRIPTION: Demonstrates basic usage of XState with Immer, including creating a machine with context updates using assign and createUpdater.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/packages/xstate-immer/index.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine, interpret } from 'xstate';\nimport { assign, createUpdater } from '@xstate/immer';\n\nconst levelUpdater = createUpdater('UPDATE_LEVEL', (ctx, { input }) => {\n  ctx.level = input;\n});\n\nconst toggleMachine = createMachine({\n  id: 'toggle',\n  context: {\n    count: 0,\n    level: 0\n  },\n  initial: 'inactive',\n  states: {\n    inactive: {\n      on: {\n        TOGGLE: {\n          target: 'active',\n          actions: assign((ctx) => ctx.count++)\n        }\n      }\n    },\n    active: {\n      on: {\n        TOGGLE: {\n          target: 'inactive'\n        },\n        [levelUpdater.type]: {\n          actions: levelUpdater.action\n        }\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Initial Context in XState (JavaScript)\nDESCRIPTION: Illustrates how to create a new machine instance with custom initial context using the withContext method.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/context.md#2025-04-20_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst machine = createMachine({\n  // ...\n  // Provided from arguments; your implementation may vary\n  context: {\n    count: 0,\n    user: undefined\n    // ...\n  }\n});\n\nconst myMachine = machine.withContext({\n  count: 10,\n  user: {\n    name: 'David'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Immer Assign Example with Nested Updates\nDESCRIPTION: Shows how to use assign with Immer to update nested state properties in an XState machine.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/packages/xstate-immer/index.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine } from 'xstate';\nimport { assign } from '@xstate/immer';\n\nconst userMachine = createMachine({\n  id: 'user',\n  context: {\n    name: null,\n    address: {\n      city: null,\n      state: null,\n      country: null\n    }\n  },\n  initial: 'active',\n  states: {\n    active: {\n      on: {\n        CHANGE_COUNTRY: {\n          actions: assign((context, event) => {\n            context.address.country = event.value;\n          })\n        }\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Input in XState Path Generation\nDESCRIPTION: Example showing how to use the 'input' parameter when generating paths through a state machine. This allows testing state machines that depend on initialization input for their behavior.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-graph/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst model = createTestModel(\n  setup({\n    types: {\n      input: {} as {\n        name: string;\n      },\n      context: {} as {\n        name: string;\n      }\n    }\n  }).createMachine({\n    context: (x) => ({\n      name: x.input.name\n    }),\n    initial: 'checking',\n    states: {\n      checking: {\n        always: [\n          { guard: (x) => x.context.name.length > 3, target: 'longName' },\n          { target: 'shortName' }\n        ]\n      },\n      longName: {},\n      shortName: {}\n    }\n  })\n);\n\nconst path1 = model.getShortestPaths({\n  input: { name: 'ed' }\n});\n\nexpect(path1[0].steps.map((s) => s.state.value)).toEqual(['shortName']);\n\nconst path2 = model.getShortestPaths({\n  input: { name: 'edward' }\n});\n\nexpect(path2[0].steps.map((s) => s.state.value)).toEqual(['longName']);\n```\n\n----------------------------------------\n\nTITLE: Specifying guard types for machines in XState v5\nDESCRIPTION: Guard types can now be specified for machines, allowing for type-safe guard definitions.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_76\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMachine({\n  types: {} as {\n    guards:\n      | {\n          type: 'isGreaterThan';\n          params: {\n            count: number;\n          };\n        }\n      | { type: 'plainGuard' };\n  }\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Context to Reddit Machine\nDESCRIPTION: Adds context to store selected subreddit state in the XState machine\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/tutorials/reddit.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst redditMachine = createMachine({\n  id: 'reddit',\n  initial: 'idle',\n  context: {\n    subreddit: null // none selected\n  },\n  states: {\n    /* ... */\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Resolving Assign Action TypeScript Issues in XState\nDESCRIPTION: This snippet demonstrates how to resolve TypeScript errors with assign actions in XState when using strict mode. It shows the issue and provides a workaround by adding an unused context argument to the assigner function.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/typescript.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Context {\n  something: boolean;\n}\n\ncreateMachine({\n  schema: {\n    context: {} as Context\n  },\n  context: {\n    something: true\n  },\n  entry: [\n    // Type 'AssignAction<{ something: false; }, AnyEventObject>' is not assignable to type 'string'.\n    assign(() => {\n      return {\n        something: false\n      };\n    }),\n    // Type 'AssignAction<{ something: false; }, AnyEventObject>' is not assignable to type 'string'.\n    assign({\n      something: false\n    }),\n    // Type 'AssignAction<{ something: false; }, AnyEventObject>' is not assignable to type 'string'.\n    assign({\n      something: () => false\n    })\n  ]\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nentry: [\n  // No more error!\n  assign((context) => {\n    return {\n      something: false,\n    };\n  }),\n  // No more error!\n  assign({\n    something: (context) => false,\n  }),\n  // Unfortunately this technique doesn't work for this syntax\n  // assign({\n  //   something: false\n  // }),\n],\n```\n\n----------------------------------------\n\nTITLE: Implementing XState in a Vue Component\nDESCRIPTION: Demonstrates a complete Vue component that uses the XState toggle machine. It initializes the state machine service during component creation, tracks state and context changes, and provides a method to send events to the service.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/recipes/vue.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- Toggle.vue -->\n<template>\n  <button v-on:click=\"send('TOGGLE');\">\n    {{ current.matches(\"inactive\") ? \"Off\" : \"On\" }}\n  </button>\n</template>\n\n<script>\n  import { interpret } from 'xstate';\n  import { toggleMachine } from '../path/to/toggleMachine';\n\n  export default {\n    name: 'Toggle',\n    created() {\n      // Start service on component creation\n      this.toggleService\n        .onTransition((state) => {\n          // Update the current state component data property with the next state\n          this.current = state;\n          // Update the context component data property with the updated context\n          this.context = state.context;\n        })\n        .start();\n    },\n    data() {\n      return {\n        // Interpret the machine and store it in data\n        toggleService: interpret(toggleMachine),\n\n        // Start with the machine's initial state\n        current: toggleMachine.initialState,\n\n        // Start with the machine's initial context\n        context: toggleMachine.context\n      };\n    },\n    methods: {\n      // Send events to the service\n      send(event) {\n        this.toggleService.send(event);\n      }\n    }\n  };\n</script>\n```\n\n----------------------------------------\n\nTITLE: Custom State Node IDs in XState\nDESCRIPTION: Demonstrates how to assign and use custom IDs for state nodes in XState. Shows how to target state nodes using custom IDs with the # symbol prefix.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/ids.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst lightMachine = createMachine({\n  id: 'light',\n  initial: 'green',\n  states: {\n    green: {\n      // custom identifier\n      id: 'greenLight',\n      on: {\n        // target state node by its ID\n        TIMER: { target: '#yellowLight' }\n      }\n    },\n    yellow: {\n      id: 'yellowLight',\n      on: {\n        TIMER: { target: '#redLight' }\n      }\n    },\n    red: {\n      id: 'redLight',\n      on: {\n        // relative targets will still work\n        TIMER: { target: 'green' }\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Custom IDs for State Nodes in XState\nDESCRIPTION: Shows how to assign custom IDs to state nodes and target them using the # symbol. This approach simplifies the creation of complex statecharts by using unique identifiers instead of relative paths.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/ids.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst lightMachine = createMachine({\n  id: 'light',\n  initial: 'green',\n  states: {\n    green: {\n      // custom identifier\n      id: 'greenLight',\n      on: {\n        // target state node by its ID\n        TIMER: { target: '#yellowLight' }\n      }\n    },\n    yellow: {\n      id: 'yellowLight',\n      on: {\n        TIMER: { target: '#redLight' }\n      }\n    },\n    red: {\n      id: 'redLight',\n      on: {\n        // relative targets will still work\n        TIMER: { target: 'green' }\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using useSelector with a Compare Function\nDESCRIPTION: JavaScript example demonstrating useSelector with a custom comparison function to determine when to update.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/packages/xstate-vue/index.md#2025-04-20_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nimport { useSelector } from '@xstate/vue';\n\nconst props = defineProps(['service']);\n\nconst selectUser = (state) => state.context.user;\nconst compareUser = (prevUser, nextUser) => prevUser.id === nextUser.id;\n\nconst user = useSelector(props.service, selectUser, compareUser);\n```\n\n----------------------------------------\n\nTITLE: State Transitions with History in XState\nDESCRIPTION: Shows state transition examples using the fan machine, demonstrating how history states preserve and restore previous states when transitioning between power states.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/history.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst firstState = fanMachine.transition(fanMachine.initialState, {\n  type: 'POWER'\n});\nconsole.log(firstState.value);\n// transitions to the initial state of 'fanOn' since there is no history\n// => {\n//   fanOn: 'first'\n// }\n\nconst secondState = fanMachine.transition(firstState, { type: 'SWITCH' });\nconsole.log(secondState.value);\n// => {\n//   fanOn: 'second'\n// }\n\nconst thirdState = fanMachine.transition(secondState, { type: 'POWER' });\nconsole.log(thirdState.value);\n// => 'fanOff'\n\nconsole.log(thirdState.history);\n// => State {\n//   value: { fanOn: 'second' },\n//   actions: []\n// }\n\nconst fourthState = fanMachine.transition(thirdState, { type: 'POWER' });\nconsole.log(fourthState.value);\n// transitions to 'fanOn.second' from history\n// => {\n//   fanOn: 'second'\n// }\n```\n\n----------------------------------------\n\nTITLE: Initializing an XState Machine as an Actor in TypeScript\nDESCRIPTION: Shows how to create an XState actor from a machine definition. This is the basic starting point for working with XState in a TypeScript application.\nSOURCE: https://github.com/statelyai/xstate/blob/main/examples/workflow-media-scanner/README.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// index.ts\n\n// ...\n\nconst mediaScannerActor = createActor(mediaScannerMachine);\n```\n\n----------------------------------------\n\nTITLE: Subscribing to XState Service State Changes with useEffect\nDESCRIPTION: Example of subscribing to an XState service's state changes using React's useEffect hook, with proper cleanup by unsubscribing when the component unmounts.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/packages/xstate-react/index.md#2025-04-20_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\n\nuseEffect(() => {\n  const subscription = service.subscribe((state) => {\n    // simple state logging\n    console.log(state);\n  });\n\n  return subscription.unsubscribe;\n}, [service]); // note: service should never change\n```\n\n----------------------------------------\n\nTITLE: Using State.from for Context in Transitions in XState\nDESCRIPTION: Updated syntax for transitioning with a specific context value in XState v5, using State.from instead of the removed third parameter of machine.transition().\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_138\n\nLANGUAGE: javascript\nCODE:\n```\n// Instead of this:\n// machine.transition('green', 'TIMER', { elapsed: 100 })\n\n// Do this:\nmachine.transition(State.from('green', { elapsed: 100 }), 'TIMER')\n```\n\n----------------------------------------\n\nTITLE: TypeScript Implementation with XState Immer\nDESCRIPTION: Demonstrates type-safe implementation of XState Immer with TypeScript, including proper typing for context and events.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/packages/xstate-immer/index.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMachine } from 'xstate';\nimport { createUpdater, ImmerUpdateEvent } from '@xstate/immer';\n\ninterface FormContext {\n  name: string;\n  age: number | undefined;\n}\n\ntype NameUpdateEvent = ImmerUpdateEvent<'UPDATE_NAME', string>;\ntype AgeUpdateEvent = ImmerUpdateEvent<'UPDATE_AGE', number>;\n\nconst nameUpdater = createUpdater<FormContext, NameUpdateEvent>(\n  'UPDATE_NAME',\n  (ctx, { input }) => {\n    ctx.name = input;\n  }\n);\n\nconst ageUpdater = createUpdater<FormContext, AgeUpdateEvent>(\n  'UPDATE_AGE',\n  (ctx, { input }) => {\n    ctx.age = input;\n  }\n);\n\ntype FormEvent =\n  | NameUpdateEvent\n  | AgeUpdateEvent\n  | {\n      type: 'SUBMIT';\n    };\n\nconst formMachine = createMachine<FormContext, FormEvent>({\n  initial: 'editing',\n  context: {\n    name: '',\n    age: undefined\n  },\n  states: {\n    editing: {\n      on: {\n        [nameUpdater.type]: { actions: nameUpdater.action },\n        [ageUpdater.type]: { actions: ageUpdater.action },\n        SUBMIT: 'submitting'\n      }\n    },\n    submitting: {\n      // ...\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Moving Machine Implementations to provide() in React Hooks\nDESCRIPTION: Example showing how implementations for machines should now go directly on the machine via machine.provide(...) instead of being passed as options to useMachine or useInterpret hooks.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-react/CHANGELOG.md#2025-04-20_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n-const [state, send] = useMachine(machine, {\n-  actions: {\n-    // ...\n-  }\n-});\n+const [state, send] = useMachine(machine.provide({\n+  actions: {\n+    // ...\n+  }\n+}));\n```\n\n----------------------------------------\n\nTITLE: Initializing XState Machine for Reddit API Client\nDESCRIPTION: Creates the initial structure of the XState machine for the Reddit API client, defining the top-level states and context.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/tutorials/reddit.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine, assign } from 'xstate';\n\nconst redditMachine = createMachine({\n  id: 'reddit',\n  initial: 'idle',\n  context: {\n    subreddit: null // none selected\n  },\n  states: {\n    idle: {},\n    selected: {}\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic Initial Context in XState (JavaScript)\nDESCRIPTION: Shows how to create a function that generates an XState machine with dynamic initial context based on provided arguments.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/context.md#2025-04-20_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst createSomeMachine = (count, user) => {\n  return createMachine({\n    // ...\n    // Provided from arguments; your implementation may vary\n    context: {\n      count,\n      user\n      // ...\n    }\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Using Always Property for Transient Transitions in XState\nDESCRIPTION: Example demonstrating the new 'always' property for creating eventless (transient) transitions, which replaces the deprecated empty string syntax. This transition is always taken when the machine is in that state.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_176\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\nstates: {\n  playing: {\n    always: [\n      { target: 'win', cond: 'didPlayerWin' },\n      { target: 'lose', cond: 'didPlayerLose' },\n    ],\n    on: {\n      // ⚠️ Deprecation warning\n      '': [\n        { target: 'win', cond: 'didPlayerWin' },\n        { target: 'lose', cond: 'didPlayerLose' },\n      ]\n    }\n  }\n}\n// ...\n```\n\n----------------------------------------\n\nTITLE: Propagating Clock and Logger to Child Actors in XState\nDESCRIPTION: Demonstrates how clock and logger specified in the options object of createActor() propagate to all actors created within the same actor system in XState 5.10.0.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { setup, log, createActor } from 'xstate';\n\nconst childMachine = setup({\n  // ...\n}).createMachine({\n  // ...\n  // Uses custom logger from root actor\n  entry: log('something')\n});\n\nconst parentMachine = setup({\n  // ...\n}).createMachine({\n  // ...\n  invoke: {\n    src: childMachine\n  }\n});\n\nconst actor = createActor(parentMachine, {\n  logger: (...args) => {\n    // custom logger for args\n  }\n});\n\nactor.start();\n```\n\n----------------------------------------\n\nTITLE: Accessing Spawned Services in XState\nDESCRIPTION: This snippet shows how to access spawned services or actors using the state.children property. It demonstrates how to reference services invoked by the machine.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/states.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst machine = createMachine({\n  // ...\n  invoke: [\n    { id: 'notifier', src: createNotifier },\n    { id: 'logger', src: createLogger }\n  ]\n  // ...\n});\n\nconst service = invoke(machine)\n  .onTransition((state) => {\n    state.children.notifier; // service from createNotifier()\n    state.children.logger; // service from createLogger()\n  })\n  .start();\n```\n\n----------------------------------------\n\nTITLE: Dynamic resolution of action and guard params in XState v5\nDESCRIPTION: Parameters for actions and guards can now be resolved dynamically based on the current context.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_74\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMachine({\n  types: {} as {\n    actions:\n      | { type: 'greet'; params: { surname: string } }\n      | { type: 'poke' };\n  },\n  entry: {\n    type: 'greet',\n    params: ({ context }) => ({\n      surname: 'Doe'\n    })\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Assigning to Context in XState (JavaScript)\nDESCRIPTION: Demonstrates how to use the assign action to update the context in response to an event in an XState machine.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/context.md#2025-04-20_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst machine = createMachine({\n  // ...\n  context: {\n    count: 0,\n    user: undefined\n    // ...\n  },\n  // ...\n  on: {\n    INCREMENT: {\n      actions: assign({\n        count: (context, event) => context.count + 1\n      })\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Flight Context Interface Definition in TypeScript\nDESCRIPTION: TypeScript interface defining the context structure for the flight booking state machine, including start date, return date, and trip type.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/tutorials/7guis/flight.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface FlightContext {\n  startDate?: string;\n  returnDate?: string;\n  trip: 'oneWay' | 'roundTrip';\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing in property with stateIn guard\nDESCRIPTION: Shows how to migrate from using the in property to the new stateIn guard pattern from xstate/guards\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_144\n\nLANGUAGE: diff\nCODE:\n```\nimport {\n  createMachine,\n+ stateIn\n} from 'xstate/guards';\n\nconst machine = createMachine({\n  // ...\n  on: {\n    SOME_EVENT: {\n      target: 'anotherState',\n-     in: '#someState',\n+     cond: stateIn('#someState')\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Updated Guard Function Signature in XState v5\nDESCRIPTION: Guards now receive a single consolidated object argument instead of separate context and event parameters, which is a breaking change for all guards.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_56\n\nLANGUAGE: diff\nCODE:\n```\n- guard: (context, event) => {\n+ guard: ({ context, event }) => {\n  return context.count + event.value > 10;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Reddit XState Machine\nDESCRIPTION: Initializes a basic XState machine for Reddit app with idle and selected states\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/tutorials/reddit.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine, assign } from 'xstate';\n\nconst redditMachine = createMachine({\n  id: 'reddit',\n  initial: 'idle',\n  states: {\n    idle: {},\n    selected: {}\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Global State Context Provider with XState in SolidJS\nDESCRIPTION: Implementation of a global state context provider using XState and SolidJS context API for application-wide state management.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/recipes/solid.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createContext } from 'solid-js';\nimport { useMachine } from '@xstate/solid';\nimport { authMachine } from './auth.machine';\n\nexport const GlobalStateContext = createContext({});\n\nexport const GlobalStateProvider = (props) => {\n  const authService = useMachine(authMachine);\n\n  return (\n    <GlobalStateContext.Provider value={{ authService }}>\n      {props.children}\n    </GlobalStateContext.Provider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Entry Actions Example in XState\nDESCRIPTION: Example showing how to implement entry actions in a state machine, specifically for data fetching when entering a loading state.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/actions.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\n{\n  idle: {\n    on: {\n      LOAD: 'loading'\n    }\n  },\n  loading: {\n    // this action is executed whenever the 'loading' state is entered\n    entry: 'fetchData'\n  }\n}\n// ...\n```\n\n----------------------------------------\n\nTITLE: Using createEmptyActor for Testing or Fallback Scenarios\nDESCRIPTION: Demonstrates how to use the createEmptyActor() function to create an actor that does nothing, useful for testing or providing fallbacks when an actor might be undefined.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_123\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createEmptyActor } from 'xstate';\n\nconst SomeComponent = (props) => {\n  // props.actor may be undefined\n  const [state, send] = useActor(props.actor ?? createEmptyActor());\n\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Context Derived Machine Invocation\nDESCRIPTION: Shows how to invoke a child machine with context derived from the parent machine's context using the data property.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/communication.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst timerMachine = createMachine({\n  id: 'timer',\n  context: {\n    duration: 1000 // default duration\n  }\n  /* ... */\n});\n\nconst parentMachine = createMachine({\n  id: 'parent',\n  initial: 'active',\n  context: {\n    customDuration: 3000\n  },\n  states: {\n    active: {\n      invoke: {\n        id: 'timer',\n        src: timerMachine,\n        // Deriving child context from parent context\n        data: {\n          duration: (context, event) => context.customDuration\n        }\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Merging Meta Data in XState\nDESCRIPTION: Utility function to merge meta data from multiple state nodes into a single object, discarding the state node ID keys. Useful for simplified access to meta data values.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/states.md#2025-04-20_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction mergeMeta(meta) {\n  return Object.keys(meta).reduce((acc, key) => {\n    const value = meta[key];\n\n    // Assuming each meta value is an object\n    Object.assign(acc, value);\n\n    return acc;\n  }, {});\n}\n\nconst failureTimeoutState = fetchMachine.transition('loading', {\n  type: 'TIMEOUT'\n});\n\nconsole.log(mergeMeta(failureTimeoutState.meta));\n// => {\n//   alert: 'Uh oh.',\n//   message: 'The request timed out.'\n// }\n```\n\n----------------------------------------\n\nTITLE: Sending Events to an XState Actor\nDESCRIPTION: Shows how to trigger state transitions by sending events to a running XState actor. In this example, the START_SCAN event initiates the media scanning process.\nSOURCE: https://github.com/statelyai/xstate/blob/main/examples/workflow-media-scanner/README.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// index.ts\n\n// ...\n\nmediaScannerActor.send({ type: 'START_SCAN' });\n```\n\n----------------------------------------\n\nTITLE: Forward To Action Implementation\nDESCRIPTION: Shows how to use forwardTo action creator to forward events to a specific service by ID.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/actions.md#2025-04-20_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine, forwardTo, interpret } from 'xstate';\n\nfunction alertService(_, receive) {\n  receive((event) => {\n    if (event.type === 'ALERT') {\n      alert(event.message);\n    }\n  });\n}\n\nconst parentMachine = createMachine({\n  id: 'parent',\n  invoke: {\n    id: 'alerter',\n    src: () => alertService\n  },\n  on: {\n    ALERT: { actions: forwardTo('alerter') }\n  }\n});\n\nconst parentService = interpret(parentMachine).start();\n\nparentService.send({ type: 'ALERT', message: 'hello world' });\n```\n\n----------------------------------------\n\nTITLE: Defining a Complex State Machine in XState (JavaScript)\nDESCRIPTION: Example of a more complex state machine definition with nested states, including 'idle', 'pending', 'success', and 'failure' states with various transitions.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/statenodes.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst fetchMachine = createMachine({\n  id: 'fetch',\n\n  // Initial state\n  initial: 'idle',\n\n  // States\n  states: {\n    idle: {\n      on: {\n        FETCH: { target: 'pending' }\n      }\n    },\n    pending: {\n      on: {\n        FULFILL: { target: 'success' },\n        REJECT: { target: 'failure' }\n      }\n    },\n    success: {\n      // Initial child state\n      initial: 'items',\n\n      // Child states\n      states: {\n        items: {\n          on: {\n            'ITEM.CLICK': { target: 'item' }\n          }\n        },\n        item: {\n          on: {\n            BACK: { target: 'items' }\n          }\n        }\n      }\n    },\n    failure: {\n      on: {\n        RETRY: { target: 'pending' }\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Reddit UI with React and XState\nDESCRIPTION: Shows how to implement a React component using the Reddit state machine with @xstate/react. This example demonstrates how to render different UI states based on the current machine state and dispatch events to the machine.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/tutorials/reddit.md#2025-04-20_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { useMachine } from '@xstate/react';\nimport { redditMachine } from '../path/to/redditMachine';\n\nconst subreddits = ['frontend', 'reactjs', 'vuejs'];\n\nconst App = () => {\n  const [current, send] = useMachine(redditMachine);\n  const { subreddit, posts } = current.context;\n\n  return (\n    <main>\n      <header>\n        <select\n          onChange={(e) => {\n            send({ type: 'SELECT', name: e.target.value });\n          }}\n        >\n          {subreddits.map((subreddit) => {\n            return <option key={subreddit}>{subreddit}</option>;\n          })}\n        </select>\n      </header>\n      <section>\n        <h1>{current.matches('idle') ? 'Select a subreddit' : subreddit}</h1>\n        {current.matches({ selected: 'loading' }) && <div>Loading...</div>}\n        {current.matches({ selected: 'loaded' }) && (\n          <ul>\n            {posts.map((post) => (\n              <li key={post.title}>{post.title}</li>\n            ))}\n          </ul>\n        )}\n      </section>\n    </main>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using assign() with Immer\nDESCRIPTION: Example of using the assign function to update nested state in a user machine. Shows how to modify a deeply nested property (country in address) in an immutable way using Immer's mutable syntax.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/packages/xstate-immer/index.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine } from 'xstate';\nimport { assign } from '@xstate/immer';\n\nconst userMachine = createMachine({\n  id: 'user',\n  context: {\n    name: null,\n    address: {\n      city: null,\n      state: null,\n      country: null\n    }\n  },\n  initial: 'active',\n  states: {\n    active: {\n      on: {\n        CHANGE_COUNTRY: {\n          actions: assign((context, event) => {\n            context.address.country = event.value;\n          })\n        }\n      }\n    }\n  }\n});\n\nconst { initialState } = userMachine;\n\nconst nextState = userMachine.transition(initialState, {\n  type: 'UPDATE_COUNTRY',\n  country: 'USA'\n});\n\nnextState.context.address.country;\n// => 'USA'\n```\n\n----------------------------------------\n\nTITLE: Configurable Fetch Machine Example\nDESCRIPTION: Implementation of a configurable fetch machine with success and failure states\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/packages/xstate-svelte/index.md#2025-04-20_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { useMachine } from '@xstate/svelte';\n  import { createMachine, assign } from 'xstate';\n\n  const fetchMachine = createMachine({\n    id: 'fetch',\n    initial: 'idle',\n    context: {\n      data: undefined,\n      error: undefined\n    },\n    states: {\n      idle: {\n        on: { FETCH: 'loading' }\n      },\n      loading: {\n        invoke: {\n          src: 'fetchData',\n          onDone: {\n            target: 'success',\n            actions: assign({\n              data: (_, event) => event.data\n            })\n          },\n          onError: {\n            target: 'failure',\n            actions: assign({\n              error: (_, event) => event.data\n            })\n          }\n        }\n      },\n      success: {\n        entry: 'notifySuccess',\n        type: 'final'\n      },\n      failure: {\n        on: {\n          RETRY: 'loading'\n        }\n      }\n    }\n  });\n\n  const onResolve = (data) => {\n    // Do something with data\n  };\n\n  const { state, send } = useMachine(fetchMachine, {\n    actions: {\n      notifySuccess: (context) => onResolve(context.data)\n    },\n    services: {\n      fetchData: (_, event) =>\n        fetch(`some/api/${event.query}`).then((res) => res.json())\n    }\n  });\n</script>\n\n{#if $state.value === 'idle'}\n  <button on:click={() => send({ type: 'FETCH', query: 'something' })}>\n    Search for something\n  </button>\n{:else if $state.value === 'loading'}\n  <div>Searching...</div>\n{:else if $state.value === 'success'}\n  <div>Success! Data: {$state.context.data}</div>\n{:else if $state.value === 'failure'}\n  <p>{$state.context.error.message}</p>\n  <button on:click={() => send('RETRY')}>Retry</button>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Creating Test Model with Events\nDESCRIPTION: Creating a test model from the state machine and defining test events with Puppeteer actions\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/packages/xstate-test/index.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine } from 'xstate';\nimport { createModel } from '@xstate/test';\n\nconst toggleMachine = createMachine(/* ... */);\n\nconst toggleModel = createModel(toggleMachine).withEvents({\n  TOGGLE: {\n    exec: async (page) => {\n      await page.click('input');\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Null Event Transitions in XState\nDESCRIPTION: Demonstrates the use of null events for immediate transitions when entering a state.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/events.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst skipMachine = createMachine({\n  id: 'skip',\n  initial: 'one',\n  states: {\n    one: {\n      on: { CLICK: 'two' }\n    },\n    two: {\n      // null event '' always occurs once state is entered\n      // immediately take the transition to 'three'\n      on: { '': 'three' }\n    },\n    three: {\n      type: 'final'\n    }\n  }\n});\n\nconst { initialState } = skipMachine;\nconst nextState = skipMachine.transition(initialState, { type: 'CLICK' });\n\nconsole.log(nextState.value);\n// => 'three'\n```\n\n----------------------------------------\n\nTITLE: Using toDirectedGraph Function with XState Machine\nDESCRIPTION: Example of using the toDirectedGraph function to convert an XState machine into a directed graph structure. It demonstrates how to obtain a representation of the machine as a graph with nodes and edges.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/packages/xstate-graph/index.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { toDirectedGraph } from '@xstate/graph';\n\nconst machine = createMachine({/* ... */});\n\nconst digraph = toDirectedGraph(machine);\n\n// returns an object with this structure:\n{\n  id: '...',\n  stateNode: /* StateNode */,\n  children: [\n    { id: '...', children: [/* ... */], edges: [/* ... */] },\n    { id: '...', /* ... */ },\n    // ...\n  ],\n  edges: [\n    { source: /* ... */, target: /* ... */, transition: /* ... */ }\n    // ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using schema Property for TypeScript Type Definitions in XState\nDESCRIPTION: Example showing the preferred way of declaring TypeScript generics using the config.schema property to define context and events types.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_158\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMachine({\n    schema: {\n        context: {} as { count: number },\n        events: {} as { type: 'INC' } | { type: 'DEC' }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Enforcing Context Types in TypeScript Machine Config\nDESCRIPTION: In XState v5, if context types are specified in the machine config, the 'context' property is now required. This ensures proper type checking for the machine's context.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n// ❌ TS error\ncreateMachine({\n  types: {} as {\n    context: { count: number };\n  }\n  // Missing context property\n});\n\n// ✅ OK\ncreateMachine({\n  types: {} as {\n    context: { count: number };\n  },\n  context: {\n    count: 0\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using onSnapshot Transitions with Different Actor Types in XState\nDESCRIPTION: Demonstrates how to use the onSnapshot transition object to react to snapshot updates from different types of invoked actors including machines, observables, and transition functions.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_98\n\nLANGUAGE: typescript\nCODE:\n```\nconst machine = createMachine({\n  // ...\n  invoke: [\n    {\n      src: createMachine({ ... }),\n      onSnapshot: {\n        actions: (context, event) => {\n          event.snapshot; // machine state\n        }\n      }\n    },\n    {\n      src: fromObservable(() => ...),\n      onSnapshot: {\n        actions: (context, event) => {\n          event.snapshot; // observable value\n        }\n      }\n    },\n    {\n      src: fromTransition((state, event) => { ... }, /* ... */),\n      onSnapshot: {\n        actions: (context, event) => {\n          event.snapshot; // transition function return value\n        }\n      }\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Using createEmptyActor for Testing in XState v5\nDESCRIPTION: The createEmptyActor function creates actors that do nothing, useful for testing or for components that require an actor reference which might be undefined.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_49\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createEmptyActor } from 'xstate';\n\nconst SomeComponent = (props) => {\n  // props.actor may be undefined\n  const [state, send] = useActor(props.actor ?? createEmptyActor());\n\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Using useSelector with XState in Svelte\nDESCRIPTION: Example demonstrating the useSelector hook which provides a reactive store that only updates when a selected value from the state changes. Shows performance benefits compared to watching the entire state.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/packages/xstate-svelte/index.md#2025-04-20_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { interpret } from 'xstate';\n  import { createModel } from 'xstate/lib/model';\n  import { useSelector } from '../src';\n\n  const model = createModel(\n    {\n      count: 0,\n      anotherCount: 0\n    },\n    {\n      events: {\n        INCREMENT: () => ({}),\n        INCREMENT_ANOTHER: () => ({})\n      }\n    }\n  );\n\n  const machine = model.createMachine({\n    initial: 'idle',\n    context: model.initialContext,\n    states: {\n      idle: {\n        on: {\n          INCREMENT: {\n            actions: model.assign({ count: ({ count }) => count + 1 })\n          },\n          INCREMENT_ANOTHER: {\n            actions: model.assign({\n              anotherCount: ({ anotherCount }) => anotherCount + 1\n            })\n          }\n        }\n      }\n    }\n  });\n\n  const service = interpret(machine).start();\n\n  const count = useSelector(service, (state) => state.context.count);\n\n  let withSelector = 0;\n  $: $count && withSelector++;\n  let withoutSelector = 0;\n  $: $service.context.count && withoutSelector++;\n</script>\n\n<button data-testid=\"count\" on:click={() => service.send({type:'INCREMENT'})}\n  >Increment count</button\n>\n<button data-testid=\"another\" on:click={() => service.send({type:'INCREMENT_ANOTHER'})}\n  >Increment another count</button\n>\n\n<div data-testid=\"withSelector\">{withSelector}</div>\n<div data-testid=\"withoutSelector\">{withoutSelector}</div>\n```\n\n----------------------------------------\n\nTITLE: Defining State Node Types in XState (JavaScript)\nDESCRIPTION: This code demonstrates how to explicitly define different types of state nodes in an XState machine, including atomic, compound, parallel, and final states.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/statenodes.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst machine = createMachine({\n  id: 'fetch',\n  initial: 'idle',\n  states: {\n    idle: {\n      type: 'atomic',\n      on: {\n        FETCH: { target: 'pending' }\n      }\n    },\n    pending: {\n      type: 'parallel',\n      states: {\n        resource1: {\n          type: 'compound',\n          initial: 'pending',\n          states: {\n            pending: {\n              on: {\n                'FULFILL.resource1': { target: 'success' }\n              }\n            },\n            success: {\n              type: 'final'\n            }\n          }\n        },\n        resource2: {\n          type: 'compound',\n          initial: 'pending',\n          states: {\n            pending: {\n              on: {\n                'FULFILL.resource2': { target: 'success' }\n              }\n            },\n            success: {\n              type: 'final'\n            }\n          }\n        }\n      },\n      onDone: 'success'\n    },\n    success: {\n      type: 'compound',\n      initial: 'items',\n      states: {\n        items: {\n          on: {\n            'ITEM.CLICK': { target: 'item' }\n          }\n        },\n        item: {\n          on: {\n            BACK: { target: 'items' }\n          }\n        },\n        hist: {\n          type: 'history',\n          history: 'shallow'\n        }\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using enqueueActions in XState v5\nDESCRIPTION: The new `enqueueActions(...)` action creator can be used to enqueue actions for execution, providing an alternative to `pure(...)` and `choose(...)` action creators.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_84\n\nLANGUAGE: typescript\nCODE:\n```\nconst machine = createMachine({\n  // ...\n  entry: enqueueActions(({ context, event, enqueue, check }) => {\n    // assign action\n    enqueue.assign({\n      count: context.count + 1\n    });\n\n    // Conditional actions (replaces choose(...))\n    if (event.someOption) {\n      enqueue.sendTo('someActor', { type: 'blah', thing: context.thing });\n\n      // other actions\n      enqueue('namedAction');\n      // with params\n      enqueue({ type: 'greet', params: { message: 'hello' } });\n    } else {\n      // inline\n      enqueue(() => console.log('hello'));\n\n      // even built-in actions\n    }\n\n    // Use check(...) to conditionally enqueue actions based on a guard\n    if (check({ type: 'someGuard' })) {\n      // ...\n    }\n\n    // no return\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing SELECT Event Handler in Reddit Machine\nDESCRIPTION: Adds a top-level transition handler for the SELECT event that assigns the selected subreddit to context and transitions to the selected state.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/tutorials/reddit.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst redditMachine = createMachine({\n  id: 'reddit',\n  initial: 'idle',\n  context: {\n    subreddit: null // none selected\n  },\n  states: {\n    /* ... */\n  },\n  on: {\n    SELECT: {\n      target: '.selected',\n      actions: assign({\n        subreddit: (context, event) => event.name\n      })\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring XState Inspector in Next.js\nDESCRIPTION: Demonstrates how to properly set up the XState inspector in a Next.js application by ensuring it only runs on the client-side.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/packages/xstate-inspect/index.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nif (typeof window !== 'undefined') {\n  inspect({\n    /* options */\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Activities with Invoked Actors in XState\nDESCRIPTION: This snippet demonstrates how to replace deprecated activities with invoked actors in XState. It shows the difference between the old activities syntax and the new invoke syntax.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/activities.md#2025-04-20_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n-activities: [(context, event) => {\n-  // do something\n-\n-  return () => {/* cleanup */}\n-}],\n+invoke: {\n+  src: (context, event) => (sendBack, receive) => {\n+    // do something\n+\n+    return () => {/* cleanup */}\n+  }\n+}\n```\n\n----------------------------------------\n\nTITLE: Accessing and Subscribing to XState Service in React Hooks\nDESCRIPTION: Demonstrates how to access the service object from useMachine and subscribe to state changes using React's useEffect hook, including proper cleanup.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/packages/xstate-react/index.md#2025-04-20_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n//                  vvvvvvv\nconst [state, send, service] = useMachine(someMachine);\n```\n\n----------------------------------------\n\nTITLE: Accessing Combined Meta Data in XState\nDESCRIPTION: Shows how to access the combined meta data from multiple state nodes during a state transition. Demonstrates accessing meta data when transitioning to a nested state.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/states.md#2025-04-20_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst failureTimeoutState = fetchMachine.transition('loading', {\n  type: 'TIMEOUT'\n});\n\nconsole.log(failureTimeoutState.meta);\n// => {\n//   failure: {\n//     alert: 'Uh oh.'\n//   },\n//   'failure.timeout': {\n//     message: 'The request timed out.'\n//   }\n// }\n```\n\n----------------------------------------\n\nTITLE: Subscribing to XState Actor State Changes\nDESCRIPTION: Demonstrates how to set up a subscription to monitor state changes, errors, and context updates in a running XState actor. This is useful for displaying progress and handling errors.\nSOURCE: https://github.com/statelyai/xstate/blob/main/examples/workflow-media-scanner/README.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// index.ts\n\n// ...\n\nmediaScannerActor.subscribe((state) => {\n  console.log({\n    state: state.value,\n    error: state.error,\n    context: state.context\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing nextEvents in XState\nDESCRIPTION: This snippet shows how to access the nextEvents property of a state, which provides an array of possible events that can trigger a transition from the current state.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/states.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { initialState } = lightMachine;\n\nconsole.log(initialState.nextEvents);\n// => ['TIMER', 'EMERGENCY']\n```\n\n----------------------------------------\n\nTITLE: Enabling DevTools for XState Machines\nDESCRIPTION: JavaScript code showing how to enable the visualization of state machines by adding the devTools option when interpreting a machine.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-inspect/README.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { interpret } from 'xstate';\nimport { inspect } from '@xstate/inspect';\n// ...\n\nconst service = interpret(someMachine, { devTools: true });\nservice.start();\n```\n\n----------------------------------------\n\nTITLE: Accessing Context in XState Transition\nDESCRIPTION: This snippet shows how to access the current context after a state transition in XState. It demonstrates transitioning the glassMachine and retrieving the updated context.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/context.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst nextState = glassMachine.transition(glassMachine.initialState, {\n  type: 'FILL'\n});\n\nnextState.context;\n// => { amount: 1 }\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Service Invocation in XState\nDESCRIPTION: Demonstrates how to configure a service invocation in an XState machine using the services property with a named source.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/communication.md#2025-04-20_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst userMachine = createMachine(\n  {\n    id: 'user',\n    // ...\n    states: {\n      // ...\n      loading: {\n        invoke: {\n          src: 'getUser',\n          // ...\n        }\n      },\n      // ...\n    }\n  },\n  {\n  services: {\n    getUser: (context, event) => fetchUser(context.user.id)\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Sending Batched Events to XState Service in JavaScript\nDESCRIPTION: Demonstrates how to send multiple events as a batch to an XState service, which processes them sequentially and accumulates actions from intermediate states.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/interpretation.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nservice.send([\n  // String events\n  'CLICK',\n  'CLICK',\n  'ANOTHER_EVENT',\n  // Event objects\n  { type: 'CLICK', x: 40, y: 21 },\n  { type: 'KEYDOWN', key: 'Escape' }\n]);\n```\n\n----------------------------------------\n\nTITLE: State Value Type Improvements - TypeScript\nDESCRIPTION: Improved state value typings for setup state machine actors in version 5.18.0, providing better type inference for state values.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst machine = setup({}).createMachine({\n  initial: 'green',\n  states: {\n    green: {},\n    yellow: {},\n    red: {\n      initial: 'walk',\n      states: {\n        walk: {},\n        wait: {},\n        stop: {}\n      }\n    },\n    emergency: {\n      type: 'parallel',\n      states: {\n        main: {\n          initial: 'blinking',\n          states: {\n            blinking: {}\n          }\n        },\n        cross: {\n          initial: 'blinking',\n          states: {\n            blinking: {}\n          }\n        }\n      }\n    }\n  }\n});\n\nconst actor = createActor(machine).start();\n\nconst stateValue = actor.getSnapshot().value;\n\nif (stateValue === 'green') {\n  // ...\n} else if (stateValue === 'yellow') {\n  // ...\n} else if ('red' in stateValue) {\n  stateValue;\n  // {\n  //   red: \"walk\" | \"wait\" | \"stop\";\n  // }\n} else {\n  stateValue;\n  // {\n  //   emergency: {\n  //     main: \"blinking\";\n  //     cross: \"blinking\";\n  //   };\n  // }\n}\n```\n\n----------------------------------------\n\nTITLE: Property Assignment in XState (JavaScript)\nDESCRIPTION: Demonstrates how to update a specific property in the context based on the current context and event in an XState machine.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/context.md#2025-04-20_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\nactions: assign({\n  counter: (context, event) => {\n    return context.count + event.value;\n  }\n}),\n// ...\n```\n\n----------------------------------------\n\nTITLE: Using XState with Svelte Stores\nDESCRIPTION: Demonstrates how to leverage XState's service as a Svelte store using the $ syntax for reactive state access.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/recipes/svelte.md#2025-04-20_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script>\n    import {interpret} from 'xstate';\n    import {toggleMachine} from './machine';\n\n    const toggleService = interpret(toggleMachine).start();\n</script>\n\n<button on:click={() => toggleService.send({type:'TOGGLE'})}>\n    {$toggleService.matches('inactive') ? 'Off' : 'On'}\n</button>\n```\n\n----------------------------------------\n\nTITLE: Using tsTypes for Automated Type Generation with VS Code Extension\nDESCRIPTION: Example showing how to enable automated type generation using the tsTypes property, which works with the Stately VS Code extension to provide type assertions.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_159\n\nLANGUAGE: typescript\nCODE:\n```\nconst machine = createMachine({\n  tsTypes: {}\n});\n```\n\n----------------------------------------\n\nTITLE: Updated fromStore API with Single Config Object in TypeScript\nDESCRIPTION: Breaking change that updates the fromStore function to support only a single configuration object argument, allowing for typed input initialization of context.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-store/CHANGELOG.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst storeLogic = fromStore({\n  context: (input: { initialCount: number }) => ({\n    count: input.initialCount\n  }),\n  on: {\n    inc: (ctx, ev: { by: number }) => ({\n      ...ctx,\n      count: ctx.count + ev.by\n    })\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Transitioning States in XState (JavaScript)\nDESCRIPTION: Demonstrates how to transition between states using the machine.transition() method. This example shows a transition from 'pending' to 'success' state.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/statenodes.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst nextState = fetchMachine.transition('pending', { type: 'FULFILL' });\n// State {\n//   value: { success: 'items' },\n//   actions: [],\n//   context: undefined,\n//   ...\n// }\n```\n\n----------------------------------------\n\nTITLE: Configuring Action Order in XState Machine\nDESCRIPTION: Demonstrates how to preserve action order in XState v4 using preserveActionOrder flag. Shows the execution of assign actions and custom actions in sequence.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/context.md#2025-04-20_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst counterMachine = createMachine({\n  preserveActionOrder: true, // Ensures that assign actions are called in order\n  // ...\n  context: { count: 0 },\n  states: {\n    active: {\n      on: {\n        INC_TWICE: {\n          actions: [\n            (context) => console.log(`Before: ${context.count}`), // \"Before: 0\"\n            assign({ count: (context) => context.count + 1 }), // count === 1\n            assign({ count: (context) => context.count + 1 }), // count === 2\n            (context) => console.log(`After: ${context.count}`) // \"After: 2\"\n          ]\n        }\n      }\n    }\n  }\n});\n\ninterpret(counterMachine).start().send({ type: 'INC_TWICE' });\n// => \"Before: 0\"\n// => \"After: 2\"\n```\n\n----------------------------------------\n\nTITLE: Combining useInterpret with useSelector in Vue\nDESCRIPTION: JavaScript example showing how to use useInterpret and useSelector together to create and observe a state machine.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/packages/xstate-vue/index.md#2025-04-20_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nimport { useInterpret, useSelector } from '@xstate/vue';\nimport { someMachine } from '../path/to/someMachine';\n\nconst selectCount = (state) => state.context.count;\n\nconst service = useInterpret(someMachine);\nconst count = useSelector(service, selectCount);\n```\n\n----------------------------------------\n\nTITLE: Using getPathFromEvents Function with XState Machine\nDESCRIPTION: Demonstrates how to use the getPathFromEvents function to generate a path from a sequence of events in an XState machine.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/packages/xstate-graph/index.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine } from 'xstate';\nimport { getSimplePaths } from '@xstate/graph';\n\nconst feedbackMachine = createMachine({\n  id: 'feedback',\n  initial: 'question',\n  states: {\n    question: {\n      on: {\n        CLICK_GOOD: 'thanks',\n        CLICK_BAD: 'form',\n        CLOSE: 'closed',\n        ESC: 'closed'\n      }\n    },\n    form: {\n      on: {\n        SUBMIT: 'thanks',\n        CLOSE: 'closed',\n        ESC: 'closed'\n      }\n    },\n    thanks: {\n      on: {\n        CLOSE: 'closed',\n        ESC: 'closed'\n      }\n    },\n    closed: {\n      type: 'final'\n    }\n  }\n});\n\nconst path = getPathFromEvents(feedbackMachine, [\n  { type: 'CLICK_GOOD' },\n  { type: 'SUBMIT' },\n  { type: 'CLOSE' }\n]);\n\nconsole.log(path);\n// => {\n//   state: { value: 'closed' },\n//   segments: [\n//     {\n//       state: { value: 'question' },\n//       event: { type: 'CLICK_GOOD' },\n//     },\n//     {\n//       state: { value: 'form' },\n//       event: { type: 'SUBMIT' },\n//     },\n//     {\n//       state: { value: 'thanks' },\n//       event: { type: 'CLOSE' },\n//     },\n//   ],\n// }\n```\n\n----------------------------------------\n\nTITLE: Traffic Light Machine Implementation - XState\nDESCRIPTION: Complex example showing multiple activities in a traffic light state machine with nested states.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/activities.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst lightMachine = createMachine({\n  key: 'light',\n  initial: 'green',\n  states: {\n    green: {\n      on: {\n        TIMER: { target: 'yellow' }\n      }\n    },\n    yellow: {\n      on: {\n        TIMER: { target: 'red' }\n      }\n    },\n    red: {\n      initial: 'walk',\n      activities: ['activateCrosswalkLight'],\n      on: {\n        TIMER: { target: 'green' }\n      },\n      states: {\n        walk: {\n          on: {\n            PED_WAIT: { target: 'wait' }\n          }\n        },\n        wait: {\n          activities: ['blinkCrosswalkLight'],\n          on: {\n            PED_STOP: { target: 'stop' }\n          }\n        },\n        stop: {}\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Subreddit State Machine in JavaScript\nDESCRIPTION: Creates a state machine for managing subreddit data loading states and operations. Handles loading, success, and failure states with ability to refresh and retry.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/tutorials/reddit.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst createSubredditMachine = (subreddit) => {\n  return createMachine({\n    id: 'subreddit',\n    initial: 'loading',\n    context: {\n      subreddit, // subreddit name passed in\n      posts: null,\n      lastUpdated: null\n    },\n    states: {\n      loading: {\n        invoke: {\n          id: 'fetch-subreddit',\n          src: invokeFetchSubreddit,\n          onDone: {\n            target: 'loaded',\n            actions: assign({\n              posts: (_, event) => event.data,\n              lastUpdated: () => Date.now()\n            })\n          },\n          onError: 'failure'\n        }\n      },\n      loaded: {\n        on: {\n          REFRESH: 'loading'\n        }\n      },\n      failure: {\n        on: {\n          RETRY: 'loading'\n        }\n      }\n    }\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring XState Inspector with Default Options\nDESCRIPTION: Shows the default configuration for the XState inspector, including the default iframe selector and visualization URL.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/packages/xstate-inspect/index.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// defaults\ninspect({\n  iframe: () => document.querySelector('iframe[data-xstate]'),\n  url: 'https://stately.ai/viz?inspect'\n});\n\n// the above is the same as this:\ninspect();\n```\n\n----------------------------------------\n\nTITLE: Guard Parameters Access in XState\nDESCRIPTION: Demonstrates how to directly access guard parameters from the second argument of guard implementations in XState machines.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_94\n\nLANGUAGE: typescript\nCODE:\n```\nconst machine = createMachine(\n  {\n    // ...\n    on: {\n      EVENT: {\n        guard: {\n          type: 'isGreaterThan',\n          params: { value: 10 }\n        }\n      }\n    }\n  },\n  {\n    guards: {\n      isGreaterThan: (_, params) => {\n        params.value; // 10\n      }\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating State Machines from XState Models\nDESCRIPTION: Shows how to create a machine from a model using model.createMachine() instead of manual type parameters. This approach provides better type inference for events and context.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/models.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst machine = userModel.createMachine({\n  context: userModel.initialContext,\n  initial: 'active',\n  states: {\n    active: {\n      on: {\n        updateName: {\n          actions: userModel.assign({\n            name: (_, event) => event.value // inferred\n          })\n        }\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Guards in XState and SCXML (JavaScript/XML)\nDESCRIPTION: Shows how guards are implemented in XState using the cond property, and the equivalent SCXML representation using the cond attribute.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/scxml.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  on: {\n    e: {\n      target: 'foo',\n      cond: context => context.x === 1\n    }\n  }\n}\n```\n\nLANGUAGE: xml\nCODE:\n```\n<transition event=\"e\" cond=\"x == 1\" target=\"foo\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring predictableActionArguments in XState\nDESCRIPTION: Example showing how to configure predictableActionArguments flag in machine creation for consistent action behavior in XState v5.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/actions.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncreateMachine({\n  predictableActionArguments: true\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Using ObservableActorRef Type with fromObservable in TypeScript\nDESCRIPTION: Shows how to implement the ObservableActorRef type with the fromObservable function to create an actor that observes values incremented at regular intervals. It accepts a Context type for observed values and Input type for configuration.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fromObservable, createActor } from 'xstate';\nimport { interval } from 'rxjs';\n\n/** The type of the value observed by the actor's logic. */\ntype Context = number;\n/** The actor's input. */\ntype Input = { period?: number };\n\n/**\n * Actor logic that observes a number incremented every `input.period`\n * milliseconds (default: 1_000).\n */\nconst logic = fromObservable<Context, Input>(({ input, self }) => {\n  self;\n  // ^? ObservableActorRef<Event, Input>\n\n  return interval(input.period ?? 1_000);\n});\n\nconst actor = createActor(logic, { input: { period: 2_000 } });\n//    ^? ObservableActorRef<Event, Input>\n```\n\n----------------------------------------\n\nTITLE: Using Input with fromEventObservable Actor Creator\nDESCRIPTION: Demonstrates how to pass input to a fromEventObservable actor logic creator, allowing for parameterized observable creation based on input values.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_120\n\nLANGUAGE: typescript\nCODE:\n```\nconst machine = createMachine({\n  invoke: {\n    src: fromEventObservable(({ input }) => /* ... */),\n    input: {\n      foo: 'bar'\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Inference with XState Store\nDESCRIPTION: Shows how XState Store provides automatic type inference for context and events without needing to specify generic type parameters.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-store/README.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createStore } from '@xstate/store';\n\nconst donutStore = createStore({\n  // Context inferred as:\n  // {\n  //   donuts: number;\n  //   favoriteFlavor: string;\n  // }\n  context: {\n    donuts: 0,\n    favoriteFlavor: 'chocolate'\n  },\n  on: {\n    // Event inferred as:\n    // {\n    //   type: 'changeFlavor';\n    //   flavor: string;\n    // }\n    changeFlavor: (context, event: { flavor: string }) => {\n      context.favoriteFlavor = event.flavor;\n    }\n  }\n});\n\ndonutStore.getSnapshot().context.favoriteFlavor; // string\n\ndonutStore.send({\n  type: 'changeFlavor', // Strongly-typed from transition key\n  flavor: 'strawberry' // Strongly-typed from { flavor: string }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Actions in XState and SCXML (JavaScript/XML)\nDESCRIPTION: Compares the implementation of entry, exit, and transition actions in XState with their SCXML equivalents.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/scxml.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  start: {\n    entry: 'showStartScreen',\n    exit: 'logScreenChange',\n    on: {\n      STOP: {\n        target: 'stop',\n        actions: ['logStop', 'stopEverything']\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: xml\nCODE:\n```\n<state id=\"start\">\n  <onentry>\n    <script>showStartScreen();</script>\n  </onentry>\n  <onexit>\n    <script>logScreenChange();</script>\n  </onexit>\n  <transition event=\"STOP\" target=\"stop\">\n    <script>logStop();</script>\n    <script>stopEverything();</script>\n  </transition>\n</state>\n```\n\n----------------------------------------\n\nTITLE: Matching Complex States in XState with Svelte\nDESCRIPTION: Example showing how to use state.matches() for hierarchical and parallel state machines in Svelte templates, making it easier to conditionally render based on complex state structures.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/packages/xstate-svelte/index.md#2025-04-20_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n{#if $state.matches('idle')}\n  //\n{:else if $state.matches({ loading: 'user' })}\n  //\n{:else if $state.matches({ loading: 'friends' })}\n  //\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Including @xstate/react via CDN\nDESCRIPTION: HTML script tag to include the @xstate/react package from a CDN, making it available as the global variable XStateReact.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/packages/xstate-react/index.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/@xstate/react/dist/xstate-react.umd.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Creating a Test Model with Event Implementations\nDESCRIPTION: Demonstrates how to create a test model from the state machine and define the implementation for events using the withEvents method. This specifies how each event should be executed in the system under test.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/packages/xstate-test/index.md#2025-04-20_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { createMachine } from 'xstate';\nimport { createModel } from '@xstate/test';\n\nconst toggleMachine = createMachine(/* ... */);\n\nconst toggleModel = createModel(toggleMachine).withEvents({\n  TOGGLE: {\n    exec: async (page) => {\n      await page.click('input');\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Typed Machine Model with Event Creators\nDESCRIPTION: Example demonstrating how to create a typed machine model with context and event creators using createModel, which provides type inference for both context and events.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_172\n\nLANGUAGE: typescript\nCODE:\n```\nconst userModel = createModel(\n  // initial context\n  {\n    name: 'David',\n    age: 30\n  },\n  // creators (just events for now)\n  {\n    events: {\n      updateName: (value: string) => ({ value }),\n      updateAge: (value: number) => ({ value }),\n      anotherEvent: () => ({}) // no payload\n    }\n  }\n);\n\nconst machine = createMachine<typeof userModel>({\n  context: userModel.initialContext,\n  initial: 'active',\n  states: {\n    active: {\n      on: {\n        updateName: {\n          /* ... */\n        },\n        updateAge: {\n          /* ... */\n        }\n      }\n    }\n  }\n});\n\nconst nextState = machine.transition(\n  undefined,\n  userModel.events.updateName('David')\n);\n```\n\n----------------------------------------\n\nTITLE: Including @xstate/vue via CDN in HTML\nDESCRIPTION: HTML script tag to include the @xstate/vue package from a CDN, making it available as a global variable XStateVue.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/packages/xstate-vue/index.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/@xstate/vue/dist/xstate-vue.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Inline Action Implementation in XState\nDESCRIPTION: Example showing how to implement an inline action function directly in the machine configuration for quick prototyping.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/actions.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\nTRIGGER: {\n  target: 'active',\n  actions: (context, event) => { console.log('activating...'); }\n}\n// ...\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Reddit State Machine with XState\nDESCRIPTION: Initializes a basic XState machine for a Reddit application with idle and selected states. This establishes the foundation for the state management of the Reddit client.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/tutorials/reddit.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine, assign } from 'xstate';\n\nconst redditMachine = createMachine({\n  id: 'reddit',\n  initial: 'idle',\n  states: {\n    idle: {},\n    selected: {}\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Updating State Meta Getter in TypeScript\nDESCRIPTION: The state.meta getter has been replaced with state.getMeta() method for accessing state metadata.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_85\n\nLANGUAGE: typescript\nCODE:\n```\n- state.meta\n+ state.getMeta()\n```\n\n----------------------------------------\n\nTITLE: Using getSimplePaths Function with XState Machine\nDESCRIPTION: Example of creating a feedback machine using XState and then using getSimplePaths to analyze its structure. It demonstrates how to obtain all simple paths between states in the machine.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/packages/xstate-graph/index.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine } from 'xstate';\nimport { getSimplePaths } from '@xstate/graph';\n\nconst feedbackMachine = createMachine({\n  id: 'feedback',\n  initial: 'question',\n  states: {\n    question: {\n      on: {\n        CLICK_GOOD: 'thanks',\n        CLICK_BAD: 'form',\n        CLOSE: 'closed',\n        ESC: 'closed'\n      }\n    },\n    form: {\n      on: {\n        SUBMIT: 'thanks',\n        CLOSE: 'closed',\n        ESC: 'closed'\n      }\n    },\n    thanks: {\n      on: {\n        CLOSE: 'closed',\n        ESC: 'closed'\n      }\n    },\n    closed: {\n      type: 'final'\n    }\n  }\n});\n\nconst simplePaths = getSimplePaths(feedbackMachine);\n\nconsole.log(simplePaths);\n// => {\n//   '\"question\"': {\n//     state: { value: 'question', context: undefined },\n//     paths: [[]]\n//   },\n//   '\"thanks\"': {\n//     state: { value: 'thanks', context: undefined },\n//     paths: [\n//       [\n//         {\n//           state: { value: 'question', context: undefined },\n//           event: { type: 'CLICK_GOOD' }\n//         }\n//       ],\n//       [\n//         {\n//           state: { value: 'question', context: undefined },\n//           event: { type: 'CLICK_BAD' }\n//         },\n//         {\n//           state: { value: 'form', context: undefined },\n//           event: { type: 'SUBMIT' }\n//         }\n//       ]\n//     ]\n//   },\n//   '\"closed\"': {\n//     state: { value: 'closed', context: undefined },\n//     paths: [\n//       [\n//         {\n//           state: { value: 'question', context: undefined },\n//           event: { type: 'CLICK_GOOD' }\n//         },\n//         {\n//           state: { value: 'thanks', context: undefined },\n//           event: { type: 'CLOSE' }\n//         }\n//       ],\n//       [\n//         {\n//           state: { value: 'question', context: undefined },\n//           event: { type: 'CLICK_GOOD' }\n//         },\n//         {\n//           state: { value: 'thanks', context: undefined },\n//           event: { type: 'ESC' }\n//         }\n//       ],\n//       ...\n//     ]\n//   },\n//   ...\n// };\n```\n\n----------------------------------------\n\nTITLE: Updating actorRef.send() Method to Use Event Objects\nDESCRIPTION: Shows how to update the actorRef.send() method calls to use event objects instead of string events or separate payload arguments. All events must now be objects with a type property.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_36\n\nLANGUAGE: diff\nCODE:\n```\n-actorRef.send('SOME_EVENT')\n+actorRef.send({ type: 'SOME_EVENT' })\n\n-actorRef.send('EVENT', { some: 'payload' })\n+actorRef.send({ type: 'EVENT', some: 'payload' })\n```\n\n----------------------------------------\n\nTITLE: Using state.toStrings() Method in XState\nDESCRIPTION: This snippet demonstrates the use of the state.toStrings() method, which returns an array of strings representing all state value paths. It's useful for representing the current state in string-based environments.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/states.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(state.value);\n// => { red: 'stop' }\n\nconsole.log(state.toStrings());\n// => ['red', 'red.stop']\n```\n\n----------------------------------------\n\nTITLE: Migrating Custom Action and Guard Objects in XState v5\nDESCRIPTION: Breaking change that moves extra parameters for custom action and guard objects to a 'params' property, consolidating the structure of these objects.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_47\n\nLANGUAGE: diff\nCODE:\n```\nactions: {\n  type: 'sendMessage',\n- message: 'hello'\n+ params: {\n+   message: 'hello'\n+ }\n}\nguard: {\n  type: 'exists',\n- prop: 'user'\n+ params: {\n+   prop: 'user'\n+ }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing XState Services with Mocks\nDESCRIPTION: Demonstrates how to test XState services by mocking service implementations using .withConfig() and the interpret function.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/communication.md#2025-04-20_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { interpret } from 'xstate';\nimport { assert } from 'chai';\nimport { userMachine } from '../path/to/userMachine';\n\nconst mockFetchUser = async (userId) => {\n  // Mock however you want, but ensure that the same\n  // behavior and response format is used\n  return { name: 'Test', location: 'Anywhere' };\n};\n\nconst testUserMachine = userMachine.withConfig({\n  services: {\n    getUser: (context, event) => mockFetchUser(context.id)\n  }\n});\n\ndescribe('userMachine', () => {\n  it('should go to the \"success\" state when a user is found', (done) => {\n    interpret(testUserMachine)\n      .onTransition((state) => {\n        if (state.matches('success')) {\n          assert.deepEqual(state.context.user, {\n            name: 'Test',\n            location: 'Anywhere'\n          });\n\n          done();\n        }\n      })\n      .start();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Parameterized Actions to Use params Property\nDESCRIPTION: Shows how to update parameterized actions to use the new 'params' property instead of placing parameters directly on the action object. This change improves clarity and consistency.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_46\n\nLANGUAGE: diff\nCODE:\n```\n// ...\nentry: [\n  {\n    type: 'greet',\n-   message: 'Hello'\n+   params: { message: 'Hello' }\n  }\n]\n// ...\n```\n\n----------------------------------------\n\nTITLE: Adding State Assertions with Puppeteer\nDESCRIPTION: Enhanced toggle machine with test assertions using Puppeteer for checking input states\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/packages/xstate-test/index.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst toggleMachine = createMachine({\n  id: 'toggle',\n  initial: 'inactive',\n  states: {\n    inactive: {\n      on: {\n        /* ... */\n      },\n      meta: {\n        test: async (page) => {\n          await page.waitFor('input:checked');\n        }\n      }\n    },\n    active: {\n      on: {\n        /* ... */\n      },\n      meta: {\n        test: async (page) => {\n          await page.waitFor('input:not(:checked)');\n        }\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Targeting State Nodes by Default ID in XState\nDESCRIPTION: Demonstrates how to target state nodes using their default ID, which is the delimited full path. Shows a state machine for a traffic light with transitions between states using the default ID targeting approach.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/ids.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst lightMachine = createMachine({\n  id: 'light',\n  initial: 'green',\n  states: {\n    green: {\n      // default ID: 'light.green'\n      on: {\n        // You can target state nodes by their default ID.\n        // This is the same as TIMER: 'yellow'\n        TIMER: { target: '#light.yellow' }\n      }\n    },\n    yellow: {\n      on: {\n        TIMER: { target: 'red' }\n      }\n    },\n    red: {\n      on: {\n        TIMER: { target: 'green' }\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using useInterpret for Low-Level Machine Interpretation in Vue\nDESCRIPTION: The useInterpret composable is a low-level function that interprets an XState machine and returns the service. It allows for custom state handling through a callback function that receives the next state.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-vue/CHANGELOG.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useInterpret } from '@xstate/vue';\nimport { someMachine } from '../path/to/someMachine';\nexport default defineComponent({\n  setup() {\n    const state = ref();\n    const service = useInterpret(machine, {}, (nextState) => {\n      state.value = nextState.value;\n    });\n    return { service, state };\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Merging callback logic properties in XState v5\nDESCRIPTION: The `sendBack` and `receive` properties are now merged with other properties of the `fromCallback` logic creator.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_69\n\nLANGUAGE: typescript\nCODE:\n```\nconst callbackLogic = fromCallback(({ input, system, self, sendBack, receive }) => { ... });\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable Store Configurations with createStoreConfig\nDESCRIPTION: Shows how to create reusable store configurations using createStoreConfig, which helps with type inference and allows the same config to be used across multiple components.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-store/CHANGELOG.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst storeConfig = createStoreConfig({\n  context: { count: 0 },\n  on: { inc: (ctx) => ({ ...ctx, count: ctx.count + 1 }) }\n});\n\n// Reusable store config:\n\nconst store = createStore(storeConfig);\n\n// ...\nfunction Comp1() {\n  const store = useStore(storeConfig);\n\n  // ...\n}\n\nfunction Comp2() {\n  const store = useStore(storeConfig);\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Output Data on Final States\nDESCRIPTION: The output data on final states is now specified as '.output' instead of '.data'. This change affects how data is defined for final states in the machine configuration.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_31\n\nLANGUAGE: diff\nCODE:\n```\nconst machine = createMachine({\n  // ...\n  states: {\n    // ...\n    success: {\n-     data: { message: 'Success!' }\n+     output: { message: 'Success!' }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Invoke Source Object in JavaScript\nDESCRIPTION: The invoke.src property now accepts an object that describes the invoke source with its type and other metadata, which can be accessed in services.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_174\n\nLANGUAGE: javascript\nCODE:\n```\nconst machine = createMachine(\n  {\n    initial: 'searching',\n    states: {\n      searching: {\n        invoke: {\n          src: {\n            type: 'search',\n            endpoint: 'example.com'\n          }\n          // ...\n        }\n        // ...\n      }\n    }\n  },\n  {\n    services: {\n      search: (context, event, { src }) => {\n        console.log(src);\n        // => { endpoint: 'example.com' }\n      }\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Using TransitionActorRef Type with fromTransition in TypeScript\nDESCRIPTION: Demonstrates how to use the TransitionActorRef type with the fromTransition function to create an actor that maintains state and handles transition events. It specifies Context type for state, Event type for triggers, and Input type for initialization.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fromTransition, createActor, type AnyActorSystem } from 'xstate';\n\n/** The actor's stored context. */\ntype Context = {\n  /** The current count. */\n  count: number;\n  /** The amount to increase `count` by. */\n  step: number;\n};\n/** The events the actor receives. */\ntype Event = { type: 'increment' };\n/** The actor's input. */\ntype Input = { step?: number };\n\n/**\n * Actor logic that increments `count` by `step` when it receives an event of\n * type `increment`.\n */\nconst logic = fromTransition<Context, Event, AnyActorSystem, Input>(\n  (state, event, actorScope) => {\n    actorScope.self;\n    //         ^? TransitionActorRef<Context, Event>\n\n    if (event.type === 'increment') {\n      return {\n        ...state,\n        count: state.count + state.step\n      };\n    }\n    return state;\n  },\n  ({ input, self }) => {\n    self;\n    // ^? TransitionActorRef<Context, Event>\n\n    return {\n      count: 0,\n      step: input.step ?? 1\n    };\n  }\n);\n\nconst actor = createActor(logic, { input: { step: 10 } });\n//    ^? TransitionActorRef<Context, Event>\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Target Transitions in XState Settings Machine\nDESCRIPTION: Demonstrates how to create transitions that target multiple states simultaneously in a parallel state machine.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/transitions.md#2025-04-20_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst settingsMachine = createMachine({\n  id: 'settings',\n  type: 'parallel',\n  states: {\n    mode: {\n      initial: 'active',\n      states: {\n        inactive: {},\n        pending: {},\n        active: {}\n      }\n    },\n    status: {\n      initial: 'enabled',\n      states: {\n        disabled: {},\n        enabled: {}\n      }\n    }\n  },\n  on: {\n    // Multiple targets\n    DEACTIVATE: {\n      target: ['.mode.inactive', '.status.disabled']\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useInterpret in Vue\nDESCRIPTION: JavaScript example showing how to use the useInterpret composition function to create a service from a machine.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/packages/xstate-vue/index.md#2025-04-20_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport { useInterpret } from '@xstate/vue';\nimport { someMachine } from '../path/to/someMachine';\n\nconst service = useInterpret(someMachine);\n```\n\n----------------------------------------\n\nTITLE: Using getShortestPaths Function with XState Machine\nDESCRIPTION: Demonstrates how to use the getShortestPaths function with a feedback machine, showing the structure of the returned object.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/packages/xstate-graph/index.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine } from 'xstate';\nimport { getShortestPaths } from '@xstate/graph';\n\nconst feedbackMachine = createMachine({\n  id: 'feedback',\n  initial: 'question',\n  states: {\n    question: {\n      on: {\n        CLICK_GOOD: 'thanks',\n        CLICK_BAD: 'form',\n        CLOSE: 'closed',\n        ESC: 'closed'\n      }\n    },\n    form: {\n      on: {\n        SUBMIT: 'thanks',\n        CLOSE: 'closed',\n        ESC: 'closed'\n      }\n    },\n    thanks: {\n      on: {\n        CLOSE: 'closed',\n        ESC: 'closed'\n      }\n    },\n    closed: {\n      type: 'final'\n    }\n  }\n});\n\nconst shortestPaths = getShortestPaths(feedbackMachine);\n\nconsole.log(shortestPaths);\n// => {\n//   '\"question\"': {\n//     state: State { value: 'question', context: undefined },\n//     weight: 0,\n//     path: []\n//   },\n//   '\"thanks\"': {\n//     state: State { value: 'thanks', context: undefined },\n//     weight: 1,\n//     path: [\n//       {\n//         state: State { value: 'question', context: undefined },\n//         event: { type: 'CLICK_GOOD' }\n//       }\n//     ]\n//   },\n//   '\"form\"': {\n//     state: State { value: 'form', context: undefined },\n//     weight: 1,\n//     path: [\n//       {\n//         state: State { value: 'question', context: undefined },\n//         event: { type: 'CLICK_BAD' }\n//       }\n//     ]\n//   },\n//   '\"closed\"': {\n//     state: State { value: 'closed', context: undefined },\n//     weight: 1,\n//     path: [\n//       {\n//         state: State { value: 'question', context: undefined },\n//         event: { type: 'CLOSE' }\n//       }\n//     ]\n//   }\n// };\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Step Sequence State Machine in XState\nDESCRIPTION: This code demonstrates how to create a simple state machine that models a three-step sequence with navigation between steps. It includes forward transitions with the NEXT event and backward navigation with the PREV event, with the final step modeled as a final state.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/patterns/sequence.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst stepMachine = createMachine({\n  id: 'step',\n  initial: 'one',\n  states: {\n    one: {\n      on: { NEXT: 'two' }\n    },\n    two: {\n      on: { NEXT: 'three', PREV: 'one' }\n    },\n    three: {\n      type: 'final'\n    }\n  }\n});\n\nconsole.log(stepMachine.transition('one', { type: 'NEXT' }).value);\n// => 'two'\n```\n\n----------------------------------------\n\nTITLE: Injecting Context Information into an XState Actor on Initialization\nDESCRIPTION: Demonstrates how to provide initial input values to an XState actor during creation. This allows configuring the actor with application-specific paths.\nSOURCE: https://github.com/statelyai/xstate/blob/main/examples/workflow-media-scanner/README.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// index.ts\n\n// ...\n\nconst mediaScannerActor = createActor(mediaScannerMachine, {\n  input: {\n    basePath: 'YOUR BASE PATH HERE',\n    destinationPath: 'YOUR DESTINATION PATH HERE'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Serializing Guards in XState Machines\nDESCRIPTION: This example demonstrates how to serialize guards by referencing them by string or object type and implementing them in the machine options. This approach improves debugging, testing, and visualization of guards.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/guards.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst searchMachine = createMachine(\n  {\n    // ...\n    states: {\n      idle: {\n        on: {\n          SEARCH: {\n            target: 'searching',\n            // The 'searchValid' guard implementation details are\n            // specified in the machine config\n            cond: 'searchValid' // or { type: 'searchValid' }\n          }\n        }\n      }\n      // ...\n    }\n  },\n  {\n    guards: {\n      searchValid: (context, event) => {\n        return context.canSearch && event.query && event.query.length > 0;\n      }\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Replacing filter and stopCondition with stopWhen\nDESCRIPTION: Example showing the API change from filter/stopCondition to stopWhen when generating paths. This option controls when to stop exploring a particular path during graph traversal.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-graph/CHANGELOG.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst shortestPaths = getShortestPaths(machine, {\n  events: [{ type: 'INC' }],\n- filter: (state) => state.context.count < 5\n- stopCondition: (state) => state.context.count < 5\n+ stopWhen: (state) => state.context.count === 5\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Event Object Creation in XState\nDESCRIPTION: Shows how to create a basic event object with a type property using the conventional CONST_CASE naming.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/events.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst timerEvent = {\n  type: 'TIMER' // the convention is to use CONST_CASE for event names\n};\n```\n\n----------------------------------------\n\nTITLE: Using useActor with Vue 3 Composition API\nDESCRIPTION: Example of using the useActor composition function to interact with a spawned actor in a Vue 3 component.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/packages/xstate-vue/index.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useActor } from '@xstate/vue';\n\nconst props = defineProps(['someSpawnedActor']);\n\nconst { state, send } = useActor(props.someSpawnedActor);\n```\n\n----------------------------------------\n\nTITLE: Defining Transitions in XState and SCXML\nDESCRIPTION: Compares the syntax for defining transitions in XState and SCXML, showing how event-target mappings correspond between the two formats.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/scxml.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  green: {\n    on: {\n      TIMER: {\n        target: '#yellow',\n        cond: context => context.timeElapsed > 5000\n      },\n      POWER_OUTAGE: { target: '#red.flashing' }\n    }\n  },\n  // ...\n}\n```\n\nLANGUAGE: xml\nCODE:\n```\n<state id=\"green\">\n  <transition\n    event=\"TIMER\"\n    target=\"yellow\"\n    cond=\"timeElapsed > 5000\"\n  />\n  <transition\n    event=\"POWER_OUTAGE\"\n    target=\"red.flashing\"\n  />\n</state>\n```\n\n----------------------------------------\n\nTITLE: Running Test Plans with Coverage\nDESCRIPTION: Example of creating and executing test plans with Jest, including coverage verification\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/packages/xstate-test/index.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('toggle', () => {\n  const testPlans = toggleModel.getShortestPathPlans();\n\n  testPlans.forEach((plan) => {\n    describe(plan.description, () => {\n      plan.paths.forEach((path) => {\n        it(path.description, async () => {\n          // do any setup, then...\n\n          await path.test(page);\n        });\n      });\n    });\n  });\n\n  it('should have full coverage', () => {\n    return toggleModel.testCoverage();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating EventInputByType Utility Type for XState Store\nDESCRIPTION: Shows how to create an EventInputByType utility type that extracts a specific event's \"input\" type (the event type without the type property). This is useful for creating type-safe event creator functions.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-store/CHANGELOG.md#2025-04-20_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type EventFromStore, type Store } from '@xstate/store';\n\n/**\n * Extract a specific store event's \"input\" type (the event type without the\n * `type` property).\n */\ntype EventInputByType<\n  TStore extends Store<any, any>,\n  Type extends EventFromStore<TStore>['type']\n> = Omit<EventByType<TStore, Type>, 'type'>;\n```\n\n----------------------------------------\n\nTITLE: Implementing XState in React Class Components\nDESCRIPTION: Demonstrates how to use XState in React class components without hooks, including machine interpretation, state management, and lifecycle methods.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/recipes/react.md#2025-04-20_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { interpret } from 'xstate';\nimport { toggleMachine } from '../path/to/toggleMachine';\n\nclass Toggle extends React.Component {\n  state = {\n    current: toggleMachine.initialState\n  };\n\n  service = interpret(toggleMachine).onTransition((current) =>\n    this.setState({ current })\n  );\n\n  componentDidMount() {\n    this.service.start();\n  }\n\n  componentWillUnmount() {\n    this.service.stop();\n  }\n\n  render() {\n    const { current } = this.state;\n    const { send } = this.service;\n\n    return (\n      <button onClick={() => send('TOGGLE')}>\n        {current.matches('inactive') ? 'Off' : 'On'}\n      </button>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Entry Actions Event Type Issue in XState\nDESCRIPTION: Illustrates the typing limitation with event types in entry actions and how events are not properly typed in this context.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/typescript.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMachine } from 'xstate';\n\ninterface Context {}\n\ntype Event =\n  | { type: 'EVENT_WITH_FLAG'; flag: boolean }\n  | {\n      type: 'EVENT_WITHOUT_FLAG';\n    };\n\ncreateMachine({\n  schema: {\n    context: {} as Context,\n    events: {} as Event\n  },\n  initial: 'state1',\n  states: {\n    state1: {\n      on: {\n        EVENT_WITH_FLAG: {\n          target: 'state2'\n        }\n      }\n    },\n    state2: {\n      entry: [\n        (context, event) => {\n          // This will error at .flag\n          console.log(event.flag);\n        }\n      ]\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Enhanced Reddit Machine Using Actor Model in XState\nDESCRIPTION: Updated Reddit machine that maintains and spawns subreddit actors. This implementation supports caching of subreddits by keeping track of spawned subreddit actors in context.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/tutorials/reddit.md#2025-04-20_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst redditMachine = createMachine({\n  // ...\n  context: {\n    subreddits: {},\n    subreddit: null\n  },\n  // ...\n  on: {\n    SELECT: {\n      target: '.selected',\n      actions: assign((context, event) => {\n        // Use the existing subreddit actor if one already exists\n        let subreddit = context.subreddits[event.name];\n\n        if (subreddit) {\n          return {\n            ...context,\n            subreddit\n          };\n        }\n\n        // Otherwise, spawn a new subreddit actor and\n        // save it in the subreddits object\n        subreddit = spawn(createSubredditMachine(event.name));\n\n        return {\n          subreddits: {\n            ...context.subreddits,\n            [event.name]: subreddit\n          },\n          subreddit\n        };\n      })\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Initial States in XState Hierarchy\nDESCRIPTION: Demonstrates various ways to specify initial states deep in the hierarchy, including targeting multiple parallel states.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_153\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  initial: '#some_id',\n  initial: ['#some_id', '#another_id'],\n  initial: { target: '#some_id' },\n  initial: { target: ['#some_id', '#another_id'] },\n}\n```\n\n----------------------------------------\n\nTITLE: Working with Common Actor Snapshot Properties in XState\nDESCRIPTION: Illustrates the consistent shape of actor snapshots with common properties like status, output, error, and context. This example shows accessing a promise actor's output.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_99\n\nLANGUAGE: typescript\nCODE:\n```\nconst promiseActor = fromPromise(async () => {\n  return 42;\n});\n\n// Previously number | undefined\n// Now a snapshot object with { status, output, error, context }\nconst promiseActorSnapshot = promiseActor.getSnapshot();\n\nif (promiseActorSnapshot.status === 'done') {\n  console.log(promiseActorSnapshot.output); // 42\n}\n```\n\n----------------------------------------\n\nTITLE: Event String Shorthand in XState\nDESCRIPTION: Demonstrates the shorthand notation for events that only have a type property.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/events.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// equivalent to { type: 'TIMER' }\nconst timerEvent = 'TIMER';\n```\n\n----------------------------------------\n\nTITLE: Persisting and Rehydrating XState in Svelte\nDESCRIPTION: Code example showing how to rehydrate a machine from persisted state using the state option in useMachine. This technique is useful for preserving state across page reloads or sessions.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/packages/xstate-svelte/index.md#2025-04-20_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n// Get the persisted state config object from somewhere, e.g. localStorage\n\nconst persistedState = JSON.parse(\n  localStorage.getItem('some-persisted-state-key')\n);\n\nconst { state, send } = useMachine(someMachine, {\n  state: persistedState\n});\n\n// state will initially be that persisted state, not the machine's initialState\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Serializer for Sensitive Data\nDESCRIPTION: TypeScript example showing how to add a custom serializer to remove sensitive information like credentials from inspector messages.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-inspect/README.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Remove credentials from being forwarded\ninspect({\n  serialize: (key: string, value: any) => {\n    return key === 'credentials' && typeof value === 'object' ? {} : value;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Subscribing to XState Machine Service Updates\nDESCRIPTION: Shows how to access the machine service and subscribe to state changes using useEffect.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/packages/xstate-react/index.md#2025-04-20_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst [state, send, service] = useMachine(someMachine);\n\nuseEffect(() => {\n  const subscription = service.subscribe((state) => {\n    // simple state logging\n    console.log(state);\n  });\n\n  return subscription.unsubscribe;\n}, [service]); // note: service should never change\n```\n\n----------------------------------------\n\nTITLE: Spawning Actors Outside assign() in TypeScript\nDESCRIPTION: Demonstrates how to spawn actors directly outside of assign() action creators in XState. This allows creating child actors in response to events with automatic type inference.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_92\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMachine, spawn } from 'xstate';\n\nconst listenerMachine = createMachine({\n  // ...\n});\n\nconst parentMachine = createMachine({\n  // ...\n  on: {\n    'listener.create': {\n      entry: spawn(listenerMachine, { id: 'listener' })\n    }\n  }\n  // ...\n});\n\nconst actor = createActor(parentMachine).start();\n\nactor.send({ type: 'listener.create' });\n\nactor.getSnapshot().children.listener; // ActorRefFrom<typeof listenerMachine>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Traffic Light Machine with Nested States in JavaScript using XState\nDESCRIPTION: This code snippet demonstrates how to create a hierarchical state machine for a traffic light system with pedestrian states using XState. It includes compound states, initial states, and event handling across nested state structures.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/hierarchical.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst pedestrianStates = {\n  initial: 'walk',\n  states: {\n    walk: {\n      on: {\n        PED_COUNTDOWN: { target: 'wait' }\n      }\n    },\n    wait: {\n      on: {\n        PED_COUNTDOWN: { target: 'stop' }\n      }\n    },\n    stop: {},\n    blinking: {}\n  }\n};\n\nconst lightMachine = createMachine({\n  key: 'light',\n  initial: 'green',\n  states: {\n    green: {\n      on: {\n        TIMER: { target: 'yellow' }\n      }\n    },\n    yellow: {\n      on: {\n        TIMER: { target: 'red' }\n      }\n    },\n    red: {\n      on: {\n        TIMER: { target: 'green' }\n      },\n      ...pedestrianStates\n    }\n  },\n  on: {\n    POWER_OUTAGE: { target: '.red.blinking' },\n    POWER_RESTORED: { target: '.red' }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Updated Error Event Structure in XState v5\nDESCRIPTION: The error event now has the error data on event.error instead of event.data, providing a more consistent error handling approach.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_60\n\nLANGUAGE: diff\nCODE:\n```\n// ...\ninvoke: {\n  src: 'someSrc',\n  onError: {\n    actions: ({ event }) => {\n-     event.data;\n+     event.error;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Switch and Match with XState States in SolidJS\nDESCRIPTION: Example showing how to use SolidJS Switch and Match components to conditionally render UI based on hierarchical XState machine states.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-solid/README.md#2025-04-20_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst Loader = () => {\n  const [snapshot, send] = useActor(/* ... */);\n\n  return (\n    <div>\n      <Switch fallback={null}>\n        <Match when={snapshot.matches('idle')}>\n          <Loader.Idle />\n        </Match>\n        <Match when={snapshot.matches({ loading: 'user' })}>\n          <Loader.LoadingUser />\n        </Match>\n        <Match when={snapshot.matches({ loading: 'friends' })}>\n          <Loader.LoadingFriends />\n        </Match>\n      </Switch>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Timer Context Interface in TypeScript\nDESCRIPTION: This snippet defines the TypeScript interface for the timer's context, including elapsed time, duration, and interval.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/tutorials/7guis/timer.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TimerContext {\n  // The elapsed time (in seconds)\n  elapsed: number;\n  // The maximum time (in seconds)\n  duration: number;\n  // The interval to send TICK events (in seconds)\n  interval: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Custom ID to State Node in XState\nDESCRIPTION: Shows the syntax for assigning a custom ID to a state node. A custom ID can be any unique string and overrides the default ID generation.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/ids.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\nstates: {\n  active: {\n    id: 'custom-active', // can be any unique string\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pure Transition Functions - TypeScript\nDESCRIPTION: New transition and initialTransition functions added in version 5.19.0 that provide pure functions for calculating next state and actions without executing them.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { transition } from 'xstate';\n\nconst [nextState, actions] = transition(actorLogic, currentState, event);\n// Execute actions as needed\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { initialTransition } from 'xstate';\n\nconst [initialState, actions] = initialTransition(actorLogic, input);\n// Execute actions as needed\n```\n\n----------------------------------------\n\nTITLE: Using Context in XState Guards with the Interpreter\nDESCRIPTION: This snippet demonstrates how to use the XState interpreter to test guarded transitions. It shows how a guard function evaluates context and event data to determine if a transition should occur.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/guards.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { interpret } from 'xstate';\n\nconst searchService = interpret(searchMachine)\n  .onTransition((state) => console.log(state.value))\n  .start();\n\nsearchService.send({ type: 'SEARCH', query: '' });\n// => 'idle'\n\nsearchService.send({ type: 'SEARCH', query: 'something' });\n// => 'searching'\n```\n\n----------------------------------------\n\nTITLE: Conditional Transitions with Null Events\nDESCRIPTION: Shows how to use null events with guards for conditional state transitions based on context.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/events.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst isAdult = ({ age }) => age >= 18;\nconst isMinor = ({ age }) => age < 18;\n\nconst ageMachine = createMachine({\n  id: 'age',\n  context: { age: undefined }, // age unknown\n  initial: 'unknown',\n  states: {\n    unknown: {\n      on: {\n        // immediately take transition that satisfies conditional guard.\n        // otherwise, no transition occurs\n        '': [\n          { target: 'adult', cond: isAdult },\n          { target: 'child', cond: isMinor }\n        ]\n      }\n    },\n    adult: { type: 'final' },\n    child: { type: 'final' }\n  }\n});\n\nconsole.log(ageMachine.initialState.value);\n// => 'unknown'\n\nconst personData = { age: 28 };\n\nconst personMachine = ageMachine.withContext(personData);\n\nconsole.log(personMachine.initialState.value);\n// => 'adult'\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useSelector in Vue\nDESCRIPTION: JavaScript example showing how to use the useSelector composition function to select specific values from an actor's state.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/packages/xstate-vue/index.md#2025-04-20_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nimport { useSelector } from '@xstate/vue';\n\nconst props = defineProps(['service']);\n\nconst selectCount = (state) => state.context.count;\n\nconst count = useSelector(props.service, selectCount);\n```\n\n----------------------------------------\n\nTITLE: Using stateNotIn guard with complex state\nDESCRIPTION: Demonstrates usage of stateNotIn guard with a state object configuration\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_145\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\nSOME_EVENT: {\n  target: 'anotherState',\n  cond: stateNotIn({ red: 'stop' })\n}\n```\n\n----------------------------------------\n\nTITLE: Performance Optimized Context Consumer\nDESCRIPTION: Improved performance implementation using useSelector hook for selective state updates.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/recipes/react.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useContext } from 'react';\nimport { GlobalStateContext } from './globalState';\nimport { useSelector } from '@xstate/react';\n\nconst loggedInSelector = (state) => {\n  return state.matches('loggedIn');\n};\n\nexport const SomeComponent = (props) => {\n  const globalServices = useContext(GlobalStateContext);\n  const isLoggedIn = useSelector(globalServices.authService, loggedInSelector);\n\n  return isLoggedIn ? 'Logged In' : 'Logged Out';\n};\n```\n\n----------------------------------------\n\nTITLE: Typing CreateUpdater in XState with Immer\nDESCRIPTION: Demonstrates how to type createUpdater function with context and ImmerUpdateEvent types. Shows usage of type definitions for state updates.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/packages/xstate-immer/index.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createUpdater, ImmerUpdateEvent } from '@xstate/immer';\n\n// This is the same as:\n// {\n//   type: 'UPDATE_NAME';\n//   input: string;\n// }\ntype NameUpdateEvent = ImmerUpdateEvent<'UPDATE_NAME', string>;\n\nconst nameUpdater = createUpdater<SomeContext, NameUpdateEvent>(\n  'UPDATE_NAME',\n  (ctx, { input }) => {\n    ctx.name = input;\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Specifying Actor Types in XState Machines\nDESCRIPTION: Example demonstrating how to define typed actors within a state machine, including source names, IDs, and logic.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_112\n\nLANGUAGE: typescript\nCODE:\n```\nconst fetcher = fromPromise(() => fetchUser());\n\nconst machine = createMachine({\n  types: {} as {\n    actors: {\n      src: 'fetchData'; // src name (inline behaviors ideally inferred)\n      id: 'fetch1' | 'fetch2'; // possible ids (optional)\n      logic: typeof fetcher;\n    };\n  },\n  invoke: {\n    src: 'fetchData', // strongly typed\n    id: 'fetch2', // strongly typed\n    onDone: {\n      actions: ({ event }) => {\n        event.output; // strongly typed as { result: string }\n      }\n    },\n    input: { foo: 'hello' } // strongly typed\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Importing XState in Deno\nDESCRIPTION: Demonstrates how to import the createMachine function from XState using Skypack CDN for Deno compatibility. This approach bypasses the need for local node_modules installation as packages are loaded at runtime.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/recipes/deno.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine } from 'https://cdn.skypack.dev/xstate';\n```\n\n----------------------------------------\n\nTITLE: Renaming state option to snapshot in XState v5\nDESCRIPTION: The `state` option in `createActor(...)` has been renamed to `snapshot`. Similarly, the `.getPersistedState()` method is now `.getPersistedSnapshot()`.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_70\n\nLANGUAGE: typescript\nCODE:\n```\ncreateActor(machine, {\n  snapshot: someState\n})\n\nactor.getPersistedSnapshot()\n```\n\n----------------------------------------\n\nTITLE: Specifying Delay Types for XState Machines\nDESCRIPTION: Example showing how to specify named delay types for an XState machine to improve type safety and readability.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_105\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMachine({\n  types: {} as {\n    delays: 'one second' | 'one minute';\n  }\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Event Dispatch Component\nDESCRIPTION: Example of dispatching events to the global XState service through React Context.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/recipes/react.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useContext } from 'react';\nimport { GlobalStateContext } from './globalState';\n\nexport const SomeComponent = (props) => {\n  const globalServices = useContext(GlobalStateContext);\n\n  return (\n    <button\n      onClick={() => globalServices.authService.send({ type: 'LOG_OUT' })}\n    >\n      Log Out\n    </button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using Actor System Inspection with Subscription in TypeScript\nDESCRIPTION: Shows how to use the actor system inspection feature to observe and debug actor behavior. The inspection function returns a subscription that can be unsubscribed to stop receiving inspection events.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst actor = createActor(someMachine);\n\nconst sub = actor.system.inspect((inspectionEvent) => {\n  console.log(inspectionEvent);\n});\n\n// Inspection events will be logged\nactor.start();\nactor.send({ type: 'anEvent' });\n\n// ...\n\nsub.unsubscribe();\n\n// Will no longer log inspection events\nactor.send({ type: 'someEvent' });\n```\n\n----------------------------------------\n\nTITLE: Using state.matches() Method in XState (JavaScript)\nDESCRIPTION: Illustrates how to use the state.matches() method to check if the current state matches a given parent state value. This is useful for state comparison and conditional logic based on the current state.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/states.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(state.value);\n// => { red: 'stop' }\n\nconsole.log(state.matches('red'));\n// => true\n\nconsole.log(state.matches('red.stop'));\n// => true\n\nconsole.log(state.matches({ red: 'stop' }));\n// => true\n\nconsole.log(state.matches('green'));\n// => false\n```\n\n----------------------------------------\n\nTITLE: Converting an XState machine to a directed graph\nDESCRIPTION: Shows how to use the toDirectedGraph function to convert an XState machine into a directed graph object that can be used with various graph visualization tools.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-graph/CHANGELOG.md#2025-04-20_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nimport { toDirectedGraph } from '@xstate/graph';\n\nconst machine = createMachine({/* ... */});\n\nconst digraph = toDirectedGraph(machine);\n\n// returns an object with this structure:\n{\n  id: '...',\n  stateNode: /* StateNode */,\n  children: [\n    { id: '...', children: [/* ... */], edges: [/* ... */] },\n    { id: '...', /* ... */ },\n    // ...\n  ],\n  edges: [\n    { source: /* ... */, target: /* ... */, transition: /* ... */ }\n    // ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Output Types in XState Machine\nDESCRIPTION: Output types can now be specified in the machine definition, providing strong typing for output values.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_86\n\nLANGUAGE: typescript\nCODE:\n```\nconst machine = createMachine({\n  types: {} as {\n    output: {\n      result: 'pass' | 'fail';\n      score: number;\n    };\n  }\n  // ...\n});\n\nconst actor = createActor(machine);\n\n// ...\n\nconst snapshot = actor.getSnapshot();\n\nif (snapshot.output) {\n  snapshot.output.result;\n  // strongly typed as 'pass' | 'fail'\n  snapshot.output.score;\n  // strongly typed as number\n}\n```\n\n----------------------------------------\n\nTITLE: Using assertEvent for stronger event type checking in XState\nDESCRIPTION: Example of the assertEvent function which helps provide strong typings for events that can't be easily inferred, such as in entry and exit actions. It throws if the event doesn't match the expected type.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n// ...\nentry: ({ event }) => {\n  assertEvent(event, 'greet');\n  // event is { type: 'greet'; message: string }\n\n  assertEvent(event, ['greet', 'notify']);\n  // event is { type: 'greet'; message: string }\n  // or { type: 'notify'; message: string; level: 'info' | 'error' }\n},\nexit: ({ event }) => {\n  assertEvent(event, 'doNothing');\n  // event is { type: 'doNothing' }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Guards in XState\nDESCRIPTION: This example shows how to create and use custom guards in XState, allowing for serialization of guard logic and inclusion of relevant data.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/guards.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst searchMachine = createMachine(\n  {\n    // ...\n    states: {\n      idle: {\n        on: {\n          SEARCH: {\n            target: 'searching',\n            // Custom guard object\n            cond: {\n              type: 'searchValid',\n              minQueryLength: 3\n            }\n          }\n        }\n      }\n      // ...\n    }\n  },\n  {\n    guards: {\n      searchValid: (context, event, { cond }) => {\n        // cond === { type: 'searchValid', minQueryLength: 3 }\n        return (\n          context.canSearch &&\n          event.query &&\n          event.query.length > cond.minQueryLength\n        );\n      }\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Test Model with Events\nDESCRIPTION: Implementation of a test model using the toggle machine and defining test events with execution logic\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/packages/xstate-test/index.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine } from 'xstate';\nimport { createModel } from '@xstate/test';\n\nconst toggleMachine = createMachine(/* ... */);\n\nconst toggleModel = createModel(toggleMachine).withEvents({\n  TOGGLE: {\n    exec: async (page) => {\n      await page.click('input');\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Type Inference with TypeScript Models\nDESCRIPTION: Demonstrates TypeScript type inference for context and events when using createModel, including explicit type declarations.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/models.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createModel } from 'xstate/lib/model';\n\nconst userModel = createModel(\n  {\n    name: 'David', // inferred as `string`\n    age: 30, // inferred as `number`\n    friends: [] as string[] // explicit type\n  },\n  {\n    events: {\n      updateName: (value: string) => ({ value }),\n      updateAge: (value: number) => ({ value }),\n      anotherEvent: () => ({}) // no payload\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Basic State Transitions in XState\nDESCRIPTION: Demonstrates basic state transitions in a promise machine, showing both shorthand and object notation for defining transitions.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/transitions.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine } from 'xstate';\n\nconst promiseMachine = createMachine({\n  id: 'promise',\n  initial: 'pending',\n  states: {\n    pending: {\n      on: {\n        // state transition (shorthand)\n        // this is equivalent to { target: 'resolved' }\n        RESOLVE: 'resolved',\n\n        // state transition (object)\n        REJECT: {\n          target: 'rejected'\n        }\n      }\n    },\n    resolved: {\n      type: 'final'\n    },\n    rejected: {\n      type: 'final'\n    }\n  }\n});\n\nconst { initialState } = promiseMachine;\n\nconsole.log(initialState.value);\n// => 'pending'\n\nconst nextState = promiseMachine.transition(initialState, { type: 'RESOLVE' });\n\nconsole.log(nextState.value);\n// => 'resolved'\n```\n\n----------------------------------------\n\nTITLE: Matching States Using Switch with State.matches() in React\nDESCRIPTION: Example of using a switch statement with state.matches() as a predicate to handle hierarchical state values in React components.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/packages/xstate-react/index.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nswitch (true) {\n  case state.matches('idle'):\n    return /* ... */;\n  case state.matches({ loading: 'user' }):\n    return /* ... */;\n  case state.matches({ loading: 'friends' }):\n    return /* ... */;\n  default:\n    return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Using spawn in assign with XState v5\nDESCRIPTION: In XState v5, 'spawn' is no longer directly importable. Instead, it's available in the assign function as a third parameter, alongside the ability to spawn actors defined in implementations.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_54\n\nLANGUAGE: javascript\nCODE:\n```\nassign((ctx, ev, { spawn }) => {\n  return {\n    ...ctx,\n    actorRef: spawn(promiseActor)\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Using Log Action Creator in XState\nDESCRIPTION: Demonstrates how to use the log() action creator to log state context and events. The example shows both basic logging and logging with custom expressions and labels.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/actions.md#2025-04-20_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine, actions } from 'xstate';\nconst { log } = actions;\n\nconst loggingMachine = createMachine({\n  id: 'logging',\n  context: { count: 42 },\n  initial: 'start',\n  states: {\n    start: {\n      entry: log('started!'),\n      on: {\n        FINISH: {\n          target: 'end',\n          actions: log(\n            (context, event) => `count: ${context.count}, event: ${event.type}`,\n            'Finish label'\n          )\n        }\n      }\n    },\n    end: {}\n  }\n});\n\nconst endState = loggingMachine.transition('start', { type: 'FINISH' });\n\nendState.actions;\n// [\n//   {\n//     type: 'xstate.log',\n//     label: 'Finish label',\n//     expr: (context, event) => ...\n//   }\n// ]\n```\n\n----------------------------------------\n\nTITLE: Testing Reddit Machine Implementation\nDESCRIPTION: Integration test setup for verifying Reddit machine functionality\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/tutorials/reddit.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { interpret } from 'xstate';\nimport { assert } from 'chai';\n\nimport { redditMachine } from '../path/to/redditMachine';\n\ndescribe('reddit machine (live)', () => {\n  it('should load posts of a selected subreddit', (done) => {\n    const redditService = interpret(redditMachine)\n      .onTransition((state) => {\n        if (state.matches({ selected: 'loaded' })) {\n          assert.isNotEmpty(state.context.posts);\n          done();\n        }\n      })\n      .start();\n\n    redditService.send({ type: 'SELECT', name: 'reactjs' });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Manually Tracking Previous State in XState v5\nDESCRIPTION: State history tracking now needs to be done explicitly since the state.history property has been removed in XState v5.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\nlet previousSnapshot;\n\nconst actorRef = createActor(someMachine);\nactorRef.subscribe((snapshot) => {\n  // previousSnapshot represents the last snapshot here\n\n  // ...\n\n  // update the previous snapshot at the end\n  previousSnapshot = snapshot;\n});\nactorRef.start();\n```\n\n----------------------------------------\n\nTITLE: Using Event Expression with Send Action Creator in XState\nDESCRIPTION: This snippet demonstrates how to use an event expression with the send action creator. The event expression is a function that takes the current context and event, and returns an event object.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/actions.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { send } from 'xstate';\n\n// contrived example - reads from the `context` and sends\n// the dynamically created event\nconst sendName = send((context, event) => ({\n  type: 'NAME',\n  name: context.user.name\n}));\n\nconst machine = createMachine({\n  // ...\n  on: {\n    TOGGLE: {\n      actions: sendName\n    }\n  }\n  //...\n});\n```\n\n----------------------------------------\n\nTITLE: Updating State Node Type Syntax in XState 4\nDESCRIPTION: Shows the diff between XState 3.x and 4 syntax for defining parallel and history state nodes, replacing boolean properties with explicit type strings.\nSOURCE: https://github.com/statelyai/xstate/blob/main/migration.md#2025-04-20_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- parallel: true,\n+ type: 'parallel'\n\n- history: true,\n+ type: 'history',\n+ history: 'deep', // 'shallow' by default\n```\n\n----------------------------------------\n\nTITLE: Emitting Events from Observable Actors in TypeScript\nDESCRIPTION: Illustrates how to emit events from an observable actor using the emit function provided in the actor scope. This allows observable actors to send events independently of their main observable.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst logic = fromObservable(({ emit }) => {\n  // ...\n\n  emit({\n    type: 'emitted',\n    msg: 'hello'\n  });\n\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying Guard Types for XState Machines\nDESCRIPTION: Example demonstrating how to define typed guards for machines, including guards with parameters.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_106\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMachine({\n  types: {} as {\n    guards:\n      | {\n          type: 'isGreaterThan';\n          params: {\n            count: number;\n          };\n        }\n      | { type: 'plainGuard' };\n  }\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Named Actions with Navigation in SolidJS\nDESCRIPTION: Implementation of named actions in a component using solid-app-router for navigation.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/recipes/solid.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { machine } from './machine';\nimport { useMachine } from '@xstate/solid';\nimport { useNavigate } from 'solid-app-router';\n\nconst Component = () => {\n  const navigate = useNavigate();\n\n  const [state, send] = useMachine(machine, {\n    actions: {\n      goToOtherPage: () => {\n        navigate('/other-page');\n      }\n    }\n  });\n\n  return null;\n};\n```\n\n----------------------------------------\n\nTITLE: Using XState from global variable\nDESCRIPTION: Demonstrates how to access XState functionality after loading it via a CDN script tag. The example shows destructuring the global XState object and creating a basic state machine with an interpreter.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/installation.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createMachine, actions, interpret } = XState; // global variable: window.XState\n\nconst lightMachine = createMachine({\n  // ...\n});\n\nconst lightService = interpret(lightMachine);\n```\n\n----------------------------------------\n\nTITLE: Using EventByType with XState Store Events\nDESCRIPTION: Demonstrates how to use the EventByType utility type with an XState store to extract specific event types. The type provides autocomplete for store event types and type safety for event handling.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-store/CHANGELOG.md#2025-04-20_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// we get autocomplete listing the store's event `type` values on the second\n// type parameter\ntype AddEvent = EventByType<typeof store, 'add'>;\n//   ^? { type: 'add'; addend: number }\n\ntype MultiplyEvent = EventByType<typeof store, 'multiply'>;\n//   ^? { type: 'multiply'; multiplier: number }\n\n// the second type parameter is type-safe, meaning we get a type error if the\n// value isn't a valid event `type`\ntype DivideEvent = EventByType<typeof store, 'divide'>;\n// Type '\"divide\"' does not satisfy the constraint '\"add\" | \"multiply\"'.ts(2344)\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Reactive Atoms with XState Store\nDESCRIPTION: Demonstrates the creation and usage of reactive atoms, including basic value management, subscribing to changes, and combining atoms for derived state.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-store/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAtom } from '@xstate/store';\n\nconst countAtom = createAtom(0);\ncountAtom.get(); // 0\ncountAtom.set(1); // or use setter function: (prev) => prev + 1\n```\n\nLANGUAGE: typescript\nCODE:\n```\ncountAtom.subscribe((value) => console.log(value));\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst nameAtom = createAtom('hello');\nconst countAtom = createAtom(3);\nconst combinedAtom = createAtom((read) =>\n  read(nameAtom).repeat(read(countAtom))\n);\ncombinedAtom.get(); // \"hellohellohello\"\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst countAtom = createAtom(0);\nconst nameStore = createStore({\n  context: { name: 'David' }\n  // ... store config\n});\n\nconst combinedAtom = createAtom(\n  (read) => read(nameStore).context.name + ` ${read(countAtom)}`\n);\ncombinedAtom.get(); // \"David 0\"\n```\n\n----------------------------------------\n\nTITLE: Updating Guard Object Interface in XState\nDESCRIPTION: Shows the updated interface for guard objects where guard parameters should be placed in the params property of the guard object.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_152\n\nLANGUAGE: javascript\nCODE:\n```\n-cond: {\n-  name: 'searchValid', // `name` property no longer used\n  type: 'searchValid',\n- minQueryLength: 3\n+ params: {\n+   minQueryLength: 3\n+ }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Reddit Parent Machine in XState\nDESCRIPTION: Creates a parent state machine for managing selected subreddit state. Handles subreddit selection without direct loading logic.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/tutorials/reddit.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst redditMachine = createMachine({\n  id: 'reddit',\n  initial: 'idle',\n  context: {\n    subreddit: null\n  },\n  states: {\n    idle: {},\n    selected: {}\n  },\n  on: {\n    SELECT: {\n      target: '.selected',\n      actions: assign({\n        subreddit: (context, event) => event.name\n      })\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Error handling improvements in XState v5\nDESCRIPTION: Actors now handle errors thrown in observers without crashing. Errors are handled by the observer's `.error()` handler or thrown with a clear stack trace.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_71\n\nLANGUAGE: typescript\nCODE:\n```\nactor.subscribe({\n  error: (error) => {\n    // handle error\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Events to XState Inspector Receiver in JavaScript\nDESCRIPTION: Shows how to send events to the XState inspector receiver, which will then be forwarded to the inspected service.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/packages/xstate-inspect/index.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\n\n// This will send the event to the inspected service\nwindowReceiver.send({\n  type: 'xstate.event',\n  event: JSON.stringify({ type: 'someEvent' }),\n  service: /* session ID of the service this event is sent to */\n});\n```\n\n----------------------------------------\n\nTITLE: Lazy Stubborn Machine Implementation\nDESCRIPTION: Example of using send action creator to implement a state machine that toggles between active and inactive states while sending events to itself.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/actions.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine, send } from 'xstate';\n\nconst lazyStubbornMachine = createMachine({\n  id: 'stubborn',\n  initial: 'inactive',\n  states: {\n    inactive: {\n      on: {\n        TOGGLE: {\n          target: 'active',\n          // send the TOGGLE event again to the service\n          actions: send('TOGGLE')\n        }\n      }\n    },\n    active: {\n      on: {\n        TOGGLE: { target: 'inactive' }\n      }\n    }\n  }\n});\n\nconst nextState = lazyStubbornMachine.transition('inactive', {\n  type: 'TOGGLE'\n});\n\nnextState.value;\n// => 'active'\nnextState.actions;\n// => [{ type: 'xstate.send', event: { type: 'TOGGLE' }}]\n```\n\n----------------------------------------\n\nTITLE: Installing XState via NPM\nDESCRIPTION: Command to install XState package using npm package manager.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install xstate\n```\n\n----------------------------------------\n\nTITLE: Invoke Property Configuration Reference\nDESCRIPTION: Quick reference for configuring the invoke property in XState machines with various options.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/communication.md#2025-04-20_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst machine = createMachine({\n  // ...\n  states: {\n    someState: {\n      invoke: {\n        // The `src` property can be:\n        // - a string\n        // - a machine\n        // - a function that returns...\n        src: (context, event) => {\n          // - a promise\n          // - a callback handler\n          // - an observable\n        },\n        id: 'some-id',\n        // (optional) forward machine events to invoked service (currently for machines only!)\n        autoForward: true,\n        // (optional) the transition when the invoked promise/observable/machine is done\n        onDone: { target: /* ... */ },\n        // (optional) the transition when an error from the invoked service occurs\n        onError: { target: /* ... */ }\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Running Model-Based Tests with Coverage Verification\nDESCRIPTION: Shows how to use the test model to generate test plans with the shortest path algorithm, execute the tests, and verify full test coverage of the state machine.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/packages/xstate-test/index.md#2025-04-20_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n// ...\n\ndescribe('toggle', () => {\n  const testPlans = toggleModel.getShortestPathPlans();\n\n  testPlans.forEach((plan) => {\n    describe(plan.description, () => {\n      plan.paths.forEach((path) => {\n        it(path.description, async () => {\n          // do any setup, then...\n\n          await path.test(page);\n        });\n      });\n    });\n  });\n\n  it('should have full coverage', () => {\n    return toggleModel.testCoverage();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Installing XState CLI Package\nDESCRIPTION: Command to install the @xstate/cli package using npm package manager.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/packages/xstate-cli/index.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @xstate/cli\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Event Object in JavaScript\nDESCRIPTION: Demonstrates how to create a simple event object with a type property, following the convention of using CONST_CASE for event names.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/events.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst timerEvent = {\n  type: 'TIMER' // the convention is to use CONST_CASE for event names\n};\n```\n\n----------------------------------------\n\nTITLE: Using AnyState and AnyStateMachine Types in TypeScript\nDESCRIPTION: Example showing how to use the AnyState and AnyStateMachine types to create functions that can accept any state machine or state instance.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_155\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { AnyState, AnyStateMachine } from 'xstate';\n\n// A function that takes in any state machine\nfunction visualizeMachine(machine: AnyStateMachine) {\n  // (exercise left to reader)\n}\n\nfunction logState(state: AnyState) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Updating createStore API with Single Configuration Object in TypeScript\nDESCRIPTION: Breaking change that simplifies the createStore API by replacing separate context and handlers arguments with a single configuration object that contains context and event handlers.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-store/CHANGELOG.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Before\n// createStore(\n//   {\n//     count: 0\n//   },\n//   {\n//     increment: (context) => ({ count: context.count + 1 })\n//   }\n// );\n\n// After\ncreateStore({\n  context: {\n    count: 0\n  },\n  on: {\n    increment: (context) => ({ count: context.count + 1 })\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Vue 2.7+ Component with useMachine Hook\nDESCRIPTION: Demonstrates using the xstate-vue2 plugin's useMachine hook in a Vue component with script setup syntax. Shows how to bind state and send events to the machine.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/recipes/vue.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- toggle.vue -->\n<!-- Top level bindigs are pre-processed via \"setup\" -->\n<script setup>\n  import { useMachine } from 'xstate-vue2';\n  import toggleMachine from '../path/to/toggleMachine';\n\n  const { state, send } = useMachine(toggleMachine);\n</script>\n\n<template>\n  <main>\n    <button @click=\"send('TOGGLE')\">\n      {{ state.value === \"inactive\" ? \"Click to activate\" : \"Active! Click to\n      deactivate\" }}\n    </button>\n  </main>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Inspecting Microsteps and Actions in XState\nDESCRIPTION: Demonstrates how to inspect microsteps (@xstate.microstep) and actions (@xstate.action) in XState 5.7.0, allowing for more granular debugging and observation of state transitions.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst machine = createMachine({\n  initial: 'a',\n  states: {\n    a: {\n      on: {\n        event: 'b'\n      }\n    },\n    b: {\n      entry: 'someAction',\n      always: 'c'\n    },\n    c: {}\n  }\n});\n\nconst actor = createActor(machine, {\n  inspect: (inspEvent) => {\n    if (inspEvent.type === '@xstate.microstep') {\n      console.log(inspEvent.snapshot);\n      // logs:\n      // { value: 'a', … }\n      // { value: 'b', … }\n      // { value: 'c', … }\n\n      console.log(inspEvent.event);\n      // logs:\n      // { type: 'event', … }\n    } else if (inspEvent.type === '@xstate.action') {\n      console.log(inspEvent.action);\n      // logs:\n      // { type: 'someAction', … }\n    }\n  }\n});\n\nactor.start();\n\nactor.send({ type: 'event' });\n```\n\n----------------------------------------\n\nTITLE: Spawning Named Actors in XState v5\nDESCRIPTION: Example showing how to spawn actors defined in the implementations object by referencing them by name, similar to the invoke functionality.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_55\n\nLANGUAGE: javascript\nCODE:\n```\nspawn('promiseActor');\n```\n\n----------------------------------------\n\nTITLE: Defining Delayed Transitions in XState v5\nDESCRIPTION: Example showing the object-only syntax for delayed transitions in XState v5, as the array variant is no longer supported.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMachine({\n  initial: 'a',\n  states: {\n    a: {\n      after: {\n        10000: 'b',\n        noon: 'c'\n      }\n    }\n    // ...\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: NextJS Implementation Example\nDESCRIPTION: Example of implementing XState inspector in a NextJS application with client-side only execution.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/packages/xstate-inspect/index.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nif (typeof window !== 'undefined') {\n  inspect({\n    /* options */\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: State Machine Description Property Example\nDESCRIPTION: Shows how to use the new description property for state nodes and transitions to provide documentation. These descriptions can be used by tooling for generating documentation and type hints.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_163\n\nLANGUAGE: typescript\nCODE:\n```\nconst machine = createMachine({\n  // ...\n  states: {\n    active: {\n      // ...\n      description: 'The task is in progress',\n      on: {\n        DEACTIVATE: {\n          // ...\n          description: 'Deactivates the task'\n        }\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Default ID Generation in XState\nDESCRIPTION: Illustrates how XState automatically generates IDs for state nodes based on their position in the state hierarchy. These IDs follow a pattern of parent.child naming.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/ids.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst lightMachine = createMachine({\n  id: 'light',\n  initial: 'green',\n  states: {\n    // ID: \"light.green\"\n    green: {\n      /* ... */\n    },\n    // ID: \"light.yellow\"\n    yellow: {\n      /* ... */\n    },\n    // ID: \"light.red\"\n    red: {\n      /* ... */\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using useMachine with a Toggle Machine in Vue\nDESCRIPTION: Complete Vue component example showing how to use the useMachine hook with a simple toggle state machine.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/packages/xstate-vue/index.md#2025-04-20_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { useMachine } from '@xstate/vue';\nimport { createMachine } from 'xstate';\n\nconst toggleMachine = createMachine({\n  id: 'toggle',\n  initial: 'inactive',\n  states: {\n    inactive: {\n      on: { TOGGLE: 'active' }\n    },\n    active: {\n      on: { TOGGLE: 'inactive' }\n    }\n  }\n});\n\nconst { state, send } = useMachine(toggleMachine);\n</script>\n\n<template>\n  <button @click=\"send('TOGGLE')\">\n    {{\n      state.value === 'inactive'\n        ? 'Click to activate'\n        : 'Active! Click to deactivate'\n    }}\n  </button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using the 'in' Guard in XState and SCXML (JavaScript/XML)\nDESCRIPTION: Demonstrates the use of the 'in' guard in XState and its equivalent In() predicate in SCXML.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/scxml.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  on: {\n    e: {\n      target: 'cooking',\n      in: '#closed'\n    }\n  }\n}\n```\n\nLANGUAGE: xml\nCODE:\n```\n<transition cond=\"In('closed')\" target=\"cooking\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining strict tags for machines in XState v5\nDESCRIPTION: Strict tags can now be defined for machines, ensuring type safety when using tags.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_77\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMachine({\n  types: {} as {\n    tags: 'pending' | 'success' | 'error';\n  }\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing SCXML Event in XState Actions and Guards\nDESCRIPTION: Demonstrates how to access the SCXML event form within XState action and guard functions using the _event property.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/scxml.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\n{\n  actions: {\n    someAction: (context, event, { _event }) => {\n      console.log(_event); // SCXML event\n    };\n  },\n  guards: {\n    someGuard: (context, event, { _event }) => {\n      console.log(_event); // SCXML event\n    }\n  }\n}\n// ..\n```\n\n----------------------------------------\n\nTITLE: Migrating services to actors\nDESCRIPTION: Shows migration from services to the new actors configuration with behavior creators\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_150\n\nLANGUAGE: diff\nCODE:\n```\nimport { createMachine } from 'xstate';\n+import { fromPromise } from 'xstate/actors';\n\nconst machine = createMachine(\n  {\n    // ...\n    invoke: {\n      src: 'fetchFromAPI'\n    }\n  },\n  {\n-   services: {\n+   actors: {\n-     fetchFromAPI: (context, event) => {\n+     fetchFromAPI: (context, event) => fromPromise(() => {\n        // ... (return a promise)\n      })\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Installing XState and @xstate/vue via npm\nDESCRIPTION: Command to install the required packages xstate and @xstate/vue using npm.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/packages/xstate-vue/index.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i xstate @xstate/vue\n```\n\n----------------------------------------\n\nTITLE: Installing XState via npm\nDESCRIPTION: Command to install the XState package using npm, which is required before using the library in your project.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/packages/core/index.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install xstate\n```\n\n----------------------------------------\n\nTITLE: Handling Native DOM Events with XState\nDESCRIPTION: Shows how to use native DOM events directly with XState by sending them to a running service.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/events.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine, interpret } from 'xstate';\n\nconst mouseMachine = createMachine({\n  on: {\n    mousemove: {\n      actions: [\n        (context, event) => {\n          const { offsetX, offsetY } = event;\n          console.log({ offsetX, offsetY });\n        }\n      ]\n    }\n  }\n});\nconst mouseService = interpret(mouseMachine).start();\n\nwindow.addEventListener('mousemove', (event) => {\n  // event can be sent directly to service\n  mouseService.send(event);\n});\n```\n\n----------------------------------------\n\nTITLE: Using getShortestPaths Function with XState Machine\nDESCRIPTION: Example of creating a feedback machine using XState and then using getShortestPaths to analyze its structure. It demonstrates the creation of a state machine and how to obtain the shortest paths between states.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/packages/xstate-graph/index.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine } from 'xstate';\nimport { getShortestPaths } from '@xstate/graph';\n\nconst feedbackMachine = createMachine({\n  id: 'feedback',\n  initial: 'question',\n  states: {\n    question: {\n      on: {\n        CLICK_GOOD: 'thanks',\n        CLICK_BAD: 'form',\n        CLOSE: 'closed',\n        ESC: 'closed'\n      }\n    },\n    form: {\n      on: {\n        SUBMIT: 'thanks',\n        CLOSE: 'closed',\n        ESC: 'closed'\n      }\n    },\n    thanks: {\n      on: {\n        CLOSE: 'closed',\n        ESC: 'closed'\n      }\n    },\n    closed: {\n      type: 'final'\n    }\n  }\n});\n\nconst shortestPaths = getShortestPaths(feedbackMachine);\n\nconsole.log(shortestPaths);\n// => {\n//   '\"question\"': {\n//     state: State { value: 'question', context: undefined },\n//     weight: 0,\n//     path: []\n//   },\n//   '\"thanks\"': {\n//     state: State { value: 'thanks', context: undefined },\n//     weight: 1,\n//     path: [\n//       {\n//         state: State { value: 'question', context: undefined },\n//         event: { type: 'CLICK_GOOD' }\n//       }\n//     ]\n//   },\n//   '\"form\"': {\n//     state: State { value: 'form', context: undefined },\n//     weight: 1,\n//     path: [\n//       {\n//         state: State { value: 'question', context: undefined },\n//         event: { type: 'CLICK_BAD' }\n//       }\n//     ]\n//   },\n//   '\"closed\"': {\n//     state: State { value: 'closed', context: undefined },\n//     weight: 1,\n//     path: [\n//       {\n//         state: State { value: 'question', context: undefined },\n//         event: { type: 'CLOSE' }\n//       }\n//     ]\n//   }\n// };\n```\n\n----------------------------------------\n\nTITLE: Creating Authenticated Toggle Machine with ember-statechart-component\nDESCRIPTION: This snippet demonstrates how to create an authenticated toggle component using ember-statechart-component. It shows how to define a statechart with actions and guards that interact with Ember services.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/recipes/ember.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// app/components/authenticated-toggle.js\nimport { getService } from 'ember-statechart-component';\nimport { createMachine } from 'xstate';\n\nexport default createMachine(\n  {\n    initial: 'inactive',\n    states: {\n      inactive: {\n        on: {\n          TOGGLE: [\n            {\n              target: 'active',\n              cond: 'isAuthenticated'\n            },\n            { actions: ['notify'] }\n          ]\n        }\n      },\n      active: { on: { TOGGLE: 'inactive' } }\n    }\n  },\n  {\n    actions: {\n      notify: (ctx) => {\n        getService(ctx, 'toasts').notify('You must be logged in');\n      }\n    },\n    guards: {\n      isAuthenticated: (ctx) => getService(ctx, 'session').isAuthenticated\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Migrating from String Invoke to Object Invoke in TypeScript\nDESCRIPTION: Example showing how to migrate from using a string directly with 'invoke' to using the object syntax with a 'src' property.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_101\n\nLANGUAGE: typescript\nCODE:\n```\n-invoke: 'myActor'\n+invoke: { src: 'myActor' }\n```\n\n----------------------------------------\n\nTITLE: UseSelector Implementation Example\nDESCRIPTION: Demonstration of useSelector hook with a counter machine in Svelte\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/packages/xstate-svelte/index.md#2025-04-20_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { interpret } from 'xstate';\n  import { createModel } from 'xstate/lib/model';\n  import { useSelector } from '../src';\n\n  const model = createModel(\n    {\n      count: 0,\n      anotherCount: 0\n    },\n    {\n      events: {\n        INCREMENT: () => ({}),\n        INCREMENT_ANOTHER: () => ({})\n      }\n    }\n  );\n\n  const machine = model.createMachine({\n    initial: 'idle',\n    context: model.initialContext,\n    states: {\n      idle: {\n        on: {\n          INCREMENT: {\n            actions: model.assign({ count: ({ count }) => count + 1 })\n          },\n          INCREMENT_ANOTHER: {\n            actions: model.assign({\n              anotherCount: ({ anotherCount }) => anotherCount + 1\n            })\n          }\n        }\n      }\n    }\n  });\n\n  const service = interpret(machine).start();\n\n  const count = useSelector(service, (state) => state.context.count);\n\n  let withSelector = 0;\n  $: $count && withSelector++;\n  let withoutSelector = 0;\n  $: $service.context.count && withoutSelector++;\n</script>\n\n<button data-testid=\"count\" on:click={() => service.send({type:'INCREMENT'})}\n  >Increment count</button\n>\n<button data-testid=\"another\" on:click={() => service.send({type:'INCREMENT_ANOTHER'})}\n  >Increment another count</button\n>\n\n<div data-testid=\"withSelector\">{withSelector}</div>\n<div data-testid=\"withoutSelector\">{withoutSelector}</div>\n```\n\n----------------------------------------\n\nTITLE: Inspecting XState Stores Using the inspect() Method in TypeScript\nDESCRIPTION: Demonstrates how to use the .inspect() method to monitor events and snapshots in an XState store. The inspector receives notification events whenever the store state changes or receives events.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-store/CHANGELOG.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { someStore } from './someStore';\n\nsomeStore.inspect((inspEv) => {\n  console.log(inspEv);\n  // logs \"@xstate.event\" events and \"@xstate.snapshot\" events\n  // whenever an event is sent to the store\n});\n// The \"@xstate.actor\" event is immediately logged\n```\n\n----------------------------------------\n\nTITLE: Configuring Machine Output\nDESCRIPTION: Shows how to specify the final output of a state machine using the top-level output property instead of state-level output.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_64\n\nLANGUAGE: typescript\nCODE:\n```\nconst machine = createMachine({\n  initial: 'started',\n  states: {\n    started: {\n      // ...\n    },\n    finished: {\n      type: 'final'\n      // moved to the top level\n      //\n      // output: {\n      //   status: 200\n      // }\n    }\n  },\n  // This will be the final output of the machine\n  // present on `snapshot.output` and in the done events received by the parent\n  // when the machine reaches the top-level final state (\"finished\")\n  output: {\n    status: 200\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Parallel States in Traffic Light Machine\nDESCRIPTION: Illustrates a complex state machine with nested parallel states inside a compound state. The example models a traffic light system where the red light state contains parallel states for walk sign and pedestrian signals.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/parallel.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst lightMachine = createMachine({\n  // not a parallel machine\n  id: 'light',\n  initial: 'green',\n  states: {\n    green: {\n      on: {\n        TIMER: { target: 'yellow' }\n      }\n    },\n    yellow: {\n      on: {\n        TIMER: { target: 'red' }\n      }\n    },\n\n    // nested parallel machine\n    red: {\n      type: 'parallel',\n      states: {\n        walkSign: {\n          initial: 'solid',\n          states: {\n            solid: {\n              on: {\n                COUNTDOWN: { target: 'flashing' }\n              }\n            },\n            flashing: {\n              on: {\n                STOP_COUNTDOWN: { target: 'solid' }\n              }\n            }\n          }\n        },\n        pedestrian: {\n          initial: 'walk',\n          states: {\n            walk: {\n              on: {\n                COUNTDOWN: { target: 'wait' }\n              }\n            },\n            wait: {\n              on: {\n                STOP_COUNTDOWN: { target: 'stop' }\n              }\n            },\n            stop: {\n              type: 'final'\n            }\n          }\n        }\n      }\n    }\n  }\n});\n\nconsole.log(lightMachine.transition('yellow', { type: 'TIMER' }).value);\n// {\n//   red: {\n//     walkSign: 'solid',\n//     pedestrian: 'walk'\n//   }\n// }\n```\n\n----------------------------------------\n\nTITLE: Using useActor with Vue's computed for Reactive Props\nDESCRIPTION: JavaScript snippet demonstrating how to maintain reactivity when using useActor with props.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/packages/xstate-vue/index.md#2025-04-20_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst { state, send } = useActor(computed(() => props.someSpawnedActor));\n```\n\n----------------------------------------\n\nTITLE: Accessing State Context\nDESCRIPTION: Shows how to access the current context from a state machine's state object after a transition.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/context.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst nextState = glassMachine.transition(glassMachine.initialState, {\n  type: 'FILL'\n});\n\nnextState.context;\n// => { amount: 1 }\n```\n\n----------------------------------------\n\nTITLE: Modeling Events with Event Creators in XState\nDESCRIPTION: Shows how to define event creators within a model for type-safe event creation and action definitions. The example includes context updates via assign actions.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/models.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createModel } from 'xstate/lib/model';\n\nconst userModel = createModel(\n  // Initial context\n  {\n    name: 'David',\n    age: 30\n  },\n  {\n    // Event creators\n    events: {\n      updateName: (value) => ({ value }),\n      updateAge: (value) => ({ value }),\n      anotherEvent: () => ({}) // no payload\n    }\n  }\n);\n\nconst machine = userModel.createMachine(\n  {\n    context: userModel.initialContext,\n    initial: 'active',\n    states: {\n      active: {\n        on: {\n          updateName: {\n            actions: userModel.assign({\n              name: (_, event) => event.value\n            })\n          },\n          updateAge: {\n            actions: 'assignAge'\n          }\n        }\n      }\n    }\n  },\n  {\n    actions: {\n      assignAge: userModel.assign({\n        age: (_, event) => event.value // inferred\n      })\n    }\n  }\n);\n\n// This sends the following event:\n// {\n//   type: 'updateName',\n//   value: 'David'\n// }\nconst nextState = machine.transition(\n  undefined,\n  userModel.events.updateName('David')\n);\n```\n\n----------------------------------------\n\nTITLE: Using t() Helper for Type Definitions in schema\nDESCRIPTION: Example demonstrating the t() helper function which can be used to provide types for schema attributes in a cleaner way than using type assertions.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_160\n\nLANGUAGE: typescript\nCODE:\n```\nimport { t, createMachine } from 'xstate';\n\nconst machine = createMachine({\n  schema: {\n    context: t<{ value: number }>(),\n    events: t<{ type: 'EVENT_1' } | { type: 'EVENT_2' }>()\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Default Target History State Transition in XState\nDESCRIPTION: Demonstrates how history states with default targets behave when no previous history exists in the state machine.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/history.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst firstState = fanMachine.transition(fanMachine.initialState, {\n  type: 'HIGH_POWER'\n});\nconsole.log(firstState.value);\n// transitions to the target state of 'fanOn.third' since there is no history\n// => {\n//   fanOn: 'third'\n// }\n```\n\n----------------------------------------\n\nTITLE: Using useSelector with XState in Vue 3\nDESCRIPTION: Example of using the useSelector composition function to select and react to specific parts of an XState machine's state in a Vue 3 component.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/packages/xstate-vue/index.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useSelector } from '@xstate/vue';\n\nconst props = defineProps(['service']);\n\nconst selectCount = (state) => state.context.count;\n\nconst count = useSelector(props.service, selectCount);\n```\n\n----------------------------------------\n\nTITLE: Migrating from eventCases to events array in XState Graph\nDESCRIPTION: Shows the change from using an object with event types as keys to an array of event objects when specifying event cases in getShortestPaths.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-graph/CHANGELOG.md#2025-04-20_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\nconst shortestPaths = getShortestPaths(someMachine, {\n- eventCases: {\n-   click: [{ x: 10, y: 10 }, { x: 20, y: 20 }]\n- }\n+ events: [\n+   { type: 'click', x: 10, y: 10 },\n+   { type: 'click', x: 20, y: 20 }\n+ ]\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Subreddit Machine in XState\nDESCRIPTION: Creates a state machine for handling subreddit data fetching, displaying, and refreshing. The machine includes states for loading, loaded, and failure conditions with appropriate transitions.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/tutorials/reddit.md#2025-04-20_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst createSubredditMachine = (subreddit) => {\n  return createMachine({\n    id: 'subreddit',\n    initial: 'loading',\n    context: {\n      subreddit, // subreddit name passed in\n      posts: null,\n      lastUpdated: null\n    },\n    states: {\n      loading: {\n        invoke: {\n          id: 'fetch-subreddit',\n          src: invokeFetchSubreddit,\n          onDone: {\n            target: 'loaded',\n            actions: assign({\n              posts: (_, event) => event.data,\n              lastUpdated: () => Date.now()\n            })\n          },\n          onError: 'failure'\n        }\n      },\n      loaded: {\n        on: {\n          REFRESH: 'loading'\n        }\n      },\n      failure: {\n        on: {\n          RETRY: 'loading'\n        }\n      }\n    }\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Transitions in XState and SCXML (JavaScript/XML)\nDESCRIPTION: Compares the syntax for defining transitions in XState (JavaScript) and SCXML (XML), showing equivalent representations.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/scxml.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  green: {\n    on: {\n      TIMER: {\n        target: '#yellow',\n        cond: context => context.timeElapsed > 5000\n      },\n      POWER_OUTAGE: { target: '#red.flashing' }\n    }\n  },\n  // ...\n}\n```\n\nLANGUAGE: xml\nCODE:\n```\n<state id=\"green\">\n  <transition\n    event=\"TIMER\"\n    target=\"yellow\"\n    cond=\"timeElapsed > 5000\"\n  />\n  <transition\n    event=\"POWER_OUTAGE\"\n    target=\"red.flashing\"\n  />\n</state>\n```\n\n----------------------------------------\n\nTITLE: State Matching with Switch Statement in XState\nDESCRIPTION: Demonstrates using a switch statement with state.matches() for handling different machine states.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/packages/xstate-react/index.md#2025-04-20_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nswitch (true) {\n  case state.matches('idle'):\n    return /* ... */;\n  case state.matches({ loading: 'user' }):\n    return /* ... */;\n  case state.matches({ loading: 'friends' }):\n    return /* ... */;\n  default:\n    return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Using getPathFromEvents Function with XState Machine\nDESCRIPTION: Example of creating a feedback machine using XState and then using getPathFromEvents to generate a path based on a sequence of events. It demonstrates how to obtain a specific path through the machine given a series of events.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/packages/xstate-graph/index.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine } from 'xstate';\nimport { getSimplePaths } from '@xstate/graph';\n\nconst feedbackMachine = createMachine({\n  id: 'feedback',\n  initial: 'question',\n  states: {\n    question: {\n      on: {\n        CLICK_GOOD: 'thanks',\n        CLICK_BAD: 'form',\n        CLOSE: 'closed',\n        ESC: 'closed'\n      }\n    },\n    form: {\n      on: {\n        SUBMIT: 'thanks',\n        CLOSE: 'closed',\n        ESC: 'closed'\n      }\n    },\n    thanks: {\n      on: {\n        CLOSE: 'closed',\n        ESC: 'closed'\n      }\n    },\n    closed: {\n      type: 'final'\n    }\n  }\n});\n\nconst path = getPathFromEvents(feedbackMachine, [\n  { type: 'CLICK_GOOD' },\n  { type: 'SUBMIT' },\n  { type: 'CLOSE' }\n]);\n\nconsole.log(path);\n// => {\n//   state: { value: 'closed' },\n//   segments: [\n//     {\n//       state: { value: 'question' },\n//       event: { type: 'CLICK_GOOD' },\n//     },\n//     {\n//       state: { value: 'form' },\n//       event: { type: 'SUBMIT' },\n//     },\n//     {\n//       state: { value: 'thanks' },\n//       event: { type: 'CLOSE' },\n//     },\n//   ],\n// }\n```\n\n----------------------------------------\n\nTITLE: Migrating from services to actors in XState v5\nDESCRIPTION: The 'services' option in createMachine() is renamed to 'actors'. Actor creators like fromPromise must now be used to define actor behaviors.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_59\n\nLANGUAGE: diff\nCODE:\n```\nimport { createMachine } from 'xstate';\n+import { fromPromise } from 'xstate/actors';\n\nconst machine = createMachine(\n  {\n    // ...\n    invoke: {\n      src: 'fetchFromAPI'\n    }\n  },\n  {\n-   services: {\n+   actors: {\n-     fetchFromAPI: (context, event) => {\n+     fetchFromAPI: (context, event) => fromPromise(() => {\n        // ... (return a promise)\n      })\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Schema Metadata in TypeScript\nDESCRIPTION: Example showing how to define schema metadata for machine context and events using JSON Schema format in the createMachine config.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_171\n\nLANGUAGE: javascript\nCODE:\n```\nconst machine = createMachine({\n  schema: {\n    context: {\n      type: 'object',\n      properties: {\n        foo: { type: 'string' },\n        bar: { type: 'number' },\n        baz: {\n          type: 'object',\n          properties: {\n            one: { type: 'string' }\n          }\n        }\n      }\n    },\n    events: {\n      FOO: { type: 'object' },\n      BAR: { type: 'object' }\n    }\n  }\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom XState Inspector Receiver in JavaScript\nDESCRIPTION: Demonstrates how to create a custom inspector by implementing a receiver that listens to and handles inspector events from a source.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/packages/xstate-inspect/index.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWindowReceiver } from '@xstate/inspect';\n\nconst windowReceiver = createWindowReceiver(/* options? */);\n\nwindowReceiver.subscribe((event) => {\n  // here, you will receive \"service.*\" events\n  console.log(event);\n});\n```\n\n----------------------------------------\n\nTITLE: Auth Client-Server Communication\nDESCRIPTION: Example showing communication between auth client and server machines using respond action for handling authentication flow.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/actions.md#2025-04-20_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst authServerMachine = createMachine({\n  initial: 'waitingForCode',\n  states: {\n    waitingForCode: {\n      on: {\n        CODE: {\n          actions: respond({ type: 'TOKEN' }, { delay: 10 })\n        }\n      }\n    }\n  }\n});\n\nconst authClientMachine = createMachine({\n  initial: 'idle',\n  states: {\n    idle: {\n      on: {\n        AUTH: { target: 'authorizing' }\n      }\n    },\n    authorizing: {\n      invoke: {\n        id: 'auth-server',\n        src: authServerMachine\n      },\n      entry: send('CODE', { to: 'auth-server' }),\n      on: {\n        TOKEN: { target: 'authorized' }\n      }\n    },\n    authorized: {\n      type: 'final'\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Prefix Wildcard Event Descriptors\nDESCRIPTION: Demonstrates how to use prefix wildcard event descriptors for matching events with specific patterns.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_66\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\non: {\n  'mouse.click': {/* ... */},\n  // Matches events such as:\n  // \"pointer.move\"\n  // \"pointer.move.out\"\n  // \"pointer\"\n  'pointer.*': {/* ... */}\n}\n// ...\n```\n\n----------------------------------------\n\nTITLE: Specifying Input Types for XState Machines\nDESCRIPTION: Example showing how to define and use strongly typed input for state machines to improve type safety.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_111\n\nLANGUAGE: typescript\nCODE:\n```\nconst emailMachine = createMachine({\n  types: {} as {\n    input: {\n      subject: string;\n      message: string;\n    };\n  },\n  context: ({ input }) => ({\n    // Strongly-typed input!\n    emailSubject: input.subject,\n    emailBody: input.message.trim()\n  })\n});\n\nconst emailActor = interpret(emailMachine, {\n  input: {\n    // Strongly-typed input!\n    subject: 'Hello, world!',\n    message: 'This is a test.'\n  }\n}).start();\n```\n\n----------------------------------------\n\nTITLE: Basic Toggle Machine Implementation in SolidJS\nDESCRIPTION: Example showing how to create a basic toggle machine with XState and use it in a SolidJS component using the useMachine hook.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/packages/xstate-solid/index.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useMachine } from '@xstate/solid';\nimport { createMachine } from 'xstate';\n\nconst toggleMachine = createMachine({\n  id: 'toggle',\n  initial: 'inactive',\n  states: {\n    inactive: {\n      on: { TOGGLE: 'active' }\n    },\n    active: {\n      on: { TOGGLE: 'inactive' }\n    }\n  }\n});\n\nexport const Toggler = () => {\n  const [state, send] = useMachine(toggleMachine);\n\n  return (\n    <button onclick={() => send({ type: 'TOGGLE' })}>\n      {state.value === 'inactive'\n        ? 'Click to activate'\n        : 'Active! Click to deactivate'}\n    </button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Inference in XState Models\nDESCRIPTION: Demonstrates type inference for context and events when using createModel with TypeScript.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/guides/models.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createModel } from 'xstate/lib/model';\n\nconst userModel = createModel(\n  {\n    name: 'David', // 推断为 `string`\n    age: 30, // 推断为 `number`\n    friends: [] as string[] // explicit type\n  },\n  {\n    events: {\n      updateName: (value: string) => ({ value }),\n      updateAge: (value: number) => ({ value }),\n      anotherEvent: () => ({}) // 没有内容\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Installing XState and @xstate/react via npm\nDESCRIPTION: Command to install XState and its React integration package using npm.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/packages/xstate-react/index.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i xstate @xstate/react\n```\n\n----------------------------------------\n\nTITLE: Migrating Action Arguments to Consolidated Object Pattern\nDESCRIPTION: Shows how to update action implementations to use the new consolidated object argument pattern instead of separate context and event parameters.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_126\n\nLANGUAGE: typescript\nCODE:\n```\nassign({\n- count: (context, event) => {\n+ count: ({ context, event }) => {\n    return context.count + event.value;\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Importing and Using XState Graph Utilities\nDESCRIPTION: Example of importing createMachine from XState and getSimplePaths from @xstate/graph, then using them to create a machine and get its simple paths.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/packages/xstate-graph/index.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine } from 'xstate';\nimport { getSimplePaths } from '@xstate/graph';\n\nconst machine = createMachine(/* ... */);\nconst paths = getSimplePaths(machine);\n```\n\n----------------------------------------\n\nTITLE: Extracting Types from XState Models\nDESCRIPTION: Shows how to extract context and event types from a model using ContextFrom and EventFrom utility types. This feature is available since XState 4.22.1.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/models.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ContextFrom, EventFrom } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nconst someModel = createModel(\n  {\n    /* ... */\n  },\n  {\n    events: {\n      /* ... */\n    }\n  }\n);\n\ntype SomeContext = ContextFrom<typeof someModel>;\ntype SomeEvent = EventFrom<typeof someModel>;\n```\n\n----------------------------------------\n\nTITLE: Updating State Restoration with createActor\nDESCRIPTION: Shows how to update the approach for restoring persisted state in actors. Instead of passing the state to start(), the persisted state should be provided in the snapshot property of createActor options.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_40\n\nLANGUAGE: diff\nCODE:\n```\n-createActor(machine).start(state);\n+createActor(machine, { snapshot }).start();\n```\n\n----------------------------------------\n\nTITLE: Creating a Hierarchical State Machine for Traffic and Pedestrian Signals\nDESCRIPTION: Demonstrates implementation of a hierarchical (nested) state machine that combines traffic light states with pedestrian crossing states. The pedestrian states are nested within the red state of the traffic light.\nSOURCE: https://github.com/statelyai/xstate/blob/main/README.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine, createActor } from 'xstate';\n\nconst pedestrianStates = {\n  initial: 'walk',\n  states: {\n    walk: {\n      on: {\n        PED_TIMER: 'wait'\n      }\n    },\n    wait: {\n      on: {\n        PED_TIMER: 'stop'\n      }\n    },\n    stop: {}\n  }\n};\n\nconst lightMachine = createMachine({\n  id: 'light',\n  initial: 'green',\n  states: {\n    green: {\n      on: {\n        TIMER: 'yellow'\n      }\n    },\n    yellow: {\n      on: {\n        TIMER: 'red'\n      }\n    },\n    red: {\n      on: {\n        TIMER: 'green'\n      },\n      ...pedestrianStates\n    }\n  }\n});\n\nconst actor = createActor(lightMachine);\n\nactor.subscribe((state) => {\n  console.log(state.value);\n});\n\nactor.start();\n// logs 'green'\n\nactor.send({ type: 'TIMER' });\n// logs 'yellow'\n\nactor.send({ type: 'TIMER' });\n// logs { red: 'walk' }\n\nactor.send({ type: 'PED_TIMER' });\n// logs { red: 'wait' }\n```\n\n----------------------------------------\n\nTITLE: Integrating XState Store with React\nDESCRIPTION: Demonstrates how to use XState Store in a React component using the useSelector hook from @xstate/store/react to select data from the store and send events.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-store/README.md#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { donutStore } from './donutStore.ts';\nimport { useSelector } from '@xstate/store/react';\n\nfunction DonutCounter() {\n  const donutCount = useSelector(donutStore, (state) => state.context.donuts);\n\n  return (\n    <div>\n      <button onClick={() => donutStore.send({ type: 'addDonut' })}>\n        Add donut ({donutCount})\n      </button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom XState Interpreter in JavaScript\nDESCRIPTION: Shows a minimal implementation of a custom interpreter for an XState machine, demonstrating the flexibility of state machine interpretation despite the additional boilerplate.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/interpretation.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst machine = createMachine(/* machine config */);\n\n// Keep track of the current state, and start\n// with the initial state\nlet currentState = machine.initialState;\n\n// Keep track of the listeners\nconst listeners = new Set();\n\n// Have a way of sending/dispatching events\nfunction send(event) {\n  // Remember: machine.transition() is a pure function\n  currentState = machine.transition(currentState, event);\n\n  // Get the side-effect actions to execute\n  const { actions } = currentState;\n\n  actions.forEach((action) => {\n    // If the action is executable, execute it\n    typeof action.exec === 'function' && action.exec();\n  });\n\n  // Notify the listeners\n  listeners.forEach((listener) => listener(currentState));\n}\n\nfunction listen(listener) {\n  listeners.add(listener);\n}\n\nfunction unlisten(listener) {\n  listeners.delete(listener);\n}\n\n// Now you can listen and send events to update state\nlisten((state) => {\n  console.log(state.value);\n});\n\nsend('SOME_EVENT');\n```\n\n----------------------------------------\n\nTITLE: Adding Transitions to XState Machine\nDESCRIPTION: Implementation of state transitions for the promise machine\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/start.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine } from 'xstate';\n\nconst promiseMachine = createMachine({\n  id: 'promise',\n  initial: 'pending',\n  states: {\n    pending: {\n      on: {\n        RESOLVE: { target: 'resolved' },\n        REJECT: { target: 'rejected' }\n      }\n    },\n    resolved: {},\n    rejected: {}\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Connection String for XState Persistence\nDESCRIPTION: Code snippet showing how to set up the MongoDB connection string in your XState project. This string is needed to connect to your MongoDB deployment and should be replaced with your actual connection string or loaded from environment variables.\nSOURCE: https://github.com/statelyai/xstate/blob/main/examples/mongodb-persisted-state/README.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst uri = '<your mongodb connection string>';\n```\n\n----------------------------------------\n\nTITLE: Actor Logic Creators with Self Access\nDESCRIPTION: Shows how actor logic creators now have access to 'self' parameter in their definitions, including promise, observable, callback and transition logic.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_115\n\nLANGUAGE: typescript\nCODE:\n```\nconst promiseLogic = fromPromise(({ self }) => { ... });\n\nconst observableLogic = fromObservable(({ self }) => { ... });\n\nconst callbackLogic = fromCallback((sendBack, receive, { self }) => { ... });\n\nconst transitionLogic = fromTransition((state, event, { self }) => { ... }, ...);\n```\n\n----------------------------------------\n\nTITLE: Migrating State Machine Target Resolution Syntax\nDESCRIPTION: Shows the updated target resolution syntax that requires explicit targeting of child states from the root, as targeting sibling nodes from the root is no longer valid.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_124\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMachine({\n  id: 'direction',\n  initial: 'left',\n  states: {\n    left: {},\n    right: {}\n  },\n  on: {\n-   LEFT_CLICK: 'left',\n+   LEFT_CLICK: '.left'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Inspector Receiver\nDESCRIPTION: Example of creating and using a custom window receiver for XState inspection events.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/packages/xstate-inspect/index.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWindowReceiver } from '@xstate/inspect';\n\nconst windowReceiver = createWindowReceiver(/* options? */);\n\nwindowReceiver.subscribe((event) => {\n  // 在这里，你将收到\"service.*\"事件\n  console.log(event);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Inline Actors with Named Actors in TypeScript\nDESCRIPTION: Shows how to define inline actor logic when named actors are present in XState 5.11.0. This enables the use of both predefined and inline actors in the same machine.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst machine = setup({\n  actors: {\n    existingActor: fromPromise(async () => {\n      // ...\n    })\n  }\n}).createMachine({\n  invoke: {\n    src: fromPromise(async () => {\n      // Inline actor\n    })\n    // ...\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining State IDs in XState and SCXML\nDESCRIPTION: Demonstrates how to define state IDs in XState and SCXML, which must be unique across the entire state machine.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/scxml.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  green: {\n    id: 'lightGreen';\n  }\n}\n```\n\nLANGUAGE: xml\nCODE:\n```\n<state id=\"lightGreen\">\n  <!-- ... -->\n</state>\n```\n\n----------------------------------------\n\nTITLE: Using useSelector with Actor in Vue Component\nDESCRIPTION: Example of using the useSelector hook to subscribe to an actor and extract specific state values. This demonstrates how to select and use only the count value from a more complex state.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-vue/CHANGELOG.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useSelector } from '@xstate/vue';\n\nexport default {\n  props: ['someActor'],\n  setup(props) {\n    const count = useSelector(\n      props.someActor,\n      (state) => state.context.count\n    );\n    // ...\n    return { count };\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Toggle State Machine with XState\nDESCRIPTION: Defines a simple toggle state machine using XState with active and inactive states. The machine handles toggle transitions between states.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/recipes/stencil.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine } from 'xstate';\n\nexport const toggleMachine = createMachine({\n  id: 'toggle',\n  initial: 'active',\n  states: {\n    inactive: { on: { toggle: 'active' } },\n    active: { on: { toggle: 'inactive' } }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Installing and Starting the Express Credit Check Application\nDESCRIPTION: Commands to install dependencies using pnpm and start the Express application.\nSOURCE: https://github.com/statelyai/xstate/blob/main/examples/mongodb-credit-check-api/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\npnpm start\n```\n\n----------------------------------------\n\nTITLE: Converting Adjacency Map to Array in XState Graph\nDESCRIPTION: Example of using the new adjacencyMapToArray helper function which converts an adjacency map to an array of state, event, and nextState objects. This function is useful for traversing and analyzing state transitions.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-graph/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getAdjacencyMap, adjacencyMapToArray } from '@xstate/graph';\n\nconst machine = createMachine({\n  initial: 'green',\n  states: {\n    green: {\n      on: {\n        TIMER: 'yellow'\n      }\n    },\n    yellow: {\n      on: {\n        TIMER: 'red'\n      }\n    },\n    red: {\n      on: {\n        TIMER: 'green'\n      }\n    }\n  }\n});\n\nconst arr = adjacencyMapToArray(getAdjacencyMap(machine));\n// [\n//   {\n//     \"state\": {value: \"green\", ... },\n//     \"event\": { type: \"TIMER\" },\n//     \"nextState\": { value: \"yellow\", ... }\n//   },\n//   {\n//     \"state\": {value: \"yellow\", ... },\n//     \"event\": { type: \"TIMER\" },\n//     \"nextState\": { value: \"red\", ... }\n//   },\n//   {\n//     \"state\": {value: \"red\", ... },\n//     \"event\": { type: \"TIMER\" },\n//     \"nextState\": { value: \"green\", ... }\n//   },\n//   {\n//     \"state\": {value: \"green\", ... },\n//     \"event\": { type: \"TIMER\" },\n//     \"nextState\": { value: \"yellow\", ... }\n//   },\n// ]\n```\n\n----------------------------------------\n\nTITLE: Migrating from .schema to .types in XState Machines\nDESCRIPTION: Shows how to update machine type definitions from the deprecated .schema property to the new .types property, which provides improved type definitions for context, events, and other machine aspects.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_121\n\nLANGUAGE: typescript\nCODE:\n```\nconst machine = createMachine({\n  // schema: { ... }\n  types: {} as {\n    context: { ... };\n    events: { ... };\n    // ...\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Installing XState Store via Package Manager\nDESCRIPTION: Installation commands for XState Store using npm, yarn, or pnpm package managers.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-store/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# yarn add @xstate/store\n# pnpm add @xstate/store\nnpm install @xstate/store\n```\n\n----------------------------------------\n\nTITLE: Default Target History State Transitions in XState\nDESCRIPTION: Demonstrates how history states with default targets behave when no previous history exists in the state machine.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/history.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst firstState = fanMachine.transition(fanMachine.initialState, {\n  type: 'HIGH_POWER'\n});\nconsole.log(firstState.value);\n// transitions to the target state of 'fanOn.third' since there is no history\n// => {\n//   fanOn: 'third'\n// }\n```\n\n----------------------------------------\n\nTITLE: Using Undefined Actor with useSelector\nDESCRIPTION: Example demonstrating how useSelector can handle an undefined actor, making it compatible with actors that may not exist yet.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-vue/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst count = useSelector(maybeActor, (snapshot) => {\n  // `snapshot` may be undefined\n  return snapshot?.context.count;\n});\n\ncount; // number | undefined\n```\n\n----------------------------------------\n\nTITLE: Handling Unhandled Events in XState\nDESCRIPTION: Demonstrates the behavior when an unknown event is received, showing how the state remains unchanged when no transition is defined for the event.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/hierarchical.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(lightMachine.transition('green', { type: 'UNKNOWN' }).value);\n// => 'green'\n```\n\n----------------------------------------\n\nTITLE: Implementing Wildcard Transitions in XState Quiet Machine\nDESCRIPTION: Shows how to use wildcard event descriptors to handle any event except specific ones in a state machine.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/transitions.md#2025-04-20_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst quietMachine = createMachine({\n  id: 'quiet',\n  initial: 'idle',\n  states: {\n    idle: {\n      on: {\n        WHISPER: undefined,\n        // On any event besides a WHISPER, transition to the 'disturbed' state\n        '*': 'disturbed'\n      }\n    },\n    disturbed: {}\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: DOM Event Integration with XState\nDESCRIPTION: Shows how to integrate native DOM events with XState using event handlers and services.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/events.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine, interpret } from 'xstate';\n\nconst mouseMachine = createMachine({\n  on: {\n    mousemove: {\n      actions: [\n        (context, event) => {\n          const { offsetX, offsetY } = event;\n          console.log({ offsetX, offsetY });\n        }\n      ]\n    }\n  }\n});\nconst mouseService = interpret(mouseMachine).start();\n\nwindow.addEventListener('mousemove', (event) => {\n  // event can be sent directly to service\n  mouseService.send(event);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Atoms with Custom Equality in TypeScript\nDESCRIPTION: Demonstrates how to create an atom with a custom equality function to control when updates occur. This example shows an atom that only updates when x or y coordinate values change.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-store/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst coordinateAtom = createAtom(\n  { x: 0, y: 0 },\n  {\n    // only update when x and y change\n    compare: (prev, next) => prev.x === next.x && prev.y === next.y\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Connection in TypeScript\nDESCRIPTION: Sets up the MongoDB connection string in the actorService.ts file. The connection points to a database named 'creditCheck'.\nSOURCE: https://github.com/statelyai/xstate/blob/main/examples/mongodb-credit-check-api/README.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst uri = \"<your mongo uri here>/creditCheck\";\n```\n\n----------------------------------------\n\nTITLE: Moving Eventless Transitions to 'always' Property\nDESCRIPTION: Demonstrates how to move eventless transitions (previously defined with empty strings in the 'on' object) to the new 'always' property for better clarity and organization.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_43\n\nLANGUAGE: diff\nCODE:\n```\nsomeState: {\n  on: {\n    // Will no longer work\n-   '': { target: 'anotherState' }\n  },\n+ always: { target: 'anotherState' }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from .tsTypes to .types.typegen in XState Machines\nDESCRIPTION: Shows how to update machine typegen definitions from the deprecated .tsTypes property to the new .types.typegen property, which organizes type generation metadata within the types object.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_122\n\nLANGUAGE: typescript\nCODE:\n```\nconst machine = createMachine({\n  // tsTypes: { ... }\n  types: {} as {\n    typegen: {};\n    context: { ... };\n    events: { ... };\n    // ...\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up Custom Inspector URL in TypeScript\nDESCRIPTION: Example showing how to configure @xstate/inspect to target the old inspector URL instead of the default Stately Viz URL.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-inspect/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninspect({\n  url: `https://statecharts.io/inspect`\n});\n```\n\n----------------------------------------\n\nTITLE: Renaming 'cond' to 'guard' in Transition Config\nDESCRIPTION: Breaking change that renames the 'cond' property to 'guard' in transition configurations to unify terminology for guarded transitions.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_52\n\nLANGUAGE: diff\nCODE:\n```\nsomeState: {\n  on: {\n    EVENT: {\n      target: 'anotherState',\n-     cond: 'isValid'\n+     guard: 'isValid'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing SCXML Event in XState Actions and Guards (JavaScript)\nDESCRIPTION: Demonstrates how to access the SCXML event form in XState actions and guards using the _event property.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/scxml.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\n{\n  actions: {\n    someAction: (context, event, { _event }) => {\n      console.log(_event); // SCXML event\n    };\n  },\n  guards: {\n    someGuard: (context, event, { _event }) => {\n      console.log(_event); // SCXML event\n    }\n  }\n}\n// ..\n```\n\n----------------------------------------\n\nTITLE: Using useInterpret in Vue 3 with XState\nDESCRIPTION: Demonstrates the usage of useInterpret to create and interact with an XState service in a Vue 3 component, including options and a listener.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/packages/xstate-vue/index.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useInterpret } from '@xstate/vue';\nimport { someMachine } from '../path/to/someMachine';\n\nconst service = useInterpret(\n  someMachine,\n  {\n    actions: {\n      /* ... */\n    }\n  },\n  (state) => {\n    // subscribes to state changes\n    console.log(state.value);\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Combinatorial State Machine in JavaScript\nDESCRIPTION: Example of creating a simple combinatorial state machine (with only one state) using XState's createMachine API. The machine maintains a numeric value in context that can be incremented.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_170\n\nLANGUAGE: javascript\nCODE:\n```\nconst testMachine = createMachine({\n  context: { value: 42 },\n  on: {\n    INC: {\n      actions: assign({ value: (ctx) => ctx.value + 1 })\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Vite Project for XState Example\nDESCRIPTION: Commands to create a new Vite project using a template for the example implementation.\nSOURCE: https://github.com/statelyai/xstate/blob/main/examples/readme.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm create vite@latest my-example-react --template react-ts\ncd my-example-react\n```\n\n----------------------------------------\n\nTITLE: Creating Basic XState Toggle Machine\nDESCRIPTION: Demonstrates creating a decoupled state machine for toggle functionality using XState.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/recipes/ember.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine } from 'xstate';\n\n// This machine is completely decoupled from Ember\nexport const toggleMachine = createMachine({\n  id: 'toggle',\n  context: {\n    /* some data */\n  },\n  initial: 'inactive',\n  states: {\n    inactive: {\n      on: { TOGGLE: 'active' }\n    },\n    active: {\n      on: { TOGGLE: 'inactive' }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Explicit Type Generics for Assign Actions in XState (TypeScript)\nDESCRIPTION: Shows how to explicitly define context and event types as generics in assign actions for guaranteed proper inference in XState.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/context.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// ...\non: {\n  INCREMENT: {\n    // Generics guarantee proper inference\n    actions: assign<CounterContext, CounterEvent>({\n      count: (context) => {\n        // context: { count: number }\n        return context.count + 1;\n      }\n    });\n  }\n}\n// ...\n```\n\n----------------------------------------\n\nTITLE: Installing XState with npm\nDESCRIPTION: Command to install XState via npm package manager. This is the first step to start using XState in a JavaScript or TypeScript project.\nSOURCE: https://github.com/statelyai/xstate/blob/main/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install xstate\n```\n\n----------------------------------------\n\nTITLE: Migrating from .data to .output for Final State Output\nDESCRIPTION: Shows how to update final state output definition from the deprecated .data property to the new .output property, which provides clearer semantics for state machine output values.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_125\n\nLANGUAGE: typescript\nCODE:\n```\nconst machine = createMachine({\n  // ...\n  states: {\n    // ...\n    success: {\n-     data: { message: 'Success!' }\n+     output: { message: 'Success!' }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: NextJS Inspector Implementation\nDESCRIPTION: Example showing how to properly implement the XState inspector in a NextJS application by ensuring client-side only execution.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/packages/xstate-inspect/index.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nif (typeof window !== 'undefined') {\n  inspect({\n    /* options */\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Using enqueueActions instead of choose() in XState v5\nDESCRIPTION: The choose() action creator is replaced with enqueueActions() which offers a more flexible way to conditionally enqueue actions based on guards.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_58\n\nLANGUAGE: typescript\nCODE:\n```\nentry: [\n  // choose([\n  //   {\n  //     guard: 'someGuard',\n  //     actions: ['action1', 'action2']\n  //   }\n  // ]),\n  enqueueActions(({ enqueue, check }) => {\n    if (check('someGuard')) {\n      enqueue('action1');\n      enqueue('action2');\n    }\n  })\n];\n```\n\n----------------------------------------\n\nTITLE: Defining Timer Event Types in TypeScript\nDESCRIPTION: This snippet defines the TypeScript types for the timer's events, including TICK, DURATION.UPDATE, and RESET events.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/tutorials/7guis/timer.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype TimerEvent =\n  | {\n      // The TICK event sent by the spawned interval service\n      type: 'TICK';\n    }\n  | {\n      // User intent to update the duration\n      type: 'DURATION.UPDATE';\n      value: number;\n    }\n  | {\n      // User intent to reset the elapsed time to 0\n      type: 'RESET';\n    };\n```\n\n----------------------------------------\n\nTITLE: Using Provider Options with createActorContext in React\nDESCRIPTION: Example showing how to use the options prop on the Context.Provider component returned from createActorContext. This allows passing configuration options like machine input at the provider level.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-react/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst SomeContext = createActorContext(someMachine);\n\n// ...\n\n<SomeContext.Provider options={{ input: 42 }}>\n  {/* ... */}\n</SomeContext.Provider>;\n```\n\n----------------------------------------\n\nTITLE: Emitting Events from XState Store\nDESCRIPTION: Demonstrates how to emit events from transitions by defining them in the emits property and using enqueue.emit to signal when specific actions occur.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-store/README.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createStore } from '@xstate/store';\n\nconst store = createStore({\n  context: { count: 0 },\n  emits: {\n    increased: (payload: { by: number }) => {\n      // Optional side effects can go here\n    }\n  },\n  on: {\n    inc: (context, event: { by: number }, enqueue) => {\n      enqueue.emit.increased({ by: event.by });\n\n      return {\n        ...context,\n        count: context.count + event.by\n      };\n    }\n  }\n});\n\n// Listen for emitted events\nstore.on('increased', (event) => {\n  console.log(`Count increased by ${event.by}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Spawning Referenced Actor with Required Input - TypeScript\nDESCRIPTION: Example showing how spawn input becomes required when defined inside a referenced actor in version 5.19.1.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst childMachine = createMachine({\n  types: { input: {} as { value: number } }\n});\n\nconst machine = createMachine({\n  types: {} as { context: { ref: ActorRefFrom<typeof childMachine> } },\n  context: ({ spawn }) => ({\n    ref: spawn(\n      childMachine,\n      // Input is now required!\n      { input: { value: 42 } }\n    )\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: Typing Children IDs with setup() in TypeScript\nDESCRIPTION: Children IDs can be typed using types.children in combination with setup() to provide type safety when accessing children actors.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_91\n\nLANGUAGE: typescript\nCODE:\n```\nconst machine = setup({\n  types: {} as {\n    children: {\n      myId: 'actorKey';\n    };\n  },\n  actors: {\n    actorKey: child\n  }\n}).createMachine({});\n\nconst actorRef = createActor(machine).start();\n\nactorRef.getSnapshot().children.myId; // ActorRefFrom<typeof child> | undefined\n```\n\n----------------------------------------\n\nTITLE: Migrating Guard Arguments to Consolidated Object Pattern\nDESCRIPTION: Shows how to update guard implementations to use the new consolidated object argument pattern instead of separate context and event parameters.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_127\n\nLANGUAGE: typescript\nCODE:\n```\n- guard: (context, event) => {\n+ guard: ({ context, event }) => {\n  return context.count + event.value > 10;\n}\n```\n\n----------------------------------------\n\nTITLE: Using getSimplePaths with XState Machine\nDESCRIPTION: Example of importing createMachine from XState and getSimplePaths from @xstate/graph, then creating a state machine and analyzing its paths. The getSimplePaths function returns all possible simple paths through the state machine.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-graph/README.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine } from 'xstate';\nimport { getSimplePaths } from '@xstate/graph';\n\nconst machine = createMachine(/* ... */);\nconst paths = getSimplePaths(machine);\n```\n\n----------------------------------------\n\nTITLE: Importing the createMachine function\nDESCRIPTION: Basic import of the createMachine function from XState. This function is used to define state machines.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/start.md#2025-04-20_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { createMachine } from 'xstate';\n\nconst promiseMachine = createMachine(/* ... */);\n```\n\n----------------------------------------\n\nTITLE: Managing Effects in XState Store\nDESCRIPTION: Shows how to enqueue effects in state transitions using the enqueue argument to perform asynchronous operations.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-store/README.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createStore } from '@xstate/store';\n\nconst store = createStore({\n  context: { count: 0 },\n  on: {\n    incrementDelayed: (context, event, enqueue) => {\n      enqueue.effect(async () => {\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n        store.send({ type: 'increment' });\n      });\n\n      return context;\n    },\n    increment: (context) => ({\n      ...context,\n      count: context.count + 1\n    })\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Invoking Observable in XState\nDESCRIPTION: This snippet demonstrates how to invoke an observable in XState using RxJS. It creates an interval machine that emits COUNT events and can be cancelled.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/communication.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine, interpret } from 'xstate';\nimport { interval } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\n\nconst intervalMachine = createMachine({\n  id: 'interval',\n  initial: 'counting',\n  context: { myInterval: 1000 },\n  states: {\n    counting: {\n      invoke: {\n        src: (context, event) =>\n          interval(context.myInterval).pipe(\n            map((value) => ({ type: 'COUNT', value })),\n            take(5)\n          ),\n        onDone: 'finished'\n      },\n      on: {\n        COUNT: { actions: 'notifyCount' },\n        CANCEL: { target: 'finished' }\n      }\n    },\n    finished: {\n      type: 'final'\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Full Context Assignment in XState (JavaScript)\nDESCRIPTION: Shows how to update multiple properties in the context based on the current context and event in an XState machine.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/context.md#2025-04-20_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\nactions: assign((context, event) => {\n  return {\n    counter: context.count + event.value,\n    time: event.time,\n    // ...\n  }\n}),\n// ...\n```\n\n----------------------------------------\n\nTITLE: Sending Events to XState Service\nDESCRIPTION: Demonstrates how to send events to a running XState service using the event object format.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/interpretation.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nservice.start();\n\nservice.send({ type: 'CLICK', x: 40, y: 21 });\n```\n\n----------------------------------------\n\nTITLE: Installing @xstate/inspect Package\nDESCRIPTION: Instructions for installing the @xstate/inspect package using npm or yarn package managers.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/packages/xstate-inspect/index.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @xstate/inspect\n# or yarn add @xstate/inspect\n```\n\n----------------------------------------\n\nTITLE: Using EventFromStore Utility Type in XState Store\nDESCRIPTION: Demonstrates the EventFromStore utility type which extracts the type of events from a store. This allows for type-safe event handling and creating additional utility types based on store events.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-store/CHANGELOG.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createStore, type EventFromStore } from '@xstate/store';\n\nconst store = createStore(\n  { count: 0 },\n  {\n    add: (context, event: { addend: number }) => ({\n      count: context.count + event.addend\n    }),\n    multiply: (context, event: { multiplier: number }) => ({\n      count: context.count * event.multiplier\n    })\n  }\n);\n\ntype StoreEvent = EventFromStore<typeof store>;\n//   ^? { type: 'add'; addend: number } | { type: 'multiply'; multiplier: number }\n```\n\n----------------------------------------\n\nTITLE: Default Inspect Configuration\nDESCRIPTION: Default configuration options for XState inspector showing iframe and URL settings.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/packages/xstate-inspect/index.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// 默认\ninspect({\n  iframe: () => document.querySelector('iframe[data-xstate]'),\n  url: 'https://stately.ai/viz?inspect'\n});\n\n// 同上\ninspect();\n```\n\n----------------------------------------\n\nTITLE: Running XState Typegen Command\nDESCRIPTION: Command to run the XState typegen against a glob pattern. This scans targeted files, generates typegen files, and imports them as described in the XState typegen documentation.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/packages/xstate-cli/index.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nxstate typegen \"src/**/*.ts?(x)\"\n```\n\n----------------------------------------\n\nTITLE: Including XState Svelte via CDN\nDESCRIPTION: HTML script tag for including the XState Svelte integration via CDN, making it available through the global XStateSvelte variable.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-svelte/README.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/@xstate/svelte/dist/xstate-svelte.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Adding systemId to Spawned Actors in TypeScript\nDESCRIPTION: Shows how to add a systemId to spawned actors so they can be referenced anywhere in the system. This allows for global access to the actor without maintaining a direct reference.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_118\n\nLANGUAGE: typescript\nCODE:\n```\nconst machine = createMachine({\n  // ...\n  context: ({ spawn }) => ({\n    actorRef: spawn(\n      createMachine({\n        // ...\n      }),\n      { systemId: 'actorRef' }\n    )\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: Resolving Event Type Issues in XState Action Implementations\nDESCRIPTION: This snippet shows how to resolve event type issues in XState action implementations by asserting the event type or moving the implementation inline. It demonstrates two approaches to fix typing errors.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/typescript.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMachine(config, {\n  actions: {\n    consoleLogData: (context, event) => {\n      if (event.type !== 'EVENT_WITH_FLAG') return\n      // No more error at .flag!\n      console.log(event.flag);\n    };\n  }\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMachine } from 'xstate';\n\ncreateMachine({\n  schema: {\n    context: {} as Context,\n    events: {} as Event\n  },\n  on: {\n    EVENT_WITH_FLAG: {\n      actions: (context, event) => {\n        // No more error, because we know which event\n        // is responsible for calling this action\n        console.log(event.flag);\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Final States in XState\nDESCRIPTION: This snippet shows how to use the state.done property to check if a state is a final state, indicating that the machine has reached its terminal state.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/states.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst answeringMachine = createMachine({\n  initial: 'unanswered',\n  states: {\n    unanswered: {\n      on: {\n        ANSWER: { target: 'answered' }\n      }\n    },\n    answered: {\n      type: 'final'\n    }\n  }\n});\n\nconst { initialState } = answeringMachine;\ninitialState.done; // false\n\nconst answeredState = answeringMachine.transition(initialState, {\n  type: 'ANSWER'\n});\nansweredState.done; // true\n```\n\n----------------------------------------\n\nTITLE: Using Explicit IDs for Delayed Events\nDESCRIPTION: IDs for delayed events are no longer derived from event types. Explicit IDs must be used when raising and canceling delayed events.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nentry: raise({ type: 'TIMER' }, { delay: 200, id: 'myTimer' });\nexit: cancel('myTimer');\n```\n\n----------------------------------------\n\nTITLE: Implementing Guards in XState and SCXML\nDESCRIPTION: Shows how to implement guards (conditional transitions) in both XState and SCXML, including the use of the 'in' property for state-based conditions.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/scxml.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  on: {\n    e: {\n      target: 'foo',\n      cond: context => context.x === 1\n    }\n  }\n}\n```\n\nLANGUAGE: xml\nCODE:\n```\n<transition event=\"e\" cond=\"x == 1\" target=\"foo\" />\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  on: {\n    e: {\n      target: 'cooking',\n      in: '#closed'\n    }\n  }\n}\n```\n\nLANGUAGE: xml\nCODE:\n```\n<transition cond=\"In('closed')\" target=\"cooking\"/>\n```\n\n----------------------------------------\n\nTITLE: Example Response from Workflow Creation\nDESCRIPTION: JSON response example when a new workflow is successfully created, returning a status code of 201 and including a message with the new workflow ID.\nSOURCE: https://github.com/statelyai/xstate/blob/main/examples/mongodb-credit-check-api/README.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  {\"message\":\"New worflow created successfully\",\"workflowId\":\"uzkjyy\"}\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from onTransition to subscribe Method\nDESCRIPTION: Demonstrates how to replace the deprecated actor.onTransition() method with the new subscribe() method for observing state changes in an actor.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_45\n\nLANGUAGE: diff\nCODE:\n```\n const actor = interpret(machine)\n-  .onTransition(...)\n-  .start();\n+actor.subscribe(...);\n+actor.start();\n```\n\n----------------------------------------\n\nTITLE: Basic XState Usage Example\nDESCRIPTION: Demonstrates how to access XState's global variables and create a basic state machine with service interpretation.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/installation.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createMachine, actions, interpret } = XState; // global variable: window.XState\n\nconst lightMachine = createMachine({\n  // ...\n});\n\nconst lightService = interpret(lightMachine);\n```\n\n----------------------------------------\n\nTITLE: Including XState React via CDN\nDESCRIPTION: HTML script tag to include the XState React integration package from a CDN.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/packages/xstate-react/index.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/@xstate/react/dist/xstate-react.umd.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Type Extraction from XState Models\nDESCRIPTION: Shows how to extract context and event types from an XState model using ContextFrom and EventFrom utility types.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/guides/models.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ContextFrom, EventFrom } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nconst someModel = createModel(\n  {\n    /* ... */\n  },\n  {\n    events: {\n      /* ... */\n    }\n  }\n);\n\ntype SomeContext = ContextFrom<typeof someModel>;\ntype SomeEvent = EventFrom<typeof someModel>;\n```\n\n----------------------------------------\n\nTITLE: Configuring XState Inspector in JavaScript\nDESCRIPTION: Example of importing and configuring the XState inspector at the beginning of a project, before any other code is called. It shows how to set up the inspector with custom options.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/packages/xstate-inspect/index.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { inspect } from '@xstate/inspect';\n\ninspect({\n  // options\n  // url: 'https://stately.ai/viz?inspect', // (default)\n  iframe: false // open in new window\n});\n```\n\n----------------------------------------\n\nTITLE: Error Handling in XState Actors\nDESCRIPTION: Example of improved error handling in XState actors, showing how to subscribe to errors using the error handler.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_110\n\nLANGUAGE: typescript\nCODE:\n```\nactor.subscribe({\n  error: (error) => {\n    // handle error\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Action Order Preservation Example\nDESCRIPTION: Demonstrates the new preserveActionOrder setting that allows controlling the execution order of assign actions relative to other actions.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_165\n\nLANGUAGE: typescript\nCODE:\n```\n// With `.preserveActionOrder: true`\nconst machine = createMachine({\n  context: { count: 0 },\n  entry: [\n    (ctx) => console.log(ctx.count), // 0\n    assign({ count: (ctx) => ctx.count + 1 }),\n    (ctx) => console.log(ctx.count), // 1\n    assign({ count: (ctx) => ctx.count + 1 }),\n    (ctx) => console.log(ctx.count) // 2\n  ],\n  preserveActionOrder: true\n});\n\n// With `.preserveActionOrder: false` (default)\nconst machine = createMachine({\n  context: { count: 0 },\n  entry: [\n    (ctx) => console.log(ctx.count), // 2\n    assign({ count: (ctx) => ctx.count + 1 }),\n    (ctx) => console.log(ctx.count), // 2\n    assign({ count: (ctx) => ctx.count + 1 }),\n    (ctx) => console.log(ctx.count) // 2\n  ]\n  // preserveActionOrder: false\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing the App Component with React and XState\nDESCRIPTION: Main React application component that uses the Reddit machine to handle subreddit selection. It renders the Subreddit component when a subreddit is selected.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/tutorials/reddit.md#2025-04-20_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nconst App = () => {\n  const [current, send] = useMachine(redditMachine);\n  const { subreddit } = current.context;\n\n  return (\n    <main>\n      <header>{/* ... */}</header>\n      {subreddit && <Subreddit name={subreddit} key={subreddit} />}\n    </main>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Migrating from onDone to subscribe for Actor Completion\nDESCRIPTION: Shows how to migrate from the removed actor.onDone() method to the actor.subscribe() method with a complete callback for handling actor completion events.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_119\n\nLANGUAGE: typescript\nCODE:\n```\n- actor.onDone(() => { ... })\n+ actor.subscribe({\n+  complete() {\n+    // ...\n+  }\n+})\n```\n\n----------------------------------------\n\nTITLE: Complete Context Assigners for Type Safety in XState\nDESCRIPTION: Breaking change that requires complete context assigners that replace the entire context object, improving type safety by avoiding partial updates.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-store/CHANGELOG.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst store = createStore({\n  context: {\n    items: [],\n    count: 0\n  },\n  on: {\n-   increment: { count: (context) => context.count + 1 }\n-   increment: (context) => ({ count: context.count + 1 })\n+   increment: (context) => ({ ...context, count: context.count + 1 })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Stencil Toggle Component with XState\nDESCRIPTION: Creates a Stencil web component that uses the toggle machine. Handles component lifecycle, state management, and rendering of a toggle button based on machine state.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/recipes/stencil.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Component, h, State } from \"@stencil/core\";\nimport { interpret } from \"xstate\";\nimport { toggleMachine } from \"../helpers/toggle-machine\";\n\n@Component({\n  tag: \"my-toggle\",\n  styleUrl: \"toggle.css\",\n  shadow: true\n})\nexport class Toggle {\n  private _service = interpret(toggleMachine);\n\n  @State() state = this._service.getSnapshot();\n\n  componentWillLoad() {\n    this._service.subscribe(state => {\n      this.state = state;\n    });\n\n    this._service.start();\n  }\n\n  disconnectedCallback() {\n    this._service.stop();\n  }\n\n  render() {\n    const { send } = this._service;\n\n    return (\n      <button onClick={() => send(\"toggle\")}>\n        {this.state.value === \"inactive\" ? \"Off\" : \"On\"}\n      </button>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from interpret to createActor\nDESCRIPTION: Shows the migration from deprecated interpret() function to the new createActor() function.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_65\n\nLANGUAGE: diff\nCODE:\n```\n-import { interpret } from 'xstate';\n+import { createActor } from 'xstate';\n\n-const actor = interpret(machine);\n+const actor = createActor(machine);\n```\n\n----------------------------------------\n\nTITLE: Using state-based event resolution in XState Graph\nDESCRIPTION: Demonstrates how to use state-based event resolution in graph functions, where events can be generated dynamically based on the current state context.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-graph/CHANGELOG.md#2025-04-20_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nconst countMachine = createMachine({\n  initial: 'active',\n  context: {\n    count: 0\n  },\n  states: {\n    active: {\n      on: {\n        ADD: {\n          actions: assign({\n            count: (context, event) => {\n              return context.count + event.value;\n            }\n          })\n        }\n      }\n    }\n  }\n});\n\nconst shortestPaths = getShortestPaths(countMachine, {\n  events: {\n    ADD: (state) => {\n      // contrived example: if `context.count` is >= 10, increment by 10\n      return state.context.count >= 10\n        ? [{ type: 'ADD', value: 10 }]\n        : [{ type: 'ADD', value: 1 }];\n    }\n  }\n});\n\n// The keys to the shortest paths will look like:\n// \"active\" | { count: 0 }\n// \"active\" | { count: 1 }\n// \"active\" | { count: 2 }\n// ...\n// \"active\" | { count: 10 }\n// \"active\" | { count: 20 }\n// \"active\" | { count: 30 }\n```\n\n----------------------------------------\n\nTITLE: Using a Statechart Component in Handlebars Templates\nDESCRIPTION: Demonstrates how to use a statechart component in an Ember Handlebars template. The template receives the state and send function as yield parameters.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/recipes/ember.md#2025-04-20_snippet_3\n\nLANGUAGE: handlebars\nCODE:\n```\n<AuthenticatedToggle as |state send|>\n  {{state.value}}\n\n  <button {{on 'click' (fn send 'TOGGLE')}}>\n    Toggle\n  </button>\n</AuthenticatedToggle>\n```\n\n----------------------------------------\n\nTITLE: Basic Model Context Assignment in XState\nDESCRIPTION: Demonstrates basic model creation and context assignment using createModel, showing how to set initial context and use model.assign for type-safe context updates.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/guides/models.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createModel } from 'xstate/lib/model';\n\nconst userModel = createModel({\n  name: 'Someone',\n  age: 0\n});\n\n// ...\n\nconst machine = userModel.createMachine({\n  context: userModel.initialContext,\n  // ...\n  entry: userModel.assign({ name: '' })\n});\n```\n\n----------------------------------------\n\nTITLE: Emitting Events with No Payload in Store Configuration\nDESCRIPTION: Shows the pattern for emitting events without a payload in an XState store. The code defines an 'incremented' event that doesn't require parameters.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-store/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst store = createStore({\n  emits: {\n    incremented: () => {}\n  },\n  on: {\n    inc: (ctx, ev, enq) => {\n      // No payload is expected\n      enq.emit.incremented();\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Persisting and Rehydrating XState Machine State in React\nDESCRIPTION: Shows how to persist and rehydrate machine state using the options.state property of useMachine, retrieving state from localStorage or another source.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/packages/xstate-react/index.md#2025-04-20_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\n\n// Get the persisted state config object from somewhere, e.g. localStorage\nconst persistedState = JSON.parse(localStorage.getItem('some-persisted-state-key')) || someMachine.initialState;\n\nconst App = () => {\n  const [state, send] = useMachine(someMachine, {\n    state: persistedState // provide persisted state config object here\n  });\n\n  // state will initially be that persisted state, not the machine's initialState\n\n  return (/* ... */)\n}\n```\n\n----------------------------------------\n\nTITLE: Importing XState in Deno using Skypack CDN\nDESCRIPTION: This snippet demonstrates how to import the createMachine function from XState in a Deno environment using Skypack CDN. Unlike Node.js which uses local node_modules, Deno imports packages at runtime directly from URLs.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/recipes/deno.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine } from 'https://cdn.skypack.dev/xstate';\n```\n\n----------------------------------------\n\nTITLE: Displaying Frontmatter Title and Date in HTML\nDESCRIPTION: Vue template code for displaying the page title and formatted date from frontmatter data.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/updates/2021-10-15.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<h1>{{ $frontmatter.title }}</h1>\n<p class=\"date\">{{ new Date($frontmatter.date).toLocaleString('en-US',{ month:'long', day:'numeric', year:'numeric' }) }}</p>\n```\n\n----------------------------------------\n\nTITLE: Using Fluent Trigger API for Sending Events in XState\nDESCRIPTION: New feature that adds a store.trigger API for sending events with a fluent interface, providing better type safety for event names and payloads.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-store/CHANGELOG.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst store = createStore({\n  context: { count: 0 },\n  on: {\n    increment: (ctx, event: { by: number }) => ({\n      count: ctx.count + event.by\n    })\n  }\n});\n\n// Instead of manually constructing event objects:\nstore.send({ type: 'increment', by: 5 });\n\n// You can now use the fluent trigger API:\nstore.trigger.increment({ by: 5 });\n```\n\n----------------------------------------\n\nTITLE: Default Inspect Options Configuration\nDESCRIPTION: Example showing default configuration options for the XState inspector including iframe selection and URL.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/packages/xstate-inspect/index.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// defaults\ninspect({\n  iframe: () => document.querySelector('iframe[data-xstate]'),\n  url: 'https://stately.ai/viz?inspect'\n});\n\n// the above is the same as this:\ninspect();\n```\n\n----------------------------------------\n\nTITLE: Using fromCallback with All Properties in XState\nDESCRIPTION: Example showing how to use the fromCallback logic creator with merged properties including sendBack and receive.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_113\n\nLANGUAGE: typescript\nCODE:\n```\nconst callbackLogic = fromCallback(({ input, system, self, sendBack, receive }) => { ... });\n```\n\n----------------------------------------\n\nTITLE: Updating String Invocations to Object Syntax\nDESCRIPTION: Shows how to update the 'invoke' property to use the object syntax with 'src' instead of passing a string directly. This change improves clarity and consistency in the API.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_44\n\nLANGUAGE: diff\nCODE:\n```\n-invoke: 'myActor'\n+invoke: { src: 'myActor' }\n```\n\n----------------------------------------\n\nTITLE: Including XState via CDN Script Tag\nDESCRIPTION: HTML script tag to include XState directly from unpkg CDN in a web page.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/installation.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/xstate@4/dist/xstate.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Standard XState Integration with Svelte\nDESCRIPTION: Implements XState in a Svelte component using the interpret service with onTransition to track state changes.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/recipes/svelte.md#2025-04-20_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script>\n    import {interpret} from 'xstate';\n    import {toggleMachine} from './machine';\n\n    let current;\n\n    const toggleService = interpret(toggleMachine)\n        .onTransition((state) => {\n            current = state;\n        }).start()\n</script>\n\n<button on:click={() => toggleService.send({type:'TOGGLE'})}>\n    {current.matches('inactive') ? 'Off' : 'On'}\n</button>\n```\n\n----------------------------------------\n\nTITLE: Creating Basic XState Toggle Machine\nDESCRIPTION: Definition of a basic state machine for modeling a toggle system with active and inactive states\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/packages/xstate-test/index.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine } from 'xstate';\n\nconst toggleMachine = createMachine({\n  id: 'toggle',\n  initial: 'inactive',\n  states: {\n    inactive: {\n      on: {\n        TOGGLE: 'active'\n      }\n    },\n    active: {\n      on: {\n        TOGGLE: 'inactive'\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Hot Observable Reference in XState\nDESCRIPTION: Shows how to reference a hot observable (mouse movement events) in an XState machine instead of creating new observables for each invocation.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/communication.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { fromEvent } from 'rxjs';\n\nconst mouseMove$ = fromEvent(document.body, 'mousemove');\n\nconst mouseMachine = createMachine({\n  id: 'mouse',\n  // ...\n  invoke: {\n    src: (context, event) => mouseMove$\n  },\n  on: {\n    mousemove: {\n      /* ... */\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Action Parameters Access in XState\nDESCRIPTION: Shows how to directly access action parameters from the second argument of action implementations in XState machines.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_93\n\nLANGUAGE: typescript\nCODE:\n```\nconst machine = createMachine(\n  {\n    // ...\n    entry: {\n      type: 'greet',\n      params: { message: 'hello' }\n    }\n  },\n  {\n    actions: {\n      greet: (_, params) => {\n        params.message; // 'hello'\n      }\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Updated spawn usage in assignments\nDESCRIPTION: Shows new pattern for using spawn within assign actions\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_149\n\nLANGUAGE: javascript\nCODE:\n```\nassign((ctx, ev, { spawn }) => {\n  return {\n    ...ctx,\n    actorRef: spawn(promiseActor)\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Named Actions in XState Machine\nDESCRIPTION: Example of creating a state machine with named actions that can be implemented later in components.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/recipes/solid.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine } from 'xstate';\n\nexport const machine = createMachine({\n  initial: 'toggledOff',\n  states: {\n    toggledOff: {\n      on: {\n        TOGGLE: 'toggledOn'\n      }\n    },\n    toggledOn: {\n      entry: ['goToOtherPage']\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Dynamic Context Creation\nDESCRIPTION: Shows methods for creating machines with dynamic context values, including factory functions and withContext method.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/context.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst createCounterMachine = (count, time) => {\n  return createMachine({\n    id: 'counter',\n    // values provided from function arguments\n    context: {\n      count,\n      time\n    }\n    // ...\n  });\n};\n\nconst counterMachine = createCounterMachine(42, Date.now());\n```\n\n----------------------------------------\n\nTITLE: Running the state machine in Node.js with interpret\nDESCRIPTION: Example of running the Promise state machine in Node.js or vanilla JavaScript using the interpret function. This creates a service that can receive events and transition between states.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/start.md#2025-04-20_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport { createMachine, interpret } from 'xstate';\n\nconst promiseMachine = createMachine({\n  /* ... */\n});\n\nconst promiseService = interpret(promiseMachine).onTransition((state) =>\n  console.log(state.value)\n);\n\n// Start the service\npromiseService.start();\n// => 'pending'\n\npromiseService.send({ type: 'RESOLVE' });\n// => 'resolved'\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Context in XState (JavaScript)\nDESCRIPTION: Demonstrates how to set the initial context when creating an XState machine.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/context.md#2025-04-20_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst machine = createMachine({\n  // ...\n  context: {\n    count: 0,\n    user: undefined\n    // ...\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Required Context Types in Machine Config\nDESCRIPTION: Demonstrates that when context types are specified in the machine config, the context property becomes required. Shows both invalid and valid examples.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_114\n\nLANGUAGE: typescript\nCODE:\n```\n// ❌ TS error\ncreateMachine({\n  types: {} as {\n    context: { count: number };\n  }\n  // Missing context property\n});\n\n// ✅ OK\ncreateMachine({\n  types: {} as {\n    context: { count: number };\n  },\n  context: {\n    count: 0\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Logging with Serializer\nDESCRIPTION: TypeScript example showing how to implement a custom local log using the serialize option in the inspector configuration.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-inspect/README.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Add a custom local log\ninspect({\n  serialize: (key: string, value: any) => {\n    if (key === 'ready') {\n      console.log('Detected ready key');\n    }\n    return value;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using ember-statecharts with XState in Ember Component\nDESCRIPTION: This code snippet shows how to use the ember-statecharts addon to integrate an XState machine into an Ember component. It demonstrates the useMachine API and matchesState helper for state management.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/recipes/ember.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Component from '@glimmmer/component';\nimport { action } from '@ember/object';\n\nimport { useMachine, matchesState } from 'ember-statecharts';\n\n// @use (https://github.com/emberjs/rfcs/pull/567) is still WIP - polyfill it\nimport { use } from 'ember-usable';\n\nimport toggleMachine from './path/to/toggleMachine';\n\nexport default class ToggleComponent extends Component {\n  @use statechart = useMachine(toggleMachine);\n\n  @matchesState('active')\n  isActive;\n\n  @matchesState('inactive')\n  isInactive;\n\n  @action\n  toggle() {\n    this.statechart.send({ type: 'TOGGLE' });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Iframe Configuration Examples\nDESCRIPTION: Examples of configuring custom iframe selectors for the XState inspector.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/packages/xstate-inspect/index.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// 准确的\ninspect({\n  iframe: document.querySelector('iframe.some-xstate-iframe')\n});\n\n// 懒散的\ninspect({\n  iframe: () => document.querySelector('iframe.some-xstate-iframe')\n});\n```\n\n----------------------------------------\n\nTITLE: Using Relative Targets for State Nodes in XState\nDESCRIPTION: Shows how to target child state nodes relative to their parent using dot notation. The example demonstrates an options machine with transitions to different states using relative targeting.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/ids.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst optionsMachine = createMachine({\n  id: 'options',\n  initial: 'first',\n  states: {\n    first: {},\n    second: {},\n    third: {}\n  },\n  on: {\n    SELECT_FIRST: { target: '.first' }, // resolves to 'options.first'\n    SELECT_SECOND: { target: '.second' }, // 'options.second'\n    SELECT_THIRD: { target: '.third' } // 'options.third'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Reddit API Fetch Function\nDESCRIPTION: Defines a function that fetches subreddit data from the Reddit API, transforming the response into a usable format. This function returns a Promise for use with XState's invoke.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/tutorials/reddit.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction invokeFetchSubreddit(context) {\n  const { subreddit } = context;\n\n  return fetch(`https://www.reddit.com/r/${subreddit}.json`)\n    .then((response) => response.json())\n    .then((json) => json.data.children.map((child) => child.data));\n}\n\nconst redditMachine = createMachine({\n  /* ... */\n  states: {\n    idle: {},\n    selected: {\n      invoke: {\n        id: 'fetch-subreddit',\n        src: invokeFetchSubreddit\n      }\n    }\n  },\n  on: {\n    /* ... */\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Authenticated Toggle Template Usage\nDESCRIPTION: Shows the Handlebars template usage for the authenticated toggle component.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/recipes/ember.md#2025-04-20_snippet_3\n\nLANGUAGE: handlebars\nCODE:\n```\n<AuthenticatedToggle as |state send|>\n  {{state.value}}\n\n  <button {{on 'click' (fn send 'TOGGLE')}}>\n    Toggle\n  </button>\n</AuthenticatedToggle>\n```\n\n----------------------------------------\n\nTITLE: Accessing and Subscribing to XState Services in React Components\nDESCRIPTION: Demonstrates how to access the XState service created by useMachine and subscribe to its state changes using the useEffect hook. This allows for more advanced interactions with the state machine outside of the main render cycle.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/packages/xstate-react/index.md#2025-04-20_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n//                  vvvvvvv\nconst [state, send, service] = useMachine(someMachine);\n\n// ...\n\nuseEffect(() => {\n  const subscription = service.subscribe((state) => {\n    // simple state logging\n    console.log(state);\n  });\n\n  return subscription.unsubscribe;\n}, [service]); // note: service should never change\n```\n\n----------------------------------------\n\nTITLE: Using Standalone Service in Svelte Component\nDESCRIPTION: Demonstration of using a standalone XState service in a Svelte component with automatic subscription handling\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/packages/xstate-svelte/index.md#2025-04-20_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { toggleService } from './service';\n</script>\n\n<button on:click={() => toggleService.send({ type: 'TOGGLE' })}>\n  {$toggleService.value === 'inactive'\n    ? 'Click to activate'\n    : 'Active! Click to deactivate'}\n</button>\n```\n\n----------------------------------------\n\nTITLE: Merging State Metadata in XState\nDESCRIPTION: Utility function to merge metadata from multiple state nodes into a single flat object, discarding the state node ID keys.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/states.md#2025-04-20_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nfunction mergeMeta(meta) {\n  return Object.keys(meta).reduce((acc, key) => {\n    const value = meta[key];\n\n    // Assuming each meta value is an object\n    Object.assign(acc, value);\n\n    return acc;\n  }, {});\n}\n\nconst failureTimeoutState = fetchMachine.transition('loading', {\n  type: 'TIMEOUT'\n});\n\nconsole.log(mergeMeta(failureTimeoutState.meta));\n// => {\n//   alert: 'Uh oh.',\n//   message: 'The request timed out.'\n// }\n```\n\n----------------------------------------\n\nTITLE: Creating a Component Using ember-statechart-component\nDESCRIPTION: Shows how to define an Ember component directly as an XState statechart using ember-statechart-component. This approach allows for deep integration with Ember services through the getService helper.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/recipes/ember.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// app/components/authenticated-toggle.js\nimport { getService } from 'ember-statechart-component';\nimport { createMachine } from 'xstate';\n\nexport default createMachine(\n  {\n    initial: 'inactive',\n    states: {\n      inactive: {\n        on: {\n          TOGGLE: [\n            {\n              target: 'active',\n              cond: 'isAuthenticated'\n            },\n            { actions: ['notify'] }\n          ]\n        }\n      },\n      active: { on: { TOGGLE: 'inactive' } }\n    }\n  },\n  {\n    actions: {\n      notify: (ctx) => {\n        getService(ctx, 'toasts').notify('You must be logged in');\n      }\n    },\n    guards: {\n      isAuthenticated: (ctx) => getService(ctx, 'session').isAuthenticated\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Executable Content to Initial State Configuration\nDESCRIPTION: The '.initial' property of a state node config object can now contain executable content, such as actions. This allows for more flexible initial state configurations.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\ninitial: {\n  target: 'someTarget',\n  actions: [/* initial actions */]\n}\n```\n\n----------------------------------------\n\nTITLE: Matching States with Ternary Operators in JSX\nDESCRIPTION: Demonstrates using nested ternary operators with state.matches() directly in JSX to conditionally render components based on hierarchical machine states.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/packages/xstate-react/index.md#2025-04-20_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nconst Loader = () => {\n  const [state, send] = useMachine(/* ... */);\n\n  return (\n    <div>\n      {state.matches('idle') ? (\n        <Loader.Idle />\n      ) : state.matches({ loading: 'user' }) ? (\n        <Loader.LoadingUser />\n      ) : state.matches({ loading: 'friends' }) ? (\n        <Loader.LoadingFriends />\n      ) : null}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Testing XState Services with the Interpreter\nDESCRIPTION: This example shows how to test XState services by using the interpret function to create a service and assert that it eventually reaches an expected state. The test waits for the service to transition to a success state after sending an event.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/testing.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { fetchMachine } from '../path/to/fetchMachine';\n\nit('should eventually reach \"success\"', (done) => {\n  const fetchService = interpret(fetchMachine).onTransition((state) => {\n    // this is where you expect the state to eventually\n    // be reached\n    if (state.matches('success')) {\n      done();\n    }\n  });\n\n  fetchService.start();\n\n  // send zero or more events to the service that should\n  // cause it to eventually reach its expected state\n  fetchService.send({ type: 'FETCH', id: 42 });\n});\n```\n\n----------------------------------------\n\nTITLE: String Target Transitions in XState 4\nDESCRIPTION: Shows that the simplified string target syntax for transitions still works in XState 4, allowing for concise transition definitions when no additional properties are needed.\nSOURCE: https://github.com/statelyai/xstate/blob/main/migration.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst machine = createMachine({\n  // ...\n  states: {\n    green: {\n      on: {\n        // ✅ still works in v4\n        TIMER: 'yellow'\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using XState Services Directly in Svelte\nDESCRIPTION: Example showing how to use an XState service directly in a Svelte component by importing the service and accessing its state reactively with the $ prefix, taking advantage of Svelte's store contract support.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/packages/xstate-svelte/index.md#2025-04-20_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { toggleService } from './service';\n</script>\n\n<button on:click={() => toggleService.send({type:'TOGGLE'})}>\n  {$toggleService.value === 'inactive'\n    ? 'Click to activate'\n    : 'Active! Click to deactivate'}\n</button>\n```\n\n----------------------------------------\n\nTITLE: Specifying input types for machines in XState v5\nDESCRIPTION: Input types can now be specified for machines, providing strong typing for machine inputs.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_80\n\nLANGUAGE: typescript\nCODE:\n```\nconst emailMachine = createMachine({\n  types: {} as {\n    input: {\n      subject: string;\n      message: string;\n    };\n  },\n  context: ({ input }) => ({\n    // Strongly-typed input!\n    emailSubject: input.subject,\n    emailBody: input.message.trim()\n  })\n});\n\nconst emailActor = interpret(emailMachine, {\n  input: {\n    // Strongly-typed input!\n    subject: 'Hello, world!',\n    message: 'This is a test.'\n  }\n}).start();\n```\n\n----------------------------------------\n\nTITLE: Accessing guard parameters directly in XState v5\nDESCRIPTION: Guard parameters can now be directly accessed from the 2nd argument of the guard implementation.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_82\n\nLANGUAGE: typescript\nCODE:\n```\nconst machine = createMachine(\n  {\n    // ...\n    on: {\n      EVENT: {\n        guard: {\n          type: 'isGreaterThan',\n          params: { value: 10 }\n        }\n      }\n    }\n  },\n  {\n    guards: {\n      isGreaterThan: (_, params) => {\n        params.value; // 10\n      }\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: State Persistence and Restoration in XState\nDESCRIPTION: Demonstrates how to persist and restore state in XState using getPersistedState() and the interpret options.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_130\n\nLANGUAGE: typescript\nCODE:\n```\nconst actor = interpret(machine).start();\n\nconst persistedState = actor.getPersistedState();\n\n// ...\n\nconst restoredActor = interpret(machine, {\n  state: persistedState\n}).start();\n```\n\n----------------------------------------\n\nTITLE: Using waitFor Helper Function in XState\nDESCRIPTION: Shows how to use the waitFor helper function to asynchronously wait for an actor's emitted value to satisfy a predicate.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_154\n\nLANGUAGE: javascript\nCODE:\n```\nimport { waitFor } from 'xstate/lib/waitFor';\n\n// ...\nconst loginService = interpret(loginMachine).start();\n\nconst loggedInState = await waitFor(loginService, (state) =>\n  state.hasTag('loggedIn')\n);\n\nloggedInState.hasTag('loggedIn'); // true\n```\n\n----------------------------------------\n\nTITLE: Vue Component Example with useSelector Hook\nDESCRIPTION: Example showing how the useSelector hook from @xstate/react can be used with stores from @xstate/store in a Vue component.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-vue/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createStore } from '@xstate/store';\nimport { useSelector } from '@xstate/react';\n\nconst store = createStore(\n  {\n    count: 0\n  },\n  {\n    inc: {\n      count: (context) => context.count + 1\n    }\n  }\n);\n\nfunction Counter() {\n  // Note that this `useSelector` is from `@xstate/react`,\n  // not `@xstate/store/react`\n  const count = useSelector(store, (state) => state.context.count);\n\n  return (\n    <div>\n      <button onClick={() => store.send({ type: 'inc' })}>{count}</button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Loading XState Vue via CDN\nDESCRIPTION: HTML script tag to load XState Vue from CDN using unpkg\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/packages/xstate-vue/index.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/@xstate/vue/dist/xstate-vue.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Using typeof for Context Type Inference in XState (TypeScript)\nDESCRIPTION: Demonstrates a shorthand method for defining context types in XState using TypeScript's typeof operator.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/context.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst context = {\n  count: 0,\n  user: { name: '' }\n};\n\nconst machine = createMachine({\n  schema: {\n    context: {} as typeof context\n  },\n  // ...\n  context\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Application Setup with XState Inspect\nDESCRIPTION: Setup code for the application that will be inspected, showing how to enable devTools for interpretation of state machines.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-inspect/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { inspect } from '@xstate/inspect';\n\ninspect(/* options */);\n\n// ...\n\ninterpret(someMachine, { devTools: true }).start();\n```\n\n----------------------------------------\n\nTITLE: Using Raise Action in XState State Machine (JavaScript)\nDESCRIPTION: Illustrates the usage of the raise action creator to queue an event to the statechart in the internal event queue. This action sends the event immediately on the current 'step' of the interpreter.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/actions.md#2025-04-20_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine, raise } from 'xstate';\n\nconst raiseActionDemo = createMachine({\n  id: 'raisedmo',\n  initial: 'entry',\n  states: {\n    entry: {\n      on: {\n        STEP: {\n          target: 'middle'\n        },\n        RAISE: {\n          target: 'middle',\n          // immediately invoke the NEXT event for 'middle'\n          actions: raise({ type: 'NEXT' })\n        }\n      }\n    },\n    middle: {\n      on: {\n        NEXT: { target: 'last' }\n      }\n    },\n    last: {\n      on: {\n        RESET: { target: 'entry' }\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Explicit TypeScript Interface with XState Store\nDESCRIPTION: Demonstrates how to make the context type more specific by defining an interface outside of createStore and passing in the strongly typed context object.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-store/README.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createStore } from '@xstate/store';\n\ninterface DonutContext {\n  donuts: number;\n  favoriteFlavor: 'chocolate' | 'strawberry' | 'blueberry';\n}\n\nconst donutContext: DonutContext = {\n  donuts: 0,\n  favoriteFlavor: 'chocolate'\n};\n\nconst donutStore = createStore({\n  context: donutContext,\n  on: {\n    // ... (transitions go here)\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Emitted Event Types in XState Store Configuration\nDESCRIPTION: New feature that allows defining emitted event types in the store definition, providing type safety and a place to execute side effects when events are emitted.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-store/CHANGELOG.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst store = createStore({\n  // …\n  emits: {\n    increased: (payload: { upBy: number }) => {\n      // You can execute a side-effect here\n      // or leave it empty\n    }\n  },\n  on: {\n    inc: (ctx, ev: { by: number }, enq) => {\n      enq.emit.increased({ upBy: ev.by });\n\n      // …\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Installing XState via NPM\nDESCRIPTION: Command to install the XState package using NPM package manager. This is the first step to start using XState in your JavaScript or TypeScript project.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install xstate\n```\n\n----------------------------------------\n\nTITLE: Sending Explicit Updates from Child to Parent in XState\nDESCRIPTION: This snippet demonstrates how to use the sendUpdate() function to explicitly send state updates from a child machine to its parent, rather than relying on automatic synchronization.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/actors.md#2025-04-20_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine, sendUpdate } from 'xstate';\n\nconst childMachine = createMachine({\n  // ...\n  on: {\n    SOME_EVENT: {\n      actions: [\n        // ...\n        // Creates an action that sends an update event to parent\n        sendUpdate()\n      ]\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Test Plans and Coverage\nDESCRIPTION: Setup of test plans with paths and coverage verification using Jest-style test structure\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/packages/xstate-test/index.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('toggle', () => {\n  const testPlans = toggleModel.getShortestPathPlans();\n\n  testPlans.forEach((plan) => {\n    describe(plan.description, () => {\n      plan.paths.forEach((path) => {\n        it(path.description, async () => {\n          // do any setup, then...\n\n          await path.test(page);\n        });\n      });\n    });\n  });\n\n  it('should have full coverage', () => {\n    return toggleModel.testCoverage();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing XState Inspector\nDESCRIPTION: JavaScript code that initializes the XState inspector with basic configuration options. This should be placed at the beginning of your project.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-inspect/README.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { inspect } from '@xstate/inspect';\n\ninspect({\n  // options\n  // url: 'https://stately.ai/viz?inspect', // (default)\n  iframe: false // open in new window\n});\n```\n\n----------------------------------------\n\nTITLE: Spawning Actors in Initial Context\nDESCRIPTION: Shows how to spawn actors directly in the initial machine context using lazy initialization to avoid intermediate states.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_169\n\nLANGUAGE: typescript\nCODE:\n```\nconst machine = createMachine<{ ref: ActorRef<SomeEvent> }>({\n  context: () => ({\n    ref: spawn(anotherMachine, 'some-id') // spawn immediately!\n  })\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Syncing External Data with XState using createEffect\nDESCRIPTION: Example of synchronizing external data fetching with XState using SolidJS createEffect and createResource.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/recipes/solid.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createResource, createEffect } from 'solid-js';\nimport { useMachine } from '@xstate/solid';\n\nconst Component = () => {\n  const [result, { mutate, refetch }] = createResource(() =>\n    fetch('/api/user').then((r) => r.json())\n  );\n  const [state, send] = useMachine(machine);\n\n  createEffect(() => {\n    send({\n      type: 'DATA_CHANGED',\n      data: result(),\n      error: result.error\n    });\n  });\n\n  return null;\n};\n```\n\n----------------------------------------\n\nTITLE: Persisting and Restoring State without State Instance Conversion\nDESCRIPTION: Example showing how to persist a state to localStorage and restore it directly in the interpreter without first converting it to a State instance.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_157\n\nLANGUAGE: javascript\nCODE:\n```\n// Persisting a state\nsomeService.subscribe((state) => {\n  localStorage.setItem('some-state', JSON.stringify(state));\n});\n\n// Restoring a state\nconst stateJson = localStorage.getItem('some-state');\n\n// No need to convert `stateJson` object to a state!\nconst someService = interpret(someMachine).start(stateJson);\n```\n\n----------------------------------------\n\nTITLE: Importing Actor Type Definitions from XState\nDESCRIPTION: Shows how to import various actor type definitions from XState for use with TypeScript. These types help with type checking when working with different kinds of actors.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_100\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  type CallbackActorLogic,\n  type ObservableActorLogic,\n  type PromiseActorLogic,\n  type TransitionActorLogic\n} from 'xstate';\n```\n\n----------------------------------------\n\nTITLE: Standalone XState Service Implementation\nDESCRIPTION: Example of creating and exporting a standalone XState service that implements the Svelte store contract\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/packages/xstate-svelte/index.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// service.js\n\nimport { createMachine, interpret } from 'xstate';\n\nconst toggleMachine = createMachine({\n  id: 'toggle',\n  initial: 'inactive',\n  states: {\n    inactive: {\n      on: { TOGGLE: 'active' }\n    },\n    active: {\n      on: { TOGGLE: 'inactive' }\n    }\n  }\n});\n\nexport const toggleService = interpret(toggleMachine).start();\n```\n\n----------------------------------------\n\nTITLE: Actor Spawning with ID Example\nDESCRIPTION: Shows how existing actors can be identified in spawn calls by providing an ID, allowing them to be referenced by string.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_166\n\nLANGUAGE: typescript\nCODE:\n```\nconst machine = createMachine({\n  context: () => ({\n    someRef: spawn(someExistingRef, 'something')\n  }),\n  on: {\n    SOME_EVENT: {\n      actions: send('AN_EVENT', { to: 'something' })\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Timer Context Interface in TypeScript\nDESCRIPTION: This snippet defines the TypeScript interface for the timer's context, including elapsed time, duration, and interval.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/tutorials/7guis/timer.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TimerContext {\n  // The elapsed time (in seconds)\n  elapsed: number;\n  // The maximum time (in seconds)\n  duration: number;\n  // The interval to send TICK events (in seconds)\n  interval: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Persisting and Rehydrating XState in SolidJS\nDESCRIPTION: Example showing how to persist and rehydrate XState machine state using the useActor hook's snapshot option in SolidJS components.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-solid/README.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\n\n// Get the persisted state config object from somewhere, e.g. localStorage\nconst persistedSnapshot = JSON.parse(localStorage.getItem('some-persisted-state-key')) || someMachine.initialState;\n\nconst App = () => {\n  const [snapshot, send] = useActor(someMachine, {\n    snapshot: persistedSnapshot\n  });\n\n  // snapshot will rehydrate the provided persisted snapshot, it won't be the machine's initial snapshot\n\n  return (/* ... */)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an RxJS Observable from an XState Service\nDESCRIPTION: This code demonstrates how to convert an XState interpreted machine (service) into an RxJS observable. The service is started and then converted to an observable using RxJS's 'from' operator, allowing you to subscribe to state changes.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/recipes/rxjs.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine, interpret } from 'xstate';\nimport { from } from 'rxjs';\n\nconst machine = createMachine(/* ... */);\nconst service = interpret(machine).start();\n\nconst state$ = from(service);\n\nstate$.subscribe((state) => {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Events to Callback Actors in XState\nDESCRIPTION: Example showing how to send events to a spawned callback actor. The machine forwards an 'INC' event to the counter reference.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/actors.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst machine = createMachine({\n  // ...\n  on: {\n    'COUNTER.INC': {\n      actions: send({ type: 'INC' }, { to: (context) => context.counterRef })\n    }\n  }\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Installing XState with React\nDESCRIPTION: Command to install the required packages for using XState with React. This installs both the core XState library and the React integration package.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-react/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i xstate @xstate/react\n```\n\n----------------------------------------\n\nTITLE: Using useInterpret Hook with React and XState\nDESCRIPTION: Example of using the useInterpret hook to create a service from an XState machine in a React component.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/packages/xstate-react/index.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useInterpret } from '@xstate/react';\nimport { someMachine } from '../path/to/someMachine';\n\nconst App = () => {\n  const service = useInterpret(someMachine);\n\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Configurable Fetch Machine Example\nDESCRIPTION: Implementation of a configurable fetch machine with success/failure states and custom actions/services\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/packages/xstate-svelte/index.md#2025-04-20_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { useMachine } from '@xstate/svelte';\n  import { createMachine, assign } from 'xstate';\n\n  const fetchMachine = createMachine({\n    id: 'fetch',\n    initial: 'idle',\n    context: {\n      data: undefined,\n      error: undefined\n    },\n    states: {\n      idle: {\n        on: { FETCH: 'loading' }\n      },\n      loading: {\n        invoke: {\n          src: 'fetchData',\n          onDone: {\n            target: 'success',\n            actions: assign({\n              data: (_, event) => event.data\n            })\n          },\n          onError: {\n            target: 'failure',\n            actions: assign({\n              error: (_, event) => event.data\n            })\n          }\n        }\n      },\n      success: {\n        entry: 'notifySuccess',\n        type: 'final'\n      },\n      failure: {\n        on: {\n          RETRY: 'loading'\n        }\n      }\n    }\n  });\n\n  const onResolve = (data) => {\n    // Do something with data\n  };\n\n  const { state, send } = useMachine(fetchMachine, {\n    actions: {\n      notifySuccess: (context) => onResolve(context.data)\n    },\n    services: {\n      fetchData: (_, event) =>\n        fetch(`some/api/${event.query}`).then((res) => res.json())\n    }\n  });\n</script>\n\n{#if $state.value === 'idle'}\n  <button on:click={() => send({ type: 'FETCH', query: 'something' })}>\n    Search for something\n  </button>\n{:else if $state.value === 'loading'}\n  <div>Searching...</div>\n{:else if $state.value === 'success'}\n  <div>Success! Data: {$state.context.data}</div>\n{:else if $state.value === 'failure'}\n  <p>{$state.context.error.message}</p>\n  <button on:click={() => send('RETRY')}>Retry</button>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Initializing XState Inspector\nDESCRIPTION: Initial setup code to import and configure the XState inspector with basic options.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/packages/xstate-inspect/index.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { inspect } from '@xstate/inspect';\n\ninspect({\n  // options\n  // url: 'https://stately.ai/viz?inspect', // (default)\n  iframe: false // 打开新窗口\n});\n```\n\n----------------------------------------\n\nTITLE: Using enqueueActions instead of pure() in XState v5\nDESCRIPTION: The pure() action creator has been replaced with the more flexible enqueueActions() action creator that allows for programmatically enqueueing actions.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_57\n\nLANGUAGE: typescript\nCODE:\n```\nentry: [\n  // pure(() => {\n  //   return [\n  //     'action1',\n  //     'action2'\n  //   ]\n  // }),\n  enqueueActions(({ enqueue }) => {\n    enqueue('action1');\n    enqueue('action2');\n  })\n];\n```\n\n----------------------------------------\n\nTITLE: Including XState via CDN script tag\nDESCRIPTION: Shows how to include XState directly in HTML using a CDN script tag. This method makes XState available as a global variable in the browser environment.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/installation.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/xstate@4/dist/xstate.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Using Selectors for Efficient State Selection and Subscription\nDESCRIPTION: Demonstrates using the select method to create a selector that efficiently tracks and subscribes to specific parts of the store state, with support for custom equality functions.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-store/CHANGELOG.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst store = createStore({\n  context: {\n    position: { x: 0, y: 0 },\n name: 'John', age: 30 }\n  },\n  on: {\n    positionUpdated: (\n      context,\n      event: { position: { x: number; y: number } }\n    ) => ({\n      ...context,\n      position: event.position\n    })\n  }\n});\n\nconst position = store.select((state) => state.context.position);\n\nposition.get(); // { x: 0, y: 0 }\n\nposition.subscribe((position) => {\n  console.log(position);\n});\n\nstore.trigger.positionUpdated({ x: 100, y: 200 });\n// Logs: { x: 100, y: 200 }\n```\n\n----------------------------------------\n\nTITLE: Chaining Interpreter Methods in XState\nDESCRIPTION: Shows how to chain multiple interpreter methods together for a more concise setup of an XState service with various listeners.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/interpretation.md#2025-04-20_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst service = interpret(machine)\n  .onTransition((state) => console.log(state))\n  .onDone(() => console.log('done'))\n  .start(); // returns started service\n```\n\n----------------------------------------\n\nTITLE: State Matching with Ternary Operators in React JSX\nDESCRIPTION: Shows how to use ternary operators for state matching within JSX components.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/packages/xstate-react/index.md#2025-04-20_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nconst Loader = () => {\n  const [state, send] = useMachine(/* ... */);\n\n  return (\n    <div>\n      {state.matches('idle') ? (\n        <Loader.Idle />\n      ) : state.matches({ loading: 'user' }) ? (\n        <Loader.LoadingUser />\n      ) : state.matches({ loading: 'friends' }) ? (\n        <Loader.LoadingFriends />\n      ) : null}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using useActor with a Spawned Actor in Vue\nDESCRIPTION: JavaScript example showing how to use the useActor composition function to subscribe to an actor's state changes.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/packages/xstate-vue/index.md#2025-04-20_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { useActor } from '@xstate/vue';\n\nconst props = defineProps(['someSpawnedActor']);\n\nconst { state, send } = useActor(props.someSpawnedActor);\n```\n\n----------------------------------------\n\nTITLE: Creating Authenticated Toggle with ember-statechart-component\nDESCRIPTION: Demonstrates creating an authenticated toggle component using ember-statechart-component with service integration.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/recipes/ember.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// app/components/authenticated-toggle.js\nimport { getService } from 'ember-statechart-component';\nimport { createMachine } from 'xstate';\n\nexport default createMachine(\n  {\n    initial: 'inactive',\n    states: {\n      inactive: {\n        on: {\n          TOGGLE: [\n            {\n              target: 'active',\n              cond: 'isAuthenticated'\n            },\n            { actions: ['notify'] }\n          ]\n        }\n      },\n      active: { on: { TOGGLE: 'inactive' } }\n    }\n  },\n  {\n    actions: {\n      notify: (ctx) => {\n        getService(ctx, 'toasts').notify('You must be logged in');\n      }\n    },\n    guards: {\n      isAuthenticated: (ctx) => getService(ctx, 'session').isAuthenticated\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Installing XState and Svelte Dependencies\nDESCRIPTION: Command to install XState and its Svelte integration package via npm\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/packages/xstate-svelte/index.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i xstate @xstate/svelte\n```\n\n----------------------------------------\n\nTITLE: Configuring Rollup Replace Plugin for Node Environment\nDESCRIPTION: Adds the replace plugin to the Rollup configuration to properly set the Node environment variable.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/recipes/svelte.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nreplace({\n  'process.env.NODE_ENV': process.env.NODE_ENV\n});\n```\n\n----------------------------------------\n\nTITLE: Updating from getMachineShortestPaths to getShortestPaths in XState\nDESCRIPTION: Shows the migration from deprecated getMachineShortestPaths and getMachineSimplePaths functions to their new names getShortestPaths and getSimplePaths in @xstate/graph.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-graph/CHANGELOG.md#2025-04-20_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\nimport {\n- getMachineShortestPaths,\n+ getShortestPaths,\n- getMachineSimplePaths,\n+ getSimplePaths\n} from '@xstate/graph';\n\n-const paths = getMachineShortestPaths(machine);\n+const paths = getShortestPaths(machine);\n\n-const paths = getMachineSimplePaths(machine);\n+const paths = getSimplePaths(machine);\n```\n\n----------------------------------------\n\nTITLE: Creating a Toggle Machine in XState\nDESCRIPTION: This snippet demonstrates how to create a decoupled XState machine for a toggle functionality. The machine has two states: 'inactive' and 'active', with a TOGGLE event to switch between them.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/recipes/ember.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine } from 'xstate';\n\n// This machine is completely decoupled from Ember\nexport const toggleMachine = createMachine({\n  id: 'toggle',\n  context: {\n    /* some data */\n  },\n  initial: 'inactive',\n  states: {\n    inactive: {\n      on: { TOGGLE: 'active' }\n    },\n    active: {\n      on: { TOGGLE: 'inactive' }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Dynamic Delay Expressions in XState\nDESCRIPTION: Shows how to use dynamic delay expressions with context and configuration to determine transition timing.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/delays.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst lightDelayMachine = createMachine(\n  {\n    id: 'lightDelay',\n    initial: 'green',\n    context: {\n      trafficLevel: 'low'\n    },\n    states: {\n      green: {\n        after: {\n          // after 1 second, transition to yellow\n          LIGHT_DELAY: { target: 'yellow' }\n        }\n      },\n      yellow: {\n        after: {\n          YELLOW_LIGHT_DELAY: { target: 'red' }\n        }\n      }\n      // ...\n    }\n  },\n  {\n    // String delays configured here\n    delays: {\n      LIGHT_DELAY: (context, event) => {\n        return context.trafficLevel === 'low' ? 1000 : 3000;\n      },\n      YELLOW_LIGHT_DELAY: 500 // static value\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating an Event Object with Additional Properties in JavaScript\nDESCRIPTION: Illustrates how to create an event object with additional properties beyond the type, useful for passing associated data.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/events.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst keyDownEvent = {\n  type: 'keydown',\n  key: 'Enter'\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Serializer for XState Inspect\nDESCRIPTION: Example demonstrating how to specify a custom serializer function for the inspect method to handle special object types like Map instances.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-inspect/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ninspect({\n  // ...\n  serialize: (key, value) => {\n    if (value instanceof Map) {\n      return 'map';\n    }\n\n    return value;\n  }\n});\n\n// ...\n\n// Will be inspected as:\n// {\n//   type: 'EVENT_WITH_MAP',\n//   map: 'map'\n// }\nsomeService.send({\n  type: 'EVENT_WITH_MAP',\n  map: new Map()\n});\n```\n\n----------------------------------------\n\nTITLE: Generated Invocation IDs Example in XState\nDESCRIPTION: Demonstrates how invocation IDs are generated based on state IDs to avoid collisions when no explicit ID is provided. The IDs are now prefixed with the full state path.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_161\n\nLANGUAGE: javascript\nCODE:\n```\ncreateMachine({\n  id: 'test',\n  initial: 'p',\n  states: {\n    p: {\n      type: 'parallel',\n      states: {\n        // Before this change, both invoke IDs would be 'someSource',\n        // which is incorrect.\n        a: {\n          invoke: {\n            src: 'someSource'\n            // generated invoke ID: 'test.p.a:invocation[0]'\n          }\n        },\n        b: {\n          invoke: {\n            src: 'someSource'\n            // generated invoke ID: 'test.p.b:invocation[0]'\n          }\n        }\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Reducer Behavior in XState Actors\nDESCRIPTION: Demonstrates how to invoke/spawn actors from reducers using the fromReducer behavior creator function.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_168\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fromReducer } from 'xstate/lib/behaviors';\n\ntype CountEvent = { type: 'INC' } | { type: 'DEC' };\n\nconst countReducer = (count: number, event: CountEvent): number => {\n  if (event.type === 'INC') {\n    return count + 1;\n  } else if (event.type === 'DEC') {\n    return count - 1;\n  }\n\n  return count;\n};\n\nconst countMachine = createMachine({\n  invoke: {\n    id: 'count',\n    src: () => fromReducer(countReducer, 0)\n  },\n  on: {\n    INC: {\n      actions: forwardTo('count')\n    },\n    DEC: {\n      actions: forwardTo('count')\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Keyboard Shortcuts in XState Visualizer\nDESCRIPTION: Lists the keyboard shortcuts for common operations in the XState Visualizer, including saving to registry, visualizing code, and accessing the command palette.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/visualizer/README.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- CMD + S Saves or updates the code in Stately Registry\n- CMD + Enter Visualizes the current editor code\n- CMD + K Show the Command palette\n- Shift + ? Show the Command palette\n```\n\n----------------------------------------\n\nTITLE: Migrating from Machine to createMachine\nDESCRIPTION: Shows migration from deprecated Machine function to createMachine\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_148\n\nLANGUAGE: diff\nCODE:\n```\n-import { Machine } from 'xstate';\n+import { createMachine } from 'xstate';\n\n-const machine = Machine({\n+const machine = createMachine({\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Merging Machine Configuration in useMachine Options\nDESCRIPTION: Shows how machine configuration can be merged into the options argument of useMachine, allowing for custom actions, services, guards, and other options.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-react/CHANGELOG.md#2025-04-20_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst [current, send] = useMachine(someMachine, {\n  actions: {\n    doThing: doTheThing\n  },\n  services: {\n    /* ... */\n  },\n  guards: {\n    /* ... */\n  }\n  // ... etc.\n});\n```\n\n----------------------------------------\n\nTITLE: Installing XState with Svelte\nDESCRIPTION: NPM installation command for xstate and @xstate/svelte packages\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/packages/xstate-svelte/index.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i xstate @xstate/svelte\n```\n\n----------------------------------------\n\nTITLE: Reddit App React Component Implementation\nDESCRIPTION: Main React component that implements the Reddit application using the redditMachine and Subreddit component.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/tutorials/reddit.md#2025-04-20_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nconst App = () => {\n  const [current, send] = useMachine(redditMachine);\n  const { subreddit } = current.context;\n\n  return (\n    <main>\n      <header>{/* ... */}</header>\n      {subreddit && <Subreddit name={subreddit} key={subreddit} />}\n    </main>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Sending Events to Workflow - POST Request\nDESCRIPTION: cURL command demonstrating how to send events to a specific workflow instance by ID, including the required JSON payload and content type header.\nSOURCE: https://github.com/statelyai/xstate/blob/main/examples/express-workflow/README.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:4242/workflows/:id -d '{\"type\": \"TIMER\"}' -H \"Content-Type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Scheduling Actions in useEffect with asEffect in XState React\nDESCRIPTION: Demonstrates using asEffect to queue machine actions to be executed in useEffect, which is useful for DOM manipulations like focusing elements.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-react/CHANGELOG.md#2025-04-20_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createMachine } from 'xstate';\nimport { useMachine, asEffect } from '@xstate/react';\n\nconst machine = createMachine({\n  initial: 'focused',\n  states: {\n    focused: {\n      entry: 'focus'\n    }\n  }\n});\n\nconst Input = () => {\n  const inputRef = useRef(null);\n  const [state, send] = useMachine(machine, {\n    actions: {\n      focus: asEffect(() => {\n        inputRef.current && inputRef.current.focus();\n      })\n    }\n  });\n\n  return <input ref={inputRef} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Installing XState and XState Graph Package\nDESCRIPTION: Instructions for installing the xstate and @xstate/graph packages using npm.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/packages/xstate-graph/index.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install xstate @xstate/graph\n```\n\n----------------------------------------\n\nTITLE: Implementing Type-Safe Actions with XState Typegen\nDESCRIPTION: Using the second parameter of createMachine to implement type-safe actions. The typegen system ensures that event types are correctly narrowed based on the transitions that trigger the actions.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/typescript.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst machine = createMachine(\n  {\n    /* ... */\n  },\n  {\n    actions: {\n      consoleLogValue: (context, event) => {\n        // Wow! event is typed to { type: 'FOO' }\n        console.log(event.value);\n      },\n      consoleLogValueAgain: (context, event) => {\n        // Wow! event is typed to { type: 'FOO' }\n        console.log(event.value);\n      }\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Updated createStoreWithProducer API in TypeScript\nDESCRIPTION: Breaking change that simplifies the createStoreWithProducer function to accept only a producer and a configuration object, aligning with the new API pattern.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-store/CHANGELOG.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// Before\n// createStoreWithProducer(\n//   producer,\n//   {\n//     count: 0\n//   },\n//   {\n//     increment: (context) => {\n//       context.count++;\n//     }\n//   }\n// );\n\n// After\ncreateStoreWithProducer(producer, {\n  context: {\n    count: 0\n  },\n  on: {\n    increment: (context) => {\n      context.count++;\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using useActor for Subscribing to Actor Changes in Vue\nDESCRIPTION: The useActor composable subscribes to emitted changes from an existing actor and returns the current state and a send function to dispatch events to the actor. It's used within a Vue component's setup function.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-vue/CHANGELOG.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useActor } from '@xstate/vue';\n\nexport default defineComponent({\n  props: ['someSpawnedActor'],\n  setup(props) {\n    const { state, send } = useActor(props.someSpawnedActor);\n    return { state, send };\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying Initial State for Compound State Nodes\nDESCRIPTION: An error will now be thrown if an 'initial' state key is not specified for compound state nodes. This helps catch potential issues in state machine configurations.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nconst lightMachine = createMachine({\n  id: 'light',\n  initial: 'green',\n  states: {\n    green: {},\n    yellow: {},\n    red: {\n      // Forgotten initial state:\n      // initial: 'walk',\n      states: {\n        walk: {},\n        wait: {}\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Toggle Machine Implementation\nDESCRIPTION: Example of using useMachine hook with a simple toggle state machine in Svelte\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/packages/xstate-svelte/index.md#2025-04-20_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { useMachine } from '@xstate/svelte';\n  import { createMachine } from 'xstate';\n\n  const toggleMachine = createMachine({\n    id: 'toggle',\n    initial: 'inactive',\n    states: {\n      inactive: {\n        on: { TOGGLE: 'active' }\n      },\n      active: {\n        on: { TOGGLE: 'inactive' }\n      }\n    }\n  });\n\n  const { state, send } = useMachine(toggleMachine);\n</script>\n\n<button on:click={() => send('TOGGLE')}>\n  {$state.value === 'inactive'\n    ? 'Click to activate'\n    : 'Active! Click to deactivate'}\n</button>\n```\n\n----------------------------------------\n\nTITLE: Creating XState Toggle Machine\nDESCRIPTION: Defines a simple XState machine with inactive and active states and a TOGGLE event to switch between them.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/recipes/svelte.md#2025-04-20_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { createMachine } from 'xstate';\n\n// This machine is completely decoupled from Svelte\nexport const toggleMachine = createMachine({\n  id: 'toggle',\n  initial: 'inactive',\n  states: {\n    inactive: {\n      on: { TOGGLE: 'active' }\n    },\n    active: {\n      on: { TOGGLE: 'inactive' }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Importing XState Actions Directly\nDESCRIPTION: Example showing how to import the 'raise' and 'sendTo' actions directly from the XState library, which is a newer feature introduced in version 4.34.0.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_135\n\nLANGUAGE: javascript\nCODE:\n```\nimport { raise, sendTo } from 'xstate';\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Embedding XState Visualizer - Basic Example\nDESCRIPTION: HTML iframe code for embedding an XState visualization with basic configuration settings. Includes necessary permissions and sandbox attributes.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/visualizer/README.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe src=\"https://stately.ai/viz/embed/7c0ec648-09d6-46fe-a912-fc0e46da5094?mode=viz&panel=code&readOnly=1&showOriginalLink=1&controls=0&pan=0&zoom=0\"\nallow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\nsandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n></iframe>\n```\n\n----------------------------------------\n\nTITLE: Updating the Action/Actor Arguments Signature\nDESCRIPTION: Shows how to update functions used in actions, actors, delays, and guards to use the new consolidated object argument pattern instead of separate arguments for context and event.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_42\n\nLANGUAGE: diff\nCODE:\n```\nassign({\n- count: (context, event) => {\n+ count: ({ context, event }) => {\n    return context.count + event.value;\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using useActor Hook with getSnapshot Function\nDESCRIPTION: Shows how to use the useActor hook with a getSnapshot function that returns the last emitted value from an actor.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-react/CHANGELOG.md#2025-04-20_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst [state, send] = useActor(someActor, (actor) => actor.current);\n```\n\n----------------------------------------\n\nTITLE: Creating a Toggle State Machine with XState\nDESCRIPTION: Defines a simple toggle state machine using XState's createMachine API. The machine has two states (active and inactive) with transitions between them triggered by a 'toggle' event.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/recipes/stencil.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine } from 'xstate';\n\nexport const toggleMachine = createMachine({\n  id: 'toggle',\n  initial: 'active',\n  states: {\n    inactive: { on: { toggle: 'active' } },\n    active: { on: { toggle: 'inactive' } }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Page Title and Date in HTML\nDESCRIPTION: This HTML snippet displays the page title from frontmatter data and formats the date using JavaScript's toLocaleString method. It demonstrates how to use Vue.js-style template syntax to inject dynamic content into HTML.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/updates/2023-01-26.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<h1>{{ $frontmatter.title }}</h1>\n<p class=\"date\">{{ new Date($frontmatter.date).toLocaleString('en-US',{ month:'long', day:'numeric', year:'numeric' }) }}</p>\n```\n\n----------------------------------------\n\nTITLE: Replacing Sync Testing Methods with Async in XState Graph\nDESCRIPTION: Example showing the removal of synchronous testing methods in favor of asynchronous alternatives. This change ensures consistency in the testing API for state machines.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-graph/CHANGELOG.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nmodel.getShortestPaths().forEach(async (path) => {\n- model.testPathSync(path, {\n+ await model.testPath(path, {\n    states: { /* ... */ },\n    events: { /* ... */ },\n  });\n})\n```\n\n----------------------------------------\n\nTITLE: State Machine Transition Example\nDESCRIPTION: Demonstrates how to create a state machine and handle transitions using different event formats.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/events.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine } from 'xstate';\n\nconst lightMachine = createMachine({\n  /* ... */\n});\n\nconst { initialState } = lightMachine;\n\nlet nextState = lightMachine.transition(initialState, { type: 'TIMER' }); // string event\nconsole.log(nextState.value);\n// => 'yellow'\n\nnextState = lightMachine.transition(nextState, { type: { type: 'TIMER' } }); // event object\nconsole.log(nextState.value);\n// => 'red'\n```\n\n----------------------------------------\n\nTITLE: Configuring Duplicate Paths in XState Graph\nDESCRIPTION: Example demonstrating how to allow duplicate paths when generating simple paths in a test model. By default, duplicates are filtered out, but setting allowDuplicatePaths to true includes all possible paths.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-graph/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst paths = model.getSimplePaths({\n  allowDuplicatePaths: true\n});\n// a\n// a -> b\n// a -> b -> c\n// a -> d\n// a -> d -> e\n\nconst paths = model.getSimplePaths();\n// a -> b -> c\n// a -> d -> e\n```\n\n----------------------------------------\n\nTITLE: Installing XState Package\nDESCRIPTION: Simple npm installation command for adding XState to a project.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/packages/core/index.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install xstate\n```\n\n----------------------------------------\n\nTITLE: Installing @xstate/inspect with npm or yarn\nDESCRIPTION: Commands to install the @xstate/inspect package using npm or yarn package managers.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-inspect/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @xstate/inspect\n# or yarn add @xstate/inspect\n```\n\n----------------------------------------\n\nTITLE: Invoking Observable Stream in XState Machine\nDESCRIPTION: Demonstrates how to invoke an RxJS observable stream in an XState machine that emits COUNT events at specified intervals. The machine handles the observable's completion and cancellation.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/communication.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine, interpret } from 'xstate';\nimport { interval } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\n\nconst intervalMachine = createMachine({\n  id: 'interval',\n  initial: 'counting',\n  context: { myInterval: 1000 },\n  states: {\n    counting: {\n      invoke: {\n        src: (context, event) =>\n          interval(context.myInterval).pipe(\n            map((value) => ({ type: 'COUNT', value })),\n            take(5)\n          ),\n        onDone: 'finished'\n      },\n      on: {\n        COUNT: { actions: 'notifyCount' },\n        CANCEL: { target: 'finished' }\n      }\n    },\n    finished: {\n      type: 'final'\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Custom XState Integration in Ember Component\nDESCRIPTION: This code demonstrates a custom integration of XState in an Ember component without using addons. It shows how to create, start, and manage a state machine within the component lifecycle.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/recipes/ember.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport Component from '@glimmer/component';\nimport { tracked } from '@glimmer/tracking';\nimport { action } from '@ember/object';\nimport { interpret } from 'xstate';\nimport { toggleMachine } from '../path/to/toggleMachine';\n\nexport default class ToggleButton extends Component {\n  @tracked current;\n\n  get context() {\n    return this.current.context;\n  }\n\n  get isInactive() {\n    return this.current.matches('inactive');\n  }\n\n  constructor() {\n    super(...arguments);\n    this.toggleInterpreter = interpret(toggleMachine);\n    this.toggleInterpreter\n      .onTransition((state) => (this.current = state))\n      .start();\n  }\n\n  willDestroy() {\n    super.willDestroy(...arguments);\n    this.toggleInterpreter.stop();\n  }\n\n  @action\n  transition(...args) {\n    this.toggleInterpreter.send(...args);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced useInterpret with Options and Listener\nDESCRIPTION: JavaScript example showing useInterpret with machine configuration options and a state change listener.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/packages/xstate-vue/index.md#2025-04-20_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport { useInterpret } from '@xstate/vue';\nimport { someMachine } from '../path/to/someMachine';\n\nconst service = useInterpret(\n  someMachine,\n  {\n    actions: {\n      /* ... */\n    }\n  },\n  (state) => {\n    // subscribes to state changes\n    console.log(state.value);\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Activity Deprecation Example - XState Diff\nDESCRIPTION: Shows the recommended migration from activities to actor invocation in XState v5.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/activities.md#2025-04-20_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n-activities: [(context, event) => {\n-  // do something\n-\n-  return () => {/* cleanup */}\n-}],\n+invoke: {\n+  src: (context, event) => (sendBack, receive) => {\n+    // do something\n+\n+    return () => {/* cleanup */}\n+  }\n+}\n```\n\n----------------------------------------\n\nTITLE: Event Object with Additional Properties\nDESCRIPTION: Shows how to create an event object with additional data properties beyond the type.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/events.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst keyDownEvent = {\n  type: 'keydown',\n  key: 'Enter'\n};\n```\n\n----------------------------------------\n\nTITLE: Installing XState Testing Dependencies\nDESCRIPTION: Command to install the required XState packages for model-based testing\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/packages/xstate-test/index.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install xstate @xstate/test\n```\n\n----------------------------------------\n\nTITLE: Using Expressions in stop() Action Creator in JavaScript\nDESCRIPTION: Expressions can now be used in the stop() action creator to dynamically specify which actor to stop based on context.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_173\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\nactions: stop((context) => context.someActor);\n```\n\n----------------------------------------\n\nTITLE: Basic Model Creation and Usage in XState\nDESCRIPTION: Demonstrates how to create a simple user model with context and use it in a machine definition. The model provides typed context and assign actions.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/models.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createModel } from 'xstate/lib/model';\n\nconst userModel = createModel({\n  name: 'Someone',\n  age: 0\n});\n\n// ...\n\nconst machine = userModel.createMachine({\n  context: userModel.initialContext,\n  // ...\n  entry: userModel.assign({ name: '' })\n});\n```\n\n----------------------------------------\n\nTITLE: Installing XState and XState-Svelte via NPM\nDESCRIPTION: Command to install the xstate and @xstate/svelte packages using NPM.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/packages/xstate-svelte/index.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i xstate @xstate/svelte\n```\n\n----------------------------------------\n\nTITLE: Replacing getMachineShortestPaths with getShortestPaths\nDESCRIPTION: Example showing the API change from getMachineShortestPaths to getShortestPaths and from getMachineSimplePaths to getSimplePaths. These functions generate paths through a state machine.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-graph/CHANGELOG.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n- getMachineShortestPaths,\n+ getShortestPaths,\n- getMachineSimplePaths,\n+ getSimplePaths\n} from '@xstate/graph';\n\n-const paths = getMachineShortestPaths(machine);\n+const paths = getShortestPaths(machine);\n\n-const paths = getMachineSimplePaths(machine);\n+const paths = getSimplePaths(machine);\n```\n\n----------------------------------------\n\nTITLE: Using the Stencil Component with XState in HTML\nDESCRIPTION: Shows how to include and use the Stencil component with XState integration in an HTML page. The example loads both the modern ESM and legacy module versions of the component.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/recipes/stencil.md#2025-04-20_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <script type=\"module\" src=\"/build/my-toggle.esm.js\"></script>\n    <script nomodule src=\"/build/my-toggle.js\"></script>\n  </head>\n  <body>\n    <my-toggle></my-toggle>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Implementing Traffic Light State Machine\nDESCRIPTION: Example of a traffic light state machine with three states (green, yellow, red) and timer-based transitions.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/packages/core/index.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine } from 'xstate';\n\nconst lightMachine = createMachine({\n  id: 'light',\n  initial: 'green',\n  states: {\n    green: {\n      on: {\n        TIMER: 'yellow'\n      }\n    },\n    yellow: {\n      on: {\n        TIMER: 'red'\n      }\n    },\n    red: {\n      on: {\n        TIMER: 'green'\n      }\n    }\n  }\n});\n\nconst currentState = 'green';\n\nconst nextState = lightMachine.transition(currentState, {\n  type: 'TIMER'\n}).value;\n\n// => 'yellow'\n```\n\n----------------------------------------\n\nTITLE: Forwarding Events to a Custom Endpoint\nDESCRIPTION: TypeScript example showing how to forward inspector messages to a custom local endpoint for specialized handling of machine events and states.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-inspect/README.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// In your client application\nconst url = 'http://127.0.0.1:8443/';\nconst targetWindow = window.open(url);\n\nconst inspector = inspect({\n  // The URL must still be provided. This is used by postMessage, as it's\n  // not possible to do targetWindow.location for security reasons\n  url,\n  targetWindow\n});\n\n// In the second, hosted application\ncreateWindowReceiver({}).subscribe((event) => {\n  if (event.type === 'service.register') {\n    // Do something when a new machine is started\n  } else if (event.type === 'service.stop') {\n    // Do something when a machine enters a terminal state\n  } else if (event.type === 'service.event') {\n    // Do something when a machine receives an event\n  } else if (event.type === 'service.state') {\n    // Do something when a machine enters to a new state\n    // Note: Does not handle transitional states.\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Running Postinstall\nDESCRIPTION: Command to restore development redirecting files after building packages.\nSOURCE: https://github.com/statelyai/xstate/blob/main/CONTRIBUTING.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npnpm postinstall\n```\n\n----------------------------------------\n\nTITLE: Integrating XState Store with SolidJS\nDESCRIPTION: Shows how to use XState Store in a SolidJS component using the useSelector hook from @xstate/store/solid to select data from the store and send events.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-store/README.md#2025-04-20_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { donutStore } from './donutStore.ts';\nimport { useSelector } from '@xstate/store/solid';\n\nfunction DonutCounter() {\n  const donutCount = useSelector(donutStore, (state) => state.context.donuts);\n\n  return (\n    <div>\n      <button onClick={() => donutStore.send({ type: 'addDonut' })}>\n        Add donut ({donutCount()})\n      </button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing XState Vue Dependencies\nDESCRIPTION: Commands for installing xstate and @xstate/vue packages via npm\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/packages/xstate-vue/index.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i xstate @xstate/vue\n```\n\n----------------------------------------\n\nTITLE: Creating Toggle Machine with XState in TypeScript\nDESCRIPTION: Defines a simple toggle machine using XState's createMachine function. The machine has two states: 'active' and 'inactive', with a 'toggle' event to switch between them.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/recipes/stencil.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMachine } from 'xstate';\n\nexport const toggleMachine = createMachine({\n  id: 'toggle',\n  initial: 'active',\n  states: {\n    inactive: { on: { toggle: 'active' } },\n    active: { on: { toggle: 'inactive' } }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Correcting Target Resolution for Root State Machine\nDESCRIPTION: Shows how to correct target resolution when targeting sibling nodes from the root. The update requires using relative paths (with '.') instead of absolute paths for targeting sibling states.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_38\n\nLANGUAGE: diff\nCODE:\n```\ncreateMachine({\n  id: 'direction',\n  initial: 'left',\n  states: {\n    left: {},\n    right: {}\n  },\n  on: {\n-   LEFT_CLICK: 'left',\n+   LEFT_CLICK: '.left'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Linking to Internal Transitions Documentation in Markdown\nDESCRIPTION: This snippet creates a Markdown link to the internal transitions section of the XState documentation. It uses a relative path to reference the transitions.md file and includes an anchor link to the specific section.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/internal.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Internal Transitions\n\nSee [the **Internal Transitions** docs](./transitions.md#internal-transitions).\n```\n\n----------------------------------------\n\nTITLE: Specifying Delay Types in XState Machine\nDESCRIPTION: Delay types can now be specified for machines, allowing for strongly typed delay values.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_88\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMachine({\n  types: {} as {\n    delays: 'one second' | 'one minute';\n  }\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Installing XState Immer Dependencies\nDESCRIPTION: Command to install the necessary dependencies for using XState with Immer. This installs the core Immer library, XState, and the integration package @xstate/immer.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/packages/xstate-immer/index.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install immer xstate @xstate/immer\n```\n\n----------------------------------------\n\nTITLE: Typing Immer Assign Action Creator in XState\nDESCRIPTION: Shows how to properly type the Immer assign action creator using context and event type parameters. Demonstrates interface definitions and action implementation.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/packages/xstate-immer/index.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SomeContext {\n  name: string;\n}\n\ninterface SomeEvent {\n  type: 'SOME_EVENT';\n  value: string;\n}\n\n// ...\n\n{\n  actions: assign<SomeContext, SomeEvent>((context, event) => {\n    context.name = event.value;\n    // ... etc.\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Installing XState with Svelte via npm\nDESCRIPTION: Command to install the required XState packages for Svelte integration using npm.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-svelte/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i xstate @xstate/svelte\n```\n\n----------------------------------------\n\nTITLE: Installing XState and SolidJS Integration\nDESCRIPTION: Command to install the XState core library and SolidJS integration package via npm.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-solid/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i xstate @xstate/solid\n```\n\n----------------------------------------\n\nTITLE: Consuming Global State from XState Context in SolidJS\nDESCRIPTION: Example of accessing global state from XState context within a SolidJS component.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/recipes/solid.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useContext } from 'solid-js';\nimport { GlobalStateContext } from './globalState';\n\nexport const SomeComponent = (props) => {\n  const {\n    authService: [state]\n  } = useContext(GlobalStateContext);\n  return <>{state.matches('loggedIn') ? 'Logged In' : 'Logged Out'}</>;\n};\n```\n\n----------------------------------------\n\nTITLE: Including @xstate/inspect via CDN\nDESCRIPTION: HTML snippet showing how to include the @xstate/inspect library via a CDN link, making it available as a global variable.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-inspect/README.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/@xstate/inspect/dist/xstate-inspect.umd.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Configuring State Machine for Inspection\nDESCRIPTION: Example of setting up a state machine with inspection enabled through devTools option.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/packages/xstate-inspect/index.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { interpret } from 'xstate';\nimport { inspect } from '@xstate/inspect';\n// ...\n\nconst service = interpret(someMachine, { devTools: true });\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Rick & Morty Trivia Game\nDESCRIPTION: Command to install all required packages for the Rick & Morty trivia game using the pnpm package manager.\nSOURCE: https://github.com/statelyai/xstate/blob/main/examples/trivia-game-example/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Class Component Implementation\nDESCRIPTION: Example of using XState in a React class component with lifecycle methods.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/recipes/react.md#2025-04-20_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { interpret } from 'xstate';\nimport { toggleMachine } from '../path/to/toggleMachine';\n\nclass Toggle extends React.Component {\n  state = {\n    current: toggleMachine.initialState\n  };\n\n  service = interpret(toggleMachine).onTransition((current) =>\n    this.setState({ current })\n  );\n\n  componentDidMount() {\n    this.service.start();\n  }\n\n  componentWillUnmount() {\n    this.service.stop();\n  }\n\n  render() {\n    const { current } = this.state;\n    const { send } = this.service;\n\n    return (\n      <button onClick={() => send('TOGGLE')}>\n        {current.matches('inactive') ? 'Off' : 'On'}\n      </button>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting XState Machine to Directed Graph with toDirectedGraph\nDESCRIPTION: Demonstrates how to convert an XState machine into a directed graph structure using the toDirectedGraph utility. Returns an object containing nodes, edges, and hierarchical relationships.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/packages/xstate-graph/index.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { toDirectedGraph } from '@xstate/graph';\n\nconst machine = createMachine({/* ... */});\n\nconst digraph = toDirectedGraph(machine);\n\n// returns an object with this structure:\n{\n  id: '...',\n  stateNode: /* StateNode */,\n  children: [\n    { id: '...', children: [/* ... */], edges: [/* ... */] },\n    { id: '...', /* ... */ },\n    // ...\n  ],\n  edges: [\n    { source: /* ... */, target: /* ... */, transition: /* ... */ }\n    // ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using useActorRef Hook with XState in SolidJS\nDESCRIPTION: Examples showing how to use the useActorRef hook to create an actor reference from a state machine in SolidJS, with and without input options.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-solid/README.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useActorRef } from '@xstate/solid';\nimport { someMachine } from '../path/to/someMachine';\n\nconst App = () => {\n  const actorRef = useActorRef(someMachine);\n\n  // ...\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\n\nconst App = () => {\n  const service = useActorRef(someMachine, {\n    input: {\n      /* ... */\n    }\n  });\n\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Delayed Events ID Requirements\nDESCRIPTION: Shows the new requirement for explicit IDs in delayed events, as IDs are no longer automatically derived from event types.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_117\n\nLANGUAGE: typescript\nCODE:\n```\nentry: raise({ type: 'TIMER' }, { delay: 200, id: 'myTimer' });\nexit: cancel('myTimer');\n```\n\n----------------------------------------\n\nTITLE: Using useInterpret Hook with Options\nDESCRIPTION: Example demonstrating the useInterpret hook with custom options and state listener\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/packages/xstate-react/index.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useInterpret } from '@xstate/react';\nimport { someMachine } from '../path/to/someMachine';\n\nconst App = () => {\n  const service = useInterpret(\n    someMachine,\n    {\n      actions: {\n        /* ... */\n      }\n    },\n    (state) => {\n      // subscribes to state changes\n      console.log(state);\n    }\n  );\n\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Importing XState Immer Utilities in JavaScript\nDESCRIPTION: Example of importing necessary functions from XState and @xstate/immer to create a state machine with Immer integration.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/packages/xstate-immer/index.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine, interpret } from 'xstate';\nimport { assign, createUpdater } from '@xstate/immer';\n```\n\n----------------------------------------\n\nTITLE: Installing XState Immer Dependencies\nDESCRIPTION: Command for installing the required packages: immer (peer dependency), xstate, and @xstate/immer.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-immer/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install immer xstate @xstate/immer\n```\n\n----------------------------------------\n\nTITLE: Fixing TypeScript Inference for assign Action Creator\nDESCRIPTION: Example showing how to use the assign action creator with PropertyAssigner to fix TypeScript inference issues.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_132\n\nLANGUAGE: typescript\nCODE:\n```\nactions: assign({\n  counter: 0,\n  delta: (ctx, ev) => ev.delta\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Updates Index Component\nDESCRIPTION: Component inclusion for displaying a reverse chronological list of posts from the updates directory.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/updates/README.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<UpdatesIndex />\n```\n\n----------------------------------------\n\nTITLE: Installing XState Inspect Package\nDESCRIPTION: Commands for installing the @xstate/inspect package using npm or yarn package managers.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/packages/xstate-inspect/index.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @xstate/inspect\n# or yarn add @xstate/inspect\n```\n\n----------------------------------------\n\nTITLE: API Changes in useMachine Hook\nDESCRIPTION: Code diff showing the breaking changes in the useMachine hook response structure between versions, replacing state with snapshot and service with actorRef.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-vue/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\nconst {\n- state,\n+ snapshot,\n  send,\n- service\n+ actorRef\n} = useMachine(machine);\n```\n\n----------------------------------------\n\nTITLE: Embedding XState Visualizer - Full Mode\nDESCRIPTION: HTML iframe code for embedding XState visualization in full mode with state panel and additional controls enabled.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/visualizer/README.md#2025-04-20_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<iframe src=\"https://stately.ai/viz/embed/7c0ec648-09d6-46fe-a912-fc0e46da5094?mode=full&panel=state&readOnly=1&showOriginalLink=0&controls=1&pan=1&zoom=1\"\nallow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\nsandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n></iframe>\n```\n\n----------------------------------------\n\nTITLE: Installing and Starting the Workflow Engine\nDESCRIPTION: Commands to install dependencies and start the workflow engine server using pnpm package manager.\nSOURCE: https://github.com/statelyai/xstate/blob/main/examples/express-workflow/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\npnpm start\n```\n\n----------------------------------------\n\nTITLE: Accessing action parameters directly in XState v5\nDESCRIPTION: Action parameters can now be directly accessed from the 2nd argument of the action implementation.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_79\n\nLANGUAGE: typescript\nCODE:\n```\nconst machine = createMachine(\n  {\n    // ...\n    entry: {\n      type: 'greet',\n      params: { message: 'hello' }\n    }\n  },\n  {\n    actions: {\n      greet: (_, params) => {\n        params.message; // 'hello'\n      }\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Workflow Creation Response Format\nDESCRIPTION: Example JSON response showing the format of a successful workflow creation, including the generated workflow ID.\nSOURCE: https://github.com/statelyai/xstate/blob/main/examples/express-workflow/README.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"workflowId\": \"7ky252\"\n}\n```\n\n----------------------------------------\n\nTITLE: Standard XState Usage in Svelte Component\nDESCRIPTION: Example of using XState in a Svelte component with explicit state management using interpret service\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/recipes/svelte.md#2025-04-20_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  import { interpret } from 'xstate';\n  import { toggleMachine } from './machine';\n\n  let current;\n\n  const toggleService = interpret(toggleMachine)\n    .onTransition((state) => {\n      current = state;\n    })\n    .start();\n</script>\n\n<button on:click=\"{() => toggleService.send({ type: 'TOGGLE' })}\">\n  {current.matches('inactive') ? 'Off' : 'On'}\n</button>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Workflow State - GET Request\nDESCRIPTION: cURL command to retrieve the current state of a specific workflow instance using its ID.\nSOURCE: https://github.com/statelyai/xstate/blob/main/examples/express-workflow/README.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET http://localhost:4242/workflows/:id\n```\n\n----------------------------------------\n\nTITLE: Implementing ember-statecharts Component\nDESCRIPTION: Shows how to use the ember-statecharts addon to integrate XState machine with an Ember component.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/recipes/ember.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Component from '@glimmmer/component';\nimport { action } from '@ember/object';\n\nimport { useMachine, matchesState } from 'ember-statecharts';\n\n// @use (https://github.com/emberjs/rfcs/pull/567) is still WIP - polyfill it\nimport { use } from 'ember-usable';\n\nimport toggleMachine from './path/to/toggleMachine';\n\nexport default class ToggleComponent extends Component {\n  @use statechart = useMachine(toggleMachine);\n\n  @matchesState('active')\n  isActive;\n\n  @matchesState('inactive')\n  isInactive;\n\n  @action\n  toggle() {\n    this.statechart.send({ type: 'TOGGLE' });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Inline Actions in XState (Less Optimal Pattern)\nDESCRIPTION: Showing the less optimal pattern of using inline actions in XState. While functional, this approach offers less visibility in visualizations and is harder to override.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/typescript.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMachine({\n  entry: [\n    () => {\n      console.log('Hello!');\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Installing XState Test Dependencies\nDESCRIPTION: Commands to install the required XState packages for model-based testing\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/packages/xstate-test/index.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install xstate @xstate/test\n```\n\n----------------------------------------\n\nTITLE: Adding Machine ID in XState 4\nDESCRIPTION: Demonstrates how to add the recommended ID property to the root state node (machine) in XState 4, which may become required in future versions.\nSOURCE: https://github.com/statelyai/xstate/blob/main/migration.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst machine = createMachine({\n  id: 'light', // add this property!\n  initial: 'green',\n  states: {\n    /* ... */\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Loading XState-Svelte via CDN\nDESCRIPTION: HTML script tag to include the XState-Svelte library from a CDN, making it available as the global variable XStateSvelte.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/packages/xstate-svelte/index.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/@xstate/svelte/dist/xstate-svelte.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Basic Toggle Machine Implementation\nDESCRIPTION: Example of implementing a simple toggle machine using XState and Vue composition API\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/packages/xstate-vue/index.md#2025-04-20_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { useMachine } from '@xstate/vue';\nimport { createMachine } from 'xstate';\n\nconst toggleMachine = createMachine({\n  id: 'toggle',\n  initial: 'inactive',\n  states: {\n    inactive: {\n      on: { TOGGLE: 'active' }\n    },\n    active: {\n      on: { TOGGLE: 'inactive' }\n    }\n  }\n});\n\nconst { state, send } = useMachine(toggleMachine);\n</script>\n\n<template>\n  <button @click=\"send('TOGGLE')\">\n    {{\n      state.value === 'inactive'\n        ? 'Click to activate'\n        : 'Active! Click to deactivate'\n    }}\n  </button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Including XState Vue via CDN\nDESCRIPTION: Script tag for including the XState Vue integration library directly from a CDN. This makes the library available through the global XStateVue variable.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-vue/README.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/@xstate/vue/dist/xstate-vue.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Loading XState React via CDN\nDESCRIPTION: HTML script tag for loading XState React from CDN, making it available via the XStateReact global variable\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/packages/xstate-react/index.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/@xstate/react/dist/xstate-react.umd.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Installing XState and Vue integration packages via npm\nDESCRIPTION: Command to install the XState core library and Vue integration package using npm.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-vue/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i xstate @xstate/vue\n```\n\n----------------------------------------\n\nTITLE: Embedding XState Visualizer - Panel Mode\nDESCRIPTION: HTML iframe code for embedding XState visualization in panel mode, showing code and other panels. Includes security attributes and permissions.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/visualizer/README.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<iframe src=\"https://stately.ai/viz/embed/7c0ec648-09d6-46fe-a912-fc0e46da5094?mode=panels&panel=code&readOnly=1&showOriginalLink=1\"\nallow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\nsandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n></iframe>\n```\n\n----------------------------------------\n\nTITLE: Targeting State Nodes by Different ID Types in XState\nDESCRIPTION: Demonstrates how to target state nodes using both default and custom IDs. Both methods use the # symbol followed by the appropriate identifier.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/ids.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\non: {\n  EVENT: { target: '#light.yellow' }, // target default ID\n  ANOTHER_EVENT: { target: '#custom-id' } // target custom ID\n}\n```\n\n----------------------------------------\n\nTITLE: Handlebars Template for Custom XState Integration\nDESCRIPTION: This Handlebars template snippet shows how to use the custom XState integration in an Ember component. It includes a button that triggers state transitions and displays the current state.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/recipes/ember.md#2025-04-20_snippet_5\n\nLANGUAGE: handlebars\nCODE:\n```\n<button type='button' {{on 'click' (fn this.transition 'TOGGLE')}}>\n  {{if this.isInactive 'Off' 'On'}}\n</button>\n```\n\n----------------------------------------\n\nTITLE: Installing XState React Dependencies\nDESCRIPTION: Commands for installing xstate and @xstate/react packages via npm\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/packages/xstate-react/index.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i xstate @xstate/react\n```\n\n----------------------------------------\n\nTITLE: Actor Context Creation and Usage\nDESCRIPTION: Example showing how to create and use an actor context with XState in React components\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/packages/xstate-react/index.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createActorContext } from '@xstate/react';\nimport { someMachine } from '../path/to/someMachine';\nconst SomeMachineContext = createActorContext(someMachine);\nfunction App() {\n  return (\n    <SomeMachineContext.Provider>\n      <SomeComponent />\n    </SomeMachineContext.Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Project Setup Documentation\nDESCRIPTION: Documentation describing the project setup and dependencies, along with links to run the project in online IDEs.\nSOURCE: https://github.com/statelyai/xstate/blob/main/examples/tiles/readme.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Tiles game\n\nThis is a simple tiles game, built with:\n\n- XState v5\n- React\n- TypeScript\n- Vite\n\n## [Open in CodeSandbox](https://codesandbox.io/p/sandbox/github/statelyai/xstate/tree/main/examples/tiles)\n\n[![Open in StackBlitz](https://developer.stackblitz.com/img/open_in_stackblitz.svg)](https://stackblitz.com/github/statelyai/xstate/tree/main/examples/tiles)\n```\n\n----------------------------------------\n\nTITLE: Required Input in XState Machine Setup\nDESCRIPTION: Example showing how input is now required at compile time when defined in types, preventing potential runtime errors.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-svelte/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst machine = setup({\n  types: {\n    input: {} as { value: number }\n  }\n}).createMachine({});\n\nfunction App() {\n  const _ = useMachine(machine, {\n    input: { value: 1 } // Now input is required at compile time!\n  });\n  return <></>;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Test Assertions to Toggle Machine\nDESCRIPTION: Enhanced version of the toggle machine with test assertions using Puppeteer for each state\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/packages/xstate-test/index.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst toggleMachine = createMachine({\n  id: 'toggle',\n  initial: 'inactive',\n  states: {\n    inactive: {\n      on: {\n        /* ... */\n      },\n      meta: {\n        test: async (page) => {\n          await page.waitFor('input:checked');\n        }\n      }\n    },\n    active: {\n      on: {\n        /* ... */\n      },\n      meta: {\n        test: async (page) => {\n          await page.waitFor('input:not(:checked)');\n        }\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Handling SELECT Event\nDESCRIPTION: Implements SELECT event handling to update the selected subreddit in context and transition states\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/tutorials/reddit.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst redditMachine = createMachine({\n  id: 'reddit',\n  initial: 'idle',\n  context: {\n    subreddit: null // none selected\n  },\n  states: {\n    /* ... */\n  },\n  on: {\n    SELECT: {\n      target: '.selected',\n      actions: assign({\n        subreddit: (context, event) => event.name\n      })\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Frontmatter Title and Date in HTML\nDESCRIPTION: This snippet shows how to render the frontmatter title as an H1 heading and format the date using HTML and Vue.js template syntax.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/updates/2022-01-06.md#2025-04-20_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<h1>{{ $frontmatter.title }}</h1>\n<p class=\"date\">{{ new Date($frontmatter.date).toLocaleString('en-US',{ month:'long', day:'numeric', year:'numeric' }) }}</p>\n```\n\n----------------------------------------\n\nTITLE: Named Actions Implementation\nDESCRIPTION: Example of implementing named actions in XState with React Router integration.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/recipes/react.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine } from 'xstate';\n\nexport const machine = createMachine({\n  initial: 'toggledOff',\n  states: {\n    toggledOff: {\n      on: {\n        TOGGLE: 'toggledOn'\n      }\n    },\n    toggledOn: {\n      entry: ['goToOtherPage']\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Loading XState Svelte via CDN\nDESCRIPTION: HTML script tag to load XState Svelte from CDN, making it available as global variable XStateSvelte\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/packages/xstate-svelte/index.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/@xstate/svelte/dist/xstate-svelte.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Using Named Functions for Assign Actions in XState (JavaScript)\nDESCRIPTION: Demonstrates how to use named functions for assign actions in an XState machine, providing an alternative to the string reference approach.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/context.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst increment = assign({ count: context => context.count + 1 });\nconst decrement = assign({ count: context => context.count - 1 });\n\nconst countMachine = createMachine({\n  initial: 'start',\n  context: { count: 0 }\n  states: {\n    start: {\n      // Named function\n      entry: increment\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Navigating to Chrome Extensions\nDESCRIPTION: Chrome URL for accessing the extensions management page where the XState developer tools can be loaded\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/packages/xstate-dev/index.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nchrome://extensions\n```\n\n----------------------------------------\n\nTITLE: Using useActor Hook Instead of useService for Actor-like Objects\nDESCRIPTION: This snippet shows an error message that will be displayed when trying to use an actor-like object in the useService() hook, where useActor() should be preferred.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-react/CHANGELOG.md#2025-04-20_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n> Attempted to use an actor-like object instead of a service in the useService() hook. Please use the useActor() hook instead.\n```\n\n----------------------------------------\n\nTITLE: Installing XState Inspect Package\nDESCRIPTION: Commands to install @xstate/inspect package using npm or yarn package managers.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/packages/xstate-inspect/index.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @xstate/inspect\n# or yarn add @xstate/inspect\n```\n\n----------------------------------------\n\nTITLE: Advanced UseSelector Example with TypeScript\nDESCRIPTION: Demonstrates using useSelector hook with XState service to efficiently track state changes in a Svelte component\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/packages/xstate-svelte/index.md#2025-04-20_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { interpret } from 'xstate';\n  import { createModel } from 'xstate/lib/model';\n  import { useSelector } from '../src';\n\n  const model = createModel(\n    {\n      count: 0,\n      anotherCount: 0\n    },\n    {\n      events: {\n        INCREMENT: () => ({}),\n        INCREMENT_ANOTHER: () => ({})\n      }\n    }\n  );\n\n  const machine = model.createMachine({\n    initial: 'idle',\n    context: model.initialContext,\n    states: {\n      idle: {\n        on: {\n          INCREMENT: {\n            actions: model.assign({ count: ({ count }) => count + 1 })\n          },\n          INCREMENT_ANOTHER: {\n            actions: model.assign({\n              anotherCount: ({ anotherCount }) => anotherCount + 1\n            })\n          }\n        }\n      }\n    }\n  });\n\n  const service = interpret(machine).start();\n\n  const count = useSelector(service, (state) => state.context.count);\n\n  let withSelector = 0;\n  $: $count && withSelector++;\n  let withoutSelector = 0;\n  $: $service.context.count && withoutSelector++;\n</script>\n\n<button data-testid=\"count\" on:click={() => service.send({ type: 'INCREMENT' })}\n  >Increment count</button\n>\n<button data-testid=\"another\" on:click={() => service.send({ type: 'INCREMENT_ANOTHER' })}\n  >Increment another count</button\n>\n\n<div data-testid=\"withSelector\">{withSelector}</div>\n<div data-testid=\"withoutSelector\">{withoutSelector}</div>\n```\n\n----------------------------------------\n\nTITLE: Svelte Service Implementation\nDESCRIPTION: Example of implementing XState service in Svelte with a toggle machine\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/packages/xstate-svelte/index.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine, interpret } from 'xstate';\n\nconst toggleMachine = createMachine({\n  id: 'toggle',\n  initial: 'inactive',\n  states: {\n    inactive: {\n      on: { TOGGLE: 'active' }\n    },\n    active: {\n      on: { TOGGLE: 'inactive' }\n    }\n  }\n});\n\nexport const toggleService = interpret(toggleMachine).start();\n```\n\n----------------------------------------\n\nTITLE: Installing XState via NPM/Yarn\nDESCRIPTION: Commands to install XState using NPM or Yarn package managers with the latest version.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/installation.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install xstate@latest --save\n# or:\nyarn add xstate@latest --save\n```\n\n----------------------------------------\n\nTITLE: Installing XState Developer Tools Dependencies\nDESCRIPTION: Commands to install dependencies and start the development server for XState developer tools panel\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/packages/xstate-dev/index.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Configurable Fetch Machine Example\nDESCRIPTION: Advanced example showing a configurable machine for handling API fetching with success and failure states\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/packages/xstate-vue/index.md#2025-04-20_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { assign, createMachine } from 'xstate';\nimport { useMachine } from '@xstate/vue';\n\nconst fetchMachine = createMachine({\n  id: 'fetch',\n  initial: 'idle',\n  context: {\n    data: undefined,\n    error: undefined\n  },\n  states: {\n    idle: {\n      on: { FETCH: 'loading' }\n    },\n    loading: {\n      invoke: {\n        src: 'fetchData',\n        onDone: {\n          target: 'success',\n          actions: assign({\n            data: (_context, event) => event.data\n          })\n        },\n        onError: {\n          target: 'failure',\n          actions: assign({\n            error: (_context, event) => event.data\n          })\n        }\n      }\n    },\n    success: {\n      entry: 'notifySuccess',\n      type: 'final'\n    },\n    failure: {\n      on: {\n        RETRY: 'loading'\n      }\n    }\n  }\n});\n\nconst props = defineProps({\n  onResolve: {\n    type: Function,\n    default: () => {}\n  }\n});\n\nconst { state, send } = useMachine(fetchMachine, {\n  actions: {\n    notifySuccess: (ctx) => props.onResolve(ctx.data)\n  },\n  services: {\n    fetchData: (_context, event) =>\n      fetch(`some/api/${event.query}`).then((res) => res.json())\n  }\n});\n</script>\n\n<template>\n  <template v-if=\"state.value === 'idle'\">\n    <button @click=\"send({ type: 'FETCH', query: 'something' })\">\n      Search for something\n    </button>\n  </template>\n\n  <template v-else-if=\"state.value === 'loading'\">\n    <div>Searching...</div>\n  </template>\n\n  <template v-else-if=\"state.value === 'success'\">\n    <div>Success! {{ state.context.data }}</div>\n  </template>\n\n  <template v-else-if=\"state.value === 'failure'\">\n    <p>{{ state.context.error.message }}</p>\n    <button @click=\"send('RETRY')\">Retry</button>\n  </template>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Flight Event Types Definition in TypeScript\nDESCRIPTION: TypeScript type definition for all possible events that can be handled by the flight booking state machine, including trip type setting, date updates, and form submission.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/tutorials/7guis/flight.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype FlightEvent =\n  | {\n      type: 'SET_TRIP';\n      value: 'oneWay' | 'roundTrip';\n    }\n  | {\n      type: 'startDate.UPDATE';\n      value: string;\n    }\n  | {\n      type: 'returnDate.UPDATE';\n      value: string;\n    }\n  | { type: 'SUBMIT' };\n```\n\n----------------------------------------\n\nTITLE: Installing @xstate/cli Package\nDESCRIPTION: Command to install the @xstate/cli package using npm. This package contains commands for running typegen and is expected to include more features in the future.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/packages/xstate-cli/index.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @xstate/cli\n```\n\n----------------------------------------\n\nTITLE: Displaying XState Documentation Update Template in Vue.js\nDESCRIPTION: A Vue.js template that displays a documentation update page with a title and formatted date. Uses frontmatter metadata for content and date formatting with toLocaleString().\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/updates/2021-10-14.md#2025-04-20_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<h1>{{ $frontmatter.title }}</h1>\n<p class=\"date\">{{ new Date($frontmatter.date).toLocaleString('en-US',{ month:'long', day:'numeric', year:'numeric' }) }}</p>\n```\n\n----------------------------------------\n\nTITLE: Configuring Redux DevTools Integration in XState\nDESCRIPTION: Code showing how to configure Redux DevTools integration in XState v5, which is no longer the default and must be explicitly included from 'xstate/devTools/redux'.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_139\n\nLANGUAGE: javascript\nCODE:\n```\nimport { interpret } from 'xstate';\nimport { createReduxDevTools } from 'xstate/devTools/redux';\n\nconst service = interpret(someMachine, {\n  devTools: createReduxDevTools({\n    // Redux Dev Tools options\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: Installing XState Vue Package\nDESCRIPTION: Command to install XState and its Vue integration package using npm.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/packages/xstate-vue/index.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i xstate @xstate/vue\n```\n\n----------------------------------------\n\nTITLE: Using the Deprecated CreateStore API\nDESCRIPTION: Shows the previous version of createStore that took two arguments: an initial context and an object of event handlers. This API is still supported but deprecated.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-store/README.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createStore } from '@xstate/store';\n\nconst donutStore = createStore(\n  {\n    donuts: 0,\n    favoriteFlavor: 'chocolate'\n  },\n  {\n    addDonut: (context) => ({ ...context, donuts: context.donuts + 1 }),\n    changeFlavor: (context, event: { flavor: string }) => ({\n      ...context,\n      favoriteFlavor: event.flavor\n    }),\n    eatAllDonuts: (context) => ({ ...context, donuts: 0 })\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Sending an Event to a Workflow Instance with cURL\nDESCRIPTION: cURL command to send an event to a specific workflow instance, submitting user data including SSN and name information.\nSOURCE: https://github.com/statelyai/xstate/blob/main/examples/mongodb-credit-check-api/README.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Replace :id with the workflow ID; e.g. http://localhost:4242/workflows/7ky252\n# the body should be JSON\ncurl -X POST http://localhost:4242/workflows/:id -d '{\"type\": \"Submit\", \"SSN\": \"123456789\", \"lastName\": \"Bauman\", \"firstName\": \"Gavin\"}' -H \"Content-Type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Using useSelector with XState Store\nDESCRIPTION: Example showing how to use the useSelector hook with stores from @xstate/store, demonstrating compatibility between different XState packages.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-svelte/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createStore } from '@xstate/store';\nimport { useSelector } from '@xstate/react';\n\nconst store = createStore(\n  {\n    count: 0\n  },\n  {\n    inc: {\n      count: (context) => context.count + 1\n    }\n  }\n);\n\nfunction Counter() {\n  // Note that this `useSelector` is from `@xstate/react`,\n  // not `@xstate/store/react`\n  const count = useSelector(store, (state) => state.context.count);\n\n  return (\n    <div>\n      <button onClick={() => store.send({ type: 'inc' })}>{count}</button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding systemId to Spawned Actors for Global Reference\nDESCRIPTION: Demonstrates how to add a systemId to spawned actors, allowing them to be referenced anywhere in the system. This is useful for creating globally accessible actor references.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nconst machine = createMachine({\n  // ...\n  context: ({ spawn }) => ({\n    actorRef: spawn(\n      createMachine({\n        // ...\n      }),\n      { systemId: 'actorRef' }\n    )\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: Installing XState via package manager\nDESCRIPTION: Instructions for installing XState using npm or yarn package managers. This snippet shows command-line instructions for adding XState as a dependency to your project.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/installation.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install xstate@latest --save\n# or:\nyarn add xstate@latest --save\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Actor References in SolidJS\nDESCRIPTION: Example demonstrating how to access the actor reference from useActor and subscribe to its state changes using SolidJS createEffect hook.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-solid/README.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n//                  vvvvvvv\nconst [snapshot, send, actorRef] = useActor(someMachine);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\n\ncreateEffect(() => {\n  const subscription = actorRef.subscribe((snapshot) => {\n    // simple snapshot logging\n    console.log(snapshot);\n  });\n\n  onCleanup(() => subscription.unsubscribe());\n}); // note: service should never change\n```\n\n----------------------------------------\n\nTITLE: Custom XState Integration Component\nDESCRIPTION: Demonstrates a custom integration of XState with Ember without using addons, including state management and event handling.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/recipes/ember.md#2025-04-20_snippet_4\n\nLANGUAGE: handlebars\nCODE:\n```\n<button type='button' {{on 'click' (fn this.transition 'TOGGLE')}}>\n  {{if this.isInactive 'Off' 'On'}}\n</button>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport Component from '@glimmer/component';\nimport { tracked } from '@glimmer/tracking';\nimport { action } from '@ember/object';\nimport { interpret } from 'xstate';\nimport { toggleMachine } from '../path/to/toggleMachine';\n\nexport default class ToggleButton extends Component {\n  @tracked current;\n\n  get context() {\n    return this.current.context;\n  }\n\n  get isInactive() {\n    return this.current.matches('inactive');\n  }\n\n  constructor() {\n    super(...arguments);\n    this.toggleInterpreter = interpret(toggleMachine);\n    this.toggleInterpreter\n      .onTransition((state) => (this.current = state))\n      .start();\n  }\n\n  willDestroy() {\n    super.willDestroy(...arguments);\n    this.toggleInterpreter.stop();\n  }\n\n  @action\n  transition(...args) {\n    this.toggleInterpreter.send(...args);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Development Server\nDESCRIPTION: Command to preview the XState example in development mode using Vite's dev server.\nSOURCE: https://github.com/statelyai/xstate/blob/main/examples/readme.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Using EventInputByType with XState Store Events\nDESCRIPTION: Demonstrates how to use the EventInputByType utility type with an XState store to extract the input types of specific events. This provides type-safe access to event properties without the type field.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-store/CHANGELOG.md#2025-04-20_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\ntype AddInput = EventInputByType<typeof store, 'add'>;\n//   ^? { addend: number }\n\ntype MultiplyInput = EventInputByType<typeof store, 'multiply'>;\n//   ^? { multiplier: number }\n\ntype DivideInput = EventInputByType<typeof store, 'divide'>;\n// Type '\"divide\"' does not satisfy the constraint '\"add\" | \"multiply\"'.ts(2344)\n```\n\n----------------------------------------\n\nTITLE: Configuring Updates Index in Markdown\nDESCRIPTION: This code snippet sets up the configuration for the updates index page using YAML frontmatter and includes a custom component to render the list of updates.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/updates/README.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nupdatesIndex: true\n---\n\n# Updates\n\n<!-- Show a reverse chronological list of posts from inside /updates: -->\n<UpdatesIndex />\n```\n\n----------------------------------------\n\nTITLE: Store-based XState Usage in Svelte Component\nDESCRIPTION: Example of using XState with Svelte stores for more idiomatic state management\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/recipes/svelte.md#2025-04-20_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  import { interpret } from 'xstate';\n  import { toggleMachine } from './machine';\n\n  const toggleService = interpret(toggleMachine).start();\n</script>\n\n<button on:click=\"{() => toggleService.send({ type: 'TOGGLE' })}\">\n  {$toggleService.matches('inactive') ? 'Off' : 'On'}\n</button>\n```\n\n----------------------------------------\n\nTITLE: Installing XState and XState Test via npm\nDESCRIPTION: Command to install the xstate and @xstate/test packages using npm.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/packages/xstate-test/index.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install xstate @xstate/test\n```\n\n----------------------------------------\n\nTITLE: Loading XState Solid via CDN\nDESCRIPTION: HTML script tag to load XState Solid package from CDN, making it available as XStateSolid global variable.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/packages/xstate-solid/index.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/@xstate/solid/dist/xstate-solid.umd.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Renaming traversalLimit to limit in XState Graph\nDESCRIPTION: Example showing the API change from traversalLimit to limit option when configuring path generation. This option controls how many states are traversed during path exploration.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-graph/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nmodel.getShortestPaths({\n- traversalLimit: 100\n+ limit: 100\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Inspection Event Types in XState\nDESCRIPTION: Code showing how to import the different inspection event types for type checking. These types are used for the events emitted by the inspect option.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_96\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {\n  InspectedActorEvent,\n  InspectedEventEvent,\n  InspectedSnapshotEvent,\n  InspectionEvent\n} from 'xstate';\n```\n\n----------------------------------------\n\nTITLE: Installing XState and @xstate/react via npm\nDESCRIPTION: Command to install the required packages xstate and @xstate/react using npm.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/packages/xstate-react/index.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i xstate @xstate/react\n```\n\n----------------------------------------\n\nTITLE: Installing XState with SolidJS via npm\nDESCRIPTION: Command to install XState and its SolidJS integration package using npm.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/packages/xstate-solid/index.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i xstate @xstate/solid\n```\n\n----------------------------------------\n\nTITLE: Using AuthenticatedToggle Component in Handlebars Template\nDESCRIPTION: This Handlebars template snippet shows how to use the AuthenticatedToggle component created with ember-statechart-component. It demonstrates how to access the state and send events to the machine.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/recipes/ember.md#2025-04-20_snippet_3\n\nLANGUAGE: handlebars\nCODE:\n```\n<AuthenticatedToggle as |state send|>\n  {{state.value}}\n\n  <button {{on 'click' (fn send 'TOGGLE')}}>\n    Toggle\n  </button>\n</AuthenticatedToggle>\n```\n\n----------------------------------------\n\nTITLE: Pure Action Creator Type Fix\nDESCRIPTION: Demonstrates the updated typing for pure() action creator that now properly allows function actions.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_116\n\nLANGUAGE: typescript\nCODE:\n```\nactions: pure(() => [\n  // now allowed!\n  (context, event) => { ... }\n])\n```\n\n----------------------------------------\n\nTITLE: Updating parameterized actions\nDESCRIPTION: Shows migration to new params property for parameterized actions\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_147\n\nLANGUAGE: diff\nCODE:\n```\n// ...\nentry: [\n  {\n    type: 'greet',\n-   message: 'Hello'\n+   params: { message: 'Hello' }\n  }\n]\n// ...\n```\n\n----------------------------------------\n\nTITLE: Installing XState Immer Dependencies\nDESCRIPTION: Command to install immer, xstate, and @xstate/immer packages using npm.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/packages/xstate-immer/index.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install immer xstate @xstate/immer\n```\n\n----------------------------------------\n\nTITLE: Installing XState CLI Package\nDESCRIPTION: Command to install the @xstate/cli package using npm package manager.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/packages/xstate-cli/index.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @xstate/cli\n```\n\n----------------------------------------\n\nTITLE: Installing XState and XState Graph packages with npm\nDESCRIPTION: Command to install the required dependencies for using XState Graph. This installs both the core XState library and the Graph utilities package.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-graph/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install xstate @xstate/graph\n```\n\n----------------------------------------\n\nTITLE: Installing XState via npm\nDESCRIPTION: Command to install XState package using npm. This is the first step required before creating state machines.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/start.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install xstate --save\n```\n\n----------------------------------------\n\nTITLE: Using Imported Statecharts in Templates\nDESCRIPTION: Shows how to use imported statecharts directly in Handlebars templates as components.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/recipes/ember.md#2025-04-20_snippet_5\n\nLANGUAGE: handlebars\nCODE:\n```\n<this.MyLocalMachine as |state send| />\n\n<this.CustomMachine as |state send| />\n```\n\n----------------------------------------\n\nTITLE: Running XState Typegen with Watch Option\nDESCRIPTION: Command to run the XState typegen with the watch option. This monitors for file changes and automatically runs the typegen script against modified files.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/packages/xstate-cli/index.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nxstate typegen \"src/**/*.ts?(x)\" --watch\n```\n\n----------------------------------------\n\nTITLE: Running XState Typegen in Watch Mode\nDESCRIPTION: Command to run typegen with watch flag, which monitors for file changes and automatically runs typegen against modified files.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/packages/xstate-cli/index.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nxstate typegen \"src/**/*.ts?(x)\" --watch\n```\n\n----------------------------------------\n\nTITLE: Defining State IDs in XState and SCXML (JavaScript/XML)\nDESCRIPTION: Shows how state IDs are defined in XState and the equivalent representation in SCXML.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/guides/scxml.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  green: {\n    id: 'lightGreen';\n  }\n}\n```\n\nLANGUAGE: xml\nCODE:\n```\n<state id=\"lightGreen\">\n  <!-- ... -->\n</state>\n```\n\n----------------------------------------\n\nTITLE: Logging Machine Events and Transitions\nDESCRIPTION: TypeScript example demonstrating how to log all machine events and transitions without adding manual console.log statements to machine definitions.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-inspect/README.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// The URL and port of your local project (ex. Vite, Webpack, etc).\nconst url = 'http://127.0.0.1:5174/';\n\nconst inspector = inspect({\n  url,\n  iframe: undefined,\n  targetWindow: window\n});\n\n// In the same window, subscribe to messages from @xstate/inspector\ncreateWindowReceiver({}).subscribe(console.log);\n\n// Start your machine, and all events generated are logged to the console\ninterpret(machine, { devTools: true }).start({});\n```\n\n----------------------------------------\n\nTITLE: Installing Rollup Replace Plugin for XState with Svelte\nDESCRIPTION: Installs the @rollup/plugin-replace package needed for XState to work properly with Svelte applications.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/recipes/svelte.md#2025-04-20_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nnpm install @rollup/plugin-replace --save-dev\n```\n\n----------------------------------------\n\nTITLE: Displaying Update Title and Date in HTML\nDESCRIPTION: This snippet shows how to display the update title and date using HTML and Vue.js template syntax. It uses frontmatter data to populate the title and formats the date using JavaScript's toLocaleString method.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/updates/2021-10-14.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<h1>{{ $frontmatter.title }}</h1>\n<p class=\"date\">{{ new Date($frontmatter.date).toLocaleString('en-US',{ month:'long', day:'numeric', year:'numeric' }) }}</p>\n```\n\n----------------------------------------\n\nTITLE: Optional Array Syntax for Actions in XState 4\nDESCRIPTION: Demonstrates that XState 4 allows both array and non-array syntax for properties that expect one or more entries, such as onEntry and onExit actions.\nSOURCE: https://github.com/statelyai/xstate/blob/main/migration.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // This still works\n  onEntry: ['someEntryAction'],\n  onExit: [{ type: 'someExitAction' }],\n\n  // But you can do this instead, if you prefer:\n  onEntry: 'someEntryAction',\n  onExit: { type: 'someExitAction' }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SELECT Event Example\nDESCRIPTION: Demonstrates the structure of a SELECT event that will be dispatched when a user selects a subreddit. The event includes the type and the subreddit name.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/tutorials/reddit.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// sample SELECT event\nconst selectEvent = {\n  type: 'SELECT', // event type\n  name: 'reactjs' // subreddit name\n};\n```\n\n----------------------------------------\n\nTITLE: Installing XState DevTools Dependencies\nDESCRIPTION: This command installs the necessary dependencies for the XState developer tools using npm.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/packages/xstate-dev/index.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with NPM\nDESCRIPTION: Command to install project dependencies using npm package manager.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/sandboxes/todomvc/readme.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: HTML Setup for Stencil XState Toggle Component\nDESCRIPTION: HTML structure for using the Stencil XState toggle component. It includes the necessary script tags to load the component and places the custom element in the body.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/recipes/stencil.md#2025-04-20_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <script type=\"module\" src=\"/build/my-toggle.esm.js\"></script>\n    <script nomodule src=\"/build/my-toggle.js\"></script>\n  </head>\n  <body>\n    <my-toggle></my-toggle>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Running the TypeScript Node Project with ESM Modules\nDESCRIPTION: Command to execute the TypeScript project using ts-node with ECMAScript modules support. This command runs the main.ts file which contains the XState MongoDB persistence implementation.\nSOURCE: https://github.com/statelyai/xstate/blob/main/examples/mongodb-persisted-state/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn ts-node --esm ./main.ts\n```\n\n----------------------------------------\n\nTITLE: Configuring Updates Index in Markdown Frontmatter\nDESCRIPTION: Markdown frontmatter configuration to enable updates index functionality on the page.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/updates/README.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nupdatesIndex: true\n---\n```\n\n----------------------------------------\n\nTITLE: Testing XState Reddit Machine with Jest\nDESCRIPTION: Demonstrates how to write an integration test for the Reddit machine using Jest and XState's interpret function.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/tutorials/reddit.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { interpret } from 'xstate';\nimport { assert } from 'chai';\n\nimport { redditMachine } from '../path/to/redditMachine';\n\ndescribe('reddit machine (live)', () => {\n  it('should load posts of a selected subreddit', (done) => {\n    const redditService = interpret(redditMachine)\n      .onTransition((state) => {\n        // when the state finally reaches 'selected.loaded',\n        // the test has succeeded.\n\n        if (state.matches({ selected: 'loaded' })) {\n          assert.isNotEmpty(state.context.posts);\n\n          done();\n        }\n      })\n      .start(); // remember to start the service!\n\n    // Test that when the 'SELECT' event is sent, the machine eventually\n    // reaches the { selected: 'loaded' } state with posts\n    redditService.send({ type: 'SELECT', name: 'reactjs' });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Installing XState Dependencies\nDESCRIPTION: Commands to install XState core and framework-specific packages using pnpm.\nSOURCE: https://github.com/statelyai/xstate/blob/main/examples/readme.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install xstate @xstate/react\n```\n\n----------------------------------------\n\nTITLE: Using Pure Action to Return Action Type Strings in XState\nDESCRIPTION: Example demonstrating how to use the 'pure' action creator to return action type strings that can be executed by XState. This allows for dynamic action composition and delegation.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_134\n\nLANGUAGE: typescript\nCODE:\n```\nconst machine = createMachine(\n  {\n    entry: ['doStuff']\n  },\n  {\n    actions: {\n      doStuff: pure(() => ['someAction']),\n      someAction: () => console.log('executed by doStuff')\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Running XState Typegen in Watch Mode\nDESCRIPTION: Command to run typegen in watch mode, which monitors for file changes and automatically runs typegen against modified files.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/packages/xstate-cli/index.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nxstate typegen \"src/**/*.ts?(x)\" --watch\n```\n\n----------------------------------------\n\nTITLE: Installing and Running XState Developer Tools\nDESCRIPTION: This snippet outlines the steps to install dependencies, build the extension in development mode, and load it into Chrome for debugging XState applications.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/packages/xstate-dev/index.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Run `npm install`\n- Run `npm start` to build the `/panel` in development mode\n- Go to [`chrome://extensions`](chrome://extensions) and **Load unpacked** this directory (`/packages/xstate-dev`)\n- Select the `XState` extension in the dev tools\n```\n\n----------------------------------------\n\nTITLE: Creating Changeset\nDESCRIPTION: Command to create a changeset for documenting changes before submitting a pull request.\nSOURCE: https://github.com/statelyai/xstate/blob/main/CONTRIBUTING.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npnpm changeset\n```\n\n----------------------------------------\n\nTITLE: Model Creation Type Fix in TypeScript\nDESCRIPTION: Example showing the fix for a regression where actions were being typed as 'never' when events were specified in createModel but not actions.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_164\n\nLANGUAGE: typescript\nCODE:\n```\nconst model = createModel(\n  {},\n  {\n    events: {}\n  }\n);\n\nmodel.createMachine({\n  // These actions will cause TS to not compile\n  entry: 'someAction',\n  exit: { type: 'someObjectAction' }\n});\n```\n\n----------------------------------------\n\nTITLE: Running Tests\nDESCRIPTION: Commands for running tests either for all packages or specifically for core XState changes.\nSOURCE: https://github.com/statelyai/xstate/blob/main/CONTRIBUTING.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm test\npnpm test:core\n```\n\n----------------------------------------\n\nTITLE: Installing Development Dependencies\nDESCRIPTION: Command to install all required development dependencies using pnpm package manager.\nSOURCE: https://github.com/statelyai/xstate/blob/main/CONTRIBUTING.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Creating a New Workflow Instance with cURL\nDESCRIPTION: cURL command to create a new workflow instance by sending a POST request to the /workflows endpoint.\nSOURCE: https://github.com/statelyai/xstate/blob/main/examples/mongodb-credit-check-api/README.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:4242/workflows\n```\n\n----------------------------------------\n\nTITLE: Retrieving Workflow State with cURL\nDESCRIPTION: cURL command to get the current state of a specific workflow instance by its ID.\nSOURCE: https://github.com/statelyai/xstate/blob/main/examples/mongodb-credit-check-api/README.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET http://localhost:4242/workflows/:id\n```\n\n----------------------------------------\n\nTITLE: Implementing XState Toggle Machine in Stencil Component\nDESCRIPTION: Creates a Stencil component that uses the XState toggle machine. It interprets the machine, subscribes to state changes, and renders a button that toggles the state. The component also handles lifecycle methods for starting and stopping the service.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/recipes/stencil.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component, h, State } from \"@stencil/core\";\nimport { interpret } from \"xstate\";\nimport { toggleMachine } from \"../helpers/toggle-machine\";\n\n@Component({\n  tag: \"my-toggle\",\n  styleUrl: \"toggle.css\",\n  shadow: true\n})\nexport class Toggle {\n  private _service = interpret(toggleMachine);\n\n  @State() state = this._service.getSnapshot();\n\n  componentWillLoad() {\n    this._service.subscribe(state => {\n      this.state = state;\n    });\n\n    this._service.start();\n  }\n\n  disconnectedCallback() {\n    this._service.stop();\n  }\n\n  render() {\n    const { send } = this._service;\n\n    return (\n      <button onClick={() => send(\"toggle\")}>\n        {this.state.value === \"inactive\" ? \"Off\" : \"On\"}\n      </button>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading XState Vue via CDN\nDESCRIPTION: HTML snippet showing how to load the XState Vue package from a CDN using a script tag.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/packages/xstate-vue/index.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/@xstate/vue/dist/xstate-vue.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Deprecated Nested Object Transition Syntax in XState 4\nDESCRIPTION: Shows the deprecated transition syntax from XState 3.x where transitions were defined as nested objects with the target state as the key.\nSOURCE: https://github.com/statelyai/xstate/blob/main/migration.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst machine = createMachine({\n  // ...\n  states: {\n    green: {\n      on: {\n        TIMER: {\n          // ⚠️ deprecated in v4\n          yellow: { actions: ['doSomething'] }\n        }\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Implementation of Stencil Toggle Component\nDESCRIPTION: Shows how to include and use the Stencil toggle component in an HTML page. Includes necessary script imports for both module and non-module support.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/recipes/stencil.md#2025-04-20_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <script type=\"module\" src=\"/build/my-toggle.esm.js\"></script>\n    <script nomodule src=\"/build/my-toggle.js\"></script>\n  </head>\n  <body>\n    <my-toggle></my-toggle>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: CDN Integration for XState-Svelte\nDESCRIPTION: HTML script tag for including XState-Svelte via CDN\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/packages/xstate-svelte/index.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/@xstate/svelte/dist/xstate-svelte.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Running TodoMVC React Example Locally with pnpm\nDESCRIPTION: Instructions for running the TodoMVC React example locally. It requires navigating to the example directory, installing dependencies, and starting the development server using pnpm commands.\nSOURCE: https://github.com/statelyai/xstate/blob/main/examples/todomvc-react/readme.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n    cd examples/todomvc-react\n    pnpm install\n    pnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Type Checking\nDESCRIPTION: Command to verify there are no TypeScript type errors in the codebase.\nSOURCE: https://github.com/statelyai/xstate/blob/main/CONTRIBUTING.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm typecheck\n```\n\n----------------------------------------\n\nTITLE: Importing Rollup Replace Plugin\nDESCRIPTION: Imports the Rollup replace plugin in the rollup.config.js file.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/recipes/svelte.md#2025-04-20_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport replace from '@rollup/plugin-replace';\n```\n\n----------------------------------------\n\nTITLE: Installing Rollup Replace Plugin\nDESCRIPTION: Installation command for the Rollup replace plugin needed for legacy Svelte projects\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/recipes/svelte.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnpm install @rollup/plugin-replace --save-dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Rollup Replace Plugin\nDESCRIPTION: Configuration for the Rollup replace plugin to handle environment variables\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/recipes/svelte.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nreplace({\n  'process.env.NODE_ENV': process.env.NODE_ENV\n});\n```\n\n----------------------------------------\n\nTITLE: Replacing useSpawn with useActorRef in React\nDESCRIPTION: Example showing the migration from the removed useSpawn hook to the new useActorRef hook, which returns an ActorRef from actor logic. Also shows how to replace useActor with useSelector for getting state from an actor reference.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-react/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n-const actorRef = useSpawn(machine);\n+const actorRef = useActorRef(machine);\n\n-const [state, send] = useActor(actorRef);\n+const state = useSelector(actorRef, s => s);\n// actorRef.send(...)\n```\n\n----------------------------------------\n\nTITLE: Displaying Frontmatter Title and Date in HTML\nDESCRIPTION: This snippet demonstrates how to render the title from frontmatter and format the date using HTML and Vue.js-like templating.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/updates/2022-04-05.md#2025-04-20_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<h1>{{ $frontmatter.title }}</h1>\n<p class=\"date\">{{ new Date($frontmatter.date).toLocaleString('en-US',{ month:'long', day:'numeric', year:'numeric' }) }}</p>\n```\n\n----------------------------------------\n\nTITLE: Importing Rollup Replace Plugin\nDESCRIPTION: Import statement for the Rollup replace plugin in rollup.config.js\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/recipes/svelte.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport replace from '@rollup/plugin-replace';\n```\n\n----------------------------------------\n\nTITLE: Building XState DevTools Panel\nDESCRIPTION: This command starts the build process for the XState developer tools panel in development mode.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/packages/xstate-dev/index.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server for Rick & Morty Trivia Game\nDESCRIPTION: Command to start the development server on port 5173 using Yarn. This launches the local development environment for the trivia game.\nSOURCE: https://github.com/statelyai/xstate/blob/main/examples/trivia-game-example/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Hierarchical State Transitions\nDESCRIPTION: Demonstrates transition priority in hierarchical state machines, showing how deeper transitions take precedence over shallow ones.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/transitions.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst wizardMachine = createMachine({\n  id: 'wizard',\n  initial: 'open',\n  states: {\n    open: {\n      initial: 'step1',\n      states: {\n        step1: {\n          on: {\n            NEXT: { target: 'step2' }\n          }\n        },\n        step2: {\n          /* ... */\n        },\n        step3: {\n          /* ... */\n        }\n      },\n      on: {\n        NEXT: { target: 'goodbye' },\n        CLOSE: { target: 'closed' }\n      }\n    },\n    goodbye: {\n      on: {\n        CLOSE: { target: 'closed' }\n      }\n    },\n    closed: {\n      type: 'final'\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Timer Event Types in TypeScript\nDESCRIPTION: This snippet defines the TypeScript types for events that can occur in the timer machine, including TICK, DURATION.UPDATE, and RESET events.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/tutorials/7guis/timer.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype TimerEvent =\n  | {\n      // The TICK event sent by the spawned interval service\n      type: 'TICK';\n    }\n  | {\n      // User intent to update the duration\n      type: 'DURATION.UPDATE';\n      value: number;\n    }\n  | {\n      // User intent to reset the elapsed time to 0\n      type: 'RESET';\n    };\n```\n\n----------------------------------------\n\nTITLE: Creating and Exporting an XState Service\nDESCRIPTION: Example of creating and exporting a standalone XState service that can be imported and used across multiple Svelte components. The service is created using the interpret function.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/packages/xstate-svelte/index.md#2025-04-20_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n// service.js\n\nimport { createMachine, interpret } from 'xstate';\n\nconst toggleMachine = createMachine({\n  id: 'toggle',\n  initial: 'inactive',\n  states: {\n    inactive: {\n      on: { TOGGLE: 'active' }\n    },\n    active: {\n      on: { TOGGLE: 'inactive' }\n    }\n  }\n});\n\nexport const toggleService = interpret(toggleMachine).start();\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Inspector with Window Receiver\nDESCRIPTION: Example showing how to create a custom XState inspector by using the createWindowReceiver function to listen to inspector events from a parent window.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/xstate-inspect/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWindowReceiver } from '@xstate/inspect';\n\nconst windowReceiver = createWindowReceiver(/* options? */);\n\nwindowReceiver.subscribe((event) => {\n  // here, you will receive events like:\n  // { type: \"service.register\", machine: ..., state: ..., sessionId: ... }\n  console.log(event);\n});\n```\n\n----------------------------------------\n\nTITLE: Compound State Node Missing Initial State Example in XState\nDESCRIPTION: Example of a state machine configuration that will throw an error in XState v5 because a compound state node is missing the required 'initial' property.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_137\n\nLANGUAGE: javascript\nCODE:\n```\nconst lightMachine = createMachine({\n  id: 'light',\n  initial: 'green',\n  states: {\n    green: {},\n    yellow: {},\n    red: {\n      // Forgotten initial state:\n      // initial: 'walk',\n      states: {\n        walk: {},\n        wait: {}\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using AnyStateConfig Type to Restore State from Serialized Configuration\nDESCRIPTION: Example demonstrating how to use the AnyStateConfig type to restore a state from a serialized state configuration object stored in localStorage.\nSOURCE: https://github.com/statelyai/xstate/blob/main/packages/core/CHANGELOG.md#2025-04-20_snippet_156\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { AnyStateConfig } from 'xstate';\nimport { State } from 'xstate';\n\n// Retrieving the state config from localStorage\nconst stateConfig: AnyStateConfig = JSON.parse(\n  localStorage.getItem('app-state')\n);\n\n// Use State.create() to restore state from config object with correct type\nconst previousState = State.create(stateConfig);\n```\n\n----------------------------------------\n\nTITLE: Multiple Sequential Assignments in XState (JavaScript)\nDESCRIPTION: Demonstrates how multiple assign actions can be used sequentially to update the context in an XState machine.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/guides/context.md#2025-04-20_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\n// assume context.count === 1\nactions: [\n  // assigns context.count to 1 + 1 = 2\n  assign({ count: (context) => context.count + 1 }),\n  // assigns context.count to 2 * 3 = 6\n  assign({ count: (context) => context.count * 3 })\n],\n// ...\n```\n\n----------------------------------------\n\nTITLE: Creating New Workflow Instance - POST Request\nDESCRIPTION: cURL command to create a new workflow instance by sending a POST request to the /workflows endpoint.\nSOURCE: https://github.com/statelyai/xstate/blob/main/examples/express-workflow/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:4242/workflows\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Inspector Receiver\nDESCRIPTION: Example demonstrating how to create and use a custom inspector receiver to handle inspection events.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/packages/xstate-inspect/index.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWindowReceiver } from '@xstate/inspect';\n\nconst windowReceiver = createWindowReceiver(/* options? */);\n\nwindowReceiver.subscribe((event) => {\n  // here, you will receive \"service.*\" events\n  console.log(event);\n});\n```\n\n----------------------------------------\n\nTITLE: Running XState Typegen Command\nDESCRIPTION: Command to run typegen against TypeScript files. Uses glob pattern to match files and generates accompanying typegen files.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/packages/xstate-cli/index.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nxstate typegen \"src/**/*.ts?(x)\"\n```\n\n----------------------------------------\n\nTITLE: Installing XState Immer Dependencies\nDESCRIPTION: Commands to install the required packages including immer, xstate, and @xstate/immer.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/zh/packages/xstate-immer/index.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install immer xstate @xstate/immer\n```\n\n----------------------------------------\n\nTITLE: Installing XState and XState Graph Package\nDESCRIPTION: Command to install the xstate and @xstate/graph packages using npm.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/fr/packages/xstate-graph/index.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install xstate @xstate/graph\n```\n\n----------------------------------------\n\nTITLE: Frontmatter Configuration in Markdown\nDESCRIPTION: YAML frontmatter configuration for the blog post, including metadata like title, date, description, and update type.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/updates/2022-01-06.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: 'Added Simplified Chinese translation'\ndate: 2022-01-06\ndescription: 'Thanks to @lecepin, we now have a Simplified Chinese translation of the XState docs. You can access the translation using the Languages dropdown menu in the top navigation of the site.'\nreviewed: 2022-01-06\nstyleGuideVersion: 0\nupdateType: docs\n---\n```\n\n----------------------------------------\n\nTITLE: HTML Template with Vue-style Interpolation\nDESCRIPTION: HTML markup with Vue.js templating syntax for displaying the post title and formatted date.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/updates/2022-01-06.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<h1>{{ $frontmatter.title }}</h1>\n<p class=\"date\">{{ new Date($frontmatter.date).toLocaleString('en-US',{ month:'long', day:'numeric', year:'numeric' }) }}</p>\n```\n\n----------------------------------------\n\nTITLE: Displaying Frontmatter Title and Date in Markdown\nDESCRIPTION: This snippet demonstrates how to display the frontmatter title and format the date using Vue.js syntax within a Markdown file. It uses the $frontmatter object to access the title and date properties.\nSOURCE: https://github.com/statelyai/xstate/blob/main/docs/updates/2022-03-24.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<h1>{{ $frontmatter.title }}</h1>\n<p class=\"date\">{{ new Date($frontmatter.date).toLocaleString('en-US',{ month:'long', day:'numeric', year:'numeric' }) }}</p>\n```"
  }
]