[
  {
    "owner": "david-lev",
    "repo": "pywa",
    "content": "TITLE: Initializing WhatsApp Client and Sending Message - Python\nDESCRIPTION: Basic example of creating a WhatsApp client instance and sending a text message to a recipient. Demonstrates core functionality using synchronous API.\nSOURCE: https://github.com/david-lev/pywa/blob/master/README.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pywa import WhatsApp\n\nwa = WhatsApp(\n    phone_id=\"100458559237541\",\n    token=\"EAAEZC6hUxkTIB\"\n)\n\nwa.send_message(\n    to=\"9876543210\",\n    text=\"Hello from PyWa!\"\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Synchronous WhatsApp Client in Python\nDESCRIPTION: This snippet demonstrates how to initialize and use the synchronous WhatsApp client in PyWA. It shows the basic setup and a simple message handler.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/client/overview.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pywa import WhatsApp, types\nwa = WhatsApp(...)\n\n@wa.on_message\ndef on_message(_: WhatsApp, msg: types.Message):\n    msg.reply(\"Hello!\")\n```\n\n----------------------------------------\n\nTITLE: Sending messages using pywa in Python\nDESCRIPTION: Python code demonstrating how to send a text message and an image using the initialized WhatsApp client.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/getting-started.rst#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nwa.send_message(\n    to='PHONE_NUMBER_TO_SEND_TO',\n    text='Hi! This message sent from pywa!'\n)\n\nwa.send_image(\n    to='PHONE_NUMBER_TO_SEND_TO',\n    image='https://www.rd.com/wp-content/uploads/2021/04/GettyImages-1053735888-scaled.jpg'\n)\n```\n\n----------------------------------------\n\nTITLE: Sending Text Messages with PyWa WhatsApp Integration\nDESCRIPTION: Demonstrates how to initialize the WhatsApp client and send basic text messages, including messages with link previews. Requires PyWa library, WhatsApp phone ID and authentication token.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/examples/message.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pywa import WhatsApp\n\nwa = WhatsApp(phone_id='972123456789', token='xxxxx')\n\nrecipient = '972987654321'\nwa.send_message(to=recipient, text='Hello world!')\n\n# Message with link preview\nwa.send_message(\n    to=recipient,\n    text='PyWa Documentation: https://pywa.readthedocs.io',\n    preview_url=True\n)\n```\n\n----------------------------------------\n\nTITLE: Async WhatsApp Client Implementation - Python\nDESCRIPTION: Demonstrates asynchronous implementation using pywa_async module. Shows how to create async message handlers and send messages using async/await syntax.\nSOURCE: https://github.com/david-lev/pywa/blob/master/README.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# wa.py\nimport fastapi\nfrom pywa_async import WhatsApp, types\n\nfastapi_app = fastapi.FastAPI()\nwa = WhatsApp(..., server=fastapi_app)\n\nasync def main():\n    await wa.send_message(...)\n\n@wa.on_message()\nasync def hello(_: WhatsApp, msg: types.Message):\n    await msg.react(\"üëã\")\n    await msg.reply(...)\n```\n\n----------------------------------------\n\nTITLE: Initializing WhatsApp client in Python\nDESCRIPTION: Python code to initialize the WhatsApp client using the phone ID and token obtained from the WhatsApp Cloud API setup.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/getting-started.rst#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom pywa import WhatsApp\n\nwa = WhatsApp(\n    phone_id='YOUR_PHONE_ID',  # The phone id you got from the API Setup\n    token='YOUR_TOKEN'  # The token you got from the API Setup\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Message Handler Functions\nDESCRIPTION: Example of simple callback functions for handling messages and button interactions in WhatsApp.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/handlers/overview.rst#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef echo_ok(client: WhatsApp, msg: types.Message):\n    msg.reply('Ok')\n\ndef react_to_button(client: WhatsApp, clb: types.CallbackButton):\n    clb.react('‚ù§Ô∏è')\n```\n\n----------------------------------------\n\nTITLE: Initializing Asynchronous WhatsApp Client in Python\nDESCRIPTION: This snippet shows how to initialize and use the asynchronous WhatsApp client in PyWA. It demonstrates the basic setup and an asynchronous message handler.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/client/overview.rst#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pywa_async import WhatsApp, types\nwa = WhatsApp(...)\n\n@wa.on_message\nasync def on_message(_: WhatsApp, msg: types.Message):\n    await msg.reply(\"Hello!\")\n```\n\n----------------------------------------\n\nTITLE: Building a URL Uploader Bot with PyWa in Python\nDESCRIPTION: A WhatsApp bot that uploads files from URLs sent by users. The bot handles media download/upload errors by sending descriptive error messages. Uses Flask for the server and PyWa for WhatsApp integration.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/examples/demo-bots.rst#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport flask  # pip3 install flask\nfrom pywa import WhatsApp, types, filters, errors\nfrom pywa.types import Message, MessageStatus\n\nflask_app = flask.Flask(__name__)\n\nwa = WhatsApp(\n    phone_id='your_phone_number',\n    token='your_token',\n    server=flask_app,\n    verify_token='xyzxyz',\n)\n\n@wa.on_message(filters.startswith('http'))\ndef download(_: WhatsApp, msg: types.Message):\n    msg.reply_document(msg.text, filename=msg.text.split('/')[-1])\n\n# When a file fails to download/upload, the bot will reply with an error message.\n@wa.on_message_status(filters.failed_with(errors.MediaDownloadError, errors.MediaUploadError))\ndef on_media_download_error(_: WhatsApp, status: types.MessageStatus):\n    status.reply_text(f\"I can't download/upload this file: {status.error.details}\")\n\n# Run the server\nflask_app.run()\n```\n\n----------------------------------------\n\nTITLE: Setting up Webhook Handlers with FastAPI - Python\nDESCRIPTION: Example showing how to set up webhook handlers for incoming messages and callback buttons using FastAPI integration. Includes message filtering and interactive button responses.\nSOURCE: https://github.com/david-lev/pywa/blob/master/README.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# wa.py\nfrom pywa import WhatsApp, filters, types\nfrom fastapi import FastAPI\n\nfastapi_app = FastAPI()\nwa = WhatsApp(\n    phone_id=\"1234567890\",\n    token=\"xxxxxxx\",\n    server=fastapi_app,\n    callback_url=\"https://yourdomain.com/\",\n    verify_token=\"xyz123\",\n    app_id=123456,\n    app_secret=\"yyyyyy\"\n)\n\n@wa.on_message(filters.matches(\"Hello\", \"Hi\"))\ndef hello(client: WhatsApp, msg: types.Message):\n    msg.react(\"üëã\")\n    msg.reply_text(\n        text=f\"Hello {msg.from_user.name}!\",\n        buttons=[\n            types.Button(\n                title=\"Click me!\",\n                callback_data=\"id:123\"\n            )\n        ]\n    )\n\n@wa.on_callback_button(filters.startswith(\"id\"))\ndef click_me(client: WhatsApp, clb: types.CallbackButton):\n    clb.reply_text(\"You clicked me!\")\n```\n\n----------------------------------------\n\nTITLE: Creating an Echo Bot with PyWa in Python\nDESCRIPTION: A WhatsApp bot that copies and sends back any message received from users. If the message type can't be copied, it sends a fallback text response. Implemented using Flask and PyWa.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/examples/demo-bots.rst#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport flask  # pip3 install flask\nfrom pywa import WhatsApp, types\n\nflask_app = flask.Flask(__name__)\n\nwa = WhatsApp(\n    phone_id='your_phone_number',\n    token='your_token',\n    server=flask_app,\n    verify_token='xyzxyz',\n)\n\n@wa.on_message\ndef echo(_: WhatsApp, msg: types.Message):\n    try:\n        msg.copy(to=msg.sender, reply_to_message_id=msg.message_id_to_reply)\n    except ValueError:\n        msg.reply_text(\"I can't echo this message\")\n\n# Run the server\nflask_app.run()\n```\n\n----------------------------------------\n\nTITLE: Sending Button Keyboard Messages with PyWa in Python\nDESCRIPTION: This code shows how to send an image message with an attached button keyboard using PyWa. It creates a message about a YouTube video with three interactive buttons that allow users to download, view comments, or get more information about the video.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/examples/interactive.rst#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pywa import WhatsApp\nfrom pywa.types import Button\n\nwa = WhatsApp(phone_id='972123456789', token='xxxxx')\n\nrecipient = '972987654321'\nrequested_vid_id = 'T9RRe4ZsSGw'\n\nwa.send_image(\n    to=recipient,\n    image=f'https://i.ytimg.com/vi/{requested_vid_id}/hqdefault.jpg',\n    caption='Chandler Jokes | Friends ‚Ä¢ 2.9M views ‚Ä¢ 1 year ago',\n    footer='‚ö° Powered by PyWa',\n    buttons=[\n        Button(title='‚¨áÔ∏è Download', callback_data=f'dl:{requested_vid_id}'),\n        Button(title='üí¨ Comments', callback_data=f'cmnts:{requested_vid_id}'),\n        Button(title='üé¨ Info', callback_data=f'info:{requested_vid_id}'),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Registering Handlers Using Decorators\nDESCRIPTION: Example of using decorators to register message and callback button handlers with the WhatsApp client.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/handlers/overview.rst#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom pywa import WhatsApp, types\nfrom fastapi import FastAPI\n\nfastapi_app = FastAPI()\nwa = WhatsApp(..., server=fastapi_app)\n\n@wa.on_message\ndef handle_message(client: WhatsApp, msg: types.Message):\n    print(msg)\n\n@wa.on_callback_button\ndef handle_callback_button(client: WhatsApp, clb: types.CallbackButton):\n    print(clb.data)\n```\n\n----------------------------------------\n\nTITLE: Sending Selection Keyboard Messages with PyWa in Python\nDESCRIPTION: This code demonstrates how to send a message with a selection keyboard using PyWa. It creates a message with a 'Colors' selection list containing two sections of color options. Each option includes a title, description, and callback data for handling user selections.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/examples/interactive.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pywa import WhatsApp\nfrom pywa.types import SectionList, Section, SectionRow\n\nwa = WhatsApp(phone_id='972123456789', token='xxxxx')\nrecipient = '972987654321'\n\nwa.send_message(\n    to=recipient,\n    header='Select your favorite color',\n    text='Tap a button to select your favorite color:',\n    footer='‚ö° Powered by PyWa',\n    buttons=SectionList(\n        button_title='Colors',\n        sections=[\n            Section(\n                title='Popular Colors',\n                rows=[\n                    SectionRow(\n                        title='üü• Red',\n                        callback_data='color:red',\n                        description='The color of blood',\n                    ),\n                    SectionRow(\n                        title='üü© Green',\n                        callback_data='color:green',\n                        description='The color of grass',\n                    ),\n                    SectionRow(\n                        title='üü¶ Blue',\n                        callback_data='color:blue',\n                        description='The color of the sky',\n                    )\n                ],\n            ),\n            Section(\n                title='Other Colors',\n                rows=[\n                    SectionRow(\n                        title='üüß Orange',\n                        callback_data='color:orange',\n                        description='The color of an orange',\n                    ),\n                    SectionRow(\n                        title='üü™ Purple',\n                        callback_data='color:purple',\n                        description='The color of a grape',\n                    ),\n                    SectionRow(\n                        title='üü® Yellow',\n                        callback_data='color:yellow',\n                        description='The color of the sun',\n                    )\n                ]\n            )\n        ]\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Sending Media Messages from Local File with PyWA in Python\nDESCRIPTION: This code shows how to send a video from a local file using the PyWA library. It initializes a WhatsApp client with authentication credentials and sends a video from a local file path to a specified recipient.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/examples/media.rst#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pywa import WhatsApp\n\nwa = WhatsApp(phone_id='972123456789', token='xxxxx')\nrecipient = '972987654321'\n\n# - From local file\nwa.send_video(\n    to=recipient,\n    video='/path/to/video.mp4'\n)\n```\n\n----------------------------------------\n\nTITLE: Using Listeners for Interactive Conversations in Pywa\nDESCRIPTION: Demonstrates how to use listeners to collect data from users in a conversational flow, waiting for specific replies instead of registering new handlers.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/handlers/overview.rst#2025-04-18_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom pywa import WhatsApp, types, filters\n\nwa = WhatsApp(...)\n\n@wa.on_message(filters.command(\"start\")\ndef start(_: WhatsApp, msg: types.Message):\n    age = msg.reply(\"Hello! What's your age?\").wait_for_reply(filters.text).text\n    ...\n```\n\n----------------------------------------\n\nTITLE: Implementing a Calculator Bot with PyWa in Python\nDESCRIPTION: A WhatsApp calculator bot that performs basic arithmetic operations (addition, subtraction, multiplication, division) on integers. Uses regular expressions to parse operations and handles edge cases like division by zero.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/examples/demo-bots.rst#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport re\nimport flask  # pip3 install flask\nfrom pywa import WhatsApp, types, filters\n\nflask_app = flask.Flask(__name__)\n\nwa = WhatsApp(\n    phone_id='your_phone_number',\n    token='your_token',\n    server=flask_app,\n    verify_token='xyzxyz',\n)\n\npattern = re.compile(r'^(\\d+)\\s*([+*/-])\\s*(\\d+)$')\n\n@wa.on_message(filters.regex(pattern))\ndef calculator(_: WhatsApp, msg: types.Message):\n    a, op, b = re.match(pattern, msg.text).groups()\n    a, b = int(a), int(b)\n    match op:\n        case '+':\n            result = a + b\n        case '-':\n            result = a - b\n        case '*':\n            result = a * b\n        case '/':\n            try:\n                result = a / b\n            except ZeroDivisionError:\n                msg.react('‚ùå')\n                msg.reply('Division by zero is not allowed')\n                return\n        case _:\n            msg.react('‚ùå')\n            msg.reply('Unknown operator')\n            return\n    msg.reply(f'{a} {op} {b} = *{result}*')\n\n# Run the server\nflask_app.run()\n```\n\n----------------------------------------\n\nTITLE: Creating a Marketing Template in PyWa\nDESCRIPTION: Creates a new WhatsApp template for marketing purposes with header, body, footer, and various button types. The template includes dynamic placeholders for customization and supports URL, phone number, and quick reply buttons.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/examples/template.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pywa.types import NewTemplate as NewTemp\nwa = WhatsApp(...)\n\nwa.create_template(\n    template=NewTemp(\n        name='buy_new_iphone_x',\n        category=NewTemp.Category.MARKETING,\n        language=NewTemp.Language.ENGLISH_US,\n        header=NewTemp.Text('The New iPhone {15} is here!'),\n        body=NewTemp.Body('Buy now and use the code {WA_IPHONE_15} to get {15%} off!'),\n        footer=NewTemp.Footer('Powered by PyWa'),\n        buttons=[\n            NewTemp.UrlButton(title='Buy Now', url='https://example.com/shop/{iphone15}'),\n            NewTemp.PhoneNumberButton(title='Call Us', phone_number='1234567890'),\n            NewTemp.QuickReplyButton('Unsubscribe from marketing messages'),\n            NewTemp.QuickReplyButton('Unsubscribe from all messages'),\n        ],\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Background Remover Bot with PyWa in Python\nDESCRIPTION: A WhatsApp bot that removes backgrounds from images using the remove.bg API. When users send an image, the bot processes it and returns a version with the background removed. Requires an API key from remove.bg.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/examples/demo-bots.rst#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nimport flask\nfrom pywa import WhatsApp, types\n\nflask_app = flask.Flask(__name__)\n\nwa = WhatsApp(\n    phone_id='your_phone_number',\n    token='your_token',\n    server=flask_app,\n    verify_token='xyzxyz',\n)\n\nREMOVEBG_API_KEY = \"your_api_key\"  # https://www.remove.bg/api\n\n\ndef get_removed_bg_image(original_img: bytes) -> bytes:\n    url = \"https://api.remove.bg/v1.0/removebg\"\n    files = {'image_file': original_img}\n    data = {'size': 'auto'}\n    headers = {'X-Api-Key': REMOVEBG_API_KEY}\n    response = requests.post(url, files=files, data=data, headers=headers)\n    response.raise_for_status()\n    return response.content\n\n\n@wa.on_message(filters.image)\ndef on_image(_: WhatsApp, msg: types.Message):\n    try:\n        original_img = msg.image.download(in_memory=True)\n        image = get_removed_bg_image(original_img)\n    except requests.HTTPError as e:\n        msg.reply_text(f\"A error occurred\")\n        logging.exception(e)\n        return\n    msg.reply_image(\n        image=image,\n        caption=\"Here you go\",\n        mime_type='image/png',  # when sending bytes, you must specify the mime type\n    )\n\n# Run the server\nflask_app.run()\n```\n\n----------------------------------------\n\nTITLE: Implementing a Static Sign-up Flow in PyWa\nDESCRIPTION: A complete implementation of a static sign-up flow using PyWa's flow components. This creates a form with text inputs for first name, last name, and email, with a completion action that collects the form data.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/flows/overview.rst#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pywa.types.flows import *\n\nstatic_flow = FlowJSON(\n    version=utils.Version.FLOW_JSON,\n    screens=[\n        Screen(\n            id=\"SIGN_UP\",\n            title=\"Finish Sign Up\",\n            terminal=True,\n            layout=Layout(\n                type=LayoutType.SINGLE_COLUMN,\n                children=[\n                    Form(\n                        name=\"form\",\n                        children=[\n                            first_name := TextInput(\n                                name=\"first_name\",\n                                label=\"First Name\",\n                                input_type=InputType.TEXT,\n                                required=True,\n                            ),\n                            last_name := TextInput(\n                                name=\"last_name\",\n                                label=\"Last Name\",\n                                input_type=InputType.TEXT,\n                                required=True,\n                            ),\n                            email := TextInput(\n                                name=\"email\",\n                                label=\"Email Address\",\n                                input_type=InputType.EMAIL,\n                                required=True,\n                            ),\n                            Footer(\n                                label=\"Done\",\n                                enabled=True,\n                                on_click_action=CompleteAction(\n                                    payload={\n                                        \"first_name\": first_name.ref,\n                                        \"last_name\": last_name.ref,\n                                        \"email\": email.ref,\n                                    },\n                                ),\n                            ),\n                        ],\n                    )\n                ],\n            ),\n        )\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Basic User Input Listening in PyWa\nDESCRIPTION: A basic example of using listeners to wait for a user's response to a question. The code sends a message asking for the user's age, waits for a text message reply, and then responds with the age.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/listeners/overview.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pywa import WhatsApp, types, filters\n\nwa = WhatsApp(...)\n\n@wa.on_message(filters.command(\"start\"))\ndef start(client: WhatsApp, msg: types.Message):\n    msg.reply(\"Hello! How old are you?\")\n    age: types.Message = client.listen( # Now we want to wait for the user to send their age\n        to=msg.sender,\n        filters=filters.message & filters.text # We only want to listen for `Message` updates that contain text\n    )\n    msg.reply(f\"Your age is {age.text}.\")\n```\n\n----------------------------------------\n\nTITLE: Filtering Text Messages with Pywa\nDESCRIPTION: Example showing how to filter and handle only text messages using the filters module in Pywa. This enables more targeted message processing.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/handlers/overview.rst#2025-04-18_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom pywa import WhatsApp, types, filters\n\nwa = WhatsApp(...)\n\n@wa.on_message(filters.text)  # Handle only text messages\ndef echo(client: WhatsApp, msg: types.Message):\n    # we know this handler will get only text messages, so:\n    msg.reply(text=msg.text)\n```\n\n----------------------------------------\n\nTITLE: Catching All WhatsApp Exceptions with Base Error Class\nDESCRIPTION: Demonstrates how to catch all PyWA library exceptions using the base WhatsAppError class, which is the parent class for all other exception types in the library.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/errors/overview.rst#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom pywa import WhatsApp, errors\n\nwa = WhatsApp(...)\n\ntry:\n    wa.send_message(...)\nexcept errors.WhatsAppError as e:\n    print(f\"Error: {e}\")\n```\n\n----------------------------------------\n\nTITLE: Handling Flow Requests in PyWa\nDESCRIPTION: Python code to handle flow requests in PyWa. It shows how to register a callback function that responds to flow requests with dynamic data for the specified screen.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/flows/overview.rst#2025-04-18_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom pywa import WhatsApp\nfrom pywa.types import FlowRequest, FlowResponse\n\nwa = WhatsApp(\n    ...,\n    business_private_key=open(\"private.pem\").read(),  # provide your business private key\n)\n\n@wa.on_flow_request(endpoint=\"/flow\")  # The endpoint we set above\ndef on_support_request(_: WhatsApp, req: FlowRequest) -> FlowResponse:\n    print(req.flow_token)  # use this to indentify the user who you sent the flow to\n    return req.respond(\n        screen=\"SIGN_UP\",  # The screen id to open\n        data={\n            \"first_name_helper_text\": \"Please enter your first name\",\n            \"is_last_name_required\": True,\n            \"is_email_enabled\": False,\n        },\n    )\n```\n\n----------------------------------------\n\nTITLE: Listener with Cancel Button and Timeout in PyWa\nDESCRIPTION: An example showing how to add a cancel button and timeout to a listener. The code sends a message with a cancel button, waits for the user's response for 20 seconds, and can be canceled if the user clicks the cancel button.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/listeners/overview.rst#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pywa import WhatsApp, types, filters\n\nwa = WhatsApp(...)\n\n@wa.on_message(filters.command(\"start\"))\ndef start(client: WhatsApp, msg: types.Message):\n    msg.reply(\n        text=\"Hello! How old are you?\",\n        buttons=[types.Button(\"Cancel\", callback_data=\"cancel\")]\n    )\n    age = client.listen(\n        to=msg.sender,\n        filters=filters.message & filters.text,\n        timeout=20, # 20 seconds\n        # If the user presses \"cancel\" the listener will be canceled\n        cancelers=filters.callback_button & filters.matches(\"cancel\")\n    )\n    msg.reply(f\"Your age is {age.text}.\")\n```\n\n----------------------------------------\n\nTITLE: Combining Filters with Logical Operators in PyWa\nDESCRIPTION: Shows how to combine multiple filters using logical operators (&, |, ~) to create more complex filtering conditions. Examples include filtering for images with captions, text or image messages, and messages not containing specific words.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/filters/overview.rst#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pywa import filters\n\n# image with caption\nfilters.image & filters.has_caption\n\n# text or image\nfilters.text | filters.image\n\n# message must not contain \"bad word\"\n~filters.contains(\"bad word\")\n```\n\n----------------------------------------\n\nTITLE: Implementing a Hello Bot with PyWa in Python\nDESCRIPTION: A simple WhatsApp bot that reacts with a wave emoji and sends a personalized greeting when a user sends a message. Uses Flask as the web server and PyWa for WhatsApp API integration.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/examples/demo-bots.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport flask  # pip3 install flask\nfrom pywa import WhatsApp, types\n\nflask_app = flask.Flask(__name__)\n\nwa = WhatsApp(\n    phone_id='your_phone_number',\n    token='your_token',\n    server=flask_app,\n    verify_token='xyzxyz',\n)\n\n@wa.on_message\ndef hello(_: WhatsApp, msg: types.Message):\n    msg.react('üëã')\n    msg.reply(f'Hello {msg.from_user.name}!')\n\n# Run the server\nflask_app.run()\n```\n\n----------------------------------------\n\nTITLE: Sending Media Messages from File ID with PyWA in Python\nDESCRIPTION: This code demonstrates how to upload media to obtain a file ID and then send an audio message using that ID. It first uploads an audio file to the WhatsApp servers, receives a file ID, and then uses that ID to send the audio to a recipient.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/examples/media.rst#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom pywa import WhatsApp\n\nwa = WhatsApp(phone_id='972123456789', token='xxxxx')\nrecipient = '972987654321'\n\naudio_id = wa.upload_media(media='/path/to/audio.ogg', mime_type='audio/ogg')\nwa.send_audio(\n    to=recipient,\n    audio=audio_id\n)\n```\n\n----------------------------------------\n\nTITLE: Handling Flow Requests with Multiple Handlers in PyWa\nDESCRIPTION: Python code demonstrating how to split flow request handling logic into multiple sub-handlers for different scenarios and screens.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/flows/overview.rst#2025-04-18_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom pywa import WhatsApp, filters\nfrom pywa.types import FlowRequest, FlowResponse\n\nwa = WhatsApp(...)\n\n@wa.on_flow_request(endpoint=\"/flow\")  # The endpoint we set above\ndef main_handler(_: WhatsApp, req: FlowRequest) -> FlowResponse:\n    ...\n\n@main_handler.on_init\ndef on_flow_init(_: WhatsApp, req: FlowRequest) -> FlowResponse:\n    ...\n\n@main_handler.on_data_exchange(screen=\"SIGN_UP\")\ndef on_sign_up(_: WhatsApp, req: FlowRequest) -> FlowResponse:\n    ...\n\n@main_handler.on_data_exchange(screen=\"OTHER_SCREEN\", filters=filters.new(lambda _, req: req.data.get(\"some_key\") == \"value\"))\ndef on_other_screen(_: WhatsApp, req: FlowRequest) -> FlowResponse:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Creating a Translator Bot with PyWa in Python\nDESCRIPTION: A WhatsApp bot that translates text messages to different languages using the Google Translate API. It provides a menu of popular and other languages to choose from, and handles translation errors gracefully.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/examples/demo-bots.rst#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nimport flask  # pip3 install flask\nimport googletrans  # pip3 install googletrans==4.0.0-rc1\nfrom pywa import WhatsApp, types, filters\n\nflask_app = flask.Flask(__name__)\ntranslator = googletrans.Translator()\n\nwa = WhatsApp(\n    phone_id='your_phone_number',\n    token='your_token',\n    server=flask_app,\n    verify_token='xyzxyz',\n)\n\nMESSAGE_ID_TO_TEXT: dict[str, str] = {}  # msg_id -> text\nPOPULAR_LANGUAGES = {\n    \"en\": (\"English\", \"üá∫üá∏\"),\n    \"es\": (\"Espa√±ol\", \"üá™üá∏\"),\n    \"fr\": (\"Fran√ßais\", \"üá´üá∑\")\n}\nOTHER_LANGUAGES = {\n    \"iw\": (\"◊¢◊ë◊®◊ô◊™\", \"üáÆüá±\"),\n    \"ar\": (\"ÿßŸÑÿπÿ±ÿ®Ÿäÿ©\", \"üá∏üá¶\"),\n    \"ru\": (\"–†—É—Å—Å–∫–∏–π\", \"üá∑üá∫\"),\n    \"de\": (\"Deutsch\", \"üá©üá™\"),\n    \"it\": (\"Italiano\", \"üáÆüáπ\"),\n    \"pt\": (\"Portugu√™s\", \"üáµüáπ\"),\n    \"ja\": (\"Êó•Êú¨Ë™û\", \"üáØüáµ\"),\n}\n\n\n@wa.on_message(filters.text)\ndef offer_translation(_: WhatsApp, msg: types.Message):\n    msg_id = msg.reply_text(\n        text='Choose language to translate to:',\n        buttons=types.SectionList(\n            button_title='üåê Choose Language',\n            sections=[\n                types.Section(\n                    title=\"üåü Popular languages\",\n                    rows=[\n                        types.SectionRow(\n                            title=f\"{flag} {name}\",\n                            callback_data=f\"translate:{code}\",\n                        )\n                        for code, (name, flag) in POPULAR_LANGUAGES.items()\n                    ],\n                ),\n                types.Section(\n                    title=\"üåê Other languages\",\n                    rows=[\n                        types.SectionRow(\n                            title=f\"{flag} {name}\",\n                            callback_data=f\"translate:{code}\",\n                        )\n                        for code, (name, flag) in OTHER_LANGUAGES.items()\n                    ],\n                ),\n            ]\n        )\n    )\n    # Save the message ID so we can use it later to get the original text.\n    MESSAGE_ID_TO_TEXT[msg_id] = msg.text\n\n@wa.on_callback_selection(filters.startswith('translate:'))\ndef translate(_: WhatsApp, sel: types.CallbackSelection):\n    lang_code = sel.data.split(':')[-1]\n    try:\n        # every CallbackSelection has a reference to the original message (the selection's message)\n        original_text = MESSAGE_ID_TO_TEXT[sel.reply_to_message.message_id]\n    except KeyError:  # If the bot was restarted, the message ID is no longer valid.\n        sel.react('‚ùå')\n        sel.reply_text(\n            text='Original message not found. Please send a new message.'\n        )\n        return\n    try:\n        translated = translator.translate(original_text, dest=lang_code)\n    except Exception as e:\n        sel.react('‚ùå')\n        sel.reply_text(\n            text='An error occurred. Please try again.'\n        )\n        logging.exception(e)\n        return\n\n    sel.reply_text(\n        text=f\"Translated to {translated.dest}:\\n{translated.text}\"\n    )\n\n\n# Run the server\nflask_app.run()\n```\n\n----------------------------------------\n\nTITLE: Sending a Template Message with Dynamic Parameters in PyWa\nDESCRIPTION: Demonstrates sending a template message with dynamic content by replacing placeholders with actual values. The example shows how to populate header fields, body text parameters, and button values when sending a previously created template to a recipient.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/examples/template.rst#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom pywa.types import Template as Temp\nwa = WhatsApp(...)\nwa.send_template(\n    to='1234567890',\n    template=Temp(\n        name='buy_new_iphone_x',\n        language=Temp.Language.ENGLISH_US,\n        header=Temp.TextValue(value='15'),\n        body=[\n            Temp.TextValue(value='John Doe'),\n            Temp.TextValue(value='WA_IPHONE_15'),\n            Temp.TextValue(value='15%'),\n        ],\n        buttons=[\n            Temp.UrlButtonValue(value='iphone15'),\n            Temp.QuickReplyButtonData(data='unsubscribe_from_marketing_messages'),\n            Temp.QuickReplyButtonData(data='unsubscribe_from_all_messages'),\n        ],\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Installing pywa with Flask dependencies\nDESCRIPTION: Command to install pywa with additional dependencies required for using webhook features with Flask.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/getting-started.rst#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip3 install -U \"pywa[flask]\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a Random Image Bot with PyWa in Python\nDESCRIPTION: A WhatsApp bot that replies with a random image from Unsplash whenever a user sends a message. The response includes a caption and a button that links to the Unsplash website.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/examples/demo-bots.rst#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nimport flask\nfrom pywa import WhatsApp, types\n\nflask_app = flask.Flask(__name__)\n\nwa = WhatsApp(\n    phone_id='your_phone_number',\n    token='your_token',\n    server=flask_app,\n    verify_token='xyzxyz',\n)\n\n@wa.on_message\ndef send_random_image(_: WhatsApp, msg: types.Message):\n    msg.reply_image(\n        image='https://source.unsplash.com/random',\n        caption='üîÑ Random image',\n        buttons=types.ButtonUrl(title='Unsplash', url='https://unsplash.com')\n    )\n\n# Run the server\nflask_app.run()\n```\n\n----------------------------------------\n\nTITLE: Sending an Authentication Template with OTP Code in PyWa\nDESCRIPTION: Demonstrates how to send an authentication template with a specific OTP code to a recipient. This example shows the simplified process of sending an authentication message with just the required OTP code parameter.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/examples/template.rst#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom pywa.types import Template as Temp\nwa = WhatsApp(...)\nwa.send_template(\n    to='1234567890',\n        template=Temp(\n        name='auth_with_otp',\n        language=Temp.Language.ENGLISH_US,\n        buttons=Temp.OTPButtonCode(code='123456'),\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Handling Synchronous Exceptions When Sending Messages in PyWA\nDESCRIPTION: Demonstrates how to catch and handle exceptions when sending messages with duplicate button callback data, which triggers an InvalidParameter error during the sending operation.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/errors/overview.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nfrom pywa import WhatsApp, types, errors\n\nwa = WhatsApp(...)\n\ntry:\n    wa.send_message(..., buttons=[\n        types.Button(title=\"click 1\", callback_data=\"click\"),\n        types.Button(title=\"click 2\", callback_data=\"click\"),\n    ])\nexcept errors.InvalidParameter as e:  # duplicate callback_data in buttons (`click`)\n    logging.error(f\"Duplicated callback_data in buttons: {e}\")\n```\n\n----------------------------------------\n\nTITLE: Using Built-in Filters in PyWa for WhatsApp\nDESCRIPTION: Demonstrates how to use built-in filters from the pywa.filters module to handle specific message types and callback events. The example shows filtering for messages starting with 'Hello' or 'Hi' and handling a button click callback.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/filters/overview.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pywa import WhatsApp, types, filters\n\nwa = WhatsApp(...)\n\n@wa.on_message(filters.startswith('Hello', 'Hi', ignore_case=True))\ndef handle_hello(wa: WhatsApp, msg: types.Message):\n    msg.react('üëã')\n    msg.reply(f'Hello {msg.from_user.name}!', buttons=[types.Button('Click me!', 'click')])\n\n@wa.on_callback(filters.matches('click'))\ndef handle_click(wa: WhatsApp, clb: types.CallbackButton):\n    clb.reply('You clicked me!')\n```\n\n----------------------------------------\n\nTITLE: Sending Media Messages from URL with PyWA in Python\nDESCRIPTION: This code demonstrates how to send an image from a URL using the PyWA library. It initializes a WhatsApp client with phone ID and authentication token, then sends an image from a web URL to a specified recipient.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/examples/media.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pywa import WhatsApp\n\nwa = WhatsApp(phone_id='972123456789', token='xxxxx')\nrecipient = '972987654321'\n\n# - From URL\nwa.send_image(\n    to=recipient,\n    image='https://cdn.pixabay.com/photo/2014/10/01/10/44/animal-468228_1280.jpg'\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Screen in PyWa\nDESCRIPTION: Python code defining a dynamic screen for a sign-up flow. It demonstrates how to create a Screen object with dynamic data fields that can be populated at runtime.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/flows/overview.rst#2025-04-18_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nScreen(\n    id=\"SIGN_UP\",\n    title=\"Finish Sign Up\",\n    terminal=True,\n    data=[\n        first_name_helper_text := ScreenData(key=\"first_name_helper_text\", example=\"Enter your first name\"),\n        is_last_name_required := ScreenData(key=\"is_last_name_required\", example=True),\n        is_email_enabled := ScreenData(key=\"is_email_enabled\", example=False),\n    ],\n    ...\n)\n```\n\n----------------------------------------\n\nTITLE: Setting up FastAPI with Automatic Callback Registration\nDESCRIPTION: Example of initializing WhatsApp client with FastAPI and automatic callback URL registration. Requires app ID and secret for automatic webhook setup.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/handlers/overview.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport fastapi\nfrom pywa import WhatsApp\n\nfastapi_app = fastapi.FastAPI()\n\nwa = WhatsApp(\n    phone_id='1234567890',\n    token='xxxxxx',\n    server=fastapi_app,\n    callback_url='https://abc123.trycloudflare.com',\n    verify_token='XYZ123',\n    app_id=123456,\n    app_secret='xxxxxx'\n)\n```\n\n----------------------------------------\n\nTITLE: Sending Media Messages from Bytes with PyWA in Python\nDESCRIPTION: This code shows how to download media content from a URL as bytes and then send it as a document. It uses the requests library to download an image and then sends the raw binary content as a document attachment with a specified filename.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/examples/media.rst#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom pywa import WhatsApp\nimport requests\n\nwa = WhatsApp(phone_id='972123456789', token='xxxxx')\nrecipient = '972987654321'\n\nres = requests.get('https://cdn.pixabay.com/photo/2014/10/01/10/44/animal-468228_1280.jpg')\nwa.send_document(\n    to=recipient,\n    document=res.content,\n    filename='animal.jpg'\n)\n```\n\n----------------------------------------\n\nTITLE: Sending Flow Message with Button\nDESCRIPTION: Demonstrates how to send a WhatsApp message with an attached flow button for user interaction\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/flows/overview.rst#2025-04-18_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom pywa import WhatsApp\nfrom pywa.types import FlowButton\n\nwa = WhatsApp(...)\n\nwa.send_message(\n    to=\"1234567890\",\n    text=\"Hi, You need to finish your sign up!\",\n    buttons=FlowButton(\n        title=\"Finish Sign Up\",\n        flow_id=\"1234567890123456\",  # The `static_flow` flow id from above\n        flow_token=\"AQAAAAACS5FpgQ_cAAAAAD0QI3s.\",\n        mode=FlowStatus.DRAFT,\n        flow_action_type=FlowActionType.NAVIGATE,\n        flow_action_screen=\"SIGN_UP\", # The screen id to open when the user clicks the button\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Handling Flow Completion in PyWa\nDESCRIPTION: Python code to handle flow completion events in PyWa. It demonstrates how to register a callback function that processes the flow completion data, including accessing media files.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/flows/overview.rst#2025-04-18_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom pywa import WhatsApp\nfrom pywa.types import FlowCompletion\n\nwa = WhatsApp(...)\n\n@wa.on_flow_completion\ndef on_flow_completion(_: WhatsApp, flow: FlowCompletion):\n    print(f\"The user {flow.from_user.name} just completed the {flow.token} flow!\")\n    print(flow.response)\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom pywa import WhatsApp, types\n\nwa = WhatsApp(...)\n\n@wa.on_flow_completion\ndef on_flow_completion(_: WhatsApp, flow: FlowCompletion):\n    img = flow.get_media(types.Image, key=\"profile_pic\")\n    img.download()\n```\n\n----------------------------------------\n\nTITLE: Handling Listener Exceptions in PyWa\nDESCRIPTION: An example demonstrating how to handle listener exceptions for timeout and cancellation. The code uses try-except blocks to catch ListenerTimeout and ListenerCanceled exceptions and respond appropriately.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/listeners/overview.rst#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom pywa import WhatsApp, types, filters, listeners\n\nwa = WhatsApp(...)\n\n@wa.on_message(filters.command(\"start\"))\ndef start(client: WhatsApp, msg: types.Message):\n    msg.reply(\"Hello! Please send me your age.\", buttons=[types.Button(\"Cancel\", callback_data=\"cancel\")])\n\n    try:\n        age = client.listen(\n            to=msg.sender,\n            filters=filters.message & filters.text,\n            cancelers=filters.callback_button & filters.matches(\"cancel\"),\n            timeout=20\n        )\n        msg.reply(f\"Your age is {age.text}.\")\n    except ListenerTimeout:\n        msg.reply(\"You took too long to send your age.\")\n    except ListenerCanceled:\n        msg.reply(\"You canceled the operation.\")\n```\n\n----------------------------------------\n\nTITLE: Dynamic Flow Implementation with PyWa\nDESCRIPTION: Beginning of a dynamic flow implementation that uses screen data for conditional rendering. This example shows how to define screen data variables that can be modified during flow execution.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/flows/overview.rst#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndynamic_flow = FlowJSON(\n    version=utils.Version.FLOW_JSON,\n    data_api_version=utils.Version.FLOW_DATA_API,\n    routing_model={},\n    screens=[\n        Screen(\n            id=\"SIGN_UP\",\n            title=\"Finish Sign Up\",\n            terminal=True,\n            data=[\n                first_name_helper_text := ScreenData(key=\"first_name_helper_text\", example=\"Enter your first name\"),\n                is_last_name_required := ScreenData(key=\"is_last_name_required\", example=True),\n                is_email_enabled := ScreenData(key=\"is_email_enabled\", example=False),\n            ],\n            layout=Layout(\n                type=LayoutType.SINGLE_COLUMN,\n                children=[\n\n\n```\n\n----------------------------------------\n\nTITLE: Handling SentMessage Events in Python\nDESCRIPTION: Methods for waiting on various events related to sent messages, such as replies, button clicks, selections, read receipts, and delivery confirmations.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/listeners/reference.rst#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nSentMessage.wait_for_reply()\n```\n\nLANGUAGE: python\nCODE:\n```\nSentMessage.wait_for_click()\n```\n\nLANGUAGE: python\nCODE:\n```\nSentMessage.wait_for_selection()\n```\n\nLANGUAGE: python\nCODE:\n```\nSentMessage.wait_until_read()\n```\n\nLANGUAGE: python\nCODE:\n```\nSentMessage.wait_until_delivered()\n```\n\n----------------------------------------\n\nTITLE: Validating Updates with Signature Verification in Pywa\nDESCRIPTION: Shows how to enable update validation by checking the signature sent by WhatsApp, enhancing security by verifying that updates are genuinely from WhatsApp.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/handlers/overview.rst#2025-04-18_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom pywa import WhatsApp\n\nwa = WhatsApp(\n    validate_updates=True, # Default is True\n    app_secret='xxxx',\n    ...\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Filters in PyWa for WhatsApp\nDESCRIPTION: Demonstrates how to create and use custom filters in PyWa. The example shows a custom filter function that checks if a message does not contain 'xyz', and how to use it with the @wa.on_message decorator. It also includes an example using a lambda function as a filter.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/filters/overview.rst#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom pywa import WhatsApp, types, filters\n\ndef without_xyz_filter(_: WhatsApp, msg: types.Message) -> bool:\n    return msg.text and 'xyz' not in msg.text\n\nwa = WhatsApp(...)\n\n@wa.on_message(filters.new(without_xyz_filter))\ndef messages_without_xyz(wa: WhatsApp, msg: Message):\n    msg.reply('You said something without xyz!')\n\n# Or with lambda:\n@wa.on_message(filters.new(lambda _, msg: msg.text and 'xyz' not in msg.text))\ndef messages_without_xyz(wa: WhatsApp, msg: Message):\n    msg.reply('You said something without xyz!')\n```\n\n----------------------------------------\n\nTITLE: Converting to Listeners in PyWa 2.x\nDESCRIPTION: Shows how to convert multiple handlers to a more streamlined listener-based approach using wait_for_reply.\nSOURCE: https://github.com/david-lev/pywa/blob/master/MIGRATION.md#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Old code\nfrom pywa import WhatsApp, types, filters\n\n@wa.on_message(filters.command(\"start\"))\ndef on_start(_: WhatsApp, m: types.Message):\n    m.reply(\"How old are you?\")\n\n@wa.on_message(filters.text & filters.new(lambda _, m: m.text.isdigit()))\ndef on_age(_: WhatsApp, m: types.Message):\n    m.reply(f\"You are {m.text} years old\")\n    m.reply(\"What is your name?\")\n\n@wa.on_message(filters.text & filters.new(lambda _, m: m.text.isalpha()))\ndef on_name(_: WhatsApp, m: types.Message):\n    m.reply(f\"Hello {m.text}\")\n\n# New code\nfrom pywa import WhatsApp, types, filters\n\nwa = WhatsApp(...)\n\n@wa.on_message(filters.command(\"start\"))\ndef on_start(_: WhatsApp, m: types.Message):\n    age = m.reply(\"How old are you?\").wait_for_reply(\n        filters=filters.text & filters.new(lambda _, m: m.text.isdigit()),\n    )\n    m.reply(f\"You are {age.text} years old\")\n    name = m.reply(\"What is your name?\").wait_for_reply(\n        filters=filters.text & filters.new(lambda _, m: m.text.isalpha()),\n    )\n    m.reply(f\"Hello {name.text}\")\n```\n\n----------------------------------------\n\nTITLE: Migrating Async Handlers in PyWa\nDESCRIPTION: Example showing how to migrate async message handlers from sync to async version of PyWa. Demonstrates proper async/await usage with message replies.\nSOURCE: https://github.com/david-lev/pywa/blob/master/MIGRATION.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Old code\nfrom pywa import WhatsApp, types\n\nwa = WhatsApp(...)\n\n@wa.on_message\nasync def on_message(_: WhatsApp, msg: types.Message):\n  msg.reply(\"Hello, World!\")\n\n\n# New code\nfrom pywa_async import WhatsApp, types\n\nwa = WhatsApp(...)\n\n@wa.on_message\nasync def on_message(_: WhatsApp, msg: types.Message):\n  await msg.reply(\"Hello, World!\")\n```\n\n----------------------------------------\n\nTITLE: Using wait_for_reply Shortcut in PyWa\nDESCRIPTION: A shortcut example using wait_for_reply to create a listener. This simplified approach combines sending a message and waiting for a text reply in a single method call.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/listeners/overview.rst#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom pywa import WhatsApp, types, filters\n\nwa = WhatsApp(...)\n\n@wa.on_message(filters.command(\"start\"))\ndef start(client: WhatsApp, msg: types.Message):\n    age: types.Message = m.reply(\"Hello! How old are you?\").wait_for_reply(filters.text)\n    m.reply(f\"You are {age.text} years old\")\n```\n\n----------------------------------------\n\nTITLE: Updating Filter System in PyWa 2.x\nDESCRIPTION: Demonstrates migration to the new filter system using logical operators for combining filters and new filter syntax.\nSOURCE: https://github.com/david-lev/pywa/blob/master/MIGRATION.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Old code\nfrom pywa import WhatsApp, filters, types\n\nwa = WhatsApp(...)\n\n@wa.on_message(filters.text, lambda _, m: m.text.isdigit())\ndef on_message(_: WhatsApp, msg: types.Message):\n  msg.reply(\"Hello, World!\")\n\n@wa.on_message(filters.any_(filters.text.is_command, filters.text.command(\"start\")))\ndef on_command(_, __): ...\n\n# New code\nfrom pywa import WhatsApp, filters, types\n\nwa = WhatsApp(...)\n\n@wa.on_message(filters.text & filters.new(lambda _, m: m.text.isdigit()))\ndef on_message(_: WhatsApp, msg: types.Message):\n  msg.reply(\"Hello, World!\")\n\n@wa.on_message(filters.is_command | filters.command(\"start\"))\ndef on_command(_, __): ...\n```\n\n----------------------------------------\n\nTITLE: Creating an Authentication Template with OTP Support in PyWa\nDESCRIPTION: Creates a WhatsApp authentication template with OTP (One-Time Password) functionality. The template includes security recommendations, code expiration settings, and supports zero-tap authentication with autofill capability for Android applications.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/examples/template.rst#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pywa.types import NewTemplate as NewTemp\nwa = WhatsApp(...)\n\nwa.create_template(\n    template=NewTemp(\n        name='auth_with_otp',\n        category=NewTemp.Category.AUTHENTICATION,\n        language=NewTemp.Language.ENGLISH_US,\n        body=NewTemp.AuthBody(\n            code_expiration_minutes=5,\n            add_security_recommendation=True,\n        ),\n        buttons=NewTemp.OTPButton(\n            otp_type=NewTemp.OTPButton.OtpType.ZERO_TAP,\n            title='Copy Code',\n            autofill_text='Autofill',\n            package_name='com.example.app',\n            signature_hash='1234567890ABCDEF1234567890ABCDEF12345678'\n        )\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Flow Metadata in PyWa\nDESCRIPTION: Python code to update the flow metadata, specifying the endpoint for handling flow requests. This is necessary for WhatsApp to know where to send the requests.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/flows/overview.rst#2025-04-18_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom pywa import WhatsApp\n\nwa = WhatsApp(...)\n\nwa.update_flow_metadata(\n    flow_id=\"1234567890123456\",  # The `dynamic_flow` flow id from above\n    endpoint_uri=\"https://your-server.com/flow\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Form with Text Inputs in Python\nDESCRIPTION: Demonstrates creation of a WhatsApp form with text input fields for first name, last name, and email, along with a footer button for completion\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/flows/overview.rst#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nForm(\n    name=\"form\",\n    children=[\n        first_name := TextInput(\n            name=\"first_name\",\n            label=\"First Name\",\n            input_type=InputType.TEXT,\n            required=True,\n            helper_text=first_name_helper_text.ref,\n        ),\n        last_name := TextInput(\n            name=\"last_name\",\n            label=\"Last Name\",\n            input_type=InputType.TEXT,\n            required=is_last_name_required.ref,\n        ),\n        email := TextInput(\n            name=\"email\",\n            label=\"Email Address\",\n            input_type=InputType.EMAIL,\n            enabled=is_email_enabled.ref,\n        ),\n        Footer(\n            label=\"Done\",\n            on_click_action=CompleteAction(\n                payload={\n                    \"first_name\": last_name.ref,\n                    \"last_name\": last_name.ref,\n                    \"email\": email.ref,\n                },\n            ),\n        ),\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a WhatsApp Flow with PyWa\nDESCRIPTION: Example of creating a WhatsApp Flow using the PyWa library. This code initializes a WhatsApp client with a business account ID and creates a new flow with specified categories.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/flows/overview.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pywa import WhatsApp\nfrom pywa.types import FlowCategory\n\n# WhatsApp Business Account ID (WABA) is required\nwa = WhatsApp(..., business_account_id=\"1234567890123456\")\n\nflow_id = wa.create_flow(\n    name=\"My New Flow\",\n    categories=[FlowCategory.CUSTOMER_SUPPORT, FlowCategory.SURVEY]\n)\nprint(wa.get_flow(flow_id))\n\n# FlowDetails(id='1234567890123456', name='My New Flow', status=FlowStatus.DRAFT, ...)\n```\n\n----------------------------------------\n\nTITLE: Initializing WhatsApp Client with Private Key\nDESCRIPTION: Python code to initialize the WhatsApp client with the business private key. The private key is read from a file and passed as an argument to the WhatsApp constructor.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/flows/overview.rst#2025-04-18_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom pywa import WhatsApp\n\nwa = WhatsApp(..., business_private_key=open(\"private.pem\").read())\n```\n\n----------------------------------------\n\nTITLE: Handling Unsupported Message Types in PyWA\nDESCRIPTION: Shows how to handle unsupported message types received from users by setting up a handler with the unsupported filter to respond appropriately.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/errors/overview.rst#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom pywa import WhatsApp, types, filters\n\nwa = WhatsApp(...)\n\n@wa.on_message(filters.unsupported)\ndef handle_unsupported_message(client: WhatsApp, msg: types.Message):\n    msg.reply_text(\"Sorry, I don't support this message type yet\")\n```\n\n----------------------------------------\n\nTITLE: Using Handler Objects\nDESCRIPTION: Example of implementing and registering handlers using Handler objects for more structured code organization.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/handlers/overview.rst#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom pywa import WhatsApp, types\n\ndef handle_message(wa: WhatsApp, msg: types.Message):\n    print(message)\n\ndef handle_callback_button(wa: WhatsApp, clb: types.CallbackButton):\n    print(clb.data)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Flow Details\nDESCRIPTION: Example of retrieving flow details and validation errors using the WhatsApp client\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/flows/overview.rst#2025-04-18_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom pywa import WhatsApp\n\nwa = WhatsApp(...)\n\nprint(wa.get_flow(flow_id))\n\n# FlowDetails(id='1234567890123456', name='My New Flow', validation_errors=(...))\n```\n\n----------------------------------------\n\nTITLE: Documenting Template Class in Python\nDESCRIPTION: Autoclass documentation for Template class, listing its members including various value types and button data structures.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/types/template.rst#2025-04-18_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: Template()\n    :members: TextValue, Currency, DateTime, QuickReplyButtonData, UrlButtonValue,\n                OTPButtonCode, MPMButton, CatalogButton, CopyCodeButton\n```\n\n----------------------------------------\n\nTITLE: Decrypting Media in Flow Requests in PyWa\nDESCRIPTION: Python code showing how to decrypt media files received in flow requests. This is necessary when using PhotoPicker or DocumentPicker components.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/flows/overview.rst#2025-04-18_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n@wa.on_flow_request(endpoint=\"/flow\")\ndef on_support_request(_: WhatsApp, req: FlowRequest) -> FlowResponse:\n    media_id, filename, decrypted_data = req.decrypt_media(key=\"driver_license\", index=0)\n    with open(f\"media/{filename}\", \"wb\") as f:\n        f.write(decrypted_data)\n    ...\n```\n\n----------------------------------------\n\nTITLE: Controlling Handler Execution Flow Dynamically in Pywa\nDESCRIPTION: Demonstrates how to dynamically control handler execution flow using stop_handling() and continue_handling() methods based on conditional logic.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/handlers/overview.rst#2025-04-18_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom pywa import WhatsApp, types, filters\n\nwa = WhatsApp(...)\n\n@wa.on_message(filters.text)\ndef handle_message(client: WhatsApp, msg: types.Message):\n    print(msg)\n    if msg.text == 'stop':\n        msg.stop_handling() # The next handler will not be called\n    else:\n        msg.continue_handling() # The next handler will be called\n\n...\n```\n\n----------------------------------------\n\nTITLE: Setting up FastAPI with Manual Callback Registration\nDESCRIPTION: Example of initializing WhatsApp client with FastAPI for manual callback URL registration in the WhatsApp dashboard.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/handlers/overview.rst#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport fastapi\nfrom pywa import WhatsApp\n\nfastapi_app = fastapi.FastAPI()\n\nwa = WhatsApp(\n    phone_id='1234567890',\n    token='xxxxxx',\n    server=fastapi_app,\n    verify_token='XYZ123',\n)\n```\n\n----------------------------------------\n\nTITLE: Sending Dynamic Flow with Image in PyWa\nDESCRIPTION: Python code to send a dynamic flow with an image using PyWa. It demonstrates how to create a FlowButton with specific parameters for data exchange.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/flows/overview.rst#2025-04-18_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom pywa import WhatsApp\nfrom pywa.types import FlowButton, FlowActionType, FlowStatus\n\nwa = WhatsApp(...)\n\nwa.send_image(\n    to=\"1234567890\",\n    image=\"https://t3.ftcdn.net/jpg/03/82/73/76/360_F_382737626_Th2TUrj9PbvWZKcN9Kdjxu2yN35rA9nU.jpg\",\n    caption=\"Hi, You need to finish your sign up!\",\n    buttons=FlowButton(\n        title=\"Finish Sign Up\",\n        flow_id=\"1234567890123456\",  # The `dynamic_flow` flow id from above\n        flow_token=\"AQAAAAACS5FpgQ_cAAAAAD0QI3s.\",\n        mode=FlowStatus.DRAFT,\n        flow_action_type=FlowActionType.DATA_EXCHANGE,  # This time we want to exchange data\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Default Handler Execution Flow in Pywa\nDESCRIPTION: Shows the default behavior where once a handler is called, subsequent handlers for the same update are not executed. This enables single-handler processing per update.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/handlers/overview.rst#2025-04-18_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom pywa import WhatsApp, types\n\nwa = WhatsApp(...)\n\n@wa.on_message\ndef handle_message(client: WhatsApp, msg: types.Message):\n    print(msg)\n    # The next handler will not be called\n\n@wa.on_message\ndef handle_message2(client: WhatsApp, msg: types.Message):\n    print(msg)\n```\n\n----------------------------------------\n\nTITLE: Handler Module Implementation\nDESCRIPTION: Example of implementing handlers in a separate module using class-level decorators.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/handlers/overview.rst#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom pywa import WhatsApp, types\nfrom fastapi import FastAPI\n\nfastapi_app = FastAPI()\nwa = WhatsApp(..., server=fastapi_app)\n\n@WhatsApp.on_message\ndef handle_message(client: WhatsApp, msg: types.Message):\n    print(msg)\n```\n\n----------------------------------------\n\nTITLE: Setting Business Public Key in PyWa\nDESCRIPTION: Python code to set the business public key using the WhatsApp client in PyWa. The public key is read from a file and set using the set_business_public_key method.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/flows/overview.rst#2025-04-18_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom pywa import WhatsApp\n\nwa = WhatsApp(...)\n\nwa.set_business_public_key(open(\"public.pem\").read())\n```\n\n----------------------------------------\n\nTITLE: Using wait_until_delivered Shortcut in PyWa\nDESCRIPTION: An example using the wait_until_delivered shortcut to ensure a message is delivered before sending another. This pattern helps in sequential message delivery where order matters.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/listeners/overview.rst#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom pywa import WhatsApp, types, filters\n\nwa = WhatsApp(...)\n\n@wa.on_message(filters.command(\"start\"))\ndef start(client: WhatsApp, msg: types.Message):\n    msg.reply(f\"Hello {msg.from_user.name}!\").wait_until_delivered()\n    msg.reply(\"How can I help you?\")\n```\n\n----------------------------------------\n\nTITLE: Dynamic Sign Up Flow JSON Configuration\nDESCRIPTION: JSON configuration for WhatsApp flow defining screen layout, form fields, and data bindings\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/flows/overview.rst#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"version\": \"3.0\",\n    \"data_api_version\": \"3.0\",\n    \"routing_model\": {},\n    \"screens\": [\n        {\n            \"id\": \"SIGN_UP\",\n            \"title\": \"Finish Sign Up\",\n            \"data\": {\n                \"first_name_helper_text\": {\n                    \"type\": \"string\",\n                    \"__example__\": \"Enter your first name\"\n                },\n                \"is_last_name_required\": {\n                    \"type\": \"boolean\",\n                    \"__example__\": true\n                },\n                \"is_email_enabled\": {\n                    \"type\": \"boolean\",\n                    \"__example__\": false\n                }\n            },\n            \"terminal\": true,\n            \"layout\": {\n                \"type\": \"SingleColumnLayout\",\n                \"children\": [\n                    {\n                        \"type\": \"Form\",\n                        \"name\": \"form\",\n                        \"children\": [\n                            {\n                                \"type\": \"TextInput\",\n                                \"name\": \"first_name\",\n                                \"label\": \"First Name\",\n                                \"input-type\": \"text\",\n                                \"required\": true,\n                                \"helper-text\": \"${data.first_name_helper_text}\"\n                            },\n                            {\n                                \"type\": \"TextInput\",\n                                \"name\": \"last_name\",\n                                \"label\": \"Last Name\",\n                                \"input-type\": \"text\",\n                                \"required\": \"${data.is_last_name_required}\"\n                            },\n                            {\n                                \"type\": \"TextInput\",\n                                \"name\": \"email\",\n                                \"label\": \"Email Address\",\n                                \"input-type\": \"email\",\n                                \"enabled\": \"${data.is_email_enabled}\"\n                            },\n                            {\n                                \"type\": \"Footer\",\n                                \"label\": \"Done\",\n                                \"on-click-action\": {\n                                    \"name\": \"complete\",\n                                    \"payload\": {\n                                        \"first_name\": \"${form.first_name}\",\n                                        \"last_name\": \"${form.last_name}\",\n                                        \"email\": \"${form.email}\"\n                                    }\n                                }\n                            }\n                        ]\n                    }\n                ]\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating WhatsApp Flow Implementation\nDESCRIPTION: Shows how to update a WhatsApp flow using the WhatsApp client with validation error handling\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/flows/overview.rst#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom pywa import WhatsApp\nfrom pywa.types.flows import *\n\nyour_flow_json = FlowJSON(...)  # keep edit your flow\n\nif __name__ == \"__main__\":\n    wa = WhatsApp(..., business_account_id=\"1234567890123456\")\n    flow_id = \"123456789\" # wa.create_flow(name=\"My New Flow\") # run this only once\n\n    success, validation_errors = wa.update_flow_json(flow_id, flow_json=your_flow_json)\n    if not success:\n        print(\"Validation errors:\")\n        for error in validation_errors:\n            print(error)\n```\n\n----------------------------------------\n\nTITLE: Handling Specific Error Types in Message Status Callbacks\nDESCRIPTION: Demonstrates how to handle different specific error types (ReEngagementMessage, MediaUploadError, MediaDownloadError) by using specialized filters in message status handlers.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/errors/overview.rst#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nfrom pywa import WhatsApp, filters, errors\n\nwa = WhatsApp(...)\n\nwa.send_message(to=\"972501234567\", text=\"Hello\")  # this conversation window is closed (24 hours passed)\n\nwa.send_image(  # this image does not exist\n    to=\"972501234567\",\n    image=\"https://example.com/this-image-does-not-exist.jpg\",\n    caption=\"Not found\"\n)\n\nwa.send_document(  # this document is too big\n    to=\"972501234567\",\n    document=\"https://example.com/document-size-is-too-big.pdf\",\n    filename=\"big.pdf\"\n)\n\n@wa.on_message_status(filters.failed_with(errors.ReEngagementMessage))\ndef handle_failed_reengagement(client: WhatsApp, status: types.MessageStatus):\n    logging.error(\"Message failed to sent to %s: %s. details: %s\",\n        status.from_user.wa_id, status.error.message, status.error.details\n    )\n\n@wa.on_status_message(filters.failed_with(errors.MediaUploadError))\ndef handle_failed_sent_media(client: WhatsApp, status: types.MessageStatus):\n    logging.error(\"Message failed to sent to %s: %s. details: %s\",\n        status.from_user.wa_id, status.error.message, status.error.details\n    )\n    status.reply_text(\"Sorry, I can't upload this file\")\n\n@wa.on_status_message(filters.failed_with(errors.MediaDownloadError))\ndef handle_failed_received_media(client: WhatsApp, status: types.MessageStatus):\n    logging.error(\"Got a media download error from %s: %s. details: %s\",\n        status.from_user.wa_id, status.error.message, status.error.details\n    )\n    status.reply_text(\"Sorry, I can't download this file\")\n```\n\n----------------------------------------\n\nTITLE: PyWa Installation Commands - Bash\nDESCRIPTION: Collection of pip installation commands for PyWa and its optional dependencies including FastAPI, Flask and cryptography support.\nSOURCE: https://github.com/david-lev/pywa/blob/master/README.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip3 install -U pywa\n```\n\nLANGUAGE: bash\nCODE:\n```\npip3 install -U git+https://github.com/david-lev/pywa.git\n```\n\nLANGUAGE: bash\nCODE:\n```\npip3 install -U \"pywa[fastapi]\"\npip3 install -U \"pywa[flask]\"\n```\n\nLANGUAGE: bash\nCODE:\n```\npip3 install -U \"pywa[cryptography]\"\n```\n\n----------------------------------------\n\nTITLE: Initializing WhatsApp Listeners in Python\nDESCRIPTION: Methods for starting and stopping listeners in the WhatsApp client. These methods are used to handle incoming messages and events.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/listeners/reference.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nWhatsApp.listen()\n```\n\nLANGUAGE: python\nCODE:\n```\nWhatsApp.stop_listening()\n```\n\n----------------------------------------\n\nTITLE: Handling SentMessage Objects in PyWa 2.x\nDESCRIPTION: Shows how to update code to work with SentMessage objects instead of direct message IDs when storing message references.\nSOURCE: https://github.com/david-lev/pywa/blob/master/MIGRATION.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Old code\nmessage_id = wa.send_message(\"Hello, World!\")\ndb.store_message_id(message_id)\n\n# New code\nsent_message = wa.send_message(\"Hello, World!\")\ndb.store_message_id(sent_message.id)\n```\n\n----------------------------------------\n\nTITLE: Defining Message Class in Python for PyWA\nDESCRIPTION: This snippet defines the Message class in the pywa.types module. It includes several methods such as media, is_reply, has_media, download_media, and copy. The class represents incoming WhatsApp messages and provides functionality to interact with message data.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/updates/message.rst#2025-04-18_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass Message():\n    :members: media, is_reply, has_media, download_media, copy\n```\n\n----------------------------------------\n\nTITLE: Enabling Continued Handler Execution in Pywa\nDESCRIPTION: Shows how to enable continuous handler execution by setting the continue_handling parameter to True when initializing the WhatsApp client.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/handlers/overview.rst#2025-04-18_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nwa = WhatsApp(..., continue_handling=True)\n\n@wa.on_message\ndef handle_message(client: WhatsApp, msg: types.Message):\n    print(msg)\n    # The next handler WILL be called\n...\n```\n\n----------------------------------------\n\nTITLE: Using Decorators for Handler Registration in PyWa 2.x\nDESCRIPTION: Shows migration from manual handler registration to using decorators across multiple modules.\nSOURCE: https://github.com/david-lev/pywa/blob/master/MIGRATION.md#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Old code\n\n# module1.py\n\nfrom pywa import WhatsApp, types\n\ndef on_start(_: WhatsApp, m: types.Message):\n    m.reply(\"How old are you?\")\n\ndef on_age(_: WhatsApp, m: types.Message):\n    m.reply(f\"You are {m.text} years old\")\n    m.reply(\"What is your name?\")\n\n# module2.py\n\nfrom pywa import WhatsApp, handlers, filters\n\nwa = WhatsApp(...)\n\nwa.add_handlers(handlers.MessageHandler(on_start, filters.command(\"start\")))\nwa.add_handlers(handlers.MessageHandler(on_age, filters.text & filters.new(lambda _, m: m.text.isdigit())))\n\n# New code\n\n# module1.py\n\nfrom pywa import WhatsApp, types, filters\n\n@WhatsApp.on_message(filters.command(\"start\"))  # we using the class here, not the instance!\ndef on_start(_: WhatsApp, m: types.Message):\n    m.reply(\"How old are you?\")\n\n@WhatsApp.on_message(filters.text & filters.new(lambda _, m: m.text.isdigit()))\ndef on_age(_: WhatsApp, m: types.Message):\n    m.reply(f\"You are {m.text} years old\")\n    m.reply(\"What is your name?\")\n\n# module2.py\n\nfrom pywa import WhatsApp\nfrom . import module1\n\nwa = WhatsApp(..., handlers_modules=[module1])\n```\n\n----------------------------------------\n\nTITLE: Installing pywa from source\nDESCRIPTION: Commands to clone the pywa repository from GitHub and install it from the local source. This provides the latest development version.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/getting-started.rst#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/david-lev/pywa.git\ncd pywa && pip3 install -U .\n```\n\n----------------------------------------\n\nTITLE: JSON Representation of a Static Sign-up Flow\nDESCRIPTION: The equivalent JSON representation of the static sign-up flow. This shows the raw format that is sent to the WhatsApp API, with form components and a completion action to collect user input.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/flows/overview.rst#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"3.0\",\n  \"screens\": [\n    {\n      \"id\": \"SIGN_UP\",\n      \"title\": \"Finish Sign Up\",\n      \"terminal\": true,\n      \"layout\": {\n        \"type\": \"SingleColumnLayout\",\n        \"children\": [\n          {\n            \"type\": \"Form\",\n            \"name\": \"form\",\n            \"children\": [\n              {\n                \"type\": \"TextInput\",\n                \"name\": \"first_name\",\n                \"label\": \"First Name\",\n                \"input-type\": \"text\",\n                \"required\": true\n              },\n              {\n                \"type\": \"TextInput\",\n                \"name\": \"last_name\",\n                \"label\": \"Last Name\",\n                \"input-type\": \"text\",\n                \"required\": true\n              },\n              {\n                \"type\": \"TextInput\",\n                \"name\": \"email\",\n                \"label\": \"Email Address\",\n                \"input-type\": \"email\",\n                \"required\": true\n              },\n              {\n                \"type\": \"Footer\",\n                \"label\": \"Done\",\n                \"on-click-action\": {\n                  \"name\": \"complete\",\n                  \"payload\": {\n                    \"first_name\": \"${form.first_name}\",\n                    \"last_name\": \"${form.last_name}\",\n                    \"email\": \"${form.email}\"\n                  }\n                },\n                \"enabled\": true\n              }\n            ]\n          }\n        ]\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating FlowJSON Component References in PyWa 2.x\nDESCRIPTION: Shows migration of FlowJSON component references from data_key and from_ref to the new .ref attribute.\nSOURCE: https://github.com/david-lev/pywa/blob/master/MIGRATION.md#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Old code\n\nfrom pywa.types.flows import *\n\nFlowJSON(\n  screens=[\n    Screen(\n      data=[\n        name := ScreenData(key=\"name\", example=\"David\")\n      ],\n      layout=Layout(\n        children=[\n          date := DatePicker(\n            on_select_action=Action(\n              payload={\"date\": FormRef(\"date\"), \"name\": DataKey(\"name\")},\n            ),\n          ),\n          Footer(\n            ...,\n            on_click_action=Action(\n              payload={\n                \"date\": date.form_ref,\n                \"name\": name.data_key\n              },\n            ),\n          ),\n        ],\n      ),\n    )\n  ],\n)\n\n# New code\n\nFlowJSON(\n  screens=[\n    Screen(\n      data=[\n        name := ScreenData(key=\"name\", example=\"David\")\n      ],\n      layout=Layout(\n        children=[\n          date := DatePicker(\n            on_select_action=Action(\n              payload={\"date\": ComponentRef(\"date\"), \"name\": ScreenDataRef(\"name\")},\n            ),\n          ),\n          Footer(\n            ...,\n            on_click_action=Action(\n              payload={\n                \"date\": date.ref,\n                \"name\": name.ref\n              },\n            ),\n          ),\n        ],\n      ),\n    )\n  ],\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Pre-commit Hooks for PyWA\nDESCRIPTION: Command to set up pre-commit hooks which automatically check code quality before commits are made.\nSOURCE: https://github.com/david-lev/pywa/blob/master/CONTRIBUTING.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npre-commit install\n```\n\n----------------------------------------\n\nTITLE: Flow JSON Structure Documentation in RestructuredText\nDESCRIPTION: RestructuredText documentation defining the class structure and components of Flow JSON objects in the pywa.types.flows module. Includes comprehensive class definitions for UI components, actions, and data handling.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/flows/flow_json.rst#2025-04-18_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\nFlow JSON\n=========\n\nHere you will find all the components that make up a Flow JSON object.\n\n.. currentmodule:: pywa.types.flows\n\n.. autoclass:: FlowJSON()\n\n.. autoclass:: Screen()\n\n.. autoclass:: ScreenData()\n    :members: ref, ref_in, update\n\n.. autoclass:: ScreenDataUpdate()\n\n.. autoclass:: Layout()\n\n.. autoclass:: LayoutType()\n\n.. autoclass:: Form()\n\n.. autoclass:: FormComponent\n    :members: ref, ref_in\n\n.. autoclass:: TextHeading()\n\n.. autoclass:: TextSubheading()\n\n.. autoclass:: TextBody()\n\n.. autoclass:: TextCaption()\n\n.. autoclass:: RichText()\n\n.. autoclass:: FontWeight()\n\n.. autoclass:: TextInput()\n\n.. autoclass:: InputType()\n\n.. autoclass:: TextArea()\n\n.. autoclass:: CheckboxGroup()\n\n.. autoclass:: ChipsSelector()\n\n.. autoclass:: RadioButtonsGroup()\n\n.. autoclass:: MediaSize()\n\n.. autoclass:: Footer()\n\n.. autoclass:: OptIn()\n\n.. autoclass:: Dropdown()\n\n.. autoclass:: EmbeddedLink()\n\n.. autoclass:: NavigationList()\n\n.. autoclass:: NavigationItem()\n\n.. autoclass:: NavigationItemStart()\n\n.. autoclass:: NavigationItemMainContent()\n\n.. autoclass:: NavigationItemEnd()\n\n.. autoclass:: DatePicker()\n\n.. autoclass:: CalendarPicker()\n\n.. autoclass:: CalendarPickerMode()\n\n.. autoclass:: CalendarDay()\n\n.. autoclass:: Image()\n\n.. autoclass:: ScaleType()\n\n.. autoclass:: PhotoPicker()\n\n.. autoclass:: PhotoSource()\n\n.. autoclass:: DocumentPicker()\n\n.. autoclass:: If()\n\n.. autoclass:: Switch()\n\n.. autoclass:: DataSource()\n\n.. autoclass:: DataExchangeAction()\n\n.. autoclass:: NavigateAction()\n\n.. autoclass:: CompleteAction()\n\n.. autoclass:: UpdateDataAction()\n\n.. autoclass:: OpenUrlAction()\n\n.. autoclass:: Next()\n\n.. autoclass:: NextType()\n\n.. autoclass:: FlowStr()\n\n.. autoclass:: ScreenDataRef()\n\n.. autoclass:: ComponentRef()\n\n.. autoclass:: Condition()\n\n.. autoclass:: MathExpression()\n```\n\n----------------------------------------\n\nTITLE: Cloning the PyWA Repository\nDESCRIPTION: Commands to fork and clone the PyWA repository to your local machine, which is the first step in the contribution process.\nSOURCE: https://github.com/david-lev/pywa/blob/master/CONTRIBUTING.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/<your-username>/pywa.git\ncd pywa\n```\n\n----------------------------------------\n\nTITLE: Documenting NewTemplate Class in Python\nDESCRIPTION: Autoclass documentation for NewTemplate class, listing its members including various template components and button types.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/types/template.rst#2025-04-18_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: NewTemplate()\n    :members: Category, Text, Body, AuthBody, Footer, PhoneNumberButton, UrlButton,\n                QuickReplyButton, OTPButton, MPMButton, CatalogButton, CopyCodeButton\n```\n\n----------------------------------------\n\nTITLE: Updating Webhook Handler in PyWa 2.x\nDESCRIPTION: Shows changes to webhook update handler function signature and parameter updates.\nSOURCE: https://github.com/david-lev/pywa/blob/master/MIGRATION.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Old code\nfrom pywa import WhatsApp, utils\n\nwa = WhatsApp(..., server=None)\n\ndef some_web_framework_handler(req):\n    res, status = wa.webhook_update_handler(\n      update=req.json(),\n      raw_body=req.read(),\n      hmac_header=req.headers.get(utils.HUB_SIG)\n    )\n    return res, status\n\n\n# New code\n\nfrom pywa import WhatsApp, utils\n\nwa = WhatsApp(..., server=None)\n\ndef some_web_framework_handler(req):\n    res, status = wa.webhook_update_handler(\n      update=req.read(),\n      hmac_header=req.headers.get(utils.HUB_SIG),\n    )\n    return res, status\n```\n\n----------------------------------------\n\nTITLE: Pushing PyWA Changes and Creating a Pull Request\nDESCRIPTION: Command to push your changes to your fork, after which you can create a pull request on GitHub.\nSOURCE: https://github.com/david-lev/pywa/blob/master/CONTRIBUTING.md#2025-04-18_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin my-new-feature\n```\n\n----------------------------------------\n\nTITLE: Sphinx RestructuredText Documentation for FlowCompletion Class\nDESCRIPTION: RestructuredText documentation defining the FlowCompletion class and its get_media method. The class represents an update received when a user completes a flow in WhatsApp.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/updates/flow_completion.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nFlow Completion\n===============\n\n.. currentmodule:: pywa.types\n\nThe :class:`FlowCompletion` class represents an update that arrives when user completes a flow.\n\n\n.. autoclass:: FlowCompletion()\n    :members: get_media\n```\n\n----------------------------------------\n\nTITLE: Defining MediaUploadError Class in Python\nDESCRIPTION: Definition of the MediaUploadError class, which may represent an error during media upload.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/errors/sending_messages_errors.rst#2025-04-18_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: MediaUploadError()\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for TemplateStatus Class in PyWa\nDESCRIPTION: This reStructuredText (RST) snippet sets up Sphinx documentation for the TemplateStatus class from the pywa.types module, including its nested enum types TemplateEvent and TemplateRejectionReason.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/updates/template_status.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nTemplate Status\n==================\n\n.. currentmodule:: pywa.types\n\n.. autoclass:: TemplateStatus()\n    :members: TemplateEvent, TemplateRejectionReason\n```\n\n----------------------------------------\n\nTITLE: Defining SendMessageError Class in Python\nDESCRIPTION: Definition of the SendMessageError class, which is likely a base class for message sending errors in the pywa library.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/errors/sending_messages_errors.rst#2025-04-18_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: SendMessageError()\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Defining MediaDownloadError Class in Python\nDESCRIPTION: Definition of the MediaDownloadError class, which likely represents an error during media download.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/errors/sending_messages_errors.rst#2025-04-18_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: MediaDownloadError()\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Accessing Message Status Filters in PyWA\nDESCRIPTION: This snippet demonstrates how to import and use message status filters from the PyWA library. These filters allow developers to query messages based on their delivery status, such as sent, delivered, read, or failed.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/filters/message_status_filters.rst#2025-04-18_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom pywa.filters import sent, delivered, read, failed, failed_with, with_tracker\n```\n\n----------------------------------------\n\nTITLE: Defining UnsupportedMessageType Class in Python\nDESCRIPTION: Definition of the UnsupportedMessageType class, which likely represents an error when an unsupported message type is used.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/errors/sending_messages_errors.rst#2025-04-18_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: UnsupportedMessageType()\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Defining MissingRequiredParameter Class in Python\nDESCRIPTION: Definition of the MissingRequiredParameter class, which may represent an error when a required parameter is missing.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/errors/sending_messages_errors.rst#2025-04-18_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: MissingRequiredParameter()\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents Structure for PyWa Examples in reStructuredText\nDESCRIPTION: A reStructuredText directive that creates a table of contents for PyWa examples documentation. It references six separate example pages covering different aspects of the PyWa library functionality.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/examples/overview.rst#2025-04-18_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n    demo-bots\n    message\n    interactive\n    media\n    sign_up_flow\n    template\n```\n\n----------------------------------------\n\nTITLE: Documenting PyWa IntegrityError Classes in reStructuredText\nDESCRIPTION: Defines documentation for integrity error classes in the PyWa library. The documentation uses reStructuredText directives to specify the module and autoclass directives to generate class documentation with inheritance information.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/errors/integrity_errors.rst#2025-04-18_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. currentmodule:: pywa.errors\n\n.. autoclass:: IntegrityError()\n    :show-inheritance:\n.. autoclass:: TemporarilyBlocked()\n    :show-inheritance:\n.. autoclass:: AccountLocked()\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Defining ServiceUnavailable Class in Python\nDESCRIPTION: Definition of the ServiceUnavailable class, which may represent an error when the messaging service is unavailable.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/errors/sending_messages_errors.rst#2025-04-18_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: ServiceUnavailable()\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Generating RSA Key Pair using OpenSSL\nDESCRIPTION: Commands to generate a public and private RSA key pair using OpenSSL. The private key is encrypted with a password and both keys are saved to files.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/flows/overview.rst#2025-04-18_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nopenssl genrsa -des3 -out private.pem 2048\n```\n\nLANGUAGE: bash\nCODE:\n```\nopenssl rsa -in private.pem -outform PEM -pubout -out public.pem\n```\n\n----------------------------------------\n\nTITLE: Defining ChatOpened Type - Python PyWa Framework\nDESCRIPTION: Class definition for ChatOpened type used to indicate when a user has opened a conversation with a bot in the PyWa framework. This class appears to be a simple event marker without additional properties.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/updates/chat_opened.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass ChatOpened()\n```\n\n----------------------------------------\n\nTITLE: Defining AccessDenied Class in Python\nDESCRIPTION: Definition of the AccessDenied class, which likely represents an error when access is denied to perform a messaging operation.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/errors/sending_messages_errors.rst#2025-04-18_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: AccessDenied()\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Installing pywa with cryptography dependencies\nDESCRIPTION: Command to install pywa with additional dependencies required for using the default FlowRequestDecryptor and FlowResponseEncryptor in Flow features.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/getting-started.rst#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npip3 install -U \"pywa[cryptography]\"\n```\n\n----------------------------------------\n\nTITLE: Importing CallbackButton from PyWA Types Module\nDESCRIPTION: ReStructuredText directive displaying the module path and class documentation for the CallbackButton class.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/updates/callback_button.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: pywa.types\n\n.. autoclass:: CallbackButton()\n```\n\n----------------------------------------\n\nTITLE: Defining UnknownError Class in Python\nDESCRIPTION: Definition of the UnknownError class, which may represent an unknown or unclassified error in the messaging process.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/errors/sending_messages_errors.rst#2025-04-18_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: UnknownError()\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Installing pywa with FastAPI dependencies\nDESCRIPTION: Command to install pywa with additional dependencies required for using webhook features with FastAPI.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/getting-started.rst#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip3 install -U \"pywa[fastapi]\"\n```\n\n----------------------------------------\n\nTITLE: Documenting CallbackSelection Class in reStructuredText\nDESCRIPTION: Documentation directive for the CallbackSelection class from the PyWA library. This reStructuredText snippet uses Sphinx autodoc extension to generate API documentation for the class.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/updates/callback_selection.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: pywa.types\n\n.. autoclass:: CallbackSelection()\n```\n\n----------------------------------------\n\nTITLE: Defining TemplateTextTooLong Class in Python\nDESCRIPTION: Definition of the TemplateTextTooLong class, which may represent an error when the template text exceeds the allowed length.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/errors/sending_messages_errors.rst#2025-04-18_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: TemplateTextTooLong()\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Installing pywa using pip\nDESCRIPTION: Command to install the pywa package using pip3. This installs the latest version from PyPI.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/getting-started.rst#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip3 install -U pywa\n```\n\n----------------------------------------\n\nTITLE: Defining GenericError Class in Python\nDESCRIPTION: Definition of the GenericError class, which likely represents a generic error in the messaging process.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/errors/sending_messages_errors.rst#2025-04-18_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: GenericError()\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Defining TemplateNotExists Class in Python\nDESCRIPTION: Definition of the TemplateNotExists class, which likely represents an error when a specified template doesn't exist.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/errors/sending_messages_errors.rst#2025-04-18_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: TemplateNotExists()\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Setting Up Python Virtual Environment for PyWA\nDESCRIPTION: Commands to create a virtual environment and install the required dependencies for development and documentation.\nSOURCE: https://github.com/david-lev/pywa/blob/master/CONTRIBUTING.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv .venv\nsource .venv/bin/activate\npip install -r requirements-dev.txt -r docs/requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Defining TemplateParamCountMismatch Class in Python\nDESCRIPTION: Definition of the TemplateParamCountMismatch class, which likely represents an error when the count of template parameters doesn't match.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/errors/sending_messages_errors.rst#2025-04-18_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: TemplateParamCountMismatch()\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Running PyWA Tests\nDESCRIPTION: Command to run the test suite to ensure everything is working correctly before making changes.\nSOURCE: https://github.com/david-lev/pywa/blob/master/CONTRIBUTING.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npytest\n```\n\n----------------------------------------\n\nTITLE: Defining RecipientNotInAllowedList Class in Python\nDESCRIPTION: Definition of the RecipientNotInAllowedList class, which may represent an error when sending to a recipient not in an allowed list.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/errors/sending_messages_errors.rst#2025-04-18_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: RecipientNotInAllowedList()\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Building PyWA Documentation Locally\nDESCRIPTION: Commands to build and view the documentation locally when making documentation changes.\nSOURCE: https://github.com/david-lev/pywa/blob/master/CONTRIBUTING.md#2025-04-18_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmake -C docs html\n```\n\n----------------------------------------\n\nTITLE: Defining ReEngagementMessage Class in Python\nDESCRIPTION: Definition of the ReEngagementMessage class, which may represent an error related to re-engagement messages.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/errors/sending_messages_errors.rst#2025-04-18_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: ReEngagementMessage()\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Committing PyWA Changes\nDESCRIPTION: Commands to stage and commit changes with a descriptive commit message following the project's conventions.\nSOURCE: https://github.com/david-lev/pywa/blob/master/CONTRIBUTING.md#2025-04-18_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\ngit commit -m \"[listeners] add `.ask(...)` shortcut\"\n```\n\n----------------------------------------\n\nTITLE: Documenting TemplateResponse Class in Python\nDESCRIPTION: Autoclass documentation for TemplateResponse class, without listing specific members.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/types/template.rst#2025-04-18_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: TemplateResponse()\n```\n\n----------------------------------------\n\nTITLE: Defining BusinessPaymentIssue Class in Python\nDESCRIPTION: Definition of the BusinessPaymentIssue class, which may represent an error related to business payment issues in messaging.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/errors/sending_messages_errors.rst#2025-04-18_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: BusinessPaymentIssue()\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Running FastAPI Development Server for Pywa\nDESCRIPTION: Command to start the FastAPI development server for a Pywa WhatsApp application.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/handlers/overview.rst#2025-04-18_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nfastapi dev main.py\n```\n\n----------------------------------------\n\nTITLE: Documenting WhatsApp Cloud API Raw Request Method\nDESCRIPTION: ReStructuredText documentation directive for the send_raw_request method from the WhatsAppCloudApi class in the pywa.api module. Used for generating API reference documentation.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/client/api_reference.rst#2025-04-18_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. currentmodule:: pywa.api\n\n.. automethod:: WhatsAppCloudApi.send_raw_request\n```\n\n----------------------------------------\n\nTITLE: Installing Cryptography Library\nDESCRIPTION: Commands to install the cryptography library, which is required for encryption and decryption in PyWa. It can be installed separately or as part of PyWa installation.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/flows/overview.rst#2025-04-18_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npip3 install cryptography\n```\n\nLANGUAGE: bash\nCODE:\n```\npip3 install \"pywa[cryptography]\"\n```\n\n----------------------------------------\n\nTITLE: Including Migration Guide in Sphinx Documentation with MyST Parser\nDESCRIPTION: This directive includes the project's migration guide (MIGRATION.md) into the Sphinx documentation. It uses the MyST Parser to process the Markdown content for Sphinx compatibility.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/migration.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: ../../../MIGRATION.md\n    :parser: myst_parser.sphinx_\n```\n\n----------------------------------------\n\nTITLE: PyWA Project Structure\nDESCRIPTION: Directory structure of the PyWA project showing the organization of files and modules.\nSOURCE: https://github.com/david-lev/pywa/blob/master/CONTRIBUTING.md#2025-04-18_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npywa/\n‚îú‚îÄ‚îÄ __init__.py\n‚îú‚îÄ‚îÄ _helpers.py\n‚îú‚îÄ‚îÄ api.py\n‚îú‚îÄ‚îÄ client.py\n‚îú‚îÄ‚îÄ errors.py\n‚îú‚îÄ‚îÄ filters.py\n‚îú‚îÄ‚îÄ handlers.py\n‚îú‚îÄ‚îÄ listeners.py\n‚îú‚îÄ‚îÄ server.py\n‚îú‚îÄ‚îÄ types\n‚îÇ   ‚îú‚îÄ‚îÄ __init__.py\n‚îÇ   ‚îú‚îÄ‚îÄ base_update.py\n‚îÇ   ‚îú‚îÄ‚îÄ callback.py\n‚îÇ   ‚îú‚îÄ‚îÄ chat_opened.py\n‚îÇ   ‚îú‚îÄ‚îÄ flows.py\n‚îÇ   ‚îú‚îÄ‚îÄ media.py\n‚îÇ   ‚îú‚îÄ‚îÄ message.py\n‚îÇ   ‚îú‚îÄ‚îÄ message_status.py\n‚îÇ   ‚îú‚îÄ‚îÄ others.py\n‚îÇ   ‚îú‚îÄ‚îÄ sent_message.py\n‚îÇ   ‚îî‚îÄ‚îÄ template.py\n‚îî‚îÄ‚îÄ utils.py\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for PyWA Types Documentation\nDESCRIPTION: This reStructuredText code defines a table of contents for the PyWA types documentation, listing different categories of types as separate pages.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/types/overview.rst#2025-04-18_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    media\n    keyboard\n    template\n    update_fields\n    others\n```\n\n----------------------------------------\n\nTITLE: Defining MessageUndeliverable Class in Python\nDESCRIPTION: Definition of the MessageUndeliverable class, which likely represents an error when a message cannot be delivered.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/errors/sending_messages_errors.rst#2025-04-18_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: MessageUndeliverable()\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: RST Module Documentation for Message Fields\nDESCRIPTION: ReStructuredText documentation defining the module structure and class references for PyWA message field types.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/types/update_fields.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: pywa.types.others\n\n.. autoclass:: Reaction()\n    :members: is_removed\n\n.. autoclass:: Location()\n    :members: current_location, in_radius\n\n.. autoclass:: Contact()\n    :members: as_vcard, to_dict, Name, Phone, Email, Url, Address, Org\n\n.. autoclass:: Product()\n    :members: total_price\n\n.. autoclass:: Order()\n    :members: total_price\n\n.. autoclass:: ReferredProduct()\n\n.. autoclass:: System()\n\n.. autoclass:: User()\n\n.. autoclass:: ReplyToMessage()\n\n.. autoclass:: Metadata()\n\n.. currentmodule:: pywa.types.message_status\n\n.. autoclass:: Conversation()\n\n.. autoclass:: ConversationCategory()\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents Structure in Sphinx Documentation\nDESCRIPTION: Configuration for the documentation's table of contents structure using restructuredtext toctree directives. The structure includes hidden home link and visible links to various documentation sections.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/index.rst#2025-04-18_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :hidden:\n\n   üìñ Home <self>\n\n.. toctree::\n\n    /content/getting-started\n    /content/client/overview\n    /content/handlers/overview\n    /content/listeners/overview\n    /content/updates/overview\n    /content/flows/overview\n    /content/filters/overview\n    /content/errors/overview\n    /content/types/overview\n    /content/examples/overview\n    /content/changelog\n    /content/contributing\n    /content/migration\n```\n\n----------------------------------------\n\nTITLE: Defining InvalidParameter Class in Python\nDESCRIPTION: Definition of the InvalidParameter class, which likely represents an error when an invalid parameter is provided.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/errors/sending_messages_errors.rst#2025-04-18_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: InvalidParameter()\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Defining MessageType Class in Python for PyWA\nDESCRIPTION: This snippet defines the MessageType class in the pywa.types module. While no specific details are provided, it's likely an enumeration or class to represent different types of WhatsApp messages.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/updates/message.rst#2025-04-18_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nclass MessageType()\n```\n\n----------------------------------------\n\nTITLE: Defining TemplateParamFormatMismatch Class in Python\nDESCRIPTION: Definition of the TemplateParamFormatMismatch class, which may represent an error when the format of template parameters doesn't match.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/errors/sending_messages_errors.rst#2025-04-18_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: TemplateParamFormatMismatch()\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting MessageStatusType Class in RST\nDESCRIPTION: ReStructuredText directive for documenting the MessageStatusType class within the same module\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/updates/message_status.rst#2025-04-18_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: MessageStatusType()\n```\n\n----------------------------------------\n\nTITLE: Defining RecipientCannotBeSender Class in Python\nDESCRIPTION: Definition of the RecipientCannotBeSender class, which likely represents an error when the recipient is the same as the sender.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/errors/sending_messages_errors.rst#2025-04-18_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: RecipientCannotBeSender()\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Creating a Branch for PyWA Changes\nDESCRIPTION: Command to create a new feature or bugfix branch for making your changes, using descriptive naming.\nSOURCE: https://github.com/david-lev/pywa/blob/master/CONTRIBUTING.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b my-new-feature\n```\n\n----------------------------------------\n\nTITLE: Documenting Language Class in Python\nDESCRIPTION: Autoclass documentation for Language class, without listing specific members.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/types/template.rst#2025-04-18_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: Language()\n```\n\n----------------------------------------\n\nTITLE: Defining IncorrectCertificate Class in Python\nDESCRIPTION: Definition of the IncorrectCertificate class, which likely represents an error related to incorrect certificate in messaging.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/errors/sending_messages_errors.rst#2025-04-18_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: IncorrectCertificate()\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Specifying HTTPX Dependency Version\nDESCRIPTION: Defines the minimum required version of the httpx HTTP client library as 0.27.0 or higher. This dependency specification ensures compatibility with PyWa project functionality.\nSOURCE: https://github.com/david-lev/pywa/blob/master/requirements.txt#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttpx>=0.27.0\n```\n\n----------------------------------------\n\nTITLE: Defining AccountInMaintenanceMode Class in Python\nDESCRIPTION: Definition of the AccountInMaintenanceMode class, which may represent an error when the account is in maintenance mode.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/errors/sending_messages_errors.rst#2025-04-18_snippet_20\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: AccountInMaintenanceMode()\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Including README and CHANGELOG in Sphinx Documentation with restructuredtext\nDESCRIPTION: Configuration for including external markdown files (README and CHANGELOG) in Sphinx documentation using myst_parser. The configuration specifies parser type and line constraints for the CHANGELOG.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/index.rst#2025-04-18_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. include:: ../../README.md\n    :parser: myst_parser.sphinx_\n\nüìù **Changelog**\n^^^^^^^^^^^^^^^^\n\n.. include:: ../../CHANGELOG.md\n    :parser: myst_parser.sphinx_\n    :start-line: 1\n    :end-line: 30\n```\n\n----------------------------------------\n\nTITLE: Serving PyWA Documentation Locally\nDESCRIPTION: Command to run a local server to view the documentation changes in a browser.\nSOURCE: https://github.com/david-lev/pywa/blob/master/CONTRIBUTING.md#2025-04-18_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m http.server 8000 -d docs/build/html\n```\n\n----------------------------------------\n\nTITLE: Including External Markdown in Sphinx Documentation with MyST Parser\nDESCRIPTION: This directive includes the project's CHANGELOG.md file in the Sphinx documentation. It uses the myst_parser.sphinx_ parser to properly render Markdown content within the reStructuredText-based Sphinx documentation system.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/changelog.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: ../../../CHANGELOG.md\n    :parser: myst_parser.sphinx_\n```\n\n----------------------------------------\n\nTITLE: Installing PyWa Testing and Development Dependencies with pip\nDESCRIPTION: This requirements file inherits from the main requirements.txt file and adds testing and development dependencies including pytest, coverage tools, linting, and pre-commit hooks.\nSOURCE: https://github.com/david-lev/pywa/blob/master/requirements-dev.txt#2025-04-18_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n-r requirements.txt\npytest==8.3.4\npytest-cov==6.0.0\npytest-asyncio==0.24.0\npytest-mock==3.14.0\nruff==0.8.1\npre-commit==4.0.1\ncryptography==44.0.1\n```\n\n----------------------------------------\n\nTITLE: Specifying Sphinx Documentation Dependencies with Version Constraints\nDESCRIPTION: A requirements file listing Sphinx-related packages with pinned versions. These packages enhance Sphinx documentation with features like book-style theming, copy buttons, OpenGraph metadata support, toggle buttons, Markdown parsing via MyST, and Google Analytics integration.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/requirements.txt#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsphinx-book-theme==1.1.3\nsphinx-copybutton==0.5.2\nsphinxext-opengraph==0.9.1\nsphinx-togglebutton==0.3.2\nmyst-parser==4.0.0\nsphinxcontrib-googleanalytics==0.4\n```\n\n----------------------------------------\n\nTITLE: Handling Failed Message Status Callbacks in PyWA\nDESCRIPTION: Shows how to set up a handler for failed message status events to capture errors that occur asynchronously after a message is sent, such as media upload failures or re-engagement errors.\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/errors/overview.rst#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nfrom pywa import WhatsApp, types, filters\n\nwa = WhatsApp(...)\n\n@wa.on_message_status(filters.failed)  # filter for failed message statuses\ndef handle_failed_message(client: WhatsApp, status: types.MessageStatus):\n    logging.error(\"Message failed to sent to %s: %s. details: %s\",\n        status.from_user.wa_id, status.error.message, status.error.details\n    )\n```\n\n----------------------------------------\n\nTITLE: Documenting MessageStatus Class in RST\nDESCRIPTION: ReStructuredText directive for documenting the MessageStatus class within the pywa.types.message_status module\nSOURCE: https://github.com/david-lev/pywa/blob/master/docs/source/content/updates/message_status.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: pywa.types.message_status\n\n.. autoclass:: MessageStatus()\n```"
  }
]