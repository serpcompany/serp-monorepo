[
  {
    "owner": "k3s-io",
    "repo": "k3s",
    "content": "TITLE: Installing K3s as a Service Using Installation Script\nDESCRIPTION: A bash command that downloads and executes the K3s installation script to set up K3s as a service. The script automatically starts the service and writes a kubeconfig file to /etc/rancher/k3s/k3s.yaml.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sfL https://get.k3s.io | sh -\n```\n\n----------------------------------------\n\nTITLE: Installing K3s on Worker Nodes\nDESCRIPTION: A bash command for installing K3s on worker nodes by passing the K3S_URL and K3S_TOKEN environment variables to the installation script. The token is created at /var/lib/rancher/k3s/server/node-token on the server.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sfL https://get.k3s.io | K3S_URL=https://myserver:6443 K3S_TOKEN=XXX sh -\n```\n\n----------------------------------------\n\nTITLE: Accessing K3s Cluster with kubectl\nDESCRIPTION: A bash command demonstrating how to use kubectl to list nodes in the K3s cluster after installation. The kubeconfig is automatically configured by the installation script.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo kubectl get nodes\n```\n\n----------------------------------------\n\nTITLE: Running K3s Server and Agent in Bash\nDESCRIPTION: This snippet demonstrates how to run a K3s server, retrieve node information, and connect an agent to the server. It includes steps for accessing the kubeconfig and obtaining the necessary node token for agent connection.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo k3s server &\n# Kubeconfig is written to /etc/rancher/k3s/k3s.yaml\nsudo k3s kubectl get nodes\n\n# On a different node run the below. NODE_TOKEN comes from\n# /var/lib/rancher/k3s/server/node-token on your server\nsudo k3s agent --server https://myserver:6443 --token ${NODE_TOKEN}\n```\n\n----------------------------------------\n\nTITLE: Setting Up K3s Git Repository\nDESCRIPTION: Shell commands for forking K3s, cloning locally, and configuring remote repositories. Sets up upstream remote and prevents direct pushing to upstream.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/docs/contrib/git_workflow.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n## Clone fork to local storage\nexport user=\"your github profile name\"\ngit clone https://github.com/$user/k3s.git\n# or: git clone git@github.com:$user/k3s.git\n\n## Add k3s as upstream to your fork\ncd k3s \ngit remote add upstream https://github.com/k3s-io/k3s.git\n# or: git remote add upstream git@github.com:k3s-io/k3s.git\n\n## Ensure to never push to upstream directly\ngit remote set-url --push upstream no_push\n\n## Confirm that your remotes make sense:\ngit remote -v\n```\n\n----------------------------------------\n\nTITLE: Configuring etcd S3 Snapshot Settings via Kubernetes Secret\nDESCRIPTION: YAML configuration for a Kubernetes Secret that stores etcd snapshot S3 configuration settings. The secret includes fields for S3 endpoint details, credentials, bucket configuration, and proxy settings. This secret must be created in the kube-system namespace.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/docs/adrs/etcd-s3-secret.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: k3s-etcd-snapshot-s3-config\n  namespace: kube-system\nstringData:\n  etcd-s3-endpoint: \"\"\n  etcd-s3-endpoint-ca: \"\"\n  etcd-s3-endpoint-ca-name: \"\"\n  etcd-s3-skip-ssl-verify: \"false\"\n  etcd-s3-access-key: \"AWS_ACCESS_KEY_ID\"\n  etcd-s3-secret-key: \"AWS_SECRET_ACCESS_KEY\"\n  etcd-s3-bucket: \"bucket\"\n  etcd-s3-folder: \"folder\"\n  etcd-s3-region: \"us-east-1\"\n  etcd-s3-insecure: \"false\"\n  etcd-s3-timeout: \"5m\"\n  etcd-s3-proxy: \"\"\n```\n\n----------------------------------------\n\nTITLE: Creating New K3s Feature Branch\nDESCRIPTION: Shell commands for creating a new feature branch from an up-to-date master branch. Includes steps to sync with upstream before branching.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/docs/contrib/git_workflow.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n## Get local master up to date\n# Assuming the k3s clone is the current working directory\ngit fetch upstream\ngit checkout master\ngit rebase upstream/master\n\n## Create a new branch from master\ngit checkout -b myfeature\n```\n\n----------------------------------------\n\nTITLE: Cloning the k3s Repository with Shallow Clone\nDESCRIPTION: Clones the k3s repository with depth 1 to reduce download size and speed up the process. This shallow clone excludes the full repository history.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/BUILDING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --depth 1 https://github.com/k3s-io/k3s.git\n```\n\n----------------------------------------\n\nTITLE: Running K3s Token Rotation with Auto-generated Token\nDESCRIPTION: Command to rotate the K3s server token by providing the old token value. This command will automatically generate a new random 16-character token and update the necessary configuration files.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/docs/adrs/server-token-rotation.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nk3s token rotate -t <OLD_TOKEN>\n```\n\n----------------------------------------\n\nTITLE: Preparing the Build Environment for k3s\nDESCRIPTION: Creates necessary directories and generates required code and artifacts for building k3s. This step downloads dependencies and generates code that is not stored in version control.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/BUILDING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p build/data && make download && make generate\n```\n\n----------------------------------------\n\nTITLE: Restarting K3s Servers with the New Token\nDESCRIPTION: Commands to stop the K3s service, update the token configuration, and restart the service on other server nodes. This is required after token rotation to apply the new token value.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/docs/adrs/server-token-rotation.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl stop k3s\n# edit /etc/rancher/k3s/config.yaml and update the token value\nsystemctl start k3s\n```\n\n----------------------------------------\n\nTITLE: Installing GNU Utils on macOS for K3s Development\nDESCRIPTION: Install the GNU utilities required for K3s development on macOS using Homebrew. These utilities replace macOS default tools with GNU-compatible versions needed for build scripts.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/docs/contrib/development.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew install coreutils findutils gawk gnu-sed gnu-tar grep make\n```\n\n----------------------------------------\n\nTITLE: Running K3s Token Rotation with Custom Token\nDESCRIPTION: Command to rotate the K3s server token by providing both the old token value and specifying a custom new token value. This updates the server token files with the specified new token.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/docs/adrs/server-token-rotation.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nk3s token rotate -t <OLD_TOKEN> --new-token <NEW_TOKEN>\n```\n\n----------------------------------------\n\nTITLE: Local Development Commands\nDESCRIPTION: Common commands used for local development and CI execution, including Drone pipeline execution and Dapper usage.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/docs/contrib/continuous_integration.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndrone exec --pipeline <pipeline name>\n```\n\n----------------------------------------\n\nTITLE: Go Package Naming Example\nDESCRIPTION: Demonstrates correct package naming convention in Go where package name should match the directory structure and avoid redundancy\nSOURCE: https://github.com/k3s-io/k3s/blob/master/docs/contrib/code_conventions.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npkg/controllers/autoscaler/foo.go should say \"package autoscaler\"\n```\n\n----------------------------------------\n\nTITLE: Go Interface Naming Example\nDESCRIPTION: Shows the preferred way to name interfaces in Go, avoiding redundancy with package names\nSOURCE: https://github.com/k3s-io/k3s/blob/master/docs/contrib/code_conventions.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nstorage.Interface instead of storage.StorageInterface\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Usage of Proposed 'flannel-opt' Flag in K3s\nDESCRIPTION: Examples showing how the new 'flannel-opt' flag could be used to configure Flannel options in K3s. This includes various syntax options for setting multiple parameters.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/docs/adrs/flannel-options.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n--flannel-opt=ipv6-masq,external-ip (assumes true)  \n--flannel-opt=ipv6-masq=true  \n--flannel-opt=ipv6-masq=true,external-ip=false  \n--flannel-opt=ipv6-masq --flannel-opt=external-ip\n--flannel-opt=ipv6-masq --flannel-opt=external-ip=false\n```\n\n----------------------------------------\n\nTITLE: Adding DCO Signoff to Git Commits\nDESCRIPTION: Example of the required Developer Certificate of Origin (DCO) signoff format that must be included in commit messages to certify legal right to contribute.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nSigned-off-by: Jane Smith <jane.smith@example.com>\n```\n\n----------------------------------------\n\nTITLE: Executing K3s Release Process with Bash Commands\nDESCRIPTION: A comprehensive set of bash commands for updating k3s to a new Kubernetes version. This includes cloning repositories, rebasing code, updating version references in multiple files, and creating a new release branch. The commands handle environment setup, Docker container creation, and code modification steps.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/docs/release/expanded/cut_release.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport SSH_MOUNT_PATH=\"/var/folders/...krzO/agent.452\"\nexport GLOBAL_GIT_CONFIG_PATH=\"/Users/mtrachier/.gitconfig\"\nexport OLD_K8S=\"v1.22.14\"\nexport NEW_K8S=\"v1.22.15\"\nexport OLD_K8S_CLIENT=\"v0.22.14\"\nexport NEW_K8S_CLIENT=\"v0.22.15\"\nexport OLD_K3S_VER=\"v1.22.14-k3s1\" \nexport NEW_K3S_VER=\"v1.22.15-k3s1\"\nexport RELEASE_BRANCH=\"release-1.22\"\nexport GOPATH=\"/Users/mtrachier/go\"\nexport GOVERSION=\"1.16.15\"\nexport GOIMAGE=\"golang:1.16.15-alpine3.15\"\nexport BUILD_CONTAINER=\"FROM golang:1.16.15-alpine3.15\\n RUN apk add --no-cache bash git make tar gzip curl git coreutils rsync alpine-sdk\"\n\ninstall -d /Users/mtrachier/go/src/github.com/kubernetes\nrm -rf /Users/mtrachier/go/src/github.com/kubernetes/kubernetes\ngit clone --origin upstream https://github.com/kubernetes/kubernetes.git /Users/mtrachier/go/src/github.com/kubernetes/kubernetes\ncd /Users/mtrachier/go/src/github.com/kubernetes/kubernetes\ngit remote add k3s-io https://github.com/k3s-io/kubernetes.git\ngit fetch --all --tags\n\n# this second fetch should return no more tags pulled, this makes it easier to see pull errors\ngit fetch --all --tags\n\n# rebase\nrm -rf _output\ngit rebase --onto v1.22.15 v1.22.14 v1.22.14-k3s1~1\n\n# validate go version\necho \"GOVERSION is $(yq -e '.dependencies[] | select(.name == \"golang: upstream version\").version' build/dependencies.yaml)\"\n\n# generate build container\necho -e \"FROM golang:1.16.15-alpine3.15\\n RUN apk add --no-cache bash git make tar gzip curl git coreutils rsync alpine-sdk\" | docker build -t golang:1.16.15-alpine3.15-dev -\n\n# run tag.sh\n# note user id is 502, I am not root user\ndocker run --rm -u 502 \\\n--mount type=tmpfs,destination=/Users/mtrachier/go/pkg \\\n-v /Users/mtrachier/go/src:/go/src \\\n-v /Users/mtrachier/go/.cache:/go/.cache \\\n-v /Users/mtrachier/.gitconfig:/go/.gitconfig \\\n-e HOME=/go \\\n-e GOCACHE=/go/.cache \\\n-w /go/src/github.com/kubernetes/kubernetes golang:1.16.15-alpine3.15-dev ./tag.sh v1.22.15-k3s1 2>&1 | tee ~/tags-v1.22.15-k3s1.log\n\n# generate and run push.sh, make sure to paste in the tag.sh output below\nvim push.sh\nchmod +x push.sh\n./push.sh\n\ninstall -d /Users/mtrachier/go/src/github.com/k3s-io\nrm -rf /Users/mtrachier/go/src/github.com/k3s-io/k3s\ngit clone --origin upstream https://github.com/k3s-io/k3s.git /Users/mtrachier/go/src/github.com/k3s-io/k3s\ncd /Users/mtrachier/go/src/github.com/k3s-io/k3s\n\ngit checkout -B v1.22.15-k3s1 upstream/release-1.22\ngit clean -xfd\n\n\n# note that sed has different parameters on MacOS than Linux\n# also note that zsh is the default MacOS shell and is not bash/dash (the default Linux shells)\nsed -Ei '' \"\\|github.com/k3s-io/kubernetes| s|v1.22.14-k3s1|v1.22.15-k3s1|\" go.mod\ngit diff\nsed -Ei '' \"s/k8s.io\\/kubernetes v.*$/k8s.io\\/kubernetes v1.22.15/\" go.mod\ngit diff\nsed -Ei '' \"s/v0.22.14/v0.22.15/g\" go.mod\ngit diff\ngo mod tidy\n\n# make sure go version is updated in all locations\nvim .github/workflows/integration.yaml\nvim .github/workflows/unitcoverage.yaml\nvim Dockerfile.dapper\nvim Dockerfile.manifest\nvim Dockerfile.test\n\ngit commit --all --signoff -m \"Update to v1.22.15\"\ngit remote add origin https://github.com/matttrach/k3s-1.git\ngit push --set-upstream origin v1.22.15-k3s1\n\n# use link to generate pull request, make sure your target is the proper release branch 'release-1.22'\n```\n\n----------------------------------------\n\nTITLE: Running All K3s E2E Tests\nDESCRIPTION: Command to run all E2E tests with an extended timeout of 15 minutes, which is necessary due to the default 10-minute timeout of Go tests.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/tests/e2e/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngo test -timeout=15m ./tests/e2e/... -run E2E\n```\n\n----------------------------------------\n\nTITLE: Running Individual K3s E2E Tests\nDESCRIPTION: Commands to run specific E2E tests, either by specifying the test directory or by using the test function name pattern.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/tests/e2e/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngo test -timeout=15m ./tests/e2e/validatecluster/... -run E2E\n#or\ngo test -timeout=15m ./tests/e2e/... -run E2EClusterValidation\n```\n\n----------------------------------------\n\nTITLE: Building K3S Cluster for Performance Testing\nDESCRIPTION: Command to build the K3S cluster infrastructure by applying Terraform configurations that set up database, server, and agent layers. The command also deploys a kubeconfig file to the tests directory.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/tests/perf/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd tests/perf\nmake apply\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests with JUnit Reporting\nDESCRIPTION: Command to run all E2E tests using the Ginkgo CLI with JUnit report generation, useful for continuous integration environments.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/tests/e2e/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nginkgo --junit-report=result.xml ./tests/e2e/...\n```\n\n----------------------------------------\n\nTITLE: Running K3s Integration Tests on Existing Cluster\nDESCRIPTION: Command to run integration tests on an existing single-node K3s cluster using a compile-time flag.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/tests/integration/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo test -ldflags \"-X 'github.com/k3s-io/k3s/tests/integration.existingServer=True'\" ./tests/integration/... -run Integration -ginkgo.v -test.v\n```\n\n----------------------------------------\n\nTITLE: Displaying Kubernetes Services with LoadBalancer Type in K3s\nDESCRIPTION: Example output showing a LoadBalancer service (traefik) with multiple external IPs assigned across cluster nodes. This illustrates how the svclb controller assigns node IPs as external IPs to services.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/docs/adrs/remove-svclb-daemonset.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nNAMESPACE     NAME             TYPE           CLUSTER-IP      EXTERNAL-IP                                                         PORT(S)                      AGE\ndefault       kubernetes       ClusterIP      10.43.0.1       <none>                                                              443/TCP                      56m\nkube-system   kube-dns         ClusterIP      10.43.0.10      <none>                                                              53/UDP,53/TCP,9153/TCP       56m\nkube-system   metrics-server   ClusterIP      10.43.55.117    <none>                                                              443/TCP                      56m\nkube-system   traefik          LoadBalancer   10.43.206.216   10.1.1.13,10.1.1.16,fd56:5da5:a285:eea0::6,fd56:5da5:a285:eea0::8   80:30235/TCP,443:32373/TCP   56m\n```\n\n----------------------------------------\n\nTITLE: Running K3s Integration Tests via Sonobuoy Plugin\nDESCRIPTION: Series of commands to build, run, and retrieve results for K3s integration tests using a Sonobuoy plugin on an existing single-node cluster.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/tests/integration/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/build-tests-sonobuoy\nsudo KUBECONFIG=/etc/rancher/k3s/k3s.yaml sonobuoy run --plugin ./dist/artifacts/k3s-int-tests.yaml\nsudo KUBECONFIG=/etc/rancher/k3s/k3s.yaml sonobuoy status\nsudo KUBECONFIG=/etc/rancher/k3s/k3s.yaml sonobuoy retrieve\nsudo KUBECONFIG=/etc/rancher/k3s/k3s.yaml sonobuoy results <TAR_FILE_FROM_RETRIEVE>\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up Git Remotes\nDESCRIPTION: Commands to clone the Kubernetes repository and set up necessary remote repositories for K3S development\nSOURCE: https://github.com/k3s-io/k3s/blob/master/docs/release/kubernetes-upgrade.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# initial clone\ngit clone --origin upstream \\\n  https://github.com/kubernetes/kubernetes.git \\\n  ${GOPATH}/src/github.com/kubernetes/kubernetes\n \ncd ${GOPATH}/src/github.com/kubernetes/kubernetes\n \n# add the k3s-io remote\ngit remote add k3s-io https://github.com/k3s-io/kubernetes.git\n \n# fetch all remote branches and tags. If you receive a message saying that\n# previous tags will be \"clobbered\", add --force to the command below.\ngit fetch --all --tags\n```\n\n----------------------------------------\n\nTITLE: Installing Kubectl on Linux for K3s Testing\nDESCRIPTION: Commands to download and install the latest stable version of kubectl, which is required for interacting with K3s clusters during testing.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/tests/e2e/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\"\nsudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl\n```\n\n----------------------------------------\n\nTITLE: Running K3s Integration Tests with Go\nDESCRIPTION: Command to run integration tests using Go test. Tests are run with verbose output and target the Integration test suite.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/tests/integration/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo test ./tests/integration/... -run Integration -ginkgo.v -test.v\n```\n\n----------------------------------------\n\nTITLE: Rebasing and Tag Generation Process\nDESCRIPTION: Comprehensive script for setting up environment variables, cleaning builds, and executing the tag generation process using Docker\nSOURCE: https://github.com/k3s-io/k3s/blob/master/docs/release/kubernetes-upgrade.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nexport GLOBAL_GIT_CONFIG_PATH=$(git config --list --show-origin --show-scope --global | awk 'NR==1{ split($2,path,\":\"); print path[2] }')\nexport SSH_MOUNT_PATH=$(echo ${SSH_AUTH_SOCK} || echo \"${HOME}/.ssh/id_rsa\")\n\n# Set up your new/old versions of Kubernetes\nexport OLD_K8S=<old-k8s-version>\nexport NEW_K8S=<new-k8s-version>\nexport OLD_K8S_CLIENT=<old-k8s-client-version>\nexport NEW_K8S_CLIENT=<new-k8s-client-version>\nexport OLD_K3S_VER=\"${OLD_K8S}-k3s1\" \nexport NEW_K3S_VER=\"${NEW_K8S}-k3s1\"\nexport RELEASE_BRANCH=<k8s-release-branch>\nexport GOPATH=$(go env GOPATH)\n \n# clean old builds\nrm -rf _output\n \n# Rebase k3s customizations from the previous release, minus the merge commit (~1),\n# onto the new upstream tag. This will leave you on a detached head that will be\n# tagged in the following step.\ngit rebase --onto ${NEW_K8S} ${OLD_K8S} ${OLD_K3S_VER}~1\n \n# Kubernetes is specific with the Go version used per release. We use alpine and docker to specify the Go version with which we build the project.\nexport GOVERSION=$(grep -Po '^\\s*\\K\\S+' .go-version)\n\nexport GOIMAGE=\"golang:${GOVERSION}-alpine\"\n\nexport BUILD_CONTAINER=\"FROM ${GOIMAGE}\\n \\\nRUN apk add --no-cache \\\nbash \\\ngit \\\nmake \\\ntar \\\ngzip \\\ncurl \\\ngit \\\ncoreutils \\\nrsync \\\nalpine-sdk\" \n\necho -e ${BUILD_CONTAINER} | docker build -t ${GOIMAGE}-dev -\n\n# Rebasing pulls in the tags.sh script.\n# Now create the tags by executing tag.sh with the given version variables.\ndocker run --rm -u $(id -u):$(id -g) \\\n  -v ${GOPATH}/src:/go/src:rw \\\n  -v ${GOPATH}/pkg:/go/pkg:rw \\\n  -v ${GOPATH}/.cache:/go/.cache:rw \\\n  -v ${GLOBAL_GIT_CONFIG_PATH}:/go/.gitconfig:rw \\\n  -e GIT_TRACE=1 \\\n  -e HOME=/go \\\n  -e GOCACHE=/go/.cache \\\n  -w /go/src/github.com/kubernetes/kubernetes \\\n  ${GOIMAGE}-dev chown -R $(id -u) .git | ./tag.sh ${NEW_K3S_VER} 2>&1 | tee ~/tags-${NEW_K3S_VER}.log\n```\n\n----------------------------------------\n\nTITLE: Generating JUnit Reports for K3s Integration Tests\nDESCRIPTION: Command to run integration tests using Ginkgo CLI and generate JUnit XML reports for test results.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/tests/integration/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nginkgo --junit-report=result.xml ./tests/integration/...\n```\n\n----------------------------------------\n\nTITLE: Installing Libvirt Dependencies on Ubuntu 22.04\nDESCRIPTION: Command to install required dependencies for Libvirt on Ubuntu 22.04, including Ruby libraries, QEMU, and other essential packages.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/tests/e2e/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install ruby-libvirt qemu libvirt-daemon-system libvirt-clients ebtables dnsmasq-base libxslt-dev libxml2-dev libvirt-dev zlib1g-dev ruby-dev libguestfs-tools\n```\n\n----------------------------------------\n\nTITLE: Updating K3s Channel Server Version Configuration in YAML\nDESCRIPTION: Example configuration showing how to specify the latest stable version in the K3s channel.yaml file. This configuration is used to indicate the current stable release version for K3s deployments.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/docs/release/expanded/channel_server.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nchannels:\n  name: stable\n  latest: v1.22.12+k3s1\n```\n\n----------------------------------------\n\nTITLE: Installing Libvirt Dependencies on Ubuntu 24.04\nDESCRIPTION: Command to install required dependencies for Libvirt on Ubuntu 24.04, including Ruby libraries, QEMU-KVM, and other essential packages.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/tests/e2e/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install ruby-libvirt qemu-kvm libvirt-daemon-system libvirt-clients ebtables dnsmasq-base libxslt-dev libxml2-dev libvirt-dev zlib1g-dev ruby-dev libguestfs-tools\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Variables for K3s Release Process\nDESCRIPTION: A comprehensive example of all environment variables needed for the K3s release process, including paths, version numbers, and container specifications. This shows how to set up variables for SSH paths, Kubernetes versions, Go versions, and build container configuration.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/docs/release/expanded/setup_rc.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport SSH_MOUNT_PATH=\"/var/folders/m7/1d53xcj57d76n1qxv_ykgr040000gp/T//ssh-dmtrX2MOkrzO/agent.45422\"\n\nexport OLD_K8S=\"v1.22.13\"\nexport NEW_K8S=\"v1.22.14\"\nexport OLD_K8S_CLIENT=\"v0.22.13\"\nexport NEW_K8S_CLIENT=\"v0.22.14\"\nexport OLD_K3S_VER=\"v1.22.13-k3s1\" \nexport NEW_K3S_VER=\"v1.22.14-k3s1\"\nexport RELEASE_BRANCH=\"release-1.22\"\nexport GOVERSION=\"1.16.15\"\nexport GOIMAGE=\"golang:1.16.15-alpine\"\n# On Linux\nexport GLOBAL_GIT_CONFIG_PATH=\"$HOME/.gitconfig\"\nexport GOPATH=\"$HOME/go\"\n# On Mac\nexport GLOBAL_GIT_CONFIG_PATH=\"/Users/mtrachier/.gitconfig\"\nexport GOPATH=\"/Users/mtrachier/go\"\n\nexport BUILD_CONTAINER=\"FROM golang:1.16.15-alpine\\n RUN apk add --no-cache bash gnupg git make tar gzip curl git coreutils rsync alpine-sdk\"\n```\n\n----------------------------------------\n\nTITLE: Examining iptables KUBE-EXT Chain for LoadBalancer Traffic Flow\nDESCRIPTION: iptables output showing how the KUBE-EXT chain processes traffic for external destinations. This reveals how traffic is directed to services without involving the svclb daemonset.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/docs/adrs/remove-svclb-daemonset.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nChain KUBE-EXT-CVG3OEGEH7H5P3HQ (4 references)\ntarget     prot opt source               destination         \nKUBE-MARK-MASQ  all  --  0.0.0.0/0            0.0.0.0/0            /* masquerade traffic for kube-system/traefik:websecure external destinations */\nKUBE-SVC-CVG3OEGEH7H5P3HQ  all  --  0.0.0.0/0            0.0.0.0/0   \n```\n\n----------------------------------------\n\nTITLE: Defining Dockerfile Contents as Environment Variable\nDESCRIPTION: Creates a Dockerfile definition in an environment variable that installs necessary development tools on top of the Go Alpine image.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/docs/release/expanded/build_container.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport BUILD_CONTAINER=\"FROM ${GOIMAGE}\\nRUN apk add --no-cache bash gnupg git make tar gzip curl git coreutils rsync alpine-sdk\"\n```\n\n----------------------------------------\n\nTITLE: Examining iptables KUBE-SERVICES Chain with LoadBalancer Rules\nDESCRIPTION: iptables output showing the KUBE-SERVICES chain with rules for external IPs. The KUBE-EXT rules handle traffic to LoadBalancer service external IPs before traffic can reach the svclb pods.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/docs/adrs/remove-svclb-daemonset.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nChain KUBE-SERVICES (2 references)\ntarget     prot opt source               destination         \nKUBE-SVC-Z4ANX4WAEWEBLCTM  tcp  --  0.0.0.0/0            10.43.55.117         /* kube-system/metrics-server:https cluster IP */ tcp dpt:443\nKUBE-SVC-UQMCRMJZLI3FTLDP  tcp  --  0.0.0.0/0            10.43.206.216        /* kube-system/traefik:web cluster IP */ tcp dpt:80\nKUBE-EXT-UQMCRMJZLI3FTLDP  tcp  --  0.0.0.0/0            10.1.1.13            /* kube-system/traefik:web loadbalancer IP */ tcp dpt:80\nKUBE-EXT-UQMCRMJZLI3FTLDP  tcp  --  0.0.0.0/0            10.1.1.16            /* kube-system/traefik:web loadbalancer IP */ tcp dpt:80\nKUBE-SVC-CVG3OEGEH7H5P3HQ  tcp  --  0.0.0.0/0            10.43.206.216        /* kube-system/traefik:websecure cluster IP */ tcp dpt:443\nKUBE-EXT-CVG3OEGEH7H5P3HQ  tcp  --  0.0.0.0/0            10.1.1.13            /* kube-system/traefik:websecure loadbalancer IP */ tcp dpt:443\nKUBE-EXT-CVG3OEGEH7H5P3HQ  tcp  --  0.0.0.0/0            10.1.1.16            /* kube-system/traefik:websecure loadbalancer IP */ tcp dpt:443\nKUBE-SVC-NPX46M4PTMTKRN6Y  tcp  --  0.0.0.0/0            10.43.0.1            /* default/kubernetes:https cluster IP */ tcp dpt:443\nKUBE-SVC-JD5MR3NA4I4DYORP  tcp  --  0.0.0.0/0            10.43.0.10           /* kube-system/kube-dns:metrics cluster IP */ tcp dpt:9153\nKUBE-SVC-TCOU7JCQXEZGVUNU  udp  --  0.0.0.0/0            10.43.0.10           /* kube-system/kube-dns:dns cluster IP */ udp dpt:53\nKUBE-SVC-ERIFXISQEP7F7OF4  tcp  --  0.0.0.0/0            10.43.0.10           /* kube-system/kube-dns:dns-tcp cluster IP */ tcp dpt:53\nKUBE-NODEPORTS  all  --  0.0.0.0/0            0.0.0.0/0            /* kubernetes service nodeports; NOTE: this must be the last rule in this chain */ ADDRTYPE match dst-type LOCAL\n```\n\n----------------------------------------\n\nTITLE: Building Docker Container from Environment Variable\nDESCRIPTION: Builds a Docker container using the Dockerfile contents stored in the environment variable, naming it with the -dev suffix.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/docs/release/expanded/build_container.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\necho -e $BUILD_CONTAINER | docker build -t ${GOIMAGE}-dev -\n```\n\n----------------------------------------\n\nTITLE: Running clusterloader2 Performance Tests on K3S\nDESCRIPTION: Command to start the clusterloader2 load test on a deployed K3S cluster. The test configuration can be modified in the tests/perf/tests/load/config.yaml file.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/tests/perf/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd tests/perf\nmake test\n```\n\n----------------------------------------\n\nTITLE: Configuring PATH for GNU Utils on macOS\nDESCRIPTION: Shell script to add GNU utilities to the PATH environment variable on macOS. This script finds all GNU binary directories and prepends them to the PATH to ensure the GNU versions are used instead of macOS defaults.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/docs/contrib/development.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nGNUBINS=\"$(find /usr/local/opt -type d -follow -name gnubin -print)\"\n\nfor bindir in ${GNUBINS[@]}; do\n  PATH=$bindir:$PATH\ndone\n\nexport PATH\n```\n\n----------------------------------------\n\nTITLE: Generating K3s Release Notes with ECM Distro Tools\nDESCRIPTION: This script demonstrates how to use ECM Distro Tools to generate release notes for K3s. It requires a GitHub token and specifies the previous and current release versions to generate a detailed comparison.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/docs/release/expanded/release_notes.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# this outputs to stdout\nexport GHT=$GITHUB_TOKEN\nexport PREVIOUS_RELEASE='v1.23.12+k3s1'\nexport LAST_RELEASE='v1.23.13-rc2+k3s1'\ndocker run --rm -e GITHUB_TOKEN=$GHT rancher/ecm-distro-tools:latest gen_release_notes -r k3s -m $LAST_RELEASE -p $PREVIOUS_RELEASE\n```\n\n----------------------------------------\n\nTITLE: Running tag.sh Script in Docker Container for K3s Version Generation\nDESCRIPTION: Command for running the tag.sh script inside a Docker container to generate new K3s version tags. The command mounts necessary volumes, sets up environment variables, and captures the output to a log file.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/docs/release/expanded/tagging.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -u $(id -u) --mount type=tmpfs,destination=${GOPATH}/pkg -v ${GOPATH}/src:/go/src -v ${GOPATH}/.cache:/go/.cache -v ${GLOBAL_GIT_CONFIG_PATH}:/go/.gitconfig -v ${HOME}/.gnupg:/go/.gnupg -e HOME=/go -e GOCACHE=/go/.cache -w /go/src/github.com/kubernetes/kubernetes ${GOIMAGE}-dev ./tag.sh ${NEW_K3S_VER} 2>&1 | tee tags-${NEW_K3S_VER}.log\n```\n\n----------------------------------------\n\nTITLE: Error Message for ConfigMap Size Limitation in K3s\nDESCRIPTION: An example error message shown in K3s service logs when the snapshot metadata ConfigMap exceeds the maximum allowed size. This highlights the central problem being addressed by the architectural change.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/docs/adrs/etcd-snapshot-cr.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nlevel=error msg=\"failed to save local snapshot data to configmap: ConfigMap \\\"k3s-etcd-snapshots\\\" is invalid: []: Too long: must have at most 1048576 bytes\"\n```\n\n----------------------------------------\n\nTITLE: Setting Remote Repository for Pushing K3s Tags\nDESCRIPTION: Command to set the REMOTE environment variable to 'k3s-io' before running the push script to ensure tags are pushed to the correct repository.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/docs/release/expanded/tagging.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport REMOTE=k3s-io\n```\n\n----------------------------------------\n\nTITLE: Performing K3s Rebase Command\nDESCRIPTION: Git rebase command that moves K3s-specific commits on top of the new Kubernetes version. This command takes the K3s customizations that were based on the old Kubernetes version and applies them to the new Kubernetes version.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/docs/release/expanded/rebase.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit rebase --onto $NEW_K8S $OLD_K8S $OLD_K3S_VER~1\n```\n\n----------------------------------------\n\nTITLE: Removing Output Directory\nDESCRIPTION: Command to remove the _output directory to ensure a clean build environment before rebasing.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/docs/release/expanded/rebase.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf _output\n```\n\n----------------------------------------\n\nTITLE: Updating K3s Module Links with Linux sed Commands\nDESCRIPTION: Commands to update version references in go.mod files on Linux systems. These commands replace old K3s, Kubernetes, and client-go versions with new ones using sed pattern matching.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/docs/release/expanded/pr.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsed -Ei \"\\|github.com/k3s-io/kubernetes| s|${OLD_K3S_VER}|${NEW_K3S_VER}|\" go.mod\nsed -Ei \"s/k8s.io\\/kubernetes v\\S+/k8s.io\\/kubernetes ${NEW_K8S}/\" go.mod\nsed -Ei \"s/$OLD_K8S_CLIENT/$NEW_K8S_CLIENT/g\" go.mod\n```\n\n----------------------------------------\n\nTITLE: Creating Pull Request for Updates\nDESCRIPTION: Commands to commit changes and create a pull request for the updates\nSOURCE: https://github.com/k3s-io/k3s/blob/master/docs/release/kubernetes-upgrade.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ngit commit --all --signoff -m \"Update to ${NEW_K8S}\"\ngit push --set-upstream origin ${NEW_K3S_VER}\n```\n\n----------------------------------------\n\nTITLE: Updating K3s Module Links with MacOS sed Commands\nDESCRIPTION: Commands to update version references in go.mod files on MacOS systems. These include modified sed syntax for MacOS along with git diff commands to verify changes after each step.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/docs/release/expanded/pr.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# note that sed has different parameters on MacOS than Linux\n# also note that zsh is the default MacOS shell and is not bash/dash (the default Linux shells)\nsed -Ei '' \"\\|github.com/k3s-io/kubernetes| s|${OLD_K3S_VER}|${NEW_K3S_VER}|\" go.mod\ngit diff\n\nsed -Ei '' \"s/k8s.io\\/kubernetes v.*$/k8s.io\\/kubernetes ${NEW_K8S}/\" go.mod\ngit diff\n\nsed -Ei '' \"s/${OLD_K8S_CLIENT}/${NEW_K8S_CLIENT}/g\" go.mod\ngit diff\n\ngo mod tidy\ngit diff\n```\n\n----------------------------------------\n\nTITLE: Configuring K3s Server Arguments in KDM\nDESCRIPTION: Example of defining and referencing server arguments in the kontainer-driver-metadata channels.yaml file for K3s version 1.21.4\nSOURCE: https://github.com/k3s-io/k3s/blob/master/docs/release/kubernetes-upgrade.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n- version: v1.21.4+k3s2\n     minChannelServerVersion: v2.6.0-alpha1\n     maxChannelServerVersion: v2.6.99\n     ...\n     serverArgs: &serverArgs-v1\n        tls-san:\n           type: array\n```\n\n----------------------------------------\n\nTITLE: Go Utility Package Example\nDESCRIPTION: Illustrates proper naming of utility functions and packages with a specific example from the wait package\nSOURCE: https://github.com/k3s-io/k3s/blob/master/docs/contrib/code_conventions.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nwait.Poll\n```\n\n----------------------------------------\n\nTITLE: Referencing K3s Server Arguments\nDESCRIPTION: Example showing how to reference previously defined server arguments for a new K3s version 1.21.5\nSOURCE: https://github.com/k3s-io/k3s/blob/master/docs/release/kubernetes-upgrade.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- version: v1.21.5+k3s1\n    minChannelServerVersion: v2.6.0-alpha1\n    maxChannelServerVersion: v2.6.99\n    serverArgs: *serverArgs-v1\n```\n\n----------------------------------------\n\nTITLE: Syncing Local K3s Branches\nDESCRIPTION: Shell commands for keeping local branches synchronized with upstream changes using fetch and rebase operations.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/docs/contrib/git_workflow.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngit fetch upstream\ngit rebase upstream/master\n```\n\n----------------------------------------\n\nTITLE: Updating K3s Channel Server Configuration\nDESCRIPTION: Example of the channel.yaml configuration for updating the stable channel version\nSOURCE: https://github.com/k3s-io/k3s/blob/master/docs/release/kubernetes-upgrade.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nchannels:\n- name: stable\n  latest: <new-k8s-version>+k3s1 # Replace this semver with the version corresponding to the release\n```\n\n----------------------------------------\n\nTITLE: Defining a FileInfo Map Structure for Image State Tracking in Go\nDESCRIPTION: This code snippet defines a map data structure that will be used to track the state of image files. The map uses file paths as keys and fs.FileInfo objects as values to store metadata about each image file being watched.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/docs/adrs/add-auto-import-containerd.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n    map[string]fs.FileInfo\n```\n\n----------------------------------------\n\nTITLE: Force Pushing KDM Branch Example\nDESCRIPTION: Specific example of force pushing the k3s-release-september branch to your origin repository.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/docs/release/expanded/update_kdm.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit push -f origin k3s-release-september\n```\n\n----------------------------------------\n\nTITLE: Installing Go Development Tools\nDESCRIPTION: Commands for installing goimports tool required for code formatting and running the formatter\nSOURCE: https://github.com/k3s-io/k3s/blob/master/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo install golang.org/x/tools/cmd/goimports@latest\n```\n\nLANGUAGE: shell\nCODE:\n```\nmake format\n```\n\n----------------------------------------\n\nTITLE: Resetting Git History for Commit Squashing\nDESCRIPTION: Command to reset your local copy to a point in Git history before your first commit using a specific number of commits to revert.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/docs/release/expanded/update_kdm.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit reset --hard HEAD~<commit number>\n```\n\n----------------------------------------\n\nTITLE: Key CI Script Paths\nDESCRIPTION: List of important CI script locations and their purposes, including validation, testing, building, and packaging scripts.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/docs/contrib/continuous_integration.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nscripts/validate - Execute go generate and linting\nscripts/test - Run unit and integration tests\nscripts/build - Build K3s binaries\nscripts/package - Package binaries and airgap images\nscripts/ci - Main CI orchestration script\nscripts/clean - Clean up built artifacts\n```\n\n----------------------------------------\n\nTITLE: Resetting Git History Example\nDESCRIPTION: Example of resetting the local repository by 20 commits to prepare for squashing changes.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/docs/release/expanded/update_kdm.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit reset --hard HEAD~20\n```\n\n----------------------------------------\n\nTITLE: Configuring Release Candidate Version\nDESCRIPTION: Example of configuring a release candidate version in channels.yaml with specific channel server version constraints\nSOURCE: https://github.com/k3s-io/k3s/blob/master/docs/release/kubernetes-upgrade.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- version: v1.28.2-rc1+k3s1\n    minChannelServerVersion: v2.8.0-alpha1\n    maxChannelServerVersion: v2.8.99\n    serverArgs: *serverArgs-v7\n```\n\n----------------------------------------\n\nTITLE: Squashing Commits in KDM Update\nDESCRIPTION: Command to merge and squash all previous commits that were reset in the previous step, staging them for a new commit.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/docs/release/expanded/update_kdm.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit merge --squash HEAD@{1}\n```\n\n----------------------------------------\n\nTITLE: Updating Go Version in Configuration Files\nDESCRIPTION: Commands to update Go version references in Dockerfile and GitHub workflow files\nSOURCE: https://github.com/k3s-io/k3s/blob/master/docs/release/kubernetes-upgrade.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nexport OLD_GO_VERSION=<old-go-version>\nsed -i'' \"s/$OLD_GO_VERSION/$GOVERSION/g\" Dockerfile.* .github/workflows/integration.yaml .github/workflows/unitcoverage.yaml\n```\n\n----------------------------------------\n\nTITLE: Staging data.json File\nDESCRIPTION: Command to stage the data.json file for a separate commit after committing the channels.yaml changes.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/docs/release/expanded/update_kdm.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit add data/data.json\n```\n\n----------------------------------------\n\nTITLE: Updating K3S with New Tags\nDESCRIPTION: Commands for updating K3S repository with newly created tags and dependencies\nSOURCE: https://github.com/k3s-io/k3s/blob/master/docs/release/kubernetes-upgrade.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncd ${GOPATH}/src/github.com/k3s-io/k3s \ngit remote add upstream https://github.com/k3s-io/k3s.git\ngit fetch upstream\ngit branch delete ${NEW_K3S_VER}\ngit checkout -B ${NEW_K3S_VER} upstream/${RELEASE_BRANCH}\ngit clean -xfd\n \nsed -Ei \"|github.com/k3s-io/kubernetes| s|${OLD_K3S_VER}|${NEW_K3S_VER}|\" go.mod\nsed -Ei \"s/k8s.io\\/kubernetes v\\S+/k8s.io\\/kubernetes ${NEW_K8S}/\" go.mod\nsed -Ei \"s/${OLD_K8S_CLIENT}/${NEW_K8S_CLIENT}/g\" go.mod \n \n# since drone perform the builds and tests for the updated tags we no longer need to run make locally.\n# We now update the go.sum by running go mod tidy:\ngo mod tidy\n```\n\n----------------------------------------\n\nTITLE: Final Force Push Example\nDESCRIPTION: Specific example of the final force push for the k3s-release-september branch to your origin repository.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/docs/release/expanded/update_kdm.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngit push -f origin k3s-release-september\n```\n\n----------------------------------------\n\nTITLE: Configuring Git GPG Signing\nDESCRIPTION: Commands to configure Git GPG signing settings for commits and credentials handling in Docker\nSOURCE: https://github.com/k3s-io/k3s/blob/master/docs/release/kubernetes-upgrade.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit config --local commit.gpgSign false\n```\n\nLANGUAGE: sh\nCODE:\n```\ngit config --global core.safelyUseIncompatibleGitCredentialHelper true\n```\n\n----------------------------------------\n\nTITLE: Component Version Lookup Information for K3s\nDESCRIPTION: This snippet provides examples of where to find component version information in the K3s repository for a specific release. It includes paths to version.sh, go.mod, and manifest files where component versions are defined.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/docs/release/expanded/release_notes.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubernetes: version.sh pulls from k3s repo go.mod see https://github.com/k3s-io/k3s/blob/v1.23.13-rc2+k3s1/scripts/version.sh#L35\nkine: go.mod, see https://github.com/k3s-io/k3s/blob/v1.23.13-rc2+k3s1/go.mod#L93\nsqlite: go.mod, see https://github.com/k3s-io/k3s/blob/v1.23.13-rc2+k3s1/go.mod#L97\netcd: go.mod, use the /api/v3 mod, see https://github.com/k3s-io/k3s/blob/v1.23.13-rc2+k3s1/go.mod#L25\ncontainerd: version.sh sets an env variable based on go.mod, then the build script builds it\n  see https://github.com/k3s-io/k3s/blob/v1.23.13-rc2%2Bk3s1/scripts/version.sh#L25\n  and https://github.com/k3s-io/k3s/blob/v1.23.13-rc2%2Bk3s1/scripts/build#L36\nrunc: set in the version.sh\n  this one is weird, it ignores the go.mod, preferring the version.sh instead\n  the version.sh sets an env variable which is picked up by the download script\n  the build script runs 'make' on whatever was downloaded\n  see https://github.com/k3s-io/k3s/blob/v1.23.13-rc2%2Bk3s1/scripts/version.sh#L40\n  and https://github.com/k3s-io/k3s/blob/v1.23.13-rc2+k3s1/scripts/download#L29\n  and https://github.com/k3s-io/k3s/blob/master/scripts/build#L138\nflannel: version.sh sets an env variable based on go.mod, then the build script builds it\n  see https://github.com/k3s-io/k3s/blob/v1.23.13-rc2+k3s1/go.mod#L83\nmetrics-server: version is set in the manifest at manifests/metric-server\n  see https://github.com/k3s-io/k3s/blob/v1.23.13-rc2+k3s1/manifests/metrics-server/metrics-server-deployment.yaml#L42\ntraefik: version is set in the manifest at manifests/traefik.yaml\n  see https://github.com/k3s-io/k3s/blob/v1.23.13-rc2%2Bk3s1/manifests/traefik.yaml#L36\ncoredns: version is set in the manifest ar manifests/coredns.yaml\n  see https://github.com/k3s-io/k3s/blob/v1.23.13-rc2%2Bk3s1/manifests/coredns.yaml#L122\nhelm-controller: go.mod, see https://github.com/k3s-io/k3s/blob/v1.23.13-rc2%2Bk3s1/go.mod#L92\nlocal-path-provisioner: version is set in the manifest at manifests/local-storage.yaml\n  see https://github.com/k3s-io/k3s/blob/v1.23.13-rc2%2Bk3s1/manifests/local-storage.yaml#L66\n```\n\n----------------------------------------\n\nTITLE: Generating JSON Data for KDM\nDESCRIPTION: Command to run the go generate process which will update the data/data.json file with new K3s version information.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/docs/release/expanded/update_kdm.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ngo generate\n```\n\n----------------------------------------\n\nTITLE: Visualizing K3s Branch Structure\nDESCRIPTION: ASCII diagram showing the relationship between K3s release branches and their corresponding Kubernetes versions. Shows how master branch tracks K8s 1.23 and release branches track previous versions.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/docs/contrib/git_workflow.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmaster       -------------------------------------------. (Kubernetes 1.23)\nrelease-1.21            \\---------------|---------------. (Kubernetes 1.21)\nrelease-1.22                            \\---------------. (Kubernetes 1.22)\n```\n\n----------------------------------------\n\nTITLE: Final Force Push to Origin\nDESCRIPTION: Command to force push the squashed commits to your origin repository before creating the pull request.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/docs/release/expanded/update_kdm.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngit push -f origin <branch>\n```\n\n----------------------------------------\n\nTITLE: Building k3s While Skipping Validation\nDESCRIPTION: Builds k3s binary without running linting checks. This is useful when you have uncommitted changes that might not pass validation.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/BUILDING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nSKIP_VALIDATE=true make\n```\n\n----------------------------------------\n\nTITLE: Unstaging data.json File\nDESCRIPTION: Command to remove the data.json file from staged files to allow separate commits for channels.yaml and data.json.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/docs/release/expanded/update_kdm.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit restore --staged data/data.json\n```\n\n----------------------------------------\n\nTITLE: Starting Vagrant VM for macOS Build Environment\nDESCRIPTION: Sets up a virtual machine using Vagrant and VirtualBox to provide a Linux environment for building k3s on macOS, which avoids issues with GNU/macOS tool differences.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/BUILDING.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ vagrant up\n[... vm provisioning logs ...]\n```\n\n----------------------------------------\n\nTITLE: Force Pushing KDM Branch\nDESCRIPTION: Command for force pushing your local branch to your origin repository after rebasing to prevent diverged head state.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/docs/release/expanded/update_kdm.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit push -f origin <branch name>\n```\n\n----------------------------------------\n\nTITLE: Accessing Vagrant Build Environment and Running Build\nDESCRIPTION: Connects to the Vagrant VM via SSH and runs the build process within the virtual machine. This ensures compatibility with GNU tools required for the build process.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/BUILDING.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ vagrant ssh\n[... ssh connection logs ..]\n$ uname -a\nLinux k3s-0-alpine312 5.11.0-41-generic\n$ make\n[... k3s build logs ...]\n```\n\n----------------------------------------\n\nTITLE: Rebasing and Force Pushing KDM Changes\nDESCRIPTION: Command example for rebasing from upstream's dev-v2.7 branch and force pushing to your origin branch.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/docs/release/expanded/update_kdm.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit pull --rebase upstream dev-v2.7\n```\n\n----------------------------------------\n\nTITLE: Installing Vagrant Plugins for K3s Testing\nDESCRIPTION: Command to install the necessary Vagrant plugins including vagrant-libvirt, vagrant-scp, vagrant-k3s, and vagrant-reload for E2E testing.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/tests/e2e/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nvagrant plugin install vagrant-libvirt vagrant-scp vagrant-k3s vagrant-reload\n```\n\n----------------------------------------\n\nTITLE: Repository Setup Commands for KDM Updates\nDESCRIPTION: Commands for setting up the kontainer-driver-metadata repository in the correct Go path structure. This ensures that Go can properly resolve dependencies during the generation process.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/docs/release/expanded/update_kdm.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit pull --rebase upstream <branch to rebase from>\n```\n\n----------------------------------------\n\nTITLE: Destroying K3S Test Environment\nDESCRIPTION: Commands to destroy the K3S cluster infrastructure created for performance testing and clean up local resources. This removes all AWS resources provisioned by Terraform.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/tests/perf/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake destroy\nmake clean\n```\n\n----------------------------------------\n\nTITLE: Clearing Git Cached Files\nDESCRIPTION: Command to clean up any cached or old files in the git repository before beginning the rebase process.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/docs/release/expanded/rebase.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit add -A; git reset --hard HEAD\n```\n\n----------------------------------------\n\nTITLE: Retrieving the New K3s Token Value\nDESCRIPTION: Command to view the new token value from the token file on the first server after rotation. This is needed when using auto-generated tokens to obtain the value for other servers.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/docs/adrs/server-token-rotation.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nvi /var/lib/rancher/k3s/server/token\n```\n\n----------------------------------------\n\nTITLE: Setting Go Container Image Reference\nDESCRIPTION: Creates an environment variable for the base Go Alpine container image using the extracted Go version.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/docs/release/expanded/build_container.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport GOIMAGE=\"golang:${GOVERSION}-alpine\"\n```\n\n----------------------------------------\n\nTITLE: Examining iptables OUTPUT Chain in K3s Node\nDESCRIPTION: iptables output showing the chain order with KUBE-SERVICES appearing before CNI-HOSTPORT-DNAT. This demonstrates why traffic to LoadBalancer services never reaches the svclb daemonset pods.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/docs/adrs/remove-svclb-daemonset.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nChain OUTPUT (policy ACCEPT)\ntarget     prot opt source               destination         \nKUBE-SERVICES  all  --  0.0.0.0/0            0.0.0.0/0            /* kubernetes service portals */\nCNI-HOSTPORT-DNAT  all  --  0.0.0.0/0            0.0.0.0/0            ADDRTYPE match dst-type LOCAL\n```\n\n----------------------------------------\n\nTITLE: Extracting Go Version from Kubernetes Dependencies\nDESCRIPTION: Uses yq to parse the dependencies.yaml file in the Kubernetes repository to extract the appropriate Go version.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/docs/release/expanded/build_container.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport GOVERSION=$(yq -e '.dependencies[] | select(.name == \"golang: upstream version\").version' $PATH_TO_KUBERNETES_REPO/build/dependencies.yaml)\n```\n\n----------------------------------------\n\nTITLE: Referencing Websocket Proxy in k3s Agent Run\nDESCRIPTION: This code snippet shows a reference to the websocket proxy implementation in the k3s agent run file. It's used to connect the control-plane of the cluster.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/docs/adrs/integrate-vpns.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[websocket proxy](https://github.com/k3s-io/k3s/blob/master/pkg/agent/run.go#L277)\n```\n\n----------------------------------------\n\nTITLE: Setting Kubernetes Repository Path in Bash\nDESCRIPTION: Sets environment variables for the GitHub username and path to the local Kubernetes repository clone.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/docs/release/expanded/build_container.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport GHUSER=\"mtrachier\"\nexport PATH_TO_KUBERNETES_REPO=\"/Users/$GHUSER/go/src/github.com/kubernetes/kubernetes\"\n```\n\n----------------------------------------\n\nTITLE: Internal Discussion on Docker Support in K3s\nDESCRIPTION: A transcript of an internal discussion regarding the handling of Docker support in K3s after Kubernetes 1.24 removed dockershim. The team discusses the implications, user impact, and potential solutions.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/docs/adrs/cri-dockerd.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<BD> what's our roadmap for dockershim/cri-dockerd migration? Kubernetes 1.24 finally drops dockershim.\n<BD> RKE will clearly need to migrate over to cri-dockerd, but for products like K3s where docker is supported but not the default, do we want to keep it around? Seems to work OK in K3s with some slight modifications.\n<CJ> If we don't do this work, can a user configure k3s manually to use the shim?\n<CJ> I'd rather reduce the surface area if possible\n<BD> the work is already done, the question is do we want to include it lol\n<CJ> Understood, the second half of the question is the part I care about\n<BD> kk\n<CJ> Can they manually get there without it\n<CJ> If they can, then I don't want to include it. Less surface area for bug fixes and CVEs. And i don't see a need to make it easy for users to user docker with k3s.\n<BD> users should be able to install and start cri-dockerd and then run k3s agent --container-runtime-endpoint=unix:///var/run/cri-dockerd.sock and it'll work. \n<BD> But we would need to drop the --docker flag since that explicitly uses the kubelet's dockershim\n<BD> Well, we historically did make it easy. If we want to stop, that's fine.\n<CK> Isn't K3s supposed to be \\\"lightweight\\\" anyway? Who's to say we didn't put it on a diet for 1.24 and made it get smaller (especially cause the containerd split made it bigger)\n<CJ> Ok, I THINK bill will be ok with this. CW, can you pitch to bill next week (um he might be out too) that we are dropping the docker flag with 1.24. I guess we have a little time, so no rush right?\n<CJ> with the way the ecosystem has evolved, I think we can easily justify the diet\n<CJ> does k3d use/need --docker for anything?\n<CJ> Ask thorsten to be sure but I didn't  think so.\n<CJ> But we do need product to agree, fyi\n```\n\n----------------------------------------\n\nTITLE: Renovate Configuration File Location\nDESCRIPTION: Specifies the path where Renovate configuration file should be placed in the repository\nSOURCE: https://github.com/k3s-io/k3s/blob/master/docs/adrs/security-updates-automation.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n\"renovate.json\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailscale Auto-Approvers for K3s Routes\nDESCRIPTION: JSON configuration for Tailscale auto-approvers that defines the cluster routes and associated permissions. Specifies IPv4 (10.42.0.0/16) and IPv6 (2001:cafe:42:0::/56) routes with authorized approvers.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/tests/e2e/tailscale/README.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"autoApprovers\": {\n\t\"routes\": {\n\t\t\"10.42.0.0/16\":        [\"testing@xyz.com\"],\n\t\t\"2001:cafe:42:0::/56\": [\"testing@xyz.com\"],\n\t},\n},\n```\n\n----------------------------------------\n\nTITLE: Dependabot Configuration File Location\nDESCRIPTION: Specifies the path where Dependabot configuration file should be placed in the repository\nSOURCE: https://github.com/k3s-io/k3s/blob/master/docs/adrs/security-updates-automation.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\".github/dependabot.yml\"\n```\n\n----------------------------------------\n\nTITLE: AES Encryption Metadata Format for K3s Diagnostics in Bash\nDESCRIPTION: This snippet demonstrates the format of AES encryption metadata generated by the diagnostics script. It includes the salt, key, and initialization vector (iv) used for encryption. These values are randomly generated or can be manually provided through environment variables.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/contrib/util/DIAGNOSTICS.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nSave secret metadata for log decryption:\nsalt=62e2ac13ae6bb66e\nkey=375dc2863c5b340252c0e5c631dda24b4fdc343139410b97fb5b7678919d8752\niv=7874c21533a1b4a4129c00e95bd9d0e4\n```\n\n----------------------------------------\n\nTITLE: K3S Repository Path Structure\nDESCRIPTION: The required directory path structure for K3S development following Go workspace conventions. This path ensures proper dependency resolution and package imports in the Go environment.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/docs/release/expanded/setup_k3s_repos.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n$HOME/go/src/github.com/k3s-io/k3s\n```\n\n----------------------------------------\n\nTITLE: File Structure Organization for Updatecli in K3s\nDESCRIPTION: Example directory structure showing how Updatecli manifests and related files should be organized in the K3s project. Each pipeline file typically corresponds to a specific dependency update.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/updatecli/README.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n.\n└── updatecli\n    ├── scripts                            # Contains the auxiliary scripts used in the manifests\n    ├── updatecli.d\n    │   ├── golang-alpine.yaml             # Ideally each pipeline file corresponds to a dependency update\n    │   ├── helm-controller.yaml\n    │   ├── klipper.yaml\n    └── values.yaml                        # Configuration values\n```\n\n----------------------------------------\n\nTITLE: Running Updatecli Commands for Local Testing\nDESCRIPTION: Shell commands for testing Updatecli manifests locally using the diff command. This requires a GitHub personal access token exported as an environment variable.\nSOURCE: https://github.com/k3s-io/k3s/blob/master/updatecli/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport UPDATECLI_GITHUB_TOKEN=\"your GH PAT\"\nupdatecli diff --clean --config updatecli/updatecli.d/ --values updatecli/values.yaml\n```"
  }
]