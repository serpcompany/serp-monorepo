[
  {
    "owner": "keyboardkit",
    "repo": "keyboardkit",
    "content": "TITLE: Configuring KeyboardApp Extension\nDESCRIPTION: Example of configuring a KeyboardApp instance with custom settings including license key, app group ID, locales, and autocomplete features.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Essentials/Getting-Started-Article.md#2025-04-22_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nimport KeyboardKit (or KeyboardKitPro)\n\nextension KeyboardApp {\n\n    static var keyboardKitDemo: KeyboardApp {\n        .init(\n            name: \"KeyboardKit\",\n            licenseKey: \"your-key-here\",                // Required by KeyboardKit Pro!\n            appGroupId: \"group.com.keyboardkit.demo\",   // Sets up App Group data sync\n            locales: .keyboardKitSupported,             // Sets up the enabled locales\n            autocomplete: .init(                        // Sets up custom autocomplete  \n                nextWordPredictionRequest: .claude(...) // Sets up AI-based prediction\n            ),\n            deepLinks: .init(app: \"kkdemo://\", ...)     // Defines how to open the app\n        )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a KeyboardApp Configuration Object\nDESCRIPTION: Demonstrates how to create a KeyboardApp configuration object with settings for license, app groups, locales, autocomplete, and deep links.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nimport KeyboardKit\n\nextension KeyboardApp {\n\n        static var keyboardKitDemo: KeyboardApp {\n        .init(\n            name: \"KeyboardKit\",\n            licenseKey: \"your-key-here\",                // Needed for KeyboardKit Pro!\n            appGroupId: \"group.com.keyboardkit.demo\",   // Sets up App Group data sync\n            locales: .keyboardKitSupported,             // Sets up the enabled locales\n            autocomplete: .init(                        // Sets up custom autocomplete  \n                nextWordPredictionRequest: .claude(...) // Sets up AI-based prediction\n            ),\n            deepLinks: .init(app: \"kkdemo://\", ...)     // Defines how to open the app\n        )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Keyboard View Setup\nDESCRIPTION: Example of customizing the keyboard view implementation with a custom view and different layouts based on keyboard type.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Essentials/Getting-Started-Article.md#2025-04-22_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nclass KeyboardViewController: KeyboardInputViewController {\n\n    override func viewWillSetupKeyboardView() {\n        setupKeyboardView { [weak self] controller in // <-- Use weak or unknowned if you must use self!\n            CustomKeyboardView( \n                state: controller.state\n                services: controller.services\n            )\n        }\n    }\n}\n\n// Defining a custom view in a separate file keeps your controller clean.\nstruct CustomKeyboardView: View {\n\n    var state: Keyboard.State\n    var services: Keyboard.Services\n\n    // State can also be accessed from the enviroment.\n    @EnvironmentObject var keyboardContext: KeyboardContext\n\n    var body: some View {\n        if keyboardContext.keyboardType == .email {\n            // Insert your GPT-powered email client here :)\n        } else {\n            KeyboardView(\n                state: state,\n                services: services,\n                buttonContent: { $0.view },        // Use $0.view to use the standard view\n                buttonView: { $0.view },           // The $0 has additional parameter data             \n                collapsedView: { params in params.view },   // This is the same as $0.view\n                emojiKeyboard: { $0.view },        \n                toolbar: { _ in CustomToolbar() }  // Ignores the params and returns a view\n            )\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom KeyboardActionHandler in Swift\nDESCRIPTION: Shows how to create a custom KeyboardActionHandler by inheriting from StandardActionHandler. This example overrides the handle method to add custom behavior for the space key press.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Features/Actions-Article.md#2025-04-22_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nclass CustomActionHandler: KeyboardAction.StandardActionHandler {\n\n    open override func handle(\n        _ gesture: Keyboard.Gesture, \n        on action: KeyboardAction\n    ) {\n        if gesture == .press && action == .space {\n            print(\"Pressed space!\")\n        }\n        super.handle(gesture, on: action) \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing KeyboardView components in Swift\nDESCRIPTION: This code demonstrates how to customize various aspects of the KeyboardView by providing custom view builders for buttons, collapsed view, emoji keyboard, and toolbar. Each builder receives contextual parameters that can be used to create custom views or return the standard view.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Essentials/Essentials-KeyboardView.md#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nKeyboardView(\n    controller: controller,             // You can pass in a controller OR specific states and services\n    buttonContent: { $0.view },         // You can customize the content view of any button\n    buttonView: { $0.view },            // You can customize the entire view of any button\n    collapsedView: { $0.view },         // You can customize the collapsed keyboard view\n    emojiKeyboard: { $0.view },         // You can customize the emoji keyboard, if any\n    toolbar: { params in params.view }  // You can customize the toolbar above the keyboard\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Keyboard Extension in viewDidLoad\nDESCRIPTION: Demonstrates how to set up a keyboard extension by calling setup(for:) with a KeyboardApp configuration in the viewDidLoad method.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nclass KeyboardViewController: KeyboardInputViewController {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        // Set up the keyboard with the app we created above\n        setup(for: .keyboardKitDemo) { result in\n            // If `result` is `.success`, the setup did succeed.\n            // This is where you can setup custom services, etc.\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Keyboard Actions Programmatically in Swift\nDESCRIPTION: Demonstrates how to programmatically trigger keyboard actions using a KeyboardActionHandler. This includes handling backspace, character press, and dismiss keyboard actions.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Features/Actions-Article.md#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nfunc doStuff(with handler: KeyboardActionHandler) {\n    handler.handle(.backspace)\n    handler.handle(.press, on: .character(\"a\"))\n    handler.handle(.release, on: .dismissKeyboard)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Action Handler\nDESCRIPTION: Example of implementing a custom keyboard action handler with custom space key behavior.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Essentials/Getting-Started-Article.md#2025-04-22_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nclass KeyboardViewController: KeyboardInputViewController {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setup(for: .keyboardKitDemo) { [weak self] _ in\n            guard let self else { return }\n            self.services.actionHandler = CustomActionHandler(controller: self)    \n        }\n    }\n}\n\nclass CustomActionHandler: StandardActionHandler {\n\n    open override func handle(_ action: KeyboardAction) {\n        if action == .space {\n            print(\"Pressed space!\")\n        }\n        super.handle(action) \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom KeyboardLayoutService in Swift\nDESCRIPTION: This snippet demonstrates how to create a custom KeyboardLayoutService by inheriting from the StandardLayoutService and overriding the keyboardLayout method. It allows for modifications to the layout before returning it.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Features/Layout-Article.md#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nclass CustomKeyboardLayoutService: KeyboardLayout.StandardLayoutService {\n    \n    override func keyboardLayout(for context: KeyboardContext) -> KeyboardLayout {\n        var layout = super.keyboardLayout(for: context)\n        // Perform any modifications here\n        // 💡 KeyboardKit Pro unlocks many layout extensions\n        return layout\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Callout Service in Swift for KeyboardKit\nDESCRIPTION: Example showing how to create a custom callout service by extending the standard service and overriding the calloutActions method to customize secondary actions for keyboard keys.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Features/Callouts-Article.md#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nclass CustomCalloutService: KeyboardCallout.StandardCalloutService {\n    \n    override func calloutActions(for action: KeyboardAction) -> [KeyboardAction] {\n        var actions = super.calloutActions(for: action)\n        // Perform any modifications here\n        return actions\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Layout for Specific Locale in Swift\nDESCRIPTION: This code shows how to customize the layout for a specific locale (English in this case) by providing a custom alphabetic input set (QWERTZ) when initializing the layout service.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Features/Layout-Article.md#2025-04-22_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nclass KeyboardViewController: KeyboardInputViewController {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setup(for: ...) { _ in\n            // Check result to see that setup was successful\n            try? self?.services.tryRegisterLocalizedLayoutService(\n                KeyboardLayout.ProLayoutService.English(\n                    alphabeticInputSet: try? .qwertz\n                )\n            )\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Keyboard Style Service in Swift\nDESCRIPTION: Example of implementing a custom keyboard style service by inheriting from StandardStyleService and overriding button style behavior.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Features/Styling-Article.md#2025-04-22_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nclass CustomKeyboardStyleService: KeyboardStyle.StandardStyleService {\n    \n    override func buttonStyle(\n        for action: KeyboardAction,\n        isPressed: Bool\n    ) -> Keyboard.ButtonStyle {\n        let style = super.buttonStyle(for: action, isPressed: isPressed)\n        if !action.isInputAction { return style }\n        style.backgroundColor = .red\n        return style\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Custom Autocomplete Service into KeyboardInputViewController\nDESCRIPTION: This snippet demonstrates how to replace the standard autocomplete service with a custom implementation in the KeyboardInputViewController. By setting the autocompleteService property of the services object, KeyboardKit will use the custom service instead of the default one.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Features/Autocomplete-Article.md#2025-04-22_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nclass KeyboardViewController: KeyboardInputViewController {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        services.autocompleteService = CustomAutocompleteService()\n        setup(for: .myApp)  // See the getting-started guide\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Observing Keyboard Status with KeyboardStatusContext in Swift\nDESCRIPTION: This snippet demonstrates how to use the KeyboardStatusContext to observe and display various keyboard statuses in a SwiftUI view. It shows how to check if the keyboard is enabled, active, and has full access enabled.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Features/Status-Article.md#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nstruct MyView: View {\n\n    @StateObject\n    var status = KeyboardStatusContext(bundleId: \"com.myapp.keyboard\")\n\n    var body: some View {\n        VStack {\n            Text(\"Enabled: \\(status.isKeyboardEnabled.description)\")\n            Text(\"Active: \\(status.isKeyboardActive.description)\")\n            Text(\"Full Access: \\(status.isFullAccessEnabled.description)\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Theme with Style Variation in Swift\nDESCRIPTION: Shows how to create a custom keyboard theme by applying a style variation to an existing theme, creating a standard theme with a black tint color.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Features/Themes-Article.md#2025-04-22_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nextension KeyboardTheme {\n\n    static var standardBlack: Self {\n        .standard(.init(tint: .black))\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Autocomplete Service in Swift for KeyboardKit\nDESCRIPTION: This snippet shows how to create a custom autocomplete service by inheriting from the LocalAutocompleteService in KeyboardKit Pro. It overrides the autocompleteSuggestions method to reverse the suggestions provided by the parent class.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Features/Autocomplete-Article.md#2025-04-22_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nclass CustomAutocompleteService: Autocomplete.LocalAutocompleteService {\n\n    override func autocompleteSuggestions(\n        for text: String\n    ) async throws -> [Autocomplete.Suggestion] {\n        let original = super.autocompleteSuggestions(for: text)\n        let reversed = original.reversed()\n        return Array(reversed)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: App Group Configuration for KeyboardKit\nDESCRIPTION: Setup example showing how to configure an App Group identifier with KeyboardKit. This allows data synchronization between the main app and keyboard extension through a shared data store.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Developer/Developer-Data-Syncing.md#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nKeyboardApp/appGroupId\n```\n\n----------------------------------------\n\nTITLE: Reading Full Document Context with KeyboardKit Pro\nDESCRIPTION: Demonstrates how to use KeyboardKit Pro's extension to read the complete document context from a text document proxy. This functionality extends beyond Apple's native implementation which only provides limited context around the cursor.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Features/Proxy-Article.md#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nlet proxy = keyboardContext.textDocumentProxy\nlet result = try await proxy.fullDocumentContext()\n```\n\n----------------------------------------\n\nTITLE: Injecting a Custom Callout Service into KeyboardKit\nDESCRIPTION: Code showing how to replace the default callout service with a custom implementation by injecting it into the KeyboardInputViewController's services during initialization.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Features/Callouts-Article.md#2025-04-22_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nclass KeyboardViewController: KeyboardInputViewController {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        services.calloutService = CustomCalloutService()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Keyboard Gestures to Custom Views in Swift\nDESCRIPTION: Example of how to apply standard keyboard gestures to a custom view using the keyboardButtonGestures modifier. This attaches all standard gestures for the specified keyboard action to any SwiftUI view.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Features/Gestures-Article.md#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nText(\"😀\")\n    .keyboardButtonGestures(\n        for: .emoji(\"😀\"),\n        ...\n    )\n```\n\n----------------------------------------\n\nTITLE: Configuring Next Word Prediction with Claude or OpenAI\nDESCRIPTION: Demonstrates how to set up a KeyboardKit Pro app with AI-based next word prediction using Claude or OpenAI. This functionality replaces the native text prediction utilities which no longer support next word prediction since iOS 16.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Features/AI-Article.md#2025-04-22_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nextension KeyboardApp {\n\n    static var keyboardKitDemo: KeyboardApp {\n        KeyboardApp(\n            ...\n            autocomplete: .init(\n                nextWordPredictionRequest: .claude(apiKey: \"your-key-here\")\n            )\n        )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Opening System Settings URL in SwiftUI\nDESCRIPTION: This code snippet demonstrates how to create a SwiftUI Link that opens the System Settings URL. This can be used to allow users to enable the keyboard, enable Full Access, or access other system-level settings.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Features/Settings-Article.md#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nif let url = URL.systemSettings {\n    Link(\"Open System Settings\", destination: url)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Standard Speech Recognizer for KeyboardKit Dictation in Swift\nDESCRIPTION: This code snippet defines a StandardSpeechRecognizer class that conforms to the DictationSpeechRecognizer protocol. It implements various methods for handling speech recognition, including authorization, starting and stopping dictation, and handling audio buffers.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Features/Dictation-Article.md#2025-04-22_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nimport KeyboardKitPro\nimport Speech\n\npublic extension DictationSpeechRecognizer where Self == StandardSpeechRecognizer {\n\n    static var standard: Self { .init() }\n} \n\npublic class StandardSpeechRecognizer: DictationSpeechRecognizer {\n\n    public init() {}\n\n    private var recognizer: SFSpeechRecognizer?\n    private var request: SFSpeechAudioBufferRecognitionRequest?\n    private var speechRecognizerTask: SFSpeechRecognitionTask?\n\n    private typealias Err = Dictation.ServiceError\n\n    public var authorizationStatus: Dictation.AuthorizationStatus {\n        SFSpeechRecognizer.authorizationStatus().keyboardDictationStatus\n    }\n\n    public var supportedLocales: [Locale] {\n        Array(SFSpeechRecognizer.supportedLocales())\n    }\n\n    public func requestDictationAuthorization() async throws -> Dictation.AuthorizationStatus {\n        await withCheckedContinuation { continuation in\n            SFSpeechRecognizer.requestAuthorization { status in\n                continuation.resume(returning: status.keyboardDictationStatus)\n            }\n        }\n    }\n\n    public func resetDictationResult() async throws {}\n\n    public func startDictation(\n        with locale: Locale\n    ) async throws {\n        try await startDictation(\n            with: locale,\n            resultHandler: nil\n        )\n    }\n\n    public func startDictation(\n        with locale: Locale,\n        resultHandler: ((Dictation.SpeechRecognizerResult) -> Void)?\n    ) async throws {\n        recognizer = SFSpeechRecognizer(locale: locale)\n        guard let recognizer else { throw Err.missingSpeechRecognizer }\n        request = SFSpeechAudioBufferRecognitionRequest()\n        request?.shouldReportPartialResults = true\n        guard let request else { throw Err.missingSpeechRecognitionRequest }\n        speechRecognizerTask = recognizer.recognitionTask(with: request) {\n            let result = Dictation.SpeechRecognizerResult(\n                dictatedText: $0?.bestTranscription.formattedString,\n                error: $1,\n                isFinal: $0?.isFinal ?? true)\n            resultHandler?(result)\n        }\n    }\n\n    public func stopDictation() async throws {\n        request?.endAudio()\n        request = nil\n        speechRecognizerTask?.cancel()\n        speechRecognizerTask = nil\n    }\n\n    public func setupAudioEngineBuffer(_ buffer: AVAudioPCMBuffer) {\n        request?.append(buffer)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Custom KeyboardActionHandler in Swift\nDESCRIPTION: Demonstrates how to inject a custom KeyboardActionHandler into the KeyboardInputViewController. This replaces the standard action handler with a custom implementation.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Features/Actions-Article.md#2025-04-22_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nclass KeyboardViewController: KeyboardInputViewController {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        services.actionHandler = CustomActionHandler(controller: self)\n        setup(for: .myApp)  // See the getting-started guide\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Custom Style Service in Swift\nDESCRIPTION: Shows how to inject a custom keyboard style service into the KeyboardInputViewController.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Features/Styling-Article.md#2025-04-22_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nclass KeyboardViewController: KeyboardInputViewController {\n\n    override func viewDidLoad() {\n        keyboardStyleService = CustomKeyboardStyleService()\n        super.viewDidLoad()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Feedback for Keyboard Actions in Swift\nDESCRIPTION: Shows how to register custom audio and haptic feedback for specific actions and gestures using the feedback context in a KeyboardInputViewController.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Features/Feedback-Article.md#2025-04-22_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nclass KeyboardViewController: KeyboardInputViewController {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        let context = state.feedbackContext\n        context.registerCustomFeedback(.audio(.rocketFuse, for: .press, on: .rocket))\n        context.registerCustomFeedback(.audio(.rocketLaunch, for: .release, on: .rocket))\n        context.registerCustomFeedback(.haptic(.selection, for: .repeat, on: .rocket))\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Keyboard Toolbar with KeyboardTextField in Swift\nDESCRIPTION: This code demonstrates how to create a custom keyboard toolbar with a KeyboardTextField component from KeyboardKit Pro. It shows how to set up a text field with focus state management, custom keyboard input handling, and a custom dismiss button that appears when the field is focused.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Features/Input-Article.md#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nstruct CustomKeyboardToolbar: View {\n\n    unowned var controller: KeyboardInputViewController\n\n    @State \n    private var text = \"\"\n\n    @FocusState \n    private var isTextFieldFocused\n\n    var body: some View {\n        if hasFullAccess {\n            KeyboardTextField(\n                \"Type here...\", \n                text: $text, \n                controller: controller,\n                config: configureTextField,\n                onSubmit: handleReturnKeyPressed    \n                // Use onSubmit: to detect the return key.\n                // The onSubmit(...) view modifier doesn't work.\n            )\n            .focused($isTextFieldFocused) {\n                Image(systemName: \"xmark.circle.fill\")\n            }\n        }\n    }\n    \n    func configureTextField(_ view: UITextField) {\n        // Configure the underlying view in any way you want.\n    }\n    \n    func handleReturnKeyPressed() {\n        print(\"Return key pressed!\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Keyboard Feedback Settings in Swift\nDESCRIPTION: Demonstrates how to customize audio feedback for input keys and disable haptic feedback by configuring the feedback context in a KeyboardInputViewController subclass.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Features/Feedback-Article.md#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nclass KeyboardViewController: KeyboardInputViewController {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        let context = state.feedbackContext\n        context.audioConfiguration.input = .custom(id: 1329)\n        context.settings.isHapticFeedbackEnabled = false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Custom KeyboardLayoutService in Swift\nDESCRIPTION: This code shows how to inject a custom KeyboardLayoutService into the KeyboardInputViewController by replacing the layoutService property in the viewDidLoad method.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Features/Layout-Article.md#2025-04-22_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nclass KeyboardViewController: KeyboardInputViewController {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        services.layoutService = CustomKeyboardLayoutService()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Theme Based on Existing Theme in Swift\nDESCRIPTION: Demonstrates how to create a custom keyboard theme by using an existing theme as a base and modifying specific properties, in this case changing the primary button color on the minimal theme.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Features/Themes-Article.md#2025-04-22_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nextension KeyboardTheme {\n\n    static var pinkPrimary: Self {\n        get throws {\n            var theme = try? KeyboardTheme.minimal\n            theme.buttonStyles[.primary]?.backgroundColor = .green\n            return theme\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring KeyboardDictation in SwiftUI ContentView\nDESCRIPTION: This snippet demonstrates how to set up the keyboardDictation view modifier in a SwiftUI ContentView. It includes the necessary environment objects, wraps the content in a KeyboardAppView, and applies the keyboardDictation modifier with required parameters.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Features/Dictation-Article.md#2025-04-22_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nstruct ContentView: View {\n\n    @Environment(\\.openURL)\n    var openURL\n    \n    @EnvironmentObject\n    private var dictationContext: DictationContext\n\n    @EnvironmentObject\n    private var keyboardContext: KeyboardContext\n\n    var body: some View {\n        KeyboardAppView(for: .keyboardKitDemo) {\n            ...\n        }\n        .keyboardDictation(\n            dictationContext: dictationContext,\n            keyboardContext: keyboardContext,\n            openUrl: openURL,\n            speechRecognizer: .standard,         // As defined earlier\n            overlay: dictationOverlay            // You can use any view\n        )\n    }\n\n    func overlay() -> some View {\n        Dictation.Screen(\n            dictationContext: context,\n            titleView: { EmptyView() },\n            indicator: { Dictation.BarVisualizer(isAnimating: $0) }\n        )\n    } \n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Theme with Modified Primary Button in Swift\nDESCRIPTION: Shows how to create a custom keyboard theme by extending the KeyboardTheme type with a static property that modifies only the primary button background color.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Features/Themes-Article.md#2025-04-22_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nextension KeyboardTheme {\n\n    static var greenPrimary: Self {\n        get throws {\n            try? Self(primaryBackgroundColor: .green)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up the Main App with KeyboardAppView\nDESCRIPTION: Demonstrates how to configure the main app with the same keyboard configuration by wrapping the content view in a KeyboardAppView.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/README.md#2025-04-22_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n@main\nstruct MyApp: App {\n\n    var body: some Scene {\n        WindowGroup {\n        \n            // Here we use the keyboard app we created above\n            KeyboardAppView(for: .keyboardKitDemo) {\n                ContentView()\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing the KeyboardView\nDESCRIPTION: Shows how to replace or customize the standard KeyboardView by overriding viewWillSetupKeyboardView() and using setupKeyboardView(_:).\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/README.md#2025-04-22_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nclass KeyboardViewController: KeyboardInputViewController {\n\n    override func viewWillSetupKeyboardView() {\n        setupKeyboardView { [weak self] controller in // <-- Use weak or unknowned self!\n            KeyboardView(\n                state: controller.state,\n                services: controller.services,\n                buttonContent: { $0.view },\n                buttonView: { $0.view },\n                collapsedView: { $0.view },\n                emojiKeyboard: { $0.view },\n                toolbar: { $0.view }\n            )\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Localized Callout Service\nDESCRIPTION: Code showing how to create and register a custom German callout service that extends the Pro service, allowing for locale-specific customization of callout behavior.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Features/Callouts-Article.md#2025-04-22_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nclass MyCustomGermanService: KeyboardCallout.ProCalloutService.German { ... } \n\nclass KeyboardViewController: KeyboardInputViewController {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setup(for: ...) { result in\n            // Check result to see that setup was successful\n            self.services.tryRegisterLocalizedLayoutService(\n                try! MyCustomGermanService() \n            )\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Locale Properties in KeyboardKit\nDESCRIPTION: Demonstrates how to access locale-specific properties like flag and localized names from a Locale instance. These extensions provide easy access to information needed for keyboard display and localization.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Features/Localization-Article.md#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nlet swedish = Locale.swedish\nswedish.flag                         // 🇸🇪\nswedish.localizedName                // svenska\nswedish.localizedName(in: .english)  // Swedish\n```\n\n----------------------------------------\n\nTITLE: Setting Up ThemeBased Style Service in Swift\nDESCRIPTION: Demonstrates how to set up a theme-based style service in the viewDidLoad method of a keyboard extension. This connects the keyboard context and theme context to enable theme-based styling.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Features/Themes-Article.md#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\noverride func viewDidLoad() {\n    super.viewDidLoad()\n    setup(for: .myApp) { result in\n        // Check result to see that setup was successful\n        self.services.styleService = .themeBased(\n            keyboardContext: state.keyboardContext,\n            themeContext: state.themeContext\n        )\n    } \n}\n```\n\n----------------------------------------\n\nTITLE: Customizing KeyboardApp Screens with View Modifiers\nDESCRIPTION: Shows how to customize KeyboardApp.HomeScreen using view modifiers to configure localization, styling, and visibility options. This example demonstrates creating a navigation view with a custom home screen.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Features/App-Article.md#2025-04-22_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nNavigationView {\n    KeyboardApp.HomeScreen(\n        app: .myApp,\n        appIcon: Image(.icon),\n        header: {},\n        footer: textFieldSection\n    )\n    .navigationTitle(\"KeyboardKit\")\n}\n.keyboardAppHomeScreenLocalization(\n    .init(keyboardSectionFooter: \"Here's a custom footer text.\")\n)\n.keyboardAppHomeScreenStyle(\n    .init(appIconSize: 150)\n)\n.keyboardAppHomeScreenVisibility(\n    .init(keyboardSection: true)\n)\n.navigationViewStyle(.stack)\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Localized LayoutService in Swift\nDESCRIPTION: This snippet demonstrates how to create and register a custom localized layout service for German keyboards using KeyboardKit Pro. It inherits from the German ProLayoutService and registers it in the viewDidLoad method.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Features/Layout-Article.md#2025-04-22_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nclass MyCustomGermanService: KeyboardLayout.ProLayoutService.German { ... } \n\nclass KeyboardViewController: KeyboardInputViewController {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setup(for: ...) { result in\n            // Check result to see that setup was successful\n            self.services.tryRegisterLocalizedLayoutService(\n                try! MyCustomGermanService() \n            )\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Keyboard Text Input Fields\nDESCRIPTION: Shows how to implement a text field within a keyboard extension using KeyboardKit Pro's KeyboardTextField component. This allows users to input text directly in the keyboard extension rather than in the main app.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Features/AI-Article.md#2025-04-22_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nextension MyView: View {\n\n    @EnvironmentObject var context: KeyboardContext\n\n    @State var text = \"\"\n\n    var body: some View {\n        KeyboardTextField(\n            text: $text, \n            keyboardContext: context\n        )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Autocomplete Suggestions in Swift\nDESCRIPTION: Demonstrates how to handle autocomplete suggestions using a KeyboardActionHandler. This function handles a suggestion by triggering a suggestion action.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Features/Actions-Article.md#2025-04-22_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nfunc handle(_ suggestion: Autocomplete.Suggestion, with handler: KeyboardActionHandler) {\n    handler.handle(.suggestion(suggestion))\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Keyboard Controller Setup\nDESCRIPTION: Implementation of viewDidLoad in the keyboard controller to setup the keyboard with custom app configuration.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Essentials/Getting-Started-Article.md#2025-04-22_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nclass KeyboardViewController: KeyboardInputViewController {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        // Set up the keyboard with the app we created above\n        setup(for: .keyboardKitDemo) { result in\n            // If the result is `.success`, the setup succeeded.\n            // This is where you can setup custom services, etc.\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Full Document Context with KeyboardKit Pro\nDESCRIPTION: Shows how to use the KeyboardKit Pro extension to read the entire text document context. This overcomes the limitation in Apple's native APIs that only provide partial context.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Features/AI-Article.md#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nlet proxy = keyboardContext.textDocumentProxy\nlet result = try await proxy.fullDocumentContext()\n```\n\n----------------------------------------\n\nTITLE: Initializing a Pro Callout Service for a Specific Locale\nDESCRIPTION: Example of how to access a localized callout service when using KeyboardKit Pro, specifically showing how to initialize the Swedish locale service.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Features/Callouts-Article.md#2025-04-22_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nlet service = try KeyboardCallout.ProCalloutService.Swedish()\n```\n\n----------------------------------------\n\nTITLE: Accessing Host Application Properties in KeyboardKit Pro\nDESCRIPTION: Shows the available properties for accessing host application information through KeyboardInputViewController and KeyboardContext. These properties allow developers to identify the current host application and track when it was last synced.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Features/Host-Article.md#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nKeyboardInputViewController/hostApplicationBundleId\nKeyboardContext/hostApplicationBundleId\nKeyboardContext/hostApplicationBundleIdSyncDate\nKeyboardHostApplicationProvider/hostApplication\n```\n\n----------------------------------------\n\nTITLE: Applying Keyboard Button Modifier to Text in Swift\nDESCRIPTION: Shows how to apply a keyboard button modifier to a Text view, making it behave like a keyboard button.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Features/Actions-Article.md#2025-04-22_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nText(\"Button\")\n    .keyboardButton(...)\n```\n\n----------------------------------------\n\nTITLE: Installing KeyboardKit with Swift Package Manager\nDESCRIPTION: Shows how to add the KeyboardKit package to your project using Swift Package Manager URL.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://github.com/KeyboardKit/KeyboardKit.git\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Keyboard Controller Class\nDESCRIPTION: Shows how to create a keyboard controller by inheriting from KeyboardInputViewController instead of UIInputViewController.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nclass KeyboardController: KeyboardInputViewController {}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Audio Feedback from URL in Swift\nDESCRIPTION: Demonstrates how to create custom audio feedback that loads sound effects from an audio file using a URL in KeyboardKit.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Features/Feedback-Article.md#2025-04-22_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nextension Feedback.Audio {\n\n    static let sentMessage = .customUrl(\n        Bundle.main.url(forResource: \"sent\", withExtension: \"mp3\")\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Basic Keyboard Controller\nDESCRIPTION: Basic implementation of a keyboard controller inheriting from KeyboardInputViewController.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Essentials/Getting-Started-Article.md#2025-04-22_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nimport KeyboardKit (or KeyboardKitPro)\n\nclass KeyboardController: KeyboardInputViewController {}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Audio Feedback in Swift\nDESCRIPTION: Shows how to define custom audio feedback using system sounds or custom audio files in KeyboardKit.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Features/Feedback-Article.md#2025-04-22_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nextension Feedback.Audio {\n\n    static let sentMessage = .custom(id: 1004)\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Keyboard Context in Views\nDESCRIPTION: Example of accessing keyboard context in custom views using environment objects.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Essentials/Getting-Started-Article.md#2025-04-22_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nstruct CustomView: View {\n\n    @EnvironmentObject\n    var keyboardContext: KeyboardContext\n\n    var body: some View {\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Translating Localized Content with KKL10n\nDESCRIPTION: Shows how to use the KKL10n enum to retrieve localized strings. This allows for getting translated content for the current locale or any specific locale provided as a parameter.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Features/Localization-Article.md#2025-04-22_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nlet translation = KKL10n.keyboardTypeNumeric.text\n```\n\n----------------------------------------\n\nTITLE: Handling Autocomplete Service Result in Swift\nDESCRIPTION: Demonstrates how to work with the new Autocomplete.ServiceResult returned by the AutocompleteService, replacing the previous list of suggestions.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/RELEASE_NOTES.md#2025-04-22_snippet_8\n\nLANGUAGE: Swift\nCODE:\n```\nlet result: Autocomplete.ServiceResult = autocompleteService.performAutocomplete()\n```\n\n----------------------------------------\n\nTITLE: Localizing Emojis and Categories in Swift\nDESCRIPTION: Shows how to get localized names for emojis and categories in different languages, making emoji interfaces accessible across language barriers.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Features/Emojis-Article.md#2025-04-22_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nlet emoji = Emoji(\"😀\") \nemoji.localizedName                   // Grinning Face\nemoji.localizedName(in: .swedish)     // Leende Ansikte\n\nlet category = EmojiCategory.animalsAndNature \ncategory.localizedName                // Animals & Nature\ncategory.localizedName(in: .swedish)  // Djur och natur\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Keyboard View with Preview Support in Swift\nDESCRIPTION: Example showing how to create a custom keyboard view that uses KeyboardActionHandler and KeyboardContext with preview support. The view implements buttons for triggering backspace and text deletion.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Features/Previews-Article.md#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nstruct CustomView: View {\n\n    init(actionHandler: KeyboardActionHandler) {\n        self.actionHandler = actionHandler\n    }\n\n    private var actionHandler: KeyboardActionHandler\n\n    @EnvironmentObject\n    private var context: KeyboardContext\n\n    var body: some View {\n        VStack {\n            Button(\"Trigger backspace\") {\n                actionHandler.handle(.release, on: .backspace)\n            }\n            Button(\"Delete text in the proxu\") {\n                context.textDocumentProxy.deleteBackwards()\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Emoji Skin Tone Variants in Swift\nDESCRIPTION: Demonstrates how to work with skin tone variants, including detecting if an emoji supports skin tones and accessing all variants of such emojis.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Features/Emojis-Article.md#2025-04-22_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nEmoji(\"👍\").hasSkinToneVariants      // true\nEmoji(\"🚀\").hasSkinToneVariants      // false\nEmoji(\"👍🏿\").neutralSkinToneVariant   // 👍\nEmoji(\"👍\").skinToneVariants         // 👍👍🏻👍🏼👍🏽👍🏾👍🏿\n```\n\n----------------------------------------\n\nTITLE: Accessing Keyboard Context in SwiftUI Views\nDESCRIPTION: Demonstrates how to access the keyboard context that's injected into the environment by KeyboardAppView. This allows app views to read and interact with keyboard state.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Features/App-Article.md#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nstruct ContentView: View {\n\n    @EnvironmentObject var keyboardContext: KeyboardContext\n\n    var body: View {\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Callout Style to KeyboardView in Swift\nDESCRIPTION: Shows how to apply the simplified callout style directly to a KeyboardView, which will use either the service style or the environment style.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/RELEASE_NOTES.md#2025-04-22_snippet_9\n\nLANGUAGE: Swift\nCODE:\n```\nKeyboardView()\n    .calloutStyle(...)\n```\n\n----------------------------------------\n\nTITLE: Determining Device Type using DeviceType in Swift\nDESCRIPTION: This snippet demonstrates how to use the DeviceType enum to determine the current device type and check if it's a phone or tablet.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Features/Device-Article.md#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nlet device = DeviceType.current\nlet isPhone = device.isPhone\nlet isPad = device.isPad\n```\n\n----------------------------------------\n\nTITLE: Using String Extensions for Emoji Detection in Swift\nDESCRIPTION: Demonstrates String and Character extensions that help detect and extract emojis from strings, allowing for emoji-aware text processing.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Features/Emojis-Article.md#2025-04-22_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\n\"Hello!\".containsEmoji           // false\n\"Hello! 👋\".containsEmoji        // true\n\"Hello! 👋\".containsOnlyEmojis   // false\n\"Hello! 👋😀\".emojis             // [\"👋\", \"😀\"]\n```\n\n----------------------------------------\n\nTITLE: Opening Host Applications in KeyboardKit Pro\nDESCRIPTION: Methods available for opening host applications and handling navigation between the keyboard and host apps.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Features/Host-Article.md#2025-04-22_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nKeyboardHostApplication/openWithAction(_:)\nKeyboardHostApplication/openWithActionHandler(_:)\n```\n\n----------------------------------------\n\nTITLE: Accessing Emoji Unicode Information in Swift\nDESCRIPTION: Shows how to retrieve Unicode identifiers and names for emojis, which can be used for identifying emojis and providing basic non-localized naming.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Features/Emojis-Article.md#2025-04-22_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nEmoji(\"👍\").unicodeIdentifier   // \\\\N{THUMBS UP SIGN}\nEmoji(\"👍🏿\").unicodeIdentifier   // \\\\N{THUMBS UP SIGN}\\\\N{EMOJI MODIFIER FITZPATRICK TYPE-6}\nEmoji(\"👍\").unicodeName         // Thumbs Up Sign\n```\n\n----------------------------------------\n\nTITLE: Retrieving Standard Button Properties in Swift\nDESCRIPTION: Code showing how to get standard button images and text for keyboard actions using KeyboardKit context.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Features/Styling-Article.md#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nlet context = KeyboardContext()\nlet image = KeyboardAction.command.standardButtonImage(for: context) // Command icon\nlet text = KeyboardAction.space.standardButtonText(for: context)     // KKL10n.space\n```\n\n----------------------------------------\n\nTITLE: Accessing Keyboard Collapsed State in Swift\nDESCRIPTION: Demonstrates how to use the new isKeyboardCollapsed property in KeyboardContext to determine if the keyboard is in a collapsed state.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/RELEASE_NOTES.md#2025-04-22_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\nif keyboardContext.isKeyboardCollapsed {\n    // Handle collapsed state\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing KeyboardKit Settings with Keyboard Docking in Swift\nDESCRIPTION: Demonstrates how to set up KeyboardKit settings with the new keyboard docking feature. The code shows the addition of a keyboardDockEdge property to enable docking the keyboard to a specific edge.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/RELEASE_NOTES.md#2025-04-22_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nKeyboard.Settings {\n    keyboardDockEdge = .leading // or .trailing\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Enabled Locales in KeyboardContext in Swift\nDESCRIPTION: Demonstrates the new enabledLocales property in KeyboardContext, which uses either addedLocales or locales to determine the available keyboard languages.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/RELEASE_NOTES.md#2025-04-22_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\nlet enabledLocales = keyboardContext.enabledLocales\n```\n\n----------------------------------------\n\nTITLE: Using Bundle ID Wildcards with KeyboardStatusContext in Swift\nDESCRIPTION: This snippet shows how to use bundle ID wildcards with KeyboardStatusContext to inspect multiple keyboards with a single instance. This is useful when an app has multiple keyboard extensions.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Features/Status-Article.md#2025-04-22_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n@StateObject\nvar status = KeyboardStatusContext(bundleId: \"com.myapp.*\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Keyboard Collapsed View in Swift\nDESCRIPTION: Demonstrates how to use the new collapsedView property in KeyboardView to display a custom view when the keyboard is in a collapsed state.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/RELEASE_NOTES.md#2025-04-22_snippet_6\n\nLANGUAGE: Swift\nCODE:\n```\nKeyboardView(\n    collapsedView: Keyboard.CollapsedView()\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring App Permissions for Dictation in Info.plist\nDESCRIPTION: XML configuration needed in the app's Info.plist to enable dictation functionality. Adds required keys for microphone access and speech recognition permissions.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Features/Dictation-Article.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSMicrophoneUsageDescription</key>\n<string>Describe why you need microphone access.</string>\n<key>NSSpeechRecognitionUsageDescription</key>\n<string>Describe why you need speech recognition.</string>\n```\n\n----------------------------------------\n\nTITLE: Using Decoupled Keyboard Case in Swift\nDESCRIPTION: Shows how to use the new keyboardCase property in KeyboardContext, which is now decoupled from the keyboard type for more flexible case management.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/RELEASE_NOTES.md#2025-04-22_snippet_5\n\nLANGUAGE: Swift\nCODE:\n```\nlet keyboardCase = keyboardContext.keyboardCase\n```\n\n----------------------------------------\n\nTITLE: Setting Up SwiftUI Preview with KeyboardKit Components\nDESCRIPTION: Demonstrates how to set up a SwiftUI preview for a custom keyboard view using KeyboardKit's preview-specific implementations, including preview action handler and context.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Features/Previews-Article.md#2025-04-22_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n#Preview {\n\n    CustomView(actionHandler: .preview)\n        .environmentObject(KeyboardContext.preview)\n}\n```\n\n----------------------------------------\n\nTITLE: Working with Emoji Versions in Swift\nDESCRIPTION: Demonstrates how to access emoji version information including version-specific emojis and platform compatibility data. This helps in handling compatibility across different OS versions.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Features/Emojis-Article.md#2025-04-22_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nlet version = EmojiVersion.v15\nversion.emojis          // 🫨🫸🫷🪿🫎🪼🫏🪽🪻🫛🫚🪇🪈🪮🪭🩷🩵🩶🪯🛜...\nversion.version         // 15.0\nversion.iOS             // 16.4\nversion.olderVersions   // [.v14, .v13_1, .v13, .v12_1, ...]\n```\n\n----------------------------------------\n\nTITLE: Referencing System Settings URL in Swift\nDESCRIPTION: This code snippet demonstrates how to reference the system settings URL in KeyboardKit. It's used to explain how to open the app in System Settings from a keyboard extension.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Features/Navigation-Article.md#2025-04-22_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\nFoundation/URL/systemSettings\n```\n\n----------------------------------------\n\nTITLE: Using NSLog Instead of Print for Keyboard Extensions\nDESCRIPTION: When debugging keyboard extensions, use NSLog instead of print as it works more reliably even after attaching the debugger. This helps overcome a common Xcode bug that affects standard print statements in extensions.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Developer/Developer-Debugging.md#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nNSLog(...) // Use this instead of print(...) for more reliable logging\n```\n\n----------------------------------------\n\nTITLE: Accessing KeyboardInputViewController Services in Swift\nDESCRIPTION: This code snippet shows how to access the main action handler in the services of KeyboardInputViewController. It's used to explain how to handle URL opening actions in KeyboardKit.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Features/Navigation-Article.md#2025-04-22_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nKeyboardInputViewController/services\n```\n\n----------------------------------------\n\nTITLE: Translating Localized Content for Specific Locale\nDESCRIPTION: Demonstrates how to obtain translations for a specific locale rather than the current one. This is useful when presenting content in multiple languages or when showing locale names.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Features/Localization-Article.md#2025-04-22_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nlet translation = KKL10n.keyboardTypeNumeric.text(for: .spanish)\n```\n\n----------------------------------------\n\nTITLE: Installing KeyboardKit with Package URLs\nDESCRIPTION: Package URLs for installing either KeyboardKit or KeyboardKit Pro using Swift Package Manager.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Essentials/Getting-Started-Article.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://github.com/KeyboardKit/KeyboardKit.git      // or...\nhttps://github.com/KeyboardKit/KeyboardKitPro.git\n```\n\n----------------------------------------\n\nTITLE: Applying Keyboard Dock Edge Modifier in SwiftUI\nDESCRIPTION: Shows how to use the new keyboardDockEdge modifier in SwiftUI to apply a custom docking value to a view, likely a KeyboardView.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/RELEASE_NOTES.md#2025-04-22_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nsomeView.keyboardDockEdge(...)\n```\n\n----------------------------------------\n\nTITLE: KeyboardKit Package Dependencies Setup\nDESCRIPTION: Swift Package Manager configuration for adding KeyboardKit as a package dependency.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Essentials/Getting-Started-Article.md#2025-04-22_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\n...\ndependencies: [\n    .package(\n        url: \"https://github.com/KeyboardKit/KeyboardKit.git\",\n        .upToNextMajor(from: \"9.0.0\")\n    )\n],\ntargets: [\n    .target(\n        name: \"MyPackage\",\n        dependencies: [\"KeyboardKit\"]\n    )\n]\n```\n\n----------------------------------------\n\nTITLE: Checking Interface Orientation using InterfaceOrientation in Swift\nDESCRIPTION: This code shows how to use the InterfaceOrientation enum to get the current screen orientation and determine if it's portrait or landscape.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Features/Device-Article.md#2025-04-22_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nlet orientation = InterfaceOrientation.current\nlet isPortrait = orientation.isPortrait\nlet isLandscape = orientation.isLandscape\n```\n\n----------------------------------------\n\nTITLE: KeyboardKit Pro Package Dependencies Setup\nDESCRIPTION: Swift Package Manager configuration for adding KeyboardKit Pro as a package dependency.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Essentials/Getting-Started-Article.md#2025-04-22_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\n...\ndependencies: [\n    .package(\n        url: \"https://github.com/KeyboardKit/KeyboardKitPro.git\",\n        .upToNextMajor(from: \"9.0.0\")\n    )\n],\ntargets: [\n    .target(\n        name: \"MyPackage\",\n        dependencies: [\"KeyboardKit\"]\n    )\n]\n```\n\n----------------------------------------\n\nTITLE: Creating an Emoji Instance in Swift\nDESCRIPTION: Demonstrates how to create an Emoji struct instance from a string literal. This basic functionality allows working with emojis in a structured way.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Features/Emojis-Article.md#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nlet emoji = Emoji(\"😀\")\n```\n\n----------------------------------------\n\nTITLE: Accessing Emoji Categories in Swift\nDESCRIPTION: Shows how to access emojis from predefined categories using the EmojiCategory enum. This allows retrieving collections of related emojis organized by theme.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Features/Emojis-Article.md#2025-04-22_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nEmojiCategory.smileysAndPeople.emojis  // 😀😃😄...\nEmojiCategory.animalsAndNature.emojis  // 🐶🐱🐭...\n```\n\n----------------------------------------\n\nTITLE: Referencing KeyboardAction URL in Swift\nDESCRIPTION: This code snippet demonstrates how to reference a KeyboardAction for opening a URL in KeyboardKit. It's used in the context of explaining how to open URLs from a keyboard extension.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Features/Navigation-Article.md#2025-04-22_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nKeyboardAction/url(_:id:)\n```\n\n----------------------------------------\n\nTITLE: Initializing KeyboardApp without Bundle IDs in Swift\nDESCRIPTION: Shows the simplified KeyboardApp initialization in version 9.1, where bundleId and keyboardBundleId are no longer required parameters.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/RELEASE_NOTES.md#2025-04-22_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\nKeyboardApp(\n    // bundleId and keyboardBundleId no longer needed\n)\n```\n\n----------------------------------------\n\nTITLE: Using Renamed Keyboard Layout Service in Swift\nDESCRIPTION: Shows the usage of the renamed keyboard layout service, which now includes the service type in its name for better clarity and distinction.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/RELEASE_NOTES.md#2025-04-22_snippet_7\n\nLANGUAGE: Swift\nCODE:\n```\nlet service = KeyboardLayout.StandardLayoutService()\n```\n\n----------------------------------------\n\nTITLE: Installing KeyboardKit with Swift Package Manager\nDESCRIPTION: Instructions for installing KeyboardKit using the Swift Package Manager by adding the GitHub repository URL to your project dependencies.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/KeyboardKit.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://github.com/KeyboardKit/KeyboardKit.git\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Keyboard View for Unsupported Keyboard Types in Swift\nDESCRIPTION: This snippet demonstrates how to create a custom keyboard view that handles both standard supported keyboard types and custom unsupported types. It conditionally renders either a custom implementation or the standard KeyboardView based on the current keyboard type.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Essentials/Essentials-Article.md#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nstruct CustomKeyboardView: View {\n\n    /// Passed in from the controller for convenience\n    unowned var controller: KeyboardInputViewController\n\n    @EnvironmentObject\n    private var context: KeyboardContext\n\n    var body: some View {\n        if context.keyboardType == .images {\n            // Render a custom keyboard here\n        } else {\n            KeyboardView(\n                state: controller.state,\n                services: controller.services\n            )\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: SwiftUI Metadata Block\nDESCRIPTION: SwiftUI metadata configuration block defining page image properties for documentation.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Developer/Developer-Custom-Keyboards-Explained.md#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n@Metadata {\n\n    @PageImage(\n        purpose: card,\n        source: \"Page\",\n        alt: \"Page icon\"\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Next Word Prediction with Claude or OpenAI API in KeyboardKit Pro\nDESCRIPTION: This code demonstrates how to set up AI-based next word prediction by configuring a KeyboardApp with a NextWordPredictionRequest using Claude's API. This enables the keyboard to predict what word might come next based on previously typed text.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Features/Autocomplete-Article.md#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nextension KeyboardApp {\n\n    static var keyboardKitDemo: KeyboardApp {\n        KeyboardApp(\n            ...\n            autocomplete: .init(\n                nextWordPredictionRequest: .claude(apiKey: ...)\n            )\n        )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Keyboard Type Extension in Swift\nDESCRIPTION: This code shows how to implement a custom keyboard type by extending the Keyboard.KeyboardType enum with a static property that uses the custom(named:) type builder. This allows for creating specialized keyboard types that can be handled in custom views.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Essentials/Essentials-Article.md#2025-04-22_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nextension Keyboard.KeyboardType {\n\n    static var gifKeyboard: Keyboard.KeyboardType {\n        return .custom(named: \"gifKeyboard\")\n    } \n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Main App Integration\nDESCRIPTION: Example of integrating KeyboardKit into the main app using KeyboardAppView.\nSOURCE: https://github.com/keyboardkit/keyboardkit/blob/master/Sources/KeyboardKit/KeyboardKit.docc/Essentials/Getting-Started-Article.md#2025-04-22_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n@main\nstruct MyApp: App {\n\n    var body: some Scene {\n        WindowGroup {\n\n            // Here we use the keyboard app we created above\n            KeyboardAppView(for: .keyboardKitDemo) {\n                ContentView()\n            }\n        }\n    }\n}\n```"
  }
]