[
  {
    "owner": "sveltejs",
    "repo": "kit",
    "content": "TITLE: Loading Page Data with Universal Load Function\nDESCRIPTION: Example of a universal load function in +page.js that returns data for a blog post based on the URL slug parameter. The function runs both on server and client side.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/20-core-concepts/20-load.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport function load({ params }) {\n\treturn {\n\t\tpost: {\n\t\t\ttitle: `Title for ${params.slug} goes here`,\n\t\t\tcontent: `Content for ${params.slug} goes here`\n\t\t}\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: SvelteKit Standard Project Directory Structure\nDESCRIPTION: Shows the typical directory structure of a SvelteKit project, including all main directories and configuration files. Demonstrates the organization of source code, static assets, tests, and configuration files.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/10-getting-started/30-project-structure.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmy-project/\n├ src/\n│ ├ lib/\n│ │ ├ server/\n│ │ │ └ [your server-only lib files]\n│ │ └ [your lib files]\n│ ├ params/\n│ │ └ [your param matchers]\n│ ├ routes/\n│ │ └ [your routes]\n│ ├ app.html\n│ ├ error.html\n│ ├ hooks.client.js\n│ ├ hooks.server.js\n│ └ service-worker.js\n├ static/\n│ └ [your static assets]\n├ tests/\n│ └ [your tests]\n├ package.json\n├ svelte.config.js\n├ tsconfig.json\n└ vite.config.js\n```\n\n----------------------------------------\n\nTITLE: Redirect Handling in SvelteKit Load Function\nDESCRIPTION: Demonstrates how to implement redirects in load functions using the redirect helper with status codes.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/20-core-concepts/20-load.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { redirect } from '@sveltejs/kit';\n\n/** @type {import('./$types').LayoutServerLoad} */\nexport function load({ locals }) {\n\tif (!locals.user) {\n\t\tredirect(307, '/login');\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Default Form Action in SvelteKit\nDESCRIPTION: This snippet shows how to define a default form action in a SvelteKit +page.server.js file. It exports an actions object with a default async function that handles form submissions.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/20-core-concepts/30-form-actions.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/** @satisfies {import('./$types').Actions} */\nexport const actions = {\n\tdefault: async (event) => {\n\t\t// TODO log the user in\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: Streaming Promises in SvelteKit Load Function\nDESCRIPTION: This JavaScript code demonstrates how to stream promises in a SvelteKit server `load` function. By returning promises for different data components, SvelteKit streams the data to the browser as each promise resolves, improving perceived performance. The `await` keyword should be placed carefully to ensure other promises can start resolving while waiting for the post data.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/20-core-concepts/20-load.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('./$types').PageServerLoad} */\nexport async function load({ params }) {\n\treturn {\n\t\t// make sure the `await` happens at the end, otherwise we\n\t\t// can't start loading comments until we've loaded the post\n\t\tcomments: loadComments(params.slug),\n\t\tpost: await loadPost(params.slug)\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Form Enhancement with use:enhance in SvelteKit\nDESCRIPTION: Demonstrates how to add basic progressive enhancement to a form using the use:enhance directive from $app/forms.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/20-core-concepts/30-form-actions.md#2025-04-21_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\timport { enhance } from '$app/forms';\n\n\t/** @type {import('./$types').PageProps} */\n\tlet { form } = $props();\n</script>\n\n<form method=\"POST\" use:enhance>\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Action with Data Processing in SvelteKit\nDESCRIPTION: This code snippet shows a complete implementation of a login action in SvelteKit. It processes form data, interacts with a database, sets cookies, and returns a response. It also includes error handling and validation.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/20-core-concepts/30-form-actions.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { fail } from '@sveltejs/kit';\nimport * as db from '$lib/server/db';\n\n/** @satisfies {import('./$types').Actions} */\nexport const actions = {\n\tlogin: async ({ cookies, request }) => {\n\t\tconst data = await request.formData();\n\t\tconst email = data.get('email');\n\t\tconst password = data.get('password');\n\n\t\tif (!email) {\n\t\t\treturn fail(400, { email, missing: true });\n\t\t}\n\n\t\tconst user = await db.getUser(email);\n\n\t\tif (!user || user.password !== db.hash(password)) {\n\t\t\treturn fail(400, { email, incorrect: true });\n\t\t}\n\n\t\tcookies.set('sessionid', await db.createSession(user), { path: '/' });\n\n\t\treturn { success: true };\n\t},\n\tregister: async (event) => {\n\t\t// TODO register the user\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: Using $types for Type Safety in SvelteKit\nDESCRIPTION: This snippet shows how to use the `$types.d.ts` file generated by SvelteKit for type safety in Svelte components. Specifically, it demonstrates how to type the `data` prop using `PageProps` to ensure that the data received from the `load` function is correctly typed.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/20-core-concepts/10-routing.md#2025-04-21_snippet_12\n\nLANGUAGE: svelte\nCODE:\n```\n<!--- file: src/routes/blog/[slug]/+page.svelte --->\n<script>\n\t/** @type {import('./$types').PageProps} */\n\tlet { data } = $props();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Locals with Handle Hook in SvelteKit\nDESCRIPTION: Example showing how to use the handle hook to add custom data to event.locals and modify response headers. Includes type definitions for user data.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/30-advanced/20-hooks.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('@sveltejs/kit').Handle} */\nexport async function handle({ event, resolve }) {\n\tevent.locals.user = await getUserInformation(event.cookies.get('sessionid'));\n\n\tconst response = await resolve(event);\n\n\tresponse.headers.set('x-custom-header', 'potato');\n\n\treturn response;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Named Form Actions in SvelteKit\nDESCRIPTION: This code snippet shows how to implement named form actions in a SvelteKit +page.server.js file. It exports an actions object with two named async functions for login and registration.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/20-core-concepts/30-form-actions.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/** @satisfies {import('./$types').Actions} */\nexport const actions = {\n\tlogin: async (event) => {\n\t\t// TODO log the user in\n\t},\n\tregister: async (event) => {\n\t\t// TODO register the user\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: Invalidating Load Functions in Svelte Component\nDESCRIPTION: This Svelte component demonstrates how to use `invalidate` and `invalidateAll` from `$app/navigation` to manually trigger load function reruns. Clicking the button will cause the associated load function to rerun, fetching new data. This provides a mechanism for refreshing data in response to user actions or external events.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/20-core-concepts/20-load.md#2025-04-21_snippet_19\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\timport { invalidate, invalidateAll } from '$app/navigation';\n\n\t/** @type {import('./$types').PageProps} */\n\tlet { data } = $props();\n\n\tfunction rerunLoadFunction() {\n\t\t// any of these will cause the `load` function to rerun\n\t\tinvalidate('app:random');\n\t\tinvalidate('https://api.example.com/random-number');\n\t\tinvalidate(url => url.href.includes('random-number'));\n\t\tinvalidateAll();\n\t}\n</script>\n\n<p>random number: {data.number}</p>\n<button onclick={rerunLoadFunction}>Update random number</button>\n```\n\n----------------------------------------\n\nTITLE: Creating a POST API Route in SvelteKit\nDESCRIPTION: This snippet demonstrates how to create a POST API route in SvelteKit using the `+server.js` file. It shows how to extract JSON data from the request body and return a JSON response with the sum of the two numbers.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/20-core-concepts/10-routing.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n/// file: src/routes/api/add/+server.js\nimport { json } from '@sveltejs/kit';\n\n/** @type {import('./$types').RequestHandler} */\nexport async function POST({ request }) {\n\tconst { a, b } = await request.json();\n\treturn json(a + b);\n}\n```\n\n----------------------------------------\n\nTITLE: Svelte Component for Streaming Data with Await Blocks\nDESCRIPTION: This Svelte component demonstrates how to use `{#await}` blocks to handle streamed data in a SvelteKit application. It displays a loading message while waiting for the `comments` promise to resolve, then renders the comments once they are available, handling potential errors as well. This provides a progressive enhancement experience for users.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/20-core-concepts/20-load.md#2025-04-21_snippet_13\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\t/** @type {import('./$types').PageProps} */\n\tlet { data } = $props();\n</script>\n\n<h1>{data.post.title}</h1>\n<div>{@html data.post.content}</div>\n\n{#await data.comments}\n\tLoading comments...\n{:then comments}\n\t{#each comments as comment}\n\t\t<p>{comment.content}</p>\n\t{/each}\n{:catch error}\n\t<p>error loading comments: {error.message}</p>\n{/await}\n```\n\n----------------------------------------\n\nTITLE: Loading Data for a Blog Page on the Server\nDESCRIPTION: This code demonstrates how to load data on the server for a blog post using asynchronous operations to fetch necessary data before rendering the page.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/20-core-concepts/10-routing.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/// file: src/routes/blog/[slug]/+page.server.js\n\n// @filename: ambient.d.ts\ndeclare global {\n\tconst getPostFromDatabase: (slug: string) => {\n\t\ttitle: string;\n\t\tcontent: string;\n\t}\n}\n\nexport {};\n\n// @filename: index.js\n// ---cut---\nimport { error } from '@sveltejs/kit';\n\n/** @type {import('./$types').PageServerLoad} */\nexport async function load({ params }) {\n\tconst post = await getPostFromDatabase(params.slug);\n\n\tif (post) {\n\t\treturn post;\n\t}\n\n\terror(404, 'Not found');\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Invalidation with `invalidate` and `depends`\nDESCRIPTION: This JavaScript code demonstrates how to manually invalidate load functions in SvelteKit using `invalidate` and `depends`.  By calling `depends('app:random')`, the load function declares a dependency on the 'app:random' identifier, which can then be invalidated using `invalidate('app:random')`, triggering a rerun of the load function.  This is useful for scenarios where data changes outside of the standard dependency tracking.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/20-core-concepts/20-load.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('./$types').PageLoad} */\nexport async function load({ fetch, depends }) {\n\t// load reruns when `invalidate('https://api.example.com/random-number')` is called...\n\tconst response = await fetch('https://api.example.com/random-number');\n\n\t// ...or when `invalidate('app:random')` is called\n\tdepends('app:random');\n\n\treturn {\n\t\tnumber: await response.json()\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Handle Hook in SvelteKit\nDESCRIPTION: Example of a basic handle hook implementation that can return custom responses for specific URL patterns or modify the default response.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/30-advanced/20-hooks.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('@sveltejs/kit').Handle} */\nexport async function handle({ event, resolve }) {\n\tif (event.url.pathname.startsWith('/custom')) {\n\t\treturn new Response('custom response');\n\t}\n\n\tconst response = await resolve(event);\n\treturn response;\n}\n```\n\n----------------------------------------\n\nTITLE: HandleFetch Hook with Cookie Handling in SvelteKit\nDESCRIPTION: Implementation of handleFetch hook showing how to handle cookies for cross-domain requests.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/30-advanced/20-hooks.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('@sveltejs/kit').HandleFetch} */\nexport async function handleFetch({ event, request, fetch }) {\n\tif (request.url.startsWith('https://api.my-domain.com/')) {\n\t\trequest.headers.set('cookie', event.request.headers.get('cookie'));\n\t}\n\n\treturn fetch(request);\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Form Action Results in Svelte Component\nDESCRIPTION: This snippet demonstrates how to handle form action results in a Svelte component. It shows conditional rendering based on the form submission result and displays validation errors.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/20-core-concepts/30-form-actions.md#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script>\n\t/** @type {import('./$types').PageProps} */\n\tlet { data, form } = $props();\n</script>\n\n{#if form?.success}\n\t<p>Successfully logged in! Welcome back, {data.user.name}</p>\n{/if}\n\n<form method=\"POST\" action=\"?/login\">\n\t{#if form?.missing}<p class=\"error\">The email field is required</p>{/if}\n\t{#if form?.incorrect}<p class=\"error\">Invalid credentials!</p>{/if}\n\t<label>\n\t\tEmail\n\t\t<input name=\"email\" type=\"email\" value={form?.email ?? ''}>\n\t</label>\n\t<label>\n\t\tPassword\n\t\t<input name=\"password\" type=\"password\">\n\t</label>\n\t<button>Log in</button>\n\t<button formaction=\"?/register\">Register</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Using the Authentication Guard in a SvelteKit Load Function\nDESCRIPTION: This JavaScript snippet shows how to use the `requireLogin` function within a SvelteKit `load` function in `+page.server.js`. By calling `requireLogin`, the code guarantees that the user is authenticated before accessing protected resources. If the user is not authenticated, `requireLogin` redirects them to the login page.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/20-core-concepts/20-load.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n\"/// file: +page.server.js\n// @filename: ambient.d.ts\n\ndeclare module '$lib/server/auth' {\n\tinterface User {\n\t\tname: string;\n\t}\n\n\texport function requireLogin(): User;\n}\n\n// @filename: index.ts\n// ---cut---\nimport { requireLogin } from '$lib/server/auth';\n\nexport function load() {\n\tconst user = requireLogin();\n\t// `user` is guaranteed to be a user object here, because otherwise\n\t// `requireLogin` would throw a redirect and we wouldn't get here\n\treturn {\n\t\tmessage: `hello ${user.name}!`\n\t};\n}\"\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Promises in SvelteKit v2 Load Functions\nDESCRIPTION: This example demonstrates how to handle multiple promises in a SvelteKit v2 load function using Promise.all to prevent waterfalls.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/60-appendix/30-migrating-to-sveltekit-2.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('./$types').PageServerLoad} */\nexport async function load({ fetch }) {\n\tconst [a, b] = await Promise.all([\n\t  fetch(url1).then(r => r.json()),\n\t  fetch(url2).then(r => r.json()),\n\t]);\n\treturn { a, b };\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Handle Hook with Transform Options in SvelteKit\nDESCRIPTION: Implementation of handle hook with advanced options including HTML transformation, header filtering, and preload configurations.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/30-advanced/20-hooks.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('@sveltejs/kit').Handle} */\nexport async function handle({ event, resolve }) {\n\tconst response = await resolve(event, {\n\t\ttransformPageChunk: ({ html }) => html.replace('old', 'new'),\n\t\tfilterSerializedResponseHeaders: (name) => name.startsWith('x-'),\n\t\tpreload: ({ type, path }) => type === 'js' || path.includes('/important/')\n\t});\n\n\treturn response;\n}\n```\n\n----------------------------------------\n\nTITLE: Making Fetch Requests in SvelteKit Load Function\nDESCRIPTION: Shows how to make fetch requests within a SvelteKit load function to retrieve data from an API endpoint using the enhanced fetch implementation.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/20-core-concepts/20-load.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('./$types').PageLoad} */\nexport async function load({ fetch, params }) {\n\tconst res = await fetch(`/api/items/${params.id}`);\n\tconst item = await res.json();\n\n\treturn { item };\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming Page Data in Svelte Component\nDESCRIPTION: Shows how to access loaded data in a Svelte page component using the data prop with TypeScript type safety.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/20-core-concepts/20-load.md#2025-04-21_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\t/** @type {import('./$types').PageProps} */\n\tlet { data } = $props();\n</script>\n\n<h1>{data.post.title}</h1>\n<div>{@html data.post.content}</div>\n```\n\n----------------------------------------\n\nTITLE: Parent Data Access in SvelteKit Load Functions\nDESCRIPTION: Demonstrates how to access data from parent load functions using the parent() method across layout and page components.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/20-core-concepts/20-load.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('./$types').LayoutLoad} */\nexport function load() {\n\treturn { a: 1 };\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('./$types').LayoutLoad} */\nexport async function load({ parent }) {\n\tconst { a } = await parent();\n\treturn { b: a + 1 };\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('./$types').PageLoad} */\nexport async function load({ parent }) {\n\tconst { a, b } = await parent();\n\treturn { c: a + b };\n}\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\t/** @type {import('./$types').PageProps} */\n\tlet { data } = $props();\n</script>\n\n<!-- renders `1 + 2 = 3` -->\n<p>{data.a} + {data.b} = {data.c}</p>\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic HTML Form in Svelte\nDESCRIPTION: This snippet demonstrates how to create a basic HTML form in a Svelte component file. The form uses the POST method and includes input fields for email and password.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/20-core-concepts/30-form-actions.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<form method=\"POST\">\n\t<label>\n\t\tEmail\n\t\t<input name=\"email\" type=\"email\">\n\t</label>\n\t<label>\n\t\tPassword\n\t\t<input name=\"password\" type=\"password\">\n\t</label>\n\t<button>Log in</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Express Server with SvelteKit Handler\nDESCRIPTION: This code demonstrates how to create a custom Express server that integrates with SvelteKit. It imports the SvelteKit handler, adds a custom healthcheck route, and then delegates all other requests to SvelteKit while listening on port 3000.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/25-build-and-deploy/40-adapter-node.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// @errors: 2307 7006\n/// file: my-server.js\nimport { handler } from './build/handler.js';\nimport express from 'express';\n\nconst app = express();\n\n// add a route that lives separately from the SvelteKit app\napp.get('/healthcheck', (req, res) => {\n\tres.end('ok');\n});\n\n// let SvelteKit handle everything else, including serving prerendered pages and static assets\napp.use(handler);\n\napp.listen(3000, () => {\n\tconsole.log('listening on port 3000');\n});\n```\n\n----------------------------------------\n\nTITLE: Photo Gallery with Shallow Routing and Data Preloading in SvelteKit\nDESCRIPTION: Shows how to implement a photo gallery with shallow routing, including data preloading for photo details and modal display. Handles various click scenarios and fallback navigation.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/30-advanced/67-shallow-routing.md#2025-04-21_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<!--- file: src/routes/photos/+page.svelte --->\n<script>\n\timport { preloadData, pushState, goto } from '$app/navigation';\n\timport { page } from '$app/state';\n\timport Modal from './Modal.svelte';\n\timport PhotoPage from './[id]/+page.svelte';\n\n\tlet { data } = $props();\n</script>\n\n{#each data.thumbnails as thumbnail}\n\t<a\n\t\thref=\"/photos/{thumbnail.id}\"\n\t\tonclick={async (e) => {\n\t\t\tif (innerWidth < 640        // bail if the screen is too small\n\t\t\t\t|| e.shiftKey             // or the link is opened in a new window\n\t\t\t\t|| e.metaKey || e.ctrlKey // or a new tab (mac: metaKey, win/linux: ctrlKey)\n\t\t\t\t// should also consider clicking with a mouse scroll wheel\n\t\t\t) return;\n\n\t\t\t// prevent navigation\n\t\t\te.preventDefault();\n\n\t\t\tconst { href } = e.currentTarget;\n\n\t\t\t// run `load` functions (or rather, get the result of the `load` functions\n\t\t\t// that are already running because of `data-sveltekit-preload-data`)\n\t\t\tconst result = await preloadData(href);\n\n\t\t\tif (result.type === 'loaded' && result.status === 200) {\n\t\t\t\tpushState(href, { selected: result.data });\n\t\t\t} else {\n\t\t\t\t// something bad happened! try navigating\n\t\t\t\tgoto(href);\n\t\t\t}\n\t\t}}\n\t>\n\t\t<img alt={thumbnail.alt} src={thumbnail.src} />\n\t</a>\n{/each}\n\n{#if page.state.selected}\n\t<Modal onclose={() => history.back()}>\n\t\t<!-- pass page data to the +page.svelte component,\n\t\t     just like SvelteKit would on navigation -->\n\t\t<PhotoPage data={page.state.selected} />\n\t</Modal>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Rest Parameter Route Definition in SvelteKit\nDESCRIPTION: Demonstrates how to define a route with rest parameters for handling unknown number of segments, like GitHub's file viewer implementation.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/30-advanced/10-advanced-routing.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n/[org]/[repo]/tree/[branch]/[...file]\n```\n\n----------------------------------------\n\nTITLE: Server-side Page Data Loading\nDESCRIPTION: Example of a server-side load function that fetches blog post data from a database, running exclusively on the server.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/20-core-concepts/20-load.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as db from '$lib/server/database';\n\n/** @type {import('./$types').PageServerLoad} */\nexport async function load({ params }) {\n\treturn {\n\t\tpost: await db.getPost(params.slug)\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Layout Component in Svelte\nDESCRIPTION: This snippet shows how to define a basic layout component that encompasses shared elements like navigation for all pages under its scope.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/20-core-concepts/10-routing.md#2025-04-21_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<!--- file: src/routes/+layout.svelte --->\n<script>\n\tlet { children } = $props();\n</script>\n\n<nav>\n\t<a href=\"/\">Home</a>\n\t<a href=\"/about\">About</a>\n\t<a href=\"/settings\">Settings</a>\n</nav>\n\n{@render children()}\n```\n\n----------------------------------------\n\nTITLE: Implementing HandleFetch Hook in SvelteKit\nDESCRIPTION: Example of handleFetch hook implementation for modifying fetch requests in load or action functions, including URL transformation.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/30-advanced/20-hooks.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('@sveltejs/kit').HandleFetch} */\nexport async function handleFetch({ request, fetch }) {\n\tif (request.url.startsWith('https://api.yourapp.com/')) {\n\t\trequest = new Request(\n\t\t\trequest.url.replace('https://api.yourapp.com/', 'http://localhost:9999/'),\n\t\t\trequest\n\t\t);\n\t}\n\n\treturn fetch(request);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Data Transportation with SvelteKit Transport\nDESCRIPTION: This JavaScript code snippet demonstrates how to implement custom data transportation using the `transport` hook in SvelteKit. It defines a `Vector` transporter with `encode` and `decode` functions, allowing `Vector` objects to be passed seamlessly between server and client by serializing and deserializing them as arrays of x and y coordinates.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/30-advanced/20-hooks.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n/// file: src/hooks.js\nimport { Vector } from '$lib/math';\n\n/** @type {import('@sveltejs/kit').Transport} */\nexport const transport = {\n\tVector: {\n\t\tencode: (value) => value instanceof Vector && [value.x, value.y],\n\t\tdecode: ([x, y]) => new Vector(x, y)\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Reusable Load Function in SvelteKit Layout\nDESCRIPTION: Example of a load function implementation in a SvelteKit layout that imports and uses a reusable load function. Includes TypeScript type declarations and allows for additional logic implementation.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/30-advanced/10-advanced-routing.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/// file: src/routes/nested/route/+layout.js\n// @filename: ambient.d.ts\ndeclare module \"$lib/reusable-load-function\" {\n\texport function reusableLoad(event: import('@sveltejs/kit').LoadEvent): Promise<Record<string, any>>;\n}\n// @filename: index.js\n// ---cut---\nimport { reusableLoad } from '$lib/reusable-load-function';\n\n/** @type {import('./$types').PageLoad} */\nexport function load(event) {\n\t// Add additional logic here, if needed\n\treturn reusableLoad(event);\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Expected Errors in SvelteKit Page Load\nDESCRIPTION: Demonstrates how to handle expected errors in a page server load function using the SvelteKit error helper. The example shows error handling for a blog post lookup with a 404 response.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/30-advanced/25-errors.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { error } from '@sveltejs/kit';\nimport * as db from '$lib/server/database';\n\n/** @type {import('./$types').PageServerLoad} */\nexport async function load({ params }) {\n    const post = await db.getPost(params.slug);\n\n    if (!post) {\n        error(404, {\n            message: 'Not found'\n        });\n    }\n\n    return { post };\n}\n```\n\n----------------------------------------\n\nTITLE: Layout Component with Loaded Data\nDESCRIPTION: Shows how to use loaded data in a layout component to display a list of blog posts in a sidebar.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/20-core-concepts/20-load.md#2025-04-21_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\t/** @type {import('./$types').LayoutProps} */\n\tlet { data, children } = $props();\n</script>\n\n<main>\n\t{@render children()}\n</main>\n\n<aside>\n\t<h2>More posts</h2>\n\t<ul>\n\t\t{#each data.posts as post}\n\t\t\t<li>\n\t\t\t\t<a href=\"/blog/{post.slug}\">\n\t\t\t\t\t{post.title}\n\t\t\t\t</a>\n\t\t\t</li>\n\t\t{/each}\n\t</ul>\n</aside>\n```\n\n----------------------------------------\n\nTITLE: API Route for Proxying Requests in SvelteKit\nDESCRIPTION: Shows how to create an API route in SvelteKit to proxy requests to an external API server, bypassing CORS issues.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/60-appendix/10-faq.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('./$types').RequestHandler} */\nexport function GET({ params, url }) {\n\treturn fetch(`https://my-api-server.com/${params.path + url.search}`);\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Client-Side Code Execution in SvelteKit\nDESCRIPTION: Illustrates how to run code only on the client-side in SvelteKit using the browser check from the $app/environment module.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/60-appendix/10-faq.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { browser } from '$app/environment';\n\nif (browser) {\n\t// client-only code here\n}\n```\n\n----------------------------------------\n\nTITLE: Server-side Error Handling with Sentry Integration in SvelteKit\nDESCRIPTION: This JavaScript code snippet implements a `handleError` hook in SvelteKit for server-side error handling, integrating with Sentry for error tracking. It captures exceptions, includes additional context data like event and error ID, and returns a user-friendly error object with a message and error ID.  This example assumes that `@sentry/sveltekit` provides `init` and `captureException` methods.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/30-advanced/20-hooks.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/// file: src/hooks.server.js\n// @errors: 2322 2353\n// @filename: ambient.d.ts\ndeclare module '@sentry/sveltekit' {\n\texport const init: (opts: any) => void;\n\texport const captureException: (error: any, opts: any) => void;\n}\n\n// @filename: index.js\n// ---cut---\nimport * as Sentry from '@sentry/sveltekit';\n\nSentry.init({/*...*/})\n\n/** @type {import('@sveltejs/kit').HandleServerError} */\nexport async function handleError({ error, event, status, message }) {\n\tconst errorId = crypto.randomUUID();\n\n\t// example integration with https://sentry.io/\n\tSentry.captureException(error, {\n\t\textra: { event, errorId, status }\n\t});\n\n\treturn {\n\t\tmessage: 'Whoops!',\n\t\terrorId\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Page Title in Svelte Component\nDESCRIPTION: Demonstrates how to set a unique, descriptive title for each page in a SvelteKit application using the <svelte:head> element. This is important for route announcements and SEO.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/40-best-practices/10-accessibility.md#2025-04-21_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<svelte:head>\n\t<title>Todo List</title>\n</svelte:head>\n```\n\n----------------------------------------\n\nTITLE: Correct Reactive Component State\nDESCRIPTION: Shows the proper way to handle reactive values in a component using derived state.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/20-core-concepts/50-state-management.md#2025-04-21_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\t/** @type {import('./$types').PageProps} */\n\tlet { data } = $props();\n\n\tlet wordCount = $derived(data.content.split(' ').length);\n\tlet estimatedReadingTime = $derived(wordCount / 250);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Custom Form Enhancement with Action Results\nDESCRIPTION: Shows how to implement custom form enhancement with action handling and redirection using applyAction.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/20-core-concepts/30-form-actions.md#2025-04-21_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\timport { enhance, applyAction } from '$app/forms';\n\n\t/** @type {import('./$types').PageProps} */\n\tlet { form } = $props();\n</script>\n\n<form\n\tmethod=\"POST\"\n\tuse:enhance={({ formElement, formData, action, cancel }) => {\n\t\treturn async ({ result }) => {\n\t\t\tif (result.type === 'redirect') {\n\t\t\t\tgoto(result.location);\n\t\t\t} else {\n\t\t\t\tawait applyAction(result);\n\t\t\t}\n\t\t};\n\t}}\n>\n```\n\n----------------------------------------\n\nTITLE: Implementing View Transitions in SvelteKit\nDESCRIPTION: Shows how to use the view transitions API with SvelteKit by utilizing the onNavigate function and document.startViewTransition method.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/60-appendix/10-faq.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { onNavigate } from '$app/navigation';\n\nonNavigate((navigation) => {\n\tif (!document.startViewTransition) return;\n\n\treturn new Promise((resolve) => {\n\t\tdocument.startViewTransition(async () => {\n\t\t\tresolve();\n\t\t\tawait navigation.complete;\n\t\t});\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Rerunning Layout Load Functions with Database Dependencies\nDESCRIPTION: This Javascript code shows another `load` function which returns data from a database. This is a layout load function, and will not rerun on navigation between different slugs, because the data is still valid. This avoid unnecessary data fetching from the database and improves performance.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/20-core-concepts/20-load.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as db from '$lib/server/database';\n\n/** @type {import('./$types').LayoutServerLoad} */\nexport async function load() {\n\treturn {\n\t\tposts: await db.getPostSummaries()\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing URL Rerouting with translated paths in SvelteKit\nDESCRIPTION: This JavaScript code snippet shows how to use the `reroute` hook in SvelteKit to translate URLs into different routes, allowing for internationalization or custom URL schemes.  It uses a `translated` object as a lookup table to map incoming URLs to their corresponding internal routes. This rerouting is done on both the server and client.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/30-advanced/20-hooks.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n/// file: src/hooks.js\n// @errors: 2345\n// @errors: 2304\n\n/** @type {Record<string, string>} */\nconst translated = {\n\t'/en/about': '/en/about',\n\t'/de/ueber-uns': '/de/about',\n\t'/fr/a-propos': '/fr/about',\n};\n\n/** @type {import('@sveltejs/kit').Reroute} */\nexport function reroute({ url }) {\n\tif (url.pathname in translated) {\n\t\treturn translated[url.pathname];\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Focus Management in SvelteKit\nDESCRIPTION: Shows how to use the afterNavigate hook to implement custom focus management after navigation in a SvelteKit application. This example focuses on an element with the class 'focus-me'.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/40-best-practices/10-accessibility.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { afterNavigate } from '$app/navigation';\n\nafterNavigate(() => {\n\t/** @type {HTMLElement | null} */\n\tconst to_focus = document.querySelector('.focus-me');\n\tto_focus?.focus();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring SvelteKit Adapter for Cloudflare\nDESCRIPTION: Configuration setup for adapter-cloudflare in svelte.config.js, including available options for customizing the deployment behavior.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/25-build-and-deploy/60-adapter-cloudflare.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport adapter from '@sveltejs/adapter-cloudflare';\n\nexport default {\n\tkit: {\n\t\tadapter: adapter({\n\t\t\t// See below for an explanation of these options\n\t\t\tconfig: undefined,\n\t\t\tplatformProxy: {\n\t\t\t\tconfigPath: undefined,\n\t\t\t\tenvironment: undefined,\n\t\t\t\tpersist: undefined\n\t\t\t},\n\t\t\tfallback: 'plaintext',\n\t\t\troutes: {\n\t\t\t\tinclude: ['/*'],\n\t\t\t\texclude: ['<all>']\n\t\t\t}\n\t\t})\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Promise Rejections in SvelteKit Load Function\nDESCRIPTION: This JavaScript code shows how to handle promise rejections in a SvelteKit server load function. By attaching a `catch` block to rejected promises, the code prevents the server from crashing due to unhandled promise rejections, particularly important for lazy-loaded promises. SvelteKit automatically handles rejections from `fetch` calls.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/20-core-concepts/20-load.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('./$types').PageServerLoad} */\nexport function load({ fetch }) {\n\tconst ok_manual = Promise.reject();\n\tok_manual.catch(() => {});\n\n\treturn {\n\t\tok_manual,\n\t\tok_fetch: fetch('/fetch/that/could/fail'),\n\t\tdangerous_unhandled: Promise.reject()\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Rerunning Load Functions with Database Dependencies\nDESCRIPTION: This JavaScript code demonstrates how SvelteKit tracks dependencies to avoid unnecessary rerunning of load functions. The `load` function in `+page.server.js` depends on `params.slug`, while the one in `+layout.server.js` does not, so only the former will rerun upon navigating to a different slug. This optimizes data fetching and improves performance.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/20-core-concepts/20-load.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as db from '$lib/server/database';\n\n/** @type {import('./$types').PageServerLoad} */\nexport async function load({ params }) {\n\treturn {\n\t\tpost: await db.getPost(params.slug)\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Development Environment Service Worker Registration\nDESCRIPTION: Code snippet showing how to register a service worker during development with module support checking. Includes environment-specific configuration.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/30-advanced/40-service-workers.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { dev } from '$app/environment';\n\nnavigator.serviceWorker.register('/service-worker.js', {\n\ttype: dev ? 'module' : 'classic'\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Fallback Method Handler in SvelteKit\nDESCRIPTION: This snippet demonstrates how to create a fallback method handler in SvelteKit using the `+server.js` file. It catches any unhandled HTTP methods (PUT, PATCH, DELETE, etc.) and returns a text response indicating the method that was used.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/20-core-concepts/10-routing.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n/// file: src/routes/api/add/+server.js\nimport { json, text } from '@sveltejs/kit';\n\n/** @type {import('./$types').RequestHandler} */\nexport async function POST({ request }) {\n\tconst { a, b } = await request.json();\n\treturn json(a + b);\n}\n\n// This handler will respond to PUT, PATCH, DELETE, etc.\n/** @type {import('./$types').RequestHandler} */\nexport async function fallback({ request }) {\n\treturn text(`I caught your ${request.method} request!`);\n}\n```\n\n----------------------------------------\n\nTITLE: Receiving Data in a Dynamic Blog Page Component in Svelte\nDESCRIPTION: This Svelte component dynamically renders blog posts based on the parameters from the route. It receives data through the props for display.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/20-core-concepts/10-routing.md#2025-04-21_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<!--- file: src/routes/blog/[slug]/+page.svelte --->\n<script>\n\t/** @type {import('./$types').PageProps} */\n\tlet { data } = $props();\n</script>\n\n<h1>{data.title}</h1>\n<div>{@html data.content}</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring adapter-static in SvelteKit\nDESCRIPTION: Basic configuration setup for adapter-static in svelte.config.js showing default options including pages, assets, fallback, precompress and strict settings.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/25-build-and-deploy/50-adapter-static.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// @errors: 2307\n/// file: svelte.config.js\nimport adapter from '@sveltejs/adapter-static';\n\nexport default {\n\tkit: {\n\t\tadapter: adapter({\n\t\t\t// default options are shown. On some platforms\n\t\t\t// these options are set automatically — see below\n\t\t\tpages: 'build',\n\t\t\tassets: 'build',\n\t\t\tfallback: undefined,\n\t\t\tprecompress: false,\n\t\t\tstrict: true\n\t\t})\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring SvelteKit Adapter in Config File\nDESCRIPTION: Example configuration for setting up a SvelteKit adapter in svelte.config.js. Shows how to import and configure an adapter with custom options, including TypeScript type definitions for proper type checking.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/25-build-and-deploy/20-adapters.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport adapter from 'svelte-adapter-foo';\n\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n\tkit: {\n\t\tadapter: adapter({\n\t\t\t// adapter options go here\n\t\t})\n\t}\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Creating a GET API Route in SvelteKit\nDESCRIPTION: This snippet demonstrates how to create a GET API route in SvelteKit using the +server.js file. It shows how to extract query parameters from the URL, perform a simple calculation, and return the result as a response.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/20-core-concepts/10-routing.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/// file: src/routes/api/random-number/+server.js\nimport { error } from '@sveltejs/kit';\n\n/** @type {import('./$types').RequestHandler} */\nexport function GET({ url }) {\n\tconst min = Number(url.searchParams.get('min') ?? '0');\n\tconst max = Number(url.searchParams.get('max') ?? '1');\n\n\tconst d = max - min;\n\n\tif (isNaN(d) || d < 0) {\n\t\terror(400, 'min and max must be numbers, and min must be less than max');\n\t}\n\n\tconst random = min + Math.random() * d;\n\n\treturn new Response(String(random));\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Headers in SvelteKit Server Route\nDESCRIPTION: Demonstrates working with request and response headers in a SvelteKit server route. Shows how to log incoming headers and create a JSON response with custom headers using the Headers API.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/10-getting-started/40-web-standards.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { json } from '@sveltejs/kit';\n\n/** @type {import('./$types').RequestHandler} */\nexport function GET({ request }) {\n\t// log all headers\n\tconsole.log(...request.headers);\n\n\t// create a JSON Response using a header we received\n\treturn json({\n\t\t// retrieve a specific header\n\t\tuserAgent: request.headers.get('user-agent')\n\t}, {\n\t\t// set a header on the response\n\t\theaders: { 'x-custom-header': 'potato' }\n\t});\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Prerendering for Specific Pages in SvelteKit\nDESCRIPTION: This code snippet demonstrates how to enable both prerendering and server-side rendering for specific pages in a SvelteKit app that is otherwise configured as a client-side SPA.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/25-build-and-deploy/55-single-page-apps.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport const prerender = true;\nexport const ssr = true;\n```\n\n----------------------------------------\n\nTITLE: Untracking Dependencies in SvelteKit Load Function\nDESCRIPTION: This JavaScript code demonstrates how to use the `untrack` function in a SvelteKit load function to exclude a dependency from the dependency tracking mechanism. In this example, changes to `url.pathname` will not trigger a rerun of the load function, providing a way to manually control when a load function is re-executed.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/20-core-concepts/20-load.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('./$types').PageLoad} */\nexport async function load({ untrack, url }) {\n\t// Untrack url.pathname so that path changes don't trigger a rerun\n\tif (untrack(() => url.pathname === '/')) {\n\t\treturn { message: 'Welcome!' };\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Simplified Error Creation in SvelteKit\nDESCRIPTION: Shows the simplified syntax for creating error objects with just a status code and message string.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/30-advanced/25-errors.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nerror(404, 'Not found');\n```\n\n----------------------------------------\n\nTITLE: Configuring Runtime Settings in SvelteKit\nDESCRIPTION: This snippet shows how to define runtime configuration at the page level in a SvelteKit application using a `Config` interface imported from an adapter. The `runtime` is set to 'edge', which is suitable for performance optimizations. Page-specific configurations override global settings from layout files, and configurations are merged at the top level.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/20-core-concepts/40-page-options.md#2025-04-21_snippet_9\n\nLANGUAGE: js\nCODE:\n```\n// @filename: ambient.d.ts\ndeclare module 'some-adapter' {\n\texport interface Config { runtime: string }\n}\n\n// @filename: index.js\n// ---cut---\n/// file: src/routes/+page.js\n/** @type {import('some-adapter').Config} */\nexport const config = {\n\truntime: 'edge'\n};\n```\n\n----------------------------------------\n\nTITLE: Svelte Component for Sending Data to API Route\nDESCRIPTION: This Svelte component demonstrates how to send data to an API route using the `fetch` API. It defines input fields for two numbers, a and b, and a button that triggers a POST request to the `/api/add` endpoint with a JSON payload containing the values of a and b. The response from the API is then displayed as the total.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/20-core-concepts/10-routing.md#2025-04-21_snippet_9\n\nLANGUAGE: svelte\nCODE:\n```\n<!--- file: src/routes/add/+page.svelte --->\n<script>\n\tlet a = 0;\n\tlet b = 0;\n\tlet total = 0;\n\n\tasync function add() {\n\t\tconst response = await fetch('/api/add', {\n\t\t\tmethod: 'POST',\n\t\t\tbody: JSON.stringify({ a, b }),\n\t\t\theaders: {\n\t\t\t\t'content-type': 'application/json'\n\t\t\t}\n\t\t});\n\n\t\ttotal = await response.json();\n\t}\n</script>\n\n<input type=\"number\" bind:value={a}> +\n<input type=\"number\" bind:value={b}> =\n{total}\n\n<button onclick={add}>Calculate</button>\n```\n\n----------------------------------------\n\nTITLE: Server-side Language Attribute Handling in SvelteKit\nDESCRIPTION: Implements server-side handling of the dynamic 'lang' attribute using SvelteKit's handle hook. This replaces the '%lang%' placeholder in the HTML template with the appropriate language code.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/40-best-practices/10-accessibility.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @param {import('@sveltejs/kit').RequestEvent} event\n */\nfunction get_lang(event) {\n\treturn 'en';\n}\n\n/** @type {import('@sveltejs/kit').Handle} */\nexport function handle({ event, resolve }) {\n\treturn resolve(event, {\n\t\ttransformPageChunk: ({ html }) => html.replace('%lang%', get_lang(event))\n\t});\n}\n```\n\n----------------------------------------\n\nTITLE: Wrangler Configuration for Cloudflare Workers\nDESCRIPTION: Basic Wrangler configuration file setup for Cloudflare Workers deployment, specifying the worker name, entry point, and asset bindings.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/25-build-and-deploy/60-adapter-cloudflare.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"name\": \"<any-name-you-want>\",\n\t\"main\": \".svelte-kit/cloudflare/_worker.js\",\n\t\"compatibility_date\": \"2025-01-01\",\n\t\"assets\": {\n\t\t\"binding\": \"ASSETS\",\n\t\t\"directory\": \".svelte-kit/cloudflare\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic XML Sitemap in SvelteKit\nDESCRIPTION: Server endpoint that generates a dynamic XML sitemap with proper content type headers and XML namespace declarations for various sitemap extensions.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/40-best-practices/20-seo.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function GET() {\n\treturn new Response(\n\t\t`\n\t\t<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n\t\t<urlset\n\t\t\txmlns=\"https://www.sitemaps.org/schemas/sitemap/0.9\"\n\t\t\txmlns:xhtml=\"https://www.w3.org/1999/xhtml\"\n\t\t\txmlns:mobile=\"https://www.google.com/schemas/sitemap-mobile/1.0\"\n\t\t\txmlns:news=\"https://www.google.com/schemas/sitemap-news/0.9\"\n\t\t\txmlns:image=\"https://www.google.com/schemas/sitemap-image/1.1\"\n\t\t\txmlns:video=\"https://www.google.com/schemas/sitemap-video/1.1\"\n\t\t>\n\t\t\t<!-- <url> elements go here -->\n\t\t</urlset>`.trim(),\n\t\t{\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/xml'\n\t\t\t}\n\t\t}\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Generated Types in SvelteKit Server Endpoint\nDESCRIPTION: Shows how to use the auto-generated types in a server endpoint file. By importing from the $types module, developers get proper typing for route parameters without having to manually define them.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/98-reference/54-types.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('./$types').RequestHandler} */\nexport async function GET({ params }) {\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Named Actions in Svelte Form\nDESCRIPTION: This snippet demonstrates how to use named actions in a Svelte form. It shows the usage of the action attribute with a query parameter to specify the named action, and the formaction attribute for an alternative action.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/20-core-concepts/30-form-actions.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<form method=\"POST\" action=\"?/login\">\n\t<label>\n\t\tEmail\n\t\t<input name=\"email\" type=\"email\">\n\t</label>\n\t<label>\n\t\tPassword\n\t\t<input name=\"password\" type=\"password\">\n\t</label>\n\t<button>Log in</button>\n\t<button formaction=\"?/register\">Register</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Context-Based State Management in Layout\nDESCRIPTION: Shows how to use Svelte's context API to manage state in a layout component.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/20-core-concepts/50-state-management.md#2025-04-21_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\timport { setContext } from 'svelte';\n\n\t/** @type {import('./$types').LayoutProps} */\n\tlet { data } = $props();\n\n\t// Pass a function referencing our state\n\t// to the context for child components to access\n\tsetContext('user', () => data.user);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Parameters in SvelteKit Load Function\nDESCRIPTION: Demonstrates how to access and use route parameters in a SvelteKit page load function, showing the relationship between route.id and the resulting params object.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/20-core-concepts/20-load.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('./$types').PageLoad} */\nexport function load({ route }) {\n\tconsole.log(route.id); // '/a/[b]/[...c]'\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"b\": \"x\",\n\t\"c\": \"y/z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Language Attribute in SvelteKit HTML Template\nDESCRIPTION: Shows how to set up a dynamic 'lang' attribute in the HTML template (app.html) for a multi-language SvelteKit application. This uses a placeholder that will be replaced server-side.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/40-best-practices/10-accessibility.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<html lang=\"%lang%\">\n```\n\n----------------------------------------\n\nTITLE: Apache .htaccess Configuration for SPA Routing\nDESCRIPTION: This code snippet shows the Apache .htaccess configuration required to properly route requests in a single-page application. It ensures that all requests are directed to the fallback page when no matching file or directory is found.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/25-build-and-deploy/55-single-page-apps.md#2025-04-21_snippet_2\n\nLANGUAGE: apache\nCODE:\n```\n<IfModule mod_rewrite.c>\n\tRewriteEngine On\n\tRewriteBase /\n\tRewriteRule ^200\\.html$ - [L]\n\tRewriteCond %{REQUEST_FILENAME} !-f\n\tRewriteCond %{REQUEST_FILENAME} !-d\n\tRewriteRule . /200.html [L]\n</IfModule>\n```\n\n----------------------------------------\n\nTITLE: Conditional Build-time Code Execution in SvelteKit\nDESCRIPTION: Demonstrates how to conditionally execute code during runtime while preventing execution during the build process using the 'building' environment variable from $app/environment. This pattern is useful for operations that should only run in the actual runtime environment, like database setup.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/25-build-and-deploy/10-building-your-app.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { building } from '$app/environment';\nimport { setupMyDatabase } from '$lib/server/database';\n\nif (!building) {\n\tsetupMyDatabase();\n}\n\nexport function load() {\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using PageProps Type in SvelteKit Page Component (v2.16.0+)\nDESCRIPTION: Shows how to use the PageProps helper type in a Svelte component with $props(). This provides typing for both data (from load functions) and form (from actions) properties.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/98-reference/54-types.md#2025-04-21_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\t/** @type {import('./$types').PageProps} */\n\tlet { data, form } = $props();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Default Preload Data Configuration in HTML Body\nDESCRIPTION: Default configuration for preloading data on hover by adding the data-sveltekit-preload-data attribute to the body element in src/app.html\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/30-advanced/30-link-options.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<body data-sveltekit-preload-data=\"hover\">\n\t<div style=\"display: contents\">%sveltekit.body%</div>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Prerendering with Data Fetching in SvelteKit\nDESCRIPTION: Example showing how to fetch data during prerendering and how prerender settings cascade to server routes.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/20-core-concepts/40-page-options.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport const prerender = true;\n\n/** @type {import('./$types').PageLoad} */\nexport async function load({ fetch }) {\n\tconst res = await fetch('/my-server-route.json');\n\treturn await res.json();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code Launch Settings for SvelteKit Debugging\nDESCRIPTION: Configuration file for VS Code that enables breakpoint debugging in a SvelteKit development environment. Sets up a launch configuration to run the development server with debugging capabilities.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/60-appendix/25-debugging.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"version\": \"0.2.0\",\n\t\"configurations\": [\n\t\t{\n\t\t\t\"command\": \"npm run dev\",\n\t\t\t\"name\": \"Run development server\",\n\t\t\t\"request\": \"launch\",\n\t\t\t\"type\": \"node-terminal\"\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Platform Types Configuration\nDESCRIPTION: TypeScript type declarations for Cloudflare platform features in SvelteKit's app.d.ts file.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/25-build-and-deploy/60-adapter-cloudflare.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { KVNamespace, DurableObjectNamespace } from '@cloudflare/workers-types';\n\ndeclare global {\n\tnamespace App {\n\t\tinterface Platform {\n\t\t\tenv?: {\n\t\t\t\tYOUR_KV_NAMESPACE: KVNamespace;\n\t\t\t\tYOUR_DURABLE_OBJECT_NAMESPACE: DurableObjectNamespace;\n\t\t\t};\n\t\t}\n\t}\n}\n\nexport {};\n```\n\n----------------------------------------\n\nTITLE: Custom Form Event Handler Implementation\nDESCRIPTION: Demonstrates a manual implementation of form submission handling without use:enhance, including fetch and response processing.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/20-core-concepts/30-form-actions.md#2025-04-21_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\timport { invalidateAll, goto } from '$app/navigation';\n\timport { applyAction, deserialize } from '$app/forms';\n\n\t/** @type {import('./$types').PageProps} */\n\tlet { form } = $props();\n\n\t/** @param {SubmitEvent & { currentTarget: EventTarget & HTMLFormElement}} event */\n\tasync function handleSubmit(event) {\n\t\tevent.preventDefault();\n\t\tconst data = new FormData(event.currentTarget);\n\n\t\tconst response = await fetch(event.currentTarget.action, {\n\t\t\tmethod: 'POST',\n\t\t\tbody: data\n\t\t});\n\n\t\t/** @type {import('@sveltejs/kit').ActionResult} */\n\t\tconst result = deserialize(await response.text());\n\n\t\tif (result.type === 'success') {\n\t\t\t// rerun all `load` functions, following the successful update\n\t\t\tawait invalidateAll();\n\t\t}\n\n\t\tapplyAction(result);\n\t}\n</script>\n\n<form method=\"POST\" onsubmit={handleSubmit}>\n\t<!-- content -->\n</form>\n```\n\n----------------------------------------\n\nTITLE: Configuring SvelteKit Node Adapter\nDESCRIPTION: Basic configuration for adding adapter-node to a SvelteKit project in svelte.config.js. Sets up the necessary adapter configuration for building a standalone Node server.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/25-build-and-deploy/40-adapter-node.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport adapter from '@sveltejs/adapter-node';\n\nexport default {\n\tkit: {\n\t\tadapter: adapter()\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: Loading Data for a Dynamic Blog Page in JavaScript\nDESCRIPTION: This JavaScript module exports a load function that fetches data based on the blog post slug parameter. It provides the data for rendering the associated Svelte component.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/20-core-concepts/10-routing.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/// file: src/routes/blog/[slug]/+page.js\nimport { error } from '@sveltejs/kit';\n\n/** @type {import('./$types').PageLoad} */\nexport function load({ params }) {\n\tif (params.slug === 'hello-world') {\n\t\treturn {\n\t\t\ttitle: 'Hello world!',\n\t\t\tcontent: 'Welcome to our blog. Lorem ipsum dolor sit amet...'\n\t\t};\n\t}\n\n\terror(404, 'Not found');\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Initializing SvelteKit Application with sv CLI\nDESCRIPTION: Series of commands to create a new SvelteKit application, install dependencies, and start the development server. Uses the sv CLI tool for project scaffolding.\nSOURCE: https://github.com/sveltejs/kit/blob/main/packages/kit/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx sv create my-app\ncd my-app\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Loading Data in a Layout Component in JavaScript\nDESCRIPTION: This code defines a JavaScript module that exports a load function for a layout, which provides data required for rendering child pages.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/20-core-concepts/10-routing.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/// file: src/routes/settings/+layout.js\n/** @type {import('./$types').LayoutLoad} */\nexport function load() {\n\treturn {\n\t\tsections: [\n\t\t\t{ slug: 'profile', title: 'Profile' },\n\t\t\t{ slug: 'notifications', title: 'Notifications' }\n\t\t]\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: SvelteKit Generated Type Definition Example\nDESCRIPTION: Shows an auto-generated TypeScript definition file for route parameters. SvelteKit creates these files to provide type safety for route parameters without manual type declarations.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/98-reference/54-types.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type * as Kit from '@sveltejs/kit';\n\ntype RouteParams = {\n\tfoo: string;\n\tbar: string;\n\tbaz: string;\n};\n\nexport type RequestHandler = Kit.RequestHandler<RouteParams>;\nexport type PageLoad = Kit.Load<RouteParams>;\n```\n\n----------------------------------------\n\nTITLE: Processing FormData in SvelteKit POST Handler\nDESCRIPTION: Shows how to handle form submissions by processing FormData objects in a SvelteKit POST request handler. Demonstrates logging form fields and accessing specific form values.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/10-getting-started/40-web-standards.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { json } from '@sveltejs/kit';\n\n/** @type {import('./$types').RequestHandler} */\nexport async function POST(event) {\n\tconst body = await event.request.formData();\n\n\t// log all fields\n\tconsole.log([...body]);\n\n\treturn json({\n\t\t// get a specific field's value\n\t\tname: body.get('name') ?? 'world'\n\t});\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced SvelteKit Node Adapter Configuration\nDESCRIPTION: Extended configuration options for adapter-node including output directory, precompression, and environment variable prefix customization.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/25-build-and-deploy/40-adapter-node.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport adapter from '@sveltejs/adapter-node';\n\nexport default {\n\tkit: {\n\t\tadapter: adapter({\n\t\t\t// default options are shown\n\t\t\tout: 'build',\n\t\t\tprecompress: true,\n\t\t\tenvPrefix: ''\n\t\t})\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: Typing RequestHandler with Params in SvelteKit Server Endpoint\nDESCRIPTION: Demonstrates manually typing a RequestHandler in a SvelteKit server endpoint file to specify route parameters. This example shows how to explicitly define param types, but notes this approach is cumbersome and less maintainable.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/98-reference/54-types.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('@sveltejs/kit').RequestHandler<{\n    foo: string;\n    bar: string;\n    baz: string\n  }>} */\nexport async function GET({ params }) {\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Running a Svelte App with sv in Bash\nDESCRIPTION: This snippet demonstrates how to initialize a new Svelte application using the sv package, install dependencies, and run the development server. It requires Node.js and npm to be installed on the system. The commands need to be executed in a terminal. The inputs include the app name, `my-app`, and outputs involve setting up a complete Svelte development environment in the specified directory.\nSOURCE: https://github.com/sveltejs/kit/blob/main/packages/package/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm sv create my-app\ncd my-app\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Setting Cookies with Required Path in SvelteKit v2\nDESCRIPTION: SvelteKit v2 requires specifying a path when setting cookies to avoid ambiguity. This example shows how to set a cookie with a path of '/'.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/60-appendix/30-migrating-to-sveltekit-2.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('./$types').PageServerLoad} */\nexport function load({ cookies }) {\n\tcookies.set(name, value, { path: '/' });\n\treturn { response }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an About Page Component in Svelte\nDESCRIPTION: This snippet defines an about page in Svelte, providing basic information about the site along with a link back to the home page.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/20-core-concepts/10-routing.md#2025-04-21_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<!--- file: src/routes/about/+page.svelte --->\n<h1>About this site</h1>\n<p>TODO...</p>\n<a href=\"/\">Home</a>\n```\n\n----------------------------------------\n\nTITLE: Error Handling in SvelteKit Load Function\nDESCRIPTION: Shows how to handle errors in load functions using the error helper for expected errors with status codes and messages.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/20-core-concepts/20-load.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { error } from '@sveltejs/kit';\n\n/** @type {import('./$types').LayoutServerLoad} */\nexport function load({ locals }) {\n\tif (!locals.user) {\n\t\terror(401, 'not logged in');\n\t}\n\n\tif (!locals.user.isAdmin) {\n\t\terror(403, 'not an admin');\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Prerender Option in SvelteKit\nDESCRIPTION: Demonstrates how to enable prerendering for a route by exporting a prerender constant. This can be used in page or server files to generate static HTML at build time.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/20-core-concepts/40-page-options.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const prerender = true;\n```\n\n----------------------------------------\n\nTITLE: Defining User Interface and App Locals in TypeScript\nDESCRIPTION: This snippet defines a User interface and extends the App.Locals interface in TypeScript to include an optional user property. This is used for type safety when accessing user information within the SvelteKit application's server-side logic.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/20-core-concepts/20-load.md#2025-04-21_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @filename: ambient.d.ts\ninterface User {\n\tname: string;\n}\n\ndeclare namespace App {\n\tinterface Locals {\n\t\tuser?: User;\n\t}\n}\"\n```\n\n----------------------------------------\n\nTITLE: Starting Node Server with Dotenv\nDESCRIPTION: Commands for starting the Node server with environment variables loaded from .env files using dotenv configuration.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/25-build-and-deploy/40-adapter-node.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnode -r dotenv/config build\n```\n\n----------------------------------------\n\nTITLE: Generating UUIDs with Web Crypto API\nDESCRIPTION: Demonstrates how to generate UUIDs using the Web Crypto API's randomUUID method in SvelteKit applications.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/10-getting-started/40-web-standards.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst uuid = crypto.randomUUID();\n```\n\n----------------------------------------\n\nTITLE: Displaying Page Slug in Uppercase\nDESCRIPTION: Imports the page store from SvelteKit and uses the slug parameter to render a heading with the uppercase slug value\nSOURCE: https://github.com/sveltejs/kit/blob/main/packages/kit/test/apps/options/source/pages/custom-extensions/[slug]/+page.svelte.md#2025-04-21_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>import { page } from '$app/state';</script>\n\n<h2>{page.params.slug.toUpperCase()}</h2>\n```\n\n----------------------------------------\n\nTITLE: Layout Data Loading with Server Function\nDESCRIPTION: Demonstrates loading shared data in a layout component using a server-side load function to fetch blog post summaries.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/20-core-concepts/20-load.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as db from '$lib/server/database';\n\n/** @type {import('./$types').LayoutServerLoad} */\nexport async function load() {\n\treturn {\n\t\tposts: await db.getPostSummaries()\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Server-Side Rendering in SvelteKit\nDESCRIPTION: Demonstrates how to disable server-side rendering for client-only pages by setting the ssr option to false.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/20-core-concepts/40-page-options.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport const ssr = false;\n// If both `ssr` and `csr` are `false`, nothing will be rendered!\n```\n\n----------------------------------------\n\nTITLE: Wrangler Configuration for Cloudflare Workers\nDESCRIPTION: This JSON configuration file (wrangler.jsonc) sets up the necessary parameters for deploying a SvelteKit app to Cloudflare Workers. It includes service name, account ID, main script, site bucket, build command, and compatibility date.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/25-build-and-deploy/70-adapter-cloudflare-workers.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n/// file: wrangler.jsonc\n{\n\t\"name\": \"<your-service-name>\",\n\t\"account_id\": \"<your-account-id>\",\n\t\"main\": \"./.cloudflare/worker.js\",\n\t\"site\": {\n\t\t\"bucket\": \"./.cloudflare/public\"\n\t},\n\t\"build\": {\n\t\t\"command\": \"npm run build\"\n\t},\n\t\"compatibility_date\": \"2021-11-12\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SvelteKit Adapter for Cloudflare Workers\nDESCRIPTION: This snippet demonstrates how to set up the Cloudflare Workers adapter in the svelte.config.js file. It imports the adapter and configures it in the kit options.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/25-build-and-deploy/70-adapter-cloudflare-workers.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// @errors: 2307\n/// file: svelte.config.js\nimport adapter from '@sveltejs/adapter-cloudflare-workers';\n\nexport default {\n\tkit: {\n\t\tadapter: adapter({\n\t\t\t// see below for options that can be set here\n\t\t})\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: Using URLSearchParams in SvelteKit\nDESCRIPTION: Example of accessing URL query parameters using the URLSearchParams API in SvelteKit applications.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/10-getting-started/40-web-standards.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst foo = url.searchParams.get('foo');\n```\n\n----------------------------------------\n\nTITLE: Importing from SvelteKit Library Directory\nDESCRIPTION: Demonstrates the usage of $lib alias which points to src/lib directory (or configured directory) for cleaner imports of common components and utilities.\nSOURCE: https://github.com/sveltejs/kit/blob/main/packages/kit/src/types/synthetic/$lib.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n$lib\n```\n\n----------------------------------------\n\nTITLE: Registering Service Worker in SvelteKit\nDESCRIPTION: Basic code snippet showing how to register a service worker in a SvelteKit application. This is the default registration pattern used by SvelteKit when automatic registration is enabled.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/30-advanced/40-service-workers.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif ('serviceWorker' in navigator) {\n\taddEventListener('load', function () {\n\t\tnavigator.serviceWorker.register('./path/to/service-worker.js');\n\t});\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring vitePreprocess for SvelteKit\nDESCRIPTION: Configuration example showing how to set up vitePreprocess in a SvelteKit project to enable support for various CSS preprocessors and TypeScript. vitePreprocess is included by default in TypeScript projects.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/60-appendix/20-integrations.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// svelte.config.js\nimport { vitePreprocess } from '@sveltejs/vite-plugin-svelte';\n\nexport default {\n  preprocess: [vitePreprocess()]\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring SvelteKit Netlify Adapter\nDESCRIPTION: Basic configuration for @sveltejs/adapter-netlify showing default options including edge and split functionality settings.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/25-build-and-deploy/80-adapter-netlify.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// @errors: 2307\n/// file: svelte.config.js\nimport adapter from '@sveltejs/adapter-netlify';\n\nexport default {\n\tkit: {\n\t\t// default options are shown\n\t\tadapter: adapter({\n\t\t\t// if true, will create a Netlify Edge Function rather\n\t\t\t// than using standard Node-based functions\n\t\t\tedge: false,\n\n\t\t\t// if true, will split your app into multiple functions\n\t\t\t// instead of creating a single one for the entire app.\n\t\t\t// if `edge` is true, this option cannot be used\n\t\t\tsplit: false\n\t\t})\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: Route Matcher Implementation\nDESCRIPTION: Example of implementing a parameter matcher to validate route parameters against allowed values.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/30-advanced/10-advanced-routing.md#2025-04-21_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n/**\n * @param {string} param\n * @return {param is ('apple' | 'orange')}\n * @satisfies {import('@sveltejs/kit').ParamMatcher}\n */\nexport function match(param) {\n\treturn param === 'apple' || param === 'orange';\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Load Function Implementation\nDESCRIPTION: Demonstrates the proper way to handle data in a load function by returning it instead of modifying global state.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/20-core-concepts/50-state-management.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('./$types').PageServerLoad} */\nexport async function load({ fetch }) {\n\tconst response = await fetch('/api/user');\n\n\treturn {\n\t\tuser: await response.json()\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Structure\nDESCRIPTION: Structured markdown documentation explaining SvelteKit and Svelte fundamentals, including their relationship, features, and development benefits.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/10-getting-started/10-introduction.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Introduction\n---\n\n## Before we begin\n\n> [!NOTE] If you're new to Svelte or SvelteKit we recommend checking out the [interactive tutorial](/tutorial/kit).\n>\n> If you get stuck, reach out for help in the [Discord chatroom](/chat).\n\n## What is SvelteKit?\n\nSvelteKit is a framework for rapidly developing robust, performant web applications using [Svelte](../svelte). If you're coming from React, SvelteKit is similar to Next. If you're coming from Vue, SvelteKit is similar to Nuxt.\n\nTo learn more about the kinds of applications you can build with SvelteKit, see the [documentation regarding project types](project-types).\n\n## What is Svelte?\n\nIn short, Svelte is a way of writing user interface components — like a navigation bar, comment section, or contact form — that users see and interact with in their browsers. The Svelte compiler converts your components to JavaScript that can be run to render the HTML for the page and to CSS that styles the page. You don't need to know Svelte to understand the rest of this guide, but it will help. If you'd like to learn more, check out [the Svelte tutorial](/tutorial).\n\n## SvelteKit vs Svelte\n\nSvelte renders UI components. You can compose these components and render an entire page with just Svelte, but you need more than just Svelte to write an entire app.\n\nSvelteKit helps you build web apps while following modern best practices and providing solutions to common development challenges. It offers everything from basic functionalities — like a [router](glossary#Routing) that updates your UI when a link is clicked — to more advanced capabilities. Its extensive list of features includes [build optimizations](https://vitejs.dev/guide/features.html#build-optimizations) to load only the minimal required code; [offline support](service-workers); [preloading](link-options#data-sveltekit-preload-data) pages before user navigation; [configurable rendering](page-options) to handle different parts of your app on the server via [SSR](glossary#SSR), in the browser through [client-side rendering](glossary#CSR), or at build-time with [prerendering](glossary#Prerendering); [image optimization](images); and much more. Building an app with all the modern best practices is fiendishly complicated, but SvelteKit does all the boring stuff for you so that you can get on with the creative part.\n\nIt reflects changes to your code in the browser instantly to provide a lightning-fast and feature-rich development experience by leveraging [Vite](https://vitejs.dev/) with a [Svelte plugin](https://github.com/sveltejs/vite-plugin-svelte) to do [Hot Module Replacement (HMR)](https://github.com/sveltejs/vite-plugin-svelte/blob/main/docs/config.md#hot).\n```\n\n----------------------------------------\n\nTITLE: Public Component Using Utility Functions in SvelteKit\nDESCRIPTION: Svelte component importing and using public utility functions, demonstrating safe usage that doesn't include server-only code\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/30-advanced/50-server-only-modules.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script>\n\timport { add } from './utils.js';\n</script>\n```\n\n----------------------------------------\n\nTITLE: Accessing Files in SvelteKit Server Functions\nDESCRIPTION: Demonstrates using the `read` function from `$app/server` as the recommended method for file access in server-side contexts. Not compatible with edge function deployments.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/25-build-and-deploy/90-adapter-vercel.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { read } from '$app/server'\n```\n\n----------------------------------------\n\nTITLE: Disabling Server-Side Rendering in SvelteKit\nDESCRIPTION: This code snippet shows how to disable server-side rendering (SSR) at the root layout of a SvelteKit app, effectively turning it into a single-page application.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/25-build-and-deploy/55-single-page-apps.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const ssr = false;\n```\n\n----------------------------------------\n\nTITLE: Importing Node Adapter in SvelteKit Configuration\nDESCRIPTION: This snippet demonstrates how to import and use the Node adapter in a SvelteKit project's configuration file. It's typically used in the svelte.config.js file to specify the adapter for building and deploying the application.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/98-reference/15-@sveltejs-kit-node.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport adapter from '@sveltejs/adapter-node';\n\nexport default {\n  kit: {\n    adapter: adapter()\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Trailing Slash Behavior in SvelteKit\nDESCRIPTION: Sets the `trailingSlash` configuration to 'always' in a SvelteKit layout file to ensure all URLs generated maintain a trailing slash. This affects the URL redirection behavior, webserver conventions of path handling, and the result of the prerendering process. The `'always'` setting generates an `index.html` in directories for paths.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/20-core-concepts/40-page-options.md#2025-04-21_snippet_8\n\nLANGUAGE: js\nCODE:\n```\n/// file: src/routes/+layout.js\nexport const trailingSlash = 'always';\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Overrides for Testing Local Dependency Changes\nDESCRIPTION: JSON configuration showing how to override a dependency like Vite with a local version for testing purposes using pnpm.overrides in the root package.json.\nSOURCE: https://github.com/sveltejs/kit/blob/main/CONTRIBUTING.md#2025-04-21_snippet_5\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n\t// ...\n\t\"dependencies\": {\n\t\t\"vite\": \"^4.0.0\"\n\t},\n\t\"pnpm\": {\n\t\t\"overrides\": {\n\t\t\t\"vite\": \"link:../path/to/vite/packages/vite\"\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Image Loading with Glob Import\nDESCRIPTION: Demonstrates how to load multiple images dynamically using Vite's glob import with enhanced image processing.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/40-best-practices/07-images.md#2025-04-21_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tconst imageModules = import.meta.glob(\n\t\t'/path/to/assets/*.{avif,gif,heif,jpeg,jpg,png,tiff,webp,svg}',\n\t\t{\n\t\t\teager: true,\n\t\t\tquery: {\n\t\t\t\tenhanced: true\n\t\t\t}\n\t\t}\n\t)\n</script>\n\n{#each Object.entries(imageModules) as [_path, module]}\n\t<enhanced:img src={module.default} alt=\"some alt text\" />\n{/each}\n```\n\n----------------------------------------\n\nTITLE: Listening for SvelteKit Shutdown Events in Node.js\nDESCRIPTION: This snippet demonstrates how to listen for the 'sveltekit:shutdown' event, which is emitted when the HTTP server closes all connections. The event supports asynchronous operations and provides a reason parameter indicating the shutdown trigger (SIGINT, SIGTERM, or IDLE).\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/25-build-and-deploy/40-adapter-node.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// @errors: 2304\nprocess.on('sveltekit:shutdown', async (reason) => {\n  await jobs.stop();\n  await db.close();\n});\n```\n\n----------------------------------------\n\nTITLE: Using Vite CLI Commands in SvelteKit Projects\nDESCRIPTION: The three main Vite CLI commands used in SvelteKit projects for development, building, and previewing applications. These commands are typically run via npm scripts.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/98-reference/52-cli.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nvite dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nvite build\n```\n\nLANGUAGE: bash\nCODE:\n```\nvite preview\n```\n\n----------------------------------------\n\nTITLE: Configuring SvelteKit Vercel Adapter\nDESCRIPTION: Basic configuration setup for @sveltejs/adapter-vercel in svelte.config.js. Shows how to initialize the adapter with optional configuration parameters.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/25-build-and-deploy/90-adapter-vercel.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport adapter from '@sveltejs/adapter-vercel';\n\nexport default {\n\tkit: {\n\t\tadapter: adapter({\n\t\t\t// see below for options that can be set here\n\t\t})\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Cloudflare Workers Runtime APIs in SvelteKit\nDESCRIPTION: This JavaScript snippet shows how to access Cloudflare Workers runtime APIs, specifically a Durable Object namespace, within a SvelteKit endpoint or hook using the platform property.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/25-build-and-deploy/70-adapter-cloudflare-workers.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// @errors: 7031\nexport async function POST({ request, platform }) {\n\tconst x = platform.env.YOUR_DURABLE_OBJECT_NAMESPACE.idFromName('x');\n}\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Version 5.0.0\nDESCRIPTION: Major version update addressing an error when _headers and _redirects files are placed in the /static directory instead of project root.\nSOURCE: https://github.com/sveltejs/kit/blob/main/packages/adapter-netlify/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 5.0.0\n### Major Changes\n\n- fix: error if the `_headers` and `_redirects` files are in the `/static` directory instead of the project root ([#13227](https://github.com/sveltejs/kit/pull/13227))\n```\n\n----------------------------------------\n\nTITLE: Accessing Netlify Context in Server Endpoints\nDESCRIPTION: Example showing how to access Netlify-specific context in server-side endpoints including Identity information.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/25-build-and-deploy/80-adapter-netlify.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// @errors: 2705 7006\n/// file: +page.server.js\nexport const load = async (event) => {\n\tconst context = event.platform.context;\n\tconsole.log(context); // shows up in your functions log in the Netlify app\n};\n```\n\n----------------------------------------\n\nTITLE: Header Management in SvelteKit Load Function\nDESCRIPTION: Shows how to set response headers in a load function, particularly useful for caching configurations.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/20-core-concepts/20-load.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('./$types').PageLoad} */\nexport async function load({ fetch, setHeaders }) {\n\tconst url = `https://cms.example.com/products.json`;\n\tconst response = await fetch(url);\n\n\tsetHeaders({\n\t\tage: response.headers.get('age'),\n\t\t'cache-control': response.headers.get('cache-control')\n\t});\n\n\treturn response.json();\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring App.Error Interface in SvelteKit\nDESCRIPTION: This TypeScript code snippet demonstrates how to extend the `App.Error` interface in SvelteKit to include custom properties, such as an `errorId`, ensuring type safety for error objects passed to the `$page.error` store.  This custom error interface will be used in the `handleError` hook.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/30-advanced/20-hooks.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n/// file: src/app.d.ts\ndeclare global {\n\tnamespace App {\n\t\tinterface Error {\n\t\t\tmessage: string;\n\t\t\terrorId: string;\n\t\t}\n\t}\n}\n\nexport {};\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Types for Cloudflare Workers in SvelteKit\nDESCRIPTION: This TypeScript code snippet demonstrates how to set up types for Cloudflare Workers-specific features in a SvelteKit application's app.d.ts file. It imports KVNamespace and DurableObjectNamespace types and extends the App.Platform interface.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/25-build-and-deploy/70-adapter-cloudflare-workers.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/// file: src/app.d.ts\n+++import { KVNamespace, DurableObjectNamespace } from '@cloudflare/workers-types';+++\n\ndeclare global {\n\tnamespace App {\n\t\tinterface Platform {\n+++\t\t\tenv?: {\n\t\t\t\tYOUR_KV_NAMESPACE: KVNamespace;\n\t\t\t\tYOUR_DURABLE_OBJECT_NAMESPACE: DurableObjectNamespace;\n\t\t\t};+++\n\t\t}\n\t}\n}\n\nexport {};\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Access Example\nDESCRIPTION: Example of accessing Vercel environment variables in a server-side load function and displaying in a Svelte component.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/25-build-and-deploy/90-adapter-vercel.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('./$types').LayoutServerLoad} */\nexport function load() {\n\treturn {\n\t\tdeploymentGitBranch: VERCEL_COMMIT_REF\n\t};\n}\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\t/** @type {import('./$types').LayoutProps} */\n\tlet { data } = $props();\n</script>\n\n<p>This staging environment was deployed from {data.deploymentGitBranch}.</p>\n```\n\n----------------------------------------\n\nTITLE: Version History Markdown\nDESCRIPTION: List of version changes and updates including bug fixes, feature additions, breaking changes and dependency updates for the SvelteKit Cloudflare adapter\nSOURCE: https://github.com/sveltejs/kit/blob/main/packages/adapter-cloudflare/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- fix: add `workerd` to esbuild conditions ([#12069](https://github.com/sveltejs/kit/pull/12069))\n\n## 4.2.0\n\n### Minor Changes\n\n- feat: emulate Cloudflare Workers bindings and incoming request properties in `event.platform` for `dev` and `preview` ([#11974](https://github.com/sveltejs/kit/pull/11974))\n\n### Patch Changes\n\n- Updated dependencies [[`4562275ed42964148df03c79434172024897c08c`](https://github.com/sveltejs/kit/commit/4562275ed42964148df03c79434172024897c08c)]:\n  - @sveltejs/kit@2.5.4\n```\n\n----------------------------------------\n\nTITLE: Basic Enhanced Image Usage\nDESCRIPTION: Shows how to use the enhanced:img component for optimized image rendering.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/40-best-practices/07-images.md#2025-04-21_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<enhanced:img src=\"./path/to/your/image.jpg\" alt=\"An alt text\" />\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable Component in SvelteKit\nDESCRIPTION: A basic example of a reusable Svelte component stored in the src/lib directory that can be accessed through the $lib alias.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/98-reference/26-$lib.md#2025-04-21_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<!--- file: src/lib/Component.svelte --->\nA reusable component\n```\n\n----------------------------------------\n\nTITLE: Conditional Component Loading in SvelteKit\nDESCRIPTION: Demonstrates how to conditionally load a component using an {#await} block and browser check in a Svelte component.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/60-appendix/10-faq.md#2025-04-21_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\timport { browser } from '$app/environment';\n\n\tconst ComponentConstructor = browser ?\n\t\timport('some-browser-only-library').then((module) => module.Component) :\n\t\tnew Promise(() => {});\n</script>\n\n{#await ComponentConstructor}\n\t<p>Loading...</p>\n{:then component}\n\t<svelte:component this={component} />\n{:catch error}\n\t<p>Something went wrong: {error.message}</p>\n{/await}\n```\n\n----------------------------------------\n\nTITLE: Defining a Page Component in Svelte\nDESCRIPTION: This snippet represents a basic page component in Svelte that serves as the entry point for users visiting the site. It renders a welcome message and links to an about page.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/20-core-concepts/10-routing.md#2025-04-21_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<!--- file: src/routes/+page.svelte --->\n<h1>Hello and welcome to my site!</h1>\n<a href=\"/about\">About my site</a>\n```\n\n----------------------------------------\n\nTITLE: Creating a Snapshot Handler for Form State in SvelteKit\nDESCRIPTION: Demonstrates how to implement a snapshot object with capture and restore methods to preserve form input state across page navigations. The example shows preservation of a textarea value using Svelte's state management. The snapshot data must be JSON-serializable for persistence in sessionStorage.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/30-advanced/65-snapshots.md#2025-04-21_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<!--- file: +page.svelte --->\n<script>\n\tlet comment = $state('');\n\n\t/** @type {import('./$types').Snapshot<string>} */\n\texport const snapshot = {\n\t\tcapture: () => comment,\n\t\trestore: (value) => comment = value\n\t};\n</script>\n\n<form method=\"POST\">\n\t<label for=\"comment\">Comment</label>\n\t<textarea id=\"comment\" bind:value={comment} />\n\t<button>Post comment</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry v4.0.0\nDESCRIPTION: Major version update for Vercel, Cloudflare Pages and Netlify adapters with dependency updates\nSOURCE: https://github.com/sveltejs/kit/blob/main/packages/adapter-auto/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 4.0.0\n### Major Changes\n\n- feat: update Vercel, Cloudflare Pages, and Netlify adapter major versions ([#13142](https://github.com/sveltejs/kit/pull/13142))\n```\n\n----------------------------------------\n\nTITLE: Using onMount for Client-Side Library in SvelteKit\nDESCRIPTION: Demonstrates how to use onMount to load and execute a client-side library after the component has been rendered to the DOM.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/60-appendix/10-faq.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { onMount } from 'svelte';\n\nonMount(async () => {\n\tconst { method } = await import('some-browser-only-library');\n\tmethod('hello world');\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Server-Only Modules in SvelteKit\nDESCRIPTION: Shows the special $lib/server directory path used for server-only modules that are prevented from being imported into client-side code.\nSOURCE: https://github.com/sveltejs/kit/blob/main/packages/kit/src/types/synthetic/$lib.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n$lib/server\n```\n\n----------------------------------------\n\nTITLE: Service Worker Type Safety Setup\nDESCRIPTION: Type reference setup for service workers in TypeScript, including necessary ambient declarations and global scope type casting.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/30-advanced/40-service-workers.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"@sveltejs/kit\" />\n/// <reference no-default-lib=\"true\"/>\n/// <reference lib=\"esnext\" />\n/// <reference lib=\"webworker\" />\n\nconst sw = self as unknown as ServiceWorkerGlobalScope;\n```\n\n----------------------------------------\n\nTITLE: Importing a Component Using $lib Alias in SvelteKit\nDESCRIPTION: Demonstrates how to import a component from the src/lib directory using the $lib alias in a SvelteKit route file.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/98-reference/26-$lib.md#2025-04-21_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<!--- file: src/routes/+page.svelte --->\n<script>\n    import Component from '$lib/Component.svelte';\n</script>\n\n<Component />\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Route Entries for Prerendering\nDESCRIPTION: Shows how to specify entry points for dynamic routes during prerendering using the entries function.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/20-core-concepts/40-page-options.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('./$types').EntryGenerator} */\nexport function entries() {\n\treturn [\n\t\t{ slug: 'hello-world' },\n\t\t{ slug: 'another-blog-post' }\n\t];\n}\n\nexport const prerender = true;\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry - Version 1.1.4\nDESCRIPTION: Changelog entry documenting URL updates and dependency changes in version 1.1.4\nSOURCE: https://github.com/sveltejs/kit/blob/main/packages/amp/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.1.4\n### Patch Changes\n\n- docs: update URLs for new svelte.dev site ([#12857](https://github.com/sveltejs/kit/pull/12857))\n\n- Updated dependencies\n```\n\n----------------------------------------\n\nTITLE: GitHub Pages Configuration for SvelteKit\nDESCRIPTION: Specific configuration for deploying SvelteKit sites to GitHub Pages, including base path and fallback page settings.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/25-build-and-deploy/50-adapter-static.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// @errors: 2307 2322\n/// file: svelte.config.js\nimport adapter from '@sveltejs/adapter-static';\n\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n\tkit: {\n\t\tadapter: adapter({\n\t\t\tfallback: '404.html'\n\t\t}),\n\t\tpaths: {\n\t\t\tbase: process.argv.includes('dev') ? '' : process.env.BASE_PATH\n\t\t}\n\t}\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: SvelteKit Image Width Example\nDESCRIPTION: Example of a sizes attribute specification for responsive images in SvelteKit\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/40-best-practices/07-images.md#2025-04-21_snippet_6\n\nLANGUAGE: html\nCODE:\n```\nsizes=\"(min-width: 768px) min(100vw, 108rem), 64rem\"\n```\n\n----------------------------------------\n\nTITLE: Updating Wrangler Configuration for Assets in JSONC\nDESCRIPTION: This JSONC snippet illustrates how to modify the wrangler.jsonc configuration by removing the 'site' object and replacing it with an 'assets' object. The 'assets' object specifies both the directory and binding necessary for deploying static assets using Cloudflare Workers.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/25-build-and-deploy/60-adapter-cloudflare.md#2025-04-21_snippet_6\n\nLANGUAGE: JSONC\nCODE:\n```\n\n{\n---\t\"site\": {\n\t\t\"bucket\": \".cloudflare/public\"\n\t},---\n+++\t\"assets\": {\n\t\t\"directory\": \".cloudflare/public\",\n\t\t\"binding\": \"ASSETS\"\n\t}+++\n}\n\n```\n\n----------------------------------------\n\nTITLE: Type Annotations for SvelteKit Pages in Svelte 4\nDESCRIPTION: Shows how to type page data and form data in SvelteKit pages when using Svelte 4, using the export let syntax instead of $props().\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/98-reference/54-types.md#2025-04-21_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  /** @type {import('./$types').PageData} */\n  export let data;\n  /** @type {import('./$types').ActionData} */\n  export let form;\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Guard in JavaScript with `getRequestEvent`\nDESCRIPTION: This JavaScript snippet demonstrates how to create an authentication guard function, `requireLogin`, that uses `getRequestEvent` to access the request's `locals` and `url`. It checks if a user is logged in (i.e., `locals.user` is populated) and redirects to the login page if not, preserving the intended destination via URL parameters.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/20-core-concepts/20-load.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n\"// @filename: index.ts\n// ---cut---\nimport { redirect } from '@sveltejs/kit';\nimport { getRequestEvent } from '$app/server';\n\nexport function requireLogin() {\n\tconst { locals, url } = getRequestEvent();\n\n\t// assume `locals.user` is populated in `handle`\n\tif (!locals.user) {\n\t\tconst redirectTo = url.pathname + url.search;\n\t\tconst params = new URLSearchParams({ redirectTo });\n\n\t\tredirect(307, `/login?${params}`);\n\t}\n\n\treturn locals.user;\n}\"\n```\n\n----------------------------------------\n\nTITLE: Initializing SvelteKit Configuration in JavaScript\nDESCRIPTION: This snippet demonstrates how to set up a basic SvelteKit configuration file. It imports an adapter and exports a configuration object with the 'kit' property, which is used to configure SvelteKit-specific options like the adapter to use.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/98-reference/50-configuration.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport adapter from '@sveltejs/adapter-auto';\n\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n\tkit: {\n\t\tadapter: adapter()\n\t}\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Basic Image Import in Svelte Component\nDESCRIPTION: Demonstrates how to import and use images using Vite's built-in asset handling in a Svelte component.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/40-best-practices/07-images.md#2025-04-21_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\timport logo from '$lib/assets/logo.png';\n</script>\n\n<img alt=\"The project logo\" src={logo} />\n```\n\n----------------------------------------\n\nTITLE: Accessing Cloudflare Platform APIs in SvelteKit\nDESCRIPTION: Example of accessing Cloudflare platform APIs and bindings within a SvelteKit endpoint handler.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/25-build-and-deploy/60-adapter-cloudflare.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function POST({ request, platform }) {\n\tconst x = platform.env.YOUR_DURABLE_OBJECT_NAMESPACE.idFromName('x');\n}\n```\n\n----------------------------------------\n\nTITLE: Critical SvelteKit TypeScript Compiler Options\nDESCRIPTION: Shows the essential TypeScript compiler options required for SvelteKit to function properly. These settings ensure compatibility with Vite's compilation approach and SvelteKit's module system.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/98-reference/54-types.md#2025-04-21_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"compilerOptions\": {\n\t\t// this ensures that types are explicitly\n\t\t// imported with `import type`, which is\n\t\t// necessary as Svelte/Vite cannot\n\t\t// otherwise compile components correctly\n\t\t\"verbatimModuleSyntax\": true,\n\n\t\t// Vite compiles one TypeScript module\n\t\t// at a time, rather than compiling\n\t\t// the entire module graph\n\t\t\"isolatedModules\": true,\n\n\t\t// Tell TS it's used only for type-checking\n\t\t\"noEmit\": true,\n\n\t\t// This ensures both `vite build`\n\t\t// and `svelte-package` work correctly\n\t\t\"lib\": [\"esnext\", \"DOM\", \"DOM.Iterable\"],\n\t\t\"moduleResolution\": \"bundler\",\n\t\t\"module\": \"esnext\",\n\t\t\"target\": \"esnext\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Server-only Secrets in SvelteKit\nDESCRIPTION: Example showing how to export sensitive data from a server-only module using the .server.js filename convention\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/30-advanced/50-server-only-modules.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const atlantisCoordinates = [/* redacted */];\n```\n\n----------------------------------------\n\nTITLE: Serverless Function Configuration\nDESCRIPTION: Configuration for deploying routes as Vercel Serverless Functions using Node.js 22.x runtime.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/25-build-and-deploy/90-adapter-vercel.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('@sveltejs/adapter-vercel').Config} */\nexport const config = {\n\truntime: 'nodejs22.x'\n};\n```\n\n----------------------------------------\n\nTITLE: Conditional Preload Configuration\nDESCRIPTION: Example of conditionally applying preload behavior using a dynamic attribute value in Svelte\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/30-advanced/30-link-options.md#2025-04-21_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<div data-sveltekit-preload-data={condition ? 'hover' : false}>\n```\n\n----------------------------------------\n\nTITLE: Nested Preload Data Configuration\nDESCRIPTION: Example of enabling and disabling preload behavior for nested elements using data-sveltekit-preload-data attribute\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/30-advanced/30-link-options.md#2025-04-21_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<div data-sveltekit-preload-data>\n\t<!-- these links will be preloaded -->\n\t<a href=\"/a\">a</a>\n\t<a href=\"/b\">b</a>\n\t<a href=\"/c\">c</a>\n\n\t<div data-sveltekit-preload-data=\"false\">\n\t\t<!-- these links will NOT be preloaded -->\n\t\t<a href=\"/d\">d</a>\n\t\t<a href=\"/e\">e</a>\n\t\t<a href=\"/f\">f</a>\n\t</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Generated SvelteKit TypeScript Configuration\nDESCRIPTION: Shows the auto-generated TypeScript configuration file with path mappings and include/exclude patterns. This configuration supports SvelteKit's type system and enables the $lib alias.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/98-reference/54-types.md#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"compilerOptions\": {\n\t\t\"paths\": {\n\t\t\t\"$lib\": [\"../src/lib\"],\n\t\t\t\"$lib/*\": [\"../src/lib/*\"]\n\t\t},\n\t\t\"rootDirs\": [\"..\", \"./types\"]\n\t},\n\t\"include\": [\n\t\t\"ambient.d.ts\",\n\t\t\"non-ambient.d.ts\",\n\t\t\"./types/**/$types.d.ts\",\n\t\t\"../vite.config.js\",\n\t\t\"../vite.config.ts\",\n\t\t\"../src/**/*.js\",\n\t\t\"../src/**/*.ts\",\n\t\t\"../src/**/*.svelte\",\n\t\t\"../tests/**/*.js\",\n\t\t\"../tests/**/*.ts\",\n\t\t\"../tests/**/*.svelte\"\n\t],\n\t\"exclude\": [\n\t\t\"../node_modules/**\",\n\t\t\"../src/service-worker.js\",\n\t\t\"../src/service-worker/**/*.js\",\n\t\t\"../src/service-worker.ts\",\n\t\t\"../src/service-worker/**/*.ts\",\n\t\t\"../src/service-worker.d.ts\",\n\t\t\"../src/service-worker/**/*.d.ts\"\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Modal Dialog with Shallow Routing in SvelteKit\nDESCRIPTION: Demonstrates how to implement a modal dialog using pushState for history management. The modal can be dismissed either by navigating back or through a close callback.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/30-advanced/67-shallow-routing.md#2025-04-21_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<!--- file: +page.svelte --->\n<script>\n\timport { pushState } from '$app/navigation';\n\timport { page } from '$app/state';\n\timport Modal from './Modal.svelte';\n\n\tfunction showModal() {\n\t\tpushState('', {\n\t\t\tshowModal: true\n\t\t});\n\t}\n</script>\n\n{#if page.state.showModal}\n\t<Modal close={() => history.back()} />\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Configuring Exports in package.json\nDESCRIPTION: This snippet defines the entry points of the package using the `exports` field. Entry points specify which modules should be exposed and how they should be imported. It uses conditions to manage TypeScript and Svelte entries.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/30-advanced/70-packaging.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"exports\": {\n\t\t\".\": {\n\t\t\t\"types\": \"./dist/index.d.ts\",\n\t\t\t\"svelte\": \"./dist/index.js\"\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Vercel Image Optimization Configuration\nDESCRIPTION: Configuration for Vercel's image optimization features including sizes, formats, cache TTL, and allowed domains.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/25-build-and-deploy/90-adapter-vercel.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport adapter from '@sveltejs/adapter-vercel';\n\nexport default {\n\tkit: {\n\t\tadapter: adapter({\n\t\t\timages: {\n\t\t\t\tsizes: [640, 828, 1200, 1920, 3840],\n\t\t\t\tformats: ['image/avif', 'image/webp'],\n\t\t\t\tminimumCacheTTL: 300,\n\t\t\t\tdomains: ['example-app.vercel.app'],\n\t\t\t}\n\t\t})\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: Legacy Type Annotations for SvelteKit Pages (pre-2.16.0)\nDESCRIPTION: Shows the legacy approach to typing page data and form data in SvelteKit pages before version 2.16.0, using a more verbose type annotation.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/98-reference/54-types.md#2025-04-21_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\t/** @type {{ data: import('./$types').PageData, form: import('./$types').ActionData }} */\n\tlet { data, form } = $props();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Disabling CSR in SvelteKit Pages\nDESCRIPTION: This code snippet demonstrates how to disable client-side rendering (CSR) in a SvelteKit page by setting the `csr` export to `false`. Doing so prevents any JavaScript from being sent to the client, ensuring that only HTML and CSS are used. This restriction means that <script> tags in components are removed, and features like progressive enhancement of forms and Hot Module Replacement (HMR) are not available.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/20-core-concepts/40-page-options.md#2025-04-21_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n/// file: +page.js\nexport const csr = false;\n// If both `csr` and `ssr` are `false`, nothing will be rendered!\n```\n\n----------------------------------------\n\nTITLE: Implementing SvelteKit Adapter API in JavaScript\nDESCRIPTION: This code snippet demonstrates the structure and implementation of a SvelteKit adapter. It includes the required 'name' and 'adapt' methods, as well as optional 'emulate' and 'supports' methods. The adapter is responsible for handling build output, server instantiation, and request processing for the target platform.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/25-build-and-deploy/99-writing-adapters.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/** @param {AdapterSpecificOptions} options */\nexport default function (options) {\n\t/** @type {import('@sveltejs/kit').Adapter} */\n\tconst adapter = {\n\t\tname: 'adapter-package-name',\n\t\tasync adapt(builder) {\n\t\t\t// adapter implementation\n\t\t},\n\t\tasync emulate() {\n\t\t\treturn {\n\t\t\t\tasync platform({ config, prerender }) {\n\t\t\t\t\t// the returned object becomes `event.platform` during dev, build and\n\t\t\t\t\t// preview. Its shape is that of `App.Platform`\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tsupports: {\n\t\t\tread: ({ config, route }) => {\n\t\t\t\t// Return `true` if the route with the given `config` can use `read`\n\t\t\t\t// from `$app/server` in production, return `false` if it can't.\n\t\t\t\t// Or throw a descriptive error describing how to configure the deployment\n\t\t\t}\n\t\t}\n\t};\n\n\treturn adapter;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Middleware to Vite in SvelteKit\nDESCRIPTION: Demonstrates how to add middleware to Vite for use in development mode with SvelteKit, using a custom Vite plugin.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/60-appendix/10-faq.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { sveltekit } from '@sveltejs/kit/vite';\n\n/** @type {import('vite').Plugin} */\nconst myPlugin = {\n\tname: 'log-request-middleware',\n\tconfigureServer(server) {\n\t\tserver.middlewares.use((req, res, next) => {\n\t\t\tconsole.log(`Got request ${req.url}`);\n\t\t\tnext();\n\t\t});\n\t}\n};\n\n/** @type {import('vite').UserConfig} */\nconst config = {\n\tplugins: [myPlugin, sveltekit()]\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring adapter-static in SvelteKit\nDESCRIPTION: This snippet demonstrates how to configure the adapter-static in the svelte.config.js file. It sets up a fallback page for client-side routing in a static SvelteKit app.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/25-build-and-deploy/55-single-page-apps.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport adapter from '@sveltejs/adapter-static';\n\nexport default {\n\tkit: {\n\t\tadapter: adapter({\n\t\t\tfallback: '200.html' // may differ from host to host\n\t\t})\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Private Environment Variables in SvelteKit\nDESCRIPTION: Demonstrates how to import private environment variables from the $env/static/private module. These values are statically injected at build time and support optimizations like dead code elimination.\nSOURCE: https://github.com/sveltejs/kit/blob/main/packages/kit/src/types/synthetic/$env+static+private.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { API_KEY } from '$env/static/private';\n```\n\n----------------------------------------\n\nTITLE: Disabling Prerender in SvelteKit Routes\nDESCRIPTION: Shows how to explicitly disable prerendering for specific routes when prerendering is enabled globally.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/20-core-concepts/40-page-options.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const prerender = false;\n```\n\n----------------------------------------\n\nTITLE: Error Display Component in SvelteKit\nDESCRIPTION: Shows how to create an error display component using SvelteKit's page store to access and display error messages.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/30-advanced/25-errors.md#2025-04-21_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n    import { page } from '$app/state';\n</script>\n\n<h1>{page.error.message}</h1>\n```\n\n----------------------------------------\n\nTITLE: Importing a Specific Component\nDESCRIPTION: This snippet shows how to import a specific Svelte component directly from the library as defined by the `exports` configuration in `package.json`. It demonstrates an ambient declaration and a standard import.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/30-advanced/70-packaging.md#2025-04-21_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n// @filename: ambient.d.ts\ndeclare module 'your-library/Foo.svelte';\n\n// @filename: index.js\n// ---cut---\nimport Foo from 'your-library/Foo.svelte';\n```\n\n----------------------------------------\n\nTITLE: Specifying Files for npm Package\nDESCRIPTION: This snippet defines which files and folders should be included when the package is published to npm. Typically, only the `dist` folder, along with `package.json`, `README`, and `LICENSE`, are included to reduce package size.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/30-advanced/70-packaging.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"files\": [\"dist\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Public Environment Variables in SvelteKit\nDESCRIPTION: Shows how to import public environment variables from the $env/static/public module. Only variables prefixed with PUBLIC_ (by default) are accessible. Values are statically replaced during build time.\nSOURCE: https://github.com/sveltejs/kit/blob/main/packages/kit/src/types/synthetic/$env+static+public.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PUBLIC_BASE_URL } from '$env/static/public';\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for Enhanced Images\nDESCRIPTION: Configuration setup in vite.config.js to enable the enhanced-img plugin alongside SvelteKit.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/40-best-practices/07-images.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { sveltekit } from '@sveltejs/kit/vite';\nimport { enhancedImages } from '@sveltejs/enhanced-img';\nimport { defineConfig } from 'vite';\n\nexport default defineConfig({\n\tplugins: [\n\t\tenhancedImages(),\n\t\tsveltekit()\n\t]\n});\n```\n\n----------------------------------------\n\nTITLE: Cookie Handling in SvelteKit Server Load Function\nDESCRIPTION: Demonstrates cookie handling in a server-side load function, including accessing and using cookies for user session management.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/20-core-concepts/20-load.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as db from '$lib/server/database';\n\n/** @type {import('./$types').LayoutServerLoad} */\nexport async function load({ cookies }) {\n\tconst sessionid = cookies.get('sessionid');\n\n\treturn {\n\t\tuser: await db.getUser(sessionid)\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Error Interface TypeScript Definition\nDESCRIPTION: Shows how to extend the default Error interface with custom properties using TypeScript declarations.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/30-advanced/25-errors.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare global {\n    namespace App {\n        interface Error {\n            code: string;\n            id: string;\n        }\n    }\n}\n\nexport {};\n```\n\n----------------------------------------\n\nTITLE: Configuring Side Effects in package.json\nDESCRIPTION: This snippet configures the `sideEffects` field to include CSS files, ensuring compatibility with webpack for CSS handling. It also demonstrates how to specify files with side effects for effective tree-shaking.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/30-advanced/70-packaging.md#2025-04-21_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"sideEffects\": [\"**/*.css\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Dynamic Private Environment Variables in SvelteKit\nDESCRIPTION: Demonstrates how to import and use dynamic private environment variables from the $env/dynamic/private module. This code can only be used server-side and not during prerendering. The variables must follow the configured prefix patterns.\nSOURCE: https://github.com/sveltejs/kit/blob/main/packages/kit/src/types/synthetic/$env+dynamic+private.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { env } from '$env/dynamic/private';\nconsole.log(env.DEPLOYMENT_SPECIFIC_VARIABLE);\n```\n\n----------------------------------------\n\nTITLE: Importing SvelteKit State Module\nDESCRIPTION: Shows the module import path for accessing SvelteKit's state objects. This module provides read-only access to page, navigating, and updated state objects.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/98-reference/20-$app-state.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n$app/state\n```\n\n----------------------------------------\n\nTITLE: Initializing Server-side Database Connection in SvelteKit\nDESCRIPTION: This JavaScript code snippet demonstrates how to use the `init` hook in SvelteKit to initialize a database connection on the server side. It imports a database connection function from a library and calls it within the `init` hook to establish a connection when the server starts.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/30-advanced/20-hooks.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/// file: src/hooks.server.js\nimport * as db from '$lib/server/database';\n\n/** @type {import('@sveltejs/kit').ServerInit} */\nexport async function init() {\n\tawait db.connect();\n}\n```\n\n----------------------------------------\n\nTITLE: Tap Preload Configuration for Links\nDESCRIPTION: Example of configuring a link to preload data only on tap/click rather than hover using data-sveltekit-preload-data attribute\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/30-advanced/30-link-options.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a data-sveltekit-preload-data=\"tap\" href=\"/stonks\">\n\tGet current stonk values\n</a>\n```\n\n----------------------------------------\n\nTITLE: Configuring Netlify Edge Functions\nDESCRIPTION: Configuration for enabling Netlify Edge Functions with SvelteKit using Deno-based edge deployment.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/25-build-and-deploy/80-adapter-netlify.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// @errors: 2307\n/// file: svelte.config.js\nimport adapter from '@sveltejs/adapter-netlify';\n\nexport default {\n\tkit: {\n\t\tadapter: adapter({\n\t\t\t// will create a Netlify Edge Function using Deno-based\n\t\t\t// rather than using standard Node-based functions\n\t\t\tedge: true\n\t\t})\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: Creating SvelteKit Project Using sv Package\nDESCRIPTION: Command to create a new SvelteKit project using the sv package, which replaces the deprecated create-svelte utility\nSOURCE: https://github.com/sveltejs/kit/blob/main/packages/create-svelte/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx sv create\n```\n\n----------------------------------------\n\nTITLE: Importing from a Svelte Library\nDESCRIPTION: This JavaScript snippet shows how to import a component from the root of a Svelte library using the syntax defined in the `exports` field of `package.json`. It assumes the use of TypeScript for type checking.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/30-advanced/70-packaging.md#2025-04-21_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { Something } from 'your-library';\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Error Page in Svelte\nDESCRIPTION: This snippet creates a custom error page that displays relevant error status and messages if routing fails or an error occurs during data loading.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/20-core-concepts/10-routing.md#2025-04-21_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<!--- file: src/routes/blog/[slug]/+error.svelte --->\n<script>\n\timport { page } from '$app/state';\n</script>\n\n<h1>{page.status}: {page.error.message}</h1>\n```\n\n----------------------------------------\n\nTITLE: Updating Adapter in SvelteKit Configuration\nDESCRIPTION: This snippet shows how to update the SvelteKit configuration file to replace the older Cloudflare Workers adapter with the new Cloudflare static assets adapter. The @sveltejs/adapter-cloudflare-workers package is replaced with @sveltejs/adapter-cloudflare in the svelte.config.js file, simplifying the integration with Cloudflare's new static assets approach.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/25-build-and-deploy/60-adapter-cloudflare.md#2025-04-21_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n\n---import adapter from '@sveltejs/adapter-cloudflare-workers';---\n+++import adapter from '@sveltejs/adapter-cloudflare';+++\n\nexport default {\n\tkit: {\n\t\tadapter: adapter()\n\t}\n};\n\n```\n\n----------------------------------------\n\nTITLE: Disabling Client-Side Rendering for AMP\nDESCRIPTION: Layout configuration to disable client-side rendering for AMP compatibility.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/40-best-practices/20-seo.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const csr = false;\n```\n\n----------------------------------------\n\nTITLE: Setting Language Attribute in SvelteKit HTML Template\nDESCRIPTION: Demonstrates how to set the 'lang' attribute in the HTML template (app.html) for a SvelteKit application. This example shows setting a static German language code.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/40-best-practices/10-accessibility.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<html lang=\"de\">\n```\n\n----------------------------------------\n\nTITLE: Export Map for Specific Components\nDESCRIPTION: This snippet provides an alternative export map configuration for exposing specific components like `Foo.svelte` in `package.json`. This allows individual component imports directly and defines type and Svelte conditions.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/30-advanced/70-packaging.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"exports\": {\n\t\t\"./Foo.svelte\": {\n\t\t\t\"types\": \"./dist/Foo.svelte.d.ts\",\n\t\t\t\"svelte\": \"./dist/Foo.svelte\"\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Client-side Error Handling with Sentry Integration in SvelteKit\nDESCRIPTION: This JavaScript code snippet implements a `handleError` hook in SvelteKit for client-side error handling, integrating with Sentry for error tracking. It captures exceptions, includes additional context data like event and error ID, and returns a user-friendly error object with a message and error ID.  The hook is designed to catch errors specifically on the client-side.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/30-advanced/20-hooks.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/// file: src/hooks.client.js\n// @errors: 2322 2353\n// @filename: ambient.d.ts\ndeclare module '@sentry/sveltekit' {\n\texport const init: (opts: any) => void;\n\texport const captureException: (error: any, opts: any) => void;\n}\n\n// @filename: index.js\n// ---cut---\nimport * as Sentry from '@sentry/sveltekit';\n\nSentry.init({/*...*/})\n\n/** @type {import('@sveltejs/kit').HandleClientError} */\nexport async function handleError({ error, event, status, message }) {\n\tconst errorId = crypto.randomUUID();\n\n\t// example integration with https://sentry.io/\n\tSentry.captureException(error, {\n\t\textra: { event, errorId, status }\n\t});\n\n\treturn {\n\t\tmessage: 'Whoops!',\n\t\terrorId\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Wrangler Configuration for Assets in TOML\nDESCRIPTION: This TOML snippet demonstrates how to update the wrangler.toml configuration file by removing the deprecated 'site.bucket' setting and introducing 'assets.directory' and 'assets.binding' settings. This is necessary to support the new Workers Static Assets configuration in Cloudflare.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/25-build-and-deploy/60-adapter-cloudflare.md#2025-04-21_snippet_5\n\nLANGUAGE: TOML\nCODE:\n```\n\n---site.bucket = \".cloudflare/public\"---\n+++assets.directory = \".cloudflare/public\"\nassets.binding = \"ASSETS\"+++\n\n```\n\n----------------------------------------\n\nTITLE: Configuring SvelteKit for AMP Support\nDESCRIPTION: Configuration setup in svelte.config.js to enable AMP support by setting inlineStyleThreshold to inline all styles as required by AMP.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/40-best-practices/20-seo.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n\tkit: {\n\t\t// since <link rel=\"stylesheet\"> isn't\n\t\t// allowed, inline all styles\n\t\tinlineStyleThreshold: Infinity\n\t}\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Dynamic Image Import with Enhancement\nDESCRIPTION: Example of dynamically importing and using enhanced images with the ?enhanced query parameter.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/40-best-practices/07-images.md#2025-04-21_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\timport MyImage from './path/to/your/image.jpg?enhanced';\n</script>\n\n<enhanced:img src={MyImage} alt=\"some alt text\" />\n```\n\n----------------------------------------\n\nTITLE: Advanced AMP Transformation with CSS Optimization\nDESCRIPTION: Enhanced server hook that combines AMP transformation with CSS optimization using dropcss to remove unused styles.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/40-best-practices/20-seo.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as amp from '@sveltejs/amp';\nimport dropcss from 'dropcss';\n\n/** @type {import('@sveltejs/kit').Handle} */\nexport async function handle({ event, resolve }) {\n\tlet buffer = '';\n\n\treturn await resolve(event, {\n\t\ttransformPageChunk: ({ html, done }) => {\n\t\t\tbuffer += html;\n\n\t\t\tif (done) {\n\t\t\t\tlet css = '';\n\t\t\t\tconst markup = amp\n\t\t\t\t\t.transform(buffer)\n\t\t\t\t\t.replace('⚡', 'amp') // dropcss can't handle this character\n\t\t\t\t\t.replace(/<style amp-custom([^>]*?)>([^]+?)<\\/style>/, (match, attributes, contents) => {\n\t\t\t\t\t\tcss = contents;\n\t\t\t\t\t\treturn `<style amp-custom${attributes}></style>`;\n\t\t\t\t\t});\n\n\t\t\t\tcss = dropcss({ css, html: markup }).css;\n\t\t\t\treturn markup.replace('</style>', `${css}</style>`);\n\t\t\t}\n\t\t}\n\t});\n}\n```\n\n----------------------------------------\n\nTITLE: Asynchronous URL Rerouting with API Fetch in SvelteKit\nDESCRIPTION: This JavaScript code snippet demonstrates asynchronous URL rerouting using the `reroute` hook in SvelteKit, fetching the rerouting destination from an API endpoint.  It constructs a URL for an API endpoint, passes the current pathname as a query parameter, and uses `fetch` to retrieve the rerouted pathname from the API response, enabling dynamic rerouting logic based on backend data.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/30-advanced/20-hooks.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n/// file: src/hooks.js\n// @errors: 2345`\n// @errors: 2304\n\n/** @type {import('@sveltejs/kit').Reroute} */\nexport async function reroute({ url, fetch }) {\n\t// Ask a special endpoint within your app about the destination\n\tif (url.pathname === '/api/reroute') return;\n\n\tconst api = new URL('/api/reroute', url);\n\tapi.searchParams.set('pathname', url.pathname);\n\n\tconst result = await fetch(api).then(r => r.json());\n\treturn result.pathname;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling CSR During Development in SvelteKit\nDESCRIPTION: This snippet enables client-side rendering (CSR) conditionally during development in a SvelteKit application by hooking into the `dev` flag from the application environment. This allows developers to leverage features like Hot Module Replacement (HMR) during development.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/20-core-concepts/40-page-options.md#2025-04-21_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n/// file: +page.js\nimport { dev } from '$app/environment';\n\nexport const csr = dev;\n```\n\n----------------------------------------\n\nTITLE: AMP Transformation Handler\nDESCRIPTION: Server hook implementation for transforming regular HTML into AMP-compliant HTML using @sveltejs/amp.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/40-best-practices/20-seo.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as amp from '@sveltejs/amp';\n\n/** @type {import('@sveltejs/kit').Handle} */\nexport async function handle({ event, resolve }) {\n\tlet buffer = '';\n\treturn await resolve(event, {\n\t\ttransformPageChunk: ({ html, done }) => {\n\t\t\tbuffer += html;\n\t\t\tif (done) return amp.transform(buffer);\n\t\t}\n\t});\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Enhanced Image Plugin\nDESCRIPTION: Command to install the @sveltejs/enhanced-img plugin for advanced image optimization.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/40-best-practices/07-images.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @sveltejs/enhanced-img\n```\n\n----------------------------------------\n\nTITLE: Basic AMP HTML Template\nDESCRIPTION: HTML template modification to add the required AMP attribute to the HTML tag.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/40-best-practices/20-seo.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<html amp>\n...\n```\n\n----------------------------------------\n\nTITLE: Implementing Offline-Capable Service Worker\nDESCRIPTION: Complete service worker implementation that caches build files, static assets, and handles offline functionality. Includes cache management, installation, activation, and fetch event handling.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/30-advanced/40-service-workers.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// @errors: 2339\n/// <reference types=\"@sveltejs/kit\" />\nimport { build, files, version } from '$service-worker';\n\n// Create a unique cache name for this deployment\nconst CACHE = `cache-${version}`;\n\nconst ASSETS = [\n\t...build, // the app itself\n\t...files  // everything in `static`\n];\n\nself.addEventListener('install', (event) => {\n\t// Create a new cache and add all files to it\n\tasync function addFilesToCache() {\n\t\tconst cache = await caches.open(CACHE);\n\t\tawait cache.addAll(ASSETS);\n\t}\n\n\tevent.waitUntil(addFilesToCache());\n});\n\nself.addEventListener('activate', (event) => {\n\t// Remove previous cached data from disk\n\tasync function deleteOldCaches() {\n\t\tfor (const key of await caches.keys()) {\n\t\t\tif (key !== CACHE) await caches.delete(key);\n\t\t}\n\t}\n\n\tevent.waitUntil(deleteOldCaches());\n});\n\nself.addEventListener('fetch', (event) => {\n\t// ignore POST requests etc\n\tif (event.request.method !== 'GET') return;\n\n\tasync function respond() {\n\t\tconst url = new URL(event.request.url);\n\t\tconst cache = await caches.open(CACHE);\n\n\t\t// `build`/`files` can always be served from the cache\n\t\tif (ASSETS.includes(url.pathname)) {\n\t\t\tconst response = await cache.match(url.pathname);\n\n\t\t\tif (response) {\n\t\t\t\treturn response;\n\t\t\t}\n\t\t}\n\n\t\t// for everything else, try the network first, but\n\t\t// fall back to the cache if we're offline\n\t\ttry {\n\t\t\tconst response = await fetch(event.request);\n\n\t\t\t// if we're offline, fetch can return a value that is not a Response\n\t\t\t// instead of throwing - and we can't pass this non-Response to respondWith\n\t\t\tif (!(response instanceof Response)) {\n\t\t\t\tthrow new Error('invalid response from fetch');\n\t\t\t}\n\n\t\t\tif (response.status === 200) {\n\t\t\t\tcache.put(event.request, response.clone());\n\t\t\t}\n\n\t\t\treturn response;\n\t\t} catch (err) {\n\t\t\tconst response = await cache.match(event.request);\n\n\t\t\tif (response) {\n\t\t\t\treturn response;\n\t\t\t}\n\n\t\t\t// if there's no cache, then just error out\n\t\t\t// as there is nothing we can do to respond to this request\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\tevent.respondWith(respond());\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Node Server with Env File\nDESCRIPTION: Command for starting the Node server using the newer --env-file flag (Node.js v20.6+) to load environment variables.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/25-build-and-deploy/40-adapter-node.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode --env-file=.env build\n```\n\n----------------------------------------\n\nTITLE: SvelteKit Server Module Definition\nDESCRIPTION: Module declaration for $app/server in SvelteKit documentation\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/98-reference/20-$app-server.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> MODULE: $app/server\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for SvelteKit Deployment\nDESCRIPTION: GitHub Actions workflow configuration for automatically deploying a SvelteKit site to GitHub Pages.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/25-build-and-deploy/50-adapter-static.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n### file: .github/workflows/deploy.yml\nname: Deploy to GitHub Pages\n\non:\n  push:\n    branches: 'main'\n\njobs:\n  build_site:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n\n      - name: Install Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: 20\n          cache: npm\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: build\n        env:\n          BASE_PATH: '/${{ github.event.repository.name }}'\n        run: |\n          npm run build\n\n      - name: Upload Artifacts\n        uses: actions/upload-pages-artifact@v3\n        with:\n          path: 'build/'\n\n  deploy:\n    needs: build_site\n    runs-on: ubuntu-latest\n\n    permissions:\n      pages: write\n      id-token: write\n\n    environment:\n      name: github-pages\n      url: ${{ steps.deployment.outputs.page_url }}\n\n    steps:\n      - name: Deploy\n        id: deployment\n        uses: actions/deploy-pages@v4\n```\n\n----------------------------------------\n\nTITLE: Static Import of Client-Side Library in SvelteKit\nDESCRIPTION: Shows how to statically import a side-effect free client-side library, which will be tree-shaken out in the server-side build.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/60-appendix/10-faq.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { onMount } from 'svelte';\nimport { method } from 'some-browser-only-library';\n\nonMount(() => {\n\tmethod('hello world');\n});\n```\n\n----------------------------------------\n\nTITLE: Overriding Page Configurations in SvelteKit\nDESCRIPTION: This snippet demonstrates how page-specific configurations can override layout settings in SvelteKit. By redefining the `config` object at the page level, the `regions` and nested `foo` values are altered, showcasing top-level merging behavior for configuration objects.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/20-core-concepts/40-page-options.md#2025-04-21_snippet_10\n\nLANGUAGE: js\nCODE:\n```\n/// file: src/routes/+page.js\nexport const config = {\n\tregions: ['us1', 'us2'],\n\tfoo: {\n\t\tbaz: true\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Error Page HTML Template\nDESCRIPTION: Example of a custom error page HTML template with SvelteKit's error placeholder syntax.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/30-advanced/25-errors.md#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <meta charset=\"utf-8\" />\n        <title>%sveltekit.error.message%</title>\n    </head>\n    <body>\n        <h1>My custom error page</h1>\n        <p>Status: %sveltekit.status%</p>\n        <p>Message: %sveltekit.error.message%</p>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Module Declaration for SvelteKit Forms\nDESCRIPTION: Module declaration statement for the $app/forms module which is part of SvelteKit's core functionality.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/98-reference/20-$app-forms.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> MODULE: $app/forms\n```\n\n----------------------------------------\n\nTITLE: Implementing HTML Minification in SvelteKit\nDESCRIPTION: Shows how to add HTML minification to a SvelteKit project using html-minifier. This code snippet defines a server hook that minifies HTML output during the build process.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/60-appendix/40-migrating.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// @filename: ambient.d.ts\n/// <reference types=\"@sveltejs/kit\" />\ndeclare module 'html-minifier';\n\n// @filename: index.js\n// ---cut---\nimport { minify } from 'html-minifier';\nimport { building } from '$app/environment';\n\nconst minification_options = {\n\tcollapseBooleanAttributes: true,\n\tcollapseWhitespace: true,\n\tconservativeCollapse: true,\n\tdecodeEntities: true,\n\thtml5: true,\n\tignoreCustomComments: [/^#/],\n\tminifyCSS: true,\n\tminifyJS: false,\n\tremoveAttributeQuotes: true,\n\tremoveComments: false, // some hydration code needs comments, so leave them in\n\tremoveOptionalTags: true,\n\tremoveRedundantAttributes: true,\n\tremoveScriptTypeAttributes: true,\n\tremoveStyleLinkTypeAttributes: true,\n\tsortAttributes: true,\n\tsortClassName: true\n};\n\n/** @type {import('@sveltejs/kit').Handle} */\nexport async function handle({ event, resolve }) {\n\tlet page = '';\n\n\treturn resolve(event, {\n\t\ttransformPageChunk: ({ html, done }) => {\n\t\t\tpage += html;\n\t\t\tif (done) {\n\t\t\t\treturn building ? minify(page, minification_options) : page;\n\t\t\t}\n\t\t}\n\t});\n}\n```\n\n----------------------------------------\n\nTITLE: Importing JSON in SvelteKit Configuration\nDESCRIPTION: Demonstrates how to import package.json details into a SvelteKit configuration file using the 'with' syntax for JSON imports.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/60-appendix/10-faq.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport pkg from './package.json' with { type: 'json' };\n```\n\n----------------------------------------\n\nTITLE: Importing Server and Public Utilities in SvelteKit\nDESCRIPTION: Demonstration of mixing server-only imports with public utility functions, which SvelteKit will detect as an error due to potential exposure of sensitive data\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/30-advanced/50-server-only-modules.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport { atlantisCoordinates } from '$lib/server/secrets.js';\n\nexport const add = (a, b) => a + b;\n```\n\n----------------------------------------\n\nTITLE: Route Sort Order Example\nDESCRIPTION: Demonstrates the priority order of different route types in SvelteKit's routing system.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/30-advanced/10-advanced-routing.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsrc/routes/[...catchall]/+page.svelte\nsrc/routes/[[a=x]]/+page.svelte\nsrc/routes/[b]/+page.svelte\nsrc/routes/foo-[c]/+page.svelte\nsrc/routes/foo-abc/+page.svelte\n```\n\n----------------------------------------\n\nTITLE: Module Reference - SvelteKit $env/dynamic/private\nDESCRIPTION: Built-in SvelteKit module reference for dynamically accessing private environment variables that should not be exposed to client-side code.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/98-reference/25-$env-dynamic-private.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> MODULE: $env/dynamic/private\n```\n\n----------------------------------------\n\nTITLE: Component Remounting Pattern\nDESCRIPTION: Shows how to force component remounting on navigation using the key block.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/20-core-concepts/50-state-management.md#2025-04-21_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\timport { page } from '$app/state';\n</script>\n\n{#key page.url.pathname}\n\t<BlogPost title={data.title} content={data.title} />\n{/key}\n```\n\n----------------------------------------\n\nTITLE: Updating Error Handling in SvelteKit v2\nDESCRIPTION: In SvelteKit v2, error() and redirect() functions no longer need to be thrown. Simply calling these functions is sufficient to trigger the desired behavior.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/60-appendix/30-migrating-to-sveltekit-2.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { error } from '@sveltejs/kit'\n\n// ...\nerror(500, 'something went wrong');\n```\n\n----------------------------------------\n\nTITLE: Netlify Build Configuration\nDESCRIPTION: Basic netlify.toml configuration specifying build command and publish directory for SvelteKit deployment.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/25-build-and-deploy/80-adapter-netlify.md#2025-04-21_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[build]\n\tcommand = \"npm run build\"\n\tpublish = \"build\"\n```\n\n----------------------------------------\n\nTITLE: Rest Parameter Data Structure Example\nDESCRIPTION: Shows the resulting parameter object structure when accessing a route with rest parameters.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/30-advanced/10-advanced-routing.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// @noErrors\n{\n\torg: 'sveltejs',\n\trepo: 'kit',\n\tbranch: 'main',\n\tfile: 'documentation/docs/04-advanced-routing.md'\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Dynamic Public Environment Variables in SvelteKit\nDESCRIPTION: Shows how to import and use dynamic public environment variables from the $env/dynamic/public module. Only variables beginning with PUBLIC_ prefix (by default) are accessible. Note that this approach increases network request size and cannot be used during prerendering.\nSOURCE: https://github.com/sveltejs/kit/blob/main/packages/kit/src/types/synthetic/$env+dynamic+public.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { env } from '$env/dynamic/public';\nconsole.log(env.PUBLIC_DEPLOYMENT_SPECIFIC_VARIABLE);\n```\n\n----------------------------------------\n\nTITLE: Context Usage in Child Component\nDESCRIPTION: Demonstrates how to retrieve and use context-based state in a child component.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/20-core-concepts/50-state-management.md#2025-04-21_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\timport { getContext } from 'svelte';\n\n\t// Retrieve user store from context\n\tconst user = getContext('user');\n</script>\n\n<p>Welcome {user().name}</p>\n```\n\n----------------------------------------\n\nTITLE: Handling Top-Level Promises in SvelteKit v2 Load Functions\nDESCRIPTION: SvelteKit v2 no longer automatically awaits top-level promises in load functions. This example shows how to handle a single promise in a load function.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/60-appendix/30-migrating-to-sveltekit-2.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('./$types').PageServerLoad} */\nexport async function load({ fetch }) {\n\tconst response = await fetch(url).then(r => r.json());\n\treturn { response }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing pnpm Globally with npm\nDESCRIPTION: Command to install pnpm globally using npm, which is required for working with the SvelteKit monorepo.\nSOURCE: https://github.com/sveltejs/kit/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -g pnpm\n```\n\n----------------------------------------\n\nTITLE: Configuring Systemd Socket for SvelteKit Node Application\nDESCRIPTION: This INI configuration sets up a systemd socket unit to enable socket activation for a SvelteKit Node application. It configures the socket to listen on port 3000 and automatically start when connections are made to that port.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/25-build-and-deploy/40-adapter-node.md#2025-04-21_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\n/// file: /etc/systemd/system/myapp.socket\n[Socket]\nListenStream=3000\n\n[Install]\nWantedBy=sockets.target\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables via Command Line\nDESCRIPTION: Demonstrates how to override environment variables from .env files using command line arguments when running npm scripts.\nSOURCE: https://github.com/sveltejs/kit/blob/main/packages/kit/src/types/synthetic/$env+static+private.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nMY_FEATURE_FLAG=\"enabled\" npm run dev\n```\n\n----------------------------------------\n\nTITLE: Implementing Root Layout Rewind Pattern in SvelteKit\nDESCRIPTION: Example of a Svelte layout component that rewinds to the root layout by using the @. syntax. The component imports and uses a reusable layout component while passing data and children props.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/30-advanced/10-advanced-routing.md#2025-04-21_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<!--- file: src/routes/nested/route/+layout@.svelte --->\n<script>\n\timport ReusableLayout from '$lib/ReusableLayout.svelte';\n\tlet { data, children } = $props();\n</script>\n\n<ReusableLayout {data}>\n\t{@render children()}\n</ReusableLayout>\n```\n\n----------------------------------------\n\nTITLE: Updating Route Resolution in SvelteKit v2\nDESCRIPTION: SvelteKit v2 replaces the resolvePath function with resolveRoute, which takes base into account when resolving routes.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/60-appendix/30-migrating-to-sveltekit-2.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { resolveRoute } from '$app/paths';\n\nconst path = resolveRoute('/blog/[slug]', { slug });\n```\n\n----------------------------------------\n\nTITLE: Edge Function Configuration\nDESCRIPTION: Example of configuring a route to use Vercel Edge Functions through the config export in a page file.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/25-build-and-deploy/90-adapter-vercel.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('@sveltejs/adapter-vercel').Config} */\nexport const config = {\n\truntime: 'edge'\n};\n```\n\n----------------------------------------\n\nTITLE: Running SvelteKit Sync Command\nDESCRIPTION: The svelte-kit sync command is used to create tsconfig.json and generate types for a SvelteKit project. It's typically run automatically as part of the npm lifecycle via the prepare script.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/98-reference/52-cli.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsvelte-kit sync\n```\n\n----------------------------------------\n\nTITLE: Simple API Interaction Example\nDESCRIPTION: Shows a basic example of interacting with a server endpoint using fetch instead of form actions.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/20-core-concepts/30-form-actions.md#2025-04-21_snippet_9\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tfunction rerun() {\n\t\tfetch('/api/ci', {\n\t\t\tmethod: 'POST'\n\t\t});\n\t}\n</script>\n\n<button onclick={rerun}>Rerun CI</button>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('./$types').RequestHandler} */\nexport function POST() {\n\t// do something\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for SvelteKit Vercel Adapter\nDESCRIPTION: Markdown content describing the SvelteKit adapter for Vercel, including links to official documentation and changelog information.\nSOURCE: https://github.com/sveltejs/kit/blob/main/packages/adapter-vercel/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# adapter-vercel\n\nA SvelteKit adapter that creates a Vercel app.\n\n## Docs\n\n[Docs](https://svelte.dev/docs/kit/adapter-vercel)\n\n## Changelog\n\n[The Changelog for this package is available on GitHub](https://github.com/sveltejs/kit/blob/main/packages/adapter-vercel/CHANGELOG.md).\n```\n\n----------------------------------------\n\nTITLE: Migrating from $app/stores to $app/state in Svelte Components\nDESCRIPTION: Example showing how to update imports and usage patterns when migrating from the deprecated $app/stores to the new $app/state module based on Svelte 5 runes API. The new approach removes the need for $ store prefixes.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/60-appendix/30-migrating-to-sveltekit-2.md#2025-04-21_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\t---import { page } from '$app/stores';---\n\t+++import { page } from '$app/state';+++\n</script>\n\n---{$page.data}---\n+++{page.data}+++\n```\n\n----------------------------------------\n\nTITLE: Netlify Functions Configuration\nDESCRIPTION: Configuration for custom Netlify functions directory in netlify.toml.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/25-build-and-deploy/80-adapter-netlify.md#2025-04-21_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[build]\n\tcommand = \"npm run build\"\n\tpublish = \"build\"\n\n[functions]\n\tdirectory = \"functions\"\n```\n\n----------------------------------------\n\nTITLE: Declaring Files with Side Effects\nDESCRIPTION: This configuration snippet lists specific files with side effects in the `sideEffects` field of `package.json`, allowing bundlers to handle them correctly during optimization processes.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/30-advanced/70-packaging.md#2025-04-21_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"sideEffects\": [\n    \t\"**/*.css\",\n    \t\"./dist/sideEffectfulFile.js\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Sapper Stores to SvelteKit Stores in JavaScript\nDESCRIPTION: Demonstrates how to replace Sapper's store import and usage with SvelteKit's equivalent. This snippet shows the old Sapper way of accessing stores and the new SvelteKit approach using imports from $app/stores.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/60-appendix/40-migrating.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// @filename: ambient.d.ts\ndeclare module '@sapper/app';\n\n// @filename: index.js\n// ---cut---\nimport { stores } from '@sapper/app';\nconst { preloading, page, session } = stores();\n```\n\n----------------------------------------\n\nTITLE: Version History Documentation\nDESCRIPTION: Markdown changelog documenting version history and changes for the Vercel adapter, including features like symlink functions for route observability, edge function generation, and various bug fixes and dependency updates.\nSOURCE: https://github.com/sveltejs/kit/blob/main/packages/adapter-vercel/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @sveltejs/adapter-vercel\n\n## 5.7.0\n### Minor Changes\n\n- feat: create symlink functions for each route, for better observability ([#13679](https://github.com/sveltejs/kit/pull/13679))\n\n### Patch Changes\n\n- Updated dependencies [[`7fd7bcb7142e7d0d2dd64174fa1a94d56a45d643`](https://github.com/sveltejs/kit/commit/7fd7bcb7142e7d0d2dd64174fa1a94d56a45d643)]:\n  - @sveltejs/kit@2.20.4\n```\n\n----------------------------------------\n\nTITLE: Configuring Systemd Service for SvelteKit Node Application\nDESCRIPTION: This INI configuration creates a systemd service unit for running a SvelteKit Node application. It sets environment variables including NODE_ENV and IDLE_TIMEOUT, with the latter enabling automatic shutdown after a period of inactivity.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/25-build-and-deploy/40-adapter-node.md#2025-04-21_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n/// file: /etc/systemd/system/myapp.service\n[Service]\nEnvironment=NODE_ENV=production IDLE_TIMEOUT=60\nExecStart=/usr/bin/node /usr/bin/myapp/build\n```\n\n----------------------------------------\n\nTITLE: Alternative way of using $types for Type Safety in SvelteKit - layout\nDESCRIPTION: Shows the old way of using $types for type safety in Svelte layout components. \nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/20-core-concepts/10-routing.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n/// file: +layout.svelte\n/** @type {{ data: import('./$types').LayoutData, children: Snippet }} */\nlet { data, children } = $props();\n```\n\n----------------------------------------\n\nTITLE: Legacy Svelte Field in package.json\nDESCRIPTION: This snippet retains the legacy `svelte` field in `package.json` for compatibility with older tooling. It points to the root entry point of the Svelte library.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/30-advanced/70-packaging.md#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"svelte\": \"./dist/index.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Layout Directory Structure\nDESCRIPTION: Shows how to organize routes with grouped layouts using parentheses notation.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/30-advanced/10-advanced-routing.md#2025-04-21_snippet_6\n\nLANGUAGE: tree\nCODE:\n```\nsrc/routes/\n│ (app)/\n│ ├ dashboard/\n│ ├ item/\n│ └ +layout.svelte\n│ (marketing)/\n│ ├ about/\n│ ├ testimonials/\n│ └ +layout.svelte\n├ admin/\n└ +layout.svelte\n```\n\n----------------------------------------\n\nTITLE: Version Documentation in Markdown\nDESCRIPTION: Markdown formatted changelog entries detailing version updates, fixes, and changes to the @sveltejs/enhanced-img package.\nSOURCE: https://github.com/sveltejs/kit/blob/main/packages/enhanced-img/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @sveltejs/enhanced-img\n\n## 0.4.4\n### Patch Changes\n\n\n- fix: handle duplicate SVG images\n\n## 0.4.3\n### Patch Changes\n\n\n- fix: properly handle multiple SVGs\n\n## 0.4.2\n### Patch Changes\n\n\n- feat: set intrinsic width and height for SVGs\n\n\n- perf: directly inline values since Svelte no longer inlines variables into template\n```\n\n----------------------------------------\n\nTITLE: Enabling Node.js Compatibility in Cloudflare Workers\nDESCRIPTION: This JSON configuration snippet shows how to enable Node.js compatibility for a Cloudflare Workers project by adding the 'nodejs_compat' flag to the wrangler.jsonc file.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/25-build-and-deploy/70-adapter-cloudflare-workers.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n/// file: wrangler.jsonc\n{\n\t\"compatibility_flags\": [\"nodejs_compat\"]\n}\n```\n\n----------------------------------------\n\nTITLE: 404 Error Handler Route Definition\nDESCRIPTION: File structure example showing how to implement custom 404 error handling with nested routes.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/30-advanced/10-advanced-routing.md#2025-04-21_snippet_2\n\nLANGUAGE: tree\nCODE:\n```\nsrc/routes/\n├ marx-brothers/\n│ ├ chico/\n│ ├ harpo/\n│ ├ groucho/\n│ └ +error.svelte\n└ +error.svelte\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up the SvelteKit Repository\nDESCRIPTION: Commands to clone the SvelteKit repository from GitHub, navigate to the project directory, and install all dependencies using pnpm.\nSOURCE: https://github.com/sveltejs/kit/blob/main/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:sveltejs/kit.git\ncd kit\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Using Generated Types in SvelteKit Page Load Function\nDESCRIPTION: Demonstrates how to use auto-generated types in a page load function. This ensures type safety for route parameters and other arguments passed to the load function.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/98-reference/54-types.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('./$types').PageLoad} */\nexport async function load({ params, fetch }) {\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New SvelteKit Projects with create-svelte\nDESCRIPTION: Commands for initializing a new SvelteKit project either in the current directory or in a new directory. Uses npm init svelte command to scaffold the project.\nSOURCE: https://github.com/sveltejs/kit/blob/main/packages/adapter-static/test/apps/spa/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# create a new project in the current directory\nnpm init svelte\n\n# create a new project in my-app\nnpm init svelte my-app\n```\n\n----------------------------------------\n\nTITLE: Building SvelteKit for Production\nDESCRIPTION: Command to create a production build of the SvelteKit application. Requires installing an appropriate adapter for the target environment first.\nSOURCE: https://github.com/sveltejs/kit/blob/main/packages/adapter-static/test/apps/spa/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Disable Scroll Navigation Configuration\nDESCRIPTION: Example of preventing automatic scrolling after navigation using data-sveltekit-noscroll attribute\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/30-advanced/30-link-options.md#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"path\" data-sveltekit-noscroll>Path</a>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Git Hooks for Pre-commit Checks\nDESCRIPTION: Command to configure Git to use the repository's hooks, which helps ensure code passes linting and other checks before committing.\nSOURCE: https://github.com/sveltejs/kit/blob/main/CONTRIBUTING.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit config core.hookspath .githooks\n```\n\n----------------------------------------\n\nTITLE: Defining a Markdown Document Title in SvelteKit\nDESCRIPTION: This defines the title of a markdown document as 'Advanced' using YAML frontmatter. This format is commonly used in SvelteKit documentation to specify metadata for pages.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/30-advanced/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Advanced\n---\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests with Repetition to Identify Flakiness\nDESCRIPTION: Command for running Playwright tests with specific parameters to help identify and fix flaky tests by repeating tests until a failure occurs.\nSOURCE: https://github.com/sveltejs/kit/blob/main/CONTRIBUTING.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test --workers=1 --repeat-each 1000 --max-failures 1 -g \"accepts a Request object\"\n```\n\n----------------------------------------\n\nTITLE: Setting Auto Prerender Mode in SvelteKit\nDESCRIPTION: Demonstrates setting prerender to 'auto' mode, which allows both prerendering and inclusion in the SSR manifest.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/20-core-concepts/40-page-options.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const prerender = 'auto';\n```\n\n----------------------------------------\n\nTITLE: Installing SvelteKit from a PR for Testing\nDESCRIPTION: Command to test a pull request by installing SvelteKit directly from the PR preview build using npm.\nSOURCE: https://github.com/sveltejs/kit/blob/main/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm add https://pkg.pr.new/sveltejs/kit/@sveltejs/kit@YOUR_PR_NUMBER_GOES_HERE\n```\n\n----------------------------------------\n\nTITLE: Starting SvelteKit Development Server\nDESCRIPTION: Commands for starting the development server after installing dependencies. Includes option to automatically open the app in a new browser tab.\nSOURCE: https://github.com/sveltejs/kit/blob/main/packages/adapter-static/test/apps/spa/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n\n# or start the server and open the app in a new browser tab\nnpm run dev -- --open\n```\n\n----------------------------------------\n\nTITLE: Alternative way of using $types for Type Safety in SvelteKit\nDESCRIPTION: Shows the old way of using $types for type safety in Svelte components. \nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/20-core-concepts/10-routing.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n/// file: +page.svelte\n/** @type {{ data: import('./$types').PageData, form: import('./$types').ActionData }} */\nlet { data, form } = $props();\n```\n\n----------------------------------------\n\nTITLE: Declaring Empty Environment Variables\nDESCRIPTION: Shows how to declare environment variables in .env files even when they don't have initial values. This is required for all environment variables referenced in the code.\nSOURCE: https://github.com/sveltejs/kit/blob/main/packages/kit/src/types/synthetic/$env+static+private.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nMY_FEATURE_FLAG=\"\"\n```\n\n----------------------------------------\n\nTITLE: Default Unexpected Error JSON Structure\nDESCRIPTION: Shows the default JSON structure for unexpected errors in SvelteKit.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/30-advanced/25-errors.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{ \"message\": \"Internal Error\" }\n```\n\n----------------------------------------\n\nTITLE: Buggy Component State Example\nDESCRIPTION: Shows incorrect handling of component state that doesn't account for component reuse during navigation.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/20-core-concepts/50-state-management.md#2025-04-21_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\t/** @type {import('./$types').PageProps} */\n\tlet { data } = $props();\n\n\t// THIS CODE IS BUGGY!\n\tconst wordCount = data.content.split(' ').length;\n\tconst estimatedReadingTime = wordCount / 250;\n</script>\n\n<header>\n\t<h1>{data.title}</h1>\n\t<p>Reading time: {Math.round(estimatedReadingTime)} minutes</p>\n</header>\n\n<div>{@html data.content}</div>\n```\n\n----------------------------------------\n\nTITLE: Version 3.0.8 Patch\nDESCRIPTION: Fix involving optional chaining when checking router type\nSOURCE: https://github.com/sveltejs/kit/blob/main/packages/adapter-static/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 3.0.8\n### Patch Changes\n\n- fix: use optional chaining when checking router type ([#13218](https://github.com/sveltejs/kit/pull/13218))\n```\n\n----------------------------------------\n\nTITLE: Incorrect Load Function with Side Effects\nDESCRIPTION: Shows incorrect usage of side effects in a load function that modifies global state.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/20-core-concepts/50-state-management.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { user } from '$lib/user';\n\n/** @type {import('./$types').PageLoad} */\nexport async function load({ fetch }) {\n\tconst response = await fetch('/api/user');\n\n\t// NEVER DO THIS!\n\tuser.set(await response.json());\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Package Name in package.json\nDESCRIPTION: This snippet sets the name of the package in the `package.json` file, which will be available on npm. The name field is required for npm publishing and package management.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/30-advanced/70-packaging.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"name\": \"your-library\"\n}\n```\n\n----------------------------------------\n\nTITLE: Version 3.0.6 Documentation Update\nDESCRIPTION: Update of documentation URLs for new svelte.dev site and dependency updates\nSOURCE: https://github.com/sveltejs/kit/blob/main/packages/adapter-static/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 3.0.6\n### Patch Changes\n\n- docs: update URLs for new svelte.dev site ([#12857](https://github.com/sveltejs/kit/pull/12857))\n\n- Updated dependencies [[`dcbe4222a194c5f90cfc0fc020cf065f7a4e4c46`](https://github.com/sveltejs/kit/commit/dcbe4222a194c5f90cfc0fc020cf065f7a4e4c46), [`4cdbf76fbbf0c0ce7f574ef69c8daddcf954d39d`](https://github.com/sveltejs/kit/commit/4cdbf76fbbf0c0ce7f574ef69c8daddcf954d39d), [`3a9b78f04786898ca93f6d4b75ab18d26bc45192`](https://github.com/sveltejs/kit/commit/3a9b78f04786898ca93f6d4b75ab18d26bc45192), [`723eb8b31e6a22c82f730c30e485386c8676b746`](https://github.com/sveltejs/kit/commit/723eb8b31e6a22c82f730c30e485386c8676b746), [`8ec471c875345b751344e67580ff1b772ef2735b`](https://github.com/sveltejs/kit/commit/8ec471c875345b751344e67580ff1b772ef2735b)]]\n  - @sveltejs/kit@2.7.3\n```\n\n----------------------------------------\n\nTITLE: Incorrect Server-Side State Management Example\nDESCRIPTION: Demonstrates an anti-pattern where server-side state is incorrectly shared between users through a global variable.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/20-core-concepts/50-state-management.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet user;\n\n/** @type {import('./$types').PageServerLoad} */\nexport function load() {\n\treturn { user };\n}\n\n/** @satisfies {import('./$types').Actions} */\nexport const actions = {\n\tdefault: async ({ request }) => {\n\t\tconst data = await request.formData();\n\n\t\t// NEVER DO THIS!\n\t\tuser = {\n\t\t\tname: data.get('name'),\n\t\t\tembarrassingSecret: data.get('secret')\n\t\t};\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring pnpm Overrides for Local Testing\nDESCRIPTION: JSON configuration example showing how to use pnpm overrides in an existing project to test local changes to SvelteKit by linking to local package directories.\nSOURCE: https://github.com/sveltejs/kit/blob/main/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n\t// ...\n\t\"pnpm\": {\n\t\t\"overrides\": {\n\t\t\t\"@sveltejs/kit\": \"link:../path/to/svelte-kit/packages/kit\",\n\t\t\t// additionally/optional the adapter you're using\n\t\t\t\"@sveltejs/adapter-auto\": \"link:../path/to/svelte-kit/packages/adapter-auto\"\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting License in package.json\nDESCRIPTION: This snippet specifies the license type in the `package.json` file. A license indicates how your package can be used and is crucial for open-source projects.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/30-advanced/70-packaging.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"license\": \"MIT\"\n}\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry v5.0.0\nDESCRIPTION: Major version update for Netlify and Cloudflare Pages adapters\nSOURCE: https://github.com/sveltejs/kit/blob/main/packages/adapter-auto/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 5.0.0\n### Major Changes\n\n- feat: update Netlify and Cloudflare Pages major versions ([#13615](https://github.com/sveltejs/kit/pull/13615))\n```\n\n----------------------------------------\n\nTITLE: Extended Error Object Type Definition\nDESCRIPTION: Example of extending the error object with additional properties using TypeScript type definitions.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/30-advanced/25-errors.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nerror(404, {\n    message: 'Not found',\n    code: 'NOT_FOUND'\n});\n```\n\n----------------------------------------\n\nTITLE: Focus Retention Form Configuration\nDESCRIPTION: Example of maintaining focus after navigation using data-sveltekit-keepfocus attribute on a form element\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/30-advanced/30-link-options.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<form data-sveltekit-keepfocus>\n\t<input type=\"text\" name=\"query\">\n</form>\n```\n\n----------------------------------------\n\nTITLE: CSS Font Size Anti-Pattern\nDESCRIPTION: Example of problematic CSS font-size configuration that should be avoided when working with image sizes\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/40-best-practices/07-images.md#2025-04-21_snippet_7\n\nLANGUAGE: css\nCODE:\n```\nhtml { font-size: 62.5%; }\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Version 4.4.2\nDESCRIPTION: Patch update fixing manifest import issues on Windows machines and updating SvelteKit dependencies.\nSOURCE: https://github.com/sveltejs/kit/blob/main/packages/adapter-netlify/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 4.4.2\n### Patch Changes\n\n- fix: correctly import manifest on Windows machines ([#13495](https://github.com/sveltejs/kit/pull/13495))\n\n- Updated dependencies [[`28cf64589a331ea4770c0883216c5e16d1de7496`](https://github.com/sveltejs/kit/commit/28cf64589a331ea4770c0883216c5e16d1de7496), [`ef1e8047225e7a79c6d121d8ed1a571e5ea44f08`](https://github.com/sveltejs/kit/commit/ef1e8047225e7a79c6d121d8ed1a571e5ea44f08), [`2e6527b92875976b79cc00e7b75ee0ad8b69a239`](https://github.com/sveltejs/kit/commit/2e6527b92875976b79cc00e7b75ee0ad8b69a239), [`0c0172e1463218fe63a67c587173bb3065a53c49`](https://github.com/sveltejs/kit/commit/0c0172e1463218fe63a67c587173bb3065a53c49)]:\n  - @sveltejs/kit@2.17.3\n```\n\n----------------------------------------\n\nTITLE: ISR Configuration\nDESCRIPTION: Configuration for Incremental Static Regeneration (ISR) with expiration, bypass token, and allowed query parameters.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/25-build-and-deploy/90-adapter-vercel.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { BYPASS_TOKEN } from '$env/static/private';\n\nexport const config = {\n\tisr: {\n\t\texpiration: 60,\n\t\tbypassToken: BYPASS_TOKEN,\n\t\tallowQuery: ['search']\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: Publishing a New Scoped Package to npm\nDESCRIPTION: Command for manually publishing a new package to npm with public access, which is required for the first publish of packages scoped to the @sveltejs organization.\nSOURCE: https://github.com/sveltejs/kit/blob/main/CONTRIBUTING.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm publish --access=public\n```\n\n----------------------------------------\n\nTITLE: Forced Page Reload Link Configuration\nDESCRIPTION: Example of forcing a full page reload instead of SvelteKit's default client-side navigation using data-sveltekit-reload attribute\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/30-advanced/30-link-options.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<a data-sveltekit-reload href=\"/path\">Path</a>\n```\n\n----------------------------------------\n\nTITLE: Version 3.0.7 Patch\nDESCRIPTION: Fix allowing dynamic routes with missing fallback in hash mode\nSOURCE: https://github.com/sveltejs/kit/blob/main/packages/adapter-static/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 3.0.7\n### Patch Changes\n\n- fix: allow dynamic routes with missing fallback in hash mode ([#13213](https://github.com/sveltejs/kit/pull/13213))\n```\n\n----------------------------------------\n\nTITLE: SvelteKit Version Control Reference\nDESCRIPTION: Example of a commit reference in the changelog showing a specific fix with the full commit hash.\nSOURCE: https://github.com/sveltejs/kit/blob/main/packages/kit/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- fix: escape names of tracked search parameters ([`d3300c6a67908590266c363dba7b0835d9a194cf`](https://github.com/sveltejs/kit/commit/d3300c6a67908590266c363dba7b0835d9a194cf))\n```\n\n----------------------------------------\n\nTITLE: Initializing SvelteKit Project with NPX\nDESCRIPTION: Commands to create a new SvelteKit project, install dependencies, and start the development server. The server will run on localhost:5173 after setup.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/10-getting-started/20-creating-a-project.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx sv create my-app\ncd my-app\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry v6.0.0\nDESCRIPTION: Major version update upgrading the Cloudflare adapter to version 7\nSOURCE: https://github.com/sveltejs/kit/blob/main/packages/adapter-auto/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 6.0.0\n### Major Changes\n\n- feat: upgrade `@sveltejs/adapter-cloudflare` to version 7 ([#13661](https://github.com/sveltejs/kit/pull/13661))\n```\n\n----------------------------------------\n\nTITLE: Setting Prerender Option in SvelteKit Layout\nDESCRIPTION: Configuration for the prerender option in the root layout file to enable static site generation.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/25-build-and-deploy/50-adapter-static.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/// file: src/routes/+layout.js\n// This can be false if you're using a fallback (i.e. SPA mode)\nexport const prerender = true;\n```\n\n----------------------------------------\n\nTITLE: Character Code Conversion Example\nDESCRIPTION: JavaScript code showing how to convert characters to their hexadecimal representation for route encoding.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/30-advanced/10-advanced-routing.md#2025-04-21_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n':'.charCodeAt(0).toString(16); // '3a', hence '[x+3a]'\n```\n\n----------------------------------------\n\nTITLE: Replace State Navigation Configuration\nDESCRIPTION: Example of replacing the current history state instead of creating a new entry using data-sveltekit-replacestate attribute\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/30-advanced/30-link-options.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<a data-sveltekit-replacestate href=\"/path\">Path</a>\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry - Version 1.1.2\nDESCRIPTION: Changelog entry documenting package provenance changes in version 1.1.2\nSOURCE: https://github.com/sveltejs/kit/blob/main/packages/amp/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.1.2\n### Patch Changes\n\n- chore: package provenance ([#12567](https://github.com/sveltejs/kit/pull/12567))\n\n- Updated dependencies\n```\n\n----------------------------------------\n\nTITLE: SvelteKit Frontmatter Config\nDESCRIPTION: Markdown frontmatter configuration block defining the title of the documentation page.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/10-getting-started/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Getting started\n---\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: Basic markdown frontmatter that defines the title of the documentation page as 'Best practices'\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/40-best-practices/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Best practices\n---\n```\n\n----------------------------------------\n\nTITLE: SvelteKit Project Frontmatter\nDESCRIPTION: Basic YAML frontmatter defining the title of a SvelteKit documentation page.\nSOURCE: https://github.com/sveltejs/kit/blob/main/documentation/docs/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: SvelteKit\n---\n```\n\n----------------------------------------\n\nTITLE: SvelteKit Changelog Entry Format\nDESCRIPTION: Standard markdown format for SvelteKit changelog entries showing version number, change type (Patch/Minor/Major), and detailed change descriptions with associated pull request links.\nSOURCE: https://github.com/sveltejs/kit/blob/main/packages/kit/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.20.7\n### Patch Changes\n\n- fix: regression when serializing server data ([#13709](https://github.com/sveltejs/kit/pull/13709))\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry - Version 1.1.3\nDESCRIPTION: Changelog entry documenting provenance configuration changes in version 1.1.3\nSOURCE: https://github.com/sveltejs/kit/blob/main/packages/amp/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.1.3\n### Patch Changes\n\n- chore: configure provenance in a simpler manner ([#12570](https://github.com/sveltejs/kit/pull/12570))\n\n- Updated dependencies\n```"
  }
]