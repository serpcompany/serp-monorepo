[
  {
    "owner": "beanieodm",
    "repo": "beanie",
    "content": "TITLE: Example usage of Beanie ODM with MongoDB\nDESCRIPTION: Demonstrates how to use Beanie ODM to define document models, initialize the database connection, insert documents, and perform queries. It showcases Beanie's integration with Pydantic for data modeling and Motor for async MongoDB operations.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/index.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom typing import Optional\n\nfrom motor.motor_asyncio import AsyncIOMotorClient\nfrom pydantic import BaseModel\n\nfrom beanie import Document, Indexed, init_beanie\n\n\nclass Category(BaseModel):\n    name: str\n    description: str\n\n\nclass Product(Document):\n    name: str                          # You can use normal types just like in pydantic\n    description: Optional[str] = None\n    price: Indexed(float)              # You can also specify that a field should correspond to an index\n    category: Category                 # You can include pydantic models as well\n\n\n# This is an asynchronous example, so we will access it from an async function\nasync def example():\n    # Beanie uses Motor async client under the hood \n    client = AsyncIOMotorClient(\"mongodb://user:pass@host:27017\")\n\n    # Initialize beanie with the Product document class\n    await init_beanie(database=client.db_name, document_models=[Product])\n\n    chocolate = Category(name=\"Chocolate\", description=\"A preparation of roasted and ground cacao seeds.\")\n    # Beanie documents work just like pydantic models\n    tonybar = Product(name=\"Tony's\", price=5.95, category=chocolate)\n    # And can be inserted into the database\n    await tonybar.insert() \n    \n    # You can find documents with pythonic syntax\n    product = await Product.find_one(Product.price < 10)\n    \n    # And update them\n    await product.set({Product.name:\"Gold bar\"})\n\n\nif __name__ == \"__main__\":\n    asyncio.run(example())\n```\n\n----------------------------------------\n\nTITLE: Inserting a Document with Beanie ODM\nDESCRIPTION: The insert method saves the current document instance to the MongoDB collection. It accepts an optional session parameter for transaction support.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/document.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n | async insert(session: Optional[ClientSession] = None) -> DocType\n```\n\n----------------------------------------\n\nTITLE: Basic Beanie ODM Usage Example in Python\nDESCRIPTION: Demonstrates how to define a document model, initialize Beanie, and perform basic database operations using Beanie ODM with MongoDB.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/README.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom typing import Optional\n\nfrom motor.motor_asyncio import AsyncIOMotorClient\nfrom pydantic import BaseModel\n\nfrom beanie import Document, Indexed, init_beanie\n\n\nclass Category(BaseModel):\n    name: str\n    description: str\n\n\nclass Product(Document):\n    name: str                          # You can use normal types just like in pydantic\n    description: Optional[str] = None\n    price: Indexed(float)              # You can also specify that a field should correspond to an index\n    category: Category                 # You can include pydantic models as well\n\n\n# This is an asynchronous example, so we will access it from an async function\nasync def example():\n    # Beanie uses Motor async client under the hood \n    client = AsyncIOMotorClient(\"mongodb://user:pass@host:27017\")\n\n    # Initialize beanie with the Product document class\n    await init_beanie(database=client.db_name, document_models=[Product])\n\n    chocolate = Category(name=\"Chocolate\", description=\"A preparation of roasted and ground cacao seeds.\")\n    # Beanie documents work just like pydantic models\n    tonybar = Product(name=\"Tony's\", price=5.95, category=chocolate)\n    # And can be inserted into the database\n    await tonybar.insert() \n    \n    # You can find documents with pythonic syntax\n    product = await Product.find_one(Product.price < 10)\n    \n    # And update them\n    await product.set({Product.name:\"Gold bar\"})\n\n\nif __name__ == \"__main__\":\n    asyncio.run(example())\n```\n\n----------------------------------------\n\nTITLE: Installing Beanie with PIP\nDESCRIPTION: Basic installation of Beanie package using pip package manager.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/getting-started.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install beanie\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Document Class in Python with Beanie\nDESCRIPTION: This snippet demonstrates how to create a basic document class using Beanie, including field definitions, indexing, and collection settings.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/defining-a-document.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Optional\n\nimport pymongo\nfrom pydantic import BaseModel\n\nfrom beanie import Document, Indexed\n\n\nclass Category(BaseModel):\n    name: str\n    description: str\n\n\nclass Product(Document):  # This is the model\n    name: str\n    description: Optional[str] = None\n    price: Indexed(float, pymongo.DESCENDING)\n    category: Category\n\n    class Settings:\n        name = \"products\"\n        indexes = [\n            [\n                (\"name\", pymongo.TEXT),\n                (\"description\", pymongo.TEXT),\n            ],\n        ]\n```\n\n----------------------------------------\n\nTITLE: Initializing Beanie with Document Models\nDESCRIPTION: Sample code showing how to define document models and initialize Beanie with a MongoDB connection. Demonstrates field types including indexed fields and nested Pydantic models.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/getting-started.md#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Optional\n\nimport motor.motor_asyncio\nfrom motor.motor_asyncio import AsyncIOMotorClient\nfrom pydantic import BaseModel\n\nfrom beanie import Document, Indexed, init_beanie\n\n\nclass Category(BaseModel):\n    name: str\n    description: str\n\n\n# This is the model that will be saved to the database\nclass Product(Document):\n    name: str                          # You can use normal types just like in pydantic\n    description: Optional[str] = None\n    price: Indexed(float)              # You can also specify that a field should correspond to an index\n    category: Category                 # You can include pydantic models as well\n\n\n# Call this from within your event loop to get beanie setup.\nasync def init():\n    # Create Motor client\n    client = AsyncIOMotorClient(\"mongodb://user:pass@host:27017\")\n\n    # Init beanie with the Product document class\n    await init_beanie(database=client.db_name, document_models=[Product])\n```\n\n----------------------------------------\n\nTITLE: Inserting Multiple Documents with Beanie ODM\nDESCRIPTION: Class method to insert multiple documents to the collection. Takes a list of documents and returns InsertManyResult from pymongo.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/document.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n | @classmethod\n | async insert_many(cls: Type[DocType], documents: List[DocType], session: Optional[ClientSession] = None) -> InsertManyResult\n```\n\n----------------------------------------\n\nTITLE: Initializing Beanie ODM with MongoDB using Python\nDESCRIPTION: This code snippet demonstrates how to initialize Beanie ODM with MongoDB. It creates a Motor client, defines a Sample document class, and initializes Beanie with the database and document model.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/init.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom beanie import init_beanie, Document\nfrom motor.motor_asyncio import AsyncIOMotorClient\n\nclass Sample(Document):\n    name: str\n\nasync def init():\n    # Create Motor client\n    client = AsyncIOMotorClient(\n        \"mongodb://user:pass@host:27017\"\n    )\n\n    # Initialize beanie with the Sample document class and a database\n    await init_beanie(database=client.db_name, document_models=[Sample])\n```\n\n----------------------------------------\n\nTITLE: Using Indexed Fields in Beanie Documents\nDESCRIPTION: This snippet shows how to use the Indexed function to create indexed fields in Beanie documents, including specifying index types and unique constraints.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/defining-a-document.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom beanie import Indexed\n\n\nclass Sample(Document):\n    num: Indexed(int)\n    description: str\n\nclass Sample(Document):\n    description: Indexed(str, index_type=pymongo.TEXT)\n\nclass Sample(Document):\n    name: Indexed(str, unique=True)\n```\n\n----------------------------------------\n\nTITLE: Defining Direct Link Relations in Python with Beanie ODM\nDESCRIPTION: This snippet demonstrates how to define a direct link between two document classes (Door and House) using Beanie ODM in Python. It shows the basic structure for creating document relations.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/relations.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom beanie import Document, Link\n\n\nclass Door(Document):\n    height: int = 2\n    width: int = 1\n\n\nclass House(Document):\n    name: str\n    door: Link[Door]\n```\n\n----------------------------------------\n\nTITLE: Configuring Document Settings in Beanie\nDESCRIPTION: This example demonstrates how to configure various settings for a Beanie document, including collection name, indexes, and BSON encoders.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/defining-a-document.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass DocumentTestModelWithIndex(Document):\n    test_int: int\n    test_list: List[SubDocument]\n    test_str: str\n\n    class Settings:\n        indexes = [\n            \"test_int\",\n            [\n                (\"test_int\", pymongo.ASCENDING),\n                (\"test_str\", pymongo.DESCENDING),\n            ],\n            IndexModel(\n                [(\"test_str\", pymongo.DESCENDING)],\n                name=\"test_string_index_DESCENDING\",\n            ),\n        ]\n```\n\n----------------------------------------\n\nTITLE: Defining Beanie Document Models in Python\nDESCRIPTION: This snippet shows how to define Beanie document models using Pydantic. It includes a Category model and a Product document with indexed fields and custom settings.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/insert.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Optional\n\nfrom pydantic import BaseModel\n\nfrom beanie import Document, Indexed\n\n\nclass Category(BaseModel):\n    name: str\n    description: str\n\n\nclass Product(Document):  # This is the model\n    name: str\n    description: Optional[str] = None\n    price: Indexed(float)\n    category: Category\n\n    class Settings:\n        name = \"products\"\n\n\nchocolate = Category(name=\"Chocolate\", description=\"A preparation of roasted and ground cacao seeds.\")\ntonybar = Product(name=\"Tony's\", price=5.95, category=chocolate)\nmarsbar = Product(name=\"Mars\", price=1, category=chocolate)\n```\n\n----------------------------------------\n\nTITLE: Initializing Beanie ODM with Document Models as Strings in Python\nDESCRIPTION: This code snippet shows an alternative way to initialize Beanie ODM by specifying document models as strings with dot-separated paths. This approach allows for more flexibility in specifying document models.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/init.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nawait init_beanie(\n        database=client.db_name,\n        document_models=[\n            \"app.models.DemoDocument\",\n        ],\n    )\n```\n\n----------------------------------------\n\nTITLE: Defining Document Class in Beanie ODM\nDESCRIPTION: The Document class is the primary class for mapping Python objects to MongoDB documents. It inherits from Pydantic BaseModel and UpdateMethods interfaces to provide schema validation and update operations.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/document.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Document(BaseModel,  UpdateMethods)\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Documents with Beanie ODM\nDESCRIPTION: Class method to retrieve all documents in the collection. Supports pagination, sorting and projection. Returns a FindMany query object.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/document.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n | @classmethod\n | find_all(cls, skip: Optional[int] = None, limit: Optional[int] = None, sort: Union[None, str, List[Tuple[str, SortDirection]]] = None, projection_model: Optional[Type[BaseModel]] = None, session: Optional[ClientSession] = None) -> FindMany\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Document by ID with Beanie ODM\nDESCRIPTION: Class method to get a document by its ID. Returns the document instance or None if not found.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/document.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n | @classmethod\n | async get(cls: Type[DocType], document_id: PydanticObjectId, session: Optional[ClientSession] = None) -> Optional[DocType]\n```\n\n----------------------------------------\n\nTITLE: Setting Up Multi-Field Indexes Using Settings Class in Python\nDESCRIPTION: This snippet demonstrates how to set up complex, multi-field indexes using the indexes field of the inner Settings class in Beanie ODM. It shows various ways to define indexes, including single key, list of key-direction pairs, and PyMongo IndexModel instances.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/indexes.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport pymongo\nfrom pymongo import IndexModel\n\nfrom beanie import Document\n\n\nclass Sample(Document):\n    test_int: int\n    test_str: str\n\n    class Settings:\n        indexes = [\n            \"test_int\",\n            [\n                (\"test_int\", pymongo.ASCENDING),\n                (\"test_str\", pymongo.DESCENDING),\n            ],\n            IndexModel(\n                [(\"test_str\", pymongo.DESCENDING)],\n                name=\"test_string_index_DESCENDING\",\n            ),\n        ]\n```\n\n----------------------------------------\n\nTITLE: Implementing find_many Method for FindMany in Python\nDESCRIPTION: Method to find multiple documents by criteria with options for skip, limit, sort, and projection. It returns a FindMany query instance for chaining additional operations.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/queries.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n | find_many(*args: Union[Dict[str, Any], Mapping[str, Any], bool], *, skip: Optional[int] = None, limit: Optional[int] = None, sort: Union[None, str, List[Tuple[str, SortDirection]]] = None, projection_model: Optional[Type[BaseModel]] = None, session: Optional[ClientSession] = None) -> \"FindMany\"\n```\n\n----------------------------------------\n\nTITLE: Inserting Single Documents with Beanie in Python\nDESCRIPTION: This snippet demonstrates how to insert a single document into the database using Beanie's insert(), create(), or insert_one() methods. These methods are asynchronous and should be awaited.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/insert.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nawait tonybar.insert()\nawait marsbar.create()  # does exactly the same as insert()\n\n# Alternative method\nawait Product.insert_one(tonybar)\n```\n\n----------------------------------------\n\nTITLE: Searching by Linked Document Fields in Python with Beanie ODM\nDESCRIPTION: These code snippets demonstrate how to search documents by fields of linked documents in Beanie ODM. It shows querying by direct link fields, list of links fields, and linked document IDs.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/relations.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nhouses = await House.find(\n    House.door.height == 2,\n    fetch_links=True\n).to_list()\n\nhouses = await House.find(\n    House.windows.x > 10,\n    fetch_links=True\n).to_list()\n\nhouses = await House.find(\n    House.door.id == PydanticObjectId(\"DOOR_ID_HERE\")\n).to_list()\n```\n\n----------------------------------------\n\nTITLE: Saving Changes to Existing Documents in Beanie ODM (Python)\nDESCRIPTION: Demonstrates how to use the save() method to update an existing document in the database. This method will insert the document if it doesn't exist.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/update.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nbar = await Product.find_one(Product.name == \"Mars\")\nbar.price = 10\nawait bar.save()\n```\n\n----------------------------------------\n\nTITLE: Complex Queries with Multiple Criteria\nDESCRIPTION: Examples of complex queries using multiple search criteria and method chaining\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/find.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nchocolates = await Product.find(\n    Product.category.name == \"Chocolate\",\n    Product.price < 5\n).to_list()\n```\n\nLANGUAGE: python\nCODE:\n```\nchocolates = await Product\n              .find(Product.category.name == \"Chocolate\")\n              .find(Product.price < 5).to_list()\n```\n\n----------------------------------------\n\nTITLE: Basic Document Query in Beanie ODM\nDESCRIPTION: Demonstrates basic document querying using find() and find_many() methods with async iteration and list conversion\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/find.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfindresult = Product.find(search_criteria)\n```\n\nLANGUAGE: python\nCODE:\n```\nasync for result in Product.find(search_criteria):\n    print(result)\n```\n\nLANGUAGE: python\nCODE:\n```\nresult = await Product.find(search_criteria).to_list()\n```\n\nLANGUAGE: python\nCODE:\n```\nresult = await Product.find(search_criteria).first_or_none()\n```\n\n----------------------------------------\n\nTITLE: Aggregation with Beanie ODM\nDESCRIPTION: Class method to perform MongoDB aggregation operations. Takes an aggregation pipeline as a list and optional projection model. Returns an AggregationQuery object.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/document.md#2025-04-17_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n | @classmethod\n | aggregate(cls, aggregation_pipeline: list, projection_model: Type[BaseModel] = None, session: Optional[ClientSession] = None) -> AggregationQuery\n```\n\n----------------------------------------\n\nTITLE: Data Projections\nDESCRIPTION: Implementation of projections to fetch specific fields using Pydantic models\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/find.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass ProductShortView(BaseModel):\n    name: str\n    price: float\n\n\nchocolates = await Product.find(\n    Product.category.name == \"Chocolate\").project(ProductShortView).to_list()\n```\n\nLANGUAGE: python\nCODE:\n```\nclass ProductView(BaseModel):\n    name: str\n    category: str\n\n    class Settings:\n        projection = {\"name\": 1, \"category\": \"$category.name\"}\n\n\nchocolates = await Product.find(\n    Product.category.name == \"Chocolate\").project(ProductView).to_list()\n```\n\n----------------------------------------\n\nTITLE: Fetching Linked Documents in Python with Beanie ODM\nDESCRIPTION: This snippet illustrates how to fetch linked documents during a find operation using the fetch_links parameter in Beanie ODM. It retrieves all related documents in a single aggregation query.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/relations.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nhouses = await House.find(\n    House.name == \"test\", \n    fetch_links=True\n).to_list()\n```\n\n----------------------------------------\n\nTITLE: Finding a Single Document with Beanie ODM\nDESCRIPTION: Class method to find one document by search criteria. Returns a FindOne query object that can be awaited to get the result.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/document.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n | @classmethod\n | find_one(cls, *args: Union[Dict[str, Any], Mapping[str, Any], bool], *, projection_model: Optional[Type[BaseModel]] = None, session: Optional[ClientSession] = None) -> FindOne\n```\n\n----------------------------------------\n\nTITLE: Performing Simple Update Queries in Beanie ODM (Python)\nDESCRIPTION: Demonstrates how to use set() and inc() methods for simple update operations on documents or query results.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/update.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nbar = await Product.find_one(Product.name == \"Mars\")\nawait bar.set({Product.name:\"Gold bar\"})\nbar = await Product.find(Product.price > .5).inc({Product.price: 1})\n```\n\n----------------------------------------\n\nTITLE: Using the ID Field in Beanie Documents\nDESCRIPTION: This snippet shows how to use the default ID field in Beanie documents and how to retrieve documents by ID.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/defining-a-document.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Sample(Document):\n    num: int\n    description: str\n\nfoo = await Sample.find_one(Sample.num > 5)\n\nprint(foo.id)  # This will print id\n\nbar = await Sample.get(foo.id)  # get by id\n```\n\n----------------------------------------\n\nTITLE: Updating a Document with Beanie ODM\nDESCRIPTION: Method to partially update the current document in the database. Takes update operators as positional arguments.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/document.md#2025-04-17_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n | async update(*args, *, session: Optional[ClientSession] = None) -> None\n```\n\n----------------------------------------\n\nTITLE: Defining FindMany Class in Python\nDESCRIPTION: Class for finding multiple documents that inherits from FindQuery, BaseCursorQuery, and AggregateMethods. It provides functionality for querying, sorting, and limiting results.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/queries.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass FindMany(FindQuery,  BaseCursorQuery,  AggregateMethods)\n```\n\n----------------------------------------\n\nTITLE: Implementing sort Method for FindMany in Python\nDESCRIPTION: Method to add sort parameters to the query. It accepts a string, a tuple of (key, direction), or a list of tuples specifying the sort order.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/queries.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n | sort(*args: Optional[\n |             Union[\n |                 str, Tuple[str, SortDirection], List[Tuple[str, SortDirection]]\n |             ]\n |         ]) -> \"FindMany\"\n```\n\n----------------------------------------\n\nTITLE: Defining Document Relations with Link Field in Beanie ODM (Python)\nDESCRIPTION: Demonstrates how to define a direct link to another document type using the Link class from Beanie. This allows documents to reference other documents in their fields.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/articles/1.8.0.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom beanie import Document, Link\n\nclass Door(Document):\n    height: int = 2\n    width: int = 1\n\n\nclass House(Document):\n    name: str\n    door: Link[Door]  # This is the link\n```\n\n----------------------------------------\n\nTITLE: Defining Inherited Document Models in Beanie ODM (Python)\nDESCRIPTION: This snippet demonstrates how to define a hierarchy of document models using inheritance in Beanie ODM. It includes a root Vehicle model and its child models (Bicycle, Bike, Car, Bus), as well as an Owner model with linked vehicles.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/inheritance.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Optional, List\nfrom motor.motor_asyncio import AsyncIOMotorClient\nfrom pydantic import BaseModel\nfrom beanie import Document, Link, init_beanie\n\n\nclass Vehicle(Document):\n    \"\"\"Inheritance scheme bellow\"\"\"\n    #               Vehicle\n    #              /   |   \\\n    #             /    |    \\\n    #        Bicycle  Bike  Car\n    #                         \\\n    #                          \\\n    #                          Bus\n    # shared attribute for all children\n    color: str\n    \n    class Settings:\n        is_root = True\n\n\nclass Fuelled(BaseModel):\n    \"\"\"Just a mixin\"\"\"\n    fuel: Optional[str]\n\n\nclass Bicycle(Vehicle):\n    \"\"\"Derived from Vehicle, will use its collection\"\"\"\n    frame: int\n    wheels: int\n\n\nclass Bike(Vehicle, Fuelled):\n    ...\n\n\nclass Car(Vehicle, Fuelled):\n    body: str\n\n\nclass Bus(Car, Fuelled):\n    \"\"\"Inheritance chain is Vehicle -> Car -> Bus, it is also stored in Vehicle collection\"\"\"\n    seats: int\n    \n    \nclass Owner(Document):\n    vehicles: Optional[List[Link[Vehicle]]]\n```\n\n----------------------------------------\n\nTITLE: Search Criteria and Comparison Operators\nDESCRIPTION: Shows different ways to specify search criteria using Python comparison operators and MongoDB operators\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/find.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nproducts = await Product.find(Product.price < 10).to_list()\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom beanie.operators import In\n\nproducts = await Product.find(\n    In(Product.category.name, [\"Chocolate\", \"Fruits\"])\n).to_list()\n```\n\nLANGUAGE: python\nCODE:\n```\nproducts = await Product.find({\"price\": 1000}).to_list()\n```\n\n----------------------------------------\n\nTITLE: Defining FindOne Class in Python\nDESCRIPTION: Class for finding a single document that inherits from FindQuery. It provides methods for querying, updating, deleting, and replacing individual documents.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/queries.md#2025-04-17_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nclass FindOne(FindQuery)\n```\n\n----------------------------------------\n\nTITLE: Implementing find Method for FindMany in Python\nDESCRIPTION: Alias method for find_many that provides the same functionality for finding multiple documents by criteria with pagination and sorting options.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/queries.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n | find(*args: Union[Dict[str, Any], Mapping[str, Any], bool], *, skip: Optional[int] = None, limit: Optional[int] = None, sort: Union[None, str, List[Tuple[str, SortDirection]]] = None, projection_model: Optional[Type[BaseModel]] = None, session: Optional[ClientSession] = None) -> \"FindMany\"\n```\n\n----------------------------------------\n\nTITLE: Implementing update_one Method for FindOne in Python\nDESCRIPTION: Method to create an UpdateOne query using modifications and provide search criteria. It accepts dictionary arguments for modifications and an optional session parameter.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/queries.md#2025-04-17_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n | update_one(*args: Union[Dict[str, Any], Mapping[str, Any]], *, session: Optional[ClientSession] = None) -> UpdateOne\n```\n\n----------------------------------------\n\nTITLE: Defining Indexed Fields in Beanie ODM with Python\nDESCRIPTION: Function that creates indexed fields for MongoDB collections. It returns a subclass of the provided type with metadata about the index configuration including type and additional parameters.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/fields.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nIndexed(typ, index_type=ASCENDING, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Saving a Document with Beanie ODM\nDESCRIPTION: Method to update an existing document or insert it if it doesn't exist (upsert operation). Returns the document instance.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/document.md#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n | async save(session: Optional[ClientSession] = None) -> DocType\n```\n\n----------------------------------------\n\nTITLE: Single Document Queries\nDESCRIPTION: Methods for finding single documents by ID or specific criteria\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/find.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nbar = await Product.get(\"608da169eb9e17281f0ab2ff\")\n```\n\nLANGUAGE: python\nCODE:\n```\nbar = await Product.find_one(Product.name == \"Peanut Bar\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Parameters in Beanie Document Model\nDESCRIPTION: This snippet demonstrates how to configure cache parameters including expiration time and capacity in a Beanie Document model using the Settings inner class.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/cache.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Sample(Document):\n    num: int\n    name: str\n\n    class Settings:\n        use_cache = True\n        cache_expiration_time = datetime.timedelta(seconds=10)\n        cache_capacity = 5\n```\n\n----------------------------------------\n\nTITLE: Updating All Documents with Beanie ODM\nDESCRIPTION: Class method to partially update all documents in the collection. Returns an UpdateMany query object that can be awaited to execute the update.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/document.md#2025-04-17_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n | @classmethod\n | update_all(cls, *args: Union[dict, Mapping], *, session: Optional[ClientSession] = None) -> UpdateMany\n```\n\n----------------------------------------\n\nTITLE: Complex Update Operations in Beanie ODM (Python)\nDESCRIPTION: Shows how to perform more complex update operations using the update() method with update operators.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/update.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nawait Product.find_one(Product.name == \"Tony's\").update(Set({Product.price: 3.33}))\n```\n\n----------------------------------------\n\nTITLE: Deleting a Single Document with Beanie ODM in Python\nDESCRIPTION: Demonstrates two methods to delete a single document: directly chaining the delete method to a find_one query, or finding the document first and then calling delete on the instance. Both approaches find a product by name and delete it.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/delete.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nawait Product.find_one(Product.name == \"Milka\").delete()\n\n# Or\nbar = await Product.find_one(Product.name == \"Milka\")\nawait bar.delete()\n```\n\n----------------------------------------\n\nTITLE: Defining FindQuery Base Class in Python\nDESCRIPTION: Base class for find queries that inherits from UpdateMethods and SessionMethods. It provides common functionality for all find operations including update, delete, and project methods.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/queries.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass FindQuery(UpdateMethods,  SessionMethods)\n```\n\n----------------------------------------\n\nTITLE: Inserting a Single Document with Beanie ODM\nDESCRIPTION: Class method to insert one document to the collection. Returns InsertOneResult from pymongo.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/document.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n | @classmethod\n | async insert_one(cls: Type[DocType], document: DocType, session: Optional[ClientSession] = None) -> InsertOneResult\n```\n\n----------------------------------------\n\nTITLE: Prefetching Linked Documents in Find Queries with Beanie ODM (Python)\nDESCRIPTION: Demonstrates how to use the fetch_links parameter with find methods to prefetch linked documents in a single aggregation query, making data retrieval more efficient.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/articles/1.8.0.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nhouses = await House.find(\n    House.name == \"test\", \n    fetch_links=True\n).to_list()\n```\n\n----------------------------------------\n\nTITLE: Deleting All Documents in a Collection with Beanie ODM in Python\nDESCRIPTION: Demonstrates two equivalent methods for deleting all documents in a collection: using the delete_all class method or chaining the delete method to the all method. Both approaches clear the entire collection.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/delete.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nawait Product.delete_all()\n# Or\nawait Product.all().delete()\n```\n\n----------------------------------------\n\nTITLE: Deleting Documents in Beanie ODM (Python)\nDESCRIPTION: Demonstrates various ways to delete documents using the delete() method on individual documents or query results.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/update.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nbar = await Product.find_one(Product.name == \"Milka\")\nawait bar.delete()\n\nawait Product.find_one(Product.name == \"Milka\").delete()\n\nawait Product.find(Product.category.name == \"Chocolate\").delete()\n```\n\n----------------------------------------\n\nTITLE: Enabling Validation on Save in Beanie ODM (Python)\nDESCRIPTION: Demonstrates how to enable validation on save for a document class, which ensures all field values are valid according to their type definitions before any write operation is performed.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/articles/1.8.0.md#2025-04-17_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nclass Sample(Document):\n    num: int\n    name: str\n\n    class Settings:\n        validate_on_save = True\n```\n\n----------------------------------------\n\nTITLE: Defining Optional List of Links Relations in Python with Beanie ODM\nDESCRIPTION: This code demonstrates how to create an optional list of links between document classes (Window, Yard, and House) using Beanie ODM. It combines Optional and List types for flexible relation definitions.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/relations.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List, Optional\n \nfrom beanie import Document, Link\n \nclass Window(Document):\n    x: int = 10\n    y: int = 10\n \nclass Yard(Document):\n    v: int = 10\n    y: int = 10\n \nclass House(Document):\n    name: str\n    door: Link[Door]\n    windows: List[Link[Window]]\n    yards: Optional[List[Link[Yard]]]\n```\n\n----------------------------------------\n\nTITLE: Inserting Multiple Documents with Beanie in Python\nDESCRIPTION: This snippet shows how to insert multiple documents at once using Beanie's insert_many() method. This approach reduces the number of database queries for better performance.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/insert.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nawait Product.insert_many([tonybar,marsbar])\n```\n\n----------------------------------------\n\nTITLE: Enabling Revision Feature in Beanie Document Model\nDESCRIPTION: Shows how to enable the revision tracking feature by setting use_revision=True in the document's Settings inner class. This configuration tells Beanie to store and check revision IDs with each document operation.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/revision.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Sample(Document):\n    num: int\n    name: str\n\n    class Settings:\n        use_revision = True\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateOne Class in Python\nDESCRIPTION: Defines the UpdateOne class that inherits from UpdateQuery and is used for updating a single document in the database.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/queries.md#2025-04-17_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nclass UpdateOne(UpdateQuery)\n```\n\n----------------------------------------\n\nTITLE: Deleting a Document with Beanie ODM\nDESCRIPTION: Method to delete the current document from the database. Returns a DeleteResult object from pymongo with operation details.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/document.md#2025-04-17_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n | async delete(session: Optional[ClientSession] = None) -> DeleteResult\n```\n\n----------------------------------------\n\nTITLE: Implementing And Logical Operator in Python with Beanie ODM\nDESCRIPTION: The And class implements MongoDB's $and logical query operator. It joins query clauses with a logical AND and returns documents that match all conditions.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/find.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass And(LogicalOperatorForListOfExpressions)\n```\n\nLANGUAGE: python\nCODE:\n```\nclass Product(Document):\n    price: float\n    category: str\n\nAnd({Product.price<10}, {Product.category==\"Sweets\"})\n```\n\nLANGUAGE: python\nCODE:\n```\n{\"$and\": [{\"price\": {\"$lt\": 10}}, {\"category\": \"Sweets\"}]}\n```\n\n----------------------------------------\n\nTITLE: Creating Unique Index Using Indexed Function in Python\nDESCRIPTION: This snippet illustrates how to create a unique index using the Indexed function in Beanie ODM. It uses the unique keyword argument from PyMongo's IndexModel.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/indexes.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom beanie import Document, Indexed\n\n\nclass Sample(Document):\n    name: Annotated[str, Indexed(unique=True)]\n```\n\n----------------------------------------\n\nTITLE: Replacing Documents in Beanie ODM with Error Handling (Python)\nDESCRIPTION: Shows how to use the replace() method to update a document, with error handling for non-existent documents. This method throws exceptions if the document doesn't exist or lacks an ID.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/update.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nbar.price = 10\ntry:\n    await bar.replace()\nexcept (ValueError, beanie.exceptions.DocumentNotFound):\n    print(\"Can't replace a non existing document\")\n```\n\n----------------------------------------\n\nTITLE: Enabling Document Caching in Beanie ODM (Python)\nDESCRIPTION: Demonstrates how to enable caching for a document class by setting use_cache=True in the Settings inner class, which causes query results to be cached locally to improve performance.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/articles/1.8.0.md#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nclass Sample(Document):\n    num: int\n    name: str\n\n    class Settings:\n        use_cache = True\n```\n\n----------------------------------------\n\nTITLE: Implementing update_one Method in UpdateOne Class\nDESCRIPTION: Implements the update_one method which provides modifications to the update query. It accepts dictionary-like objects with modifications and an optional session parameter.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/queries.md#2025-04-17_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n | update_one(*args: Union[Dict[str, Any], Mapping[str, Any]], *, session: Optional[ClientSession] = None)\n```\n\n----------------------------------------\n\nTITLE: Implementing delete_many Method for FindMany in Python\nDESCRIPTION: Method to provide search criteria to the DeleteMany query. It accepts an optional session parameter and returns a DeleteMany query.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/queries.md#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n | delete_many(session: Optional[ClientSession] = None) -> DeleteMany\n```\n\n----------------------------------------\n\nTITLE: Implementing Or Logical Operator in Python with Beanie ODM\nDESCRIPTION: The Or class implements MongoDB's $or logical query operator. It joins query clauses with a logical OR and returns documents that match any of the conditions.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/find.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass Or(LogicalOperatorForListOfExpressions)\n```\n\nLANGUAGE: python\nCODE:\n```\nclass Product(Document):\n    price: float\n    category: str\n\nOr({Product.price<10}, {Product.category==\"Sweets\"})\n```\n\nLANGUAGE: python\nCODE:\n```\n{\"$or\": [{\"price\": {\"$lt\": 10}}, {\"category\": \"Sweets\"}]}\n```\n\n----------------------------------------\n\nTITLE: Using the Set Operator with Beanie Document Models\nDESCRIPTION: Example usage of the Set operator to update a document field. This creates a query that sets the 'one' field to a value of 2.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/update.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Sample(Document):\n    one: int\n\nSet({Sample.one, 2})\n```\n\n----------------------------------------\n\nTITLE: Sorting and Pagination\nDESCRIPTION: Examples of sorting results and implementing pagination using skip and limit\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/find.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nchocolates = await Product.find(\n    Product.category.name == \"Chocolate\").sort(-Product.price,+Product.name).to_list()\n```\n\nLANGUAGE: python\nCODE:\n```\nchocolates = await Product.find(\n    Product.category.name == \"Chocolate\").sort(\"-price\",\"+name\").to_list()\n\nchocolates = await Product.find(\n    Product.category.name == \"Chocolate\").sort(\n    [\n        (Product.price, pymongo.DESCENDING),\n        (Product.name, pymongo.ASCENDING),\n    ]\n).to_list()\n```\n\nLANGUAGE: python\nCODE:\n```\nchocolates = await Product.find(\n    Product.category.name == \"Chocolate\").skip(2).to_list()\n\nchocolates = await Product.find(\n    Product.category.name == \"Chocolate\").limit(2).to_list()\n```\n\n----------------------------------------\n\nTITLE: Using NearSphere Operator with Beanie Documents\nDESCRIPTION: Example showing how to use the NearSphere operator with a Beanie Document model. The example demonstrates setting up a Document with a geospatial field, creating a GEO index, and using the NearSphere operator to query for documents near specific coordinates with spherical distance calculations.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/find.md#2025-04-17_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nclass GeoObject(BaseModel):\n    type: str = \"Point\"\n    coordinates: Tuple[float, float]\n\nclass Place(Document):\n    geo: GeoObject\n\n    class Settings:\n        name = \"places\"\n        indexes = [\n            [(\"geo\", pymongo.GEOSPHERE)],  # GEO index\n        ]\n\nNearSphere(Place.geo, 1.2345, 2.3456, min_distance=500)\n```\n\n----------------------------------------\n\nTITLE: Defining DeleteMany Class in Python\nDESCRIPTION: Defines the DeleteMany class that inherits from DeleteQuery and is used for deleting multiple documents matching a query.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/queries.md#2025-04-17_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nclass DeleteMany(DeleteQuery)\n```\n\n----------------------------------------\n\nTITLE: Implementing delete_one Method for FindOne in Python\nDESCRIPTION: Method to provide search criteria to the DeleteOne query. It accepts an optional session parameter and returns a DeleteOne query.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/queries.md#2025-04-17_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n | delete_one(session: Optional[ClientSession] = None) -> DeleteOne\n```\n\n----------------------------------------\n\nTITLE: Using save_changes for Partial Document Updates in Beanie ODM (Python)\nDESCRIPTION: Shows how to use the save_changes method to update only modified fields of a document, improving performance by reducing the amount of data sent to the database.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/articles/1.8.0.md#2025-04-17_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ns = await Sample.find_one(Sample.name == \"Test\")\ns.num = 100\nawait s.save_changes()\n```\n\n----------------------------------------\n\nTITLE: Defining Document Classes with UnionDoc in Beanie\nDESCRIPTION: Creates a UnionDoc parent class and two child Document classes that share the same collection. The UnionDoc class configures the collection name and class identifier field, while child classes define their specific fields and reference the parent class.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/multi-model.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom beanie import Document, UnionDoc\n\n\nclass Parent(UnionDoc):  # Union\n    class Settings:\n        name = \"union_doc_collection\"  # Collection name\n        class_id = \"_class_id\"  # _class_id is the default beanie internal field used to filter children Documents\n        \n        \nclass One(Document):\n    int_field: int = 0\n    shared: int = 0        \n\n    class Settings:\n        name = \"One\" # Name used to filer union document 'One', default to class name\n        union_doc = Parent\n\n\nclass Two(Document):\n    str_field: str = \"test\"\n    shared: int = 0\n\n    class Settings:\n        union_doc = Parent\n```\n\n----------------------------------------\n\nTITLE: Upserting Documents in Beanie ODM (Python)\nDESCRIPTION: Shows how to use the upsert() method to insert a document when no matching documents are found.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/update.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nawait Product.find_one(Product.name == \"Tony's\").upsert(\n    Set({Product.price: 3.33}), \n    on_insert=Product(name=\"Tony's\", price=3.33, category=chocolate)\n)\n```\n\n----------------------------------------\n\nTITLE: Fetching Nested Links with Depth Control in Python using Beanie ODM\nDESCRIPTION: These snippets demonstrate how to fetch nested linked documents with control over the nesting depth in Beanie ODM. It shows setting a global depth limit and field-specific depth limits.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/relations.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nawait SelfLinkedSample.find(\n    SelfLinkedSample.name == \"test\",\n    fetch_links=True,\n    nesting_depth=2\n).to_list()\n\nawait SelfLinkedSample.find(\n    SelfLinkedSample.name == \"test\",\n    fetch_links=True,\n    nesting_depths_per_field={\n        \"left\": 1,\n        \"right\": 2\n    }\n).to_list()\n```\n\n----------------------------------------\n\nTITLE: Implementing __await__ Method in DeleteMany Class\nDESCRIPTION: Implements the __await__ method for DeleteMany which enables awaiting on a DeleteMany instance, running the query and returning a DeleteResult object.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/queries.md#2025-04-17_snippet_30\n\nLANGUAGE: python\nCODE:\n```\n | __await__() -> DeleteResult\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateMany Class in Python\nDESCRIPTION: Class for updating multiple documents that inherits from UpdateQuery. It provides functionality for applying modifications to multiple documents at once.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/queries.md#2025-04-17_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nclass UpdateMany(UpdateQuery)\n```\n\n----------------------------------------\n\nTITLE: Enabling Document Revision for Concurrency Control in Beanie ODM (Python)\nDESCRIPTION: Shows how to enable revision tracking for a document class to handle concurrent operations and prevent data loss by detecting outdated document versions during updates.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/articles/1.8.0.md#2025-04-17_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nclass Sample(Document):\n    num: int\n    name: str\n\n    class Settings:\n        use_revision = True\n```\n\n----------------------------------------\n\nTITLE: Manually Fetching Linked Documents in Python with Beanie ODM\nDESCRIPTION: This code shows how to manually fetch linked documents after the initial query in Beanie ODM. It demonstrates fetching all links and fetching a single link field.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/relations.md#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nawait house.fetch_all_links()\n\nawait house.fetch_link(House.door)\n```\n\n----------------------------------------\n\nTITLE: Deleting All Documents with Beanie ODM\nDESCRIPTION: Class method to delete all documents from the collection. Returns a DeleteResult object from pymongo with operation details.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/document.md#2025-04-17_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n | @classmethod\n | async delete_all(cls, session: Optional[ClientSession] = None) -> DeleteResult\n```\n\n----------------------------------------\n\nTITLE: Implementing the Inc Operator for MongoDB Updates\nDESCRIPTION: The Inc class implements MongoDB's $inc operator in Beanie ODM for incrementing numeric field values by a specified amount.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/update.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass Inc(BaseUpdateGeneralOperator)\n```\n\n----------------------------------------\n\nTITLE: Performing Find Operations with Inheritance in Beanie ODM (Python)\nDESCRIPTION: This snippet demonstrates various find operations on inherited document models in Beanie ODM. It includes querying for all vehicle types, specific child types, and using the with_children parameter to include subclasses in the results.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/inheritance.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# this query returns vehicles of all types that have white color, because `with_children` is True\nwhite_vehicles = await Vehicle.find(Vehicle.color == 'white', with_children=True).to_list()\n# [\n#    Bicycle(..., color='white', frame=54, wheels=29),\n#    Car(fuel='diesel', ..., color='white', body='crossover'),\n#    Bus(fuel='diesel', ..., color='white', body='bus', seats=80)\n# ]\n\ncars_and_buses = await Car.find(Car.fuel == 'diesel', with_children=True).to_list()\n# [\n#     Car(fuel='diesel', ..., color='white', body='crossover'),\n#     Bus(fuel='diesel', ..., color='white', body='bus', seats=80),\n#     Bus(fuel='diesel', ..., color='yellow', body='minibus', seats=26)\n# ]\n\n# however it is possible to limit by Vehicle type\ncars_only = await Car.find().to_list()\n# [\n#     Car(fuel='gasoline', ..., color='grey', body='sedan'),\n#     Car(fuel='diesel', ..., color='white', body='crossover')\n# ]\n\nawait Vehicle.get(bus_2.id, with_children=True)\n# returns Bus instance:\n# Bus(fuel='diesel', ..., color='yellow', body='minibus', seats=26)\n```\n\n----------------------------------------\n\nTITLE: Document Synchronization\nDESCRIPTION: Methods for synchronizing document changes with different merge strategies\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/find.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nawait bar.sync()\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom beanie import MergeStrategy\n\nawait bar.sync(merge_strategy=MergeStrategy.remote)\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom beanie import MergeStrategy\n\nawait bar.sync(merge_strategy=MergeStrategy.local)\n```\n\n----------------------------------------\n\nTITLE: Using Near Operator with Beanie Documents\nDESCRIPTION: Example showing how to use the Near operator with a Beanie Document model. The example demonstrates setting up a Document with a geospatial field, creating a GEO index, and using the Near operator to query for documents near specific coordinates with a minimum distance constraint.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/find.md#2025-04-17_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nclass GeoObject(BaseModel):\n    type: str = \"Point\"\n    coordinates: Tuple[float, float]\n\nclass Place(Document):\n    geo: GeoObject\n\n    class Settings:\n        name = \"places\"\n        indexes = [\n            [(\"geo\", pymongo.GEOSPHERE)],  # GEO index\n        ]\n\nNear(Place.geo, 1.2345, 2.3456, min_distance=500)\n```\n\n----------------------------------------\n\nTITLE: Replacing a Document with Beanie ODM\nDESCRIPTION: Method to fully update/replace the current document in the database with its current state. Supports transaction through session parameter.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/document.md#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n | async replace(session: Optional[ClientSession] = None) -> DocType\n```\n\n----------------------------------------\n\nTITLE: Deleting Multiple Documents with Beanie ODM in Python\nDESCRIPTION: Shows how to delete multiple documents that match a query criteria. This example deletes all products that belong to the \"Chocolate\" category by chaining the delete method to a find query.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/delete.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nawait Product.find(Product.category.name == \"Chocolate\").delete()\n```\n\n----------------------------------------\n\nTITLE: Implementing GT Comparison Operator in Python with Beanie ODM\nDESCRIPTION: The GT class implements MongoDB's $gt (greater than) query operator. It creates a query that selects documents where the value of the specified field is greater than the specified value.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/find.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass GT(BaseFindComparisonOperator)\n```\n\nLANGUAGE: python\nCODE:\n```\nclass Product(Document):\n    price: float\n\nGT(Product.price, 2)\n```\n\nLANGUAGE: python\nCODE:\n```\n{\"price\": {\"$gt\": 2}}\n```\n\n----------------------------------------\n\nTITLE: Working with Relations in Inherited Documents (Beanie ODM, Python)\nDESCRIPTION: This snippet shows how to work with relations between documents in an inheritance hierarchy using Beanie ODM. It demonstrates fetching linked documents and resolving them into their respective classes.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/inheritance.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nowner = await Owner.get(owner.id, fetch_links=True)\n\nprint(owner.vehicles)\n# [\n#    Car(fuel='diesel', ..., color='white', body='crossover'),\n#    Bus(fuel='diesel', ..., color='white', body='bus', seats=80),\n#    Car(fuel='gasoline', ..., color='grey', body='sedan')\n# ]\n```\n\n----------------------------------------\n\nTITLE: Counting Documents with Beanie ODM\nDESCRIPTION: Class method to count the number of documents in the collection. Equivalent to find_all().count().\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/document.md#2025-04-17_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n | @classmethod\n | async count(cls) -> int\n```\n\n----------------------------------------\n\nTITLE: Implementing NotIn Comparison Operator in Python with Beanie ODM\nDESCRIPTION: The NotIn class implements MongoDB's $nin (not in) query operator. It creates a query that selects documents where the field value is not in the specified array or the field does not exist.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/find.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass NotIn(BaseFindComparisonOperator)\n```\n\nLANGUAGE: python\nCODE:\n```\nclass Product(Document):\n    price: float\n\nNotIn(Product.price, [2, 3, 4])\n```\n\nLANGUAGE: python\nCODE:\n```\n{\"price\": {\"$nin\": [2, 3, 4]}}\n```\n\n----------------------------------------\n\nTITLE: Implementing find_one Method for FindOne in Python\nDESCRIPTION: Method to find one document by criteria with options for projection and session. It returns a FindOne query instance for chaining additional operations.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/queries.md#2025-04-17_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n | find_one(*args: Union[Dict[str, Any], Mapping[str, Any], bool], *, projection_model: Optional[Type[BaseModel]] = None, session: Optional[ClientSession] = None) -> \"FindOne\"\n```\n\n----------------------------------------\n\nTITLE: Performing Average Aggregation in Beanie ODM\nDESCRIPTION: Shows how to calculate average values using Beanie's built-in aggregation methods. Demonstrates calculating average price both with a filter and over an entire collection.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/aggregate.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# With a search:\navg_price = await Product.find(\n    Product.category.name == \"Chocolate\"\n).avg(Product.price)\n\n# Over the whole collection:\navg_price = await Product.avg(Product.price)\n```\n\n----------------------------------------\n\nTITLE: Implementing In Comparison Operator in Python with Beanie ODM\nDESCRIPTION: The In class implements MongoDB's $in query operator. It creates a query that selects documents where the value of a field equals any value in the specified array.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/find.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass In(BaseFindComparisonOperator)\n```\n\nLANGUAGE: python\nCODE:\n```\nclass Product(Document):\n    price: float\n\nIn(Product.price, [2, 3, 4])\n```\n\nLANGUAGE: python\nCODE:\n```\n{\"price\": {\"$in\": [2, 3, 4]}}\n```\n\n----------------------------------------\n\nTITLE: Additional Operations on Inherited Documents in Beanie ODM (Python)\nDESCRIPTION: This snippet demonstrates other common operations that can be performed on inherited document models in Beanie ODM, such as updating documents and finding specific instances.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/inheritance.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nawait Bike.find().update({\"$set\": {Bike.color: 'yellow'}})\nawait Car.find_one(Car.body == 'sedan')\n```\n\n----------------------------------------\n\nTITLE: Registering Actions for Multiple Events in Beanie ODM (Python)\nDESCRIPTION: This example shows how to register a single action method for multiple events (Insert and Replace) using the @before_event decorator in a Beanie Document class.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/actions.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom beanie import Insert, Replace\n\n\nclass Sample(Document):\n    num: int\n    name: str\n\n    @before_event(Insert, Replace)\n    def capitalize_name(self):\n        self.name = self.name.capitalize()\n```\n\n----------------------------------------\n\nTITLE: Implementing Event-based Actions with Decorators in Beanie ODM (Python)\nDESCRIPTION: Shows how to register methods as pre- or post-event actions for document operations using @before_event and @after_event decorators, enabling automatic processing before/after document operations.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/articles/1.8.0.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom beanie import Insert, Replace\n\nclass Sample(Document):\n    num: int\n    name: str\n\n    @before_event(Insert)\n    def capitalize_name(self):\n        self.name = self.name.capitalize()\n\n    @after_event(Replace)\n    def num_change(self):\n        self.num -= 1\n```\n\n----------------------------------------\n\nTITLE: Using Cache for Repeated Queries in Beanie ODM (Python)\nDESCRIPTION: Demonstrates how query caching works with repeated find operations, showing that initial queries go to the database while subsequent identical queries use the cache until expiration.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/articles/1.8.0.md#2025-04-17_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# on the first call it will go to the database\nsamples = await Sample.find(num>10).to_list()\n\n# on the second - it will use cache instead\nsamples = await Sample.find(num>10).to_list()\n\nawait asyncio.sleep(15)\n\n# if the expiration time was reached \n# it will go to the database again\nsamples = await Sample.find(num>10).to_list()\n```\n\n----------------------------------------\n\nTITLE: Registering Pre and Post Event Actions in Beanie ODM (Python)\nDESCRIPTION: This snippet demonstrates how to use @before_event and @after_event decorators to register methods as actions for Insert and Replace events in a Beanie Document class.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/actions.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom beanie import Insert, Replace\n\n\nclass Sample(Document):\n    num: int\n    name: str\n\n    @before_event(Insert)\n    def capitalize_name(self):\n        self.name = self.name.capitalize()\n\n    @after_event(Replace)\n    def num_change(self):\n        self.num -= 1\n```\n\n----------------------------------------\n\nTITLE: Finding Multiple Documents with Beanie ODM\nDESCRIPTION: Class method to find multiple documents by search criteria. Supports pagination, sorting and projection. Returns a FindMany query object.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/document.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n | @classmethod\n | find_many(cls, *args: Union[Dict[str, Any], Mapping[str, Any], bool], *, skip: Optional[int] = None, limit: Optional[int] = None, sort: Union[None, str, List[Tuple[str, SortDirection]]] = None, projection_model: Optional[Type[BaseModel]] = None, session: Optional[ClientSession] = None) -> FindMany\n```\n\n----------------------------------------\n\nTITLE: Defining List of Links Relations in Python with Beanie ODM\nDESCRIPTION: This snippet illustrates how to define a list of links between document classes (Window and House) using Beanie ODM. It shows how to use the List type for multiple links of the same type.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/relations.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List\n\nfrom beanie import Document, Link\n\n\nclass Window(Document):\n    x: int = 10\n    y: int = 10\n\n\nclass House(Document):\n    name: str\n    door: Link[Door]\n    windows: List[Link[Window]]\n```\n\n----------------------------------------\n\nTITLE: Configuring Nested Document Depth in Beanie\nDESCRIPTION: This snippet demonstrates how to configure the maximum nesting depth for linked documents in Beanie, both globally and for specific fields.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/defining-a-document.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass Sample(Document):\n    num: int\n    category: Link[Category]\n\n    class Settings:\n        max_nesting_depth = 2  \n        # Maximum nesting depth for all linked documents of this model\n\nclass Sample(Document):\n    num: int\n    category: Link[Category]\n\n    class Settings:\n        max_nesting_depths_per_field = {\n            \"category\": 1  # Nesting depth for a specific field\n        }\n```\n\n----------------------------------------\n\nTITLE: Writing Linked Documents with WriteRules.WRITE in Beanie ODM (Python)\nDESCRIPTION: Demonstrates how to use the save method with WriteRules.WRITE to cascade write operations to linked documents. This example inserts a new window object while updating the house document.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/articles/1.8.0.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nhouse.windows = [Window(x=100, y=100)]\nhouse.name = \"NEW NAME\"\n\n# The next call will insert a new window object \n# and replace the house instance with updated data\nawait house.save(link_rule=WriteRules.WRITE)\n\n# `insert` and `replace` methods will work the same way\n```\n\n----------------------------------------\n\nTITLE: Implementing Iterative Migration in Python\nDESCRIPTION: Example of an iterative migration in Python using Beanie. It demonstrates how to rename a field from 'name' to 'title' in both forward and backward migrations.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/migrations.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass Tag(BaseModel):\n    color: str\n    name: str\n\n\nclass OldNote(Document):\n    name: str\n    tag: Tag\n\n    class Settings:\n        name = \"notes\"\n\n\nclass Note(Document):\n    title: str\n    tag: Tag\n\n    class Settings:\n        name = \"notes\"\n\n\nclass Forward:\n    @iterative_migration()\n    async def name_to_title(\n            self, input_document: OldNote, output_document: Note\n    ):\n        output_document.title = input_document.name\n\n\nclass Backward:\n    @iterative_migration()\n    async def title_to_name(\n            self, input_document: Note, output_document: OldNote\n    ):\n        output_document.name = input_document.title\n```\n\n----------------------------------------\n\nTITLE: Implementing Update Methods Class in Python\nDESCRIPTION: Base class for document update operations in Beanie ODM including set, current_date, and increment operations.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/interfaces.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass UpdateMethods()\n```\n\n----------------------------------------\n\nTITLE: Implementing Project Method for FindQuery in Python\nDESCRIPTION: Method to apply projection parameters to the query. It accepts an optional projection model parameter that specifies which fields to include in the results.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/queries.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n | project(projection_model: Optional[Type[BaseModel]]) -> FindQueryType\n```\n\n----------------------------------------\n\nTITLE: Defining Back Links in Python with Beanie ODM\nDESCRIPTION: This code demonstrates how to define back links between document classes in Beanie ODM. It shows the setup for both single and list back links, using the Field class to specify the original field.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/relations.md#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List\n\nfrom beanie import Document, BackLink, Link\nfrom pydantic import Field\n\n\nclass House(Document):\n    name: str\n    door: Link[\"Door\"]\n    owners: List[Link[\"Person\"]]\n\n    \nclass Door(Document):\n    height: int = 2\n    width: int = 1\n    house: BackLink[House] = Field(original_field=\"door\")\n\n    \nclass Person(Document):\n    name: str\n    house: List[BackLink[House]] = Field(original_field=\"owners\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic State Management in BeanieODM\nDESCRIPTION: Demonstrates how to enable basic state management in a Beanie document class using the Settings inner class.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/state_management.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Sample(Document):\n    num: int\n    name: str\n\n    class Settings:\n        use_state_management = True\n```\n\n----------------------------------------\n\nTITLE: Implementing RegEx Evaluation Operator in Python with Beanie ODM\nDESCRIPTION: The RegEx class implements MongoDB's $regex evaluation query operator. It selects documents where values match a specified regular expression pattern.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/find.md#2025-04-17_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nclass RegEx(BaseFindEvaluationOperator)\n```\n\n----------------------------------------\n\nTITLE: Configuring Time Series Collection in Beanie ODM with Python\nDESCRIPTION: This code demonstrates how to configure a time series collection in Beanie ODM using the TimeSeriesConfig class in a Document's Settings class. It shows required fields like time_field and optional fields such as meta_field, granularity, and expiration settings. Note that this requires MongoDB 5.0+, with some fields requiring MongoDB 6.3+.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/time_series.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime\n\nfrom beanie import Document, TimeSeriesConfig, Granularity\nfrom pydantic import Field\n\n\nclass Sample(Document):\n    ts: datetime = Field(default_factory=datetime.now)\n    meta: str\n\n    class Settings:\n        timeseries = TimeSeriesConfig(\n            time_field=\"ts\", #  Required\n            meta_field=\"meta\", #  Optional\n            granularity=Granularity.hours, #  Optional\n            bucket_max_span_seconds=3600,  #  Optional\n            bucket_rounding_seconds=3600,  #  Optional\n            expire_after_seconds=2  #  Optional\n        )\n```\n\n----------------------------------------\n\nTITLE: Implementing GTE Comparison Operator in Python with Beanie ODM\nDESCRIPTION: The GTE class implements MongoDB's $gte (greater than or equal) query operator. It creates a query that selects documents where the value of the specified field is greater than or equal to the specified value.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/find.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass GTE(BaseFindComparisonOperator)\n```\n\nLANGUAGE: python\nCODE:\n```\nclass Product(Document):\n    price: float\n\nGTE(Product.price, 2)\n```\n\nLANGUAGE: python\nCODE:\n```\n{\"price\": {\"$gte\": 2}}\n```\n\n----------------------------------------\n\nTITLE: Creating a Document with Beanie ODM\nDESCRIPTION: The create method is an alias for insert() and saves the current document instance to the MongoDB collection.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/document.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n | async create(session: Optional[ClientSession] = None) -> DocType\n```\n\n----------------------------------------\n\nTITLE: Deleting Documents with Link Rules in Python using Beanie ODM\nDESCRIPTION: These snippets illustrate how to delete documents with different link rules in Beanie ODM. It shows deleting linked documents and keeping linked documents during deletion.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/relations.md#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nawait house.delete(link_rule=DeleteRules.DELETE_LINKS)\n\nawait house.delete(link_rule=DeleteRules.DO_NOTHING)\n```\n\n----------------------------------------\n\nTITLE: Using Cached Queries in Beanie ODM\nDESCRIPTION: This example shows how cached queries work in practice. The first query execution hits the database, subsequent executions use the cache until the expiration time is reached, after which the database is queried again.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/cache.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# on the first call it will go to the database\nsamples = await Sample.find(num>10).to_list()\n\n# on the second - it will use cache instead\nsamples = await Sample.find(num>10).to_list()\n\nawait asyncio.sleep(15)\n\n# if the expiration time was reached it will go to the database again\nsamples = await Sample.find(num>10).to_list()\n```\n\n----------------------------------------\n\nTITLE: Implementing NE Comparison Operator in Python with Beanie ODM\nDESCRIPTION: The NE class implements MongoDB's $ne (not equal) query operator. It creates a query that selects documents where the value of the specified field is not equal to the specified value.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/find.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass NE(BaseFindComparisonOperator)\n```\n\nLANGUAGE: python\nCODE:\n```\nclass Product(Document):\n    price: float\n\nNE(Product.price, 2)\n```\n\nLANGUAGE: python\nCODE:\n```\n{\"price\": {\"$ne\": 2}}\n```\n\n----------------------------------------\n\nTITLE: Basic Task Queue Implementation Example\nDESCRIPTION: Example showing basic task implementation with a runner to process tasks\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/batteries/queue.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom beanie_batteries_queue import Task, Runner\n\nclass ExampleTask(Task):\n    data: str\n\n    async def run(self):\n        self.data = self.data.upper()\n        await self.save()\n        \nrunner = Runner(task_classes=[ExampleTask])\nrunner.start()\n```\n\n----------------------------------------\n\nTITLE: Implementing LT Comparison Operator in Python with Beanie ODM\nDESCRIPTION: The LT class implements MongoDB's $lt (less than) query operator. It creates a query that selects documents where the value of the specified field is less than the specified value.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/find.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass LT(BaseFindComparisonOperator)\n```\n\nLANGUAGE: python\nCODE:\n```\nclass Product(Document):\n    price: float\n\nLT(Product.price, 2)\n```\n\nLANGUAGE: python\nCODE:\n```\n{\"price\": {\"$lt\": 2}}\n```\n\n----------------------------------------\n\nTITLE: Implementing limit Method for FindMany in Python\nDESCRIPTION: Method to set the limit parameter for the query, specifying the maximum number of results to return.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/queries.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n | limit(n: Optional[int]) -> \"FindMany\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Single-Field Index Using Indexed Function in Python\nDESCRIPTION: This snippet demonstrates how to set up a single-field index using the Indexed function in Beanie ODM. It wraps the field type and doesn't require a Settings class.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/indexes.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom beanie import Document, Indexed\n\n\nclass Sample(Document):\n    num: Annotated[int, Indexed()]\n    description: str\n```\n\n----------------------------------------\n\nTITLE: Implementing Session Methods Class in Python\nDESCRIPTION: Base class for handling MongoDB session operations in Beanie ODM.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/interfaces.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass SessionMethods()\n```\n\n----------------------------------------\n\nTITLE: Implementing __await__ Method for FindOne in Python\nDESCRIPTION: Special method that allows the FindOne query to be awaited, running the query and returning the found document as a BaseModel instance.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/queries.md#2025-04-17_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n | __await__()\n```\n\n----------------------------------------\n\nTITLE: Implementing Expr Evaluation Operator in Python with Beanie ODM\nDESCRIPTION: The Expr class implements MongoDB's $expr evaluation query operator. It allows use of aggregation expressions within query language.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/find.md#2025-04-17_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nclass Expr(BaseFindEvaluationOperator)\n```\n\nLANGUAGE: python\nCODE:\n```\nclass Sample(Document):\n    one: int\n    two: int\n\nExpr({\"$gt\": [ \"$one\" , \"$two\" ]})\n```\n\nLANGUAGE: python\nCODE:\n```\n{\"$expr\": {\"$gt\": [ \"$one\" , \"$two\" ]}}\n```\n\n----------------------------------------\n\nTITLE: Using the Inc Operator with Beanie Document Models\nDESCRIPTION: Example usage of the Inc operator to increment a numeric field by 2 in a document.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/update.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass Sample(Document):\n    one: int\n\nInc({Sample.one, 2})\n```\n\n----------------------------------------\n\nTITLE: Preserving Linked Documents on Delete with DeleteRules.DO_NOTHING in Beanie ODM (Python)\nDESCRIPTION: Demonstrates how to delete a document while preserving its linked documents using DeleteRules.DO_NOTHING, which prevents cascade deletion of related documents.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/articles/1.8.0.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nawait house.delete(link_rule=DeleteRules.DO_NOTHING)\n```\n\n----------------------------------------\n\nTITLE: Implementing Eq Comparison Operator in Python with Beanie ODM\nDESCRIPTION: The Eq class implements MongoDB's equals query operator. It allows direct comparison between a document field and a specified value. It returns a query object where the field equals the given value.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/find.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Eq(BaseFindComparisonOperator)\n```\n\nLANGUAGE: python\nCODE:\n```\nclass Product(Document):\n    price: float\n\nEq(Product.price, 2)\n```\n\nLANGUAGE: python\nCODE:\n```\n{\"price\": 2}\n```\n\n----------------------------------------\n\nTITLE: Average Aggregation Example\nDESCRIPTION: Example showing how to calculate the average value of a field across filtered documents.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/interfaces.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass Sample(Document):\n    price: int\n    count: int\n\navg_count = await Document.find(Sample.price <= 100).avg(Sample.count)\n```\n\n----------------------------------------\n\nTITLE: Implementing Update Method for FindQuery in Python\nDESCRIPTION: Method to create an update query with modifications and provide search criteria. It accepts dictionary arguments for modifications and an optional session parameter.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/queries.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n | update(*args: Union[Dict[str, Any], Mapping[str, Any]], *, session: Optional[ClientSession] = None)\n```\n\n----------------------------------------\n\nTITLE: Using the AddToSet Operator with Beanie Document Models\nDESCRIPTION: Example usage of the AddToSet operator to add an element to an array field if it doesn't already exist.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/update.md#2025-04-17_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nclass Sample(Document):\n    results: List[int]\n\nAddToSet({Sample.results, 2})\n```\n\n----------------------------------------\n\nTITLE: Using the Push Operator with Beanie Document Models\nDESCRIPTION: Example usage of the Push operator to add an element to the end of an array field in a document.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/update.md#2025-04-17_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nclass Sample(Document):\n    results: List[int]\n\nPush({Sample.results: 1})\n```\n\n----------------------------------------\n\nTITLE: Defining Document and View Classes in Beanie ODM\nDESCRIPTION: Creates a Bike document class and a Metrics view class that aggregates bike data by type, counting total bikes and new bikes for each type.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/views.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pydantic import Field\n\nfrom beanie import Document, View\n\n\nclass Bike(Document):\n    type: str\n    frame_size: int\n    is_new: bool\n\n\nclass Metrics(View):\n    type: str = Field(alias=\"_id\")\n    number: int\n    new: int\n\n    class Settings:\n        source = Bike\n        pipeline = [\n            {\n                \"$group\": {\n                    \"_id\": \"$type\",\n                    \"number\": {\"$sum\": 1},\n                    \"new\": {\"$sum\": {\"$cond\": [\"$is_new\", 1, 0]}}\n                }\n            },\n        ]\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Not Logical Operator in Python with Beanie ODM\nDESCRIPTION: The Not class implements MongoDB's $not logical query operator. It inverts the effect of a query expression and returns documents that do not match the query expression.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/find.md#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclass Not(BaseFindLogicalOperator)\n```\n\nLANGUAGE: python\nCODE:\n```\nclass Product(Document):\n    price: float\n    category: str\n\nNot({Product.price<10})\n```\n\nLANGUAGE: python\nCODE:\n```\n{\"$not\": {\"price\": {\"$lt\": 10}}}\n```\n\n----------------------------------------\n\nTITLE: Using Indexed Function Directly in Type Annotation in Python\nDESCRIPTION: This example shows how to use the Indexed function directly in the type annotation by providing the wrapped type as the first argument. Note that this might not work with some Pydantic V2 types.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/indexes.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom beanie import Document, Indexed\n\n\nclass Sample(Document):\n    name: Indexed(str, unique=True)\n```\n\n----------------------------------------\n\nTITLE: Defining Document Relations with List of Links in Beanie ODM (Python)\nDESCRIPTION: Shows how to define a list of links to other documents using List[Link[]] syntax in Beanie. This allows a document to reference multiple other documents in a single field.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/articles/1.8.0.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List\n\nfrom beanie import Document, Link\n\nclass Window(Document):\n    x: int = 10\n    y: int = 10\n\n\nclass House(Document):\n    name: str\n    door: Link[Door]\n    windows: List[Link[Window]]  # This is the list of the links\n```\n\n----------------------------------------\n\nTITLE: Replacing Multiple Documents with Beanie ODM\nDESCRIPTION: Class method to replace multiple documents in a single operation. Takes a list of document instances and updates their corresponding records in the database.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/document.md#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n | @classmethod\n | async replace_many(cls: Type[DocType], documents: List[DocType], session: Optional[ClientSession] = None) -> None\n```\n\n----------------------------------------\n\nTITLE: Implementing the AddToSet Operator for MongoDB Array Updates\nDESCRIPTION: The AddToSet class implements MongoDB's $addToSet array operator in Beanie ODM, which adds elements to an array only if they don't already exist.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/update.md#2025-04-17_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nclass AddToSet(BaseUpdateArrayOperator)\n```\n\n----------------------------------------\n\nTITLE: Implementing the Bit Operator for MongoDB Bitwise Updates\nDESCRIPTION: The Bit class implements MongoDB's $bit update operator in Beanie ODM for performing bitwise operations on integer values.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/update.md#2025-04-17_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nclass Bit(BaseUpdateBitwiseOperator)\n```\n\n----------------------------------------\n\nTITLE: Implementing Type Element Operator in Python with Beanie ODM\nDESCRIPTION: The Type class implements MongoDB's $type element query operator. It selects documents where the value of the field is an instance of the specified BSON type.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/find.md#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nclass Type(BaseFindElementOperator)\n```\n\nLANGUAGE: python\nCODE:\n```\nclass Product(Document):\n    price: float\n\nType(Product.price, \"decimal\")\n```\n\nLANGUAGE: python\nCODE:\n```\n{\"price\": {\"$type\": \"decimal\"}}\n```\n\n----------------------------------------\n\nTITLE: Defining All Class for MongoDB Array Queries in Beanie ODM\nDESCRIPTION: Implementation of the $all operator in Beanie ODM that matches arrays containing all the specified elements. Extends the BaseFindArrayOperator class for array-specific query operations.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/find.md#2025-04-17_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nclass All(BaseFindArrayOperator)\n```\n\n----------------------------------------\n\nTITLE: Using the CurrentDate Operator with Beanie Document Models\nDESCRIPTION: Example usage of the CurrentDate operator to set a timestamp field to the current date/time in a document.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/update.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass Sample(Document):\n    ts: datetime\n\nCurrentDate({Sample.ts, True})\n```\n\n----------------------------------------\n\nTITLE: Using Revision-Aware Document Operations\nDESCRIPTION: Demonstrates how document modification operations will automatically check revision IDs before applying changes. If another process has modified the document since it was retrieved, an error will be raised to prevent data loss.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/revision.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ns = await Sample.find_one(Sample.name=\"TestName\")\ns.num = 10\n\n# If a concurrent process already changed the doc, the next operation will raise an error\nawait s.replace()\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Link Relations in Python with Beanie ODM\nDESCRIPTION: This code shows how to create an optional link between two document classes (Door and House) using Beanie ODM. It uses the Optional type from the typing module to make the link optional.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/relations.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Optional\n\nfrom beanie import Document, Link\n\n\nclass Door(Document):\n    height: int = 2\n    width: int = 1\n\n\nclass House(Document):\n    name: str\n    door: Optional[Link[Door]]\n```\n\n----------------------------------------\n\nTITLE: Implementing update_many Method for UpdateMany in Python\nDESCRIPTION: Method to provide modifications to the update query for multiple documents. It accepts dictionary arguments for modifications and an optional session parameter.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/queries.md#2025-04-17_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n | update_many(*args: Union[Dict[str, Any], Mapping[str, Any]], *, session: Optional[ClientSession] = None)\n```\n\n----------------------------------------\n\nTITLE: Defining GeoWithin Class for MongoDB Geospatial Queries in Beanie ODM\nDESCRIPTION: Implementation of the $geoWithin operator in Beanie ODM that allows querying documents based on geospatial coordinates within specified geometries. It extends the BaseFindGeospatialOperator class.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/find.md#2025-04-17_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nclass GeoWithin(BaseFindGeospatialOperator)\n```\n\n----------------------------------------\n\nTITLE: Defining ElemMatch Class for MongoDB Array Queries in Beanie ODM\nDESCRIPTION: Implementation of the $elemMatch operator in Beanie ODM that matches documents containing an array field with at least one element matching all the specified criteria. Extends the BaseFindArrayOperator class.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/find.md#2025-04-17_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nclass ElemMatch(BaseFindArrayOperator)\n```\n\n----------------------------------------\n\nTITLE: Defining NearSphere Class for MongoDB Geospatial Queries in Beanie ODM\nDESCRIPTION: Implementation of the $nearSphere operator in Beanie ODM that allows querying documents based on proximity on a spherical surface. Extends the Near class, inheriting its functionality with spherical distance calculations.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/find.md#2025-04-17_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nclass NearSphere(Near)\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Evaluation Operator in Python with Beanie ODM\nDESCRIPTION: The Text class implements MongoDB's $text evaluation query operator. It performs text search on fields with a text index.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/find.md#2025-04-17_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nclass Text(BaseFindEvaluationOperator)\n```\n\nLANGUAGE: python\nCODE:\n```\nclass Sample(Document):\n    description: Indexed(str, pymongo.TEXT)\n\nText(\"coffee\")\n```\n\nLANGUAGE: python\nCODE:\n```\n{\n    \"$text\": {\n        \"$search\": \"coffee\" ,\n        \"$caseSensitive\": False,\n        \"$diacriticSensitive\": False\n    }\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ndef __init__(search: str, language: Optional[str] = None, case_sensitive: bool = False, diacritic_sensitive: bool = False)\n```\n\n----------------------------------------\n\nTITLE: Saving Linked Documents with WriteRules in Python using Beanie ODM\nDESCRIPTION: This snippet shows how to save a document with linked objects using the WriteRules.WRITE option in Beanie ODM. It demonstrates updating both the main document and its linked documents.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/relations.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nhouse.windows = [Window(x=100, y=100)]\nhouse.name = \"NEW NAME\"\n\n# The next call will insert a new window object and replace the house instance with updated data\nawait house.save(link_rule=WriteRules.WRITE)\n\n# `insert` and `replace` methods will work the same way\n```\n\n----------------------------------------\n\nTITLE: Accessing Previous Changes in BeanieODM\nDESCRIPTION: Shows how to work with previously saved changes when state_management_save_previous is enabled.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/state_management.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ns = await Sample.find_one(Sample.name == \"Test\")\n\ns.num = 200\nawait s.save_changes()\n\ns.has_changed == True\ns.get_previous_changes() == {\"num\": 200}\ns.get_changes() == {}\n```\n\n----------------------------------------\n\nTITLE: Using GeoWithin Operator with Beanie Documents\nDESCRIPTION: Example showing how to use the GeoWithin operator with a Beanie Document model. The example demonstrates setting up a Document with a geospatial field, creating a GEO index, and using the GeoWithin operator to query for documents with coordinates inside a polygon.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/find.md#2025-04-17_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nclass GeoObject(BaseModel):\n    type: str = \"Point\"\n    coordinates: Tuple[float, float]\n\nclass Place(Document):\n    geo: GeoObject\n\n    class Settings:\n        name = \"places\"\n        indexes = [\n            [(\"geo\", pymongo.GEOSPHERE)],  # GEO index\n        ]\n\nGeoWithin(Place.geo, \"Polygon\", [[0,0], [1,1], [3,3]])\n```\n\n----------------------------------------\n\nTITLE: Defining Size Class for MongoDB Array Queries in Beanie ODM\nDESCRIPTION: Implementation of the $size operator in Beanie ODM that matches arrays with the specified number of elements. Extends the BaseFindArrayOperator class for array query operations.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/find.md#2025-04-17_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nclass Size(BaseFindArrayOperator)\n```\n\n----------------------------------------\n\nTITLE: Implementing Mod Evaluation Operator in Python with Beanie ODM\nDESCRIPTION: The Mod class implements MongoDB's $mod evaluation query operator. It performs a modulo operation on the value of a field and selects documents with a specified result.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/find.md#2025-04-17_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nclass Mod(BaseFindEvaluationOperator)\n```\n\nLANGUAGE: python\nCODE:\n```\nclass Sample(Document):\n    one: int\n\nMod(Sample.one, 4, 0)\n```\n\nLANGUAGE: python\nCODE:\n```\n{ \"one\": { \"$mod\": [ 4, 0 ] } }\n```\n\n----------------------------------------\n\nTITLE: Implementing aggregate Method for FindMany in Python\nDESCRIPTION: Method to provide search criteria to the AggregationQuery. It accepts an aggregation pipeline, an optional projection model, and an optional session parameter.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/queries.md#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n | aggregate(aggregation_pipeline: List[Any], projection_model: Optional[Type[BaseModel]] = None, session: Optional[ClientSession] = None) -> AggregationQuery\n```\n\n----------------------------------------\n\nTITLE: Enabling Cache in Beanie Document Model\nDESCRIPTION: This snippet shows how to enable caching for a Beanie Document model by setting the use_cache flag to True in the Settings inner class.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/cache.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Sample(Document):\n    num: int\n    name: str\n\n    class Settings:\n        use_cache = True\n```\n\n----------------------------------------\n\nTITLE: Implementing the Rename Operator for MongoDB Updates\nDESCRIPTION: The Rename class implements MongoDB's $rename operator in Beanie ODM for renaming fields in documents.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/update.md#2025-04-17_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nclass Rename(BaseUpdateGeneralOperator)\n```\n\n----------------------------------------\n\nTITLE: Implementing the Set Operator for MongoDB Updates in Python\nDESCRIPTION: The Set class implements MongoDB's $set update operator in Beanie ODM. It accepts a mapping of document field to value and generates the appropriate update query structure.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/update.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Set(BaseUpdateGeneralOperator)\n```\n\n----------------------------------------\n\nTITLE: Using ElemMatch Operator with Beanie Documents\nDESCRIPTION: Example showing how to use the ElemMatch operator with a Beanie Document model. The example demonstrates querying for documents with an array field containing at least one element matching the specified criteria.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/find.md#2025-04-17_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nclass Sample(Document):\n    results: List[int]\n\nElemMatch(Sample.results, [80, 85])\n```\n\n----------------------------------------\n\nTITLE: Deleting Linked Documents with DeleteRules.DELETE_LINKS in Beanie ODM (Python)\nDESCRIPTION: Shows how to delete a document along with all its linked documents using DeleteRules.DELETE_LINKS, creating a cascading delete effect for related documents.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/articles/1.8.0.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nawait house.delete(link_rule=DeleteRules.DELETE_LINKS)\n```\n\n----------------------------------------\n\nTITLE: Implementing Complex Iterative Migration in Python\nDESCRIPTION: A more complex example of iterative migration in Python using Beanie. It shows how to migrate nested fields and handle changes in model structure.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/migrations.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom pydantic.main import BaseModel\n\nfrom beanie import Document, iterative_migration\n\n\nclass OldTag(BaseModel):\n    color: str\n    name: str\n\n\nclass Tag(BaseModel):\n    color: str\n    title: str\n\n\nclass OldNote(Document):\n    title: str\n    tag: OldTag\n\n    class Settings:\n        name = \"notes\"\n\n\nclass Note(Document):\n    title: str\n    tag: Tag\n\n    class Settings:\n        name = \"notes\"\n\n\nclass Forward:\n    @iterative_migration()\n    async def change_color(\n            self, input_document: OldNote, output_document: Note\n    ):\n        output_document.tag.title = input_document.tag.name\n\n\nclass Backward:\n    @iterative_migration()\n    async def change_title(\n            self, input_document: Note, output_document: OldNote\n    ):\n        output_document.tag.name = input_document.tag.title\n```\n\n----------------------------------------\n\nTITLE: Creating Text Index Using Indexed Function with PyMongo in Python\nDESCRIPTION: This example shows how to create a text index using the Indexed function with a pymongo index type. It uses the optional index_type argument.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/indexes.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pymongo\n\nfrom beanie import Document, Indexed\n\n\nclass Sample(Document):\n    description: Annotated[str, Indexed(index_type=pymongo.TEXT)]\n```\n\n----------------------------------------\n\nTITLE: Enabling Previous State Tracking in BeanieODM\nDESCRIPTION: Shows how to configure a Beanie document to track both current and previous states using additional settings.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/state_management.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Sample(Document):\n    num: int\n    name: str\n\n    class Settings:\n        use_state_management = True\n        state_management_save_previous = True\n```\n\n----------------------------------------\n\nTITLE: Generated MongoDB Set Query Format\nDESCRIPTION: Example of the MongoDB query format generated by the Set operator, showing how field references are transformed into the proper query syntax.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/update.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n{\"$set\": {\"one\": 2}}\n```\n\n----------------------------------------\n\nTITLE: Implementing LTE Comparison Operator in Python with Beanie ODM\nDESCRIPTION: The LTE class implements MongoDB's $lte (less than or equal) query operator. It creates a query that selects documents where the value of the specified field is less than or equal to the specified value.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/find.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass LTE(BaseFindComparisonOperator)\n```\n\nLANGUAGE: python\nCODE:\n```\nclass Product(Document):\n    price: float\n\nLTE(Product.price, 2)\n```\n\nLANGUAGE: python\nCODE:\n```\n{\"price\": {\"$lte\": 2}}\n```\n\n----------------------------------------\n\nTITLE: Fetching a Single Linked Field in Beanie ODM (Python)\nDESCRIPTION: Demonstrates how to fetch a specific linked document field using the fetch_link method, which updates only the specified field with the linked document instance.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/articles/1.8.0.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nawait house.fetch_link(House.door)\n```\n\n----------------------------------------\n\nTITLE: Implementing to_list Method in BaseCursorQuery Class\nDESCRIPTION: Implements the to_list method which asynchronously retrieves a list of documents from the cursor, with an optional length parameter.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/queries.md#2025-04-17_snippet_35\n\nLANGUAGE: python\nCODE:\n```\n | async to_list(length: Optional[int] = None) -> Union[List[BaseModel], List[Dict[str, Any]]]\n```\n\n----------------------------------------\n\nTITLE: Defining AggregationQuery Class in Python\nDESCRIPTION: Defines the AggregationQuery class that inherits from BaseCursorQuery and SessionMethods, used for MongoDB aggregation pipeline operations.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/queries.md#2025-04-17_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nclass AggregationQuery(BaseCursorQuery,  SessionMethods)\n```\n\n----------------------------------------\n\nTITLE: Installing Beanie with OCSP Support\nDESCRIPTION: Installing Beanie with OCSP (Online Certificate Status Protocol) support using pip.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/getting-started.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npip install \"beanie[ocsp]\"\n```\n\n----------------------------------------\n\nTITLE: Generated MongoDB AddToSet Query Format\nDESCRIPTION: Example of the MongoDB query format generated by the AddToSet operator, showing how it adds unique elements to arrays.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/update.md#2025-04-17_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n{\"$addToSet\": {\"results\": 2}}\n```\n\n----------------------------------------\n\nTITLE: Implementing Nor Logical Operator in Python with Beanie ODM\nDESCRIPTION: The Nor class implements MongoDB's $nor logical query operator. It joins query clauses with a logical NOR and returns documents that fail to match all conditions.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/find.md#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass Nor(BaseFindLogicalOperator)\n```\n\nLANGUAGE: python\nCODE:\n```\nclass Product(Document):\n    price: float\n    category: str\n\nNor({Product.price<10}, {Product.category==\"Sweets\"})\n```\n\nLANGUAGE: python\nCODE:\n```\n{\"$nor\": [{\"price\": {\"$lt\": 10}}, {\"category\": \"Sweets\"}]}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Linked Documents with WriteRules.DO_NOTHING in Beanie ODM (Python)\nDESCRIPTION: Shows how to use replace method with WriteRules.DO_NOTHING to update only the main document without affecting linked documents. This preserves the state of linked documents while updating the parent.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/articles/1.8.0.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nhouse.door.height = 3\nhouse.name = \"NEW NAME\"\n\n# The next call will just replace the house instance \n# with new data, but the linked door object will not be synced\nawait house.replace(link_rule=WriteRules.DO_NOTHING)\n\n# `insert` and `save` methods will work the same way\n```\n\n----------------------------------------\n\nTITLE: Using the Pop Operator with Beanie Document Models\nDESCRIPTION: Example usage of the Pop operator to remove an element from an array field in a document.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/update.md#2025-04-17_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nclass Sample(Document):\n    results: List[int]\n\nPop({Sample.results, 2})\n```\n\n----------------------------------------\n\nTITLE: Defining DeleteOne Class in Python\nDESCRIPTION: Defines the DeleteOne class that inherits from DeleteQuery and is used for deleting a single document matching a query.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/queries.md#2025-04-17_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nclass DeleteOne(DeleteQuery)\n```\n\n----------------------------------------\n\nTITLE: Fetching All Linked Documents On-Demand in Beanie ODM (Python)\nDESCRIPTION: Shows how to use the fetch_all_links method to retrieve all linked documents for a document instance after it has been loaded, replacing Link objects with actual document instances.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/articles/1.8.0.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nawait house.fetch_all_links()\n```\n\n----------------------------------------\n\nTITLE: Implementing the Pop Operator for MongoDB Array Updates\nDESCRIPTION: The Pop class implements MongoDB's $pop array operator in Beanie ODM, which removes either the first or last element of an array.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/update.md#2025-04-17_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nclass Pop(BaseUpdateArrayOperator)\n```\n\n----------------------------------------\n\nTITLE: Implementing JsonSchema Evaluation Operator in Python with Beanie ODM\nDESCRIPTION: The JsonSchema class implements MongoDB's $jsonSchema evaluation query operator. It validates documents against the given JSON Schema.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/find.md#2025-04-17_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nclass JsonSchema(BaseFindEvaluationOperator)\n```\n\n----------------------------------------\n\nTITLE: Implementing the Min Operator for MongoDB Updates\nDESCRIPTION: The Min class implements MongoDB's $min operator in Beanie ODM, which updates a field value only if the specified value is less than the existing value.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/update.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass Min(BaseUpdateGeneralOperator)\n```\n\n----------------------------------------\n\nTITLE: Generated MongoDB Query for ElemMatch Operator\nDESCRIPTION: The MongoDB query object that would be generated by the ElemMatch operator example. Shows the structure of a $elemMatch query for array fields.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/find.md#2025-04-17_snippet_35\n\nLANGUAGE: python\nCODE:\n```\n{\"results\": {\"$elemMatch\": [80, 85]}}\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateQuery Base Class in Python\nDESCRIPTION: Base class for update queries that inherits from UpdateMethods and SessionMethods. It provides common functionality for all update operations.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/queries.md#2025-04-17_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nclass UpdateQuery(UpdateMethods,  SessionMethods)\n```\n\n----------------------------------------\n\nTITLE: Task State Management - Failed State\nDESCRIPTION: Example showing task state transition to failed state\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/batteries/queue.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom beanie_batteries_queue import State\n\ntask = SimpleTask(s=\"test\")\nawait task.push()\n\nasync for task in SimpleTask.queue():\n    assert task.state == State.RUNNING\n    await task.fail()\n    break\n\ntask = await SimpleTask.find_one({\"s\": \"test\"})\nassert task.state == State.FAILED\n```\n\n----------------------------------------\n\nTITLE: Initializing Beanie with Document and View Models\nDESCRIPTION: Sets up Beanie ODM with MongoDB connection and initializes it with Bike and Metrics models. The recreate_views parameter ensures views are recreated during initialization.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/views.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom motor.motor_asyncio import AsyncIOMotorClient\n\nfrom beanie import init_beanie\n\n\nasync def main():\n    uri = \"mongodb://beanie:beanie@localhost:27017\"\n    client = AsyncIOMotorClient(uri)\n    db = client.bikes\n\n    await init_beanie(\n        database=db, \n        document_models=[Bike, Metrics],\n        recreate_views=True,\n    )\n```\n\n----------------------------------------\n\nTITLE: Implementing Where Evaluation Operator in Python with Beanie ODM\nDESCRIPTION: The Where class implements MongoDB's $where evaluation query operator. It matches documents that satisfy a JavaScript expression.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/find.md#2025-04-17_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nclass Where(BaseFindEvaluationOperator)\n```\n\n----------------------------------------\n\nTITLE: Implementing count Method for FindMany in Python\nDESCRIPTION: Asynchronous method to count the number of documents that match the query criteria. It returns an integer count of matching documents.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/queries.md#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n | async count() -> int\n```\n\n----------------------------------------\n\nTITLE: All Documents Alias with Beanie ODM\nDESCRIPTION: Alias for find_all() method that returns all documents in the collection with the same pagination, sorting and projection options.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/document.md#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n | @classmethod\n | all(cls, skip: Optional[int] = None, limit: Optional[int] = None, sort: Union[None, str, List[Tuple[str, SortDirection]]] = None, projection_model: Optional[Type[BaseModel]] = None, session: Optional[ClientSession] = None) -> FindMany\n```\n\n----------------------------------------\n\nTITLE: Initializing Collection with Beanie ODM\nDESCRIPTION: Internal class method to initialize the collection metadata. Creates indexes based on model definitions and sets up the MongoDB collection.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/document.md#2025-04-17_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n | @classmethod\n | async init_collection(cls, database: AsyncIOMotorDatabase, allow_index_dropping: bool) -> None\n```\n\n----------------------------------------\n\nTITLE: Implementing replace_one Method for FindOne in Python\nDESCRIPTION: Asynchronous method to replace the found document with the provided document. It accepts a document parameter and an optional session parameter, returning an UpdateResult.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/queries.md#2025-04-17_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n | async replace_one(document: \"DocType\", session: Optional[ClientSession] = None) -> UpdateResult\n```\n\n----------------------------------------\n\nTITLE: Inserting Bike Documents in MongoDB with Beanie\nDESCRIPTION: Inserts sample bike documents into the MongoDB collection using Beanie's ODM interface. The example creates 5 bike records with different types, sizes, and new status flags.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/views.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nawait Bike(type=\"Mountain\", frame_size=54, is_new=True).insert()\nawait Bike(type=\"Mountain\", frame_size=60, is_new=False).insert()\nawait Bike(type=\"Road\", frame_size=52, is_new=True).insert()\nawait Bike(type=\"Road\", frame_size=54, is_new=True).insert()\nawait Bike(type=\"Road\", frame_size=58, is_new=False).insert()\n```\n\n----------------------------------------\n\nTITLE: Implementing GeoIntersects Geospatial Operator in Python with Beanie ODM\nDESCRIPTION: The GeoIntersects class implements MongoDB's $geoIntersects geospatial query operator. It selects geometries that intersect with a GeoJSON geometry.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/find.md#2025-04-17_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nclass GeoIntersects(BaseFindGeospatialOperator)\n```\n\nLANGUAGE: python\nCODE:\n```\nclass GeoObject(BaseModel):\n    type: str = \"Point\"\n    coordinates: Tuple[float, float]\n\nclass Place(Document):\n    geo: GeoObject\n\n    class Settings:\n        name = \"places\"\n        indexes = [\n            [(\"geo\", pymongo.GEOSPHERE)],  # GEO index\n        ]\n\nGeoIntersects(Place.geo, \"Polygon\", [[0,0], [1,1], [3,3]])\n```\n\nLANGUAGE: python\nCODE:\n```\n{\n    \"geo\": {\n        \"$geoIntersects\": {\n            \"$geometry\": {\n                \"type\": \"Polygon\",\n                \"coordinates\": [[0,0], [1,1], [3,3]],\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing skip Method for FindMany in Python\nDESCRIPTION: Method to set the skip parameter for the query, specifying how many documents to omit from the beginning of the results.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/queries.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n | skip(n: Optional[int]) -> \"FindMany\"\n```\n\n----------------------------------------\n\nTITLE: Defining DeleteQuery Class in Python\nDESCRIPTION: Defines the DeleteQuery class that inherits from SessionMethods and serves as a base class for deletion operations.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/queries.md#2025-04-17_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nclass DeleteQuery(SessionMethods)\n```\n\n----------------------------------------\n\nTITLE: Accessing Motor Collection with Beanie ODM\nDESCRIPTION: Class method to get the underlying AsyncIOMotorCollection for low-level MongoDB operations when needed.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/document.md#2025-04-17_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n | @classmethod\n | get_motor_collection(cls) -> AsyncIOMotorCollection\n```\n\n----------------------------------------\n\nTITLE: Implementing Free Fall Migration in Python\nDESCRIPTION: Example of a free fall migration in Python using Beanie. It demonstrates how to implement custom migration logic with more flexibility, including session handling for rollback capability.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/migrations.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom pydantic.main import BaseModel\n\nfrom beanie import Document, free_fall_migration\n\n\nclass Tag(BaseModel):\n    color: str\n    name: str\n\n\nclass OldNote(Document):\n    name: str\n    tag: Tag\n\n    class Settings:\n        name = \"notes\"\n\n\nclass Note(Document):\n    title: str\n    tag: Tag\n\n    class Settings:\n        name = \"notes\"\n\n\nclass Forward:\n    @free_fall_migration(document_models=[OldNote, Note])\n    async def name_to_title(self, session):\n        async for old_note in OldNote.find_all():\n            new_note = Note(\n                id=old_note.id, title=old_note.name, tag=old_note.tag\n            )\n            await new_note.replace(session=session)\n\n\nclass Backward:\n    @free_fall_migration(document_models=[OldNote, Note])\n    async def title_to_name(self, session):\n        async for old_note in Note.find_all():\n            new_note = OldNote(\n                id=old_note.id, name=old_note.title, tag=old_note.tag\n            )\n            await new_note.replace(session=session)\n```\n\n----------------------------------------\n\nTITLE: Using Beanie's Query Syntactic Sugar for Aggregation\nDESCRIPTION: Demonstrates Beanie's simplified aggregation syntax to compute the sum of new bikes across all types, providing a more concise alternative to full aggregation pipelines.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/views.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nresults = await Metrics.all().sum(Metrics.new)\n\nprint(results)\n\n>> 3\n```\n\n----------------------------------------\n\nTITLE: Defining Near Class for MongoDB Geospatial Queries in Beanie ODM\nDESCRIPTION: Implementation of the $near operator in Beanie ODM that allows querying documents based on proximity to specified geospatial coordinates. Extends the BaseFindGeospatialOperator class.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/find.md#2025-04-17_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nclass Near(BaseFindGeospatialOperator)\n```\n\n----------------------------------------\n\nTITLE: Aggregating View Data with MongoDB Pipeline in Beanie\nDESCRIPTION: Shows how to use Beanie's aggregate method with a MongoDB aggregation pipeline to compute the total count of new bikes across all types.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/views.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nresults = await Metrics.aggregate([{\n    \"$group\": {\n        \"_id\": None,\n        \"new_total\": {\"$sum\": \"$new\"}\n    }\n}]).to_list()\n\nprint(results)\n\n>> [{'_id': None, 'new_total': 3}]\n```\n\n----------------------------------------\n\nTITLE: Implementing __await__ Method in UpdateOne Class\nDESCRIPTION: Implements the __await__ method which enables awaiting on an UpdateOne instance, running the query and returning an UpdateResult object.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/queries.md#2025-04-17_snippet_27\n\nLANGUAGE: python\nCODE:\n```\n | __await__() -> UpdateResult\n```\n\n----------------------------------------\n\nTITLE: Inserting Documents with Different Schemas in Beanie\nDESCRIPTION: Demonstrates how to insert documents of different classes into the same collection using the multi-model pattern. Three documents of class One and one document of class Two are inserted.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/multi-model.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nawait One().insert()\nawait One().insert()\nawait One().insert()\n\nawait Two().insert()\n```\n\n----------------------------------------\n\nTITLE: Ignoring Revision Checks in Beanie ODM (Python)\nDESCRIPTION: Shows how to bypass revision checking for a specific operation using the ignore_revision parameter, allowing updates to proceed even if the document has been modified by another process.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/articles/1.8.0.md#2025-04-17_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nawait s.replace(ignore_revision=True)\n```\n\n----------------------------------------\n\nTITLE: Using Native PyMongo Aggregation Syntax with Beanie\nDESCRIPTION: Demonstrates how to use PyMongo's native aggregation syntax with Beanie's aggregate() method. Shows how to specify a projection model for typed results rather than returning dictionaries.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/aggregate.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass OutputItem(BaseModel):\n    id: str = Field(None, alias=\"_id\")\n    total: float\n\n\nresult = await Product.find(\n    Product.category.name == \"Chocolate\").aggregate(\n    [{\"$group\": {\"_id\": \"$category.name\", \"total\": {\"$avg\": \"$price\"}}}],\n    projection_model=OutputItem\n).to_list()\n```\n\n----------------------------------------\n\nTITLE: Generated MongoDB Query for NearSphere Operator\nDESCRIPTION: The MongoDB query object that would be generated by the NearSphere operator example. Shows the structure of a $nearSphere query with point geometry and max distance parameter for spherical calculations.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/find.md#2025-04-17_snippet_29\n\nLANGUAGE: python\nCODE:\n```\n{\n    \"geo\": {\n        \"$nearSphere\": {\n            \"$geometry\": {\n                \"type\": \"Point\",\n                \"coordinates\": [1.2345, 2.3456],\n            },\n            \"$maxDistance\": 500,\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying a View with find() in Beanie ODM\nDESCRIPTION: Demonstrates how to query the Metrics view using Beanie's find method to filter results. The example finds metrics for Road bikes and outputs the result showing 3 total bikes with 2 being new.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/views.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nresults = await Metrics.find(Metrics.type == \"Road\").to_list()\nprint(results)\n\n>> [Metrics(type='Road', number=3, new=2)]\n```\n\n----------------------------------------\n\nTITLE: Querying Secondary Document Type in Beanie's Multi-model Collection\nDESCRIPTION: Demonstrates how to query only documents of class Two from a multi-model collection. This returns only the single document of that type.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/multi-model.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndocs = await Two.all().to_list()\nprint(len(docs))\n\n>> 1 # It found only documents of class Two\n```\n\n----------------------------------------\n\nTITLE: Inserting Documents with Inheritance in Beanie ODM (Python)\nDESCRIPTION: This snippet shows how to insert documents of different types in the inheritance hierarchy using Beanie ODM. It includes initializing the database connection and inserting Bike, Car, Bus, and Owner instances.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/inheritance.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclient = AsyncIOMotorClient()\nawait init_beanie(client.test_db, document_models=[Vehicle, Bicycle, Bike, Car, Bus, Owner])\n\nbike_1 = await Bike(color='black', fuel='gasoline').insert()\n\ncar_1 = await Car(color='grey', body='sedan', fuel='gasoline').insert()\ncar_2 = await Car(color='white', body='crossover', fuel='diesel').insert()\n\nbus_1 = await Bus(color='white', seats=80, body='bus', fuel='diesel').insert()\nbus_2 = await Bus(color='yellow', seats=26, body='minibus', fuel='diesel').insert()\n\nowner = await Owner(name='John', vehicles=[car_1, car_2, bus_1]).insert()\n```\n\n----------------------------------------\n\nTITLE: Using the Mul Operator with Beanie Document Models\nDESCRIPTION: Example usage of the Mul operator to multiply a numeric field by 2 in a document.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/update.md#2025-04-17_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nclass Sample(Document):\n    one: int\n\nMul({Sample.one, 2})\n```\n\n----------------------------------------\n\nTITLE: Setting Document Values Example\nDESCRIPTION: Example showing how to use the set method to update document values in a Sample document class.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/interfaces.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Sample(Document):\n    one: int\n\nawait Document.find(Sample.one == 1).set({Sample.one: 100})\n```\n\n----------------------------------------\n\nTITLE: Generated MongoDB Query for GeoWithin Operator\nDESCRIPTION: The MongoDB query object that would be generated by the GeoWithin operator example. Shows the structure of a $geoWithin query with a polygon geometry.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/find.md#2025-04-17_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n{\n    \"geo\": {\n        \"$geoWithin\": {\n            \"$geometry\": {\n                \"type\": \"Polygon\",\n                \"coordinates\": [[0,0], [1,1], [3,3]],\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Object Replacement in BeanieODM\nDESCRIPTION: Demonstrates how to enable full object replacement for nested objects when changes occur.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/state_management.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Dict\n\n\nclass Item(Document):\n    name: str\n    attributes: Dict[str, float]\n\n    class Settings:\n        use_state_management = True\n        state_management_replace_objects = True\n```\n\n----------------------------------------\n\nTITLE: Defining BitsAnySet Class for MongoDB Bitwise Queries in Beanie ODM\nDESCRIPTION: Implementation of the $bitsAnySet operator in Beanie ODM that matches integer or binary values where any of the specified bit positions has a value of 1. Extends the BaseFindBitwiseOperator class.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/find.md#2025-04-17_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nclass BitsAnySet(BaseFindBitwiseOperator)\n```\n\n----------------------------------------\n\nTITLE: Implementing Exists Element Operator in Python with Beanie ODM\nDESCRIPTION: The Exists class implements MongoDB's $exists element query operator. It matches documents that have the specified field, regardless of the field's value.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/find.md#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nclass Exists(BaseFindElementOperator)\n```\n\nLANGUAGE: python\nCODE:\n```\nclass Product(Document):\n    price: float\n\nExists(Product.price, True)\n```\n\nLANGUAGE: python\nCODE:\n```\n{\"price\": {\"$exists\": True}}\n```\n\n----------------------------------------\n\nTITLE: Registering Event-based Actions for Multiple Events in Beanie ODM (Python)\nDESCRIPTION: Demonstrates how to register a single method as an action for multiple events by passing a list of events to the decorator, allowing code reuse across different document operations.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/articles/1.8.0.md#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom beanie import Insert, Replace\n\nclass Sample(Document):\n    num: int\n    name: str\n\n    @before_event([Insert, Replace])\n    def capitalize_name(self):\n        self.name = self.name.capitalize()\n```\n\n----------------------------------------\n\nTITLE: Implementing Aggregate Methods Class in Python\nDESCRIPTION: Base class for document aggregation operations in Beanie ODM including sum, average, max, and min calculations.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/interfaces.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass AggregateMethods()\n```\n\n----------------------------------------\n\nTITLE: Generated MongoDB Query for All Operator\nDESCRIPTION: The MongoDB query object that would be generated by the All operator example. Shows the structure of a $all query for array fields.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/find.md#2025-04-17_snippet_32\n\nLANGUAGE: python\nCODE:\n```\n{\"results\": {\"$all\": [80, 85]}}\n```\n\n----------------------------------------\n\nTITLE: Defining Self-Linked Documents in Python with Beanie ODM\nDESCRIPTION: This code shows how to define a document class that can link to itself, creating a tree-like structure. It uses Optional and Link types to create flexible self-referencing relations.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/relations.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom beanie import Document, Link\nfrom typing import Optional\n\nclass SelfLinkedSample(Document):\n    name: str\n    left: Optional[Link[\"SelfLinkedSample\"]]\n    right: Optional[Link[\"SelfLinkedSample\"]]\n```\n\n----------------------------------------\n\nTITLE: Generated MongoDB CurrentDate Query Format\nDESCRIPTION: Example of the MongoDB query format generated by the CurrentDate operator, showing how it sets a field to the current date.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/update.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n{\"$currentDate\": {\"ts\": True}}\n```\n\n----------------------------------------\n\nTITLE: Using All Operator with Beanie Documents\nDESCRIPTION: Example showing how to use the All operator with a Beanie Document model. The example demonstrates querying for documents that have an array field containing all specified values (80 and 85).\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/find.md#2025-04-17_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nclass Sample(Document):\n    results: List[int]\n\nAll(Sample.results, [80, 85])\n```\n\n----------------------------------------\n\nTITLE: Implementing __await__ Method for UpdateMany in Python\nDESCRIPTION: Special method that allows the UpdateMany query to be awaited, running the query and returning an UpdateResult with information about the operation's outcome.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/queries.md#2025-04-17_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n | __await__() -> UpdateResult\n```\n\n----------------------------------------\n\nTITLE: Sum Aggregation Example\nDESCRIPTION: Example demonstrating how to calculate the sum of a field across filtered documents.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/interfaces.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass Sample(Document):\n    price: int\n    count: int\n\nsum_count = await Document.find(Sample.price <= 100).sum(Sample.count)\n```\n\n----------------------------------------\n\nTITLE: Generated MongoDB Query for Size Operator\nDESCRIPTION: The MongoDB query object that would be generated by the Size operator example. Shows the structure of a $size query for array fields.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/find.md#2025-04-17_snippet_38\n\nLANGUAGE: python\nCODE:\n```\n{\"results\": {\"$size\": 2}}\n```\n\n----------------------------------------\n\nTITLE: Bypassing Revision Checking in Beanie\nDESCRIPTION: Shows how to ignore revision checking by using the ignore_revision parameter when calling document operations. This allows changes to be applied even if the local document copy is outdated.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/revision.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nawait s.replace(ignore_revision=True)\n```\n\n----------------------------------------\n\nTITLE: Querying All Documents in Beanie's Multi-model Collection\nDESCRIPTION: Shows how to query all documents in a multi-model collection by using the parent UnionDoc class. This returns documents of all types that share the collection.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/multi-model.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndocs = await Parent.all().to_list()\nprint(len(docs))\n\n>> 4 # instances of both classes will be in the output here\n```\n\n----------------------------------------\n\nTITLE: Using Size Operator with Beanie Documents\nDESCRIPTION: Example showing how to use the Size operator with a Beanie Document model. The example demonstrates querying for documents with an array field containing exactly 2 elements.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/find.md#2025-04-17_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nclass Sample(Document):\n    results: List[int]\n\nSize(Sample.results, 2)\n```\n\n----------------------------------------\n\nTITLE: Defining BitsAllSet Class for MongoDB Bitwise Queries in Beanie ODM\nDESCRIPTION: Implementation of the $bitsAllSet operator in Beanie ODM that matches integer or binary values where all specified bit positions have a value of 1. Extends the BaseFindBitwiseOperator class.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/find.md#2025-04-17_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nclass BitsAllSet(BaseFindBitwiseOperator)\n```\n\n----------------------------------------\n\nTITLE: PydanticObjectId Class Implementation in Beanie ODM\nDESCRIPTION: Definition of the PydanticObjectId class which extends MongoDB's ObjectId to make it compatible with Pydantic validation.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/fields.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass PydanticObjectId(ObjectId)\n```\n\n----------------------------------------\n\nTITLE: Implementing the CurrentDate Operator for MongoDB Updates\nDESCRIPTION: The CurrentDate class implements MongoDB's $currentDate operator in Beanie ODM for setting fields to the current date/time.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/update.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass CurrentDate(BaseUpdateGeneralOperator)\n```\n\n----------------------------------------\n\nTITLE: Installing Beanie with AWS Support\nDESCRIPTION: Installing Beanie with MONGODB-AWS authentication support using pip.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/getting-started.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install \"beanie[aws]\"\n```\n\n----------------------------------------\n\nTITLE: Implementing the Mul Operator for MongoDB Updates\nDESCRIPTION: The Mul class implements MongoDB's $mul operator in Beanie ODM for multiplying numeric field values by a specified factor.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/update.md#2025-04-17_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nclass Mul(BaseUpdateGeneralOperator)\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Event Actions in Beanie ODM (Python)\nDESCRIPTION: This snippet illustrates how to use an async method as an after-event action for Insert and Replace events in a Beanie Document class.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/actions.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom beanie import Insert, Replace\n\n\nclass Sample(Document):\n    num: int\n    name: str\n\n    @after_event(Insert, Replace)\n    async def send_callback(self):\n        await client.send(self.id)\n```\n\n----------------------------------------\n\nTITLE: Default Nested Object Handling in BeanieODM\nDESCRIPTION: Demonstrates the default behavior for handling changes in nested objects with state management.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/state_management.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Dict\n\n\nclass Item(Document):\n    name: str\n    attributes: Dict[str, float]\n\n    class Settings:\n        use_state_management = True\n```\n\n----------------------------------------\n\nTITLE: Configuring validate_on_save in a Beanie Document Class\nDESCRIPTION: Shows how to set up a Document class with validate_on_save enabled in the Settings inner class. This configuration ensures that all field values are validated before any save operation occurs.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/on_save_validation.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Sample(Document):\n    num: int\n    name: str\n\n    class Settings:\n        validate_on_save = True\n```\n\n----------------------------------------\n\nTITLE: Implementing the Unset Operator for MongoDB Updates\nDESCRIPTION: The Unset class implements MongoDB's $unset operator in Beanie ODM for removing specified fields from documents.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/update.md#2025-04-17_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nclass Unset(BaseUpdateGeneralOperator)\n```\n\n----------------------------------------\n\nTITLE: Installing Beanie with GSSAPI Support\nDESCRIPTION: Installing Beanie with GSSAPI authentication support using pip.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/getting-started.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install \"beanie[gssapi]\"\n```\n\n----------------------------------------\n\nTITLE: Defining BitsAnyClear Class for MongoDB Bitwise Queries in Beanie ODM\nDESCRIPTION: Implementation of the $bitsAnyClear operator in Beanie ODM that matches integer or binary values where any of the specified bit positions has a value of 0. Extends the BaseFindBitwiseOperator class.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/find.md#2025-04-17_snippet_41\n\nLANGUAGE: python\nCODE:\n```\nclass BitsAnyClear(BaseFindBitwiseOperator)\n```\n\n----------------------------------------\n\nTITLE: Skipping Event Actions in Beanie ODM Operations (Python)\nDESCRIPTION: This example demonstrates how to selectively skip actions when performing operations like insert and replace. It shows different ways to use the skip_actions parameter.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/actions.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom beanie import After, Before, Insert, Replace\n\n\nclass Sample(Document):\n    num: int\n    name: str\n\n    @before_event(Insert)\n    def capitalize_name(self):\n        self.name = self.name.capitalize()\n\n    @before_event(Replace)\n    def redact_name(self):\n        self.name = \"[REDACTED]\"\n\n    @after_event(Replace)\n    def num_change(self):\n        self.num -= 1\n\n\nsample = Sample()\n\n# capitalize_name will not be executed\nawait sample.insert(skip_actions=['capitalize_name'])\n\n# num_change will not be executed\nawait sample.replace(skip_actions=[After])\n\n# redact_name and num_change will not be executed\nawait sample.replace(skip_actions[Before, 'num_change'])\n```\n\n----------------------------------------\n\nTITLE: Implementing update_many Method for FindMany in Python\nDESCRIPTION: Method to provide search criteria to the UpdateMany query. It accepts dictionary arguments for modifications and an optional session parameter.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/queries.md#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n | update_many(*args: Union[Dict[str, Any], Mapping[str, Any]], *, session: Optional[ClientSession] = None) -> UpdateMany\n```\n\n----------------------------------------\n\nTITLE: Saving Changed Values in BeanieODM\nDESCRIPTION: Example of how to save only modified values using the save_changes() method on an existing document.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/state_management.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ns = await Sample.find_one(Sample.name == \"Test\")\ns.num = 100\nawait s.save_changes()\n```\n\n----------------------------------------\n\nTITLE: Implementing the Pull Operator for MongoDB Array Updates\nDESCRIPTION: The Pull class implements MongoDB's $pull array operator in Beanie ODM, which removes all array elements that match a specified condition.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/update.md#2025-04-17_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nclass Pull(BaseUpdateArrayOperator)\n```\n\n----------------------------------------\n\nTITLE: Task Dependencies Processing Example\nDESCRIPTION: Example showing how dependent tasks are processed based on dependency state\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/batteries/queue.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom beanie_batteries_queue import State\n\ntask1 = SimpleTask(s=\"test1\")\nawait task1.push()\n\ntask2 = TaskWithDirectDependency(s=\"test2\", direct_dependency=task1)\nawait task2.push()\n\ntask_from_queue = await TaskWithDirectDependency.pop()\nassert task_from_queue is None\n# task2 is not popped from the queue because task1 is not finished yet\n\nawait task1.finish()\n\ntask_from_queue = await TaskWithDirectDependency.pop()\nassert task_from_queue is not None\n# task2 is popped from the queue because task1 is finished\n```\n\n----------------------------------------\n\nTITLE: ExpressionField Class Implementation in Beanie ODM\nDESCRIPTION: Definition of the ExpressionField class which extends the string type to support MongoDB query expressions.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/fields.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass ExpressionField(str)\n```\n\n----------------------------------------\n\nTITLE: Generated MongoDB Inc Query Format\nDESCRIPTION: Example of the MongoDB query format generated by the Inc operator, showing the increment operation syntax.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/update.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n{\"$inc\": {\"one\": 2}}\n```\n\n----------------------------------------\n\nTITLE: Generating Changelog for Beanie in Python\nDESCRIPTION: This command runs a Python script to generate the changelog for the new Beanie version. The script should be updated with the current and new version numbers before execution.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/publishing.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython scripts/generate_changelog.py\n```\n\n----------------------------------------\n\nTITLE: Interacting with Document Changes in BeanieODM\nDESCRIPTION: Demonstrates methods for checking changes, getting change details, and rolling back modifications.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/state_management.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ns = await Sample.find_one(Sample.name == \"Test\")\n\ns.is_changed == False\ns.get_changes == {}\n\ns.num = 200\n\ns.is_changed == True\ns.get_changes() == {\"num\": 200}\n\ns.rollback()\n\ns.is_changed == False\ns.get_changes() == {}\n```\n\n----------------------------------------\n\nTITLE: Using the Pull Operator with Beanie Document Models\nDESCRIPTION: Example usage of the Pull operator with the In operator to remove multiple specific elements from an array field.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/update.md#2025-04-17_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nclass Sample(Document):\n    results: List[int]\n\nPull(In(Sample.result, [1,2,3,4,5])\n```\n\n----------------------------------------\n\nTITLE: Task Dependencies Implementation\nDESCRIPTION: Example of implementing task dependencies with direct dependency type\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/batteries/queue.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom beanie_batteries_queue import Task, DependencyType\nfrom beanie_batteries_queue import Link\nfrom pydantic import Field\n\n\nclass SimpleTask(Task):\n    s: str\n\n\nclass TaskWithDirectDependency(Task):\n    s: str\n    direct_dependency: Link[SimpleTask] = Field(\n        dependency_type=DependencyType.DIRECT\n    )\n```\n\n----------------------------------------\n\nTITLE: Generated MongoDB Max Query Format\nDESCRIPTION: Example of the MongoDB query format generated by the Max operator, showing the maximum value comparison syntax.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/update.md#2025-04-17_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n{\"$max\": {\"one\": 2}}\n```\n\n----------------------------------------\n\nTITLE: Using the Min Operator with Beanie Document Models\nDESCRIPTION: Example usage of the Min operator to potentially update a field with a value of 2 if it's less than the current value.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/update.md#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass Sample(Document):\n    one: int\n\nMin({Sample.one, 2})\n```\n\n----------------------------------------\n\nTITLE: Querying Specific Document Types in Beanie's Multi-model Collection\nDESCRIPTION: Shows how to query only documents of a specific type from a multi-model collection. This example queries all documents of class One, returning only the three documents of that type.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/multi-model.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndocs = await One.all().to_list()\nprint(len(docs))\n\n>> 3 # It found only documents of class One\n```\n\n----------------------------------------\n\nTITLE: Executing a Find Query with Lazy Parsing in Beanie ODM\nDESCRIPTION: This snippet demonstrates how to use lazy parsing in a Beanie ODM find query. By setting lazy_parse=True, the parsing and validation process is deferred until individual fields are accessed, potentially improving query performance.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/lazy_parse.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nawait Sample.find(Sample.number == 10, lazy_parse=True).to_list()\n```\n\n----------------------------------------\n\nTITLE: Implementing the Push Operator for MongoDB Array Updates\nDESCRIPTION: The Push class implements MongoDB's $push array operator in Beanie ODM, which adds an element to the end of an array.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/update.md#2025-04-17_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nclass Push(BaseUpdateArrayOperator)\n```\n\n----------------------------------------\n\nTITLE: Task State Management - Finished State\nDESCRIPTION: Example showing task state transition to finished state\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/batteries/queue.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom beanie_batteries_queue import State\n\ntask = SimpleTask(s=\"test\")\nawait task.push()\n\nasync for task in SimpleTask.queue():\n    assert task.state == State.RUNNING\n    await task.finish()\n    break\n\ntask = await SimpleTask.find_one({\"s\": \"test\"})\nassert task.state == State.FINISHED\n```\n\n----------------------------------------\n\nTITLE: Using Async Methods as Event Actions in Beanie ODM (Python)\nDESCRIPTION: Shows how to use asynchronous methods as event actions in Beanie, allowing for async operations like API calls or database operations to be performed after document events.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/articles/1.8.0.md#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom beanie import Insert, Replace\n\nclass Sample(Document):\n    num: int\n    name: str\n\n    @after_event([Insert, Replace])\n    async def send_callback(self):\n        await client.send(self.id)\n```\n\n----------------------------------------\n\nTITLE: Generated MongoDB Min Query Format\nDESCRIPTION: Example of the MongoDB query format generated by the Min operator, showing the minimum value comparison syntax.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/update.md#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n{\"$min\": {\"one\": 2}}\n```\n\n----------------------------------------\n\nTITLE: Object Replacement Behavior Example in BeanieODM\nDESCRIPTION: Shows how nested object changes are handled when state_management_replace_objects is enabled.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/state_management.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ni = Item(name=\"Test\", attributes={\"attribute_1\": 1.0, \"attribute_2\": 2.0})\nawait i.insert()\ni.attributes.attribute_1 = 1.0\nawait i.save_changes()\n# Changes will consist of: {\"attributes.attribute_1\": 1.0, \"attributes.attribute_2\": 2.0}\n# Keeping attribute_2\n```\n\n----------------------------------------\n\nTITLE: Customizing ID Field Type in Beanie Documents\nDESCRIPTION: This example demonstrates how to customize the ID field type in a Beanie document, using UUID instead of the default PydanticObjectId.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/defining-a-document.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom uuid import UUID, uuid4\n\nfrom pydantic import Field\n\n\nclass Sample(Document):\n    id: UUID = Field(default_factory=uuid4)\n    num: int\n    description: str\n```\n\n----------------------------------------\n\nTITLE: Generated MongoDB Push Query Format\nDESCRIPTION: Example of the MongoDB query format generated by the Push operator, showing how it adds elements to arrays.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/update.md#2025-04-17_snippet_32\n\nLANGUAGE: python\nCODE:\n```\n{\"$push\": { \"results\": 1}}\n```\n\n----------------------------------------\n\nTITLE: Task Priority Implementation\nDESCRIPTION: Example demonstrating task priority levels and processing order\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/batteries/queue.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom beanie_batteries_queue import Priority\n\ntask1 = SimpleTask(s=\"test1\", priority=Priority.LOW)\nawait task1.push()\ntask2 = SimpleTask(s=\"test2\", priority=Priority.HIGH)\nawait task2.push()\n\nasync for task in SimpleTask.queue():\n    assert task.s == \"test2\"\n    await task.finish()\n    break\n```\n\n----------------------------------------\n\nTITLE: Using the Max Operator with Beanie Document Models\nDESCRIPTION: Example usage of the Max operator to potentially update a field with a value of 2 if it's greater than the current value.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/update.md#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nclass Sample(Document):\n    one: int\n\nMax({Sample.one, 2})\n```\n\n----------------------------------------\n\nTITLE: Implementing the Max Operator for MongoDB Updates\nDESCRIPTION: The Max class implements MongoDB's $max operator in Beanie ODM, which updates a field value only if the specified value is greater than the existing value.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/update.md#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nclass Max(BaseUpdateGeneralOperator)\n```\n\n----------------------------------------\n\nTITLE: Find Documents Alias with Beanie ODM\nDESCRIPTION: Alias for find_many() method that returns a FindMany query object with the same functionality.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/document.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n | @classmethod\n | find(cls, *args: Union[Dict[str, Any], Mapping[str, Any], bool], *, skip: Optional[int] = None, limit: Optional[int] = None, sort: Union[None, str, List[Tuple[str, SortDirection]]] = None, projection_model: Optional[Type[BaseModel]] = None, session: Optional[ClientSession] = None) -> FindMany\n```\n\n----------------------------------------\n\nTITLE: Installing Beanie with Poetry\nDESCRIPTION: Basic installation of Beanie package using Poetry dependency manager.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/getting-started.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npoetry add beanie\n```\n\n----------------------------------------\n\nTITLE: Using the PullAll Operator with Beanie Document Models\nDESCRIPTION: Example usage of the PullAll operator to remove multiple specific values from an array field in a document.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/update.md#2025-04-17_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nclass Sample(Document):\n    results: List[int]\n\nPullAll({ Sample.results: [ 0, 5 ] })\n```\n\n----------------------------------------\n\nTITLE: Package Installation Command\nDESCRIPTION: Shell command to install Beanie with queue functionality\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/batteries/queue.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install beanie[queue]\n```\n\n----------------------------------------\n\nTITLE: Installing Beanie with SRV Support\nDESCRIPTION: Installing Beanie with support for mongodb+srv:// URIs using pip.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/getting-started.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npip install \"beanie[srv]\"\n```\n\n----------------------------------------\n\nTITLE: Implementing the SetOnInsert Operator for MongoDB Updates\nDESCRIPTION: The SetOnInsert class implements MongoDB's $setOnInsert operator in Beanie ODM, which sets field values only during document insertion.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/update.md#2025-04-17_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nclass SetOnInsert(BaseUpdateGeneralOperator)\n```\n\n----------------------------------------\n\nTITLE: Installing Beanie with All Optional Dependencies\nDESCRIPTION: Command to install Beanie with all optional dependencies in one go.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/getting-started.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npip install \"beanie[gssapi,aws,ocsp,snappy,srv,zstd,encryption]\"\n```\n\n----------------------------------------\n\nTITLE: Installing Beanie using pip\nDESCRIPTION: Command to install Beanie using pip package manager.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/index.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install beanie\n```\n\n----------------------------------------\n\nTITLE: Creating New Migration with Beanie CLI\nDESCRIPTION: Command to create a new migration file using Beanie CLI. It generates a file with Forward and Backward migration classes.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/migrations.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbeanie new-migration -n migration_name -p relative/path/to/migrations/directory/\n```\n\n----------------------------------------\n\nTITLE: Handling Validation Errors on Save in Beanie ODM (Python)\nDESCRIPTION: Shows how validation on save prevents write operations with invalid data, raising an error when attempting to save a document with field values that don't match their type definitions.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/articles/1.8.0.md#2025-04-17_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nsample = await Sample.find_one(Sample.name == \"Test\")\nsample.num = \"wrong value type\"\n\n# Next call will raise an error\nawait sample.replace()\n```\n\n----------------------------------------\n\nTITLE: Generated MongoDB Pop Query Format\nDESCRIPTION: Example of the MongoDB query format generated by the Pop operator, showing how it removes an element from an array.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/update.md#2025-04-17_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n{\"$pop\": {\"results\": -1}}\n```\n\n----------------------------------------\n\nTITLE: Implementing the PullAll Operator for MongoDB Array Updates\nDESCRIPTION: The PullAll class implements MongoDB's $pullAll array operator in Beanie ODM, which removes all instances of specified values from an array.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/update.md#2025-04-17_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nclass PullAll(BaseUpdateArrayOperator)\n```\n\n----------------------------------------\n\nTITLE: Task Pop Operation Example\nDESCRIPTION: Alternative method to process tasks using pop() instead of queue()\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/batteries/queue.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom beanie_batteries_queue import State\n\n# Producer\ntask = SimpleTask(s=\"test\")\nawait task.push()\n\n# Consumer\ntask = await SimpleTask.pop()\nassert task.s == \"test\"\n# Do some work\nawait task.finish()\n```\n\n----------------------------------------\n\nTITLE: Creating a New Git Tag for Beanie Release\nDESCRIPTION: This Git command creates a new annotated tag for the Beanie release. Replace 'v1.xx.y' with the actual version number being released.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/publishing.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit tag -a v1.xx.y -m \"Release v1.xx.y\"\n```\n\n----------------------------------------\n\nTITLE: Running Backward Migration with Beanie CLI\nDESCRIPTION: Commands to run backward migrations using Beanie CLI. Includes options for rolling back a single migration or all migrations.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/migrations.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbeanie migrate -uri 'mongodb+srv://user:pass@host' -db db -p relative/path/to/migrations/directory/ --distance 1 --backward\n```\n\nLANGUAGE: shell\nCODE:\n```\nbeanie migrate -uri 'mongodb+srv://user:pass@host' -db db -p relative/path/to/migrations/directory/ --backward\n```\n\n----------------------------------------\n\nTITLE: Enabling State Management for Partial Updates in Beanie ODM (Python)\nDESCRIPTION: Demonstrates how to enable state management for a document class, which allows tracking document changes and updating only modified fields when saving.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/articles/1.8.0.md#2025-04-17_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nclass Sample(Document):\n    num: int\n    name: str\n\n    class Settings:\n        use_state_management = True\n```\n\n----------------------------------------\n\nTITLE: Basic Task Class Declaration\nDESCRIPTION: Simple task class definition extending the base Task class\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/batteries/queue.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom beanie_batteries_queue import Task\n\n\nclass SimpleTask(Task):\n    s: str\n```\n\n----------------------------------------\n\nTITLE: Replacing Document without Updating Links in Python using Beanie ODM\nDESCRIPTION: This code demonstrates how to replace a document without updating its linked documents using the WriteRules.DO_NOTHING option in Beanie ODM. It updates only the main document, ignoring changes to linked objects.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/relations.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nhouse.door.height = 3\nhouse.name = \"NEW NAME\"\n\n# The next call will just replace the house instance with new data, but the linked door object will not be synced\nawait house.replace(link_rule=WriteRules.DO_NOTHING)\n\n# `insert` and `save` methods will work the same way\n```\n\n----------------------------------------\n\nTITLE: Implementing update Method for UpdateQuery in Python\nDESCRIPTION: Method to provide modifications to the update query. It accepts dictionary arguments for modifications and an optional session parameter.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/queries.md#2025-04-17_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n | update(*args: Union[Dict[str, Any], Mapping[str, Any]], *, session: Optional[ClientSession] = None) -> \"UpdateQuery\"\n```\n\n----------------------------------------\n\nTITLE: Pushing New Git Tag to Remote Repository\nDESCRIPTION: This Git command pushes the newly created tag to the remote repository. Ensure to replace 'v1.xx.y' with the actual version number of the tag.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/publishing.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin v1.xx.y\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Error Raising with Invalid Values\nDESCRIPTION: Illustrates how the validate_on_save feature works when attempting to save a document with an invalid value. The example shows a type error that will be caught during the replace() operation.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/on_save_validation.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsample = Sample.find_one(Sample.name == \"Test\")\nsample.num = \"wrong value type\"\n\n# Next call will raise an error\nawait sample.replace()\n```\n\n----------------------------------------\n\nTITLE: Handling Document Revisions in Update Operations in Beanie ODM (Python)\nDESCRIPTION: Demonstrates how revision tracking affects document update operations, where updates will fail if the document has been modified by another process since it was retrieved.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/articles/1.8.0.md#2025-04-17_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ns = await Sample.find_one(Sample.name=\"TestName\")\ns.num = 10\n\n# If a concurrent process already changed the doc, \n# the next operation will raise an error\nawait s.replace()\n```\n\n----------------------------------------\n\nTITLE: Defining BitsAllClear Class for MongoDB Bitwise Queries in Beanie ODM\nDESCRIPTION: Implementation of the $bitsAllClear operator in Beanie ODM that matches integer or binary values where all specified bit positions have a value of 0. Extends the BaseFindBitwiseOperator class.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/find.md#2025-04-17_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nclass BitsAllClear(BaseFindBitwiseOperator)\n```\n\n----------------------------------------\n\nTITLE: Configuring Null Value Handling in Beanie Documents\nDESCRIPTION: This example shows how to configure whether null values should be saved to the database in Beanie documents.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/defining-a-document.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass Sample(Document):\n    num: int\n    description: Optional[str] = None\n\n    class Settings:\n        keep_nulls = False\n```\n\n----------------------------------------\n\nTITLE: Generated MongoDB Query for Near Operator\nDESCRIPTION: The MongoDB query object that would be generated by the Near operator example. Shows the structure of a $near query with point geometry and max distance parameter.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/find.md#2025-04-17_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n{\n    \"geo\": {\n        \"$near\": {\n            \"$geometry\": {\n                \"type\": \"Point\",\n                \"coordinates\": [1.2345, 2.3456],\n            },\n            \"$maxDistance\": 500,\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Beanie Migration Help\nDESCRIPTION: Command to show the help message for Beanie migrate command, which lists all available parameters and their descriptions.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/migrations.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nbeanie migrate --help\n```\n\n----------------------------------------\n\nTITLE: Installing Beanie with Snappy Compression\nDESCRIPTION: Installing Beanie with wire protocol compression using Snappy.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/getting-started.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npip install \"beanie[snappy]\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Parameters in Beanie ODM (Python)\nDESCRIPTION: Shows how to configure cache expiration time and capacity for a document class, controlling how long query results are cached and how many different queries can be cached simultaneously.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/articles/1.8.0.md#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nclass Sample(Document):\n    num: int\n    name: str\n\n    class Settings:\n        use_cache = True\n        cache_expiration_time = datetime.timedelta(seconds=10)\n        cache_capacity = 5\n```\n\n----------------------------------------\n\nTITLE: Generated MongoDB Pull Query Format\nDESCRIPTION: Example of the MongoDB query format generated by the Pull operator with an In condition, showing how it removes elements from arrays.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/update.md#2025-04-17_snippet_29\n\nLANGUAGE: python\nCODE:\n```\n{\"$pull\": { \"results\": { $in: [1,2,3,4,5] }}}\n```\n\n----------------------------------------\n\nTITLE: Full Object Assignment with Replacement in BeanieODM\nDESCRIPTION: Demonstrates how complete object assignment behaves with state_management_replace_objects enabled.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/state_management.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ni = Item(name=\"Test\", attributes={\"attribute_1\": 1.0, \"attribute_2\": 2.0})\nawait i.insert()\ni.attributes = {\"attribute_1\": 1.0}\nawait i.save_changes()\n# Changes will consist of: {\"attributes\": {\"attribute_1\": 1.0}}\n# Removing attribute_2\n```\n\n----------------------------------------\n\nTITLE: Nested Object Change Example in BeanieODM\nDESCRIPTION: Shows how nested object changes are handled with default merge behavior.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/state_management.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ni = Item(name=\"Test\", attributes={\"attribute_1\": 1.0, \"attribute_2\": 2.0})\nawait i.insert()\ni.attributes = {\"attribute_1\": 1.0}\nawait i.save_changes()\n# Changes will consist of: {\"attributes.attribute_1\": 1.0}\n# Keeping attribute_2\n```\n\n----------------------------------------\n\nTITLE: Pulling Latest Changes from Master Branch in Git\nDESCRIPTION: This Git command pulls the latest changes from the master branch of the Beanie repository. It should be executed before creating a new tag for the release.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/publishing.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit pull origin master\n```\n\n----------------------------------------\n\nTITLE: Generated MongoDB PullAll Query Format\nDESCRIPTION: Example of the MongoDB query format generated by the PullAll operator, showing how it removes specified values from arrays.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/update.md#2025-04-17_snippet_35\n\nLANGUAGE: python\nCODE:\n```\n{\"$pullAll\": { \"results\": [ 0, 5 ] }}\n```\n\n----------------------------------------\n\nTITLE: Customizing BSON Encoders in Beanie Documents\nDESCRIPTION: This snippet shows how to customize BSON encoders for specific types in Beanie documents, using IPv4Address as an example.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/defining-a-document.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom ipaddress import IPv4Address\n\n\ndef ipv4address_to_int(v: IPv4Address):\n    return int(v)\n\nclass Sample(Document):\n    ip: IPv4Address\n\n    class Settings:\n        bson_encoders = {\n          IPv4Address: ipv4address_to_int\n        }\n```\n\n----------------------------------------\n\nTITLE: Running Forward Migration with Beanie CLI\nDESCRIPTION: Commands to run forward migrations using Beanie CLI. Includes options for running a single migration or all migrations.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/migrations.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nbeanie migrate -uri 'mongodb+srv://user:pass@host' -db db -p relative/path/to/migrations/directory/ --distance 1\n```\n\nLANGUAGE: shell\nCODE:\n```\nbeanie migrate -uri 'mongodb://user:pass@host' -db db -p relative/path/to/migrations/directory/\n```\n\n----------------------------------------\n\nTITLE: Generated MongoDB Mul Query Format\nDESCRIPTION: Example of the MongoDB query format generated by the Mul operator, showing the multiplication operation syntax.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/operators/update.md#2025-04-17_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n{\"$mul\": {\"one\": 2}}\n```\n\n----------------------------------------\n\nTITLE: Task Processing Example\nDESCRIPTION: Complete example of pushing and processing a task with state management\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/batteries/queue.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom beanie_batteries_queue import State\n\n# Producer\ntask = SimpleTask(s=\"test\")\nawait task.push()\n\n# Consumer\nasync for task in SimpleTask.queue():\n    assert task.s == \"test\"\n    # Do some work\n    await task.finish()\n    break\n\n# Check that the task is finished\ntask = await SimpleTask.find_one({\"s\": \"test\"})\nassert task.state == State.FINISHED\n```\n\n----------------------------------------\n\nTITLE: Installing Beanie with Zstandard Compression\nDESCRIPTION: Installing Beanie with wire protocol compression using Zstandard.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/getting-started.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npip install \"beanie[zstd]\"\n```\n\n----------------------------------------\n\nTITLE: Inspecting Collection with Beanie ODM\nDESCRIPTION: Class method to validate if the documents in MongoDB collection are compatible with the Document schema. Returns an InspectionResult with compatibility details.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/document.md#2025-04-17_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n | @classmethod\n | async inspect_collection(cls, session: Optional[ClientSession] = None) -> InspectionResult\n```\n\n----------------------------------------\n\nTITLE: Implementing __getattr__ Method for ExpressionField in Beanie ODM\nDESCRIPTION: Method to access subfields in an ExpressionField. It allows for dot notation access to nested fields when constructing MongoDB queries.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/fields.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n | __getattr__(item)\n```\n\n----------------------------------------\n\nTITLE: Installing Beanie with Encryption Support\nDESCRIPTION: Installing Beanie with Client-Side Field Level Encryption support.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/getting-started.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npip install \"beanie[encryption]\"\n```\n\n----------------------------------------\n\nTITLE: Installing Beanie ODM using Poetry\nDESCRIPTION: Command to install Beanie ODM using Poetry dependency management tool.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/README.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npoetry add beanie\n```\n\n----------------------------------------\n\nTITLE: Installing Beanie using Poetry\nDESCRIPTION: Command to install Beanie using Poetry package manager.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/index.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npoetry add beanie\n```\n\n----------------------------------------\n\nTITLE: Implementing Delete Method for FindQuery in Python\nDESCRIPTION: Method to provide search criteria to the Delete query. It accepts an optional session parameter and returns either a DeleteOne or DeleteMany query.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/queries.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n | delete(session: Optional[ClientSession] = None) -> Union[DeleteOne, DeleteMany]\n```\n\n----------------------------------------\n\nTITLE: Implementing __await__ Method in DeleteOne Class\nDESCRIPTION: Implements the __await__ method for DeleteOne which enables awaiting on a DeleteOne instance, running the query and returning a DeleteResult object.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/queries.md#2025-04-17_snippet_32\n\nLANGUAGE: python\nCODE:\n```\n | __await__() -> DeleteResult\n```\n\n----------------------------------------\n\nTITLE: Using Native MongoDB Syntax for Updates in Beanie ODM (Python)\nDESCRIPTION: Demonstrates how to use native MongoDB syntax for update operations in Beanie ODM.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/tutorial/update.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nawait Product.find_one(Product.name == \"Tony's\").update({\"$set\": {Product.price: 3.33}})\n```\n\n----------------------------------------\n\nTITLE: Defining BaseCursorQuery Class in Python\nDESCRIPTION: Defines the BaseCursorQuery class, which is a wrapper over AsyncIOMotorCursor that parses results with a model.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/docs/api/queries.md#2025-04-17_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nclass BaseCursorQuery()\n```\n\n----------------------------------------\n\nTITLE: Installing Beanie ODM using pip\nDESCRIPTION: Command to install Beanie ODM using pip package manager.\nSOURCE: https://github.com/BeanieODM/beanie/blob/main/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install beanie\n```"
  }
]