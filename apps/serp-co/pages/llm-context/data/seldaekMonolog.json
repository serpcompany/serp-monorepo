[
  {
    "owner": "seldaek",
    "repo": "monolog",
    "content": "TITLE: Registering Custom PDOHandler in Monolog (PHP)\nDESCRIPTION: Demonstrates how to instantiate the custom `PDOHandler` with a PDO connection (shown using SQLite) and add it to an existing Monolog `Logger` instance using the `pushHandler` method. This integrates the custom handler into the logging pipeline. Requires a Monolog `Logger` object and the `PDOHandler` class definition.\nSOURCE: https://github.com/seldaek/monolog/blob/main/doc/04-extending.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$logger->pushHandler(new PDOHandler(new PDO('sqlite:logs.sqlite')));\n\n// You can now use your logger\n$logger->info('My logger is now ready');\n```\n\n----------------------------------------\n\nTITLE: Calling Monolog Logger Reset - PHP\nDESCRIPTION: Demonstrates how to call the `reset()` method on a Monolog logger instance. This method, available on loggers whose handlers implement `ResettableInterface`, flushes and clears internal buffers, resets state, and prepares the logger for processing new records, effectively ending a logging cycle. It's useful in long-running processes (e.g., background workers) to manage memory and isolate logs between tasks.\nSOURCE: https://github.com/seldaek/monolog/blob/main/doc/01-usage.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$logger->reset();\n```\n\n----------------------------------------\n\nTITLE: Initializing Monolog SocketHandler for Unix Sockets in PHP\nDESCRIPTION: Demonstrates creating a Monolog logger and configuring a SocketHandler to send logs to a persistent Unix domain socket located at '/var/log/httpd_app_log.socket'. The handler is set to be persistent using setPersistent(true) and added to the logger instance.\nSOURCE: https://github.com/seldaek/monolog/blob/main/doc/sockets.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Monolog\\Logger;\nuse Monolog\\Handler\\SocketHandler;\n\n// Create the logger\n$logger = new Logger('my_logger');\n\n// Create the handler\n$handler = new SocketHandler('unix:///var/log/httpd_app_log.socket');\n$handler->setPersistent(true);\n\n// Now add the handler\n$logger->pushHandler($handler, Level::Debug);\n\n// You can now use your logger\n$logger->info('My logger is now ready');\n\n```\n\n----------------------------------------\n\nTITLE: Implementing PDO Database Handler in Monolog (PHP)\nDESCRIPTION: Defines a custom Monolog handler (`PDOHandler`) that logs records to a database using PDO. It extends `AbstractProcessingHandler` to handle common logic, connects to a database via the injected PDO object, and writes log records by inserting data into a table. Requires a PDO instance and optional logging level/bubble settings. Creates the table if it doesn't exist on the first write.\nSOURCE: https://github.com/seldaek/monolog/blob/main/doc/04-extending.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Monolog\\Level;\nuse Monolog\\Logger;\nuse Monolog\\LogRecord;\nuse Monolog\\Handler\\AbstractProcessingHandler;\n\nclass PDOHandler extends AbstractProcessingHandler\n{\n    private bool $initialized = false;\n    private PDO $pdo;\n    private PDOStatement $statement;\n\n    public function __construct(PDO $pdo, int|string|Level $level = Level::Debug, bool $bubble = true)\n    {\n        $this->pdo = $pdo;\n        parent::__construct($level, $bubble);\n    }\n\n    protected function write(LogRecord $record): void\n    {\n        if (!$this->initialized) {\n            $this->initialize();\n        }\n\n        $this->statement->execute(array(\n            'channel' => $record->channel,\n            'level' => $record->level,\n            'message' => $record->formatted,\n            'time' => $record->datetime->format('U'),\n        ));\n    }\n\n    private function initialize()\n    {\n        $this->pdo->exec(\n            'CREATE TABLE IF NOT EXISTS monolog '\n            .'(channel VARCHAR(255), level INTEGER, message LONGTEXT, time INTEGER UNSIGNED)'\n        );\n        $this->statement = $this->pdo->prepare(\n            'INSERT INTO monolog (channel, level, message, time) VALUES (:channel, :level, :message, :time)'\n        );\n\n        $this->initialized = true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Monolog PHP Logging Library\nDESCRIPTION: This snippet shows how to install the Monolog library using Composer, the PHP dependency manager. It requires the 'monolog/monolog' package and installs the latest stable version suitable for your system. Composer must be installed and configured beforehand.\nSOURCE: https://github.com/seldaek/monolog/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require monolog/monolog\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Monolog Logger in PHP\nDESCRIPTION: This PHP snippet demonstrates how to create a Monolog Logger instance named 'name', push a StreamHandler configured to log warnings and higher level messages to a specified log file path, and add warning and error records to the log. It requires Monolog classes: Logger, Level, and StreamHandler, which handle logging levels, log entry creation, and output destination respectively. The snippet expects writable file path for logs and uses PSR-3 compatible log levels.\nSOURCE: https://github.com/seldaek/monolog/blob/main/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Monolog\\Level;\nuse Monolog\\Logger;\nuse Monolog\\Handler\\StreamHandler;\n\n// create a log channel\n$log = new Logger('name');\n$log->pushHandler(new StreamHandler('path/to/your.log', Level::Warning));\n\n// add records to the log\n$log->warning('Foo');\n$log->error('Bar');\n```"
  }
]