[
  {
    "owner": "tree-sitter",
    "repo": "py-tree-sitter",
    "content": "TITLE: Initializing Tree-sitter Language and Parser\nDESCRIPTION: Setting up the Tree-sitter parser with Python language support.\nSOURCE: https://github.com/tree-sitter/py-tree-sitter/blob/master/README.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport tree_sitter_python as tspython\nfrom tree_sitter import Language, Parser\n\nPY_LANGUAGE = Language(tspython.language())\nparser = Parser(PY_LANGUAGE)\n```\n\n----------------------------------------\n\nTITLE: Installing Tree-sitter Package via pip\nDESCRIPTION: Command to install the tree-sitter Python package using pip package manager.\nSOURCE: https://github.com/tree-sitter/py-tree-sitter/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install tree-sitter\n```\n\n----------------------------------------\n\nTITLE: Installing Language Support for Tree-sitter\nDESCRIPTION: Example of installing language-specific support (Python) for Tree-sitter parsing.\nSOURCE: https://github.com/tree-sitter/py-tree-sitter/blob/master/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npip install tree-sitter-python\n```\n\n----------------------------------------\n\nTITLE: Basic Source Code Parsing with Tree-sitter\nDESCRIPTION: Example of parsing Python source code using Tree-sitter parser with direct bytes input.\nSOURCE: https://github.com/tree-sitter/py-tree-sitter/blob/master/README.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntree = parser.parse(\n    bytes(\n        \"\"\"\ndef foo():\n    if bar:\n        baz()\n\"\"\",\n        \"utf8\"\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Tree Node Inspection and Traversal\nDESCRIPTION: Example of inspecting and traversing the parsed syntax tree nodes.\nSOURCE: https://github.com/tree-sitter/py-tree-sitter/blob/master/README.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nroot_node = tree.root_node\nassert root_node.type == 'module'\nassert root_node.start_point == (1, 0)\nassert root_node.end_point == (4, 0)\n\nfunction_node = root_node.children[0]\nassert function_node.type == 'function_definition'\nassert function_node.child_by_field_name('name').type == 'identifier'\n\nfunction_name_node = function_node.children[1]\nassert function_name_node.type == 'identifier'\nassert function_name_node.start_point == (1, 4)\nassert function_name_node.end_point == (1, 7)\n\nfunction_body_node = function_node.child_by_field_name(\"body\")\n\nif_statement_node = function_body_node.child(0)\nassert if_statement_node.type == \"if_statement\"\n\nfunction_call_node = if_statement_node.child_by_field_name(\"consequence\").child(0).child(0)\nassert function_call_node.type == \"call\"\n\nfunction_call_name_node = function_call_node.child_by_field_name(\"function\")\nassert function_call_name_node.type == \"identifier\"\n\nfunction_call_args_node = function_call_node.child_by_field_name(\"arguments\")\nassert function_call_args_node.type == \"argument_list\"\n\n\nassert str(root_node) == (\n    \"(module \"\n        \"(function_definition \"\n            \"name: (identifier) \"\n            \"parameters: (parameters) \"\n            \"body: (block \"\n                \"(if_statement \"\n                    \"condition: (identifier) \"\n                    \"consequence: (block \"\n                        \"(expression_statement (call \"\n                            \"function: (identifier) \"\n                            \"arguments: (argument_list))))))))\"\n)\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching Query Definition\nDESCRIPTION: Example of creating a pattern matching query for function definitions and calls.\nSOURCE: https://github.com/tree-sitter/py-tree-sitter/blob/master/README.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nquery = PY_LANGUAGE.query(\n    \"\"\"\n(function_definition\n  name: (identifier) @function.def\n  body: (block) @function.block)\n\n(call\n  function: (identifier) @function.call\n  arguments: (argument_list) @function.args)\n\"\"\"\n)\n```\n\n----------------------------------------\n\nTITLE: Query Captures Processing\nDESCRIPTION: Example of processing query captures from the syntax tree.\nSOURCE: https://github.com/tree-sitter/py-tree-sitter/blob/master/README.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ncaptures = query.captures(tree.root_node)\nassert len(captures) == 4\nassert captures[\"function.def\"][0] == function_name_node\nassert captures[\"function.block\"][0] == function_body_node\nassert captures[\"function.call\"][0] == function_call_name_node\nassert captures[\"function.args\"][0] == function_call_args_node\n```\n\n----------------------------------------\n\nTITLE: Query Matches Processing\nDESCRIPTION: Example of processing query matches from the syntax tree.\nSOURCE: https://github.com/tree-sitter/py-tree-sitter/blob/master/README.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nmatches = query.matches(tree.root_node)\nassert len(matches) == 2\n\n# first match\nassert matches[0][1][\"function.def\"] == [function_name_node]\nassert matches[0][1][\"function.block\"] == [function_body_node]\n\n# second match\nassert matches[1][1][\"function.call\"] == [function_call_name_node]\nassert matches[1][1][\"function.args\"] == [function_call_args_node]\n```\n\n----------------------------------------\n\nTITLE: Tree Cursor Navigation Example\nDESCRIPTION: Demonstration of using TreeCursor for efficient tree traversal.\nSOURCE: https://github.com/tree-sitter/py-tree-sitter/blob/master/README.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ncursor = tree.walk()\n\nassert cursor.node.type == \"module\"\n\nassert cursor.goto_first_child()\nassert cursor.node.type == \"function_definition\"\n\nassert cursor.goto_first_child()\nassert cursor.node.type == \"def\"\n\n# Returns `False` because the `def` node has no children\nassert not cursor.goto_first_child()\n\nassert cursor.goto_next_sibling()\nassert cursor.node.type == \"identifier\"\n\nassert cursor.goto_next_sibling()\nassert cursor.node.type == \"parameters\"\n\nassert cursor.goto_parent()\nassert cursor.node.type == \"function_definition\"\n```\n\n----------------------------------------\n\nTITLE: Tree Editing and Parsing Updates\nDESCRIPTION: Example of editing syntax trees and parsing updated source code.\nSOURCE: https://github.com/tree-sitter/py-tree-sitter/blob/master/README.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nnew_src = src[:5] + src[5 : 5 + 2].upper() + src[5 + 2 :]\n\ntree.edit(\n    start_byte=5,\n    old_end_byte=5,\n    new_end_byte=5 + 2,\n    start_point=(0, 5),\n    old_end_point=(0, 5),\n    new_end_point=(0, 5 + 2),\n)\n\nnew_tree = parser.parse(new_src, tree)\n\nfor changed_range in tree.changed_ranges(new_tree):\n    print(\"Changed range:\")\n    print(f\"  Start point {changed_range.start_point}\")\n    print(f\"  Start byte {changed_range.start_byte}\")\n    print(f\"  End point {changed_range.end_point}\")\n    print(f\"  End byte {changed_range.end_byte}\")\n```\n\n----------------------------------------\n\nTITLE: Importing and Using the Node Class in Python\nDESCRIPTION: This snippet demonstrates how to import and use the Node class from the tree_sitter module. The Node class represents a node in the syntax tree and provides various methods and attributes for traversing and analyzing the tree structure.\nSOURCE: https://github.com/tree-sitter/py-tree-sitter/blob/master/docs/classes/tree_sitter.Node.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom tree_sitter import Node\n\n# Example usage (placeholder, as actual usage depends on context)\nnode = Node()  # Assuming Node can be instantiated directly\n\n# Accessing methods\nchild = node.child(0)\nnamed_child = node.named_child(0)\n\n# Accessing attributes\nstart_byte = node.start_byte\nend_point = node.end_point\nnode_type = node.type\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure for Tree-Sitter Parser\nDESCRIPTION: ReStructuredText documentation defining the structure and components of the tree_sitter.Parser class, including methods and attributes with version annotations.\nSOURCE: https://github.com/tree-sitter/py-tree-sitter/blob/master/docs/classes/tree_sitter.Parser.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nParser\n======\n\n.. autoclass:: tree_sitter.Parser\n\n   Methods\n   -------\n\n   .. automethod:: parse\n   .. automethod:: print_dot_graphs\n\n      .. versionadded:: 0.24.0\n   .. automethod:: reset\n\n   Attributes\n   ----------\n\n   .. autoattribute:: included_ranges\n   .. autoattribute:: language\n   .. autoattribute:: logger\n\n      .. versionadded:: 0.24.0\n   .. autoattribute:: timeout_micros\n```\n\n----------------------------------------\n\nTITLE: Parsing with Byte Offset Read Callable\nDESCRIPTION: Example of using a custom read callable with byte offset for parsing source code.\nSOURCE: https://github.com/tree-sitter/py-tree-sitter/blob/master/README.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsrc = bytes(\n    \"\"\"\ndef foo():\n    if bar:\n        baz()\n\"\"\",\n    \"utf8\",\n)\n\n\ndef read_callable_byte_offset(byte_offset, point):\n    return src[byte_offset : byte_offset + 1]\n\n\ntree = parser.parse(read_callable_byte_offset, encoding=\"utf8\")\n```\n\n----------------------------------------\n\nTITLE: Parsing with Point-based Read Callable\nDESCRIPTION: Example of using a custom read callable with point coordinates for parsing source code.\nSOURCE: https://github.com/tree-sitter/py-tree-sitter/blob/master/README.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsrc_lines = [\"\\n\", \"def foo():\\n\", \"    if bar:\\n\", \"        baz()\\n\"]\n\n\ndef read_callable_point(byte_offset, point):\n    row, column = point\n    if row >= len(src_lines) or column >= len(src_lines[row]):\n        return None\n    return src_lines[row][column:].encode(\"utf8\")\n\n\ntree = parser.parse(read_callable_point, encoding=\"utf8\")\n```\n\n----------------------------------------\n\nTITLE: UTF-16 Parsing Example\nDESCRIPTION: Demonstration of parsing UTF-16 encoded source code with emoji characters.\nSOURCE: https://github.com/tree-sitter/py-tree-sitter/blob/master/README.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nparser.language = JAVASCRIPT\nsource_code = bytes(\"'😎' && '🐍'\", \"utf16\")\n\ndef read(byte_position, _):\n    return source_code[byte_position: byte_position + 2]\n\ntree = parser.parse(read, encoding=\"utf16\")\nroot_node = tree.root_node\nstatement_node = root_node.children[0]\nbinary_node = statement_node.children[0]\nsnake_node = binary_node.children[2]\nsnake = source_code[snake_node.start_byte:snake_node.end_byte]\n\nassert binary_node.type == \"binary_expression\"\nassert snake_node.type == \"string\"\nassert snake.decode(\"utf16\") == \"'🐍'\"\n```\n\n----------------------------------------\n\nTITLE: Referencing Tree-sitter Constants in Python\nDESCRIPTION: Constants defining the supported ABI versions for the Tree-sitter library. LANGUAGE_VERSION represents the latest supported version, while MIN_COMPATIBLE_LANGUAGE_VERSION indicates the earliest supported version.\nSOURCE: https://github.com/tree-sitter/py-tree-sitter/blob/master/docs/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ntree_sitter.LANGUAGE_VERSION\n```\n\nLANGUAGE: Python\nCODE:\n```\ntree_sitter.MIN_COMPATIBLE_LANGUAGE_VERSION\n```\n\n----------------------------------------\n\nTITLE: Documenting QueryPredicate Class in Python\nDESCRIPTION: This code snippet uses autoclass to generate documentation for the QueryPredicate class from the tree_sitter module. It also documents the __call__ special method of the class.\nSOURCE: https://github.com/tree-sitter/py-tree-sitter/blob/master/docs/classes/tree_sitter.QueryPredicate.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: tree_sitter.QueryPredicate\n   :show-inheritance:\n\n   Special Methods\n   ---------------\n\n   .. automethod:: __call__\n```\n\n----------------------------------------\n\nTITLE: Documenting the Point Class in tree-sitter Python Binding\nDESCRIPTION: reStructuredText documentation for the Point class, which specifies its attributes (column and row) and inheritance using Sphinx autodoc directives.\nSOURCE: https://github.com/tree-sitter/py-tree-sitter/blob/master/docs/classes/tree_sitter.Point.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: tree_sitter.Point\n   :show-inheritance:\n\n   Attributes\n   ----------\n\n   .. autoattribute:: column\n   .. autoattribute:: row\n```\n\n----------------------------------------\n\nTITLE: Documenting LogType Enumeration in Python\nDESCRIPTION: This code snippet uses reStructuredText to document the LogType class from the tree_sitter module. It specifies that the class was added in version 0.24.0 and lists two members: PARSE and LEX.\nSOURCE: https://github.com/tree-sitter/py-tree-sitter/blob/master/docs/classes/tree_sitter.LogType.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: tree_sitter.LogType\n   :show-inheritance:\n\n   .. versionadded:: 0.24.0\n\n   Members\n   -------\n\n   .. autoattribute:: PARSE\n   .. autoattribute:: LEX\n```\n\n----------------------------------------\n\nTITLE: Defining QueryError Class Documentation with RST\nDESCRIPTION: A reStructuredText directive that automatically generates documentation for the QueryError class in the tree_sitter package, showing its inheritance hierarchy.\nSOURCE: https://github.com/tree-sitter/py-tree-sitter/blob/master/docs/classes/tree_sitter.QueryError.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: tree_sitter.QueryError\n   :show-inheritance:\n```"
  }
]