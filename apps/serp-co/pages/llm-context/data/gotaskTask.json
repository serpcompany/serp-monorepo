[
  {
    "owner": "go-task",
    "repo": "task",
    "content": "TITLE: Initializing a Taskfile using Task CLI - Shell\nDESCRIPTION: This snippet demonstrates how to initialize a new Taskfile in your current directory using the Task CLI with the --init flag. No dependencies are necessary other than having Task installed. The output is the creation of a Taskfile.yml in the working directory. This command is the standard starting point for all Task-based automation.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/getting_started.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ntask --init\n\n```\n\n----------------------------------------\n\nTITLE: Basic Taskfile Structure with Variable and Default Task - YAML\nDESCRIPTION: This YAML snippet presents a minimal Taskfile structure defining a variable and a default task. It specifies the file version, declares a \"GREETING\" variable, and implements a default task that echoes the variable's value. The silent flag suppresses task metadata output, ensuring only command results are shown. This example is fully self-contained, with no external dependencies.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/getting_started.mdx#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\nvars:\n  GREETING: Hello, World!\n\ntasks:\n  default:\n    cmds:\n      - echo \"{{.GREETING}}\"\n    silent: true\n\n```\n\n----------------------------------------\n\nTITLE: Executing Task CLI Commands (Shell)\nDESCRIPTION: Illustrates the basic command syntax for the Task CLI. It shows how to invoke the `task` command, optionally followed by flags, a list of tasks to execute, and potentially additional arguments (prefixed with `--`) to be passed to the tasks via the `CLI_ARGS` variable.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/reference/cli.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ntask [--flags] [tasks...] [-- CLI_ARGS...]\n```\n\n----------------------------------------\n\nTITLE: Invoking Task with Flags and Arguments in Shell\nDESCRIPTION: Demonstrates the general syntax for running Task commands in a shell environment. This includes support for flag arguments before and after tasks, as well as the special use of '--' to pass remaining parameters as CLI_ARGS. Designed as a baseline for users to understand Task command invocation, no dependencies are required beyond having Task installed. Requires the user to replace '[--flags]', '[tasks...]', and 'CLI_ARGS...' with appropriate flags, one or more task names, and optional CLI arguments as needed. The command expects various flags and tasks depending on the desired operation. Outputs and behaviors differ based on flags and inputs provided.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/reference/cli.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ntask [--flags] [tasks...] [-- CLI_ARGS...]\n```\n\n----------------------------------------\n\nTITLE: Defining Platform-Specific Tasks in Taskfile YAML\nDESCRIPTION: These snippets illustrate restricting task or command execution to specific operating systems and architectures using the 'platforms' key with valid GOOS and GOARCH values. Tasks define arrays like [windows], [windows/amd64], or multiple platforms concurrently, and commands within tasks can also have platform-specific restrictions, enabling cross-platform build pipelines with conditional execution. Inputs are platform lists; outputs are conditional task or command runs based on detected platform.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/usage.mdx#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  build-windows:\n    platforms: [windows]\n    cmds:\n      - echo 'Running command on Windows'\n```\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  build-windows-amd64:\n    platforms: [windows/amd64]\n    cmds:\n      - echo 'Running command on Windows (amd64)'\n```\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  build-amd64:\n    platforms: [amd64]\n    cmds:\n      - echo 'Running command on amd64'\n```\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  build:\n    platforms: [windows/amd64, darwin]\n    cmds:\n      - echo 'Running command on Windows (amd64) and macOS'\n```\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  build:\n    cmds:\n      - cmd: echo 'Running command on Windows (amd64) and macOS'\n        platforms: [windows/amd64, darwin]\n      - cmd: echo 'Running on all platforms'\n```\n\n----------------------------------------\n\nTITLE: Defining Multi-Command Tasks with go-task in YAML\nDESCRIPTION: This snippet provides an example of defining a task with multiple sequential commands using the 'cmds' array property in go-task's YAML format. Each string in the array represents a shell command to be run in sequence within a single task execution. The only dependency is the go-task runner, and the expected input is a list of commands; outputs are each command executed in order. Suitable for grouping related automation steps under one task.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/reference/schema.mdx#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ntasks:\n  foo:\n    cmds:\n      - echo \"foo\"\n      - echo \"bar\"\n\n```\n\n----------------------------------------\n\nTITLE: Defining Task Dependencies for Parallel Execution in Taskfile YAML\nDESCRIPTION: This snippet shows how to configure tasks with dependencies using the 'deps' key in Taskfile version 3. Dependencies listed under 'deps' run automatically before the parent task's commands, executing in parallel to optimize performance. A parent task can depend on multiple tasks or combine dependencies without commands, forming grouped task executions. This is useful to express build pipelines and grouped work. Input consists of named tasks and dependency arrays; output is automatically ordered task execution.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/usage.mdx#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  build:\n    deps: [assets]\n    cmds:\n      - go build -v -i main.go\n\n  assets:\n    cmds:\n      - esbuild --bundle --minify css/index.css > public/bundle.css\n```\n\n----------------------------------------\n\nTITLE: Installing Task CLI using the official install script - Shell\nDESCRIPTION: Installs Task CLI by downloading from an official install script via curl. Supports default installation to ./bin directory, or custom directory via -b flag. Can specify version tag to install specific releases. Useful for CI and scripting environments.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/installation.mdx#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nsh -c \"$(curl --location https://taskfile.dev/install.sh)\" -- -d\n```\n\nLANGUAGE: shell\nCODE:\n```\nsh -c \"$(curl --location https://taskfile.dev/install.sh)\" -- -d -b ~/.local/bin\n```\n\nLANGUAGE: shell\nCODE:\n```\nsh -c \"$(curl --location https://taskfile.dev/install.sh)\" -- -d v3.36.0\n```\n\nLANGUAGE: shell\nCODE:\n```\nsh -c \"$(curl --location https://taskfile.dev/install.sh)\" -- -d -b ~/.local/bin v3.42.1\n```\n\n----------------------------------------\n\nTITLE: Calling a Task - Shell\nDESCRIPTION: This command executes a specific task named `default` by using the `task` command followed by the task name. It assumes that a Taskfile exists in the current directory or is accessible through a command-line argument. It utilizes the Task CLI directly. The output is the result of executing the defined task. In this particular case, the output will be \"Hello, World!\".\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/getting_started.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ntask default\n```\n\n----------------------------------------\n\nTITLE: Declaring Task Dependencies in go-task with YAML\nDESCRIPTION: This snippet illustrates how to declare dependencies between tasks in go-task using a simple list of task names under the 'deps' property. Each task name string specifies a prerequisite task that must be executed before the current task runs. No additional configuration is needed unless custom variables or settings are required for the dependencies. Inputs are task names; outputs are ordered execution of listed dependencies.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/reference/schema.mdx#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ntasks:\n  foo:\n    deps: [foo, bar]\n\n```\n\n----------------------------------------\n\nTITLE: Installing Task CLI using Homebrew - Shell\nDESCRIPTION: Instructions for installing Task CLI on macOS or Linux systems using Homebrew package manager. Two installation methods are provided: installing from the official Task tap and from the official Homebrew repository. Requires Homebrew installed and accessible on the system's PATH. Outputs are the installed Task CLI binary ready for use.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/installation.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbrew install go-task/tap/go-task\n```\n\nLANGUAGE: shell\nCODE:\n```\nbrew install go-task\n```\n\n----------------------------------------\n\nTITLE: Including Other Taskfiles with Namespaces in Taskfile YAML\nDESCRIPTION: Demonstrates the basic syntax for including tasks from other Taskfiles using the `includes` keyword. Each included Taskfile is assigned a namespace, and its tasks are called using that namespace followed by the task name (e.g., `task docs:serve`).\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_8\n\nLANGUAGE: YAML\nCODE:\n```\nversion: '3'\n\nincludes:\n  docs: ./documentation # will look for ./documentation/Taskfile.yml\n  docker: ./DockerTasks.yml\n```\n\n----------------------------------------\n\nTITLE: Specifying Preconditions with a Shell Command in go-task YAML\nDESCRIPTION: This snippet shows how to use a precondition shell command directly within a task definition. If the shell command (e.g., testing for the existence of 'Taskfile.yml') fails, the task will not be executed. No dependencies are required except for the command-line environment that interprets the shell command and go-task itself. The input is a shell string; execution is contingent on its successful completion.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/reference/schema.mdx#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ntasks:\n  foo:\n    precondition: test -f Taskfile.yml\n\n```\n\n----------------------------------------\n\nTITLE: Using short task syntax for simple Taskfile task definitions in YAML\nDESCRIPTION: Illustrates the more concise syntax for defining tasks with default settings in Task v3. Tasks with simple commands can be specified as a single command string or an array without additional structures, improving readability. Demonstrated with a build task running a Go build command and a run task that depends on build.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/usage.mdx#_snippet_47\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\\n\\ntasks:\\n  build: go build -v -o ./app{{exeExt}} .\\n\\n  run:\\n    - task: build\\n    - ./app{{exeExt}} -h localhost -p 8080\n```\n\n----------------------------------------\n\nTITLE: Installing Task via Homebrew Core\nDESCRIPTION: Installs the Task command-line tool from the official Homebrew core repository. This is a common method but the package might sometimes lag behind the official tap.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/installation.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nbrew install go-task\n```\n\n----------------------------------------\n\nTITLE: Basic Templating in YAML\nDESCRIPTION: This snippet demonstrates basic templating within a Taskfile using the `echo` command. It defines a variable `MESSAGE` and then uses it within a command using double curly braces to be evaluated.  This showcases how to use the variable's content in the output.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/reference/templating.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  hello:\n    vars:\n      MESSAGE: 'Hello, World!'\n    cmds:\n      - 'echo {{.MESSAGE}}'\n```\n\n----------------------------------------\n\nTITLE: Installing Task via Install Script (Default)\nDESCRIPTION: Downloads and runs the official Task install script, which fetches the latest released binary. By default, it installs Task into a './bin' directory relative to the current working directory.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/installation.mdx#_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nsh -c \"$(curl --location https://taskfile.dev/install.sh)\" -- -d\n```\n\n----------------------------------------\n\nTITLE: Specifying Task Working Directory in Taskfile YAML\nDESCRIPTION: This snippet illustrates setting a custom directory for executing a task using the 'dir' attribute in a Taskfile version 3. When a task is run, all commands execute relative to the specified directory. If the directory does not exist, it is automatically created. This is useful for tasks operating on files or services located in subdirectories. Input includes the target directory path and command list; output corresponds to command execution context.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/usage.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  serve:\n    dir: public/www\n    cmds:\n      # run http server\n      - caddy\n```\n\n----------------------------------------\n\nTITLE: Defining Tasks with Wildcard Arguments in Taskfile (go-task, YAML)\nDESCRIPTION: Demonstrates dynamic argument parsing for tasks in Taskfiles using wildcards (*) in the task names, capturing arguments into the .MATCH variable as an array. Variables are extracted for use inside commands, enabling flexible invocation. No external dependencies are required; relies on go-task built-in features. Expected input is a task invocation matching the wildcard pattern; outputs depend on the echo command.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_64\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  start:*:*:\n    vars:\n      SERVICE: \"{{index .MATCH 0}}\"\n      REPLICAS: \"{{index .MATCH 1}}\"\n    cmds:\n      - echo \"Starting {{.SERVICE}} with {{.REPLICAS}} replicas\"\n\n  start:*:\n    vars:\n      SERVICE: \"{{index .MATCH 0}}\"\n    cmds:\n      - echo \"Starting {{.SERVICE}}\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Task Running Directory\nDESCRIPTION: This snippet illustrates how to set a specific directory for task execution using the 'dir' attribute. If the directory does not exist, it will be created automatically; otherwise, tasks run in the specified folder.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  serve:\n    dir: public/www\n    cmds:\n      - caddy\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables from Dotenv Files at Task Level in Taskfile YAML\nDESCRIPTION: Illustrates loading environment variables from `.env` files using the `dotenv` keyword within a specific task definition. Variables loaded this way are only available to that task and can be useful for task-specific configurations.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\nversion: '3'\n\nenv:\n  ENV: testing\n\ntasks:\n  greet:\n    dotenv: ['.env', '{{.ENV}}/.env', '{{.HOME}}/.env']\n    cmds:\n      - echo \"Using $KEYNAME and endpoint $ENDPOINT\"\n```\n\n----------------------------------------\n\nTITLE: Listing Tasks with Description in Taskfile (go-task, YAML)\nDESCRIPTION: Shows how to define tasks with descriptions using the desc key in a Taskfile. When running task --list, these descriptions are displayed alongside the task names. Dependencies are internal; no external dependencies required. Input is a request to list tasks, and output is the names and descriptions.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_69\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  build:\n    desc: Build the go binary.\n    cmds:\n      - go build -v -i main.go\n\n  test:\n    desc: Run all the go tests.\n    cmds:\n      - go test -race ./...\n\n  js:\n    cmds:\n      - esbuild --bundle --minify js/index.js > public/bundle.js\n\n  css:\n    cmds:\n      - esbuild --bundle --minify css/index.css > public/bundle.css\n```\n\n----------------------------------------\n\nTITLE: Configuring Taskfile Schema in VS Code settings.json (JSON)\nDESCRIPTION: This snippet shows how to manually configure VS Code's YAML extension to associate the official Taskfile schema URL with specific Taskfile patterns like '**/Taskfile.yml' within your project. This enables autocompletion and validation based on the schema. Requires the Red Hat YAML extension.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/integrations.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"yaml.schemas\": {\n    \"https://taskfile.dev/schema.json\": [\n      \"**/Taskfile.yml\",\n      \"./path/to/any/other/taskfile.yml\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code YAML Extension for Taskfile Schema (JSON)\nDESCRIPTION: This JSON snippet shows how to configure the `yaml.schemas` setting in VS Code's `settings.json` file. It maps the official Taskfile JSON schema URL (`https://taskfile.dev/schema.json`) to specified file patterns (`**/Taskfile.yml`, `./path/to/any/other/taskfile.yml`), enabling validation and autocompletion for those files. This requires the Red Hat YAML extension to be installed.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/integrations.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n// settings.json\n{\n  \"yaml.schemas\": {\n    \"https://taskfile.dev/schema.json\": [\n      \"**/Taskfile.yml\",\n      \"./path/to/any/other/taskfile.yml\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Tasks with Alternative YAML Syntax in go-task - YAML\nDESCRIPTION: This YAML snippet demonstrates several shortcut syntaxes for defining tasks in go-task. It shows how to assign a shell command directly to a task name, use an array of string commands, or provide a traditional map syntax with 'cmd'. No external dependencies are required, but this assumes Taskfile structure compatibility as per go-task specifications. Each task can declare its commands directly or use the extended map form for extra options, and all commands are executed in a shell environment. Inputs and outputs depend on the task commands specified.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/reference/schema.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntasks:\n  foo: echo \"foo\"\n\n  foobar:\n    - echo \"foo\"\n    - echo \"bar\"\n\n  baz:\n    cmd: echo \"baz\"\n\n```\n\n----------------------------------------\n\nTITLE: Using Multiline Commands for Variable Scope in Task (YAML)\nDESCRIPTION: Presents a YAML Task definition (`foo`) that uses a single multiline command block (indicated by `|`) as a workaround for command scope limitations. This allows shell variable assignments (`a=foo`) and subsequent usage (`echo $a`) within the same shell process, ensuring the variable is accessible and correctly outputs \"foo\".\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/faq.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  foo:\n    cmds:\n      - |\n        a=foo\n        echo $a\n      # outputs \"foo\"\n```\n\n----------------------------------------\n\nTITLE: Declaring Dynamic Variables with Shell Output (Task - YAML)\nDESCRIPTION: Illustrates defining variables using the 'sh:' property to dynamically assign the value from a shell command's output; for example, retrieving a Git commit hash. Dynamic variables are evaluated at runtime and can be used anywhere in the task. Requires Task v3+, underlying shell commands (e.g., 'git') must be present. Limitation: trailing newlines are trimmed.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_43\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  build:\n    cmds:\n      - go build -ldflags=\"-X main.Version={{.GIT_COMMIT}}\" main.go\n    vars:\n      GIT_COMMIT:\n        sh: git log -n 1 --format=%h\n\n```\n\n----------------------------------------\n\nTITLE: Defining Static and Dynamic Variables in YAML\nDESCRIPTION: Shows the different syntaxes for defining static and dynamic variables in a Taskfile. Static variables use a direct value assignment, while dynamic variables use the 'sh' attribute to execute a shell command.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/reference/schema.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nvars:\n  STATIC: static\n  DYNAMIC:\n    sh: echo \"dynamic\"\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks with Only Dependencies in Taskfile YAML\nDESCRIPTION: This snippet demonstrates how to create a task that serves as a grouping of other tasks by defining only dependencies and no commands. The 'deps' array lists child tasks that will run, typically in parallel. This pattern facilitates task organization and orchestration without specific commands on the grouping task itself, improving modularity. Input is task names with dependency lists; output is execution of dependent tasks.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/usage.mdx#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  assets:\n    deps: [js, css]\n\n  js:\n    cmds:\n      - esbuild --bundle --minify js/index.js > public/bundle.js\n\n  css:\n    cmds:\n      - esbuild --bundle --minify css/index.css > public/bundle.css\n```\n\n----------------------------------------\n\nTITLE: Overriding Variable Defaults via CLI (Task - YAML and Shell)\nDESCRIPTION: Combines YAML and shell examples to show how to provide a default variable with Go template syntax and override its value via the command line. Demonstrates outputs for both default and overridden variable cases. Requires Task, knowledge of Go template default operator. Inputs: USER_NAME. Outputs: echo greeting. Limitation: default expression must be valid Go template.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_41\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\n  greet_user:\n    desc: \"Greet the user with a name.\"\n    vars:\n      USER_NAME: '{{.USER_NAME| default \"DefaultUser\"}}'\n    cmds:\n      - echo \"Hello, {{.USER_NAME}}!\"\n\n```\n\n----------------------------------------\n\nTITLE: Requiring Variable Presence with 'requires.vars' (Task - YAML)\nDESCRIPTION: Demonstrates enforcing the presence of specific variables (including environment variables) before task execution via 'requires.vars'. If required variables are unset, Task raises an error and aborts the run. Requires Task v3+, with variables IMAGE_NAME and IMAGE_TAG. No output if requirements are not met. Limitation: variables set to empty string are accepted.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  docker-build:\n    cmds:\n      - 'docker build . -t {{.IMAGE_NAME}}:{{.IMAGE_TAG}}'\n\n    # Make sure these variables are set before running\n    requires:\n      vars: [IMAGE_NAME, IMAGE_TAG]\n\n```\n\n----------------------------------------\n\nTITLE: Defining Internal Tasks in Taskfile YAML\nDESCRIPTION: This snippet shows how to define internal tasks in a Taskfile to prevent them from being called directly by users or appearing in task listings. The 'internal: true' property marks tasks as internal, while other tasks can call them by name. This pattern is useful for reusable, function-like tasks intended only for invocation within other tasks. Commands are specified under 'cmds'. Inputs include task names and variables; outputs are task executions without direct user visibility.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/usage.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  build-image-1:\n    cmds:\n      - task: build-image\n        vars:\n          DOCKER_IMAGE: image-1\n\n  build-image:\n    internal: true\n    cmds:\n      - docker build -t {{.DOCKER_IMAGE}} .\n```\n\n----------------------------------------\n\nTITLE: Using 'prefixed' output mode with custom prefixes per task in Taskfile YAML\nDESCRIPTION: Configures Taskfile to use the 'prefixed' output mode globally, where each line output by subtasks is prefixed with a label based on the task name by default. This snippet further customizes prefixes on a per-task basis with templated variables (e.g., '{{.TEXT}}'). It demonstrates task dependencies running tasks with different prefix variables and suppressing default output logs with 'silent: true'.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/usage.mdx#_snippet_44\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\\n\\noutput: prefixed\\n\\ntasks:\\n  default:\\n    deps:\\n      - task: print\\n        vars: { TEXT: foo }\\n      - task: print\\n        vars: { TEXT: bar }\\n      - task: print\\n        vars: { TEXT: baz }\\n\\n  print:\\n    cmds:\\n      - echo \"{{.TEXT}}\"\\n    prefix: 'print-{{.TEXT}}'\\n    silent: true\n```\n\n----------------------------------------\n\nTITLE: Setting Default Variable Values Overridable via CLI in Go Task (YAML)\nDESCRIPTION: Defines a Go Task task `greet_user` with a variable `USER_NAME` that uses the `default` template function (`{{.USER_NAME | default \"DefaultUser\"}}`) to provide a default value if the variable is not set via the command line.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/usage.mdx#_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\n  greet_user:\n    desc: \"Greet the user with a name.\"\n    vars:\n      USER_NAME: '{{.USER_NAME| default \"DefaultUser\"}}'\n    cmds:\n      - echo \"Hello, {{.USER_NAME}}!\"\n```\n\n----------------------------------------\n\nTITLE: Setting Parent Shell Environment Variables using Task Output in YAML\nDESCRIPTION: This Taskfile defines a task `my-shell-env` that outputs `export` commands. These commands can be evaluated in the parent shell (e.g., `eval $(task my-shell-env)`) to set environment variables like `FOO` and `BAR`, working around the limitation that subprocesses cannot modify their parent's environment.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/faq.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmy-shell-env:\n  cmds:\n    - echo \"export FOO=foo\"\n    - echo \"export BAR=bar\"\n```\n\n----------------------------------------\n\nTITLE: Combining Status Checks with Fingerprinting in Go Task (YAML)\nDESCRIPTION: Illustrates a Go Task task `build:prod` that uses `sources` and `generates` for file fingerprinting and adds a `status` check using `grep` to ensure a specific condition (`\"dev\": false`) exists in a generated file (`./vendor/composer/installed.json`). The task runs if either sources/generated files change or the status check fails.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/usage.mdx#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  build:prod:\n    desc: Build for production usage.\n    cmds:\n      - composer install\n    # Run this task if source files changes.\n    sources:\n      - composer.json\n      - composer.lock\n    generates:\n      - ./vendor/composer/installed.json\n      - ./vendor/autoload.php\n    # But also run the task if the last build was not a production build.\n    status:\n      - grep -q '\"dev\": false' ./vendor/composer/installed.json\n```\n\n----------------------------------------\n\nTITLE: Requiring Variables Before Task Execution in Go Task (YAML)\nDESCRIPTION: Defines a Go Task task `docker-build` that uses `requires.vars` to ensure the `IMAGE_NAME` and `IMAGE_TAG` variables are set before executing the `docker build` command. The task will error if these variables are missing.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/usage.mdx#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nrequires:\n  vars: [] # Array of strings\n```\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  docker-build:\n    cmds:\n      - 'docker build . -t {{.IMAGE_NAME}}:{{.IMAGE_TAG}}'\n\n    # Make sure these variables are set before running\n    requires:\n      vars: [IMAGE_NAME, IMAGE_TAG]\n```\n\n----------------------------------------\n\nTITLE: Specifying Platform Restrictions for Tasks\nDESCRIPTION: This snippet illustrates how to restrict task execution to specific platforms using the 'platforms' attribute, which can specify OS, architecture, or both. Commands or tasks are skipped if platform conditions are not met.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  build-windows:\n    platforms: [windows]\n    cmds:\n      - echo 'Running command on Windows'\n\n  build-windows-amd64:\n    platforms: [windows/amd64]\n    cmds:\n      - echo 'Running command on Windows (amd64)'\n\n  build-amd64:\n    platforms: [amd64]\n    cmds:\n      - echo 'Running command on amd64'\n\n  build:\n    platforms: [windows/amd64, darwin]\n    cmds:\n      - echo 'Running command on Windows (amd64) and macOS'\n\n  build-commands:\n    cmds:\n      - cmd: echo 'Running command on Windows (amd64) and macOS'\n        platforms: [windows/amd64, darwin]\n      - cmd: echo 'Running on all platforms'\n\n```\n\n----------------------------------------\n\nTITLE: Validating Required Variable Values with Enum in Go Task (YAML)\nDESCRIPTION: Configures a Go Task task `deploy` using `requires.vars.enum` to validate that the `ENV` variable is one of 'dev', 'beta', or 'prod'. The task will fail if `ENV` has any other value. This check applies to string variables only.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/usage.mdx#_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  deploy:\n    cmds:\n      - echo \"deploying to {{.ENV}}\"\n\n    requires:\n      vars:\n        - name: ENV\n          enum: [dev, beta, prod]\n```\n\n----------------------------------------\n\nTITLE: Task Cleanup with Defer Referencing Another Task\nDESCRIPTION: Demonstrates how to use defer to reference another task for cleanup operations, which allows for better organization of cleanup logic in separate tasks.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/usage.mdx#_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  default:\n    cmds:\n      - mkdir -p tmpdir/\n      - defer: { task: cleanup }\n      - echo 'Do work on tmpdir/'\n\n  cleanup: rm -rf tmpdir/\n```\n\n----------------------------------------\n\nTITLE: Example shell output demonstrating error_only group output behavior\nDESCRIPTION: Terminal output showing the behavior of the error_only 'group' output option. The 'passes' task produces no output since it succeeds, while the 'errors' task outputs error messages and a failure notice with exit status. This helps to avoid clutter from successful commands, focusing user attention on errors.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/usage.mdx#_snippet_43\n\nLANGUAGE: shell\nCODE:\n```\n$ task passes\\n$ task errors\\noutput-of-errors\\ntask: Failed to run task \"errors\": exit status 1\n```\n\n----------------------------------------\n\nTITLE: Defining Namespace Aliases in Taskfile YAML\nDESCRIPTION: This snippet demonstrates how to include an external Taskfile with a namespace alias using the 'includes' key in a Taskfile version 3 configuration. The 'aliases' option allows defining shorter alternative names to invoke included tasks conveniently. It requires a properly formatted included Taskfile path and optionally defines variable default behavior to allow overridable variables within included Taskfiles. Inputs are YAML configuration files; output is a namespaced alias facilitating task invocation.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/usage.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\nincludes:\n  generate:\n    taskfile: ./taskfiles/Generate.yml\n    aliases: [gen]\n```\n\n----------------------------------------\n\nTITLE: Excluding Tasks from Inclusion (Main Taskfile) YAML\nDESCRIPTION: Shows how to prevent specific tasks from being included from another Taskfile using the `excludes` option within the include definition. This example includes `Included.yml` but explicitly excludes the `foo` task.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_17\n\nLANGUAGE: YAML\nCODE:\n```\nversion: '3'\n  includes:\n    included:\n      taskfile: ./Included.yml\n      excludes: [foo]\n```\n\n----------------------------------------\n\nTITLE: Using Status Checks for Task Up-to-Date Verification in Go Task (YAML)\nDESCRIPTION: Defines a Go Task task `generate-files` that creates files and uses shell `test` commands within the `status` block to check if the generated directory and files exist. If all status commands succeed (exit code 0), the task is considered up-to-date.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/usage.mdx#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  generate-files:\n    cmds:\n      - mkdir directory\n      - touch directory/file1.txt\n      - touch directory/file2.txt\n    # test existence of files\n    status:\n      - test -d directory\n      - test -f directory/file1.txt\n      - test -f directory/file2.txt\n```\n\n----------------------------------------\n\nTITLE: Indicating Up-to-Date Status Using Programmatic Checks (Task - YAML)\nDESCRIPTION: Demonstrates use of the 'status' stanza in a Taskfile to programmatically determine if a task should be considered up-to-date. Each command in 'status' is executed, and if all return exit 0, the task is skipped; otherwise, it is run. Depends on Task v3 or later, requires valid shell commands available in the environment. Inputs: none. Outputs: generates and checks directory and file existence. Limitations: Only shell return codes are evaluated.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  generate-files:\n    cmds:\n      - mkdir directory\n      - touch directory/file1.txt\n      - touch directory/file2.txt\n    # test existence of files\n    status:\n      - test -d directory\n      - test -f directory/file1.txt\n      - test -f directory/file2.txt\n\n```\n\n----------------------------------------\n\nTITLE: Setting Task Variables Inline with Command (Shell)\nDESCRIPTION: Shows an alternative method for setting Go Task variables (`FILE`, `CONTENT`, `MESSAGE`) directly within the `task` command line, suitable for shells that don't support prefixing environment variables (like Windows cmd).\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/usage.mdx#_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\n$ task write-file FILE=file.txt \"CONTENT=Hello, World!\" print \"MESSAGE=All done!\"\n```\n\n----------------------------------------\n\nTITLE: Defining Local Task Variables in Go Task (YAML)\nDESCRIPTION: Illustrates defining a variable `VAR` locally within the `print-var` task definition in a Go Taskfile using the `vars` keyword. This variable is only scoped to this specific task.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/usage.mdx#_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  print-var:\n    cmds:\n      - echo \"{{.VAR}}\"\n    vars:\n      VAR: Hello!\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters with Environment Variables (Task - Shell)\nDESCRIPTION: Shows how to set task variables on the command line using shell syntax when invoking Task. This method is compatible with Unix-like shells and some other environments. No special dependencies beyond shell and Task binary. Input: variable=value pairs. Output: variable available inside the invoked task. Limitation: non-portable to Windows shells.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_37\n\nLANGUAGE: shell\nCODE:\n```\n$ TASK_VARIABLE=a-value task do-something\n\n```\n\n----------------------------------------\n\nTITLE: Combining Status Checks with Fingerprinting for Task Re-execution (Task - YAML)\nDESCRIPTION: Shows how to use 'sources', 'generates', and 'status' together to rerun tasks only when relevant source content changes or when programmatic checks fail. The task runs if source files change, generated artifacts change, or a grep condition on the output JSON fails. Requires Task v3+, a shell with grep, and composer installed. Inputs: composer.json, composer.lock; Outputs: generated Composer files; Limitation: 'status' check is a grep expression; ensure file exists or initialization fails.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  build:prod:\n    desc: Build for production usage.\n    cmds:\n      - composer install\n    # Run this task if source files changes.\n    sources:\n      - composer.json\n      - composer.lock\n    generates:\n      - ./vendor/composer/installed.json\n      - ./vendor/autoload.php\n    # But also run the task if the last build was not a production build.\n    status:\n      - grep -q '\"dev\": false' ./vendor/composer/installed.json\n\n```\n\n----------------------------------------\n\nTITLE: Using Preconditions to Gate Task Execution in Go Task (YAML)\nDESCRIPTION: Defines a Go Task task `generate-files` using `preconditions`. It checks for the existence of a `.env` file and evaluates a shell command (`[ 1 = 0 ]`). If any precondition fails, the task (and its dependencies) will not run, and a custom message can be displayed.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/usage.mdx#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  generate-files:\n    cmds:\n      - mkdir directory\n      - touch directory/file1.txt\n      - touch directory/file2.txt\n    # test existence of files\n    preconditions:\n      - test -f .env\n      - sh: '[ 1 = 0 ]'\n        msg: \"One doesn't equal Zero, Halting\"\n```\n\n----------------------------------------\n\nTITLE: Cancelling Task Execution via Preconditions (Task - YAML)\nDESCRIPTION: Illustrates using the 'preconditions' stanza to halt task execution if prerequisite checks fail, including support for 'sh' commands and 'msg' error messages for user feedback. Tasks are skipped if any precondition returns nonzero status. Intended for cases where file/environment assumptions must be guaranteed. Task v3+ required. Inputs: files, environment; no outputs. Limitation: tasks with unmet preconditions fail with error.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  generate-files:\n    cmds:\n      - mkdir directory\n      - touch directory/file1.txt\n      - touch directory/file2.txt\n    # test existence of files\n    preconditions:\n      - test -f .env\n      - sh: '[ 1 = 0 ]'\n        msg: \"One doesn't equal Zero, Halting\"\n\n```\n\n----------------------------------------\n\nTITLE: Looping: Dynamic Variables\nDESCRIPTION: Showcases how to loop over a dynamic variable, e.g. a variable whose value is generated via a `sh` command. The example uses `find` to generate a list of files.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_58\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  default:\n    vars:\n      MY_VAR:\n        sh: find -type f -name '*.txt'\n    cmds:\n      - for: { var: MY_VAR }\n        cmd: cat {{.ITEM}}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Precondition Failure Propagation in Go Task (YAML)\nDESCRIPTION: Shows how a failing precondition in one Go Task task (`task-will-fail`) prevents dependent tasks (`task-will-also-fail`, `task-will-still-fail`) from executing. A precondition failure halts the entire chain unless `--force` is used.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/usage.mdx#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  task-will-fail:\n    preconditions:\n      - sh: 'exit 1'\n\n  task-will-also-fail:\n    deps:\n      - task-will-fail\n\n  task-will-still-fail:\n    cmds:\n      - task: task-will-fail\n      - echo \"I will not run\"\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Different Variable Types (Task - YAML)\nDESCRIPTION: Provides examples of declaring string, bool, int, float, array, and map variables within a Taskfile, exposing access patterns for templates and command lines. Demonstrates echoing each variable's value. Requires Task v3+. Inputs: none; outputs: terminal print. Limitation: maps require special 'map' subkey structure.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_36\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 3\n\ntasks:\n  foo:\n    vars:\n      STRING: 'Hello, World!'\n      BOOL: true\n      INT: 42\n      FLOAT: 3.14\n      ARRAY: [1, 2, 3]\n      MAP:\n        map: {A: 1, B: 2, C: 3}\n    cmds:\n      - 'echo {{.STRING}}'  # Hello, World!\n      - 'echo {{.BOOL}}'    # true\n      - 'echo {{.INT}}'     # 42\n      - 'echo {{.FLOAT}}'   # 3.14\n      - 'echo {{.ARRAY}}'   # [1 2 3]\n      - 'echo {{.ARRAY.0}}' # 1\n      - 'echo {{.MAP}}'     # map[A:1 B:2 C:3]\n      - 'echo {{.MAP.A}}'   # 1\n\n```\n\n----------------------------------------\n\nTITLE: Using Default Template Function to Provide Fallback Environment Variable Value\nDESCRIPTION: This YAML snippet illustrates how to use the 'default' template function in Go Task to provide a fallback value for an environment variable if it is not set. It shows an environment variable 'MY_ENV' assigned with the template expression that falls back to the string 'fallback' when 'MY_ENV' is unset or empty, enabling robust handling of optional environment variables.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/experiments/env_precedence.mdx#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nMY_ENV: '{{.MY_ENV | default \"fallback\"}}'\n```\n\n----------------------------------------\n\nTITLE: Calling Another Task Serially in Taskfile YAML\nDESCRIPTION: This snippet details how to call tasks sequentially by listing calls inside the 'cmds' array via 'task:' syntax. This enables serial execution instead of parallel dependencies, ensuring one task completes before the next starts. Variables and silent mode can be passed per call to customize execution and output visibility. Inputs are task calls and optional parameters; outputs are sequential task invocations.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/usage.mdx#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  main-task:\n    cmds:\n      - task: task-to-be-called\n      - task: another-task\n      - echo \"Both done\"\n\n  task-to-be-called:\n    cmds:\n      - echo \"Task to be called\"\n\n  another-task:\n    cmds:\n      - echo \"Another task\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  greet:\n    vars:\n      RECIPIENT: '{{default \"World\" .RECIPIENT}}'\n    cmds:\n      - echo \"Hello, {{.RECIPIENT}}!\"\n\n  greet-pessimistically:\n    cmds:\n      - task: greet\n        vars: { RECIPIENT: 'Cruel World' }\n        silent: true\n```\n\n----------------------------------------\n\nTITLE: Forwarding CLI Args\nDESCRIPTION: Shows how to capture and forward command-line arguments given after `--` to a command using the `.CLI_ARGS` variable.  This is useful for passing arguments to external tools.  For example `task yarn -- install` will run `yarn install`.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_63\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  yarn:\n    cmds:\n      - yarn {{.CLI_ARGS}}\n```\n\n----------------------------------------\n\nTITLE: Setting Global Environment Variables in Taskfile YAML\nDESCRIPTION: Demonstrates defining environment variables that are available to all tasks within the Taskfile by using the `env` keyword at the top level. These global variables provide default values that can be overridden by task-specific `env` settings.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nversion: '3'\n\nenv:\n  GREETING: Hey, there!\n\ntasks:\n  greet:\n    cmds:\n      - echo $GREETING\n```\n\n----------------------------------------\n\nTITLE: Conditional Templating in YAML\nDESCRIPTION: This snippet illustrates conditional logic in a Taskfile using the `if`, `else`, and `end` control flow operators.  It shows how to use a boolean variable (`HAPPY`) to determine the output string. The snippet demonstrates the use of the `if` and `else` constructs for conditional output.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/reference/templating.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  maybe-happy:\n    vars:\n      SMILE: ':\\)'\n      FROWN: ':\\('\n      HAPPY: true\n    cmds:\n      - 'echo {{if .HAPPY}}{{.SMILE}}{{else}}{{.FROWN}}{{end}}'\n```\n\n----------------------------------------\n\nTITLE: Looping: Matrix using References\nDESCRIPTION: This example extends matrix looping, demonstrating the use of references to other variables as list values. This allows for dynamic definition of the matrix.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_50\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3\"\n\nvars:\n  OS_VAR: [\"windows\", \"linux\", \"darwin\"]\n  ARCH_VAR: [\"amd64\", \"arm64\"]\n\ntasks:\n  default:\n    cmds:\n      - for:\n          matrix:\n            OS:\n              ref: .OS_VAR\n            ARCH:\n              ref: .ARCH_VAR\n        cmd: echo \"{{.ITEM.OS}}/{{.ITEM.ARCH}}\"\n```\n\n----------------------------------------\n\nTITLE: Fingerprinting Files to Avoid Unnecessary Work\nDESCRIPTION: This snippet shows how to enable fingerprinting based on source and generated files to avoid re-running tasks unnecessarily. The checksum or timestamp methods can be used for validation, with options for excluding files and custom status checks.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  build:\n    deps: [js, css]\n    cmds:\n      - go build -v -i main.go\n\n  js:\n    cmds:\n      - esbuild --bundle --minify js/index.js > public/bundle.js\n    sources:\n      - src/js/**/*.js\n    generates:\n      - public/bundle.js\n\n  css:\n    cmds:\n      - esbuild --bundle --minify css/index.css > public/bundle.css\n    sources:\n      - src/css/**/*.css\n    generates:\n      - public/bundle.css\n```\n\n----------------------------------------\n\nTITLE: Looping: Different Tasks per Iteration\nDESCRIPTION: This example shows how to run different tasks within a loop, depending on the loop's item value.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_61\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  default:\n    cmds:\n      - for: [foo, bar]\n        task: task-{{.ITEM}}\n\n  task-foo:\n    cmds:\n      - echo 'foo'\n\n  task-bar:\n    cmds:\n      - echo 'bar'\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Variables from Shell Output in Go Task (YAML)\nDESCRIPTION: Illustrates how to define a dynamic variable `GIT_COMMIT` in a Go Taskfile. The value is obtained by executing the shell command `git log -n 1 --format=%h` using the `sh:` syntax under the `vars` definition. The output of the command becomes the variable's value.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/usage.mdx#_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  build:\n    cmds:\n      - go build -ldflags=\"-X main.Version={{.GIT_COMMIT}}\" main.go\n    vars:\n      GIT_COMMIT:\n        sh: git log -n 1 --format=%h\n```\n\n----------------------------------------\n\nTITLE: Defining Task Summaries and Dependencies in Taskfile (go-task, YAML)\nDESCRIPTION: Demonstrates using the summary and deps fields in a Taskfile to provide multi-line usage explanations for tasks and specify prerequisite dependencies. Input is a task summary query; outputs are the summary, dependencies, and command lists. No external dependencies required; summary is displayed without execution.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_71\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  release:\n    deps: [build]\n    summary: |\n      Release your project to github\n\n      It will build your project before starting the release.\n      Please make sure that you have set GITHUB_TOKEN before starting.\n    cmds:\n      - your-release-tool\n\n  build:\n    cmds:\n      - your-build-tool\n```\n\n----------------------------------------\n\nTITLE: Adding Build Task - YAML\nDESCRIPTION: This YAML snippet extends an existing Taskfile by adding a `build` task. This task compiles a Go program found in the specified location. The code builds a Go program. The `cmds` attribute within `build` defines a single command to be executed. It requires the Go programming language installed on the host system. The command assumes the path to the Go program is correct.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/getting_started.mdx#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\nvars:\n  GREETING: Hello, World!\n\ntasks:\n  default:\n    cmds:\n      - echo \"{{.GREETING}}\"\n    silent: true\n\n  build:\n    cmds:\n      - go build ./cmd/main.go\n```\n\n----------------------------------------\n\nTITLE: Using Multiline Commands for Shared State in Task YAML\nDESCRIPTION: This Taskfile demonstrates a workaround for separate command scopes by using a YAML multiline string (`|`). This allows multiple shell commands to run within the same shell process, enabling state sharing (like the variable `a`) between them.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/faq.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  foo:\n    cmds:\n      - |\n        a=foo\n        echo $a\n      # outputs \"foo\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Interactive Mode for CLI Applications\nDESCRIPTION: This snippet shows how to configure a task to recognize the command as an interactive CLI application by setting 'interactive: true.' This allows tools like Vim to run properly within Task, optimizing terminal behavior for interactive apps.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_85\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  default:\n    cmds:\n      - vim my-file.txt\n    interactive: true\n```\n\n----------------------------------------\n\nTITLE: Installing Task CLI in GitHub Actions workflow - YAML\nDESCRIPTION: Example configuration snippet to install Task CLI inside a GitHub Actions workflow using the community-maintained setup-task action by Arduino. Allows specifying version and uses GitHub repo token for authentication.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/installation.mdx#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Install Task\n  uses: arduino/setup-task@v2\n  with:\n    version: 3.x\n    repo-token: ${{ secrets.GITHUB_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Setting Task Variables via Environment Variables (Shell)\nDESCRIPTION: Provides an example of setting a Go Task variable (`TASK_VARIABLE`) by prefixing the `task` command with an environment variable assignment in a shell environment.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/usage.mdx#_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\n$ TASK_VARIABLE=a-value task do-something\n```\n\n----------------------------------------\n\nTITLE: Taskfile with Build Task for Go Application - YAML\nDESCRIPTION: This YAML example expands a Taskfile to include a 'build' task for compiling a Go project. The 'build' task calls 'go build' on a specified source file, working alongside the default task described earlier. Requires Go to be installed and accessible on the system PATH; Task interprets the command natively using mvdan/sh. Inputs are defined via YAML keys, and outputs are subject to the underlying Go compiler.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/getting_started.mdx#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\nvars:\n  GREETING: Hello, World!\n\ntasks:\n  default:\n    cmds:\n      - echo \"{{.GREETING}}\"\n    silent: true\n\n  build:\n    cmds:\n      - go build ./cmd/main.go\n\n```\n\n----------------------------------------\n\nTITLE: Looping Over Variables (After) - Task YAML\nDESCRIPTION: Demonstrates the streamlined method for looping over Task variables using the `for` command. The variable (`LIST`) is defined directly as a YAML array. The `for` command can iterate over the array elements directly without needing the `split` subkey, simplifying iteration over list-based variables.\nSOURCE: https://github.com/go-task/task/blob/main/website/blog/2024-05-09-any-variables.mdx#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 3\n\ntasks:\n  foo:\n    vars:\n      LIST: ['foo', 'bar', 'baz']\n    cmds:\n      - for:\n          var: LIST\n        cmd: echo {{.ITEM}}\n\n```\n\n----------------------------------------\n\nTITLE: Task-Level Silent Mode\nDESCRIPTION: Shows how to enable silent mode at the task level to prevent all commands in the task from being echoed before execution.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/usage.mdx#_snippet_36\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  echo:\n    cmds:\n      - echo \"Print something\"\n    silent: true\n```\n\n----------------------------------------\n\nTITLE: Defining Taskfile with Namespace Aliases\nDESCRIPTION: This snippet demonstrates how to include another Taskfile with assigned aliases, allowing for shorter command invocations. Variables in included Taskfiles can be overridden using the default function to manage defaults.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\nincludes:\n  generate:\n    taskfile: ./taskfiles/Generate.yml\n    aliases: [gen]\n```\n\n----------------------------------------\n\nTITLE: Defining Global Variables in Go Task (YAML)\nDESCRIPTION: Demonstrates defining a global variable `GREETING` at the root level of a Go Taskfile using the `vars:` block. This variable is accessible by all tasks within the file unless overridden locally.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/usage.mdx#_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\nvars:\n  GREETING: Hello from Taskfile!\n\ntasks:\n  greet:\n    cmds:\n      - echo \"{{.GREETING}}\"\n```\n\n----------------------------------------\n\nTITLE: Suppressing STDOUT Using Shell Redirection in Taskfile (go-task, YAML)\nDESCRIPTION: Shows how to suppress output of a specific command in a Taskfile by redirecting stdout to /dev/null. Input is standard task invocation; output is suppressed (nothing printed). No dependencies beyond go-task and shell.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_80\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  echo:\n    cmds:\n      - echo \"This will print nothing\" > /dev/null\n```\n\n----------------------------------------\n\nTITLE: Configuring 'group' output mode with error_only option in Taskfile YAML\nDESCRIPTION: Shows how to configure the 'group' output mode with the 'error_only: true' option to suppress output for successful tasks and only show the output if the command returns a non-zero exit code. Includes defining multiple tasks, one which passes silently and one which fails and prints output. The global 'silent: true' setting suppresses default output outside error cases.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/usage.mdx#_snippet_42\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\\n\\nsilent: true\\n\\noutput:\\n  group:\\n    error_only: true\\n\\ntasks:\\n  passes: echo 'output-of-passes'\\n  errors: echo 'output-of-errors' && exit 1\n```\n\n----------------------------------------\n\nTITLE: Multiple Warning Prompts\nDESCRIPTION: Shows how to configure multiple sequential warning prompts for a task, where the user must confirm each prompt before the task will execute.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/usage.mdx#_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  example:\n    cmds:\n      - task: dangerous\n\n  dangerous:\n    prompt:\n     - This is a dangerous command... Do you want to continue?\n     - Are you sure?\n    cmds:\n      - echo 'dangerous command'\n```\n\n----------------------------------------\n\nTITLE: Looping Over Variables (Before) - Task YAML\nDESCRIPTION: Depicts the older method for looping over variable content in Task. It required the variable (`LIST`) to be a delimiter-separated string. The `for` command used the `split` subkey to specify the delimiter (`,`) to break the string into items for iteration.\nSOURCE: https://github.com/go-task/task/blob/main/website/blog/2024-05-09-any-variables.mdx#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 3\n\ntasks:\n  foo:\n    vars:\n      LIST: 'foo,bar,baz'\n    cmds:\n      - for:\n          var: LIST\n          split: ','\n        cmd: echo {{.ITEM}}\n\n```\n\n----------------------------------------\n\nTITLE: Overriding Task Name with Labels in Taskfile (go-task, YAML)\nDESCRIPTION: Shows how to use the label field to override the task name as printed in summaries and STDOUT messages. The label can include interpolated variables, enabling dynamic labeling based on task parameters. No dependencies beyond go-task; primary input is variable assignment; output is the echoed label or message.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_74\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  default:\n    - task: print\n      vars:\n        MESSAGE: hello\n    - task: print\n      vars:\n        MESSAGE: world\n\n  print:\n    label: 'print-{{.MESSAGE}}'\n    cmds:\n      - echo \"{{.MESSAGE}}\"\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Warning Prompts in Taskfile (go-task, YAML)\nDESCRIPTION: Demonstrates configuring a task with an array of prompts for multiple user confirmations before execution. Task proceeds only if all prompts are confirmed. No external dependencies; terminal input required. Input is a task invocation; output is sequential confirmation prompts followed by command execution.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_77\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  example:\n    cmds:\n      - task: dangerous\n\n  dangerous:\n    prompt:\n     - This is a dangerous command... Do you want to continue?\n     - Are you sure?\n    cmds:\n      - echo 'dangerous command'\n```\n\n----------------------------------------\n\nTITLE: Setting shell 'set' and 'shopt' options globally in Taskfile YAML\nDESCRIPTION: Defines the global shell options for the Task runner using the 'set' and 'shopt' attributes to configure bash built-in behaviors, such as 'pipefail' and 'globstar'. This is useful for enabling advanced shell features like recursive globs in tasks. The snippet defines a task that echoes all Go files recursively.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/usage.mdx#_snippet_48\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\\n\\nset: [pipefail]\\nshopt: [globstar]\\n\\ntasks:\\n  # `globstar` required for double star globs to work\\n  default: echo **/*.go\n```\n\n----------------------------------------\n\nTITLE: Restricting Variable Values with 'requires.vars.enum' (Task - YAML)\nDESCRIPTION: Demonstrates restricting a variable to allowed values using the 'enum' property under 'requires.vars'. Task execution is allowed only if the variable matches one of the enumerated values. Provides user feedback on error. Requires Task v3+, a defined variable ENV. No outputs if value is invalid; task aborts with error. Limitation: only supports string variables.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  deploy:\n    cmds:\n      - echo \"deploying to {{.ENV}}\"\n\n    requires:\n      vars:\n        - name: ENV\n          enum: [dev, beta, prod]\n\n```\n\n----------------------------------------\n\nTITLE: Warning Prompts for Dangerous Commands\nDESCRIPTION: Shows how to add warning prompts to tasks that require user confirmation before execution, which is useful for potentially dangerous operations.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/usage.mdx#_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  example:\n    cmds:\n      - task: not-dangerous\n      - task: dangerous\n      - task: another-not-dangerous\n\n  not-dangerous:\n    cmds:\n      - echo 'not dangerous command'\n\n  another-not-dangerous:\n    cmds:\n      - echo 'another not dangerous command'\n\n  dangerous:\n    prompt: This is a dangerous command... Do you want to continue?\n    cmds:\n      - echo 'dangerous command'\n```\n\n----------------------------------------\n\nTITLE: Specifying Minimum Task CLI Version in Taskfile - YAML\nDESCRIPTION: Defines the minimum required Task CLI version using the 'version' key at the top of the Taskfile. This version ensures that the Task CLI running the file supports all used features. Versions follow Semantic Versioning and may omit minor or patch levels. The snippet illustrates setting 'version' to '3.2.1' to require Task CLI v3.2.1 or newer.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/taskfile_versions.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.2.1'\n```\n\n----------------------------------------\n\nTITLE: Defining Global Variables in Taskfile (Task - YAML)\nDESCRIPTION: Illustrates usage of global variables defined at the root Taskfile level for sharing across all tasks. These can be accessed using Go templating in commands. Inputs: none. Outputs: echo of the GREETING variable. Limitation: variables are global unless shadowed locally.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_40\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\nvars:\n  GREETING: Hello from Taskfile!\n\ntasks:\n  greet:\n    cmds:\n      - echo \"{{.GREETING}}\"\n\n```\n\n----------------------------------------\n\nTITLE: Sample Taskfile - YAML\nDESCRIPTION: This YAML code represents a sample Taskfile. It defines the `version` and `vars` attributes, followed by a task named `default`. The `default` task contains `cmds` for printing a greeting defined in `vars` and sets the `silent` attribute to `true`, preventing metadata output. It requires a Taskfile to exist.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/getting_started.mdx#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\nvars:\n  GREETING: Hello, World!\n\ntasks:\n  default:\n    cmds:\n      - echo \"{{.GREETING}}\"\n    silent: true\n```\n\n----------------------------------------\n\nTITLE: Passing Variables to Included Taskfiles in Taskfile YAML\nDESCRIPTION: Demonstrates how to define variables using the `vars` keyword within an include definition. These variables are passed to the included Taskfile, allowing reusable Taskfiles to be configured differently for each inclusion.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_19\n\nLANGUAGE: YAML\nCODE:\n```\nversion: '3'\n\nincludes:\n  backend:\n    taskfile: ./taskfiles/Docker.yml\n    vars:\n      DOCKER_IMAGE: backend_image\n\n  frontend:\n    taskfile: ./taskfiles/Docker.yml\n    vars:\n      DOCKER_IMAGE: frontend_image\n```\n\n----------------------------------------\n\nTITLE: Preventing Unnecessary Task Runs with Fingerprinting in Taskfile YAML\nDESCRIPTION: These snippets explain how to configure file fingerprinting using 'sources' and 'generates' keys in Taskfile version 3 for tasks. Task automatically checks checksums or timestamps of source files to decide whether to run commands, improving efficiency by skipping unchanged tasks. Exclusion patterns using 'exclude:' and method selection ('checksum', 'timestamp', or 'none') provide flexibility. The state is stored locally and can be customized by environment variable 'TASK_TEMP_DIR'. Inputs are file globs and method flags; outputs are conditional task executions.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/usage.mdx#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  build:\n    deps: [js, css]\n    cmds:\n      - go build -v -i main.go\n\n  js:\n    cmds:\n      - esbuild --bundle --minify js/index.js > public/bundle.js\n    sources:\n      - src/js/**/*.js\n    generates:\n      - public/bundle.js\n\n  css:\n    cmds:\n      - esbuild --bundle --minify css/index.css > public/bundle.css\n    sources:\n      - src/css/**/*.css\n    generates:\n      - public/bundle.css\n```\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  css:\n    sources:\n      - mysources/**/*.css\n      - exclude: mysources/ignoreme.css\n    generates:\n      - public/bundle.css\n```\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  build:\n    cmds:\n      - go build .\n    sources:\n      - ./*.go\n    generates:\n      - app{{exeExt}}\n    method: timestamp\n```\n\n----------------------------------------\n\nTITLE: Installing Task in GitHub Actions\nDESCRIPTION: Uses the community-maintained arduino/setup-task action to install a specific version of Task within a GitHub Actions workflow. Useful for CI environments.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/installation.mdx#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Install Task\n  uses: arduino/setup-task@v2\n  with:\n    version: 3.x\n    repo-token: ${{ secrets.GITHUB_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Overriding Task Name with Labels\nDESCRIPTION: Shows how to override the displayed task name using the label property, which can also be interpolated with variables to create dynamic task labels.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/usage.mdx#_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  default:\n    - task: print\n      vars:\n        MESSAGE: hello\n    - task: print\n      vars:\n        MESSAGE: world\n\n  print:\n    label: 'print-{{.MESSAGE}}'\n    cmds:\n      - echo \"{{.MESSAGE}}\"\n```\n\n----------------------------------------\n\nTITLE: Invoking Tasks with Wildcard Arguments in Shell\nDESCRIPTION: Shows how to call tasks with wildcard arguments from the command line, including examples with single and multiple captures, as well as handling whitespace in arguments.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/usage.mdx#_snippet_25\n\nLANGUAGE: shell\nCODE:\n```\n$ task start:foo\nStarting foo\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ task \"start:foo bar\"\nStarting foo bar\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ task start:foo:3\nStarting foo with 3 replicas\n```\n\n----------------------------------------\n\nTITLE: Marking a Taskfile task as interactive to optimize CLI app behavior in YAML\nDESCRIPTION: Shows how to mark a task as 'interactive: true' to optimize running interactive CLI applications (e.g., Vim) inside the Task runner. This setting helps prevent issues with input/output behavior, especially when output mode is not 'interleaved' or when tasks run concurrently. It requires Task v3 and appropriate terminal environments.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/usage.mdx#_snippet_46\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\\n\\ntasks:\\n  default:\\n    cmds:\\n      - vim my-file.txt\\n    interactive: true\n```\n\n----------------------------------------\n\nTITLE: Installing Task via Install Script (Custom Directory and Version)\nDESCRIPTION: Downloads and runs the official Task install script, specifying both a custom installation directory (`-b`) and a specific version. Requires the target directory to be in your system's PATH.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/installation.mdx#_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\nsh -c \"$(curl --location https://taskfile.dev/install.sh)\" -- -d -b ~/.local/bin v3.42.1\n```\n\n----------------------------------------\n\nTITLE: Including Remote Taskfile via Git over HTTP in YAML\nDESCRIPTION: This YAML snippet shows how to include a remote Taskfile located within a Git repository accessed over HTTP or HTTPS as part of a local Taskfile using the `includes` section. The Git URL format, potentially including path and reference, is used. Tasks from the remote file are accessible via the defined namespace.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/experiments/remote_taskfiles.mdx#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\nversion: '3'\n\nincludes:\n  my-remote-namespace: https://github.com/go-task/task.git//website/static/Taskfile.yml?ref=main\n```\n\n----------------------------------------\n\nTITLE: Specifying Remote Taskfile Entrypoint via Git over SSH (Shell)\nDESCRIPTION: This shell command demonstrates running Task with a Taskfile sourced from a Git repository accessed over SSH. Similar to the HTTP Git method, the `--taskfile` flag takes the SSH clone URL format, potentially with a path and reference. This requires the user's SSH agent to be properly set up with keys for authentication to the Git host. The default task in the remote file is then executed.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/experiments/remote_taskfiles.mdx#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n$ task --taskfile git@github.com/go-task/task.git//website/static/Taskfile.yml?ref=main\ntask: [hello] echo \"Hello Task!\"\nHello Task!\n```\n\n----------------------------------------\n\nTITLE: Task Environment Configuration with OS Variable Access\nDESCRIPTION: This YAML snippet demonstrates how to access OS environment variables using the `env` template function within a task. The example defines a task with an environment variable 'KEY' and executes commands to echo both the task-defined value and the OS environment variable value.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/experiments/env_precedence.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  default:\n    env:\n      KEY: 'other'\n    cmds:\n      - echo \"$KEY\"\n      - echo {{env \"KEY\"}}\n```\n\n----------------------------------------\n\nTITLE: Failing Tasks and Dependencies using Preconditions (Task - YAML)\nDESCRIPTION: Demonstrates how a failed precondition in one task causes both it and dependent tasks to fail. Highlights the difference between 'status' and 'preconditions'; dependencies (via 'deps' or calling another task) will not run if the preconditions are unmet. Requires Task v3+. Entries include minimal shell and YAML knowledge. Limitations: error propagation on failure, --force flag required to override.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  task-will-fail:\n    preconditions:\n      - sh: 'exit 1'\n\n  task-will-also-fail:\n    deps:\n      - task-will-fail\n\n  task-will-still-fail:\n    cmds:\n      - task: task-will-fail\n      - echo \"I will not run\"\n\n```\n\n----------------------------------------\n\nTITLE: Installing Task via Go Modules (Custom GOBIN)\nDESCRIPTION: Installs the latest release of Task using Go modules into a specific directory by setting the GOBIN environment variable. Requires a supported version of Go installed.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/installation.mdx#_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nenv GOBIN=/bin go install github.com/go-task/task/v3/cmd/task@latest\n```\n\n----------------------------------------\n\nTITLE: Defining Tasks and Aliases with Version in Taskfile - YAML\nDESCRIPTION: This YAML snippet illustrates a Taskfile that uses the 'version' field alongside task aliases. The 'tasks' key defines a task named 'hello', which has a list of aliases ('hi', 'hey') and an associated shell command. This syntax requires Task v3.17.x or higher. The input is a YAML Taskfile; running it with an older Task version will cause an error due to the unsupported 'aliases' feature. Dependencies include the Task CLI v3.17.0 or newer.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/taskfile_versions.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  hello:\n    aliases:\n      - hi\n      - hey\n    cmds:\n      - echo \"Hello, world!\"\n```\n\n----------------------------------------\n\nTITLE: Prefer External Scripts over Multi-Line Commands in Taskfile.yml - YAML\nDESCRIPTION: Advises avoiding multi-line shell commands within Taskfiles by preferring referencing external script files. This approach simplifies Taskfiles, improves readability, and isolates complex logic. The snippet contrasts a multi-line shell command marked as bad with a single script invocation marked as good.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/styleguide.mdx#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n# bad\nversion: '3'\n\ntasks:\n  build:\n    cmds:\n      - |\n        for i in $(seq 1 10); do\n          echo $i\n          echo \"some other complex logic\"\n        done'\n\n# good\nversion: '3'\n\ntasks:\n  build:\n    cmds:\n      - ./scripts/my_complex_script.sh\n```\n\n----------------------------------------\n\nTITLE: Calling Task in a Different Directory - Shell\nDESCRIPTION: This command runs a task from a Taskfile located in a different directory using the `--dir` flag. It takes the path to the directory containing the Taskfile as an argument. The command depends on the existence of a valid Taskfile in the specified path. Its primary use is to execute tasks defined in Taskfiles that are not in the current working directory.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/getting_started.mdx#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ntask --dir ./subdirectory\n```\n\n----------------------------------------\n\nTITLE: Installing Task via Install Script (Custom Directory)\nDESCRIPTION: Downloads and runs the official Task install script, specifying a custom installation directory using the `-b` parameter. Requires the target directory to be in your system's PATH.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/installation.mdx#_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nsh -c \"$(curl --location https://taskfile.dev/install.sh)\" -- -d -b ~/.local/bin\n```\n\n----------------------------------------\n\nTITLE: Installing Task via Fedora dnf\nDESCRIPTION: Installs the Task command-line tool using the dnf package manager on Fedora and its derivatives. Requires root privileges or appropriate user permissions. This is a community-maintained package.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/installation.mdx#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ndnf install go-task\n```\n\n----------------------------------------\n\nTITLE: Task Cleanup with Defer Command\nDESCRIPTION: Shows how to use the defer keyword to schedule cleanup commands that will run when a task finishes, even if the task fails. The example creates a temporary directory and ensures it gets removed.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/usage.mdx#_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  default:\n    cmds:\n      - mkdir -p tmpdir/\n      - defer: rm -rf tmpdir/\n      - echo 'Do work on tmpdir/'\n```\n\n----------------------------------------\n\nTITLE: Loading Task Completion in Fish Startup\nDESCRIPTION: Adds a line to your Fish configuration file (`~/.config/fish/config.fish`) to load Task command completion every time a new shell is created. This ensures completions are always up-to-date.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/installation.mdx#_snippet_23\n\nLANGUAGE: fish\nCODE:\n```\ntask --completion fish | source\n```\n\n----------------------------------------\n\nTITLE: Installing Task CLI on Fedora using dnf - Shell\nDESCRIPTION: Community-maintained installation of Task CLI on Fedora Linux using the dnf package manager. Requires dnf enabled and repository access.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/installation.mdx#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndnf install go-task\n```\n\n----------------------------------------\n\nTITLE: Defining `task-with-summary` Task in Go Task (YAML)\nDESCRIPTION: Defines the `task-with-summary` task for Go Task. It includes a multi-line summary describing its purpose, declares dependencies on `dependent-task-1` and `dependent-task-2`, and specifies shell commands (`echo`, `exit`) to run when the task is executed.\nSOURCE: https://github.com/go-task/task/blob/main/testdata/summary/task-with-summary.txt#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\ntask: task-with-summary\n\nsummary of task-with-summary - line 1\nline 2\nline 3\n\ndependencies:\n - dependent-task-1\n - dependent-task-2\n\ncommands:\n - echo 'task-with-summary was executed'\n - echo 'another command'\n - exit 0\n```\n\n----------------------------------------\n\nTITLE: Installing Task CLI using Snap - Shell\nDESCRIPTION: Installation of Task CLI on Linux via Snap package manager. Requires Snapd installed with classic confinement enabled to allow Task CLI to function properly. Outputs the installed Task CLI snap package.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/installation.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo snap install task --classic\n```\n\n----------------------------------------\n\nTITLE: Listing Tasks with Description from Shell (go-task, Shell)\nDESCRIPTION: Shows shell output from running task --list or task -l, which prints available task names with their descriptions as defined in the Taskfile. Inputs are CLI invocations; outputs are formatted lists presenting task information for user reference.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_70\n\nLANGUAGE: shell\nCODE:\n```\n* build:   Build the go binary.\n* test:    Run all the go tests.\n```\n\n----------------------------------------\n\nTITLE: Task Listing JSON Output Structure\nDESCRIPTION: This JSON snippet illustrates the structure of the output generated by Task when using the `--json` flag with list commands (`--list` or `--list-all`). It shows the `tasks` array containing objects with details like name, description, summary, status, and location, along with the overall `location` of the Taskfile.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/reference/cli.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tasks\": [\n    {\n      \"name\": \"\",\n      \"desc\": \"\",\n      \"summary\": \"\",\n      \"up_to_date\": false,\n      \"location\": {\n        \"line\": 54,\n        \"column\": 3,\n        \"taskfile\": \"/path/to/Taskfile.yml\"\n      }\n    }\n    // ...\n  ],\n  \"location\": \"/path/to/Taskfile.yml\"\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Variables: Passing by Reference (Deps)\nDESCRIPTION: This example demonstrates the behavior of `ref` when combined with `deps` and variable definitions. It shows how a variable, in this case an array, can be passed by reference through various stages of task execution while retaining its type.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_45\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 3\n\ntasks:\n  foo:\n    vars:\n      FOO: [A, B, C] # <-- FOO is defined as an array\n      BAR:\n        ref: .FOO # <-- BAR is defined as a reference to FOO\n    deps:\n      - task: bar\n        vars:\n          BAR:\n            ref: .BAR # <-- BAR gets passed by reference to bar and maintains its type\n  bar:\n    cmds:\n      - 'echo {{index .BAR 0}}' # <-- BAR still refers to FOO so the task outputs 'A'\n```\n\n----------------------------------------\n\nTITLE: Initializing Taskfile with Custom Name - Shell\nDESCRIPTION: This command initializes a Taskfile with a specific custom name. It leverages the `task --init` command and takes a custom file name as an argument. This is useful for situations where a standard file name like `Taskfile.yml` is not desired. There are no explicit dependencies beyond the Task tool itself. The command outputs a Taskfile with the specified name.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/getting_started.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ntask --init Custom.yml\n```\n\n----------------------------------------\n\nTITLE: Environment Variable with Default Value\nDESCRIPTION: This YAML snippet shows how to use the `default` template function to provide a fallback value for an environment variable if it is not set.  This allows for defining default values for variables used in task configurations.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/experiments/env_precedence.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nMY_ENV: '{{.MY_ENV | default \"fallback\"}}'\n```\n\n----------------------------------------\n\nTITLE: Ignoring Command Errors\nDESCRIPTION: Shows how to use the ignore_error option at the command level to continue task execution even if a command fails with a non-zero exit code.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/usage.mdx#_snippet_38\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  echo:\n    cmds:\n      - cmd: exit 1\n        ignore_error: true\n      - echo \"Hello World\"\n```\n\n----------------------------------------\n\nTITLE: Installing Task via npm (Global)\nDESCRIPTION: Installs the Task command-line tool globally using the npm package manager. Requires Node.js and npm installed. Provides a cross-platform installation method.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/installation.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -g @go-task/cli\n```\n\n----------------------------------------\n\nTITLE: Looping: Over Arrays and Maps\nDESCRIPTION: Demonstrates looping over arrays and maps, and highlights the availability of the `{{.KEY}}` variable when looping over a map.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_57\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 3\n\ntasks:\n  foo:\n    vars:\n      LIST: [foo, bar, baz]\n    cmds:\n      - for:\n          var: LIST\n        cmd: echo {{.ITEM}}\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Commands Under 'cmds' for a Task in go-task - YAML\nDESCRIPTION: This YAML snippet illustrates assigning a list of shell commands to the 'cmds' attribute inside a task definition. Each string in the 'cmds' list represents a command to execute sequentially for the designated task ('foo'). This requires go-task and a properly configured Taskfile. The commands run in order and their outputs are managed according to go-task's standard output and error redirection, with no specific parameters or variable substitutions in the snippet.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/reference/schema.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntasks:\n  foo:\n    cmds:\n      - echo \"foo\"\n      - echo \"bar\"\n\n```\n\n----------------------------------------\n\nTITLE: Referencing Variables: Passing by Reference\nDESCRIPTION: This snippet demonstrates how to pass a variable by reference instead of by value. When using standard templating, variables are converted to strings.  Using `ref` keeps the original type. This is important when dealing with arrays or other non-string types to ensure that variables retain their type when passed to another task.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_44\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 3\n\ntasks:\n  foo:\n    vars:\n      FOO: [A, B, C] # <-- FOO is defined as an array\n    cmds:\n      - task: bar\n        vars:\n          FOO:\n            ref: .FOO # <-- FOO gets passed by reference to bar and maintains its type\n  bar:\n    cmds:\n      - 'echo {{index .FOO 0}}' # <-- FOO is still a map so the task outputs 'A' as expected\n```\n\n----------------------------------------\n\nTITLE: Listing Task Dependencies as Strings in go-task - YAML\nDESCRIPTION: This YAML example demonstrates a shortcut for specifying dependencies (deps) in go-task by providing a list of string task names. The 'foo' task depends on the successful execution of the 'foo' and 'bar' tasks before running its own commands. There are no dependencies besides go-task and a valid Taskfile, and inputs are just task names as strings. Outputs are dictated by the respective dependent tasks.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/reference/schema.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntasks:\n  foo:\n    deps: [foo, bar]\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Precondition with a Shell Command in go-task - YAML\nDESCRIPTION: This snippet shows how to declare a precondition in go-task by assigning a shell command to the 'precondition' attribute. Here, the precondition ensures that 'Taskfile.yml' exists before allowing the main task execution. If the test fails (exit code not zero), no further commands are run for this task. This requires go-task and access to a shell environment; input is the shell command itself, and output is the pass/fail status controlling execution flow.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/reference/schema.mdx#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ntasks:\n  foo:\n    precondition: test -f Taskfile.yml\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Watch Mode with 'sources' and 'interval' Settings\nDESCRIPTION: This configuration enables file watching for a task, specifying source files to monitor and adjusting the watch interval. The 'watch: true' flag in the task config makes it automatically run in watch mode, useful for development workflows.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_88\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ninterval: 500ms\n\ntasks:\n  build:\n    desc: Builds the Go application\n    watch: true\n    sources:\n      - '**/*.go'\n    cmds:\n      - go build # ...\n```\n\n----------------------------------------\n\nTITLE: Passing Variables and Silent Mode to Dependencies in Taskfile YAML\nDESCRIPTION: This snippet describes passing variables and silent execution flags to dependent tasks listed in the 'deps' array. Each dependency can specify the task name along with 'vars' to provide input variables, and 'silent' to suppress output. This fine-grained control allows customizing runs of dependencies during task execution. Inputs include variables as key-value pairs and silent boolean; outputs are task runs with those parameters.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/usage.mdx#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  default:\n    deps:\n      - task: echo_sth\n        vars: { TEXT: 'before 1' }\n      - task: echo_sth\n        vars: { TEXT: 'before 2' }\n        silent: true\n    cmds:\n      - echo \"after\"\n\n  echo_sth:\n    cmds:\n      - echo {{.TEXT}}\n```\n\n----------------------------------------\n\nTITLE: Index Data Structures in Go Template\nDESCRIPTION: Allows indexing into its first argument (a map, slice, or array) using the subsequent arguments as indices. For instance, `index x 1 2 3` is equivalent to `x[1][2][3]` in Go syntax. Each level of indexing requires the item to be a map, slice, or array.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/reference/templating.mdx#_snippet_7\n\nLANGUAGE: Go Template\nCODE:\n```\nindex\n```\n\n----------------------------------------\n\nTITLE: Escape for HTML in Go Template\nDESCRIPTION: Returns the HTML-escaped equivalent of the textual representation of its arguments. This function is generally unavailable in `html/template` with few exceptions.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/reference/templating.mdx#_snippet_6\n\nLANGUAGE: Go Template\nCODE:\n```\nhtml\n```\n\n----------------------------------------\n\nTITLE: Importing Taskfile Package in Go\nDESCRIPTION: Imports the necessary `taskfile` package from the `go-task/task/v3` module to enable programmatic reading and manipulation of Taskfiles.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/reference/package.mdx#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/go-task/task/v3/taskfile\"\n)\n```\n\n----------------------------------------\n\nTITLE: Enabling Silent Mode at Multiple Levels in Taskfile (go-task, YAML)\nDESCRIPTION: Demonstrates configuring silent mode to suppress command echoing before execution at command, task, and global Taskfile levels using the silent key. This affects task output formatting; input is standard task invocation, and the output is reduced to command result only. No external dependencies required.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_79\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  echo:\n    cmds:\n      - echo \"Print something\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  echo:\n    cmds:\n      - cmd: echo \"Print something\"\n        silent: true\n```\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  echo:\n    cmds:\n      - echo \"Print something\"\n    silent: true\n```\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\nsilent: true\n\ntasks:\n  echo:\n    cmds:\n      - echo \"Print something\"\n```\n\n----------------------------------------\n\nTITLE: Reading and Parsing a Taskfile Using Reader.Read in Go\nDESCRIPTION: This snippet reads and parses a Taskfile into an AST TaskfileGraph using reader.Read. It requires a context.Context (here using context.Background()) and a Node as input. The output is an ast.TaskfileGraph and an error value. Handle errors as appropriate for the application. Dependencies include the context package and a properly configured Reader and Node.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/reference/package.mdx#_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nctx := context.Background()\ntfg, err := reader.Read(ctx, node)\n// handle error\n```\n\n----------------------------------------\n\nTITLE: Authenticating Remote Includes Using Environment Variables (YAML)\nDESCRIPTION: This YAML snippet demonstrates utilizing Task's built-in templating system to include environment variables within the URL used for including a remote Taskfile. This technique allows sensitive information, such as authentication tokens, to be provided via environment variables rather than being hardcoded directly in the Taskfile, enhancing security for accessing protected remote resources.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/experiments/remote_taskfiles.mdx#_snippet_8\n\nLANGUAGE: YAML\nCODE:\n```\nversion: '3'\n\nincludes:\n  my-remote-namespace: https://{{.TOKEN}}@raw.githubusercontent.com/my-org/my-repo/main/Taskfile.yml\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks with Dependencies Only\nDESCRIPTION: This snippet shows how to group multiple tasks without commands by specifying dependencies, which will run in parallel to organize task execution.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  assets:\n    deps: [js, css]\n\n  js:\n    cmds:\n      - esbuild --bundle --minify js/index.js > public/bundle.js\n\n  css:\n    cmds:\n      - esbuild --bundle --minify css/index.css > public/bundle.css\n```\n\n----------------------------------------\n\nTITLE: Creating Task Aliases in Taskfile (go-task, YAML)\nDESCRIPTION: Explains how to define alternative names (aliases) for tasks using the aliases field in Taskfile. Aliases can be used interchangeably to invoke tasks, simplify long names, and are recognized when calling sub-tasks or including Taskfiles. No external dependencies required, but correct aliasing must be ensured in YAML configuration.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_73\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  generate:\n    aliases: [gen]\n    cmds:\n      - task: gen-mocks\n\n  generate-mocks:\n    aliases: [gen-mocks]\n    cmds:\n      - echo \"generating...\"\n```\n\n----------------------------------------\n\nTITLE: Referencing Variables: Using Templating Syntax\nDESCRIPTION: This code snippet demonstrates the use of templating syntax within references, including subkeys, indexes, and functions. This allows for more complex access to data within the referenced variable.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_46\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 3\n\ntasks:\n  foo:\n    vars:\n      FOO: [A, B, C] # <-- FOO is defined as an array\n    cmds:\n      - task: bar\n        vars:\n          FOO:\n            ref: index .FOO 0 # <-- The element at index 0 is passed by reference to bar\n  bar:\n    cmds:\n      - 'echo {{.FOO}}' # <-- FOO is just the letter 'A'\n```\n\n----------------------------------------\n\nTITLE: Using Boolean Variables (After) - Task YAML\nDESCRIPTION: Demonstrates the improved handling of boolean variables in Task v3.37.0+. Boolean values are parsed directly from YAML and retain their boolean type. The template logic can now directly use the boolean variable `BOOL` in a conditional statement without needing string comparison, simplifying templates.\nSOURCE: https://github.com/go-task/task/blob/main/website/blog/2024-05-09-any-variables.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 3\n\ntasks:\n  foo:\n    vars:\n      BOOL: true # <-- Parsed as a boolean\n    cmds:\n      - '{{if .BOOL}}echo foo{{end}}' # <-- No need to compare to \"true\"\n\n```\n\n----------------------------------------\n\nTITLE: YAML Taskfile Task Separation (Bad Example)\nDESCRIPTION: This snippet presents an example of how tasks should *not* be separated within a Taskfile.yml file. The tasks are not separated by blank lines, reducing the readability.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/styleguide.mdx#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\n# bad\nversion: '3'\n\ntasks:\n  foo:\n    cmds:\n      - echo 'foo'\n  bar:\n    cmds:\n      - echo 'bar'\n  baz:\n    cmds:\n      - echo 'baz'\n```\n\n----------------------------------------\n\nTITLE: Conditional Logic Templating in YAML\nDESCRIPTION: This snippet shows how to implement conditional logic in a template within a YAML file. It uses an `if` statement to output different strings based on the value of the `HAPPY` variable. It uses `.SMILE` or `.FROWN` to determine the output.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/reference/templating.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  maybe-happy:\n    vars:\n      SMILE: ':)'\n      FROWN: ':('\n      HAPPY: true\n    cmds:\n      - 'echo {{if .HAPPY}}{{.SMILE}}{{else}}{{.FROWN}}{{end}}'\n```\n\n----------------------------------------\n\nTITLE: Separate Main Sections with Empty Lines in Taskfile.yml - YAML\nDESCRIPTION: Illustrates the preference for adding empty lines between main sections in Taskfile.yml such as 'version', 'includes', 'output', 'vars', 'env', and 'tasks'. This separation improves readability and organization. The snippet shows both non-separated (bad) and separated (good) versions of the same sections.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/styleguide.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# bad\nversion: '3'\nincludes:\n  docker: ./docker/Taskfile.yml\noutput: prefixed\nvars:\n  FOO: bar\nenv:\n  BAR: baz\ntasks:\n  # ...\n\n\n# good\nversion: '3'\n\nincludes:\n  docker: ./docker/Taskfile.yml\n\noutput: prefixed\n\nvars:\n  FOO: bar\n\nenv:\n  BAR: baz\n\ntasks:\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Linking Taskfile to Schema via Modeline (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to associate a Taskfile directly with the official JSON schema using a special comment (`# yaml-language-server: $schema=...`). This allows tools like the YAML language server (used by the VS Code YAML extension) to provide validation and autocompletion without relying on global settings, using the schema hosted at `https://taskfile.dev/schema.json`. The `version: '3'` line indicates the Taskfile version.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/integrations.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# yaml-language-server: $schema=https://taskfile.dev/schema.json\nversion: '3'\n```\n\n----------------------------------------\n\nTITLE: Task Summary for Detailed Information\nDESCRIPTION: Shows how to add a multi-line summary to tasks that provides detailed information about the task's purpose and requirements, which can be displayed with 'task --summary task-name'.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/usage.mdx#_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  release:\n    deps: [build]\n    summary: |\n      Release your project to github\n\n      It will build your project before starting the release.\n      Please make sure that you have set GITHUB_TOKEN before starting.\n    cmds:\n      - your-release-tool\n\n  build:\n    cmds:\n      - your-build-tool\n```\n\n----------------------------------------\n\nTITLE: Defining Expected JSON Output Structure for Task CLI Listing in JSON\nDESCRIPTION: This snippet demonstrates the JSON structure output by the Task CLI when invoked with the --json flag alongside --list or --list-all. It illustrates a top-level object containing an array of task objects with properties such as name, desc, summary, up_to_date, and a nested location object (holding line, column, and Taskfile path). Required fields in the task object include strings and booleans for basic metadata, and location for traceability. The location field at the root indicates the Taskfile source. This output is intended for integration with external tools or scripts and is limited to the listing commands.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/reference/cli.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tasks\": [\n    {\n      \"name\": \"\",\n      \"desc\": \"\",\n      \"summary\": \"\",\n      \"up_to_date\": false,\n      \"location\": {\n        \"line\": 54,\n        \"column\": 3,\n        \"taskfile\": \"/path/to/Taskfile.yml\"\n      }\n    }\n    // ...\n  ],\n  \"location\": \"/path/to/Taskfile.yml\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Taskfile Includes in YAML\nDESCRIPTION: Demonstrates how to define includes in a Taskfile using the shorthand string syntax. This approach is equivalent to setting the value to the 'taskfile' attribute of the Include schema.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/reference/schema.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nincludes:\n  foo: ./path\n```\n\n----------------------------------------\n\nTITLE: Consistent Two-Space Indentation in Taskfile.yml - YAML\nDESCRIPTION: Demonstrates the recommended two-space indentation style for YAML Taskfiles to enhance consistency and alignment with common YAML conventions. The snippet contrasts incorrect indentation (four spaces) with the correct style (two spaces). Proper indentation is crucial for YAML parsing and readability.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/styleguide.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# bad\ntasks:\n    foo:\n        cmds:\n            - echo 'foo'\n\n\n# good\ntasks:\n  foo:\n    cmds:\n      - echo 'foo'\n```\n\n----------------------------------------\n\nTITLE: Using Short Task Syntax for Default Configurations\nDESCRIPTION: This configuration demonstrates defining tasks using the shorthand syntax for commands with default settings, making the Taskfile more concise. It shows a build command and a subsequent run command depending on the build.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_86\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  build: go build -v -o ./app{{exeExt}} .\n\n  run:\n    - task: build\n    - ./app{{exeExt}} -h localhost -p 8080\n```\n\n----------------------------------------\n\nTITLE: Including OS-Specific Taskfiles in Taskfile YAML\nDESCRIPTION: Shows how to use templating functions like `{{OS}}` within the include path to dynamically select a Taskfile based on the operating system. This allows maintaining OS-specific task definitions in separate files.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_9\n\nLANGUAGE: YAML\nCODE:\n```\nversion: '3'\n\nincludes:\n  build: ./Taskfile_{{OS}}.yml\n```\n\n----------------------------------------\n\nTITLE: Global Silent Mode\nDESCRIPTION: Shows how to enable silent mode globally for all tasks in the Taskfile, preventing commands from being echoed before execution.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/usage.mdx#_snippet_37\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\nsilent: true\n\ntasks:\n  echo:\n    cmds:\n      - echo \"Print something\"\n```\n\n----------------------------------------\n\nTITLE: Configuring 'prefixed' Output Mode with Custom Prefix per Task\nDESCRIPTION: This snippet sets the output mode to 'prefixed' where each command line is prefixed with a customizable string. The tasks demonstrate printing different texts with specific prefixes based on task variables, enhancing log readability.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_84\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\noutput: prefixed\n\ntasks:\n  default:\n    deps:\n      - task: print\n        vars: { TEXT: foo }\n      - task: print\n        vars: { TEXT: bar }\n      - task: print\n        vars: { TEXT: baz }\n\n  print:\n    cmds:\n      - echo \"{{.TEXT}}\"\n    prefix: 'print-{{.TEXT}}'\n    silent: true\n```\n\n----------------------------------------\n\nTITLE: Prompt Output and Task Confirmation (go-task, Shell)\nDESCRIPTION: Shows shell prompt when a task with a prompt field is invoked, requiring user interaction to approve task execution. The expected input is a CLI command; output is a confirmation prompt message.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_76\n\nLANGUAGE: shell\nCODE:\n```\n❯ task dangerous\ntask: \"This is a dangerous command... Do you want to continue?\" [y/N]\n```\n\n----------------------------------------\n\nTITLE: Looping: Renaming Iterator Variable\nDESCRIPTION: This snippet shows how to rename the iterator variable using the `as` property, improving readability when looping.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_59\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  default:\n    vars:\n      MY_VAR: foo.txt bar.txt\n    cmds:\n      - for: { var: MY_VAR, as: FILE }\n        cmd: cat {{.FILE}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Internal (Hidden) Tasks\nDESCRIPTION: This snippet shows how to define internal tasks that cannot be called directly by users but can be invoked by other tasks. They are useful for creating reusable, function-like tasks that are hidden from task listings.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  build-image-1:\n    cmds:\n      - task: build-image\n        vars:\n          DOCKER_IMAGE: image-1\n\n  build-image:\n    internal: true\n    cmds:\n      - docker build -t {{.DOCKER_IMAGE}} .\n```\n\n----------------------------------------\n\nTITLE: Example shell output showing group mode with custom begin/end markers\nDESCRIPTION: Shows the expected output when running the Taskfile configured with 'group' mode and begin/end group messages. It simulates terminal output where a task named 'default' prints grouped output with GitHub Actions style annotation lines.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/usage.mdx#_snippet_41\n\nLANGUAGE: shell\nCODE:\n```\n$ task default\\n::group::default\\nHello, World!\\n::endgroup::\n```\n\n----------------------------------------\n\nTITLE: Use Colon to Separate Task Namespace and Name in Taskfile.yml - YAML\nDESCRIPTION: Displays the usage of a colon ':' separator to differentiate task namespaces and task names within Taskfiles. This namespacing style facilitates better organization and is automatically applied when including Taskfiles. The snippet shows tasks with 'docker:build:' and 'docker:run:' as examples.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/styleguide.mdx#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# good\nversion: '3'\n\ntasks:\n  docker:build:\n    cmds:\n      - docker ...\n\n  docker:run:\n    cmds:\n      - docker-compose ...\n```\n\n----------------------------------------\n\nTITLE: Variable References in YAML\nDESCRIPTION: Demonstrates how to reference previously defined variables within a variables map. Variables defined earlier can be referenced by later variables using the Go template syntax with declaration order respected.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/reference/schema.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nvars:\n  FIRST_VAR: \"hello\"\n  SECOND_VAR: \"{{.FIRST_VAR}} world\"\n```\n\n----------------------------------------\n\nTITLE: Enforcing Minimum Task Version for Aliases Feature - YAML\nDESCRIPTION: This snippet refines the previous Taskfile example by specifying a stricter minimum required version ('3.17') for using aliases. By doing so, users running an insufficiently recent Task CLI will receive an explicit version error message. Inputs and outputs are the YAML Taskfile and Task CLI runtime errors or successful execution, respectively. Dependency: Task CLI v3.17.0 or newer.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/taskfile_versions.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.17'\n```\n\n----------------------------------------\n\nTITLE: Running an Included Remote Task (Shell)\nDESCRIPTION: This shell command illustrates how to execute a specific task defined in a remote Taskfile that has been included in the main Taskfile using a namespace. The syntax involves calling `task` followed by the namespace, a colon, and the name of the task (e.g., `my-remote-namespace:hello`). This executes the 'hello' task from the Taskfile included under 'my-remote-namespace'.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/experiments/remote_taskfiles.mdx#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\n$ task my-remote-namespace:hello\ntask: [hello] echo \"Hello Task!\"\nHello Task!\n```\n\n----------------------------------------\n\nTITLE: YAML Taskfile Task Namespace (Good Example)\nDESCRIPTION: This snippet shows a good example of how to namespace a task. The example 'docker:build' and 'docker:run' provides a clear task namespace.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/styleguide.mdx#_snippet_13\n\nLANGUAGE: YAML\nCODE:\n```\n# good\nversion: '3'\n\ntasks:\n  docker:build:\n    cmds:\n      - docker ...\n\n  docker:run:\n    cmds:\n      - docker-compose ...\n```\n\n----------------------------------------\n\nTITLE: Use Kebab Case for Task Names in Taskfile.yml - YAML\nDESCRIPTION: Encourages the use of kebab-case (hyphen-separated) for naming tasks instead of snake_case or other styles. The snippet presents tasks named with underscores marked as 'bad', and tasks following kebab-case as 'good', promoting naming consistency in Taskfiles.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/styleguide.mdx#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# bad\nversion: '3'\n\ntasks:\n  do_something_fancy:\n    cmds:\n      - echo 'Do something'\n\n\n# good\nversion: '3'\n\ntasks:\n  do-something-fancy:\n    cmds:\n      - echo 'Do something'\n```\n\n----------------------------------------\n\nTITLE: Example External Shell Script for Use with Task\nDESCRIPTION: This is an example Bash script (`foo-printer.bash`) intended to be called from a Taskfile. It demonstrates setting a shell variable `a` and printing its value, showcasing how complex logic can be encapsulated outside the Taskfile itself.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/faq.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/bash\na=foo\necho $a\n```\n\n----------------------------------------\n\nTITLE: Sequential Task Execution and Prompts Output (go-task, Shell)\nDESCRIPTION: Shows detailed shell interaction for a sequence of tasks where one has a warning prompt, including user approval and execution of safe and dangerous commands. Input is a shell task invocation; output is command-by-command responses, prompts, user input, and results.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_78\n\nLANGUAGE: shell\nCODE:\n```\n❯ task example\nnot dangerous command\ntask: \"This is a dangerous command. Do you want to continue?\" [y/N]\ny\ndangerous command\nanother not dangerous command\n```\n\n----------------------------------------\n\nTITLE: Looping: Tasks within Loops\nDESCRIPTION: Demonstrates how to use the `task` keyword inside a loop to run different tasks multiple times with different variables passed by the loop's iterator.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_60\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  default:\n    cmds:\n      - for: [foo, bar]\n        task: my-task\n        vars:\n          FILE: '{{.ITEM}}'\n\n  my-task:\n    cmds:\n      - echo '{{.FILE}}'\n```\n\n----------------------------------------\n\nTITLE: Looping with Control Flow Operators in YAML\nDESCRIPTION: This snippet shows looping through a list of values using the `range` operator within a Taskfile. The example prints the index and value of each number in the `NUMBERS` list until a number greater than 1 is encountered, and uses `break` to exit the loop.  It demonstrates how to iterate and control program flow inside the templates.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/reference/templating.mdx#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  loop:\n    vars:\n      NUMBERS: [0, 1, 1, 1, 2, 2, 3]\n    cmds:\n      # Ranges over NUMBERS and prints the index and value of each number until it finds a number greater than 1\n      - \"{{range $index, $num := .NUMBERS}}{{if gt $num 1 }}{{break}}{{end}}echo {{$index}}: {{$num}}\\n{{end}}\"\n```\n\n----------------------------------------\n\nTITLE: Looping with Control Flow Templating in YAML\nDESCRIPTION: This YAML snippet illustrates how to loop through a list of values and execute a command for each item using `range`.  It prints the index and value of each number in the `NUMBERS` list. The `gt` function is used to break the loop if the number is greater than 1.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/reference/templating.mdx#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  loop:\n    vars:\n      NUMBERS: [0, 1, 1, 1, 2, 2, 3]\n    cmds:\n      # Ranges over NUMBERS and prints the index and value of each number until it finds a number greater than 1\n      - \"{{range $index, $num := .NUMBERS}}{{if gt $num 1 }}{{break}}{{end}}echo {{$index}}: {{$num}}\\n{{end}}\"\n```\n\n----------------------------------------\n\nTITLE: Templating Basic Example in YAML\nDESCRIPTION: This snippet demonstrates basic templating within a YAML file, using the `echo` command to output a string containing a templated variable. The templating engine replaces `.MESSAGE` with its defined value.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/reference/templating.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  hello:\n    vars:\n      MESSAGE: 'Hello, World!'\n    cmds:\n      - 'echo {{.MESSAGE}}'\n```\n\n----------------------------------------\n\nTITLE: YAML Taskfile Variable Naming (Good Example)\nDESCRIPTION: This snippet shows the correct variable naming in a Taskfile.yml file. The variable `BINARY_NAME` is in uppercase, adhering to the style guide.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/styleguide.mdx#_snippet_8\n\nLANGUAGE: YAML\nCODE:\n```\n# good\nversion: '3'\n\nvars:\n  BINARY_NAME: myapp\n\ntasks:\n  build:\n    cmds:\n      - go build -o {{.BINARY_NAME}} .\n```\n\n----------------------------------------\n\nTITLE: Copying Task Completion Script for Bash\nDESCRIPTION: Generates the Task command completion script for Bash and redirects its output to a system-wide completion directory. Requires root privileges. This method needs manual updates when Task is upgraded.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/installation.mdx#_snippet_25\n\nLANGUAGE: shell\nCODE:\n```\ntask --completion bash > /etc/bash_completion.d/task\n```\n\n----------------------------------------\n\nTITLE: Defining Experimental Features in Project YAML Config – YAML\nDESCRIPTION: This YAML snippet demonstrates how to enable an experimental feature for Task at the project level by adding it to the .taskrc.yml file. The parent key 'experiments' lists enabled experiments, where 'FEATURE' should be replaced with the actual experiment name and set to 1. The file must reside in the same directory as the root Taskfile. No additional dependencies are required, but Task will prioritize values in .taskrc.yml over those in .env files if both are present.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/experiments/experiments.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nexperiments:\n  FEATURE: 1\n```\n\n----------------------------------------\n\nTITLE: Uppercase Variable Names in Taskfile.yml - YAML\nDESCRIPTION: Recommends the use of all uppercase letters for variable names in Taskfiles. This snippet contrasts non-uppercase variable naming with uppercase naming, which is considered the proper convention for clarity and consistency when using variables in commands.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/styleguide.mdx#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# bad\nversion: '3'\n\nvars:\n  binary_name: myapp\n\ntasks:\n  build:\n    cmds:\n      - go build -o {{.binary_name}} .\n\n\n# good\nversion: '3'\n\nvars:\n  BINARY_NAME: myapp\n\ntasks:\n  build:\n    cmds:\n      - go build -o {{.BINARY_NAME}} .\n```\n\n----------------------------------------\n\nTITLE: Print Formatted String in Go Template\nDESCRIPTION: An alias for the Go standard library function `fmt.Sprintf`. It formats according to a format specifier and returns the resulting string.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/reference/templating.mdx#_snippet_14\n\nLANGUAGE: Go Template\nCODE:\n```\nprintf\n```\n\n----------------------------------------\n\nTITLE: YAML Taskfile External Script (Good Example)\nDESCRIPTION: This snippet demonstrates the suggested approach: using an external script instead of multi-line commands in a Taskfile.yml file. It improves maintainability and readability.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/styleguide.mdx#_snippet_15\n\nLANGUAGE: YAML\nCODE:\n```\n# good\nversion: '3'\n\ntasks:\n  build:\n    cmds:\n      - ./scripts/my_complex_script.sh\n```\n\n----------------------------------------\n\nTITLE: Loading Task Completion in PowerShell Startup\nDESCRIPTION: Adds a line to your PowerShell profile (`$PROFILE`) to load Task command completion every time a new session is created. This ensures completions are always up-to-date.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/installation.mdx#_snippet_24\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-Expression  (&task --completion powershell | Out-String)\n```\n\n----------------------------------------\n\nTITLE: Setting output mode to 'group' in Taskfile YAML\nDESCRIPTION: Configures the Taskfile to use the 'group' output mode, which prints command output only after the command finishes execution. This mode disables live output streaming to reduce output clutter when running multiple commands in parallel. It includes setting the version and the output mode at the root level, and defines tasks as normal. This YAML snippet requires Task v3 syntax support.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/usage.mdx#_snippet_39\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\\n\\noutput: 'group'\\n\\ntasks:\\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Running Global Taskfile Commands in Home or Working Directory YAML\nDESCRIPTION: Illustrates how tasks defined in a global Taskfile (e.g., `$HOME/Taskfile.yml`) behave regarding the working directory. Tasks without a specific `dir` run in the global Taskfile's directory (`$HOME`), while tasks using `{{.USER_WORKING_DIR}}` run in the directory from which Task was initially called.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nversion: '3'\n\ntasks:\n  from-home:\n    cmds:\n      - pwd\n\n  from-working-directory:\n    dir: '{{.USER_WORKING_DIR}}'\n    cmds:\n      - pwd\n```\n\n----------------------------------------\n\nTITLE: Illustrating Separate Command Scope in Task YAML\nDESCRIPTION: This Taskfile example demonstrates that each command under `cmds` runs in a separate shell instance. Setting the variable `a` in the first command does not make it available in the second command, resulting in an empty output for `echo $a`.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/faq.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  foo:\n    cmds:\n      - a=foo\n      - echo $a\n      # outputs \"\"\n```\n\n----------------------------------------\n\nTITLE: Defining an Example Remote Taskfile (YAML)\nDESCRIPTION: This YAML snippet shows a simple Taskfile structure used as an example throughout the document to demonstrate remote Taskfile functionality. It defines a 'default' task that depends on a 'hello' task, which in turn simply executes a shell command to print a greeting.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/experiments/remote_taskfiles.mdx#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nversion: '3'\n\ntasks:\n  default:\n    cmds:\n      - task: hello\n\n  hello:\n    cmds:\n      - echo \"Hello Task!\"\n```\n\n----------------------------------------\n\nTITLE: Including Taskfile and Specifying Execution Directory in Taskfile YAML\nDESCRIPTION: Illustrates an alternative syntax for includes where you can explicitly specify both the `taskfile` path and the `dir` where tasks from that included file should execute. By default, included tasks run in the directory of the main Taskfile.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_10\n\nLANGUAGE: YAML\nCODE:\n```\nversion: '3'\n\nincludes:\n  docs:\n    taskfile: ./docs/Taskfile.yml\n    dir: ./docs\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Tasks Using go-task in YAML\nDESCRIPTION: This snippet demonstrates alternative syntaxes for defining simple tasks using the go-task Taskfile format. It shows how to assign shell commands directly to the 'cmds' field, use sequence lists for multiple commands, and leverage the 'cmd' key for explicit command binding. No external dependencies are required, but the go-task tool must parse the YAML structure. The input consists of task names and associated shell commands to run; outputs are the execution of these commands as automated tasks.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/reference/schema.mdx#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ntasks:\n  foo: echo \"foo\"\n\n  foobar:\n    - echo \"foo\"\n    - echo \"bar\"\n\n  baz:\n    cmd: echo \"baz\"\n\n```\n\n----------------------------------------\n\nTITLE: YAML Taskfile Task Separation (Good Example)\nDESCRIPTION: This snippet demonstrates the correct method for separating tasks in a Taskfile.yml file. Tasks are separated by blank lines, which enhances readability and makes it easier to understand the structure of the file.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/styleguide.mdx#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\n# good\nversion: '3'\n\ntasks:\n  foo:\n    cmds:\n      - echo 'foo'\n\n  bar:\n    cmds:\n      - echo 'bar'\n\n  baz:\n    cmds:\n      - echo 'baz'\n```\n\n----------------------------------------\n\nTITLE: Including and Flattening Tasks (Main Taskfile) YAML\nDESCRIPTION: This is the main `Taskfile.yml` in an example demonstrating the `flatten: true` option for includes. Tasks from the included `Included.yml` (shown next) become available without a namespace and can be referenced directly, like the `greet` task referencing `foo`.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_13\n\nLANGUAGE: YAML\nCODE:\n```\nversion: '3'\n\nincludes:\n  lib:\n    taskfile: ./Included.yml\n    flatten: true\n\ntasks:\n  greet:\n    cmds:\n      - echo \"Greet\"\n      - task: foo\n```\n\n----------------------------------------\n\nTITLE: Running Task in Subdirectory with User Working Directory YAML\nDESCRIPTION: This Taskfile snippet demonstrates how to run a task from a subdirectory while executing commands as if they were run from the user's initial working directory. It uses the special `{{.USER_WORKING_DIR}}` variable to change the execution directory for the task, useful for monorepos.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nversion: '3'\n\ntasks:\n  up:\n    dir: '{{.USER_WORKING_DIR}}'\n    preconditions:\n      - test -f docker-compose.yml\n    cmds:\n      - docker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Included Taskfile for Flatten Example YAML\nDESCRIPTION: This is the `Included.yml` file used in the `flatten: true` example. Its task `foo` is included and made available directly in the main `Taskfile.yml`'s namespace because of the flatten option.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_14\n\nLANGUAGE: YAML\nCODE:\n```\nversion: '3'\n\ntasks:\n  foo:\n    cmds:\n      - echo \"Foo\"\n```\n\n----------------------------------------\n\nTITLE: YAML Taskfile Template Whitespace (Bad Example)\nDESCRIPTION: This snippet demonstrates an example of incorrect use of whitespace when templating variables. The space in `{{ .MESSAGE }}` will cause an error.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/styleguide.mdx#_snippet_9\n\nLANGUAGE: YAML\nCODE:\n```\n# bad\nversion: '3'\n\ntasks:\n  greet:\n    cmds:\n      - echo '{{ .MESSAGE }}'\n```\n\n----------------------------------------\n\nTITLE: Included Taskfile for Exclude Example YAML\nDESCRIPTION: This `Included.yml` file is used in the exclude example. It contains two tasks, `foo` and `bar`. The `excludes: [foo]` option in the including Taskfile means only `bar` will be available under the `included` namespace.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_18\n\nLANGUAGE: YAML\nCODE:\n```\nversion: '3'\n\ntasks:\n  foo: echo \"Foo\"\n  bar: echo \"Bar\"\n```\n\n----------------------------------------\n\nTITLE: Merging a TaskfileGraph into a Single Taskfile in Go\nDESCRIPTION: This snippet merges a TaskfileGraph into a unified ast.Taskfile using the Merge method. The input is a TaskfileGraph previously obtained using reader.Read. The output is an ast.Taskfile object and an error. This operation is generally used to flatten multiple Taskfiles and includes their namespace and task definitions into one structure. Handle errors as needed. Future versions may deprecate this step.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/reference/package.mdx#_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\ntf, err := tfg.Merge()\n// handle error\n```\n\n----------------------------------------\n\nTITLE: Exporting Experimental Feature Variable in Shell – Shell\nDESCRIPTION: This shell snippet shows how to export the environment variable TASK_X_FEATURE=1, which enables a specific experimental feature in Task. It is meant to be placed in shell dotfiles such as ~/.bashrc or ~/.zshrc, granting persistent access to the experimental feature for the user’s environment. The variable name should be customized to match the desired experiment as per documentation. There are no other dependencies beyond shell access and an installed Task binary.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/experiments/experiments.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexport TASK_X_FEATURE=1\n```\n\n----------------------------------------\n\nTITLE: Installing Task CLI using pkgx - Shell\nDESCRIPTION: Installation of Task CLI via pkgx package manager for macOS and Linux. Can run Task CLI directly if pkgx integration is enabled in shell. Requires pkgx installed.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/installation.mdx#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\npkgx task\n```\n\nLANGUAGE: shell\nCODE:\n```\ntask\n```\n\n----------------------------------------\n\nTITLE: Reading Taskfile from Stdin Shell\nDESCRIPTION: Demonstrates two ways to pipe a dynamically generated or external Taskfile definition directly into Task via standard input. The `-t -` flag tells Task to read the Taskfile content from stdin instead of a file path.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ntask -t - <(cat ./Taskfile.yml)\n```\n\nLANGUAGE: Shell\nCODE:\n```\ncat ./Taskfile.yml | task -t -\n```\n\n----------------------------------------\n\nTITLE: Installing Task via Chocolatey\nDESCRIPTION: Installs the Task command-line tool using the Chocolatey package manager on Windows. Requires Chocolatey installed. This is a community-maintained package.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/installation.mdx#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nchoco install go-task\n```\n\n----------------------------------------\n\nTITLE: Ordering Main Sections in Taskfile.yml - YAML\nDESCRIPTION: Shows the suggested ordering of main sections within a Taskfile.yml including 'version', 'includes', optional configurations, 'vars', 'env', and 'tasks'. This ordering helps maintain uniformity and readability across Taskfiles. There are no dependencies for applying these conventions other than writing the YAML file accordingly.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/styleguide.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion:\nincludes:\n# optional configurations (output, silent, method, run, etc.)\nvars:\nenv: # followed or replaced by dotenv\ntasks:\n```\n\n----------------------------------------\n\nTITLE: Initializing a Local Taskfile Node with NewFileNode in Go\nDESCRIPTION: This snippet demonstrates creating a new FileNode instance using the taskfile.NewFileNode function, which references a local Taskfile. It requires the path to the Taskfile and an optional directory path. The output is a Node object that can be consumed by a Reader for further operations. If the file is not found at the specified path, errors may occur when reading.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/reference/package.mdx#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nnode := taskfile.NewFileNode(\"Taskfile.yml\", \"./path/to/dir\")\n```\n\n----------------------------------------\n\nTITLE: Task Environment Configuration\nDESCRIPTION: This YAML snippet defines a task named 'default' with an environment variable 'KEY' set to 'other'.  The task executes a command that echoes the value of 'KEY'. This shows how task env vars now take precedence.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/experiments/env_precedence.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  default:\n    env:\n      KEY: 'other'\n    cmds:\n      - echo \"$KEY\"\n```\n\n----------------------------------------\n\nTITLE: Using Wildcard Arguments in Go-Task YAML\nDESCRIPTION: Demonstrates how to use wildcards in task names to parse and capture arguments that can be referenced using the .MATCH variable. The example shows multiple patterns for handling different numbers of arguments.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/usage.mdx#_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  start:*:*:\n    vars:\n      SERVICE: \"{{index .MATCH 0}}\"\n      REPLICAS: \"{{index .MATCH 1}}\"\n    cmds:\n      - echo \"Starting {{.SERVICE}} with {{.REPLICAS}} replicas\"\n\n  start:*:\n    vars:\n      SERVICE: \"{{index .MATCH 0}}\"\n    cmds:\n      - echo \"Starting {{.SERVICE}}\"\n```\n\n----------------------------------------\n\nTITLE: Enabling the Gentle Force Experiment via Environment Variable\nDESCRIPTION: Sets the environment variable `TASK_X_GENTLE_FORCE` to `1` to activate the Gentle Force experimental feature within Go-Task. This changes the default behavior of the `--force` flag.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/experiments/gentle_force.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nTASK_X_GENTLE_FORCE=1\n```\n\n----------------------------------------\n\nTITLE: Escape for JavaScript in Go Template\nDESCRIPTION: Provides the JavaScript-escaped equivalent for the textual representation of its arguments. Useful for safely embedding template output within JavaScript code.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/reference/templating.mdx#_snippet_9\n\nLANGUAGE: Go Template\nCODE:\n```\njs\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Task Variables from CLI (Shell)\nDESCRIPTION: Shows the execution of the `greet_user` Go Task task. The first command uses the default variable value ('DefaultUser'), while the second command overrides it by providing `USER_NAME=\"Bob\"` on the command line.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/usage.mdx#_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\n$ task greet_user\ntask: [greet_user] echo \"Hello, DefaultUser!\"\nHello, DefaultUser!\n$ task greet_user USER_NAME=\"Bob\"\ntask: [greet_user] echo \"Hello, Bob!\"\nHello, Bob!\n```\n\n----------------------------------------\n\nTITLE: Flatten Include Naming Conflict (Main Taskfile) YAML\nDESCRIPTION: This `Taskfile.yml` demonstrates a naming conflict when using `flatten: true`. It includes `Included.yml` (shown next) which also defines a task named `greet`, conflicting with the `greet` task in this main file.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_15\n\nLANGUAGE: YAML\nCODE:\n```\nversion: '3'\nincludes:\n  lib:\n    taskfile: ./Included.yml\n    flatten: true\n\ntasks:\n  greet:\n    cmds:\n      - echo \"Greet\"\n      - task: foo\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental Features via .env File – Shell\nDESCRIPTION: This shell snippet demonstrates how to enable a Task experimental feature by adding the environment variable TASK_X_FEATURE=1 to a .env file located in the root directory alongside your Taskfile. Adjust the variable name to match the desired experiment. Task will automatically detect and apply the variable value at runtime. If a .taskrc.yml file is also present, its experiment settings will override those in the .env file.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/experiments/experiments.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nTASK_X_FEATURE=1\n```\n\n----------------------------------------\n\nTITLE: Example shell output demonstrating prefixed output lines with custom prefixes\nDESCRIPTION: Shell output from running the 'default' task showing each line prefixed with the custom prefix labels defined per dependent 'print' task, illustrating how the prefix output mode can help distinguish outputs from concurrent tasks.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/usage.mdx#_snippet_45\n\nLANGUAGE: shell\nCODE:\n```\n$ task default\\n[print-foo] foo\\n[print-bar] bar\\n[print-baz] baz\n```\n\n----------------------------------------\n\nTITLE: Installing Task via Go Modules (Latest)\nDESCRIPTION: Installs the latest release of Task using Go modules. Requires a supported version of Go installed and setup. Installs the binary into your Go bin directory (usually $GOBIN or $GOPATH/bin).\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/installation.mdx#_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ngo install github.com/go-task/task/v3/cmd/task@latest\n```\n\n----------------------------------------\n\nTITLE: Installing Task via Homebrew Tap\nDESCRIPTION: Installs the Task command-line tool using the official go-task Homebrew tap. This ensures you get the version directly maintained by the Task team.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/installation.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbrew install go-task/tap/go-task\n```\n\n----------------------------------------\n\nTITLE: Task Descriptions for Help Command\nDESCRIPTION: Shows how to add descriptions to tasks that will be displayed when running 'task --list' or 'task -l'. Only tasks with descriptions will be listed unless using --list-all.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/usage.mdx#_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  build:\n    desc: Build the go binary.\n    cmds:\n      - go build -v -i main.go\n\n  test:\n    desc: Run all the go tests.\n    cmds:\n      - go test -race ./...\n\n  js:\n    cmds:\n      - esbuild --bundle --minify js/index.js > public/bundle.js\n\n  css:\n    cmds:\n      - esbuild --bundle --minify css/index.css > public/bundle.css\n```\n\n----------------------------------------\n\nTITLE: Adding Taskfile Schema reference in Taskfile header (YAML)\nDESCRIPTION: This snippet demonstrates how to include an inline schema reference comment at the top of a Taskfile. This comment helps editors with YAML language server support automatically apply the specified schema for validation and autocompletion, regardless of the file name or global settings. Requires editor support for inline schema references.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/integrations.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# yaml-language-server: $schema=https://taskfile.dev/schema.json\nversion: '3'\n```\n\n----------------------------------------\n\nTITLE: Installing Task via Snap\nDESCRIPTION: Installs the Task command-line tool using Snapcraft. Requires Snapd installed and classic confinement enabled on the Linux distribution.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/installation.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsudo snap install task --classic\n```\n\n----------------------------------------\n\nTITLE: Installing Task CLI globally using npm - Shell\nDESCRIPTION: Installs the Task CLI globally across platforms via npm. Requires Node.js and npm installed. Installs the @go-task/cli package, making the Task command available system-wide.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/installation.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -g @go-task/cli\n```\n\n----------------------------------------\n\nTITLE: Installing Task CLI on NixOS using nix-env - Shell\nDESCRIPTION: Community-maintained method for installing Task CLI on NixOS with nix-env package manager. Requires configured nix channels including nixpkgs.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/installation.mdx#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnix-env -iA nixpkgs.go-task\n```\n\n----------------------------------------\n\nTITLE: Installing Task via Install Script (Specific Version)\nDESCRIPTION: Downloads and runs the official Task install script, specifying a particular version to install using the version tag as the last argument. Installs to the default './bin' directory.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/installation.mdx#_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\nsh -c \"$(curl --location https://taskfile.dev/install.sh)\" -- -d v3.36.0\n```\n\n----------------------------------------\n\nTITLE: Building Task CLI from source using Go modules - Shell\nDESCRIPTION: Instructs on building and installing Task CLI from source using Go modules. Requires Go installed with a version meeting minimum specified in go.mod file. Supports global installs and installs to custom locations using GOBIN environment variable.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/installation.mdx#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ngo install github.com/go-task/task/v3/cmd/task@latest\n```\n\nLANGUAGE: shell\nCODE:\n```\nenv GOBIN=/bin go install github.com/go-task/task/v3/cmd/task@latest\n```\n\n----------------------------------------\n\nTITLE: YAML Taskfile Section Ordering\nDESCRIPTION: This snippet demonstrates the suggested ordering of the main sections within a Taskfile.yml file. The sections include version, includes, optional configurations, vars, env, and tasks. This ordering improves readability and maintainability of the file.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/styleguide.mdx#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nversion:\nincludes:\n# optional configurations (output, silent, method, run, etc.)\nvars:\nenv: # followed or replaced by dotenv\ntasks:\n```\n\n----------------------------------------\n\nTITLE: Customizing 'group' output mode with begin and end messages in Taskfile YAML\nDESCRIPTION: Demonstrates configuring the 'group' output mode to print custom templated messages at the start and end of a task's output group, which is useful for CI systems like GitHub Actions and Azure Pipelines that support log grouping commands. The configuration uses template variables such as {{.TASK}} to dynamically include the task name. Also includes a sample task with a command and the 'silent' option to suppress command output in Task logs.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/usage.mdx#_snippet_40\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\\n\\noutput:\\n  group:\\n    begin: '::group::{{.TASK}}'\\n    end: '::endgroup::'\\n\\ntasks:\\n  default:\\n    cmds:\\n      - echo 'Hello, World!'\\n    silent: true\n```\n\n----------------------------------------\n\nTITLE: Loading Task Completion in Zsh Startup\nDESCRIPTION: Adds a line to your Zsh configuration file (`~/.zshrc`) to load Task command completion every time a new shell is created. This ensures completions are always up-to-date.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/installation.mdx#_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\neval \"$(task --completion zsh)\"\n```\n\n----------------------------------------\n\nTITLE: Installing Task via WinGet\nDESCRIPTION: Installs the Task command-line tool using the WinGet package manager on Windows. Requires WinGet installed.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/installation.mdx#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nwinget install Task.Task\n```\n\n----------------------------------------\n\nTITLE: Looping: Matrix\nDESCRIPTION: Demonstrates looping using a matrix, which allows the execution of a command for all permutations of multiple lists. This is similar to a CI/CD pipeline matrix.  This approach is suited for operations requiring iteration across multiple dimensions or factors.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_49\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  default:\n    silent: true\n    cmds:\n      - for:\n          matrix:\n            OS: [\"windows\", \"linux\", \"darwin\"]\n            ARCH: [\"amd64\", \"arm64\"]\n        cmd: echo \"{{.ITEM.OS}}/{{.ITEM.ARCH}}\"\n```\n\n----------------------------------------\n\nTITLE: YAML Taskfile Task Name Case (Bad Example)\nDESCRIPTION: This snippet exhibits an example of the incorrect naming convention for tasks in a Taskfile.yml file. The task name `do_something_fancy` uses snake_case, instead of the kebab-case suggested style.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/styleguide.mdx#_snippet_11\n\nLANGUAGE: YAML\nCODE:\n```\n# bad\nversion: '3'\n\ntasks:\n  do_something_fancy:\n    cmds:\n      - echo 'Do something'\n```\n\n----------------------------------------\n\nTITLE: Separate Tasks with Empty Lines in Taskfile.yml - YAML\nDESCRIPTION: Shows the recommended style of placing empty lines between individual tasks within the 'tasks' section to improve visual clarity and distinguish tasks effectively. The example includes a 'bad' version with no spacing and a 'good' version with blank lines separating tasks.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/styleguide.mdx#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# bad\nversion: '3'\n\ntasks:\n  foo:\n    cmds:\n      - echo 'foo'\n  bar:\n    cmds:\n      - echo 'bar'\n  baz:\n    cmds:\n      - echo 'baz'\n\n\n# good\nversion: '3'\n\ntasks:\n  foo:\n    cmds:\n      - echo 'foo'\n\n  bar:\n    cmds:\n      - echo 'bar'\n\n  baz:\n    cmds:\n      - echo 'baz'\n```\n\n----------------------------------------\n\nTITLE: Get Length in Go Template\nDESCRIPTION: Calculates and returns the integer length of its single argument. Works with various data types that have a defined length, such as strings, slices, arrays, maps, and channels.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/reference/templating.mdx#_snippet_10\n\nLANGUAGE: Go Template\nCODE:\n```\nlen\n```\n\n----------------------------------------\n\nTITLE: Installing Task via Arch Linux pacman\nDESCRIPTION: Installs the Task command-line tool using the pacman package manager on Arch Linux and its derivatives. Requires root privileges or appropriate user permissions. This is a community-maintained package.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/installation.mdx#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\npacman -S go-task\n```\n\n----------------------------------------\n\nTITLE: Installing Task CLI on Arch Linux using pacman - Shell\nDESCRIPTION: Community-maintained method to install Task CLI on Arch Linux using the pacman package manager. Requires pacman and network access to Arch repositories.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/installation.mdx#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npacman -S go-task\n```\n\n----------------------------------------\n\nTITLE: YAML Taskfile Variable Naming (Bad Example)\nDESCRIPTION: This snippet illustrates incorrect variable naming convention in a Taskfile.yml file. The variable `binary_name` is not uppercase, deviating from the suggested convention.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/styleguide.mdx#_snippet_7\n\nLANGUAGE: YAML\nCODE:\n```\n# bad\nversion: '3'\n\nvars:\n  binary_name: myapp\n\ntasks:\n  build:\n    cmds:\n      - go build -o {{.binary_name}} .\n```\n\n----------------------------------------\n\nTITLE: Reading Taskfile Graph Using Reader and Node in Go\nDESCRIPTION: Illustrates reading a Taskfile by calling the `Read` method on a `taskfile.Reader`. It requires a `context.Context` and a `taskfile.Node` (representing the Taskfile source) as arguments. The method returns an `ast.TaskfileGraph`, which represents the parsed Taskfile and its included dependencies as a graph, along with a potential error.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/reference/package.mdx#_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nctx := context.Background()\ntfg, err := reader.Read(ctx, node)\n// handle error\n```\n\n----------------------------------------\n\nTITLE: Installing Task via pip\nDESCRIPTION: Installs the Task command-line tool using the pip package manager. Requires Python and pip installed. Provides a cross-platform installation method via a community-maintained package.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/installation.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npip install go-task-bin\n```\n\n----------------------------------------\n\nTITLE: Publishing npm Package - Taskfile\nDESCRIPTION: Runs the `npm:publish` task to push the updated npm package to the npm registry. This step is performed after incrementing the version in the `package.json` file.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/releasing.mdx#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ntask npm:publish\n```\n\n----------------------------------------\n\nTITLE: Defining Warning Prompts for Tasks in Taskfile (go-task, YAML)\nDESCRIPTION: Illustrates the use of prompt field in tasks to require user confirmation before running potentially dangerous commands. Supports single string prompts or arrays for multiple confirmations. Inputs are task invocations; outputs are prompts followed by command execution upon confirmation. If denied, task exits with code 205. No dependencies beyond go-task; terminal input required for approval.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_75\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  example:\n    cmds:\n      - task: not-dangerous\n      - task: dangerous\n      - task: another-not-dangerous\n\n  not-dangerous:\n    cmds:\n      - echo 'not dangerous command'\n\n  another-not-dangerous:\n    cmds:\n      - echo 'another not dangerous command'\n\n  dangerous:\n    prompt: This is a dangerous command... Do you want to continue?\n    cmds:\n      - echo 'dangerous command'\n```\n\n----------------------------------------\n\nTITLE: Controlling Task Execution Frequency with 'run' Policy (Task - YAML)\nDESCRIPTION: Shows examples for controlling task execution via the 'run' keyword. Tasks may be configured to run 'always', 'once', or 'when_changed' based on variable sets. Demonstrates running with different variables and dependency chains. Requires Task v3+. Inputs: variable values; Outputs: command output. Limitation: 'when_changed' requires variable scoping and correct variable passing.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  default:\n    cmds:\n      - task: generate-file\n        vars: { CONTENT: '1' }\n      - task: generate-file\n        vars: { CONTENT: '2' }\n      - task: generate-file\n        vars: { CONTENT: '2' }\n\n  generate-file:\n    run: when_changed\n    deps:\n      - install-deps\n    cmds:\n      - echo {{.CONTENT}}\n\n  install-deps:\n    run: once\n    cmds:\n      - sleep 5 # long operation like installing packages\n\n```\n\n----------------------------------------\n\nTITLE: Installing Task via NixOS nix-env\nDESCRIPTION: Installs the Task command-line tool using the nix-env package manager on NixOS and other systems with Nix installed. This is a community-maintained package.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/installation.mdx#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nnix-env -iA nixpkgs.go-task\n```\n\n----------------------------------------\n\nTITLE: Reproducing Raw Executables - GoReleaser\nDESCRIPTION: Builds raw executables locally using GoReleaser for a specific checked-out Git tag. This command is used to reproduce and verify artifacts independently, typically using the Go version specified in the GitHub Actions workflow.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/releasing.mdx#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngoreleaser build\n```\n\n----------------------------------------\n\nTITLE: Escape for URL Query in Go Template\nDESCRIPTION: Returns the URL query-escaped value of the textual representation of its arguments. The result is suitable for embedding as a value in a URL query string. This function is generally unavailable in `html/template` with few exceptions.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/reference/templating.mdx#_snippet_16\n\nLANGUAGE: Go Template\nCODE:\n```\nurlquery\n```\n\n----------------------------------------\n\nTITLE: Evaluate Boolean AND in Go Template\nDESCRIPTION: Returns the boolean AND of its arguments. It evaluates arguments left to right and returns the first empty argument or the last argument if all are non-empty. Behaves like `if x then y else x` for `and x y`.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/reference/templating.mdx#_snippet_4\n\nLANGUAGE: Go Template\nCODE:\n```\nand\n```\n\n----------------------------------------\n\nTITLE: Generating Winget Manifests - Taskfile\nDESCRIPTION: Executes the `goreleaser:test` task locally to generate manifest files for the winget package manager. The generated files are placed in a specific directory structure (`dist/winget/manifests/t/Task/Task/v{version}`).\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/releasing.mdx#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ntask goreleaser:test\n```\n\n----------------------------------------\n\nTITLE: Using Defer for Cleanup in Tasks (go-task, YAML)\nDESCRIPTION: Illustrates scheduling commands for automatic cleanup using the defer keyword in Taskfile. Deferred commands run after the task completes, even if previous commands fail. Example shows removing a temporary directory after the task finishes; no dependencies beyond go-task are required. Key parameter is defer; expected input is simple task invocation, and the output will reflect command execution and cleanup irrespective of intermediate failures.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_66\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  default:\n    cmds:\n      - mkdir -p tmpdir/\n      - defer: rm -rf tmpdir/\n      - echo 'Do work on tmpdir/'\n```\n\n----------------------------------------\n\nTITLE: Specifying Remote Taskfile Entrypoint via Git over HTTP (Shell)\nDESCRIPTION: This shell command shows how to execute Task using a Taskfile located within a Git repository accessed over HTTP or HTTPS. The `--taskfile` flag is used with a Git URL, which can optionally include a `//<path>` to the specific file and a `?ref=<ref>` to specify a branch or tag. Task clones a temporary copy of the repo to access the file and runs its default task.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/experiments/remote_taskfiles.mdx#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ task --taskfile https://github.com/go-task/task.git//website/static/Taskfile.yml?ref=main\ntask: [hello] echo \"Hello Task!\"\nHello Task!\n```\n\n----------------------------------------\n\nTITLE: Initializing Taskfile Reader with Debugging in Go\nDESCRIPTION: Shows how to initialize a `taskfile.Reader` using `taskfile.NewReader`. It includes an optional configuration (`taskfile.WithDebugFunc`) to provide a callback function for logging debug messages during the reading process, using `slog` in this example.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/reference/package.mdx#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nreader := taskfile.NewReader(\n  taskfile.WithDebugFunc(func(s string) {\n    slog.Debug(s)\n  }),\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Task CLI using Windows package managers - Shell\nDESCRIPTION: Provides instructions for installing Task CLI on Windows with multiple package managers: Winget, Chocolatey, and Scoop. Each requires the respective package manager installed on Windows. These are community-maintained packages enabling system-wide installation.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/installation.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nwinget install Task.Task\n```\n\nLANGUAGE: shell\nCODE:\n```\nchoco install go-task\n```\n\nLANGUAGE: shell\nCODE:\n```\nscoop install task\n```\n\n----------------------------------------\n\nTITLE: Evaluate Boolean Negation in Go Template\nDESCRIPTION: Returns the boolean negation of its single argument. Evaluates the truthiness of the argument and returns the opposite boolean value.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/reference/templating.mdx#_snippet_11\n\nLANGUAGE: Go Template\nCODE:\n```\nnot\n```\n\n----------------------------------------\n\nTITLE: Print Arguments with Newline in Go Template\nDESCRIPTION: An alias for the Go standard library function `fmt.Sprintln`. It formats its arguments using the default formats, adds spaces between them, and appends a newline, returning the resulting string.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/reference/templating.mdx#_snippet_15\n\nLANGUAGE: Go Template\nCODE:\n```\nprintln\n```\n\n----------------------------------------\n\nTITLE: Copying Task Completion Script for Zsh\nDESCRIPTION: Generates the Task command completion script for Zsh and redirects its output to a system-wide site-functions directory. Requires root privileges. This method needs manual updates when Task is upgraded.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/installation.mdx#_snippet_26\n\nLANGUAGE: shell\nCODE:\n```\ntask --completion zsh  > /usr/local/share/zsh/site-functions/_task\n```\n\n----------------------------------------\n\nTITLE: YAML Taskfile Multi-line Command (Bad Example)\nDESCRIPTION: This snippet presents an example of a multi-line command inside a Taskfile.yml. It is not recommended due to maintainability issues.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/styleguide.mdx#_snippet_14\n\nLANGUAGE: YAML\nCODE:\n```\n# bad\nversion: '3'\n\ntasks:\n  build:\n    cmds:\n      - |\n        for i in $(seq 1 10); do\n          echo $i\n          echo \"some other complex logic\"\n        done'\n```\n\n----------------------------------------\n\nTITLE: Using Aliases in Taskfile with Version 3 - YAML\nDESCRIPTION: Shows a Taskfile that specifies version '3' but uses the 'aliases' feature introduced in Task CLI v3.17.0. This may cause compatibility issues when run with Task versions earlier than v3.17.0 because the version constraint is too general. The snippet demonstrates declaration of a task named 'hello' with aliases 'hi' and 'hey' and a simple echo command.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/taskfile_versions.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  hello:\n    aliases:\n      - hi\n      - hey\n    cmds:\n      - echo \"Hello, world!\"\n```\n\n----------------------------------------\n\nTITLE: Example External Bash Script for Task Execution (Shell)\nDESCRIPTION: This is an example Bash script (`foo-printer.bash`) intended to be called by a Task, as shown in the accompanying YAML snippet. It demonstrates setting a shell variable (`a=foo`) and printing its value (`echo $a`), encapsulating the logic externally from the Taskfile.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/faq.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/bash\na=foo\necho $a\n```\n\n----------------------------------------\n\nTITLE: Illustrating Command Scope Limitation in Task (YAML)\nDESCRIPTION: This YAML snippet defines a Task (`foo`) with two separate commands under the `cmds` key. The first command attempts to set a shell variable `a`, but the second command (`echo $a`) fails to access it because Task executes each command in an independent, new shell process. This results in empty output for the echo command.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/faq.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  foo:\n    cmds:\n      - a=foo\n      - echo $a\n      # outputs \"\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Task to Output Shell Environment Variables (YAML)\nDESCRIPTION: Demonstrates a Task definition in YAML (`my-shell-env`) that uses `echo` commands to generate shell `export` statements. This output can be evaluated (e.g., `eval $(task my-shell-env)`) in the user's shell to set environment variables like `$FOO` and `$BAR`, working around the limitation that Task cannot directly modify the parent shell's environment.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/faq.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmy-shell-env:\n  cmds:\n    - echo \"export FOO=foo\"\n    - echo \"export BAR=bar\"\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Go Task YAML Configuration\nDESCRIPTION: This YAML snippet demonstrates how to define environment variables within a Go Task task and shows how commands access these variables. It highlights the default behavior before the experiment, where OS environment variables override those defined in the task's env section. The snippet includes a task named 'default' with an environment variable 'KEY' set to 'other' and a command that echoes the value of 'KEY'.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/experiments/env_precedence.mdx#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nversion: '3'\n\ntasks:\n  default:\n    env:\n      KEY: 'other'\n    cmds:\n      - echo \"$KEY\"\n```\n\n----------------------------------------\n\nTITLE: Ignoring Errors on Command Execution in Taskfile (go-task, YAML)\nDESCRIPTION: Illustrates how to continue task execution when a command fails using ignore_error at the command or task level. First shows normal error halting, then shows ignore_error suppresses stops on failure. Inputs are tasks with both successful and failing commands; output is subsequent command execution despite nonzero exit status. No dependencies beyond go-task.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_81\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  echo:\n    cmds:\n      - exit 1\n      - echo \"Hello World\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  echo:\n    cmds:\n      - cmd: exit 1\n        ignore_error: true\n      - echo \"Hello World\"\n```\n\n----------------------------------------\n\nTITLE: Setting up Task CLI shell completions - Shell and PowerShell\nDESCRIPTION: Provides shell commands to enable autocompletion of the Task CLI commands in various shells (bash, zsh, fish, and PowerShell). Two methods offered: evaluating completion scripts during shell startup for automatic updates, or copying completion scripts to system directories for manual updates and modifications.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/installation.mdx#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\neval \"$(task --completion bash)\"\n```\n\nLANGUAGE: shell\nCODE:\n```\neval \"$(task --completion zsh)\"\n```\n\nLANGUAGE: shell\nCODE:\n```\ntask --completion fish | source\n```\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-Expression  (&task --completion powershell | Out-String)\n```\n\nLANGUAGE: shell\nCODE:\n```\ntask --completion bash > /etc/bash_completion.d/task\n```\n\nLANGUAGE: shell\nCODE:\n```\ntask --completion zsh  > /usr/local/share/zsh/site-functions/_task\n```\n\nLANGUAGE: shell\nCODE:\n```\ntask --completion fish > ~/.config/fish/completions/task.fish\n```\n\n----------------------------------------\n\nTITLE: Looping: Sources and joinPath\nDESCRIPTION: This snippet demonstrates how to use `joinPath` function to build absolute paths when looping over sources.  It is helpful when needing the absolute path to the file in the loop.  The `MY_DIR` variable provides the base directory.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_53\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  default:\n    vars:\n      MY_DIR: /path/to/dir\n    dir: '{{.MY_DIR}}'\n    sources:\n      - foo.txt\n      - bar.txt\n    cmds:\n      - for: sources\n        cmd: cat {{joinPath .MY_DIR .ITEM}}\n```\n\n----------------------------------------\n\nTITLE: Piping and Function Usage in YAML\nDESCRIPTION: This snippet demonstrates how to use functions and pipes within templates.  It uses `splitList`, `uniq` and `join` functions in the `cmds` section of a task to manipulate a string. The `splitList` function splits a string into a list, `uniq` removes duplicate elements, and `join` combines the list elements back into a string.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/reference/templating.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  uniq:\n    vars:\n      NUMBERS: '0,1,1,1,2,2,3'\n    cmds:\n      - 'echo {{splitList \",\" .NUMBERS | uniq | join \", \" }}!'\n```\n\n----------------------------------------\n\nTITLE: Calling Other Tasks from a Parent Task\nDESCRIPTION: This snippet shows how to define a task that calls other tasks serially, ensuring sequential execution. Variables and silent mode can be customized for each call.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  main-task:\n    cmds:\n      - task: task-to-be-called\n      - task: another-task\n      - echo \"Both done\"\n\n  task-to-be-called:\n    cmds:\n      - echo \"Task to be called\"\n\n  another-task:\n    cmds:\n      - echo \"Another task\"\n```\n\n----------------------------------------\n\nTITLE: Looping: Generates\nDESCRIPTION: This snippet demonstrates how to loop over files generated by the task, using the `generates` property, providing a similar mechanism as `sources`. Iterates over the generated files, with file paths relative to the task directory.  The `.ITEM` variable holds each filename.  Users can use `joinPath` to make them absolute.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_52\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  default:\n    generates:\n      - foo.txt\n      - bar.txt\n    cmds:\n      - for: generates\n        cmd: cat {{ .ITEM }}\n```\n\n----------------------------------------\n\nTITLE: Using Template Functions to Access OS Environment Variables in Go Task YAML\nDESCRIPTION: This YAML snippet shows how to explicitly access the OS environment variable using the 'env' template function despite the experimental precedence change in Go Task. The task includes two command lines: one that echoes the task-defined environment variable 'KEY' and another that echoes the OS environment variable 'KEY' using the template function. This enables differentiating between task and OS environment variable values.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/experiments/env_precedence.mdx#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nversion: '3'\n\ntasks:\n  default:\n    env:\n      KEY: 'other'\n    cmds:\n      - echo \"$KEY\"\n      - echo {{env \"KEY\"}}\n```\n\n----------------------------------------\n\nTITLE: Using Exit Code Variable in Deferred Commands (go-task, YAML)\nDESCRIPTION: Demonstrates accessing the .EXIT_CODE variable inside a deferred command to conditionally print success or failure messages, depending on the exit code of a prior command. No dependencies beyond go-task; input is a simple invocation that causes a command to fail (exit 1), and the output is either a success or failure message.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_68\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  default:\n    cmds:\n      - defer: echo '{{if .EXIT_CODE}}Failed with {{.EXIT_CODE}}!{{else}}Success!{{end}}'\n      - exit 1\n```\n\n----------------------------------------\n\nTITLE: Ranging Over Array Variables - Task YAML\nDESCRIPTION: Shows how to iterate over an array variable (`ARRAY`) directly within a Task template using the `range` function. The variable is defined as a YAML list/array. The template iterates through each element (`.`) and echoes it, demonstrating direct list processing without string manipulation or `for`/`split` constructs.\nSOURCE: https://github.com/go-task/task/blob/main/website/blog/2024-05-09-any-variables.mdx#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 3\n\ntasks:\n  foo:\n    vars:\n      ARRAY: [1, 2, 3]\n    cmds:\n      - 'echo {{range .ARRAY}}{{.}}{{end}}'\n\n```\n\n----------------------------------------\n\nTITLE: Looping: Generates and joinPath\nDESCRIPTION: This snippet showcases the same `joinPath` function as the sources version, but with the `generates` property. This demonstrates how the absolute paths can be constructed when looping over generated files by the task.  The `MY_DIR` variable provides the base directory.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_54\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  default:\n    vars:\n      MY_DIR: /path/to/dir\n    dir: '{{.MY_DIR}}'\n    generates:\n      - foo.txt\n      - bar.txt\n    cmds:\n      - for: generates\n        cmd: cat {{joinPath .MY_DIR .ITEM}}\n```\n\n----------------------------------------\n\nTITLE: Including Remote Taskfile via Git over SSH in YAML\nDESCRIPTION: This YAML snippet demonstrates including a remote Taskfile from a Git repository accessed over SSH within a local Taskfile's `includes` section. The Git SSH URL format, optionally with path and reference, is used. This requires SSH agent setup. Tasks from the remote file are available under the specified namespace.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/experiments/remote_taskfiles.mdx#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\nversion: '3'\n\nincludes:\n  my-remote-namespace: git@github.com/go-task/task.git//website/static/Taskfile.yml?ref=main\n```\n\n----------------------------------------\n\nTITLE: Performing Arithmetic on Numeric Variables - Task YAML\nDESCRIPTION: Illustrates how to perform arithmetic operations on integer and float variables directly within Task templates using Sprig functions like `add`. Variables `INT` and `FLOAT` are defined with numeric types, and their values are used in calculations, enabling standard mathematical operations directly within the task command.\nSOURCE: https://github.com/go-task/task/blob/main/website/blog/2024-05-09-any-variables.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 3\n\ntasks:\n  foo:\n    vars:\n      INT: 10\n      FLOAT: 3.14159\n    cmds:\n      - 'echo {{add .INT .FLOAT}}'\n\n```\n\n----------------------------------------\n\nTITLE: Declaring Schema Version in Taskfile - YAML\nDESCRIPTION: This snippet demonstrates how to specify the schema version at the top of a Taskfile using YAML syntax. The 'version' field defines the minimum Task CLI version required to execute the Taskfile. No other fields are necessary in this minimal example. The input is the YAML file; the output is schema validation by the Task CLI at runtime. Requires the Task CLI as the dependency.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/taskfile_versions.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.2.1'\n```\n\n----------------------------------------\n\nTITLE: Initializing Taskfile - Shell\nDESCRIPTION: This snippet initializes a Taskfile using the `task --init` command. It creates a `Taskfile.yml` file in the current directory.  The command can accept an optional directory path or a custom file name as an argument to specify where the Taskfile should be created. The command doesn't require any dependencies. It generates a basic Taskfile that can be modified.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/getting_started.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ntask --init\n```\n\n----------------------------------------\n\nTITLE: Initializing a Taskfile in a Subdirectory - Shell\nDESCRIPTION: This example shows initializing a Taskfile in a specified subdirectory using the Task CLI. The --init flag is combined with a relative or absolute directory path. The Taskfile.yml will be placed in the target directory, assuming you have Task installed. Useful when organizing tasks for multiple projects or modules.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/getting_started.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ntask --init ./subdirectory\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Output Mode: 'group' with Begin and End Templates\nDESCRIPTION: This snippet shows how to set the output mode to 'group' in the Taskfile, including custom begin and end templates using GitHub Actions and Azure Pipelines logging commands. The configuration helps group command outputs for better log organization in CI environments.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_82\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\noutput:\n  group:\n    begin: '::group::{{.TASK}}'\n    end: '::endgroup::'\n\ntasks:\n  default:\n    cmds:\n      - echo 'Hello, World!'\n    silent: true\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables from Dotenv Files Globally in Taskfile YAML\nDESCRIPTION: Shows how to instruct Task to load environment variables from `.env` files using the `dotenv` keyword at the top level. Task will load variables from the specified paths, making them available to all tasks. Paths can include template variables like `{{.ENV}}` or `{{.HOME}}`.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\nversion: '3'\n\nenv:\n  ENV: testing\n\ndotenv: ['.env', '{{.ENV}}/.env', '{{.HOME}}/.env']\n\ntasks:\n  greet:\n    cmds:\n      - echo \"Using $KEYNAME and endpoint $ENDPOINT\"\n```\n\n----------------------------------------\n\nTITLE: Including Remote Taskfile via HTTP in YAML\nDESCRIPTION: This YAML snippet illustrates how to include a remote Taskfile hosted on an HTTP or HTTPS URL within a local Taskfile's `includes` section. A namespace ('my-remote-namespace') is assigned to the remote Taskfile's URL. Tasks defined in the included remote Taskfile become available for execution from the main Taskfile, prefixed by the assigned namespace.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/experiments/remote_taskfiles.mdx#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nversion: '3'\n\nincludes:\n  my-remote-namespace: https://raw.githubusercontent.com/go-task/task/main/website/static/Taskfile.yml\n```\n\n----------------------------------------\n\nTITLE: Calling a Task with Custom Taskfile Name - Shell\nDESCRIPTION: This command executes a task by specifying the name of the Taskfile with the `--taskfile` flag. The file is named `Custom.yml`. It relies on the existence of a Taskfile with the specified name. It is useful when you need to run a task from a file that isn't named `Taskfile.yml`.  The output will depend on the executed tasks inside `Custom.yml`.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/getting_started.mdx#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ntask --taskfile Custom.yml\n```\n\n----------------------------------------\n\nTITLE: Invoking Tasks with Wildcard Arguments from Shell (go-task, Shell)\nDESCRIPTION: Shows how to run tasks defined with wildcards in Taskfile using shell commands. Arguments after the colon are captured according to Taskfile rules. Input is the task CLI command with arguments; output is the echoed message from the task execution. No dependencies beyond go-task; quoting allows use of whitespace in arguments.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_65\n\nLANGUAGE: shell\nCODE:\n```\n$ task start:foo\nStarting foo\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ task \"start:foo bar\"\nStarting foo bar\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ task start:foo:3\nStarting foo with 3 replicas\n```\n\n----------------------------------------\n\nTITLE: Declaring Task-Local Variables (Task - YAML)\nDESCRIPTION: Shows how to declare variables within the scope of a specific task, allowing reuse and encapsulation of values. Inputs: variable values. Outputs: echoed value to console. Limitation: Variables declared here override global or inherited ones but are only visible in the defining task.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_39\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  print-var:\n    cmds:\n      - echo \"{{.VAR}}\"\n    vars:\n      VAR: Hello!\n\n```\n\n----------------------------------------\n\nTITLE: Executing Build Task - Shell\nDESCRIPTION: This command runs the `build` task defined in a Taskfile using the `task` command. It assumes that a Taskfile containing the `build` task exists and is accessible.  Its primary function is to trigger the execution of the `build` task, which, in this case, compiles the Go program. The output of this command will depend on the success or failure of the build process in the Go code.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/getting_started.mdx#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ntask build\n```\n\n----------------------------------------\n\nTITLE: Initializing Taskfile in a Subdirectory - Shell\nDESCRIPTION: This command initializes a Taskfile within a specified subdirectory. It uses the `task --init` command followed by a relative path to the target directory. This is useful for organizing Taskfiles within a project structure. No specific dependencies are required; it utilizes the Task CLI. The output is a `Taskfile.yml` generated inside the given subdirectory.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/getting_started.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ntask --init ./subdirectory\n```\n\n----------------------------------------\n\nTITLE: Specifying Remote Taskfile Entrypoint via HTTP (Shell)\nDESCRIPTION: This shell command demonstrates how to run Task using a remote Taskfile hosted on an HTTP or HTTPS URL as the main entrypoint for execution. The `--taskfile` or `-t` flag is used, followed by the absolute URL of the remote Taskfile. Task downloads and executes the default task from the specified remote file.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/experiments/remote_taskfiles.mdx#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ task --taskfile https://raw.githubusercontent.com/go-task/task/main/website/static/Taskfile.yml\ntask: [hello] echo \"Hello Task!\"\nHello Task!\n```\n\n----------------------------------------\n\nTITLE: Executing an External Script from a Task (YAML)\nDESCRIPTION: This YAML snippet shows a Task (`foo`) configured to execute an external Bash script (`./foo-printer.bash`) instead of using inline commands. This approach is recommended for managing more complex multi-line commands or logic, keeping the Taskfile cleaner and promoting script reusability.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/faq.mdx#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  foo:\n    cmds:\n      - ./foo-printer.bash\n```\n\n----------------------------------------\n\nTITLE: Avoid Whitespace in Variable Templating in Taskfile.yml - YAML\nDESCRIPTION: Demonstrates the preferred templating style in Taskfiles by avoiding spaces inside variable template delimiters '{{ }}'. This helps maintain simplicity and prevents common parsing errors associated with spacing inside templates in YAML files used by Task.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/styleguide.mdx#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# bad\nversion: '3'\n\ntasks:\n  greet:\n    cmds:\n      - echo '{{ .MESSAGE }}'\n\n\n# good\nversion: '3'\n\ntasks:\n  greet:\n    cmds:\n      - echo '{{.MESSAGE}}'\n```\n\n----------------------------------------\n\nTITLE: Function and Piping Templating in YAML\nDESCRIPTION: This snippet demonstrates the use of functions and piping within a template. It uses `splitList`, `uniq`, and `join` functions to process a comma-separated string of numbers. The numbers are split, unique values are extracted, and then joined back into a comma-separated string.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/reference/templating.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  uniq:\n    vars:\n      NUMBERS: '0,1,1,1,2,2,3'\n    cmds:\n      - 'echo {{splitList \",\" .NUMBERS | uniq | join \", \" }}!'\n```\n\n----------------------------------------\n\nTITLE: Controlling Task Execution Frequency with 'run' in Go Task (YAML)\nDESCRIPTION: Configures Go Task tasks using the `run` directive. `generate-file` uses `run: when_changed` to execute only once per unique set of variables, while `install-deps` uses `run: once` to execute only the first time it's called, regardless of variables or multiple references.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/usage.mdx#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  default:\n    cmds:\n      - task: generate-file\n        vars: { CONTENT: '1' }\n      - task: generate-file\n        vars: { CONTENT: '2' }\n      - task: generate-file\n        vars: { CONTENT: '2' }\n\n  generate-file:\n    run: when_changed\n    deps:\n      - install-deps\n    cmds:\n      - echo {{.CONTENT}}\n\n  install-deps:\n    run: once\n    cmds:\n      - sleep 5 # long operation like installing packages\n```\n\n----------------------------------------\n\nTITLE: Call Function Value in Go Template\nDESCRIPTION: Invokes the first argument, which must be a function value, with the remaining arguments as parameters. The function must return either one or two values, the second being an error. Execution stops if arguments don't match or a non-nil error is returned.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/reference/templating.mdx#_snippet_5\n\nLANGUAGE: Go Template\nCODE:\n```\ncall\n```\n\n----------------------------------------\n\nTITLE: Declaring Multiple Environment Variables in Shell\nDESCRIPTION: This snippet sets three environment variables: FOO, BAR, and BAZ in a Unix-like shell. FOO is set to '1', BAR to 'true', and BAZ to '1.1'. No explicit export is included so these variables are available to subsequent commands on the same line or shell context. No external dependencies are required. All values are assigned as strings; intended use is to predefine configuration or runtime parameters for further shell usage.\nSOURCE: https://github.com/go-task/task/blob/main/testdata/env/multiple_type.txt#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nFOO='1' BAR='true' BAZ='1.1'\n```\n\n----------------------------------------\n\nTITLE: Assigning Environment Variable Using Shell Script\nDESCRIPTION: This snippet assigns the value \"from_os\" to the environment variable QUX using shell scripting syntax. No external dependencies are required, but the environment must support POSIX-compliant shells (such as Bash or Sh). Expected input is a shell environment; output is the variable being available in the current shell session. There are no parameters and it does not export QUX to child processes; for exporting, use 'export'.\nSOURCE: https://github.com/go-task/task/blob/main/testdata/env/not-overridden.txt#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nQUX='from_os'\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON/YAML\nDESCRIPTION: This snippet illustrates how to parse a JSON string into a map variable using the `fromJson` templating function and the `ref` keyword.  This allows the contents of a JSON string to be processed by tasks as a structured data type, like a map.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_47\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  task-with-map:\n    vars:\n      JSON: '{\"a\": 1, \"b\": 2, \"c\": 3}'\n      FOO:\n        ref: \"fromJson .JSON\"\n    cmds:\n      - echo {{.FOO}}\n```\n\n----------------------------------------\n\nTITLE: Specifying Precise Taskfile Version to Support Aliases - YAML\nDESCRIPTION: Adjusts the Taskfile 'version' to '3.17' to correctly specify the minimum Task CLI version that supports aliases, preventing users with older versions from running incompatible Taskfiles. This practice reduces confusing errors and encourages users to upgrade if necessary.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/taskfile_versions.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.17'\n```\n\n----------------------------------------\n\nTITLE: Running the Default Task - Shell\nDESCRIPTION: This shell command executes the default task defined in the Taskfile. Provided Task is installed and the relevant Taskfile exists in the working directory, this command will run whatever logic is assigned to the 'default' key in the YAML configuration. No parameters are needed beyond the default Taskfile setup.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/getting_started.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ntask default\n\n```\n\n----------------------------------------\n\nTITLE: Initializing a Taskfile with a Custom Name - Shell\nDESCRIPTION: This snippet details creating a Taskfile with a custom filename using the --init flag followed by the desired file name. Task will generate a new file (e.g., Custom.yml) in the current directory. Only Task installation is required, with no additional parameters.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/getting_started.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ntask --init Custom.yml\n\n```\n\n----------------------------------------\n\nTITLE: Setting Task-Level Environment Variable in Taskfile YAML\nDESCRIPTION: Shows how to define environment variables specifically for a single task using the `env` keyword within the task definition. These variables are only available to the commands run within that task and override global variables if they have the same name.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nversion: '3'\n\ntasks:\n  greet:\n    cmds:\n      - echo $GREETING\n    env:\n      GREETING: Hey, there!\n```\n\n----------------------------------------\n\nTITLE: Slice Data Structures in Go Template\nDESCRIPTION: Returns a slice of the first argument (string, slice, or array) based on the remaining arguments specifying the slice boundaries. Supports standard Go slicing syntax like `slice x 1 2` for `x[1:2]`, `slice x` for `x[:]`, `slice x 1` for `x[1:]`, and `slice x 1 2 3` for `x[1:2:3]` (with capacity).\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/reference/templating.mdx#_snippet_8\n\nLANGUAGE: Go Template\nCODE:\n```\nslice\n```\n\n----------------------------------------\n\nTITLE: Running Taskfile from Subdirectory - Shell\nDESCRIPTION: Invokes tasks in a Taskfile located within a specified subdirectory using the --dir flag. This enables executing tasks for Taskfiles outside the current working directory. Task must be installed, and the specified subdirectory should contain a valid Taskfile.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/getting_started.mdx#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ntask --dir ./subdirectory\n\n```\n\n----------------------------------------\n\nTITLE: Running Taskfile with a Custom Name - Shell\nDESCRIPTION: This command instructs Task to use a Taskfile with a non-standard name via the --taskfile flag. Useful when managing multiple Taskfiles or when project conventions require custom names. Requires Task installation and a properly named Taskfile in the designated directory.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/getting_started.mdx#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ntask --taskfile Custom.yml\n\n```\n\n----------------------------------------\n\nTITLE: Task Summary Display Output (go-task, Shell)\nDESCRIPTION: Presents the shell output from running task --summary task-name, displaying the summary, dependencies, and commands for a given task. Inputs are CLI invocations; outputs include formatted summary details to inform the user of task effects.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_72\n\nLANGUAGE: shell\nCODE:\n```\ntask: release\n\nRelease your project to github\n\nIt will build your project before starting the release.\nPlease make sure that you have set GITHUB_TOKEN before starting.\n\ndependencies:\n - build\n\ncommands:\n - your-release-tool\n```\n\n----------------------------------------\n\nTITLE: Including Taskfile as Internal in Taskfile YAML\nDESCRIPTION: Shows how to mark an include as `internal: true`. This makes all tasks within the included Taskfile internal, meaning they cannot be called directly from the command line but can still be depended upon or called by other tasks.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_12\n\nLANGUAGE: YAML\nCODE:\n```\nversion: '3'\n\nincludes:\n  tests:\n    taskfile: ./taskfiles/Utils.yml\n    internal: true\n```\n\n----------------------------------------\n\nTITLE: Defining `other-task-with-summary` Task in Go Task (YAML)\nDESCRIPTION: Defines the `other-task-with-summary` task for Go Task. It includes a brief summary and specifies a single shell command (`echo`) to be executed when the task runs.\nSOURCE: https://github.com/go-task/task/blob/main/testdata/summary/task-with-summary.txt#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\ntask: other-task-with-summary\n\nsummary of other-task-with-summary\n\ncommands:\n - echo 'other-task-with-summary was executed'\n```\n\n----------------------------------------\n\nTITLE: Including Taskfile as Optional in Taskfile YAML\nDESCRIPTION: Demonstrates using the `optional: true` setting for an include. If the specified `taskfile` does not exist, Task will not throw an error but will continue execution, useful for including non-essential or user-specific Taskfiles.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_11\n\nLANGUAGE: YAML\nCODE:\n```\nversion: '3'\n\nincludes:\n  tests:\n    taskfile: ./tests/Taskfile.yml\n    optional: true\n\ntasks:\n  greet:\n    cmds:\n      - echo \"This command can still be successfully executed if\n        ./tests/Taskfile.yml does not exist\"\n```\n\n----------------------------------------\n\nTITLE: Using EXIT_CODE with Defer for Error Handling\nDESCRIPTION: Shows how to access the .EXIT_CODE special variable in deferred commands to determine if a task completed successfully or failed, allowing for conditional cleanup operations.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/usage.mdx#_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  default:\n    cmds:\n      - defer: echo '{{if .EXIT_CODE}}Failed with {{.EXIT_CODE}}!{{else}}Success!{{end}}'\n      - exit 1\n```\n\n----------------------------------------\n\nTITLE: Executing External Scripts for Complex Logic in Task YAML\nDESCRIPTION: This Taskfile shows an alternative approach for handling complex or multi-line commands. Instead of embedding the logic directly, it executes an external shell script (`./foo-printer.bash`), promoting better organization and reusability.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/faq.mdx#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  foo:\n    cmds:\n      - ./foo-printer.bash\n```\n\n----------------------------------------\n\nTITLE: Specifying 'set' and 'shopt' Options in Task YAML\nDESCRIPTION: This snippet shows how to set shell options globally or per task, such as 'pipefail' and 'globstar', to control shell behavior during command execution. It illustrates dependency on these options for commands like globs.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_87\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\nset: [pipefail]\nshopt: [globstar]\n\ntasks:\n  default: echo **/*.go\n```\n\n----------------------------------------\n\nTITLE: YAML Taskfile Section Separation (Bad Example)\nDESCRIPTION: This snippet shows an example of how *not* to separate the main sections of a Taskfile.yml file. The sections are not separated by blank lines, which hinders readability and makes the file harder to maintain.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/styleguide.mdx#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\n# bad\nversion: '3'\nincludes:\n  docker: ./docker/Taskfile.yml\noutput: prefixed\nvars:\n  FOO: bar\nenv:\n  BAR: baz\ntasks:\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Looping: Static List\nDESCRIPTION: This snippet shows the simplest form of looping, using a static list of strings defined directly in the `for` property. This is suitable for tasks that need to execute a command for each element in a pre-defined list.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_48\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  default:\n    cmds:\n      - for: ['foo.txt', 'bar.txt']\n        cmd: cat {{ .ITEM }}\n```\n\n----------------------------------------\n\nTITLE: Passing Variables and Silent Mode to Called Tasks\nDESCRIPTION: This snippet demonstrates how to invoke tasks with specific variables and silent mode enabled. Variables are passed as key-value pairs, and silent mode suppresses command output.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  greet:\n    vars:\n      RECIPIENT: '{{default \"World\" .RECIPIENT}}'\n    cmds:\n      - echo \"Hello, {{.RECIPIENT}}!\"\n\n  greet-pessimistically:\n    cmds:\n      - task: greet\n        vars: { RECIPIENT: 'Cruel World' }\n        silent: true\n```\n\n----------------------------------------\n\nTITLE: Running Task with local changes and test Taskfile\nDESCRIPTION: This snippet demonstrates how to run a development build of Task against a test Taskfile. It allows testing changes against specific Taskfile configurations. The `--dir` flag specifies the directory containing the test Taskfile, and `<task_name>` specifies the task to execute.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/contributing.mdx#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ngo run ./cmd/task --dir ./testdata/<my_test_dir> <task_name>\n```\n\n----------------------------------------\n\nTITLE: Task Aliases for Alternative Names\nDESCRIPTION: Shows how to create aliases for tasks to provide shorter or alternative names that can be used when calling the task from the command line or from other tasks.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/usage.mdx#_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  generate:\n    aliases: [gen]\n    cmds:\n      - task: gen-mocks\n\n  generate-mocks:\n    aliases: [gen-mocks]\n    cmds:\n      - echo \"generating...\"\n```\n\n----------------------------------------\n\nTITLE: Calling the Build Task - Shell\nDESCRIPTION: This shell example runs the 'build' task from the Taskfile, triggering the Go build step defined previously. Requires Task installed and a Taskfile containing a 'build' task with correct Go build commands. Outputs a compiled Go binary if successful.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/getting_started.mdx#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ntask build\n\n```\n\n----------------------------------------\n\nTITLE: Evaluate Boolean OR in Go Template\nDESCRIPTION: Returns the boolean OR of its arguments. It evaluates arguments left to right and returns the first non-empty argument or the last argument if all are empty. Behaves like `if x then x else y` for `or x y`.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/reference/templating.mdx#_snippet_12\n\nLANGUAGE: Go Template\nCODE:\n```\nor\n```\n\n----------------------------------------\n\nTITLE: YAML Taskfile Section Separation (Good Example)\nDESCRIPTION: This snippet shows the correct way to separate the main sections in a Taskfile.yml file using blank lines. This improves the readability and organization of the file.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/styleguide.mdx#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\n# good\nversion: '3'\n\nincludes:\n  docker: ./docker/Taskfile.yml\n\noutput: prefixed\n\nvars:\n  FOO: bar\n\nenv:\n  BAR: baz\n\ntasks:\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Installing Task CLI globally using pip - Shell\nDESCRIPTION: Cross-platform installation method for Task CLI using pip, the Python package installer. Installs the go-task-bin package globally. Requires Python and pip installed. This method is community maintained and may not be up-to-date.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/installation.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npip install go-task-bin\n```\n\n----------------------------------------\n\nTITLE: Defining Task Dependencies for Parallel Execution\nDESCRIPTION: This snippet demonstrates how to establish task dependencies that run in parallel, improving build performance. Dependencies are specified with 'deps' and executed concurrently.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  build:\n    deps: [assets]\n    cmds:\n      - go build -v -i main.go\n\n  assets:\n    cmds:\n      - esbuild --bundle --minify css/index.css > public/bundle.css\n```\n\n----------------------------------------\n\nTITLE: Included Taskfile for Flatten Naming Conflict YAML\nDESCRIPTION: This `Included.yml` file is used in the naming conflict example. It defines a task `greet` that clashes with the `greet` task in the including `Taskfile.yml` when the `flatten: true` option is used.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_16\n\nLANGUAGE: YAML\nCODE:\n```\nversion: '3'\n\ntasks:\n  greet:\n    cmds:\n      - echo \"Foo\"\n```\n\n----------------------------------------\n\nTITLE: Configuring a watch task with interval and source globs in Taskfile YAML\nDESCRIPTION: Demonstrates how to configure a task to watch file changes and automatically rerun upon modification using the 'watch: true' flag, along with specifying source files to watch using glob patterns under 'sources'. The global watch interval can be set with 'interval'. This enables live development workflows where tests or builds automatically rerun on source changes.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/usage.mdx#_snippet_49\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\\n\\ninterval: 500ms\\n\\ntasks:\\n  build:\\n    desc: Builds the Go application\\n    watch: true\\n    sources:\\n      - '**/*.go'\\n    cmds:\\n      - go build # ...\n```\n\n----------------------------------------\n\nTITLE: YAML Taskfile Indentation (Good Example)\nDESCRIPTION: This snippet shows the correct way to indent a Taskfile.yml file. It uses two spaces for indentation, which is the recommended practice and ensures the file is parsed correctly.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/styleguide.mdx#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\n# good\ntasks:\n  foo:\n    cmds:\n      - echo 'foo'\n```\n\n----------------------------------------\n\nTITLE: Looping: Variable Content\nDESCRIPTION: Demonstrates looping over the contents of a variable.  By default, string variables will be split by whitespace. The `.ITEM` variable is used to access each item within the loop.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_55\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  default:\n    vars:\n      MY_VAR: foo.txt bar.txt\n    cmds:\n      - for: { var: MY_VAR }\n        cmd: cat {{.ITEM}}\n```\n\n----------------------------------------\n\nTITLE: Command-Level Silent Mode\nDESCRIPTION: Shows how to enable silent mode at the command level to prevent a specific command from being echoed before execution.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/usage.mdx#_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  echo:\n    cmds:\n      - cmd: echo \"Print something\"\n        silent: true\n```\n\n----------------------------------------\n\nTITLE: Looping: Dependencies\nDESCRIPTION: Illustrates how to apply looping to the `deps` property to run tasks in parallel based on the loop.  The order of execution of the iterations is not guaranteed.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_62\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  default:\n    deps:\n      - for: [foo, bar]\n        task: my-task\n        vars:\n          FILE: '{{.ITEM}}'\n\n  my-task:\n    cmds:\n      - echo '{{.FILE}}'\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Various Variable Types in Go Task (YAML)\nDESCRIPTION: Demonstrates defining different variable types (string, bool, int, float, array, map) using the `vars` keyword in a Go Task Taskfile. It shows how to access these variables, including nested elements of arrays and maps, within task commands using `{{.}}` template syntax.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/usage.mdx#_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 3\n\ntasks:\n  foo:\n    vars:\n      STRING: 'Hello, World!'\n      BOOL: true\n      INT: 42\n      FLOAT: 3.14\n      ARRAY: [1, 2, 3]\n      MAP:\n        map: {A: 1, B: 2, C: 3}\n    cmds:\n      - 'echo {{.STRING}}'  # Hello, World!\n      - 'echo {{.BOOL}}'    # true\n      - 'echo {{.INT}}'     # 42\n      - 'echo {{.FLOAT}}'   # 3.14\n      - 'echo {{.ARRAY}}'   # [1 2 3]\n      - 'echo {{.ARRAY.0}}' # 1\n      - 'echo {{.MAP}}'     # map[A:1 B:2 C:3]\n      - 'echo {{.MAP.A}}'   # 1\n```\n\n----------------------------------------\n\nTITLE: YAML Taskfile Task Name Case (Good Example)\nDESCRIPTION: This snippet demonstrates the correct naming convention for tasks in a Taskfile.yml file, using kebab-case. The task name `do-something-fancy` is the recommended style.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/styleguide.mdx#_snippet_12\n\nLANGUAGE: YAML\nCODE:\n```\n# good\nversion: '3'\n\ntasks:\n  do-something-fancy:\n    cmds:\n      - echo 'Do something'\n```\n\n----------------------------------------\n\nTITLE: Looping: Variable Content with Split\nDESCRIPTION: Provides an example of splitting a string variable on a character other than whitespace. The `split` property is used to specify the delimiter.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_56\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  default:\n    vars:\n      MY_VAR: foo.txt,bar.txt\n    cmds:\n      - for: { var: MY_VAR, split: ',' }\n        cmd: cat {{.ITEM}}\n```\n\n----------------------------------------\n\nTITLE: YAML Taskfile Indentation (Bad Example)\nDESCRIPTION: This snippet shows an example of incorrect indentation in a Taskfile.yml file. It uses inconsistent indentation, which can lead to parsing errors or unexpected behavior.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/styleguide.mdx#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\n# bad\ntasks:\n    foo:\n        cmds:\n            - echo 'foo'\n```\n\n----------------------------------------\n\nTITLE: Testing GoReleaser Release Process - Taskfile\nDESCRIPTION: Executes the `test-release` task defined in the Taskfile to simulate the GoReleaser release process locally. This allows verifying the build and packaging steps without performing a full release.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/releasing.mdx#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ntask test-release\n```\n\n----------------------------------------\n\nTITLE: YAML Taskfile Template Whitespace (Good Example)\nDESCRIPTION: This snippet shows the correct way to template variables, without using whitespace. The format `{{.MESSAGE}}` is recommended for templating.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/styleguide.mdx#_snippet_10\n\nLANGUAGE: YAML\nCODE:\n```\n# good\nversion: '3'\n\ntasks:\n  greet:\n    cmds:\n      - echo '{{.MESSAGE}}'\n```\n\n----------------------------------------\n\nTITLE: Creating a FileNode for a Local Taskfile in Go\nDESCRIPTION: Demonstrates creating a `taskfile.FileNode` using `taskfile.NewFileNode` to represent a local Taskfile. This node specifies the path to the Taskfile ('Taskfile.yml') and its parent directory ('./path/to/dir').\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/reference/package.mdx#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nnode := taskfile.NewFileNode(\"Taskfile.yml\", \"./path/to/dir\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Taskfile Reader with Optional Debugging in Go\nDESCRIPTION: This snippet shows how to instantiate a Reader using taskfile.NewReader with a functional option taskfile.WithDebugFunc. The debug function provided is invoked with debug messages emitted during reading. The dependency is the slog logging package. This setup allows enhanced debugging for Taskfile parsing. No output is produced on initialization; debug messages are emitted at runtime.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/reference/package.mdx#_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nreader := taskfile.NewReader(\n  taskfile.WithDebugFunc(func(s string) {\n    slog.Debug(s)\n  }),\n)\n```\n\n----------------------------------------\n\nTITLE: Importing the Taskfile Package in Go\nDESCRIPTION: This snippet imports the 'github.com/go-task/task/v3/taskfile' Go package, a dependency required for all interactions with Taskfiles via Go code. Ensure this module is included in your go.mod file before using. This import is a prerequisite step and has no parameters or outputs.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/reference/package.mdx#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nimport (\n    \"github.com/go-task/task/v3/taskfile\"\n)\n```\n\n----------------------------------------\n\nTITLE: Using Boolean Variables (Before) - Task YAML\nDESCRIPTION: Shows how boolean-like values were previously stored as strings in Taskfile variables before v3.37.0. The template logic explicitly compares the string variable `BOOL` to the string `\"true\"` to achieve conditional execution, requiring string manipulation for what should be a simple boolean check.\nSOURCE: https://github.com/go-task/task/blob/main/website/blog/2024-05-09-any-variables.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 3\n\ntasks:\n  foo:\n    vars:\n      BOOL: true # <-- Parsed as a string even though its a YAML boolean\n    cmds:\n      - '{{if eq .BOOL \"true\"}}echo foo{{end}}'\n\n```\n\n----------------------------------------\n\nTITLE: Copying Task Completion Script for Fish\nDESCRIPTION: Generates the Task command completion script for Fish and redirects its output to a user's completions directory. This method needs manual updates when Task is upgraded.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/installation.mdx#_snippet_27\n\nLANGUAGE: shell\nCODE:\n```\ntask --completion fish > ~/.config/fish/completions/task.fish\n```\n\n----------------------------------------\n\nTITLE: Loading Task Completion in Bash Startup\nDESCRIPTION: Adds a line to your Bash configuration file (`~/.bashrc`) to load Task command completion every time a new shell is created. This ensures completions are always up-to-date.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/installation.mdx#_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\neval \"$(task --completion bash)\"\n```\n\n----------------------------------------\n\nTITLE: Performing Deferred Cleanup via Subtasks (go-task, YAML)\nDESCRIPTION: Shows how cleanup commands can be delegated to a dedicated subtask using the defer keyword in Taskfile. The main task schedules a deferred call to the cleanup task, which removes a temporary directory. No dependencies beyond go-task are required. The key parameter is the subtask name provided to defer.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_67\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  default:\n    cmds:\n      - mkdir -p tmpdir/\n      - defer: { task: cleanup }\n      - echo 'Do work on tmpdir/'\n\n  cleanup: rm -rf tmpdir/\n```\n\n----------------------------------------\n\nTITLE: Setting Go Build Environment Variables\nDESCRIPTION: This snippet defines the environment variables for the Go build process. It sets the target operating system to Linux (GOOS='linux'), the architecture to amd64 (GOARCH='amd64'), and disables CGO (CGO_ENABLED='0'). The build will target a 64-bit Linux environment without CGO enabled.\nSOURCE: https://github.com/go-task/task/blob/main/testdata/env/local.txt#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nGOOS='linux' GOARCH='amd64' CGO_ENABLED='0'\n```\n\n----------------------------------------\n\nTITLE: Print Arguments in Go Template\nDESCRIPTION: An alias for the Go standard library function `fmt.Sprint`. It formats its arguments using the default formats and returns the resulting string.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/reference/templating.mdx#_snippet_13\n\nLANGUAGE: Go Template\nCODE:\n```\nprint\n```\n\n----------------------------------------\n\nTITLE: Installing Task via pacstall\nDESCRIPTION: Installs the Task command-line tool using the pacstall package manager on Debian and Ubuntu. Requires pacstall installed. This is a community-maintained package.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/installation.mdx#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\npacstall -I go-task-deb\n```\n\n----------------------------------------\n\nTITLE: Using 'group' Output with Silent Mode to Suppress Standard Output\nDESCRIPTION: This configuration demonstrates setting Task to run in 'group' output mode with 'silent: true,' which suppresses command output unless an error occurs. It includes tasks that echo messages and simulate a failure, illustrating output handling in CI pipelines.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_83\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\nsilent: true\n\noutput:\n  group:\n    error_only: true\n\ntasks:\n  passes: echo 'output-of-passes'\n  errors: echo 'output-of-errors' && exit 1\n```\n\n----------------------------------------\n\nTITLE: Looping: Sources\nDESCRIPTION: This snippet shows how to loop over source files specified in the `sources` property of a task. The `for: sources` syntax iterates through each source file, and the item can be accessed via `.ITEM`.  Paths returned are relative to the task directory.  Users can leverage the `joinPath` function to create absolute paths.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_51\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n  default:\n    sources:\n      - foo.txt\n      - bar.txt\n    cmds:\n      - for: sources\n        cmd: cat {{ .ITEM }}\n```\n\n----------------------------------------\n\nTITLE: Merging Taskfile Graph into a Single Taskfile in Go\nDESCRIPTION: Demonstrates how to merge an `ast.TaskfileGraph` (obtained from reading Taskfiles) into a single `ast.Taskfile`. The `Merge` method compiles the graph, resolving includes, into one comprehensive Taskfile structure. This is useful for accessing all tasks and variables in a unified view.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/reference/package.mdx#_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntf, err := tfg.Merge()\n// handle error\n```\n\n----------------------------------------\n\nTITLE: Version Number for Go-Task\nDESCRIPTION: The semantic version number 3.43.2 indicates major version 3, minor version 43, and patch version 2 of the Go-Task project.\nSOURCE: https://github.com/go-task/task/blob/main/internal/version/version.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n3.43.2\n```\n\n----------------------------------------\n\nTITLE: Installing Task via Scoop\nDESCRIPTION: Installs the Task command-line tool using the Scoop package manager on Windows. Requires Scoop installed. This is a community-maintained package.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/installation.mdx#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nscoop install task\n```\n\n----------------------------------------\n\nTITLE: Running Task via pkgx (Integrated)\nDESCRIPTION: Runs the Task command-line tool after installing it via pkgx and enabling pkgx integration. Allows running the command directly.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/installation.mdx#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ntask\n```\n\n----------------------------------------\n\nTITLE: Overriding Variable Defaults via CLI (Task - Shell)\nDESCRIPTION: Command-line examples corresponding to the previous YAML snippet. Shows how invoking Task with or without the USER_NAME variable changes the output. Requires shell and Task installed. Inputs: none or USER_NAME. Outputs: console print. Limitation: demonstrated values only.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_42\n\nLANGUAGE: shell\nCODE:\n```\n$ task greet_user\ntask: [greet_user] echo \"Hello, DefaultUser!\"\nHello, DefaultUser!\n$ task greet_user USER_NAME=\"Bob\"\ntask: [greet_user] echo \"Hello, Bob!\"\nHello, Bob!\n\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters with Inline Variable Assignment (Task - Shell)\nDESCRIPTION: Demonstrates setting variables inline as arguments to the Task command, providing broader shell compatibility on systems where environment prepending is not supported. Requires Task binary. Inputs: CLI name-value pairs. Outputs: variables available to respective tasks. Limitation: depends on Task CLI parsing.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_38\n\nLANGUAGE: shell\nCODE:\n```\n$ task write-file FILE=file.txt \"CONTENT=Hello, World!\" print \"MESSAGE=All done!\"\n\n```\n\n----------------------------------------\n\nTITLE: Installing Task via pkgx\nDESCRIPTION: Installs the Task command-line tool on demand using the pkgx tool. Requires pkgx installed.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/installation.mdx#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\npkgx task\n```\n\n----------------------------------------\n\nTITLE: Overriding Dotenv Variables with Task-Level Env in Taskfile YAML\nDESCRIPTION: Shows how environment variables explicitly defined using `env` within a task take precedence over variables loaded from `.env` files using `dotenv`. This allows fine-grained control over variable values for specific tasks.\nSOURCE: https://github.com/go-task/task/blob/main/website/docs/usage.mdx#_snippet_7\n\nLANGUAGE: YAML\nCODE:\n```\nversion: '3'\n\nenv:\n  ENV: testing\n\ntasks:\n  greet:\n    dotenv: ['.env', '{{.ENV}}/.env', '{{.HOME}}/.env']\n    env:\n      KEYNAME: DIFFERENT_VALUE\n    cmds:\n      - echo \"Using $KEYNAME and endpoint $ENDPOINT\"\n```\n\n----------------------------------------\n\nTITLE: Running Task with local changes\nDESCRIPTION: This snippet demonstrates how to run Task with your local changes. It uses `go run` to execute the `cmd/task` package, optionally specifying a directory containing a test Taskfile and a specific task name to execute.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/contributing.mdx#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ngo run ./cmd/task\n```\n\n----------------------------------------\n\nTITLE: Installing Task CLI using pacstall - Shell\nDESCRIPTION: Community-supported installation method for Debian/Ubuntu systems with pacstall package manager. Requires pacstall installed and configured.\nSOURCE: https://github.com/go-task/task/blob/main/website/versioned_docs/version-latest/installation.mdx#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\npacstall -I go-task-deb\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Variable in Shell Script - shell\nDESCRIPTION: Defines the QUX environment variable with the value 'from_taskfile'. Useful for configuring downstream shell processes or CI/CD workflows. This statement requires a Unix-like shell interpreter and does not take any inputs; it simply sets a process-wide variable. Outputs depend on further usage within the script or system environment. No additional dependencies are needed.\nSOURCE: https://github.com/go-task/task/blob/main/testdata/env/overridden.txt#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nQUX='from_taskfile'\n```"
  }
]