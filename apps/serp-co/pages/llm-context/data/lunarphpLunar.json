[
  {
    "owner": "lunarphp",
    "repo": "lunar",
    "content": "TITLE: Setting Cart Shipping and Billing Addresses\nDESCRIPTION: Shows how to set shipping and billing addresses on a cart for accurate tax calculation, demonstrating both array-based and model-based approaches.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/carts.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$shippingAddress = [\n    'country_id' => null,\n    'title' => null,\n    'first_name' => null,\n    'last_name' => null,\n    'company_name' => null,\n    'line_one' => null,\n    'line_two' => null,\n    'line_three' => null,\n    'city' => null,\n    'state' => null,\n    'postcode' => 'H0H 0H0',\n    'delivery_instructions' => null,\n    'contact_email' => null,\n    'contact_phone' => null,\n    'meta' => null,\n];\n\n$billingAddress = /** .. */;\n\n$cart->setShippingAddress($shippingAddress);\n$cart->setBillingAddress($billingAddress);\n```\n\n----------------------------------------\n\nTITLE: Creating a Product in Lunar PHP\nDESCRIPTION: Demonstrates how to create a new product using the Lunar\\Models\\Product model. It includes setting the product type, status, brand, and attribute data with translations.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/products.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nLunar\\Models\\Product::create([\n    'product_type_id' => $productTypeId,\n    'status' => 'published',\n    'brand_id' => $brandId,\n    'attribute_data' => [\n        'name' => new TranslatedText(collect([\n            'en' => new Text('FooBar'),\n        ])),\n        'description' => new Text('This is a Foobar product.'),\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating Cart Lines with Purchasable Items\nDESCRIPTION: Shows how to create cart lines with purchasable items like product variants. Includes setting meta information and demonstrates two different methods for adding lines to a cart.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/carts.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$purchasable = \\Lunar\\Models\\ProductVariant::create([/** ... */]);\n$cartLine = new \\Lunar\\Models\\CartLine([\n    'cart_id' => 1,\n    'purchasable_type' => $purchasable->getMorphClass(),\n    'purchasable_id' => $purchasable->id,\n    'quantity' => 2,\n    'meta' => [\n        'personalization' => 'Love you mum xxx',\n    ]\n]);\n\n// Or you can use the relationship on the cart.\n$cart->lines()->create([/* .. */]);\n```\n\n----------------------------------------\n\nTITLE: Creating a Price Model in Lunar PHP\nDESCRIPTION: Creates a price model with detailed attributes including price, compare price, currency, minimum quantity, and customer group settings. This shows the creation of a price record with a polymorphic relationship.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/products.md#2025-04-21_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$priceable = \\Lunar\\Models\\ProductVariant::create([/** ... */]);\n$price = \\Lunar\\Models\\Price::create([\n    'price' => 199,\n    'compare_price' => 299,\n    'currency_id' => 1,\n    'min_quantity' => 1,\n    'customer_group_id' => null,\n    'priceable_type' => $priceable->getMorphClass(),\n    'priceable_id' => $priceable->id,\n]);\n```\n\n----------------------------------------\n\nTITLE: Calculating Cart Totals\nDESCRIPTION: Shows how to hydrate a cart with calculated totals, taxes, discounts, and shipping information using the calculate method.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/carts.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$cart->calculate();\n```\n\n----------------------------------------\n\nTITLE: Creating a Discount in Lunar PHP\nDESCRIPTION: Demonstrates how to create a new discount record with a 20% coupon configuration. The example includes setting essential properties like name, handle, type, validation data, and usage limits.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/discounts.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nLunar\\Models\\Discount::create([\n    'name' => '20% Coupon',\n    'handle' => '20_coupon',\n    'type' => 'Lunar\\DiscountTypes\\Coupon',\n    'data' => [\n        'coupon' => '20OFF',\n        'min_prices' => [\n            'USD' => 2000 // $20\n        ],\n    ],\n    'starts_at' => '2022-06-17 13:30:55',\n    'ends_at' => null,\n    'max_uses' => null,\n])\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Payment Driver Class in Lunar\nDESCRIPTION: A complete implementation of a custom payment driver that extends the AbstractPayment class. This class implements the required authorize, refund, and capture methods for processing payments within the Lunar framework.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/extending/payments.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\PaymentTypes;\n\nuse Lunar\\Base\\DataTransferObjects\\PaymentCapture;\nuse Lunar\\Base\\DataTransferObjects\\PaymentRefund;\nuse Lunar\\Base\\DataTransferObjects\\PaymentAuthorize;\nuse Lunar\\Events\\PaymentAttemptEvent;\nuse Lunar\\Models\\Transaction;\n\nclass CustomPayment extends AbstractPayment\n{\n    /**\n     * {@inheritDoc}\n     */\n    public function authorize(): ?PaymentAuthorize\n    {\n        if (!$this->order) {\n            if (!$this->order = $this->cart->order) {\n                $this->order = $this->cart->createOrder();\n            }\n        }\n\n        // ...\n        \n        $response = new PaymentAuthorize(\n            success: true,\n            message: 'The payment was successful',\n            orderId: $this->order->id,\n            paymentType: 'custom-type'\n        );\n        \n        PaymentAttemptEvent::dispatch($response)\n\n        return $response;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function refund(Transaction $transaction, int $amount = 0, $notes = null): PaymentRefund\n    {\n        // ...\n        return new PaymentRefund(true);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function capture(Transaction $transaction, $amount = 0): PaymentCapture\n    {\n        // ...\n        return new PaymentCapture(true);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Cart in Lunar PHP\nDESCRIPTION: Demonstrates how to create a new cart instance in Lunar, specifying the currency and channel IDs.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/carts.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$cart = \\Lunar\\Models\\Cart::create([\n    'currency_id' => 1,\n    'channel_id' => 2,\n]);\n```\n\n----------------------------------------\n\nTITLE: Accessing Cart Calculated Values and Breakdowns\nDESCRIPTION: Demonstrates how to access calculated cart values including totals, tax breakdowns, shipping information, and discount details after calculating a cart.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/carts.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$cart->total; // The total price value for the cart\n$cart->subTotal; // The cart sub total, excluding tax\n$cart->subTotalDiscounted; // The cart sub total, minus the discount amount.\n$cart->shippingTotal; // The monetary value for the shipping total. (if applicable)\n$cart->taxTotal; // The monetary value for the amount of tax applied.\n$cart->taxBreakdown; // This is a collection of all taxes applied across all lines.\n$cart->discountTotal; // The monetary value for the discount total.\n$cart->discountBreakdown; // This is a collection of how discounts were calculated\n$cart->shippingSubTotal; // The shipping total, excluding tax.\n$cart->shippingTotal; // The shipping total including tax.\n$cart->shippingBreakdown; // This is a collection of the shipping breakdown for the cart.\n\nforeach ($cart->taxBreakdown as $taxRate) {\n    $taxRate->name\n    $taxRate->total->value\n}\n\nforeach ($cart->shippingBreakdown->items as $shippingBreakdown) {\n    $shippingBreakdown->name;\n    $shippingBreakdown->identifier;\n    $shippingBreakdown->price->formatted();\n}\n    \n\nforeach ($cart->discountBreakdown as $discountBreakdown) {\n    $discountBreakdown->discount_id\n    foreach ($discountBreakdown->lines as $discountLine) {\n        $discountLine->quantity\n        $discountLine->line\n    }\n    $discountBreakdown->total->value\n}\n\nforeach ($cart->lines as $cartLine) {\n    $cartLine->unitPrice; // The monetary value for a single item.\n    $cartLine->unitPriceInclTax; // The monetary value for a single item, including tax amount.\n    $cartLine->total; // The total price value for the cart\n    $cartLine->subTotal; // The sub total, excluding tax\n    $cartLine->subTotalDiscounted; // The sub total, minus the discount amount.\n    $cartLine->taxAmount; // The monetary value for the amount of tax applied.\n    $cartLine->taxBreakdown; // This is a collection of all taxes applied across all lines.\n    $cartLine->discountTotal; // The monetary value for the discount total.\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Base Product in Lunar PHP\nDESCRIPTION: Example of creating a base product with attributes in Lunar PHP. This snippet initializes a boots product with translated name and description attributes.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/products.md#2025-04-21_snippet_30\n\nLANGUAGE: php\nCODE:\n```\nLunar\\Models\\Product::create([\n    'product_type_id' => $productType->id,\n    'status' => 'published',\n    'brand_id' => $brandId,\n    'sku' => 'DRBOOT',\n    'attribute_data' => [\n        'name' => new TranslatedText(collect([\n            'en' => new Text('1460 PATENT LEATHER BOOTS'),\n        ])),\n        'description' => new Text('Even more shades from our archive...'),\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Setting Shipping and Billing Addresses in Lunar PHP\nDESCRIPTION: Adds shipping and billing addresses to a cart using detailed address information including name, address lines, city, state, postcode, and country.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/carts.md#2025-04-21_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$cart->setShippingAddress([\n    'first_name' => null,\n    'last_name' => null,\n    'line_one' => null,\n    'line_two' => null,\n    'line_three' => null,\n    'city' => null,\n    'state' => null,\n    'postcode' => null,\n    'country_id' => null,\n]);\n$cart->setBillingAddress([\n    'first_name' => null,\n    'last_name' => null,\n    'line_one' => null,\n    'line_two' => null,\n    'line_three' => null,\n    'city' => null,\n    'state' => null,\n    'postcode' => null,\n    'country_id' => null,\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating Orders in Lunar - PHP\nDESCRIPTION: Demonstrates two methods for creating orders: direct creation and the recommended cart-based approach. Shows usage of optional parameters for multiple orders and order updates.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/orders.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$order = \\Lunar\\Models\\Order::create([/** .. */]);\n\n// Recommended way\n$order = Cart::first()->createOrder(\n    allowMultipleOrders: false,\n    orderIdToUpdate: null,\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Currency in Lunar PHP\nDESCRIPTION: This snippet demonstrates how to create a new currency record using Lunar's Currency model. It sets up a British Pound (GBP) as the default currency with appropriate fields like code, name, exchange rate, decimal places, and status flags.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/currencies.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\\Lunar\\Models\\Currency::create([\n    'code' => 'GBP',\n    'name' => 'British Pound',\n    'exchange_rate' => 1.0000,\n    'decimal_places' => 2,\n    'enabled' => 1,\n    'default' => 1,\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating Product Options in Lunar PHP\nDESCRIPTION: Code showing how to create product options (Size and Colour) with translated names and labels in Lunar PHP. These options will be used to generate product variants.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/products.md#2025-04-21_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n$colour = Lunar\\Models\\ProductOption::create([\n    'name' => [\n        'en' => 'Colour',\n    ],\n    'label' => [\n        'en' => 'Colour',\n    ],\n]);\n\n$size = Lunar\\Models\\ProductOption::create([\n    'name' => [\n        'en' => 'Size',\n    ],\n    'label' => [\n        'en' => 'Size',\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Fetching Price from a Model in Lunar PHP\nDESCRIPTION: Retrieves pricing information directly from a model that implements the hasPrices trait. This shows how to get price data using the model's pricing method.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/products.md#2025-04-21_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n$pricing = $variant->pricing()->qty(5)->get();\n```\n\n----------------------------------------\n\nTITLE: Creating Refund Transactions in Lunar\nDESCRIPTION: Example of creating a refund transaction that references a previous capture transaction. This approach is used when implementing refund functionality in a custom payment driver.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/extending/payments.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$capture = Transaction::whereType('capture')->first();\n\nTransaction::create([\n    //...\n    'parent_transaction_id' => $capture->id,\n    'type' => 'refund',\n]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Tax Driver in PHP\nDESCRIPTION: This code defines a custom TaxJar driver class that implements the Lunar\\Base\\TaxDriver interface. It includes methods for setting addresses, currency, purchasable items, and calculating tax breakdown.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/extending/taxation.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Drivers;\n\nuse Lunar\\Base\\TaxDriver;\nuse Illuminate\\Support\\Collection;\n\nclass TaxJar implements TaxDriver\n{\n    /**\n     * Set the shipping address.\n     *\n     * @param  \\Lunar\\DataTypes\\Address|null  $address\n     * @return self\n     */\n    public function setShippingAddress(Address $address = null)\n    {\n        // ...\n        return $this;\n    }\n\n    /**\n     * Set the currency.\n     *\n     * @param  \\Lunar\\Models\\Currency  $currency\n     * @return self\n     */\n    public function setCurrency(Currency $currency)\n    {\n        // ...\n        return $this;\n    }\n\n    /**\n     * Set the billing address.\n     *\n     * @param  \\Lunar\\DataTypes\\Address|null  $address\n     * @return self\n     */\n    public function setBillingAddress(Address $address = null)\n    {\n        // ...\n        return $this;\n    }\n\n    /**\n     * Set the purchasable item.\n     *\n     * @param  \\Lunar\\Base\\Purchasable|null  $address\n     * @return self\n     */\n    public function setPurchasable(Purchasable $purchasable)\n    {\n        // ...\n        return $this;\n    }\n\n    /**\n     * Return the tax breakdown from a given sub total.\n     *\n     * @param  int  $subTotal\n     */\n    public function getBreakdown($subTotal): Collection\n    {\n        return collect([ /* ... */ ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Shipping Modifier in Lunar PHP\nDESCRIPTION: This snippet demonstrates how to create a custom shipping modifier class that adds shipping options to the ShippingManifest. It shows how to define shipping options with different prices, descriptions, and attributes like collection availability.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/extending/shipping.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Modifiers;\n\nuse Lunar\\Base\\ShippingModifier;\nuse Lunar\\DataTypes\\Price;\nuse Lunar\\DataTypes\\ShippingOption;\nuse Lunar\\Facades\\ShippingManifest;\nuse Lunar\\Models\\Cart;\nuse Lunar\\Models\\Currency;\nuse Lunar\\Models\\TaxClass;\n\nclass CustomShippingModifier extends ShippingModifier\n{\n    public function handle(Cart $cart, \\Closure $next)\n    {\n        // Get the tax class\n        $taxClass = TaxClass::first();\n\n        ShippingManifest::addOption(\n            new ShippingOption(\n                name: 'Basic Delivery',\n                description: 'A basic delivery option',\n                identifier: 'BASDEL',\n                price: new Price(500, $cart->currency, 1),\n                taxClass: $taxClass\n            )\n        );\n\n        ShippingManifest::addOption(\n            new ShippingOption(\n                name: 'Pick up in store',\n                description: 'Pick your order up in store',\n                identifier: 'PICKUP',\n                price: new Price(0, $cart->currency, 1),\n                taxClass: $taxClass,\n                // This is for your reference, so you can check if a collection option has been selected.\n                collect: true\n            )\n        );\n\n        // Or add multiple options, it's your responsibility to ensure the identifiers are unique\n        ShippingManifest::addOptions(collect([\n            new ShippingOption(\n                name: 'Basic Delivery',\n                description: 'A basic delivery option',\n                identifier: 'BASDEL',\n                price: new Price(500, $cart->currency, 1),\n                taxClass: $taxClass\n            ),\n            new ShippingOption(\n                name: 'Express Delivery',\n                description: 'Express delivery option',\n                identifier: 'EXDEL',\n                price: new Price(1000, $cart->currency, 1),\n                taxClass: $taxClass\n            )\n        ]));\n        \n        return $next($cart);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Price with Quantity in Lunar PHP\nDESCRIPTION: Retrieves pricing information for a specific quantity of a product variant. This demonstrates how to get price data when a customer wants to buy multiple items.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/products.md#2025-04-21_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$pricing = \\Lunar\\Facades\\Pricing::qty(5)->for($variant)->get();\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Search Indexer Class in PHP\nDESCRIPTION: Complete implementation of a custom search indexer class that extends ScoutIndexer, including methods for controlling searchability, eager loading, and index mapping.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/extending/search.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Search;\n\nuse Lunar\\Search\\ScoutIndexer;\n\nclass CustomProductIndexer extends ScoutIndexer\n{\n    // Scout method to return the index name.\n    public function searchableAs(Model $model): string\n    {\n        return 'custom_index_name';\n    }\n    \n    // Scout method to return whether the model should be searchable.\n    public function shouldBeSearchable(Model $model): bool\n    {\n        return true;\n    }\n    \n    // Scout method to allow you to tap into eager loading.\n    public function makeAllSearchableUsing(Builder $query): Builder\n    {\n        return $query->with([\n            'thumbnail',\n            'variants',\n            'productType',\n            'brand',\n        ]);\n    }\n    \n    // Scout method to get the ID used for indexing\n    public function getScoutKey(Model $model): mixed\n    {\n        return $model->getKey();\n    }\n    \n    // Scout method to get the column used for the ID.\n    public function getScoutKeyName(Model $model): mixed\n    {\n        return $model->getKeyName();\n    }\n    \n    // Simple array of any sortable fields.\n    public function getSortableFields(): array \n    {\n        return [\n            'created_at',\n            'updated_at',\n        ];\n    }\n    \n    // Simple array of any filterable fields.\n    public function getFilterableFields(): array \n    {\n        return [\n            '__soft_deleted',\n        ];\n    }\n    \n    // Return an array representing what should be sent to the search service i.e. Algolia\n    public function toSearchableArray(Model $model, string $engine): array\n    {\n        return array_merge([], $this->mapSearchableAttributes($model));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Current Cart from Session\nDESCRIPTION: Shows how to retrieve the current cart from the session using the CartSession facade in a Laravel application.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/carts.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$cart = \\Lunar\\Facades\\CartSession::current();\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Discount Type Class in Lunar PHP\nDESCRIPTION: Demonstrates the basic structure of a custom discount type class extending AbstractDiscountType, including required methods for name and cart application logic.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/extending/discounts.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\DiscountTypes;\n\nuse Lunar\\Models\\Cart;\nuse Lunar\\DiscountTypes\\AbstractDiscountType;\n\nclass MyCustomDiscountType extends AbstractDiscountType\n{\n    /**\n     * Return the name of the discount.\n     *\n     * @return string\n     */\n    public function getName(): string\n    {\n        return 'Custom Discount Type';\n    }\n\n    /**\n     * Called just before cart totals are calculated.\n     *\n     * @return Cart\n     */\n    public function apply(Cart $cart): Cart\n    {\n        // ...\n        return $cart;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Pricing Pipeline in Lunar PHP\nDESCRIPTION: Implementation of a custom pricing pipeline class that modifies product prices. This example sets a fixed price value of 200 for matched products in the pricing manager.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/products.md#2025-04-21_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Pipelines\\Pricing;\n\nuse Closure;\nuse Lunar\\Base\\PricingManagerInterface;\n\nclass CustomPricingPipeline\n{\n    public function handle(PricingManagerInterface $pricingManager, Closure $next)\n    {\n        $matchedPrice = $pricingManager->pricing->matched;\n\n        $matchedPrice->price->value = 200;\n\n        $pricingManager->pricing->matched = $matchedPrice;\n\n        return $next($pricingManager);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Saving Attribute Data - PHP\nDESCRIPTION: Example showing how to save different types of attribute data to a product using various field types including Text, Number, and TranslatedText.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/attributes.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$product->attribute_data = collect([\n    'meta_title' => new \\Lunar\\FieldTypes\\Text('The best screwdriver you will ever buy!'),\n    'pack_qty' => new \\Lunar\\FieldTypes\\Number(2),\n    'description' => new \\Lunar\\FieldTypes\\TranslatedText(collect([\n        'en' => new \\Lunar\\FieldTypes\\Text('Blue'),\n        'fr' => new \\Lunar\\FieldTypes\\Text('Bleu'),\n    ])),\n]);\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Model in Lunar using ModelManifest\nDESCRIPTION: This code snippet demonstrates how to replace a core Lunar model with your own custom implementation in the boot method of a service provider. It registers a custom Product model to be used throughout the Lunar ecosystem.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/extending/models.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Bootstrap any application services.\n *\n * @return void\n */\npublic function boot()\n{\n    \\Lunar\\Facades\\ModelManifest::replace(\n        \\Lunar\\Models\\Contracts\\Product::class,\n        \\App\\Model\\Product::class,\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Price Break Pricing in Lunar PHP\nDESCRIPTION: Creates multiple price records with different minimum quantities to implement tiered pricing. This demonstrates how to set up bulk discount pricing where the price decreases as quantity increases.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/products.md#2025-04-21_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nPrice::create([\n    // ...\n    'price' => 199,\n    'compare_price' => 399,\n    'min_quantity' => 1,\n]);\n\nPrice::create([\n    // ...\n    'price' => 150,\n    'compare_price' => 399,\n    'min_quantity' => 10,\n]);\n```\n\n----------------------------------------\n\nTITLE: Cart Validation with Exception Handling\nDESCRIPTION: Demonstrates how to handle validation when adding items to a cart using try-catch to capture CartException errors.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/carts.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ntry {\n    $cart->add($purchasable, 500);\n} catch (\\Lunar\\Exceptions\\Carts\\CartException $e) {\n    $error = $e->getMessage();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Pricing to a Variant in Lunar PHP\nDESCRIPTION: Creates a price entry for a product variant with a specified price amount and currency. This demonstrates the basic price association with a product variant.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/products.md#2025-04-21_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$variant->prices()->create([\n    'price' => 199,\n    'currency_id' => $currency->id,\n]);\n```\n\n----------------------------------------\n\nTITLE: Adding Dynamic Eloquent Relationships to Lunar Models\nDESCRIPTION: This example shows how to use Laravel's dynamic relationship resolution to add relationships to Lunar models without extending or replacing them. It demonstrates adding a 'ticket' relationship to the Order model.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/extending/models.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Lunar\\Models\\Order;\nuse App\\Models\\Ticket;\n \nOrder::resolveRelationUsing('ticket', function ($orderModel) {\n    return $orderModel->belongsTo(Ticket::class, 'ticket_id');\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Product Variants with Options in Lunar PHP\nDESCRIPTION: Creates product variants with specific SKUs and associates them with product option values. This shows how to create variants for different product options like color.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/products.md#2025-04-21_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$blueVariant = ProductVariant::create([\n    'sku' => 'blue-product',\n]);\n\n$blueVariant->values()->attach($blueOption);\n\n$redVariant = ProductVariant::create([\n    'product_id' => $product->id,\n    'tax_class_id' => $taxClass->id,\n    'sku' => 'red-product',\n]);\n\n$redVariant->values()->attach($redOption);\n```\n\n----------------------------------------\n\nTITLE: Configuring Order Creation Pipelines in Lunar PHP\nDESCRIPTION: Configuration example showing the default order creation pipeline stack in config/lunar/orders.php. These pipelines handle various aspects of order creation including cart conversion, line items, addresses, shipping, and discounts.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/extending/orders.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n'pipelines' => [\n    'creation' => [\n        Lunar\\Pipelines\\Order\\Creation\\FillOrderFromCart::class,\n        Lunar\\Pipelines\\Order\\Creation\\CreateOrderLines::class,\n        Lunar\\Pipelines\\Order\\Creation\\CreateOrderAddresses::class,\n        Lunar\\Pipelines\\Order\\Creation\\CreateShippingLine::class,\n        Lunar\\Pipelines\\Order\\Creation\\CleanUpOrderLines::class,\n        Lunar\\Pipelines\\Order\\Creation\\MapDiscountBreakdown::class,\n        // ...\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Order Pipeline in Lunar PHP\nDESCRIPTION: Example implementation of a custom order pipeline class that can be added to the order creation process. The pipeline class includes a handle method that receives the order instance and next closure as parameters.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/extending/orders.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Pipelines\\Orders;\n\nuse Closure;\nuse Lunar\\DataTypes\\Price;\nuse Lunar\\Models\\Order;\n\nclass CustomOrderPipeline\n{\n    /**\n     * @return void\n     */\n    public function handle(Order $order, Closure $next)\n    {\n        // Do something to the cart...\n\n        return $next($order);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Product Option Values in Lunar PHP\nDESCRIPTION: Implementation of creating option values for product options in Lunar PHP. This example creates color options (Black, White, Pale Pink, Mid Blue) and size options (3, 6).\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/products.md#2025-04-21_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n$colour->values()->createMany([\n    [\n        'name' => [\n            'en' => 'Black',\n        ],\n    ],\n    [\n        'name' => [\n            'en' => 'White',\n        ],\n    ],\n    [\n        'name' => [\n            'en' => 'Pale Pink',\n        ],\n    ],\n    [\n        'name' => [\n            'en' => 'Mid Blue',\n        ],\n    ],\n]);\n\n// We won't do all the sizes here, just enough to get the idea...\n$size->values()->createMany([\n    [\n        'name' => [\n            'en' => '3',\n        ],\n    ],\n    [\n        'name' => [\n            'en' => '6',\n        ],\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Handling Cart Validation Exceptions\nDESCRIPTION: Example of how to handle cart validation exceptions in Lunar, showing how to access validation errors when a cart operation fails.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/extending/carts.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ntry {\n    $cart->setShippingOption($option);\n} catch (CartException $e) {\n    $e->errors()->all();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding LunarUser Trait to User Model\nDESCRIPTION: Code snippet showing how to implement the LunarUser trait and interface in your application's User model. This is required for Lunar to work properly with your user authentication system.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/installation.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Lunar\\Base\\Traits\\LunarUser;\nuse Lunar\\Base\\LunarUser as LunarUserInterface;\n// ...\n\nclass User extends Authenticatable implements LunarUserInterface\n{\n    use LunarUser;\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Cart Line in Lunar PHP\nDESCRIPTION: Adds a single item to the cart with the specified purchasable product and quantity.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/carts.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nCartSession::add($purchasable, $quantity);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Discount Type in Lunar PHP\nDESCRIPTION: Demonstrates how to create a custom discount type by extending the AbstractDiscountType class. Includes implementation of required methods getName() and apply().\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/discounts.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\DiscountTypes;\n\nuse Lunar\\Models\\Cart;\nuse Lunar\\DiscountTypes\\AbstractDiscountType;\n\nclass MyCustomDiscountType extends AbstractDiscountType\n{\n    /**\n     * Return the name of the discount.\n     *\n     * @return string\n     */\n    public function getName(): string\n    {\n        return 'Custom Discount Type';\n    }\n\n    /**\n     * Called just before cart totals are calculated.\n     *\n     * @return Cart\n     */\n    public function apply(Cart $cart): Cart\n    {\n        // ...\n        return $cart;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom URL Generator in PHP\nDESCRIPTION: Template for creating a custom URL generator class that Lunar can use to automatically generate URLs for models.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/urls.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Generators;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass MyCustomUrlGenerator\n{\n    public function handle(Model $model)\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Product Variants in Lunar PHP\nDESCRIPTION: Code snippet demonstrating how to generate all possible product variants based on option values. The system automatically creates a variant for each combination of Size and Colour options.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/products.md#2025-04-21_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n$optionValueIds = $size->values->merge($colour->values)->pluck('id');\n\n\\Lunar\\Hub\\Jobs\\Products\\GenerateVariants::dispatch($product, $optionValueIds);\n```\n\n----------------------------------------\n\nTITLE: Accessing Tax-Inclusive and Tax-Exclusive Prices in Lunar PHP\nDESCRIPTION: Shows how to access both tax-inclusive and tax-exclusive pricing from a Price model. This is useful for displaying prices with and without tax on product pages.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/products.md#2025-04-21_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n$price->priceIncTax();\n$price->priceExTax();\n```\n\n----------------------------------------\n\nTITLE: Relationship Support with Custom Lunar Models\nDESCRIPTION: This code shows how relationships work with custom models. After registering a custom ProductVariant model, relationship methods from other models will return instances of your custom model.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/extending/models.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// In our service provider.\npublic function boot()\n{\n    \\Lunar\\Facades\\ModelManifest::replace(\n        \\Lunar\\Models\\Contracts\\ProductVariant::class,\n        \\App\\Model\\ProductVariant::class,\n    );\n}\n\n// Somewhere else in your code...\n\n$product = \\Lunar\\Models\\Product::first();\n$product->variants->first(); // App\\Models\\ProductVariant\n```\n\n----------------------------------------\n\nTITLE: Creating a Price for a Priceable Model in Lunar PHP\nDESCRIPTION: Creates a price record directly associated with a priceable model (like a product variant). This shows two methods to create price records - direct creation or through relationship methods.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/products.md#2025-04-21_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$priceable = \\Lunar\\Models\\ProductVariant::create([/** ... */]);\n\\Lunar\\Models\\Price::create([\n    'price' => 199,\n    'compare_price' => 299,\n    'currency_id' => 1,\n    'min_quantity' => 1,\n    'customer_group_id' => null,\n    'priceable_type' => $priceable->getMorphClass(),\n    'priceable_id' => $priceable->id,\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Search Engine Mapping in Lunar\nDESCRIPTION: Configuration for mapping different models to specific search engines, allowing different search services for different model types.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/search.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n'engine_map' => [\n    \\Lunar\\Models\\Product::class => 'algolia',\n    \\Lunar\\Models\\Order::class => 'meilisearch',\n    \\Lunar\\Models\\Collection::class => 'meilisearch',\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Product Type in Lunar PHP\nDESCRIPTION: Code snippet demonstrating how to create a product type in Lunar PHP. This is the first step in creating a structured product with variants.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/products.md#2025-04-21_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n$productType = Lunar\\Models\\ProductType::create([\n    'name' => 'Boots',\n]);\n```\n\n----------------------------------------\n\nTITLE: Fetching User-Specific Pricing in Lunar PHP\nDESCRIPTION: Retrieves pricing information for specific user types using the PricingManager. This demonstrates how to get prices for guests or specific users.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/products.md#2025-04-21_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$pricing = \\Lunar\\Facades\\Pricing::guest()->for($variant)->get();\n\n// Or to specify a different user...\n$pricing = \\Lunar\\Facades\\Pricing::user($user)->for($variant)->get();\n```\n\n----------------------------------------\n\nTITLE: Fetching Price with Specific Currency in Lunar PHP\nDESCRIPTION: Retrieves pricing information for a product variant in a specific currency. This shows how to get price data in different currencies.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/products.md#2025-04-21_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$pricing = \\Lunar\\Facades\\Pricing::currency($currency)->for($variant)->get();\n```\n\n----------------------------------------\n\nTITLE: Implementing Admin Panel Interface for Custom Discount Type in Lunar PHP\nDESCRIPTION: Shows how to implement the LunarPanelDiscountInterface to add custom form fields and data handling in the admin panel for the discount type.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/extending/discounts.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\DiscountTypes;\n\nuse Lunar\\Admin\\Base\\LunarPanelDiscountInterface;\nuse Lunar\\DiscountTypes\\AbstractDiscountType;\nuse Filament\\Forms;\n\nclass MyCustomDiscountType extends AbstractDiscountType implements LunarPanelDiscountInterface\n{\n    /**\n     * Return the schema to use in the Lunar admin panel\n     */\n    public function lunarPanelSchema(): array\n    {\n        return [\n            Forms\\Components\\TextInput::make('data.my_field')\n               ->label('My label')\n               ->required(),\n        ];\n    }\n\n    /**\n     * Mutate the model data before displaying it in the admin form.\n     */\n    public function lunarPanelOnFill(array $data): array\n    {\n        // optionally do something with $data\n        return $data;\n    }\n\n    /**\n     * Mutate the form data before saving it to the discount model.\n     */\n    public function lunarPanelOnSave(array $data): array\n    {\n        // optionally do something with $data\n        return $data;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Basic Price for a Variant in Lunar PHP\nDESCRIPTION: Retrieves pricing information for a product variant using the PricingManager facade. This shows the basic usage of the pricing system to get price data for display.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/products.md#2025-04-21_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$pricing = \\Lunar\\Facades\\Pricing::for($variant)->get();\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Search Indexers in PHP\nDESCRIPTION: Configuration example showing how to map custom indexers to specific models in the search.php config file.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/extending/search.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // ...\n    'indexers' => [\n        Lunar\\Models\\Product::class => App\\Search\\CustomProductIndexer::class,\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Cart Pipeline in Lunar\nDESCRIPTION: Example implementation of a custom cart pipeline class that can be used to extend cart functionality. The pipeline receives the cart object and can modify it before passing it to the next pipeline.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/extending/carts.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Pipelines\\Cart;\n\nuse Closure;\nuse Lunar\\DataTypes\\Price;\nuse Lunar\\Models\\Cart;\n\nclass CustomCartPipeline\n{\n    /**\n     * Called just before cart totals are calculated.\n     *\n     * @return void\n     */\n    public function handle(Cart $cart, Closure $next)\n    {\n        // Do something to the cart...\n\n        return $next($cart);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Products for Customer Groups in Lunar PHP\nDESCRIPTION: Demonstrates how to use the customerGroup scope to retrieve products associated with specific customer groups. It shows examples with both single and multiple customer groups.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/products.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// Can be an array of ids\n$products = \\Lunar\\Models\\Product::customerGroup(1)->paginate(50);\n\n$products = \\Lunar\\Models\\Product::customerGroup([\n    $groupA,\n    $groupB,\n])->paginate(50);\n```\n\n----------------------------------------\n\nTITLE: Creating a Livewire Synthesizer for Custom Field Type\nDESCRIPTION: Implementation of a Livewire synthesizer for proper data hydration/dehydration with the custom field type. This ensures field data is correctly processed during form operations.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/admin/extending/attributes.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Lunar\\Admin\\Support\\Synthesizers\\AbstractFieldSynth;\nuse Lunar\\FieldTypes\\Text;\n\nclass CustomFieldSynth extends AbstractFieldSynth\n{\n    public static $key = 'lunar_custom_field_field';\n\n    protected static $targetClass = CustomField::class;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Lines to Cart in Lunar PHP\nDESCRIPTION: Adds multiple items to the cart at once using either a collection or an array, with support for quantity and metadata.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/carts.md#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nCartSession::addLines([\n    [\n        'purchasable' => \\Lunar\\Models\\ProductVariant::find(123),\n        'quantity' => 25,\n        'meta' => ['foo' => 'bar'],\n    ],\n    // ...\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Cart Pipelines in Lunar\nDESCRIPTION: Example configuration for cart and cart_lines pipelines in the Lunar framework. The pipelines define the sequence of operations performed during cart calculation.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/extending/carts.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n'pipelines' => [\n    /*\n     |--------------------------------------------------------------------------\n     | Run these pipelines when the cart is calculating.\n     |--------------------------------------------------------------------------\n     */\n    'cart' => [\n        \\Lunar\\Pipelines\\Cart\\CalculateLines::class,\n        \\Lunar\\Pipelines\\Cart\\ApplyShipping::class,\n        \\Lunar\\Pipelines\\Cart\\Calculate::class,\n    ],\n    /*\n     |--------------------------------------------------------------------------\n     | Run these pipelines when the cart lines are being calculated.\n     |--------------------------------------------------------------------------\n     */\n    'cart_lines' => [\n        \\Lunar\\Pipelines\\CartLine\\GetUnitPrice::class,\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing Payment Intents\nDESCRIPTION: Backend methods for creating, fetching, syncing, and managing Stripe payment intents\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/packages/stripe/README.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse \\Lunar\\Stripe\\Facades\\Stripe;\n\nStripe::createIntent(\\Lunar\\Models\\Cart $cart, $options = []);\n```\n\nLANGUAGE: php\nCODE:\n```\n$paymentIntentId = $cart->meta['payment_intent'];\n```\n\nLANGUAGE: php\nCODE:\n```\n$cart->meta->payment_intent;\n```\n\n----------------------------------------\n\nTITLE: Creating Customer Record in PHP\nDESCRIPTION: Example of creating a new customer record with basic details and metadata.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/customers.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nLunar\\Models\\Customer::create([\n    'title' => 'Mr.',\n    'first_name' => 'Tony',\n    'last_name' => 'Stark',\n    'company_name' => 'Stark Enterprises',\n    'vat_no' => null,\n    'meta' => [\n        'account_no' => 'TNYSTRK1234'\n    ],\n])\n```\n\n----------------------------------------\n\nTITLE: Creating Product Options and Values in Lunar PHP\nDESCRIPTION: Creates a product option (like 'Colour') and its possible values (like 'Blue' and 'Red'). These options are used to define variant characteristics with multi-language support.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/products.md#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$option = \\Lunar\\Models\\ProductOption::create([\n    'name' => [\n        'en' => 'Colour',\n    ];\n    'label' => [\n        'en' => 'Colour',\n    ];\n]);\n\n$blueOption = $option->values()->create([\n    'name' => [\n        'en' => 'Blue',\n    ],\n]);\n\n$redOption = $option->values()->create([\n    'name' => [\n        'en' => 'Red',\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Adding Products to a Collection in Lunar PHP\nDESCRIPTION: Illustrates how to associate products with a collection using a BelongsToMany relationship. Products are added with a specified position for sorting.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/collections.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$products = [\n    1 => [\n        'position' => 1,\n    ],\n    2 => [\n        'position' => 2,\n    ]\n];\n\n$collection->products()->sync($products);\n```\n\n----------------------------------------\n\nTITLE: Associating a Cart to a User in Lunar PHP\nDESCRIPTION: Associates the current cart to a user with optional merge strategy for handling existing user carts.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/carts.md#2025-04-21_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nCartSession::associate($user, 'merge');\n```\n\n----------------------------------------\n\nTITLE: Setting Cart Addresses Using Lunar Models\nDESCRIPTION: Demonstrates how to set cart addresses using Lunar Address models or even use the shipping address as the billing address.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/carts.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$shippingAddress = \\Lunar\\Models\\Address::first();\n\n$cart->setShippingAddress($shippingAddress);\n\n$cart->setBillingAddress(\n    $cart->shippingAddress\n);\n```\n\n----------------------------------------\n\nTITLE: Managing Customer Group Assignments in PHP\nDESCRIPTION: Examples of attaching and syncing customer groups with customer records.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/customers.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$customer = \\Lunar\\Models\\Customer::create([/* ... */]);\n\n$customer->customerGroups()->attach($customerGroup);\n\n$customer->customerGroups()->sync([4,5,6]);\n```\n\n----------------------------------------\n\nTITLE: Creating Order Addresses\nDESCRIPTION: Creating shipping and billing addresses for orders with full address fields\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/orders.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n\\Lunar\\Models\\OrderAddress::create([\n    'order_id' => 1,\n    'country_id' => 1,\n    'title' => null,\n    'first_name' => 'Jacob',\n    'last_name' => null,\n    'company_name' => null,\n    'line_one' => '123 Foo Street',\n    'line_two' => null,\n    'line_three' => null,\n    'city' => 'London',\n    'state' => null,\n    'postcode' => 'NW1 1WN',\n    'delivery_instructions' => null,\n    'contact_email' => null,\n    'contact_phone' => null,\n    'type' => 'shipping',\n    'shipping_option' => null,\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Model with Additional Methods\nDESCRIPTION: This example shows how to create a custom model that extends a Lunar model and adds new functionality. The custom ProductVariant class adds a new method called someCustomMethod.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/extending/models.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nclass ProductVariant extends \\Lunar\\Models\\ProductVariant\n{\n    public function someCustomMethod()\n    {\n        return 'Hello!';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Single Cart Line in Lunar PHP\nDESCRIPTION: Updates an existing cart line by its ID, changing quantity and/or metadata.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/carts.md#2025-04-21_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nCartSession::updateLine($cartLineId, $quantity, $meta);\n```\n\n----------------------------------------\n\nTITLE: Creating Capture Transactions for Immediate Payment\nDESCRIPTION: Example of creating a transaction record with type 'capture' to indicate that payment has been immediately charged. This is used when funds are drawn from the customer's account at the time of purchase.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/extending/payments.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nTransaction::create([\n    //...\n    'type' => 'capture',\n]);\n```\n\n----------------------------------------\n\nTITLE: Associating a Cart to a Customer in Lunar PHP\nDESCRIPTION: Associates the current cart to a customer record in the system.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/carts.md#2025-04-21_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nCartSession::setCustomer($customer);\n```\n\n----------------------------------------\n\nTITLE: Creating a Price through Relationship in Lunar PHP\nDESCRIPTION: Creates a price record for a variant using the relationship method. This is an alternative approach to the direct price model creation.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/products.md#2025-04-21_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$variant->prices()->create([/* .. */]);\n```\n\n----------------------------------------\n\nTITLE: Using a Specific Cart in Lunar PHP\nDESCRIPTION: Manually specifies which cart should be used for the session by retrieving a cart from the database and setting it as the active cart.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/carts.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$cart = \\Lunar\\Models\\Cart::first();\nCartSessionManager::use($cart);\n```\n\n----------------------------------------\n\nTITLE: Removing a Cart Line in Lunar PHP\nDESCRIPTION: Removes a specific line from the cart using its ID.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/carts.md#2025-04-21_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nCartSession::removeLine($cartLineId);\n```\n\n----------------------------------------\n\nTITLE: Updating Multiple Cart Lines in Lunar PHP\nDESCRIPTION: Updates multiple cart lines simultaneously with new quantities and metadata using a collection.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/carts.md#2025-04-21_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nCartSession::updateLines(collect([\n    [\n        'id' => 1,\n        'quantity' => 25,\n        'meta' => ['foo' => 'bar'],\n    ],\n    // ...\n]));\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Discount Type in Lunar PHP\nDESCRIPTION: Shows how to register a custom discount type with the Lunar framework's Discount facade.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/discounts.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Lunar\\Facades\\Discounts;\n\nDiscounts::addType(MyCustomDiscountType::class);\n```\n\n----------------------------------------\n\nTITLE: Cart Order Validation - PHP\nDESCRIPTION: Helper method to validate if a cart is ready for order creation.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/orders.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$cart->canCreateOrder();\n```\n\n----------------------------------------\n\nTITLE: Creating a Collection in Lunar PHP\nDESCRIPTION: Shows how to create a new Collection using the Lunar\\Models\\Collection model. The collection is given a name as attribute data and associated with a collection group.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/collections.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$collection = \\Lunar\\Models\\Collection::create([\n    'attribute_data' => [\n        'name' => new \\Lunar\\FieldTypes\\Text('Clearance'),\n    ],\n    'collection_group_id' => $group->id,\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating Intent Transactions for Payment Authorization\nDESCRIPTION: Example of creating a transaction record with type 'intent' to indicate that a payment will be charged at a later date. This is used when initially authorizing a payment without capturing funds.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/extending/payments.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nTransaction::create([\n    //...\n    'type' => 'intent',\n]);\n```\n\n----------------------------------------\n\nTITLE: Updating Product Variant Shipping Status in Lunar PHP\nDESCRIPTION: Shows how to mark a product variant as non-shippable by updating the 'shippable' attribute.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/products.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$variant->update([\n    'shippable' => false,\n]);\n```\n\n----------------------------------------\n\nTITLE: Extending Filament Panel with Pages, Resources, and Components\nDESCRIPTION: Demonstrates a comprehensive example of extending the Filament panel with various customizations including pages, resources, Livewire components, plugins, and navigation groups. This shows the full range of panel customization options available.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/admin/extending/panel.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nLunarPanel::panel(function ($panel) {\n    return $panel\n        ->pages([\n            // Register standalone Filament Pages\n            SalesReport::class,\n            RevenueReport::class,\n        ])\n        ->resources([\n            // Register new Filament Resources\n            OpeningTimeResource::class,\n            BannerResource::class,\n        ])\n        ->livewireComponents([\n            // Register Livewire components\n            OrdersSalesChart::class,\n        ])->plugin(\n            // Register a Filament plugin\n            new ShippingPlugin(),\n        )\n        ->navigationGroups([\n            // Set the navigation groups\n            'Catalog',\n            'Sales',\n            'CMS',\n            'Reports',\n            'Shipping',\n            'Settings',\n        ]);\n})->register();\n```\n\n----------------------------------------\n\nTITLE: Filtering Products by Status in Lunar PHP\nDESCRIPTION: Uses a scope method to filter products by status, specifically retrieving only published products. This demonstrates using provided scopes for querying products.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/products.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nProduct::status('published')->get();\n```\n\n----------------------------------------\n\nTITLE: Registering Lunar Admin Panel in Service Provider\nDESCRIPTION: PHP code to register the Lunar admin panel in your application's service provider. This is required to use the admin interface.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/installation.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Lunar\\Admin\\Support\\Facades\\LunarPanel;\n\nclass AppServiceProvider extends ServiceProvider\n{\n    public function register(): void\n    {\n        LunarPanel::register();\n    }\n```\n\n----------------------------------------\n\nTITLE: Generating and Checking Cart Fingerprints in Lunar PHP\nDESCRIPTION: Creates and verifies cart fingerprints to determine if a cart has changed, useful for checkout processes.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/carts.md#2025-04-21_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n$cart->fingerprint();\n\ntry {\n    $cart->checkFingerprint('4dfAW33awd');\n} catch (\\Lunar\\Exceptions\\FingerprintMismatchException $e) {\n    //... Refresh the cart.\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Tax Class in Lunar PHP\nDESCRIPTION: Demonstrates how to create a new tax class using the TaxClass model. Tax classes are assigned to products to classify them into taxable groups with different tax rates.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/taxation.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$taxClass = TaxClass::create([\n    'name' => 'Clothing',\n]);\n```\n\n----------------------------------------\n\nTITLE: Route Binding with Custom Lunar Models\nDESCRIPTION: This example demonstrates route binding support with custom models by injecting the relevant contract class. When a route is accessed, Lunar will provide your custom model implementation.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/extending/models.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('products/{id}', function (\\Lunar\\Models\\Contracts\\Product $product) {\n    $product; // App\\Models\\Product\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Images from Lunar Models in PHP\nDESCRIPTION: Shows how to retrieve media associated with a Lunar Product model using the Laravel-medialibrary package.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/media.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$product = \\Lunar\\Models\\Product::find(123);\n\n$product->getMedia('images');\n```\n\n----------------------------------------\n\nTITLE: Registering Filament Plugin to Lunar Admin Panel in PHP\nDESCRIPTION: Demonstrates how to properly register a Filament plugin to the Lunar admin panel within a Laravel application service provider. This approach uses the LunarPanel facade to register custom add-on functionality such as the ReviewsPlugin example.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/admin/extending/addons.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Lunar\\Admin\\Support\\Facades\\LunarPanel;\n\nLunarPanel::panel(fn($panel) => $panel->plugin(new ReviewsPlugin()))\n    ->register();\n```\n\n----------------------------------------\n\nTITLE: Configuring Tax Driver in PHP\nDESCRIPTION: This snippet shows how to configure the tax driver in the Lunar framework's config/taxes.php file. It sets the driver to 'system', which is the default SystemTaxManager.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/extending/taxation.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'driver' => 'system',\n];\n```\n\n----------------------------------------\n\nTITLE: Querying Products by Channel with Scope\nDESCRIPTION: Shows how to use the channel scope provided by the HasChannels trait to query products by their channel assignment. Includes filtering by single channel, multiple channels, and time-based availability.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/channels.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// Limit to a single channel\nProduct::channel($channel)->get();\n\n// Limit to multiple channels\nProduct::channel([$channelA, $channelB])->get();\n\n// Limit to a channel available the next day\nProduct::channel($channelA, now()->addDay())->get();\n\n// Limit to a channel within a date range.\nProduct::channel($channelA, now()->addDay(), now()->addDays(2))->get();\n```\n\n----------------------------------------\n\nTITLE: Adding Media to Lunar Models in PHP\nDESCRIPTION: Demonstrates how to add media to a Lunar Product model using the Laravel-medialibrary package.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/media.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$product = \\Lunar\\Models\\Product::find(123);\n\n$product->addMedia($request->file('image'))->toMediaCollection('images');\n```\n\n----------------------------------------\n\nTITLE: Attaching Tags to a Model in Lunar PHP\nDESCRIPTION: This snippet shows how to attach tags to a model that has the HasTags trait. It demonstrates creating a collection of tags and syncing them with the model. Note that tags are automatically converted to uppercase when saved.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/tags.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$tags = collect(['Tag One', 'Tag Two', 'Tag Three']);\n\n$model = SomethingWithTags::first();\n\n$model->syncTags($tags);\n\n$model->tags;\n\n// ['TAG ONE', 'TAG TWO', 'TAG THREE']\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cart Addresses in Lunar PHP\nDESCRIPTION: Accesses the shipping and billing addresses stored on a cart instance through properties.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/carts.md#2025-04-21_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$cart->shippingAddress;\n$cart->billingAddress;\n```\n\n----------------------------------------\n\nTITLE: Extending Tax Manager in PHP Service Provider\nDESCRIPTION: This snippet demonstrates how to extend the Lunar tax manager with a custom driver (TaxJar) in a service provider's boot method. It uses the Lunar\\Facades\\Taxes facade to register the new driver.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/extending/taxation.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function boot()\n{\n    \\Lunar\\Facades\\Taxes::extend('taxjar', function ($app) {\n        return $app->make(TaxJar::class);\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Customer Groups in PHP\nDESCRIPTION: Example of creating a new customer group with name, handle, and default status.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/customers.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$customerGroup = Lunar\\Models\\CustomerGroup::create([\n    'name' => 'Retail',\n    'handle' => 'retail', // Must be unique\n    'default' => false,\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating a Tax Zone in Lunar PHP\nDESCRIPTION: Shows the creation of a tax zone using the TaxZone model. Tax zones specify geographic areas for applying tax rates and can be based on countries, states, or postcodes.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/taxation.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$taxZone = TaxZone::create([\n    'name' => 'UK',\n    'zone_type' => 'country',\n    'price_display' => 'tax_inclusive',\n    'active' => true,\n    'default' => true,\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating a URL in Lunar PHP\nDESCRIPTION: Creates a URL with a specific slug, language ID, and sets it as the default URL for a resource.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/urls.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\\Lunar\\Models\\Url::create([\n    'slug' => 'apple-iphone',\n    'language_id' => $language->id,\n    'default' => true,\n]);\n```\n\n----------------------------------------\n\nTITLE: Adding a Child Collection in Lunar PHP\nDESCRIPTION: Demonstrates how to create a nested structure by adding a child collection to an existing collection using the appendNode method.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/collections.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$child = new \\Lunar\\Models\\Collection::create([/*..*/]);\n\n$collection->appendNode($child);\n```\n\n----------------------------------------\n\nTITLE: Fetching Price with Customer Groups in Lunar PHP\nDESCRIPTION: Retrieves pricing information for a product variant considering specific customer groups. This shows how to get customer group-specific pricing data.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/products.md#2025-04-21_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$pricing = \\Lunar\\Facades\\Pricing::customerGroups($groups)->for($variant)->get();\n\n// Or a single customer group\n$pricing = \\Lunar\\Facades\\Pricing::customerGroup($group)->for($variant)->get();\n```\n\n----------------------------------------\n\nTITLE: Scheduling Customer Groups for Products in Lunar PHP\nDESCRIPTION: Shows how to attach customer groups to a product, either immediately or scheduled for a future date. It also demonstrates how to schedule multiple customer groups at once.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/products.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Will schedule for this product to be enabled in 14 days for this customer group.\n$product->scheduleCustomerGroup($customerGroup, now()->addDays(14));\n\n// Schedule the product to be enabled straight away\n$product->scheduleCustomerGroup($customerGroup);\n\n// The schedule method will accept an array or collection of customer groups.\n$product->scheduleCustomerGroup(CustomerGroup::get());\n```\n\n----------------------------------------\n\nTITLE: Enabling Tags on a Laravel Model in Lunar PHP\nDESCRIPTION: This snippet demonstrates how to enable tagging on a model by adding the HasTags trait to a Laravel model class. This trait provides the functionality needed to attach, detach, and manage tags for the model.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/tags.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\n// ...\nuse Lunar\\Base\\Traits\\HasTags;\n\nclass SomethingWithTags extends Model\n{\n    use HasTags;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Product Dependencies in PHP\nDESCRIPTION: Creates the necessary product, tax class, and currency models needed as prerequisites for product variants. These entities are required before creating product variants.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/products.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$product = Product::create([...]);\n$taxClass = TaxClass::create([...]);\n$currency = Currency::create([...]);\n```\n\n----------------------------------------\n\nTITLE: Creating a Collection Group in Lunar PHP\nDESCRIPTION: Demonstrates how to create a new Collection Group using the Lunar\\Models\\CollectionGroup model. The group is given a name and an optional handle, which will be auto-generated if omitted.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/collections.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$group = \\Lunar\\Models\\CollectionGroup::create([\n    'name' => 'Main Catalogue',\n    'handle' => 'main-catalogue' // Will auto generate if omitted.\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating a Product Type in Lunar PHP\nDESCRIPTION: Shows how to create a new product type using the Lunar\\Models\\ProductType model. It also demonstrates how to associate attributes with a product type.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/products.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nLunar\\Models\\ProductType::create([\n    'name' => 'Boots',\n]);\n\n$productType->mappedAttributes()->attach([ /* attribute ids ... */ ]);\n```\n\n----------------------------------------\n\nTITLE: Scheduling Channel Availability for Products\nDESCRIPTION: Demonstrates how to use the scheduleChannel method to enable products in specific channels with optional start and end dates. This allows for time-based product visibility control.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/channels.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$channel = App\\Models\\Channel::first();\n\n// Will schedule for this product to be enabled in 14 days for this channel.\n// and will be disabled after 24 days\n$product->scheduleChannel($channel, now()->addDays(14), now()->addDays(24));\n\n// Schedule the product to be enabled straight away\n$product->scheduleChannel($channel);\n\n// The schedule method will accept and array or collection of channels.\n$product->scheduleChannel(Channel::get());\n```\n\n----------------------------------------\n\nTITLE: Getting Estimated Shipping in Lunar PHP\nDESCRIPTION: Calculates estimated shipping costs without a full address using an override mechanism. Returns the cheapest shipping option based on current cart totals.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/carts.md#2025-04-21_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$shippingOption = $cart->getEstimatedShipping([\n    'postcode' => '123456',\n    'state' => 'Essex',\n    'country' => Country::first(),\n]);\n```\n\n----------------------------------------\n\nTITLE: Custom Order Creation Action Class - PHP\nDESCRIPTION: Minimum implementation required for a custom order creation action class extending the Lunar abstract action.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/orders.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfinal class CreateOrder extends Lunar\\Actions\\AbstractAction\n{\n    /**\n     * Execute the action.\n     */\n    public function execute(\n        Cart $cart,\n        bool $allowMultipleOrders = false,\n        int $orderIdToUpdate = null\n    ): self {\n        return $this;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Discount Type in Lunar PHP\nDESCRIPTION: Shows how to register a custom discount type using the Lunar Discounts facade.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/extending/discounts.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Lunar\\Facades\\Discounts;\n\nDiscounts::addType(MyCustomDiscountType::class);\n```\n\n----------------------------------------\n\nTITLE: Associating a Country with a Tax Zone in Lunar PHP\nDESCRIPTION: Demonstrates how to associate a country with a tax zone using the TaxZoneCountry model. This is used when the tax zone is based on countries.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/taxation.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$taxZone->countries()->create([\n    'country_id' => \\Lunar\\Models\\Country::first()->id,\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Field Class in PHP by Extending Text Field Type\nDESCRIPTION: Example of creating a custom field class by extending the Text field type from Lunar. This serves as the base class for your custom attribute field.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/admin/extending/attributes.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Lunar\\FieldTypes\\Text;\n\nclass CustomField extends Text\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Estimated Shipping in Cart Calculations in Lunar PHP\nDESCRIPTION: Gets an estimated shipping option and sets it as an override to be used in cart pipelines for that specific request.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/carts.md#2025-04-21_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$shippingOption = $cart->getEstimatedShipping([\n    'postcode' => '123456',\n    'state' => 'Essex',\n    'country' => Country::first(),\n], setOverride: true);\n```\n\n----------------------------------------\n\nTITLE: Defining a Default Currency with Base Exchange Rate in Lunar\nDESCRIPTION: This example shows how to create a default currency (GBP) with a base exchange rate of 1.0000. This serves as the foundation for other currency exchange rates in the system.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/currencies.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\\Lunar\\Models\\Currency::create([\n    'code' => 'GBP',\n    'name' => 'British Pound',\n    'exchange_rate' => 1.0000,\n    'decimal_places' => 2,\n    'enabled' => 1,\n    'default' => 1,\n]);\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Payment Driver in Lunar\nDESCRIPTION: This code demonstrates how to extend Lunar's payment system with a custom payment driver. The extend method takes a driver name and a callback function that returns the driver instance.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/extending/payments.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Lunar\\Facades\\Payments;\n\nPayments::extend('custom', function ($app) {\n    return $app->make(CustomPayment::class);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing HasChannels Trait in Product Model\nDESCRIPTION: Example of how to import and apply the HasChannels trait to a Product model in Lunar. This trait enables channel assignment functionality for the model.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/channels.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Lunar\\Traits\\HasChannels;\n// ...\n\nclass Product extends Model\n{\n    use HasChannels;\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Discounts with Scopes in Lunar PHP\nDESCRIPTION: Shows various query scopes available for retrieving discounts, including active discounts, usable discounts, and discounts associated with specific products.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/discounts.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n/**\n* Query for discounts using the `start_at` and `end_at` dates.\n */\nDiscount::active()->get();\n\n/**\n* Query for discounts where the `uses` column is less than the `max_uses` column or `max_uses` is null.\n */\nDiscount::usable()->get();\n\n/**\n* Query for discounts where the associated products are of a certain type, based on given product ids.\n */\nDiscount::products($productIds, $type = 'condition');\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Table Prefix\nDESCRIPTION: Setting a prefix for Lunar database tables to avoid conflicts with existing application tables.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/configuration.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n    'table_prefix' => 'lunar_',\n```\n\n----------------------------------------\n\nTITLE: Creating Capture Transactions for Previously Authorized Payments\nDESCRIPTION: Code demonstrating how to create a capture transaction that references a previous intent transaction. This is used when capturing funds that were previously authorized but not charged.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/extending/payments.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$intent = Transaction::whereType('intent')->first();\n\nTransaction::create([\n    //...\n    'parent_transaction_id' => $intent->id,\n    'type' => 'capture',\n    'amount' => 2000,\n]);\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Cart Pipeline\nDESCRIPTION: Configuration snippet showing how to register a custom cart pipeline in the Lunar cart configuration file.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/extending/carts.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n'cart' => [\n    // ...\n    App\\Pipelines\\Cart\\CustomCartPipeline::class,\n],\n```\n\n----------------------------------------\n\nTITLE: Clearing a Cart in Lunar PHP\nDESCRIPTION: Removes all lines from the cart while keeping the cart itself.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/carts.md#2025-04-21_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nCartSession::clear();\n```\n\n----------------------------------------\n\nTITLE: Defining Customer Group Relationship in PHP\nDESCRIPTION: Setting up the customer group relationship in a model.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/customers.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\npublic function customerGroup()\n{\n    return $this->hasMany(\\Lunar\\Models\\CustomerGroup::class)->withTimestamps()->withPivot([/* .. */]);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Lunar Package via Composer\nDESCRIPTION: Command to install the Lunar package using Composer. The -W flag is used to update all dependencies, and the version constraint specifies the beta version.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/installation.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncomposer require lunarphp/lunar:\"^1.0.0-beta\" -W\n```\n\n----------------------------------------\n\nTITLE: Configuring Product Settings\nDESCRIPTION: Product configuration including variant settings and unique identifier requirements.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/configuration.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n'disable_variants' => false,\n'sku' => [\n    'required' => true,\n    'unique'   => true,\n],\n'gtin' => [\n    'required' => false,\n    'unique'   => false,\n],\n'mpn' => [\n    'required' => false,\n    'unique'   => false,\n],\n'ean' => [\n    'required' => false,\n    'unique'   => false,\n],\n```\n\n----------------------------------------\n\nTITLE: Accessing Order Addresses\nDESCRIPTION: Helper methods to fetch shipping and billing addresses from an order\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/orders.md#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$order->shippingAddress;\n$order->billingAddress;\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Cart Validation Class\nDESCRIPTION: Example implementation of a custom validation class for cart line quantity. This validates cart operations before they are executed.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/extending/carts.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Validation\\CartLine;\n\nuse Lunar\\Validation\\BaseValidator;\n\nclass CartLineQuantity extends BaseValidator\n{\n    /**\n     * {@inheritDoc}\n     */\n    public function validate(): bool\n    {\n        $quantity = $this->parameters['quantity'] ?? 0;\n\n        // ...\n\n        if (!$condition) {\n            return $this->fail('cart', 'Something went wrong');\n        }\n\n\n        return $this->pass();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Forgetting a Cart in Lunar PHP\nDESCRIPTION: Removes the cart from user session and soft-deletes it in the database. Provides an option to keep the cart in the database by passing a parameter.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/carts.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nCartSession::forget();\n```\n\nLANGUAGE: php\nCODE:\n```\nCartSession::forget(delete: false);\n```\n\n----------------------------------------\n\nTITLE: Managing Default URLs Across Languages in PHP\nDESCRIPTION: Demonstrates how default URLs are managed when multiple URLs are created for the same language, showing how newer default URLs override previous ones.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/urls.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$urlA = \\Lunar\\Models\\Url::create([\n    'slug' => 'apple-iphone',\n    'language_id' => 1,\n    'default' => true,\n]);\n\n$urlA->default // true\n\n$urlB = \\Lunar\\Models\\Url::create([\n    'slug' => 'apple-iphone-26',\n    'language_id' => 1,\n    'default' => true,\n]);\n\n$urlA->default // false\n$urlB->default // true\n\n/**\n * Since this is a different language, no other URLs will be changed.\n **/\n$urlC = \\Lunar\\Models\\Url::create([\n    'slug' => 'apple-iphone-french',\n    'language_id' => 2,\n    'default' => true,\n]);\n\n\n$urlA->default // false\n$urlB->default // true\n$urlC->default // true\n```\n\n----------------------------------------\n\nTITLE: Product Model with Attribute Casting - PHP\nDESCRIPTION: Product model implementation with attribute data casting configuration.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/attributes.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Lunar\\Base\\Casts\\AsAttributeData;\n\nclass Product extends Model\n{\n    /**\n     * Define which attributes should be cast.\n     *\n     * @var array\n     */\n    protected $casts = [\n        'attribute_data' => AsAttributeData::class,\n    ];\n\n    //...\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Configuration Values in Field Rendering\nDESCRIPTION: Example of accessing configuration values when rendering a field in the panel. This shows how to retrieve and use custom settings stored in the attribute's configuration.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/admin/extending/attributes.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Lunar\\Admin\\Support\\FieldTypes\\BaseFieldType;\n\nclass CustomFieldType extends BaseFieldType\n{\n    // ...\n    \n    public static function getFilamentComponent(Attribute $attribute): Component\n    {\n        $min = (int) $attribute->configuration->get('min_length');\n        $max = (int) $attribute->configuration->get('max_length');\n        \n        return TextInput::make($attribute->handle)->min($min)->max($max);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Customer Group Relationships in PHP\nDESCRIPTION: Examples of querying models based on customer group availability.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/customers.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$results = MyModel::customerGroup(1, $startDate, $endDate)->paginate();\n\n$results = MyModel::customerGroup([\n    $groupA,\n    $groupB,\n])->paginate(50);\n```\n\n----------------------------------------\n\nTITLE: Configuring Product Identifier Validation in Lunar PHP\nDESCRIPTION: Shows how to configure validation rules for product identifiers (SKU, GTIN, MPN, EAN) in the Lunar Hub configuration file.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/products.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n    'sku' => [\n        'required' => true,\n        'unique' => false,\n    ],\n    'gtin' => [\n        'required' => false,\n        'unique' => false,\n    ],\n    'mpn' => [\n        'required' => false,\n        'unique' => false,\n    ],\n    'ean' => [\n        'required' => false,\n        'unique' => false,\n    ],\n```\n\n----------------------------------------\n\nTITLE: Creating Order Lines\nDESCRIPTION: Methods for creating order lines directly or through order relationship\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/orders.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n\\Lunar\\Models\\OrderLine::create([\n    // ...\n]);\n```\n\nLANGUAGE: php\nCODE:\n```\n$order->lines()->create([\n    // ...\n]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Media Definitions in Lunar PHP\nDESCRIPTION: Shows how to create a custom media definitions class to customize media collections and conversions for Lunar models.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/media.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Lunar\\Base\\MediaDefinitionsInterface;\nuse Spatie\\Image\\Enums\\Fit;\nuse Spatie\\MediaLibrary\\HasMedia;\nuse Spatie\\MediaLibrary\\MediaCollections\\MediaCollection;\nuse Spatie\\MediaLibrary\\MediaCollections\\Models\\Media;\n\nclass CustomMediaDefinitions implements MediaDefinitionsInterface\n{\n    public function registerMediaConversions(HasMedia $model, Media $media = null): void\n    {\n        // Add a conversion for the admin panel to use\n        $model->addMediaConversion('small')\n            ->fit(Fit::Fill, 300, 300)\n            ->sharpen(10)\n            ->keepOriginalImageFormat();\n    }\n\n    public function registerMediaCollections(HasMedia $model): void\n    {\n        $fallbackUrl = config('lunar.media.fallback.url');\n        $fallbackPath = config('lunar.media.fallback.path');\n\n        // Reset to avoid duplication\n        $model->mediaCollections = [];\n\n        $collection = $model->addMediaCollection('images');\n\n        if ($fallbackUrl) {\n            $collection = $collection->useFallbackUrl($fallbackUrl);\n        }\n\n        if ($fallbackPath) {\n            $collection = $collection->useFallbackPath($fallbackPath);\n        }\n\n        $this->registerCollectionConversions($collection, $model);\n    }\n\n    protected function registerCollectionConversions(MediaCollection $collection, HasMedia $model): void\n    {\n        $conversions = [\n            'zoom' => [\n                'width' => 500,\n                'height' => 500,\n            ],\n            'large' => [\n                'width' => 800,\n                'height' => 800,\n            ],\n            'medium' => [\n                'width' => 500,\n                'height' => 500,\n            ],\n        ];\n\n        $collection->registerMediaConversions(function (Media $media) use ($model, $conversions) {\n            foreach ($conversions as $key => $conversion) {\n                $model->addMediaConversion($key)\n                    ->fit(\n                        Fit::Fill,\n                        $conversion['width'],\n                        $conversion['height']\n                    )->keepOriginalImageFormat();\n            }\n        });\n    }\n\n    public function getMediaCollectionTitles(): array\n    {\n        return [\n            'images' => 'Images',\n        ];\n    }\n\n    public function getMediaCollectionDescriptions(): array\n    {\n        return [\n            'images' => '',\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Pipeline to Lunar Configuration\nDESCRIPTION: Configuration example showing how to add a custom pipeline class to the existing order creation pipeline stack in the Lunar configuration file.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/extending/orders.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n'pipelines' => [\n    'creation' => [\n        // ...\n        App\\Pipelines\\Orders\\CustomOrderPipeline::class,\n    ],   \n],\n```\n\n----------------------------------------\n\nTITLE: Limiting Queries by Customer Group in PHP\nDESCRIPTION: Examples of using customer group scope to filter query results.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/customers.md#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n// Limit products available to a single customer group\nProduct::customerGroup($customerGroup)->get();\n\n// Limit products available to multiple customer groups\nProduct::customerGroup([$groupA, $groupB])->get();\n\n// Limit to products which are available the next day\nProduct::customerGroup($groupA, now()->addDay())->get();\n\n// Limit to products which are available within a date range.\nProduct::customerGroup($groupA, now()->addDay(), now()->addDays(2))->get();\n```\n\n----------------------------------------\n\nTITLE: Associating a State with a Tax Zone in Lunar PHP\nDESCRIPTION: Shows how to associate a state with a tax zone using the TaxZoneState model. This is used when the tax zone is based on states.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/taxation.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$taxZone->states()->create([\n    'state_id' => \\Lunar\\Models\\State::first()->id,\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating and Accessing Transactions\nDESCRIPTION: Methods for creating transactions and accessing them through order relationships\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/orders.md#2025-04-21_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n\\Lunar\\Models\\Transaction::create([\n    //...\n]);\n\n// Or via the order\n$order->transactions()->create([\n    //..\n]);\n\n$order->transactions; // Get all transactions.\n$order->charges; // Get all transactions that are charges.\n$order->refunds; // Get all transactions that are refunds.\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Media Definitions in Lunar PHP Configuration\nDESCRIPTION: Demonstrates how to register a custom media definitions class for specific Lunar models in the configuration.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/media.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n\n    'definitions' => [\n        Lunar\\Models\\Product::class => CustomMediaDefinitions::class,\n        //...\n    ],\n\n    //...\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Search Models in Lunar PHP\nDESCRIPTION: Configuration for specifying which models should be included in the search index. Includes required system models and allows for adding custom models.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/search.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n'models' => [\n        // These models are required by the system, do not change them.\n        \\Lunar\\Models\\Collection::class,\n        \\Lunar\\Models\\Product::class,\n        \\Lunar\\Models\\ProductOption::class,\n        \\Lunar\\Models\\Order::class,\n        \\Lunar\\Models\\Customer::class,\n        // Below you can add your own models for indexing\n    ]\n```\n\n----------------------------------------\n\nTITLE: Creating Product Options and Values in Lunar PHP\nDESCRIPTION: Demonstrates how to create a product option with translations and add option values to it using the Lunar\\Models\\ProductOption model.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/products.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$option = Lunar\\Models\\ProductOption::create([\n    'name' => [\n        'en' => 'Colour',\n        'fr' => 'Couleur',\n    ],\n    'label' => [\n        'en' => 'Colour',\n        'fr' => 'Couleur',\n    ],\n]);\n\n// Lunar\\Models\\ProductOptionValue\n$option->values()->createMany([\n    [\n        'name' => [\n            'en' => 'Blue',\n            'fr' => 'Bleu',\n        ],\n    ],\n    [\n        'name' => [\n            'en' => 'Red',\n            'fr' => 'Rouge',\n        ],\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Setting Currency in StorefrontSession\nDESCRIPTION: Shows how to set a currency in the StorefrontSession using either a Currency object or a currency code string.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/storefront-utils/storefront-session.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$currency = new Currency([\n    'name' => 'US Dollars',\n    'code' => 'USD',\n    // ...\n]);\n\nStorefrontSession::setCurrency($currency);\nStorefrontSession::setCurrency('USD');\n```\n\n----------------------------------------\n\nTITLE: Setting Shipping Option Override Directly in Lunar PHP\nDESCRIPTION: Manually sets a shipping option override directly on the cart instance.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/carts.md#2025-04-21_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n$cart->shippingOptionOverride = new \\Lunar\\DataTypes\\ShippingOption(/* .. */);\n```\n\n----------------------------------------\n\nTITLE: Configuring Fingerprint Generator in Lunar PHP\nDESCRIPTION: Shows the configuration for the fingerprint generator class in the Lunar cart configuration file.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/carts.md#2025-04-21_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // ...\n    'fingerprint_generator' => Lunar\\Actions\\Carts\\GenerateFingerprint::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Initializing Channel in StorefrontSession\nDESCRIPTION: Initializes the channel based on previous settings or uses the default channel if none was set.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/storefront-utils/storefront-session.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nStorefrontSession::initChannel();\n```\n\n----------------------------------------\n\nTITLE: Setting Channel in StorefrontSession\nDESCRIPTION: Demonstrates how to set the channel in StorefrontSession using either a Channel object or a channel handle string.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/storefront-utils/storefront-session.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$channel = new Channel([\n    'name' => 'Webstore',\n    'handle' => 'webstore',\n]);\n\nStorefrontSession::setChannel($channel);\nStorefrontSession::setChannel('webstore');\n```\n\n----------------------------------------\n\nTITLE: Accessing and Converting Product Measurements in Lunar PHP\nDESCRIPTION: Demonstrates how to access and convert product measurements (length, volume) using the measurement accessors provided by Lunar.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/products.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$variant->length->to('length.ft')->convert();\n\n$variant->update([\n    'length_value' => 50,\n    'length_unit' => 'mm',\n    'height_value' => 50,\n    'height_unit' => 'mm',\n    'width_value' => 50,\n    'width_unit' => 'mm',\n])\n\n// By default will return ml\n$variant->volume->getValue(); // 125\n\n// Use any UOM you want for volume\n$variant->volume->to('volume.l')->convert()->getValue(); // 12.5\n\n// Set the volume manually and it'll always use that.\n$variant->update([\n    'volume_unit' => 'floz',\n    'volume_value' => 100\n]);\n\n$variant->volume->getValue(); // 100\n\n$variant->volume->to('volume.l')->convert()->getValue(); // 2.95735...\n\n$variant->length->format(); // 50cm\n```\n\n----------------------------------------\n\nTITLE: Publishing Lunar Hub Views for PDF Customization\nDESCRIPTION: Command to publish the Lunar hub views to allow customization of the PDF invoice template. This creates a customizable Blade template file at resources/vendor/lunarpanel/pdf/order.blade.php.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/orders.md#2025-04-21_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan vendor:publish --tag=lunar.hub.views\n```\n\n----------------------------------------\n\nTITLE: Adding URL Support to Custom Models in PHP\nDESCRIPTION: Shows how to implement URL functionality in custom models by using the HasUrls trait, enabling polymorphic URL relationships.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/urls.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Lunar\\Base\\Traits\\HasUrls;\n\n// ...\n\nclass MyModel extends Model\n{\n    use HasUrls;\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Shipping Estimation in CartSession in Lunar PHP\nDESCRIPTION: Shows how to control whether shipping estimation is used when retrieving the current cart.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/carts.md#2025-04-21_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n// Will not use the shipping override, default behaviour.\nCartSession::current();\n\n// Will use the shipping override, based on what is set using `estimateShippingUsing`\nCartSession::current(estimateShipping: true);\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Shipping Costs Using ShippingBreakdown in PHP\nDESCRIPTION: Example demonstrating how to modify shipping costs through the new shippingBreakdown property introduced in Lunar 0.4.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/upgrading.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Lunar\\Base\\ValueObjects\\Cart\\ShippingBreakdown;\nuse Lunar\\Base\\ValueObjects\\Cart\\ShippingBreakdownItem;\n\n$shippingBreakdown = $cart->shippingBreakdown ?: new ShippingBreakdown;\n\n$shippingBreakdown->items->put('ADDSHIP',\n    new ShippingBreakdownItem(\n        name: 'Additional Shipping Cost',\n        identifier: 'ADDSHIP',\n        price: new Price(123, $currency, 1),\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Fetching Product Dependencies in PHP\nDESCRIPTION: Retrieves existing product, tax class, and currency models from the database to use with product variants. This is an alternative to creating new entities.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/products.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$product = Product::where(...)->first();\n$taxClass = TaxClass::where(...)->first();\n$currency = Currency::where(...)->first();\n```\n\n----------------------------------------\n\nTITLE: Managing Shipping Options\nDESCRIPTION: Methods for fetching and setting shipping options on a cart\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/orders.md#2025-04-21_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n\\Lunar\\Facades\\ShippingManifest::getOptions(\\Lunar\\Models\\Cart $cart);\n```\n\nLANGUAGE: php\nCODE:\n```\n$cart->setShippingOption(\\Lunar\\DataTypes\\ShippingOption $option);\n```\n\n----------------------------------------\n\nTITLE: Initializing Customer in StorefrontSession\nDESCRIPTION: Initializes the customer based on previous session settings or retrieves the latest customer attached to the logged-in user.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/storefront-utils/storefront-session.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nStorefrontSession::initCustomer();\n```\n\n----------------------------------------\n\nTITLE: Getting Channel from StorefrontSession\nDESCRIPTION: Retrieves the currently set channel from the StorefrontSession.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/storefront-utils/storefront-session.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nStorefrontSession::getChannel();\n```\n\n----------------------------------------\n\nTITLE: Dependency Injection with CartSessionInterface\nDESCRIPTION: Demonstrates how to inject the CartSessionInterface into a class constructor as an alternative to using the facade.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/carts.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\npublic function __construct(\n    protected \\Lunar\\Base\\CartSessionInterface $cartSession\n) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting Discount Cache in Lunar PHP\nDESCRIPTION: Shows how to reset the discount cache, which is useful after adding a discount code since discounts are cached per request for performance.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/discounts.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nDiscount::resetDiscounts();\n```\n\n----------------------------------------\n\nTITLE: Publishing Lunar Configuration Files\nDESCRIPTION: Artisan command to publish Lunar's configuration files to your Laravel application. This allows you to customize various aspects of Lunar before installation.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/installation.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nphp artisan vendor:publish --tag=lunar\n```\n\n----------------------------------------\n\nTITLE: Initializing Customer Groups in StorefrontSession\nDESCRIPTION: Initializes customer groups based on previous session settings or uses the default record if none was set.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/storefront-utils/storefront-session.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nStorefrontSession::initCustomerGroups();\n```\n\n----------------------------------------\n\nTITLE: Setting Customer Groups in StorefrontSession\nDESCRIPTION: Shows how to set multiple customer groups or a single customer group in the StorefrontSession.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/storefront-utils/storefront-session.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$customerGroup = new CustomerGroup([\n    'name' => 'Retail',\n    'handle' => 'retail',\n]);\n\n// Set multiple customer groups\nStorefrontSession::setCustomerGroups(collect($customerGroup));\n\n// Set a single customer group, under the hood this will just call `setCustomerGroups`.\nStorefrontSession::setCustomerGroup($customerGroup);\n```\n\n----------------------------------------\n\nTITLE: Defining Country Model in Lunar PHP\nDESCRIPTION: Specifies the Country model class in Lunar PHP, representing countries with fields for name, ISO codes, currency, and other related information.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/addresses.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nLunar\\Models\\Country\n```\n\n----------------------------------------\n\nTITLE: Setting Shipping Estimation Parameters in Lunar PHP\nDESCRIPTION: Sets parameters for shipping estimation on the CartSession manager to avoid passing them each time.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/carts.md#2025-04-21_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nCartSession::estimateShippingUsing([\n    'postcode' => '123456',\n    'state' => 'Essex',\n    'country' => Country::first(),\n]);\n```\n\n----------------------------------------\n\nTITLE: Order Line Model Reference\nDESCRIPTION: Model reference for order line implementation in Lunar PHP\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/orders.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nLunar\\Models\\OrderLine\n```\n\n----------------------------------------\n\nTITLE: Retrieving Product Type Relationship in Lunar PHP\nDESCRIPTION: Demonstrates how to fetch the product type associated with a product, both directly and using eager loading.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/products.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$product->productType;\n\n$product->load(['productType']);\n```\n\n----------------------------------------\n\nTITLE: Managing User-Customer Relationships in PHP\nDESCRIPTION: Examples of attaching and syncing users with customer records.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/customers.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$customer = \\Lunar\\Models\\Customer::create([/* ... */]);\n\n$customer->users()->attach($user);\n\n$customer->users()->sync([1,2,3]);\n```\n\n----------------------------------------\n\nTITLE: Basic Order Model Reference - PHP\nDESCRIPTION: Reference to the core Order model class in Lunar PHP framework.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/orders.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nLunar\\Models\\Order\n```\n\n----------------------------------------\n\nTITLE: Extending CustomerGroupPricingRelationManager in PHP\nDESCRIPTION: Example class demonstrating how to extend the CustomerGroupPricingRelationManager by adding custom form fields and table columns. The extension adds a 'custom_column' form input and 'product_code' table column, while preserving existing components.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/admin/extending/relation-managers.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass MyCustomerGroupPricingRelationManagerExtension extends \\Lunar\\Admin\\Support\\Extending\\RelationManagerExtension\n{\n    public function extendForm(\\Filament\\Forms\\Form $form): \\Filament\\Forms\\Form\n    {\n        return $form->schema([\n            ...$form->getComponents(withHidden: true),\n            \n            \\Filament\\Forms\\Components\\TextInput::make('custom_column')\n        ]);\n    }\n    \n    public function extendTable(\\Filament\\Tables\\Table $table): \\Filament\\Tables\\Table\n    {\n        return $table->columns([\n            ...$table->getColumns(),\n            \\Filament\\Tables\\Columns\\TextColumn::make('product_code')\n        ]);\n    }\n}\n\n// Typically placed in your AppServiceProvider file...\nLunarPanel::extensions([\n    \\Lunar\\Admin\\Filament\\Resources\\ProductResource\\RelationManagers\\CustomerGroupPricingRelationManager::class => MyCustomerGroupPricingRelationManagerExtension::class,\n]);\n```\n\n----------------------------------------\n\nTITLE: Static Call Forwarding with Custom Lunar Models\nDESCRIPTION: This code demonstrates registering a custom model and then using static call forwarding to access custom methods from either the Lunar model class or your custom model class.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/extending/models.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// In your service provider.\npublic function boot()\n{\n    \\Lunar\\Facades\\ModelManifest::replace(\n        \\Lunar\\Models\\Contracts\\ProductVariant::class,\n        \\App\\Model\\ProductVariant::class,\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Scheduling Customer Groups in PHP\nDESCRIPTION: Examples of scheduling and managing customer group availability.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/customers.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// Will schedule for this product to be enabled in 14 days for this customer group.\n$myModel->scheduleCustomerGroup(\n    $customerGroup,\n    $startDate,\n    $endData,\n    $pivotData\n);\n\n// Schedule the product to be enabled straight away\n$myModel->scheduleCustomerGroup($customerGroup);\n\n// The schedule method will accept an array or collection of customer groups.\n$myModel->scheduleCustomerGroup(CustomerGroup::get());\n```\n\n----------------------------------------\n\nTITLE: Indexing Records Command for Lunar Search\nDESCRIPTION: Command line instruction for indexing database records into the search engine.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/search.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nphp artisan lunar:search:index\n```\n\n----------------------------------------\n\nTITLE: Custom Order Creation Action Configuration - PHP\nDESCRIPTION: Configuration example for customizing the order creation action class in the cart configuration file.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/orders.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    //  ...\n    'actions' => [\n        // ...\n        'order_create' => CustomCreateOrder::class\n    ]\n]\n```\n\n----------------------------------------\n\nTITLE: Registering Order Items Table Extension in Lunar PHP\nDESCRIPTION: Demonstrates how to register a custom extension for the order items table component to modify its behavior and appearance.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/admin/extending/order-management.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\\Lunar\\Facades\\LunarPanel::extensions([\n    \\Lunar\\Admin\\Filament\\Resources\\OrderResource\\Pages\\Components\\OrderItemsTable::class => OrderItemsTableExtension::class\n]);\n```\n\n----------------------------------------\n\nTITLE: Defining Address Model in Lunar PHP\nDESCRIPTION: Specifies the Address model class in Lunar PHP, which represents customer addresses with various fields for personal and location information.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/addresses.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nLunar\\Models\\Address\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Cart Validator\nDESCRIPTION: Configuration snippet showing how to register a custom validation class in the Lunar cart configuration file under the validators section.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/extending/carts.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n'validators' => [\n    'add_to_cart' => [\n        // ...\n        \\App\\Validation\\CartLine\\CartLineQuantity::class,\n    ],\n    // ...\n],\n```\n\n----------------------------------------\n\nTITLE: Meilisearch Setup Command for Lunar\nDESCRIPTION: Command to set up filterable and searchable attributes in Meilisearch indexes.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/search.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nphp artisan lunar:meilisearch:setup\n```\n\n----------------------------------------\n\nTITLE: Custom Reference Generator Configuration - PHP\nDESCRIPTION: Configuration for customizing the order reference generator in Lunar.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/orders.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'reference_generator' => App\\Generators\\MyCustomGenerator::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Impersonation Class in PHP\nDESCRIPTION: Configuration setup for customer impersonation functionality.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/customers.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'impersonate' => App\\Auth\\Impersonate::class,\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Extending Custom Models with Lunar Media Traits in PHP\nDESCRIPTION: Demonstrates how to add Lunar's HasMedia trait to custom models for image transformations.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/media.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Lunar\\Base\\Traits\\HasMedia;\n\nclass YourCustomModel extends Model\n{\n    use HasMedia;\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Lunar Panel List Product Page\nDESCRIPTION: Shows how to register a custom extension for the ListProduct Filament page using LunarPanel facade.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/admin/extending/overview.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Lunar\\Admin\\Support\\Facades\\LunarPanel;\nuse Lunar\\Panel\\Filament\\Resources\\ProductResource\\Pages\\ListProduct;\nuse App\\Admin\\Filament\\Resources\\Pages\\MyEditExtension;\n\nLunarPanel::extensions([\n    ListProduct::class => MyListExtension::class,\n]);\n```\n\n----------------------------------------\n\nTITLE: Custom Reference Generator Implementation - PHP\nDESCRIPTION: Example implementation of a custom order reference generator class implementing the generator interface.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/orders.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Generators;\n\nuse Lunar\\Models\\Order;\n\nclass MyCustomGenerator implements OrderReferenceGeneratorInterface\n{\n    /**\n     * {@inheritDoc}\n     */\n    public function generate(Order $order): string\n    {\n        // ...\n        return 'my-custom-reference';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customer Model Definition in PHP\nDESCRIPTION: Core customer model class reference in Lunar framework.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/customers.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nLunar\\Models\\Customer\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Pricing Pipeline in Lunar PHP Configuration\nDESCRIPTION: Example of how to register a custom pricing pipeline in the Lunar configuration. Pipelines are executed in order from top to bottom as defined in the array.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/products.md#2025-04-21_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n'pipelines' => [\n    // ...\n    App\\Pipelines\\Pricing\\CustomPricingPipeline::class,\n],\n```\n\n----------------------------------------\n\nTITLE: Custom Validator Configuration - PHP\nDESCRIPTION: Configuration example for setting up a custom order creation validator in the cart configuration.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/orders.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // ...\n    'validators' => [\n        'order_create' => MyCustomValidator::class,\n    ]\n]\n```\n\n----------------------------------------\n\nTITLE: Extending Lunar Panel Product Resource\nDESCRIPTION: Illustrates how to register a custom extension for the ProductResource Filament resource.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/admin/extending/overview.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Lunar\\Admin\\Support\\Facades\\LunarPanel;\nuse Lunar\\Panel\\Filament\\Resources\\ProductResource;\nuse App\\Admin\\Filament\\Resources\\MyProductResourceExtension;\n\nLunarPanel::extensions([\n    ProductResource::class => MyProductResourceExtension::class,\n]);\n```\n\n----------------------------------------\n\nTITLE: Order Notification Template\nDESCRIPTION: Blade template example for order notification emails\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/orders.md#2025-04-21_snippet_18\n\nLANGUAGE: blade\nCODE:\n```\n<h1>It's on the way!</h1>\n\n<p>Your order with reference {{ $order->reference }} has been dispatched!</p>\n\n<p>{{ $order->total->formatted() }}</p>\n\n@if($content ?? null)\n    <h2>Additional notes</h2>\n    <p>{{ $content }}</p>\n@endif\n\n@foreach($order->lines as $line)\n    <!--  -->\n@endforeach\n```\n\n----------------------------------------\n\nTITLE: Stripe Service Configuration\nDESCRIPTION: Updated Stripe configuration structure in services.php\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/upgrading.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n'stripe' => [\n    'key' => env('STRIPE_SECRET'),\n    'public_key' => env('STRIPE_PK'),\n    'webhooks' => [\n        'lunar' => env('LUNAR_STRIPE_WEBHOOK_SECRET'),\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Cloning Lunar monorepo to packages folder\nDESCRIPTION: This command clones the forked Lunar monorepo into the 'packages' folder. Replace 'YOUR-USERNAME' with your actual GitHub username.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/local-development.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/YOUR-USERNAME/lunar\n```\n\n----------------------------------------\n\nTITLE: Custom Model Attribute Implementation - PHP\nDESCRIPTION: Example of adding attribute functionality to a custom model using HasAttributes trait and AsAttributeData cast.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/attributes.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Lunar\\Base\\Casts\\AsAttributeData;\nuse Lunar\\Base\\Traits\\HasAttributes;\n\nclass Collection extends Model\n{\n    use HasAttributes;\n\n    /**\n     * Define which attributes should be cast.\n     *\n     * @var array\n     */\n    protected $casts = [\n        'attribute_data' => AsAttributeData::class,\n    ];\n\n    //...\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Order Validator Implementation - PHP\nDESCRIPTION: Example implementation of a custom order validation class extending the base validator.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/orders.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n//...\n\nclass MyCustomValidator extends \\Lunar\\Validation\\BaseValidator\n{\n    public function validate(): bool\n    {\n        $cart = $this->parameters['cart'];\n        \n        if ($somethingWentWrong) {\n            return $this->fail('There was an issue');\n        }\n        \n        return $this->pass();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Lunar Starter Kit with Composer\nDESCRIPTION: Creates a new Lunar e-commerce project using Composer with the livewire-starter-kit template.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/starter-kits.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer create-project --stability dev lunarphp/livewire-starter-kit my-store\n\ncd my-store\n```\n\n----------------------------------------\n\nTITLE: Accessing URLs on a Model with HasUrls Trait\nDESCRIPTION: Demonstrates how to access the URLs collection from a model that uses the HasUrls trait.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/urls.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$myModel->urls; // Collection\n```\n\n----------------------------------------\n\nTITLE: ProductType Model with Attributes - PHP\nDESCRIPTION: Implementation of HasAttributes trait in ProductType model.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/attributes.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Lunar\\Base\\Traits\\HasAttributes;\n\nclass ProductType extends Model\n{\n    use HasAttributes;\n\n    //...\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Scout in Lunar Panel Configuration\nDESCRIPTION: PHP configuration code to disable Scout integration in the Lunar panel when not using a search engine.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/installation.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n    'scout_enabled' => false,\n```\n\n----------------------------------------\n\nTITLE: Implementing Customer Group Trait in PHP\nDESCRIPTION: Adding customer group functionality to custom models using traits.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/customers.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// ...\nuse Lunar\\Base\\Traits\\HasCustomerGroups;\n\nclass MyModel extends Model\n{\n    use HasCustomerGroups;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Lunar PHP Package\nDESCRIPTION: Commands for updating the Lunar PHP package and running database migrations\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/upgrading.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncomposer update lunarphp/lunar\n```\n\nLANGUAGE: sh\nCODE:\n```\nphp artisan migrate\n```\n\n----------------------------------------\n\nTITLE: ProductVariant Model with Attribute Casting - PHP\nDESCRIPTION: ProductVariant model implementation with attribute data casting configuration.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/attributes.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Lunar\\Base\\Casts\\AsAttributeData;\n\nclass ProductVariant extends Model\n{\n    /**\n     * Define which attributes should be cast.\n     *\n     * @var array\n     */\n    protected $casts = [\n        'attribute_data' => AsAttributeData::class,\n    ];\n\n    //...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Lunar Documentation for Local Development\nDESCRIPTION: Commands for setting up and running the Lunar documentation locally. This process involves installing dependencies and starting the development server using npm.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/contributing.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run docs:dev\n```\n\n----------------------------------------\n\nTITLE: Registering Multiple Custom Models with Directory Configuration\nDESCRIPTION: This snippet shows how to register multiple custom models at once by specifying a directory for Lunar to look in. This approach assumes each model extends its counterpart Lunar model.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/extending/models.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Bootstrap any application services.\n *\n * @return void\n */\npublic function boot()\n{\n    \\Lunar\\Facades\\ModelManifest::addDirectory(\n        __DIR__.'/../Models'\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Order Management Extension in Lunar PHP\nDESCRIPTION: Shows how to register a custom order management extension class to override default order view functionality.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/admin/extending/order-management.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nLunarPanel::extensions([\n    \\Lunar\\Admin\\Filament\\Resources\\OrderResource\\Pages\\ManageOrder::class => MyManageOrderExtension::class,\n]);\n```\n\n----------------------------------------\n\nTITLE: Publishing Lunar Migrations\nDESCRIPTION: Artisan command to publish Lunar's database migrations to your Laravel application, allowing you to customize them before running.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/installation.md#2025-04-21_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nphp artisan vendor:publish --tag=lunar.migrations\n```\n\n----------------------------------------\n\nTITLE: Implementing Authorization Checks in Lunar PHP\nDESCRIPTION: Examples of how to implement authorization checks in Lunar PHP using middleware and in-code checks. This ensures that only users with the appropriate permissions can access certain functionalities.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/admin/extending/access-control.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nmiddleware('can:permission-handle')\n```\n\nLANGUAGE: php\nCODE:\n```\nAuth::user()->can('permission-handle')\n```\n\n----------------------------------------\n\nTITLE: Getting Customer Groups from StorefrontSession\nDESCRIPTION: Retrieves the currently set customer groups from the StorefrontSession.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/storefront-utils/storefront-session.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nStorefrontSession::getCustomerGroups();\n```\n\n----------------------------------------\n\nTITLE: Setting Customer in StorefrontSession\nDESCRIPTION: Demonstrates how to set a customer in the StorefrontSession after determining the current customer through store logic.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/storefront-utils/storefront-session.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$customer = /** your store logic to determine current customer */ ;\n\nStorefrontSession::setCustomer($customer);\n```\n\n----------------------------------------\n\nTITLE: Getting Customer from StorefrontSession\nDESCRIPTION: Retrieves the currently set customer from the StorefrontSession.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/storefront-utils/storefront-session.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nStorefrontSession::getCustomer();\n```\n\n----------------------------------------\n\nTITLE: Defining State Model in Lunar PHP\nDESCRIPTION: Specifies the State model class in Lunar PHP, representing states or regions within countries, including fields for name, code, and country association.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/addresses.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nLunar\\Models\\State\n```\n\n----------------------------------------\n\nTITLE: Implementing a Field Type Class for Filament Integration\nDESCRIPTION: Implementation of a custom field type class that extends BaseFieldType to integrate with Filament. This class defines how the field is rendered in the admin panel and specifies its synthesizer.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/admin/extending/attributes.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Lunar\\Admin\\Support\\FieldTypes\\BaseFieldType;\n\nclass CustomFieldType extends BaseFieldType\n{\n    protected static string $synthesizer = CustomFieldSynth::class;\n\n    public static function getFilamentComponent(Attribute $attribute): Component\n    {\n        return TextInput::make($attribute->handle);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Attribute Model Definition - PHP\nDESCRIPTION: Core attribute model path definition for Lunar PHP framework.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/attributes.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nLunar\\Models\\Attribute\n```\n\n----------------------------------------\n\nTITLE: Importing StorefrontSession Facade in PHP\nDESCRIPTION: Basic import statement for the StorefrontSession facade in Lunar PHP.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/storefront-utils/storefront-session.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Lunar\\Facades\\StorefrontSession;\n```\n\n----------------------------------------\n\nTITLE: Getting Currency from StorefrontSession\nDESCRIPTION: Retrieves the currently set currency from the StorefrontSession.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/storefront-utils/storefront-session.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nStorefrontSession::getCurrency();\n```\n\n----------------------------------------\n\nTITLE: Regenerating Media Conversions in Lunar PHP\nDESCRIPTION: Shows the Artisan command to regenerate media conversions after changing the configuration.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/media.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nphp artisan media-library:regenerate\n```\n\n----------------------------------------\n\nTITLE: Referencing DiscountPurchasable Model in Lunar PHP\nDESCRIPTION: Shows the namespace for the DiscountPurchasable model which relates purchasable items to discounts with either condition or reward types.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/discounts.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nLunar\\Models\\DiscountPurchasable\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Field Type in Service Provider\nDESCRIPTION: Code snippet showing how to register a custom field type with the AttributeData facade in a service provider. This makes the field type available for use in the Lunar admin panel.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/admin/extending/attributes.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Lunar\\Admin\\Support\\Facades\\AttributeData;\n\nAttributeData::registerFieldType(\\App\\FieldTypes\\CustomField::class, \\App\\Panel\\FieldTypes\\CustomFieldType::class);\n```\n\n----------------------------------------\n\nTITLE: Lunar Search Index Configuration Table\nDESCRIPTION: Table showing Lunar's model indexes and their sensitivity classification, prefixed with SCOUT_PREFIX environment variable\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/securing-your-site.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|Model|Index|Contains Sensitive Information|\n|:-|:-|:-|\n`\\Lunar\\Models\\Product`|`products`|❌|\n`\\Lunar\\Models\\Collection`|`collections`|❌|\n`\\Lunar\\Models\\ProductOption`|`product_options`|❌|\n`\\Lunar\\Models\\Customer`|`customers`|✅|\n`\\Lunar\\Models\\Order`|`orders`|✅|\n```\n\n----------------------------------------\n\nTITLE: Order Status Configuration\nDESCRIPTION: Configuration example for order status notifications and mailers\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/orders.md#2025-04-21_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n'statuses'     => [\n    'awaiting-payment' => [\n        'label' => 'Awaiting Payment',\n        'color' => '#848a8c',\n        'mailers' => [\n            App\\Mail\\MyMailer::class,\n            App\\Mail\\MyOtherMailer::class,\n        ],\n        'notifications' => [],\n    ],\n    // ...\n],\n```\n\n----------------------------------------\n\nTITLE: Configuring Stripe Driver and Credentials\nDESCRIPTION: Configuration settings for enabling Stripe driver and adding API credentials\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/packages/stripe/README.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    // ...\n    'types' => [\n        'card' => [\n            // ...\n            'driver' => 'stripe',\n        ],\n    ],\n];\n```\n\nLANGUAGE: php\nCODE:\n```\n'stripe' => [\n    'key' => env('STRIPE_SECRET'),\n    'public_key' => env('STRIPE_PK'),\n    'webhooks' => [\n        'lunar' => env('LUNAR_STRIPE_WEBHOOK_SECRET'),\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Configuring Price Tax Settings\nDESCRIPTION: Configuration for price storage format regarding tax inclusion.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/configuration.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n'stored_inclusive_of_tax' => false,\n```\n\n----------------------------------------\n\nTITLE: Extending Lunar Panel Edit Product Page\nDESCRIPTION: Demonstrates how to register a custom extension for the EditProduct Filament page using LunarPanel facade.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/admin/extending/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Lunar\\Admin\\Support\\Facades\\LunarPanel;\nuse Lunar\\Panel\\Filament\\Resources\\ProductResource\\Pages\\EditProduct;\nuse App\\Admin\\Filament\\Resources\\Pages\\MyEditExtension;\n\nLunarPanel::extensions([\n    EditProduct::class => MyEditExtension::class,\n]);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Product URL Format in Bash\nDESCRIPTION: Shows the difference between a numeric ID-based URL and a slug-based vanity URL for products.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/urls.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n/products/1\n```\n\nLANGUAGE: bash\nCODE:\n```\n/products/apple-iphone\n```\n\n----------------------------------------\n\nTITLE: Configuring Cart Pruning in Lunar PHP\nDESCRIPTION: Configuration for automatic cart data cleanup, including enabling/disabling pruning, setting retention periods, and defining pruning pipelines.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/carts.md#2025-04-21_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // ...\n    'prune_tables' => [\n\n        'enabled' => false,\n\n        'pipelines' => [\n            Lunar\\Pipelines\\CartPrune\\PruneAfter::class,\n            Lunar\\Pipelines\\CartPrune\\WithoutOrders::class,\n        ],\n\n        'prune_interval' => 90, // days\n\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Publishing Lunar Configuration Files in Laravel\nDESCRIPTION: Command to publish all Lunar configuration files to your Laravel application for customization.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/configuration.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan vendor:publish --tag=lunar\n```\n\n----------------------------------------\n\nTITLE: Configuring Media Transformations\nDESCRIPTION: Settings for image transformation configurations including different size presets.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/configuration.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n'transformations' => [\n    'zoom' => [\n        'width' => 500,\n        'height' => 500,\n    ],\n    'large' => [\n        // ...\n    ],\n    'medium' => [\n        // ...\n    ],\n    'small' => [\n        // ...\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Extending ProductResource with Custom Fields and Relations in PHP\nDESCRIPTION: Example class demonstrating how to extend Lunar's ProductResource with custom form fields, table columns, relation managers, pages, and navigation items. Includes registration of the extension in AppServiceProvider.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/admin/extending/resources.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass MyProductResourceExtension extends \\Lunar\\Admin\\Support\\Extending\\ResourceExtension\n{\n    public function extendForm(\\Filament\\Forms\\Form $form): \\Filament\\Forms\\Form\n    {\n        return $form->schema([\n            ...$form->getComponents(withHidden: true),\n            \n            \\Filament\\Forms\\Components\\TextInput::make('custom_column')\n        ]);\n    }\n    \n    public function extendTable(\\Filament\\Tables\\Table $table): \\Filament\\Tables\\Table\n    {\n        return $table->columns([\n            ...$table->getColumns(),\n            \\Filament\\Tables\\Columns\\TextColumn::make('product_code')\n        ]);\n    }\n    \n    public function getRelations(array $managers) : array\n    {\n        return [\n            ...$managers,\n            // This is just a standard Filament relation manager.\n            // see https://filamentphp.com/docs/3.x/panels/resources/relation-managers#creating-a-relation-manager\n            MyCustomProductRelationManager::class,\n        ];\n    }\n    \n    public function extendPages(array $pages) : array\n    {\n        return [\n            ...$pages,\n            // This is just a standard Filament page\n            // see https://filamentphp.com/docs/3.x/panels/pages#creating-a-page\n            'my-page-route-name' => MyPage::route('/{record}/my-page'),\n        ];\n    }\n    \n    public function extendSubNavigation(array $nav) : array\n    {\n        return [\n            ...$nav,\n            // This is just a standard Filament page\n            // see https://filamentphp.com/docs/3.x/panels/pages#creating-a-page\n            MyPage::class,\n        ];\n    }\n}\n\n// Typically placed in your AppServiceProvider file...\nLunarPanel::extensions([\n    \\Lunar\\Admin\\Filament\\Resources\\ProductResource::class => MyProductResourceExtension::class,\n]);\n```\n\n----------------------------------------\n\nTITLE: Updating composer.json for local Lunar development\nDESCRIPTION: This JSON snippet shows how to update the composer.json file to include the local packages directory as a repository and require the Lunar monorepo.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/local-development.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"repositories\": [{\n        \"type\": \"path\",\n        \"url\": \"packages/*\",\n        \"symlink\": true\n    }],\n\n    \"require\": {\n        \"lunarphp/lunarmono\": \"*\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Nested Collection Structure in Bash\nDESCRIPTION: Shows the resulting nested structure of collections after adding a child collection.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/collections.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n- Clearance\n    - Child\n```\n\n----------------------------------------\n\nTITLE: Using Model Observers with Custom Lunar Models\nDESCRIPTION: This snippet demonstrates that observers registered on Lunar models will still work as intended even when the models are replaced. Calls are forwarded to the appropriate class.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/extending/models.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n\\Lunar\\Models\\Product::observe(/** .. */);\n```\n\n----------------------------------------\n\nTITLE: Handling Default URL Reassignment on Deletion in PHP\nDESCRIPTION: Shows how Lunar automatically reassigns the default URL status when a default URL is deleted, selecting another URL with the same language.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/urls.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$urlA = \\Lunar\\Models\\Url::create([\n    'slug' => 'apple-iphone',\n    'language_id' => 1,\n    'default' => true,\n]);\n\n$urlB = \\Lunar\\Models\\Url::create([\n    'slug' => 'apple-iphone-26',\n    'language_id' => 1,\n    'default' => false,\n]);\n\n$urlB->default // false\n\n$urlA->delete();\n\n$urlB->default // true\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Database Connection\nDESCRIPTION: Configuration for specifying a custom database connection for Lunar operations.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/configuration.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n'connection' => 'some_custom_connection'\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Shipping Modifier in Service Provider\nDESCRIPTION: This snippet shows how to register a custom shipping modifier in a service provider's boot method. It injects the ShippingModifiers service and adds the custom modifier class to it.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/extending/shipping.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function boot(\\Lunar\\Base\\ShippingModifiers $shippingModifiers)\n{\n    $shippingModifiers->add(\n        CustomShippingModifier::class\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Attribute Group Model Definition - PHP\nDESCRIPTION: Core attribute group model path definition for organizing attributes.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/attributes.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nLunar\\Models\\AttributeGroup\n```\n\n----------------------------------------\n\nTITLE: Importing Address Data in Lunar PHP\nDESCRIPTION: Command to import countries and states data into Lunar PHP from an external database. This populates the address-related models with pre-defined data.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/addresses.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nphp artisan lunar:import:address-data\n```\n\n----------------------------------------\n\nTITLE: Configuring Pricing Pipelines in Lunar PHP\nDESCRIPTION: Example of the configuration structure for pricing pipelines in Lunar's config file. This shows where custom pricing pipelines should be registered.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/products.md#2025-04-21_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n'pipelines' => [\n    //,\n],\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic URL Generation in PHP\nDESCRIPTION: Shows how to disable the automatic URL generation in the Lunar configuration file.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/urls.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'generator' => null\n];\n```\n\n----------------------------------------\n\nTITLE: Installing Lunar Stripe Package\nDESCRIPTION: Commands for installing the Lunar Stripe package via composer and publishing configurations\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/packages/stripe/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncomposer require lunarphp/stripe\n```\n\nLANGUAGE: sh\nCODE:\n```\nphp artisan vendor:publish --tag=lunar.stripe.config\n```\n\nLANGUAGE: sh\nCODE:\n```\nphp artisan vendor:publish --tag=lunar.stripe.components\n```\n\n----------------------------------------\n\nTITLE: Implementing User Impersonation in PHP\nDESCRIPTION: Custom implementation of user impersonation functionality with URL generation.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/customers.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Auth;\n\nuse Lunar\\Hub\\Auth\\Impersonate as LunarImpersonate;\nuse Illuminate\\Contracts\\Auth\\Authenticatable;\nuse Illuminate\\Support\\Facades\\URL;\n\nclass Impersonate extends LunarImpersonate\n{\n    /**\n     * Return the URL for impersonation.\n     *\n     * @return string\n     */\n    public function getUrl(Authenticatable $authenticatable): string\n    {\n        return URL::temporarySignedRoute('impersonate.link', now()->addMinutes(5), [\n            'user' => $authenticatable->getAuthIdentifier(),\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Order Status\nDESCRIPTION: Helper methods to check if an order is draft or placed\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/orders.md#2025-04-21_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$order->isDraft();\n$order->isPlaced();\n```\n\n----------------------------------------\n\nTITLE: Unscheduling Customer Groups in PHP\nDESCRIPTION: Example of removing customer group scheduling while preserving dates.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/customers.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$myModel->unscheduleCustomerGroup($customerGroup, $pivotData);\n```\n\n----------------------------------------\n\nTITLE: Storefront Payment Integration\nDESCRIPTION: Example of backend API route for handling payment intents in the storefront\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/packages/stripe/README.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse \\Lunar\\Stripe\\Facades\\Stripe;\n\nRoute::post('api/payment-intent', function () {\n    $cart = CartSession::current();\n    $cartData = CartData::from($cart);\n\n    if ($paymentIntent = $cartData->meta['payment_intent'] ?? false) {\n        $intent = StripeFacade::fetchIntent($paymentIntent);\n    } else {\n        $intent = StripeFacade::createIntent($cart);\n    }\n\n    if ($intent->amount != $cart->total->value) {\n        StripeFacade::syncIntent($cart);\n    }\n        \n    return $intent;\n})->middleware('web');\n```\n\n----------------------------------------\n\nTITLE: Referencing Discount Model in Lunar PHP\nDESCRIPTION: Shows the namespace for the Discount model class in Lunar PHP framework.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/discounts.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nLunar\\Models\\Discount\n```\n\n----------------------------------------\n\nTITLE: Payment Intent Operations\nDESCRIPTION: Methods for fetching, syncing, updating, and canceling payment intents\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/packages/stripe/README.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Lunar\\Stripe\\Facades\\Stripe;\nuse Lunar\\Stripe\\Enums\\CancellationReason;\n\nStripe::fetchIntent($paymentIntentId);\nStripe::syncIntent(\\Lunar\\Models\\Cart $cart);\nStripe::updateIntent(\\Lunar\\Models\\Cart $cart, [\n    'shipping' => [/*..*/]\n]);\nStripe::cancelIntent(\\Lunar\\Models\\Cart $cart, CancellationReason $reason);\n```\n\n----------------------------------------\n\nTITLE: Adding Click & Collect Parameter to ShippingOption in PHP\nDESCRIPTION: Example of using the new 'collect' parameter in ShippingOption class to indicate whether a shipping option is for in-store collection, which defaults to false if not specified.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/upgrading.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nShippingManifest::addOption(\n    new ShippingOption(\n        name: 'Pick up in store',\n        description: 'Pick your order up in store',\n        identifier: 'PICKUP',\n        price: new Price(/** .. */),\n        taxClass: $taxClass,\n        collect: true\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Stripe Elements and Processing Payments in Vue.js\nDESCRIPTION: This script sets up Stripe Elements with a payment form that automatically populates billing details from customer data. It creates a payment intent via an API call and handles the payment submission process with proper error handling. The code includes form construction and Stripe confirmation logic.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/packages/stripe/README.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n<script setup>\nconst { VITE_STRIPE_PK } = import.meta.env\n\nconst stripe = Stripe(VITE_STRIPE_PK)\nconst stripeElements = ref({})\n\nconst buildForm = async () => {\n    const { data } = await axios.post(\"api/payment-intent\")\n\n    stripeElements.value = stripe.elements({\n        clientSecret: data.client_secret,\n    })\n\n    const paymentElement = stripeElements.value.create(\"payment\", {\n        layout: \"tabs\",\n        defaultValues: {\n            billingDetails: {\n                name: `{$billingAddress.value.first_name} {$billingAddress.value?.last_name}`,\n                phone: billingAddress.value?.contact_phone,\n            },\n        },\n        fields: {\n            billingDetails: \"never\",\n        },\n    })\n\n    paymentElement.mount(\"#payment-element\")\n}\n\nonMounted(async () => {\n    await buildForm()\n})\n\n// The address object can be either passed through as props or via a second API call, but it should likely come from the cart.\n\nconst submit = async () => {\n    try {\n        const address = {...}\n\n        const { error } = await stripe.confirmPayment({\n            //`Elements` instance that was used to create the Payment Element\n            elements: stripeElements.value,\n            confirmParams: {\n                return_url: 'http://yoursite.com/checkout/complete',\n                payment_method_data: {\n                    billing_details: {\n                        name: `{$address.first_name} {$address.last_name}`,\n                        email: address.contact_email,\n                        phone: address.contact_phone,\n                        address: {\n                            city: address.city,\n                            country: address.country.iso2,\n                            line1: address.line_one,\n                            line2: address.line_two,\n                            postal_code: address.postcode,\n                            state: address.state,\n                        },\n                    },\n                },\n            },\n        })\n    } catch (e) {\n    \n    }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Running composer update for Lunar installation\nDESCRIPTION: This command updates the Composer dependencies, including the locally linked Lunar package, in the Laravel application's root directory.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/local-development.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncomposer update\n```\n\n----------------------------------------\n\nTITLE: Available Lunar Panel Extendable Resources\nDESCRIPTION: Lists all available extendable resources in the Lunar Panel, including resources for products, customers, orders, and system configuration.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/admin/extending/overview.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Lunar\\Panel\\Filament\\Resources\\ActivityResource;\nuse Lunar\\Panel\\Filament\\Resources\\AttributeGroupResource;\nuse Lunar\\Panel\\Filament\\Resources\\BrandResource;\nuse Lunar\\Panel\\Filament\\Resources\\ChannelResource;\nuse Lunar\\Panel\\Filament\\Resources\\CollectionGroupResource;\nuse Lunar\\Panel\\Filament\\Resources\\CollectionResource;\nuse Lunar\\Panel\\Filament\\Resources\\CurrencyResource;\nuse Lunar\\Panel\\Filament\\Resources\\CustomerGroupResource;\nuse Lunar\\Panel\\Filament\\Resources\\CustomerResource;\nuse Lunar\\Panel\\Filament\\Resources\\DiscountResource;\nuse Lunar\\Panel\\Filament\\Resources\\LanguageReousrce;\nuse Lunar\\Panel\\Filament\\Resources\\OrderResource;\nuse Lunar\\Panel\\Filament\\Resources\\ProductOptionrResource;\nuse Lunar\\Panel\\Filament\\Resources\\ProductResource;\nuse Lunar\\Panel\\Filament\\Resources\\ProductResource;\nuse Lunar\\Panel\\Filament\\Resources\\ProductTypeResource;\nuse Lunar\\Panel\\Filament\\Resources\\ProductVariantResource;\nuse Lunar\\Panel\\Filament\\Resources\\StaffResource;\nuse Lunar\\Panel\\Filament\\Resources\\TagResource;\nuse Lunar\\Panel\\Filament\\Resources\\TaxClassResource;\nuse Lunar\\Panel\\Filament\\Resources\\TaxZoneResource;\n```\n\n----------------------------------------\n\nTITLE: Model Extension Registration - New Method\nDESCRIPTION: New method for registering extended models using contracts in Lunar\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/upgrading.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nModelManifest::replace(\n    \\Lunar\\Models\\Contracts\\Product::class,\n    \\App\\Models\\Product::class\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Lunar Starter Kit with Laravel Installer\nDESCRIPTION: Alternative installation method using the Laravel installer to create a new Lunar project.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/starter-kits.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nlaravel new my-store --using=lunarphp/livewire-starter-kit\n\ncd my-store\n```\n\n----------------------------------------\n\nTITLE: Running Lunar Installer Command\nDESCRIPTION: Artisan command to run the Lunar installer, which guides you through the setup process including creating admin users and seeding initial data.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/installation.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nphp artisan lunar:install\n```\n\n----------------------------------------\n\nTITLE: Configuring Laravel Scout Environment Variable\nDESCRIPTION: Environment variable configuration for Laravel Scout when not using a search engine. This sets the Scout driver to null.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/installation.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nSCOUT_DRIVER=null\n```\n\n----------------------------------------\n\nTITLE: Lunar Meilisearch Package Description\nDESCRIPTION: Package markdown file explaining the functionality to index filterable and sortable attributes in Meilisearch engine.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/packages/meilisearch/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Lunar Meilisearch\n\nThe package indexes filterable and sortable attributes on Meilisearch engine\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables\nDESCRIPTION: Copies the example environment configuration file to create a new .env file.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/starter-kits.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.example .env\n```\n\n----------------------------------------\n\nTITLE: Installing Lunar Core\nDESCRIPTION: Runs the Lunar installation command to set up the core functionality.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/starter-kits.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan lunar:install\n```\n\n----------------------------------------\n\nTITLE: Stripe Payment Form HTML Template\nDESCRIPTION: The HTML template for the Stripe payment form. It includes a container div with id 'payment-element' where Stripe.js will inject the payment UI components. The form uses Vue's event handling to prevent default form submission and calls the submit function instead.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/packages/stripe/README.md#2025-04-21_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<template>\n    <form @submit.prevent=\"submit\">\n        <div id=\"payment-element\">\n            <!--Stripe.js injects the Payment Element-->\n        </div>\n    </form>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating Storage Symlink\nDESCRIPTION: Creates a symbolic link for storage access in the public directory.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/starter-kits.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan storage:link\n```\n\n----------------------------------------\n\nTITLE: Seeding Demo Data\nDESCRIPTION: Populates the database with demo data for testing purposes.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/starter-kits.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan db:seed\n```\n\n----------------------------------------\n\nTITLE: Using Custom Methods via Static Call Forwarding\nDESCRIPTION: This example shows how to call custom methods defined in your model implementation through either the Lunar model class or your custom model class, demonstrating static call forwarding.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/extending/models.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n\\Lunar\\Models\\ProductVariant::someCustomMethod(); // Hello!\n\\App\\Models\\ProductVariant::someCustomMethod(); // Hello!\n```\n\n----------------------------------------\n\nTITLE: Configuring Activity Logger Database Connection\nDESCRIPTION: Environment variable configuration for Spatie's activity logger database connection.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/configuration.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nACTIVITY_LOGGER_DB_CONNECTION=some_custom_connection\n```\n\n----------------------------------------\n\nTITLE: Running Pint for Code Styling in Lunar\nDESCRIPTION: Command to run Laravel Pint for maintaining consistent code styling in the Lunar project. This should be executed before submitting a pull request to ensure code adheres to project standards.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/contributing.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/pint\n```\n\n----------------------------------------\n\nTITLE: Creating packages directory in Laravel application\nDESCRIPTION: This command creates a new directory called 'packages' in the root folder of the Laravel application and changes the current directory to it.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/local-development.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmkdir packages && cd packages\n```\n\n----------------------------------------\n\nTITLE: Configuring Order Statuses\nDESCRIPTION: Definition of order statuses with their labels and color codes for order management.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/configuration.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n'draft_status' => 'awaiting-payment',\n'statuses' => [\n    'awaiting-payment' => [\n        'label' => 'Awaiting Payment',\n        'color' => '#848a8c',\n    ],\n    'payment-received' => [\n        'label' => 'Payment Received',\n        'color' => '#6a67ce',\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Model Extension Registration - Legacy Method\nDESCRIPTION: Old method for registering extended models in Lunar\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/upgrading.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nModelManifest::register(collect([\n    Product::class => \\App\\Models\\Product::class,\n    // ...\n]));\n```\n\n----------------------------------------\n\nTITLE: LunarUser Interface Implementation\nDESCRIPTION: Implementation of LunarUser interface on User model\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/upgrading.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// ...\nclass User extends Authenticatable implements \\Lunar\\Base\\LunarUser\n{\n    use \\Lunar\\Base\\Traits\\LunarUser;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating .gitignore file for packages directory\nDESCRIPTION: This snippet shows how to add the 'packages' folder to the .gitignore file to prevent it from being committed to the Git repository.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/local-development.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n...\n/.idea\n/.vscode\n/packages\n```\n\n----------------------------------------\n\nTITLE: Configuring Fallback Images in Lunar PHP\nDESCRIPTION: Demonstrates how to set up fallback images in the Lunar configuration file or environment variables.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/media.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n'fallback' => [\n    'url' => env('FALLBACK_IMAGE_URL', null),\n    'path' => env('FALLBACK_IMAGE_PATH', null)\n]\n```\n\n----------------------------------------\n\nTITLE: Embedding Tally Form for Premium Support\nDESCRIPTION: HTML button code that embeds a Tally form for users to apply for Premium Support. The button uses data attributes to configure the form display as a modal with specific styling and emoji animations.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/support.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<button class=\"btn\" data-tally-open=\"w8R5ex\" data-tally-layout=\"modal\" data-tally-width=\"600\" data-tally-overlay=\"1\" \ndata-tally-emoji-text=\"🚀\" data-tally-emoji-animation=\"tada\">Apply for Premium Support</button>\n```\n\n----------------------------------------\n\nTITLE: Morphing Prefix Configuration\nDESCRIPTION: Configuration setting for polymorphic relationship mapping prefixes\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/upgrading.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n'morph_prefix' => null,\n```\n\n----------------------------------------\n\nTITLE: Embedding Tally Form for Custom Development\nDESCRIPTION: HTML button code that embeds a Tally form for users to inquire about custom development services. Similar to the Premium Support button, it configures the form to display as a modal with specific styling and animations.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/support.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<button class=\"btn\" data-tally-open=\"n9o5vG\" data-tally-layout=\"modal\" data-tally-width=\"600\" data-tally-overlay=\"1\"\ndata-tally-emoji-text=\"🚀\" data-tally-emoji-animation=\"tada\">Get in Touch</button>\n```\n\n----------------------------------------\n\nTITLE: Configuring VitePress Documentation Homepage for Lunar E-Commerce\nDESCRIPTION: YAML configuration for the Lunar documentation landing page. It defines the page title, description, layout, hero section with CTA buttons, and feature highlights that introduce different aspects of the Lunar ecosystem.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"Lunar Documentation\"\ndescription: \"Learn to create your next online store in Laravel with Lunar E-Commerce.\"\n\n# https://vitepress.dev/reference/default-theme-home-page\nlayout: home\n\nhero:\n  name: \"Documentation\"\n  text: \"Lunar Headless E‑Commerce\"\n  tagline: Explore our guides and examples to integrate Lunar into your Laravel application.\n  actions:\n    - theme: brand\n      text: Get Started\n      link: /core/overview\n    - theme: alt\n      text: Join us on Discord\n      link: https://discord.gg/v6qVWaf\n\nfeatures:\n  - title: E-Commerce Core\n    details: Based around Eloquent models, quickly build your online store in any Laravel stack.\n    link: /core/overview\n  - title: Admin Panel\n    details: Filament-powered admin panel to administer your product catalog, customers, orders and much more.\n    link: /admin/overview\n  - title: Support\n    details: Get community help or expert support—whatever you need for your Lunar-powered project.\n    link: /support\n---\n```\n\n----------------------------------------\n\nTITLE: Running Lunar Addons Discovery Command in PHP\nDESCRIPTION: Command to update the addon manifest after the Licensing Manager has been removed in Lunar 0.6.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/upgrading.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$ php artisan lunar:addons:discover\n```\n\n----------------------------------------\n\nTITLE: Transaction Model Reference\nDESCRIPTION: Model reference for transaction implementation in Lunar PHP\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/reference/orders.md#2025-04-21_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nLunar\\Models\\Transaction\n```\n\n----------------------------------------\n\nTITLE: Setting minimum stability for development in composer.json\nDESCRIPTION: This JSON snippet shows how to set the minimum stability to 'dev' in the composer.json file for development purposes.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/core/local-development.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"minimum-stability\": \"dev\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Configuration Fields to Custom Field Type\nDESCRIPTION: Adding configuration options to a field type using Filament form components. This allows users to customize field behavior through settings in the admin panel.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/admin/extending/attributes.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass CustomFieldType extends BaseFieldType\n{\n    // ...\n    \n    public static function getConfigurationFields(): array\n    {\n        return [\n            Grid::make(2)->schema([\n                \\Filament\\Forms\\Components\\TextInput::make('min_length'),\n                \\Filament\\Forms\\Components\\TextInput::make('max_length'),\n            ]),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Panel Path in Lunar PHP\nDESCRIPTION: Shows how to modify the default panel URL path from '/lunar' to '/admin' using the LunarPanel facade. This demonstrates the basic syntax for accessing and modifying panel properties.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/docs/admin/extending/panel.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Lunar\\Admin\\Support\\Facades\\LunarPanel;\n\nLunarPanel::panel(fn($panel) => $panel->path('admin'))\n    ->extensions([\n        // ...\n    ])\n    ->register();\n```\n\n----------------------------------------\n\nTITLE: Documentation Link in Markdown\nDESCRIPTION: Simple markdown link to the official Lunar PHP documentation website where developers can find comprehensive documentation about the admin panel.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/packages/admin/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Lunar Admin Panel\n\nSee the docs at https://docs.lunarphp.io/\n```\n\n----------------------------------------\n\nTITLE: PayPal Integration Header\nDESCRIPTION: Markdown header indicating PayPal payments integration for Lunar PHP framework, marked as work in progress.\nSOURCE: https://github.com/lunarphp/lunar/blob/1.x/packages/paypal/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Lunar PayPal Payments\\n\\nWIP\n```"
  }
]