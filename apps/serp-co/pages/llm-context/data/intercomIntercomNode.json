[
  {
    "owner": "intercom",
    "repo": "intercom-node",
    "content": "TITLE: Creating an Event with Intercom Node Client in TypeScript\nDESCRIPTION: Tracks a new event for a user or lead using the Intercom Node.js client SDK by calling the create method on the events resource. Requires an access token with write permissions. The request object should include fields like id (lead or user ID), event_name, created_at (Unix timestamp), and optional metadata. Metadata keys are limited to 10 per event and must not use nested structures. On success, the server returns a 202 Accepted status with an empty body.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_71\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait client.events.create({\n    id: \"8a88a590-e1c3-41e2-a502-e0649dbf721c\",\n    event_name: \"invited-friend\",\n    created_at: 1671028894,\n});\n```\n\n----------------------------------------\n\nTITLE: Replying to a Conversation Using Intercom Node SDK - TypeScript\nDESCRIPTION: This snippet uses the 'conversations.reply' method to post a reply to a conversation as an admin or contact user. It constructs the request with 'conversation_id' and a message 'body' including type, text, and optional user/admin identification. Dependencies are the Intercom Node SDK with access permissions. The input expects a valid conversation ID or the string \"last\" for the latest conversation. The method responds with the updated conversation object. Message types and body structure must align with the Intercom API specification.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_59\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait client.conversations.reply({\n    conversation_id: '123 or \"last\"',\n    body: {\n        message_type: \"comment\",\n        type: \"user\",\n        body: \"Thanks again :)\",\n        intercom_user_id: \"667d60f18a68186f43bafdf4\",\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Finding Contact Details in Intercom with TypeScript\nDESCRIPTION: Shows how to fetch the details of a single contact by providing the contact_id to the find method.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.contacts.find({\n    contact_id: \"63a07ddf05a32042dffac965\",\n});\n```\n\n----------------------------------------\n\nTITLE: Updating a Visitor Using TypeScript\nDESCRIPTION: Illustrates how to update visitor information with new data. Uses 'client.visitors.update' method, specifying visitor ID and updated attributes.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_95\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait client.visitors.update({\n    user_id: \"user_id\",\n    new_attribute: \"value\",\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Company with Intercom Node SDK (TypeScript)\nDESCRIPTION: Shows how to fetch a single company by specifying criteria such as 'name', 'company_id', 'tag_id', or 'segment_id'. Requires the Intercom client and valid 'Intercom.RetrieveCompanyRequest' parameters. Input includes identifiers like company name or ID, and filtering options such as tags or segments. The response is a CompanyList object containing matching company records. Proper request and options objects must be provided to ensure correct API operation.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.companies.retrieve({\n    name: \"my company\",\n    company_id: \"12345\",\n    tag_id: \"678910\",\n    segment_id: \"98765\",\n});\n```\n\n----------------------------------------\n\nTITLE: Listing Events - TypeScript\nDESCRIPTION: This snippet demonstrates how to retrieve a list of events. The API call must be made to `https://api.intercom.io/events` and requires a `type` parameter. Furthermore, you must provide either `user_id`, `email`, or `intercom_user_id` to filter the events, and the email parameter needs to be URL-encoded. This operation is limited to events that are less than 90 days old.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_69\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.events.list({\n    type: \"type\",\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Data Attribute - TypeScript\nDESCRIPTION: This snippet showcases the updating of an existing data attribute via the `update` method. The snippet specifies `data_attribute_id`, along with other potentially updateable attributes, and their values. There is a warning that the data type should not be changed via this API and to use the UI instead.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_68\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.dataAttributes.update({\n    data_attribute_id: \"1\",\n    archived: false,\n    description: \"Just a plain old ring\",\n    options: [\n        {\n            value: \"1-10\",\n        },\n        {\n            value: \"11-20\",\n        },\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Listing contacts in Intercom with optional parameters in TypeScript\nDESCRIPTION: This snippet highlights how to list contacts with optional filtering and pagination parameters through the list method. This functionality enables retrieving paged contact data, useful for synchronization or bulk processing tasks. It depends on the SDK's list method accepting filtering options, and it outputs a page of contacts for further iteration.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_36\n\nLANGUAGE: TypeScript\nCODE:\n```\nclient.contacts.list({ ...params }) -> core.Page<Intercom.Contact>\n```\n\n----------------------------------------\n\nTITLE: Listing Contacts with Intercom API in Typescript\nDESCRIPTION: This snippet demonstrates how to fetch a list of all contacts in your Intercom workspace using the Intercom Node client. It showcases two methods: iterating through all contacts and manually iterating page by page, utilizing the `hasNextPage` and `getNextPage` methods for pagination.  The `client` object is assumed to be initialized with valid API credentials.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await client.contacts.list();\nfor await (const item of response) {\n    console.log(item);\n}\n\n// Or you can manually iterate page-by-page\nlet page = await client.contacts.list();\nwhile (page.hasNextPage()) {\n    page = await page.getNextPage();\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Notes for a Contact with Intercom API in Typescript\nDESCRIPTION: This snippet shows how to fetch a list of notes associated with a specific contact in your Intercom workspace. It uses the Intercom Node client and requires a `contact_id` to identify the contact. It also showcases using pagination to iterate through all the notes for a given contact. The `client` object is assumed to be initialized with valid API credentials.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await client.notes.list({\n    contact_id: \"contact_id\",\n});\nfor await (const item of response) {\n    console.log(item);\n}\n\n// Or you can manually iterate page-by-page\nlet page = await client.notes.list({\n    contact_id: \"contact_id\",\n});\nwhile (page.hasNextPage()) {\n    page = await page.getNextPage();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Note for a Contact with Intercom API in Typescript\nDESCRIPTION: This snippet demonstrates how to add a note to a single contact in your Intercom workspace using the Intercom Node client.  It requires a `contact_id`, `body` and `admin_id`. The `client` object is assumed to be initialized with valid API credentials.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.notes.create({\n    contact_id: \"123\",\n    body: \"Hello\",\n    admin_id: \"123\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Conversation using Intercom Conversations API\nDESCRIPTION: This snippet demonstrates how to create a conversation that has been initiated by a contact using the Intercom Conversations API. The `from` parameter specifies the user or lead initiating the conversation, and the `body` parameter contains the message content.  The conversation will be an in-app message only.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_55\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.conversations.create({\n    from: {\n        type: \"user\",\n        id: \"667d60d18a68186f43bafddd\",\n    },\n    body: \"Hello there\",\n});\n```\n\n----------------------------------------\n\nTITLE: Updating a Conversation using Intercom Conversations API\nDESCRIPTION: This snippet demonstrates how to update an existing conversation using the Intercom Conversations API. The `conversation_id` parameter specifies the ID of the conversation to be updated, and other parameters like `read` and `custom_attributes` can be used to modify the conversation's properties.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_57\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.conversations.update({\n    conversation_id: \"123\",\n    display_as: \"plaintext\",\n    read: true,\n    custom_attributes: {\n        issue_type: \"Billing\",\n        priority: \"High\",\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Event Summaries Using Intercom Node Client in TypeScript\nDESCRIPTION: Fetches summaries of tracked events for a user using the summaries method provided by the Intercom Node.js SDK. Summaries include counts, first occurrence, and most recent occurrence of each event type. Accepts a request object, typically with user or lead context, and optional request options. No parameters are required for a basic invocation; more granular queries can use request customization.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_72\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait client.events.summaries();\n```\n\n----------------------------------------\n\nTITLE: Updating a Company with Intercom Node SDK (TypeScript)\nDESCRIPTION: Details the process of updating an existing company by its 'company_id', which must be the Intercom-provisioned ID. Requires the Intercom client and 'Intercom.UpdateCompanyRequest' with the 'company_id' parameter. Note: The 'company_id' field is immutable and can only be set at company creation; it cannot be changed using this method. The response is an updated Company object.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.companies.update({\n    company_id: \"5f4d3c1c-7b1b-4d7d-a97e-6095715c6632\",\n});\n```\n\n----------------------------------------\n\nTITLE: Searching Tickets with Filters Using TypeScript\nDESCRIPTION: Details how to perform advanced ticket searches based on various attributes and operators, including complex nested queries. Utilizes the 'client.tickets.search' method with a query object, pagination, and iteration over result pages.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_93\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst response = await client.tickets.search({\n    query: {\n        operator: \"AND\",\n        value: [\n            {\n                field: \"created_at\",\n                operator: \">\",\n                value: \"1306054154\",\n            },\n        ],\n    },\n    pagination: {\n        per_page: 5,\n    },\n});\nfor await (const item of response) {\n    console.log(item);\n}\n\n// Or manually iterate pages\nlet page = await client.tickets.search({\n    query: {\n        operator: \"AND\",\n        value: [\n            {\n                field: \"created_at\",\n                operator: \">\",\n                value: \"1306054154\",\n            },\n        ],\n    },\n    pagination: {\n        per_page: 5,\n    },\n});\nwhile (page.hasNextPage()) {\n    page = page.getNextPage();\n}\n```\n\n----------------------------------------\n\nTITLE: Scrolling Companies in Intercom with TypeScript\nDESCRIPTION: Demonstrates how to scroll through all companies in Intercom using the scroll method, with both automatic iteration and manual page-by-page approach.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await client.companies.scroll();\nfor await (const item of response) {\n    console.log(item);\n}\n\n// Or you can manually iterate page-by-page\nconst page = await client.companies.scroll();\nwhile (page.hasNextPage()) {\n    page = page.getNextPage();\n}\n```\n\n----------------------------------------\n\nTITLE: Finding a Note by ID with Intercom API in Typescript\nDESCRIPTION: This snippet demonstrates how to fetch the details of a single note using the Intercom Node client. It requires the `note_id` to be a valid id of the note within the intercom system. The `client` object is assumed to be initialized with valid API credentials.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.notes.find({\n    note_id: \"1\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Contact with Intercom API in Typescript\nDESCRIPTION: This snippet shows how to create a new contact (user or lead) in your Intercom workspace using the Intercom Node client. It requires the `client` object to be initialized and uses the `create` method with an email parameter to create a new contact.  It assumes the Intercom client has been properly initialized.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.contacts.create({\n    email: \"joebloggs@intercom.io\",\n});\n```\n\n----------------------------------------\n\nTITLE: Listing Conversations using Intercom Conversations API\nDESCRIPTION: This snippet demonstrates how to fetch a list of all conversations using the Intercom Conversations API. It shows two ways to iterate through the conversations: using a `for await` loop and manually iterating page by page. Pagination is used to handle large numbers of conversations.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_54\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await client.conversations.list();\nfor await (const item of response) {\n    console.log(item);\n}\n\n// Or you can manually iterate page-by-page\nconst page = await client.conversations.list();\nwhile (page.hasNextPage()) {\n    page = page.getNextPage();\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Contact in Intercom with TypeScript\nDESCRIPTION: Shows how to delete a single contact from Intercom by providing the contact_id to the delete method.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.contacts.delete({\n    contact_id: \"contact_id\",\n});\n```\n\n----------------------------------------\n\nTITLE: Searching Conversations Using Intercom Node SDK - TypeScript\nDESCRIPTION: This code snippet searches Intercom conversations matching custom criteria using the SDK's 'conversations.search' method. It demonstrates constructing a query with operators, filtering by creation timestamp, applying pagination, and handling streaming iteration or manual paging. Dependencies include the Intercom Node SDK and required authentication. Key parameters: the 'query' object (with fields: operator, value, field, operator, value) and 'pagination' (per_page). Returns an async iterator or paginated result containing matching conversation objects. Input types and valid operators depend on the field types; see the operator reference table for constraints.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_58\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst response = await client.conversations.search({\n    query: {\n        operator: \"AND\",\n        value: [\n            {\n                field: \"created_at\",\n                operator: \">\",\n                value: \"1306054154\",\n            },\n        ],\n    },\n    pagination: {\n        per_page: 5,\n    },\n});\nfor await (const item of response) {\n    console.log(item);\n}\n\n// Or you can manually iterate page-by-page\nconst page = await client.conversations.search({\n    query: {\n        operator: \"AND\",\n        value: [\n            {\n                field: \"created_at\",\n                operator: \">\",\n                value: \"1306054154\",\n            },\n        ],\n    },\n    pagination: {\n        per_page: 5,\n    },\n});\nwhile (page.hasNextPage()) {\n    page = page.getNextPage();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Data Export Job with Intercom Node Client in TypeScript\nDESCRIPTION: Initiates an asynchronous export job via the Intercom Node.js client, posting to the dataExport resource. Requires specifying at least created_at_after and created_at_before (Unix timestamps) as the date range for export; the timeframe is inclusive. Only one active export job per workspace is allowed. If a job is already pending, the API returns a 429 status. The export job does not include records updated in the range, only those created in the specified window.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_73\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait client.dataExport.create({\n    created_at_after: 1719474967,\n    created_at_before: 1719492967,\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Contact in Intercom with TypeScript\nDESCRIPTION: Demonstrates how to update an existing contact (user or lead) by providing contact_id and the fields to be updated such as email and name.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.contacts.update({\n    contact_id: \"63a07ddf05a32042dffac965\",\n    email: \"joebloggs@intercom.io\",\n    name: \"joe bloggs\",\n});\n```\n\n----------------------------------------\n\nTITLE: Tagging a Contact with Intercom API in Typescript\nDESCRIPTION: This snippet demonstrates how to tag a specific contact with a tag in Intercom workspace using Intercom Node client. It returns the updated `Tag` object. It requires a `contact_id` and a tag `id` to identify the contact and tag respectively.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.tags.tagContact({\n    contact_id: \"63a07ddf05a32042dffac965\",\n    id: \"7522907\",\n});\n```\n\n----------------------------------------\n\nTITLE: Searching contacts in Intercom using filters and pagination in TypeScript\nDESCRIPTION: This snippet shows how to perform a contact search with complex filters using the 'search' method. It accepts a query object with logical operators and a pagination configuration. The example illustrates searching for contacts created after a specific timestamp, with the option to iterate over result pages manually. Dependencies include the Intercom SDK, with request parameters adhering to the SearchRequest interface.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_35\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst response = await client.contacts.search({\n    query: {\n        operator: \"AND\",\n        value: [\n            {\n                field: \"created_at\",\n                operator: \">\",\n                value: \"1306054154\",\n            },\n        ],\n    },\n    pagination: {\n        per_page: 5,\n    },\n});\nfor await (const item of response) {\n    console.log(item);\n}\n\n// Or you can manually iterate page-by-page\nlet page = await client.contacts.search({\n    query: {\n        operator: \"AND\",\n        value: [\n            {\n                field: \"created_at\",\n                operator: \">\",\n                value: \"1306054154\",\n            },\n        ],\n    },\n    pagination: {\n        per_page: 5,\n    },\n});\nwhile (page.hasNextPage()) {\n    page = page.getNextPage();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Ticket Using TypeScript\nDESCRIPTION: Demonstrates how to create a new ticket with specific contacts and attributes such as title and description. Requires the 'client.tickets.create' method with request parameters including ticket type ID, contact list, and attributes.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_90\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait client.tickets.create({\n    ticket_type_id: \"1234\",\n    contacts: [\n        {\n            id: \"667d61b78a68186f43bafe8d\",\n        },\n    ],\n    ticket_attributes: {\n        _default_title_: \"example\",\n        _default_description_: \"there is a problem\",\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Untagging a Contact with Intercom API in Typescript\nDESCRIPTION: This snippet demonstrates how to remove a tag from a specific contact with Intercom Node client. It returns the updated `Tag` object.  It requires a `contact_id` and a `tag_id` to identify the contact and tag respectively.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.tags.untagContact({\n    contact_id: \"63a07ddf05a32042dffac965\",\n    tag_id: \"7522907\",\n});\n```\n\n----------------------------------------\n\nTITLE: Merging Visitor to Contact Intercom Node.js Client TypeScript\nDESCRIPTION: This snippet shows how to merge a Visitor into an existing Contact (either a lead or a user) using the Intercom Node.js client. If the target User exists, the Visitor is merged and deleted; otherwise, the Visitor is converted into a User. The request requires specifying the `type` of contact, details of the target `user` (e.g., id or email), and details of the `visitor` (e.g., user_id). The required parameter is `request` of type `Intercom.MergeVisitorToContactRequest`, with an optional `requestOptions` of type `Visitors.RequestOptions`.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_97\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.visitors.mergeToContact({\n    type: \"user\",\n    user: {\n        id: \"8a88a590-e1c3-41e2-a502-e0649dbf721c\",\n        email: \"foo@bar.com\",\n    },\n    visitor: {\n        user_id: \"3ecf64d0-9ed1-4e9f-88e1-da7d6e6782f3\",\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Tag using Intercom Tags API\nDESCRIPTION: This snippet demonstrates how to create a new tag using the Intercom Tags API. It requires the `client` object to be initialized and authenticated. The `name` parameter specifies the name of the tag to be created.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.tags.create({\n    name: \"test\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating News Item Intercom Node.js Client TypeScript\nDESCRIPTION: This snippet demonstrates how to create a new news item using the Intercom Node.js client. The method requires providing a request object containing details for the news item, such as `title`, `body`, `sender_id`, `state`, `deliver_silently`, `labels`, `reactions`, and `newsfeed_assignments`. The required parameter is `request` of type `Intercom.NewsItemRequest`, and an optional `requestOptions` parameter of type `Items.RequestOptions` is available.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_104\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.news.items.create({\n    title: \"Halloween is here!\",\n    body: \"<p>New costumes in store for this spooky season</p>\",\n    sender_id: 991267734,\n    state: \"live\",\n    deliver_silently: true,\n    labels: [\"Product\", \"Update\", \"New\"],\n    reactions: [\"😆\", \"😅\"],\n    newsfeed_assignments: [\n        {\n            newsfeed_id: 53,\n            published_at: 1664638214,\n        },\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Finding News Item Intercom Node.js Client TypeScript\nDESCRIPTION: This snippet shows how to fetch the details of a single news item by its ID using the Intercom Node.js client. The method requires providing the `news_item_id` in the request object. The required parameter is `request` of type `Intercom.news.FindNewsItemRequest`, and an optional `requestOptions` parameter of type `Items.RequestOptions` is available.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_105\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.news.items.find({\n    news_item_id: \"123\",\n});\n```\n\n----------------------------------------\n\nTITLE: Listing Attached Contacts for a Company with Intercom Node SDK (TypeScript)\nDESCRIPTION: Demonstrates retrieving the list of all contacts attached to a specific company. Requires the Intercom client and 'Intercom.ListAttachedContactsRequest' containing the target 'company_id'. The output is a CompanyAttachedContacts object with the set of associated contacts. This operation is useful for managing company-contact relationships and requires appropriate permissions.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.companies.listAttachedContacts({\n    company_id: \"5f4d3c1c-7b1b-4d7d-a97e-6095715c6632\",\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Ticket Details Using TypeScript\nDESCRIPTION: Illustrates how to fetch details of a specific ticket by its ID. Utilizes the 'client.tickets.get' method with request options specifying the ticket ID.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_91\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait client.tickets.get({\n    ticket_id: \"ticket_id\",\n});\n```\n\n----------------------------------------\n\nTITLE: Updating an Article in Intercom API\nDESCRIPTION: This function updates the details of a single article using the `client.articles.update()` method.  Requires the `article_id` and the fields to be updated, such as title and body. The output is an Intercom.Article object.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.articles.update({\n    article_id: \"123\",\n    title: \"Christmas is here!\",\n    body: \"<p>New gifts in store for the jolly season</p>\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Ticket Type Attribute in Intercom Node.js SDK with TypeScript\nDESCRIPTION: Creates a new attribute associated with a ticket type using specified parameters including ticket_type_id, attribute name, description, data type, and required status. Returns the created ticket type attribute object. Requires the Intercom client with proper authentication and the appropriate request structure.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_111\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait client.ticketTypes.attributes.create({\n    ticket_type_id: \"ticket_type_id\",\n    name: \"Attribute Title\",\n    description: \"Attribute Description\",\n    data_type: \"string\",\n    required_to_create: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Ticket Type - TypeScript\nDESCRIPTION: This method fetches the details of a single ticket type given a ticket type ID, represented by the `ticket_type_id` parameter.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_86\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.ticketTypes.get({\n    ticket_type_id: \"ticket_type_id\",\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Conversation State with Intercom Node SDK - TypeScript\nDESCRIPTION: This example calls 'conversations.manage' to update the status of a given conversation (e.g., close, snooze, open, or assign to an admin). It requires the conversation_id and a body detailing the action, message type, and admin assignment. The method relies on the Intercom Node SDK and expects you to have the correct permissions to alter conversation states. It returns the updated conversation object. Valid message types and statuses are prescribed by the Intercom API schema, and misuse could result in errors.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_60\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait client.conversations.manage({\n    conversation_id: \"123\",\n    body: {\n        message_type: \"close\",\n        type: \"admin\",\n        admin_id: \"12345\",\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Downloading Data Export - TypeScript\nDESCRIPTION: This method allows downloading data exports when the job's status is 'complete'. It downloads a gzipped CSV file from a provided URL, requiring the 'application/octet-stream' header. The method takes 'job_identifier' as a parameter.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_76\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.dataExport.download({\n    job_identifier: \"job_identifier\",\n});\n```\n\n----------------------------------------\n\nTITLE: Listing Teams - TypeScript\nDESCRIPTION: This method returns a list of team objects for the Intercom app.  It does not take any parameters other than the request options.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_82\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.teams.list();\n```\n\n----------------------------------------\n\nTITLE: Updating Help Center Collection Intercom Node.js Client TypeScript\nDESCRIPTION: This snippet shows how to update the details of an existing Help Center collection by its ID using the Intercom Node.js client. The method requires providing the `collection_id` and the updated fields, such as `name`, in the request object. The required parameter is `request` of type `Intercom.helpCenters.UpdateCollectionRequest`, and an optional `requestOptions` parameter of type `Collections.RequestOptions` is available.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_101\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.helpCenters.collections.update({\n    collection_id: \"123\",\n    name: \"Update collection name\",\n});\n```\n\n----------------------------------------\n\nTITLE: Searching Articles in Intercom API\nDESCRIPTION: This function searches for articles using the `client.articles.search()` method.  The essential parameter is `phrase` to search for within the articles and other parameters such as state to filter the search. The output is an Intercom.SearchArticlesResponse object.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.articles.search({\n    phrase: \"Getting started\",\n    state: \"published\",\n});\n```\n\n----------------------------------------\n\nTITLE: Listing Tags Attached to Contact in Intercom with TypeScript\nDESCRIPTION: Demonstrates how to fetch a list of all tags that are attached to a specific contact using the listAttachedTags method.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.contacts.listAttachedTags({\n    contact_id: \"63a07ddf05a32042dffac965\",\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting an Article in Intercom API\nDESCRIPTION: This function deletes a single article using the `client.articles.delete()` method.  The required parameter is `article_id`. Returns an Intercom.DeletedArticleObject.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.articles.delete({\n    article_id: \"123\",\n});\n```\n\n----------------------------------------\n\nTITLE: Listing Help Centers with Intercom Node SDK (TypeScript)\nDESCRIPTION: Demonstrates how to list help centers using the Intercom Node SDK and iterate through the results asynchronously. Requires an instance of the Intercom client and proper authentication. The method 'client.helpCenters.list()' returns a paginated response supporting both 'for await...of' iteration for entire datasets and manual page-by-page access via 'getNextPage()'. Key input parameters include request options such as 'Intercom.ListHelpCentersRequest' and 'HelpCenters.RequestOptions'. Output consists of help center items printed to the console. Pagination must be handled to avoid missing data when iterating large datasets.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await client.helpCenters.list();\nfor await (const item of response) {\n    console.log(item);\n}\n\n// Or you can manually iterate page-by-page\nconst page = await client.helpCenters.list();\nwhile (page.hasNextPage()) {\n    page = page.getNextPage();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Message - TypeScript\nDESCRIPTION: This method creates a message initiated by an admin. The conversation can be either an in-app message or an email.  It returns a Message model and requires parameters for message type, subject, body, template, sender (admin), and recipient (user). Note the delay and 404 error possibilities when sending to new contacts.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_77\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.messages.create({\n    message_type: \"email\",\n    subject: \"Thanks for everything\",\n    body: \"Hello there\",\n    template: \"plain\",\n    from: {\n        type: \"admin\",\n        id: 394051,\n    },\n    to: {\n        type: \"user\",\n        id: \"536e564f316c83104c000020\",\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Listing Companies with Pagination using Intercom Node SDK (TypeScript)\nDESCRIPTION: Illustrates listing all companies, sorted by 'last_request_at' in descending order, using the Intercom client. Code covers both asynchronous iteration over the result set via 'for await...of' and manual page-based navigation using 'hasNextPage' and 'getNextPage' calls. Input requires request parameters such as 'order', and relies on 'Intercom.ListCompaniesRequest' types. Outputs company data per item or per page. There is a result limit of 10,000 companies per the API, and companies without associated users are excluded. Use the Scroll API for iterating over larger datasets.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await client.companies.list({\n    order: \"desc\",\n});\nfor await (const item of response) {\n    console.log(item);\n}\n\n// Or you can manually iterate page-by-page\nconst page = await client.companies.list({\n    order: \"desc\",\n});\nwhile (page.hasNextPage()) {\n    page = page.getNextPage();\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Segments Attached to Contact in Intercom with TypeScript\nDESCRIPTION: Demonstrates how to fetch a list of segments associated with a specific contact using the listAttachedSegments method.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.contacts.listAttachedSegments({\n    contact_id: \"63a07ddf05a32042dffac965\",\n});\n```\n\n----------------------------------------\n\nTITLE: Finding Team - TypeScript\nDESCRIPTION: This method fetches the details of a single team based on a given team ID, which includes a list of admins on the team. The method requires `team_id`.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_83\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.teams.find({\n    team_id: \"123\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Data Attribute - TypeScript\nDESCRIPTION: This snippet demonstrates the creation of a data attribute for a contact or a company using the `create` method. It requires `name`, `model`, and `data_type` parameters. It is necessary to select what type of data attribute you are creating: `contact` or `company`.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_67\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.dataAttributes.create({\n    name: \"Mithril Shirt\",\n    model: \"company\",\n    data_type: \"string\",\n});\n```\n\n----------------------------------------\n\nTITLE: Detaching Subscription from Contact in Intercom with TypeScript\nDESCRIPTION: Shows how to remove a specific subscription from a contact by providing contact_id and subscription_id.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.contacts.detachSubscription({\n    contact_id: \"63a07ddf05a32042dffac965\",\n    subscription_id: \"37846\",\n});\n```\n\n----------------------------------------\n\nTITLE: Finding a Conversation by ID using Intercom Conversations API\nDESCRIPTION: This snippet demonstrates how to fetch the details of a single conversation using the Intercom Conversations API. The `conversation_id` parameter specifies the ID of the conversation to be retrieved, and `display_as` specifies what format to display the message as. It returns a Conversation model with all its conversation parts.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_56\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.conversations.find({\n    conversation_id: \"123\",\n    display_as: \"plaintext\",\n});\n```\n\n----------------------------------------\n\nTITLE: Updating News Item Intercom Node.js Client TypeScript\nDESCRIPTION: This snippet demonstrates how to update the details of an existing news item by its ID using the Intercom Node.js client. The method requires providing the `news_item_id` and a `body` object containing the fields to update, such as `title`, `body`, `sender_id`, and `reactions`. The required parameter is `request` of type `Intercom.news.UpdateNewsItemRequest`, and an optional `requestOptions` parameter of type `Items.RequestOptions` is available.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_106\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.news.items.update({\n    news_item_id: \"123\",\n    body: {\n        title: \"Christmas is here!\",\n        body: \"<p>New gifts in store for the jolly season</p>\",\n        sender_id: 991267745,\n        reactions: [\"😝\", \"😂\"],\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Listing Data Attributes - TypeScript\nDESCRIPTION: This snippet retrieves a list of all data attributes associated with a workspace for contacts, companies, or conversations. It employs the `list` function from the `dataAttributes` client. It takes no specific input parameters in this usage example and returns a list of data attributes.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_66\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.dataAttributes.list();\n```\n\n----------------------------------------\n\nTITLE: Fetching Details of a Single News Feed in Intercom Node.js SDK with TypeScript\nDESCRIPTION: Retrieves detailed information about a specific news feed identified by newsfeed_id. Requires the ID of the news feed to be passed. Returns structured data representing the feed's attributes and settings. Useful for viewing or editing a particular news feed resource.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_110\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait client.news.feeds.find({\n    newsfeed_id: \"123\",\n});\n```\n\n----------------------------------------\n\nTITLE: Finding Segment - TypeScript\nDESCRIPTION: This method fetches the details of a single segment based on the provided segment ID. Requires `segment_id` as a parameter.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_79\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.segments.find({\n    segment_id: \"123\",\n});\n```\n\n----------------------------------------\n\nTITLE: Tagging a Conversation with Intercom API in Typescript\nDESCRIPTION: This snippet demonstrates how to tag a specific conversation with a tag in Intercom workspace using Intercom Node client. It returns the updated `Tag` object.  It requires a `conversation_id`, `id` and `admin_id` to identify the conversation, tag and admin respectively.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.tags.tagConversation({\n    conversation_id: \"64619700005694\",\n    id: \"7522907\",\n    admin_id: \"780\",\n});\n```\n\n----------------------------------------\n\nTITLE: Finding Help Center Collection Intercom Node.js Client TypeScript\nDESCRIPTION: This snippet demonstrates how to fetch the details of a single Help Center collection by its ID using the Intercom Node.js client. The method requires providing the `collection_id` in the request object. The required parameter is `request` of type `Intercom.helpCenters.FindCollectionRequest`, and an optional `requestOptions` parameter of type `Collections.RequestOptions` is available.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_100\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.helpCenters.collections.find({\n    collection_id: \"123\",\n});\n```\n\n----------------------------------------\n\nTITLE: Canceling a Data Export Job Using Intercom Node Client in TypeScript\nDESCRIPTION: Allows cancellation of an in-progress data export job through the Intercom Node.js client's cancel method. The operation requires only the job_identifier, referencing the job to cancel. The API will attempt to cancel the export process if it is still active, and the status will be reflected when subsequently querying job details.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_75\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait client.dataExport.cancel({\n    job_identifier: \"job_identifier\",\n});\n```\n\n----------------------------------------\n\nTITLE: Listing Articles in Intercom API\nDESCRIPTION: This function fetches a list of all articles using the `client.articles.list()` method.  It uses pagination to handle potentially large result sets.  Returns a core.Page<Intercom.ArticleListItem> object which allows iterating through the results. The file also provides examples of how to iterate through articles using the returned page object.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await client.articles.list();\nfor await (const item of response) {\n    console.log(item);\n}\n\n// Or you can manually iterate page-by-page\nconst page = await client.articles.list();\nwhile (page.hasNextPage()) {\n    page = page.getNextPage();\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Company with Intercom Node SDK (TypeScript)\nDESCRIPTION: Shows how to delete a company by specifying its 'company_id'. Requires use of the Intercom client and 'Intercom.DeleteCompanyRequest' parameter object. Input must include the Intercom-issued 'company_id' for the company to be deleted. The result is a 'DeletedCompanyObject' indicating the outcome of the deletion operation. Ensure necessary permissions and data backups as deletions are permanent.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.companies.delete({\n    company_id: \"5f4d3c1c-7b1b-4d7d-a97e-6095715c6632\",\n});\n```\n\n----------------------------------------\n\nTITLE: Attaching Contact to Company in Intercom with TypeScript\nDESCRIPTION: Shows how to attach a contact to a company using the attachContact method by providing contact_id and company id.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.companies.attachContact({\n    contact_id: \"contact_id\",\n    id: \"667d608d8a68186f43bafd70\",\n});\n```\n\n----------------------------------------\n\nTITLE: Archiving a Contact with Intercom API in Typescript\nDESCRIPTION: This snippet demonstrates how to archive a single contact in your Intercom workspace using the Intercom Node client. It requires a `contact_id` to identify the contact to be archived. The `client` object is assumed to be initialized with valid API credentials and the contact_id must be a valid ID within the intercom system.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.contacts.archive({\n    contact_id: \"63a07ddf05a32042dffac965\",\n});\n```\n\n----------------------------------------\n\nTITLE: Listing News Feed Items in Intercom Node.js SDK with TypeScript\nDESCRIPTION: Fetches a paginated list of live news items for a specified news feed using the Intercom Node.js client. Requires a single parameter newsfeed_id to identify which news feed to retrieve items from. Returns a paginated response encapsulating news item data. Dependent on the Intercom client being instantiated and authenticated prior to calling.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_108\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait client.news.feeds.listItems({\n    newsfeed_id: \"123\",\n});\n```\n\n----------------------------------------\n\nTITLE: Detaching Contact from Company in Intercom with TypeScript\nDESCRIPTION: Demonstrates how to detach a contact from a company using the detachContact method by providing contact_id and company_id.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.companies.detachContact({\n    contact_id: \"58a430d35458202d41b1e65b\",\n    company_id: \"58a430d35458202d41b1e65b\",\n});\n```\n\n----------------------------------------\n\nTITLE: Attaching a Contact as an Admin to a Conversation - Intercom Node SDK - TypeScript\nDESCRIPTION: This code attaches a contact to a conversation on behalf of a specified admin using 'conversations.attachContactAsAdmin'. Required inputs are the 'conversation_id', 'admin_id', and a 'customer' object with the Intercom user ID. If an email is used and matches no existing contact, a new 'lead' is created. It depends on the Intercom Node SDK, and responses include the updated conversation. Ensure the contact exists or be aware new contacts may be created.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_62\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait client.conversations.attachContactAsAdmin({\n    conversation_id: \"123\",\n    admin_id: \"12345\",\n    customer: {\n        intercom_user_id: \"667d61168a68186f43bafe0d\",\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Converting Conversation to Ticket - TypeScript\nDESCRIPTION: This snippet converts a conversation into a ticket. It utilizes the `convertToTicket` method and necessitates a `conversation_id` and `ticket_type_id` as input. No additional preconditions or limitations are explicitly stated.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_65\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.conversations.convertToTicket({\n    conversation_id: \"123\",\n    ticket_type_id: \"79\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating or Updating a Company with Intercom Node SDK (TypeScript)\nDESCRIPTION: Illustrates how to create a new company or update an existing one based on the 'company_id'. Requires the Intercom client, 'Intercom.CreateOrUpdateCompanyRequest', and relevant company data ('name', 'company_id', 'remote_created_at'). The API performs a lookup on 'company_id' via a POST. If not found, it creates the company; if found, it updates the company record. Note: 'company_id' can only be set upon creation and cannot be updated afterwards. The response is a Company object representing the created or updated entity.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.companies.createOrUpdate({\n    name: \"my company\",\n    company_id: \"company_remote_id\",\n    remote_created_at: 1374138000,\n});\n```\n\n----------------------------------------\n\nTITLE: Listing Segments - TypeScript\nDESCRIPTION: This method fetches a list of all segments within Intercom. It requires no specific parameters, and the returned value is a list of Segment objects.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_78\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.segments.list();\n```\n\n----------------------------------------\n\nTITLE: Finding a Company by ID with Intercom Node SDK (TypeScript)\nDESCRIPTION: Explains how to fetch a single company using its 'company_id'. The Intercom client and 'Intercom.FindCompanyRequest' are required. Input must include the 'company_id' of the target company. The response is a Company object with details about the specified company. This operation is used when you already know the unique identifier issued by Intercom for the company.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.companies.find({\n    company_id: \"5f4d3c1c-7b1b-4d7d-a97e-6095715c6632\",\n});\n```\n\n----------------------------------------\n\nTITLE: Listing Attached Segments for a Company with Intercom Node SDK (TypeScript)\nDESCRIPTION: Explains how to get all segments that are attached to a specific company. Requires the Intercom client and 'Intercom.ListSegmentsAttachedToCompanyRequest', with the target 'company_id' provided. Outputs a CompanyAttachedSegments object detailing the segments for the company. Assumes segments exist and company ID is accurate.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.companies.listAttachedSegments({\n    company_id: \"5f4d3c1c-7b1b-4d7d-a97e-6095715c6632\",\n});\n```\n\n----------------------------------------\n\nTITLE: Listing Admins in Intercom API\nDESCRIPTION: This function fetches a list of admins for a given workspace using the `client.admins.list()` method.  It requires an initialized and authenticated Intercom client. The function returns an Intercom.AdminList object.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.admins.list();\n```\n\n----------------------------------------\n\nTITLE: Replying to a Ticket Using TypeScript\nDESCRIPTION: Shows how to reply to an existing ticket with a message, specifying message details such as type, body, and user ID. Requires the 'client.tickets.reply' method with a request object containing ticket ID and message body.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_89\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait client.tickets.reply({\n    ticket_id: \"123\",\n    body: {\n        message_type: \"comment\",\n        type: \"user\",\n        body: \"Thanks again :)\",\n        intercom_user_id: \"667d619d8a68186f43bafe82\",\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Phone Call Redirect - TypeScript\nDESCRIPTION: This method allows redirecting phone calls to the Intercom Messenger. It sends an SMS with a Messenger link to the specified phone number and optionally adds custom attributes to the user or lead's custom data.  Takes phone number and custom_attributes as input.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_81\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.phoneCallRedirects.create({\n    phone: \"+353832345678\",\n    custom_attributes: {\n        issue_type: \"Billing\",\n        priority: \"High\",\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Untagging a Conversation with Intercom API in Typescript\nDESCRIPTION: This snippet demonstrates how to remove a tag from a specific conversation with Intercom Node client. It returns the updated `Tag` object. It requires a `conversation_id`, `tag_id` and `admin_id` to identify the conversation, tag and admin respectively.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.tags.untagConversation({\n    conversation_id: \"64619700005694\",\n    tag_id: \"7522907\",\n    admin_id: \"123\",\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Admin Away Status in Intercom API\nDESCRIPTION: This function sets an admin's away status for the Inbox.  It uses the `client.admins.away()` method.  Required parameters include `admin_id`, `away_mode_enabled` and `away_mode_reassign`. The output is an Intercom.Admin object.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.admins.away({\n    admin_id: \"admin_id\",\n    away_mode_enabled: true,\n    away_mode_reassign: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Ticket Type - TypeScript\nDESCRIPTION: This method updates an existing ticket type, using parameters such as ticket_type_id and updated properties like name.  The icon property should use a valid emoji from the Twemoji Cheatsheet.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_87\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.ticketTypes.update({\n    ticket_type_id: \"ticket_type_id\",\n    name: \"Bug Report 2\",\n});\n```\n\n----------------------------------------\n\nTITLE: Finding the Status of a Data Export Job with Intercom Node Client in TypeScript\nDESCRIPTION: Retrieves the status of an existing data export job by invoking the find method with the export job's identifier as input. The client sends a GET request to fetch job metadata, including download links, job state, and expiry. Jobs expire two days after completion. Input must provide a valid job_identifier as received from the job creation response.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_74\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait client.dataExport.find({\n    job_identifier: \"job_identifier\",\n});\n```\n\n----------------------------------------\n\nTITLE: Merging two contacts using Intercom SDK in TypeScript\nDESCRIPTION: This snippet demonstrates how to merge two contact records in Intercom by invoking the mergeLeadInUser method on the client.contacts API. It requires identifiers for the 'from' and 'into' contacts as string IDs and utilizes request parameters for merging. Dependencies include the Intercom SDK, and it assumes a properly instantiated client object.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_34\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait client.contacts.mergeLeadInUser({\n    from: \"667d60ac8a68186f43bafdbb\",\n    into: \"667d60ac8a68186f43bafdbc\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Ticket Type - TypeScript\nDESCRIPTION: This method creates a new ticket type, with properties like name, description, category, and icon. Note the suggestion to use Twemoji cheatsheet for the icon.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_85\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.ticketTypes.create({\n    name: \"Customer Issue\",\n    description: \"Customer Report Template\",\n    category: \"Customer\",\n    icon: \"\\uD83C\\uDF9F\\uFE0F\",\n});\n```\n\n----------------------------------------\n\nTITLE: Updating a Ticket Type Attribute in Intercom Node.js SDK with TypeScript\nDESCRIPTION: Updates details of an existing attribute for a specified ticket type. Parameters include ticket_type_id, attribute_id, and updated fields such as description. The method returns the updated ticket type attribute object. Requires correct identification of the attribute and ticket type, and proper request structure.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_112\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait client.ticketTypes.attributes.update({\n    ticket_type_id: \"ticket_type_id\",\n    attribute_id: \"attribute_id\",\n    description: \"New Attribute Description\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an Article in Intercom API\nDESCRIPTION: This function creates a new article by sending a POST request using the `client.articles.create()` method. Requires parameters for the article's title, description, body, author ID, state, and potentially translated content. Returns an Intercom.Article object.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.articles.create({\n    title: \"Thanks for everything\",\n    description: \"Description of the Article\",\n    body: \"Body of the Article\",\n    author_id: 991267407,\n    state: \"published\",\n    parent_id: 145,\n    parent_type: \"collection\",\n    translated_content: {\n        fr: {\n            type: \"article_content\",\n            title: \"Merci pour tout\",\n            description: \"Description de l'article\",\n            body: \"Corps de l'article\",\n            author_id: 991267407,\n            state: \"published\",\n        },\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Finding a Visitor Using TypeScript\nDESCRIPTION: Shows how to retrieve details of a specific visitor by user ID. Involves calling 'client.visitors.find' with request parameters identifying the visitor's user ID.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_94\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait client.visitors.find({\n    user_id: \"user_id\",\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination for List Endpoints\nDESCRIPTION: Shows two methods for handling pagination: using async iterators to loop through all items, or manually iterating page-by-page.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { IntercomClient } from \"intercom-client\";\n\nconst client = new IntercomClient({ token: \"YOUR_TOKEN\" });\nconst response = await client.articles.list();\nfor await (const item of response) {\n    console.log(item);\n}\n\n// Or you can manually iterate page-by-page\nconst page = await client.articles.list();\nwhile (page.hasNextPage()) {\n    page = page.getNextPage();\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting News Item Intercom Node.js Client TypeScript\nDESCRIPTION: This snippet shows how to delete a single news item by its ID using the Intercom Node.js client. The method requires providing the `news_item_id` in the request object. The required parameter is `request` of type `Intercom.news.DeleteNewsItemRequest`, and an optional `requestOptions` parameter of type `Items.RequestOptions` is available. The response object will indicate the deletion status.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_107\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.news.items.delete({\n    news_item_id: \"123\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Help Center Collection Intercom Node.js Client TypeScript\nDESCRIPTION: This snippet shows how to create a new Help Center collection using the Intercom Node.js client. The method requires providing a request object that includes the `name` for the new collection. The required parameter is `request` of type `Intercom.helpCenters.CreateCollectionRequest`, and an optional `requestOptions` parameter of type `Collections.RequestOptions` is also available.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_99\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.helpCenters.collections.create({\n    name: \"Thanks for everything\",\n});\n```\n\n----------------------------------------\n\nTITLE: Listing Help Center Collections Intercom Node.js Client TypeScript\nDESCRIPTION: This snippet demonstrates how to fetch a list of all Help Center collections using the Intercom Node.js client. Collections are returned in descending order of the `updated_at` attribute. The example shows two methods: iterating through results directly using `for await...of` and manually iterating page by page using `hasNextPage` and `getNextPage`. The method takes an optional `request` parameter of type `Intercom.helpCenters.ListCollectionsRequest` and an optional `requestOptions` of type `Collections.RequestOptions`.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_98\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await client.helpCenters.collections.list();\nfor await (const item of response) {\n    console.log(item);\n}\n\n// Or you can manually iterate page-by-page\nconst page = await client.helpCenters.collections.list();\nwhile (page.hasNextPage()) {\n    page = page.getNextPage();\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Companies Attached to Contact in Intercom with TypeScript\nDESCRIPTION: Shows how to retrieve a list of companies associated with a specific contact using both automatic iteration and manual page-by-page approach.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await client.contacts.listAttachedCompanies({\n    contact_id: \"63a07ddf05a32042dffac965\",\n});\nfor await (const item of response) {\n    console.log(item);\n}\n\n// Or you can manually iterate page-by-page\nconst page = await client.contacts.listAttachedCompanies({\n    contact_id: \"63a07ddf05a32042dffac965\",\n});\nwhile (page.hasNextPage()) {\n    page = page.getNextPage();\n}\n```\n\n----------------------------------------\n\nTITLE: Unarchiving a Contact with Intercom API in Typescript\nDESCRIPTION: This snippet demonstrates how to unarchive a single contact in your Intercom workspace using the Intercom Node client. It requires a `contact_id` to identify the contact to be unarchived.  The `client` object is assumed to be initialized with valid API credentials and the contact_id must be a valid ID within the intercom system.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.contacts.unarchive({\n    contact_id: \"63a07ddf05a32042dffac965\",\n});\n```\n\n----------------------------------------\n\nTITLE: Tagging a Ticket using Intercom Tags API\nDESCRIPTION: This snippet shows how to tag a specific ticket using the Intercom Tags API.  The `ticket_id`, `id` (tag id), and `admin_id` parameters are required. It returns a tag object for the tag that was added to the ticket.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_52\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.tags.tagTicket({\n    ticket_id: \"64619700005694\",\n    id: \"7522907\",\n    admin_id: \"780\",\n});\n```\n\n----------------------------------------\n\nTITLE: Updating a Ticket Using TypeScript\nDESCRIPTION: Shows how to update an existing ticket's attributes, state, or assignment. Uses the 'client.tickets.update' method with parameters like ticket ID, new attributes, status, and assignment details.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_92\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait client.tickets.update({\n    ticket_id: \"ticket_id\",\n    ticket_attributes: {\n        _default_title_: \"example\",\n        _default_description_: \"there is a problem\",\n    },\n    state: \"in_progress\",\n    open: true,\n    snoozed_until: 1673609604,\n    assignment: {\n        admin_id: \"991267883\",\n        assignee_id: \"991267885\",\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Untagging a Ticket using Intercom Tags API\nDESCRIPTION: This snippet demonstrates how to remove a tag from a specific ticket using the Intercom Tags API. The `ticket_id`, `tag_id`, and `admin_id` parameters are required. It returns a tag object for the tag that was removed from the ticket.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_53\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.tags.untagTicket({\n    ticket_id: \"64619700005694\",\n    tag_id: \"7522907\",\n    admin_id: \"123\",\n});\n```\n\n----------------------------------------\n\nTITLE: Identifying Admin in Intercom API\nDESCRIPTION: This function retrieves the currently authorized admin along with the embedded app object, representing the workspace.  It uses the `client.admins.identify()` method to fetch the admin information. Requires the Intercom client to be initialized and authenticated. The output is an Intercom.AdminWithApp object.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.admins.identify();\n```\n\n----------------------------------------\n\nTITLE: Listing News Items Intercom Node.js Client TypeScript\nDESCRIPTION: This snippet shows how to fetch a list of all news items using the Intercom Node.js client. The method returns a paginated response containing the list of news items. It takes an optional `requestOptions` parameter of type `Items.RequestOptions`.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_103\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.news.items.list();\n```\n\n----------------------------------------\n\nTITLE: Listing All News Feeds in Intercom Node.js SDK with TypeScript\nDESCRIPTION: Retrieves a paginated list of all news feeds available via the Intercom Node.js client. This method does not require parameters, but supports optional request options for customization. Returns a paginated news feed response including metadata and feeds data. Ideal for inventory or selection purposes.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_109\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait client.news.feeds.list();\n```\n\n----------------------------------------\n\nTITLE: Finding a Single Help Center in Intercom API\nDESCRIPTION: This function fetches details of a single help center using the `client.helpCenters.find()` method.  The crucial parameter is `help_center_id`, which identifies the help center. The output is an Intercom.HelpCenter object.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.helpCenters.find({\n    help_center_id: \"123\",\n});\n```\n\n----------------------------------------\n\nTITLE: Listing Help Centers in Intercom API\nDESCRIPTION: This function lists all Help Centers using the `client.helpCenters.list()` method.  Returns a core.Page<Intercom.HelpCenter> object. This object allows iteration, including the method to fetch the next page.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.helpCenters.list();\n```\n\n----------------------------------------\n\nTITLE: Finding a Tag by ID using Intercom Tags API\nDESCRIPTION: This snippet shows how to find a tag by its ID using the Intercom Tags API.  The `tag_id` parameter specifies the ID of the tag to be retrieved. It returns a tag object if the tag is found.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.tags.find({\n    tag_id: \"123\",\n});\n```\n\n----------------------------------------\n\nTITLE: Finding a Single Article in Intercom API\nDESCRIPTION: This function fetches details of a single article using the `client.articles.find()` method. The key parameter is `article_id`, which identifies the article. Returns an Intercom.Article object.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.articles.find({\n    article_id: \"123\",\n});\n```\n\n----------------------------------------\n\nTITLE: Listing Subscriptions Attached to Contact in Intercom with TypeScript\nDESCRIPTION: Shows how to retrieve a list of subscription types that are attached to a contact, including both opt-in and opt-out subscriptions.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.contacts.listAttachedSubscriptions({\n    contact_id: \"63a07ddf05a32042dffac965\",\n});\n```\n\n----------------------------------------\n\nTITLE: Handling API Exceptions in TypeScript\nDESCRIPTION: Demonstrates error handling with the IntercomError class, which provides access to the status code, error message, and response body.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { IntercomError } from \"intercom-client\";\n\ntry {\n    await client.articles.create(...);\n} catch (err) {\n    if (err instanceof IntercomError) {\n        console.log(err.statusCode);\n        console.log(err.message);\n        console.log(err.body);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Subscription Types - TypeScript\nDESCRIPTION: This method lists all subscription types available. It retrieves a list of subscription type objects and requires no specific parameters other than RequestOptions.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_80\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.subscriptionTypes.list();\n```\n\n----------------------------------------\n\nTITLE: Basic Client Usage in TypeScript\nDESCRIPTION: Shows how to instantiate the Intercom client and create an article. Requires an API token for authentication.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { IntercomClient } from \"intercom-client\";\n\nconst client = new IntercomClient({ token: \"YOUR_TOKEN\" });\nawait client.articles.create({\n    title: \"Thanks for everything\",\n    description: \"Description of the Article\",\n    body: \"Body of the Article\",\n    author_id: 1295,\n    state: \"published\",\n});\n```\n\n----------------------------------------\n\nTITLE: Listing Tags with Intercom API in Typescript\nDESCRIPTION: This snippet demonstrates how to fetch a list of all tags for a given workspace using the Intercom Node client.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.tags.list();\n```\n\n----------------------------------------\n\nTITLE: Redacting Conversation Part - TypeScript\nDESCRIPTION: This snippet demonstrates how to redact a conversation part or the source message within a conversation.  It uses the `redactConversationPart` function and requires a `conversation_id` and `conversation_part_id`.  If redacting a conversation part, a `body` is required.  If redacting a source message, the message must have been created by a contact.  It returns a `conversation_part_not_redactable` error if criteria are not met.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_64\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.conversations.redactConversationPart({\n    type: \"conversation_part\",\n    conversation_id: \"19894788788\",\n    conversation_part_id: \"19381789428\",\n});\n```\n\n----------------------------------------\n\nTITLE: Setting European API Base URL\nDESCRIPTION: Shows how to configure the client to use the European Intercom API instance directly rather than being redirected through the US instance.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/README.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nclient.useRequestOpts({\n    baseURL: \"https://api.eu.intercom.io\",\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting Help Center Collection Intercom Node.js Client TypeScript\nDESCRIPTION: This snippet demonstrates how to delete a single Help Center collection by its ID using the Intercom Node.js client. The method requires providing the `collection_id` in the request object. The required parameter is `request` of type `Intercom.helpCenters.DeleteCollectionRequest`, and an optional `requestOptions` parameter of type `Collections.RequestOptions` is available. The response object will indicate the deletion status.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_102\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.helpCenters.collections.delete({\n    collection_id: \"123\",\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing the Fetch Client\nDESCRIPTION: Shows how to provide a custom fetch implementation for environments not natively supported by the SDK.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/README.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { IntercomClient } from \"intercom-client\";\n\nconst client = new IntercomClient({\n    ...\n    fetcher: // provide your implementation here\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Retry Behavior\nDESCRIPTION: Demonstrates how to override the default retry behavior for API requests by setting maxRetries at the request level.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await client.articles.create(..., {\n    maxRetries: 0 // override maxRetries at the request level\n});\n```\n\n----------------------------------------\n\nTITLE: Detaching Contact from Conversation - TypeScript\nDESCRIPTION: This snippet detaches a contact from a conversation as an admin.  It uses the `detachContactAsAdmin` function from the `conversations` client.  Requires a conversation ID, a contact ID, and an admin ID as parameters.  There are no specific limitations mentioned.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_63\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.conversations.detachContactAsAdmin({\n    conversation_id: \"123\",\n    contact_id: \"123\",\n    admin_id: \"5017690\",\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Request and Response Types\nDESCRIPTION: Shows how to import and use TypeScript interfaces for request and response types from the Intercom SDK.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Intercom } from \"intercom-client\";\n\nconst request: Intercom.ConfigureAwayAdminRequest = {\n    ...\n};\n```\n\n----------------------------------------\n\nTITLE: Deleting a Tag by ID using Intercom Tags API\nDESCRIPTION: This snippet demonstrates how to delete a tag by its ID using the Intercom Tags API. The `tag_id` parameter specifies the ID of the tag to be deleted.  No value is returned upon successful deletion.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.tags.delete({\n    tag_id: \"123\",\n});\n```\n\n----------------------------------------\n\nTITLE: Attaching Subscription to Contact in Intercom with TypeScript\nDESCRIPTION: Demonstrates how to add a specific subscription to a contact, specifying the consent type (opt-in), which determines how the subscription will function.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.contacts.attachSubscription({\n    contact_id: \"63a07ddf05a32042dffac965\",\n    id: \"37846\",\n    consent_type: \"opt_in\",\n});\n```\n\n----------------------------------------\n\nTITLE: Listing All Activity Logs in Intercom API\nDESCRIPTION: This function retrieves a log of activities by all admins in the app using the `client.admins.listAllActivityLogs()` method.  Key parameters are `created_at_after` and `created_at_before`, specifying the time range for the logs. The output is an Intercom.ActivityLogList object.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.admins.listAllActivityLogs({\n    created_at_after: \"1677253093\",\n    created_at_before: \"1677861493\",\n});\n```\n\n----------------------------------------\n\nTITLE: Finding a Single Admin in Intercom API\nDESCRIPTION: This function retrieves the details of a single admin using the `client.admins.find()` method.  The essential parameter is `admin_id`, which identifies the admin. The output is an Intercom.Admin object.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.admins.find({\n    admin_id: \"123\",\n});\n```\n\n----------------------------------------\n\nTITLE: Aborting Requests with AbortController\nDESCRIPTION: Demonstrates how to cancel in-flight requests using the AbortController pattern.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/README.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst controller = new AbortController();\nconst response = await client.articles.create(..., {\n    abortSignal: controller.signal\n});\ncontroller.abort(); // aborts the request\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Headers to Requests\nDESCRIPTION: Shows how to include additional headers in API requests using the headers request option.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await client.articles.create(..., {\n    headers: {\n        'X-Custom-Header': 'custom value'\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Request Options\nDESCRIPTION: Demonstrates how to set global request options, such as changing the base URL for API requests.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/README.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nclient.useRequestOpts({\n    baseURL: \"http://local.test-server.com\",\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Visitor Intercom Node.js Client TypeScript\nDESCRIPTION: This snippet demonstrates how to update an existing Visitor using the Intercom Node.js client. The update can be performed by providing either the visitor's `id` or `user_id` in the request body. The request also includes parameters like `name` to modify the visitor's attributes. The required parameter is `request` of type `Intercom.UpdateVisitorRequest`, and an optional `requestOptions` parameter of type `Visitors.RequestOptions` is also available.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_96\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.visitors.update({\n    id: \"667d61cc8a68186f43bafe95\",\n    name: \"Gareth Bale\",\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Request Timeouts\nDESCRIPTION: Shows how to customize the timeout duration for API requests, overriding the default 60-second timeout.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/README.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await client.articles.create(..., {\n    timeoutInSeconds: 30 // override timeout to 30s\n});\n```\n\n----------------------------------------\n\nTITLE: Listing Ticket Types - TypeScript\nDESCRIPTION: This method lists all ticket types available in the workspace.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_84\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.ticketTypes.list();\n```\n\n----------------------------------------\n\nTITLE: Auto-Assigning Conversations Using Assignment Rules (Deprecated) - Intercom Node SDK - TypeScript\nDESCRIPTION: This snippet uses 'conversations.runAssignmentRules' to automatically assign a conversation based on assignment rules configured in Intercom. The method is deprecated and will be removed after December 31, 2026. Key input: 'conversation_id'; output: conversation object post-assignment. The endpoint should not be used with Workflows, and any calls after deprecation will fail. Required: Intercom Node SDK and relevant permissions.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_61\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait client.conversations.runAssignmentRules({\n    conversation_id: \"123\",\n});\n```\n\n----------------------------------------\n\nTITLE: Replying to Tickets - TypeScript\nDESCRIPTION: This method is for replying to a ticket.  Requires parameters such as body and any other required parameters.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_88\n\n\n\n----------------------------------------\n\nTITLE: Creating an Event - TypeScript\nDESCRIPTION: This snippet demonstrates creating an event. The code snippet is missing, so only the signature is shown.  No further context or details are available in this example, other than a void return.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/reference.md#_snippet_70\n\n\n\n----------------------------------------\n\nTITLE: Installing the Intercom Client\nDESCRIPTION: Command to install the Intercom TypeScript SDK via npm.\nSOURCE: https://github.com/intercom/intercom-node/blob/master/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -s intercom-client\n```"
  }
]