[
  {
    "owner": "unjs",
    "repo": "h3",
    "content": "TITLE: Creating a Basic h3 Server in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a basic h3 server application. It includes creating an app instance, setting up a router, and defining a route that responds to GET requests on the root path.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/1.guide/1.index.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Import h3 as npm dependency\nimport { createApp, createRouter } from \"h3\";\n\n// Create an app instance\nexport const app = createApp();\n\n// Create a new router and register it in app\nconst router = createRouter();\napp.use(router);\n\n// Add a new route that matches GET requests to / path\nrouter.get(\"/\", () => {\n  return { message: \"⚡️ Tadaa!\" };\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Event Handler in JavaScript using h3\nDESCRIPTION: Demonstrates how to define a simple event handler using the defineEventHandler function from h3. The handler returns a static response.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/1.guide/2.event-handler.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineEventHandler } from \"h3\";\n\ndefineEventHandler(() => \"Response\");\n```\n\n----------------------------------------\n\nTITLE: Defining Async Event Handler in JavaScript using h3\nDESCRIPTION: Shows how to create an asynchronous event handler using the defineEventHandler function from h3. The handler returns a promise that resolves to a response.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/1.guide/2.event-handler.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndefineEventHandler(async () => \"Response\");\n```\n\n----------------------------------------\n\nTITLE: Initializing H3 App Instance in JavaScript\nDESCRIPTION: Creates a new H3 app instance using the createApp utility. This is the core of an H3 server that handles incoming requests.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/1.guide/2.app.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from \"h3\";\n\nconst app = createApp();\n```\n\n----------------------------------------\n\nTITLE: Validating Request Body with Zod in H3 Framework\nDESCRIPTION: Reads and validates the request body using a Zod schema, providing type-safe validation of request data.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/2.utils/1.request.md#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { z } from \"zod\";\napp.use(\"/\", async (event) => {\n  const objectSchema = z.object();\n  const body = await readValidatedBody(event, objectSchema.safeParse);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Middleware Pattern in H3 App JavaScript\nDESCRIPTION: Demonstrates the middleware pattern in H3 where multiple handlers are chained. If a handler doesn't return a response, the next one is called.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/1.guide/2.app.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\napp.use(\"/\", () => {\n  console.log(\"First\");\n  // No response returned\n});\napp.use(\"/\", () => \"Second\");\n```\n\n----------------------------------------\n\nTITLE: Validating Query Parameters with h3 and Zod\nDESCRIPTION: This code shows how to use h3's getValidatedQuery function to validate URL query parameters against a Zod schema. It extracts validated name and age parameters from the query string and returns a personalized greeting.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/4.examples/validate-data.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getValidatedQuery } from \"h3\";\n\napp.use(async (event) => {\n  const query = await getValidatedQuery(event, userSchema.parse);\n  return `Hello ${query.name}! You are ${query.age} years old.`;\n});\n```\n\n----------------------------------------\n\nTITLE: Validating JSON Request Body with h3 and Zod\nDESCRIPTION: This example shows how to use h3's readValidatedJSONBody function to validate the JSON body of an HTTP request against a Zod schema. It parses and validates the request body containing name and age data and returns a personalized greeting.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/4.examples/validate-data.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { readValidatedJSONBody } from \"h3\";\n\napp.use(async (event) => {\n  const body = await readValidatedJSONBody(event, userSchema.parse);\n  return `Hello ${body.name}! You are ${body.age} years old.`;\n});\n```\n\n----------------------------------------\n\nTITLE: Streaming Response with Iterable Function in TypeScript\nDESCRIPTION: Demonstrates how to create a streaming response using an async generator function that yields HTML chunks over time. Shows progress updates with artificial delay.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/2.utils/2.response.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreturn iterable(event, async function* work() {\n  // Open document body\n  yield \"<!DOCTYPE html>\\n<html><body><h1>Executing...</h1><ol>\\n\";\n  // Do work ...\n  for (let i = 0; i < 1000) {\n    await delay(1000);\n    // Report progress\n    yield `<li>Completed job #`;\n    yield i;\n    yield `</li>\\n`;\n  }\n  // Close out the report\n  return `</ol></body></html>`;\n})\nasync function delay(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Cookies with H3 Framework in TypeScript\nDESCRIPTION: Demonstrates how to set a cookie using the setCookie utility with configurable options like maxAge, path, domain, and security flags. The example shows setting a cookie that expires in 7 days.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/4.examples/handle-cookie.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { setCookie } from \"h3\";\n\napp.use(async (event) => {\n  setCookie(event, \"name\", \"value\", { maxAge: 60 * 60 * 24 * 7 });\n  return \"\";\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Errors with createError in JavaScript using h3\nDESCRIPTION: Demonstrates error handling using the createError utility from h3. The handler throws a custom error with a specific status code and additional data.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/1.guide/2.event-handler.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createError, defineEventHandler } from \"h3\";\n\napp.use(\n  \"/validate\",\n  defineEventHandler((event) => {\n    throw createError({\n      status: 400,\n      statusMessage: \"Bad Request\",\n      message: \"Invalid user input\",\n      data: { field: \"email\" },\n    });\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Server-Sent Events Stream in H3\nDESCRIPTION: This example shows how to implement Server-Sent Events (SSE) in H3. It creates an event stream that sends a 'Hello world' message every second and includes proper cleanup of the interval when the connection is terminated.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/1.guide/6.websocket.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createH3, createEventStream } from \"h3\";\n\nexport const app = createH3();\n\napp.get(\"/\", (event) => {\n  const eventStream = createEventStream(event);\n\n  // Send a message every second\n  const interval = setInterval(async () => {\n    await eventStream.push(\"Hello world\");\n  }, 1000);\n\n  // cleanup the interval when the connection is terminated or the writer is closed\n  eventStream.onClosed(() => {\n    clearInterval(interval);\n  });\n\n  return eventStream.send();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Options in H3\nDESCRIPTION: Demonstrates how to configure session options including custom name, cookie settings, and session duration using the useSession options parameter.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/4.examples/handle-session.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useSession } from \"h3\";\n\napp.use(async (event) => {\n  const session = await useSession(event, {\n    name: \"my-session\",\n    password: \"80d42cfb-1cd2-462c-8f17-e3237d9027e9\",\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      sameSite: \"strict\",\n    },\n    maxAge: 60 * 60 * 24 * 7, // 7 days\n  });\n\n  return session.data;\n});\n```\n\n----------------------------------------\n\nTITLE: Using the Event Object in H3 Framework\nDESCRIPTION: Example demonstrating how to access and use the Event object in h3. This code shows how to log the event, parse query parameters, read the JSON request body, and return a response that echoes back the request details.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/1.guide/4.event.md#2025-04-16_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { getQuery, readJSONBody } from \"h3\";\n\napp.use(async (event) => {\n  // Log event. `.toString()` stringifies to a simple string like `[GET] /<path>`\n  console.log(`Request: ${event.toString()}`);\n\n  // Parse query params\n  const query = getQuery(event);\n\n  // Try to read request body\n  const body = await readJSONBody(event).catch(() => {});\n\n  // Echo back request as response\n  return {\n    path: event.path,\n    method: event.method,\n    query,\n    body,\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Complete serveStatic Implementation with File System Integration\nDESCRIPTION: Full implementation of serveStatic that reads files from a specified directory. It includes proper implementations of getContents and getMeta methods using Node.js file system APIs for file reading and metadata retrieval.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/4.examples/serve-static-assets.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp, serveStatic } from \"h3\";\nimport { stat, readFile } from \"node:fs/promises\";\nimport { join } from \"pathe\";\n\nexport const app = createApp();\n\nconst publicDir = \"assets\";\n\napp.use((event) => {\n  return serveStatic(event, {\n    getContents: (id) => readFile(join(publicDir, id)),\n    getMeta: async (id) => {\n      const stats = await stat(join(publicDir, id)).catch(() => {});\n\n      if (!stats || !stats.isFile()) {\n        return;\n      }\n\n      return {\n        size: stats.size,\n        mtime: stats.mtimeMs,\n      };\n    },\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Client IP Address in H3 Framework\nDESCRIPTION: Attempts to determine the client IP address from the incoming request, with optional support for the x-forwarded-for header.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/2.utils/1.request.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\napp.use(\"/\", (event) => {\n  const ip = getRequestIP(event); // \"192.0.2.0\"\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket Handler in H3\nDESCRIPTION: This example demonstrates how to create a WebSocket handler in H3. It sets up a basic WebSocket server that responds with 'pong' when receiving a message containing 'ping', and includes event handlers for open, message, close, and error events.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/1.guide/6.websocket.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createH3, defineWebSocketHandler } from \"h3\";\n\nexport const app = createH3();\n\napp.use(() =>\n  fetch(\n    \"https://raw.githubusercontent.com/unjs/crossws/main/examples/h3/public/index.html\",\n  ).then((r) => r.text()),\n);\n\napp.use(\n  \"/_ws\",\n  defineWebSocketHandler({\n    open(peer) {\n      console.log(\"[ws] open\", peer);\n    },\n\n    message(peer, message) {\n      console.log(\"[ws] message\", peer, message);\n      if (message.text().includes(\"ping\")) {\n        peer.send(\"pong\");\n      }\n    },\n\n    close(peer, event) {\n      console.log(\"[ws] close\", peer, event);\n    },\n\n    error(peer, error) {\n      console.log(\"[ws] error\", peer, error);\n    },\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Reading Request Body in H3 Framework\nDESCRIPTION: Reads the request body and automatically attempts to parse it as JSON or URL-encoded data.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/2.utils/1.request.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\napp.use(\"/\", async (event) => {\n  const body = await readBody(event);\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Global Hooks in H3 App JavaScript\nDESCRIPTION: Shows how to register global hooks (onError, onRequest, onBeforeResponse) when initializing an H3 app. These hooks are called for every request and can be used for global logic like logging and error handling.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/1.guide/2.app.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst app = createApp({\n  onError: (error) => {\n    console.error(error);\n  },\n  onRequest: (event) => {\n    console.log(\"Request:\", event.path);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Server-Sent Events (SSE) Stream in h3\nDESCRIPTION: Example showing how to implement a Server-Sent Events (SSE) endpoint using h3's createEventStream utility. This sets up an event stream that sends messages every second and properly handles cleanup when the client connection closes.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/2.utils/98.advanced.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createEventStream, sendEventStream } from \"h3\";\n\napp.use(\"/sse\", (event) => {\n  const eventStream = createEventStream(event);\n\n  // Send a message every second\n  const interval = setInterval(async () => {\n    await eventStream.push(\"Hello world\");\n  }, 1000);\n\n  // cleanup the interval and close the stream when the connection is terminated\n  eventStream.onClosed(async () => {\n    console.log(\"closing SSE...\");\n    clearInterval(interval);\n    await eventStream.close();\n  });\n\n  return eventStream.send();\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket Support with crossws Adapter\nDESCRIPTION: Code to add WebSocket support to an H3 application in Deno using the crossws adapter. This setup checks for WebSocket upgrade requests and handles them appropriately, while routing other requests to the standard H3 handler.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/3.adapters/deno.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport wsAdapter from \"crossws/adapters/deno\";\n\nconst handler = toWebHandler(app);\n\nconst { handleUpgrade } = wsAdapter(app.websocket);\n\nDeno.serve((request) => {\n  if (request.headers.get(\"upgrade\") === \"websocket\") {\n    return handleUpgrade(request);\n  }\n  return handler(request);\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Session Data in H3\nDESCRIPTION: Demonstrates how to update session data by incrementing a visit counter. Shows practical usage of session.update() to modify session content.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/4.examples/handle-session.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useSession } from \"h3\";\n\napp.use(async (event) => {\n  const session = await useSession(event, {\n    password: \"80d42cfb-1cd2-462c-8f17-e3237d9027e9\",\n  });\n\n  const count = (session.data.count || 0) + 1;\n  await session.update({\n    count: count,\n  });\n\n  return count === 0\n    ? \"Hello world!\"\n    : `Hello world! You have visited this page ${count} times.`;\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Multiple Middleware in JavaScript using h3\nDESCRIPTION: Demonstrates how to register multiple middleware and a final handler using the app.use method in h3. The middleware are executed in order of registration.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/1.guide/2.event-handler.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\napp.use(\n  defineEventHandler((event) => {\n    console.log(\"Middleware 1\");\n  }),\n);\napp.use(\n  defineEventHandler((event) => {\n    console.log(\"Middleware 2\");\n  }),\n);\napp.use(defineEventHandler(() => \"Response\"));\n```\n\n----------------------------------------\n\nTITLE: Validating Router Parameters with h3 and Zod\nDESCRIPTION: This snippet demonstrates how to use h3's getValidatedRouterParams function to validate route parameters against a Zod schema. It extracts and validates name and age parameters from a URL path and returns a personalized greeting.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/4.examples/validate-data.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getValidatedRouterParams } from \"h3\";\n\nrouter.use(\n  // You must use a router to use params\n  \"/hello/:name/:age\",\n  async (event) => {\n    const params = await getValidatedRouterParams(event, userSchema.parse);\n    return `Hello ${params.name}! You are ${params.age} years old!`;\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Route Parameters Example in h3\nDESCRIPTION: Equivalent h3 implementation demonstrating how to handle route parameters with validation using Zod schema validation library.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/4.examples/from-expressjs-to-h3.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * h3 example app.\n */\nimport {\n  createApp,\n  createError,\n  createRouter,\n  getRouterParam,\n  getValidatedRouterParams,\n} from \"h3\";\nimport { z } from \"zod\";\n\nconst users = [\n  { name: \"tj\" },\n  { name: \"tobi\" },\n  { name: \"loki\" },\n  { name: \"jane\" },\n  { name: \"bandit\" },\n];\n\nexport const app = createApp();\nconst router = createRouter();\n\nrouter.get(\"/\", () => \"Visit /users/0 or /users/0/2\");\n\nrouter.get(\"/user/:user\", async (event) => {\n  const { user } = await getValidatedRouterParams(\n    event,\n    z.object({\n      user: z.number({ coerce: true }),\n    }).parse,\n  );\n\n  if (!users[user])\n    throw createError({\n      status: 404,\n      statusMessage: \"User Not Found\",\n    });\n\n  return `user ${user}`;\n});\n\nrouter.get(\"/users/:from/:to\", async (event) => {\n  const { from, to } = await getValidatedRouterParams(\n    event,\n    z.object({\n      from: z.number({ coerce: true }),\n      to: z.number({ coerce: true }),\n    }).parse,\n  );\n\n  const names = users.map((user) => {\n    return user.name;\n  });\n\n  return `users ${names.slice(from, to).join(\", \")}`;\n});\n\napp.use(router);\n```\n\n----------------------------------------\n\nTITLE: Initializing Session in H3\nDESCRIPTION: Demonstrates how to initialize a new session using useSession with a required password for encryption. The code sets up a session handler that creates a cookie named 'h3' with encrypted content.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/4.examples/handle-session.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useSession } from \"h3\";\n\napp.use(async (event) => {\n  const session = await useSession(event, {\n    password: \"80d42cfb-1cd2-462c-8f17-e3237d9027e9\",\n  });\n\n  // do something...\n});\n```\n\n----------------------------------------\n\nTITLE: Using withBase for API Path Handling in h3\nDESCRIPTION: Example demonstrating how to use the withBase utility to handle API routes with a common base path prefix. This allows for creating an API handler and mounting it at a specific URL path within a main application.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/2.utils/98.advanced.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst api = createApp()\n .get(\"/\", () => \"Hello API!\");\nconst app = createApp();\n .use(\"/api/**\", withBase(\"/api\", api.handler));\n```\n\n----------------------------------------\n\nTITLE: Generating Full Request URL in H3 Framework\nDESCRIPTION: Constructs the complete URL of the incoming request, with options for handling x-forwarded-host and x-forwarded-proto headers.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/2.utils/1.request.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\napp.use(\"/\", (event) => {\n  const url = getRequestURL(event); // \"https://example.com/path\"\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Routers in H3\nDESCRIPTION: Demonstrates how to create and nest multiple routers, including using base paths for API routes.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/1.guide/5.router.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp, createRouter, useBase } from \"h3\";\n\nexport const app = createApp();\n\nconst websiteRouter = createRouter().get(\"/\", () => \"Hello world!\");\n\nconst apiRouter = createRouter().get(\"/hello\", () => \"Hello API!\");\n\nwebsiteRouter.use(\"/api/**\", useBase(\"/api\", apiRouter.handler));\n\napp.use(websiteRouter);\n```\n\n----------------------------------------\n\nTITLE: Sending JSON Response in JavaScript using h3 Event Handler\nDESCRIPTION: Shows how to send a JSON response using an h3 event handler. The handler returns the event path, which will be automatically serialized to JSON.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/1.guide/2.event-handler.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\napp.use(\n  \"/api\",\n  defineEventHandler(async (event) => event.path),\n);\n```\n\n----------------------------------------\n\nTITLE: Determining Request Protocol in H3 Framework\nDESCRIPTION: Gets the request protocol (http/https), with support for x-forwarded-proto header. Defaults to 'http' if protocol cannot be determined.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/2.utils/1.request.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\napp.use(\"/\", (event) => {\n  const protocol = getRequestProtocol(event); // \"https\"\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting HTTP Method in H3 Framework\nDESCRIPTION: Validates that an incoming request uses the expected HTTP method, throwing a 405 error if not allowed. Can optionally allow HEAD requests when expecting GET.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/2.utils/1.request.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napp.use(\"/\", (event) => {\n  assertMethod(event, \"GET\");\n  // Handle GET request, otherwise throw 405 error\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Promise Response in JavaScript using h3 Event Handler\nDESCRIPTION: Illustrates how to send a promise as a response using an h3 event handler. The promise resolves after a delay, returning the event path.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/1.guide/2.event-handler.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\napp.use(\n  defineEventHandler(async (event) => {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        resolve(event.path);\n      }, 1000);\n    });\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Adding WebSocket Support to h3 on Cloudflare Workers\nDESCRIPTION: Extends the Cloudflare Worker to support WebSockets using the crossws library. The code checks for WebSocket upgrade requests and handles them appropriately while still processing regular HTTP requests.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/3.adapters/cloudflare.md#2025-04-16_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport wsAdapter from \"crossws/adapters/cloudflare\";\n\nconst { handleUpgrade } = wsAdapter(app.websocket);\n\nexport default {\n  async fetch(request, env, ctx) {\n    if (request.headers.get(\"upgrade\") === \"websocket\") {\n      return handleUpgrade(request, env, context);\n    }\n    return handler(request, {\n      cloudflare: { env, ctx },\n    });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating and Sending a Stream Response with h3\nDESCRIPTION: Complete example showing how to create an h3 application that sends a streaming response. Sets appropriate headers for streaming content (Content-Type, Cache-Control, Transfer-Encoding) and returns a ReadableStream that generates HTML content.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/4.examples/stream-response.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp, setResponseHeader } from \"h3\";\n\nexport const app = createApp();\n\napp.use((event) => {\n  // Set to response header to tell to the client that we are sending a stream.\n  setResponseHeader(event, \"Content-Type\", \"text/html\");\n  setResponseHeader(event, \"Cache-Control\", \"no-cache\");\n  setResponseHeader(event, \"Transfer-Encoding\", \"chunked\");\n\n  let interval: NodeJS.Timeout;\n  const stream = new ReadableStream({\n    start(controller) {\n      controller.enqueue(\"<ul>\");\n\n      interval = setInterval(() => {\n        controller.enqueue(\"<li>\" + Math.random() + \"</li>\");\n      }, 100);\n\n      setTimeout(() => {\n        clearInterval(interval);\n        controller.close();\n      }, 1000);\n    },\n    cancel() {\n      clearInterval(interval);\n    },\n  });\n\n  return stream;\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an h3 App in Node.js\nDESCRIPTION: Creates a basic h3 application that returns \"Hello world!\" for all requests. This demonstrates the core setup of an h3 app with middleware.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/3.adapters/1.node.md#2025-04-16_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { createApp } from \"h3\";\n\nexport const app = createApp();\n\napp.use(() => \"Hello world!\");\n```\n\n----------------------------------------\n\nTITLE: Registering Multiple Event Handlers in H3 App JavaScript\nDESCRIPTION: Shows how to define multiple event handlers for the same route. H3 will call them in order of registration until one returns a response.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/1.guide/2.app.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\napp.use(\"/\", () => \"First\");\napp.use(\"/\", () => \"Second\");\n```\n\n----------------------------------------\n\nTITLE: HTTP Redirect Response in TypeScript\nDESCRIPTION: Examples of sending redirect responses with optional status codes. Shows both temporary (302) and permanent (301) redirects.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/2.utils/2.response.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\napp.use(\"/\", (event) => {\n  return redirect(event, \"https://example.com\");\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\napp.use(\"/\", (event) => {\n  return redirect(event, \"https://example.com\", 301); // Permanent redirect\n});\n```\n\n----------------------------------------\n\nTITLE: Validating Route Parameters with Zod in H3 Framework\nDESCRIPTION: Retrieves and validates route parameters using a Zod schema, enabling type-safe parameter validation.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/2.utils/1.request.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { z } from \"zod\";\napp.use(\"/\", async (event) => {\n  const params = await getValidatedRouterParams(\n    event,\n    z.object({\n      key: z.string(),\n    }).parse,\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Middleware in JavaScript using h3\nDESCRIPTION: Shows how to define middleware using defineEventHandler from h3. The middleware logs the request path but doesn't return a response.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/1.guide/2.event-handler.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ndefineEventHandler((event) => {\n  console.log(`Middleware. Path: ${event.path}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Node.js HTTP Server with h3\nDESCRIPTION: Creates a Node.js HTTP server and integrates an h3 app using the toNodeHandler adapter. The server listens on the specified port or defaults to port 3000.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/3.adapters/1.node.md#2025-04-16_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { createServer } from \"node:http\";\nimport { toNodeHandler } from \"h3\";\nimport { app } from \"./app.mjs\";\n\ncreateServer(toNodeHandler(app)).listen(process.env.PORT || 3000);\n```\n\n----------------------------------------\n\nTITLE: Validating Query Parameters with Zod in H3 Framework\nDESCRIPTION: Retrieves and validates query parameters using a Zod schema, providing type-safe parameter validation.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/2.utils/1.request.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { z } from \"zod\";\napp.use(\"/\", async (event) => {\n  const query = await getValidatedQuery(\n    event,\n    z.object({\n      key: z.string(),\n    }).parse,\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing CORS Handling in h3 Router\nDESCRIPTION: Example showing how to handle Cross-Origin Resource Sharing (CORS) in an h3 router. This demonstrates setting up CORS with custom options, checking if the request is a preflight request, and handling it appropriately before proceeding with the main request processing.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/2.utils/98.advanced.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = createApp();\nconst router = createRouter();\nrouter.use(\"/\", async (event) => {\n  const corsRes = handleCors(event, {\n    origin: \"*\",\n    preflight: {\n      statusCode: 204,\n    },\n    methods: \"*\",\n  });\n  if (corsRes) {\n    return corsRes;\n  }\n  // Your code here\n});\n```\n\n----------------------------------------\n\nTITLE: Cookies Example in h3\nDESCRIPTION: Equivalent h3 implementation showing how to handle cookies using built-in cookie utilities like getCookie, setCookie, and deleteCookie.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/4.examples/from-expressjs-to-h3.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createApp,\n  createRouter,\n  getCookie,\n  getRequestHeader,\n  readJSONBody,\n  redirect,\n  setCookie,\n} from \"h3\";\n\nexport const app = createApp();\nconst router = createRouter();\n\nrouter.get(\"/\", (event) => {\n  const remember = getCookie(event, \"remember\");\n\n  if (remember) {\n    return 'Remembered :). Click to <a href=\"/forget\">forget</a>!.';\n  } else {\n    return `<form method=\"post\"><p>Check to <label>\n    <input type=\"checkbox\" name=\"remember\"/> remember me</label>\n    <input type=\"submit\" value=\"Submit\"/>.</p></form>`;\n  }\n});\n\nrouter.get(\"/forget\", (event) => {\n  deleteCookie(event, \"remember\");\n\n  const back = getRequestHeader(event, \"referer\") || \"/\";\n  return redirect(event, back);\n});\n\nrouter.post(\"/\", async (event) => {\n  const body = await readJSONBody(event);\n\n  if (body.remember)\n    setCookie(event, \"remember\", \"1\", { maxAge: 60 * 60 * 24 * 7 });\n\n  const back = getRequestHeader(event, \"referer\") || \"/\";\n  return redirect(event, back);\n});\n\napp.use(router);\n```\n\n----------------------------------------\n\nTITLE: Validating Request Body with Function in H3 Framework\nDESCRIPTION: Reads and validates the request body using a custom validation function, throwing an error if validation fails.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/2.utils/1.request.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\napp.use(\"/\", async (event) => {\n  const body = await readValidatedBody(event, (body) => {\n    return typeof body === \"object\" && body !== null;\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Multiple HTTP Methods for Same Route in H3\nDESCRIPTION: Shows how to register different handlers for GET and POST methods on the same route.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/1.guide/5.router.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nrouter\n  .get(\"/hello\", () => \"GET Hello world!\")\n  .post(\"/hello\", () => \"POST Hello world!\");\n```\n\n----------------------------------------\n\nTITLE: Converting Web Handler to h3 Handler in JavaScript\nDESCRIPTION: Shows how to convert a web-style handler (with Request => Response signature) to an h3 event handler using the fromWebHandler utility. This enables integration of web-compatible handlers with h3 applications.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/1.guide/2.event-handler.md#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { webHandler } from \"web-handler\"; // This package doesn't exist, it's just an example\nimport { createApp, fromWebHandler } from \"h3\";\n\nexport const app = createApp();\n\napp.use(fromWebHandler(webHandler));\n```\n\n----------------------------------------\n\nTITLE: Setting Up Netlify Edge Handler for h3 Application\nDESCRIPTION: This snippet demonstrates how to create the handler for Netlify Edge using the toWebHandler function from h3. It imports the previously created app and converts it to a web handler that Netlify Edge can understand.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/3.adapters/netlify.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { toWebHandler } from \"h3\";\nimport { app } from \"./app.mjs\";\n\nexport const handler = toWebHandler(app);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Session Data in H3\nDESCRIPTION: Shows how to retrieve data from an existing session using useSession. Returns the session data object which contains all stored session information.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/4.examples/handle-session.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useSession } from \"h3\";\n\napp.use(async (event) => {\n  const session = await useSession(event, {\n    password: \"80d42cfb-1cd2-462c-8f17-e3237d9027e9\",\n  });\n\n  return session.data;\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Lazy Loading in H3 Event Handler JavaScript\nDESCRIPTION: Demonstrates how to use lazy loading for event handlers. The handler function is loaded asynchronously on the first matching request, reducing startup time.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/1.guide/2.app.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\napp.use(\"/big\", () => import(\"./big-handler\"), { lazy: true });\n```\n\n----------------------------------------\n\nTITLE: Setting up Bun Server with H3 Web Handler\nDESCRIPTION: Configures a Bun server using the h3 web handler adapter on port 3000\nSOURCE: https://github.com/unjs/h3/blob/main/docs/3.adapters/bun.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { toWebHandler } from \"h3\";\nimport { app } from \"./app.mjs\";\n\nconst server = Bun.serve({\n  port: 3000,\n  fetch: toWebHandler(app),\n});\n```\n\n----------------------------------------\n\nTITLE: Multi Router Example in h3\nDESCRIPTION: Equivalent h3 implementation showing how to create multiple routers with different base paths using createRouter and useBase.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/4.examples/from-expressjs-to-h3.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * h3 example app.\n */\nimport { createApp, createRouter, useBase } from \"h3\";\n\nexport const app = createApp();\n\nconst apiv1 = createRouter()\n  .get(\"/\", () => \"Hello from APIv1 root route.\")\n  .get(\"/users\", () => \"List of APIv1 users.\");\n\nconst apiv2 = createRouter()\n  .get(\"/\", () => \"Hello from APIv2 root route.\")\n  .get(\"/users\", () => \"List of APIv2 users.\");\n\napp.use(\"/api/v1/**\", useBase(\"/api/v1\", apiv1.handler));\napp.use(\"/api/v2/**\", useBase(\"/api/v2\", apiv2.handler));\n```\n\n----------------------------------------\n\nTITLE: Middleware Example in h3\nDESCRIPTION: Equivalent h3 implementation showing how to incorporate Express.js middleware into h3 applications using the fromNodeHandler utility.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/4.examples/from-expressjs-to-h3.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport morgan from \"morgan\";\nimport { createApp, fromNodeHandler } from \"h3\";\n\nexport const app = createApp();\n\napp.use(fromNodeHandler(morgan(\"combined\")));\n\napp.use(\"/\", () => \"Hello World\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Resolution with Custom Index Names\nDESCRIPTION: Example showing how to customize the index file resolution behavior in serveStatic. This allows specifying alternative index files to try when a directory is requested instead of a specific file.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/4.examples/serve-static-assets.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp, serveStatic } from \"h3\";\n\nconst app = createApp();\n\napp.use(\n  serveStatic({\n    indexNames: [\"/app.html\", \"/index.html\"],\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Route Parameters Example in Express.js\nDESCRIPTION: Express.js application showing how to use and validate route parameters, with param middleware to process parameters before route handlers are called.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/4.examples/from-expressjs-to-h3.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Express.js example app.\n */\nvar createError = require(\"http-errors\");\nvar express = require(\"express\");\nvar app = express();\n\nvar users = [\n  { name: \"tj\" },\n  { name: \"tobi\" },\n  { name: \"loki\" },\n  { name: \"jane\" },\n  { name: \"bandit\" },\n];\n\napp.param([\"to\", \"from\"], function (req, res, next, num, name) {\n  req.params[name] = parseInt(num, 10);\n  if (isNaN(req.params[name])) {\n    next(createError(400, \"failed to parseInt \" + num));\n  } else {\n    next();\n  }\n});\n\napp.param(\"user\", function (req, res, next, id) {\n  if ((req.user = users[id])) {\n    next();\n  } else {\n    next(createError(404, \"failed to find user\"));\n  }\n});\n\napp.get(\"/\", function (req, res) {\n  res.send(\"Visit /user/0 or /users/0-2\");\n});\n\napp.get(\"/user/:user\", function (req, res) {\n  res.send(\"user \" + req.user.name);\n});\n\napp.get(\"/users/:from-:to\", function (req, res) {\n  var from = req.params.from;\n  var to = req.params.to;\n  var names = users.map(function (user) {\n    return user.name;\n  });\n  res.send(\"users \" + names.slice(from, to + 1).join(\", \"));\n});\n\napp.listen(3000);\nconsole.log(\"Express started on port 3000\");\n```\n\n----------------------------------------\n\nTITLE: Defining Route Parameters in H3 Router\nDESCRIPTION: Illustrates how to define and use route parameters, accessing them through the event context.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/1.guide/5.router.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.get(\"/hello/:name\", (event) => {\n  return `Hello ${event.context.params.name}!`;\n});\n```\n\n----------------------------------------\n\nTITLE: Migrating Cookie and Header Handling in h3 v2\nDESCRIPTION: Demonstrates the migration to using standard Web Headers API for cookie and header management in h3 v2.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/5.migration/0.index.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Old v1 methods:\ngetHeader(event, name)\nsetHeader(event, name, value)\n\n// New v2 methods:\nevent.req.headers.get(name)\nevent.res.headers.set(name, value)\n\n// For Set-Cookie:\nevent.res.headers.getSetCookie()\n```\n\n----------------------------------------\n\nTITLE: Using Custom Matcher in H3 Event Handler JavaScript\nDESCRIPTION: Shows how to use a custom matcher function for more advanced request matching logic. In this example, only odd URLs are matched.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/1.guide/2.app.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\napp.use(\"/\", () => \"Odd URLs only\", {\n  match: (url) => {\n    return url.substr(1) % 2;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Hello World Example in h3\nDESCRIPTION: Equivalent h3 implementation of the Hello World example. Creates an app and defines a route handler for the root path that returns 'Hello World'.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/4.examples/from-expressjs-to-h3.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * h3 example app.\n */\nimport { createApp } from \"h3\";\n\nexport const app = createApp();\n\napp.use(\"/\", () => \"Hello World\");\n```\n\n----------------------------------------\n\nTITLE: Migrating Response Handling in h3 v2\nDESCRIPTION: Examples of how to migrate from v1 response handling methods to v2's explicit return statements. This includes handling various response types such as text, JSON, streams, and errors.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/5.migration/0.index.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Old v1 methods:\nsend(event, value)\nsendError(event, <error>)\nsendStream(event, <stream>)\nsendWebResponse(event, <response>)\n\n// New v2 methods:\nreturn <value>\nthrow createError(<error>)\nreturn <stream>\nreturn <response>\n```\n\n----------------------------------------\n\nTITLE: Defining a Zod Schema for User Data Validation in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a Zod schema for validating user data. The schema defines validation rules for a user object with name and age properties, including string length constraints and number type validation.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/4.examples/validate-data.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { z } from \"zod\";\n\nconst userSchema = z.object({\n  name: z.string().min(3).max(20),\n  age: z.number({ coerce: true }).positive().int(),\n});\n```\n\n----------------------------------------\n\nTITLE: Importing h3 from CDN in JavaScript\nDESCRIPTION: This snippet shows how to import h3 directly from a CDN for use in environments like Bun, Deno, or Cloudflare Workers. It creates an app instance and exports a web handler.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/1.guide/1.index.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp, toWebHandler } from \"https://esm.sh/h3\";\n\nexport const app = createApp();\n\nexport const handler = toWebHandler(app);\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Route Parameters in H3 Framework\nDESCRIPTION: Gets all matched route parameters as an object, with an option to decode values using decodeURIComponent.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/2.utils/1.request.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\napp.use(\"/\", (event) => {\n  const params = getRouterParams(event); // { key: \"value\" }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket Support in Node.js with crossws\nDESCRIPTION: Code to add WebSocket support to an h3 app in Node.js using the crossws adapter, which handles the WebSocket upgrade protocol.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/3.adapters/1.node.md#2025-04-16_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport wsAdapter from \"crossws/adapters/node\";\n\nconst { handleUpgrade } = wsAdapter(app.websocket);\n\nserver.on(\"upgrade\", handleUpgrade);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cookies with H3 Framework in TypeScript\nDESCRIPTION: Shows how to retrieve a cookie value using the getCookie utility. Returns the cookie value if it exists or undefined if the cookie is not found.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/4.examples/handle-cookie.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getCookie } from \"h3\";\n\napp.use(async (event) => {\n  const name = getCookie(event, \"name\");\n\n  // do something...\n\n  return \"\";\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Named Route Parameter in H3 Framework\nDESCRIPTION: Retrieves a specific route parameter by name, with an option to URI decode the value.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/2.utils/1.request.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\napp.use(\"/\", (event) => {\n  const param = getRouterParam(event, \"key\");\n});\n```\n\n----------------------------------------\n\nTITLE: Creating String Error with createError in JavaScript using h3\nDESCRIPTION: Shows how to create a simple error using a string with the createError utility from h3. This sets the error message and uses the default status code of 500.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/1.guide/2.event-handler.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createError, defineEventHandler } from \"h3\";\n\napp.use(\n  \"/hello\",\n  defineEventHandler((event) => {\n    throw createError(\"An error occurred\");\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Deleting Cookies with H3 Framework in TypeScript\nDESCRIPTION: Demonstrates how to delete a cookie using the deleteCookie utility. This function sets the cookie value to empty and maxAge to 0 to remove it from the client.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/4.examples/handle-cookie.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { deleteCookie } from \"h3\";\n\napp.use(async (event) => {\n  deleteCookie(event, \"name\");\n  return \"\";\n});\n```\n\n----------------------------------------\n\nTITLE: Validating Route Parameters with Function in H3 Framework\nDESCRIPTION: Retrieves and validates route parameters using a validation function, with an option to decode values.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/2.utils/1.request.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\napp.use(\"/\", async (event) => {\n  const params = await getValidatedRouterParams(event, (data) => {\n    return \"key\" in data && typeof data.key === \"string\";\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using Object Syntax for Event Handler in JavaScript with h3\nDESCRIPTION: Illustrates the use of object syntax in defineEventHandler for more flexible options, including onRequest and onBeforeResponse hooks.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/1.guide/2.event-handler.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndefineEventHandler({\n  onRequest: [],\n  onBeforeResponse: []\n  handler: () => \"Response\",\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Global Options for H3 App in JavaScript\nDESCRIPTION: Demonstrates how to pass global app configuration when initializing an H3 app. In this example, verbose logging is enabled by setting the debug option to true.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/1.guide/2.app.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst app = createApp({\n  debug: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Event Handler in H3 App JavaScript\nDESCRIPTION: Demonstrates how to register an event handler using app.use(). This handler will be called for every request starting with the specified prefix.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/1.guide/2.app.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\napp.use(\"/hello\", () => \"Hello world!\");\n```\n\n----------------------------------------\n\nTITLE: Converting Node.js Handler to h3 Handler in JavaScript\nDESCRIPTION: Illustrates how to convert a Node.js-style middleware to an h3 event handler using the fromNodeHandler utility. This allows integration of legacy Node.js middleware with h3 applications.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/1.guide/2.event-handler.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp, fromNodeHandler } from \"h3\";\n\nimport exampleMiddleware from \"example-node-middleware\"; // This package doesn't exist, it's just an example\n\nexport const app = createApp();\n\napp.use(fromNodeHandler(exampleMiddleware()));\n```\n\n----------------------------------------\n\nTITLE: Using Wildcard Matcher in H3 Router\nDESCRIPTION: Demonstrates how to use a wildcard matcher for single-level sub-routes, accessing the matched content.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/1.guide/5.router.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.get(\"/hello/*\", (event) => `Hello ${event.context.params._}!`);\n```\n\n----------------------------------------\n\nTITLE: Deploying H3 App to Deno Deploy\nDESCRIPTION: Command to deploy the H3 application to Deno Deploy using deployctl. The command specifies production mode, excludes node_modules, and uses the import map for dependency resolution.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/3.adapters/deno.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndeployctl deploy --prod --exclude=node_modules --import-map=./import_map.json ./deno.mjs\n```\n\n----------------------------------------\n\nTITLE: Getting Request Host in H3 Framework\nDESCRIPTION: Retrieves the request hostname, with an option to use the x-forwarded-host header. Defaults to 'localhost' if no host header is found.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/2.utils/1.request.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\napp.use(\"/\", (event) => {\n  const host = getRequestHost(event); // \"example.com\"\n});\n```\n\n----------------------------------------\n\nTITLE: Using Multi-level Wildcard Matcher in H3 Router\nDESCRIPTION: Shows how to use a double-asterisk wildcard to match multiple levels of sub-routes.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/1.guide/5.router.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.get(\"/hello/**\", (event) => `Hello ${event.context.params._}!`);\n```\n\n----------------------------------------\n\nTITLE: Creating Import Map for Deno Dependencies\nDESCRIPTION: Import map configuration that specifies the location of the h3 package from ESM.sh. This allows Deno to resolve the h3 dependency when importing it in the application.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/3.adapters/deno.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"imports\": {\n    \"h3\": \"https://esm.sh/h3@latest\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing H3 Router and Adding to App\nDESCRIPTION: Creates a new H3 app and router instance, then adds the router to the app's middleware stack.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/1.guide/5.router.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp, createRouter } from \"h3\";\n\nconst app = createApp();\nconst router = createRouter();\napp.use(router);\n```\n\n----------------------------------------\n\nTITLE: Implementing a ReadableStream with Periodic Data Generation\nDESCRIPTION: Creates a ReadableStream that sends a random number as an HTML list item every 100ms and closes after 1000ms. Includes a cancel method to clean up the interval when the stream is terminated.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/4.examples/stream-response.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlet interval: NodeJS.Timeout;\nconst stream = new ReadableStream({\n  start(controller) {\n    controller.enqueue(\"<ul>\");\n\n    interval = setInterval(() => {\n      controller.enqueue(\"<li>\" + Math.random() + \"</li>\");\n    }, 100);\n\n    setTimeout(() => {\n      clearInterval(interval);\n      controller.close();\n    }, 1000);\n  },\n  cancel() {\n    clearInterval(interval);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Local Preview Command for Netlify Development\nDESCRIPTION: This bash command shows how to use the Netlify CLI to preview the application locally before deployment. It runs the netlify dev command to start a local development server that mimics the Netlify environment.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/3.adapters/netlify.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx netlify dev\n```\n\n----------------------------------------\n\nTITLE: Creating Basic h3 Application in JavaScript\nDESCRIPTION: This snippet shows how to create a simple h3 application that responds with 'Hello world!' to all requests. It imports the createApp function from h3 and exports the app instance for use in other files.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/3.adapters/netlify.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from \"h3\";\n\nexport const app = createApp();\n\napp.use(() => \"Hello world!\");\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic ReadableStream in TypeScript\nDESCRIPTION: Creates a simple ReadableStream instance. This is the foundation for implementing streaming responses in h3.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/4.examples/stream-response.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst stream = new ReadableStream();\n```\n\n----------------------------------------\n\nTITLE: Clearing Session Data in H3\nDESCRIPTION: Shows how to clear a session using session.clear(). This will remove all session data and send an empty cookie to the client.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/4.examples/handle-session.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useSession } from \"h3\";\n\napp.use(\"/clear\", async (event) => {\n  const session = await useSession(event, {\n    password: \"80d42cfb-1cd2-462c-8f17-e3237d9027e9\",\n  });\n\n  await session.clear();\n\n  return \"Session cleared\";\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing H3 Application in Bun\nDESCRIPTION: Creates a basic h3 application instance with a simple Hello World handler\nSOURCE: https://github.com/unjs/h3/blob/main/docs/3.adapters/bun.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from \"h3\";\n\nexport const app = createApp();\n\napp.use(() => \"Hello world!\");\n```\n\n----------------------------------------\n\nTITLE: Creating an H3 App Entry\nDESCRIPTION: This code creates a basic H3 application that responds with 'Hello world!' to any request. It imports the createApp function from h3 and exports the app instance.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/3.adapters/3.plain.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from \"h3\";\n\nexport const app = createApp();\n\napp.use(() => \"Hello world!\");\n```\n\n----------------------------------------\n\nTITLE: Configuring H3 Nightly Resolution for PNPM/Yarn\nDESCRIPTION: Package.json configuration for using H3 nightly builds with PNPM or Yarn package managers through resolutions field.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/1.guide/99.nightly.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resolutions\": {\n    \"h3\": \"npm:h3-nightly@latest\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Web Entry with toWebHandler in JavaScript\nDESCRIPTION: This code shows how to create a web entry point using the toWebHandler adapter. It imports the adapter and the app, then exports a handler function that can be integrated with web-compatible runtimes.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/3.adapters/2.web.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { toWebHandler } from \"h3\";\nimport { app } from \"./app.mjs\";\n\n// Create Web Adapter\nexport const handler = toWebHandler(app);\n\n// Integrate handler with your runtime.\n// Input is a Request and response is Promise<Response>\n```\n\n----------------------------------------\n\nTITLE: Creating an H3 Application in JavaScript\nDESCRIPTION: Basic setup for creating an H3 application that returns 'Hello world!' as a response. This serves as the core application logic that will be deployed to Deno.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/3.adapters/deno.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from \"h3\";\n\nexport const app = createApp();\n\napp.use(() => \"Hello world!\");\n```\n\n----------------------------------------\n\nTITLE: Configuring H3 Nightly Override for NPM\nDESCRIPTION: Package.json configuration for using H3 nightly builds with NPM package manager through overrides field.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/1.guide/99.nightly.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"overrides\": {\n    \"h3\": \"npm:h3-nightly@latest\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Query Parameters in H3 Framework\nDESCRIPTION: Gets the parsed query string object from the request URL, with support for multiple values per parameter.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/2.utils/1.request.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napp.use(\"/\", (event) => {\n  const query = getQuery(event); // { key: \"value\", key2: [\"value1\", \"value2\"] }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Lazy Event Handler in JavaScript using h3\nDESCRIPTION: Demonstrates how to define a lazy event handler using defineLazyEventHandler from h3. The initial logic is executed only once, while the returned handler runs for every request.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/1.guide/2.event-handler.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineLazyEventHandler } from \"h3\";\n\napp.use(\n  defineLazyEventHandler(() => {\n    console.log(\"This will be executed only once\");\n    // This will be executed only once\n    return defineEventHandler((event) => {\n      // This will be executed on every request\n      return \"Response\";\n    });\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Registering GET Route in H3 Router\nDESCRIPTION: Demonstrates how to register a simple GET route handler for the '/hello' path.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/1.guide/5.router.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.get(\"/hello\", () => \"Hello world!\");\n```\n\n----------------------------------------\n\nTITLE: Basic serveStatic Setup in h3\nDESCRIPTION: Basic implementation of serveStatic utility in h3 with placeholder functions for getContents and getMeta. This establishes the foundation for serving static assets but doesn't serve actual files yet.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/4.examples/serve-static-assets.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp, serveStatic } from \"h3\";\n\nexport const app = createApp();\n\napp.use((event) => {\n  return serveStatic(event, {\n    getContents: (id) => {\n      return undefined;\n    },\n    getMeta: (id) => {\n      return undefined;\n    },\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up Cloudflare Worker Entry Point with h3 Web Adapter\nDESCRIPTION: Creates a Cloudflare Worker handler that uses h3's toWebHandler to adapt the h3 application for the Cloudflare Workers runtime. It passes Cloudflare environment variables and context to the handler.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/3.adapters/cloudflare.md#2025-04-16_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { toWebHandler } from \"h3\";\nimport { app } from \"./app.mjs\";\n\nconst handler = toWebHandler(app);\n\nexport default {\n  async fetch(request, env, ctx) {\n    return handler(request, {\n      cloudflare: { env, ctx },\n    });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Validating Query Parameters with Function in H3 Framework\nDESCRIPTION: Retrieves and validates query parameters using a validation function, allowing for custom validation logic.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/2.utils/1.request.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\napp.use(\"/\", async (event) => {\n  const query = await getValidatedQuery(event, (data) => {\n    return \"key\" in data && typeof data.key === \"string\";\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Deno Deploy Entry Point\nDESCRIPTION: Entry point script for Deno Deploy that imports the H3 application and converts it to a web handler using toWebHandler. This code enables the H3 app to be served by Deno's runtime.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/3.adapters/deno.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { toWebHandler } from \"h3\";\nimport { app } from \"./app.mjs\";\n\nDeno.serve(toWebHandler(app));\n```\n\n----------------------------------------\n\nTITLE: Updated H3 App and Router Interface\nDESCRIPTION: Demonstrates the new unified router functionality in h3 v2 using createH3() and the new method syntax for handling routes and middleware.\nSOURCE: https://github.com/unjs/h3/blob/main/MIGRATION.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// New methods\napp.use(handler) // Global middleware\napp.use(route, handler) // Routed middleware\napp.on(method, handler) // Route handler\napp.all(handler) // Handle all methods\napp.[METHOD](handler) // Method-specific handler\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic h3 Application for Cloudflare\nDESCRIPTION: Sets up a simple h3 application that returns \"Hello world!\" when accessed. This is the core application that will be deployed to Cloudflare Workers.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/3.adapters/cloudflare.md#2025-04-16_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { createApp } from \"h3\";\n\nexport const app = createApp();\n\napp.use(() => \"Hello world!\");\n```\n\n----------------------------------------\n\nTITLE: Migrating App and Router Usage in h3 v2\nDESCRIPTION: Demonstrates the changes in creating an h3 app and using router functionality in v2. Shows new methods for adding middleware and route handlers.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/5.migration/0.index.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Old v1 method:\nconst app = createApp()\nconst router = createRouter()\n\n// New v2 method:\nconst app = createH3()\n\n// New v2 usage:\napp.use(handler) // global middleware\napp.use(route, handler) // routed middleware\napp.on(method, handler) // route handler\napp.all(handler) // all methods handler\napp.[METHOD](handler) // specific method handler\n```\n\n----------------------------------------\n\nTITLE: Implementing the H3 Plain Adapter\nDESCRIPTION: This code imports the toPlainHandler function from h3 and the previously created app. It exports a handler that can be used in any JavaScript runtime to process HTTP requests as plain objects.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/3.adapters/3.plain.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { toPlainHandler } from \"h3\";\nimport { app } from \"./app.mjs\";\n\nexport const handler = toPlainHandler(app);\n```\n\n----------------------------------------\n\nTITLE: Migrating Response Handling in H3 v2\nDESCRIPTION: Examples of migrating from v1 response methods to v2's explicit return statements. Shows how to handle different response types including text, errors, streams and web responses.\nSOURCE: https://github.com/unjs/h3/blob/main/MIGRATION.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Old v1 way\nsend(event, value)\nsendError(event, error)\nsendStream(event, stream)\nsendWebResponse(event, response)\n\n// New v2 way\nreturn value\nthrow createError(error)\nreturn stream\nreturn response\n```\n\n----------------------------------------\n\nTITLE: No Content Response in TypeScript\nDESCRIPTION: Example of sending an empty response using the noContent utility function.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/2.utils/2.response.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napp.use(\"/\", () => noContent());\n```\n\n----------------------------------------\n\nTITLE: Multi Router Example in Express.js\nDESCRIPTION: Express.js application demonstrating how to create and use multiple routers for different API versions, each with their own routes and handlers.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/4.examples/from-expressjs-to-h3.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Express.js example app.\n */\nvar express = require(\"express\");\n\nvar app = express();\n\nvar apiv1 = express.Router();\n\napiv1.get(\"/\", function (req, res) {\n  res.send(\"Hello from APIv1 root route.\");\n});\n\napiv1.get(\"/users\", function (req, res) {\n  res.send(\"List of APIv1 users.\");\n});\n\nvar apiv2 = express.Router();\n\napiv2.get(\"/\", function (req, res) {\n  res.send(\"Hello from APIv2 root route.\");\n});\n\napiv2.get(\"/users\", function (req, res) {\n  res.send(\"List of APIv2 users.\");\n});\n\napp.use(\"/api/v1\", apiv1);\napp.use(\"/api/v2\", apiv2);\n\napp.get(\"/\", function (req, res) {\n  res.send(\"Hello from root route.\");\n});\n\napp.listen(3000);\nconsole.log(\"Express started on port 3000\");\n```\n\n----------------------------------------\n\nTITLE: Creating h3 App Entry in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a basic h3 app entry point. It imports the createApp function from h3, creates an app instance, and defines a simple route that returns 'Hello world!'.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/3.adapters/2.web.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from \"h3\";\n\nexport const app = createApp();\n\napp.use(() => \"Hello world!\");\n```\n\n----------------------------------------\n\nTITLE: Hello World Example in Express.js\nDESCRIPTION: Basic Express.js application that sets up a server listening on port 3000 and responds with 'Hello World' for the root route.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/4.examples/from-expressjs-to-h3.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Express.js example app.\n */\nvar express = require(\"express\");\nvar app = express();\n\napp.get(\"/\", function (req, res) {\n  res.send(\"Hello World\");\n});\n\napp.listen(3000);\nconsole.log(\"Express started on port 3000\");\n```\n\n----------------------------------------\n\nTITLE: Migrating Body Utils in h3 v2\nDESCRIPTION: Shows how to migrate from v1 body utilities to v2's Web standard-based utilities using the event.req object.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/5.migration/0.index.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Old v1 methods:\nreadBody(event)\n\n// New v2 methods:\nevent.req.text() // for text\nevent.req.json() // for json\nevent.req.formData() // for formData\nevent.req.body // for stream\n```\n\n----------------------------------------\n\nTITLE: Testing the H3 Plain Adapter Locally\nDESCRIPTION: This code demonstrates how to test the plain adapter in any JavaScript runtime. It imports the handler and calls it with a mock request object containing method, path, headers, body, and context properties.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/3.adapters/3.plain.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { handler } from \"./plain.mjs\";\n\nconst response = await handler({\n  method: \"GET\",\n  path: \"/\",\n  headers: {\n    \"x-test\": \"test\",\n  },\n  body: undefined,\n  context: {},\n});\n```\n\n----------------------------------------\n\nTITLE: Sending HTML Response in JavaScript using h3 Event Handler\nDESCRIPTION: Demonstrates how to send an HTML response using an h3 event handler. The handler returns a string containing HTML markup.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/1.guide/2.event-handler.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\napp.use(defineEventHandler(async () => \"<h1>Hello world!</h1>\"));\n```\n\n----------------------------------------\n\nTITLE: Local Testing of Web Handler in JavaScript\nDESCRIPTION: This snippet demonstrates how to locally test the web handler. It imports the handler, creates a test Request object, and logs the response. This can be run using Node.js to verify the handler's functionality.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/3.adapters/2.web.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { handler } from \"./web.mjs\";\n\nconst response = await handler(new Request(new URL(\"/\", \"http://localhost\")));\n\nconsole.log(await response.text()); // Hello world!\n```\n\n----------------------------------------\n\nTITLE: Middleware Example in Express.js\nDESCRIPTION: Express.js application using Morgan middleware for request logging, demonstrating the middleware pattern common in Express.js applications.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/4.examples/from-expressjs-to-h3.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar express = require(\"express\");\nvar morgan = require(\"morgan\");\n\nvar app = express();\n\napp.use(morgan(\"combined\"));\n\napp.get(\"/\", function (req, res) {\n  res.send(\"hello, world!\");\n});\n\napp.listen(3000);\nconsole.log(\"Express started on port 3000\");\n```\n\n----------------------------------------\n\nTITLE: Running h3 Server with listhen CLI\nDESCRIPTION: This command uses npx to run the listhen CLI, which starts a development server for the h3 application. It watches for changes, opens the browser, and runs the app.ts file.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/1.guide/1.index.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx --yes listhen -w --open ./app.ts\n```\n\n----------------------------------------\n\nTITLE: Configuring wrangler.toml for Cloudflare Deployment\nDESCRIPTION: Sets up the Wrangler configuration file required for Cloudflare Workers deployment. It specifies the application name, entry point, and compatibility date.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/3.adapters/cloudflare.md#2025-04-16_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nname = \"h3-app\"\nmain = \"cloudflare.mjs\"\ncompatibility_date = \"2023-08-01\"\n```\n\n----------------------------------------\n\nTITLE: Deploying to Netlify Production Environment\nDESCRIPTION: This bash command demonstrates how to deploy the h3 application to Netlify's production environment. The --prod flag ensures that the deployment goes to the production environment rather than a draft URL.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/3.adapters/netlify.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx netlify deploy --prod\n```\n\n----------------------------------------\n\nTITLE: Configuring Import Map for Deno Runtime in JSON\nDESCRIPTION: This snippet shows the import_map.json file needed for Netlify's Deno runtime. It maps the h3 import to the ESM-compatible version of h3 hosted on esm.sh, ensuring that the dependencies can be resolved at runtime.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/3.adapters/netlify.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"imports\": {\n    \"h3\": \"https://esm.sh/h3@latest\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Netlify Deployment Settings with TOML\nDESCRIPTION: This snippet contains the netlify.toml configuration file that tells Netlify how to handle the edge functions. It specifies the directory for edge functions and points to the import map file for Deno runtime.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/3.adapters/netlify.md#2025-04-16_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[build]\n  edge_functions = \"netlify\"\n\n[functions]\n  deno_import_map = \"./import_map.json\"\n```\n\n----------------------------------------\n\nTITLE: Running h3 App with Listhen Utility\nDESCRIPTION: Command to run an h3 app using the listhen utility, which simplifies the server setup process.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/3.adapters/1.node.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx --yes listhen ./app.ts\n```\n\n----------------------------------------\n\nTITLE: Example Response from H3 Plain Adapter\nDESCRIPTION: This code shows the expected response structure from the plain adapter. The response includes status code, status text, headers, and body content.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/3.adapters/3.plain.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  status: 200,\n  statusText: '',\n  headers: [ [ 'content-type', 'text/html' ] ],\n  body: 'Hello world!'\n}\n```\n\n----------------------------------------\n\nTITLE: Running Bun Server Command\nDESCRIPTION: Command to start the Bun server with the specified entry point\nSOURCE: https://github.com/unjs/h3/blob/main/docs/3.adapters/bun.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbun --bun ./server.mjs\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket Support in Bun Server\nDESCRIPTION: Configures WebSocket support for h3 application using crossws adapter with Bun integration\nSOURCE: https://github.com/unjs/h3/blob/main/docs/3.adapters/bun.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport wsAdapter from \"crossws/adapters/bun\";\n\nconst { websocket, handleUpgrade } = wsAdapter(app.websocket);\n\nconst handler = toWebHandler(app);\n\nconst server = Bun.serve({\n  port: 3000,\n  websocket,\n  fetch(req, server) {\n    if (await handleUpgrade(req, server)) {\n      return;\n    }\n    return handler(req);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Running H3 App Locally with Deno CLI\nDESCRIPTION: Command to locally preview the H3 application using Deno CLI. The --allow-net flag is required to grant network permissions for the server to run.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/3.adapters/deno.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndeno run --allow-net ./deno.mjs\n```\n\n----------------------------------------\n\nTITLE: Checking HTTP Method in H3 Framework\nDESCRIPTION: Tests if the incoming request uses a specific HTTP method or one of multiple methods, with optional HEAD request handling.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/2.utils/1.request.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\napp.use(\"/\", (event) => {\n  if (isMethod(event, \"GET\")) {\n    // Handle GET request\n  } else if (isMethod(event, [\"POST\", \"PUT\"])) {\n    // Handle POST or PUT request\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Running Cloudflare Worker Locally with wrangler\nDESCRIPTION: Command to start the Cloudflare Worker locally for development and testing using Wrangler CLI.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/3.adapters/cloudflare.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx wrangler dev\n```\n\n----------------------------------------\n\nTITLE: Cookies Example in Express.js\nDESCRIPTION: Express.js application demonstrating cookie handling with cookie-parser middleware, including setting, reading, and clearing cookies.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/4.examples/from-expressjs-to-h3.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Express.js example app.\n */\nvar express = require(\"express\");\nvar app = express();\nvar cookieParser = require(\"cookie-parser\");\n\napp.use(cookieParser(\"my secret here\"));\n\napp.use(express.urlencoded({ extended: false }));\n\napp.get(\"/\", function (req, res) {\n  if (req.cookies.remember) {\n    res.send('Remembered :). Click to <a href=\"/forget\">forget</a>!.');\n  } else {\n    res.send(\n      '<form method=\"post\"><p>Check to <label>' +\n        '<input type=\"checkbox\" name=\"remember\"/> remember me</label> ' +\n        '<input type=\"submit\" value=\"Submit\"/>.</p></form>',\n    );\n  }\n});\n\napp.get(\"/forget\", function (req, res) {\n  res.clearCookie(\"remember\");\n  res.redirect(\"back\");\n});\n\napp.post(\"/\", function (req, res) {\n  var minute = 60000;\n  if (req.body.remember) res.cookie(\"remember\", 1, { maxAge: minute });\n  res.redirect(\"back\");\n});\n\napp.listen(3000);\nconsole.log(\"Express started on port 3000\");\n```\n\n----------------------------------------\n\nTITLE: Deploying h3 Application to Cloudflare Workers\nDESCRIPTION: Command to deploy the h3 application to Cloudflare Workers production environment using Wrangler CLI.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/3.adapters/cloudflare.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx wrangler deploy\n```\n\n----------------------------------------\n\nTITLE: Change Categories - Markdown\nDESCRIPTION: Markdown formatting for categorizing different types of changes\nSOURCE: https://github.com/unjs/h3/blob/main/CHANGELOG.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### 🚀 Enhancements\\n### 🩹 Fixes\\n### 💅 Refactors\\n### 📖 Documentation\\n### 🏡 Chore\\n### 🤖 CI\n```\n\n----------------------------------------\n\nTITLE: Running a Node.js Server from Terminal\nDESCRIPTION: Command to run the Node.js server script from the terminal.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/3.adapters/1.node.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode ./server.mjs\n```\n\n----------------------------------------\n\nTITLE: Configuring Direct H3 Nightly Dependency\nDESCRIPTION: Configuration for directly using H3 nightly builds as a project dependency in package.json.\nSOURCE: https://github.com/unjs/h3/blob/main/docs/1.guide/99.nightly.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"h3\": \"npm:h3-nightly@latest\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Version Headers - Markdown\nDESCRIPTION: Markdown formatting for version headers and change descriptions\nSOURCE: https://github.com/unjs/h3/blob/main/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## v1.12.0\\n\\n[compare changes](https://github.com/unjs/h3/compare/v1.11.1...v1.12.0)\\n\\n### 🚀 Enhancements\\n\\n- Improve typed headers (#625)\\n- Export event-stream types (112fa33)\n```\n\n----------------------------------------\n\nTITLE: Version Links - Markdown\nDESCRIPTION: Markdown formatting for version comparison links\nSOURCE: https://github.com/unjs/h3/blob/main/CHANGELOG.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[compare changes](https://github.com/unjs/h3/compare/v1.11.1...v1.12.0)\n```"
  }
]