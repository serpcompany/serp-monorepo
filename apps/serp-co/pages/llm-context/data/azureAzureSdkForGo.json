[
  {
    "owner": "azure",
    "repo": "azure-sdk-for-go",
    "content": "TITLE: Installing Azure OpenAI and Azure Identity Modules in Go\nDESCRIPTION: Commands to install the azopenai and azidentity modules using go get. These modules are required for using Azure OpenAI services and authentication in Go applications.\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/ai/azopenai\n\n# optional\ngo get github.com/Azure/azure-sdk-for-go/sdk/azidentity\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure SDK Logging in Go\nDESCRIPTION: Example showing how to configure logging for Azure SDK operations including HTTP requests and responses.\n\nLANGUAGE: go\nCODE:\n```\nimport azlog \"github.com/Azure/azure-sdk-for-go/sdk/azcore/log\"\n\n// Print log events to stdout\nazlog.SetListener(func(cls azlog.Event, msg string) {\n\tfmt.Println(msg)\n})\n\n// Includes only requests and responses in logs\nazlog.SetEvents(azlog.EventRequest, azlog.EventResponse)\n```\n\n----------------------------------------\n\nTITLE: Sending Single Message\nDESCRIPTION: Demonstrates how to send a single message using the Service Bus sender\n\nLANGUAGE: go\nCODE:\n```\nerr := sender.SendMessage(context.TODO(), &azservicebus.Message{\n  Body: []byte(\"hello world!\"),\n}, nil)\n```\n\n----------------------------------------\n\nTITLE: Writing a Go Test for Azure Table Storage\nDESCRIPTION: Demonstrates how to write a test for creating a table in Azure Table Storage. This test uses the recording package to manage HTTP interactions and includes assertions using the testify/require package.\n\nLANGUAGE: Go\nCODE:\n```\nimport (\n\t\"fmt\"\n\t\"os\"\n\n\t\"github.com/stretchr/testify/require\"\n\t\"github.com/Azure/azure-sdk-for-go/sdk/internal/recording\"\n)\n\nconst accountName = os.GetEnv(\"TABLES_PRIMARY_ACCOUNT_NAME\")\n\n// Test creating a single table\nfunc TestCreateTable(t *testing.T) {\n\terr := recording.Start(t, recordingDirectory, nil)\n\trequire.NoError(t, err)\n\tdefer func() {\n\t\terr := recording.Stop(t, nil)\n\t\trequire.NoError(t, err)\n\t}()\n\n\tserviceURL := fmt.Sprintf(\"https://%v.table.core.windows.net\", accountName)\n\tclient, err := createClientForRecording(t, \"tableName\", serviceURL)\n\trequire.NoError(t, err)\n\n\tresp, err := client.Create()\n\trequire.NoError(t, err)\n\trequire.Equal(t, resp.TableResponse.TableName, \"tableName\")\n\tdefer client.Delete()  // Clean up resources\n\t..\n\t.. More test functionality\n\t..\n}\n```\n\n----------------------------------------\n\nTITLE: Client Initialization in Previous Version (services/**/mgmt/**)\nDESCRIPTION: Examples of client initialization in the deprecated version of Azure SDK for Go.\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/Azure/azure-sdk-for-go/services/compute/mgmt/2019-07-01/compute\"\n```\n\nLANGUAGE: go\nCODE:\n```\nclient := compute.NewVirtualMachinesClient(\"<SubscriptionId>\")\n```\n\nLANGUAGE: go\nCODE:\n```\nclient := compute.NewVirtualMachinesClientWithBaseURI(\"<Endpoint>\", \"<SubscriptionId>\")\n```\n\n----------------------------------------\n\nTITLE: Downloading a Blob in Go\nDESCRIPTION: Example of downloading a blob from Azure Blob Storage to a local file using anonymous access\n\nLANGUAGE: go\nCODE:\n```\nclient, err := azblob.NewClientWithNoCredential(\"https://azurestoragesamples.blob.core.windows.net/\", nil)\n// TODO: handle error\n\nfile, err := os.Create(\"cloud.jpg\")\n// TODO: handle error\ndefer file.Close()\n\n_, err = client.DownloadFile(context.TODO(), \"samples\", \"cloud.jpg\", file, nil)\n// TODO: handle error\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Authentication Chain with ChainedTokenCredential in Go\nDESCRIPTION: This example shows how to create a custom authentication flow using ChainedTokenCredential, which tries managed identity authentication before falling back to Azure CLI authentication.\n\nLANGUAGE: go\nCODE:\n```\nmanaged, err := azidentity.NewManagedIdentityCredential(nil)\nif err != nil {\n  // handle error\n}\nazCLI, err := azidentity.NewAzureCLICredential(nil)\nif err != nil {\n  // handle error\n}\nchain, err := azidentity.NewChainedTokenCredential([]azcore.TokenCredential{managed, azCLI}, nil)\nif err != nil {\n  // handle error\n}\n\nclient := armresources.NewResourceGroupsClient(\"subscription ID\", chain, nil)\n```\n\n----------------------------------------\n\nTITLE: Uploading a Blob in Go\nDESCRIPTION: Complete example of uploading a file to Azure Blob Storage including client setup and file handling\n\nLANGUAGE: go\nCODE:\n```\nconst (\n\taccount       = \"https://MYSTORAGEACCOUNT.blob.core.windows.net/\"\n\tcontainerName = \"sample-container\"\n\tblobName      = \"sample-blob\"\n\tsampleFile    = \"path/to/sample/file\"\n)\n\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n// TODO: handle error\n\nclient, err := azblob.NewClient(account, cred, nil)\n// TODO: handle error\n\nfile, err := os.OpenFile(sampleFile, os.O_RDONLY, 0)\n// TODO: handle error\ndefer file.Close()\n\n_, err = client.UploadFile(context.TODO(), containerName, blobName, file, nil)\n// TODO: handle error\n```\n\n----------------------------------------\n\nTITLE: Enabling Logging for Azure Identity Debugging in Go\nDESCRIPTION: This snippet demonstrates how to enable and configure logging for Azure Identity to help debug authentication issues. It sets up a listener to print log output to stdout and configures logging to include only azidentity credential logs.\n\nLANGUAGE: Go\nCODE:\n```\nimport azlog \"github.com/Azure/azure-sdk-for-go/sdk/azcore/log\"\n\n// print log output to stdout\nazlog.SetListener(func(event azlog.Event, s string) {\n    fmt.Println(s)\n})\n\n// include only azidentity credential logs\nazlog.SetEvents(azidentity.EventAuthentication)\n```\n\n----------------------------------------\n\nTITLE: Installing azcore Module with Go Get\nDESCRIPTION: This command adds the latest version of the azcore module to your project's go.mod file. It's typically not needed to be run explicitly as azcore is usually installed as a dependency of other client modules.\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/azcore\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging for Azure SDK in Go\nDESCRIPTION: Example of how to configure logging for Azure SDK modules in Go. It demonstrates setting up a custom log listener and specifying which events to log.\n\nLANGUAGE: go\nCODE:\n```\nimport azlog \"github.com/Azure/azure-sdk-for-go/sdk/azcore/log\"\n\n// Print log events to stdout\nazlog.SetListener(func(cls azlog.Event, msg string) {\n\tfmt.Println(msg)\n})\n\n// Includes only requests and responses in credential logs\nazlog.SetEvents(azlog.EventRequest, azlog.EventResponse)\n```\n\n----------------------------------------\n\nTITLE: Running Live Tests for AzOpenAI Module\nDESCRIPTION: This command sets up the environment for live testing mode and runs the tests against the actual Azure OpenAI service.\n\nLANGUAGE: bash\nCODE:\n```\nexport AZURE_RECORD_MODE=live\ngo test -count 1 -v ./...\n```\n\n----------------------------------------\n\nTITLE: Receiving Messages\nDESCRIPTION: Shows how to receive and process messages from a queue or subscription using a receiver\n\nLANGUAGE: go\nCODE:\n```\nreceiver, err := client.NewReceiverForQueue(\n  \"<queue>\",\n  nil,\n)\n\nctx, cancel := context.WithTimeout(context.TODO(), 60*time.Second)\ndefer cancel()\n\nmessages, err := receiver.ReceiveMessages(ctx, 1, nil)\n\nif err != nil {\n  panic(err)\n}\n\nfor _, message := range messages {\n  var body []byte = message.Body\n  fmt.Printf(\"Message received with body: %s\\n\", string(body))\n\n  err = receiver.CompleteMessage(context.TODO(), message, nil)\n\n  if err != nil {\n    var sbErr *azservicebus.Error\n\n    if errors.As(err, &sbErr) && sbErr.Code == azservicebus.CodeLockLost {\n      fmt.Printf(\"Message lock expired\\n\")\n      continue\n    }\n    panic(err)\n  }\n  fmt.Printf(\"Received and completed the message\\n\")\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Message Batches with azservicebus in Go\nDESCRIPTION: Shows how to create and send a batch of messages using the MessageBatch type in azservicebus. It includes error handling for message size limits.\n\nLANGUAGE: go\nCODE:\n```\nmessageBatch, err := sender.NewMessageBatch(context.TODO(), nil)\n\nif err != nil {\n  panic(err)\n}\n\nerr = messageBatch.AddMessage(&azservicebus.Message{\n    Body: []byte(fmt.Sprintf(\"hello world\")),\n}, nil)\n\nif errors.Is(err, azservicebus.ErrMessageTooLarge) {\n  fmt.Printf(\"Message batch is full. We should send it and create a new one.\\n\")\n\n  err := sender.SendMessageBatch(context.TODO(), messageBatch, nil)\n\n  if err != nil {\n    panic(err)\n  }\n  \n  // Create a new batch, add this message and start again.\n} else if err != nil {\n  panic(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Client Certificate Credential\nDESCRIPTION: Example showing how to create a client certificate credential using certificate data\n\nLANGUAGE: go\nCODE:\n```\ncertData, err := os.ReadFile(\"/cert.pem\")\ncerts, key, err := ParseCertificates(certData, password)\ncred, err := NewClientCertificateCredential(tenantID, clientID, certs, key, nil)\n```\n\n----------------------------------------\n\nTITLE: Querying Metrics with azquery in Go\nDESCRIPTION: This snippet demonstrates how to create a metrics client and execute a metrics query using the azquery module in the Azure SDK for Go. It includes various query options and error handling.\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\t\"time\"\n\n\t\"github.com/Azure/azure-sdk-for-go/sdk/azcore/to\"\n\t\"github.com/Azure/azure-sdk-for-go/sdk/azidentity\"\n\t\"github.com/Azure/azure-sdk-for-go/sdk/monitor/azquery\"\n)\n\nfunc main() {\n\t// create the metrics client\n\tcred, err := azidentity.NewDefaultAzureCredential(nil)\n\tif err != nil {\n\t\t//TODO: handle error\n\t}\n\tclient, err := azquery.NewMetricsClient(cred, nil)\n\tif err != nil {\n\t\t//TODO: handle error\n\t}\n\n\t// execute the metrics query\n\tres, err := client.QueryResource(context.TODO(), \"<resourceID>\",\n\t\t&azquery.MetricsClientQueryResourceOptions{\n\t\t\tTimespan:        to.Ptr(azquery.NewTimeInterval(time.Date(2022, 12, 25, 0, 0, 0, 0, time.UTC), time.Date(2022, 12, 25, 12, 0, 0, 0, time.UTC))),\n\t\t\tInterval:        to.Ptr(\"PT1M\"),\n\t\t\tMetricNames:     nil,\n\t\t\tAggregation:     to.SliceOfPtrs(azquery.AggregationTypeAverage, azquery.AggregationTypeCount),\n\t\t\tTop:             to.Ptr[int32](3),\n\t\t\tOrderBy:         to.Ptr(\"Average asc\"),\n\t\t\tFilter:          to.Ptr(\"BlobType eq '*'\"),\n\t\t\tResultType:      nil,\n\t\t\tMetricNamespace: to.Ptr(\"Microsoft.Storage/storageAccounts/blobServices\"),\n\t\t})\n\tif err != nil {\n\t\t//TODO: handle error\n\t}\n\t_ = res\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Packages\nDESCRIPTION: Commands to install the required Azure SDK Go modules including compute, core, and identity packages\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute\ngo get github.com/Azure/azure-sdk-for-go/sdk/azcore\ngo get github.com/Azure/azure-sdk-for-go/sdk/azidentity\n```\n\n----------------------------------------\n\nTITLE: Authenticating with DefaultAzureCredential in Go\nDESCRIPTION: This example demonstrates how to authenticate a client from the armresources module using DefaultAzureCredential.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\nif err != nil {\n  // handle error\n}\n\nclient := armresources.NewResourceGroupsClient(\"subscription ID\", cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Connecting OpenTelemetry TracerProvider to Azure SDK Client in Go\nDESCRIPTION: This code snippet demonstrates how to connect an OpenTelemetry TracerProvider to an Azure SDK client using ClientOptions. It creates a new tracing provider using the azotel module.\n\nLANGUAGE: go\nCODE:\n```\noptions := azcore.ClientOptions{}\noptions.TracingProvider = azotel.NewTracingProvider(otelProvider, nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Resources Client Factory in Go\nDESCRIPTION: This snippet shows how to create a client factory for Azure Resources using subscription ID and credentials.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armdeploymentstacks.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Authenticating azblob Client with AAD Token in Go\nDESCRIPTION: Initializes an azblob client using Azure Active Directory (AAD) token authentication. The credential is created from the azidentity module.\n\nLANGUAGE: go\nCODE:\n```\nclient, err := azblob.NewClient(\"<my storage account URL>\", cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Downloading a File\nDESCRIPTION: Example demonstrating how to download a file from ADLS Gen2 storage to local storage.\n\nLANGUAGE: go\nCODE:\n```\nconst (\n    path = \"https://MYSTORAGEACCOUNT.dfs.core.windows.net/sample-fs/cloud.jpg\"\n)\n\n// authenticate with Azure Active Directory\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n// TODO: handle error\n\n// create a client for the specified storage account\nclient, err := file.NewClient(path, cred, nil)\n// TODO: handle error\n\n// create or open a local file where we can download the file\nfile, err := os.Create(\"cloud.jpg\")\n// TODO: handle error\ndefer file.Close()\n\n// download the file\n_, err = client.DownloadFile(context.TODO(), file, nil)\n// TODO: handle error\n```\n\n----------------------------------------\n\nTITLE: Creating a Share and Uploading a File in Go\nDESCRIPTION: This example demonstrates how to create a share, create a directory, and upload a local file to Azure File Storage using the SDK.\n\nLANGUAGE: go\nCODE:\n```\nconst (\nshareName = \"sample-share\"\ndirName   = \"sample-dir\"\nfileName  = \"sample-file\"\n)\n\nconnectionString := \"<connection_string>\"\nlocalFilePath := \"<path_to_local_file>\"\n\nshareClient, err := share.NewClientFromConnectionString(connectionString, shareName, nil)\n// TODO: handle error\n_, err = shareClient.Create(context.TODO(), nil)\n// TODO: handle error\n\ndirClient := shareClient.NewDirectoryClient(dirName)\n_, err = dirClient.Create(context.TODO(), nil)\n// TODO: handle error\n\nfile, err := os.OpenFile(localFilePath, os.O_RDONLY, 0)\n// TODO: handle error\ndefer file.Close()\n\nfInfo, err := file.Stat()\n// TODO: handle error\nfSize := fInfo.Size()\n\nfClient := dirClient.NewFileClient(fileName)\n_, err = fClient.Create(context.TODO(), fSize, nil)\n// TODO: handle error\n\nerr = fClient.UploadFile(context.TODO(), file, nil)\n// TODO: handle error\n```\n\n----------------------------------------\n\nTITLE: Creating Cosmos DB Client with Key Authentication\nDESCRIPTION: Example of creating a Cosmos DB client using account key authentication.\n\nLANGUAGE: go\nCODE:\n```\nconst (\n    cosmosDbEndpoint = \"someEndpoint\"\n    cosmosDbKey = \"someKey\"\n)\n\ncred, err := azcosmos.NewKeyCredential(cosmosDbKey)\nhandle(err)\nclient, err := azcosmos.NewClientWithKey(cosmosDbEndpoint, cred, nil)\nhandle(err)\n```\n\n----------------------------------------\n\nTITLE: Querying Logs with azlogs in Go\nDESCRIPTION: This snippet shows how to create a client and execute a logs query using the new azlogs module in the Azure SDK for Go. It demonstrates the similarities with the azquery module and includes error handling.\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\t\"time\"\n\n\t\"github.com/Azure/azure-sdk-for-go/sdk/azcore/to\"\n\t\"github.com/Azure/azure-sdk-for-go/sdk/azidentity\"\n\t\"github.com/Azure/azure-sdk-for-go/sdk/monitor/query/azlogs\"\n)\n\nfunc main() {\n\t// create the client\n\tcred, err := azidentity.NewDefaultAzureCredential(nil)\n\tif err != nil {\n\t\t//TODO: handle error\n\t}\n\tclient, err := azlogs.NewClient(cred, nil)\n\tif err != nil {\n\t\t//TODO: handle error\n\t}\n\n\t// execute the logs query\n\tres, err := client.QueryWorkspace(\n\t\tcontext.TODO(),\n\t\t\"<workspaceID>\",\n\t\tazlogs.QueryBody{\n\t\t\tQuery:    to.Ptr(\"<kusto query>\"), // example Kusto query\n\t\t\tTimespan: to.Ptr(azlogs.NewTimeInterval(time.Date(2022, 12, 25, 0, 0, 0, 0, time.UTC), time.Date(2022, 12, 25, 12, 0, 0, 0, time.UTC))),\n\t\t},\n\t\tnil)\n\tif err != nil {\n\t\t//TODO: handle error\n\t}\n\tif res.Error != nil {\n\t\t//TODO: handle partial error\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Messages with azservicebus Sender in Go\nDESCRIPTION: Demonstrates how to create a Sender and send a message using the new azservicebus package. This works for both queues and topics.\n\nLANGUAGE: go\nCODE:\n```\nsender, err := client.NewSender(queueOrTopicName, nil)\n\nsender.SendMessage(context.TODO(), &azservicebus.Message{\n  Body: []byte(\"hello world\"),\n}, nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Multi-API Generation\nDESCRIPTION: YAML configuration for generating multiple API versions of the Go SDK. It specifies the package tag to use for the 2019-02 version.\n\nLANGUAGE: yaml\nCODE:\n```\nbatch:\n  - tag: package-2019-02\n```\n\n----------------------------------------\n\nTITLE: Receiving from Session Entities with azservicebus in Go\nDESCRIPTION: Shows how to receive messages from session-enabled entities using the new azservicebus package, including accepting specific sessions and managing session state.\n\nLANGUAGE: go\nCODE:\n```\n// to get a specific session by ID\nsessionReceiver, err := client.AcceptSessionForQueue(context.TODO(), \"queue\", \"session-id\", nil)\n// or client.AcceptSessionForSubscription\n\n// to get the next available session from Service Bus (service-assigned)\nsessionReceiver, err := client.AcceptNextSessionForQueue(context.TODO(), \"queue\", nil)\n\n// SessionReceiver's are similar to Receiver's with some additional functions:\n\n// managing session state\nsessionData, err := sessionReceiver.GetSessionState(context.TODO())\nerr = sessionReceiver.SetSessionState(context.TODO(), []byte(\"data\"))\n\n// renewing the lock associated with the session\nerr = sessionReceiver.RenewSessionLock(context.TODO())\n```\n\n----------------------------------------\n\nTITLE: Authenticating Client with Azure AD\nDESCRIPTION: Code example showing how to authenticate an ADLS Gen2 client using Azure Active Directory credentials.\n\nLANGUAGE: go\nCODE:\n```\n// create a credential for authenticating with Azure Active Directory\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n// TODO: handle err\n\n// create a service.Client for the specified storage account that uses the above credential\nclient, err := service.NewClient(\"https://MYSTORAGEACCOUNT.dfs.core.windows.net/\", cred, nil)\n// TODO: handle err\n// you can also create filesystem, file and directory clients\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure Blob Storage Client in Go\nDESCRIPTION: Code to create and authenticate an Azure Blob Storage client using Azure Active Directory credentials\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n// TODO: handle err\n\nclient, err := azblob.NewClient(\"https://MYSTORAGEACCOUNT.blob.core.windows.net/\", cred, nil)\n// TODO: handle err\n```\n\n----------------------------------------\n\nTITLE: Handling HTTP Response Errors\nDESCRIPTION: Example demonstrating proper error handling for HTTP requests, including type assertion for ResponseError and error inspection.\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/Azure/azure-sdk-for-go/sdk/azcore\"\n\nresp, err := client.GetCertificate(context.Background(), \"certificateName\", nil)\nif err != nil {\n    var httpErr *azcore.ResponseError\n    if errors.As(err, &httpErr) {\n        // TODO: investigate httpErr\n    } else {\n        // TODO: not an HTTP error\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging for Azure SDK in Go\nDESCRIPTION: This code snippet shows how to configure logging for Azure SDK modules in Go. It demonstrates setting a custom log listener to print events to stdout and configuring specific log events to be captured.\n\nLANGUAGE: Go\nCODE:\n```\nimport azlog \"github.com/Azure/azure-sdk-for-go/sdk/azcore/log\"\n\n// Print log events to stdout\nazlog.SetListener(func(cls azlog.Event, msg string) {\n\tfmt.Println(msg)\n})\n\n// Includes only requests and responses in credential logs\nazlog.SetEvents(azlog.EventRequest, azlog.EventResponse)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Event Hubs Go Module\nDESCRIPTION: Command to install the Azure Event Hubs client module for Go using go get\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/messaging/azeventhubs\n```\n\n----------------------------------------\n\nTITLE: Handling Azure Key Vault Errors in Go\nDESCRIPTION: Example demonstrating error handling for Key Vault HTTP requests using azcore.ResponseError.\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/Azure/azure-sdk-for-go/sdk/azcore\"\n\nresp, err := client.GetSecret(context.Background(), \"secretName\", nil)\nif err != nil {\n    var httpErr *azcore.ResponseError\n    if errors.As(err, &httpErr) {\n        // TODO: investigate httpErr\n    } else {\n        // TODO: not an HTTP error\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Monitor Ingestion and Azure Identity Modules in Go\nDESCRIPTION: This snippet demonstrates how to install the required modules for Azure Monitor Ingestion and Azure Identity using the 'go get' command.\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/monitor/ingestion/azlogs\ngo get github.com/Azure/azure-sdk-for-go/sdk/azidentity\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure Container Registry client in Go\nDESCRIPTION: This Go code snippet demonstrates how to create an Azure Container Registry client using the DefaultAzureCredential for authentication. It imports necessary packages, obtains credentials, and initializes the client with the registry's endpoint URL.\n\nLANGUAGE: Go\nCODE:\n```\nimport (\n\t\"github.com/Azure/azure-sdk-for-go/sdk/azidentity\"\n\t\"github.com/Azure/azure-sdk-for-go/sdk/containers/azcontainerregistry\"\n\t\"log\"\n)\n\nfunc main() {\n\tcred, err := azidentity.NewDefaultAzureCredential(nil)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to obtain a credential: %v\", err)\n\t}\n\n\tclient, err := azcontainerregistry.NewClient(\"<your Container Registry's endpoint URL>\", cred, nil)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to create client: %v\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Query Options for Azure Monitor Logs in Go\nDESCRIPTION: This code snippet shows how to set advanced query options for Azure Monitor Logs queries, including increasing wait time, including statistics, and enabling visualization.\n\nLANGUAGE: go\nCODE:\n```\nazlogs.QueryWorkspaceOptions{\n\t\t\tOptions: &azlogs.QueryOptions{\n\t\t\t\tStatistics:    to.Ptr(true),\n\t\t\t\tVisualization: to.Ptr(true),\n\t\t\t\tWait:          to.Ptr(600),\n\t\t\t},\n\t\t}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Pageable Results in Go with Azure SDK\nDESCRIPTION: Demonstrates how to use a pager to retrieve multiple pages of results from an Azure SDK operation. This example fetches a list of resource groups using the NewListPager method.\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO() // your context\npager := rgClient.NewListPager(nil)\nvar resourceGroups []*armresources.ResourceGroup\nfor pager.More() {\n    nextResult, err := pager.NextPage(ctx)\n    if err != nil {\n        // handle error...\n    }\n    if nextResult.ResourceGroupListResult.Value != nil {\n        resourceGroups = append(resourceGroups, nextResult.ResourceGroupListResult.Value...)\n    }\n}\n// dealing with `resourceGroups`\n```\n\n----------------------------------------\n\nTITLE: Accessing Raw HTTP Response\nDESCRIPTION: Example demonstrating how to capture and access the raw HTTP response from Key Vault operations using runtime.WithCaptureResponse.\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime\"\n\nvar response *http.Response\nctx := runtime.WithCaptureResponse(context.TODO(), &response)\n_, err = client.GetCertificate(ctx, \"certificateName\", nil)\nif err != nil {\n    // TODO: handle error\n}\n// TODO: do something with response\n```\n\n----------------------------------------\n\nTITLE: Running Test Proxy Commands\nDESCRIPTION: Bash commands for running and recording tests using the Azure SDK test proxy, including environment setup and test execution.\n\nLANGUAGE: bash\nCODE:\n```\ncd <root of the azopenaiassistants module>\ntest-proxy\n\nexport AZURE_RECORD_MODE=playback\ngo test -count 1 -v ./...\n\nexport AZURE_RECORD_MODE=record\ngo test -count 1 -v ./...\n\n# push the recording changes to the repo\ntest-proxy push -a assets.json\n\n# commit our assets.json file now that it points\n# to the new recordings.\ngit add assets.json\ngit commit -m \"updated recordings\"\ngit push\n```\n\n----------------------------------------\n\nTITLE: Performing CRUD Operations on Cosmos DB Items\nDESCRIPTION: Comprehensive example showing Create, Read, Update, Patch, and Delete operations on items in a Cosmos DB container.\n\nLANGUAGE: go\nCODE:\n```\nitem := map[string]string{\n    \"id\":    \"1\",\n    \"value\": \"2\",\n}\n\nmarshalled, err := json.Marshal(item)\nif err != nil {\n    log.Fatal(err)\n}\n\ncontainer, err := client.NewContainer(dbName, containerName)\nhandle(err)\n\npk := azcosmos.NewPartitionKeyString(\"1\")\nid := \"1\"\n\n// Create an item\nitemResponse, err := container.CreateItem(context, pk, marshalled, nil)\nhandle(err)\n\n// Read an item\nitemResponse, err = container.ReadItem(context, pk, id, nil)\nhandle(err)\n\nvar itemResponseBody map[string]string\nerr = json.Unmarshal(itemResponse.Value, &itemResponseBody)\nif err != nil {\n    log.Fatal(err)\n}\n\nitemResponseBody[\"value\"] = \"3\"\nmarshalledReplace, err := json.Marshal(itemResponseBody)\nif err != nil {\n    log.Fatal(err)\n}\n\n// Replace an item\nitemResponse, err = container.ReplaceItem(context, pk, id, marshalledReplace, nil)\nhandle(err)\n\n// Patch an item\npatch := PatchOperations{}\npatch.AppendAdd(\"/newField\", \"newValue\")\npatch.AppendRemove(\"/oldFieldToRemove\")\n\nitemResponse, err := container.PatchItem(context.Background(), pk, id, patch, nil)\nhandle(err)\n\n// Delete an item\nitemResponse, err = container.DeleteItem(context, pk, id, nil)\nhandle(err)\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables in Go SDK Tests\nDESCRIPTION: Demonstrates how to use environment variables in Go SDK tests, with fallback values for playback mode. This ensures tests can run in both live and playback modes without exposing sensitive information.\n\nLANGUAGE: Go\nCODE:\n```\nfunc TestClient(t *testing.T) {\n\taccountName := recording.GetEnvVariable(t, \"TABLES_PRIMARY_ACCOUNT_NAME\", \"fakeAccountName\")\n\t// If running in playback, the value is \"fakeAccountName\". If running in \"record\" the value is the environment variable\n\taccountKey := recording.GetEnvVariable(t, \"TABLES_PRIMARY_ACCOUNT_KEY\", \"fakeAccountKey\")\n\tcred, err := NewSharedKeyCredential(accountName, accountKey)\n\trequire.NoError(t, err)\n\n\tclient, err := NewClient(\"someTableName\", someServiceURL, cred, nil)\n\trequire.NoError(t, err)\n\trequire.Equal(t, accountName, client.AccountName())\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Database in Cosmos DB\nDESCRIPTION: Example showing how to create a new database using the Cosmos DB client.\n\nLANGUAGE: go\nCODE:\n```\ndatabaseProperties := azcosmos.DatabaseProperties{ID: dbName}\nresponse, err := client.CreateDatabase(context, databaseProperties, nil)\nhandle(err)\ndatabase, err := client.NewDatabase(dbName)\nhandle(err)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Using Default Credentials in Go\nDESCRIPTION: This snippet demonstrates how to create default Azure credentials for authentication.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Receiving Messages with azservicebus Receiver in Go\nDESCRIPTION: Demonstrates how to create a Receiver and receive messages in batches from a queue or subscription using the new azservicebus package.\n\nLANGUAGE: go\nCODE:\n```\nreceiver, err := client.NewReceiverForQueue(queue, nil)\n// or for a subscription\nreceiver, err := client.NewReceiverForSubscription(topicName, subscriptionName, nil)\n\n// receiving multiple messages at a time. \nmessages, err := receiver.ReceiveMessages(context.TODO(), numMessages, nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Compute AvailabilitySets Client in Go\nDESCRIPTION: Demonstrates how to create a specific client (AvailabilitySetsClient) using the previously created client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewAvailabilitySetsClient()\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Key Vault Certificates Client\nDESCRIPTION: Example showing how to create a new certificates client using DefaultAzureCredential for authentication. Demonstrates importing required packages and initializing the client with vault URL.\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"github.com/Azure/azure-sdk-for-go/sdk/azidentity\"\n\t\"github.com/Azure/azure-sdk-for-go/sdk/security/keyvault/azcertificates\"\n)\n\nfunc main() {\n\tcredential, err := azidentity.NewDefaultAzureCredential(nil)\n\tif err != nil {\n\t\t// TODO: handle error\n\t}\n\n\tclient, err := azcertificates.NewClient(\"https://<TODO: your vault name>.vault.azure.net\", credential, nil)\n\tif err != nil {\n\t\t// TODO: handle error\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Long-Running Operations in Go with Azure SDK\nDESCRIPTION: Shows how to use the Begin* methods to start a long-running operation and poll for its completion. This example creates a resource and waits for the operation to finish.\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO() // your context\npoller, err := client.BeginCreate(ctx, \"resource_identifier\", \"additonal_parameter\", nil)\nif err != nil {\n    // handle error...\n}\nresp, err = poller.PollUntilDone(ctx, nil)\nif err != nil {\n    // handle error...\n}\n// dealing with `resp`\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure SDK Logging\nDESCRIPTION: Example showing how to configure logging for the Azure SDK using azcore/log package.\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  \"fmt\"\n  azlog \"github.com/Azure/azure-sdk-for-go/sdk/azcore/log\"\n)\n\n// print log output to stdout\nazlog.SetListener(func(event azlog.Event, s string) {\n    fmt.Printf(\"[%s] %s\\n\", event, s)\n})\n\n// pick the set of events to log\nazlog.SetEvents(\n  azwebpubsub\n)\n```\n\n----------------------------------------\n\nTITLE: Authenticating Web PubSub Client with Connection String\nDESCRIPTION: Creates a Web PubSub client using a connection string found in the Azure Portal Keys tab.\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"github.com/Azure/azure-sdk-for-go/sdk/azidentity\"\n\t\"github.com/Azure/azure-sdk-for-go/sdk/messaging/azwebpubsub\"\n\t\"log\"\n)\n\nfunc main() {\n\tclient, err := azwebpubsub.NewClientFromConnectionString(\"<your Web PubSub's connection string>\", nil)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to create client: %v\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating azblob Client with No Credential in Go\nDESCRIPTION: Initializes an azblob client for anonymous or SAS authentication using NewClientWithNoCredential method. This replaces the previous NewAnonymousCredential approach.\n\nLANGUAGE: go\nCODE:\n```\nclient, err := azblob.NewClientWithNoCredential(\"<public blob or blob with SAS URL>\", nil)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Service Bus Package\nDESCRIPTION: Command to install the Azure Service Bus client module using Go's package manager\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/messaging/azservicebus\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure Resources Client in Go\nDESCRIPTION: Code snippet demonstrating how to create a specific client from the client factory to access Azure Resources APIs.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewClient()\n```\n\n----------------------------------------\n\nTITLE: Downloading a File from Azure File Storage in Go\nDESCRIPTION: This example shows how to download a file from Azure File Storage to a local file using the SDK.\n\nLANGUAGE: go\nCODE:\n```\nconst (\nshareName = \"sample-share\"\ndirName   = \"sample-dir\"\nfileName  = \"sample-file\"\n)\n\nconnectionString := \"<connection_string>\"\nlocalFilePath := \"<path_to_local_file>\"\n\nshareClient, err := share.NewClientFromConnectionString(connectionString, shareName, nil)\n// TODO: handle error\n\ndirClient := shareClient.NewDirectoryClient(dirName)\n\nfClient := dirClient.NewFileClient(fileName)\n\nfile, err := os.Create(localFilePath)\n// TODO: handle error\ndefer file.Close()\n\n_, err = fClient.DownloadFile(context.TODO(), file, nil)\n// TODO: handle error\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging for Azure Container Registry SDK\nDESCRIPTION: Shows how to configure logging for Azure SDK modules using azcore/log package. The example demonstrates setting up a custom log listener and filtering specific log events.\n\nLANGUAGE: go\nCODE:\n```\nimport azlog \"github.com/Azure/azure-sdk-for-go/sdk/azcore/log\"\n\n// Print log events to stdout\nazlog.SetListener(func(cls azlog.Event, msg string) {\n\tfmt.Println(msg)\n})\n\n// Includes only requests and responses in credential logs\nazlog.SetEvents(azlog.EventRequest, azlog.EventResponse)\n```\n\n----------------------------------------\n\nTITLE: Setting Server Timeout for Logs Query in Azure Monitor Query\nDESCRIPTION: This code example shows how to configure the server timeout for a logs query request using the Azure Monitor Query client library. It extends the timeout to 10 minutes to handle complex queries that may take longer to execute.\n\nLANGUAGE: go\nCODE:\n```\nworkspaceID := \"<workspace_id>\"\noptions := &azquery.LogsClientQueryWorkspaceOptions{\n\t\tOptions: &azquery.LogsQueryOptions{\n\t\t\tWait:          to.Ptr(600), // increases wait time to ten minutes\n\t\t},\n\t}\n\nres, err := logsClient.QueryWorkspace(context.Background(), \n             workspaceID, \n             azquery.Body{Query: to.Ptr(\"AzureActivity\n                    | summarize Count = count() by ResourceGroup\n                    | top 10 by Count\n                    | project ResourceGroup\")}, \n             options)\nif err != nil {\n    //TODO: handle error\n}\n_ = res\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Azure Event Hubs Tests in Bash\nDESCRIPTION: This snippet shows the required environment variables to be set in a .env file for running Event Hubs reliability tests. It includes connection strings for Event Hubs and Azure Storage, along with an App Insights instrumentation key.\n\nLANGUAGE: bash\nCODE:\n```\nEVENTHUB_CONNECTION_STRING=<connection string to the Event Hubs namespace>\nEVENTHUB_NAME=<already created Event Hub - should have at least 4 partitions>\nCHECKPOINTSTORE_STORAGE_CONNECTION_STRING=<connection string to an Azure Storage account>\nAPPINSIGHTS_INSTRUMENTATIONKEY=<instrumentation key for appinsights>\n```\n\n----------------------------------------\n\nTITLE: Enabling Logging for Azure SDK in Go\nDESCRIPTION: This snippet demonstrates how to enable logging for all Azure SDK modules and configure log output. It shows setting up a custom listener to print logs to stdout and filtering log events to include only HTTP requests and responses.\n\nLANGUAGE: go\nCODE:\n```\nimport azlog \"github.com/Azure/azure-sdk-for-go/sdk/azcore/log\"\n\n// print log output to stdout\nazlog.SetListener(func(event azlog.Event, s string) {\n    fmt.Println(s)\n})\n\n// Includes only requests and responses in logs\nazlog.SetEvents(azlog.EventRequest, azlog.EventResponse)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom HTTP Client in Azure Go SDK\nDESCRIPTION: Demonstrates how to use a custom HTTP client implementation with the Azure Go SDK by setting the Transport option in ClientOptions.\n\nLANGUAGE: go\nCODE:\n```\n// your own implementation of HTTP client\nhttpClient := NewYourOwnHTTPClient{}\nclientFactory, err := armresources.NewClientFactory(subscriptionId, credential,\n    &arm.ClientOptions{\n        ClientOptions: policy.ClientOptions{\n            Transport: &httpClient,\n        },\n    },\n)\nif err != nil {\n    log.Fatal(err)\n}\nrgClient := clientFactory.NewResourceGroupsClient()\n```\n\n----------------------------------------\n\nTITLE: Listing Entities in Azure Tables\nDESCRIPTION: List entities from an Azure Tables table using filters and pagination.\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"encoding/json\"\n    \"fmt\"\n\n    \"github.com/Azure/azure-sdk-for-go/sdk/azcore/to\"\n    \"github.com/Azure/azure-sdk-for-go/sdk/data/aztables\"\n)\n\nfunc main() {\n    cred, err := aztables.NewSharedKeyCredential(\"<myAccountName>\", \"<myAccountKey>\")\n    if err != nil {\n        panic(err)\n    }\n    client, err := aztables.NewClient(\"https://myAccountName.table.core.windows.net/myTable\", cred, nil)\n    if err != nil {\n        panic(err)\n    }\n\n    filter := \"PartitionKey eq 'markers' or RowKey eq 'Markers'\"\n    options := &aztables.ListEntitiesOptions{\n        Filter: &filter,\n        Select: to.Ptr(\"RowKey,Value,Product,Available\"),\n        Top: to.Ptr(int32(15)),\n    }\n\n    pager := client.NewListEntitiesPager(options)\n    pageCount := 0\n    for pager.More() {\n        response, err := pager.NextPage(context.TODO())\n        if err != nil {\n            panic(err)\n        }\n        fmt.Printf(\"There are %d entities in page #%d\\n\", len(response.Entities), pageCount)\n        pageCount += 1\n\n        for _, entity := range response.Entities {\n            var myEntity aztables.EDMEntity\n            err = json.Unmarshal(entity, &myEntity)\n            if err != nil {\n                panic(err)\n            }\n\n            fmt.Printf(\"Received: %v, %v, %v, %v\\n\", myEntity.RowKey, myEntity.Properties[\"Value\"], myEntity.Properties[\"Product\"], myEntity.Properties[\"Available\"])\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure Key Vault Keys Client in Go\nDESCRIPTION: Initialize an Azure Key Vault Keys client using DefaultAzureCredential for authentication. This snippet demonstrates importing necessary packages, creating a credential, and initializing the client with a vault URL.\n\nLANGUAGE: Go\nCODE:\n```\nimport (\n\t\"github.com/Azure/azure-sdk-for-go/sdk/azidentity\"\n\t\"github.com/Azure/azure-sdk-for-go/sdk/security/keyvault/azkeys\"\n)\n\nfunc main() {\n\tcred, err := azidentity.NewDefaultAzureCredential(nil)\n\tif err != nil {\n\t\t// TODO: handle error\n\t}\n\n\tclient, err := azkeys.NewClient(\"https://<TODO: your vault name>.vault.azure.net\", cred, nil)\n\tif err != nil {\n\t\t// TODO: handle error\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Fake Client Methods for Virtual Machines in Go\nDESCRIPTION: This snippet demonstrates how to implement fake client methods for virtual machines using the Azure SDK for Go. It shows how to set up a fake 'Get' method for the VirtualMachinesClient.\n\nLANGUAGE: go\nCODE:\n```\nimport azfake \"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake\"\n\nmyFakeVirtualMachinesServer.Get = func(ctx context.Context, resourceGroupName string, vmName string, options *armcompute.VirtualMachinesClientGetOptions) (resp azfake.Responder[armcompute.VirtualMachinesClientGetResponse], errResp azfake.ErrorResponder) {\n\t// TODO: resp.SetResponse(/* your fake armcompute.VirtualMachinesClientGetResponse response */)\n\treturn\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Blobs Using Pager in azblob Go SDK\nDESCRIPTION: Demonstrates how to list blobs using the new pager approach in azblob. It creates a pager and iterates through pages of results.\n\nLANGUAGE: go\nCODE:\n```\npager := client.NewListBlobsFlatPager(\"my-container\", nil)\nfor pager.More() {\n\tpage, err := pager.NextPage(context.TODO())\n\t// process results\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Client Options for Different Clouds in Go\nDESCRIPTION: This code demonstrates how to configure client options for connecting to different Azure clouds. It uses the arm and azcore packages to set up ClientOptions, specifically showing how to connect to Azure China cloud.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armedgezones.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Azure Container Registry Go Client\nDESCRIPTION: Demonstrates how to handle HTTP response errors using azcore.ResponseError type checking. The code shows proper error handling pattern for Container Registry client operations.\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/Azure/azure-sdk-for-go/sdk/azcore\"\n\nresp, err := client.GetRepositoryProperties(ctx, \"library/hello-world\", nil)\nif err != nil {\n\tvar httpErr *azcore.ResponseError\n\tif errors.As(err, &httpErr) {\n\t\t// TODO: investigate httpErr\n\t} else {\n\t\t// TODO: not an HTTP error\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Recording Policy in Go\nDESCRIPTION: Defines a custom recording policy to route traffic to the test proxy and handle different recording modes.\n\nLANGUAGE: Go\nCODE:\n```\ntype recordingPolicy struct {\n\toptions recording.RecordingOptions\n\tt       *testing.T\n}\n\nfunc (r recordingPolicy) Host() string {\n\tif r.options.UseHTTPS {\n\t\treturn \"localhost:5001\"\n\t}\n\treturn \"localhost:5000\"\n}\n\nfunc (r recordingPolicy) Scheme() string {\n\tif r.options.UseHTTPS {\n\t\treturn \"https\"\n\t}\n\treturn \"http\"\n}\n\nfunc NewRecordingPolicy(t *testing.T, o *recording.RecordingOptions) policy.Policy {\n\tif o == nil {\n\t\to = &recording.RecordingOptions{UseHTTPS: true}\n\t}\n\tp := &recordingPolicy{options: *o, t: t}\n\treturn p\n}\n\nfunc (p *recordingPolicy) Do(req *policy.Request) (resp *http.Response, err error) {\n\tif recording.GetRecordMode() != \"live\" {\n\t\tp.options.ReplaceAuthority(t, req.Raw())\n\t}\n\treturn req.Next()\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying HTTP 403 Forbidden Error Response in Go\nDESCRIPTION: This snippet shows an example of an HTTP 403 Forbidden error response when an operation is not permitted on a key in Azure Key Vault. It demonstrates the structure of the error message returned by the service.\n\nLANGUAGE: text\nCODE:\n```\n--------------------------------------------------------------------------------\nRESPONSE 403: 403 Forbidden\nERROR CODE: Forbidden\n--------------------------------------------------------------------------------\n{\n  \"error\": {\n    \"code\": \"Forbidden\",\n    \"message\": \"Operation decrypt is not permitted on this key.\",\n    \"innererror\": {\n      \"code\": \"KeyOperationForbidden\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure AD\nDESCRIPTION: Example of authenticating with Azure Active Directory using azidentity and creating a service client\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n// TODO: handle err\n\nclient, err := azqueue.NewServiceClient(\"https://MYSTORAGEACCOUNT.queue.core.windows.net/\", cred, nil)\n// TODO: handle err\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure SDK Logging\nDESCRIPTION: Example showing how to configure logging for Azure SDK operations, including setting log listeners and filtering specific event types.\n\nLANGUAGE: go\nCODE:\n```\nimport azlog \"github.com/Azure/azure-sdk-for-go/sdk/azcore/log\"\n\n// Print log events to stdout\nazlog.SetListener(func(cls azlog.Event, msg string) {\n\tfmt.Println(msg)\n})\n\n// Includes only requests and responses in logs\nazlog.SetEvents(azlog.EventRequest, azlog.EventResponse)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Subscription Client Factory\nDESCRIPTION: Initializes a client factory for creating Azure Subscription clients with basic configuration\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armsubscription.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Enumerating Azure Storage Queues\nDESCRIPTION: Example demonstrating how to list all queues in a storage account using pagination\n\nLANGUAGE: go\nCODE:\n```\nconst (\n\taccount = \"https://MYSTORAGEACCOUNT.queue.core.windows.net/\"\n)\n\n// authenticate with Azure Active Directory\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n// TODO: handle error\n\n// create a client for the specified storage account\nclient, err := azqueue.NewServiceClient(account, cred, nil)\n// TODO: handle error\n\n// queue listings are returned across multiple pages\npager := client.NewListQueuesPager(nil)\n\n// continue fetching pages until no more remain\nfor pager.More() {\n   resp, err := pager.NextPage(context.Background())\n   _require.NoError(err)\n   // print queue name\n   for _, queue := range resp.Queues {\n\t\tfmt.Println(*queue.Name)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Raw HTTP Response in Azure Key Vault Keys Client\nDESCRIPTION: Capture the raw HTTP response from a Key Vault operation using the runtime.WithCaptureResponse method and a context passed to the client method.\n\nLANGUAGE: Go\nCODE:\n```\nimport \"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime\"\n\nvar response *http.Response\nctx := runtime.WithCaptureResponse(context.TODO(), &response)\n_, err = client.GetKey(ctx, \"keyName\", nil)\nif err != nil {\n    // TODO: handle error\n}\n// TODO: do something with response\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Storage Account\nDESCRIPTION: Azure CLI command to create a new storage account\n\nLANGUAGE: powershell\nCODE:\n```\naz storage account create --name MyStorageAccount --resource-group MyResourceGroup --location westus --sku Standard_LRS\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging for Azure KeyVault Admin\nDESCRIPTION: Example demonstrating how to configure logging for Azure SDK modules using azcore/log package.\n\nLANGUAGE: go\nCODE:\n```\nimport azlog \"github.com/Azure/azure-sdk-for-go/sdk/azcore/log\"\n\n// Print log events to stdout\nazlog.SetListener(func(cls azlog.Event, msg string) {\n\tfmt.Println(msg)\n})\n\n// Includes only requests and responses in logs\nazlog.SetEvents(azlog.EventRequest, azlog.EventResponse)\n```\n\n----------------------------------------\n\nTITLE: Traversing a Share in Azure File Storage using Go\nDESCRIPTION: This example demonstrates how to recursively traverse a share, listing all directories and files using the Azure File Storage SDK for Go.\n\nLANGUAGE: go\nCODE:\n```\nconst shareName = \"sample-share\"\n\nconnectionString := \"<connection_string>\"\n\nshareClient, err := share.NewClientFromConnectionString(connectionString, shareName, nil)\n// TODO: handle error\n\nvar dirs []*directory.Client\ndirs = append(dirs, shareClient.NewRootDirectoryClient())\nfor len(dirs) > 0 {\n    dirClient := dirs[0]\n    dirs = dirs[1:]\n\n    pager := dirClient.NewListFilesAndDirectoriesPager(nil)\n    for pager.More() {\n        resp, err := pager.NextPage(context.TODO())\n        // TODO: handle error\n\n        for _, d := range resp.Segment.Directories {\n            fmt.Println(*d.Name)\n            dirs = append(dirs, dirClient.NewSubdirectoryClient(*d.Name))\n        }\n\n        for _, f := range resp.Segment.Files {\n            fmt.Println(*f.Name)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing TCP Connections with ProducerClient in Go\nDESCRIPTION: Shows how to handle TCP connections and AMQP links using the ProducerClient for sending events to multiple partitions.\n\nLANGUAGE: go\nCODE:\n```\n// will lazily create an AMQP connection\nproducerClient, err := azeventhubs.NewProducerClient(/* arguments elided for example */)\n\n// close the TCP connection (and any child links created for sending events)\ndefer producerClient.Close(context.TODO())\n\n// these calls will lazily create a set of AMQP links using the producerClient's TCP connection.\nproducerClient.SendEventDataBatch(context.TODO(), eventDataBatchForPartition0, nil)\nproducerClient.SendEventDataBatch(context.TODO(), eventDataBatchForPartition1, nil)\n```\n\n----------------------------------------\n\nTITLE: Creating a Container in Cosmos DB\nDESCRIPTION: Example demonstrating container creation with partition key definition and throughput specification.\n\nLANGUAGE: go\nCODE:\n```\nproperties := azcosmos.ContainerProperties{\n    ID: \"aContainer\",\n    PartitionKeyDefinition: azcosmos.PartitionKeyDefinition{\n        Paths: []string{\"/id\"},\n    },\n}\n\nthroughput := azcosmos.NewManualThroughputProperties(400)\nresponse, err := database.CreateContainer(context, properties, &azcosmos.CreateContainerOptions{ThroughputProperties: &throughput})\nhandle(err)\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Options for Different Clouds\nDESCRIPTION: Sets up client options for connecting to different Azure clouds including sovereign clouds and Azure Stack\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armmariadb.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging for Azure SDK in Go\nDESCRIPTION: Set up logging for Azure SDK modules, including the Key Vault Keys client. This example shows how to enable logging for HTTP requests and responses, and print log events to stdout.\n\nLANGUAGE: Go\nCODE:\n```\nimport azlog \"github.com/Azure/azure-sdk-for-go/sdk/azcore/log\"\n\n// Print log events to stdout\nazlog.SetListener(func(cls azlog.Event, msg string) {\n\tfmt.Println(msg)\n})\n\n// Includes only requests and responses in logs\nazlog.SetEvents(azlog.EventRequest, azlog.EventResponse)\n```\n\n----------------------------------------\n\nTITLE: Triggering Azure Pipeline for Pull Request\nDESCRIPTION: This comment triggers the Azure Pipeline to run tests for the AzOpenAI module in a pull request.\n\nLANGUAGE: bash\nCODE:\n```\n/azp run go - azopenai\n```\n\n----------------------------------------\n\nTITLE: Pagination in Latest Version (sdk/resourcemanager/**/arm**)\nDESCRIPTION: Example of handling pagination in the latest version of Azure SDK for Go.\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO() // your context\npager := resourceGroupsClient.NewListPager(nil)\nfor pager.More() {\n    nextResult, err := pager.NextPage(ctx)\n    if err != nil {\n        log.Fatalf(\"failed to advance page: %v\", err)\n    }\n    for _, rg := range nextResult.Value {\n        log.Printf(\"resource group ID: %s\\n\", *rg.ID)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Uploading a File\nDESCRIPTION: Example showing how to create and upload a file to ADLS Gen2 storage using the SDK.\n\nLANGUAGE: go\nCODE:\n```\nconst (\n\tpath = \"https://MYSTORAGEACCOUNT.dfs.core.windows.net/sample-fs/sample-file\"\n)\n\n// authenticate with Azure Active Directory\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n// TODO: handle error\n\n// create a client for the specified storage account\nclient, err := file.NewClient(path, cred, nil)\n// TODO: handle error\n\n_, err = client.Create(context.TODO(), nil)\n// TODO: handle error\n\n// open the file for reading\nfh, err := os.OpenFile(sampleFile, os.O_RDONLY, 0)\n// TODO: handle error\ndefer fh.Close()\n\n// upload the file to the specified filesystem with the specified file name\n_, err = client.UploadFile(context.TODO(), fh, nil)\n// TODO: handle error\n```\n\n----------------------------------------\n\nTITLE: Implementing PerfTest Interface for Azure Blob Upload Test in Go\nDESCRIPTION: Shows the implementation of the PerfTest interface for an Azure Blob upload performance test. It includes the Run method for the actual performance measurement and an empty Cleanup method.\n\nLANGUAGE: Go\nCODE:\n```\ntype uploadPerfTest struct {\n\t*uploadTestGlobal\n\tperf.PerfTestOptions\n\tdata       io.ReadSeekCloser\n\tblobClient azblob.BlockBlobClient\n}\n\nfunc (m *uploadPerfTest) Run(ctx context.Context) error {\n\t_, err := m.data.Seek(0, io.SeekStart) // rewind to the beginning\n\tif err != nil {\n\t\treturn err\n\t}\n\t_, err = m.blobClient.Upload(ctx, m.data, nil)\n\treturn err\n}\n\nfunc (m *uploadPerfTest) Cleanup(ctx context.Context) error {\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging in Azure Go SDK\nDESCRIPTION: Shows how to configure logging behavior using ClientOptions. This example enables including HTTP body in logs and demonstrates how to set a custom log listener.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armresources.NewClientFactory(subscriptionId, credential,\n    &arm.ClientOptions{\n        ClientOptions: policy.ClientOptions{\n            Logging: policy.LogOptions{\n                // include HTTP body for log\n                IncludeBody: true,\n            },\n        },\n    },\n)\nif err != nil {\n    log.Fatal(err)\n}\nrgClient := clientFactory.NewResourceGroupsClient()\n```\n\nLANGUAGE: go\nCODE:\n```\n// print log output to stdout\nazlog.SetListener(func(event azlog.Event, s string) {\n    fmt.Println(s)\n})\n\n// include only azidentity credential logs\nazlog.SetEvents(azidentity.EventAuthentication)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Test Proxy in Go\nDESCRIPTION: Demonstrates how to set up and tear down the test proxy in the TestMain function for recording and playback modes.\n\nLANGUAGE: Go\nCODE:\n```\nconst recordingDirectory = \"<path to service directory with assets.json file>/testdata\"\n\nfunc TestMain(m *testing.M) {\n\tcode := run(m)\n\tos.Exit(code)\n}\n\nfunc run(m *testing.M) int {\n\tif recording.GetRecordMode() == recording.PlaybackMode || recording.GetRecordMode() == recording.RecordingMode {\n        proxy, err := recording.StartTestProxy(recordingDirectory, nil)\n        if err != nil {\n            panic(err)\n        }\n\n        // NOTE: defer should not be used directly within TestMain as it will not be executed due to os.Exit()\n\t\tdefer func() {\n\t\t\terr := recording.StopTestProxy(proxy)\n\t\t\tif err != nil {\n\t\t\t\tpanic(err)\n\t\t\t}\n\t\t}()\n    }\n\n    ... all other test code, including proxy recording setup ...\n\treturn m.Run()\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Identity Module in Go\nDESCRIPTION: This command installs the Azure Identity module using Go modules for dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get -u github.com/Azure/azure-sdk-for-go/sdk/azidentity\n```\n\n----------------------------------------\n\nTITLE: Registering Local Arguments for Azure Blob Upload Test in Go\nDESCRIPTION: Demonstrates how to register local arguments for a specific performance test using the flag package. This example sets up a size parameter for the upload test.\n\nLANGUAGE: Go\nCODE:\n```\ntype uploadTestOptions struct {\n\tsize int\n}\n\nvar uploadTestOpts uploadTestOptions = uploadTestOptions{size: 10240}\n\n// uploadTestRegister is called once per process\nfunc uploadTestRegister() {\n\tflag.IntVar(&uploadTestOpts.size, \"size\", 10240, \"Size in bytes of data to be transferred in upload or download tests.\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Pipeline for azblob Client in Go\nDESCRIPTION: Shows how to configure the HTTP pipeline during client construction using azblob.ClientOptions and azcore.ClientOptions.\n\nLANGUAGE: go\nCODE:\n```\nclient, err := azblob.NewClient(account, cred, &azblob.ClientOptions{\n\tClientOptions: azcore.ClientOptions{\n\t\t// configure HTTP pipeline options here\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Handling HTTP Errors in Azure Key Vault Keys Client\nDESCRIPTION: Demonstrates error handling for HTTP requests in the Azure Key Vault Keys client, using type assertion to identify and handle ResponseError.\n\nLANGUAGE: Go\nCODE:\n```\nimport \"github.com/Azure/azure-sdk-for-go/sdk/azcore\"\n\nresp, err := client.GetKey(context.Background(), \"keyName\", nil)\nif err != nil {\n    var httpErr *azcore.ResponseError\n    if errors.As(err, &httpErr) {\n        // TODO: investigate httpErr\n    } else {\n        // TODO: not an HTTP error\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Azure OpenAI Assistants and Azure Identity Modules in Go\nDESCRIPTION: This snippet demonstrates how to install the required modules for using Azure OpenAI assistants in a Go project. It includes the main azopenaiassistants module and the optional azidentity module for Azure Active Directory authentication.\n\nLANGUAGE: Bash\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/ai/azopenaiassistants\n\n# optional\ngo get github.com/Azure/azure-sdk-for-go/sdk/azidentity\n```\n\n----------------------------------------\n\nTITLE: Calling Fake Client Methods in Go\nDESCRIPTION: This snippet demonstrates how to call fake client methods using the Azure SDK for Go. It shows a simple call to the 'Get' method of a fake VirtualMachinesClient.\n\nLANGUAGE: go\nCODE:\n```\nresp, err := client.Get(context.TODO(), \"fake-resource-group\", \"fake-vm\", nil)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Cosmos DB using DefaultAzureCredential in Go\nDESCRIPTION: This code snippet shows how to create a default Azure credential for authenticating with Azure Cosmos DB. It uses the azidentity package to provide various authentication methods.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Upgrading SDK Major Version\nDESCRIPTION: Commands for upgrading to the latest major version of the SDK using gomajor tool.\n\nLANGUAGE: sh\nCODE:\n```\ngo install github.com/icholy/gomajor@latest\ngomajor get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute@latest\n```\n\n----------------------------------------\n\nTITLE: Authentication in Latest Version (sdk/resourcemanager/**/arm**)\nDESCRIPTION: Example of authentication using azidentity in the latest version of Azure SDK for Go.\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/Azure/azure-sdk-for-go/sdk/azidentity\"\nimport \"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armresources\"\n```\n\nLANGUAGE: go\nCODE:\n```\ncredential, err := azidentity.NewClientSecretCredential(\"<TenantId>\", \"<ClientId>\", \"<ClientSecret>\", nil)\nclientFactory, err := armresources.NewClientFactory(<subscription ID>, credential, &options)\nif err != nil {\n    log.Fatal(err)\n}\nclient := clientFactory.NewResourceGroupsClient()\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging for Azure SDK in Go\nDESCRIPTION: This snippet demonstrates how to set up logging for all Azure SDK modules, including the Monitor Query client. It shows how to customize log output and filter specific event types.\n\nLANGUAGE: go\nCODE:\n```\nimport azlog \"github.com/Azure/azure-sdk-for-go/sdk/azcore/log\"\n\n// Print log events to stdout\nazlog.SetListener(func(cls azlog.Event, msg string) {\n\tfmt.Println(msg)\n})\n\n// Includes only requests and responses in credential logs\nazlog.SetEvents(azlog.EventRequest, azlog.EventResponse)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Tables Client with Shared Key Authentication\nDESCRIPTION: Create an Azure Tables service client using shared key authentication.\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/Azure/azure-sdk-for-go/sdk/data/aztables\"\n)\n\nfunc main() {\n    cred, err := aztables.NewSharedKeyCredential(\"<myAccountName>\", \"<myAccountKey>\")\n    if err != nil {\n        panic(err)\n    }\n    client, err := aztables.NewServiceClientWithSharedKey(serviceURL, cred, nil)\n    if err != nil {\n        panic(err)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Logs with azquery in Go\nDESCRIPTION: This snippet demonstrates how to create a logs client and execute a logs query using the azquery module in the Azure SDK for Go. It includes error handling and uses the QueryWorkspace method.\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\t\"time\"\n\n\t\"github.com/Azure/azure-sdk-for-go/sdk/azcore/to\"\n\t\"github.com/Azure/azure-sdk-for-go/sdk/azidentity\"\n\t\"github.com/Azure/azure-sdk-for-go/sdk/monitor/azquery\"\n)\n\nfunc main() {\n\t// create the logs client\n\tcred, err := azidentity.NewDefaultAzureCredential(nil)\n\tif err != nil {\n\t\t//TODO: handle error\n\t}\n\tclient, err := azquery.NewLogsClient(cred, nil)\n\tif err != nil {\n\t\t//TODO: handle error\n\t}\n\n\t// execute the logs query\n\tres, err := client.QueryWorkspace(context.TODO(), \"workspaceID\",\n\t\tazquery.Body{\n\t\t\tQuery:    to.Ptr(\"<kusto query>\"),\n\t\t\tTimespan: to.Ptr(azquery.NewTimeInterval(time.Date(2022, 12, 25, 0, 0, 0, 0, time.UTC), time.Date(2022, 12, 25, 12, 0, 0, 0, time.UTC))),\n\t\t},\n\t\tnil)\n\tif err != nil {\n\t\t//TODO: handle error\n\t}\n\tif res.Error != nil {\n\t\t//TODO: handle partial error\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Key Vault Secrets Client in Go\nDESCRIPTION: Example showing how to create an authenticated Key Vault Secrets client using DefaultAzureCredential.\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"github.com/Azure/azure-sdk-for-go/sdk/azidentity\"\n\t\"github.com/Azure/azure-sdk-for-go/sdk/security/keyvault/azsecrets\"\n)\n\nfunc main() {\n\tcred, err := azidentity.NewDefaultAzureCredential(nil)\n\tif err != nil {\n\t\t// TODO: handle error\n\t}\n\n\tclient := azsecrets.NewClient(\"https://<TODO: your vault name>.vault.azure.net\", cred, nil)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Fake Virtual Machines Server in Go\nDESCRIPTION: This snippet shows how to create a fake server for virtual machines using the 'fake' subpackage from the Azure SDK for Go.\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute/v5/fake\"\n\nmyFakeVirtualMachinesServer := fake.VirtualMachinesServer{}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging for Azure SDK in Go\nDESCRIPTION: This code snippet demonstrates how to configure logging for the Azure SDK in Go. It sets up a listener to print log output to stdout.\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  \"fmt\"\n  azlog \"github.com/Azure/azure-sdk-for-go/sdk/azcore/log\"\n)\n\n// print log output to stdout\nazlog.SetListener(func(event azlog.Event, s string) {\n    fmt.Printf(\"[%s] %s\\n\", event, s)\n})\n```\n\n----------------------------------------\n\nTITLE: Authenticating Web PubSub Client with Service Principal\nDESCRIPTION: Creates a Web PubSub client using DefaultAzureCredential for authentication. Requires endpoint URL from Azure Portal.\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"github.com/Azure/azure-sdk-for-go/sdk/azidentity\"\n\t\"github.com/Azure/azure-sdk-for-go/sdk/messaging/azwebpubsub\"\n\t\"log\"\n)\n\nfunc main() {\n\tcred, err := azidentity.NewDefaultAzureCredential(nil)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to obtain a credential: %v\", err)\n\t}\n\n\tclient, err := azwebpubsub.NewClient(\"<your Web PubSub's endpoint URL>\", cred, nil)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to create client: %v\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting Fake Server to Client Instance in Go\nDESCRIPTION: This snippet shows how to connect a fake server to a client instance during its construction using the Azure SDK for Go. It demonstrates creating a fake TokenCredential and setting up the client options with a fake transport.\n\nLANGUAGE: go\nCODE:\n```\nimport azfake \"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake\"\n\nclient, err := armcompute.VirtualMachinesClient(\"fake-subscription-id\", &azfake.TokenCredential{}, &arm.ClientOptions{\n\tClientOptions: azcore.ClientOptions{\n\t\tTransport: fake.NewVirtualMachinesServerTransport(&myFakeVirtualMachinesServer),\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Shared Key Credential in Go\nDESCRIPTION: Shows how to create a client with a shared key credential in the azfile module. The credential is passed directly to the client constructor, replacing the previous Pipeline approach.\n\nLANGUAGE: go\nCODE:\n```\nclient, err := service.NewClientWithSharedKeyCredential(\"<my storage account URL>\", cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Accessing Dead Letter Queues with azservicebus in Go\nDESCRIPTION: Shows how to create a Receiver for a dead letter queue using the new azservicebus package. This approach is consistent for both queues and subscriptions.\n\nLANGUAGE: go\nCODE:\n```\nreceiver, err := client.NewReceiverForQueue(\n\tqueueName,\n\t&azservicebus.ReceiverOptions{\n\t\tReceiveMode: azservicebus.ReceiveModePeekLock,\n\t\tSubQueue:    azservicebus.SubQueueDeadLetter,\n\t})\n\n//or\n\nreceiver, err := client.NewReceiverForSubscription(\n  topicName,\n  subscriptionName,\n  &azservicebus.ReceiverOptions{\n    ReceiveMode: azservicebus.ReceiveModePeekLock,\n    SubQueue:    azservicebus.SubQueueDeadLetter,\n  })\n```\n\n----------------------------------------\n\nTITLE: Creating Cosmos DB Client with Microsoft Entra Authentication\nDESCRIPTION: Example of creating a Cosmos DB client using Microsoft Entra identity authentication.\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/Azure/azure-sdk-for-go/sdk/azidentity\"\n\ncred, err := azidentity.NewDefaultAzureCredential(nil)\nhandle(err)\nclient, err := azcosmos.NewClient(\"myAccountEndpointURL\", cred, nil)\nhandle(err)\n```\n\n----------------------------------------\n\nTITLE: Managing Resource Groups\nDESCRIPTION: Complete example of creating, updating, listing, and deleting resource groups\n\nLANGUAGE: go\nCODE:\n```\nfunc createResourceGroup(ctx context.Context) (*armresources.ResourceGroupsClientCreateOrUpdateResponse, error) {\n    param := armresources.ResourceGroup{\n        Location: to.Ptr(location),\n    }\n    resp, err := rgClient.CreateOrUpdate(ctx, resourceGroupName, param, nil)\n    return &resp, err\n}\n```\n\nLANGUAGE: go\nCODE:\n```\nfunc updateResourceGroup(ctx context.Context) (*armresources.ResourceGroupsClientUpdateResponse, error) {\n    update := armresources.ResourceGroupPatchable{\n        Tags: map[string]*string{\n            \"new\": to.Ptr(\"tag\"),\n        },\n    }\n    resp,err :=rgClient.Update(ctx, resourceGroupName, update, nil)\n    return  &resp, err\n}\n```\n\nLANGUAGE: go\nCODE:\n```\nfunc listResourceGroups(ctx context.Context) ([]*armresources.ResourceGroup, error) {\n    pager := rgClient.NewListPager(nil)\n    var resourceGroups []*armresources.ResourceGroup\n    for pager.More() {\n        nextResult, err := pager.NextPage(ctx)\n        if err != nil {\n            return nil, err\n        }\n        if nextResult.ResourceGroupListResult.Value != nil {\n            resourceGroups = append(resourceGroups, nextResult.ResourceGroupListResult.Value...)\n        }\n    }\n    return resourceGroups, nil\n}\n```\n\nLANGUAGE: go\nCODE:\n```\nfunc deleteResourceGroup(ctx context.Context) error {\n    poller, err := rgClient.BeginDelete(ctx, resourceGroupName, nil)\n    if err != nil {\n        return err\n    }\n    _, err = poller.PollUntilDone(ctx, nil)\n    return err\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Cosmos DB SDK with Go\nDESCRIPTION: Command to install the Azure Cosmos DB SDK for Go using the go get command.\n\nLANGUAGE: bash\nCODE:\n```\ngo get -u github.com/Azure/azure-sdk-for-go/sdk/data/azcosmos\n```\n\n----------------------------------------\n\nTITLE: Adding Attributes to StartSpanOptions\nDESCRIPTION: Added field 'Attributes' to runtime.StartSpanOptions to simplify creating spans with attributes.\n\nLANGUAGE: Go\nCODE:\n```\nspan := runtime.StartSpan(ctx, \"operation\", &runtime.StartSpanOptions{\n    Attributes: map[string]interface{}{\n        \"key\": \"value\",\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Iterating Directory Contents with Pager in Go\nDESCRIPTION: Demonstrates how to list files and directories using the new Pager approach in the azfile module. This replaces the explicit Marker type used in azure-storage-file-go for pagination.\n\nLANGUAGE: go\nCODE:\n```\ndirClient, err := directory.NewClientWithSharedKeyCredential(\"<directory URL>\", cred, options)\n// TODO: handle err\n\npager := dirClient.NewListFilesAndDirectoriesPager(nil)\nfor pager.More() {\n\tpage, err := pager.NextPage(context.TODO())\n\t// process results\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Policy Insight Policy Events Client in Go\nDESCRIPTION: This snippet shows how to create a specific client (PolicyEventsClient) using the previously created client factory. This client provides access to policy event-related APIs.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewPolicyEventsClient()\n```\n\n----------------------------------------\n\nTITLE: Queue Service API Operations\nDESCRIPTION: Example showing basic queue operations including creation, message enqueue/dequeue, and deletion\n\nLANGUAGE: go\nCODE:\n```\n// shared key credential set up\ncred := azqueue.NewSharedKeyCredential(accountName, accountKey)\n\n// instantiate service client\nserviceClient, err := azqueue.NewServiceClientWithSharedKeyCredential(account, cred, nil)\n// TODO: handle error\n\n// 1. create queue\nqueueClient := serviceClient.NewQueueClient(queueName)\n_, err = queueClient.Create(context.TODO(), nil)\n// TODO: handle error\n\n// 2. enqueue message\n_, err = queueClient.EnqueueMessage(context.TODO(), message, nil)\n// TODO: handle error\n\n// 3. dequeue message\n_, err = queueClient.DequeueMessage(context.TODO(), nil)\n// TODO: handle error\n\n// 4. delete queue\n_, err =queueClient.Delete(context.TODO(), nil)\n// TODO: handle error\n```\n\n----------------------------------------\n\nTITLE: Implementing GlobalPerfTest Interface for Azure Blob Upload Test in Go\nDESCRIPTION: Demonstrates the implementation of the GlobalPerfTest interface for an Azure Blob upload performance test. It includes global setup, cleanup, and creation of individual test instances.\n\nLANGUAGE: Go\nCODE:\n```\ntype uploadTestGlobal struct {\n\tperf.PerfTestOptions\n\tcontainerName         string\n\tblobName              string\n\tglobalContainerClient azblob.ContainerClient\n}\n\n// NewUploadTest is called once per process\nfunc NewUploadTest(ctx context.Context, options perf.PerfTestOptions) (perf.GlobalPerfTest, error) {\n\tu := &uploadTestGlobal{\n\t\tPerfTestOptions: options,\n\t\tcontainerName:   \"uploadcontainer\",\n\t\tblobName:        \"uploadblob\",\n\t}\n\n\tconnStr, ok := os.LookupEnv(\"AZURE_STORAGE_CONNECTION_STRING\")\n\tif !ok {\n\t\treturn nil, fmt.Errorf(\"the environment variable 'AZURE_STORAGE_CONNECTION_STRING' could not be found\")\n\t}\n\n\tcontainerClient, err := azblob.NewContainerClientFromConnectionString(connStr, u.containerName, nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tu.globalContainerClient = containerClient\n\t_, err = u.globalContainerClient.Create(context.Background(), nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn u, nil\n}\n\nfunc (m *uploadTestGlobal) GlobalCleanup(ctx context.Context) error {\n\tconnStr, ok := os.LookupEnv(\"AZURE_STORAGE_CONNECTION_STRING\")\n\tif !ok {\n\t\treturn fmt.Errorf(\"the environment variable 'AZURE_STORAGE_CONNECTION_STRING' could not be found\")\n\t}\n\n\tcontainerClient, err := azblob.NewContainerClientFromConnectionString(connStr, m.containerName, nil)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t_, err = containerClient.Delete(context.Background(), nil)\n\treturn err\n}\n\n// NewPerfTest is called once per goroutine\nfunc (g *uploadTestGlobal) NewPerfTest(ctx context.Context, options *perf.PerfTestOptions) (perf.PerfTest, error) {\n\tu := &uploadPerfTest{\n\t\tuploadTestGlobal: g,\n\t\tPerfTestOptions:  *options,\n\t}\n\n\tconnStr, ok := os.LookupEnv(\"AZURE_STORAGE_CONNECTION_STRING\")\n\tif !ok {\n\t\treturn nil, fmt.Errorf(\"the environment variable 'AZURE_STORAGE_CONNECTION_STRING' could not be found\")\n\t}\n\n\tcontainerClient, err := azblob.NewContainerClientFromConnectionString(\n\t\tconnStr,\n\t\tu.uploadTestGlobal.containerName,\n\t\t&azblob.ClientOptions{\n\t\t\tTransporter: u.PerfTestOptions.Transporter,\n\t\t},\n\t)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tbc := containerClient.NewBlockBlobClient(u.blobName)\n\tu.blobClient = bc\n\n\tdata, err := perf.NewRandomStream(uploadTestOpts.size)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tu.data = data\n\n\treturn u, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Cosmos DB Cassandra Clusters Client in Go\nDESCRIPTION: This snippet shows how to create a specific client (in this case, for Cassandra clusters) using the client factory. This allows access to Cassandra-related APIs in Azure Cosmos DB.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewCassandraClustersClient()\n```\n\n----------------------------------------\n\nTITLE: Azure Identity Integration with azservicebus Client in Go\nDESCRIPTION: Shows how to create an azservicebus Client using Azure Identity credentials, specifically DefaultAzureCredential, for authentication.\n\nLANGUAGE: go\nCODE:\n```\ncredential, err := azidentity.NewDefaultAzureCredential(nil)\nclient, err := azservicebus.NewClient(\"<ex: myservicebus.servicebus.windows.net>\", credential, nil)\n```\n\n----------------------------------------\n\nTITLE: Resuming Long-Running Operations with Tokens in Go\nDESCRIPTION: Demonstrates how to serialize and resume a long-running operation using resume tokens. This allows for recreating a poller in a different process or after an interruption.\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO() // your context\npoller, err := client.BeginCreate(ctx, \"resource_identifier\", \"additonal_parameter\", nil)\nif err != nil {\n    // handle error...\n}\ntoken, err := poller.ResumeToken()\nif err != nil {\n    // handle error...\n}\n\n// ... \n\n// recreate the poller from the token\npoller, err = client.BeginCreate(ctx, \"\", \"\", &armresources.ResourceGroupsClientBeginCreateOptions{\n    ResumeToken: token,\n})\nresp, err = poller.PollUntilDone(ctx, nil)\nif err != nil {\n    // handle error...\n}\n// dealing with `resp`\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Managed Service Identity Client Factory in Go\nDESCRIPTION: This code creates a client factory for Azure Managed Service Identity, which can be used to instantiate various clients in the module. It requires a subscription ID and credential.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armmsi.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Entities in Azure Tables\nDESCRIPTION: Create entities in an Azure Tables table using the client.\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"encoding/json\"\n    \"time\"\n\n    \"github.com/Azure/azure-sdk-for-go/sdk/data/aztables\"\n)\n\nfunc main() {\n    cred, err := aztables.NewSharedKeyCredential(\"<myAccountName>\", \"<myAccountKey>\")\n    if err != nil {\n        panic(err)\n    }\n\n    service, err := aztables.NewServiceClient(\"https://<myAccountName>.table.core.windows.net\", cred, nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client, err := service.NewClient(\"myTable\")\n    if err != nil {\n        panic(err)\n    }\n\n    myEntity := aztables.EDMEntity{\n        Entity: aztables.Entity{\n            PartitionKey: \"001234\",\n            RowKey: \"RedMarker\",\n        },\n        Properties: map[string]any{\n            \"Stock\": 15,\n            \"Price\": 9.99,\n            \"Comments\": \"great product\",\n            \"OnSale\": true,\n            \"ReducedPrice\": 7.99,\n            \"PurchaseDate\": aztables.EDMDateTime(time.Date(2021, time.August, 21, 1, 1, 0, 0, time.UTC)),\n            \"BinaryRepresentation\": aztables.EDMBinary([]byte{\"Bytesliceinfo\"})\n        }\n    }\n    marshalled, err := json.Marshal(myEntity)\n    if err != nil {\n        panic(err)\n    }\n\n    resp, err := client.AddEntity(context.TODO(), marshalled, nil)\n    if err != nil {\n        panic(err)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure SDK Logging in Go\nDESCRIPTION: Example showing how to set up logging for the Azure SDK using azcore's logging implementation. Demonstrates configuring a custom log listener to output log events to stdout.\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  \"fmt\"\n  azlog \"github.com/Azure/azure-sdk-for-go/sdk/azcore/log\"\n)\n\n// print log output to stdout\nazlog.SetListener(func(event azlog.Event, s string) {\n    fmt.Printf(\"[%s] %s\\n\", event, s)\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Raw HTTP Response in Container Registry Client\nDESCRIPTION: Demonstrates how to capture and access the raw http.Response from Container Registry operations using runtime.WithCaptureResponse context modification.\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime\"\n\nvar response *http.Response\nctx := runtime.WithCaptureResponse(context.TODO(), &response)\n_, err = client.GetRepositoryProperties(ctx, \"library/hello-world\", nil)\nif err != nil {\n\t// TODO: handle error\n}\n// TODO: do something with response\n```\n\n----------------------------------------\n\nTITLE: Adding OpenTelemetry Support in Azure Cosmos DB Go SDK\nDESCRIPTION: Implementation of OpenTelemetry trace spans support in the Azure SDK for Go Cosmos DB client. This feature was added in version 1.1.0.\n\nLANGUAGE: markdown\nCODE:\n```\n* Added support for OpenTelemetry trace spans. See [PR 23268](https://github.com/Azure/azure-sdk-for-go/pull/23268)\n```\n\n----------------------------------------\n\nTITLE: Installing ADLS Gen2 SDK Packages\nDESCRIPTION: Instructions for installing the ADLS Gen2 Storage SDK and Azure Identity packages using go get command.\n\nLANGUAGE: powershell\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/storage/azdatalake\ngo get github.com/Azure/azure-sdk-for-go/sdk/azidentity\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Storage Account with Azure CLI\nDESCRIPTION: Use Azure CLI to create a new Storage Account for use with the Azure File Storage SDK.\n\nLANGUAGE: powershell\nCODE:\n```\naz storage account create --name MyStorageAccount --resource-group MyResourceGroup --location westus --sku Standard_LRS\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Blob Storage Go Packages\nDESCRIPTION: Commands to install the required Go packages for Azure Blob Storage and Azure Identity\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/storage/azblob\ngo get github.com/Azure/azure-sdk-for-go/sdk/azidentity\n```\n\n----------------------------------------\n\nTITLE: Managing TCP Connections with ConsumerClient in Go\nDESCRIPTION: Demonstrates how to create and manage TCP connections and AMQP links using the ConsumerClient. Shows connection ownership and partition client creation patterns.\n\nLANGUAGE: go\nCODE:\n```\n// consumerClient will own a TCP connection.\nconsumerClient, err := azeventhubs.NewConsumerClient(/* arguments elided for example */)      \n\n// Close the TCP connection (and any child links)\ndefer consumerClient.Close(context.TODO())    \n\n// this call will lazily create a set of AMQP links using the consumerClient's TCP connection.\npartClient0, err := consumerClient.NewPartitionClient(\"0\", nil)\ndefer partClient0.Close(context.TODO())     // will close the AMQP link, not the connection\n\n// this call will also lazily create a set of AMQP links using the consumerClient's TCP connection.\npartClient1, err := consumerClient.NewPartitionClient(\"1\", nil)\ndefer partClient1.Close(context.TODO())     // will close the AMQP link, not the connection\n```\n\n----------------------------------------\n\nTITLE: Initializing azblob Client in Go\nDESCRIPTION: Creates a new azblob client using a storage account URL and credential. The ClientOptions parameter is set to nil to use default options.\n\nLANGUAGE: go\nCODE:\n```\nclient, err := azblob.NewClient(\"<my storage account URL>\", cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Defining File Upload Request Body Schema in Go for Azure SDK\nDESCRIPTION: This struct defines the schema for the request body when uploading files using the Azure SDK for Go. It includes required fields for file data and purpose, as well as an optional filename field.\n\nLANGUAGE: Go\nCODE:\n```\ntype Paths1Filz8PFilesPostRequestbodyContentMultipartFormDataSchema struct {\n\t// REQUIRED; The file data (not filename) to upload.\n\tFile *string\n\n\t// REQUIRED; The intended purpose of the file.\n\tPurpose *FilePurpose\n\n\t// A filename to associate with the uploaded data.\n\tFilename *string\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Service Client with Shared Key Credential in Go\nDESCRIPTION: Demonstrates how to create a new service client using a shared key credential in the azfile module. This replaces the previous method of creating a Pipeline with credentials.\n\nLANGUAGE: go\nCODE:\n```\nclient, err := service.NewClientWithSharedKeyCredential(\"<my storage account URL>\", sharedKeyCred, nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring Metrics Query Client Generation for Azure SDK for Go\nDESCRIPTION: YAML configuration for generating the Metrics Query client in the Azure SDK for Go. It specifies input files and includes directives for renaming operations and customizing field names.\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Metrics Query Client\ninput-file: \n    - https://github.com/Azure/azure-rest-api-specs/blob/21f5332f2dc7437d1446edf240e9a3d4c90c6431/specification/monitor/resource-manager/Microsoft.Insights/stable/2018-01-01/metricDefinitions_API.json\n    - https://github.com/Azure/azure-rest-api-specs/blob/21f5332f2dc7437d1446edf240e9a3d4c90c6431/specification/monitor/resource-manager/Microsoft.Insights/stable/2018-01-01/metrics_API.json\n    - https://github.com/Azure/azure-rest-api-specs/blob/21f5332f2dc7437d1446edf240e9a3d4c90c6431/specification/monitor/resource-manager/Microsoft.Insights/preview/2017-12-01-preview/metricNamespaces_API.json\n\ndirective:\n  # rename metric operations to generate as a separate metrics client\n  - rename-operation:\n      from: Metrics_List\n      to: Metrics_QueryResource\n  - rename-operation:\n      from: MetricDefinitions_List\n      to: Metrics_ListDefinitions\n  - rename-operation:\n      from: MetricNamespaces_List\n      to: Metrics_ListNamespaces\n\n  # rename some metrics fields\n  - from: swagger-document\n    where: $.definitions.Metric.properties.timeseries\n    transform: $[\"x-ms-client-name\"] = \"TimeSeries\"\n  - from: swagger-document\n    where: $.definitions.TimeSeriesElement.properties.metadatavalues\n    transform: $[\"x-ms-client-name\"] = \"MetadataValues\"\n  - from: swagger-document\n    where: $.definitions.Response.properties.resourceregion\n    transform: $[\"x-ms-client-name\"] = \"ResourceRegion\"\n  - from: swagger-document\n    where: $.parameters.MetricNamespaceParameter\n    transform: $[\"x-ms-client-name\"] = \"MetricNamespace\"\n  - from: swagger-document\n    where: $.parameters.MetricNamesParameter\n    transform: $[\"x-ms-client-name\"] = \"MetricNames\"\n  - from: swagger-document\n    where: $.parameters.OrderByParameter\n    transform: $[\"x-ms-client-name\"] = \"OrderBy\"\n\n  # change type of MetricsClientQueryResourceOptions.Aggregation from *string to []*AggregationType\n  - from: options.go\n    where: $\n    transform: return $.replace(/Aggregation \\*string/g, \"Aggregation []*AggregationType\");\n  - from: \n        - metrics_client.go\n        - metricsbatch_client.go\n    where: $\n    transform: return $.replace(/\\*options.Aggregation/g, \"aggregationTypeToString(options.Aggregation)\");\n  - from: swagger-document\n    where: $.parameters.AggregationsParameter\n    transform: $[\"description\"] = \"The list of aggregation types to retrieve\"\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK Go Generation\nDESCRIPTION: This YAML configuration specifies settings for AutoRest to generate the Azure SDK for Go. It requires specific Azure REST API specifications, sets the license header, module version, and includes directives to modify certain operations.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/432872fac1d0f8edcae98a0e8504afc0ee302710/specification/automation/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/432872fac1d0f8edcae98a0e8504afc0ee302710/specification/automation/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 0.9.0\ndirective:\n  - where-operation: DscConfiguration_CreateOrUpdate\n    transform: delete $['x-ms-examples']\n  - where-operation: DscConfiguration_Update\n    transform: delete $['x-ms-examples']\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Logs Query Options in Go\nDESCRIPTION: Set up advanced options for logs queries, including increased wait time, statistics, and visualization data using the LogsQueryOptions struct.\n\nLANGUAGE: go\nCODE:\n```\nazquery.LogsClientQueryWorkspaceOptions{\n\t\t\tOptions: &azquery.LogsQueryOptions{\n\t\t\t\tStatistics:    to.Ptr(true),\n\t\t\t\tVisualization: to.Ptr(true),\n\t\t\t\tWait:          to.Ptr(600),\n\t\t\t},\n\t\t}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Cloud Environment\nDESCRIPTION: Example showing credential configuration for sovereign/private clouds using azcore/cloud package\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud\"\n\nopts := azidentity.ClientSecretCredentialOptions{}\nopts.Cloud = cloud.AzureGovernment\ncred, err := azidentity.NewClientSecretCredential(tenantID, clientID, secret, &opts)\n```\n\n----------------------------------------\n\nTITLE: Creating File Upload Request in Azure SDK Go Client\nDESCRIPTION: Creates an HTTP POST request for file upload with multipart form data. The method sets required headers, configures the request URL, and includes file content and purpose in the form data. Handles uploading files to the /files endpoint with proper request configuration.\n\nLANGUAGE: go\nCODE:\n```\n// uploadFileCreateRequest creates the UploadFile request.\n// another line of documentation.\nfunc (client *Client) uploadFileCreateRequest(ctx context.Context, file string, purpose FilePurpose, options *ClientUploadFileOptions) (*policy.Request, error) {\n\turlPath := \"/files\"\n\treq, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treq.Raw().Header[\"Accept\"] = []string{\"application/json\"}\n\tif err := runtime.SetMultipartFormData(req, map[string]any{\n\t\t\t\"file\": file,\n\t\t\t\"purpose\": purpose,\n\t\t\t\"Filename\": Filename,\n\t}); err != nil {\n\t\treturn nil, err\n\t}\n\treturn req, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Enumerating Filesystem Paths\nDESCRIPTION: Example demonstrating how to list paths within a filesystem using pagination.\n\nLANGUAGE: go\nCODE:\n```\nconst (\n\tfs = \"https://MYSTORAGEACCOUNT.dfs.core.windows.net/sample-fs\"\n)\n\n// authenticate with Azure Active Directory\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n// TODO: handle error\n\n// create a filesystem client for the specified storage account\nclient, err := filesystem.NewClient(fs, cred, nil)\n// TODO: handle error\n\n// path listings are returned across multiple pages\npager := client.NewListPathsPager(true, nil)\n\n// continue fetching pages until no more remain\nfor pager.More() {\n  // advance to the next page\n\tpage, err := pager.NextPage(context.TODO())\n\t// TODO: handle error\n\n\t// print the path names for this page\n\tfor _, path := range page.PathList.Paths {\n\t\tfmt.Println(*path.Name)\n        fmt.Println(*path.IsDirectory)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Table in Azure Tables\nDESCRIPTION: Create a new table in Azure Tables using the service client.\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"fmt\"\n    \"os\"\n\n    \"github.com/Azure/azure-sdk-for-go/sdk/azidentity\"\n    \"github.com/Azure/azure-sdk-for-go/sdk/data/aztables\"\n)\n\nfunc main() {\n    cred, err := azidentity.NewDefaultAzureCredential(nil)\n    if err != nil {\n        panic(err)\n    }\n    accountName, ok := os.LookupEnv(\"TABLES_STORAGE_ACCOUNT_NAME\")\n    if !ok {\n        panic(\"TABLES_STORAGE_ACCOUNT_NAME could not be found\")\n    }\n    serviceURL := fmt.Sprintf(\"https://%s.table.core.windows.net\", accountName)\n\n    service, err := aztables.NewServiceClient(serviceURL, cred, nil)\n    if err != nil {\n        panic(err)\n    }\n\n    // Create a table\n    _, err = service.CreateTable(context.TODO(), \"fromServiceClient\", nil)\n    if err != nil {\n        panic(err)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Database for PostgreSQL Client Factory in Go\nDESCRIPTION: Initializes a client factory for Azure Database for PostgreSQL using a subscription ID and credential.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armpostgresql.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Setting Azure Environment Variables\nDESCRIPTION: Commands to set required Azure authentication environment variables on Linux\n\nLANGUAGE: sh\nCODE:\n```\nexport AZURE_CLIENT_ID=\"__CLIENT_ID__\"\nexport AZURE_CLIENT_SECRET=\"__CLIENT_SECRET__\"\nexport AZURE_TENANT_ID=\"__TENANT_ID__\"\nexport AZURE_SUBSCRIPTION_ID=\"__SUBSCRIPTION_ID__\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Key Vault Client with DisableChallengeResourceVerification in Go\nDESCRIPTION: This code snippet demonstrates how to create an Azure Key Vault client with the DisableChallengeResourceVerification option set to true. This is useful when working with mock services or non-transparent proxies for testing purposes.\n\nLANGUAGE: go\nCODE:\n```\nvaultURL := \"https://myvault.vault.azure.net\"\ncredential, err := azidentity.NewDefaultAzureCredential(nil)\noptions := azsecrets.ClientOptions{\n    DisableChallengeResourceVerification: true,\n}\nclient := azsecrets.NewClient(vaultURI, credential, &options)\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure Logic Apps Workflows Client in Go\nDESCRIPTION: This snippet shows how to create a specific client for working with Azure Logic Apps workflows using the client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewWorkflowsClient()\n```\n\n----------------------------------------\n\nTITLE: Initializing Performance Test Main Function in Go\nDESCRIPTION: Creates a main function that uses perf.Run to register and execute performance tests. It demonstrates how to set up multiple tests with optional flag registration.\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n    \"github.com/Azure/azure-sdk-for-go/sdk/internal/perf\"\n)\n\n// uploadTestRegister registers flags for the \"UploadBlobTest\"\n// This is optional and does not to be included for every test.\nfunc uploadTestRegister() {\n\tflag.IntVar(&uploadTestOpts.size, \"size\", 10240, \"Size in bytes of data to be transferred in upload or download tests. Default is 10240.\")\n}\n\nfunc main() {\n\tperf.Run(map[string]perf.PerfMethods{\n\t\t\"UploadBlobTest\":   {Register: uploadTestRegister, New: NewUploadTest},\n\t\t\"ListBlobTest\":     {Register: listTestRegister, New: NewListTest},\n\t\t\"DownloadBlobTest\": {Register: downloadTestRegister, New: NewDownloadTest},\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Custom HTTP Client in Latest Version (sdk/resourcemanager/**/arm**)\nDESCRIPTION: Example of using a custom HTTP client in the latest version of Azure SDK for Go.\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm\"\nimport \"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy\"\nimport \"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armresources\"\n```\n\nLANGUAGE: go\nCODE:\n```\nhttpClient := NewYourOwnHTTPClient{}\noptions := &arm.ClientOptions{\n    ClientOptions: policy.ClientOptions{\n        Transport: &httpClient,\n    },\n}\nclientFactory, err := armresources.NewClientFactory(<subscription ID>, credential, &options)\nif err != nil {\n    log.Fatal(err)\n}\nclient := clientFactory.NewResourceGroupsClient()\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Cosmos DB Client Factory in Go\nDESCRIPTION: This snippet demonstrates how to create a client factory for Azure Cosmos DB. It requires a subscription ID and credentials, and returns a factory that can be used to create specific clients.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armcosmos.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Managing Filesystems\nDESCRIPTION: Example showing how to create and delete a filesystem in ADLS Gen2 storage.\n\nLANGUAGE: go\nCODE:\n```\nconst (\n\tfs = \"https://MYSTORAGEACCOUNT.dfs.core.windows.net/sample-fs\"\n)\n\n// authenticate with Azure Active Directory\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n// TODO: handle error\n\n// create a client for the specified storage account\nclient, err := filesystem.NewClient(fs, cred, nil)\n// TODO: handle error\n\n_, err = client.Create(context.TODO(), nil)\n// TODO: handle error\n\n_, err = client.Delete(context.TODO(), nil)\n// TODO: handle error\n```\n\n----------------------------------------\n\nTITLE: Verifying App Service Managed Identity Endpoint Availability\nDESCRIPTION: This curl command checks the availability of the managed identity endpoint in an Azure App Service environment. It uses environment variables to construct the request to the identity endpoint.\n\nLANGUAGE: sh\nCODE:\n```\ncurl \"$IDENTITY_ENDPOINT?resource=https://management.core.windows.net&api-version=2019-08-01\" -H \"X-IDENTITY-HEADER: $IDENTITY_HEADER\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Cross-Region Availability and Failover in Azure Cosmos DB Go SDK\nDESCRIPTION: Addition of cross-region availability and failover mechanics supporting Azure Cosmos DB SDK multiregional environment behavior in the Go client. This feature was added in version 1.0.0.\n\nLANGUAGE: markdown\nCODE:\n```\n* Added cross-region availability and failover mechanics supporting [Azure Cosmos DB SDK multiregional environment behavior](https://learn.microsoft.com/azure/cosmos-db/nosql/troubleshoot-sdk-availability)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Service Bus Client Factory in Go\nDESCRIPTION: Initializes a client factory for Azure Service Bus with subscription ID and credentials.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armservicebus.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure using Default Credentials in Go\nDESCRIPTION: Creates a default Azure credential for authentication with Azure services.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Setting Telemetry Spans for Azure Cosmos DB Go SDK\nDESCRIPTION: Configuration of Telemetry spans in the Azure SDK for Go Cosmos DB client. All spans are set to have the Kind of SpanKindClient, and request_charge and status_code are added to all trace spans.\n\nLANGUAGE: markdown\nCODE:\n```\n* Set all Telemetry spans to have the Kind of SpanKindClient. See [PR 23618](https://github.com/Azure/azure-sdk-for-go/pull/23618)\n* Set request_charge and status_code on all trace spans. See [PR 23652](https://github.com/Azure/azure-sdk-for-go/pull/23652)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure File Storage SDK for Go\nDESCRIPTION: Use go get to install the Azure File Storage SDK and optionally the azidentity module for Azure Active Directory authentication.\n\nLANGUAGE: powershell\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/storage/azfile\ngo get github.com/Azure/azure-sdk-for-go/sdk/azidentity\n```\n\n----------------------------------------\n\nTITLE: Long Running Operations in Latest Version (sdk/resourcemanager/**/arm**)\nDESCRIPTION: Example of handling long-running operations in the latest version of Azure SDK for Go.\n\nLANGUAGE: go\nCODE:\n```\npoller, err := client.BeginCreateOrUpdate(context.TODO(), \"<resource group name>\", \"<virtual machine name>\", param, nil)\nif err != nil {\n    log.Fatal(err)\n}\nresp, err := poller.PollUntilDone(context.TODO(), nil)\nif err != nil {\n    log.Fatal(err)\n}\nlog.Printf(\"virtual machine ID: %v\", *resp.VirtualMachine.ID)\n```\n\n----------------------------------------\n\nTITLE: Client Secret Authentication Implementation\nDESCRIPTION: Shows how to implement client secret authentication in both library versions, including client initialization and authorization.\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/Azure/azure-sdk-for-go/services/resources/mgmt/2018-06-01/subscriptions\"\n    \"github.com/Azure/go-autorest/autorest\"\n    \"github.com/Azure/go-autorest/autorest/adal\"\n)\n\noauthCfg, err := adal.NewOAuthConfig(\"https://login.microsoftonline.com\", tenantID)\nhandle(err)\nspt, err := adal.NewServicePrincipalTokenWithSecret(\n    *oauthCfg, clientID, \"https://management.azure.com/\", &adal.ServicePrincipalTokenSecret{ClientSecret: secret},\n)\nhandle(err)\n\nclient := subscriptions.NewClient()\nclient.Authorizer = autorest.NewBearerAuthorizer(spt)\n```\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/Azure/azure-sdk-for-go/sdk/azidentity\"\n    \"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armsubscriptions\"\n)\n\ncred, err := azidentity.NewClientSecretCredential(tenantID, clientID, secret, nil)\nhandle(err)\n\nclient, err := armsubscriptions.NewClient(cred, nil)\nhandle(err)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Compute Client for Sovereign Clouds in Go\nDESCRIPTION: Example of how to configure the Azure Compute client factory to connect to sovereign clouds or Azure Stack using ClientOptions.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armcompute.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure using Default Azure Credential in Go\nDESCRIPTION: Creates a default Azure credential for authentication with Azure services using the azidentity package.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Handling Environment Variables in Recorded Tests\nDESCRIPTION: Demonstrates how to use environment variables in recorded tests while maintaining security.\n\nLANGUAGE: Go\nCODE:\n```\nfunc TestSomething(t *testing.T) {\n    accountName := recording.GetEnvVariable(t, \"TABLES_PRIMARY_ACCOUNT_NAME\", \"fakeaccountname\")\n    if recording.GetRecordMode() = recording.RecordMode {\n        err := recording.AddURISanitizer(\"fakeaccountname\", accountName, nil)\n        require.NoError(t, err)\n    }\n\n    // Continue test\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Metrics with armmonitor in Go\nDESCRIPTION: This snippet shows how to create a metrics client and execute a metrics query using the new armmonitor module in the Azure SDK for Go. It demonstrates the differences from azquery, including naming changes and the use of separate clients for different functionalities.\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/Azure/azure-sdk-for-go/sdk/azcore/to\"\n\t\"github.com/Azure/azure-sdk-for-go/sdk/azidentity\"\n\t\"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/monitor/armmonitor\"\n)\n\nfunc main() {\n\t// create the client\n\tcred, err := azidentity.NewDefaultAzureCredential(nil)\n\tif err != nil {\n\t\t//TODO: handle error\n\t}\n\tclient, err := armmonitor.NewMetricsClient(\"<subscription-id>\", cred, nil)\n\tif err != nil {\n\t\t//TODO: handle error\n\t}\n\n\t// execute the query\n\tres, err := client.List(context.Background(), \"<resourceID>\", &armmonitor.MetricsClientListOptions{\n\t\tTimespan:            to.Ptr(\"2021-04-20T09:00:00.000Z/2021-04-20T14:00:00.000Z\"),\n\t\tInterval:            to.Ptr(\"PT6H\"),\n\t\tMetricnames:         to.Ptr(\"BlobCount,BlobCapacity\"),\n\t\tAggregation:         to.Ptr(\"average,minimum,maximum\"),\n\t\tTop:                 to.Ptr[int32](5),\n\t\tOrderby:             to.Ptr(\"average asc\"),\n\t\tFilter:              to.Ptr(\"Tier eq '*'\"),\n\t\tResultType:          nil,\n\t\tMetricnamespace:     to.Ptr(\"Microsoft.Storage/storageAccounts/blobServices\"),\n\t\tAutoAdjustTimegrain: to.Ptr(true),\n\t\tValidateDimensions:  to.Ptr(false),\n\t})\n\tif err != nil {\n\t\t//TODO: handle partial error\n\t}\n\t_ = res\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Key Vault Keys and Azure Identity Packages in Go\nDESCRIPTION: Use go get to install the required packages for Azure Key Vault Keys and Azure Identity authentication.\n\nLANGUAGE: Bash\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/security/keyvault/azkeys\ngo get github.com/Azure/azure-sdk-for-go/sdk/azidentity\n```\n\n----------------------------------------\n\nTITLE: Installing Azure OpenAI Extensions Packages with Go\nDESCRIPTION: Commands to install the required Azure OpenAI extensions and optional Azure Identity packages using go get. The azidentity module is used for Azure Active Directory authentication with Azure OpenAI.\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/ai/azopenaiextensions\n\n# optional\ngo get github.com/Azure/azure-sdk-for-go/sdk/azidentity\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Go SDK Generation\nDESCRIPTION: YAML configuration for AutoRest to generate Go SDK code. It specifies the input file, version, output settings, and security configuration.\n\nLANGUAGE: yaml\nCODE:\n```\ngo: true\nversion: \"^3.0.0\"\ninput-file: https://github.com/Azure/azure-rest-api-specs/blob/d744b6bcb95ab4034832ded556dbbe58f4287c5b/specification/cosmos-db/data-plane/Microsoft.Tables/preview/2019-02-02/table.json\nlicense-header: MICROSOFT_MIT_NO_VERSION\nclear-output-folder: false\noutput-folder: internal\nfile-prefix: \"zz_\"\ntag: package-2019-02\ncredential-scope: none\nuse: \"@autorest/go@4.0.0-preview.59\"\nsecurity: \"AADToken\"\nsecurity-scopes: \"https://storage.azure.com/.default\"\nhonor-body-placement: true\nmodelerfour:\n  group-parameters: false\n  seal-single-value-enum-by-default: true\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure App Service Client Factory in Go\nDESCRIPTION: Initializes a client factory for Azure App Service. The factory is used to create specific clients for different App Service operations.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armappservice.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Security Client Factory in Go\nDESCRIPTION: This code creates a client factory for Azure Security operations. It requires a subscription ID and a credential object for authentication.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armsecurity.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Service Principal\nDESCRIPTION: Creates a Service Bus client using DefaultAzureCredential for authentication with a service principal\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  \"github.com/Azure/azure-sdk-for-go/sdk/azidentity\"\n  \"github.com/Azure/azure-sdk-for-go/sdk/messaging/azservicebus\"\n)\n\nfunc main() {\n  credential, err := azidentity.NewDefaultAzureCredential(nil)\n\n  if err != nil {\n    panic(err)\n  }\n\n  client, err := azservicebus.NewClient(\"<ex: myservicebus.servicebus.windows.net>\", credential, nil)\n\n  if err != nil {\n    panic(err)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Client Initialization in Latest Version (sdk/resourcemanager/**/arm**)\nDESCRIPTION: Examples of client initialization in the latest version of Azure SDK for Go.\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute\"\n```\n\nLANGUAGE: go\nCODE:\n```\nclient, err := armcompute.NewVirtualMachinesClient(\"<SubscriptionId>\", credential, nil)\n```\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armcompute.NewClientFactory(<subscription ID>, credential, &options)\nif err != nil {\n    log.Fatal(err)\n}\nclient := clientFactory.NewVirtualMachinesClient()\n```\n\n----------------------------------------\n\nTITLE: Adding Recording Policy to Client Options in Go\nDESCRIPTION: Shows how to add the custom recording policy to the client options for use in tests.\n\nLANGUAGE: Go\nCODE:\n```\nfunc TestSomething(t *testing.T) {\n    p := NewRecordingPolicy(t)\n    httpClient, err := recording.GetHTTPClient(t)\n    require.NoError(t, err)\n\n\toptions := &ClientOptions{\n\t\tClientOptions: azcore.ClientOptions{\n\t\t\tPerCallPolicies: []policy.Policy{p},\n\t\t\tTransport:       client,\n\t\t},\n\t}\n\n    client, err := NewClient(\"https://mystorageaccount.table.core.windows.net\", myCred, options)\n    require.NoError(t, err)\n    // Continue test\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure Automanage Best Practices Production Profile Assignment in Go\nDESCRIPTION: Assigns an Automanage Best Practices Production Configuration Profile to a specific VM.\n\nLANGUAGE: go\nCODE:\n```\nconfigProfileId := \"/providers/Microsoft.Automanage/bestPractices/AzureBestPracticesProduction\"\n\nproperties := armautomanage.ConfigurationProfileAssignmentProperties{\n    ConfigurationProfile: &configProfileId,\n}\n\nassignment := armautomanage.ConfigurationProfileAssignment{\n    Properties: &properties,\n}\n\n// assignment name must be 'default'\nnewAssignment, err = assignmentClient.CreateOrUpdate(context.Background(), \"default\", \"resourceGroupName\", \"vmName\", assignment, nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Options for Different Clouds\nDESCRIPTION: Sets up client options for connecting to different Azure clouds like Azure China using arm.ClientOptions\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armmachinelearning.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Factory with Custom Options\nDESCRIPTION: Creates a client factory with custom options for connecting to different Azure clouds including sovereign clouds and Azure Stack\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armdeviceupdate.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Re-recording Tests for AzOpenAI Module\nDESCRIPTION: These commands set up the environment for recording mode, run the tests to create new recordings, and update the assets file.\n\nLANGUAGE: bash\nCODE:\n```\ncd <root of the azopenai module>\n\nexport AZURE_RECORD_MODE=record\ngo test -count 1 -v ./...\n\n# push the recording changes to the repo\ntest-proxy push -a assets.json\n\n# commit our assets.json file now that it points\n# to the new recordings.\ngit add assets.json\ngit commit -m \"updated recordings\"\ngit push\n```\n\n----------------------------------------\n\nTITLE: Creating Azure ML Client Factory\nDESCRIPTION: Initializes a client factory for Azure Machine Learning services using subscription ID and credentials\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armmachinelearning.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Monitor Client Factory\nDESCRIPTION: Initializes a client factory for creating Azure Monitor service clients\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armmonitor.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Compute Client Factory in Go\nDESCRIPTION: Code snippet showing how to create a client factory for Azure Compute services, which can be used to instantiate specific clients.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armcompute.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Authentication with autorest/adal and azidentity\nDESCRIPTION: Demonstrates configuration setup for token providers in both autorest/adal and azidentity, showing how to configure endpoints and create service principal tokens.\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/Azure/go-autorest/autorest/adal\"\n\noauthCfg, err := adal.NewOAuthConfig(\"https://login.chinacloudapi.cn\", tenantID)\nhandle(err)\n\nspt, err := adal.NewServicePrincipalTokenWithSecret(\n    *oauthCfg, clientID, \"https://management.chinacloudapi.cn/\", &adal.ServicePrincipalTokenSecret{ClientSecret: secret},\n)\n```\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud\"\n    \"github.com/Azure/azure-sdk-for-go/sdk/azidentity\"\n)\n\nclientOpts := azcore.ClientOptions{Cloud: cloud.AzureChina}\n\ncred, err := azidentity.NewClientSecretCredential(\n    tenantID, clientID, secret, &azidentity.ClientSecretCredentialOptions{ClientOptions: clientOpts},\n)\nhandle(err)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure using Default Credentials in Go\nDESCRIPTION: This snippet demonstrates how to create a default Azure credential for authentication. It uses the azidentity module to provide various authentication methods.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Running Automation Initialization Script in Bash\nDESCRIPTION: Bash commands for navigating to the script directory and running the automation initialization script. This script sets up the necessary tools for SDK generation.\n\nLANGUAGE: sh\nCODE:\n```\ncd \"~/azure-sdk-for-go/eng/scripts\" # navigate to the script directory\n./automation_init.sh\n```\n\n----------------------------------------\n\nTITLE: Adding Span Attribute for Error Reporting\nDESCRIPTION: Added Span Attribute 'error.type' to report an error when ending a span with runtime.StartSpan.\n\nLANGUAGE: Go\nCODE:\n```\n// When ending a span with an error\nspan.End(tracing.WithError(err))\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Traffic Manager Client Factory in Go\nDESCRIPTION: This snippet shows how to create a client factory for Azure Traffic Manager using a subscription ID and credential.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armtrafficmanager.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Latest Version (sdk/resourcemanager/**/arm**)\nDESCRIPTION: Example of error handling in the latest version of Azure SDK for Go.\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/Azure/azure-sdk-for-go/sdk/azcore\"\nimport \"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime\"\n```\n\nLANGUAGE: go\nCODE:\n```\nvar rawResponse *http.Response\nctx := context.TODO() // your context\nctxWithResp := runtime.WithCaptureResponse(ctx, &rawResponse)\nresp, err := resourceGroupsClient.CreateOrUpdate(ctxWithResp, resourceGroupName, resourceGroupParameters, nil)\nif err != nil {\n    // with error, you can get RawResponse from context\n    log.Printf(\"Status code: %d\", rawResponse.StatusCode)\n    var respErr *azcore.ResponseError\n    if errors.As(err, &respErr) {\n        // with error, you can also get RawResponse from error\n        log.Fatalf(\"Status code: %d\", respErr.RawResponse.StatusCode)\n    } else {\n        log.Fatalf(\"Other error: %+v\", err)\n    }\n}\n// without error, you can get RawResponse from context\nlog.Printf(\"Status code: %d\", rawResponse.StatusCode)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure SDK Logging in Go\nDESCRIPTION: Example showing how to configure custom logging for the Azure SDK, including writing to a file and filtering event types.\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"os\"\n\tazlog \"github.com/Azure/azure-sdk-for-go/sdk/azcore/log\"\n)\n\nf, err := os.Create(\"cosmos-log-file.txt\")\nhandle(err)\ndefer f.Close()\n\n// Configure the listener to write to a file rather than to the console\nazlog.SetListener(func(event azlog.Event, s string) {\n\tf.WriteString(s + \"\\n\")\n})\n\n// Filter the types of events you'd like to log by removing the ones you're not interested in\nazlog.SetEvents(azlog.EventRequest, azlog.EventResponse, azlog.EventRetryPolicy, azlog.EventResponseError)\n```\n\n----------------------------------------\n\nTITLE: Formatting Go Code\nDESCRIPTION: Command to run the default Go formatter on the package. This ensures consistent code formatting across the project.\n\nLANGUAGE: bash\nCODE:\n```\ngo fmt\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK for Go\nDESCRIPTION: Commands to install the Azure SDK for Go using either go get or dep ensure.\n\nLANGUAGE: sh\nCODE:\n```\n$ go get -u github.com/Azure/azure-sdk-for-go/...\n$ dep ensure -add github.com/Azure/azure-sdk-for-go\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure\nDESCRIPTION: Code to create an Azure credential using DefaultAzureCredential\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/Azure/azure-sdk-for-go/sdk/azidentity\"\n\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Message Settlement with azservicebus Receiver in Go\nDESCRIPTION: Demonstrates how to complete messages using the Receiver in the new azservicebus package, which is different from the previous approach where settlement was done on the Message itself.\n\nLANGUAGE: go\nCODE:\n```\nmessages, err := receiver.ReceiveMessages(ctx, 10, nil)\n\nfor _, message := range messages {\n  err = receiver.CompleteMessage(ctx, message, nil)\n}\n```\n\n----------------------------------------\n\nTITLE: Basic SDK Generation Configuration\nDESCRIPTION: Defines core configuration parameters for generating the Go SDK including input/output paths, module name, and basic generation options\n\nLANGUAGE: yaml\nCODE:\n```\ninput-file:\n- ./testdata/generated/openapi.json\noutput-folder: ../azopenaiassistants\nclear-output-folder: false\nmodule: github.com/Azure/azure-sdk-for-go/sdk/ai/azopenaiassistants\nlicense-header: MICROSOFT_MIT_NO_VERSION\nopenapi-type: data-plane\ngo: true\ntitle: \"OpenAIAssistants\"\nuse: \"@autorest/go@4.0.0-preview.63\"\nslice-elements-byval: true\n```\n\n----------------------------------------\n\nTITLE: Enumerating Blobs in Go\nDESCRIPTION: Example of listing all blobs in a container using pagination\n\nLANGUAGE: go\nCODE:\n```\nconst (\n\taccount       = \"https://MYSTORAGEACCOUNT.blob.core.windows.net/\"\n\tcontainerName = \"sample-container\"\n)\n\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n// TODO: handle error\n\nclient, err := azblob.NewClient(account, cred, nil)\n// TODO: handle error\n\npager := client.NewListBlobsFlatPager(containerName, nil)\n\nfor pager.More() {\n\tpage, err := pager.NextPage(context.TODO())\n\t// TODO: handle error\n\n\tfor _, blob := range page.Segment.BlobItems {\n\t\tfmt.Println(*blob.Name)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning Azure SDK for Go Repository in Bash\nDESCRIPTION: Bash command for cloning a forked Azure SDK for Go repository. This is another prerequisite step for the SDK generation process.\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/{YOUR_GITHUB_USERNAME}/azure-sdk-for-go.git\n```\n\n----------------------------------------\n\nTITLE: Adding Regional Routing Support in Azure Cosmos DB Go SDK\nDESCRIPTION: Implementation of regional routing support through ClientOptions.PreferredRegions in the Azure SDK for Go Cosmos DB client. This feature was added in version 1.0.0.\n\nLANGUAGE: markdown\nCODE:\n```\n* Added regional routing support through ClientOptions.PreferredRegions\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Factory with Custom Options\nDESCRIPTION: Creates a client factory with custom options for connecting to different Azure clouds including sovereign clouds and Azure Stack.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armblockchain.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Creating Web PubSub Client\nDESCRIPTION: Creates a new Web PubSub client instance using the client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewClient()\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Support Client for Sovereign Clouds\nDESCRIPTION: Sets up a client factory with custom options for connecting to sovereign clouds like Azure China\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armsupport.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Metrics Query Client Generation in Go\nDESCRIPTION: This YAML configuration file sets up AutoRest to generate the Metrics Query Client for the Azure SDK for Go. It specifies the input swagger file, output settings, and includes multiple directives for renaming operations, models, and fields to improve the generated code quality.\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Metrics Query Client\nclear-output-folder: false\ngo: true\ninput-file: https://github.com/Azure/azure-rest-api-specs/blob/0b64ca7cbe3af8cd13228dfb783a16b8272b8be2/specification/monitor/data-plane/Microsoft.Insights/stable/2024-02-01/metricBatch.json\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule: github.com/Azure/azure-sdk-for-go/sdk/monitor/query/azmetrics\nopenapi-type: \"data-plane\"\noutput-folder: ../azmetrics\nsecurity: \"AADToken\"\nuse: \"@autorest/go@4.0.0-preview.61\"\ninject-spans: true\nversion: \"^3.0.0\"\nslice-elements-byval: true\n\ndirective:\n  # rename Batch to QueryResources\n  - rename-operation:\n        from: MetricsBatch_Batch\n        to: Metrics_QueryResources\n\n  # remove unused error models\n  - from: swagger-document\n    where: \n     - $.definitions..ErrorResponse\n     - $.definitions..ErrorDetail\n     - $.definitions..ErrorAdditionalInfo\n    transform: $[\"x-ms-external\"] = true\n\n  # Rename MetricResultsResponse\n  - rename-model:\n      from: MetricResultsResponse\n      to: MetricResults\n  - from: \n        - models.go\n        - models_serde.go\n    where: $\n    transform: return $.replace(/MetricResultsValuesItem/g, \"MetricData\");\n  - from: swagger-document\n    where: $.definitions.MetricResults.properties.values.items\n    transform: $[\"description\"] = \"Metric data values.\"\n\n  # renaming or fixing the casing of struct fields and parameters\n  - from: swagger-document\n    where: $.definitions.Metric.properties.timeseries\n    transform: $[\"x-ms-client-name\"] = \"TimeSeries\"\n  - from: swagger-document\n    where: $.parameters.MetricNamespaceParameter\n    transform: $[\"x-ms-client-name\"] = \"metricNamespace\"\n  - from: swagger-document\n    where: $.parameters.MetricNamesParameter\n    transform: $[\"x-ms-client-name\"] = \"metricNames\"\n  - from: swagger-document\n    where: $.parameters.StartTimeParameter\n    transform: $[\"x-ms-client-name\"] = \"StartTime\"\n  - from: swagger-document\n    where: $.parameters.EndTimeParameter\n    transform: $[\"x-ms-client-name\"] = \"EndTime\"\n  - from: swagger-document\n    where: $.definitions.ResourceIdList.properties.resourceids\n    transform: $[\"x-ms-client-name\"] = \"ResourceIDs\"\n  - from: swagger-document\n    where: $.definitions.MetricResults.properties.values.items.properties.starttime\n    transform: $[\"x-ms-client-name\"] = \"StartTime\"\n  - from: swagger-document\n    where: $.definitions.MetricResults.properties.values.items.properties.endtime\n    transform: $[\"x-ms-client-name\"] = \"EndTime\"\n  - from: swagger-document\n    where: $.definitions.MetricResults.properties.values.items.properties.resourceid\n    transform: $[\"x-ms-client-name\"] = \"ResourceID\"\n  - from: swagger-document\n    where: $.definitions.MetricResults.properties.values.items.properties.resourceregion\n    transform: $[\"x-ms-client-name\"] = \"ResourceRegion\"\n  - from: swagger-document\n    where: $.definitions.MetricResults.properties.values.items.properties.value\n    transform: $[\"x-ms-client-name\"] = \"Values\"\n  - from: swagger-document\n    where: $.definitions.TimeSeriesElement.properties.metadatavalues\n    transform: $[\"x-ms-client-name\"] = \"MetadataValues\"\n  - from: swagger-document\n    where: $.parameters.OrderByParameter\n    transform: $[\"x-ms-client-name\"] = \"OrderBy\"\n  - from: swagger-document\n    where: $.parameters.RollUpByParameter\n    transform: $[\"x-ms-client-name\"] = \"RollUpBy\"\n  - from: client.go\n    where: $\n    transform: return $.replace(/batchRequest/g, \"resourceIDs\");\n\n  # delete client name prefix from method options and response types\n  - from:\n      - client.go\n      - options.go\n      - response_types.go\n    where: $\n    transform: return $.replace(/Client(\\w+)((?:Options|Response))/g, \"$1$2\");\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Active Directory in Go\nDESCRIPTION: Create a credential using azidentity and initialize a service client for Azure File Storage using Azure Active Directory authentication.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n// TODO: handle err\n\nclient, err := service.NewClient(\"https://<my-storage-account-name>.file.core.windows.net/\", cred, &service.ClientOptions{FileRequestIntent: to.Ptr(service.ShareTokenIntentBackup)})\n// TODO: handle err\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Credentials\nDESCRIPTION: Creates default Azure credentials for authentication using the azidentity module\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Client Factory\nDESCRIPTION: Initializes a client factory for creating PostgreSQL service clients with basic configuration.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armpostgresqlflexibleservers.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure ML Service Client\nDESCRIPTION: Creates a specific client instance for batch deployments using the client factory\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewBatchDeploymentsClient()\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Cognitive Services Client Factory in Go\nDESCRIPTION: This code creates a client factory for Azure Cognitive Services. It requires a subscription ID and a credential object. The factory can be used to create specific clients for different services.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armX.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Container Registry and Azure Identity packages in Go\nDESCRIPTION: This snippet demonstrates how to install the required packages for using Azure Container Registry and Azure Identity in a Go project using the 'go get' command.\n\nLANGUAGE: Bash\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/containers/azcontainerregistry\ngo get github.com/Azure/azure-sdk-for-go/sdk/azidentity\n```\n\n----------------------------------------\n\nTITLE: Creating Certificates with New AzCertificates Module in Go\nDESCRIPTION: Example showing certificate creation using the new azcertificates module. Uses azidentity for authentication and creates a dedicated certificates client with vault URL specified during initialization.\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n\t\"fmt\"\n\n\t\"github.com/Azure/azure-sdk-for-go/sdk/azcore/to\"\n\t\"github.com/Azure/azure-sdk-for-go/sdk/azidentity\"\n\t\"github.com/Azure/azure-sdk-for-go/sdk/security/keyvault/azcertificates\"\n)\n\nfunc main() {\n    vaultURL := \"https://<TODO: your vault name>.vault.azure.net\"\n\tcred, err := azidentity.NewDefaultAzureCredential(nil)\n\tif err != nil {\n\t\t// TODO: handle error\n\t}\n\t\n\tclient, err := azcertificates.NewClient(vaultURL, cred, nil)\n\tif err != nil {\n\t\t// TODO: handle error\n\t}\n\n\tcreateParams := azcertificates.CreateCertificateParameters{\n\t\tCertificatePolicy: &azcertificates.CertificatePolicy{\n\t\t\tIssuerParameters:          &azcertificates.IssuerParameters{Name: to.Ptr(\"self\")},\n\t\t\tX509CertificateProperties: &azcertificates.X509CertificateProperties{Subject: to.Ptr(\"CN=DefaultPolicy\")},\n\t\t},\n\t}\n\tresp, err := client.CreateCertificate(context.TODO(), \"<cert name>\", createParams, nil)\n\tif err != nil {\n\t\t// TODO: handle error\n\t}\n\n\tfmt.Println(\"Created a certificate with ID:\", *resp.ID)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Queue SDK Generation in Go\nDESCRIPTION: YAML configuration for AutoRest to generate Azure Queue SDK code in Go. Specifies input file, output settings, and various options for code generation.\n\nLANGUAGE: yaml\nCODE:\n```\ngo: true\nclear-output-folder: false\nversion: \"^3.0.0\"\nlicense-header: MICROSOFT_MIT_NO_VERSION\ninput-file: \"https://raw.githubusercontent.com/Azure/azure-rest-api-specs/5da3c08b92d05858b728b013b69502dc93485373/specification/storage/data-plane/Microsoft.QueueStorage/preview/2018-03-28/queue.json\"\ncredential-scope: \"https://storage.azure.com/.default\"\noutput-folder: ../generated\nfile-prefix: \"zz_\"\nopenapi-type: \"data-plane\"\nverbose: true\nsecurity: AzureKey\nmodelerfour:\n  group-parameters: false\n  seal-single-value-enum-by-default: true\n  lenient-model-deduplication: true\nexport-clients: true\nuse: \"@autorest/go@4.0.0-preview.45\"\n```\n\n----------------------------------------\n\nTITLE: Creating Default Azure Credential in Go\nDESCRIPTION: This snippet demonstrates how to create a default Azure credential using the azidentity package. This credential is used for authenticating with Azure NetApp Files.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Validating Package Release with Go Get\nDESCRIPTION: Command to verify that a package has been released properly by attempting to download it using the go get command. This example uses azcore v0.20.0 as a placeholder.\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/azcore@v0.20.0\n```\n\n----------------------------------------\n\nTITLE: Release History Documentation in Markdown\nDESCRIPTION: Markdown formatted changelog documenting the version history, new features, breaking changes, and bug fixes for the Azure SDK for Go File Service package\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.5.1-beta.2 (Unreleased)\n\n### Features Added\n\n### Breaking Changes\n\n### Bugs Fixed\n* Fixed return value of DownloadBuffer when the HTTPRange count given is greater than the data length. Fixes [#23884](https://github.com/Azure/azure-sdk-for-go/issues/23884)\n### Other Changes\n\n## 1.5.1-beta.1 (2025-02-12)\n\n### Features Added\n* Upgraded service version to `2025-05-05`.\n* NFS Over Rest API Request/Response changes in the following APIs - \n  CreateFile\n  SetFileProperties\n  GetFileProperties\n  StartCopyFromUrl\n  DownloadFile\n  DeleteFile\n  CreateDirectory\n  GetDirectoryProperties\n  SetDirectoryProperties\n* NFS Over Rest, new API File CreateHardLink() Added\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Options for Different Clouds\nDESCRIPTION: Sets up client options for connecting to different Azure clouds including sovereign clouds.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armcontainerservice.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Creating a Databases Client for Azure Database for MySQL in Go\nDESCRIPTION: This snippet demonstrates how to create a specific client for working with databases in Azure Database for MySQL. It uses the previously created client factory to instantiate a new DatabasesClient, which provides access to database-related operations.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewDatabasesClient()\n```\n\n----------------------------------------\n\nTITLE: Creating a Key using azkeys Module in Go\nDESCRIPTION: This snippet shows how to create a key in Azure Key Vault using the new 'azkeys' module. It demonstrates the updated process of setting up authentication with azidentity, creating a client, and calling the CreateKey method.\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"context\"\n\t\"fmt\"\n\n\t\"github.com/Azure/azure-sdk-for-go/sdk/azcore/to\"\n\t\"github.com/Azure/azure-sdk-for-go/sdk/azidentity\"\n\t\"github.com/Azure/azure-sdk-for-go/sdk/security/keyvault/azkeys\"\n)\n\nfunc main() {\n\tvaultURL := \"https://<TODO: your vault name>.vault.azure.net\"\n\tcred, err := azidentity.NewDefaultAzureCredential(nil)\n\tif err != nil {\n\t\t// TODO: handle error\n\t}\n\n\tclient, err := azkeys.NewClient(vaultURL, cred, nil)\n\tif err != nil {\n\t\t// TODO: handle error\n\t}\n\n\tkeyParams := azkeys.CreateKeyParameters{\n\t\tCurve: to.Ptr(azkeys.CurveNameP256K),\n\t\tKty:   to.Ptr(azkeys.KeyTypeEC),\n\t}\n\tresp, err := client.CreateKey(context.TODO(), \"<key name>\", keyParams, nil)\n\tif err != nil {\n\t\t// TODO: handle error\n\t}\n\tfmt.Println(*resp.Key.KID)\n}\n```\n\n----------------------------------------\n\nTITLE: Example Go Code Usage\nDESCRIPTION: Example showing usage pattern changes between versions for admin client code\n\nLANGUAGE: go\nCODE:\n```\n// older code\nadminClient.CreateQueue(context.Background(), queueName, &queueProperties, nil)\n\n// new code\nadminClient.CreateQueue(context.Background(), queueName, &admin.CreateQueueOptions{\n  Properties: queueProperties,\n})\n```\n\nLANGUAGE: go\nCODE:\n```\n// older code\nfor queuePager.NextPage(context.TODO()) {\n  for _, queue := range queuePager.PageResponse().Items {\n    fmt.Printf(\"Queue name: %s, max size in MB: %d\\n\", queue.QueueName, *queue.MaxSizeInMegabytes)\n  }\n}\n\nif err := queuePager.Err(); err != nil {\n  panic(err)\n}\n\n// new code\nfor queuePager.More() {\n  page, err := queuePager.NextPage(context.TODO())\n\n  if err != nil {\n    panic(err)\n  }\n\n  for _, queue := range page.Queues {\n    fmt.Printf(\"Queue name: %s, max size in MB: %d\\n\", queue.QueueName, *queue.MaxSizeInMegabytes)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Options for Different Clouds\nDESCRIPTION: Sets up client options for connecting to different Azure clouds including sovereign clouds and Azure Stack\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armlocks.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Monitor Query Metrics Packages\nDESCRIPTION: Commands to install the required Go modules for Azure Monitor Query Metrics client and Azure Identity for authentication.\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/monitor/query/azmetrics\ngo get github.com/Azure/azure-sdk-for-go/sdk/azidentity\n```\n\n----------------------------------------\n\nTITLE: Changing CPK Acronym to All Caps\nDESCRIPTION: YAML directive to change the 'Cpk' acronym to 'CPK' in all generated Go files.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: source-file-go\n    where: $\n    transform: >\n      return $.\n        replace(/Cpk/g, \"CPK\");\n```\n\n----------------------------------------\n\nTITLE: Running Live Tests\nDESCRIPTION: Bash commands for executing live tests using environment variables loaded from a .env file.\n\nLANGUAGE: bash\nCODE:\n```\nexport AZURE_RECORD_MODE=live\ngo test -count 1 -v ./...\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Azure File Storage Operations in Go\nDESCRIPTION: This example shows how to handle errors when deleting a share, specifically dealing with common scenarios like an in-progress deletion or a non-existent share.\n\nLANGUAGE: go\nCODE:\n```\nconst (\n\tconnectionString = \"<connection_string>\"\n\tshareName    = \"sample-share\"\n)\n\nclient, err := service.NewClientFromConnectionString(connectionString, nil)\n// TODO: handle error\n\n_, err = client.DeleteShare(context.TODO(), shareName, nil)\n\nif fileerror.HasCode(err, fileerror.ShareBeingDeleted, fileerror.ShareNotFound) {\n    // ignore any errors if the share is being deleted or already has been deleted\n} else if err != nil {\n    // TODO: some other error\n}\n```\n\n----------------------------------------\n\nTITLE: Base AutoRest Configuration for ACR Go Client\nDESCRIPTION: Core configuration settings for AutoRest code generation including input file, module settings, and basic generation options.\n\nLANGUAGE: yaml\nCODE:\n```\ninput-file: https://github.com/Azure/azure-rest-api-specs/blob/c8d9a26a2857828e095903efa72512cf3a76c15d/specification/containerregistry/data-plane/Azure.ContainerRegistry/stable/2021-07-01/containerregistry.json\nlicense-header: MICROSOFT_MIT_NO_VERSION\ngo: true\nclear-output-folder: false\nexport-clients: true\nopenapi-type: \"data-plane\"\noutput-folder: ../azcontainerregistry\nuse: \"@autorest/go@4.0.0-preview.60\"\nhonor-body-placement: true\nremove-unreferenced-types: true\nmodule-name: sdk/containers/azcontainerregistry\nmodule: github.com/Azure/azure-sdk-for-go/$(module-name)\ninject-spans: true\n```\n\n----------------------------------------\n\nTITLE: Long Running Operations in Previous Version (services/**/mgmt/**)\nDESCRIPTION: Example of handling long-running operations in the deprecated version of Azure SDK for Go.\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO() // your context\nfuture, err := virtualMachinesClient.CreateOrUpdate(ctx, \"<resource group name>\", \"<virtual machine name>\", param)\nif err != nil {\n    log.Fatal(err)\n}\nif err := future.WaitForCompletionRef(ctx, virtualMachinesClient.Client); err != nil {\n    log.Fatal(err)\n}\nvm, err := future.Result(virtualMachinesClient)\nif err != nil {\n    log.Fatal(err)\n}\nlog.Printf(\"virtual machine ID: %v\", *vm.ID)\n```\n\n----------------------------------------\n\nTITLE: Running godoc Server for Documentation Review\nDESCRIPTION: Command to start the godoc server for reviewing package documentation. This allows developers to view and verify the documentation for all public methods and types before release.\n\nLANGUAGE: shell\nCODE:\n```\ngodoc -http=:6060\n```\n\n----------------------------------------\n\nTITLE: Configuring Client with Custom Options\nDESCRIPTION: Sets up client options for connecting to different Azure clouds including sovereign clouds and Azure Stack.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armhdinsightcontainers.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Cognitive Services Accounts Client in Go\nDESCRIPTION: This code demonstrates how to create a specific client (in this case, an Accounts client) using the previously created client factory. This client can be used to interact with Azure Cognitive Services accounts.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewAccountsClient()\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Alerts Management Module in Go\nDESCRIPTION: Use the go get command to install the Azure Alerts Management module from the Azure SDK for Go.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/alertsmanagement/armalertsmanagement\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Key Vault using DefaultAzureCredential\nDESCRIPTION: Creates a default Azure credential object for authentication with Azure Key Vault services.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Container Registry in Go\nDESCRIPTION: This code demonstrates how to create a default Azure credential for authentication with Azure Container Registry. It uses the azidentity package to create a DefaultAzureCredential object.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring Request Retry Policy in Azure Go SDK\nDESCRIPTION: Shows how to configure the retry policy for failed requests using the ClientOptions. This example sets the maximum number of retries to 5.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armresources.NewClientFactory(subscriptionId, credential,\n    &arm.ClientOptions{\n        ClientOptions: policy.ClientOptions{\n            Retry: policy.RetryOptions{\n                // retry for 5 times\n                MaxRetries: 5,\n            },\n        },\n    },\n)\nif err != nil {\n    log.Fatal(err)\n}\nrgClient := clientFactory.NewResourceGroupsClient()\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure VMware Solution SDK Generation\nDESCRIPTION: Defines the configuration parameters for AutoRest to generate Go SDK code from Azure VMware Solution API specifications. Specifies the source OpenAPI specs, license header, module version, and API version tag.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/e7678455846b1000fd31db27596e4ca3d299a872/specification/vmware/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/e7678455846b1000fd31db27596e4ca3d299a872/specification/vmware/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 2.0.0\ntag: package-2023-09-01\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure using Default Credentials\nDESCRIPTION: Creates a default Azure credential object for authentication with Azure services\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Key Vault Client Factory\nDESCRIPTION: Initializes a client factory for creating Azure Key Vault service clients using subscription ID and credentials.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armkeyvault.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure File SDK Generation\nDESCRIPTION: YAML configuration for AutoRest to generate the Azure File SDK for Golang. Specifies input file, output settings, and various options for code generation.\n\nLANGUAGE: yaml\nCODE:\n```\ngo: true\nclear-output-folder: false\nversion: \"^3.0.0\"\nlicense-header: MICROSOFT_MIT_NO_VERSION\ninput-file: \"https://raw.githubusercontent.com/Azure/azure-rest-api-specs/d18a495685ccec837b72891b4deea017f62e8190/specification/storage/data-plane/Microsoft.FileStorage/stable/2025-05-05/file.json\"\ncredential-scope: \"https://storage.azure.com/.default\"\noutput-folder: ../generated\nfile-prefix: \"zz_\"\nopenapi-type: \"data-plane\"\nverbose: true\nsecurity: AzureKey\nmodelerfour:\n  group-parameters: false\n  seal-single-value-enum-by-default: true\n  lenient-model-deduplication: true\nexport-clients: true\nuse: \"@autorest/go@4.0.0-preview.61\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure CDN Client for Different Clouds\nDESCRIPTION: Sets up client options for connecting to different Azure clouds including sovereign clouds and Azure Stack.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armcdn.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Storage Client Factory in Go\nDESCRIPTION: This code creates a client factory for Azure Storage, which can be used to create any client in the module. It requires a subscription ID and credential.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armstorage.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Verifying Azure CLI Account and Token Retrieval\nDESCRIPTION: These Azure CLI commands verify the currently logged-in account and test token retrieval for the Azure Resource Manager. They can be used to troubleshoot AzureCLICredential authentication issues.\n\nLANGUAGE: sh\nCODE:\n```\naz account show\naz account get-access-token --output json --resource https://management.core.windows.net\n```\n\n----------------------------------------\n\nTITLE: Custom JSON Marshaling for Multipart Form Data\nDESCRIPTION: Implements the json.Marshaller interface to serialize the form data schema into JSON format. Uses a map to populate fields like file, filename, and purpose before marshaling.\n\nLANGUAGE: go\nCODE:\n```\nfunc (p Paths1Filz8PFilesPostRequestbodyContentMultipartFormDataSchema) MarshalJSON() ([]byte, error) {\n\tobjectMap := make(map[string]any)\n\tpopulate(objectMap, \"file\", p.File)\n\tpopulate(objectMap, \"filename\", p.Filename)\n\tpopulate(objectMap, \"purpose\", p.Purpose)\n\treturn json.Marshal(objectMap)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Azure VMware Cloud Simple Virtual Machines Client in Go\nDESCRIPTION: Use the client factory to create a specific client for managing virtual machines in Azure VMware Cloud Simple.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewVirtualMachinesClient()\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK for Go Generation\nDESCRIPTION: This YAML configuration specifies settings for AutoRest to generate the Azure SDK for Go. It sets the Azure ARM flag, requires specific API specifications, defines the license header, module version, and API version tag.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/310a0100f5b020c1900c527a6aa70d21992f078a/specification/authorization/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/310a0100f5b020c1900c527a6aa70d21992f078a/specification/authorization/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 3.0.0-beta.2\ntag: package-2022-05-01-preview\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK for Go Generation\nDESCRIPTION: This YAML configuration specifies settings for AutoRest to generate the Azure SDK for Go. It sets the Azure ARM flag, requires specific API specifications, defines the license header, module version, and API version tag.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/310a0100f5b020c1900c527a6aa70d21992f078a/specification/authorization/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/310a0100f5b020c1900c527a6aa70d21992f078a/specification/authorization/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 3.0.0-beta.2\ntag: package-2022-05-01-preview\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Container Service Client Factory\nDESCRIPTION: Initializes a client factory for Azure Container Service with subscription ID and credentials.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armcontainerservice.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Container Registry Agent Pools Client in Go\nDESCRIPTION: This snippet demonstrates how to create a specific client for Agent Pools operations using the previously created client factory. This client can be used to perform operations related to agent pools in Azure Container Registry.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewAgentPoolsClient()\n```\n\n----------------------------------------\n\nTITLE: New Enum Types\nDESCRIPTION: New enumeration types added for various statuses and configurations\n\nLANGUAGE: go\nCODE:\n```\ntype ActivationStatus string\nconst (\n    ActivationStatusActive ActivationStatus = \"Active\"\n    ActivationStatusInactive ActivationStatus = \"Inactive\"\n)\n\ntype AuditLogStatus string\nconst (\n    AuditLogStatusDisabled AuditLogStatus = \"Disabled\"\n    AuditLogStatusEnabled AuditLogStatus = \"Enabled\"\n)\n```\n\n----------------------------------------\n\nTITLE: Provisioner-based Azure Test Resource Deployment\nDESCRIPTION: PowerShell syntax for deploying test resources using a provisioner service principal. Includes additional parameters for tenant and provisioner authentication.\n\nLANGUAGE: powershell\nCODE:\n```\nNew-TestResources.ps1 [-BaseName <String>] [-ResourceGroupName <String>] [-ServiceDirectory] <String>\n [-TestResourcesDirectory <String>] [-TestApplicationId <String>] [-TestApplicationSecret <String>]\n [-TestApplicationOid <String>] -TenantId <String> [-SubscriptionId <String>]\n -ProvisionerApplicationId <String> [-ProvisionerApplicationOid <String>]\n [-ProvisionerApplicationSecret <String>] [-DeleteAfterHours <Int32>] [-Location <String>]\n [-Environment <String>] [-ResourceType <String>] [-ArmTemplateParameters <Hashtable>]\n [-AdditionalParameters <Hashtable>] [-EnvironmentVariables <Hashtable>] [-CI] [-Force] [-OutFile]\n [-SuppressVsoCommands] [-ServicePrincipalAuth] [-NewTestResourcesRemainingArguments <Object>]\n [-ProgressAction <ActionPreference>] [-WhatIf] [-Confirm] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Cloning Azure REST API Specs Repository in Bash\nDESCRIPTION: Bash command for cloning a forked Azure REST API specs repository. This is a prerequisite step for generating the SDK.\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/{YOUR_GITHUB_USERNAME}/azure-rest-api-specs.git\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Front Door Client Options\nDESCRIPTION: Setting up client options for connecting to different Azure clouds including sovereign clouds and Azure Stack.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armfrontdoor.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Monitor\nDESCRIPTION: Creates a default Azure credential object for authentication with Azure services\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Azure KeyVault Admin\nDESCRIPTION: Example showing how to handle HTTP errors returned by the KeyVault Admin client using azcore.ResponseError type.\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/Azure/azure-sdk-for-go/sdk/azcore\"\n\nsettings, err := client.GetSettings(context.Background(), nil)\nif err != nil {\n    var httpErr *azcore.ResponseError\n    if errors.As(err, &httpErr) {\n        // TODO: investigate httpErr\n    } else {\n        // TODO: not an HTTP error\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Graphservices Client for China Cloud in Go\nDESCRIPTION: Example of creating a client factory with custom options to connect to Azure China cloud.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armgraphservices.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Options for Different Clouds\nDESCRIPTION: Example of creating a client factory with custom options for connecting to different Azure clouds\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armvirtualmachineimagebuilder.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Cognitive Services Client Options in Go\nDESCRIPTION: This snippet shows how to configure client options, specifically setting the cloud endpoint to Azure China. These options are used when creating the client factory.\n\nLANGUAGE: go\nCODE:\n```\noptions := armcognitiveservices.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armcognitiveservices.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure using DefaultAzureCredential in Go\nDESCRIPTION: Code snippet demonstrating how to create a credential for authenticating with Azure Resources using the DefaultAzureCredential from the azidentity package.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Sphere Client Factory in Go\nDESCRIPTION: This code creates a client factory for Azure Sphere services. It requires a subscription ID and credentials. The factory can be used to create specific clients for different Azure Sphere operations.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armsphere.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Queue Storage SDK\nDESCRIPTION: Commands to install the Azure Queue Storage SDK and optional azidentity module for Azure AD authentication\n\nLANGUAGE: powershell\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/storage/azqueue\ngo get github.com/Azure/azure-sdk-for-go/sdk/azidentity\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK Go Generation\nDESCRIPTION: This YAML configuration sets up AutoRest for generating the Azure SDK for Go. It specifies the Azure ARM flag, required specification files, license header, module version, and package tag.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/4cd95123fb961c68740565a1efcaa5e43bd35802/specification/apimanagement/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/4cd95123fb961c68740565a1efcaa5e43bd35802/specification/apimanagement/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 2.1.0\ntag: package-2022-08\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Credential\nDESCRIPTION: Initialize default Azure credentials for authentication with Azure services.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Creating IoT Hub Client Factory\nDESCRIPTION: Initializes a client factory for creating IoT Hub service clients using subscription ID and credentials.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armiothub.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK Go Generation\nDESCRIPTION: YAML configuration that defines parameters for AutoRest code generation tool. Specifies Azure ARM mode, required API specifications, license header type, module version, and API version tag.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/8691e5081766c7ad602a9e55de841d07bed5196a/specification/quota/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/8691e5081766c7ad602a9e55de841d07bed5196a/specification/quota/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.1.0\ntag: package-2025-03-01\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Cosmos DB Client for Sovereign Clouds in Go\nDESCRIPTION: This code shows how to configure the Azure Cosmos DB client to connect to sovereign clouds or Azure Stack. It uses ClientOptions to set the cloud endpoint.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armcosmos.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure Automanage Custom Profile Assignment in Go\nDESCRIPTION: Assigns a custom Automanage Configuration Profile to a specific VM.\n\nLANGUAGE: go\nCODE:\n```\nconfigProfileId := \"/subscriptions/<subscription ID>/resourceGroups/resourceGroupName/providers/Microsoft.Automanage/configurationProfiles/configurationProfileName\"\n\nproperties := armautomanage.ConfigurationProfileAssignmentProperties{\n    ConfigurationProfile: &configProfileId,\n}\n\nassignment := armautomanage.ConfigurationProfileAssignment{\n    Properties: &properties,\n}\n\n// assignment name must be 'default'\nnewAssignment, err = assignmentClient.CreateOrUpdate(context.Background(), \"default\", \"resourceGroupName\", \"vmName\", assignment, nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Pipeline in Client Options for Azure File Storage in Go\nDESCRIPTION: Shows how to configure the HTTP pipeline using ClientOptions in the azfile module. This replaces the explicit creation of a Pipeline instance in azure-storage-file-go.\n\nLANGUAGE: go\nCODE:\n```\nclient, err := service.NewClientWithSharedKeyCredential(\"<my storage account URL>\", cred, &service.ClientOptions{\n\tClientOptions: azcore.ClientOptions{\n\t\t// configure HTTP pipeline options here\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Handling CAE Claims Challenges in BearerTokenPolicy\nDESCRIPTION: BearerTokenPolicy now handles Continuous Access Evaluation (CAE) claims challenges.\n\nLANGUAGE: Go\nCODE:\n```\n// BearerTokenPolicy will automatically handle CAE challenges\n// No additional code required in most cases\n```\n\n----------------------------------------\n\nTITLE: Pseudocode for Package Batching in Pullrequest Pipeline\nDESCRIPTION: This pseudocode explains how packages are batched for testing in the pullrequest pipeline, including the logic for handling direct and indirect changes.\n\nLANGUAGE: plaintext\nCODE:\n```\nbatchSize = configurable # of packages in each test batch, defaults to 10\ndirectPackages = the list of packages with directly changed code in the PR\n\ngroup the direct packages by matrix configuration\n  - each matrix contribution\n    - group by batch size\n      - assign the matrix to the full batch\n      - if multiple batches exist, add suffix\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure using DefaultAzureCredential in Go\nDESCRIPTION: Creates a default Azure credential for authentication with Azure services.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Databricks Workspaces Client in Go\nDESCRIPTION: This snippet shows how to create a Workspaces client using the previously created client factory. This client provides access to Workspace-related APIs in Azure Databricks.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewWorkspacesClient()\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure API Management\nDESCRIPTION: Example of creating default Azure credentials for authentication using the azidentity package.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Container Apps Client for Different Clouds in Go\nDESCRIPTION: This code shows how to configure the client factory for different Azure clouds or Azure Stack. It uses ClientOptions to set the cloud endpoint, in this case, to Azure China.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armappcontainers.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Configuring Matrix Batching in YAML\nDESCRIPTION: This YAML snippet shows how to disable matrix batching for a specific configuration in the pullrequest pipeline by setting the PRBatching flag to false.\n\nLANGUAGE: yaml\nCODE:\n```\nMatrixConfigs:\n  - Name: version_overrides_tests\n    Path: sdk/core/version-overrides-matrix.json\n    Selection: all\n    PRBatching: false # the new key\n    GenerateVMJobs: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging for Azure SDK\nDESCRIPTION: Example showing how to set up console logging for Azure SDK modules using azcore's logging implementation\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  \"fmt\"\n  azlog \"github.com/Azure/azure-sdk-for-go/sdk/azcore/log\"\n)\n\n// print log output to stdout\nazlog.SetListener(func(event azlog.Event, s string) {\n    fmt.Printf(\"[%s] %s\\n\", event, s)\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Commerce Client Factory in Go\nDESCRIPTION: This snippet shows how to create a client factory for Azure Commerce. It requires a subscription ID and a credential object. The factory can be used to create various clients for interacting with Azure Commerce services.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armcommerce.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure HDInsight Client for Different Clouds in Go\nDESCRIPTION: Example of how to configure the HDInsight client factory for different Azure clouds or Azure Stack. This uses ClientOptions to specify the cloud environment.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armhdinsight.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Creating HDInsight Applications Client in Go\nDESCRIPTION: Demonstrates how to create a specific HDInsight client (in this case, an Applications client) using the previously created client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewApplicationsClient()\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Default Credentials\nDESCRIPTION: Creates a default Azure credential object for authentication with Azure Communication Services using the azidentity package.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Key Vault Packages in Go\nDESCRIPTION: Commands to install the required Azure Key Vault Secrets and Azure Identity packages using go get.\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/security/keyvault/azsecrets\ngo get github.com/Azure/azure-sdk-for-go/sdk/azidentity\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest YAML for Azure SDK Go Generation\nDESCRIPTION: Defines the AutoRest configuration parameters for generating Azure SDK for Go. Specifies Azure ARM mode, required API specifications from the azure-rest-api-specs repository, license header type, and module version 0.3.0.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/163e27c0ca7570bc39e00a46f255740d9b3ba3cb/specification/addons/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/163e27c0ca7570bc39e00a46f255740d9b3ba3cb/specification/addons/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 0.3.0\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Credential in Go\nDESCRIPTION: This snippet demonstrates how to create a default Azure credential for authentication.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Digital Twins Client Factory\nDESCRIPTION: Initializing a client factory for creating Azure Digital Twins service clients.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armdigitaltwins.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Adding Missing Imports to Models Serde\nDESCRIPTION: YAML directive to add the 'strconv' import to the zz_models_serde.go file.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: zz_models_serde.go\n  where: $\n  transform: >\n      return $.\n        replace(/\"reflect\"/, `\"reflect\"\\n\\t\"strconv\"`);\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Deployment Manager Services Client in Go\nDESCRIPTION: This code demonstrates how to create a specific client (ServicesClient) using the previously created client factory. This client provides access to a set of related APIs.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewServicesClient()\n```\n\n----------------------------------------\n\nTITLE: Creating Media Services Client Factory\nDESCRIPTION: Initializes a client factory for Azure Media Services with subscription ID and credentials\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armmediaservices.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Options for Different Clouds\nDESCRIPTION: Example demonstrating how to configure client options to connect to different Azure clouds including sovereign clouds.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armapimanagement.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Removing UnmarshalXML for BlobItems\nDESCRIPTION: YAML directive to remove the UnmarshalXML method for BlobItems, allowing for a custom implementation.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.definitions\n  transform: >\n    $.BlobItemInternal[\"x-ms-go-omit-serde-methods\"] = true;\n```\n\n----------------------------------------\n\nTITLE: Installing Azure MariaDB SDK Package\nDESCRIPTION: Command to install the Azure OSS Databases module using Go modules package management\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/mariadb/armmariadb\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Client Options for Sovereign Clouds in Go\nDESCRIPTION: This snippet shows how to set up client options for connecting to sovereign clouds or Azure Stack using the arm and azcore packages.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armtrustedsigning.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: X509 Certificate Generation with V3 Extensions\nDESCRIPTION: Creates an X509 certificate with V3 extensions, including subject alternative names, key usage flags, CA and TLS capabilities. Exports the certificate in PEM format with certificate and private key.\n\nLANGUAGE: powershell\nCODE:\n```\nImport-Module -Name eng/scripts/X509Certificate2.psm1 # assumes $PWD is repo root\n\n$cert2 = New-X509Certificate2 -SubjectName 'CN=Azure SDK' -SubjectAlternativeNames (New-X509Certificate2SubjectAlternativeNames -EmailAddress azuresdk@microsoft.com) -KeyUsageFlags KeyEncipherment, NonRepudiation, DigitalSignature -CA -TLS -ValidDays 3652\n\n$PemCertificateWithV3Extensions = ($cert2 | Format-X509Certificate2 -Type Certificate) + \"`n\" + ($cert2 | Format-X509Certificate2 -Type Pkcs8)\n$CertificateWithV3ExtensionsBase64 = $cert2 | Format-X509Certificate2 -Type CertificateBase64\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Change Analysis Client Factory in Go\nDESCRIPTION: This snippet shows how to create a client factory for Azure Change Analysis. It requires a subscription ID and credentials for initialization.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armchangeanalysis.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Analysis Services Client for Sovereign Clouds in Go\nDESCRIPTION: Sets up client options for connecting to sovereign clouds or Azure Stack.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armanalysisservices.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure Databasewatcher Client Factory in Go\nDESCRIPTION: This code creates a client factory for Azure Databasewatcher. It requires a subscription ID and credentials. The factory can be used to create specific clients within the module.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armdatabasewatcher.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Network Client Factory in Go\nDESCRIPTION: Initializes a client factory for Azure Network services using a subscription ID and credentials.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armnetwork.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Creating HDInsight Client Factory in Go\nDESCRIPTION: Code snippet showing how to create a client factory for Azure HDInsight. The factory is initialized with a subscription ID and credential, and can be used to create specific HDInsight clients.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armhdinsight.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure VoiceServices Test Client\nDESCRIPTION: Creates a specific client instance for test lines operations using the client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewTestLinesClient()\n```\n\n----------------------------------------\n\nTITLE: Accessing Raw HTTP Response in Azure Go SDK\nDESCRIPTION: Demonstrates how to access the raw HTTP response from a request context, regardless of the request result. This can be useful for debugging or accessing additional response details.\n\nLANGUAGE: go\nCODE:\n```\nvar rawResponse *http.Response\nctx := context.TODO() // your context\nctxWithResp := runtime.WithCaptureResponse(ctx, &rawResponse)\nresp, err := resourceGroupsClient.CreateOrUpdate(ctxWithResp, resourceGroupName, resourceGroupParameters, nil)\nif err != nil {\n    log.Printf(\"Status code: %d\", rawResponse.StatusCode)\n    log.Fatalf(\"Error occurred: %+v\", err)\n}\nlog.Printf(\"Status code: %d\", rawResponse.StatusCode)\n```\n\n----------------------------------------\n\nTITLE: Creating IoT Hub Resource Client\nDESCRIPTION: Creates a new IoT Hub resource client using the client factory for accessing API functionality.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewResourceClient()\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure using Default Credentials\nDESCRIPTION: Creates an Azure credential object using the default authentication method from azidentity module.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Synchronized Wrapper for Long-Running Operations in Go\nDESCRIPTION: Provides a utility to create a synchronized wrapper for long-running operations, simplifying the polling process for clients that don't need detailed control over the LRO.\n\nLANGUAGE: go\nCODE:\n```\ntype OperationWaiter[TResult any] struct {\n    poller *runtime.Poller[TResult]\n    err    error\n}\n\nfunc (ow OperationWaiter[TResult]) Wait(ctx context.Context, freq time.Duration) (TResult, error) {\n    if ow.err != nil {\n        return *new(TResult), ow.err\n    }\n    return ow.poller.PollUntilDone(ctx, freq)\n}\n\nfunc NewOperationWaiter[TResult any](poller *runtime.Poller[TResult], err error) OperationWaiter[TResult] {\n    return OperationWaiter[TResult]{poller: poller, err: err}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Default Azure Credential in Go\nDESCRIPTION: This snippet demonstrates how to create a default Azure credential using the azidentity module for authentication with Azure Storage.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Notification Hubs Client for Different Clouds\nDESCRIPTION: Set up client options for connecting to different Azure clouds. This example demonstrates how to configure the client to connect to Azure China cloud.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armnotificationhubs.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure IoT DPS Resource Client in Go\nDESCRIPTION: This snippet demonstrates how to create a specific client (IoT DPS Resource Client) using the previously created client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewIotDpsResourceClient()\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Compute using DefaultAzureCredential in Go\nDESCRIPTION: Code snippet demonstrating how to create a default Azure credential for authentication with Azure Compute services.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Creating SignalR Client Factory\nDESCRIPTION: Initializes a client factory for creating Azure SignalR clients with subscription ID and credentials\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armsignalr.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Monitor Query and Azure Identity Packages in Go\nDESCRIPTION: Use the 'go get' command to install the required packages for Azure Monitor Query and Azure Identity authentication.\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/monitor/azquery\ngo get github.com/Azure/azure-sdk-for-go/sdk/azidentity\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure MariaDB Go SDK Generation\nDESCRIPTION: YAML configuration that defines the parameters for AutoRest code generation. It references the MariaDB REST API specifications, sets Azure ARM mode, specifies Microsoft MIT license header requirement, and sets the module version to 1.2.0.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/mariadb/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/mariadb/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.2.0\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure using DefaultAzureCredential in Go\nDESCRIPTION: Example of creating a default Azure credential for authentication. This uses the azidentity module to provide various authentication methods.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Client Options for Different Clouds in Go\nDESCRIPTION: This code demonstrates how to set up client options for connecting to different Azure clouds, including sovereign clouds and Azure Stack. It uses the arm.ClientOptions struct.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armchangeanalysis.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Adding Missing Imports to Service Client\nDESCRIPTION: YAML directive to add the 'strings' import to the zz_service_client.go file.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: zz_service_client.go\n  where: $\n  transform: >\n      return $.\n        replace(/\"strconv\"/, `\"strconv\"\\n\\t\"strings\"`);\n```\n\n----------------------------------------\n\nTITLE: Creating API Management Service Client\nDESCRIPTION: Example showing how to create a specific service client using the client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewServiceClient()\n```\n\n----------------------------------------\n\nTITLE: Creating Certificates with Legacy KeyVault Module in Go\nDESCRIPTION: Example showing certificate creation using the deprecated keyvault module. Uses keyvault.BaseClient with environment-based authentication and requires passing vault URL with each operation.\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"fmt\"\n\n    \"github.com/Azure/azure-sdk-for-go/profiles/latest/keyvault/keyvault\"\n    kvauth \"github.com/Azure/azure-sdk-for-go/services/keyvault/auth\"\n)\n\nfunc main() {\n    vaultURL := \"https://<TODO: your vault name>.vault.azure.net\"\n    authorizer, err := kvauth.NewAuthorizerFromEnvironment()\n    if err != nil {\n       // TODO: handle error\n    }\n\n    basicClient := keyvault.New()\n    basicClient.Authorizer = authorizer\n\n    fmt.Println(\"\\ncreating certificate in keyvault:\")\n    issuerName := \"self\"\n    subject := \"CN=DefaultPolicy\"\n    createParams := keyvault.CertificateCreateParameters{\n        CertificatePolicy: &keyvault.CertificatePolicy{\n            IssuerParameters:          &keyvault.IssuerParameters{Name: &issuerName},\n            X509CertificateProperties: &keyvault.X509CertificateProperties{Subject: &subject},\n        }\n    }\n    resp, err := basicClient.CreateCertificate(context.TODO(), vaultURL, \"<cert name>\", createParams)\n    if err != nil {\n        // TODO: handle error\n    }\n    fmt.Println(\"added/updated: \" + *resp.ID)\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming Models in Swagger\nDESCRIPTION: YAML directive to rename several models by removing the 'Item' suffix in the Swagger document.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- rename-model:\n    from: DequeuedMessageItem\n    to: DequeuedMessage\n- rename-model:\n    from: QueueItem\n    to: Queue\n- rename-model:\n    from: PeekedMessageItem\n    to: PeekedMessage\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Active Directory Module in Go\nDESCRIPTION: Demonstrates how to install the Azure Active Directory module using Go modules.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/aad/armaad\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Reservation Client in Go\nDESCRIPTION: This snippet shows how to create a specific Reservation client using the previously initialized client factory. This client can be used to perform operations related to Azure Reservations.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewReservationClient()\n```\n\n----------------------------------------\n\nTITLE: Pagination in Previous Version (services/**/mgmt/**)\nDESCRIPTION: Example of handling pagination in the deprecated version of Azure SDK for Go.\n\nLANGUAGE: go\nCODE:\n```\npager, err := resourceGroupsClient.List(context.TODO(), \"\", nil)\nif err != nil {\n    log.Fatal(err)\n}\nfor p.NotDone() {\n    for _, v := range pager.Values() {\n        log.Printf(\"resource group ID: %s\\n\", *rg.ID)\n    }\n    if err := pager.NextWithContext(context.TODO()); err != nil   {\n        log.Fatal(err)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Network Admin Rule Collections Client in Go\nDESCRIPTION: Instantiates a specific client for working with Admin Rule Collections using the client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewAdminRuleCollectionsClient()\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Options for Different Clouds\nDESCRIPTION: Example of setting up client options for connecting to different Azure clouds including sovereign clouds and Azure Stack.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armcustomerlockbox.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Running golangci-lint for Go\nDESCRIPTION: Command to run golangci-lint on a specific package using a configuration file. This helps identify common linting errors in the Go code.\n\nLANGUAGE: bash\nCODE:\n```\ngolangci-lint run -c <path_to_root>/eng/.golangci.yml in <path_to_my_package>\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Search Client Factory in Go\nDESCRIPTION: This code creates a client factory for Azure Search using the subscription ID and credentials. It allows creation of various clients for interacting with Azure Search services.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armsearch.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Application Insight Client Options in Go\nDESCRIPTION: This code demonstrates how to set client options for Azure Application Insight, including specifying a different cloud endpoint. It uses the arm and azcore packages to configure ClientOptions.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armapplicationinsights.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Credentials\nDESCRIPTION: Creates default Azure credentials for authentication using the azidentity package.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Documenting Release History in Markdown\nDESCRIPTION: This snippet outlines the release history for version 0.1.0 of the Azure SDK for Go Edge Zones package. It mentions the package's adoption of next-generation design principles and provides links for further information.\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 0.1.0 (2024-07-08)\n### Other Changes\n\nThe package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/edgezones/armedgezones` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html).\n\nTo learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).\n```\n\n----------------------------------------\n\nTITLE: Release Notes Documentation - Markdown\nDESCRIPTION: Release history documentation showing version updates, feature additions, and bug fixes for the Azure SDK for Go. Includes migration information for breaking changes introduced in version 0.4.0.\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 0.6.0 (2023-11-24)\n### Features Added\n\n- Support for test fakes and OpenTelemetry trace spans.\n\n\n## 0.5.1 (2023-04-14)\n### Bug Fixes\n\n- Fix serialization bug of empty value of `any` type.\n\n\n## 0.5.0 (2023-03-31)\n### Features Added\n\n- New struct `ClientFactory` which is a client factory used to create any client in this module\n\n\n## 0.4.0 (2022-05-18)\n\nThe package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/oep/armoep` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html) since version 0.4.0, which contains breaking changes.\n\nTo migrate the existing applications to the latest version, please refer to [Migration Guide](https://aka.ms/azsdk/go/mgmt/migration).\n\nTo learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Credentials\nDESCRIPTION: Creating default Azure credentials for authentication with the Service Fabric API\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Data Catalog SDK Generation\nDESCRIPTION: Defines the AutoRest configuration parameters for generating the Azure Data Catalog SDK for Go. Specifies the ARM mode, required API specifications, license header type, and module version.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/datacatalog/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/datacatalog/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.2.0\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Hybrid Compute using DefaultAzureCredential in Go\nDESCRIPTION: This code snippet shows how to create a default Azure credential for authentication with Azure Hybrid Compute. It uses the azidentity package.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Creating a File Client with SAS Authentication in Go\nDESCRIPTION: Illustrates how to create a file client using SAS (Shared Access Signature) authentication in the azfile module. This replaces the previous method of using NewAnonymousCredential with a Pipeline.\n\nLANGUAGE: go\nCODE:\n```\nclient, err := file.NewClientWithNoCredential(\"<public file or file with SAS URL>\", nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Orbital SDK Generation in Go\nDESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure Orbital SDK for Go. It specifies Azure ARM mode, required specification files, license header, and module version.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/1e7b408f3323e7f5424745718fe62c7a043a2337/specification/orbital/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/1e7b408f3323e7f5424745718fe62c7a043a2337/specification/orbital/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 2.1.0\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure using Default Credentials in Go\nDESCRIPTION: This snippet demonstrates how to create a default Azure credential using the azidentity package. It's used for authenticating with Azure Data Lake Analytics.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Client Options for Different Clouds\nDESCRIPTION: Sets up client options for connecting to different Azure clouds including sovereign clouds and Azure Stack.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armappplatform.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Correcting CORS XML Tags in Go Source Files\nDESCRIPTION: YAML directive to update the XML tags for CORS-related structs in Go source files.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: source-file-go\n    where: $\n    transform: >\n      return $.\n        replace(/xml:\"CORS>CORSRule\"/g, \"xml:\\\"Cors>CorsRule\\\"\");\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Default Credentials\nDESCRIPTION: Creates a default Azure credential object for authentication with Azure services using the azidentity package.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Digital Twins Client Options\nDESCRIPTION: Setting up client options for connecting to different Azure clouds including sovereign clouds and Azure Stack.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armdigitaltwins.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Setting Function Parameters in ChatCompletionsOptions\nDESCRIPTION: Demonstrates how to set JSON parameters for a function definition in ChatCompletionsOptions using Go's json.Marshal.\n\nLANGUAGE: go\nCODE:\n```\nparametersJSON, err := json.Marshal(map[string]any{\n  \"required\": []string{\"location\"},\n  \"type\":     \"object\",\n  \"properties\": map[string]any{\n    \"location\": map[string]any{\n      \"type\":        \"string\",\n      \"description\": \"The city and state, e.g. San Francisco, CA\",\n    },\n  },\n})\n\nif err != nil {\n  // TODO: Update the following line with your application specific error handling logic\n  log.Printf(\"ERROR: %s\", err)\n  return\n}\n\n// and then, in ChatCompletionsOptions\nopts := azopenai.ChatCompletionsOptions{\n  Functions: []azopenai.FunctionDefinition{\n    {\n      Name:        to.Ptr(\"get_current_weather\"),\n      Description: to.Ptr(\"Get the current weather in a given location\"),\n      Parameters: parametersJSON,\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Making FileAttributes an Optional Parameter\nDESCRIPTION: YAML directive to change FileAttributes to an optional parameter in the API definition.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.parameters.FileAttributes\n  transform: >\n    $.required = false;\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Web PubSub SDK for Go\nDESCRIPTION: Command to install the Azure Web PubSub service client module using go get.\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/messaging/azwebpubsub\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Load Testing Client in Go\nDESCRIPTION: Instantiates a new Load Tests client using the client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewLoadTestsClient()\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Kusto Module with Go\nDESCRIPTION: Command to install the Azure Kusto module using Go modules package management\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/kusto/armkusto/v2\n```\n\n----------------------------------------\n\nTITLE: Creating Service Linker Client Factory\nDESCRIPTION: Initializes a client factory for Azure Service Linker with basic configuration.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armservicelinker.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure using Default Credentials in Go\nDESCRIPTION: This snippet demonstrates how to create a default Azure credential for authentication using the azidentity package.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure using DefaultAzureCredential\nDESCRIPTION: Creates a default Azure credential object for authentication with Azure services.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Default Credential in Go\nDESCRIPTION: This code demonstrates how to create a default Azure credential using the azidentity package.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: AutoRest Base Configuration for Azure Blob SDK\nDESCRIPTION: Core configuration settings for the code generation process including version, input specifications, and output parameters.\n\nLANGUAGE: yaml\nCODE:\n```\ngo: true\nclear-output-folder: false\nversion: \"^3.0.0\"\nlicense-header: MICROSOFT_MIT_NO_VERSION\ninput-file: \"https://raw.githubusercontent.com/Azure/azure-rest-api-specs/ae95eb6a4701d844bada7d1c4f5ecf4a7444e5b8/specification/storage/data-plane/Microsoft.BlobStorage/stable/2025-01-05/blob.json\"\ncredential-scope: \"https://storage.azure.com/.default\"\noutput-folder: ../generated\nfile-prefix: \"zz_\"\nopenapi-type: \"data-plane\"\nverbose: true\nsecurity: AzureKey\nmodeler-four:\n  group-parameters: false\n  seal-single-value-enum-by-default: true\n  lenient-model-deduplication: true\nexport-clients: true\nuse: \"@autorest/go@4.0.0-preview.65\"\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure using Default Credentials in Go\nDESCRIPTION: This snippet demonstrates how to create a default Azure credential object for authentication. It uses the azidentity package to generate the credential.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Client Options for Different Clouds in Go\nDESCRIPTION: Set up client options to connect to different Azure clouds, such as Azure China, using the arm and azcore packages.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armpeering.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Entity Management with admin.Client in azservicebus for Go\nDESCRIPTION: Demonstrates how to use the new admin.Client for entity management tasks like creating queues in azservicebus.\n\nLANGUAGE: go\nCODE:\n```\nadminClient, err := admin.NewClientFromConnectionString(connectionString, nil)\n\n// create a queue with default properties\nresp, err := adminClient.CreateQueue(context.TODO(), \"queue-name\", nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Applications Client\nDESCRIPTION: Creates a new Applications client instance using the client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewApplicationsClient()\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure IoT Central in Go\nDESCRIPTION: Example of creating a default Azure credential for authentication with Azure IoT Central.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Custom Providers Module\nDESCRIPTION: Command to install the Azure Custom Providers module using Go modules\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/customproviders/armcustomproviders\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Client Options for Different Clouds in Go\nDESCRIPTION: This snippet shows how to configure client options to connect to different Azure clouds, including sovereign clouds and Azure Stack.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armeventhub.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Test Base Client Factory in Go\nDESCRIPTION: This snippet demonstrates how to create a client factory for Azure Test Base services. It requires a subscription ID and credentials, and optionally accepts client options for customization.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armtestbase.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Recovery Services Backup Module in Go\nDESCRIPTION: This command installs the Azure Recovery Services Backup module using Go's package manager.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/recoveryservices/armrecoveryservicesbackup/v4\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging for Azure Event Hubs Go Client\nDESCRIPTION: Example showing how to configure console logging for the Azure Event Hubs Go client using azcore/log package. This sets up a custom log listener and enables specific event logging.\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  \"fmt\"\n  azlog \"github.com/Azure/azure-sdk-for-go/sdk/azcore/log\"\n)\n\n// print log output to stdout\nazlog.SetListener(func(event azlog.Event, s string) {\n    fmt.Printf(\"[%s] %s\\n\", event, s)\n})\n\n// pick the set of events to log\nazlog.SetEvents(\n  azeventhubs.EventConn,\n  azeventhubs.EventAuth,\n  azeventhubs.EventProducer,\n  azeventhubs.EventConsumer,\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest Settings for Azure Workload Monitor SDK Generation\nDESCRIPTION: Defines the AutoRest configuration parameters for generating the Azure Workload Monitor SDK in Go. Specifies the required API specifications, Azure ARM mode, license header, and module version.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/workloadmonitor/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/workloadmonitor/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 0.5.1\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure NetApp Files Client for Different Clouds in Go\nDESCRIPTION: This snippet shows how to configure the client factory to connect to different Azure clouds, such as Azure China. It uses ClientOptions to set the cloud endpoint.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armnetapp.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Client Options for Different Clouds in Go\nDESCRIPTION: Demonstrates how to set up client options for connecting to different Azure clouds, such as Azure China. This is useful for applications that need to work with sovereign clouds.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armdeploymentscripts.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Modifying Service Client in Go\nDESCRIPTION: YAML directive to remove the pager method and export various generated methods in the service client Go file.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: zz_service_client.go\n    where: $\n    transform: >\n      return $.\n        replace(/func \\(client \\*ServiceClient\\) NewListQueuesSegmentPager\\(.+\\/\\/ listQueuesSegmentCreateRequest creates the ListQueuesSegment request/s, `// ListQueuesSegmentCreateRequest creates the ListQueuesFlatSegment ListQueuesSegment`).\n        replace(/\\(client \\*ServiceClient\\) listQueuesSegmentCreateRequest\\(/, `(client *ServiceClient) ListQueuesSegmentCreateRequest(`).\n        replace(/\\(client \\*ServiceClient\\) listQueuesSegmentHandleResponse\\(/, `(client *ServiceClient) ListQueuesSegmentHandleResponse(`);\n```\n\n----------------------------------------\n\nTITLE: Deleting an Azure Automanage Configuration Profile in Go\nDESCRIPTION: Removes an existing Automanage configuration profile from the specified resource group.\n\nLANGUAGE: go\nCODE:\n```\n_, err := configProfilesClient.Delete(context.Background(), \"resourceGroupName\", \"configurationProfileName\", nil)\n```\n\n----------------------------------------\n\nTITLE: Transforming BlobName in Models\nDESCRIPTION: YAML directive to replace 'BlobName' with 'string' in the generated models file, undoing a breaking change.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: zz_models.go\n  where: $\n  transform: >\n    return $.\n      replace(/Name\\s+\\*BlobName/g, `Name *string`);\n```\n\n----------------------------------------\n\nTITLE: Updating Service Version in Go Client Files\nDESCRIPTION: YAML directive to update the service version from '2018-03-28' to '2024-08-04' in specific Go client files.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: \n  - zz_messageid_client.go\n  - zz_messages_client.go\n  - zz_queue_client.go\n  - zz_service_client.go\n\n  where: $\n  transform: >\n    return $.\n      replaceAll(`[]string{\"2018-03-28\"}`, `[]string{\"2024-08-04\"}`);\n```\n\n----------------------------------------\n\nTITLE: Creating Specific Azure Iotfirmwaredefense Client in Go\nDESCRIPTION: Code snippet demonstrating how to create a specific client (in this case, BinaryHardeningClient) using the client factory. This client can be used to perform operations related to binary hardening.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewBinaryHardeningClient()\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Client with Custom Options\nDESCRIPTION: Creates a client factory with custom options for connecting to different Azure clouds.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armworkloads.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure Hybrid Compute Client Factory in Go\nDESCRIPTION: This snippet demonstrates how to create a client factory for Azure Hybrid Compute. It requires a subscription ID and a credential object.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armhybridcompute.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Oracle Database Client Factory\nDESCRIPTION: Initializes a client factory for Azure Oracle Database with subscription ID and credentials\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armoracledatabase.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Default Credential in Go\nDESCRIPTION: This code shows how to create a default Azure credential using the azidentity package for authentication with Azure services.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Servicenetworking Module\nDESCRIPTION: Command to install the Azure Servicenetworking module using Go modules for dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/servicenetworking/armservicenetworking\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Front Door Go Module\nDESCRIPTION: Command to install the Azure Front Door module using Go modules for dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/frontdoor/armfrontdoor\n```\n\n----------------------------------------\n\nTITLE: Adding New Enum Values in Go\nDESCRIPTION: New enum values are added to existing enum types like QuestionType and SolutionType. This snippet shows the syntax for adding new enum values in Go.\n\nLANGUAGE: go\nCODE:\n```\n- New value `QuestionTypeDateTimePicker`, `QuestionTypeMultiSelect` added to enum type `QuestionType`\n- New value `SolutionTypeSelfHelp`, `SolutionTypeTroubleshooters` added to enum type `SolutionType`\n- New value `TypeInput` added to enum type `Type`\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Credentials\nDESCRIPTION: Creates a default Azure credential object for authentication with Azure services.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: New Function Signature in Go\nDESCRIPTION: Example of a new function added to a client in version 6.2.0\n\nLANGUAGE: go\nCODE:\n```\nfunc NewGalleryInVMAccessControlProfileVersionsClient(string, azcore.TokenCredential, *arm.ClientOptions) (*GalleryInVMAccessControlProfileVersionsClient, error)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Newrelic Client Factory\nDESCRIPTION: This code creates a client factory for Azure Newrelic services. It requires a subscription ID and a credential object. The factory can be used to create specific clients for different Azure Newrelic operations.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armnewrelicobservability.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring Typespec for Go SDK Generation in YAML\nDESCRIPTION: YAML configuration for generating Go SDK using Typespec. It specifies options for service directory, package naming, and various generation features.\n\nLANGUAGE: yaml\nCODE:\n```\noptions:\n  \"@azure-tools/typespec-go\":\n    service-dir: \"SERVICE_DIRECTORY_NAME\"\n    package-dir: \"PACKAGE_DIRECTORY_NAME\"\n    module: \"github.com/Azure/azure-sdk-for-go/{service-dir}/{package-dir}\"\n    fix-const-stuttering: true\n    flavor: \"azure\"\n    generate-examples: true\n    generate-fakes: true\n    head-as-boolean: true\n    inject-spans: true\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Healthcare APIs SDK Generation in Go\nDESCRIPTION: This YAML configuration specifies the settings for AutoRest to generate the Azure SDK for Go client library for Healthcare APIs. It includes the Azure ARM mode, required API specifications, license header, module version, and API version tag.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/92de53a5f1e0e03c94b40475d2135d97148ed014/specification/healthcareapis/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/92de53a5f1e0e03c94b40475d2135d97148ed014/specification/healthcareapis/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 2.1.0\ntag: package-2024-03-31\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure Credentials in Go\nDESCRIPTION: Creates default Azure credentials for authentication using the azidentity package.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Deployment Scripts Client in Go\nDESCRIPTION: Shows how to create a specific client from the client factory. This client can be used to interact with Azure Deployment Scripts services.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewClient()\n```\n\n----------------------------------------\n\nTITLE: Updating Module Information in Client Constructor\nDESCRIPTION: This YAML directive modifies the client constructor in various files to use the internal package for module name and version information.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from:\n      - \"*_client.go\"\n      - \"client.go\"\n      - \"client_factory.go\"\n    where: $\n    transform: return $.replace(/moduleVersion/, \"internal.ModuleVersion\").replace(/moduleName+\"/, \"internal.ModuleName+\\\"/armappservice\");\n```\n\n----------------------------------------\n\nTITLE: Creating Client Factory for Azure Network Function Manager in Go\nDESCRIPTION: This code creates a client factory for the Azure Network Function Manager, which can be used to instantiate specific clients.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armnetworkfunction.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Data Migration Client Factory\nDESCRIPTION: Initializes a client factory for Azure Data Migration services using subscription ID and credentials\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armdatamigration.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Adding Deprecation Notice to README.md in Markdown\nDESCRIPTION: This snippet shows how to add a deprecation notice to the beginning of the README.md file, right under the title.\n\nLANGUAGE: markdown\nCODE:\n```\n# Azure Monitor Ingestion client module for Go\n> Deprecated: use [github.com/Azure/azure-sdk-for-go/sdk/monitor/ingestion/azlogs](https://pkg.go.dev/github.com/Azure/azure-sdk-for-go/sdk/monitor/ingestion/azlogs) instead\nThe Azure Monitor Ingestion client module is used to send custom logs to [Azure Monitor][azure_monitor_overview] using the [Logs Ingestion API][ingestion_overview].\n```\n\n----------------------------------------\n\nTITLE: Removing QueueName from Parameter List in Swagger\nDESCRIPTION: YAML directive to remove the QueueName parameter from specific paths in the Swagger document.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $[\"x-ms-paths\"]\n  transform: >\n    for (const property in $)\n    {\n        if (property.includes('/{queueName}/messages/{messageid}'))\n        {\n            $[property][\"parameters\"] = $[property][\"parameters\"].filter(function(param) { return (typeof param['$ref'] === \"undefined\") || (false == param['$ref'].endsWith(\"#/parameters/QueueName\") && false == param['$ref'].endsWith(\"#/parameters/MessageId\"))});\n        }\n        else if (property.includes('/{queueName}'))\n        {\n            $[property][\"parameters\"] = $[property][\"parameters\"].filter(function(param) { return (typeof param['$ref'] === \"undefined\") || (false == param['$ref'].endsWith(\"#/parameters/QueueName\"))});\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating Redis Service Client\nDESCRIPTION: Creates a specific Redis service client from the client factory to access API functionality.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewAccessPolicyAssignmentClient()\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure using Default Credentials in Go\nDESCRIPTION: This snippet demonstrates how to create a default Azure credential for authentication. It uses the azidentity module to provide various authentication methods.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Event Grid Go SDK Generation\nDESCRIPTION: AutoRest configuration file that specifies how to generate the Azure Event Grid client SDK for Go. It defines input specifications, output settings, and includes multiple directives for customizing the generated code including endpoint parameterization, type references, and content type headers.\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: EventGridPublisherClient\ndescription: Azure Event Grid client\ngenerated-metadata: false\nclear-output-folder: false\ngo: true\ninput-file: \n    - https://raw.githubusercontent.com/Azure/azure-rest-api-specs/main/specification/eventgrid/data-plane/Microsoft.EventGrid/stable/2018-01-01/EventGrid.json\nlicense-header: MICROSOFT_MIT_NO_VERSION\nopenapi-type: \"data-plane\"\nmodule: github.com/Azure/azure-sdk-for-go/sdk/messaging/eventgrid/azeventgrid\noutput-folder: ../azeventgrid\noverride-client-name: Client\nsecurity: \"AADToken\"\nuse: \"@autorest/go@4.0.0-preview.63\"\nversion: \"^3.0.0\"\nslice-elements-byval: true\nremove-non-reference-schema: true\ndirective:\n  # make the endpoint a parameter of the client constructor\n  - from: swagger-document\n    where: $[\"x-ms-parameterized-host\"]\n    transform: $.parameters[0][\"x-ms-parameter-location\"] = \"client\"\n  # reference azcore/messaging/CloudEvent\n  - from: client.go\n    where: $\n    transform: return $.replace(/\\[\\]CloudEvent/g, \"[]messaging.CloudEvent\");\n  - from: client.go\n    where: $\n    transform: return $.replace(/func \\(client \\*Client\\) PublishCloudEventEvents\\(/g, \"func (client *Client) internalPublishCloudEventEvents(\");  \n  - from: swagger-document\n    where: $.definitions.CloudEventEvent\n    transform: $[\"x-ms-external\"] = true\n  # delete client name prefix from method options and response types\n  - from:\n      - client.go\n      - models.go\n      - responses.go\n      - options.go\n    where: $\n    transform: return $.replace(/Client(\\w+)((?:Options|Response))/g, \"$1$2\");\n  # delete some models that look like they're system events...\n  - from: models.go\n    where: $\n    transform: return $.replace(/\\/\\/ (SubscriptionDeletedEventData|SubscriptionValidationEventData|SubscriptionValidationResponse).+?\\n}/gs, \"\")    \n  - from: models_serde.go\n    where: $    \n    transform: |\n      return $\n        .replace(/\\/\\/ MarshalJSON implements the json.Marshaller interface for type (SubscriptionDeletedEventData|SubscriptionValidationEventData|SubscriptionValidationResponse).+?\\n}/gs, \"\")\n        .replace(/\\/\\/ UnmarshalJSON implements the json.Unmarshaller interface for type (SubscriptionDeletedEventData|SubscriptionValidationEventData|SubscriptionValidationResponse).+?\\n}/gs, \"\");\n  - from: \n      - models.go\n      - client.go\n      - responses.go\n      - options.go\n    where: $\n    transform: return $.replace(/CloudEventEvent/g, \"CloudEvent\");\n  - from: \n      - models.go\n      - models_serde.go\n      - client.go\n      - responses.go\n      - options.go\n    where: $\n    transform: return $.replace(/EventGridEvent/g, \"Event\");\n  - from: \n      - client.go\n    where: $\n    transform: | \n      return $.replace(\n        /(func \\(client \\*Client\\) publishCloudEventsCreateRequest.+?)return req, nil/s, \n        '$1\\nreq.Raw().Header.Set(\"Content-type\", \"application/cloudevents-batch+json; charset=utf-8\")\\nreturn req, nil');\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK Generation in YAML\nDESCRIPTION: This YAML configuration sets up AutoRest for generating the Azure SDK for Go. It specifies the Azure ARM mode, required API specifications, license header, module version, and enables package locks.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/0cc5e2efd6ffccf30e80d1e150b488dd87198b94/specification/resources/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/0cc5e2efd6ffccf30e80d1e150b488dd87198b94/specification/resources/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.2.0\npackage-locks: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Options\nDESCRIPTION: Sets up client options for connecting to different Azure clouds including sovereign clouds and Azure Stack\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armdataboundaries.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Data Box Service Client in Go\nDESCRIPTION: This code demonstrates how to create a specific Azure Data Box service client using the previously created client factory. This client provides access to Data Box-related APIs.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewServiceClient()\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Features Client\nDESCRIPTION: Creates a new client instance from the client factory for accessing Azure Features APIs.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewClient()\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Container Registry Client Options in Go\nDESCRIPTION: This code demonstrates how to set client options, specifically for connecting to different Azure clouds. It uses the arm.ClientOptions struct to configure the cloud endpoint.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armcontainerregistry.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Databricks Module in Go\nDESCRIPTION: This snippet demonstrates how to install the Azure Databricks module using Go's package manager. It requires Go modules for versioning and dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/databricks/armdatabricks\n```\n\n----------------------------------------\n\nTITLE: Configuring Sanitizers for Go SDK Tests\nDESCRIPTION: Shows how to configure sanitizers for Go SDK tests in the TestMain function. This includes removing built-in sanitizers and setting up custom sanitizers to prevent recording secrets.\n\nLANGUAGE: Go\nCODE:\n```\nconst recordingDirectory = \"<path to service directory with assets.json file>/testdata\"\n\nfunc TestMain(m *testing.M) {\n\tcode := run(m)\n\tos.Exit(code)\n}\n\nfunc run(m *testing.M) int {\n\t// Initialize\n\tif recording.GetRecordMode() == recording.PlaybackMode || recording.GetRecordMode() == recording.RecordingMode {\n\t\tproxy, err := recording.StartTestProxy(recordingDirectory, nil)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\n\t\t// NOTE: defer should not be used directly within TestMain as it will not be executed due to os.Exit()\n\t\tdefer func() {\n\t\t\terr := recording.StopTestProxy(proxy)\n\t\t\tif err != nil {\n\t\t\t\tpanic(err)\n\t\t\t}\n\t\t}()\n\t}\n\n\t// sanitizers run in playback and recording modes\n\tif recording.GetRecordMode() != recording.LiveMode {\n\t\t// configure sanitizers here. For example:\n\t\terr := recording.RemoveRegisteredSanitizers([]string{\n\t\t\t\"AZSDK3430\", // body key $..id\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t}\n\n\t// run test cases\n\treturn m.Run()\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Stream Analytics Client Instance\nDESCRIPTION: Creates a new Clusters client instance using the client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewClustersClient()\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest Settings for Azure SDK Go Generation\nDESCRIPTION: Configuration settings for AutoRest to generate Go SDK code from Azure REST API specifications. Includes references to resource manager specifications, license header requirements, module versioning, and package settings for subscriptions API version 2022-12.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/4f4073bdb028bc84bc3e6405c1cbaf8e89b83caf/specification/resources/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/4f4073bdb028bc84bc3e6405c1cbaf8e89b83caf/specification/resources/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.3.0\npackage-subscriptions: true\ntag: package-subscriptions-2022-12\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Bus Environment Variables\nDESCRIPTION: Environment variable configuration required for running the reliability tests locally. Specifies the Service Bus namespace endpoint.\n\nLANGUAGE: bash\nCODE:\n```\nSERVICEBUS_ENDPOINT=<hostname of the Service Bus namespace (ex: <name>.servicebus.windows.net)>\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Terraform Module\nDESCRIPTION: Command to install the Azure Terraform module using Go modules\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/terraform/armterraform\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Credentials\nDESCRIPTION: Creates default Azure credentials for authentication with Azure Servicenetworking using azidentity module.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Creating ManagedCCFClient in Go\nDESCRIPTION: Defines new functions for creating and using a ManagedCCFClient, which manages Confidential Consortium Framework instances.\n\nLANGUAGE: Go\nCODE:\n```\nfunc NewManagedCCFClient(baseURI string, credential azcore.TokenCredential, options *arm.ClientOptions) (*ManagedCCFClient, error)\n\nfunc (cf *ClientFactory) NewManagedCCFClient() *ManagedCCFClient\n\nfunc (client *ManagedCCFClient) BeginCreate(ctx context.Context, resourceGroupName string, ledgerName string, parameters ManagedCCF, options *ManagedCCFClientBeginCreateOptions) (*runtime.Poller[ManagedCCFClientCreateResponse], error)\n\nfunc (client *ManagedCCFClient) BeginDelete(ctx context.Context, resourceGroupName string, ledgerName string, options *ManagedCCFClientBeginDeleteOptions) (*runtime.Poller[ManagedCCFClientDeleteResponse], error)\n\nfunc (client *ManagedCCFClient) Get(ctx context.Context, resourceGroupName string, ledgerName string, options *ManagedCCFClientGetOptions) (ManagedCCFClientGetResponse, error)\n\nfunc (client *ManagedCCFClient) NewListByResourceGroupPager(resourceGroupName string, options *ManagedCCFClientListByResourceGroupOptions) *runtime.Pager[ManagedCCFClientListByResourceGroupResponse]\n\nfunc (client *ManagedCCFClient) NewListBySubscriptionPager(options *ManagedCCFClientListBySubscriptionOptions) *runtime.Pager[ManagedCCFClientListBySubscriptionResponse]\n\nfunc (client *ManagedCCFClient) BeginUpdate(ctx context.Context, resourceGroupName string, ledgerName string, parameters ManagedCCF, options *ManagedCCFClientBeginUpdateOptions) (*runtime.Poller[ManagedCCFClientUpdateResponse], error)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Deviceregistry Client Factory in Go\nDESCRIPTION: This code creates a client factory for Azure Deviceregistry. It requires a subscription ID and credentials. The factory can be used to create specific clients within the module.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armdeviceregistry.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Using Default Credentials in Go\nDESCRIPTION: Create a default Azure credential using the azidentity package for authentication with Azure services.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Adding Copyright Header to Go Files\nDESCRIPTION: Example of the required copyright header that must be included at the top of every source file in the project. It includes the MIT license notice.\n\nLANGUAGE: golang\nCODE:\n```\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\npackage <mypackage>\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure IoT Central SDK Generation in Go\nDESCRIPTION: This YAML configuration specifies the settings for AutoRest to generate the Azure SDK for Go for IoT Central. It includes the Azure ARM flag, required API specifications, license header, module version, and API version tag.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/iotcentral/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/iotcentral/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.2.0\ntag: package-2021-06\n```\n\n----------------------------------------\n\nTITLE: Creating App Configuration Client Factory in Go\nDESCRIPTION: This code creates a client factory for Azure App Configuration. It requires a subscription ID and a credential object. The factory can be used to create specific clients for different App Configuration operations.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armappconfiguration.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Initializing Provider HUB Client Factory\nDESCRIPTION: Creates a new client factory instance for Azure Provider HUB with default configuration\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armproviderhub.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Adding Internal Import Directive\nDESCRIPTION: YAML directive to add internal package import to multiple client-related Go files.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from:\n      - \"*_client.go\"\n      - \"client.go\"\n      - \"client_factory.go\"\n    where: $\n    transform: return $.replace(/import \\(\\n/, \"import (\\n\\\"github.com/Azure/azure-sdk-for-go/profile/p20200901/internal\\\"\\n\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Factory with Custom Options\nDESCRIPTION: Creates a client factory with custom options for connecting to different Azure clouds\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armcustomproviders.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Storage Mover SDK Generation in Go\nDESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure Storage Mover SDK for Go. It specifies Azure ARM mode, required API specifications, license header, module version, and package tag.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/4ee6d9fd7687d4b67117c5a167c191a7e7e70b53/specification/storagemover/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/4ee6d9fd7687d4b67117c5a167c191a7e7e70b53/specification/storagemover/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 2.2.0\ntag: package-2024-07\n```\n\n----------------------------------------\n\nTITLE: Release History Changelog Markdown\nDESCRIPTION: Markdown formatted changelog documenting version history, including features added, breaking changes, bug fixes and other changes across multiple releases of the Azure SDK for Go tools package.\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.11.0 (Unreleased)\n\n### Features Added\n\n* Added function `tracing.NewSpanValidator` to create a span validator for use with in unit tests.\n* Added type `tracing.SpanMatcher` to match spans in a span validator.\n\n### Breaking Changes\n\n### Bugs Fixed\n\n### Other Changes\n* Zero `RecordingOptions.ProxyPort` is interpreted as indicating the default port used\n  by `StartTestProxy`\n* Improved presentation of test proxy recording mismatch errors\n```\n\n----------------------------------------\n\nTITLE: Renaming Share-Prefixed Models\nDESCRIPTION: YAML directive to rename models by removing the 'Share' prefix.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- rename-model:\n    from: ShareProtocolSettings\n    to: ProtocolSettings\n- rename-model:\n    from: ShareSmbSettings\n    to: SMBSettings\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK for Go Generation\nDESCRIPTION: This YAML configuration specifies settings for AutoRest to generate the Azure SDK for Go. It includes ARM support, required specifications, license header, module version, and enables package links.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/0cc5e2efd6ffccf30e80d1e150b488dd87198b94/specification/resources/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/0cc5e2efd6ffccf30e80d1e150b488dd87198b94/specification/resources/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.2.0\npackage-links: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Network Client for Sovereign Clouds in Go\nDESCRIPTION: Sets up a client factory with options for connecting to sovereign clouds or Azure Stack.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armnetwork.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK for Go NGINX Resource Manager\nDESCRIPTION: This YAML configuration sets up AutoRest for generating the Azure SDK for Go, specifically for the NGINX resource manager. It specifies the Azure ARM mode, required API specifications, license header, module version, and API version tag.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/b8d26b0e4c1886458fa56c22aac09c3e3e9a5c9e/specification/nginx/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/b8d26b0e4c1886458fa56c22aac09c3e3e9a5c9e/specification/nginx/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 3.1.0-beta.2\ntag: package-2024-11-01-preview\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure DevOps Client for Different Clouds in Go\nDESCRIPTION: Example of how to configure the Azure DevOps client factory for different Azure clouds, such as Azure China. This uses ClientOptions to set the cloud endpoint.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armdevops.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Event Grid Client Module for Go\nDESCRIPTION: This command installs the Azure Event Grid client module for Go using the go get command.\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/messaging/eventgrid/azeventgrid\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Cloud Options\nDESCRIPTION: Sets up client options for connecting to specific Azure cloud environments including sovereign clouds.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armfeatures.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure App Configuration Module in Go\nDESCRIPTION: This snippet demonstrates how to install the azappconfig module using the go get command. It retrieves the module from the Azure SDK for Go repository.\n\nLANGUAGE: Bash\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/data/azappconfig\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Power BI Resources Client in Go\nDESCRIPTION: Demonstrates how to create a specific client for Power BI Resources using the client factory. This client can be used to perform operations on Power BI resources.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewPowerBIResourcesClient()\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Blueprint Client in Go\nDESCRIPTION: Instantiates a new Blueprint client using the client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewBlueprintsClient()\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK Go Generation\nDESCRIPTION: This YAML configuration sets up AutoRest for generating Azure SDK Go code. It specifies the Azure ARM mode, required specification files, license header, module version, and API version tag.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/c1cea38fb7e5cec9afe223a2ed15cbe2fbeecbdb/specification/redhatopenshift/resource-manager/Microsoft.RedHatOpenShift/openshiftclusters/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/c1cea38fb7e5cec9afe223a2ed15cbe2fbeecbdb/specification/redhatopenshift/resource-manager/Microsoft.RedHatOpenShift/openshiftclusters/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.6.0\ntag: package-2023-11\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Credentials\nDESCRIPTION: Creates default Azure credentials for authentication using the azidentity package\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Bare Metal Instances Client in Go\nDESCRIPTION: This code demonstrates how to create a specific client for Azure Bare Metal Instances using the client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewAzureBareMetalInstancesClient()\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Dynatrace Client Factory in Go\nDESCRIPTION: This code creates a client factory for Azure Dynatrace using the armdynatrace package. It requires a subscription ID and a credential object. The factory can be used to create specific clients for different Dynatrace operations.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armdynatrace.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Installing golangci-lint for Go\nDESCRIPTION: Command to install the golangci-lint tool for Go linting. This tool is used to run various linters on the codebase.\n\nLANGUAGE: bash\nCODE:\n```\ngo install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.41.1\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK Generation in Go\nDESCRIPTION: This YAML configuration specifies settings for AutoRest to generate the Azure SDK for Go. It includes references to Azure REST API specifications, sets the azure-arm flag, and defines the module version and license header.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/devops/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/devops/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 0.7.0\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Identity in Go\nDESCRIPTION: This snippet demonstrates how to create a default Azure credential using the azidentity package. It provides a way to authenticate with Azure services.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Networkanalytics Client for Different Clouds in Go\nDESCRIPTION: Example of creating a client factory with custom options to connect to different Azure clouds or Azure Stack. This uses the arm.ClientOptions to set the cloud endpoint.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armnetworkanalytics.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Removing Module Constants Directive\nDESCRIPTION: YAML directive to remove moduleName and moduleVersion constants from the constants.go file.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: constants.go\n    where: $\n    transform: return $.replace(/const \\(\\n\\s+moduleName.+\\n\\s+moduleVersion.+\\n\\)\\n/, \"\");\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Credentials\nDESCRIPTION: Creates default Azure credentials for authentication with Azure Purview services\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Data Share Module for Go\nDESCRIPTION: This command installs the Azure Data Share module using Go's package manager. It requires Go modules for versioning and dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/datashare/armdatashare\n```\n\n----------------------------------------\n\nTITLE: Updating Service Version to 2025-05-05\nDESCRIPTION: YAML directive to update the service version in multiple generated files.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: \n  - zz_directory_client.go\n  - zz_file_client.go\n  - zz_share_client.go\n  - zz_service_client.go\n  where: $\n  transform: >\n    return $.\n      replaceAll(`[]string{\"2025-01-05\"}`, `[]string{ServiceVersion}`);\n```\n\n----------------------------------------\n\nTITLE: Installing Azure OpenTelemetry Adapter Module in Go\nDESCRIPTION: This command adds the latest version of the azotel module to your Go project's dependencies.\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/tracing/azotel\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Client for Sovereign Clouds\nDESCRIPTION: Sets up client options for connecting to specific Azure cloud environments like Azure China.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armmigrate.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Listing API Keys in Go\nDESCRIPTION: Creates a new pager for listing API keys using the APIKeysClient.\n\nLANGUAGE: Go\nCODE:\n```\n*APIKeysClient.NewListPager(string, string, *APIKeysClientListOptions) *runtime.Pager[APIKeysClientListResponse]\n```\n\n----------------------------------------\n\nTITLE: Creating Service Fabric Client Factory\nDESCRIPTION: Initializing a client factory for accessing Service Fabric APIs with basic configuration\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armservicefabric.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Policy Definition Client\nDESCRIPTION: Creates a new definitions client using the client factory for accessing Policy Definition APIs.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewDefinitionsClient()\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Credentials\nDESCRIPTION: Creates a default Azure credential object for authentication with Azure services using the azidentity module.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Dashboard Module in Go\nDESCRIPTION: This snippet shows how to install the Azure Dashboard module using Go's package manager.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/dashboard/armdashboard\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Monitor Alert Rule Client\nDESCRIPTION: Creates a specific client instance for working with Alert Rule Incidents\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewAlertRuleIncidentsClient()\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Tables Client Library for Go\nDESCRIPTION: Install the Azure Tables client library for Go using the go get command.\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/data/aztables\n```\n\n----------------------------------------\n\nTITLE: Creating Serial Ports Client in Go\nDESCRIPTION: Creates a new Serial Ports client instance using the client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewSerialPortsClient()\n```\n\n----------------------------------------\n\nTITLE: Deleting API Keys in Go\nDESCRIPTION: Deletes an API key using the APIKeysClient.\n\nLANGUAGE: Go\nCODE:\n```\n*APIKeysClient.Delete(context.Context, string, string, string, *APIKeysClientDeleteOptions) (APIKeysClientDeleteResponse, error)\n```\n\n----------------------------------------\n\nTITLE: Configuring Logs Query Client Generation for Azure SDK for Go\nDESCRIPTION: YAML configuration for generating the Logs Query client in the Azure SDK for Go. It specifies input files, output settings, and includes directives for customizing the generated code.\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Logs Query Client\nclear-output-folder: false\ngo: true\ninput-file: \n    - https://github.com/Azure/azure-rest-api-specs/blob/21f5332f2dc7437d1446edf240e9a3d4c90c6431/specification/operationalinsights/data-plane/Microsoft.OperationalInsights/stable/2022-10-27/OperationalInsights.json\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule: github.com/Azure/azure-sdk-for-go/sdk/monitor/azquery\nopenapi-type: \"data-plane\"\noutput-folder: ../azquery\nsecurity: \"AADToken\"\nuse: \"@autorest/go@4.0.0-preview.61\"\ninject-spans: true\nversion: \"^3.0.0\"\n\ndirective:\n  # delete extra endpoints\n  - from: swagger-document\n    where: $[\"paths\"]\n    transform: >\n        delete $[\"/workspaces/{workspaceId}/metadata\"];\n  - from: swagger-document\n    where: $[\"x-ms-paths\"]\n    transform: >\n        delete $[\"/{resourceId}/query?disambiguation_dummy\"];\n\n  # delete extra operations\n  - remove-operation: Query_Get\n  - remove-operation: Query_ResourceGet\n\n  # delete metadata models\n  - remove-model: metadataResults\n  - remove-model: metadataCategory\n  - remove-model: metadataSolution\n  - remove-model: metadataResourceType\n  - remove-model: metadataTable\n  - remove-model: metadataFunction\n  - remove-model: metadataQuery\n  - remove-model: metadataApplication\n  - remove-model: metadataWorkspace\n  - remove-model: metadataResource\n  - remove-model: metadataPermissions\n\n # rename log operations to generate into a separate logs client\n  - rename-operation:\n      from: Query_Execute\n      to: Logs_QueryWorkspace\n  - rename-operation:\n      from: Query_Batch\n      to: Logs_QueryBatch\n  - rename-operation:\n      from: Query_ResourceExecute\n      to: Logs_QueryResource\n\n  # rename Body.Workspaces to Body.AdditionalWorkspaces\n  - from: swagger-document\n    where: $.definitions.queryBody.properties.workspaces\n    transform: $[\"x-ms-client-name\"] = \"AdditionalWorkspaces\"\n  \n  # rename Render to Visualization\n  - from: swagger-document\n    where: $.definitions.queryResults.properties.render\n    transform: $[\"x-ms-client-name\"] = \"Visualization\"\n  - from: swagger-document\n    where: $.definitions.batchQueryResults.properties.render\n    transform: $[\"x-ms-client-name\"] = \"Visualization\"\n\n  # rename BatchQueryRequest.ID to BatchQueryRequest.CorrelationID\n  - from: swagger-document\n    where: $.definitions.batchQueryRequest.properties.id\n    transform: $[\"x-ms-client-name\"] = \"CorrelationID\"\n  - from: swagger-document\n    where: $.definitions.batchQueryResponse.properties.id\n    transform: $[\"x-ms-client-name\"] = \"CorrelationID\"\n\n  # rename BatchQueryRequest.Workspace to BatchQueryRequest.WorkspaceID\n  - from: swagger-document\n    where: $.definitions.batchQueryRequest.properties.workspace\n    transform: $[\"x-ms-client-name\"] = \"WorkspaceID\"\n  \n  # rename Prefer to Options\n  - from: swagger-document\n    where: $.parameters.PreferHeaderParameter\n    transform: $[\"x-ms-client-name\"] = \"Options\"\n  - from: options.go\n    where: $\n    transform: return $.replace(/Options \\*string/g, \"Options *LogsQueryOptions\");\n  - from: logs_client.go\n    where: $\n    transform: return $.replace(/\\*options\\.Options/g, \"options.Options.preferHeader()\");\n  \n  # add default values for batch request path and method attributes\n  - from: swagger-document\n    where: $.definitions.batchQueryRequest.properties.path\n    transform: $[\"x-ms-client-default\"] = \"/query\"\n  - from: swagger-document\n    where: $.definitions.batchQueryRequest.properties.method\n    transform: $[\"x-ms-client-default\"] = \"POST\"\n  - from: swagger-document\n    where: $.definitions.batchQueryRequest.properties.path.x-ms-enum\n    transform: $[\"modelAsString\"] = true\n  - from: swagger-document\n    where: $.definitions.batchQueryRequest.properties.path.x-ms-enum\n    transform: $[\"name\"] = \"BatchQueryRequestPath\"\n  - from: swagger-document\n    where: $.definitions.batchQueryRequest.properties.method.x-ms-enum\n    transform: $[\"modelAsString\"] = true\n  - from: swagger-document\n    where: $.definitions.batchQueryRequest.properties.method.x-ms-enum\n    transform: $[\"name\"] = \"BatchQueryRequestMethod\"\n\n  # add descriptions for models and constants that don't have them\n  - from: constants.go\n    where: $\n    transform: return $.replace(/type ResultType string/, \"//ResultType - Reduces the set of data collected. The syntax allowed depends on the operation. See the operation's description for details.\\ntype ResultType string\");\n\n  # delete unused error models\n  - from: models.go\n    where: $\n    transform: return $.replace(/(?:\\/\\/.*\\s)+type (?:ErrorResponse|ErrorResponseAutoGenerated|ErrorInfo|ErrorDetail).+\\{(?:\\s.+\\s)+\\}\\s/g, \"\");\n  - from: models_serde.go\n    where: $\n    transform: return $.replace(/(?:\\/\\/.*\\s)+func \\(\\w \\*?(?:ErrorResponse|ErrorResponseAutoGenerated|ErrorInfo|ErrorDetail).*\\{\\s(?:.+\\s)+\\}\\s/g, \"\");\n\n  # point the clients to the correct host url\n  - from: \n         - logs_client.go\n         - metrics_client.go\n    where: $\n    transform: return $.replace(/host/g, \"client.host\");\n  - from: \n         - logs_client.go\n         - metrics_client.go\n    where: $\n    transform: return $.replace(/internal \\*azcore.Client/g, \"host string\\n internal *azcore.Client\");\n\n  # delete generated host url\n  - from: constants.go\n    where: $\n    transform: return $.replace(/const host = \"(.*?)\"/, \"\");\n\n  # change Table.Rows from type [][]byte to type []Row\n  - from: models.go\n    where: $\n    transform: return $.replace(/Rows \\[\\]\\[\\]\\[\\]byte/g, \"Rows []Row\");\n\n  # change type of timespan from *string to *TimeInterval\n  - from: \n        - models.go\n        - options.go\n    where: $\n    transform: return $.replace(/Timespan \\*string/g, \"Timespan *TimeInterval\");\n  - from: metrics_client.go\n    where: $\n    transform: return $.replace(/reqQP\\.Set\\(\"timespan\", \\*options\\.Timespan\\)/g, \"reqQP.Set(\\\"timespan\\\", string(*options.Timespan))\");\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Notification Hubs using Default Credentials\nDESCRIPTION: Create a default Azure credential for authentication. This snippet demonstrates how to use the azidentity package to create a default credential for Azure authentication.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Dashboard Client Factory in Go\nDESCRIPTION: This snippet shows how to create a client factory for the Azure Dashboard module. It requires a subscription ID and a credential object.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armdashboard.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Credentials\nDESCRIPTION: Creates a default Azure credential object for authentication with Azure services using the azidentity package.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Standbypool Client Factory for China Cloud in Go\nDESCRIPTION: This snippet shows how to configure the client factory to connect to Azure China cloud. It uses ClientOptions to set the cloud endpoint and creates a new client factory with these options.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armstandbypool.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Policy Insight Client Factory in Go\nDESCRIPTION: This snippet demonstrates how to create a client factory for Azure Policy Insight. It requires a subscription ID and a credential object.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armpolicyinsights.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Default Credential in Go\nDESCRIPTION: Code snippet demonstrating how to create a default Azure credential using the azidentity package for authentication with Azure Service Fabric Mesh.\n\nLANGUAGE: Go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Setting Proxy Certificate Environment Variable in PowerShell\nDESCRIPTION: Sets the PROXY_CERT environment variable to the path of the dotnet-devcert.crt file.\n\nLANGUAGE: PowerShell\nCODE:\n```\n$ENV:PROXY_CERT=\"C:/ <path-to-repo> /azure-sdk-for-go/eng/common/testproxy/dotnet-devcert.crt\"\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest Settings for Azure Hybrid Data Manager SDK\nDESCRIPTION: Defines AutoRest configuration parameters including Azure ARM mode, required API specifications, license header, and module version for generating the Hybrid Data Manager SDK code.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/hybriddatamanager/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/hybriddatamanager/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.2.0\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Application Insight Client Factory in Go\nDESCRIPTION: This snippet shows how to create a client factory for Azure Application Insight. It uses the armapplicationinsights package to create a new client factory with a subscription ID and credential.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armapplicationinsights.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Basic Profile Builder Usage Example\nDESCRIPTION: Example of using the Profile Builder list command with manual package input\n\nLANGUAGE: bash\nCODE:\n```\nprofileBuilder list\ngithub.com/Azure/azure-sdk-for-go/services/logic/mgmt/2016-06-01/logic\ngithub.com/Azure/azure-sdk-for-go/services/redis/mgmt/2017-02-01/redis\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Client Options for Different Clouds in Go\nDESCRIPTION: This code shows how to configure client options to connect to different Azure clouds, including sovereign clouds and Azure Stack.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armmysqlflexibleservers.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Options for Different Clouds\nDESCRIPTION: Example of configuring client options to connect to different Azure clouds like Azure China.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armhybridnetwork.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: New Struct: ManagedClusterAIToolchainOperatorProfile\nDESCRIPTION: Introduces a new struct 'ManagedClusterAIToolchainOperatorProfile'.\n\nLANGUAGE: Go\nCODE:\n```\nNew struct `ManagedClusterAIToolchainOperatorProfile`\n```\n\n----------------------------------------\n\nTITLE: Changing Casing of NfsFileType\nDESCRIPTION: YAML directive to change the casing of NfsFileType to NFSFileType in multiple generated files.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: \n  - zz_constants.go\n  - zz_options.go\n  - zz_response_types.go\n  - zz_file_client.go\n  - zz_directory_client.go\n  where: $\n  transform: >\n    return $.\n      replaceAll(`NfsFileType`, `NFSFileType`);\n```\n\n----------------------------------------\n\nTITLE: Creating DNS Client Factory\nDESCRIPTION: Initializes a client factory for creating Azure DNS service clients using subscription ID and credentials\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armdns.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: New Constants and Types (Go)\nDESCRIPTION: Defines new enum types and their values for AutoRunState, OnBuildError and VMBootOptimizationState.\n\nLANGUAGE: go\nCODE:\n```\ntype AutoRunState string\nconst (\n    AutoRunStateAutoRunDisabled AutoRunState = \"AutoRunDisabled\"\n    AutoRunStateAutoRunEnabled AutoRunState = \"AutoRunEnabled\"\n)\n\ntype OnBuildError string\nconst (\n    OnBuildErrorAbort OnBuildError = \"Abort\"\n    OnBuildErrorCleanup OnBuildError = \"Cleanup\"\n)\n\ntype VMBootOptimizationState string\nconst (\n    VMBootOptimizationStateDisabled VMBootOptimizationState = \"Disabled\"\n    VMBootOptimizationStateEnabled VMBootOptimizationState = \"Enabled\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating FederatedIdentityCredentialsClient in Go\nDESCRIPTION: Demonstrates how to create a new FederatedIdentityCredentialsClient using a subscription ID, token credential, and optional client options.\n\nLANGUAGE: Go\nCODE:\n```\nNewFederatedIdentityCredentialsClient(string, azcore.TokenCredential, *arm.ClientOptions) (*FederatedIdentityCredentialsClient, error)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Using Default Credentials\nDESCRIPTION: Creates a default Azure credential object for authentication with Azure services.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Subscriptions Client\nDESCRIPTION: Creates a client instance from the client factory to access Azure Subscriptions APIs.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewClient()\n```\n\n----------------------------------------\n\nTITLE: Creating Fluidrelay Servers Client\nDESCRIPTION: Creates a new servers client instance using the client factory for accessing server-related APIs.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewServersClient()\n```\n\n----------------------------------------\n\nTITLE: Uploading a File in Go\nDESCRIPTION: Uploads a file using the FilesClient, specifying the workspace name, file name, file details, and optional upload options.\n\nLANGUAGE: go\nCODE:\n```\n*FilesClient.Upload(context.Context, string, string, UploadFile, *FilesClientUploadOptions) (FilesClientUploadResponse, error)\n```\n\n----------------------------------------\n\nTITLE: Adding New Client Functions in Go\nDESCRIPTION: Introduces new functions for various client types, expanding the SDK's capabilities to interact with different Cosmos DB resources and operations.\n\nLANGUAGE: Go\nCODE:\n```\nNew function `*TableResourcesClient.BeginCreateUpdateTableRoleAssignment(context.Context, string, string, string, TableRoleAssignmentResource, *TableResourcesClientBeginCreateUpdateTableRoleAssignmentOptions) (*runtime.Poller[TableResourcesClientCreateUpdateTableRoleAssignmentResponse], error)`\nNew function `*TableResourcesClient.BeginCreateUpdateTableRoleDefinition(context.Context, string, string, string, TableRoleDefinitionResource, *TableResourcesClientBeginCreateUpdateTableRoleDefinitionOptions) (*runtime.Poller[TableResourcesClientCreateUpdateTableRoleDefinitionResponse], error)`\n```\n\n----------------------------------------\n\nTITLE: Markdown Link to Azure Key Vault Troubleshooting Guide\nDESCRIPTION: Markdown formatted link directing users to the main Azure Key Vault SDK troubleshooting documentation.\n\nLANGUAGE: markdown\nCODE:\n```\nSee our [Azure Key Vault SDK Troubleshooting Guide](https://github.com/Azure/azure-sdk-for-go/blob/main/sdk/security/keyvault/TROUBLESHOOTING.md)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Data Box Edge Client Factory in Go\nDESCRIPTION: Example of creating a client factory for Azure Data Box Edge. The factory is used to create specific clients for different operations.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armdataboxedge.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Hybrid Data Client Factory\nDESCRIPTION: Initializes a client factory for Azure Hybrid Data services using subscription ID and credentials\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armazuredata.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Standbypool Client Factory in Go\nDESCRIPTION: This code creates a client factory for Azure Standbypool. It requires a subscription ID and a credential object. The factory can be used to create specific clients within the module.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armstandbypool.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Client for Recording in Go Tests\nDESCRIPTION: Shows how to create a client for recording HTTP interactions in Go tests using the internal/recording package. This function sets up a custom HTTP transport for routing requests through the test proxy.\n\nLANGUAGE: Go\nCODE:\n```\npackage aztables\n\nimport (\n\t...\n\n\t\"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime\"\n\t\"github.com/Azure/azure-sdk-for-go/sdk/internal/recording\"\n\t\"github.com/Azure/azure-sdk-for-go/sdk/internal/test/credential\"\n)\n\nfunc createClientForRecording(t *testing.T, tableName string, serviceURL string) (*Client, error) {\n\ttransport, err := recording.NewRecordingHTTPClient(t)\n\trequire.NoError(t, err)\n\n\toptions := &ClientOptions{\n\t\tClientOptions: azcore.ClientOptions{\n\t\t\tTransport: transport,\n\t\t},\n\t}\n\n\t// credential.New returns a credential for Entra ID authentication. It works in CI\n\t// and local development, in all recording modes. To authenticate live tests on\n\t// your machine, sign in to the Azure CLI or Azure Developer CLI.\n\tcred, err := credential.New(nil)\n\trequire.NoError(t, err)\n\n\treturn NewClient(runtime.JoinPaths(serviceURL, tableName), &cred, options)\n}\n\nfunc startRecording(t *testing.T) {\n\terr := recording.Start(t, recordingDirectory, nil)\n\trequire.NoError(t, err)\n\tt.Cleanup(func() {\n\t\terr := recording.Stop(t, nil)\n\t\trequire.NoError(t, err)\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Client Options for Different Clouds in Go\nDESCRIPTION: This code shows how to set up client options for connecting to different Azure clouds, including sovereign clouds and Azure Stack. It uses the arm.ClientOptions struct to configure the endpoint.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armhybridconnectivity.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Portal Client Factory\nDESCRIPTION: Initializes a new client factory for Azure Portal services using subscription ID and credentials\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armportal.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Credentials\nDESCRIPTION: Creates default Azure credentials for authentication with Azure Maps services using azidentity module.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK for Go - VMware CloudSimple\nDESCRIPTION: YAML configuration for AutoRest to generate the Azure SDK for Go client for VMware CloudSimple. It specifies Azure ARM mode, required API specifications, license header, and module version.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/vmwarecloudsimple/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/vmwarecloudsimple/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.2.0\n```\n\n----------------------------------------\n\nTITLE: Documenting Release History in Markdown\nDESCRIPTION: This markdown document outlines the release history for the Event Grid Basic module in the Azure SDK for Go. It includes sections for unreleased changes, the GA release, and the initial preview release.\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.0.1 (Unreleased)\n\n### Features Added\n\n### Breaking Changes\n\n### Bugs Fixed\n\n### Other Changes\n\n## 1.0.0 (2024-04-09)\n\n- GA for the Event Grid basic module.\n\n## 0.1.0 (2024-03-05)\n\n### Features Added\n\n- Initial preview for the Event Grid Basic module. This module is the new home the `github.com/Azure/azure-sdk-for-go/sdk/messaging/azeventgrid/publisher` package.\n```\n\n----------------------------------------\n\nTITLE: Update KeyVault Test Resources Example\nDESCRIPTION: Example showing how to update a KeyVault service resource group's deletion time to 24 hours from execution.\n\nLANGUAGE: powershell\nCODE:\n```\nUpdate-TestResources.ps1 keyvault -DeleteAfterHours 24\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Subscription Client\nDESCRIPTION: Creates a new client instance from the client factory for accessing Azure Subscription APIs\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewClient()\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK Go Generation\nDESCRIPTION: YAML configuration for AutoRest to generate Azure SDK for Go. It specifies the Azure ARM mode, required API specifications, license header, and module version.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/fb9c8e2ca33e9723c2b2fc849f627329067feb54/specification/extendedlocation/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/fb9c8e2ca33e9723c2b2fc849f627329067feb54/specification/extendedlocation/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.3.0-beta.1\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Databasewatcher Client for Different Clouds in Go\nDESCRIPTION: This snippet shows how to configure the client factory for different Azure clouds or Azure Stack. It uses ClientOptions to set the endpoint for the desired cloud.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armdatabasewatcher.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Creating Media Services Client\nDESCRIPTION: Creates a new Media Services client instance from the client factory\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewClient()\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Client for Different Clouds in Go\nDESCRIPTION: This snippet shows how to configure the Video Analyzers client to connect to different Azure clouds, such as Azure China. It uses ClientOptions to set the cloud endpoint.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclient, err := armvideoanalyzer.NewVideoAnalyzersClient(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Azure Authentication Example\nDESCRIPTION: Code example showing how to authenticate with Azure using environment-based authentication.\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/Azure/go-autorest/autorest/azure/auth\"\n\n// create a VirtualNetworks client\nvnetClient := network.NewVirtualNetworksClient(\"<subscriptionID>\")\n\n// create an authorizer from env vars or Azure Managed Service Idenity\nauthorizer, err := auth.NewAuthorizerFromEnvironment()\nif err == nil {\n    vnetClient.Authorizer = authorizer\n}\n\n// call the VirtualNetworks CreateOrUpdate API\nvnetClient.CreateOrUpdate(context.Background(),\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Maps Service Client\nDESCRIPTION: Creates a new Azure Maps service client instance using the client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewClient()\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure using Default Azure Credential in Go\nDESCRIPTION: This snippet demonstrates how to create a default Azure credential for authentication. It uses the azidentity package to handle various authentication methods.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Release History Changelog in Markdown\nDESCRIPTION: Markdown formatted changelog detailing version releases 0.1.0 and 0.2.0, including support for test fakes, OpenTelemetry trace spans, and implementation of next generation design principles.\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 0.2.0 (2023-11-24)\n### Features Added\n\n- Support for test fakes and OpenTelemetry trace spans.\n\n\n## 0.1.0 (2023-10-27)\n\nThe package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/recoveryservicesdatareplication/armrecoveryservicesdatareplication` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html).\n\nTo learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Monitor Ingestion Go Client\nDESCRIPTION: AutoRest configuration file that specifies how to generate the Azure Monitor Ingestion Go client library. Includes settings for input swagger file, output location, security model, and various directive transformations for customizing the generated code.\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: MonitorIngestionClient\ndescription: Azure Monitor Ingestion Go Client\ngenerated-metadata: false\n\nclear-output-folder: false\ngo: true\ninput-file: https://github.com/Azure/azure-rest-api-specs/blob/f07297ce913bfc911470a86436e73c9aceec0587/specification/monitor/data-plane/ingestion/stable/2023-01-01/DataCollectionRules.json\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule: github.com/Azure/azure-sdk-for-go/sdk/monitor/ingestion/azlogs\nopenapi-type: \"data-plane\"\noutput-folder: ../azlogs\noverride-client-name: Client\nsecurity: \"AADToken\"\nuse: \"@autorest/go@4.0.0-preview.61\"\ninject-spans: true\nversion: \"^3.0.0\"\nrawjson-as-bytes: true\n\ndirective:\n  # delete unused model\n  - remove-model: PendingCertificateSigningRequestResult\n\n  # remove x-ms-client-request-id, it's added in a pipeline policy\n  - where-operation: Upload\n    remove-parameter:\n      in: header\n      name: x-ms-client-request-id\n\n  # rename parameter from \"body\" to \"logs\", \"stream\" to \"streamName\"\n  - from: swagger-document\n    where: $.paths..parameters..[?(@.name=='body')]\n    transform: $[\"x-ms-client-name\"] = \"logs\"\n  - from: swagger-document\n    where: $.paths..parameters..[?(@.name=='stream')]\n    transform: $[\"x-ms-client-name\"] = \"streamName\"\n\n  # delete client name prefix from method options and response types\n  - from:\n      - client.go\n      - options.go\n      - response_types.go\n    where: $\n    transform: return $.replace(/Client(\\w+)((?:Options|Response))/g, \"$1$2\");\n\n  # update doc comments\n  - from: swagger-document\n    where: $.paths..parameters..[?(@.name=='Content-Encoding')]\n    transform: $[\"description\"] = \"If the bytes of the \\\"logs\\\" parameter are already gzipped, set ContentEncoding to \\\"gzip\\\"\"\n  - from: swagger-document\n    where: $.paths./dataCollectionRules/{ruleId}/streams/{stream}.post\n    transform: $[\"description\"] = \"Ingestion API used to directly ingest data using Data Collection Rules. Maximum size of of API call is 1 MB.\"\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Monitor Query Logs Packages in Go\nDESCRIPTION: This snippet demonstrates how to install the required packages for using Azure Monitor Query Logs in a Go project using the 'go get' command.\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/monitor/query/azlogs\ngo get github.com/Azure/azure-sdk-for-go/sdk/azidentity\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Databricks Client for China Cloud in Go\nDESCRIPTION: This code shows how to configure the Azure Databricks client factory to connect to the Azure China cloud. It uses ClientOptions to set the cloud endpoint.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armdatabricks.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Education Client Factory in Go\nDESCRIPTION: This snippet demonstrates how to create a client factory for Azure Education services. It requires a subscription ID and a credential object.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armeducation.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure Authorization Client Factory in Go\nDESCRIPTION: This code creates a client factory for Azure Authorization, which can be used to instantiate specific clients.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armauthorization.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Client Factory for Azure Service Fabric Mesh in Go\nDESCRIPTION: Code snippet showing how to create a client factory for Azure Service Fabric Mesh, which can be used to create specific clients within the module.\n\nLANGUAGE: Go\nCODE:\n```\nclientFactory, err := armservicefabricmesh.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Authentication Setup with Azure Identity\nDESCRIPTION: Creates a default Azure credential object for authentication with Azure Blockchain services.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Running Test Proxy for Recorded Tests\nDESCRIPTION: This command starts the Azure SDK test proxy for running recorded tests.\n\nLANGUAGE: bash\nCODE:\n```\ncd <root of the azopenai module>\ntest-proxy\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Sphere Client for Different Clouds in Go\nDESCRIPTION: This snippet shows how to configure the Azure Sphere client factory for different Azure clouds, such as Azure China. It uses ClientOptions to set the cloud endpoint.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armsphere.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Largeinstance Client Factory in Go\nDESCRIPTION: Initializes a client factory for Azure Largeinstance services using the subscription ID and credentials.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armlargeinstance.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Default Azure Credential in Go\nDESCRIPTION: This code snippet shows how to create a default Azure credential using the azidentity package. This credential is used for authenticating with Azure Integrationspaces.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure IoT Security Go SDK Generation\nDESCRIPTION: YAML configuration that specifies the source API specifications and settings for generating the Azure IoT Security Go SDK. References specific versions of Azure REST API specs and includes configuration for Azure ARM, licensing, and module versioning.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/f790e624d0d080b89d962a3bd19c65bc6a6b2f5e/specification/iotsecurity/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/f790e624d0d080b89d962a3bd19c65bc6a6b2f5e/specification/iotsecurity/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 0.7.0\n```\n\n----------------------------------------\n\nTITLE: Adding New ConnectedPartnerResourcesClient Functions in Go\nDESCRIPTION: New functions added for ConnectedPartnerResourcesClient including creation, listing, and factory methods.\n\nLANGUAGE: Go\nCODE:\n```\nNewConnectedPartnerResourcesClient(string, azcore.TokenCredential, *arm.ClientOptions) (*ConnectedPartnerResourcesClient, error)\n*ConnectedPartnerResourcesClient.NewListPager(string, string, *ConnectedPartnerResourcesClientListOptions) *runtime.Pager[ConnectedPartnerResourcesClientListResponse]\n*ClientFactory.NewConnectedPartnerResourcesClient() *ConnectedPartnerResourcesClient\n```\n\n----------------------------------------\n\nTITLE: Basic X509 Certificate Generation and Formatting\nDESCRIPTION: Creates a basic self-signed X509 certificate with a full subject name and exports it in multiple formats including Base64, PEM, and PKCS12.\n\nLANGUAGE: powershell\nCODE:\n```\nImport-Module -Name ./eng/common/scripts/X509Certificate2 # assumes $PWD is repo root\n\n$cert1 = New-X509Certificate2 -SubjectName 'E=opensource@microsoft.com, CN=Azure SDK, OU=Azure SDK, O=Microsoft, L=Redmond, S=WA, C=US' -ValidDays 3652\n\n$CaPublicKeyBase64 = $cert1 | Format-X509Certificate2 -Type CertificateBase64\n$CaPrivateKeyPem = $cert1 | Format-X509Certificate2 -Type Pkcs1\n$CaKeyPairPkcs12Base64 = $cert1 | Format-X509Certificate2 -Type Pkcs12Base64\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure using DefaultAzureCredential in Go\nDESCRIPTION: This snippet demonstrates how to create a credential for authenticating with Azure Windows ESU using the DefaultAzureCredential from the azidentity module.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Stream Analytics Client Factory\nDESCRIPTION: Initializes a client factory for creating Stream Analytics service clients using subscription ID and credentials.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armstreamanalytics.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Data Box Client Factory in Go\nDESCRIPTION: This code creates a client factory for Azure Data Box services. It requires a subscription ID and a credential object for authentication.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armdatabox.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Network SDK Generation\nDESCRIPTION: This YAML configuration sets up AutoRest for generating the Azure Network SDK. It specifies Azure ARM requirements, module version, name, and output folder. The configuration also sets the profile tag for hybrid cloud environments.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/53b1affe357b3bfbb53721d0a2002382a046d3b0/specification/network/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/53b1affe357b3bfbb53721d0a2002382a046d3b0/specification/network/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 0.1.0\nmodule-name: profile/p20200901/resourcemanager/network/armnetwork\nmodule: github.com/Azure/azure-sdk-for-go/$(module-name)\noutput-folder: $(go-sdk-folder)/$(module-name)\ntag: profile-hybrid-2020-09-01\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Factory with Custom Options\nDESCRIPTION: Creates a client factory with custom options for connecting to different Azure clouds\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armhybridcontainerservice.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure using Default Credentials\nDESCRIPTION: Creates a default Azure credential object for authentication with Azure services\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Key Vault Service Client\nDESCRIPTION: Creates a specific service client instance for interacting with Azure Key Vault vaults using the client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewVaultsClient()\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Newrelic using Default Azure Credential\nDESCRIPTION: This snippet demonstrates how to create a default Azure credential for authenticating with Azure Newrelic. It uses the azidentity module to provide various authentication methods.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Synapse Go SDK Generation\nDESCRIPTION: YAML configuration for AutoRest that defines the parameters for generating the Azure Synapse SDK for Go. It specifies Azure ARM mode, points to required API specifications, sets the license header type, and defines the module version.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/630ec444f8dd7c09b9cdd5fa99951f8a0d1ad41f/specification/synapse/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/630ec444f8dd7c09b9cdd5fa99951f8a0d1ad41f/specification/synapse/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 0.8.0\n```\n\n----------------------------------------\n\nTITLE: Creating Event Grid Service Client\nDESCRIPTION: Creates a specific Event Grid service client using the client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewCaCertificatesClient()\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Data Lake Analytics Client Factory in Go\nDESCRIPTION: This code creates a client factory for Azure Data Lake Analytics. It requires a subscription ID and credential. The factory can be used to create specific clients within the module.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armdatalakeanalytics.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure App Service Client for Different Clouds in Go\nDESCRIPTION: Demonstrates how to configure the client factory to connect to different Azure clouds, including sovereign clouds and Azure Stack.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armappservice.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Database for MySQL Client Factory in Go\nDESCRIPTION: This snippet demonstrates how to create a client factory for Azure Database for MySQL, which can be used to create various clients for interacting with the service.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armmysqlflexibleservers.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Renaming ProvisionedBandwidthMiBps Response Field\nDESCRIPTION: YAML directive to rename the ProvisionedBandwidthMiBps response field in the share properties.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $[\"x-ms-paths\"][\"/{shareName}?restype=share\"]\n  transform: >\n    $.get.responses[\"200\"].headers[\"x-ms-share-provisioned-bandwidth-mibps\"][\"x-ms-client-name\"] = \"ProvisionedBandwidthMiBps\"\n```\n\n----------------------------------------\n\nTITLE: Converting Path eTag to etag\nDESCRIPTION: YAML directive to rename the 'eTag' property to 'etag' in the Path definition and set the client name to 'eTag'.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.definitions.Path\n  transform: >\n    $.properties.etag = $.properties.eTag;\n    delete $.properties.eTag;\n    $.properties.etag[\"x-ms-client-name\"] = \"eTag\";\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Consumption Client Factory in Go\nDESCRIPTION: This code creates a client factory for Azure Consumption. It requires a subscription ID and credential. The factory can be used to create specific clients for different Consumption APIs.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armconsumption.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure using DefaultAzureCredential in Go\nDESCRIPTION: This code demonstrates how to create a default Azure credential for authentication. It uses the azidentity package to create a new DefaultAzureCredential, which can be used for authenticating with Azure services.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK Go Generation\nDESCRIPTION: YAML configuration for AutoRest to generate Azure SDK for Go. It specifies Azure ARM mode, required API specifications, license header, and module version for the Marketplace Ordering resource manager.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/marketplaceordering/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/marketplaceordering/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.2.0\n```\n\n----------------------------------------\n\nTITLE: Creating DNS Client Instance\nDESCRIPTION: Creates a specific DNS client instance from the client factory for accessing DNS APIs\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewDnssecConfigsClient()\n```\n\n----------------------------------------\n\nTITLE: Importing Latest Stable Container Service Module in Go\nDESCRIPTION: Example of importing the latest stable version of the Container Service module in the new Azure SDK for Go structure. This demonstrates the change from using the profiles/latest path to the new module-based import.\n\nLANGUAGE: go\nCODE:\n```\n\"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/containerservice/armcontainerservice@v2.4.0\"\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Workloads Client Factory\nDESCRIPTION: Initializes a client factory for Azure Workloads with subscription ID and credentials.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armworkloads.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Communication Services SDK\nDESCRIPTION: Command to install the Azure Communication Services module using Go modules for dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/communication/armcommunication/v2\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Voice Services SDK Generation\nDESCRIPTION: YAML configuration for AutoRest code generator that specifies Azure ARM mode, required API specifications from Azure REST API specs repository, Microsoft MIT license header requirement, and module version 1.1.0.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/aa85f59e259c4b12197b57b221067c40fa2fe3f1/specification/voiceservices/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/aa85f59e259c4b12197b57b221067c40fa2fe3f1/specification/voiceservices/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.1.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Consumption Client for Different Clouds in Go\nDESCRIPTION: This snippet shows how to configure the client factory for different Azure clouds or Azure Stack. It uses ClientOptions to set the endpoint for specific cloud environments.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armconsumption.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure using Default Credentials in Go\nDESCRIPTION: Creates a default Azure credential object for authentication with Azure services.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Creating API Definitions Client\nDESCRIPTION: Creates a specific client instance for working with API definitions using the client factory\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewAPIDefinitionsClient()\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure Credentials\nDESCRIPTION: Creates default Azure credentials for authentication with Azure Compute Schedule services using azidentity module.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Client Factory\nDESCRIPTION: Initializing the client factory for Azure Workloadssapvirtualinstance services using subscription ID and credentials\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armworkloadssapvirtualinstance.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Defining LanguageRuntime Enum in Go\nDESCRIPTION: Defines a new enum type LanguageRuntime with values for C++ and JavaScript runtimes.\n\nLANGUAGE: Go\nCODE:\n```\ntype LanguageRuntime string\n\nconst (\n    LanguageRuntimeCPP LanguageRuntime = \"CPP\"\n    LanguageRuntimeJS LanguageRuntime = \"JS\"\n)\n```\n\n----------------------------------------\n\nTITLE: Removing 'Item' Suffix in Go Source Files\nDESCRIPTION: YAML directive to remove the 'Item' suffix from 'QueueItems' in Go source files.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: source-file-go\n    where: $\n    transform: >\n      return $.\n        replace(/QueueItems/g, \"Queues\");\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Deviceregistry Asset Endpoint Profiles Client in Go\nDESCRIPTION: This code demonstrates how to create a specific client (AssetEndpointProfilesClient) using the previously created client factory. This client provides access to Asset Endpoint Profiles-related APIs.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewAssetEndpointProfilesClient()\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Storage Account using Azure CLI\nDESCRIPTION: Command to create a new Azure Storage Account using the Azure CLI with specified parameters\n\nLANGUAGE: bash\nCODE:\n```\naz storage account create --name MyStorageAccount --resource-group MyResourceGroup --location westus --sku Standard_LRS\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure SQL Database Client Factory in Go\nDESCRIPTION: This snippet shows how to create a client factory for Azure SQL Database, which can be used to create various clients in the module.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armsql.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Health Bot Client Factory\nDESCRIPTION: Initializes a client factory for creating Health Bot service clients using subscription ID and credentials.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armhealthbot.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Client Options for Different Clouds in Go\nDESCRIPTION: This snippet shows how to configure client options to connect to different Azure clouds, such as Azure China. It uses the arm.ClientOptions struct to set the cloud option.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armaddons.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Factory with Custom Options\nDESCRIPTION: Creates a client factory with custom options for connecting to different Azure clouds.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armneonpostgres.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Connecting to Azure and Creating Test Resources\nDESCRIPTION: PowerShell commands to connect to Azure and create test resources using New-TestResources.ps1 script for Key Vault testing.\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-AzAccount -Subscription 'YOUR SUBSCRIPTION ID'\neng\\common\\TestResources\\New-TestResources.ps1 keyvault\n```\n\n----------------------------------------\n\nTITLE: Creating Default Azure Credential in Go\nDESCRIPTION: Code snippet demonstrating how to create a default Azure credential for authentication.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Renaming KeyValueFields to SettingFields in Swagger\nDESCRIPTION: YAML directive to rename the 'KeyValueFields' enum to 'SettingFields' in the swagger document. This transformation affects the x-ms-enum name property.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: '$.parameters.KeyValueFields.items.x-ms-enum'\n  transform: >\n    $[\"name\"] = \"SettingFields\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Data Box Client for Different Clouds in Go\nDESCRIPTION: This snippet shows how to configure the Azure Data Box client to connect to different Azure clouds, such as Azure China. It uses ClientOptions to set the cloud endpoint.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armdatabox.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Batch Client for Sovereign Clouds\nDESCRIPTION: Creates a client factory with custom options for connecting to sovereign clouds or Azure Stack\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armbatch.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure using DefaultAzureCredential in Go\nDESCRIPTION: Creates a default Azure credential for authentication with Azure services.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK Go Generation\nDESCRIPTION: This YAML configuration sets up AutoRest for generating Azure SDK for Go code. It specifies Azure ARM support, required specification files, license header, module version, and package tag.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/56537883b7cdb95618c3d1ec1c0ee37b59d88d72/specification/informatica/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/56537883b7cdb95618c3d1ec1c0ee37b59d88d72/specification/informatica/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.0.0\ntag: package-2024-05-08\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Credentials\nDESCRIPTION: Creates default Azure credentials for authentication with Azure Storage Sync services.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Azure Resources\nDESCRIPTION: PowerShell commands to persist Azure resource environment variables using setx for future sessions.\n\nLANGUAGE: powershell\nCODE:\n```\nsetx KEYVAULT_TENANT_ID ${env:KEYVAULT_TENANT_ID}\nsetx KEYVAULT_CLIENT_ID ${env:KEYVAULT_CLIENT_ID}\nsetx KEYVAULT_CLIENT_SECRET ${env:KEYVAULT_CLIENT_SECRET}\nsetx KEYVAULT_SUBSCRIPTION_ID ${env:KEYVAULT_SUBSCRIPTION_ID}\nsetx KEYVAULT_RESOURCE_GROUP ${env:KEYVAULT_RESOURCE_GROUP}\nsetx KEYVAULT_LOCATION ${env:KEYVAULT_LOCATION}\nsetx KEYVAULT_SKU ${env:KEYVAULT_SKU}\nsetx AZURE_KEYVAULT_URL ${env:AZURE_KEYVAULT_URL}\n```\n\n----------------------------------------\n\nTITLE: Version and Import Declaration\nDESCRIPTION: Package version and import declaration for the Azure Workloads SDK\n\nLANGUAGE: go\nCODE:\n```\ngithub.com/Azure/azure-sdk-for-go/sdk/resourcemanager/workloads/armworkloads\n```\n\n----------------------------------------\n\nTITLE: Creating Azure VMware Addons Client\nDESCRIPTION: Creates a new client instance for accessing Azure VMware Solution addons functionality.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewAddonsClient()\n```\n\n----------------------------------------\n\nTITLE: Test Resources JSON Template Parameters\nDESCRIPTION: JSON template defining parameters for Azure resource creation, including certificate configuration.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#\",\n  \"contentVersion\": \"1.0.0.0\",\n  \"parameters\": {\n    \"_comment\": \"Other required parameters would go here... (this is not part of the actual test-resources.json)\",\n    \"ConfidentialLedgerPrincipalPEM\": {\n      \"type\": \"string\",\n      \"metadata\": {\n        \"description\": \"The certificate to configure as a certBasedSecurityPrincipal.\"\n      }\n    },\n    \"ConfidentialLedgerPrincipalPEMPK\": {\n      \"type\": \"string\",\n      \"metadata\": {\n        \"description\": \"The certificate to configure as a certBasedSecurityPrincipal.\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Options for Different Clouds\nDESCRIPTION: Sets up client options for connecting to different Azure clouds including sovereign clouds and Azure Stack.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armazurestackhci.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Options for Different Clouds\nDESCRIPTION: Sets up client options for connecting to different Azure clouds including sovereign clouds and Azure Stack.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armstoragecache.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Advisor Suppressions Client in Go\nDESCRIPTION: Instantiates a specific client (Suppressions) from the Azure Advisor client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewSuppressionsClient()\n```\n\n----------------------------------------\n\nTITLE: Creating Default Azure Credential in Go\nDESCRIPTION: Code snippet to create a default Azure credential using the azidentity package. This credential is used for authenticating with Azure services.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Portal Client for Different Clouds\nDESCRIPTION: Creates a client factory with custom options for connecting to different Azure cloud environments\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armportal.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Default Credential in Go\nDESCRIPTION: This code demonstrates how to create a default Azure credential using the azidentity package. It initializes a new DefaultAzureCredential object which can be used for authenticating with Azure services.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Creating a Specific Azure Dedicated HSM Client\nDESCRIPTION: This code demonstrates how to create a specific client (CloudHsmClusterBackupStatusClient) using the client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewCloudHsmClusterBackupStatusClient()\n```\n\n----------------------------------------\n\nTITLE: Creating HDInsight Containers Client Factory\nDESCRIPTION: Initializes a client factory for creating HDInsight Containers service clients using subscription ID and credentials.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armhdinsightcontainers.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: PowerShell Merge Conflict Resolution Script Usage\nDESCRIPTION: Example command sequence showing how to use the script to resolve merge conflicts in assets.json from the repository root\n\nLANGUAGE: powershell\nCODE:\n```\n# including context to get into a merge conflict\ncd \"path/to/language/repo/root\"\ngit checkout base-branch\ngit merge target-branch\n# auto resolve / merge conflicting tag values\n./eng/common/testproxy/scripts/resolve-asset-conflict/resolve-asset-conflict.ps1 sdk/storage/azure-storage-blob/assets.json\n# user pushes\ntest-proxy push -a sdk/storage/azure-storage-blob/assets.json\n```\n\n----------------------------------------\n\nTITLE: Documenting Release History in Markdown\nDESCRIPTION: This snippet shows the structure of documenting release history using Markdown. It includes version numbers, dates, and categorized changes such as features added, breaking changes, and bug fixes.\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 2.1.0 (2023-11-24)\n### Features Added\n\n- Support for test fakes and OpenTelemetry trace spans.\n\n\n## 2.0.0 (2023-05-26)\n### Breaking Changes\n\n- Field `AccountName` of struct `DiskGranularCopyLogDetails` has been removed\n\n### Features Added\n\n- New enum type `HardwareEncryption` with values `HardwareEncryptionDisabled`, `HardwareEncryptionEnabled`\n- New enum type `ReverseShippingDetailsEditStatus` with values `ReverseShippingDetailsEditStatusDisabled`, `ReverseShippingDetailsEditStatusEnabled`, `ReverseShippingDetailsEditStatusNotSupported`\n- New enum type `ReverseTransportPreferenceEditStatus` with values `ReverseTransportPreferenceEditStatusDisabled`, `ReverseTransportPreferenceEditStatusEnabled`, `ReverseTransportPreferenceEditStatusNotSupported`\n- New struct `ContactInfo`\n- New struct `ReverseShippingDetails`\n- New field `ReverseShippingDetails` in struct `CommonJobDetails`\n- New field `Actions`, `Error` in struct `CopyProgress`\n- New field `Actions`, `Error` in struct `CustomerDiskCopyProgress`\n- New field `ReverseShippingDetails` in struct `CustomerDiskJobDetails`\n- New field `Actions`, `Error` in struct `DiskCopyProgress`\n- New field `AccountID` in struct `DiskGranularCopyLogDetails`\n- New field `Actions`, `Error` in struct `DiskGranularCopyProgress`\n- New field `GranularCopyLogDetails`, `ReverseShippingDetails` in struct `DiskJobDetails`\n- New field `HardwareEncryption` in struct `EncryptionPreferences`\n- New field `Actions`, `Error` in struct `GranularCopyProgress`\n- New field `ReverseShippingDetails` in struct `HeavyJobDetails`\n- New field `ReverseShippingDetails` in struct `JobDetails`\n- New field `ReverseShippingDetailsUpdate`, `ReverseTransportPreferenceUpdate` in struct `JobProperties`\n- New field `SerialNumberCustomerResolutionMap` in struct `MitigateJobRequest`\n- New field `ReverseTransportPreferences` in struct `Preferences`\n- New field `CountriesWithinCommerceBoundary` in struct `SKUProperties`\n- New field `SkipAddressValidation`, `TaxIdentificationNumber` in struct `ShippingAddress`\n- New field `IsUpdated` in struct `TransportPreferences`\n- New field `Preferences`, `ReverseShippingDetails` in struct `UpdateJobDetails`\n\n\n## 1.1.1 (2023-04-14)\n### Bug Fixes\n\n- Fix serialization bug of empty value of `any` type.\n\n\n## 1.1.0 (2023-03-28)\n### Features Added\n\n- New struct `ClientFactory` which is a client factory used to create any client in this module\n\n\n## 1.0.0 (2022-05-18)\n\nThe package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/databox/armdatabox` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html) since version 1.0.0, which contains breaking changes.\n\nTo migrate the existing applications to the latest version, please refer to [Migration Guide](https://aka.ms/azsdk/go/mgmt/migration).\n\nTo learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).\n```\n\n----------------------------------------\n\nTITLE: Using azcore.ETag for ETag Fields\nDESCRIPTION: YAML directive to replace string ETag fields with azcore.ETag in various files.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: \n    - zz_options.go\n    - zz_models.go       \n  where: $\n  transform: >\n    return $.\n      replace(/import \"time\"/, `import (\\n\\t\"time\"\\n\\t\"github.com/Azure/azure-sdk-for-go/sdk/azcore\"\\n)`).\n      replace(/Etag\\s+\\*string/g, `ETag *azcore.ETag`).\n      replace(/IfMatch\\s+\\*string/g, `IfMatch *azcore.ETag`).\n      replace(/IfNoneMatch\\s+\\*string/g, `IfNoneMatch *azcore.ETag`).\n      replace(/SourceIfMatch\\s+\\*string/g, `SourceIfMatch *azcore.ETag`).\n      replace(/SourceIfNoneMatch\\s+\\*string/g, `SourceIfNoneMatch *azcore.ETag`);\n\n- from: zz_responses.go\n  where: $\n  transform: >\n    return $.\n      replace(/\"time\"/, `\"time\"\\n\\t\"github.com/Azure/azure-sdk-for-go/sdk/azcore\"`).\n      replace(/ETag\\s+\\*string/g, `ETag *azcore.ETag`);\n\n- from:\n  - zz_filesystem_client.go\n  - zz_path_client.go\n  where: $\n  transform: >\n    return $.\n      replace(/\"github\\.com\\/Azure\\/azure\\-sdk\\-for\\-go\\/sdk\\/azcore\\/policy\"/, `\"github.com/Azure/azure-sdk-for-go/sdk/azcore\"\\n\\t\"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy\"`).\n      replace(/result\\.ETag\\s+=\\s+&val/g, `result.ETag = (*azcore.ETag)(&val)`).\n      replace(/\\*modifiedAccessConditions.IfMatch/g, `string(*modifiedAccessConditions.IfMatch)`).\n      replace(/\\*modifiedAccessConditions.IfNoneMatch/g, `string(*modifiedAccessConditions.IfNoneMatch)`).\n      replace(/\\*sourceModifiedAccessConditions.SourceIfMatch/g, `string(*sourceModifiedAccessConditions.SourceIfMatch)`).\n      replace(/\\*sourceModifiedAccessConditions.SourceIfNoneMatch/g, `string(*sourceModifiedAccessConditions.SourceIfNoneMatch)`);\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Edge Order Client Factory in Go\nDESCRIPTION: This code creates a client factory for Azure Edge Order services. It requires a subscription ID and a credential object. The factory can be used to create specific clients for different Edge Order operations.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armedgeorder.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure VoiceServices Client Options\nDESCRIPTION: Sets up client options for connecting to different Azure clouds including sovereign clouds and Azure Stack.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armvoiceservices.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Creating an API Portal Custom Domains Client\nDESCRIPTION: Creates a specific client instance for managing API portal custom domains using the client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewAPIPortalCustomDomainsClient()\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Digital Twins SDK Generation in Go\nDESCRIPTION: This YAML configuration specifies the settings for AutoRest to generate the Azure Digital Twins client library for Go. It includes references to the API specifications, sets the Azure ARM flag, specifies the license header, and defines the module version.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/a60468a0c5e2beb054680ae488fb9f92699f0a0d/specification/digitaltwins/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/a60468a0c5e2beb054680ae488fb9f92699f0a0d/specification/digitaltwins/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.2.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Security Client for Sovereign Clouds in Go\nDESCRIPTION: This snippet shows how to configure the client factory to connect to sovereign clouds or Azure Stack. It uses ClientOptions to set the cloud endpoint.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armsecurity.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Client for Sovereign Clouds\nDESCRIPTION: Sets up a client factory with custom options for connecting to specific Azure clouds like Azure China\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armsubscription.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Visual Studio Client Factory in Go\nDESCRIPTION: This snippet demonstrates how to create a client factory for Azure Visual Studio services. It uses the NewClientFactory function from the armvisualstudio package, passing in the subscription ID and credentials to create a factory that can be used to instantiate various client types.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armvisualstudio.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Management Groups Module\nDESCRIPTION: Command to install the Azure Management Groups Go module using go get\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/managementgroups/armmanagementgroups\n```\n\n----------------------------------------\n\nTITLE: Installing Azure KeyVault Admin Packages\nDESCRIPTION: Commands to install the required Azure KeyVault Administration and Azure Identity packages using go get.\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/security/keyvault/azadmin\ngo get github.com/Azure/azure-sdk-for-go/sdk/azidentity\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure using Default Azure Credential in Go\nDESCRIPTION: This code snippet demonstrates how to create a default Azure credential for authentication with Azure services.\n\nLANGUAGE: Go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: New Client Factory Functions\nDESCRIPTION: Introduction of new client factory functions for AlertRuleRecommendations, PrometheusRuleGroups, and TenantActivityLogAlerts in version 0.10.0\n\nLANGUAGE: go\nCODE:\n```\nfunc NewAlertRuleRecommendationsClient(string, azcore.TokenCredential, *arm.ClientOptions) (*AlertRuleRecommendationsClient, error)\nfunc NewPrometheusRuleGroupsClient(string, azcore.TokenCredential, *arm.ClientOptions) (*PrometheusRuleGroupsClient, error)\nfunc NewTenantActivityLogAlertsClient(azcore.TokenCredential, *arm.ClientOptions) (*TenantActivityLogAlertsClient, error)\n```\n\n----------------------------------------\n\nTITLE: Adding New Enum Values in Go\nDESCRIPTION: Adds new values to existing enum types like PublicNetworkAccess and Status. This expands the possible options for certain API parameters.\n\nLANGUAGE: Go\nCODE:\n```\nNew value `PublicNetworkAccessSecuredByPerimeter` added to enum type `PublicNetworkAccess`\nNew value `StatusCanceled`, `StatusFailed`, `StatusSucceeded`, `StatusUpdating` added to enum type `Status`\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Options for Different Clouds\nDESCRIPTION: Sets up client options for connecting to different Azure clouds including sovereign clouds and Azure Stack.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armstoragesync.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Creating an Account Quotas Client for Azure Playwrighttesting in Go\nDESCRIPTION: This snippet shows how to create a specific client (AccountQuotasClient) using the client factory for Azure Playwrighttesting.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewAccountQuotasClient()\n```\n\n----------------------------------------\n\nTITLE: Creating Default Azure Credential in Go\nDESCRIPTION: Code snippet to create a default Azure credential for authentication using the azidentity package.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Service Client\nDESCRIPTION: Creating a specific service client instance from the client factory to access API functionality\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewSAPApplicationServerInstancesClient()\n```\n\n----------------------------------------\n\nTITLE: Defining Module Version Constant in Go\nDESCRIPTION: Demonstrates how to define the required moduleVersion constant in a Go file. This constant is used by the release pipeline and must be present in a file named version.go or constants.go.\n\nLANGUAGE: Go\nCODE:\n```\nconst moduleVersion = \"v1.2.3\"\n```\n\nLANGUAGE: Go\nCODE:\n```\nconst (\n\tmoduleVersion = \"v1.2.3\"\n\t// other constants\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Application Groups by Namespace in Go\nDESCRIPTION: This code snippet demonstrates how to list Application Groups by Namespace using the ApplicationGroupClient in the Azure SDK for Go.\n\nLANGUAGE: go\nCODE:\n```\n*ApplicationGroupClient.NewListByNamespacePager(string, string, *ApplicationGroupClientListByNamespaceOptions) *runtime.Pager[ApplicationGroupClientListByNamespaceResponse]\n```\n\n----------------------------------------\n\nTITLE: Documenting Release History in Markdown\nDESCRIPTION: This snippet shows the structure of documenting release history using Markdown. It includes version numbers, dates, and categorized changes for each release.\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.2.0 (2023-11-24)\n### Features Added\n\n- Support for test fakes and OpenTelemetry trace spans.\n\n\n## 1.1.0 (2023-03-27)\n### Features Added\n\n- New struct `ClientFactory` which is a client factory used to create any client in this module\n\n\n## 1.0.0 (2022-05-17)\n\nThe package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/advisor/armadvisor` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html) since version 1.0.0, which contains breaking changes.\n\nTo migrate the existing applications to the latest version, please refer to [Migration Guide](https://aka.ms/azsdk/go/mgmt/migration).\n\nTo learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).\n```\n\n----------------------------------------\n\nTITLE: Modifying ServiceClient ListFileSystems Methods\nDESCRIPTION: YAML directive to remove pager methods and export various generated methods for ListFileSystems in the service client.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: zz_service_client.go\n    where: $\n    transform: >\n      return $.\n        replace(/func \\(client \\*ServiceClient\\) NewListFileSystemsPager\\(.+\\/\\/ listFileSystemsCreateRequest creates the ListFileSystems request/s, `//\\n// ListFileSystemsCreateRequest creates the ListFileSystems request`).\n        replace(/\\(client \\*ServiceClient\\) listFileSystemsCreateRequest\\(/, `(client *ServiceClient) ListFileSystemsCreateRequest(`).\n        replace(/\\(client \\*ServiceClient\\) listFileSystemsHandleResponse\\(/, `(client *ServiceClient) ListFileSystemsHandleResponse(`);\n```\n\n----------------------------------------\n\nTITLE: Upgrading SDK Major Version\nDESCRIPTION: Commands for upgrading to the latest major version of the Azure SDK using gomajor tool.\n\nLANGUAGE: sh\nCODE:\n```\ngo install github.com/icholy/gomajor@latest\ngomajor get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute@latest\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Elastic Traffic Filters Client\nDESCRIPTION: Creates a specific client instance for managing traffic filters using the client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewAllTrafficFiltersClient()\n```\n\n----------------------------------------\n\nTITLE: Update Specific Resource Group Example\nDESCRIPTION: Example showing how to update a specific resource group by name and subscription ID.\n\nLANGUAGE: powershell\nCODE:\n```\nUpdate-TestResources.ps1 -ResourceGroupName rg-userkeyvault -Subscription fa9c6912-f641-4226-806c-5139584b89ca\n```\n\n----------------------------------------\n\nTITLE: Displaying Release Notes in Markdown\nDESCRIPTION: Markdown formatted release history showing version changes and feature additions for the Azure SDK for Go education package. Documents changes from version 0.1.0 to 0.4.0 including the introduction of test fakes, OpenTelemetry support, ClientFactory, and new constants.\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 0.4.0 (2023-11-24)\n### Features Added\n\n- Support for test fakes and OpenTelemetry trace spans.\n\n\n## 0.3.0 (2023-03-28)\n### Features Added\n\n- New struct `ClientFactory` which is a client factory used to create any client in this module\n\n\n## 0.2.0 (2022-07-04)\n### Features Added\n\n- New const `LabStatusPending`\n\n\n## 0.1.0 (2022-05-24)\n\nThe package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/education/armeducation` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html) since version 0.1.0, which contains breaking changes.\n\nTo migrate the existing applications to the latest version, please refer to [Migration Guide](https://aka.ms/azsdk/go/mgmt/migration).\n\nTo learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).\n```\n\n----------------------------------------\n\nTITLE: Running SDK Generator in Bash\nDESCRIPTION: Bash command for running the SDK generator tool. It takes the input JSON file and produces an output JSON file with generation results.\n\nLANGUAGE: sh\nCODE:\n```\ngenerator automation-v2 \"PATH_TO_generatedInput.json\" generateOutput.json\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Data Catalog Client Factory in Go\nDESCRIPTION: This code creates a client factory for Azure Data Catalog. It requires a subscription ID and credentials. The factory can be used to create various clients within the module.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armdatacatalog.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Client Options\nDESCRIPTION: Demonstrates how to configure client options for different Azure clouds including sovereign clouds and Azure Stack\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armastro.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Creating a Specific Azure App Service Client in Go\nDESCRIPTION: Shows how to create a specific client (in this case, CertificateOrdersClient) using the previously created client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewCertificateOrdersClient()\n```\n\n----------------------------------------\n\nTITLE: Go SDK DNS Record Type Enums\nDESCRIPTION: New enum values added to RecordType including RecordTypeDS, RecordTypeNAPTR, and RecordTypeTLSA for DNS record management.\n\nLANGUAGE: go\nCODE:\n```\ntype RecordType string\n\nconst (\n    RecordTypeDS RecordType = \"DS\"\n    RecordTypeNAPTR RecordType = \"NAPTR\"\n    RecordTypeTLSA RecordType = \"TLSA\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Options for Different Clouds\nDESCRIPTION: Sets up client options for connecting to different Azure clouds including sovereign clouds and Azure Stack.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclient, err := armcosmosforpostgresql.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: New Enum Type: AddonAutoscaling\nDESCRIPTION: Introduces a new enum type 'AddonAutoscaling' with two values.\n\nLANGUAGE: Go\nCODE:\n```\nNew enum type `AddonAutoscaling` with values `AddonAutoscalingDisabled`, `AddonAutoscalingEnabled`\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Automation Module in Go\nDESCRIPTION: This command installs the Azure Automation module using Go's package manager. It retrieves the module from the specified GitHub repository.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/automation/armautomation\n```\n\n----------------------------------------\n\nTITLE: Creating Event Data Batch with Partition Key in Go\nDESCRIPTION: Example of creating an EventDataBatch with a specified PartitionKey using the ProducerClient in the Azure Event Hubs Go SDK.\n\nLANGUAGE: Go\nCODE:\n```\nbatch, err := producerClient.NewEventDataBatch(context.TODO(), &azeventhubs.NewEventDataBatchOptions{\n  PartitionKey: to.Ptr(\"partition key\"),\n})\n```\n\n----------------------------------------\n\nTITLE: Creating or Updating AccessConnector in Go\nDESCRIPTION: Initiates an asynchronous operation to create or update an AccessConnector resource. Returns a Poller for tracking the operation progress.\n\nLANGUAGE: go\nCODE:\n```\n*AccessConnectorsClient.BeginCreateOrUpdate(context.Context, string, string, AccessConnector, *AccessConnectorsClientBeginCreateOrUpdateOptions) (*runtime.Poller[AccessConnectorsClientCreateOrUpdateResponse], error)\n```\n\n----------------------------------------\n\nTITLE: Creating Client Factory\nDESCRIPTION: Initializes a client factory for creating Azure Compute Schedule service clients with basic configuration.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armcomputeschedule.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Release History Documentation in Markdown\nDESCRIPTION: Chronological changelog documenting version releases from 2.0.0-beta.4 down to 1.0.0. Details features added, bug fixes, and major version changes including migration information.\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 2.0.0-beta.4 (2024-06-14)\n### Features Added\n\n- Support for test fakes and OpenTelemetry trace spans.\n\n\n## 1.2.0 (2023-11-24)\n### Features Added\n\n- Support for test fakes and OpenTelemetry trace spans.\n\n\n## 1.1.1 (2023-04-14)\n### Bug Fixes\n\n- Fix serialization bug of empty value of `any` type.\n\n\n## 1.1.0 (2023-04-07)\n### Features Added\n\n- New struct `ClientFactory` which is a client factory used to create any client in this module\n\n\n## 1.0.0 (2022-05-17)\n\nThe package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/securityinsights/armsecurityinsights` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html) since version 1.0.0, which contains breaking changes.\n\nTo migrate the existing applications to the latest version, please refer to [Migration Guide](https://aka.ms/azsdk/go/mgmt/migration).\n\nTo learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).\n```\n\n----------------------------------------\n\nTITLE: Handling SDK Request Errors in Azure Go SDK\nDESCRIPTION: Shows how to handle errors from SDK requests by converting them to the azcore.ResponseError interface, which allows access to the raw HTTP response for more detailed error information.\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO() // your context\nresp, err := resourceGroupsClient.CreateOrUpdate(ctx, resourceGroupName, resourceGroupParameters, nil)\nif err != nil {\n    var respErr *azcore.ResponseError\n    if errors.As(err, &respErr) {\n        log.Fatalf(\"Status code: %d\", respErr.RawResponse.StatusCode)\n    } else {\n        log.Fatalf(\"Other error: %+v\", err)\n    }\n}\n// dealing with `resp`\n```\n\n----------------------------------------\n\nTITLE: Creating Azure RedHat Open Shift Machine Pools Client in Go\nDESCRIPTION: Initialize a specific client for managing machine pools using the client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewMachinePoolsClient()\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Graphservices Module in Go\nDESCRIPTION: Command to install the Azure Graphservices module using Go's package manager.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/graphservices/armgraphservices\n```\n\n----------------------------------------\n\nTITLE: Creating Lab Services Client Factory\nDESCRIPTION: Initializes a client factory for Azure Lab Services with subscription ID and credentials.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armlabservices.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Default Credential in Go\nDESCRIPTION: This snippet demonstrates how to create a default Azure credential using the azidentity package. This credential is used for authenticating with Azure Attestation.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Windows ESU Module in Go\nDESCRIPTION: This command installs the Azure Windows ESU module using Go's package manager. It requires Go modules for versioning and dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/windowsesu/armwindowsesu\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Database for PostgreSQL Servers Client in Go\nDESCRIPTION: Instantiates a new Servers client using the previously created client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewServersClient()\n```\n\n----------------------------------------\n\nTITLE: Pre-Resource Creation Certificate Generation\nDESCRIPTION: PowerShell script for generating X509 certificates before creating Azure resources. Used in test-resources-pre.ps1.\n\nLANGUAGE: powershell\nCODE:\n```\nImport-Module -Name ./eng/common/scripts/X509Certificate2\n$cert = New-X509Certificate2 -SubjectName 'E=opensource@microsoft.com, CN=Azure SDK, OU=Azure SDK, O=Microsoft, L=Frisco, S=TX, C=US' -ValidDays 3652\n# Create new entries in $templateFileParameters\n$templateFileParameters['ConfidentialLedgerPrincipalPEM'] = Format-X509Certificate2 -Certificate $cert\n$templateFileParameters['ConfidentialLedgerPrincipalPEMPK'] = Format-X509Certificate2 -Type Pkcs8 -Certificate $cert\n```\n\n----------------------------------------\n\nTITLE: Removing Test Resources with Provisioner in PowerShell\nDESCRIPTION: This snippet demonstrates using the Remove-TestResources.ps1 script with a provisioner application. It requires a base name, tenant ID, and provisioner application ID, along with other optional parameters for removing test resources from Azure.\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-TestResources.ps1 -BaseName <String> -TenantId <String> [-SubscriptionId <String>]\n -ProvisionerApplicationId <String> [-ProvisionerApplicationSecret <String>] [[-ServiceDirectory] <String>]\n [-Environment <String>] [-ResourceType <String>] [-ServicePrincipalAuth] [-Force]\n [-RemoveTestResourcesRemainingArguments <Object>] [-ProgressAction <ActionPreference>] [-WhatIf] [-Confirm]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Hybrid AKS Go SDK Generation\nDESCRIPTION: Defines AutoRest configuration parameters for generating Azure SDK for Go from Hybrid AKS REST API specifications. Specifies the API version, source specifications, licensing, and module versioning requirements.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/41e4538ed7bb3ceac3c1322c9455a0812ed110ac/specification/hybridaks/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/41e4538ed7bb3ceac3c1322c9455a0812ed110ac/specification/hybridaks/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.0.0\ntag: package-2024-01\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure Private DNS Client Factory in Go\nDESCRIPTION: This code creates a client factory for Azure Private DNS operations, using the subscription ID and credentials.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armprivatedns.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Application Insight API Keys Client in Go\nDESCRIPTION: This snippet shows how to create a specific client for API Keys operations using the client factory. It demonstrates the usage of the NewAPIKeysClient method.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewAPIKeysClient()\n```\n\n----------------------------------------\n\nTITLE: Release Notes - Version 1.0.0\nDESCRIPTION: Breaking changes and new features introduced in version 1.0.0. Changes include type modifications and new fields added to various structs.\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.0 (2025-01-24)\n### Breaking Changes\n\n- Type of `OperationErrorDetails.ErrorDetails` has been changed from `*time.Time` to `*string`\n\n### Features Added\n\n- New field `AzureOperationName`, `Timestamp` in struct `OperationErrorDetails`\n- New field `Timezone` in struct `ResourceOperationDetails`\n- New field `Deadline`, `Timezone` in struct `Schedule`\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Marketplace Private Store Client in Go\nDESCRIPTION: This code demonstrates how to create a specific client (PrivateStoreClient) using the previously created client factory. This client can be used to interact with private store functionalities in Azure Marketplace.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewPrivateStoreClient()\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Storage Accounts Client in Go\nDESCRIPTION: This code demonstrates how to create a specific client (in this case, an Accounts client) using the client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewAccountsClient()\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Credentials\nDESCRIPTION: Creates default Azure credentials for authentication with Azure services.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Mixed Reality Module for Go\nDESCRIPTION: This command installs the Azure Mixed Reality module using Go's package manager. It requires Go modules for versioning and dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/mixedreality/armmixedreality\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Options for Different Clouds\nDESCRIPTION: Sets up client options for connecting to different Azure cloud environments including sovereign clouds.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armorbital.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Confluent in Go\nDESCRIPTION: Example of creating a default Azure credential for authentication with Azure Confluent.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Authentication in Previous Version (services/**/mgmt/**)\nDESCRIPTION: Example of authentication using autorest.Authorizer in the deprecated version of Azure SDK for Go.\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/Azure/go-autorest/autorest/adal\"\nimport \"github.com/Azure/azure-sdk-for-go/services/resources/mgmt/2020-10-01/resources\"\n```\n\nLANGUAGE: go\nCODE:\n```\nauthorizer, err := adal.NewServicePrincipalToken(oAuthToken, \"<ClientId>\", \"<ClientSecret>\", endpoint)\nclient := resources.NewGroupsClient(\"<SubscriptionId>\")\nclient.Authorizer = authorizer\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Standbypool Client in Go\nDESCRIPTION: This code demonstrates how to create a specific client using the client factory. It creates a new StandbyContainerGroupPoolRuntimeViewsClient, which provides access to related APIs.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewStandbyContainerGroupPoolRuntimeViewsClient()\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Networkanalytics Module in Go\nDESCRIPTION: Command to install the Azure Networkanalytics module using Go's package manager. This installs the module and its dependencies.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/networkanalytics/armnetworkanalytics\n```\n\n----------------------------------------\n\nTITLE: Documenting Release History in Markdown\nDESCRIPTION: This snippet shows how release history is documented using Markdown formatting. It includes version numbers, dates, and categorized changes such as features added, breaking changes, and bug fixes.\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 2.1.0 (2024-04-26)\n### Features Added\n\n- New enum type `SmartDataActions` with values `SmartDataActionsRead`\n- New struct `SmartIdentityProviderApplication`\n- New struct `SmartIdentityProviderConfiguration`\n- New struct `StorageConfiguration`\n- New field `EnableDataPartitions`, `StorageConfiguration` in struct `DicomServiceProperties`\n- New field `SmartIdentityProviders` in struct `FhirServiceAuthenticationConfiguration`\n\n\n## 2.0.0 (2023-12-22)\n### Breaking Changes\n\n- Struct `FhirServiceAccessPolicyEntry` has been removed\n- Field `AccessPolicies` of struct `FhirServiceProperties` has been removed\n\n### Features Added\n\n- New struct `CorsConfiguration`\n- New struct `Encryption`\n- New struct `EncryptionCustomerManagedKeyEncryption`\n- New struct `FhirServiceImportConfiguration`\n- New struct `ImplementationGuidesConfiguration`\n- New struct `ServiceImportConfigurationInfo`\n- New field `CorsConfiguration`, `Encryption`, `EventState` in struct `DicomServiceProperties`\n- New field `Encryption`, `ImplementationGuidesConfiguration`, `ImportConfiguration` in struct `FhirServiceProperties`\n- New field `EnableRegionalMdmAccount`, `IsInternal`, `MetricFilterPattern`, `ResourceIDDimensionNameOverride`, `SourceMdmAccount` in struct `MetricSpecification`\n- New field `CrossTenantCmkApplicationID` in struct `ServiceCosmosDbConfigurationInfo`\n- New field `ImportConfiguration` in struct `ServicesProperties`\n\n\n## 1.2.0 (2023-11-24)\n### Features Added\n\n- Support for test fakes and OpenTelemetry trace spans.\n\n\n## 1.1.1 (2023-04-14)\n### Bug Fixes\n\n- Fix serialization bug of empty value of `any` type.\n\n\n## 1.1.0 (2023-04-06)\n### Features Added\n\n- New struct `ClientFactory` which is a client factory used to create any client in this module\n\n\n## 1.0.0 (2022-05-18)\n\nThe package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/healthcareapis/armhealthcareapis` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html) since version 1.0.0, which contains breaking changes.\n\nTo migrate the existing applications to the latest version, please refer to [Migration Guide](https://aka.ms/azsdk/go/mgmt/migration).\n\nTo learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK Go Generation\nDESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure SDK for Go. It specifies the Azure ARM mode, required API specifications, license header, module version, and API version tag for the Network Analytics resource manager.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/21a8d55d74e4425e96d76e5835f52cfc9eb95a22/specification/networkanalytics/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/21a8d55d74e4425e96d76e5835f52cfc9eb95a22/specification/networkanalytics/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.0.0\ntag: package-2023-11-15\n```\n\n----------------------------------------\n\nTITLE: Custom HTTP Client in Previous Version (services/**/mgmt/**)\nDESCRIPTION: Example of using a custom HTTP client in the deprecated version of Azure SDK for Go.\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/Azure/azure-sdk-for-go/services/resources/mgmt/2020-10-01/resources\"\n```\n\nLANGUAGE: go\nCODE:\n```\nhttpClient := NewYourOwnHTTPClient{}\nclient := resources.NewGroupsClient(\"<SubscriptionId>\")\nclient.Sender = &httpClient\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Batch Client Factory\nDESCRIPTION: Initializes a client factory for creating Azure Batch service clients with default configuration\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armbatch.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Confluent Module in Go\nDESCRIPTION: Command to install the Azure Confluent module using Go modules.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/confluent/armconfluent\n```\n\n----------------------------------------\n\nTITLE: Making LeaseDuration Parameter Required\nDESCRIPTION: YAML directive to change the 'Duration' parameter in leases to be required.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.parameters.LeaseDuration\n  transform: >\n    $.required = true;\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Astro SDK Module\nDESCRIPTION: Command to install the Azure Astro module using Go modules for dependency management\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/astro/armastro\n```\n\n----------------------------------------\n\nTITLE: Creating Resource Graph Client\nDESCRIPTION: Creates a new Resource Graph client instance from the client factory\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewClient()\n```\n\n----------------------------------------\n\nTITLE: Adding Internal Import to Client Files\nDESCRIPTION: This YAML directive adds an internal import statement to various client-related Go files using a regular expression replacement.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from:\n      - \"*_client.go\"\n      - \"client.go\"\n      - \"client_factory.go\"\n    where: $\n    transform: return $.replace(/import \\(\\n/, \"import (\\n\\\"github.com/Azure/azure-sdk-for-go/profile/p20200901/internal\\\"\\n\");\n```\n\n----------------------------------------\n\nTITLE: Importing Client Factory for Azure Hybrid Connectivity\nDESCRIPTION: Client factory pattern used to instantiate various clients for Azure Hybrid Connectivity service operations. New in version 0.6.0.\n\nLANGUAGE: go\nCODE:\n```\ntype ClientFactory struct {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Client Options\nDESCRIPTION: Sets up client options for connecting to different Azure clouds including sovereign clouds and Azure Stack\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armselfhelp.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Removing Module Constants Directive\nDESCRIPTION: AutoRest directive to remove moduleName and moduleVersion constants from the constants.go file.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: constants.go\n    where: $\n    transform: return $.replace(/const \\(\\n\\s+moduleName.+\\n\\s+moduleVersion.+\\n\\)\\n/, \"\");\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Cosmos DB Go SDK Generation\nDESCRIPTION: YAML configuration for AutoRest to generate Azure Cosmos DB SDK code. Specifies Azure ARM mode, required API specifications, license header, module version 4.0.0-beta.2, and targets the preview-2024-12-01 API version.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/069a65e8a6d1a6c0c58d9a9d97610b7103b6e8a5/specification/cosmos-db/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/069a65e8a6d1a6c0c58d9a9d97610b7103b6e8a5/specification/cosmos-db/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 4.0.0-beta.2\ntag: package-preview-2024-12-01\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure using Default Azure Credential in Go\nDESCRIPTION: This snippet demonstrates how to create a default Azure credential for authentication with Azure services.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Options for Different Clouds\nDESCRIPTION: Sets up client options for connecting to different Azure clouds including sovereign clouds and Azure Stack\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armdesktopvirtualization.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Active Directory Client Factory in Go\nDESCRIPTION: Demonstrates how to create a client factory for Azure Active Directory operations using a subscription ID and credentials.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armaad.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Version History Documentation in Markdown\nDESCRIPTION: Markdown formatted changelog detailing version updates, breaking changes, feature additions, and bug fixes across multiple releases of the Azure Recovery Services SDK for Go.\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\\n\\n## 2.0.0 (2024-05-24)\\n### Breaking Changes\\n\\n- Operation `*VaultsClient.Delete` has been changed to LRO, use `*VaultsClient.BeginDelete` instead.\\n\\n### Features Added\\n\\n- New value `StandardTierStorageRedundancyInvalid` added to enum type `StandardTierStorageRedundancy`\\n- New enum type `BCDRSecurityLevel` with values `BCDRSecurityLevelExcellent`, `BCDRSecurityLevelFair`, `BCDRSecurityLevelGood`, `BCDRSecurityLevelPoor`\\n- New enum type `EnhancedSecurityState` with values `EnhancedSecurityStateAlwaysON`, `EnhancedSecurityStateDisabled`, `EnhancedSecurityStateEnabled`, `EnhancedSecurityStateInvalid`\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Education Module in Go\nDESCRIPTION: This snippet demonstrates how to install the Azure Education module using the go get command. It requires Go modules for dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/education/armeducation\n```\n\n----------------------------------------\n\nTITLE: Adding New Structs in Go for Azure SDK\nDESCRIPTION: This snippet introduces new structs for authentication configuration, promotion requests, and role properties in the Azure SDK for Go.\n\nLANGUAGE: markdown\nCODE:\n```\n- New struct `AuthConfig`\n- New struct `PromoteRequest`\n- New struct `RolePropertiesExternalIdentity`\n```\n\n----------------------------------------\n\nTITLE: Upgrading Module Version\nDESCRIPTION: Commands for upgrading to the latest major version of the SDK module using gomajor.\n\nLANGUAGE: sh\nCODE:\n```\ngo install github.com/icholy/gomajor@latest\ngomajor get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute@latest\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Stream Analytics Go Module\nDESCRIPTION: Command to install the Azure Stream Analytics module using Go modules for dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/streamanalytics/armstreamanalytics/v2\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Providers Client Factory\nDESCRIPTION: Initializes a client factory for Azure Custom Providers with basic configuration\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armcustomproviders.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Defining New Struct Fields in Go\nDESCRIPTION: This snippet demonstrates the addition of new fields to existing structs in version 0.4.0. It includes fields for artifact type, certificate, and timestamps in the SSHKey struct.\n\nLANGUAGE: go\nCODE:\n```\nArtifactType in struct AppliancesClientListKeysOptions\nCertificate in struct SSHKey\nCreationTimeStamp in struct SSHKey\nExpirationTimeStamp in struct SSHKey\n```\n\n----------------------------------------\n\nTITLE: Upgrading Azure SDK for Go Major Version\nDESCRIPTION: These commands show how to upgrade to the latest major version of an Azure SDK module using gomajor. This example uses the compute module.\n\nLANGUAGE: sh\nCODE:\n```\ngo install github.com/icholy/gomajor@latest\ngomajor get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute@latest\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Largeinstance Client in Go\nDESCRIPTION: Instantiates a new Azure Largeinstance client using the previously created client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewAzureLargeInstanceClient()\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Container Registry Module in Go\nDESCRIPTION: This snippet shows how to install the Azure Container Registry module using Go modules. It uses the go get command to fetch the package from GitHub.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/containerregistry/armcontainerregistry\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Credentials\nDESCRIPTION: Creates default Azure credentials for authentication using the azidentity package\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Credentials\nDESCRIPTION: Create default Azure credentials for authentication with the Storage Import/Export service.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Initial Release Version 0.1.0\nDESCRIPTION: Initial release of the Azure SDK for Go DevOps Infrastructure package implementing next generation design principles.\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.1.0 (2024-05-24)\n### Other Changes\n\nThe package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/devopsinfrastructure/armdevopsinfrastructure` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html).\n\nTo learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Analysis Services Server Client in Go\nDESCRIPTION: Instantiates a new servers client using the client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewServersClient()\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest Settings for Azure SDK Generation\nDESCRIPTION: Core AutoRest configuration for generating the Azure SDK Go module. Specifies the source API specs, module details, and output settings for the resource manager subscriptions package.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/53b1affe357b3bfbb53721d0a2002382a046d3b0/specification/resources/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/53b1affe357b3bfbb53721d0a2002382a046d3b0/specification/resources/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 0.1.0\nmodule-name: profile/p20200901/resourcemanager/resources/armsubscriptions\nmodule: github.com/Azure/azure-sdk-for-go/$(module-name)\noutput-folder: $(go-sdk-folder)/$(module-name)\ntag: package-subscriptions-2016-06\nmodelerfour:\n  lenient-model-deduplication: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Client Options for Different Clouds in Go\nDESCRIPTION: This snippet shows how to configure client options for connecting to different Azure clouds. It sets up options to connect to Azure China cloud, which can be used when creating the client factory.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armrecoveryservices.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest Generator for Azure Web Services SDK\nDESCRIPTION: YAML configuration that defines parameters for generating Go SDK code from Azure REST API specifications. Specifies the source API specs, license header, module version 4.1.0, and targets the 2024-04 API package version.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/b5d78da207e9c5d8f82e95224039867271f47cdf/specification/web/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/b5d78da207e9c5d8f82e95224039867271f47cdf/specification/web/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 4.1.0\ntag: package-2024-04\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest Generator for Azure Web Services SDK\nDESCRIPTION: YAML configuration that defines parameters for generating Go SDK code from Azure REST API specifications. Specifies the source API specs, license header, module version 4.1.0, and targets the 2024-04 API package version.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/b5d78da207e9c5d8f82e95224039867271f47cdf/specification/web/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/b5d78da207e9c5d8f82e95224039867271f47cdf/specification/web/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 4.1.0\ntag: package-2024-04\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Using Default Credentials in Go\nDESCRIPTION: Create a default Azure credential using the azidentity package for authentication with Azure services.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Marketplace Ordering Client for China Cloud in Go\nDESCRIPTION: Example of creating a client factory with options to connect to Azure China cloud. It demonstrates setting custom client options.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armmarketplaceordering.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Costmanagement Client Factory in Go\nDESCRIPTION: Initializes a client factory for Azure Costmanagement using subscription ID and credentials.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armcostmanagement.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Adding New Struct AutoScaleProperties in Go\nDESCRIPTION: Defines a new struct AutoScaleProperties to represent auto-scale configuration properties for Elastic SAN resources.\n\nLANGUAGE: go\nCODE:\n```\ntype AutoScaleProperties struct {\n    // Fields would be defined here\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Default Credential\nDESCRIPTION: Initialize default Azure credentials for authentication using azidentity module.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Storage Sync Client Factory\nDESCRIPTION: Initializes a client factory for creating Azure Storage Sync service clients using subscription ID and credentials.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armstoragesync.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Scheduler Go Module\nDESCRIPTION: Command to install the Azure Scheduler module using Go modules package management system.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/scheduler/armscheduler\n```\n\n----------------------------------------\n\nTITLE: Release History Changelog in Markdown\nDESCRIPTION: Markdown formatted changelog entries for Azure SDK for Go datashare package releases, documenting feature additions and breaking changes\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.2.0 (2023-11-24)\n### Features Added\n\n- Support for test fakes and OpenTelemetry trace spans.\n\n\n## 1.1.0 (2023-03-28)\n### Features Added\n\n- New struct `ClientFactory` which is a client factory used to create any client in this module\n\n\n## 1.0.0 (2022-05-18)\n\nThe package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/datashare/armdatashare` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html) since version 1.0.0, which contains breaking changes.\n\nTo migrate the existing applications to the latest version, please refer to [Migration Guide](https://aka.ms/azsdk/go/mgmt/migration).\n\nTo learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure Visual Studio Projects Client in Go\nDESCRIPTION: This snippet shows how to create a specific client for working with Azure Visual Studio projects. It uses the previously created client factory to instantiate a new ProjectsClient, which provides access to project-related APIs.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewProjectsClient()\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure using Default Azure Credential in Go\nDESCRIPTION: Creates a default Azure credential for authenticating with Azure services. This snippet uses the azidentity package to create a credential that can be used with Azure clients.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Release Notes Entry in Markdown\nDESCRIPTION: Release notes entry documenting version 0.1.0 of the Azure SDK for Go databoundaries package, highlighting the adoption of next generation design principles.\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.1.0 (2024-10-21)\n### Other Changes\n\nThe package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/databoundaries/armdataboundaries` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html).\n```\n\n----------------------------------------\n\nTITLE: Creating Organizations Client\nDESCRIPTION: Instantiates a new Organizations client using the client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewOrganizationsClient()\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Connected Cache Node Operations Client in Go\nDESCRIPTION: This code demonstrates how to create a specific client for cache node operations using the previously created client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewCacheNodesOperationsClient()\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Machine Learning Services Module in Go\nDESCRIPTION: This command installs the Azure Machine Learning Services module using Go's package manager.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/machinelearningservices/armmachinelearningservices\n```\n\n----------------------------------------\n\nTITLE: Updating Module Name and Version References in Client Files\nDESCRIPTION: This YAML directive modifies client-related Go files to use internal.ModuleVersion instead of moduleVersion and updates the module name reference. It ensures consistent versioning and naming across the generated SDK.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from:\n      - \"*_client.go\"\n      - \"client.go\"\n      - \"client_factory.go\"\n    where: $\n    transform: return $.replace(/moduleVersion/, \"internal.ModuleVersion\").replace(/moduleName+\"/, \"internal.ModuleName+\\\"/armnetwork\");\n```\n\n----------------------------------------\n\nTITLE: Release History Documentation in Markdown\nDESCRIPTION: Structured changelog documenting the evolution of the Azure SDK for Go KeyVault internal package. Details version changes including features added, breaking changes, bugs fixed, and other modifications.\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.2.0-beta.2 (Unreleased)\n\n### Features Added\n\n### Breaking Changes\n\n### Bugs Fixed\n\n### Other Changes\n\n## 1.2.0-beta.1 (2025-03-11)\n\n### Features Added\n* Added fakes support\n\n## 1.1.1 (2025-02-13)\n\n### Bugs Fixed\n* Fixed data race when using Client from multiple goroutines concurrently (thanks, @strager)\n\n## 1.1.0 (2024-10-21)\n\n### Features Added\n* Added CAE support\n* `KeyVaultChallengePolicy` always requests tokens from the Vault's tenant, overriding any credential default\n\n## 1.0.1 (2024-04-09)\n\n### Other Changes\n* Upgraded dependencies\n\n## 1.0.0 (2023-08-15)\n\n### Features Added\n* This is the first stable release of the `internal` library for KeyVault.\n\n### Other Changes\n* Upgrade dependencies\n\n## 0.8.0 (2023-03-08)\n\n### Breaking Changes\n* Moved to new location\n\n### Other Changes\n* Upgrade dependencies\n\n## 0.7.1 (2022-11-14)\n\n### Bugs Fixed\n* `KeyVaultChallengePolicy` uses incorrect authentication scope when challenge verification is disabled\n\n## 0.7.0 (2022-09-20)\n\n### Breaking Changes\n* Added `*KeyVaultChallengePolicyOptions` parameter to `NewKeyVaultChallengePolicy`\n\n## 0.6.0 (2022-09-12)\n\n### Breaking Changes\n* Verify the challenge resource matches the vault domain. See https://aka.ms/azsdk/blog/vault-uri for more information.\n* `ParseID()` no longer appends a trailing slash to vault URLs\n\n## 0.5.0 (2022-05-12)\n\n### Breaking Changes\n* Removed `ExpiringResource` and its dependencies in favor of shared implementation from `internal/temporal`.\n\n### Other Changes\n* Updated to latest versions of `azcore` and `internal`.\n\n## 0.4.0 (2022-04-22)\n\n### Breaking Changes\n* Updated `ExpiringResource` and its dependent types to use generics.\n\n### Other Changes\n* Remove reference to `TokenRequestOptions.TenantID` as it's been removed and wasn't working anyways.\n\n## 0.3.0 (2022-04-04)\n\n### Features Added\n* Adds the `ParseKeyvaultID` function to parse an ID into the Key Vault URL, item name, and item version\n\n### Breaking Changes\n* Updates to azcore v0.23.0\n\n## 0.2.1 (2022-01-31)\n\n### Bugs Fixed\n* Avoid retries on terminal failures (#16932)\n\n## 0.2.0 (2022-01-12)\n\n### Bugs Fixed\n* Fixes a bug with Managed HSMs that prevented correctly authorizing requests.\n\n## 0.1.0 (2021-11-09)\n* This is the initial release of the `internal` library for KeyVault\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Terraform Client Factory\nDESCRIPTION: Initializes a client factory for Azure Terraform operations with basic configuration\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armterraform.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Lab Services Module\nDESCRIPTION: Command to install the Azure Lab Services module using Go modules for dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/labservices/armlabservices\n```\n\n----------------------------------------\n\nTITLE: Removing FileSystem and PathName Parameters\nDESCRIPTION: YAML directive to remove FileSystem and PathName from the parameter list as they are not needed.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $[\"x-ms-paths\"]\n  transform: >\n    for (const property in $)\n    {\n        if (property.includes('/{filesystem}/{path}'))\n        {\n            $[property][\"parameters\"] = $[property][\"parameters\"].filter(function(param) { return (typeof param['$ref'] === \"undefined\") || (false == param['$ref'].endsWith(\"#/parameters/FileSystem\") && false == param['$ref'].endsWith(\"#/parameters/Path\"))});\n        }\n        else if (property.includes('/{filesystem}'))\n        {\n            $[property][\"parameters\"] = $[property][\"parameters\"].filter(function(param) { return (typeof param['$ref'] === \"undefined\") || (false == param['$ref'].endsWith(\"#/parameters/FileSystem\"))});\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Managed Applications Module\nDESCRIPTION: Command to install the Azure Managed Applications module using Go modules.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armmanagedapplications\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Database for MySQL Client in Go\nDESCRIPTION: This snippet shows how to create a specific client (AdvancedThreatProtectionSettingsClient) using the previously created client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewAdvancedThreatProtectionSettingsClient()\n```\n\n----------------------------------------\n\nTITLE: Removing moduleName and moduleVersion Constants\nDESCRIPTION: This YAML directive removes the moduleName and moduleVersion constants from the generated constants.go file. It uses a regular expression to match and remove the constant declarations.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: constants.go\n    where: $\n    transform: return $.replace(/const \\(\\n\\s+moduleName.+\\n\\s+moduleVersion.+\\n\\)\\n/, \"\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Edge Order Client for Sovereign Clouds in Go\nDESCRIPTION: This snippet shows how to configure the Azure Edge Order client for use with sovereign clouds or Azure Stack. It uses ClientOptions to set the cloud endpoint, in this case, to Azure China.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armedgeorder.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Git Conflict Status Example\nDESCRIPTION: Sample Git status output showing a merge conflict state during tag combination. Demonstrates the conflict resolution workflow in the asset repository.\n\nLANGUAGE: bash\nCODE:\n```\nC:/repo/azure-sdk-for-python/.assets/eDscgL1p9G/python |>git status\nHEAD detached from python/storage/azure-storage-blob_12c8154ae2\nYou are currently cherry-picking commit 1fd0865.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nYou are in a sparse checkout with 100% of tracked files present.\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n        both added:      sdk/storage/azure-storage-blob/tests/recordings/test_append_blob_async.pyTestStorageAppendBlobAsynctest_append_blob_from_text_new.json\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure using Default Credential in Go\nDESCRIPTION: Creates a default Azure credential for authentication. This method supports various authentication types including client/secret, certificate, and managed identity.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Iotfirmwaredefense Client for Different Clouds in Go\nDESCRIPTION: Example of how to configure the client factory to connect to different Azure clouds or Azure Stack using ClientOptions. This allows for flexibility in deployment scenarios.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclient, err := armiotfirmwaredefense.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure Authentication Credentials\nDESCRIPTION: Creates default Azure credentials for authentication with Azure services\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Documenting Release History in Markdown\nDESCRIPTION: This markdown snippet outlines the release history for the Azure SDK for Go, detailing version changes and new features added in each release. It covers versions 1.2.0, 1.1.0, 1.0.2, and 0.1.0, highlighting important updates and improvements.\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.2.0 (2023-11-24)\n### Features Added\n\n- Support for test fakes and OpenTelemetry trace spans.\n\n\n## 1.1.0 (2023-03-31)\n### Features Added\n\n- New struct `ClientFactory` which is a client factory used to create any client in this module\n\n\n## 1.0.2 (2023-02-24)\n\nRelease stable version.\n\n## 0.1.0 (2022-11-21)\n\nThe package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/loadtesting/armloadtesting` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html).\n\nTo learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Database for PostgreSQL HSC Client Factory in Go\nDESCRIPTION: Example of creating a client factory for Azure Database for PostgreSQL HSC. This factory can be used to create any client in the module.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armpostgresqlhsc.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Adding New Field to Properties Struct in Go\nDESCRIPTION: Adds a new field AutoScaleProperties to the existing Properties struct to include auto-scale configuration.\n\nLANGUAGE: go\nCODE:\n```\ntype Properties struct {\n    // Existing fields\n    AutoScaleProperties *AutoScaleProperties `json:\"autoScaleProperties,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Storage Sync Service Client\nDESCRIPTION: Creates a new services client instance using the client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewServicesClient()\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Operations Management Module in Go\nDESCRIPTION: This snippet shows how to install the Azure Operations Management module using Go's package manager.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/operationsmanagement/armoperationsmanagement\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest Settings for Azure Deployment Manager Go SDK\nDESCRIPTION: Defines AutoRest configuration parameters including Azure ARM specifications, required GitHub specification files, license header type, and module version for generating the Go SDK.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/deploymentmanager/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/deploymentmanager/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 0.6.0\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Data Share Accounts Client in Go\nDESCRIPTION: This code demonstrates how to create a specific client (in this case, an Accounts client) using the previously created client factory. This client can be used to perform operations related to Azure Data Share accounts.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewAccountsClient()\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Default Credentials\nDESCRIPTION: Creates default Azure credentials for authentication using the azidentity module.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Defining Status Enum Values in Go\nDESCRIPTION: This snippet shows the addition of new values to the Status enum type in version 1.0.0. It includes status values related to ETCD snapshots, image operations, and SFS connectivity validation.\n\nLANGUAGE: go\nCODE:\n```\nStatusETCDSnapshotFailed\nStatusValidatingETCDHealth\nStatusValidatingImageDownload\nStatusValidatingImageUpload\nStatusValidatingSFSConnectivity\n```\n\n----------------------------------------\n\nTITLE: Creating DICOM Services Client in Go\nDESCRIPTION: This code demonstrates how to create a specific client (DICOM Services) using the previously created client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewDicomServicesClient()\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Compute Fleet Specific Client in Go\nDESCRIPTION: This code demonstrates how to create a specific client (Fleets client in this case) using the previously created client factory. This client can be used to access specific Azure Compute Fleet APIs.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewFleetsClient()\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Resources Module in Go\nDESCRIPTION: Command to install the Azure Resources module using Go modules for dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armresources/v2\n```\n\n----------------------------------------\n\nTITLE: Creating a Specific Azure Mongocluster Client in Go\nDESCRIPTION: This code demonstrates how to create a specific client (FirewallRulesClient in this case) using the previously created client factory. This client can be used to perform operations related to firewall rules in Azure Mongocluster.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewFirewallRulesClient()\n```\n\n----------------------------------------\n\nTITLE: Creating Terraform Client Instance\nDESCRIPTION: Creates a new Terraform client instance from the client factory\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewTerraformClient()\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest Settings for Azure Dashboard SDK Generation\nDESCRIPTION: Defines the AutoRest configuration parameters for generating Go SDK code from Azure Dashboard REST API specifications. Specifies the Azure ARM mode, required API specification sources, license header type, module version 1.2.0, and API version tag package-2023-09-01.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/78eac0bd58633028293cb1ec1709baa200bed9e2/specification/dashboard/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/78eac0bd58633028293cb1ec1709baa200bed9e2/specification/dashboard/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.2.0\ntag: package-2023-09-01\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Orbital Contacts Client\nDESCRIPTION: Creates a specific client instance for managing Azure Orbital contacts using the client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewContactsClient()\n```\n\n----------------------------------------\n\nTITLE: Add Internal Import Directive\nDESCRIPTION: AutoRest directive to add internal package import to client-related Go files.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from:\n      - \"*_client.go\"\n      - \"client.go\"\n      - \"client_factory.go\"\n    where: $\n    transform: return $.replace(/import \\(\\n/, \"import (\\n\\\"github.com/Azure/azure-sdk-for-go/profile/p20200901/internal\\\"\\n\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Cloud Options\nDESCRIPTION: Sets up client options for connecting to different Azure clouds like Azure China using ClientOptions configuration.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armeventgrid.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Credentials\nDESCRIPTION: Creates default Azure credentials for authentication using the azidentity package.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Device Update Client Factory\nDESCRIPTION: Initializes a client factory for creating Azure Device Update service clients with basic configuration\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armdeviceupdate.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Quota Client Factory in Go\nDESCRIPTION: This code creates a client factory for Azure Quota services. It requires a subscription ID and a credential object. The factory can be used to create specific clients for different quota operations.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armquota.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Breaking Change: Type Change in AlertsClientChangeStateOptions\nDESCRIPTION: Type change of AlertsClientChangeStateOptions.Comment from *string to *Comments in version 0.10.0\n\nLANGUAGE: go\nCODE:\n```\ntype AlertsClientChangeStateOptions struct {\n    Comment *Comments // Changed from *string\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Edge Order Module in Go\nDESCRIPTION: This command installs the Azure Edge Order module using Go's package manager. It requires Go modules to be enabled for versioning and dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/edgeorder/armedgeorder\n```\n\n----------------------------------------\n\nTITLE: Defining New Enum Types in Go for Azure SDK\nDESCRIPTION: This snippet introduces new enum types for Active Directory authentication, password authentication, principal types, and role types in the Azure SDK for Go.\n\nLANGUAGE: markdown\nCODE:\n```\n- New enum type `ActiveDirectoryAuth` with values `ActiveDirectoryAuthDisabled`, `ActiveDirectoryAuthEnabled`\n- New enum type `PasswordAuth` with values `PasswordAuthDisabled`, `PasswordAuthEnabled`\n- New enum type `PrincipalType` with values `PrincipalTypeGroup`, `PrincipalTypeServicePrincipal`, `PrincipalTypeUser`\n- New enum type `RoleType` with values `RoleTypeAdmin`, `RoleTypeUser`\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Credentials\nDESCRIPTION: Creates default Azure credentials for authentication using azidentity module\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure HealthDataAIServices Module in Go\nDESCRIPTION: Uses go get command to install the Azure HealthDataAIServices module from the Azure SDK for Go.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/healthdataaiservices/armhealthdataaiservices\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK Go Generation\nDESCRIPTION: This YAML configuration sets up AutoRest for generating the Azure SDK for Go. It specifies the Azure ARM mode, required API specifications from the Azure REST API specs repository, license header, and module version.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/432872fac1d0f8edcae98a0e8504afc0ee302710/specification/fluidrelay/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/432872fac1d0f8edcae98a0e8504afc0ee302710/specification/fluidrelay/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.2.0\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Fabric Client Factory\nDESCRIPTION: Initializes a client factory for Azure Fabric services using subscription ID and credentials.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armfabric.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Creating HealthDataAIServices DeidServices Client in Go\nDESCRIPTION: Initializes a DeidServices client using the previously created client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewDeidServicesClient()\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Client Options for Sovereign Clouds in Go\nDESCRIPTION: This snippet shows how to configure client options for connecting to sovereign clouds or Azure Stack using the arm and azcore packages.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armcontainerorchestratorruntime.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Resource Graph Module\nDESCRIPTION: Command to install the Azure Resource Graph module using Go modules package management\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resourcegraph/armresourcegraph\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Container Instance SDK Generation\nDESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure Container Instance SDK for Go. It specifies the Azure ARM mode, required specification files, license header, module version, and API version tag.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/366aaa13cdd218b9adac716680e49473673410c8/specification/containerinstance/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/366aaa13cdd218b9adac716680e49473673410c8/specification/containerinstance/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 2.5.0-beta.1\ntag: package-preview-2024-05\n```\n\n----------------------------------------\n\nTITLE: Creating or Updating Variables in Go\nDESCRIPTION: Performs a create or update operation for variables using the VariablesClient.\n\nLANGUAGE: Go\nCODE:\n```\n*VariablesClient.CreateOrUpdate(context.Context, string, Variable, *VariablesClientCreateOrUpdateOptions) (VariablesClientCreateOrUpdateResponse, error)\n```\n\n----------------------------------------\n\nTITLE: Azure Data Lake Storage Release History in Markdown\nDESCRIPTION: Markdown formatted changelog documenting version history, features, bug fixes and dependency updates for the Azure Data Lake Storage SDK for Go.\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.4.1-beta.2 (Unreleased)\n\n### Features Added\n\n### Breaking Changes\n\n### Bugs Fixed\n\n### Other Changes\n\n## 1.4.1-beta.1 (2025-02-12)\n\n### Features Added\n* Upgraded service version to `2025-05-05`.\n\n### Other Changes\n* Updated `azidentity` version to `1.8.1`\n* Updated `azblob` version to `v1.6.1-beta.1`\n```\n\n----------------------------------------\n\nTITLE: Hub and Partition Information Retrieval in Go\nDESCRIPTION: Compares old and new methods for retrieving Event Hub and partition information using both consumer and producer clients.\n\nLANGUAGE: go\nCODE:\n```\n// old\nhub.GetPartitionInformation(context.TODO(), \"0\")\nhub.GetRuntimeInformation(context.TODO())\n\n// new\n\n// equivalent to: hub.GetRuntimeInformation(context.TODO())\nconsumerClient.GetEventHubProperties(context.TODO(), nil)   \n\n// equivalent to: hub.GetPartitionInformation\nconsumerClient.GetPartitionProperties(context.TODO(), \"partition-id\", nil)  \n\n//\n// or, using the ProducerClient\n//\n\nproducerClient.GetEventHubProperties(context.TODO(), nil)\nproducerClient.GetPartitionProperties(context.TODO(), \"partition-id\", nil)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Commerce Module for Go\nDESCRIPTION: This snippet shows how to install the Azure Commerce module using Go's package manager. It requires Go modules for versioning and dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/commerce/armcommerce\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Selfhelp Service Client\nDESCRIPTION: Creates a specific service client for accessing Azure Selfhelp APIs\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewDiscoverySolutionNLPSubscriptionScopeClient()\n```\n\n----------------------------------------\n\nTITLE: Adding Internal Import to Generated Client Files\nDESCRIPTION: This YAML directive adds an import statement for the internal package to the generated client files, including *_client.go, client.go, and client_factory.go.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from:\n      - \"*_client.go\"\n      - \"client.go\"\n      - \"client_factory.go\"\n    where: $\n    transform: return $.replace(/import \\(\\n/, \"import (\\n\\\"github.com/Azure/azure-sdk-for-go/profile/p20200901/internal\\\"\\n\");\n```\n\n----------------------------------------\n\nTITLE: Enum Type Definitions in Go\nDESCRIPTION: New enum type definitions for CreatedByType and RequestState with their associated values.\n\nLANGUAGE: go\nCODE:\n```\ntype CreatedByType string\n\nconst (\n    CreatedByTypeApplication\n    CreatedByTypeKey\n    CreatedByTypeManagedIdentity\n    CreatedByTypeUser\n)\n\ntype RequestState string\n\nconst (\n    RequestStateAccepted\n    RequestStateCanceled \n    RequestStateCreated\n    RequestStateFailed\n    RequestStateInProgress\n    RequestStateInvalid\n    RequestStateSucceeded\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Client Options for Different Clouds in Go\nDESCRIPTION: Sets up client options to connect to different Azure clouds, including sovereign clouds and Azure Stack.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armrecoveryservicessiterecovery.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Client Options for Sovereign Clouds in Go\nDESCRIPTION: Sets up client options to connect to specific Azure cloud environments, such as Azure China.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armhealthdataaiservices.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Credentials\nDESCRIPTION: Creates default Azure credentials for authentication with Azure services using azidentity module\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Issue Command Usage Example\nDESCRIPTION: Demonstrates how to use the issue command with a personal access token to generate a release configuration file.\n\nLANGUAGE: shell\nCODE:\n```\ngenerator issue -t $YOUR_PERSONAL_ACCESS_TOKEN > sdk-release.json\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure using Default Credentials in Go\nDESCRIPTION: This snippet demonstrates how to create a default Azure credential for authentication.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Creating a Client for Azure Resources in Go\nDESCRIPTION: Demonstrates how to create a specific client using the previously initialized client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewClient()\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Workloads Provider Instance Client\nDESCRIPTION: Creates a specific client instance for working with provider instances using the client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewProviderInstancesClient()\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Client with Custom Options\nDESCRIPTION: Creates a client factory with custom options for connecting to different Azure clouds.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclient, err := armmanagednetworkfabric.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Configuring Client with Custom Options - Go\nDESCRIPTION: Creates a client factory with custom options for connecting to different Azure clouds\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armstorageactions.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure Edgezones Client Factory in Go\nDESCRIPTION: This snippet shows how to create a client factory for Azure Edgezones. It uses the armedgezones package to create a new ClientFactory, which requires a subscription ID and a credential object.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armedgezones.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Resource Connector Client for China Cloud in Go\nDESCRIPTION: Sets up client options for connecting to Azure China cloud and creates a client factory with these options.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armresourceconnector.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Event Grid Go Module\nDESCRIPTION: Command to install the Azure Event Grid module using Go modules for dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/eventgrid/armeventgrid/v2\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Event Grid Go Module\nDESCRIPTION: Command to install the Azure Event Grid module using Go modules for dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/eventgrid/armeventgrid/v2\n```\n\n----------------------------------------\n\nTITLE: Creating Power BI Embedded Workspace Client\nDESCRIPTION: Creates a client instance for working with Power BI Embedded workspaces\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewWorkspacesClient()\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Database for PostgreSQL Client for Sovereign Clouds in Go\nDESCRIPTION: Sets up client options for connecting to sovereign clouds or Azure Stack using the arm and azcore packages.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armpostgresql.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Guest Configuration Module\nDESCRIPTION: Command to install the Azure Guest Configuration module using Go modules\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/guestconfiguration/armguestconfiguration\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK Go Generation\nDESCRIPTION: This YAML configuration specifies the settings for AutoRest to generate the Azure SDK for Go. It includes required API specifications, sets the Azure ARM flag, specifies the license header, module version, and package tag.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/e4991356eec55985c1af47096c9c2091126a7d0f/specification/privatedns/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/e4991356eec55985c1af47096c9c2091126a7d0f/specification/privatedns/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.3.0\ntag: package-2024-06\n```\n\n----------------------------------------\n\nTITLE: Creating Service Client Instance\nDESCRIPTION: Creates a specific service client instance using the client factory\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewAppAttachPackageClient()\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Options for Different Clouds\nDESCRIPTION: Sets up client options for connecting to different Azure clouds including sovereign clouds and Azure Stack\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armdns.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Creating Guest Configuration Assignments Client\nDESCRIPTION: Instantiates a new assignments client using the client factory\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewAssignmentsClient()\n```\n\n----------------------------------------\n\nTITLE: Updating Module Name and Version in Client Constructor\nDESCRIPTION: This YAML directive modifies the client constructor in generated files to use internal.ModuleVersion instead of moduleVersion and updates the module name to include '/armiothub'.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from:\n      - \"*_client.go\"\n      - \"client.go\"\n      - \"client_factory.go\"\n    where: $\n    transform: return $.replace(/moduleVersion/, \"internal.ModuleVersion\").replace(/moduleName+\"/, \"internal.ModuleName+\\\"/armiothub\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Factory with Custom Options\nDESCRIPTION: Creates a client factory with custom options for connecting to different Azure clouds.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armmanagedapplications.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: New Function Addition\nDESCRIPTION: Addition of new client function for retrieving full URL\n\nLANGUAGE: go\nCODE:\n```\nNew function `*NamespaceTopicEventSubscriptionsClient.GetFullURL(context.Context, string, string, string, string, *NamespaceTopicEventSubscriptionsClientGetFullURLOptions) (NamespaceTopicEventSubscriptionsClientGetFullURLResponse, error)`\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure Credential\nDESCRIPTION: Creates a default Azure credential object for authentication with Azure services.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Deleting an Application Group in Go\nDESCRIPTION: This code snippet demonstrates how to delete an Application Group using the ApplicationGroupClient in the Azure SDK for Go.\n\nLANGUAGE: go\nCODE:\n```\n*ApplicationGroupClient.Delete(context.Context, string, string, string, *ApplicationGroupClientDeleteOptions) (ApplicationGroupClientDeleteResponse, error)\n```\n\n----------------------------------------\n\nTITLE: Creating MariaDB Client Factory\nDESCRIPTION: Initializes a new client factory for MariaDB operations using subscription ID and credentials\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armmariadb.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring ClientOptions for Azure Stack or Sovereign Clouds in Go\nDESCRIPTION: Sets up client options to connect to specific Azure cloud environments, such as Azure China, using the arm and azcore packages.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armchanges.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Creating Organizations Client\nDESCRIPTION: Creates a new Organizations client instance using the client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewOrganizationsClient()\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest YAML for Azure Container Registry SDK Generation\nDESCRIPTION: YAML configuration for AutoRest tool to generate Azure Container Registry Go SDK. Specifies Azure ARM mode, required API specifications, license header, module version, and API version tag to use.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/300ff7c27c481d7074af06cd95a152aaea80ed2b/specification/containerregistry/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/300ff7c27c481d7074af06cd95a152aaea80ed2b/specification/containerregistry/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.3.0-beta.2\ntag: package-2024-11-preview\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure SQL Database Agent Client in Go\nDESCRIPTION: This snippet shows how to create a specific client (in this case, an Agent client) using the previously created client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewAgentClient()\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Attestation Providers Client in Go\nDESCRIPTION: This code demonstrates how to create a specific client (ProvidersClient) using the previously created client factory. This client can be used to access related APIs.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewProvidersClient()\n```\n\n----------------------------------------\n\nTITLE: Listing Deleted Automation Accounts by Subscription in Go\nDESCRIPTION: Lists deleted automation accounts for a given subscription using the DeletedAutomationAccountsClient.\n\nLANGUAGE: go\nCODE:\n```\n*DeletedAutomationAccountsClient.ListBySubscription(context.Context, *DeletedAutomationAccountsClientListBySubscriptionOptions) (DeletedAutomationAccountsClientListBySubscriptionResponse, error)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Front Door Endpoints Client\nDESCRIPTION: Instantiating an endpoints client using the client factory to access Front Door endpoints API.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewEndpointsClient()\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure Engagement Fabric Accounts Client in Go\nDESCRIPTION: This snippet demonstrates how to create a specific client (Accounts Client) using the previously created client factory for Azure Engagement Fabric.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewAccountsClient()\n```\n\n----------------------------------------\n\nTITLE: Adding New Functions in Go\nDESCRIPTION: Example of adding new functions to a client in Go.\n\nLANGUAGE: go\nCODE:\n```\n// New function added to ClientFactory\nfunc (client *ClientFactory) NewGatewaysClient() *GatewaysClient\n\n// New function for GatewaysClient\nfunc NewGatewaysClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*GatewaysClient, error)\n\n// New method for GatewaysClient\nfunc (client *GatewaysClient) BeginCreateOrUpdate(ctx context.Context, resourceGroupName string, gatewayName string, gateway Gateway, options *GatewaysClientBeginCreateOrUpdateOptions) (*runtime.Poller[GatewaysClientCreateOrUpdateResponse], error)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Client Options for Different Clouds\nDESCRIPTION: Sets up client options for connecting to different Azure clouds including sovereign clouds and Azure Stack\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armkusto.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Factory with Custom Options\nDESCRIPTION: Creates a client factory with custom options for connecting to different Azure clouds using ClientOptions.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armpostgresqlflexibleservers.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Trustedsigning Module for Go\nDESCRIPTION: This command installs the Azure Trustedsigning module using Go's package manager.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/trustedsigning/armtrustedsigning\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Fabric Go Module\nDESCRIPTION: Command to install the Azure Fabric module using Go modules package management system.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/fabric/armfabric\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Recovery Services Module in Go\nDESCRIPTION: This command installs the Azure Recovery Services module using Go's package manager. It retrieves the specified version of the module from the Azure SDK for Go repository.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/recoveryservices/armrecoveryservices/v2\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Factory with Custom Options\nDESCRIPTION: Create a client factory with custom options for connecting to different Azure clouds.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armstorageimportexport.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Credentials\nDESCRIPTION: Creates default Azure credentials for authentication with Azure services using azidentity module\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure PaloAltoNetworks SDK Module\nDESCRIPTION: Commands for installing the Azure PaloAltoNetworks module using Go modules.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/paloaltonetworksngfw/armpanngfw\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Options for Different Clouds\nDESCRIPTION: Sets up client options for connecting to different Azure clouds including sovereign clouds and Azure Stack.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armcommunication.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Creating IoTOperations Service Client\nDESCRIPTION: Creates a specific service client for accessing IoTOperations APIs using the client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewBrokerAuthenticationClient()\n```\n\n----------------------------------------\n\nTITLE: Adding Internal Import to Client Files\nDESCRIPTION: YAML directive to add an internal import to client-related Go files.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from:\n      - \"*_client.go\"\n      - \"client.go\"\n      - \"client_factory.go\"\n    where: $\n    transform: return $.replace(/import \\(\\n/, \"import (\\n\\\"github.com/Azure/azure-sdk-for-go/profile/p20200901/internal\\\"\\n\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Client Options for Different Clouds in Go\nDESCRIPTION: Set up client options to connect to different Azure clouds, such as Azure China, using the arm.ClientOptions struct.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armdomainservices.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Creating Default Azure Credential in Go\nDESCRIPTION: This code snippet shows how to create a default Azure credential using the azidentity package. This credential is used for authenticating with Azure Policy Insight.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Version History Entry - 0.6.0\nDESCRIPTION: Release notes for version 0.6.0 documenting breaking changes and new features\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.6.0 (2023-02-24)\n### Breaking Changes\n\n- Type of `ManagedIdentitySQLControlSettingsModelPropertiesGrantSQLControlToManagedIdentity.DesiredState` has been changed from `*ManagedIdentitySQLControlSettingsModelPropertiesGrantSQLControlToManagedIdentityDesiredState` to `*DesiredState`\n- Type of `ManagedIdentitySQLControlSettingsModelPropertiesGrantSQLControlToManagedIdentity.ActualState` has been changed from `*ManagedIdentitySQLControlSettingsModelPropertiesGrantSQLControlToManagedIdentityActualState` to `*ActualState`\n[...truncated for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure using Default Azure Credential in Go\nDESCRIPTION: This snippet demonstrates how to create a default Azure credential for authentication with Azure services.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Client Options for Different Clouds in Go\nDESCRIPTION: This snippet shows how to configure client options for connecting to different Azure clouds, such as Azure China. It uses the arm.ClientOptions struct to set the cloud option.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armresourcemover.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure IoT Security Client Options in Go\nDESCRIPTION: Example of configuring client options for Azure IoT Security, including setting the cloud environment to Azure China. This demonstrates how to customize the client factory creation.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armiotsecurity.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure resources module in Go\nDESCRIPTION: Command to install the Azure resources module using Go modules for dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armchanges\n```\n\n----------------------------------------\n\nTITLE: Initializing Data Lake Store Client Factory\nDESCRIPTION: Creates a new client factory for Data Lake Store operations using subscription ID and credentials\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armdatalakestore.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest Parameters for Azure Go SDK Generation\nDESCRIPTION: Defines configuration parameters for AutoRest tool to generate Go SDK code from Azure REST API specifications. Specifies the source API specs, license header, module version, and API version tag to use.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/d88c94b22a8efdd47c0cadfe6d8d489107db2b23/specification/appcomplianceautomation/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/d88c94b22a8efdd47c0cadfe6d8d489107db2b23/specification/appcomplianceautomation/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.0.0\ntag: package-2024-06\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SQL Database Module in Go\nDESCRIPTION: This snippet shows how to install the Azure SQL Database module using Go's package manager.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/sql/armsql/v2\n```\n\n----------------------------------------\n\nTITLE: Creating MariaDB Database Client\nDESCRIPTION: Creates a new database client instance using the client factory\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewDatabasesClient()\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure using Default Azure Credential in Go\nDESCRIPTION: Creates a new DefaultAzureCredential object for authenticating with Azure services. This is a common pattern for authentication in Azure SDK for Go.\n\nLANGUAGE: Go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Policy Insights SDK Generation in YAML\nDESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure Policy Insights SDK for Go. It specifies the Azure ARM mode, required API specifications, license header, and module version.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/05a9cdab363b8ec824094ee73950c04594325172/specification/policyinsights/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/05a9cdab363b8ec824094ee73950c04594325172/specification/policyinsights/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 0.8.0\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Device Provisioning Service Module in Go\nDESCRIPTION: This snippet demonstrates how to install the Azure Device Provisioning Service module using Go's package manager.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/deviceprovisioningservices/armdeviceprovisioningservices\n```\n\n----------------------------------------\n\nTITLE: Adding New Structs in Go\nDESCRIPTION: Example of adding new structs in Go.\n\nLANGUAGE: go\nCODE:\n```\n// New struct Gateway\ntype Gateway struct {\n    // embedded fields\n    Properties *GatewayProperties `json:\"properties,omitempty\"`\n}\n\n// New struct GatewayProperties\ntype GatewayProperties struct {\n    // fields\n}\n\n// New struct GatewayUpdate\ntype GatewayUpdate struct {\n    // embedded fields\n    Properties *GatewayUpdateProperties `json:\"properties,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Starting and Stopping a Recorded Test in Go\nDESCRIPTION: Demonstrates how to start and stop a recorded test using the recording package.\n\nLANGUAGE: Go\nCODE:\n```\nfunc TestSomething(t *testing.T) {\n    err := recording.Start(t, recordingDirectory, nil)\n    defer recording.Stop(t, recordingDirectory, nil)\n\n    // Continue test\n}\n```\n\n----------------------------------------\n\nTITLE: Starting and Stopping a Recorded Test in Go\nDESCRIPTION: Demonstrates how to start and stop a recorded test using the recording package.\n\nLANGUAGE: Go\nCODE:\n```\nfunc TestSomething(t *testing.T) {\n    err := recording.Start(t, recordingDirectory, nil)\n    defer recording.Stop(t, recordingDirectory, nil)\n\n    // Continue test\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Client Options\nDESCRIPTION: Example of configuring client options for different Azure clouds including sovereign clouds and Azure Stack\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armpurview.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Extended Location Module\nDESCRIPTION: Command to install the Azure Extended Location module using Go modules dependency management\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/extendedlocation/armextendedlocation\n```\n\n----------------------------------------\n\nTITLE: Azure Authentication Setup\nDESCRIPTION: Creates a default Azure credential object for authentication with Azure services.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Storage Cache Client Factory\nDESCRIPTION: Initializes a client factory for creating Azure Storage Cache clients with subscription ID and credentials.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armstoragecache.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Storage Cache Client Factory\nDESCRIPTION: Initializes a client factory for creating Azure Storage Cache clients with subscription ID and credentials.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armstoragecache.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Active Directory Client Options in Go\nDESCRIPTION: Shows how to set client options, including cloud endpoint configuration, when creating a client factory.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armaad.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Creating HDInsight Service Client\nDESCRIPTION: Creates a specific service client for accessing HDInsight Containers APIs using the client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewAvailableClusterPoolVersionsClient()\n```\n\n----------------------------------------\n\nTITLE: Adding Internal Import to Client Files\nDESCRIPTION: This YAML directive adds an import statement for the internal package to various client-related files in the generated SDK code.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from:\n      - \"*_client.go\"\n      - \"client.go\"\n      - \"client_factory.go\"\n    where: $\n    transform: return $.replace(/import \\(\\n/, \"import (\\n\\\"github.com/Azure/azure-sdk-for-go/profile/p20200901/internal\\\"\\n\");\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Device Update Module\nDESCRIPTION: Command to install the Azure Device Update module using Go modules for dependency management\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/deviceupdate/armdeviceupdate\n```\n\n----------------------------------------\n\nTITLE: Version History Entry - 0.8.0\nDESCRIPTION: Release notes for version 0.8.0 documenting support for test fakes and OpenTelemetry trace spans\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.8.0 (2023-11-24)\n### Features Added\n\n- Support for test fakes and OpenTelemetry trace spans.\n```\n\n----------------------------------------\n\nTITLE: Authentication with Azure Credentials\nDESCRIPTION: Creates a default Azure credential object for authentication with Azure services.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Marketplace Client for Sovereign Clouds in Go\nDESCRIPTION: This snippet shows how to configure the client factory for use with sovereign clouds or Azure Stack. It uses ClientOptions to set the cloud endpoint.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armmarketplace.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure IoT Security Client Factory in Go\nDESCRIPTION: Code snippet showing how to create a client factory for Azure IoT Security. The factory is initialized with a subscription ID and credential.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armiotsecurity.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Policy Insight Client for Sovereign Clouds in Go\nDESCRIPTION: This code shows how to configure the client factory to connect with sovereign clouds or Azure Stack using ClientOptions. It sets the endpoint to Azure China cloud as an example.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armpolicyinsights.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Creating Storage Actions Client Factory - Go\nDESCRIPTION: Initializes a client factory for creating Storage Actions service clients using subscription ID and credentials\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armstorageactions.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK Go Generation\nDESCRIPTION: This YAML configuration specifies settings for AutoRest to generate the Azure SDK for Go. It sets the Azure ARM flag, requires specific API specifications, sets the license header, and defines the module version.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/hybridkubernetes/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/hybridkubernetes/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.2.0\n```\n\n----------------------------------------\n\nTITLE: Importing Azure SQL Client Factory\nDESCRIPTION: Shows how to create clients for Azure SQL services using the client factory pattern\n\nLANGUAGE: go\nCODE:\n```\nclientFactory := armsql.NewClientFactory(subscriptionID, credential, nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Management Partner Client in Go\nDESCRIPTION: Code snippet demonstrating how to create a specific client using the client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewPartnerClient()\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Migrate Groups Client\nDESCRIPTION: Creates a specific client instance for working with Azure Migrate groups using the client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewGroupsClient()\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure DevOps Infrastructure Client for Sovereign Clouds in Go\nDESCRIPTION: This snippet shows how to configure the client factory to connect to sovereign clouds or Azure Stack. It uses ClientOptions to set the cloud endpoint.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armdevopsinfrastructure.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure M365 Security Client Factory\nDESCRIPTION: Initializes a client factory for accessing Azure Directory and Database Infrastructure services\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armm365securityandcompliance.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Newrelic Client for Different Clouds\nDESCRIPTION: This snippet shows how to configure the Azure Newrelic client factory for different cloud environments, such as Azure China. It uses ClientOptions to set the cloud endpoint.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armnewrelicobservability.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Health Bot Go Module\nDESCRIPTION: Command to install the Azure Health Bot module using Go modules package management system.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/healthbot/armhealthbot\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Resource Provider Client\nDESCRIPTION: Instantiates a new Custom Resource Provider client using the client factory\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewCustomResourceProviderClient()\n```\n\n----------------------------------------\n\nTITLE: Running Migration Script with Docker\nDESCRIPTION: Example of running the migration script using Docker container with required git token environment variable\n\nLANGUAGE: powershell\nCODE:\n```\n$env:GIT_TOKEN=\"my git token\"\ncd c:/src/azure-sdk-for-java/sdk/attestation\n<path-to-transition-script>/generate-assets-json.ps1 -TestProxyExe \"docker\" -InitialPush\n```\n\n----------------------------------------\n\nTITLE: Creating Azure SaaS Client Factory\nDESCRIPTION: Initializes a client factory for creating Azure SaaS service clients using subscription ID and credentials.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armsaas.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure DevOps using DefaultAzureCredential in Go\nDESCRIPTION: Code snippet demonstrating how to create a default Azure credential for authentication. This is typically used when initializing clients for Azure services.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: New QueryPacks Client Method in Go\nDESCRIPTION: Function signature for creating or updating query packs without a name parameter in the Azure Operational Insights SDK.\n\nLANGUAGE: go\nCODE:\n```\n*QueryPacksClient.CreateOrUpdateWithoutName(context.Context, string, LogAnalyticsQueryPack, *QueryPacksClientCreateOrUpdateWithoutNameOptions) (QueryPacksClientCreateOrUpdateWithoutNameResponse, error)\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure Credential\nDESCRIPTION: Creates a default Azure credential object for authentication with Azure services using the azidentity package.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Storage Mover Agents Client in Go\nDESCRIPTION: Initializes a new Agents client using the client factory for Azure Storage Mover.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewAgentsClient()\n```\n\n----------------------------------------\n\nTITLE: Removing moduleName and moduleVersion Constants\nDESCRIPTION: This YAML directive removes the moduleName and moduleVersion constants from the constants.go file in the generated SDK code.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: constants.go\n    where: $\n    transform: return $.replace(/const \\(\\n\\s+moduleName.+\\n\\s+moduleVersion.+\\n\\)\\n/, \"\");\n```\n\n----------------------------------------\n\nTITLE: Creating SQL Server Client\nDESCRIPTION: Example of instantiating a SQL server client using the factory pattern\n\nLANGUAGE: go\nCODE:\n```\nsqlServerClient := clientFactory.NewServersClient()\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Attestation Module in Go\nDESCRIPTION: This command installs the Azure Attestation module using Go's package manager. It requires Go modules for versioning and dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/attestation/armattestation\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Recoveryservicesdatareplication Client for China Cloud in Go\nDESCRIPTION: Demonstrates how to configure the client factory to connect to Azure China cloud using ClientOptions. This allows for flexibility in connecting to different Azure cloud environments.\n\nLANGUAGE: Go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armrecoveryservicesdatareplication.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Compute Fleet Module in Go\nDESCRIPTION: This command installs the Azure Compute Fleet module using Go's package manager. It requires Go modules for versioning and dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/computefleet/armcomputefleet\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Time Series Insights Event Sources Client in Go\nDESCRIPTION: This code demonstrates how to create a specific client (EventSourcesClient) using the client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewEventSourcesClient()\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Credentials\nDESCRIPTION: Creates default Azure credentials for authentication with Azure IoT Hub services using azidentity module.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Management Groups Client\nDESCRIPTION: Creates a new Management Groups client instance using the client factory\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewClient()\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Impactreporting Module\nDESCRIPTION: Command to install the Azure Impactreporting module using Go modules for dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/impactreporting/armimpactreporting\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Factory with Custom Options\nDESCRIPTION: Creates a client factory with custom options for connecting to different Azure clouds including sovereign clouds and Azure Stack\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armdatamigration.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Cloud Options\nDESCRIPTION: Sets up client options for connecting to different Azure clouds including sovereign clouds and Azure Stack\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armsignalr.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure Data Manager Service Client Factory in Go\nDESCRIPTION: This code creates a client factory for Azure Data Manager Service. It requires a subscription ID and a credential object for authentication.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armhybriddatamanager.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Credentials\nDESCRIPTION: Creates default Azure credentials for authentication using azidentity module\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure DevOps Module in Go\nDESCRIPTION: Command to install the Azure DevOps module using Go modules. This snippet shows how to add the module to your Go project.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/devops/armdevops\n```\n\n----------------------------------------\n\nTITLE: Creating Security Insight Actions Client\nDESCRIPTION: Creates a new Actions client instance using the client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewActionsClient()\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Client Options for Different Clouds in Go\nDESCRIPTION: Sets up client options to connect to different Azure clouds, including sovereign clouds and Azure Stack.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armservicefabricmanagedclusters.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Hybrid Data Module\nDESCRIPTION: Command to install the Azure Hybrid Data module using Go modules package management system.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/azurearcdata/armazurearcdata\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Credentials\nDESCRIPTION: Creates default Azure credentials for authentication with Azure services\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure using Default Credentials in Go\nDESCRIPTION: This snippet demonstrates how to create default Azure credentials for authentication. It uses the azidentity module to provide various authentication methods.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Application Insight Module for Go\nDESCRIPTION: This snippet shows how to install the Azure Application Insight module using Go's package manager. It uses the 'go get' command to fetch and install the module.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/applicationinsights/armapplicationinsights/v2\n```\n\n----------------------------------------\n\nTITLE: Creating Storage Import/Export Jobs Client\nDESCRIPTION: Create a specific client instance for managing Storage Import/Export jobs using the client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewJobsClient()\n```\n\n----------------------------------------\n\nTITLE: Modifying VisibilityTimeout Parameter in Swagger\nDESCRIPTION: YAML directive to change the VisibilityTimeoutRequired parameter to be optional in the Swagger document.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.parameters.VisibilityTimeoutRequired\n  transform: >\n    $.required = false;\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Automanage and Azure Identity modules in Go\nDESCRIPTION: Commands to install the required Azure SDK modules for Automanage and Identity using Go's package manager.\n\nLANGUAGE: sh\nCODE:\n```\ngo get \"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/automanage/armautomanage\"\ngo get \"github.com/Azure/azure-sdk-for-go/sdk/azidentity\"\n```\n\n----------------------------------------\n\nTITLE: Version 1.0.0 Initial Release\nDESCRIPTION: Initial release implementing next generation design principles with breaking changes, includes migration guide reference.\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.0 (2022-05-18)\n\nThe package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/powerbiprivatelinks/armpowerbiprivatelinks` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html) since version 1.0.0, which contains breaking changes.\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Data Lake Storage Module\nDESCRIPTION: Command to install the Azure Data Lake Storage module using Go modules\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/datalake-store/armdatalakestore\n```\n\n----------------------------------------\n\nTITLE: Creating API Collections Client for Azure Security in Go\nDESCRIPTION: This code demonstrates how to create a specific client (APICollectionsClient) using the client factory. This client provides access to a set of related APIs for Azure Security operations.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewAPICollectionsClient()\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Trustedsigning Certificate Profiles Client in Go\nDESCRIPTION: This code demonstrates how to create a specific client for certificate profiles using the client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewCertificateProfilesClient()\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Management Groups Client Factory\nDESCRIPTION: Initializes a client factory for creating Management Groups clients with default options\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armmanagementgroups.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Client Options\nDESCRIPTION: Sets up client options for connecting to different Azure clouds including sovereign clouds and Azure Stack\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclient, err := armapicenter.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure using Default Credentials in Go\nDESCRIPTION: This snippet demonstrates how to create a default Azure credential using the azidentity package. It's used for authenticating with Azure services, including Resource Mover.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Lab Services Client Factory\nDESCRIPTION: Initializes a client factory for Azure Lab Services with subscription ID and credentials\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armdevtestlabs.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Credentials\nDESCRIPTION: Creates default Azure credentials for authentication with Azure Health Bot services using azidentity module.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Factory with Custom Options\nDESCRIPTION: Creates a client factory with custom options for connecting to different Azure clouds.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armdevhub.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: New Enum Type Addition\nDESCRIPTION: Addition of new enum types for custom domain identity and validation\n\nLANGUAGE: go\nCODE:\n```\nNew enum type `CustomDomainIdentityType` with values `CustomDomainIdentityTypeSystemAssigned`, `CustomDomainIdentityTypeUserAssigned`\nNew enum type `CustomDomainValidationState` with values `CustomDomainValidationStateApproved`, `CustomDomainValidationStateErrorRetrievingDNSRecord`, `CustomDomainValidationStatePending`\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Kubernetes Fleet Auto Upgrade Profiles Client in Go\nDESCRIPTION: This code demonstrates how to create a specific client (AutoUpgradeProfilesClient) using the previously created client factory. This client provides access to auto upgrade profile-related APIs.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewAutoUpgradeProfilesClient()\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Springappdiscovery Client for Sovereign Clouds in Go\nDESCRIPTION: This snippet shows how to configure the client factory for use with sovereign clouds or Azure Stack. It uses ClientOptions to set the endpoint for the desired cloud.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armspringappdiscovery.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Liftr Qumulo Module\nDESCRIPTION: Command to install the Azure Liftr Qumulo module using Go modules package management\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/liftrqumulo/armqumulo/v2\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Managed Services SDK\nDESCRIPTION: Command to install the Azure Managed Services Go module using go get\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/managedservices/armmanagedservices\n```\n\n----------------------------------------\n\nTITLE: Adding New Field in Go Struct\nDESCRIPTION: Example of a new field added to an existing struct in version 6.3.0\n\nLANGUAGE: go\nCODE:\n```\ntype CloudServiceVaultCertificate struct {\n  // ... existing fields\n  IsBootstrapCertificate *bool `json:\"isBootstrapCertificate,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: New Features in IoT Firmware Defense SDK 1.0.0\nDESCRIPTION: New client interfaces and supporting types for managing firmware, crypto certificates, crypto keys, CVEs and other security features.\n\nLANGUAGE: go\nCODE:\n```\n// New enum types\ntype SummaryName string\nconst (\n  SummaryNameBinaryHardening SummaryName = \"BinaryHardening\"\n  SummaryNameCVE SummaryName = \"CVE\"\n  SummaryNameCryptoCertificate SummaryName = \"CryptoCertificate\"\n  SummaryNameCryptoKey SummaryName = \"CryptoKey\"\n  SummaryNameFirmware SummaryName = \"Firmware\"\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting AccessConnector in Go\nDESCRIPTION: Initiates an asynchronous operation to delete an AccessConnector resource. Returns a Poller for tracking the operation progress.\n\nLANGUAGE: go\nCODE:\n```\n*AccessConnectorsClient.BeginDelete(context.Context, string, string, *AccessConnectorsClientBeginDeleteOptions) (*runtime.Poller[AccessConnectorsClientDeleteResponse], error)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK Go Generation\nDESCRIPTION: YAML configuration for AutoRest to generate the Azure SDK for Go. It specifies the Azure ARM mode, required API specifications, license header, module version, and other settings for the alerts management package.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/6d2438481021a94793b07b226df06d5f3c61d51d/specification/alertsmanagement/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/6d2438481021a94793b07b226df06d5f3c61d51d/specification/alertsmanagement/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 0.10.0\nmodelerfour:\n  lenient-model-deduplication: true\ntag: package-2021-08\n```\n\n----------------------------------------\n\nTITLE: Creating a Specific Azure Authorization Client in Go\nDESCRIPTION: This code demonstrates how to create a specific client (PermissionsClient) using the client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewPermissionsClient()\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Windows IoT Module in Go\nDESCRIPTION: Command to install the Azure Windows IoT module using Go's package manager. This step is necessary to use the module in your Go project.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/windowsiot/armwindowsiot\n```\n\n----------------------------------------\n\nTITLE: Installing Azure DevOps Infrastructure Module in Go\nDESCRIPTION: This command installs the Azure DevOps Infrastructure module using Go's package manager. It requires Go modules for versioning and dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/devopsinfrastructure/armdevopsinfrastructure\n```\n\n----------------------------------------\n\nTITLE: Installing Azure IoTOperations Go Module\nDESCRIPTION: Command to install the Azure IoTOperations module using Go modules for dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/iotoperations/armiotoperations\n```\n\n----------------------------------------\n\nTITLE: Go Type Changes in Azure Network Functions SDK\nDESCRIPTION: Type modifications in version 2.0.0 affecting CollectorPolicies and SystemData fields along with struct removals.\n\nLANGUAGE: go\nCODE:\n```\ntype AzureTrafficCollectorPropertiesFormat struct {\n    CollectorPolicies []*ResourceReference  // Changed from []*CollectorPolicy\n}\n\ntype CollectorPolicy struct {\n    SystemData *TrackedResourceSystemData  // Changed from *CollectorPolicySystemData\n    Location string                        // New field\n    Tags map[string]string                 // New field\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Test Base for M365 Module in Go\nDESCRIPTION: This snippet demonstrates how to install the Azure Test Base for M365 module using Go's package manager. It requires Go modules for versioning and dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/testbase/armtestbase\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Purview Accounts Client\nDESCRIPTION: Creates a new accounts client instance using the client factory\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewAccountsClient()\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Storage Client Options for Different Clouds in Go\nDESCRIPTION: This snippet shows how to set client options to connect with different Azure clouds, including sovereign clouds and Azure Stack.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armstorage.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Creating DNS Forwarding Ruleset Client in Go\nDESCRIPTION: Instantiates a new DNS Forwarding Ruleset client using the client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewDNSForwardingRulesetsClient()\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Resource Manager Go SDK Generation\nDESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure Resource Manager Go SDK. It specifies the Azure ARM mode, required API specifications, license header, module version, and package settings.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/91bfc0d02eaed75e6a3bfb5b9b150c84c79400ed/specification/resources/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/91bfc0d02eaed75e6a3bfb5b9b150c84c79400ed/specification/resources/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 2.0.0\npackage-resources: true\ntag: package-resources-2024-11\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Resource Health Client for Sovereign Clouds in Go\nDESCRIPTION: Sets up a client factory with options for connecting to sovereign clouds or Azure Stack.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armresourcehealth.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Creating Pager for Deleted Workbooks in Go\nDESCRIPTION: This method creates a new pager for listing deleted workbooks by subscription in the Azure SDK for Go. It returns a runtime.Pager that can be used to iterate through the results.\n\nLANGUAGE: go\nCODE:\n```\n*DeletedWorkbooksClient.NewListBySubscriptionPager(*DeletedWorkbooksClientListBySubscriptionOptions) *runtime.Pager[DeletedWorkbooksClientListBySubscriptionResponse]\n```\n\n----------------------------------------\n\nTITLE: Installing Azure IoT Hub Module\nDESCRIPTION: Command to install the Azure IoT Hub module using Go modules for dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/iothub/armiothub\n```\n\n----------------------------------------\n\nTITLE: Removing moduleName and moduleVersion Constants\nDESCRIPTION: YAML directive to remove moduleName and moduleVersion constants from the constants.go file.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: constants.go\n    where: $\n    transform: return $.replace(/const \\(\\n\\s+moduleName.+\\n\\s+moduleVersion.+\\n\\)\\n/, \"\");\n```\n\n----------------------------------------\n\nTITLE: Function Signature Changes in Go SDK\nDESCRIPTION: New function signatures added in version 1.2.0 for managing Grafana and private endpoints\n\nLANGUAGE: go\nCODE:\n```\nNewManagedPrivateEndpointsClient(string, azcore.TokenCredential, *arm.ClientOptions) (*ManagedPrivateEndpointsClient, error)\n*GrafanaClient.CheckEnterpriseDetails(context.Context, string, string, *GrafanaClientCheckEnterpriseDetailsOptions) (GrafanaClientCheckEnterpriseDetailsResponse, error)\n*GrafanaClient.FetchAvailablePlugins(context.Context, string, string, *GrafanaClientFetchAvailablePluginsOptions) (GrafanaClientFetchAvailablePluginsResponse, error)\n```\n\n----------------------------------------\n\nTITLE: New Build API Functions\nDESCRIPTION: Example of new builder client functions added in version 3.1.0-beta.1\n\nLANGUAGE: go\nCODE:\n```\nNewBuildersClient(string, azcore.TokenCredential, *arm.ClientOptions) (*BuildersClient, error)\n*BuildersClient.BeginCreateOrUpdate(context.Context, string, string, BuilderResource, *BuildersClientBeginCreateOrUpdateOptions) (*runtime.Poller[BuildersClientCreateOrUpdateResponse], error)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Marketplace Module for Go\nDESCRIPTION: This command installs the Azure Marketplace module using Go's package manager. It requires Go modules for versioning and dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/marketplace/armmarketplace\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Client Options for Different Clouds in Go\nDESCRIPTION: Example of how to set client options to connect to different Azure clouds, including sovereign clouds and Azure Stack.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armresources.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Container Orchestrator Runtime Module in Go\nDESCRIPTION: This command installs the Azure Container Orchestrator Runtime module using Go's package manager.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/containerorchestratorruntime/armcontainerorchestratorruntime\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure RedHat Open Shift Client for Different Clouds in Go\nDESCRIPTION: Set up the client factory with options to connect to different Azure clouds, including sovereign clouds and Azure Stack.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armredhatopenshift.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest Settings for Azure SDK Go Generation\nDESCRIPTION: YAML configuration for AutoRest that specifies Azure ARM mode, required API specifications from Azure REST API specs repository, Microsoft MIT license header requirement, and module version 0.7.0.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/testbase/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/testbase/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 0.7.0\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure Default Credentials\nDESCRIPTION: Creates default Azure credentials for authentication with Azure services.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Creating a Data Lake Store Accounts Client in Go\nDESCRIPTION: This code demonstrates how to create a specific client (Data Lake Store Accounts) using the previously created client factory. This client provides access to related APIs.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewDataLakeStoreAccountsClient()\n```\n\n----------------------------------------\n\nTITLE: Breaking Change Example in Go\nDESCRIPTION: Example of a breaking change in function signature from version 0.3.0\n\nLANGUAGE: go\nCODE:\n```\n// Old\nNewPipelineJobOperationStatusesClient returns (*PipelineJobOperationStatusesClient)\n\n// New\nNewPipelineJobOperationStatusesClient returns (*PipelineJobOperationStatusesClient, error)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Resource Health Module in Go\nDESCRIPTION: Command to install the Azure Resource Health module using Go modules.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resourcehealth/armresourcehealth\n```\n\n----------------------------------------\n\nTITLE: Creating New Client Functions in Go\nDESCRIPTION: New client functions added in version 4.1.0 for managing routing info and SIM groups.\n\nLANGUAGE: go\nCODE:\n```\nfunc (*ClientFactory) NewRoutingInfoClient() *RoutingInfoClient\n\nfunc NewRoutingInfoClient(string, azcore.TokenCredential, *arm.ClientOptions) (*RoutingInfoClient, error)\n\nfunc (*RoutingInfoClient) Get(context.Context, string, string, *RoutingInfoClientGetOptions) (RoutingInfoClientGetResponse, error)\n\nfunc (*RoutingInfoClient) NewListPager(string, string, *RoutingInfoClientListOptions) *runtime.Pager[RoutingInfoClientListResponse]\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Confidential Ledger Module\nDESCRIPTION: Command to install the Azure Confidential Ledger module using Go modules.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/confidentialledger/armconfidentialledger\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure Impactreporting Connectors Client\nDESCRIPTION: Creates a specific client instance for accessing Azure Impactreporting Connectors API functionality.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewConnectorsClient()\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Credentials\nDESCRIPTION: Creates default Azure credentials for authentication using the azidentity module.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Data Box Edge Users Client in Go\nDESCRIPTION: Shows how to create a specific client (Users Client) from the client factory. This client can be used to perform operations related to users in Azure Data Box Edge.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewUsersClient()\n```\n\n----------------------------------------\n\nTITLE: Creating Specific Azure Maintenance Client in Go\nDESCRIPTION: This code demonstrates how to create a specific client for Apply Update operations on a resource group using the client factory. Each client provides access to a set of related APIs.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewApplyUpdateForResourceGroupClient()\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Windows IoT Azure SDK Generation\nDESCRIPTION: YAML configuration for AutoRest to generate the Windows IoT SDK. Specifies Azure ARM mode, references to API specifications, Microsoft MIT license requirement, and module version 1.2.0.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/windowsiot/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/windowsiot/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.2.0\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest Settings for Azure SDK Go Generation\nDESCRIPTION: Defines AutoRest configuration parameters for generating Go SDK code from Azure REST API specifications. Specifies the source API specs, licensing, module version, and enables deployment scripts functionality.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/resources/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/resources/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 2.1.0\npackage-deploymentscripts: true\n```\n\n----------------------------------------\n\nTITLE: Reconciling NetworkSecurityPerimeter Configuration in Go\nDESCRIPTION: Initiates an asynchronous operation to reconcile the network security perimeter configuration.\n\nLANGUAGE: Go\nCODE:\n```\npoller, err := client.BeginReconcileConfiguration(ctx, resourceGroupName, accountName, configurationName, options)\n```\n\n----------------------------------------\n\nTITLE: Breaking Function Parameter Change\nDESCRIPTION: Example of function parameter type changes in the Client CreateOrUpdate method.\n\nLANGUAGE: go\nCODE:\n```\n// Old signature\nCreateOrUpdate(context.Context, string, string, string, NotificationHubCreateOrUpdateParameters, *ClientCreateOrUpdateOptions)\n\n// New signature\nCreateOrUpdate(context.Context, string, string, string, NotificationHubResource, *ClientCreateOrUpdateOptions)\n```\n\n----------------------------------------\n\nTITLE: Creating Customer Insights Hubs Client\nDESCRIPTION: Initialize a new Hubs client instance using the client factory\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewHubsClient()\n```\n\n----------------------------------------\n\nTITLE: Creating Customer Insights Hubs Client\nDESCRIPTION: Initialize a new Hubs client instance using the client factory\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewHubsClient()\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Service Bus Client Options in Go\nDESCRIPTION: Sets up client options for connecting to different Azure clouds including sovereign clouds and Azure Stack.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armservicebus.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure CDN Module with Go\nDESCRIPTION: Command to install the Azure CDN module using Go modules package management system.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/cdn/armcdn/v2\n```\n\n----------------------------------------\n\nTITLE: Documenting New Features in Markdown for Azure SDK Go Qumulo Module v2.0.0\nDESCRIPTION: Describes a new field added to the MarketplaceDetails struct in version 2.0.0.\n\nLANGUAGE: markdown\nCODE:\n```\n### Features Added\n\n- New field `TermUnit` in struct `MarketplaceDetails`\n```\n\n----------------------------------------\n\nTITLE: Creating an iSCSI Disks Client for Azure StorSimple 1200 Series in Go\nDESCRIPTION: This code demonstrates how to create a specific client for iSCSI disk operations using the previously created client factory. This client can be used to perform operations related to iSCSI disks in Azure StorSimple 1200 Series.\n\nLANGUAGE: Go\nCODE:\n```\nclient := clientFactory.NewIscsiDisksClient()\n```\n\n----------------------------------------\n\nTITLE: Breaking Changes in Version 4.0.0\nDESCRIPTION: Type changes and removals of structs, fields and functions\n\nLANGUAGE: go\nCODE:\n```\n// Type changes\nComputeStartStopSchedule.Cron *CronTrigger -> *Cron\nComputeStartStopSchedule.Recurrence *RecurrenceTrigger -> *Recurrence\nComputeStartStopSchedule.TriggerType *TriggerType -> *ComputeTriggerType\n\n// Removed structs\nstruct AmlOperation\nstruct AmlOperationDisplay\nstruct AmlOperationListResult\n\n// Removed fields\nField AmlOperationListResult of struct OperationsClientListResponse\nField SubnetArmID of struct PrivateEndpoint\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure using Default Azure Credential in Go\nDESCRIPTION: This code demonstrates how to create a default Azure credential for authentication. It uses the azidentity module to provide various authentication methods with Azure.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Client Options for Different Clouds in Go\nDESCRIPTION: This code demonstrates how to set up client options for connecting to different Azure clouds, including sovereign clouds and Azure Stack.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armoperationsmanagement.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Azure Pipeline Resource Management\nDESCRIPTION: YAML configuration for managing test resources in Azure Pipelines CI/CD.\n\nLANGUAGE: yaml\nCODE:\n```\n- template: /eng/common/TestResources/deploy-test-resources.yml\n  parameters:\n    ServiceDirectory: '${{ parameters.ServiceDirectory }}'\n\n# Run tests\n\n- template: /eng/common/TestResources/remove-test-resources.yml\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Time Series Insights Client for Sovereign Clouds in Go\nDESCRIPTION: This snippet shows how to configure the client factory to connect to sovereign clouds or Azure Stack using ClientOptions.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armtimeseriesinsights.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Recovery Services Backup SDK Generation\nDESCRIPTION: This YAML configuration specifies settings for AutoRest to generate the Azure SDK for Go. It sets the Azure ARM flag, required API specifications, license header, module version, and API version tag.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/33c4457b1d13f83965f4fe3367dca4a6df898100/specification/recoveryservicesbackup/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/33c4457b1d13f83965f4fe3367dca4a6df898100/specification/recoveryservicesbackup/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 4.1.0\ntag: package-2024-04\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Edge Order Partner Module\nDESCRIPTION: Command to install the Azure Edge Order Partner module using Go modules package management\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/edgeorderpartner/armedgeorderpartner\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Data Manager Service Module for Go\nDESCRIPTION: This command installs the Azure Data Manager Service module using Go's package manager. It requires Go modules for versioning and dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/hybriddatamanager/armhybriddatamanager\n```\n\n----------------------------------------\n\nTITLE: Breaking Changes in IoT Firmware Defense SDK 1.0.0\nDESCRIPTION: Major type changes converting various flag enums to boolean types and removal of structs and functions in favor of new client structure.\n\nLANGUAGE: go\nCODE:\n```\n// Type changes\nBinaryHardeningFeatures.Canary *bool\nBinaryHardeningFeatures.Nx *bool\nBinaryHardeningFeatures.Pie *bool\nBinaryHardeningFeatures.Relro *bool\nBinaryHardeningFeatures.Stripped *bool\nCryptoCertificate.IsExpired *bool\nCryptoCertificate.IsSelfSigned *bool\nCryptoCertificate.IsShortKeySize *bool\nCryptoCertificate.IsWeakSignature *bool\nCryptoKey.IsShortKeySize *bool\nFirmwareProperties.StatusMessages []*StatusMessage\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Data Catalog Module in Go\nDESCRIPTION: This command installs the Azure Data Catalog module using Go's package manager. It requires Go modules for versioning and dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/datacatalog/armdatacatalog\n```\n\n----------------------------------------\n\nTITLE: Creating Organizations Client\nDESCRIPTION: Creates a new Organizations client instance using the client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewOrganizationsClient()\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure using Default Credentials in Go\nDESCRIPTION: This snippet demonstrates how to create default Azure credentials for authentication.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Client Options for Different Clouds\nDESCRIPTION: Sets up client options for connecting to different Azure clouds including sovereign clouds and Azure Stack.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armchaos.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Options for Different Clouds\nDESCRIPTION: Sets up client options to connect with different Azure clouds including sovereign clouds and Azure Stack.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armwebpubsub.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Resources Module in Go\nDESCRIPTION: This snippet shows how to install the Azure Resources module using Go modules.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armdeploymentstacks\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Private 5G Core Client Factory in Go\nDESCRIPTION: Initializes a client factory for Azure Private 5G Core services. This factory can be used to create specific clients for different operations within the module.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armmobilenetwork.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Customer Lockbox Module\nDESCRIPTION: Command to install the Azure Customer Lockbox module using Go modules package manager.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/customerlockbox/armcustomerlockbox\n```\n\n----------------------------------------\n\nTITLE: New Type Declarations in Go\nDESCRIPTION: New struct and enum type declarations for Container Service Fleet functionality\n\nLANGUAGE: Go\nCODE:\n```\ntype AutoUpgradeNodeImageSelection struct {}\ntype AutoUpgradeProfile struct {}\ntype AutoUpgradeProfileListResult struct {}\ntype AutoUpgradeProfileProperties struct {}\n```\n\n----------------------------------------\n\nTITLE: New Type Declarations in Go\nDESCRIPTION: New struct and enum type declarations for Container Service Fleet functionality\n\nLANGUAGE: Go\nCODE:\n```\ntype AutoUpgradeNodeImageSelection struct {}\ntype AutoUpgradeProfile struct {}\ntype AutoUpgradeProfileListResult struct {}\ntype AutoUpgradeProfileProperties struct {}\n```\n\n----------------------------------------\n\nTITLE: Creating Grafana Client for Azure Dashboard in Go\nDESCRIPTION: This snippet shows how to create a Grafana client using the client factory for the Azure Dashboard module.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewGrafanaClient()\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Bot Service Module with Go\nDESCRIPTION: Command to install the Azure Bot Service module using Go modules package management\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/botservice/armbotservice\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK Generation in Go\nDESCRIPTION: This YAML configuration sets up AutoRest for generating the Azure SDK for Go. It specifies the Azure ARM mode, required API specifications, license header, module version, and API version tag.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/0d41e635294dce73dfa99b07f3da4b68a9c9e29c/specification/graphservicesprod/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/0d41e635294dce73dfa99b07f3da4b68a9c9e29c/specification/graphservicesprod/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.1.0\ntag: package-2023-04-13\n```\n\n----------------------------------------\n\nTITLE: Creating ClientFactory Struct in Go for Azure Device Provisioning Services\nDESCRIPTION: Introduces a new struct 'ClientFactory' which serves as a client factory for creating any client in the Device Provisioning Services module.\n\nLANGUAGE: Go\nCODE:\n```\nClientFactory\n```\n\n----------------------------------------\n\nTITLE: Modifying FileSystemClient Methods\nDESCRIPTION: YAML directive to remove pager methods and export various generated methods in the filesystem client.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: zz_filesystem_client.go\n    where: $\n    transform: >\n      return $.\n        replace(/func \\(client \\*FileSystemClient\\) NewListBlobHierarchySegmentPager\\(.+\\/\\/ listBlobHierarchySegmentCreateRequest creates the ListBlobHierarchySegment request/s, `//\\n// ListBlobHierarchySegmentCreateRequest creates the ListBlobHierarchySegment request`).\n        replace(/\\(client \\*FileSystemClient\\) listBlobHierarchySegmentCreateRequest\\(/, `(client *FileSystemClient) ListBlobHierarchySegmentCreateRequest(`).\n        replace(/\\(client \\*FileSystemClient\\) listBlobHierarchySegmentHandleResponse\\(/, `(client *FileSystemClient) ListBlobHierarchySegmentHandleResponse(`);\n```\n\n----------------------------------------\n\nTITLE: Profile Builder File Input Example\nDESCRIPTION: Example of using Profile Builder with input from a text file\n\nLANGUAGE: bash\nCODE:\n```\ncat myProfileDefinition.txt | profileBuilder list\n```\n\n----------------------------------------\n\nTITLE: Initializing ChatTranscriptsClient in Go\nDESCRIPTION: Creates a new ChatTranscriptsClient using the provided subscription ID, token credential, and optional client options.\n\nLANGUAGE: go\nCODE:\n```\nNewChatTranscriptsClient(string, azcore.TokenCredential, *arm.ClientOptions) (*ChatTranscriptsClient, error)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Neon Postgres Module with Go\nDESCRIPTION: Command to install the Azure Neon Postgres module using Go modules dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/neonpostgres/armneonpostgres\n```\n\n----------------------------------------\n\nTITLE: Initializing BackupInstancesExtensionRoutingClient in Go\nDESCRIPTION: Creates a new BackupInstancesExtensionRoutingClient using a token credential and optional client options.\n\nLANGUAGE: Go\nCODE:\n```\nNewBackupInstancesExtensionRoutingClient(azcore.TokenCredential, *arm.ClientOptions) (*BackupInstancesExtensionRoutingClient, error)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Data Box Edge Module with Go\nDESCRIPTION: Command to install the Azure Data Box Edge module using Go's package manager. This step is required to use the module in your Go project.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/databoxedge/armdataboxedge\n```\n\n----------------------------------------\n\nTITLE: Creating SQL Server Instance Client\nDESCRIPTION: Creates a new SQL Server Instances client using the previously initialized client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewSQLServerInstancesClient()\n```\n\n----------------------------------------\n\nTITLE: Creating a ClientFactory for Azure Resources in Go\nDESCRIPTION: Initializes a new client factory for the Azure Resources module, which can be used to create specific clients.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armchanges.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Change Analysis Client in Go\nDESCRIPTION: This snippet shows how to create a specific client for Azure Change Analysis using the client factory. It provides access to related APIs for change analysis functionality.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewChangesClient()\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure Machine Learning Services Quotas Client in Go\nDESCRIPTION: This code creates a new QuotasClient for Azure Machine Learning Services, using the provided subscription ID and credentials.\n\nLANGUAGE: go\nCODE:\n```\nclient, err := armmachinelearningservices.NewQuotasClient(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Developer Hub Service Client\nDESCRIPTION: Instantiates a new Developer Hub service client from the client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewDeveloperHubServiceClient()\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Power BI Private Links Client Factory in Go\nDESCRIPTION: Demonstrates how to create a client factory for Azure Power BI Private Links. The factory is used to create specific clients for different API operations.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armpowerbiprivatelinks.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest Settings for Azure Attestation SDK Generation\nDESCRIPTION: Defines the configuration parameters for AutoRest to generate the Azure Attestation SDK. Specifies ARM mode, references the REST API specifications, sets the license header type, and defines the module version as 1.2.0.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/attestation/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/attestation/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.2.0\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Maintenance Client Factory in Go\nDESCRIPTION: This code creates a client factory for Azure Maintenance services. It requires a subscription ID and credentials. The factory can be used to create specific clients for different maintenance operations.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armmaintenance.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Traffic Manager Module in Go\nDESCRIPTION: This snippet shows how to install the Azure Traffic Manager module using Go's package manager.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/trafficmanager/armtrafficmanager\n```\n\n----------------------------------------\n\nTITLE: Release Notes - Version 1.0.0\nDESCRIPTION: Breaking changes and feature additions in version 1.0.0 including enum renaming and introduction of new types and structs\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.0 (2024-10-22)\n### Breaking Changes\n\n- `NetworkAPIVersion20201101` from enum `NetworkAPIVersion` has been renamed to `NetworkAPIVersionV20201101`\n\n### Features Added\n\n- New enum type `AcceleratorManufacturer` with values `AcceleratorManufacturerAMD`, `AcceleratorManufacturerNvidia`, `AcceleratorManufacturerXilinx`\n- New enum type `AcceleratorType` with values `AcceleratorTypeFPGA`, `AcceleratorTypeGPU`\n- New enum type `ArchitectureType` with values `ArchitectureTypeARM64`, `ArchitectureTypeX64`\n- New enum type `CPUManufacturer` with values `CPUManufacturerAMD`, `CPUManufacturerAmpere`, `CPUManufacturerIntel`, `CPUManufacturerMicrosoft`\n- New enum type `LocalStorageDiskType` with values `LocalStorageDiskTypeHDD`, `LocalStorageDiskTypeSSD`\n- New enum type `VMAttributeSupport` with values `VMAttributeSupportExcluded`, `VMAttributeSupportIncluded`, `VMAttributeSupportRequired`\n- New enum type `VMCategory` with values `VMCategoryComputeOptimized`, `VMCategoryFpgaAccelerated`, `VMCategoryGeneralPurpose`, `VMCategoryGpuAccelerated`, `VMCategoryHighPerformanceCompute`, `VMCategoryMemoryOptimized`, `VMCategoryStorageOptimized`\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK Go Generation\nDESCRIPTION: This YAML configuration sets up AutoRest for generating the Azure SDK for Go. It specifies the Azure ARM mode, required API specifications, license header, and module version. The configuration points to the Agrifood resource manager specifications.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/a7af6049f4b4743ef3b649f3852bcc7bd9a43ee0/specification/agrifood/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/a7af6049f4b4743ef3b649f3852bcc7bd9a43ee0/specification/agrifood/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 0.9.0\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Time Series Insights Module for Go\nDESCRIPTION: This command installs the Azure Time Series Insights module using Go's package manager.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/timeseriesinsights/armtimeseriesinsights\n```\n\n----------------------------------------\n\nTITLE: Adding Deprecation Message to go.mod File in Go\nDESCRIPTION: This snippet shows how to add a deprecation message to the go.mod file. The message starts with '// Deprecated: ' followed by migration instructions.\n\nLANGUAGE: go\nCODE:\n```\n// Deprecated: use github.com/Azure/azure-sdk-for-go/sdk/monitor/ingestion/azlogs instead\nmodule github.com/Azure/azure-sdk-for-go/sdk/monitor/azingest\n\ngo 1.18\n```\n\n----------------------------------------\n\nTITLE: Pushing Combined Tags\nDESCRIPTION: Final command to push the combined tag results to the test proxy using the assets.json file.\n\nLANGUAGE: bash\nCODE:\n```\ntest-proxy push sdk/storage/azure-storage-blob/assets.json\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Billing Invoices Client\nDESCRIPTION: Creates a specific client instance for handling Azure Billing invoice operations.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewInvoicesClient()\n```\n\n----------------------------------------\n\nTITLE: Version 4.0.0 Breaking Changes\nDESCRIPTION: Breaking changes and new features introduced in version 4.0.0\n\nLANGUAGE: markdown\nCODE:\n```\n### Breaking Changes\n\n- Function `*OperationClient.Validate` parameter(s) have been changed\n- Function `*ValidateOperationClient.BeginTrigger` parameter(s) have been changed\n- Operation `*ProtectionContainersClient.Register` has been changed to LRO\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Backup Client for China Cloud in Go\nDESCRIPTION: This snippet demonstrates how to configure the Azure Backup client factory to connect to the Azure China cloud. It uses ClientOptions to specify the cloud endpoint.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armdataprotection.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Commerce Client for Sovereign Clouds in Go\nDESCRIPTION: This code demonstrates how to configure the Azure Commerce client factory to connect to sovereign clouds or Azure Stack. It uses ClientOptions to set the cloud endpoint.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armcommerce.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Commerce Client for Sovereign Clouds in Go\nDESCRIPTION: This code demonstrates how to configure the Azure Commerce client factory to connect to sovereign clouds or Azure Stack. It uses ClientOptions to set the cloud endpoint.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armcommerce.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Client with Custom Options\nDESCRIPTION: Creates a client factory with custom options for connecting to different Azure clouds\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armm365securityandcompliance.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure using Default Credentials in Go\nDESCRIPTION: This snippet demonstrates how to create a default Azure credential object for authentication. It uses the azidentity package to handle various authentication methods.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Specific Azure Container Apps Client in Go\nDESCRIPTION: This snippet shows how to create a specific client, in this case an AppResiliencyClient, using the previously created client factory. This client can be used to perform operations related to app resiliency in Container Apps.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewAppResiliencyClient()\n```\n\n----------------------------------------\n\nTITLE: Creating Storage Pool Client Factory\nDESCRIPTION: Initializes a client factory for creating Storage Pool service clients\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armstoragepool.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure IoT Security Devices Client in Go\nDESCRIPTION: Code snippet demonstrating how to create a specific client (Devices client) using the previously created client factory. This client provides access to device-related APIs.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewDevicesClient()\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Machine Learning Services SDK Generation\nDESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure Machine Learning Services SDK for Go. It specifies the ARM mode, required API specifications, license header, module version, and API version tag.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/9778042723206fbc582306dcb407bddbd73df005/specification/machinelearningservices/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/9778042723206fbc582306dcb407bddbd73df005/specification/machinelearningservices/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 4.0.0\ntag: package-2024-04\n```\n\n----------------------------------------\n\nTITLE: Release Notes Markdown\nDESCRIPTION: Markdown formatted release history showing version changes and feature additions across multiple releases. Documents support for test fakes, OpenTelemetry, and introduction of ClientFactory.\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 0.3.0 (2023-11-24)\n### Features Added\n\n- Support for test fakes and OpenTelemetry trace spans.\n\n\n## 0.2.0 (2023-03-31)\n### Features Added\n\n- New struct `ClientFactory` which is a client factory used to create any client in this module\n\n\n## 0.1.0 (2022-10-13)\n\nThe package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/securitydevops/armsecuritydevops` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html).\n\nTo learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).\n```\n\n----------------------------------------\n\nTITLE: Downloading Assets Migration Script - Bash\nDESCRIPTION: Downloads the generate-assets-json.ps1 script from Azure SDK tools repository using wget in Bash\n\nLANGUAGE: bash\nCODE:\n```\nwget https://raw.githubusercontent.com/Azure/azure-sdk-tools/main/eng/common/testproxy/onboarding/generate-assets-json.ps1 -o generate-assets-json.ps1\n```\n\n----------------------------------------\n\nTITLE: Creating Blockchain Members Client\nDESCRIPTION: Creates a specific client instance for working with blockchain members using the client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewMembersClient()\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Quantum Client Options\nDESCRIPTION: Demonstrates how to configure client options including cloud endpoints for Azure Quantum clients.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armquantum.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Automation Client for Sovereign Clouds in Go\nDESCRIPTION: This snippet shows how to configure the client factory to connect to sovereign clouds or Azure Stack. It uses ClientOptions to specify the cloud environment.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armautomation.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Creating Client Factory\nDESCRIPTION: Initializes a new client factory for Azure Pinecone Vectordb with subscription ID and credentials.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armpineconevectordb.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Client Options for Different Clouds in Go\nDESCRIPTION: Example of how to configure client options for connecting to different Azure clouds, such as Azure China. This allows for flexibility in targeting different Azure environments.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armwindowsiot.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Version 2.1.0 Release Notes\nDESCRIPTION: Added support for test fakes and OpenTelemetry trace spans.\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.1.0 (2023-11-24)\n### Features Added\n\n- Support for test fakes and OpenTelemetry trace spans.\n```\n\n----------------------------------------\n\nTITLE: Removing 'List' Suffix in Go Source Files\nDESCRIPTION: YAML directive to remove the 'List' suffix from 'QueueMessagesList' in Go source files.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: source-file-go\n    where: $\n    transform: >\n      return $.\n        replace(/QueueMessagesList/g, \"Messages\");\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Redis SDK Generation\nDESCRIPTION: YAML configuration for AutoRest tool to generate Azure Redis SDK. Specifies the ARM mode, required API specifications, license header, module version, and API version tag.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/45374f48f560b3337ed55735038f1e9bf8cbea65/specification/redis/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/45374f48f560b3337ed55735038f1e9bf8cbea65/specification/redis/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 3.3.0\ntag: package-2024-11\n```\n\n----------------------------------------\n\nTITLE: Creating Bot Service Client\nDESCRIPTION: Creates a new Bot Service client instance using the client factory\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewBotsClient()\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Blockchain Module\nDESCRIPTION: Command to install the Azure Blockchain module using Go modules package management system.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/blockchain/armblockchain\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK Go Generation\nDESCRIPTION: This YAML configuration specifies settings for AutoRest to generate the Azure SDK for Go. It includes references to Azure ARM specifications, licensing details, and module versioning information.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/0cc5e2efd6ffccf30e80d1e150b488dd87198b94/specification/resources/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/0cc5e2efd6ffccf30e80d1e150b488dd87198b94/specification/resources/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.2.0\npackage-changes: true\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest Settings for Azure DevTest Labs SDK Generation\nDESCRIPTION: YAML configuration that defines parameters for generating Azure DevTest Labs SDK code. Specifies Azure ARM mode, references to API specifications, Microsoft MIT license header requirement, and sets module version to 1.2.0.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/devtestlabs/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/devtestlabs/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.2.0\n```\n\n----------------------------------------\n\nTITLE: Updating CHANGELOG.md with Deprecation Notice in Markdown\nDESCRIPTION: This snippet demonstrates how to update the CHANGELOG.md file to include a deprecation notice for the latest version of the module.\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 0.1.2 (2024-03-13)\n\n### Other Changes\n* This module is now DEPRECATED. The latest supported version of this module is at [github.com/Azure/azure-sdk-for-go/sdk/monitor/ingestion/azlogs](https://pkg.go.dev/github.com/Azure/azure-sdk-for-go/sdk/monitor/ingestion/azlogs)\n\n## 0.1.1 (2023-10-11)\n```\n\n----------------------------------------\n\nTITLE: Creating Associations Interface Client\nDESCRIPTION: Creates a specific client instance for working with associations interfaces using the client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewAssociationsInterfaceClient()\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Healthcare APIs Module in Go\nDESCRIPTION: This command installs the Azure Healthcare APIs module using Go modules for dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/healthcareapis/armhealthcareapis/v2\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Dev Center Client Factory in Go\nDESCRIPTION: This snippet demonstrates how to create a client factory for Azure Dev Center. It requires a subscription ID and credentials, and returns a factory object for creating specific clients.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armdevcenter.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Dedicated HSM Client for Sovereign Clouds\nDESCRIPTION: This snippet shows how to configure the client factory to connect to sovereign clouds or Azure Stack using ClientOptions.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armhardwaresecuritymodules.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Creating Data Migration Services Client\nDESCRIPTION: Creates a specific client instance for accessing Data Migration services using the client factory\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewServicesClient()\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Standbypool Module with Go\nDESCRIPTION: This command installs the Azure Standbypool module using Go's package manager. It requires Go modules for versioning and dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/standbypool/armstandbypool\n```\n\n----------------------------------------\n\nTITLE: Creating Specific Azure Networkanalytics Client in Go\nDESCRIPTION: Code snippet demonstrating how to create a specific client (DataProductsCatalogsClient) using the client factory. This client can be used to interact with specific Azure Networkanalytics APIs.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewDataProductsCatalogsClient()\n```\n\n----------------------------------------\n\nTITLE: Release History Documentation in Markdown\nDESCRIPTION: Markdown formatted changelog tracking version history of the Azure OpenAI Assistants SDK for Go, including features, breaking changes, and bug fixes for each release version.\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 0.3.1 (Unreleased)\n\n### Features Added\n\n### Breaking Changes\n\n### Bugs Fixed\n\n### Other Changes\n\n## 0.3.0 (2024-12-03)\n\n### Features Added\n\n- Added support for the `ParallelToolCalls` option.\n\n### Breaking Changes\n\n- `MessageAttachmentToolAssignment` is now `MessageAttachmentToolDefinition`.\n\n## 0.2.1 (2024-09-10)\n\n### Features Added\n\n- Added support for the `FileSearch` tool definition.\n- Added `ChunkingStrategy` to vector store creation APIs.\n\n## 0.2.0 (2024-06-25)\n\n### Features Added\n\n- Now supports the Assistants V2 API, with support for vector stores as well as streaming.\n\n### Breaking Changes\n\n- Assistants V1 is no longer supported in this library. For information about how to migrate between V1 and V2, see OpenAI's migration documentation: [(link)](https://platform.openai.com/docs/assistants/migration).\n- Types that were suffixed with `Options` have been changed, if their name would conflict with the options for a method. For example: `AssistantsThreadCreationOptions`, the main argument for `CreateThread()`, has been changed to `CreateThreadBody`.\n\n## 0.1.1 (2024-05-07)\n\n### Bugs Fixed\n\n- ThreadRun.RequiredAction was deserialized incorrectly, making it impossible to actually resubmit a tool output. (PR#22834)\n## 0.1.0 (2024-03-05)\n\n* Initial release of the `azopenaiassistants` library\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Factory with Custom Options\nDESCRIPTION: Create a client factory with custom options for connecting to different Azure clouds\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armcustomerinsights.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Database for PostgreSQL HSC Servers Client in Go\nDESCRIPTION: Example of creating a specific client (ServersClient) using the client factory. This client provides access to server-related APIs.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewServersClient()\n```\n\n----------------------------------------\n\nTITLE: Configuring Client for Different Azure Clouds\nDESCRIPTION: Sets up client options for connecting to different Azure cloud environments like Azure China\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armoperationalinsights.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Factory with Custom Options\nDESCRIPTION: Creates a client factory with custom options for connecting to different Azure clouds using arm.ClientOptions\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armazuredata.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Managed Network Fabric Module with Go\nDESCRIPTION: Command to install the Azure Managed Network Fabric module using Go's package manager.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/managednetworkfabric/armmanagednetworkfabric\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure PowerBI Dedicated Go SDK\nDESCRIPTION: YAML configuration for AutoRest to generate the Azure PowerBI Dedicated SDK for Go. It references the PowerBI Dedicated REST API specifications, sets the module version to 1.2.0, and specifies Microsoft MIT license header usage.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/powerbidedicated/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/powerbidedicated/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.2.0\n```\n\n----------------------------------------\n\nTITLE: Version 2.0.0 Breaking Changes\nDESCRIPTION: Major version update with significant parameter changes to multiple client functions including PowerBIResources, PrivateEndpointConnections, and PrivateLinkResources clients.\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.0.0 (2023-04-03)\n### Breaking Changes\n\n- Function `NewPowerBIResourcesClient` parameter(s) have been changed from `(string, string, string, azcore.TokenCredential, *arm.ClientOptions)` to `(string, azcore.TokenCredential, *arm.ClientOptions)`\n[...]\n```\n\n----------------------------------------\n\nTITLE: Removing 'Queue' Prefix in Go Source Files\nDESCRIPTION: YAML directive to remove the 'Queue' prefix from 'QueueGeoReplicationStatus' in Go source files.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: source-file-go\n    where: $\n    transform: >\n      return $.\n        replace(/QueueGeoReplicationStatus/g, \"GeoReplicationStatus\");\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK Go Generation\nDESCRIPTION: This YAML configuration sets up AutoRest for generating the Azure SDK for Go. It specifies the Azure ARM flag, required specification files, license header, module version, and API version tag.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/c3cc9abe085093ba880ee3eeb792edb4fa789553/specification/help/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/c3cc9abe085093ba880ee3eeb792edb4fa789553/specification/help/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 2.0.0-beta.5\ntag: package-2024-03-01-preview\n```\n\n----------------------------------------\n\nTITLE: Accessing Raw HTTP Response from Azure Key Vault in Go\nDESCRIPTION: Example demonstrating how to capture and access the raw HTTP response from Key Vault operations.\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime\"\n\nvar response *http.Response\nctx := runtime.WithCaptureResponse(context.TODO(), &response)\n_, err = client.GetSecret(ctx, \"secretName\", nil)\nif err != nil {\n    // TODO: handle error\n}\n// TODO: do something with response\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK Go Generation\nDESCRIPTION: Defines configuration parameters for AutoRest to generate Go SDK code from Azure REST API specifications. Specifies the source API specs, license header type, module version, and package tag to use.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/cf5ad1932d00c7d15497705ad6b71171d3d68b1e/specification/fist/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/cf5ad1932d00c7d15497705ad6b71171d3d68b1e/specification/fist/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.0.0\ntag: package-2024-01-10\n```\n\n----------------------------------------\n\nTITLE: Removing Module Name and Version Constants\nDESCRIPTION: Directive to remove moduleName and moduleVersion constants from the constants.go file.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: constants.go\n    where: $\n    transform: return $.replace(/const \\(\\n\\s+moduleName.+\\n\\s+moduleVersion.+\\n\\)\\n/, \"\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Options for Different Clouds\nDESCRIPTION: Sets up client options for connecting to different Azure clouds, including sovereign clouds and Azure Stack.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armlabservices.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Springappdiscovery Error Summaries Client in Go\nDESCRIPTION: This code demonstrates how to create a specific client (ErrorSummariesClient) using the previously created client factory. This client provides access to a set of related APIs.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewErrorSummariesClient()\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK Go Generation\nDESCRIPTION: This YAML configuration specifies settings for AutoRest to generate the Azure SDK for Go. It includes ARM support, references to Azure Active Directory API specifications, licensing details, and module version information.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/azureactivedirectory/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/azureactivedirectory/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.2.0\n```\n\n----------------------------------------\n\nTITLE: Adding New Fields to Existing Structs in Go\nDESCRIPTION: Example of new fields added to existing structs in version 9.1.0\n\nLANGUAGE: Go\nCODE:\n```\ntype AzurePostgreSQLLinkedServiceTypeProperties struct {\n    CommandTimeout             *int32\n    Database                   *string\n    Encoding                   *string\n    Port                       *int32\n    ReadBufferSize             *int32\n    SSLMode                    *string\n    Server                     *string\n    Timeout                    *int32\n    Timezone                   *string\n    TrustServerCertificate     *bool\n    Username                   *string\n    // existing fields\n}\n```\n\n----------------------------------------\n\nTITLE: Running Infinite Send and Receive Test\nDESCRIPTION: Command to execute the basic infinite send and receive test that runs for multiple days\n\nLANGUAGE: bash\nCODE:\n```\ngo run . infiniteSendAndReceive\n```\n\n----------------------------------------\n\nTITLE: Removing moduleName and moduleVersion Constants\nDESCRIPTION: This YAML directive removes the moduleName and moduleVersion constants from the constants.go file using a regular expression replacement.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: constants.go\n    where: $\n    transform: return $.replace(/const \\(\\n\\s+moduleName.+\\n\\s+moduleVersion.+\\n\\)\\n/, \"\");\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure Databasewatcher Alert Rule Resources Client in Go\nDESCRIPTION: This code demonstrates how to create a specific client (AlertRuleResourcesClient) using the previously created client factory. This client provides access to Alert Rule-related APIs.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewAlertRuleResourcesClient()\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Sphere Catalogs Client in Go\nDESCRIPTION: This code demonstrates how to create a specific client (Catalogs Client) using the Azure Sphere client factory. This client can be used to perform operations related to Azure Sphere catalogs.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewCatalogsClient()\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest Settings for Azure Mobile Network SDK Generation\nDESCRIPTION: YAML configuration for AutoRest to generate Azure Mobile Network SDK. Specifies ARM mode, references to API specifications, license header type, module version 4.1.0, and targets package version 2024-04.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/d88c94b22a8efdd47c0cadfe6d8d489107db2b23/specification/mobilenetwork/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/d88c94b22a8efdd47c0cadfe6d8d489107db2b23/specification/mobilenetwork/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 4.1.0\ntag: package-2024-04\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Search Admin Keys Client in Go\nDESCRIPTION: This code demonstrates how to create a specific client (AdminKeysClient) using the client factory. This client can be used to perform operations related to admin keys in Azure Search.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewAdminKeysClient()\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Device Update SDK Generation in YAML\nDESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure Device Update SDK for Go. It specifies Azure ARM mode, required API specifications, license header, module version, and API version tag.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/b8c74fd80b415fa1ebb6fa787d454694c39e0fd5/specification/deviceupdate/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/b8c74fd80b415fa1ebb6fa787d454694c39e0fd5/specification/deviceupdate/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.3.0\ntag: package-2023-07-01\n```\n\n----------------------------------------\n\nTITLE: Creating Hierarchical PartitionKeys in Go for Azure Cosmos DB\nDESCRIPTION: API for creating Hierarchical PartitionKeys in the Azure SDK for Go Cosmos DB client. This feature was added in version 1.2.0.\n\nLANGUAGE: markdown\nCODE:\n```\n* Added API for creating Hierarchical PartitionKeys. See [PR 23577](https://github.com/Azure/azure-sdk-for-go/pull/23577)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Client Options for Different Clouds in Go\nDESCRIPTION: This code demonstrates how to configure client options for connecting to different Azure clouds, such as Azure China. It sets up ClientOptions with specific cloud settings before creating the client factory.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armreservations.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Creating Alert Processing Rules Client in Go\nDESCRIPTION: Initialize a specific client for alert processing rules using the client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewAlertProcessingRulesClient()\n```\n\n----------------------------------------\n\nTITLE: Creating Migration Discovery Client Factory\nDESCRIPTION: Initializes a client factory for creating Migration Discovery service clients with basic configuration.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armmigrationdiscoverysap.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Policy Client Factory\nDESCRIPTION: Initializes a client factory for Azure Resource Policy with subscription ID and credentials.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armpolicy.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Connected Cache Client Factory in Go\nDESCRIPTION: This code creates a new client factory for Azure Connected Cache operations. It requires a subscription ID and a credential object for authentication.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armconnectedcache.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Client Options for Sovereign Clouds in Go\nDESCRIPTION: Example of setting up client options to connect with sovereign clouds or Azure Stack. This uses the arm.ClientOptions struct to specify the cloud environment.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armpostgresqlhsc.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Power BI Dedicated SDK Module\nDESCRIPTION: Command to install the Azure Power BI Dedicated module using Go modules for dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/powerbidedicated/armpowerbidedicated\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest Settings for Azure Edge Order Partner SDK\nDESCRIPTION: YAML configuration for AutoRest that specifies the source API specifications, module version, and license settings for generating the Azure Edge Order Partner SDK for Go. References specific versions of API specs from the azure-rest-api-specs repository.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/edgeorderpartner/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/edgeorderpartner/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 0.7.0\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Using Default Credentials in Go\nDESCRIPTION: This code snippet shows how to create a default Azure credential object for authentication. It uses the NewDefaultAzureCredential function from the azidentity package to create a credential that can be used for authenticating with Azure services.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Upload File Request in Azure SDK for Go\nDESCRIPTION: This function creates an HTTP POST request for uploading a file to Azure. It sets up the request URL, headers, and multipart form data. The function takes context, file path, file purpose, and options as inputs and returns a policy.Request object or an error.\n\nLANGUAGE: Go\nCODE:\n```\n// uploadFileCreateRequest creates the UploadFile request.\nfunc (client *Client) uploadFileCreateRequest(ctx context.Context, file string, purpose FilePurpose, options *UploadFileOptions) (*policy.Request, error) {\n\turlPath := client.formatURL(\"/files\")\n\treq, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treq.Raw().Header[\"Accept\"] = []string{\"application/json\"}\n\tif err := runtime.SetMultipartFormData(req, map[string]any{\n\t\t\"file\":     file,\n\t\t\"purpose\":  purpose,\n\t\t\"Filename\": options.Filename,\n\t}); err != nil {\n\t\treturn nil, err\n\t}\n\treturn req, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Internal Import to Client Files\nDESCRIPTION: Directive to add an internal import statement to various client-related Go files.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from:\n      - \"*_client.go\"\n      - \"client.go\"\n      - \"client_factory.go\"\n    where: $\n    transform: return $.replace(/import \\(\\n/, \"import (\\n\\\"github.com/Azure/azure-sdk-for-go/profile/p20200901/internal\\\"\\n\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Cloud Options\nDESCRIPTION: Sets up client options for connecting to different Azure clouds including sovereign clouds and Azure Stack\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armextendedlocation.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK Generation in YAML\nDESCRIPTION: This YAML configuration specifies settings for AutoRest to generate the Azure SDK for Go. It sets the Azure ARM flag, includes required API specifications, defines the license header, and sets the module version.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/c71a66dab813061f1d09982c2748a09317fe0860/specification/securitydevops/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/c71a66dab813061f1d09982c2748a09317fe0860/specification/securitydevops/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 0.3.0\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Edge Order Management Client in Go\nDESCRIPTION: This code demonstrates how to create a specific Azure Edge Order management client using the previously created client factory. This client can be used to perform various Edge Order management operations.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewManagementClient()\n```\n\n----------------------------------------\n\nTITLE: Creating Fluidrelay Client Factory\nDESCRIPTION: Initializes a new client factory for Azure Fluidrelay services using subscription ID and credentials.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armfluidrelay.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Client Options\nDESCRIPTION: Sets up client options for connecting to different Azure clouds including sovereign clouds and Azure Stack.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armpolicy.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Creating Service Linker Client\nDESCRIPTION: Instantiates a new Linker client using the client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewLinkerClient()\n```\n\n----------------------------------------\n\nTITLE: Creating API Client Instance\nDESCRIPTION: Creates a new API client instance using the client factory to access Edge Order Partner services\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewAPISClient()\n```\n\n----------------------------------------\n\nTITLE: Documenting Release 0.3.0 Changes in Markdown\nDESCRIPTION: This snippet outlines the breaking changes and new features introduced in version 0.3.0 of the SDK, including changes to operation methods and struct fields.\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.3.0 (2024-12-27)\n### Breaking Changes\n\n- Operation `*NodeTypesClient.Update` has been changed to LRO, use `*NodeTypesClient.BeginUpdate` instead.\n- Field `CustomFqdn` of struct `ManagedClusterProperties` has been removed\n\n### Features Added\n\n- New field `AllocatedOutboundPorts` in struct `ManagedClusterProperties`\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Alerts Management Client for Sovereign Clouds in Go\nDESCRIPTION: Set up client options to connect to sovereign clouds or Azure Stack using the arm package.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armalertsmanagement.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Client Options in Go\nDESCRIPTION: This snippet demonstrates how to configure client options, including setting the cloud endpoint for sovereign clouds or Azure Stack.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armdashboard.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Creating Storage Cache Client Instance\nDESCRIPTION: Creates a new AML Filesystems client instance using the client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewAmlFilesystemsClient()\n```\n\n----------------------------------------\n\nTITLE: Release History Documentation in Markdown\nDESCRIPTION: Markdown formatted changelog documenting version releases from 0.1.0 to 3.1.1, including features added, breaking changes, bug fixes, and other modifications.\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 3.1.1 (Unreleased)\n\n### Features Added\n\n### Breaking Changes\n\n### Bugs Fixed\n\n### Other Changes\n\n## 3.1.0 (2024-07-19)\n### Other Changes\n* Use `sdk/internal` credential factory in tests\n* Deprecated `testutil.FakeCredential`\n\n## 3.0.0 (2024-05-31)\n\n### Features Added\n* Add `StartProxy` to help start and stop build-in test proxy for each module's test.\n\n### Breaking Changes\n* Remove `NewRecordingPolicy`, use `GetCredAndClientOptions` directly.\n\n### Other Changes\n* Updated dependencies.\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK Generation in YAML\nDESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure SDK for Go. It specifies the ARM mode, required specification files from the Azure REST API specs repository, license header type, module version, and the API version tag to use.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/475747ff6322e9bf180b8911d871561b264379c3/specification/workloads/resource-manager/Microsoft.Workloads/SAPDiscoverySites/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/475747ff6322e9bf180b8911d871561b264379c3/specification/workloads/resource-manager/Microsoft.Workloads/SAPDiscoverySites/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 0.1.0\ntag: package-preview-2023-10\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure Credentials\nDESCRIPTION: Creates default Azure credentials for authentication with Azure services using azidentity module.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Release Notes in Markdown\nDESCRIPTION: Markdown formatted changelog entries documenting version history, including feature additions, bug fixes, and breaking changes.\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.2.0 (2023-11-24)\n### Features Added\n\n- Support for test fakes and OpenTelemetry trace spans.\n\n\n## 1.1.1 (2023-04-14)\n### Bug Fixes\n\n- Fix serialization bug of empty value of `any` type.\n\n\n## 1.1.0 (2023-03-31)\n### Features Added\n\n- New struct `ClientFactory` which is a client factory used to create any client in this module\n\n\n## 1.0.0 (2022-05-18)\n\nThe package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/healthbot/armhealthbot` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html) since version 1.0.0, which contains breaking changes.\n\nTo migrate the existing applications to the latest version, please refer to [Migration Guide](https://aka.ms/azsdk/go/mgmt/migration).\n\nTo learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK for Go Generation\nDESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure SDK for Go. It specifies Azure ARM mode, required specification files, license header, module version, and the API version tag to use.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/80c21c17b4a7aa57f637ee594f7cfd653255a7e0/specification/kubernetesconfiguration/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/80c21c17b4a7aa57f637ee594f7cfd653255a7e0/specification/kubernetesconfiguration/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 2.2.0\ntag: package-2023-05\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Workload Monitor Module for Go\nDESCRIPTION: This command installs the Azure Workload Monitor module using Go's package manager. It fetches the module from the Azure SDK for Go repository.\n\nLANGUAGE: Shell\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/workloadmonitor/armworkloadmonitor\n```\n\n----------------------------------------\n\nTITLE: Documentation Notice in Markdown\nDESCRIPTION: A markdown notice explaining the proper process for updating the Common Engineering System directory and linking to relevant documentation.\n\nLANGUAGE: markdown\nCODE:\n```\n# Common Engineering System\n\nUpdates under this directory should only be made in the `azure-sdk-tools` repo as any changes under this directory outside of that repo will end up getting overwritten with future updates. For information about making updates see [common engineering system docs](https://github.com/Azure/azure-sdk-tools/blob/main/doc/common/common_engsys.md)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Storage Actions Go SDK\nDESCRIPTION: YAML configuration that defines the settings for AutoRest to generate Go SDK code for Azure Storage Actions. Specifies the API version, GitHub repository references, licensing, and module versioning.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/b43974e07d3204c4b6f8396627f5430994a7f7c9/specification/storageactions/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/b43974e07d3204c4b6f8396627f5430994a7f7c9/specification/storageactions/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 0.1.0\ntag: package-2023-01-01\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Traffic Manager SDK Generation in Go\nDESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure Traffic Manager SDK for Go. It specifies the Azure ARM mode, required API specifications, license header, module version, and API version tag.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/0d41e635294dce73dfa99b07f3da4b68a9c9e29c/specification/trafficmanager/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/0d41e635294dce73dfa99b07f3da4b68a9c9e29c/specification/trafficmanager/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.3.0\ntag: package-2022-04\n```\n\n----------------------------------------\n\nTITLE: Renaming createSnapshot to CreateSnapshot in Go Client\nDESCRIPTION: YAML directive to rename the 'createSnapshot' function to 'CreateSnapshot' in the generated Go client file. This ensures proper naming convention in the Go code.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: zz_azureappconfiguration_client.go\n  where: $\n  transform: >\n    return $.replace(/createSnapshot\\(/g, \"CreateSnapshot(\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Factory with Custom Options\nDESCRIPTION: Creates a client factory with custom options for connecting to different Azure clouds using ClientOptions.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armkubernetesconfiguration.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Client Options for Different Clouds in Go\nDESCRIPTION: This code shows how to set up client options for connecting to different Azure clouds, including sovereign clouds and Azure Stack. It demonstrates creating a ClientOptions struct with custom cloud settings and using it when creating a new client factory.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armvisualstudio.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Documenting Initial Release in Markdown for Azure SDK Go Qumulo Module v0.1.0\nDESCRIPTION: Provides information about the initial release of the Qumulo module, including design principles and documentation links.\n\nLANGUAGE: markdown\nCODE:\n```\nThe package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/liftrqumulo/armqumulo` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html).\n\nTo learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).\n```\n\n----------------------------------------\n\nTITLE: Enum Type Definitions in Go SDK\nDESCRIPTION: New enum types added in version 1.2.0 for managing various states and configurations\n\nLANGUAGE: go\nCODE:\n```\ntype AvailablePromotion string\ntype ManagedPrivateEndpointConnectionStatus string\ntype MarketplaceAutoRenew string\ntype StartTLSPolicy string\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Client Options for Different Clouds in Go\nDESCRIPTION: This snippet shows how to set client options to connect to different Azure clouds, including sovereign clouds and Azure Stack. It uses the arm.ClientOptions struct to configure the endpoint.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armcontainerservicefleet.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest Settings for HANA on Azure SDK Generation\nDESCRIPTION: YAML configuration that defines the settings for AutoRest code generation. It specifies Azure ARM mode, points to required API specifications from azure-rest-api-specs repository, sets Microsoft MIT license header without version, and defines module version 0.7.0.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/hanaonazure/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/hanaonazure/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 0.7.0\n```\n\n----------------------------------------\n\nTITLE: Updating Header Names for File Share Usage\nDESCRIPTION: YAML directive to update header names related to file share usage in response types and share client files.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: \n  - zz_response_types.go\n  - zz_share_client.go\n  where: $\n  transform: >\n    return $.\n      replaceAll(`XMSFileShareSnapshotUsageBytes`, `FileShareSnapshotUsageBytes`).\n      replaceAll(`XMSFileShareUsageBytes`, `FileShareUsageBytes`);\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Client Options for Different Clouds\nDESCRIPTION: Example of configuring client options for connecting to different Azure clouds, such as Azure China.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armserialconsole.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Creating Managed Network Client\nDESCRIPTION: Creates a new Managed Network client instance using the client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewManagedNetworksClient()\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Migrate SDK Generation\nDESCRIPTION: YAML configuration for AutoRest tool to generate Go SDK code. Specifies Azure ARM mode, references to REST API specifications, Microsoft MIT license header requirement, and sets module version to 0.1.0.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/dd668996bc8ba729784c02c7a99b6b0042612bb3/specification/migrate/resource-manager/Microsoft.Migrate/AssessmentProjects/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/dd668996bc8ba729784c02c7a99b6b0042612bb3/specification/migrate/resource-manager/Microsoft.Migrate/AssessmentProjects/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 0.1.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Logz Client for Sovereign Clouds\nDESCRIPTION: Creates a client factory with custom options for connecting to sovereign clouds like Azure China.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armlogz.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Factory with Custom Options\nDESCRIPTION: Creates a client factory with custom options for connecting to different Azure clouds using ClientOptions.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armscvmm.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Initializing Customer Insights Client Factory\nDESCRIPTION: Create a new client factory instance for Azure Customer Insights with subscription ID and credentials\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armcustomerinsights.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Creating StorSimple Client Factory\nDESCRIPTION: Initializes a client factory for creating StorSimple service clients using subscription ID and credentials.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armstorsimple8000series.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Package Reference Documentation in Markdown\nDESCRIPTION: Documentation reference showing the package path and links to additional resources for the Azure SDK for Go SAP Virtual Instance management package.\n\nLANGUAGE: markdown\nCODE:\n```\ngithub.com/Azure/azure-sdk-for-go/sdk/resourcemanager/workloadssapvirtualinstance/armworkloadssapvirtualinstance\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Dynatrace Client for Different Clouds in Go\nDESCRIPTION: This snippet shows how to configure the Azure Dynatrace client for different cloud environments. It uses ClientOptions to set the cloud to Azure China, demonstrating how to connect to sovereign clouds or Azure Stack.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armdynatrace.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Using Default Credentials in Go\nDESCRIPTION: This snippet demonstrates how to create a default Azure credential for authentication. It uses the azidentity module to provide various authentication methods.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Default Azure Credential in Go\nDESCRIPTION: Use the azidentity package to create a default Azure credential for authentication.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Mongocluster Client Factory in Go\nDESCRIPTION: This code creates a client factory for Azure Mongocluster services. It requires a subscription ID and credentials. The factory can be used to create specific clients for different Mongocluster operations.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armmongocluster.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Adding Internal Import Directive\nDESCRIPTION: AutoRest directive to add internal package import to client-related Go files.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from:\n      - \"*_client.go\"\n      - \"client.go\"\n      - \"client_factory.go\"\n    where: $\n    transform: return $.replace(/import \\(\\n/, \"import (\\n\\\"github.com/Azure/azure-sdk-for-go/profile/p20200901/internal\\\"\\n\");\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Purview SDK Generation\nDESCRIPTION: Defines the AutoRest configuration parameters for generating the Azure Purview SDK for Go. Specifies the ARM mode, required API specifications, license header type, and module version.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/purview/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/purview/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.2.0\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Service Fabric Mesh SDK Generation in Go\nDESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure Service Fabric Mesh SDK for Go. It specifies Azure ARM mode, required API specifications from GitHub, license header type, and the module version.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/servicefabricmesh/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/servicefabricmesh/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 0.6.2\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Addons Client Factory in Go\nDESCRIPTION: This code creates a client factory for Azure Addons. It requires a subscription ID and a credential object. The factory can be used to create specific clients for different Azure Addons operations.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armaddons.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Client Options for Different Clouds in Go\nDESCRIPTION: This code shows how to configure client options to connect to different Azure clouds, including sovereign clouds and Azure Stack. It uses the arm.ClientOptions struct to set the cloud endpoint.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armtestbase.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Creating Service Tiers Client\nDESCRIPTION: Creates a specific client instance for accessing available service tiers functionality\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewAvailableServiceTiersClient()\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure using Default Credentials in Go\nDESCRIPTION: This code snippet demonstrates how to create a default Azure credential object for authentication. It uses the azidentity package to create a DefaultAzureCredential, which can be used for authenticating with Azure services.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK for Go\nDESCRIPTION: This YAML configuration sets up AutoRest for generating the Azure SDK for Go. It enables Azure Resource Manager mode, specifies required API specifications, sets the license header, and defines the module version.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/969fd0c2634fbcc1975d7abe3749330a5145a97c/specification/monitor/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/969fd0c2634fbcc1975d7abe3749330a5145a97c/specification/monitor/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 0.11.0\n```\n\n----------------------------------------\n\nTITLE: Fixing GeoReplication Enum in Swagger\nDESCRIPTION: YAML directive to modify the GeoReplication definition in the Swagger document, updating the Status property's x-ms-enum.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.definitions\n  transform: >\n    delete $.GeoReplication.properties.Status[\"x-ms-enum\"];\n    $.GeoReplication.properties.Status[\"x-ms-enum\"] = {\n        \"name\": \"QueueGeoReplicationStatus\",\n        \"modelAsString\": false\n    };\n```\n\n----------------------------------------\n\nTITLE: New Client Factory Implementation\nDESCRIPTION: Introduction of ClientFactory struct for creating service clients\n\nLANGUAGE: go\nCODE:\n```\n// New client factory methods\nfunc (factory *ClientFactory) NewGuestAgentsClient() *GuestAgentsClient\nfunc (factory *ClientFactory) NewVMInstanceHybridIdentityMetadatasClient() *VMInstanceHybridIdentityMetadatasClient\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Datadog Marketplace Agreements Client in Go\nDESCRIPTION: This snippet shows how to create a specific client for marketplace agreements using the Azure Datadog client factory. It demonstrates the usage of the factory to access different API functionalities.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewMarketplaceAgreementsClient()\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Elastic Client for Different Clouds\nDESCRIPTION: Sets up client options for connecting to different Azure cloud environments, including sovereign clouds and Azure Stack.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armelastic.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Retrieving an Application Group in Go\nDESCRIPTION: This code snippet shows how to retrieve an Application Group using the ApplicationGroupClient in the Azure SDK for Go.\n\nLANGUAGE: go\nCODE:\n```\n*ApplicationGroupClient.Get(context.Context, string, string, string, *ApplicationGroupClientGetOptions) (ApplicationGroupClientGetResponse, error)\n```\n\n----------------------------------------\n\nTITLE: Creating Scheduled Actions Client\nDESCRIPTION: Instantiates a new scheduled actions client using the client factory for accessing compute schedule APIs.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewScheduledActionsClient()\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure SQL Database Client for Sovereign Clouds in Go\nDESCRIPTION: This code demonstrates how to configure the client factory to connect with public and sovereign clouds, including Azure Stack, using ClientOptions.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armsql.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Using Default Credentials in Go\nDESCRIPTION: Creates a default Azure credential object for authentication with Azure services.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: New Go Function Signatures\nDESCRIPTION: Function signatures for new Cost Management Go SDK APIs added in version 2.1.0\n\nLANGUAGE: go\nCODE:\n```\nNewBenefitRecommendationsClient(azcore.TokenCredential, *arm.ClientOptions) (*BenefitRecommendationsClient, error)\nNewBenefitUtilizationSummariesClient(azcore.TokenCredential, *arm.ClientOptions) (*BenefitUtilizationSummariesClient, error)\nNewGenerateCostDetailsReportClient(azcore.TokenCredential, *arm.ClientOptions) (*GenerateCostDetailsReportClient, error)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Cloud Options\nDESCRIPTION: Sets up client options for connecting to different Azure clouds including sovereign clouds\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armmediaservices.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Client Options\nDESCRIPTION: Sets up client options for connecting to different Azure clouds using the arm.ClientOptions configuration.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armazurearcdata.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest Settings for EventHub SDK Generation\nDESCRIPTION: Base configuration for AutoRest code generation including Azure ARM settings, module specifications, and required API specifications from the azure-rest-api-specs repository.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/53b1affe357b3bfbb53721d0a2002382a046d3b0/specification/eventhub/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/53b1affe357b3bfbb53721d0a2002382a046d3b0/specification/eventhub/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 0.1.0\nmodule-name: profile/p20200901/resourcemanager/eventhub/armeventhub\nmodule: github.com/Azure/azure-sdk-for-go/$(module-name)\noutput-folder: $(go-sdk-folder)/$(module-name)\ntag: profile-hybrid-2020-09-01\n```\n\n----------------------------------------\n\nTITLE: Base AutoRest Configuration for Azure Monitor\nDESCRIPTION: Primary configuration for generating Azure Monitor SDK code. Specifies Azure ARM requirements, source specifications, licensing, module details and output configuration.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/53b1affe357b3bfbb53721d0a2002382a046d3b0/specification/monitor/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/53b1affe357b3bfbb53721d0a2002382a046d3b0/specification/monitor/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 0.1.0\nmodule-name: profile/p20200901/resourcemanager/monitor/armmonitor\nmodule: github.com/Azure/azure-sdk-for-go/$(module-name)\noutput-folder: $(go-sdk-folder)/$(module-name)\ntag: profile-hybrid-2020-09-01\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Operations Management Client Factory in Go\nDESCRIPTION: This snippet shows how to create a client factory for Azure Operations Management, which can be used to create specific clients.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armoperationsmanagement.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Options for Different Clouds\nDESCRIPTION: Sets up client options for connecting to different Azure cloud environments including sovereign clouds\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armsecuritydevops.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure HDInsight Go SDK Generation\nDESCRIPTION: YAML configuration for AutoRest tool to generate Azure HDInsight SDK for Go. Specifies required API specifications from Azure REST API specs repository, sets module version to 1.3.0-beta.2, and includes a transformation directive for the Resource definition.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/aec83a5f0ed56da4fd16fa027b9fa27edfa8988b/specification/hdinsight/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/aec83a5f0ed56da4fd16fa027b9fa27edfa8988b/specification/hdinsight/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.3.0-beta.2\ndirective:\n- from: cluster.json\n  where: $.definitions.Resource\n  transform: >\n    $[\"title\"] = \"Resource\"\ntag: package-2024-08-preview\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Container Apps Client Factory in Go\nDESCRIPTION: This snippet demonstrates how to create a client factory for Azure Container Apps. It requires a subscription ID and a credential object. The factory can be used to create specific clients for different Container Apps operations.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armappcontainers.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Parsing RFC3339 Time in Go\nDESCRIPTION: Illustrates how to parse an RFC3339 formatted time string using the timeRFC3339 type.\n\nLANGUAGE: Go\nCODE:\n```\n*timeRFC3339.Parse(string) error\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Credentials\nDESCRIPTION: Creates default Azure credentials for authentication using the azidentity package\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Blob SDK Generation\nDESCRIPTION: YAML configuration for AutoRest to generate the Azure Blob SDK for Golang. It specifies input files, output settings, and various options for the code generation process.\n\nLANGUAGE: yaml\nCODE:\n```\ngo: true\nclear-output-folder: false\nversion: \"^3.0.0\"\nlicense-header: MICROSOFT_MIT_NO_VERSION\ninput-file: \"https://raw.githubusercontent.com/Azure/azure-rest-api-specs/ae95eb6a4701d844bada7d1c4f5ecf4a7444e5b8/specification/storage/data-plane/Microsoft.BlobStorage/stable/2025-01-05/blob.json\"\ncredential-scope: \"https://storage.azure.com/.default\"\noutput-folder: ../generated_blob\nfile-prefix: \"zz_\"\nopenapi-type: \"data-plane\"\nverbose: true\nsecurity: AzureKey\nmodeler-four:\n  group-parameters: false\n  seal-single-value-enum-by-default: true\n  lenient-model-deduplication: true\nexport-clients: true\nuse: \"@autorest/go@4.0.0-preview.65\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Client Options for Different Clouds in Go\nDESCRIPTION: This snippet shows how to configure client options for connecting to different Azure clouds. It demonstrates setting up options for Azure China cloud, which can be used when creating the client factory.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armcontainerinstance.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Container Instance Client Factory in Go\nDESCRIPTION: This code creates a client factory for Azure Container Instance services. It requires a subscription ID and a credential object. The resulting factory can be used to create specific clients for different Container Instance operations.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armcontainerinstance.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Union Type Transformations\nDESCRIPTION: Combines and transforms various union types for tool choices, response formats and other complex types\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: swagger-document\n    where: $.definitions\n    transform: |\n      $.AssistantsApiToolChoiceOption = {\n        \"x-ms-external\": true,\n        \"type\": \"object\",\n        \"properties\": { \"ignored\": { \"type\": \"string\" } },\n        \"x-ms-client-name\": \"AssistantsAPIToolChoiceOption\"\n      };\n```\n\n----------------------------------------\n\nTITLE: New Enum Type Definitions\nDESCRIPTION: New enumeration types added in version 1.0.0 to improve type safety\n\nLANGUAGE: go\nCODE:\n```\ntype ActionType string\nconst ActionTypeInternal ActionType = \"Internal\"\n\ntype ForceDelete string \nconst (\n  ForceDeleteFalse ForceDelete = \"False\"\n  ForceDeleteTrue ForceDelete = \"True\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest Generation Settings for Azure Go SDK\nDESCRIPTION: Defines the AutoRest configuration parameters for generating Go SDK code from Azure Resource Manager API specifications. Specifies the source API specs, licensing, versioning, and package settings for the policy package.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/9ec0fcc278aa2128c4fbb2b8a1aa93432d72cce0/specification/resources/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/9ec0fcc278aa2128c4fbb2b8a1aa93432d72cce0/specification/resources/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 0.9.0\npackage-policy: true\ntag: package-policy-2022-06\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Resources Client in Go\nDESCRIPTION: This snippet shows how to create a specific client using the client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewClient()\n```\n\n----------------------------------------\n\nTITLE: Updating moduleName and moduleVersion References in Client Constructor\nDESCRIPTION: Directive to replace moduleName and moduleVersion references with internal package references in client constructor files.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from:\n      - \"*_client.go\"\n      - \"client.go\"\n      - \"client_factory.go\"\n    where: $\n    transform: return $.replace(/moduleVersion/, \"internal.ModuleVersion\").replace(/moduleName\\+\"/, \"internal.ModuleName+\\\"/armdataboxedge\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Client Options for Sovereign Clouds in Go\nDESCRIPTION: This snippet shows how to configure client options for connecting to sovereign clouds or Azure Stack.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armnetworkfunction.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Creating or Updating a Container Group Profile in Go\nDESCRIPTION: Illustrates how to create or update a Container Group Profile using the ContainerGroupProfilesClient in the Azure SDK for Go. This method allows for configuring and deploying Container Group Profiles.\n\nLANGUAGE: Go\nCODE:\n```\n*ContainerGroupProfilesClient.CreateOrUpdate(context.Context, string, string, ContainerGroupProfile, *ContainerGroupProfilesClientCreateOrUpdateOptions) (ContainerGroupProfilesClientCreateOrUpdateResponse, error)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Credential in Go\nDESCRIPTION: This snippet demonstrates how to create a default Azure credential using the azidentity package. This credential is used for authenticating with Azure services.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Search Client for Sovereign Clouds in Go\nDESCRIPTION: This snippet shows how to configure the Azure Search client to connect to sovereign clouds or Azure Stack. It uses ClientOptions to set the cloud endpoint.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armsearch.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest Settings for Azure SDK Generation\nDESCRIPTION: Defines AutoRest configuration parameters including API specification sources, licensing, module version, and package tag. References specific versions of Azure REST API specifications and Go-specific configuration files.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/d4205894880b989ede35d62d97c8e901ed14fb5a/specification/liftrastronomer/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/d4205894880b989ede35d62d97c8e901ed14fb5a/specification/liftrastronomer/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 0.1.0\ntag: package-2023-08-01\n```\n\n----------------------------------------\n\nTITLE: Adding New OrganizationsClient Function in Go\nDESCRIPTION: New function added for OrganizationsClient to get Elastic to Azure subscription mapping.\n\nLANGUAGE: Go\nCODE:\n```\n*OrganizationsClient.GetElasticToAzureSubscriptionMapping(context.Context, *OrganizationsClientGetElasticToAzureSubscriptionMappingOptions) (OrganizationsClientGetElasticToAzureSubscriptionMappingResponse, error)\n```\n\n----------------------------------------\n\nTITLE: Creating Marketplace Agreements Client in Go\nDESCRIPTION: Code snippet demonstrating how to create a specific client (MarketplaceAgreementsClient) from the client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewMarketplaceAgreementsClient()\n```\n\n----------------------------------------\n\nTITLE: Changing CORS Acronym to All Caps\nDESCRIPTION: YAML directive to change the 'Cors' acronym to 'CORS' in all generated Go files.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: source-file-go\n    where: $\n    transform: >\n      return $.\n        replace(/Cors/g, \"CORS\");\n```\n\n----------------------------------------\n\nTITLE: Converting ShareUsageBytes to int64\nDESCRIPTION: YAML directive to convert ShareUsageBytes from int32 to int64 in the generated models.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: zz_models.go\n    where: $\n    transform: >\n      return $.\n        replace(/ShareUsageBytes\\s+\\*int32/g, `ShareUsageBytes *int64`);\n```\n\n----------------------------------------\n\nTITLE: Executing Tag Merge Script in PowerShell\nDESCRIPTION: Example command showing how to run the merge-proxy-tags script from the repository root to combine multiple proxy tags. The script takes an assets.json file path and multiple tag names as parameters.\n\nLANGUAGE: powershell\nCODE:\n```\ncd \"path/to/language/repo/root\"\n./eng/common/testproxy/scripts/tag-merge/merge-proxy-tags.ps1 sdk/storage/azure-storage-blob/assets.json integration/example/storage_feature_addition2 integration/example/storage_feature_addition1\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Client Options for Different Clouds in Go\nDESCRIPTION: This code demonstrates how to set client options to connect to different Azure clouds, including sovereign clouds and Azure Stack.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armtrafficmanager.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: HDInsight Client Library Function Declarations - Go\nDESCRIPTION: New function declarations for the ExtensionsClient type, including methods for managing Azure Monitor Agent and retrieving its status.\n\nLANGUAGE: go\nCODE:\n```\nfunc (client *ExtensionsClient) BeginDisableAzureMonitorAgent(context.Context, string, string, *ExtensionsClientBeginDisableAzureMonitorAgentOptions) (*runtime.Poller[ExtensionsClientDisableAzureMonitorAgentResponse], error)\n\nfunc (client *ExtensionsClient) BeginEnableAzureMonitorAgent(context.Context, string, string, AzureMonitorRequest, *ExtensionsClientBeginEnableAzureMonitorAgentOptions) (*runtime.Poller[ExtensionsClientEnableAzureMonitorAgentResponse], error)\n\nfunc (client *ExtensionsClient) GetAzureMonitorAgentStatus(context.Context, string, string, *ExtensionsClientGetAzureMonitorAgentStatusOptions) (ExtensionsClientGetAzureMonitorAgentStatusResponse, error)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Kubernetes Configuration Client Factory\nDESCRIPTION: Initializes a client factory for creating Azure Kubernetes Configuration clients with basic configuration.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armkubernetesconfiguration.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Service Fabric Managed Clusters SDK Generation in YAML\nDESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure Service Fabric Managed Clusters SDK for Go. It specifies the Azure ARM mode, required API specifications, license header, module version, and package tag.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/069a65e8a6d1a6c0c58d9a9d97610b7103b6e8a5/specification/servicefabricmanagedclusters/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/069a65e8a6d1a6c0c58d9a9d97610b7103b6e8a5/specification/servicefabricmanagedclusters/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 0.3.0\ntag: package-2024-09-preview\n```\n\n----------------------------------------\n\nTITLE: Adding Internal Import to Generated Client Files\nDESCRIPTION: This YAML directive adds an internal import to the generated client files, including *_client.go, client.go, and client_factory.go.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from:\n      - \"*_client.go\"\n      - \"client.go\"\n      - \"client_factory.go\"\n    where: $\n    transform: return $.replace(/import \\(\\n/, \"import (\\n\\\"github.com/Azure/azure-sdk-for-go/profile/p20200901/internal\\\"\\n\");\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK Go Generation\nDESCRIPTION: This YAML configuration sets up AutoRest for generating the Azure SDK for Go. It specifies the Azure ARM mode, required API specifications, license header, and module version for the Resource Graph service.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/resourcegraph/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/resourcegraph/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 0.9.0\n```\n\n----------------------------------------\n\nTITLE: Configuring SDK Generation Input in JSON\nDESCRIPTION: JSON configuration for the SDK generation process. It specifies the local spec folder, repository information, and related Typespec project folders.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dryRun\": false,\n  \"specFolder\": \"LOCAL_AZURE-REST-API-SPECS_REPO_ROOT\",\n  \"headSha\": \"SHA_OF_AZURE-REST-API-SPECS_REPO\",\n  \"repoHttpsUrl\": \"https://github.com/Azure/azure-rest-api-specs\",\n  \"relatedTypeSpecProjectFolder\": [\n    \"specification/SERVICE_DIRECTORY_NAME/PACKAGE_DIRECTORY_NAME/\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Load Testing Client for Sovereign Clouds in Go\nDESCRIPTION: Sets up client options for connecting to sovereign clouds or Azure Stack.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armloadtesting.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Peering Service Client Factory in Go\nDESCRIPTION: Initialize a client factory for Azure Peering Service using the subscription ID and credentials.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armpeering.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Storage Account with Azure CLI\nDESCRIPTION: Example command to create a new Azure Storage Account using the Azure CLI.\n\nLANGUAGE: powershell\nCODE:\n```\naz storage account create --name MyStorageAccount --resource-group MyResourceGroup --location westus --sku Standard_LRS\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Resource Mover Client Factory in Go\nDESCRIPTION: This code creates a client factory for Azure Resource Mover. It requires a subscription ID and a credential object. The factory can be used to create specific clients for Resource Mover operations.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armresourcemover.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Data Factory Go SDK Generation\nDESCRIPTION: YAML configuration for AutoRest that defines the settings for generating the Azure Data Factory SDK for Go. Specifies the API version as package-2018-06, requires the Azure REST API specs from GitHub, and sets the module version to 9.1.0.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/ab04533261eff228f28e08900445d0edef3eb70c/specification/datafactory/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/ab04533261eff228f28e08900445d0edef3eb70c/specification/datafactory/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 9.1.0\ntag: package-2018-06\n```\n\n----------------------------------------\n\nTITLE: Creating ListPager for BackupInstancesExtensionRoutingClient in Go\nDESCRIPTION: Creates a new ListPager for the BackupInstancesExtensionRoutingClient to iterate through list results.\n\nLANGUAGE: Go\nCODE:\n```\n*BackupInstancesExtensionRoutingClient.NewListPager(string, *BackupInstancesExtensionRoutingClientListOptions) *runtime.Pager[BackupInstancesExtensionRoutingClientListResponse]\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Migrate Module with Go\nDESCRIPTION: Command to install the Azure Migrate module using Go modules for dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/migrate/armmigrate\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Mongocluster Module in Go\nDESCRIPTION: This command installs the Azure Mongocluster module using Go's package manager. It retrieves the module from the specified GitHub repository.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/mongocluster/armmongocluster\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Client Options\nDESCRIPTION: Sets up client options for connecting to different Azure clouds including sovereign clouds and Azure Stack.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armfabric.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeSpec Location for Azure OpenAI Client Generation\nDESCRIPTION: YAML configuration file specifying the source location and commit for generating the Azure OpenAI client from TypeSpec definitions. Points to a specific commit in the azure-rest-api-specs repository.\n\nLANGUAGE: yaml\nCODE:\n```\n# ie: https://github.com/Azure/azure-rest-api-specs/tree/1e243e2b0d0d006599dcb64f82fd92aecc1247be/specification/cognitiveservices/OpenAI.Inference\ndirectory: specification/cognitiveservices/OpenAI.Inference\ncommit: 1e243e2b0d0d006599dcb64f82fd92aecc1247be\nrepo: Azure/azure-rest-api-specs\n```\n\n----------------------------------------\n\nTITLE: Renaming FileHttpHeaders and Updating Property Names\nDESCRIPTION: YAML directive to rename FileHttpHeaders to ShareFileHTTPHeaders and remove the 'file' prefix from its properties.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.parameters\n  transform: >\n    $.FileCacheControl[\"x-ms-parameter-grouping\"].name = \"share-file-http-headers\";\n    $.FileCacheControl[\"x-ms-client-name\"] = \"cacheControl\";\n    $.FileContentDisposition[\"x-ms-parameter-grouping\"].name = \"share-file-http-headers\";\n    $.FileContentDisposition[\"x-ms-client-name\"] = \"contentDisposition\";\n    $.FileContentEncoding[\"x-ms-parameter-grouping\"].name = \"share-file-http-headers\";\n    $.FileContentEncoding[\"x-ms-client-name\"] = \"contentEncoding\";\n    $.FileContentLanguage[\"x-ms-parameter-grouping\"].name = \"share-file-http-headers\";\n    $.FileContentLanguage[\"x-ms-client-name\"] = \"contentLanguage\";\n    $.FileContentMD5[\"x-ms-parameter-grouping\"].name = \"share-file-http-headers\";\n    $.FileContentMD5[\"x-ms-client-name\"] = \"contentMd5\";\n    $.FileContentType[\"x-ms-parameter-grouping\"].name = \"share-file-http-headers\";\n    $.FileContentType[\"x-ms-client-name\"] = \"contentType\";\n```\n\n----------------------------------------\n\nTITLE: Continuing After Conflict Resolution\nDESCRIPTION: Example of continuing the cherry-pick operation after resolving merge conflicts. Shows the successful commit message after conflict resolution.\n\nLANGUAGE: bash\nCODE:\n```\ngit cherry-pick --continue\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Options for Different Clouds\nDESCRIPTION: Sets up client options for connecting to different Azure cloud environments including sovereign clouds\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armqumulo.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Azure IoT Hub SDK Release Notes\nDESCRIPTION: Markdown formatted release history documenting version changes from 1.0.0 to 1.3.0, including new features, bug fixes, and breaking changes.\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.3.0 (2023-11-24)\n### Features Added\n\n- Support for test fakes and OpenTelemetry trace spans.\n\n\n## 1.2.0 (2023-09-22)\n### Features Added\n\n- New struct `RoutingCosmosDBSQLAPIProperties`\n- New field `CosmosDBSQLContainers` in struct `RoutingEndpoints`\n\n\n## 1.1.1 (2023-04-14)\n### Bug Fixes\n\n- Fix serialization bug of empty value of `any` type.\n\n\n## 1.1.0 (2023-03-31)\n### Features Added\n\n- New struct `ClientFactory` which is a client factory used to create any client in this module\n\n\n## 1.0.0 (2022-05-17)\n\nThe package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/iothub/armiothub` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html) since version 1.0.0, which contains breaking changes.\n\nTo migrate the existing applications to the latest version, please refer to [Migration Guide](https://aka.ms/azsdk/go/mgmt/migration).\n\nTo learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).\n```\n\n----------------------------------------\n\nTITLE: Creating Extended Location Client Factory\nDESCRIPTION: Initializes a client factory for creating Extended Location service clients using subscription ID and credentials\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armextendedlocation.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Creating a ContainerGroupProfileClient in Go\nDESCRIPTION: Demonstrates how to create a new ContainerGroupProfileClient using the Azure SDK for Go. This client is used to interact with Container Group Profiles in Azure Container Instances.\n\nLANGUAGE: Go\nCODE:\n```\nNewContainerGroupProfileClient(string, azcore.TokenCredential, *arm.ClientOptions) (*ContainerGroupProfileClient, error)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Resource Links Module\nDESCRIPTION: Command to install the Azure Resource Links module using Go modules dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armlinks\n```\n\n----------------------------------------\n\nTITLE: Configuring Metrics Batch Query Client Generation for Azure SDK for Go\nDESCRIPTION: YAML configuration for generating the Metrics Batch Query client in the Azure SDK for Go. It specifies the input file and includes directives for renaming operations, models, and customizing field names.\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Metrics Batch Query Client\ninput-file: https://github.com/Azure/azure-rest-api-specs/blob/21f5332f2dc7437d1446edf240e9a3d4c90c6431/specification/monitor/data-plane/Microsoft.Insights/preview/2023-05-01-preview/metricBatch.json\n\ndirective:\n  # rename Batch to QueryBatch\n  - rename-operation:\n        from: MetricsBatch_Batch\n        to: MetricsBatch_QueryBatch\n\n  # Rename MetricResultsResponse\n  - rename-model:\n      from: MetricResultsResponse\n      to: MetricResults\n  - from: \n        - models.go\n        - models_serde.go\n    where: $\n    transform: return $.replace(/MetricResultsValuesItem/g, \"MetricValues\");\n  - from: swagger-document\n    where: $.definitions.MetricResults.properties.values.items\n    transform: $[\"description\"] = \"Metric data values.\"\n\n  # fix casing, rename batch metric fields\n  - from: swagger-document\n    where: $.parameters.StartTimeParameter\n    transform: $[\"x-ms-client-name\"] = \"StartTime\"\n  - from: swagger-document\n    where: $.parameters.EndTimeParameter\n    transform: $[\"x-ms-client-name\"] = \"EndTime\"\n  - from: swagger-document\n    where: $.definitions.ResourceIdList.properties.resourceids\n    transform: $[\"x-ms-client-name\"] = \"ResourceIDs\"\n  - from: swagger-document\n    where: $.definitions.MetricResults.properties.values.items.properties.starttime\n    transform: $[\"x-ms-client-name\"] = \"StartTime\"\n  - from: swagger-document\n    where: $.definitions.MetricResults.properties.values.items.properties.endtime\n    transform: $[\"x-ms-client-name\"] = \"EndTime\"\n  - from: swagger-document\n    where: $.definitions.MetricResults.properties.values.items.properties.resourceid\n    transform: $[\"x-ms-client-name\"] = \"ResourceID\"\n  - from: swagger-document\n    where: $.definitions.MetricResults.properties.values.items.properties.resourceregion\n    transform: $[\"x-ms-client-name\"] = \"ResourceRegion\"\n  - from: swagger-document\n    where: $.definitions.MetricResults.properties.values.items.properties.value\n    transform: $[\"x-ms-client-name\"] = \"Values\"\n\n  # delete unused error models\n  - from: models.go\n    where: $\n    transform: return $.replace(/((?:\\/\\/.*\\s)+|)type AdditionalInfoErrorResponse.+\\{(?:\\s.+\\s)+\\}\\s/g, \"\");\n  - from: models_serde.go\n    where: $\n    transform: return $.replace(/(?:\\/\\/.*\\s)+func \\(\\w \\*?AdditionalInfoErrorResponse.*\\{\\s(?:.+\\s)+\\}\\s/g, \"\");\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Reservations Client Factory in Go\nDESCRIPTION: This snippet shows how to create a client factory for Azure Reservations. It initializes a new ClientFactory object using the subscription ID and credential, which can then be used to create specific clients for different Azure Reservations operations.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armreservations.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Renaming SnapshotFieldsEtag to SnapshotFieldsETag in Go Constants\nDESCRIPTION: YAML directive to rename 'SnapshotFieldsEtag' to 'SnapshotFieldsETag' in the generated Go constants file. This ensures proper capitalization of the 'ETag' acronym.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: zz_constants.go\n  where: $\n  transform: >\n    return $.replace(/SnapshotFieldsEtag/g, \"SnapshotFieldsETag\");\n```\n\n----------------------------------------\n\nTITLE: Parameter Location and Deployment Transformations\nDESCRIPTION: Configures parameter locations and transforms deployment ID parameters to be client-level parameters.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: swagger-document\n    where: $[\"x-ms-parameterized-host\"].parameters.0\n    transform: $[\"x-ms-parameter-location\"] = \"client\";\n  - from: swagger-document\n    where: $.paths..parameters..[?(@.name=='deploymentId')]\n    transform: $[\"x-ms-parameter-location\"] = \"client\";\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Support SDK Generation in YAML\nDESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure Support SDK for Go. It specifies Azure ARM mode, required specification files, license header, module version, and API version tag.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/106483d9f698ac3b6c0d481ab0c5fab14152e21f/specification/support/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/106483d9f698ac3b6c0d481ab0c5fab14152e21f/specification/support/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.3.0\ntag: package-2024-04\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Kubernetes Fleet Client Factory in Go\nDESCRIPTION: This code creates a client factory for Azure Kubernetes Fleet. It requires a subscription ID and credentials. The factory can be used to create specific clients within the module.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armcontainerservicefleet.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Queue Service Constants\nDESCRIPTION: Constants used for queue service authentication and configuration\n\nLANGUAGE: go\nCODE:\n```\nconst (\n\taccountName   = \"MYSTORAGEACCOUNT\"\n\taccountKey    = \"ACCOUNT_KEY\"\n\tqueueName     = \"samplequeue\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Factory with Custom Options\nDESCRIPTION: Creates a client factory with custom options for connecting to different Azure clouds using ClientOptions\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armresourcegraph.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Data Migration Go SDK\nDESCRIPTION: YAML configuration for AutoRest to generate the Azure Data Migration SDK for Go. Specifies ARM mode, required API specifications, license header, module version 1.2.0, and targets the 2021-06 API version package.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/163e27c0ca7570bc39e00a46f255740d9b3ba3cb/specification/datamigration/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/163e27c0ca7570bc39e00a46f255740d9b3ba3cb/specification/datamigration/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.2.0\ntag: package-2021-06\n```\n\n----------------------------------------\n\nTITLE: New Client Function Declarations in Go\nDESCRIPTION: New client factory and service client function declarations for Container Service Fleet management\n\nLANGUAGE: Go\nCODE:\n```\nNewAutoUpgradeProfilesClient(string, azcore.TokenCredential, *arm.ClientOptions) (*AutoUpgradeProfilesClient, error)\n*AutoUpgradeProfilesClient.BeginCreateOrUpdate(context.Context, string, string, string, AutoUpgradeProfile, *AutoUpgradeProfilesClientBeginCreateOrUpdateOptions) (*runtime.Poller[AutoUpgradeProfilesClientCreateOrUpdateResponse], error)\n*AutoUpgradeProfilesClient.BeginDelete(context.Context, string, string, string, *AutoUpgradeProfilesClientBeginDeleteOptions) (*runtime.Poller[AutoUpgradeProfilesClientDeleteResponse], error)\n```\n\n----------------------------------------\n\nTITLE: Upgrading SDK Major Version\nDESCRIPTION: Commands for upgrading to the latest major version of the SDK using gomajor tool\n\nLANGUAGE: sh\nCODE:\n```\ngo install github.com/icholy/gomajor@latest\ngomajor get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute@latest\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest YAML Settings for Azure Billing Benefits SDK\nDESCRIPTION: Defines AutoRest configuration parameters for generating Go SDK code from Azure Billing Benefits REST API specifications. Specifies Azure ARM mode, required API specification sources, license header type, and module version.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/f790e624d0d080b89d962a3bd19c65bc6a6b2f5e/specification/billingbenefits/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/f790e624d0d080b89d962a3bd19c65bc6a6b2f5e/specification/billingbenefits/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 2.1.0\n```\n\n----------------------------------------\n\nTITLE: Removing Module Constants Directive\nDESCRIPTION: AutoRest directive to remove moduleName and moduleVersion constants from the generated constants.go file.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: constants.go\n    where: $\n    transform: return $.replace(/const \\(\\n\\s+moduleName.+\\n\\s+moduleVersion.+\\n\\)\\n/, \"\");\n```\n\n----------------------------------------\n\nTITLE: Base Configuration for OpenAI SDK Generation\nDESCRIPTION: Defines core configuration settings for generating the OpenAI SDK including input/output paths, module name, and basic options.\n\nLANGUAGE: yaml\nCODE:\n```\ninput-file:\n  - ./testdata/generated/openapi.json\noutput-folder: ../azopenai\nclear-output-folder: false\nmodule: github.com/Azure/azure-sdk-for-go/sdk/ai/azopenai\nlicense-header: MICROSOFT_MIT_NO_VERSION\nopenapi-type: data-plane\ngo: true\nuse: \"@autorest/go@4.0.0-preview.63\"\ntitle: \"OpenAI\"\nslice-elements-byval: true\nrawjson-as-bytes: true\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Active Directory in Go\nDESCRIPTION: Shows how to create a default Azure credential for authentication with Azure Active Directory.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Data Catalog Client for Different Clouds in Go\nDESCRIPTION: This snippet shows how to configure the client factory for different Azure clouds or Azure Stack. It uses ClientOptions to set the endpoint for the desired cloud.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armdatacatalog.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Deleting a Container Group Profile in Go\nDESCRIPTION: Demonstrates the deletion of a Container Group Profile using the ContainerGroupProfilesClient in the Azure SDK for Go. This operation removes the specified profile from Azure Container Instances.\n\nLANGUAGE: Go\nCODE:\n```\n*ContainerGroupProfilesClient.Delete(context.Context, string, string, *ContainerGroupProfilesClientDeleteOptions) (ContainerGroupProfilesClientDeleteResponse, error)\n```\n\n----------------------------------------\n\nTITLE: Initializing Video Analyzers Client in Go\nDESCRIPTION: This code creates a new Video Analyzers client using the provided subscription ID and credential. It's used to access Video Analyzer APIs within the specified subscription.\n\nLANGUAGE: go\nCODE:\n```\nclient, err := armvideoanalyzer.NewVideoAnalyzersClient(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Add Internal Package Import Directive\nDESCRIPTION: AutoRest directive to add an import statement for the internal package in multiple client-related source files.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from:\n      - \"*_client.go\"\n      - \"client.go\"\n      - \"client_factory.go\"\n    where: $\n    transform: return $.replace(/import \\(\\n/, \"import (\\n\\\"github.com/Azure/azure-sdk-for-go/profile/p20200901/internal\\\"\\n\");\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Reservations Module in Go\nDESCRIPTION: This snippet shows how to install the Azure Reservations module using Go's package manager. It uses the 'go get' command to fetch and install the module from the specified GitHub repository.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/reservations/armreservations/v3\n```\n\n----------------------------------------\n\nTITLE: Verifying Azure Developer CLI Authentication and Token Retrieval\nDESCRIPTION: These commands check the current configuration of the Azure Developer CLI and attempt to obtain an access token. They can be used to troubleshoot AzureDeveloperCLICredential authentication issues.\n\nLANGUAGE: sh\nCODE:\n```\nazd config list\nazd auth token --output json --scope https://management.core.windows.net/.default\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Alerts Management Client Factory in Go\nDESCRIPTION: Initialize a client factory for Azure Alerts Management using subscription ID and credentials.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armalertsmanagement.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Version 0.1.0 Release Notes\nDESCRIPTION: Initial release notes for version 0.1.0, released on April 26, 2024. Introduces next generation design principles implementation.\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.1.0 (2024-04-26)\n### Other Changes\n\nThe package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/deviceregistry/armdeviceregistry` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html).\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Options for Different Clouds\nDESCRIPTION: Setting up client options to connect to different Azure clouds including sovereign clouds and Azure Stack\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armworkloadssapvirtualinstance.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Purview Client Factory\nDESCRIPTION: Initializes a client factory for creating Azure Purview service clients\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armpurview.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK Go Generation\nDESCRIPTION: This YAML configuration specifies settings for AutoRest to generate the Azure SDK for Go. It sets the azure-arm flag, includes required API specifications, defines the license header, and sets the module version.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/163e27c0ca7570bc39e00a46f255740d9b3ba3cb/specification/customer-insights/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/163e27c0ca7570bc39e00a46f255740d9b3ba3cb/specification/customer-insights/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.2.0\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Logic Apps Module in Go\nDESCRIPTION: This snippet demonstrates how to install the Azure Logic Apps module using the go get command. It requires Go modules for versioning and dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/logic/armlogic\n```\n\n----------------------------------------\n\nTITLE: Anonymous Object Naming\nDESCRIPTION: Assigns proper names to anonymous objects in operation definitions, particularly for paging operations\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: swagger-document\n    where: $.paths\n    transform: |\n      $[\"/assistants\"].get.responses[\"200\"].schema[\"x-ms-client-name\"] = \"AssistantsPage\";\n      const threadsBase = '/threads/{threadId}';\n      $[threadsBase + \"/messages\"].get.responses[\"200\"].schema[\"x-ms-client-name\"] = \"ThreadMessagesPage\";\n      $[threadsBase + \"/runs\"].get.responses[\"200\"].schema[\"x-ms-client-name\"] = \"ThreadRunsPage\";\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure using Default Credentials in Go\nDESCRIPTION: Example of creating a default Azure credential for authentication. This uses the azidentity package to create a credential that can be used with Azure services.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Client Options for Different Clouds in Go\nDESCRIPTION: This snippet shows how to configure client options for connecting to different Azure clouds, including sovereign clouds and Azure Stack. It uses the arm.ClientOptions struct.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armoep.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Kusto Database Configuration Client\nDESCRIPTION: Creates a new client instance for managing attached database configurations\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewAttachedDatabaseConfigurationsClient()\n```\n\n----------------------------------------\n\nTITLE: Compiling Query in Azure Stream Analytics SDK for Go\nDESCRIPTION: Compiles a Stream Analytics query using the SubscriptionsClient.\n\nLANGUAGE: Go\nCODE:\n```\n*SubscriptionsClient.CompileQuery(context.Context, string, CompileQuery, *SubscriptionsClientCompileQueryOptions) (SubscriptionsClientCompileQueryResponse, error)\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure Credentials\nDESCRIPTION: Creates default Azure credentials for authentication with Azure services\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Updating Module References Directive\nDESCRIPTION: AutoRest directive to update moduleName and moduleVersion references to use internal package constants in client files.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from:\n      - \"*_client.go\"\n      - \"client.go\"\n      - \"client_factory.go\"\n    where: $\n    transform: return $.replace(/moduleVersion/, \"internal.ModuleVersion\").replace(/moduleName+\"/, \"internal.ModuleName+\\\"/armeventhub\");\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Commerce Rate Card Client in Go\nDESCRIPTION: This snippet shows how to create a specific client (RateCardClient) using the previously created client factory. This client can be used to access rate card related APIs in Azure Commerce.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewRateCardClient()\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest Settings for Azure SDK Generation\nDESCRIPTION: Defines the configuration parameters for AutoRest to generate Go SDK code for Azure Automanage services. Specifies the source API specifications, licensing, and module versioning requirements.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/2dcad6d6e9a96882eb6d317e7500a94be007a9c6/specification/automanage/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/2dcad6d6e9a96882eb6d317e7500a94be007a9c6/specification/automanage/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.2.0\n```\n\n----------------------------------------\n\nTITLE: Creating Azure RedHat Open Shift Client Factory in Go\nDESCRIPTION: Initialize a client factory for Azure RedHat Open Shift services using the subscription ID and credentials.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armredhatopenshift.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Updating Module References Directive\nDESCRIPTION: AutoRest directive to update moduleName and moduleVersion references to use internal package constants in client files.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from:\n      - \"*_client.go\"\n      - \"client.go\"\n      - \"client_factory.go\"\n    where: $\n    transform: return $.replace(/moduleVersion/, \"internal.ModuleVersion\").replace(/moduleName+\"/, \"internal.ModuleName+\\\"/armeventhub\");\n```\n\n----------------------------------------\n\nTITLE: Parameter Location and Type Transformations\nDESCRIPTION: Fixes deployment and endpoint parameter locations and resolves TypeSpec generation issues with polymorphic types\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: swagger-document\n    where: $[\"x-ms-parameterized-host\"].parameters.0\n    transform: $[\"x-ms-parameter-location\"] = \"client\";\n\n  - from: swagger-document\n    where: $.definitions.ThreadRun.properties.required_action\n    transform: |\n      $[\"$ref\"] = \"#/definitions/RequiredAction\"\n      delete $[\"allOf\"];\n      return $;\n```\n\n----------------------------------------\n\nTITLE: Creating a Client Factory for Azure Playwrighttesting in Go\nDESCRIPTION: This snippet demonstrates how to create a client factory for Azure Playwrighttesting. The factory is used to create various clients within the module.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armplaywrighttesting.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Version 0.2.0 Release Notes\nDESCRIPTION: Details extensive breaking changes and new features in version 0.2.0, released on December 11, 2024. Includes type changes, enum removals, and new functionality additions.\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.2.0 (2024-12-11)\n### Breaking Changes\n\n- Type of `AssetProperties.Version` has been changed from `*int32` to `*int64`\n[...additional content truncated for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Client Options for Different Clouds in Go\nDESCRIPTION: This snippet shows how to configure client options to connect to different Azure clouds, such as Azure China. It uses the arm.ClientOptions struct to set the cloud option.\n\nLANGUAGE: Go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclient, err := armworkloadmonitor.NewHealthMonitorsClient(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Creating Power BI Dedicated Client Factory\nDESCRIPTION: Initializes a client factory for creating Power BI Dedicated service clients using subscription ID and credentials.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armpowerbidedicated.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK Go Generation\nDESCRIPTION: This YAML configuration sets up AutoRest for generating the Azure SDK for Go. It specifies the Azure ARM mode, required API specifications, license header, module version, and API version tag.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/4883fa5dbf6f2c9093fac8ce334547e9dfac68fa/specification/desktopvirtualization/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/4883fa5dbf6f2c9093fac8ce334547e9dfac68fa/specification/desktopvirtualization/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 2.3.0\ntag: package-2024-04\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Load Testing Module in Go\nDESCRIPTION: Command to install the Azure Load Testing module using Go modules.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/loadtesting/armloadtesting\n```\n\n----------------------------------------\n\nTITLE: Configuring Go SDK Generation Settings\nDESCRIPTION: Base configuration for generating Go SDK code from OpenAPI spec. Specifies input/output paths, module name, and generation parameters for Azure OpenAI extensions.\n\nLANGUAGE: yaml\nCODE:\n```\ninput-file:\n- ./testdata/generated/openapi.json\noutput-folder: ../azopenaiextensions\nclear-output-folder: false\nmodule: github.com/Azure/azure-sdk-for-go/sdk/ai/azopenaiextensions\nlicense-header: MICROSOFT_MIT_NO_VERSION\nopenapi-type: data-plane\ngo: true\nuse: \"@autorest/go@4.0.0-preview.63\"\ntitle: \"OpenAI\"\nslice-elements-byval: true\nrawjson-as-bytes: true\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Using Default Credentials in Go\nDESCRIPTION: This snippet demonstrates how to create default Azure credentials for authentication using the azidentity package.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Options for Different Clouds\nDESCRIPTION: Demonstrates how to configure client options for connecting to different Azure clouds including sovereign clouds and Azure Stack.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armsynapse.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK Generation\nDESCRIPTION: YAML configuration file that defines the settings for AutoRest code generation. References Azure REST API specifications, sets the license header, module version, and specifies the package tag for managed applications.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/5fb045bd44f143bae17da2e01552ae531f77d0ba/specification/solutions/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/5fb045bd44f143bae17da2e01552ae531f77d0ba/specification/solutions/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 2.1.0\ntag: package-managedapplications-2021-07\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure StorSimple 1200 Series SDK Generation\nDESCRIPTION: YAML configuration for AutoRest that specifies the input specifications, Azure ARM mode, licensing, and module version for generating the StorSimple 1200 Series SDK. References specific versions of Azure REST API specifications from GitHub.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/163e27c0ca7570bc39e00a46f255740d9b3ba3cb/specification/storSimple1200Series/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/163e27c0ca7570bc39e00a46f255740d9b3ba3cb/specification/storSimple1200Series/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.2.0\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Event Hubs Processor Test in Go\nDESCRIPTION: This command shows how to display the help information for the Processor test, which includes additional options and flags that can be used to control the test parameters.\n\nLANGUAGE: bash\nCODE:\n```\ngo run . processor --help\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Recoveryservicesdatareplication Client Factory in Go\nDESCRIPTION: Initializes a new client factory for Azure Recoveryservicesdatareplication using the subscription ID and credentials. This factory can be used to create specific clients for different operations.\n\nLANGUAGE: Go\nCODE:\n```\nclientFactory, err := armrecoveryservicesdatareplication.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Initializing VariablesClient in Go\nDESCRIPTION: Creates a new VariablesClient using the provided endpoint, credentials, and options.\n\nLANGUAGE: Go\nCODE:\n```\nNewVariablesClient(string, azcore.TokenCredential, *arm.ClientOptions) (*VariablesClient, error)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Appcomplianceautomation Client Factory in Go\nDESCRIPTION: This code creates a client factory for Azure Appcomplianceautomation, which can be used to create specific clients for different operations.\n\nLANGUAGE: Go\nCODE:\n```\nclientFactory, err := armappcomplianceautomation.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest Settings for Azure SDK Generation\nDESCRIPTION: Defines AutoRest configuration parameters for generating Azure SDK for Go. Specifies Azure ARM mode, references to API specifications, license header type, and module version. Required for automated SDK code generation process.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/visualstudio/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/visualstudio/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 0.6.0\n```\n\n----------------------------------------\n\nTITLE: Initializing Client Factory\nDESCRIPTION: Create a client factory for Azure Private Edge Zone services using subscription ID and credentials.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armhybridnetwork.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest YAML Settings for Azure Security Insights Go SDK\nDESCRIPTION: Defines AutoRest configuration parameters for generating Azure Security Insights SDK. References specific API specification versions, sets module version to 2.0.0-beta.4, and configures Azure ARM-specific settings.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/6c4f3c695f0250dcb261598a62004f0aef10b9db/specification/securityinsights/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/6c4f3c695f0250dcb261598a62004f0aef10b9db/specification/securityinsights/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 2.0.0-beta.4\ntag: package-preview-2022-09\n```\n\n----------------------------------------\n\nTITLE: Adding New BillingInfoClient Functions in Go\nDESCRIPTION: New functions added for BillingInfoClient including creation, retrieval, and factory methods.\n\nLANGUAGE: Go\nCODE:\n```\nNewBillingInfoClient(string, azcore.TokenCredential, *arm.ClientOptions) (*BillingInfoClient, error)\n*BillingInfoClient.Get(context.Context, string, string, *BillingInfoClientGetOptions) (BillingInfoClientGetResponse, error)\n*ClientFactory.NewBillingInfoClient() *BillingInfoClient\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Client Options for Different Clouds in Go\nDESCRIPTION: Sets up client options to connect to different Azure clouds, such as Azure China, using the arm.ClientOptions struct.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armlargeinstance.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Factory with Custom Options\nDESCRIPTION: Creates a client factory with custom options for connecting to different Azure clouds.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armservicelinker.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Updating Module References in Client Constructor\nDESCRIPTION: Directive to replace module version and name references with internal package constants in client files.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from:\n      - \"*_client.go\"\n      - \"client.go\"\n      - \"client_factory.go\"\n    where: $\n    transform: return $.replace(/moduleVersion/, \"internal.ModuleVersion\").replace(/moduleName+\"/, \"internal.ModuleName+\\\"/armdns\");\n```\n\n----------------------------------------\n\nTITLE: Running Event Hubs Processor Test in Go\nDESCRIPTION: This command demonstrates how to run a Processor test to receive events using the Event Hubs stress test tool. It uses the 'go run' command to execute the main program with the 'processor' argument.\n\nLANGUAGE: bash\nCODE:\n```\ngo run . processor\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Credentials\nDESCRIPTION: Creates default Azure credentials for authentication using the azidentity module.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Options for Different Clouds\nDESCRIPTION: Demonstrates how to configure client options for connecting to different Azure clouds including sovereign clouds\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armsqlvirtualmachine.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Adding New Functions for SignalR Client in Go\nDESCRIPTION: New functions added to the SignalR Client for managing replicas, including listing SKUs, creating/updating replicas, and performing operations on replicas.\n\nLANGUAGE: Go\nCODE:\n```\nNewReplicasClient(string, azcore.TokenCredential, *arm.ClientOptions) (*ReplicasClient, error)\n```\n\nLANGUAGE: Go\nCODE:\n```\n*ReplicasClient.BeginCreateOrUpdate(context.Context, string, string, string, Replica, *ReplicasClientBeginCreateOrUpdateOptions) (*runtime.Poller[ReplicasClientCreateOrUpdateResponse], error)\n```\n\nLANGUAGE: Go\nCODE:\n```\n*ReplicasClient.Delete(context.Context, string, string, string, *ReplicasClientDeleteOptions) (ReplicasClientDeleteResponse, error)\n```\n\nLANGUAGE: Go\nCODE:\n```\n*ReplicasClient.Get(context.Context, string, string, string, *ReplicasClientGetOptions) (ReplicasClientGetResponse, error)\n```\n\nLANGUAGE: Go\nCODE:\n```\n*ReplicasClient.NewListPager(string, string, *ReplicasClientListOptions) *runtime.Pager[ReplicasClientListResponse]\n```\n\nLANGUAGE: Go\nCODE:\n```\n*ReplicasClient.BeginRestart(context.Context, string, string, string, *ReplicasClientBeginRestartOptions) (*runtime.Poller[ReplicasClientRestartResponse], error)\n```\n\nLANGUAGE: Go\nCODE:\n```\n*ReplicasClient.BeginUpdate(context.Context, string, string, string, Replica, *ReplicasClientBeginUpdateOptions) (*runtime.Poller[ReplicasClientUpdateResponse], error)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Astro Organizations Client\nDESCRIPTION: Creates a client instance for accessing Organizations-related APIs using the client factory\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewOrganizationsClient()\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Client Options\nDESCRIPTION: Sets up client options for connecting to different Azure clouds including sovereign clouds and Azure Stack.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armbillingbenefits.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK Go Generation\nDESCRIPTION: This YAML configuration sets up AutoRest for generating Azure SDK Go code. It specifies Azure ARM mode, required API specifications, license header, module version, and package tag.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/8a287afb3721dee0d88f11502ec123470bc52a28/specification/redisenterprise/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/8a287afb3721dee0d88f11502ec123470bc52a28/specification/redisenterprise/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 2.1.0-beta.2\ntag: package-preview-2024-09\n```\n\n----------------------------------------\n\nTITLE: Creating Specific Azure Container Orchestrator Runtime Client in Go\nDESCRIPTION: This code demonstrates how to create a specific client for Azure Container Orchestrator Runtime services using the client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.{{NewClientName}}()\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Recovery Services Site Recovery Client Factory in Go\nDESCRIPTION: Initializes a client factory for Azure Recovery Services Site Recovery using a subscription ID and credential.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armrecoveryservicessiterecovery.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Running Migration Script with Test-Proxy\nDESCRIPTION: Example of running the migration script from within a service directory using the test-proxy tool directly\n\nLANGUAGE: powershell\nCODE:\n```\ncd \"<target-language-repo>/sdk/<service>\"\n<path-to-transition-script>/generate-assets-json.ps1\n```\n\n----------------------------------------\n\nTITLE: Support for TextMarshaler and TextUnmarshaler in ResourceID\nDESCRIPTION: Added support for encoding.TextMarshaler and encoding.TextUnmarshaler interfaces in arm.ResourceID.\n\nLANGUAGE: Go\nCODE:\n```\n// Using TextMarshaler\nid := arm.ResourceID{...}\ntext, err := id.MarshalText()\n\n// Using TextUnmarshaler\nvar id arm.ResourceID\nerr := id.UnmarshalText([]byte(text))\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Nginx Client Factory\nDESCRIPTION: Initializes a client factory for Azure Nginx services using subscription ID and credentials.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armnginx.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Data Box Module with Go\nDESCRIPTION: This command installs the Azure Data Box module using Go's package manager. It retrieves the specified version of the module from the Azure SDK for Go repository.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/databox/armdatabox/v2\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Default Credential in Go\nDESCRIPTION: This snippet demonstrates how to create a default Azure credential using the azidentity package. This credential is used for authenticating with Azure services.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure Data Manager Service Client in Go\nDESCRIPTION: This code demonstrates how to create a specific client (DataManagersClient) using the previously created client factory. This client provides access to a set of related APIs.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewDataManagersClient()\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Resource Mover SDK Generation\nDESCRIPTION: YAML configuration that defines the parameters for AutoRest code generation. It specifies Azure ARM mode, required API specifications, license header type, module version 1.3.0, and targets the 2023-08-01 API version package.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/3066a973f4baf2e2bf072a013b585a820bb10146/specification/resourcemover/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/3066a973f4baf2e2bf072a013b585a820bb10146/specification/resourcemover/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.3.0\ntag: package-2023-08-01\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Client Options for Different Clouds in Go\nDESCRIPTION: Sets up client options to connect to different Azure clouds, such as Azure China. This example demonstrates how to customize the client factory creation with specific cloud settings.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armmobilenetwork.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Integrationspaces Infrastructure Resources Client in Go\nDESCRIPTION: This snippet shows how to create a specific client (InfrastructureResourcesClient) using the previously created client factory. This client provides access to infrastructure-related APIs.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewInfrastructureResourcesClient()\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Open Energy Platform Locations Client in Go\nDESCRIPTION: This code demonstrates how to create a specific client (LocationsClient) using the previously created client factory. This client provides access to location-related APIs.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.LocationsClient()\n```\n\n----------------------------------------\n\nTITLE: Removing Path Parameters from API Definitions\nDESCRIPTION: YAML directive to remove share name, directory, and file name parameters from API paths as they are provided through direct URIs.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $[\"x-ms-paths\"]\n  transform: >\n    for (const property in $)\n    {\n        if (property.includes('/{shareName}/{directory}/{fileName}'))\n        {\n            $[property][\"parameters\"] = $[property][\"parameters\"].filter(function(param) { return (typeof param['$ref'] === \"undefined\") || (false == param['$ref'].endsWith(\"#/parameters/ShareName\") && false == param['$ref'].endsWith(\"#/parameters/DirectoryPath\") && false == param['$ref'].endsWith(\"#/parameters/FilePath\"))});\n        } \n        else if (property.includes('/{shareName}/{directory}'))\n        {\n            $[property][\"parameters\"] = $[property][\"parameters\"].filter(function(param) { return (typeof param['$ref'] === \"undefined\") || (false == param['$ref'].endsWith(\"#/parameters/ShareName\") && false == param['$ref'].endsWith(\"#/parameters/DirectoryPath\"))});\n        }\n        else if (property.includes('/{shareName}'))\n        {\n            $[property][\"parameters\"] = $[property][\"parameters\"].filter(function(param) { return (typeof param['$ref'] === \"undefined\") || (false == param['$ref'].endsWith(\"#/parameters/ShareName\"))});\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Documenting Release History in Markdown\nDESCRIPTION: This snippet shows the structure used to document release history for the Azure SDK for Go. It includes version numbers, dates, and categorized changes such as features added, breaking changes, and bug fixes.\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 2.2.0 (2023-11-24)\n### Features Added\n\n- Support for test fakes and OpenTelemetry trace spans.\n\n\n## 2.1.0 (2023-09-22)\n### Features Added\n\n- New struct `PostBuildDefinition`\n- New struct `SubstituteFromDefinition`\n- New field `ReconciliationWaitDuration`, `WaitForReconciliation` in struct `FluxConfigurationProperties`\n- New field `PostBuild`, `Wait` in struct `KustomizationDefinition`\n- New field `PostBuild`, `Wait` in struct `KustomizationPatchDefinition`\n\n\n## 2.0.0 (2023-05-26)\n### Breaking Changes\n\n- Field `InstalledVersion` of struct `ExtensionProperties` has been removed\n\n### Features Added\n\n- New value `SourceKindTypeAzureBlob` added to enum type `SourceKindType`\n- New struct `AzureBlobDefinition`\n- New struct `AzureBlobPatchDefinition`\n- New struct `ManagedIdentityDefinition`\n- New struct `ManagedIdentityPatchDefinition`\n- New struct `Plan`\n- New struct `ServicePrincipalDefinition`\n- New struct `ServicePrincipalPatchDefinition`\n- New field `Plan` in struct `Extension`\n- New field `CurrentVersion`, `IsSystemExtension` in struct `ExtensionProperties`\n- New field `AzureBlob` in struct `FluxConfigurationPatchProperties`\n- New field `AzureBlob` in struct `FluxConfigurationProperties`\n\n\n## 1.1.1 (2023-04-14)\n### Bug Fixes\n\n- Fix serialization bug of empty value of `any` type.\n\n\n## 1.1.0 (2023-03-31)\n### Features Added\n\n- New struct `ClientFactory` which is a client factory used to create any client in this module\n\n\n## 1.0.0 (2022-05-18)\n\nThe package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/kubernetesconfiguration/armkubernetesconfiguration` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html) since version 1.0.0, which contains breaking changes.\n\nTo migrate the existing applications to the latest version, please refer to [Migration Guide](https://aka.ms/azsdk/go/mgmt/migration).\n\nTo learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Factory with Custom Options\nDESCRIPTION: Creates a client factory with custom options for connecting to different Azure clouds, including sovereign clouds and Azure Stack.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armmanagednetwork.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Migrationassessment Client Factory in Go\nDESCRIPTION: Initializes a client factory for Azure Migrationassessment services using subscription ID and credentials.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armmigrationassessment.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Adding New Enum Type AutoScalePolicyEnforcement in Go\nDESCRIPTION: Defines a new enum type AutoScalePolicyEnforcement with three possible values for auto-scale policy enforcement states.\n\nLANGUAGE: go\nCODE:\n```\ntype AutoScalePolicyEnforcement string\n\nconst (\n    AutoScalePolicyEnforcementDisabled AutoScalePolicyEnforcement = \"Disabled\"\n    AutoScalePolicyEnforcementEnabled AutoScalePolicyEnforcement = \"Enabled\"\n    AutoScalePolicyEnforcementNone AutoScalePolicyEnforcement = \"None\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating or Updating Variable Values in Go\nDESCRIPTION: Performs a create or update operation for variable values using the VariableValuesClient.\n\nLANGUAGE: Go\nCODE:\n```\n*VariableValuesClient.CreateOrUpdate(context.Context, string, string, VariableValue, *VariableValuesClientCreateOrUpdateOptions) (VariableValuesClientCreateOrUpdateResponse, error)\n```\n\n----------------------------------------\n\nTITLE: Version 2.0.1 Release Notes\nDESCRIPTION: Fixed serialization bug related to empty values of 'any' type.\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.0.1 (2023-04-14)\n### Bug Fixes\n\n- Fix serialization bug of empty value of `any` type.\n```\n\n----------------------------------------\n\nTITLE: Adding Internal Package Import\nDESCRIPTION: AutoRest directive to add internal package import to client-related Go files.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from:\n      - \"*_client.go\"\n      - \"client.go\"\n      - \"client_factory.go\"\n    where: $\n    transform: return $.replace(/import \\(\\n/, \"import (\\n\\\"github.com/Azure/azure-sdk-for-go/profile/p20200901/internal\\\"\\n\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Client with Custom Options\nDESCRIPTION: Creates a client factory with custom options for connecting to different Azure clouds.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armlinks.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure StorSimple 1200 Series Module for Go\nDESCRIPTION: This command installs the Azure StorSimple 1200 Series module using Go's package manager. It retrieves the module from the specified GitHub repository.\n\nLANGUAGE: Shell\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/storsimple1200series/armstorsimple1200series\n```\n\n----------------------------------------\n\nTITLE: Installing Azure VoiceServices Go Module\nDESCRIPTION: Command to install the Azure VoiceServices module using Go modules for dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/voiceservices/armvoiceservices\n```\n\n----------------------------------------\n\nTITLE: Creating Connected Cluster Client for Azure Kubernetes Connect Service in Go\nDESCRIPTION: This code demonstrates how to create a specific client (ConnectedClusterClient) using the previously created client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewConnectedClusterClient()\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK for Go\nDESCRIPTION: This YAML configuration sets up AutoRest for generating the Azure SDK for Go. It enables Azure ARM mode, specifies required specification files, sets the license header, and defines the module version.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/managedservices/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/managedservices/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 0.7.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Integrationspaces Client for Sovereign Clouds in Go\nDESCRIPTION: This code shows how to configure the Azure Integrationspaces client factory to connect to sovereign clouds or Azure Stack. It uses ClientOptions to set the cloud endpoint.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armintegrationspaces.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure Credentials\nDESCRIPTION: Creates default Azure credentials for authentication with Azure services using azidentity module.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: New Enum Type Definition - Kusto SDK v2.3.0\nDESCRIPTION: Defines new enum types including CalloutType, OutboundAccess, PrincipalPermissionsAction, ScriptLevel and ZoneStatus with their corresponding values.\n\nLANGUAGE: Go\nCODE:\n```\ntype CalloutType string\n\nconst (\n    CalloutTypeAzureDigitalTwins CalloutType = \"AzureDigitalTwins\"\n    CalloutTypeAzureOpenai CalloutType = \"AzureOpenai\"\n    CalloutTypeCosmosdb CalloutType = \"Cosmosdb\"\n    CalloutTypeExternalData CalloutType = \"ExternalData\"\n    CalloutTypeGenevametrics CalloutType = \"Genevametrics\"\n    CalloutTypeKusto CalloutType = \"Kusto\"\n    CalloutTypeMysql CalloutType = \"Mysql\"\n    CalloutTypePostgresql CalloutType = \"Postgresql\"\n    CalloutTypeSQL CalloutType = \"SQL\"\n    CalloutTypeSandboxArtifacts CalloutType = \"SandboxArtifacts\"\n    CalloutTypeWebapi CalloutType = \"Webapi\"\n)\n```\n\n----------------------------------------\n\nTITLE: Type Changes in GO SDK v2.0.0\nDESCRIPTION: Changes to type definitions and operation signatures in the Azure SDK for Go Resources Management package\n\nLANGUAGE: go\nCODE:\n```\nDeploymentProperties.Parameters: any -> map[string]*DeploymentParameter\nDeploymentWhatIfProperties.Parameters: any -> map[string]*DeploymentParameter\n\n*TagsClient.CreateOrUpdateAtScope -> *TagsClient.BeginCreateOrUpdateAtScope\n*TagsClient.DeleteAtScope -> *TagsClient.BeginDeleteAtScope\n*TagsClient.UpdateAtScope -> *TagsClient.BeginUpdateAtScope\n```\n\n----------------------------------------\n\nTITLE: Creating Synapse Service Client\nDESCRIPTION: Creates a specific Azure Synapse service client using the client factory for accessing related APIs.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewKustoPoolDataConnectionsClient()\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Scheduler SDK Generation in YAML\nDESCRIPTION: This YAML configuration specifies settings for AutoRest to generate the Azure Scheduler SDK. It requires specific versions of Azure REST API specifications, sets Azure ARM to true, and defines the module version as 1.2.0.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/scheduler/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/scheduler/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.2.0\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK Go Generation\nDESCRIPTION: This YAML configuration specifies settings for AutoRest to generate Go SDK code for Azure Notification Hubs. It includes references to API specifications, sets the Azure ARM flag, specifies the license header, module version, and API version tag.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/85cfba195a19120f309bd292c4261aa53a586adb/specification/notificationhubs/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/85cfba195a19120f309bd292c4261aa53a586adb/specification/notificationhubs/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 2.0.0-beta.1\ntag: package-preview-2023-10\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Factory with Custom Options\nDESCRIPTION: Creates a client factory with custom options for connecting to different Azure clouds\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armproviderhub.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Client Options for Different Clouds in Go\nDESCRIPTION: This snippet shows how to configure client options to connect to different Azure clouds, including sovereign clouds and Azure Stack.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armdeviceprovisioningservices.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Features Client Factory\nDESCRIPTION: Initializes a client factory for Azure Features services using subscription ID and credentials.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armfeatures.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Role Binding with AccessClient in Go\nDESCRIPTION: This function creates a role binding using the AccessClient. It takes context, two string parameters, an AccessCreateRoleBindingRequestModel, and optional AccessClientCreateRoleBindingOptions.\n\nLANGUAGE: Go\nCODE:\n```\n*AccessClient.CreateRoleBinding(context.Context, string, string, AccessCreateRoleBindingRequestModel, *AccessClientCreateRoleBindingOptions) (AccessClientCreateRoleBindingResponse, error)\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Factory with Custom Options\nDESCRIPTION: Creates a client factory with custom options for connecting to different Azure clouds including sovereign clouds and Azure Stack\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armpowerplatform.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Capitalizing SMB Field Names\nDESCRIPTION: YAML directive to capitalize SMB-related field names for consistency.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from:\n  - zz_directory_client.go\n  - zz_file_client.go\n  - zz_models.go\n  - zz_options.go\n  where: $\n  transform: >\n    return $.\n      replace(/SmbMultichannel/g, `SMBMultichannel`).\n      replace(/copyFileSmbInfo/g, `copyFileSMBInfo`).\n      replace(/CopyFileSmbInfo/g, `CopyFileSMBInfo`).\n      replace(/Smb\\s+\\*ShareSMBSettings/g, `SMB *ShareSMBSettings`);\n```\n\n----------------------------------------\n\nTITLE: Model Renaming Transformations\nDESCRIPTION: Renames Options models to Body to avoid naming conflicts with method options\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: swagger-document\n    where: $.definitions\n    transform: |\n      $.VectorStoreUpdateOptions[\"x-ms-client-name\"] = \"VectorStoreUpdateBody\";\n      $.VectorStoreOptions[\"x-ms-client-name\"] = \"VectorStoreBody\";\n      $.UpdateAssistantThreadOptions[\"x-ms-client-name\"] = \"UpdateThreadBody\";\n      $.UpdateAssistantOptions[\"x-ms-client-name\"] = \"UpdateAssistantBody\";\n      $.ThreadMessageOptions[\"x-ms-client-name\"] = \"CreateMessageBody\";\n      $.CreateRunOptions[\"x-ms-client-name\"] = \"CreateRunBody\";\n      $.CreateAndRunThreadOptions[\"x-ms-client-name\"] = \"CreateAndRunThreadBody\";\n      $.AssistantThreadCreationOptions[\"x-ms-client-name\"] = \"CreateThreadBody\";\n      $.AssistantCreationOptions[\"x-ms-client-name\"] = \"CreateAssistantBody\";\n      return $;\n```\n\n----------------------------------------\n\nTITLE: Database Operations Functions\nDESCRIPTION: Functions added in version 2.1.0-beta.1 for database operations including force linking and version upgrades.\n\nLANGUAGE: Go\nCODE:\n```\n*DatabasesClient.BeginForceLinkToReplicationGroup(context.Context, string, string, string, ForceLinkParameters, *DatabasesClientBeginForceLinkToReplicationGroupOptions) (*runtime.Poller[DatabasesClientForceLinkToReplicationGroupResponse], error)\n*DatabasesClient.BeginUpgradeDBRedisVersion(context.Context, string, string, string, *DatabasesClientBeginUpgradeDBRedisVersionOptions) (*runtime.Poller[DatabasesClientUpgradeDBRedisVersionResponse], error)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Newrelic Accounts Client\nDESCRIPTION: This code demonstrates how to create a specific client (Accounts Client) using the previously created client factory. This client can be used to perform operations related to Azure Newrelic accounts.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewAccountsClient()\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Resource Policy Module\nDESCRIPTION: Command to install the Azure Resource Policy module using Go modules package management system.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armpolicy\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Storage Actions Module - Shell\nDESCRIPTION: Command to install the Azure Storage Actions module using Go modules package management\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/storageactions/armstorageactions\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure Elasticsan Client in Go\nDESCRIPTION: Creates a specific client for Elasticsan operations using the previously initialized client factory. This client can be used to perform various Elasticsan-related tasks.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewElasticSansClient()\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Relay SDK Generation\nDESCRIPTION: YAML configuration for AutoRest that defines the parameters for generating Azure Relay SDK code. It references the Azure REST API specifications, sets ARM mode, specifies Microsoft MIT license header, and defines the module version as 1.2.0.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/relay/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/relay/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.2.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Education Client for Sovereign Clouds in Go\nDESCRIPTION: This code shows how to configure the Azure Education client factory to connect to sovereign clouds or Azure Stack. It uses ClientOptions to set the cloud endpoint.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armeducation.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Options for Different Clouds\nDESCRIPTION: Demonstrates how to configure client options for connecting to different Azure clouds including sovereign clouds and Azure Stack.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := arminformaticadatamgmt.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Breaking Change - Type Change\nDESCRIPTION: Change in type of NetworkSecurityPerimeterProfileAccessRuleProperties.Subscriptions field from string array to object array\n\nLANGUAGE: go\nCODE:\n```\nType of `NetworkSecurityPerimeterProfileAccessRuleProperties.Subscriptions` has been changed from `[]*string` to `[]*NetworkSecurityPerimeterSubscription`\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK Generation in YAML\nDESCRIPTION: This YAML configuration sets up AutoRest for generating the Azure SDK for Go. It specifies the Azure ARM mode, required API specifications, license header, module version, and enables the managed applications package.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/0cc5e2efd6ffccf30e80d1e150b488dd87198b94/specification/resources/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/0cc5e2efd6ffccf30e80d1e150b488dd87198b94/specification/resources/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.2.0\npackage-managedapplications: true\n```\n\n----------------------------------------\n\nTITLE: Creating Health Bot Client Instance\nDESCRIPTION: Creates a new Health Bot client instance from the client factory for accessing specific API operations.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewBotsClient()\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Storage Go SDK Generation\nDESCRIPTION: YAML configuration for AutoRest to generate Go SDK code from Azure Storage REST API specifications. Specifies ARM mode, required API specs, license header, module version, and modeling options.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/9d3547622288137fd36f086afcdaea5408dbe48c/specification/storage/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/9d3547622288137fd36f086afcdaea5408dbe48c/specification/storage/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.7.0\nmodelerfour:\n  seal-single-value-enum-by-default: true\ntag: package-2024-01\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Managed Network Fabric Client Factory\nDESCRIPTION: Initializes a client factory for creating Azure Managed Network Fabric service clients.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armmanagednetworkfabric.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Iotfirmwaredefense Client Factory in Go\nDESCRIPTION: Code snippet showing how to create a client factory for Azure Iotfirmwaredefense. The client factory is used to create individual clients for specific operations.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armiotfirmwaredefense.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Listing NetworkSecurityPerimeter Configurations in Go\nDESCRIPTION: Creates a pager to list network security perimeter configurations.\n\nLANGUAGE: Go\nCODE:\n```\npager := client.NewListConfigurationsPager(resourceGroupName, accountName, options)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK Go - Power BI Embedded\nDESCRIPTION: YAML configuration for AutoRest to generate the Azure SDK for Go client for Power BI Embedded. It specifies Azure ARM mode, required API specifications, license header, and module version.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/powerbiembedded/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/powerbiembedded/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.2.0\n```\n\n----------------------------------------\n\nTITLE: Analyzing Configurations in Go\nDESCRIPTION: Performs analysis on configurations using the ConfigurationsClient.\n\nLANGUAGE: Go\nCODE:\n```\n*ConfigurationsClient.Analysis(context.Context, string, string, string, *ConfigurationsClientAnalysisOptions) (ConfigurationsClientAnalysisResponse, error)\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure Recovery Services Client in Go\nDESCRIPTION: This code demonstrates how to create a specific client for Azure Recovery Services operations using the previously created client factory. The client provides access to Recovery Services APIs.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewClient()\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Peering Service Module in Go\nDESCRIPTION: Use the go get command to install the Azure Peering Service module from the Azure SDK for Go.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/peering/armpeering\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Storage Go SDK Generation\nDESCRIPTION: YAML configuration for AutoRest to generate Go SDK code from Azure Storage REST API specifications. Specifies ARM mode, required API specs, license header, module version, and modeling options.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/9d3547622288137fd36f086afcdaea5408dbe48c/specification/storage/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/9d3547622288137fd36f086afcdaea5408dbe48c/specification/storage/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.7.0\nmodelerfour:\n  seal-single-value-enum-by-default: true\ntag: package-2024-01\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Elasticsan Client for China Cloud in Go\nDESCRIPTION: Sets up client options to connect to Azure China cloud. This demonstrates how to configure the client for different Azure environments.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armelasticsan.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Model to DeploymentName Conversion\nDESCRIPTION: Transforms model properties to use DeploymentName instead, with special handling for chat completions.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: swagger-document\n    where: $.definitions.GenerateSpeechFromTextOptions.properties\n    transform: |\n      $[\"model\"] = {\n          \"type\": \"string\",\n          \"description\": \"The model to use for this request.\"\n      }\n      return $;\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Credentials\nDESCRIPTION: Creates a default Azure credential object for authentication with Azure services\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure Impactreporting Client Factory\nDESCRIPTION: Initializes a client factory for creating Azure Impactreporting service clients using subscription ID and credentials.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armimpactreporting.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Web PubSub Client Factory\nDESCRIPTION: Initializes a client factory for creating Web PubSub clients using subscription ID and credentials.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armwebpubsub.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Renaming Models to Remove Suffixes\nDESCRIPTION: YAML directive to rename models by removing 'Item' and 'Internal' suffixes.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- rename-model:\n    from: DirectoryItem\n    to: Directory\n- rename-model:\n    from: FileItem\n    to: File\n- rename-model:\n    from: HandleItem\n    to: Handle\n- rename-model:\n    from: ShareItemInternal\n    to: Share\n- rename-model:\n    from: SharePropertiesInternal\n    to: ShareProperties\n```\n\n----------------------------------------\n\nTITLE: Version Release Notes in Markdown\nDESCRIPTION: Chronological changelog detailing version updates, new features, bug fixes, and breaking changes for the Azure SDK for Go Hybrid Data Manager package\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.2.0 (2023-11-24)\n### Features Added\n\n- Support for test fakes and OpenTelemetry trace spans.\n\n\n## 1.1.1 (2023-04-14)\n### Bug Fixes\n\n- Fix serialization bug of empty value of `any` type.\n\n\n## 1.1.0 (2023-03-31)\n### Features Added\n\n- New struct `ClientFactory` which is a client factory used to create any client in this module\n\n\n## 1.0.0 (2022-05-18)\n\nThe package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/hybriddatamanager/armhybriddatamanager` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html) since version 1.0.0, which contains breaking changes.\n\nTo migrate the existing applications to the latest version, please refer to [Migration Guide](https://aka.ms/azsdk/go/mgmt/migration).\n\nTo learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Peering Service SDK Generation in Go\nDESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure Peering Service SDK for Go. It specifies Azure ARM compatibility, required API specifications from GitHub, licensing header, and module version.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/peering/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/peering/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.2.0\n```\n\n----------------------------------------\n\nTITLE: Creating SQL VM Client Instance\nDESCRIPTION: Creates a new SQL Virtual Machines client instance using the client factory\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewSQLVirtualMachinesClient()\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Quantum SDK Generation\nDESCRIPTION: Defines the configuration parameters for AutoRest to generate Go SDK code from Azure Quantum REST API specifications. Specifies Azure ARM mode, required API specification sources, MIT license header, module version 0.8.0, and targets the 2023-11-13 preview API version.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/cf5ad1932d00c7d15497705ad6b71171d3d68b1e/specification/quantum/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/cf5ad1932d00c7d15497705ad6b71171d3d68b1e/specification/quantum/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 0.8.0\ntag: package-2023-11-13-preview\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK Go Generation\nDESCRIPTION: This YAML configuration specifies settings for AutoRest to generate the Azure SDK for Go. It sets the Azure ARM flag, includes required specification files, sets the license header, and defines the module version.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/saas/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/saas/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 0.7.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Client Options for Sovereign Clouds in Go\nDESCRIPTION: Set up client options to connect to specific Azure cloud environments, such as Azure China.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armvmwarecloudsimple.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: New Field: AiToolchainOperatorProfile in ManagedClusterProperties\nDESCRIPTION: Adds a new field 'AiToolchainOperatorProfile' to the ManagedClusterProperties struct.\n\nLANGUAGE: Go\nCODE:\n```\nNew field `AiToolchainOperatorProfile` in struct `ManagedClusterProperties`\n```\n\n----------------------------------------\n\nTITLE: Authentication with Azure Credentials\nDESCRIPTION: Example of creating default Azure credentials for authentication with the SDK.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Initializing VariableValuesClient in Go\nDESCRIPTION: Creates a new VariableValuesClient using the provided endpoint, credentials, and options.\n\nLANGUAGE: Go\nCODE:\n```\nNewVariableValuesClient(string, azcore.TokenCredential, *arm.ClientOptions) (*VariableValuesClient, error)\n```\n\n----------------------------------------\n\nTITLE: Azure Service Configuration Structs\nDESCRIPTION: Service configuration related structures introduced in version 1.0.0 for managing hybrid connectivity service configurations.\n\nLANGUAGE: go\nCODE:\n```\ntype ServiceConfigurationList struct {}\ntype ServiceConfigurationProperties struct {}\ntype ServiceConfigurationResource struct {}\ntype ServiceConfigurationResourcePatch struct {}\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Portal Dashboard Client\nDESCRIPTION: Creates a new dashboard client instance using the client factory\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewDashboardsClient()\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Security Module with Go\nDESCRIPTION: This command installs the Azure Security module using Go's package manager. It requires Go modules for versioning and dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/security/armsecurity\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK for Go (SignalR Resource Manager)\nDESCRIPTION: YAML configuration for AutoRest to generate Azure SDK for Go. It specifies the Azure ARM mode, required API specifications, license header, module version, and API version tag.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/9ec0fcc278aa2128c4fbb2b8a1aa93432d72cce0/specification/signalr/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/9ec0fcc278aa2128c4fbb2b8a1aa93432d72cce0/specification/signalr/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.3.0-beta.1\ntag: package-2023-08-01-preview\n```\n\n----------------------------------------\n\nTITLE: Authentication Setup with Azure Identity\nDESCRIPTION: Creates a default Azure credential for authentication with Azure services using the azidentity package\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Modifying Directory Client Methods\nDESCRIPTION: YAML directive to remove pager methods and export various generated methods in the directory client.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: zz_directory_client.go\n    where: $\n    transform: >\n      return $.\n        replace(/func \\(client \\*DirectoryClient\\) NewListFilesAndDirectoriesSegmentPager\\(.+\\/\\/ listFilesAndDirectoriesSegmentCreateRequest creates the ListFilesAndDirectoriesSegment request/s, `//\\n// listFilesAndDirectoriesSegmentCreateRequest creates the ListFilesAndDirectoriesSegment request`).\n        replace(/\\(client \\*DirectoryClient\\) listFilesAndDirectoriesSegmentCreateRequest\\(/, `(client *DirectoryClient) ListFilesAndDirectoriesSegmentCreateRequest(`).\n        replace(/\\(client \\*DirectoryClient\\) listFilesAndDirectoriesSegmentHandleResponse\\(/, `(client *DirectoryClient) ListFilesAndDirectoriesSegmentHandleResponse(`);\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Playwrighttesting using Default Credentials in Go\nDESCRIPTION: This code snippet shows how to create a default Azure credential for authentication with Azure Playwrighttesting. It uses the azidentity module to provide various authentication methods.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Support Module with Go\nDESCRIPTION: Command to install the Azure Support module using Go modules for dependency management\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/support/armsupport\n```\n\n----------------------------------------\n\nTITLE: New Function Example in Go\nDESCRIPTION: Example of a newly added client function\n\nLANGUAGE: go\nCODE:\n```\nNewAdvancedThreatProtectionSettingsClient(string, azcore.TokenCredential, *arm.ClientOptions) (*AdvancedThreatProtectionSettingsClient, error)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest Settings for Azure SDK Go Generation\nDESCRIPTION: Defines AutoRest configuration parameters for generating Go SDK code from Azure Operational Insights API specifications. Specifies required API specs, licensing, module version, and package tag settings.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/4ce13e8353a25125a41bc01705c0a7794dac32a7/specification/operationalinsights/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/4ce13e8353a25125a41bc01705c0a7794dac32a7/specification/operationalinsights/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 2.0.0-beta.4\ntag: package-2022-02\n```\n\n----------------------------------------\n\nTITLE: Creating Provider HUB Client\nDESCRIPTION: Instantiates a new Provider HUB client using the client factory\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewClient()\n```\n\n----------------------------------------\n\nTITLE: Adding Content-MD5 Header to Put Range from URL Response\nDESCRIPTION: YAML directive to add the Content-MD5 header to the Put Range from URL operation response.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $[\"x-ms-paths\"][\"/{shareName}/{directory}/{fileName}?comp=range&fromURL\"]\n  transform: >\n    $.put.responses[\"201\"].headers[\"Content-MD5\"] = {\n        \"type\": \"string\",\n        \"format\": \"byte\",\n        \"description\": \"This header is returned so that the client can check for message content integrity. The value of this header is computed by the File service; it is not necessarily the same value as may have been specified in the request headers.\"\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating Database Backup Client\nDESCRIPTION: Creates a client instance for managing Autonomous Database backups\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewAutonomousDatabaseBackupsClient()\n```\n\n----------------------------------------\n\nTITLE: Defining New Structs in Go\nDESCRIPTION: New structs added in version 4.1.0 for representing routing info, SIM operations, and other concepts.\n\nLANGUAGE: go\nCODE:\n```\ntype IPv4Route struct {}\n\ntype IPv4RouteNextHop struct {}\n\ntype RoutingInfoListResult struct {}\n\ntype RoutingInfoModel struct {}\n\ntype RoutingInfoPropertiesFormat struct {}\n\ntype SimClone struct {}\n\ntype SimMove struct {}\n\ntype UserConsentConfiguration struct {}\n\ntype UserPlaneDataRoutesItem struct {}\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure Default Credentials\nDESCRIPTION: Creates a default Azure credential object for authentication with Azure services\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Renaming FileID to ID\nDESCRIPTION: YAML directive to rename 'FileID' to 'ID' in various contexts, except for the Handle object.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.definitions\n  transform: >\n    $.Directory.properties.FileId[\"x-ms-client-name\"] = \"ID\";\n    $.File.properties.FileId[\"x-ms-client-name\"] = \"ID\";\n    $.Handle.properties.HandleId[\"x-ms-client-name\"] = \"ID\";\n\n- from:\n  - zz_directory_client.go\n  - zz_file_client.go\n  - zz_response_types.go\n  where: $\n  transform: >\n    return $.\n      replace(/FileID/g, `ID`);\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Security Center SDK Generation\nDESCRIPTION: YAML configuration for AutoRest code generator that specifies the Azure ARM mode, package version, required API specifications, and custom transformations for external security solution definitions. Includes directives for modifying schema definitions and adding resource references.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\ntag: package-composite-v3\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/9ac34f238dd6b9071f486b57e9f9f1a0c43ec6f6/specification/security/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/9ac34f238dd6b9071f486b57e9f9f1a0c43ec6f6/specification/security/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 0.14.0\ndirective:\n- from: externalSecuritySolutions.json\n  where: $.definitions['ExternalSecuritySolutionKind']\n  transform: >\n      $ = {\n        \"type\": \"string\",\n        \"description\": \"The kind of the external solution\",\n        \"enum\": [\n          \"CEF\",\n          \"ATA\",\n          \"AAD\"\n        ],\n        \"x-ms-enum\": {\n          \"name\": \"ExternalSecuritySolutionKind\",\n          \"modelAsString\": true,\n          \"values\": [\n            {\n              \"value\": \"CEF\"\n            },\n            {\n              \"value\": \"ATA\"\n            },\n            {\n              \"value\": \"AAD\"\n            }\n          ]\n        }\n      };\n- from: externalSecuritySolutions.json\n  where: $.definitions['ExternalSecuritySolution']\n  transform: >\n      $.properties['kind'] = {\n        \"$ref\": \"#/definitions/ExternalSecuritySolutionKind\"\n      };\n      $.allOf = [\n        {\n          \"$ref\": \"../../../common/v1/types.json#/definitions/Resource\"\n        },\n        {\n          \"$ref\": \"../../../common/v1/types.json#/definitions/Location\"\n        }\n      ]\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Peering Service Client in Go\nDESCRIPTION: Use the client factory to create a new Peerings client for accessing Azure Peering Service APIs.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewPeeringsClient()\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Customer Insights SDK Module\nDESCRIPTION: Command to install the Azure Customer Insights module using Go modules\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/customerinsights/armcustomerinsights\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Service Linker Go Module\nDESCRIPTION: Command to install the Azure Service Linker module using Go modules dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/servicelinker/armservicelinker/v2\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Databricks Client Factory in Go\nDESCRIPTION: This snippet demonstrates how to create a client factory for Azure Databricks. It requires a subscription ID and a credential object. The factory can be used to create various clients within the module.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armdatabricks.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Renaming FileID to ID\nDESCRIPTION: YAML directive to rename 'FileID' to 'ID' in various contexts, except for the Handle object.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.definitions\n  transform: >\n    $.Directory.properties.FileId[\"x-ms-client-name\"] = \"ID\";\n    $.File.properties.FileId[\"x-ms-client-name\"] = \"ID\";\n    $.Handle.properties.HandleId[\"x-ms-client-name\"] = \"ID\";\n\n- from:\n  - zz_directory_client.go\n  - zz_file_client.go\n  - zz_response_types.go\n  where: $\n  transform: >\n    return $.\n      replace(/FileID/g, `ID`);\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Playwrighttesting Module in Go\nDESCRIPTION: This snippet demonstrates how to install the Azure Playwrighttesting module using Go's package manager. It requires Go modules for versioning and dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/playwrighttesting/armplaywrighttesting\n```\n\n----------------------------------------\n\nTITLE: New Enum Type Definition\nDESCRIPTION: Definition of new StorageAutoGrow enum type with associated values\n\nLANGUAGE: go\nCODE:\n```\ntype StorageAutoGrow string\n\nconst (\n    StorageAutoGrowDisabled StorageAutoGrow = \"Disabled\"\n    StorageAutoGrowEnabled StorageAutoGrow = \"Enabled\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK Go Client Generation - New Relic Resource Manager\nDESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure SDK for Go client for the New Relic Resource Manager. It specifies the Azure ARM mode, required API specifications, license header, module version, and API version tag.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/cf5ad1932d00c7d15497705ad6b71171d3d68b1e/specification/newrelic/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/cf5ad1932d00c7d15497705ad6b71171d3d68b1e/specification/newrelic/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.2.0\ntag: package-2024-01-01\n```\n\n----------------------------------------\n\nTITLE: Creating Service Client Instance\nDESCRIPTION: Create a specific service client using the client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewExtensionsClient()\n```\n\n----------------------------------------\n\nTITLE: Adding New Structs and Fields in Go for DigitalTwins Module\nDESCRIPTION: This snippet illustrates the addition of new structs and fields to existing structs in the DigitalTwins module, including ManagedIdentityReference, UserAssignedIdentity, and various properties for connection and endpoint types.\n\nLANGUAGE: markdown\nCODE:\n```\n- New struct `ManagedIdentityReference`\n- New struct `UserAssignedIdentity`\n- New field `AdxRelationshipLifecycleEventsTableName` in struct `AzureDataExplorerConnectionProperties`\n- New field `AdxTwinLifecycleEventsTableName` in struct `AzureDataExplorerConnectionProperties`\n- New field `Identity` in struct `AzureDataExplorerConnectionProperties`\n- New field `RecordPropertyAndItemRemovals` in struct `AzureDataExplorerConnectionProperties`\n- New field `Identity` in struct `EndpointResourceProperties`\n- New field `Identity` in struct `EventGrid`\n- New field `Identity` in struct `EventHub`\n- New field `UserAssignedIdentities` in struct `Identity`\n- New field `Identity` in struct `ServiceBus`\n- New field `Identity` in struct `TimeSeriesDatabaseConnectionProperties`\n- New field `CleanupConnectionArtifacts` in struct `TimeSeriesDatabaseConnectionsClientBeginDeleteOptions`\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK for Go\nDESCRIPTION: This YAML configuration sets up AutoRest for generating the Azure SDK for Go. It specifies the Azure ARM mode, required specification files, license header, and module version.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/b9b91929c304f8fb44002267b6c98d9fb9dde014/specification/education/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/b9b91929c304f8fb44002267b6c98d9fb9dde014/specification/education/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 0.4.0\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Blueprint SDK Generation in YAML\nDESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure Blueprint SDK for Go. It enables Azure ARM mode, specifies the required API specifications, sets the license header, and defines the module version.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/f790e624d0d080b89d962a3bd19c65bc6a6b2f5e/specification/blueprint/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/f790e624d0d080b89d962a3bd19c65bc6a6b2f5e/specification/blueprint/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 0.7.0\n```\n\n----------------------------------------\n\nTITLE: Installing Azure VMware Cloud Simple Module for Go\nDESCRIPTION: Use go get to install the Azure VMware Cloud Simple module from the Azure SDK for Go.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/vmwarecloudsimple/armvmwarecloudsimple\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure using DefaultAzureCredential\nDESCRIPTION: Creates a default Azure credential object for authentication with Azure services\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Listing AccessConnectors by Subscription in Go\nDESCRIPTION: Creates a new Pager for listing AccessConnectors across an entire subscription.\n\nLANGUAGE: go\nCODE:\n```\n*AccessConnectorsClient.NewListBySubscriptionPager(*AccessConnectorsClientListBySubscriptionOptions) *runtime.Pager[AccessConnectorsClientListBySubscriptionResponse]\n```\n\n----------------------------------------\n\nTITLE: Creating APIKeysClient from ClientFactory in Go\nDESCRIPTION: Creates a new APIKeysClient instance from the ClientFactory.\n\nLANGUAGE: Go\nCODE:\n```\n*ClientFactory.NewAPIKeysClient() *APIKeysClient\n```\n\n----------------------------------------\n\nTITLE: Removing UnmarshalXML for Handle\nDESCRIPTION: YAML directive to remove the UnmarshalXML method for the Handle type to allow for a custom implementation.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.definitions\n  transform: >\n    $.Handle[\"x-ms-go-omit-serde-methods\"] = true;\n```\n\n----------------------------------------\n\nTITLE: Function Definitions for Azure Resource Health SDK in Go\nDESCRIPTION: Declarations of new client functions and methods added in version 1.2.0 for interacting with Azure Resource Health services\n\nLANGUAGE: go\nCODE:\n```\nNewChildAvailabilityStatusesClient(azcore.TokenCredential, *arm.ClientOptions) (*ChildAvailabilityStatusesClient, error)\nNewChildResourcesClient(azcore.TokenCredential, *arm.ClientOptions) (*ChildResourcesClient, error)\nNewEmergingIssuesClient(azcore.TokenCredential, *arm.ClientOptions) (*EmergingIssuesClient, error)\nNewEventClient(string, azcore.TokenCredential, *arm.ClientOptions) (*EventClient, error)\n```\n\n----------------------------------------\n\nTITLE: Introducing ClientFactory for Azure Private DNS in Go\nDESCRIPTION: Adds a new struct 'ClientFactory' which serves as a client factory for creating any client within the module.\n\nLANGUAGE: markdown\nCODE:\n```\n### Features Added\n\n- New struct `ClientFactory` which is a client factory used to create any client in this module\n```\n\n----------------------------------------\n\nTITLE: Creating Service Client\nDESCRIPTION: Creates a service client instance from the client factory\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.()\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Power Platform Module with Go\nDESCRIPTION: Command to install the Azure Power Platform module using Go modules package management system\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/powerplatform/armpowerplatform\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SCVMM Go Module\nDESCRIPTION: Command to install the Azure SCVMM module using Go modules for dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/scvmm/armscvmm\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Databricks using DefaultAzureCredential in Go\nDESCRIPTION: This code snippet shows how to create a default Azure credential for authentication with Azure Databricks. It uses the azidentity package to create a DefaultAzureCredential object.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Using azcore.ETag for ETag Fields\nDESCRIPTION: YAML directive to replace string ETag fields with azcore.ETag type and update imports accordingly.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: zz_models.go\n  where: $\n  transform: >\n    return $.\n      replace(/import \"time\"/, `import (\\n\\t\"time\"\\n\\t\"github.com/Azure/azure-sdk-for-go/sdk/azcore\"\\n)`).\n      replace(/Etag\\s+\\*string/g, `ETag *azcore.ETag`);\n\n- from: zz_response_types.go\n  where: $\n  transform: >\n    return $.\n      replace(/\"time\"/, `\"time\"\\n\\t\"github.com/Azure/azure-sdk-for-go/sdk/azcore\"`).\n      replace(/ETag\\s+\\*string/g, `ETag *azcore.ETag`);\n\n- from:\n  - zz_directory_client.go\n  - zz_file_client.go\n  - zz_share_client.go\n  where: $\n  transform: >\n    return $.\n      replace(/\"github\\.com\\/Azure\\/azure\\-sdk\\-for\\-go\\/sdk\\/azcore\\/policy\"/, `\"github.com/Azure/azure-sdk-for-go/sdk/azcore\"\\n\\t\"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy\"`).\n      replace(/result\\.ETag\\s+=\\s+&val/g, `result.ETag = (*azcore.ETag)(&val)`);\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Credentials\nDESCRIPTION: Creates a default Azure credential object for authentication with Azure services using the azidentity module.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Authentication Setup for Azure Elastic\nDESCRIPTION: Creates a default Azure credential object for authenticating with Azure Elastic services.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: New Azure RedHat OpenShift Client Functions\nDESCRIPTION: Collection of new client functions added in version 1.1.0 for managing machine pools, OpenShift versions, secrets, sync identity providers and sync sets.\n\nLANGUAGE: go\nCODE:\n```\nNewMachinePoolsClient(string, azcore.TokenCredential, *arm.ClientOptions) (*MachinePoolsClient, error)\n*MachinePoolsClient.CreateOrUpdate(context.Context, string, string, string, MachinePool, *MachinePoolsClientCreateOrUpdateOptions) (MachinePoolsClientCreateOrUpdateResponse, error)\n*MachinePoolsClient.Delete(context.Context, string, string, string, *MachinePoolsClientDeleteOptions) (MachinePoolsClientDeleteResponse, error)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure MySQL SDK Generation in YAML\nDESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure MySQL SDK for Go. It specifies Azure ARM mode, required specification files, license header, module version, and targets the flexible servers package with a specific API version.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/e26b89bcbec9eed5026c01416e481408b2a1ca1a/specification/mysql/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/e26b89bcbec9eed5026c01416e481408b2a1ca1a/specification/mysql/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 2.0.0-beta.4\npackage-flexibleservers: true\ntag: package-flexibleserver-2024-10-01-preview\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Support Chat Transcripts Client\nDESCRIPTION: Creates a specific client instance for handling chat transcript operations using the client factory\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewChatTranscriptsClient()\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Engagement Fabric Client for Different Clouds in Go\nDESCRIPTION: This code demonstrates how to configure the client factory to connect to different Azure clouds, such as Azure China. It uses ClientOptions from the azcore package.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armengagementfabric.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Creating a Specific Azure Automation Client in Go\nDESCRIPTION: This code demonstrates how to create a specific client (HybridRunbookWorkerGroupClient) using the previously created client factory. This client can be used to perform operations related to hybrid runbook worker groups.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewHybridRunbookWorkerGroupClient()\n```\n\n----------------------------------------\n\nTITLE: Extended Location SDK Struct Definitions\nDESCRIPTION: New struct definitions introduced in version 1.3.0-beta.1 for handling resource sync rules and custom location properties.\n\nLANGUAGE: go\nCODE:\n```\nstruct CustomLocationFindTargetResourceGroupProperties\nstruct CustomLocationFindTargetResourceGroupResult\nstruct MatchExpressionsProperties\nstruct PatchableResourceSyncRule\nstruct ResourceSyncRule\nstruct ResourceSyncRuleListResult\nstruct ResourceSyncRuleProperties\nstruct ResourceSyncRulePropertiesSelector\n```\n\n----------------------------------------\n\nTITLE: Retrieving API Keys in Go\nDESCRIPTION: Retrieves an API key using the APIKeysClient.\n\nLANGUAGE: Go\nCODE:\n```\n*APIKeysClient.Get(context.Context, string, string, string, *APIKeysClientGetOptions) (APIKeysClientGetResponse, error)\n```\n\n----------------------------------------\n\nTITLE: Adding New Enum Values in Go\nDESCRIPTION: Example of adding new values to an existing enum type in Go.\n\nLANGUAGE: go\nCODE:\n```\n// New value `ServiceLevelFlexible` added to enum type `ServiceLevel`\ntype ServiceLevel string\n\nconst (\n    ServiceLevelFlexible ServiceLevel = \"Flexible\"\n    // ... existing values\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure IoT Central Apps Client in Go\nDESCRIPTION: Example of creating a specific client (Apps client) using the Azure IoT Central client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewAppsClient()\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Devhub Module using Go Get\nDESCRIPTION: Command to install the Azure Devhub module using Go's package manager.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/devhub/armdevhub\n```\n\n----------------------------------------\n\nTITLE: Release History Documentation - Azure SDK for Go\nDESCRIPTION: Markdown formatted release history showing version changes from 1.0.0 through 1.4.0-beta.2, documenting new features, enums, functions and structural changes.\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.4.0-beta.2 (2024-06-21)\n### Features Added\n\n- New value `SearchBypassAzureServices` added to enum type `SearchBypass`\n\n\n## 1.4.0-beta.1 (2024-03-22)\n### Features Added\n\n- New value `IdentityTypeSystemAssignedUserAssigned`, `IdentityTypeUserAssigned` added to enum type `IdentityType`\n- New value `SearchServiceStatusStopped` added to enum type `SearchServiceStatus`\n- New enum type `SearchBypass` with values `SearchBypassAzurePortal`, `SearchBypassNone`\n- New enum type `SearchDisabledDataExfiltrationOption` with values `SearchDisabledDataExfiltrationOptionAll`\n[...]\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Compute Fleet Client Factory in Go\nDESCRIPTION: This code creates a client factory for Azure Compute Fleet. It requires a subscription ID and a credential object. The client factory can be used to create specific clients for different Azure Compute Fleet operations.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armcomputefleet.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Adding Last-Modified Header to SetMetadata Response\nDESCRIPTION: YAML directive to add the Last-Modified header to the SetMetadata operation response.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $[\"x-ms-paths\"][\"/{shareName}/{directory}/{fileName}?comp=metadata\"]\n  transform: >\n    $.put.responses[\"200\"].headers[\"Last-Modified\"] = {\n        \"type\": \"string\",\n        \"format\": \"date-time-rfc1123\",\n        \"description\": \"Returns the date and time the file was last modified. Any operation that modifies the file, including an update of the file's metadata or properties, changes the last-modified time of the file.\"\n    }\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure using Default Credentials in Go\nDESCRIPTION: This code snippet shows how to create a default Azure credential for authentication. It uses the azidentity package to provide various authentication methods.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Authentication Setup with Azure Identity\nDESCRIPTION: Creates a default Azure credential object for authentication with Azure services.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Addons Support Plan Types Client in Go\nDESCRIPTION: This code demonstrates how to create a specific client for Support Plan Types using the previously created client factory. This client can be used to perform operations related to support plan types.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewSupportPlanTypesClient()\n```\n\n----------------------------------------\n\nTITLE: Fixing x-ms-content-crc64 Header Response Name\nDESCRIPTION: YAML directive to set the client name for the x-ms-content-crc64 header to 'ContentCRC64'.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.x-ms-paths.*.*.responses.*.headers.x-ms-content-crc64\n  transform: >\n    $[\"x-ms-client-name\"] = \"ContentCRC64\"\n```\n\n----------------------------------------\n\nTITLE: Creating BackupInstancesExtensionRoutingClient from ClientFactory in Go\nDESCRIPTION: Creates a new BackupInstancesExtensionRoutingClient using the ClientFactory.\n\nLANGUAGE: Go\nCODE:\n```\n*ClientFactory.NewBackupInstancesExtensionRoutingClient() *BackupInstancesExtensionRoutingClient\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Managed Service Identity Module in Go\nDESCRIPTION: This command installs the Azure Managed Service Identity module using Go's package manager.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/msi/armmsi\n```\n\n----------------------------------------\n\nTITLE: Creating Communication Services Domain Client\nDESCRIPTION: Creates a domains client instance using the client factory to access domain-related APIs.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewDomainsClient()\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Time Series Insights Go SDK\nDESCRIPTION: YAML configuration for AutoRest code generator that specifies the parameters for generating the Azure Time Series Insights Go SDK. It references the API specifications, sets the Azure ARM mode, defines the module version, and specifies the license header type.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/163e27c0ca7570bc39e00a46f255740d9b3ba3cb/specification/timeseriesinsights/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/163e27c0ca7570bc39e00a46f255740d9b3ba3cb/specification/timeseriesinsights/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.2.0\ntag: package-2020-05-15\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Network Function Manager Client in Go\nDESCRIPTION: This code demonstrates how to create a specific client using the previously created client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewClient()\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure Trustedsigning Client Factory in Go\nDESCRIPTION: This code creates a new client factory for Azure Trustedsigning services, using the subscription ID and credentials.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armtrustedsigning.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Credentials - Go\nDESCRIPTION: Creates a default Azure credential object for authentication with Azure services\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: New Azure Redis Enterprise SDK Functions\nDESCRIPTION: New function declarations added in version 2.1.0-beta.2 for managing access policy assignments and client operations.\n\nLANGUAGE: Go\nCODE:\n```\nNewAccessPolicyAssignmentClient(string, azcore.TokenCredential, *arm.ClientOptions) (*AccessPolicyAssignmentClient, error)\n*AccessPolicyAssignmentClient.BeginCreateUpdate(context.Context, string, string, string, string, AccessPolicyAssignment, *AccessPolicyAssignmentClientBeginCreateUpdateOptions) (*runtime.Poller[AccessPolicyAssignmentClientCreateUpdateResponse], error)\n*AccessPolicyAssignmentClient.BeginDelete(context.Context, string, string, string, string, *AccessPolicyAssignmentClientBeginDeleteOptions) (*runtime.Poller[AccessPolicyAssignmentClientDeleteResponse], error)\n*AccessPolicyAssignmentClient.Get(context.Context, string, string, string, string, *AccessPolicyAssignmentClientGetOptions) (AccessPolicyAssignmentClientGetResponse, error)\n*AccessPolicyAssignmentClient.NewListPager(string, string, string, *AccessPolicyAssignmentClientListOptions) *runtime.Pager[AccessPolicyAssignmentClientListResponse]\n*ClientFactory.NewAccessPolicyAssignmentClient() *AccessPolicyAssignmentClient\n```\n\n----------------------------------------\n\nTITLE: Go Enum Type Definitions for NewRelic Status\nDESCRIPTION: New enum types added in version 1.2.0 for configuration names, patch operations and resource status values.\n\nLANGUAGE: go\nCODE:\n```\ntype ConfigurationName string\ntype PatchOperation string\ntype Status string\n```\n\n----------------------------------------\n\nTITLE: Defining New Enum Values in Go for DigitalTwins Module\nDESCRIPTION: This snippet shows the addition of new enum values for various types in the DigitalTwins module, including DigitalTwinsIdentityType, CleanupConnectionArtifacts, IdentityType, and RecordPropertyAndItemRemovals.\n\nLANGUAGE: markdown\nCODE:\n```\n- New value `DigitalTwinsIdentityTypeSystemAssignedUserAssigned`, `DigitalTwinsIdentityTypeUserAssigned` added to enum type `DigitalTwinsIdentityType`\n- New enum type `CleanupConnectionArtifacts` with values `CleanupConnectionArtifactsFalse`, `CleanupConnectionArtifactsTrue`\n- New enum type `IdentityType` with values `IdentityTypeSystemAssigned`, `IdentityTypeUserAssigned`\n- New enum type `RecordPropertyAndItemRemovals` with values `RecordPropertyAndItemRemovalsFalse`, `RecordPropertyAndItemRemovalsTrue`\n```\n\n----------------------------------------\n\nTITLE: Release Notes Version 1.2.0 (2023-11-24)\nDESCRIPTION: Documents feature additions for test fakes and OpenTelemetry trace spans support.\n\nLANGUAGE: markdown\nCODE:\n```\n### Features Added\\n\\n- Support for test fakes and OpenTelemetry trace spans.\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Active Directory Client in Go\nDESCRIPTION: Demonstrates how to create a specific client (PrivateLinkResourcesClient) using the client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewPrivateLinkResourcesClient()\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Analysis Services Module in Go\nDESCRIPTION: Command to install the Azure Analysis Services module using Go's package manager.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/analysisservices/armanalysisservices\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Resource Connector SDK Generation in YAML\nDESCRIPTION: This YAML configuration specifies the parameters for AutoRest to generate the Azure Resource Connector SDK. It includes the Azure ARM flag, required API specifications, license header, module version, and API version tag.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/5f700acd3d094d8eedca381932f2e7916afd2e55/specification/resourceconnector/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/5f700acd3d094d8eedca381932f2e7916afd2e55/specification/resourceconnector/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.1.0\ntag: package-2022-10-27\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Factory with Custom Options\nDESCRIPTION: Creates a client factory with custom options for connecting to different Azure clouds.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armconfidentialledger.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Modifying Container Client Methods\nDESCRIPTION: YAML directive to remove pager methods and export various generated methods in the container client.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: zz_container_client.go\n    where: $\n    transform: >\n      return $.\n        replace(/func \\(client \\*ContainerClient\\) NewListBlobFlatSegmentPager\\(.+\\/\\/ listBlobFlatSegmentCreateRequest creates the ListBlobFlatSegment request/s, `//\\n// listBlobFlatSegmentCreateRequest creates the ListBlobFlatSegment request`).\n        replace(/\\(client \\*ContainerClient\\) listBlobFlatSegmentCreateRequest\\(/, `(client *ContainerClient) ListBlobFlatSegmentCreateRequest(`).\n        replace(/\\(client \\*ContainerClient\\) listBlobFlatSegmentHandleResponse\\(/, `(client *ContainerClient) ListBlobFlatSegmentHandleResponse(`);\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure using Default Credentials in Go\nDESCRIPTION: Creates a default Azure credential for authentication with Azure services.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Dev Center Client for Sovereign Clouds in Go\nDESCRIPTION: This code shows how to configure the Azure Dev Center client for use with sovereign clouds or Azure Stack. It uses ClientOptions to set the cloud endpoint.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armdevcenter.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure PostgreSQL SDK Module\nDESCRIPTION: Command to install the Azure Database for PostgreSQL module using Go modules package management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/postgresql/armpostgresqlflexibleservers/v4\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Compute Module in Go\nDESCRIPTION: Command to install the Azure Compute module using Go modules for versioning and dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute/v6\n```\n\n----------------------------------------\n\nTITLE: Documenting Release 0.2.0 Changes in Markdown\nDESCRIPTION: This snippet details the new features added in version 0.2.0 of the SDK, including a new enum type, struct, and additional fields in existing structs.\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.2.0 (2024-10-23)\n### Features Added\n\n- New enum type `AutoGeneratedDomainNameLabelScope` with values `AutoGeneratedDomainNameLabelScopeNoReuse`, `AutoGeneratedDomainNameLabelScopeResourceGroupReuse`, `AutoGeneratedDomainNameLabelScopeSubscriptionReuse`, `AutoGeneratedDomainNameLabelScopeTenantReuse`\n- New struct `VMApplication`\n- New field `AutoGeneratedDomainNameLabelScope`, `CustomFqdn` in struct `ManagedClusterProperties`\n- New field `VMApplications` in struct `NodeTypeProperties`\n```\n\n----------------------------------------\n\nTITLE: Importing the Media Services Package in Go\nDESCRIPTION: Example of how to import the Media Services package in a Go application. This is inferred from the package name mentioned in the changelog.\n\nLANGUAGE: Go\nCODE:\n```\nimport \"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/mediaservices/armmediaservices\"\n```\n\n----------------------------------------\n\nTITLE: Creating Template Specs Client\nDESCRIPTION: Instantiates a new Template Specs client using the client factory\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewClient()\n```\n\n----------------------------------------\n\nTITLE: New Enum Type in Go\nDESCRIPTION: Example of a new enum type added in version 6.2.0\n\nLANGUAGE: go\nCODE:\n```\ntype AccessControlRulesMode string\n\nconst (\n  AccessControlRulesModeAudit     AccessControlRulesMode = \"Audit\"\n  AccessControlRulesModeDisabled  AccessControlRulesMode = \"Disabled\"\n  AccessControlRulesModeEnforce  AccessControlRulesMode = \"Enforce\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure PostgreSQL HSC SDK Generation in YAML\nDESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure SDK for Go for PostgreSQL Hyperscale (Citus). It specifies the Azure ARM mode, required API specifications, license header, and module version.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/postgresqlhsc/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/postgresqlhsc/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 0.6.1\n```\n\n----------------------------------------\n\nTITLE: New Azure Bot Service API Functions - Go\nDESCRIPTION: Several new client functions added for managing Bot Service resources including email, QnA Maker endpoints, and various channel types. Includes methods for creating sign-in URLs and retrieving endpoint keys.\n\nLANGUAGE: go\nCODE:\n```\nNewEmailClient(string, azcore.TokenCredential, *arm.ClientOptions) (*EmailClient, error)\nNewQnAMakerEndpointKeysClient(string, azcore.TokenCredential, *arm.ClientOptions) (*QnAMakerEndpointKeysClient, error)\n*EmailClient.CreateSignInURL(context.Context, string, string, *EmailClientCreateSignInURLOptions) (EmailClientCreateSignInURLResponse, error)\n*QnAMakerEndpointKeysClient.Get(context.Context, QnAMakerEndpointKeysRequestBody, *QnAMakerEndpointKeysClientGetOptions) (QnAMakerEndpointKeysClientGetResponse, error)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Client Options for Different Clouds in Go\nDESCRIPTION: This snippet shows how to configure client options to connect to different Azure clouds, such as Azure China. It uses the arm.ClientOptions struct to set the cloud option.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armmsi.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest Settings for Azure Go SDK Generation\nDESCRIPTION: Defines core AutoRest configuration parameters including ARM mode, required API specs, licensing, and module version. References specific versions of Azure REST API specifications for workloads resource manager.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/1e7b408f3323e7f5424745718fe62c7a043a2337/specification/workloads/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/1e7b408f3323e7f5424745718fe62c7a043a2337/specification/workloads/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.1.0\n```\n\n----------------------------------------\n\nTITLE: Update Test Resources - Resource Group Parameter Set\nDESCRIPTION: PowerShell command syntax for updating test resources using resource group name directly. Allows specifying the resource group name, subscription ID and deletion time.\n\nLANGUAGE: powershell\nCODE:\n```\nUpdate-TestResources.ps1 [-ResourceGroupName <String>] [-SubscriptionId <String>] [-DeleteAfterHours <Int32>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Container Service Module\nDESCRIPTION: Command to install the Azure Container Service module using Go modules.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/containerservice/armcontainerservice/v6\n```\n\n----------------------------------------\n\nTITLE: Declaring New Functions for AppliancesClient in Go\nDESCRIPTION: This snippet shows the declaration of new functions added to the AppliancesClient in version 0.4.0. These functions include operations for getting telemetry config and listing keys.\n\nLANGUAGE: go\nCODE:\n```\n*AppliancesClient.GetTelemetryConfig(context.Context, *AppliancesClientGetTelemetryConfigOptions) (AppliancesClientGetTelemetryConfigResponse, error)\n*AppliancesClient.ListKeys(context.Context, string, string, *AppliancesClientListKeysOptions) (AppliancesClientListKeysResponse, error)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Cosmos DB Module in Go\nDESCRIPTION: This snippet demonstrates how to install the Azure Cosmos DB module using Go's package manager. It requires Go modules for versioning and dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/cosmos/armcosmos/v4\n```\n\n----------------------------------------\n\nTITLE: Adding Internal Import Directive\nDESCRIPTION: AutoRest directive to add internal package import to multiple client-related files.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from:\n      - \"*_client.go\"\n      - \"client.go\"\n      - \"client_factory.go\"\n    where: $\n    transform: return $.replace(/import \\(\\n/, \"import (\\n\\\"github.com/Azure/azure-sdk-for-go/profile/p20200901/internal\\\"\\n\");\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Dynatrace using Default Credentials in Go\nDESCRIPTION: This code snippet demonstrates how to create a default Azure credential object for authentication with Azure Dynatrace. It uses the azidentity package to create a DefaultAzureCredential instance.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Deployment Manager Module in Go\nDESCRIPTION: This command installs the Azure Deployment Manager module using Go's package manager. It requires Go modules for versioning and dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/deploymentmanager/armdeploymentmanager\n```\n\n----------------------------------------\n\nTITLE: Querying NetworkSecurityPerimeter Configuration in Go\nDESCRIPTION: Retrieves the network security perimeter configuration using the GetConfiguration method.\n\nLANGUAGE: Go\nCODE:\n```\nresp, err := client.GetConfiguration(ctx, resourceGroupName, accountName, configurationName, options)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest Settings for Azure SDK Generation\nDESCRIPTION: YAML configuration for AutoRest that specifies the source API specifications, licensing, versioning, and other parameters needed to generate the Azure SDK for Go. References the managed network fabric API specification and its Go-specific configuration.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/925ba149e17454ce91ecd3f9f4134effb2f97844/specification/managednetworkfabric/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/925ba149e17454ce91ecd3f9f4134effb2f97844/specification/managednetworkfabric/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.1.0\ntag: package-2023-06-15\n```\n\n----------------------------------------\n\nTITLE: Client Methods\nDESCRIPTION: Common client methods for managing archive versions\n\nLANGUAGE: go\nCODE:\n```\nfunc (*ArchiveVersionsClient) BeginCreate(context.Context, string, string, string, string, string, *ArchiveVersionsClientBeginCreateOptions) (*runtime.Poller[ArchiveVersionsClientCreateResponse], error)\n\nfunc (*ArchiveVersionsClient) BeginDelete(context.Context, string, string, string, string, string, *ArchiveVersionsClientBeginDeleteOptions) (*runtime.Poller[ArchiveVersionsClientDeleteResponse], error)\n\nfunc (*ArchiveVersionsClient) Get(context.Context, string, string, string, string, string, *ArchiveVersionsClientGetOptions) (ArchiveVersionsClientGetResponse, error)\n```\n\n----------------------------------------\n\nTITLE: Adding Internal Package Import\nDESCRIPTION: Directive to add internal package import to client-related Go files for module version and name handling.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from:\n      - \"*_client.go\"\n      - \"client.go\"\n      - \"client_factory.go\"\n    where: $\n    transform: return $.replace(/import \\(\\n/, \"import (\\n\\\"github.com/Azure/azure-sdk-for-go/profile/p20200901/internal\\\"\\n\");\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK Generation in YAML\nDESCRIPTION: This YAML configuration sets up AutoRest for generating the Azure SDK for Go. It enables Azure ARM mode, specifies required API specifications from GitHub, sets the license header, and defines the module version.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/subscription/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/subscription/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.2.0\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Identity\nDESCRIPTION: Creates a default Azure credential object for authentication with Azure services\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Graphservices Account Client in Go\nDESCRIPTION: Code snippet demonstrating how to create a specific client (Account Client) using the client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewAccountClient()\n```\n\n----------------------------------------\n\nTITLE: New Enum Types and Functions (v2.2.0)\nDESCRIPTION: Major feature additions including new enum types for authentication modes, composition types, private link delegation, and snapshot status. Also includes new client functions for snapshot management.\n\nLANGUAGE: go\nCODE:\n```\ntype AuthenticationMode string\ntype CompositionType string\ntype PrivateLinkDelegation string\ntype SnapshotStatus string\n\nfunc *ClientFactory.NewSnapshotsClient() *SnapshotsClient\nfunc NewSnapshotsClient(string, azcore.TokenCredential, *arm.ClientOptions) (*SnapshotsClient, error)\nfunc *SnapshotsClient.BeginCreate(context.Context, string, string, string, Snapshot, *SnapshotsClientBeginCreateOptions) (*runtime.Poller[SnapshotsClientCreateResponse], error)\nfunc *SnapshotsClient.Get(context.Context, string, string, string, *SnapshotsClientGetOptions) (SnapshotsClientGetResponse, error)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Client Options for Different Clouds in Go\nDESCRIPTION: This code example demonstrates how to configure client options for connecting to different Azure clouds. It shows setting up options to connect to Azure China cloud using the ClientOptions struct from the arm package and the Cloud constant from the cloud package.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armmysql.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Hybrid Compute Module in Go\nDESCRIPTION: This snippet demonstrates how to install the Azure Hybrid Compute module using Go modules. It requires Go to be installed on the system.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/hybridcompute/armhybridcompute/v2\n```\n\n----------------------------------------\n\nTITLE: Version History Entry - 0.7.0\nDESCRIPTION: Release notes for version 0.7.0 documenting addition of ClientFactory struct\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.7.0 (2023-03-31)\n### Features Added\n\n- New struct `ClientFactory` which is a client factory used to create any client in this module\n```\n\n----------------------------------------\n\nTITLE: Importing DeletedAutomationAccountsClient in Go\nDESCRIPTION: Creates a new DeletedAutomationAccountsClient using the provided subscription ID, token credential, and optional client options.\n\nLANGUAGE: go\nCODE:\n```\nNewDeletedAutomationAccountsClient(string, azcore.TokenCredential, *arm.ClientOptions) (*DeletedAutomationAccountsClient, error)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Automanage Service Clients in Go\nDESCRIPTION: Initializes specific service clients for Reports, Configuration Profiles, and Assignments using the client factory.\n\nLANGUAGE: go\nCODE:\n```\nreportsClient := clientFactory.NewReportsClient()\nconfigProfilesClient := clientFactory.NewReportsClient()\nassignmentClient := clientFactory.NewReportsClient()\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Data Lake Analytics Module in Go\nDESCRIPTION: This command installs the Azure Data Lake Analytics module using Go's package manager. It requires Go modules for versioning and dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/datalake-analytics/armdatalakeanalytics\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK Go Generation\nDESCRIPTION: This YAML configuration sets up AutoRest for generating Azure SDK for Go. It specifies Azure ARM mode, required API specifications, license header, and module version. The configuration targets Power BI Private Links resource manager.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/f790e624d0d080b89d962a3bd19c65bc6a6b2f5e/specification/powerbiprivatelinks/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/f790e624d0d080b89d962a3bd19c65bc6a6b2f5e/specification/powerbiprivatelinks/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 2.1.0\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Arc VMware Client Factory\nDESCRIPTION: Initializes a client factory for Azure Arc VMware Management with basic configuration.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armconnectedvmware.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Module Constants Removal Directive\nDESCRIPTION: AutoRest directive to remove moduleName and moduleVersion constants from the constants.go file.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: constants.go\n    where: $\n    transform: return $.replace(/const \\(\\n\\s+moduleName.+\\n\\s+moduleVersion.+\\n\\)\\n/, \"\");\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure using DefaultAzureCredential in Go\nDESCRIPTION: Creates a default Azure credential for authentication with Azure resources using the azidentity package.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Deployment Manager Client Factory in Go\nDESCRIPTION: This code creates a client factory for Azure Deployment Manager. It requires a subscription ID and credentials. The factory can be used to create specific clients within the module.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armdeploymentmanager.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Secret using New AzSecrets Module in Go\nDESCRIPTION: Example showing how to create a secret using the new azsecrets module. Uses azidentity for authentication and requires vault URL only during client initialization.\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"context\"\n\t\"fmt\"\n\n\t\"github.com/Azure/azure-sdk-for-go/sdk/azidentity\"\n\t\"github.com/Azure/azure-sdk-for-go/sdk/security/keyvault/azsecrets\"\n)\n\nfunc main() {\n\tvaultURL := \"https://<TODO: your vault name>.vault.azure.net\"\n    secretName := \"mySecret\"\n\tsecretValue := \"mySecretValue\"\n\n\tcred, err := azidentity.NewDefaultAzureCredential(nil)\n\tif err != nil {\n\t\t// TODO: handle error\n\t}\n\n\tclient, err := azsecrets.NewClient(vaultURL, cred, nil)\n\tif err != nil {\n\t\t// TODO: handle error\n\t}\n\n\tresp, err := client.SetSecret(context.TODO(), secretName, azsecrets.SetSecretParameters{Value: &secretValue}, nil)\n\tif err != nil {\n\t\t// TODO: handle error\n\t}\n\n\tfmt.Printf(\"Set secret %s\", resp.ID.Name())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Machine Learning Services SDK Generation\nDESCRIPTION: YAML configuration for AutoRest to generate the Azure Machine Learning Services SDK. It specifies Azure ARM mode, required API specifications, license header, and module version.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/machinelearningservices/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/machinelearningservices/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.0.1\n```\n\n----------------------------------------\n\nTITLE: Markdown Release History Document\nDESCRIPTION: Changelog entries documenting version updates for the Azure SDK for Go, including features, bug fixes, and breaking changes across versions 1.0.0 through 1.2.0.\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.2.0 (2023-11-24)\n### Features Added\n\n- Support for test fakes and OpenTelemetry trace spans.\n\n\n## 1.1.1 (2023-04-14)\n### Bug Fixes\n\n- Fix serialization bug of empty value of `any` type.\n\n\n## 1.1.0 (2023-03-28)\n### Features Added\n\n- New struct `ClientFactory` which is a client factory used to create any client in this module\n\n\n## 1.0.0 (2022-07-15)\n\nThe package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/fluidrelay/armfluidrelay` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html) since version 1.0.0, which contains breaking changes.\n\nTo migrate the existing applications to the latest version, please refer to [Migration Guide](https://aka.ms/azsdk/go/mgmt/migration).\n\nTo learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).\n```\n\n----------------------------------------\n\nTITLE: Breaking Change: Contact Client Parameter Update\nDESCRIPTION: Parameter signature changes for ContactsClient methods Create, Delete and Get, replacing string with SecurityContactName type.\n\nLANGUAGE: go\nCODE:\n```\n// Before\nfunc (client *ContactsClient) Create(ctx context.Context, name string, contact Contact, options *ContactsClientCreateOptions) (...)\n\n// After\nfunc (client *ContactsClient) Create(ctx context.Context, name SecurityContactName, contact Contact, options *ContactsClientCreateOptions) (...)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Event Hubs SDK Generation in YAML\nDESCRIPTION: This YAML configuration specifies settings for AutoRest to generate the Azure Event Hubs SDK for Go. It includes references to API specifications, sets the Azure ARM flag, defines the license header, module version, and API version tag.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/5759c77eee2d57bdb9e47aa1805d0ffb61704f2d/specification/eventhub/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/5759c77eee2d57bdb9e47aa1805d0ffb61704f2d/specification/eventhub/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.4.0-beta.1\ntag: package-2024-05-preview\n```\n\n----------------------------------------\n\nTITLE: Example Breaking Change in v4.0.0\nDESCRIPTION: Shows type changes for FunctionsAlwaysReadyConfig properties from float32 to int32\n\nLANGUAGE: go\nCODE:\n```\nType of `FunctionsAlwaysReadyConfig.InstanceCount` has been changed from `*float32` to `*int32`\nType of `FunctionsScaleAndConcurrency.InstanceMemoryMB` has been changed from `*float32` to `*int32`\nType of `FunctionsScaleAndConcurrency.MaximumInstanceCount` has been changed from `*float32` to `*int32`\nType of `FunctionsScaleAndConcurrencyTriggersHTTP.PerInstanceConcurrency` has been changed from `*float32` to `*int32`\n```\n\n----------------------------------------\n\nTITLE: Creating SAP Discovery Sites Client\nDESCRIPTION: Instantiates a new SAP Discovery Sites client using the client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewSapDiscoverySitesClient()\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK Go Generation\nDESCRIPTION: This YAML configuration specifies settings for AutoRest to generate the Azure SDK for Go. It sets the Azure ARM flag, requires specific API specifications, defines the license header, module version, and API version tag.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/685aad3f33d355c1d9c89d493ee9398865367bd8/specification/appplatform/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/685aad3f33d355c1d9c89d493ee9398865367bd8/specification/appplatform/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 2.0.0\ntag: package-2023-12\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Data Lake Store Go SDK Generation\nDESCRIPTION: YAML configuration for AutoRest tool to generate Go SDK code for Azure Data Lake Store. Specifies Azure ARM mode, required API specification sources from GitHub, Microsoft MIT license header requirement, and module version 1.2.0.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/datalake-store/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/datalake-store/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.2.0\n```\n\n----------------------------------------\n\nTITLE: Default Azure Test Resource Deployment\nDESCRIPTION: PowerShell syntax for deploying test resources using default parameters. This snippet shows the basic command structure with optional parameters for base configuration.\n\nLANGUAGE: powershell\nCODE:\n```\nNew-TestResources.ps1 [-BaseName <String>] [-ResourceGroupName <String>] [-ServiceDirectory] <String>\n [-TestResourcesDirectory <String>] [-TestApplicationId <String>] [-TestApplicationSecret <String>]\n [-TestApplicationOid <String>] [-SubscriptionId <String>] [-DeleteAfterHours <Int32>] [-Location <String>]\n [-Environment <String>] [-ResourceType <String>] [-ArmTemplateParameters <Hashtable>]\n [-AdditionalParameters <Hashtable>] [-EnvironmentVariables <Hashtable>] [-CI] [-Force] [-OutFile]\n [-SuppressVsoCommands] [-ServicePrincipalAuth] [-NewTestResourcesRemainingArguments <Object>]\n [-ProgressAction <ActionPreference>] [-WhatIf] [-Confirm] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Policy Insight Module in Go\nDESCRIPTION: This snippet demonstrates how to install the Azure Policy Insight module using Go's package manager. It requires Go modules for versioning and dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/policyinsights/armpolicyinsights\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Confluent Access Client in Go\nDESCRIPTION: Example of creating an Access Client using the Azure Confluent client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewAccessClient()\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure using Default Azure Credential in Go\nDESCRIPTION: Code snippet demonstrating how to create a default Azure credential for authentication. This credential can be used to authenticate with Azure services.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure DNS Private Resolver Module in Go\nDESCRIPTION: Command to install the Azure DNS Private Resolver module using Go's package manager.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/dnsresolver/armdnsresolver\n```\n\n----------------------------------------\n\nTITLE: Implementing MaxIntegratedCacheStaleness Option in Azure Cosmos DB Go SDK\nDESCRIPTION: Addition of MaxIntegratedCacheStaleness option support in the Azure SDK for Go Cosmos DB client. This feature was added in version 1.1.0.\n\nLANGUAGE: markdown\nCODE:\n```\n* Added support for MaxIntegratedCacheStaleness option See [PR 23406](https://github.com/Azure/azure-sdk-for-go/pull/23406)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure IoT Security Module in Go\nDESCRIPTION: Command to install the Azure IoT Security module using Go modules. This command fetches the module from the Azure SDK for Go repository.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/iotsecurity/armiotsecurity\n```\n\n----------------------------------------\n\nTITLE: Version History Entry - 0.7.1\nDESCRIPTION: Release notes for version 0.7.1 documenting bug fix for serialization of empty any type values\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.7.1 (2023-04-14)\n### Bug Fixes\n\n- Fix serialization bug of empty value of `any` type.\n```\n\n----------------------------------------\n\nTITLE: Creating Management Configurations Client in Go\nDESCRIPTION: This snippet shows how to create a specific client (ManagementConfigurationsClient) using the client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewManagementConfigurationsClient()\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Resource Links Client Factory\nDESCRIPTION: Initializes a new client factory for Azure Resource Links with basic configuration.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armlinks.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure Dedicated HSM Client Factory\nDESCRIPTION: This code creates a client factory for Azure Dedicated HSM, which can be used to instantiate specific clients.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armhardwaresecuritymodules.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Fixing Time Format for File-Related Headers\nDESCRIPTION: YAML directive to fix the time format for parsing response headers related to file creation, last write, and change times.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from:\n    - zz_directory_client.go\n    - zz_file_client.go\n    where: $\n    transform: >\n      return $.\n        replace(/fileCreationTime,\\s+err\\s+\\:=\\s+time\\.Parse\\(time\\.RFC1123,\\s+val\\)/g, `fileCreationTime, err := time.Parse(ISO8601, val)`).\n        replace(/fileLastWriteTime,\\s+err\\s+\\:=\\s+time\\.Parse\\(time\\.RFC1123,\\s+val\\)/g, `fileLastWriteTime, err := time.Parse(ISO8601, val)`).\n        replace(/fileChangeTime,\\s+err\\s+\\:=\\s+time\\.Parse\\(time\\.RFC1123,\\s+val\\)/g, `fileChangeTime, err := time.Parse(ISO8601, val)`);\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Media Services Go SDK\nDESCRIPTION: YAML configuration for AutoRest that defines the parameters needed to generate the Azure Media Services SDK for Go. Specifies the Azure ARM mode, required API specification sources, license header type, and module version.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/e7bf3adfa2d5e5cdbb804eec35279501794f461c/specification/mediaservices/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/e7bf3adfa2d5e5cdbb804eec35279501794f461c/specification/mediaservices/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 3.4.0\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Billing SDK Generation\nDESCRIPTION: YAML configuration that defines parameters for generating Azure Billing SDK code using AutoRest. Specifies the source API specifications, license header type, module version, and API version tag to use.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/c08ac9813477921ad8295b98ced8f82d11b8f913/specification/billing/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/c08ac9813477921ad8295b98ced8f82d11b8f913/specification/billing/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.0.0\ntag: package-2024-04\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SQL SDK Generation in YAML\nDESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure SQL SDK for Go. It enables Azure ARM mode, specifies required specification files, sets the license header, module version, and package tag.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/a3913f4b26467aed413cdc907116e99894f08994/specification/sql/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/a3913f4b26467aed413cdc907116e99894f08994/specification/sql/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 2.0.0-beta.6\ntag: package-composite-v5\n```\n\n----------------------------------------\n\nTITLE: Importing Azure Automanage and Azure Identity modules in Go\nDESCRIPTION: Go import statements for including the Azure Automanage and Azure Identity modules in your project.\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"github.com/Azure/azure-sdk-for-go/sdk/azidentity\"\n\t\"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/automanage/armautomanage\"\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Database for MySQL Module in Go\nDESCRIPTION: This snippet demonstrates how to install the Azure Database for MySQL module using Go's package manager.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/mysql/armmysqlflexibleservers/v2\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Hybrid Data Client Factory\nDESCRIPTION: Initializes a client factory for Azure Hybrid Data services using subscription ID and credentials.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armazurearcdata.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Using Default Credentials in Go\nDESCRIPTION: This code snippet shows how to create a default Azure credential for authentication. It uses the azidentity package to create a DefaultAzureCredential object.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Data Lake Store Accounts Client\nDESCRIPTION: Instantiates a new accounts client using the client factory\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewAccountsClient()\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Stack HCI Module\nDESCRIPTION: Command to install the Azure Stack HCI module using Go modules for dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/azurestackhci/armazurestackhci/v2\n```\n\n----------------------------------------\n\nTITLE: Adding New Struct in Go\nDESCRIPTION: Example of adding a new struct type in Go.\n\nLANGUAGE: go\nCODE:\n```\n// New struct added\ntype ChangeKeyVault struct {\n    // Fields\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Stack HCI Module\nDESCRIPTION: Command to install the Azure Stack HCI module using Go modules for dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/azurestackhci/armazurestackhci/v2\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest YAML for Azure Compute SDK Generation\nDESCRIPTION: Defines AutoRest configuration parameters for generating Azure Compute SDK code. Specifies Azure ARM mode, required API specifications, license header type, module version 6.3.0, and API version package tag.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/d6d0798c6f5eb196fba7bd1924db2b145a94f58c/specification/compute/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/d6d0798c6f5eb196fba7bd1924db2b145a94f58c/specification/compute/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 6.3.0\ntag: package-2024-11-04\n```\n\n----------------------------------------\n\nTITLE: Breaking Changes Announcement for Workload Monitor SDK in Markdown\nDESCRIPTION: Markdown content announcing breaking changes in version 0.5.0 of the Workload Monitor SDK, including links to migration guide and quick start documentation.\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.5.0 (2022-05-18)\n\nThe package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/workloadmonitor/armworkloadmonitor` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html) since version 0.5.0, which contains breaking changes.\n\nTo migrate the existing applications to the latest version, please refer to [Migration Guide](https://aka.ms/azsdk/go/mgmt/migration).\n\nTo learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).\n```\n\n----------------------------------------\n\nTITLE: Creating Azure DevOps Infrastructure Client Factory in Go\nDESCRIPTION: This code creates a client factory for Azure DevOps Infrastructure. It requires a subscription ID and a credential object for authentication.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armdevopsinfrastructure.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Event Grid System Events Module\nDESCRIPTION: Command to install the Azure Event Grid system events module using Go's package manager\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/messaging/eventgrid/azsystemevents\n```\n\n----------------------------------------\n\nTITLE: Making Duration Parameter Required in Leases\nDESCRIPTION: YAML directive to change the 'Duration' parameter in leases to be required.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.parameters.LeaseDuration\n  transform: >\n    $.required = true;\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK Go Generation\nDESCRIPTION: YAML configuration for AutoRest to generate Azure SDK for Go. It specifies the Azure ARM mode, required API specifications, license header, and module version.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/marketplace/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/marketplace/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.2.0\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK Go Generation\nDESCRIPTION: YAML configuration for AutoRest to generate Azure SDK for Go. It sets Azure ARM mode, specifies required specification files from Azure REST API specs repository, defines license header, module version, and targets the package-2024-02 API version.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/cf5ad1932d00c7d15497705ad6b71171d3d68b1e/specification/confluent/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/cf5ad1932d00c7d15497705ad6b71171d3d68b1e/specification/confluent/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.3.0\ntag: package-2024-02\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure using DefaultAzureCredential in Go\nDESCRIPTION: Code snippet demonstrating how to create a default Azure credential for authentication.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Default Credential\nDESCRIPTION: Initializes default Azure credentials for authentication with Azure services.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Management Partner Client for Sovereign Clouds in Go\nDESCRIPTION: Example of setting up a client factory with options for connecting to sovereign clouds or Azure Stack.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armmanagementpartner.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Management Partner Client for Sovereign Clouds in Go\nDESCRIPTION: Example of setting up a client factory with options for connecting to sovereign clouds or Azure Stack.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armmanagementpartner.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Advisor Module in Go\nDESCRIPTION: Command to install the Azure Advisor module using Go modules.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/advisor/armadvisor\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Default Credential in Go\nDESCRIPTION: This snippet demonstrates how to create a default Azure credential using the azidentity package. This credential is used for authenticating with Azure Quota services.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Defining New Enum Types in Go\nDESCRIPTION: Example of new enum types added in version 9.1.0\n\nLANGUAGE: Go\nCODE:\n```\ntype SQLServerAuthenticationType string\n\nconst (\n    SQLServerAuthenticationTypeUserAssignedManagedIdentity SQLServerAuthenticationType = \"UserAssignedManagedIdentity\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest Generation for Azure CDN Go SDK\nDESCRIPTION: YAML configuration for AutoRest tool to generate the Azure CDN SDK for Go. Specifies the ARM mode, required API specifications, license header, module version, and modeling parameters. References specific versions of Azure REST API specs for CDN services.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/92de53a5f1e0e03c94b40475d2135d97148ed014/specification/cdn/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/92de53a5f1e0e03c94b40475d2135d97148ed014/specification/cdn/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 2.2.0\nmodelerfour:\n  lenient-model-deduplication: true\ntag: package-2024-02\n```\n\n----------------------------------------\n\nTITLE: Azure SDK Release Notes\nDESCRIPTION: Markdown formatted release history detailing version changes, new features, bug fixes and other modifications across multiple versions of the Azure SDK for Go.\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.3.0 (2023-11-24)\n### Features Added\n\n- Support for test fakes and OpenTelemetry trace spans.\n\n\n## 1.3.0-beta.3 (2023-10-09)\n\n### Other Changes\n\n- Updated to latest `azcore` beta.\n\n## 1.3.0-beta.2 (2023-07-19)\n\n### Bug Fixes\n\n- Fixed a potential panic in faked paged and long-running operations.\n\n## 1.3.0-beta.1 (2023-06-12)\n\n### Features Added\n\n- Support for test fakes and OpenTelemetry trace spans.\n\n## 1.2.0 (2023-05-26)\n### Features Added\n\n- New enum type `ActionType` with values `ActionTypeInternal`\n- New enum type `Origin` with values `OriginSystem`, `OriginUser`, `OriginUserSystem`\n- New function `*ClientFactory.NewOperationsClient() *OperationsClient`\n- New function `NewOperationsClient(azcore.TokenCredential, *arm.ClientOptions) (*OperationsClient, error)`\n- New function `*OperationsClient.NewListPager(*OperationsClientListOptions) *runtime.Pager[OperationsClientListResponse]`\n- New struct `AvailabilityZoneMappings`\n- New struct `OperationAutoGenerated`\n- New struct `OperationDisplayAutoGenerated`\n- New struct `OperationListResultAutoGenerated`\n- New field `AvailabilityZoneMappings` in struct `Location`\n- New field `Geography` in struct `LocationMetadata`\n- New field `ActionType`, `IsDataAction`, `Origin` in struct `Operation`\n\n\n## 1.1.1 (2023-04-14)\n### Bug Fixes\n\n- Fix serialization bug of empty value of `any` type.\n\n\n## 1.1.0 (2023-03-27)\n### Features Added\n\n- New struct `ClientFactory` which is a client factory used to create any client in this module\n\n\n## 1.0.0 (2022-05-16)\n\nThe package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armsubscriptions` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html) since version 1.0.0, which contains breaking changes.\n\nTo migrate the existing applications to the latest version, please refer to [Migration Guide](https://aka.ms/azsdk/go/mgmt/migration).\n\nTo learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest Settings for Azure Edge Order SDK\nDESCRIPTION: YAML configuration for AutoRest code generation. Specifies Azure ARM mode, required API specifications from the azure-rest-api-specs repository, license header type, and module version settings.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/edgeorder/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/edgeorder/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.2.0\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Resource Mover Move Collections Client in Go\nDESCRIPTION: This code demonstrates how to create a specific client for managing move collections using the client factory. This client provides access to move collection-related operations in Azure Resource Mover.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewMoveCollectionsClient()\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Credentials\nDESCRIPTION: Creating default Azure credentials for authentication with Azure Front Door services.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Converting StringEncoded to string Type\nDESCRIPTION: YAML directive to convert StringEncoded type to string in the generated models.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: zz_models.go\n    where: $\n    transform: >\n      return $.\n        replace(/\\*StringEncoded/g, `*string`);\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure Marketplace Ordering Client Factory in Go\nDESCRIPTION: Code snippet showing how to create a client factory for Azure Marketplace Ordering. It requires a subscription ID and credential.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armmarketplaceordering.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Lab Services Go SDK\nDESCRIPTION: Command to install the Azure Lab Services module using Go modules\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/devtestlabs/armdevtestlabs\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK Generation in Go\nDESCRIPTION: This YAML configuration sets up AutoRest for generating the Azure SDK for Go, specifically for the Data Box Edge resource manager. It specifies the Azure ARM mode, required API specifications, license header, and module version.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/databoxedge/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/databoxedge/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.2.0\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Newrelic Module for Go\nDESCRIPTION: This command installs the Azure Newrelic module using Go's package manager. It requires Go modules for versioning and dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/newrelic/armnewrelicobservability\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Resources Client for Sovereign Clouds in Go\nDESCRIPTION: This snippet demonstrates how to configure the client factory to connect to sovereign clouds or Azure Stack.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armdeploymentstacks.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK Go Generation\nDESCRIPTION: YAML configuration for AutoRest to generate Go SDK code for Azure Logz resource manager. It specifies Azure ARM settings, required API specifications from GitHub, licensing header, and module version.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/logz/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/logz/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.2.1\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure using Default Credential in Go\nDESCRIPTION: This snippet demonstrates how to create a default Azure credential for authentication. It uses the azidentity package to create a DefaultAzureCredential object.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Backup Instances Client in Go\nDESCRIPTION: This code shows how to create a specific client for working with backup instances using the client factory. This client provides access to backup instance-related APIs.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewBackupInstancesClient()\n```\n\n----------------------------------------\n\nTITLE: Retrieving an Azure Automanage Configuration Profile in Go\nDESCRIPTION: Fetches an existing Automanage configuration profile and prints its details as JSON.\n\nLANGUAGE: go\nCODE:\n```\nprofile, err := configProfilesClient.Get(context.Background(), \"configurationProfileName\", \"resourceGroupName\", nil)\ndata, err := json.MarshalIndent(profile, \"\", \"   \")\n\nfmt.Println(string(data))\n```\n\n----------------------------------------\n\nTITLE: Adding New Structs for SignalR Service in Go\nDESCRIPTION: New structs added to represent various aspects of SignalR service, including IP rules, replicas, and network ACLs.\n\nLANGUAGE: Go\nCODE:\n```\ntype IPRule struct {}\n```\n\nLANGUAGE: Go\nCODE:\n```\ntype Replica struct {}\n```\n\nLANGUAGE: Go\nCODE:\n```\ntype ReplicaList struct {}\n```\n\nLANGUAGE: Go\nCODE:\n```\ntype ReplicaProperties struct {}\n```\n\nLANGUAGE: Go\nCODE:\n```\ntype ServerlessSettings struct {}\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Using Default Credentials in Go\nDESCRIPTION: Creates a default Azure credential object for authentication with Azure services.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Networkcloud Module\nDESCRIPTION: Command to install the Azure Networkcloud module using Go modules package management system.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/networkcloud/armnetworkcloud\n```\n\n----------------------------------------\n\nTITLE: Adding 'directories' to ListBlobsShowOnly Enum\nDESCRIPTION: YAML directive to add 'directories' to the ListBlobsShowOnly enum if it doesn't already exist.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.parameters.ListBlobsShowOnly\n  transform: >\n    if (!$.enum.includes(\"directories\")) {\n        $.enum.push(\"directories\");\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Management Partner Client Factory in Go\nDESCRIPTION: Code snippet showing how to create a client factory for Azure Management Partner services.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armmanagementpartner.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK Go Generation\nDESCRIPTION: YAML configuration for AutoRest to generate Azure SDK for Go. It specifies Azure ARM mode, required API specifications, license header, and module version for the Customer Lockbox service.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/customerlockbox/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/customerlockbox/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 0.7.0\n```\n\n----------------------------------------\n\nTITLE: Creating Source Control Configurations Client\nDESCRIPTION: Instantiates a new source control configurations client using the client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewSourceControlConfigurationsClient()\n```\n\n----------------------------------------\n\nTITLE: Adding New Enum Values in Go\nDESCRIPTION: New enum values are added to existing enum types like ModelLifecycleStatus and ByPassSelection.\n\nLANGUAGE: Go\nCODE:\n```\ntype ModelLifecycleStatus string\n\nconst (\n    ModelLifecycleStatusDeprecated ModelLifecycleStatus = \"Deprecated\"\n    ModelLifecycleStatusDeprecating ModelLifecycleStatus = \"Deprecating\"\n    ModelLifecycleStatusStable ModelLifecycleStatus = \"Stable\"\n)\n\ntype ByPassSelection string\n\nconst (\n    ByPassSelectionAzureServices ByPassSelection = \"AzureServices\"\n    ByPassSelectionNone ByPassSelection = \"None\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest Settings for Azure SDK Generation\nDESCRIPTION: Defines the configuration parameters for AutoRest to generate Go SDK code from Azure REST API specifications. References specific versions of API specs from the azure-rest-api-specs repository and sets build parameters like licensing and module version.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/72de08114673a547de8a017c85ed89a2017a86f7/specification/liftrqumulo/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/72de08114673a547de8a017c85ed89a2017a86f7/specification/liftrqumulo/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 2.0.0\ntag: package-2024-06-19\n```\n\n----------------------------------------\n\nTITLE: Creating Agent Pools Client\nDESCRIPTION: Creates a specific client instance for working with Agent Pools using the client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewAgentPoolsClient()\n```\n\n----------------------------------------\n\nTITLE: Validating Cross-Region Restore for BackupInstances in Go\nDESCRIPTION: Validates a cross-region restore operation for backup instances using the BackupInstancesClient.\n\nLANGUAGE: Go\nCODE:\n```\n*BackupInstancesClient.BeginValidateCrossRegionRestore(context.Context, string, string, ValidateCrossRegionRestoreRequestObject, *BackupInstancesClientBeginValidateCrossRegionRestoreOptions) (*runtime.Poller[BackupInstancesClientValidateCrossRegionRestoreResponse], error)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Database for PostgreSQL Module in Go\nDESCRIPTION: Uses go get command to install the Azure Database for PostgreSQL module from the Azure SDK for Go.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/postgresql/armpostgresql\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Maps Go SDK\nDESCRIPTION: Command to install the Azure Maps module using Go modules for dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/maps/armmaps\n```\n\n----------------------------------------\n\nTITLE: Package Path Declaration in Markdown\nDESCRIPTION: Specifies the Go package path for the Azure Astro Resource Manager SDK component.\n\nLANGUAGE: markdown\nCODE:\n```\ngithub.com/Azure/azure-sdk-for-go/sdk/resourcemanager/astro/armastro\n```\n\n----------------------------------------\n\nTITLE: Creating New AccessClient in Go\nDESCRIPTION: This snippet shows how to create a new AccessClient using the NewAccessClient function. It requires a string parameter, an Azure token credential, and optional client options.\n\nLANGUAGE: Go\nCODE:\n```\nNewAccessClient(string, azcore.TokenCredential, *arm.ClientOptions) (*AccessClient, error)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest Settings for Azure Guest Configuration SDK\nDESCRIPTION: YAML configuration for AutoRest code generation. Specifies Azure ARM mode, references to API specifications, MIT license header requirement, and module version 1.2.0. Dependencies include Azure REST API specifications from the specified GitHub repository.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/guestconfiguration/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/guestconfiguration/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.2.0\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Resource Connector Appliances Client in Go\nDESCRIPTION: Creates a specific client for working with Azure Resource Connector Appliances using the client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewAppliancesClient()\n```\n\n----------------------------------------\n\nTITLE: Creating Resource Graph Client Factory\nDESCRIPTION: Initializes a new client factory for Azure Resource Graph operations using subscription ID and credentials\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armresourcegraph.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Confidential Ledger Client\nDESCRIPTION: Instantiates a new Confidential Ledger client using the client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewClient()\n```\n\n----------------------------------------\n\nTITLE: Modifying FileSystemClient ListPaths Methods\nDESCRIPTION: YAML directive to remove pager methods and export various generated methods for ListPaths in the filesystem client.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: zz_filesystem_client.go\n    where: $\n    transform: >\n      return $.\n        replace(/func \\(client \\*FileSystemClient\\) NewListPathsPager\\(.+\\/\\/ listPathsCreateRequest creates the ListPaths request/s, `//\\n// ListPathsCreateRequest creates the ListPaths request`).\n        replace(/\\(client \\*FileSystemClient\\) listPathsCreateRequest\\(/, `(client *FileSystemClient) ListPathsCreateRequest(`).\n        replace(/\\(client \\*FileSystemClient\\) listPathsHandleResponse\\(/, `(client *FileSystemClient) ListPathsHandleResponse(`);\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK for Go Generation\nDESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure SDK for Go. It specifies the Azure ARM mode, required API specifications, license header, and module version.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/m365securityandcompliance/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/m365securityandcompliance/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 0.7.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Client Options for Different Clouds\nDESCRIPTION: Sets up client options for connecting to different Azure clouds, including sovereign clouds and Azure Stack.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armsubscriptions.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Defining New Enum Types in Go\nDESCRIPTION: New enum types added in version 4.1.0 for NAS encryption and other mobile network concepts.\n\nLANGUAGE: go\nCODE:\n```\ntype NasEncryptionType string\n\nconst (\n    NasEncryptionTypeNEA0EEA0 NasEncryptionType = \"NEA0EEA0\"\n    NasEncryptionTypeNEA1EEA1 NasEncryptionType = \"NEA1EEA1\"\n    NasEncryptionTypeNEA2EEA2 NasEncryptionType = \"NEA2EEA2\"\n)\n```\n\n----------------------------------------\n\nTITLE: Database Client Implementation - Kusto SDK v2.0.0\nDESCRIPTION: Implements new database client functionality including follower database management and migration capabilities. Includes methods for inviting followers and handling migrations.\n\nLANGUAGE: Go\nCODE:\n```\nfunc NewDatabaseClient(string, azcore.TokenCredential, *arm.ClientOptions) (*DatabaseClient, error)\n\nfunc (client *DatabaseClient) InviteFollower(context.Context, string, string, string, DatabaseInviteFollowerRequest, *DatabaseClientInviteFollowerOptions) (DatabaseClientInviteFollowerResponse, error)\n```\n\n----------------------------------------\n\nTITLE: Creating Default Azure Credential in Go\nDESCRIPTION: This snippet demonstrates how to create a default Azure credential using the azidentity package.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Credentials\nDESCRIPTION: Creates a default Azure credential object for authentication with Azure services.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Options for Different Clouds\nDESCRIPTION: Sets up client options for connecting to different Azure clouds including sovereign clouds and Azure Stack\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armdelegatednetwork.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Storage Caches Module\nDESCRIPTION: Command to install the Azure Storage Caches module using Go modules.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/storagecache/armstoragecache/v4\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Servicenetworking Client Factory\nDESCRIPTION: Initializes a client factory for Azure Servicenetworking with basic configuration.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armservicenetworking.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Chaos Capabilities Client\nDESCRIPTION: Creates a specific client instance for accessing Chaos capabilities API.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewCapabilitiesClient()\n```\n\n----------------------------------------\n\nTITLE: Updating URL Encoding for Service Client\nDESCRIPTION: YAML directive to replace '+' with '%20' in URL encoding to avoid disruption with the service.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: zz_service_client.go\n  where: $\n  transform: >\n    return $.\n      replace(/req.Raw\\(\\).URL.RawQuery \\= reqQP.Encode\\(\\)/, `req.Raw().URL.RawQuery = strings.Replace(reqQP.Encode(), \"+\", \"%20\", -1)`);\n```\n\n----------------------------------------\n\nTITLE: Creating Lab Services Client\nDESCRIPTION: Creates a new Lab Plans client using the client factory to access specific API functionality.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewLabPlansClient()\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Batch Resource Manager SDK Generation in YAML\nDESCRIPTION: This YAML configuration specifies settings for AutoRest to generate the Azure Batch Resource Manager SDK. It sets the Azure ARM flag, includes required specification files, defines the license header, module version, and API version tag.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/e79d9ef3e065f2dcb6bd1db51e29c62a99dff5cb/specification/batch/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/e79d9ef3e065f2dcb6bd1db51e29c62a99dff5cb/specification/batch/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 3.0.0\ntag: package-2024-07\n```\n\n----------------------------------------\n\nTITLE: Creating New Client Functions in Go\nDESCRIPTION: New client functions are added to create various client types like DefenderForAISettingsClient and EncryptionScopesClient.\n\nLANGUAGE: Go\nCODE:\n```\nfunc (*ClientFactory) NewDefenderForAISettingsClient() *DefenderForAISettingsClient\nfunc (*ClientFactory) NewEncryptionScopesClient() *EncryptionScopesClient\nfunc (*ClientFactory) NewLocationBasedModelCapacitiesClient() *LocationBasedModelCapacitiesClient\n```\n\n----------------------------------------\n\nTITLE: Defining ResolutionPolicy Enum in Go for Azure Private DNS\nDESCRIPTION: Introduces a new enum type 'ResolutionPolicy' with values for default and NX domain redirect policies. Also adds a new field 'ResolutionPolicy' to the VirtualNetworkLinkProperties struct.\n\nLANGUAGE: markdown\nCODE:\n```\n### Features Added\n\n- New enum type `ResolutionPolicy` with values `ResolutionPolicyDefault`, `ResolutionPolicyNxDomainRedirect`\n- New field `ResolutionPolicy` in struct `VirtualNetworkLinkProperties`\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Key Vault SDK Generation in Go\nDESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure Key Vault SDK for Go. It specifies the Azure ARM mode, required API specifications, license header, module version, and other key settings.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/9ec0fcc278aa2128c4fbb2b8a1aa93432d72cce0/specification/keyvault/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/9ec0fcc278aa2128c4fbb2b8a1aa93432d72cce0/specification/keyvault/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.4.0\nmodelerfour:\n  seal-single-value-enum-by-default: true\ntag: package-2023-07\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Options for Different Azure Clouds\nDESCRIPTION: Sets up client options to connect to specific Azure cloud environments like Azure China\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armmanagedservices.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Application Insight in Go\nDESCRIPTION: This code demonstrates how to create a default Azure credential for authentication. It uses the azidentity package to create a NewDefaultAzureCredential object.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Delegated Network Client\nDESCRIPTION: Creates a new client instance from the client factory for accessing Azure Delegated Network APIs\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewClient()\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Analysis Services SDK Generation in YAML\nDESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure Analysis Services SDK for Go. It specifies Azure ARM compatibility, required API specifications from GitHub, license header, and module version.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/analysisservices/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/analysisservices/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.2.0\n```\n\n----------------------------------------\n\nTITLE: Creating Operational Insights Client Factory\nDESCRIPTION: Initializes a client factory for Azure Operational Insights with subscription ID and credentials\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armoperationalinsights.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Listing Federated Identity Credentials with Pager in Go\nDESCRIPTION: Shows how to create a new pager for listing federated identity credentials using the FederatedIdentityCredentialsClient.\n\nLANGUAGE: Go\nCODE:\n```\n*FederatedIdentityCredentialsClient.NewListPager(string, string, *FederatedIdentityCredentialsClientListOptions) *runtime.Pager[FederatedIdentityCredentialsClientListResponse]\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure MySQL Go SDK Generation\nDESCRIPTION: YAML configuration for AutoRest that defines the settings for generating Azure MySQL SDK code. It references specific versions of Azure REST API specs, sets the license header, module version, and includes a directive to transform the CloudError definition.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/mysql/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/mysql/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.2.0\npackage-singleservers: true\ndirective:\n- from: Servers.json\n  where: $.definitions.CloudError.properties.error\n  transform: >\n    $[\"description\"] = undefined\n```\n\n----------------------------------------\n\nTITLE: Authentication Setup with Azure Identity\nDESCRIPTION: Creates default Azure credentials for authentication with Azure Lab Services using the azidentity module.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK Go Generation\nDESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure SDK for Go. It specifies the Azure ARM mode, required OpenAPI specifications, license header, module version, and API version tag for the App Configuration resource manager.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/d477c7caa09bf82e22c419be0a99d170552b5892/specification/appconfiguration/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/d477c7caa09bf82e22c419be0a99d170552b5892/specification/appconfiguration/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 2.2.0\ntag: package-2024-05-01\n```\n\n----------------------------------------\n\nTITLE: Updating Service Version to 2025-05-05\nDESCRIPTION: YAML directive to update the service version to 2025-05-05 in various client files.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: \n  - zz_service_client.go\n  - zz_filesystem_client.go \n  - zz_path_client.go\n  where: $\n  transform: >\n    return $.\n      replaceAll(`[]string{\"2025-01-05\"}`, `[]string{ServiceVersion}`);\n```\n\n----------------------------------------\n\nTITLE: Modifying Module Name and Version References in Client Files\nDESCRIPTION: This YAML directive changes references to moduleVersion and moduleName in client-related Go files, replacing them with internal package references and adding a suffix to the module name.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from:\n      - \"*_client.go\"\n      - \"client.go\"\n      - \"client_factory.go\"\n    where: $\n    transform: return $.replace(/moduleVersion/, \"internal.ModuleVersion\").replace(/moduleName+\"/, \"internal.ModuleName+\\\"/armresources\");\n```\n\n----------------------------------------\n\nTITLE: Authentication Setup with Azure Identity\nDESCRIPTION: Creates default Azure credentials for authentication with Azure Lab Services using the azidentity module.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SecurityDevOps Go Module\nDESCRIPTION: Command to install the Azure SecurityDevOps module using Go modules package management\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/securitydevops/armsecuritydevops\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Web PubSub Go SDK Generation\nDESCRIPTION: AutoRest configuration file that specifies how to generate the Go SDK client for Azure Web PubSub service. It defines input specifications, output settings, and code transformation directives for customizing the generated client code. The configuration includes operations for removing specific APIs, renaming enums, making certain methods internal, and adding custom properties to the client struct.\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: WebPubSub\ndescription: Azure Web PubSub client\nclear-output-folder: false\nslice-elements-byval: true\nremove-non-reference-schema: true\ngo: true\ninput-file: https://github.com/Azure/azure-rest-api-specs/blob/052a4b8d50bfd5595a8b5b506015d18f2b65998d/specification/webpubsub/data-plane/WebPubSub/stable/2023-07-01/webpubsub.json\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule: github.com/Azure/azure-sdk-for-go/sdk/messaging/azwebpubsub\nopenapi-type: \"data-plane\"\noutput-folder: ../azwebpubsub\nuse: \"@autorest/go@4.0.0-preview.60\"\ndirective:\n    # Remove HealthAPI\n    - from: swagger-document\n      remove-operation: 'HealthApi_GetServiceStatus'\n    # Rename enum WebPubSubPermission to Permission since the package name already contains WebPubSub.\n    - from: \n        - constants.go\n        - client.go\n      where: $\n      transform: return $.replace(/WebPubSubPermission/g, \"Permission\");\n    # Make GenerateClientToken internal.\n    - from: client.go\n      where: $\n      transform: return $.replace(/\\bGenerateClientToken\\b/g, \"generateClientToken\");\n    # Make *Exists internal until SDK supports it.\n    - from: client.go\n      where: $\n      transform: return $.replace(/\\b(Group|Connection|User)Exists\\b/g, function(match, group) { return group.toLowerCase() + \"Exists\";});\n    # Make CheckPermission internal until SDK supports it, since it leverage 404 status code\n    - from: client.go\n      where: $\n      transform: return $.replace(/\\bCheckPermission\\b/g, \"checkPermission\");\n    # Add more properties to the client\n    - from: client.go\n      where: $\n      transform: >\n        return $.replace(\n            /(type Client struct[^}]+})/s, \n            \"type Client struct {\\n\\tinternal *azcore.Client\\n\\tendpoint string\\n\\tkey      *string\\n}\")\n    # Add comments to type Permission\n    - from: constants.go\n      where: $\n      transform: >\n        return $.replace(\n            /type Permission string/s, \n            \"// Permission contains the allowed permissions\\ntype Permission string\")\n    # Add comments to InnerError\n    - from: models.go\n      where: $\n      transform: >\n        return $.replace(\n            /type InnerError struct/s, \n            \"// InnerError - The inner error object\\ntype InnerError struct\")\n    # delete unused error models\n    - from: models.go\n      where: $\n      transform: return $.replace(/(?:\\/\\/.*\\s)+type (?:ErrorDetail|InnerError).+\\{(?:\\s.+\\s)+\\}\\s/g, \"\");\n    - from: models_serde.go\n      where: $\n      transform: return $.replace(/(?:\\/\\/.*\\s)+func \\(\\w \\*?(?:ErrorDetail|InnerError)\\).*\\{\\s(?:.+\\s)+\\}\\s/g, \"\");\n    # delete client name prefix from method options and response types\n    - from:\n        - client.go\n        - models.go\n        - models_serde.go\n        - options.go\n        - response_types.go\n      where: $\n      transform: return $.replace(/Client(\\w+)((?:Options|Response))/g, \"$1$2\");\n```\n\n----------------------------------------\n\nTITLE: Release Notes Version 1.0.0 (2022-05-18)\nDESCRIPTION: Initial release implementing next generation design principles with migration guide information.\n\nLANGUAGE: markdown\nCODE:\n```\nThe package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/servicefabric/armservicefabric` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html) since version 1.0.0, which contains breaking changes.\\n\\nTo migrate the existing applications to the latest version, please refer to [Migration Guide](https://aka.ms/azsdk/go/mgmt/migration).\\n\\nTo learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).\n```\n\n----------------------------------------\n\nTITLE: New Function Example in Go\nDESCRIPTION: Example of a new function signature added in version 0.4.0\n\nLANGUAGE: go\nCODE:\n```\nNewFunction *PipelineJobsClient.NewListPager(string, string, *PipelineJobsClientListOptions) *runtime.Pager[PipelineJobsClientListResponse]\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Kubernetes Connect Service Module in Go\nDESCRIPTION: This command installs the Azure Kubernetes Connect Service module using Go's package manager.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/hybridkubernetes/armhybridkubernetes\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Managed Network Module\nDESCRIPTION: Command to install the Azure Managed Network module using Go modules for dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/managednetwork/armmanagednetwork\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Costmanagement Alerts Client in Go\nDESCRIPTION: Instantiates an Alerts client using the Costmanagement client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewAlertsClient()\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Digital Twins Client\nDESCRIPTION: Creating a client instance from the client factory to access Azure Digital Twins APIs.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewClient()\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Advisor SDK Generation in Go\nDESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure Advisor SDK for Go. It enables Azure ARM mode, specifies required API specifications, sets the license header, and defines the module version.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/advisor/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/advisor/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.2.0\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Bot Service Client Factory\nDESCRIPTION: Initializes a client factory for creating Bot Service clients using subscription ID and credentials\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armbotservice.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure Credential\nDESCRIPTION: Creates a default Azure credential for authentication with Azure services.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Documenting Release History for Azure SDK for Go\nDESCRIPTION: This markdown snippet outlines the release history for the Azure SDK for Go, detailing changes in version 1.0.0, 0.2.0, and 0.1.0. It includes breaking changes, new features, and modifications to various components of the SDK.\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.0.0 (2024-12-26)\n### Breaking Changes\n\n- Field `AllocatedValue`, `CreatedAt`, `ExpiryAt`, `PercentageUsed`, `UsedValue` of struct `FreeTrialProperties` has been removed\n\n### Features Added\n\n- New value `FreeTrialStateNotEligible`, `FreeTrialStateNotRegistered` added to enum type `FreeTrialState`\n- New value `ProvisioningStateCreating` added to enum type `ProvisioningState`\n- New value `QuotaNamesReporting` added to enum type `QuotaNames`\n- New enum type `CheckNameAvailabilityReason` with values `CheckNameAvailabilityReasonAlreadyExists`, `CheckNameAvailabilityReasonInvalid`\n- New enum type `OfferingType` with values `OfferingTypeGeneralAvailability`, `OfferingTypeNotApplicable`, `OfferingTypePrivatePreview`, `OfferingTypePublicPreview`\n- New function `NewAccountQuotasClient(string, azcore.TokenCredential, *arm.ClientOptions) (*AccountQuotasClient, error)`\n- New function `*AccountQuotasClient.Get(context.Context, string, string, QuotaNames, *AccountQuotasClientGetOptions) (AccountQuotasClientGetResponse, error)`\n- New function `*AccountQuotasClient.NewListByAccountPager(string, string, *AccountQuotasClientListByAccountOptions) *runtime.Pager[AccountQuotasClientListByAccountResponse]`\n- New function `*AccountsClient.CheckNameAvailability(context.Context, CheckNameAvailabilityRequest, *AccountsClientCheckNameAvailabilityOptions) (AccountsClientCheckNameAvailabilityResponse, error)`\n- New function `*ClientFactory.NewAccountQuotasClient() *AccountQuotasClient`\n- New struct `AccountFreeTrialProperties`\n- New struct `AccountQuota`\n- New struct `AccountQuotaListResult`\n- New struct `AccountQuotaProperties`\n- New struct `CheckNameAvailabilityRequest`\n- New struct `CheckNameAvailabilityResponse`\n- New field `LocalAuth` in struct `AccountProperties`\n- New field `LocalAuth` in struct `AccountUpdateProperties`\n- New field `OfferingType` in struct `QuotaProperties`\n\n\n## 0.2.0 (2023-11-24)\n### Features Added\n\n- Support for test fakes and OpenTelemetry trace spans.\n\n\n## 0.1.0 (2023-09-27)\n\nThe package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/playwrighttesting/armplaywrighttesting` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html).\n\nTo learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).\n```\n\n----------------------------------------\n\nTITLE: Remove Module Constants Directive\nDESCRIPTION: AutoRest directive to remove moduleName and moduleVersion constants from the generated constants.go file.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: constants.go\n    where: $\n    transform: return $.replace(/const \\(\\n\\s+moduleName.+\\n\\s+moduleVersion.+\\n\\)\\n/, \"\");\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest Settings for Azure SDK Generation\nDESCRIPTION: YAML configuration for AutoRest tool that specifies the settings for generating Azure SDK for Go. It references Azure Kusto API specifications, sets the module version to 2.3.0, and configures Microsoft MIT licensing. The configuration targets package version 2024-04.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/b8adce17dc500f338f86f18af30aac61dcb71c5f/specification/azure-kusto/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/b8adce17dc500f338f86f18af30aac61dcb71c5f/specification/azure-kusto/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 2.3.0\ntag: package-2024-04\n```\n\n----------------------------------------\n\nTITLE: Removing 'Items' and 'List' Suffixes\nDESCRIPTION: YAML directive to remove 'Items' and 'List' suffixes from various identifiers in the generated code.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: source-file-go\n    where: $\n    transform: >\n      return $.\n        replace(/DirectoryItems/g, \"Directories\").\n        replace(/FileItems/g, \"Files\").\n        replace(/ShareItems/g, \"Shares\").\n        replace(/HandleList/g, \"Handles\");\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Resource Health Client Factory in Go\nDESCRIPTION: Initializes a client factory for Azure Resource Health with a subscription ID and credentials.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armresourcehealth.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Release History Documentation in Markdown\nDESCRIPTION: Markdown formatted changelog documenting version releases, breaking changes, and feature additions for the Azure SDK for Go Dynatrace ARM module. Details API changes and new functionality added across versions.\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 2.1.0 (2023-11-24)\n### Features Added\n\n- Support for test fakes and OpenTelemetry trace spans.\n\n\n## 2.0.0 (2023-08-25)\n### Breaking Changes\n\n- Function `*MonitorsClient.GetAccountCredentials` has been removed\n- Function `*TagRulesClient.Update` has been removed\n- Struct `AccountInfoSecure` has been removed\n- Struct `TagRuleUpdate` has been removed\n- Field `DynatraceEnvironmentProperties`, `MarketplaceSubscriptionStatus`, `MonitoringStatus`, `PlanData`, `UserInfo` of struct `MonitorResourceUpdate` has been removed\n\n### Features Added\n\n- New function `*MonitorsClient.GetMarketplaceSaaSResourceDetails(context.Context, MarketplaceSaaSResourceDetailsRequest, *MonitorsClientGetMarketplaceSaaSResourceDetailsOptions) (MonitorsClientGetMarketplaceSaaSResourceDetailsResponse, error)`\n- New function `*MonitorsClient.GetMetricStatus(context.Context, string, string, *MonitorsClientGetMetricStatusOptions) (MonitorsClientGetMetricStatusResponse, error)`\n- New struct `MarketplaceSaaSResourceDetailsRequest`\n- New struct `MarketplaceSaaSResourceDetailsResponse`\n- New struct `MetricsStatusResponse`\n- New field `SendingMetrics` in struct `MetricRules`\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Maintenance Client for Sovereign Clouds in Go\nDESCRIPTION: This snippet shows how to configure the client factory to connect to sovereign clouds or Azure Stack. It uses ClientOptions to specify the cloud environment.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armmaintenance.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Creating Registration Definitions Client\nDESCRIPTION: Creates a specific client instance for working with registration definitions\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewRegistrationDefinitionsClient()\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Cosmos for PostgreSQL Module\nDESCRIPTION: Command to install the Azure Cosmos for PostgreSQL module using Go modules for dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/cosmosforpostgresql/armcosmosforpostgresql\n```\n\n----------------------------------------\n\nTITLE: Conflicting Assets.json Example\nDESCRIPTION: Example showing a typical merge conflict in an assets.json file between two different feature branches\n\nLANGUAGE: text\nCODE:\n```\n{\n  \"AssetsRepo\": \"Azure/azure-sdk-assets-integration\",\n  \"AssetsRepoPrefixPath\": \"python\",\n  \"TagPrefix\": \"python/storage/azure-storage-blob\",\n<<<<<<< HEAD\n  \"Tag\": \"integration/example/storage_feature_addition2\"\n=======\n  \"Tag\": \"integration/example/storage_feature_addition1\"\n>>>>>>> test-storage-tag-combination\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Costmanagement Module in Go\nDESCRIPTION: Command to install the Azure Costmanagement module using Go modules.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/costmanagement/armcostmanagement/v2\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Maps Client Factory\nDESCRIPTION: Initializes a client factory for creating Azure Maps service clients with subscription ID and credentials.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armmaps.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Maps Go SDK Generation\nDESCRIPTION: YAML configuration file that defines the parameters for generating the Azure Maps SDK for Go using AutoRest. Specifies the Azure ARM mode, required API specifications, licensing, module version and API version tag.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/b9403296f0b0e112b0d8222ad05fd1d79ee10e03/specification/maps/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/b9403296f0b0e112b0d8222ad05fd1d79ee10e03/specification/maps/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.1.0\ntag: package-2023-06\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Credentials\nDESCRIPTION: Creates default Azure credentials for authentication using the azidentity module\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Custom JSON Unmarshaling for Multipart Form Data\nDESCRIPTION: Implements the json.Unmarshaller interface to deserialize JSON data into the form data schema. Handles individual fields using a raw message map and includes error handling for each field.\n\nLANGUAGE: go\nCODE:\n```\nfunc (p *Paths1Filz8PFilesPostRequestbodyContentMultipartFormDataSchema) UnmarshalJSON(data []byte) error {\n\tvar rawMsg map[string]json.RawMessage\n\tif err := json.Unmarshal(data, &rawMsg); err != nil {\n\t\treturn fmt.Errorf(\"unmarshalling type %T: %v\", p, err)\n\t}\n\tfor key, val := range rawMsg {\n\t\tvar err error\n\t\tswitch key {\n\t\tcase \"file\":\n\t\t\terr = unpopulate(val, \"File\", &p.File)\n\t\t\tdelete(rawMsg, key)\n\t\tcase \"filename\":\n\t\t\terr = unpopulate(val, \"Filename\", &p.Filename)\n\t\t\tdelete(rawMsg, key)\n\t\tcase \"purpose\":\n\t\t\terr = unpopulate(val, \"Purpose\", &p.Purpose)\n\t\t\tdelete(rawMsg, key)\n\t\t}\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"unmarshalling type %T: %v\", p, err)\n\t\t}\n\t}\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Remove Module Constants Directive\nDESCRIPTION: AutoRest directive to remove moduleName and moduleVersion constants from the constants.go file.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: constants.go\n    where: $\n    transform: return $.replace(/const \\(\\n\\s+moduleName.+\\n\\s+moduleVersion.+\\n\\)\\n/, \"\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Options for Different Clouds\nDESCRIPTION: Sets up client options for connecting to different Azure clouds including sovereign clouds and Azure Stack.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armiotoperations.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Updating CORS Acronym and Renaming FileParentID\nDESCRIPTION: YAML directive to change CORS acronym to all caps and rename 'FileParentID' to 'ParentID'.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: source-file-go\n    where: $\n    transform: >\n      return $.\n        replace(/Cors/g, \"CORS\").\n        replace(/FileParentID/g, \"ParentID\");\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Virtual Desktop Client Factory\nDESCRIPTION: Initializes a client factory for creating Azure Virtual Desktop service clients\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armdesktopvirtualization.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Importing the Hybrid Container Service Client\nDESCRIPTION: Example of importing and initializing the Hybrid Container Service client in Go.\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/hybridcontainerservice/armhybridcontainerservice\"\n)\n\nfunc main() {\n    client, err := armhybridcontainerservice.NewProvisionedClusterInstancesClient(\"your-subscription-id\", credential, nil)\n    if err != nil {\n        // Handle error\n    }\n    // Use the client...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest Settings for Azure Domain Services Go SDK\nDESCRIPTION: YAML configuration for AutoRest code generation specifying Azure ARM mode, required API specifications from azure-rest-api-specs repository, Microsoft MIT license header requirement, and module version 1.2.0.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/domainservices/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/domainservices/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.2.0\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Largeinstance Module in Go\nDESCRIPTION: Command to install the Azure Largeinstance module using Go's package manager.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/largeinstance/armlargeinstance\n```\n\n----------------------------------------\n\nTITLE: Creating Activity Runs Client\nDESCRIPTION: Creates a specific client instance for managing activity runs using the client factory\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewActivityRunsClient()\n```\n\n----------------------------------------\n\nTITLE: Creating a ContainerGroupProfilesClient in Go\nDESCRIPTION: Shows how to instantiate a ContainerGroupProfilesClient for managing Container Group Profiles in Azure Container Instances using the Azure SDK for Go.\n\nLANGUAGE: Go\nCODE:\n```\nNewContainerGroupProfilesClient(string, azcore.TokenCredential, *arm.ClientOptions) (*ContainerGroupProfilesClient, error)\n```\n\n----------------------------------------\n\nTITLE: New Replica Management Functions (v2.0.0)\nDESCRIPTION: Introduction of replica management functionality including creation, deletion, retrieval and listing of replicas. Includes new ReplicaProvisioningState enum type.\n\nLANGUAGE: go\nCODE:\n```\nfunc *ClientFactory.NewReplicasClient() *ReplicasClient\nfunc NewReplicasClient(string, azcore.TokenCredential, *arm.ClientOptions) (*ReplicasClient, error)\nfunc *ReplicasClient.BeginCreate(context.Context, string, string, string, Replica, *ReplicasClientBeginCreateOptions) (*runtime.Poller[ReplicasClientCreateResponse], error)\nfunc *ReplicasClient.BeginDelete(context.Context, string, string, string, *ReplicasClientBeginDeleteOptions) (*runtime.Poller[ReplicasClientDeleteResponse], error)\nfunc *ReplicasClient.Get(context.Context, string, string, string, *ReplicasClientGetOptions) (ReplicasClientGetResponse, error)\nfunc *ReplicasClient.NewListByConfigurationStorePager(string, string, *ReplicasClientListByConfigurationStoreOptions) *runtime.Pager[ReplicasClientListByConfigurationStoreResponse]\n```\n\n----------------------------------------\n\nTITLE: Listing Available Tests\nDESCRIPTION: Command to display all available reliability tests in the test suite\n\nLANGUAGE: bash\nCODE:\n```\ngo run .\n```\n\n----------------------------------------\n\nTITLE: Listing Available Tests\nDESCRIPTION: Command to display all available reliability tests in the test suite\n\nLANGUAGE: bash\nCODE:\n```\ngo run .\n```\n\n----------------------------------------\n\nTITLE: Creating Guest Configuration Client Factory\nDESCRIPTION: Initializes a client factory for Azure Guest Configuration with default settings\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armguestconfiguration.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Network Cloud SDK Generation\nDESCRIPTION: YAML configuration for AutoRest tool to generate Azure Network Cloud SDK. Specifies ARM mode, required API specifications, license header, module version 1.2.0, and targets API version 2024-07-01.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/c0a12a75b702054cf1e7fcd8c014d0fc116dea6e/specification/networkcloud/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/c0a12a75b702054cf1e7fcd8c014d0fc116dea6e/specification/networkcloud/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.2.0\ntag: package-2024-07-01\n```\n\n----------------------------------------\n\nTITLE: Installing Azure DNS Module\nDESCRIPTION: Command to install the Azure DNS module using Go modules for dependency management\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/dns/armdns\n```\n\n----------------------------------------\n\nTITLE: Removing moduleName and moduleVersion Constants from Generated Code\nDESCRIPTION: This YAML directive removes the moduleName and moduleVersion constants from the generated constants.go file.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: constants.go\n    where: $\n    transform: return $.replace(/const \\(\\n\\s+moduleName.+\\n\\s+moduleVersion.+\\n\\)\\n/, \"\");\n```\n\n----------------------------------------\n\nTITLE: Azure Hybrid Connectivity Enums\nDESCRIPTION: Enumeration types introduced in version 1.2.0-beta.1 for cloud native resources, host types, provisioning states and configuration statuses.\n\nLANGUAGE: go\nCODE:\n```\ntype CloudNativeType string\ntype HostType string\ntype ResourceProvisioningState string\ntype SolutionConfigurationStatus string\n```\n\n----------------------------------------\n\nTITLE: Correcting CORS XML Tags\nDESCRIPTION: YAML directive to correct the XML tags for CORS-related structures.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: source-file-go\n    where: $\n    transform: >\n      return $.\n        replace(/xml:\"CORS>CORSRule\"/g, \"xml:\\\"Cors>CorsRule\\\"\");\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Billingbenefits Client Factory\nDESCRIPTION: Initializes a client factory for creating Azure Billingbenefits service clients.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armbillingbenefits.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Markdown Release History Documentation\nDESCRIPTION: Markdown formatted release history tracking version changes, feature additions, and bug fixes for the Azure SDK for Go armlocks package.\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.2.0 (2023-11-24)\n### Features Added\n\n- Support for test fakes and OpenTelemetry trace spans.\n\n\n## 1.1.1 (2023-04-14)\n### Bug Fixes\n\n- Fix serialization bug of empty value of `any` type.\n\n\n## 1.1.0 (2023-03-27)\n### Features Added\n\n- New struct `ClientFactory` which is a client factory used to create any client in this module\n\n\n## 1.0.0 (2022-05-16)\n\nThe package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armlocks` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html) since version 1.0.0, which contains breaking changes.\n\nTo migrate the existing applications to the latest version, please refer to [Migration Guide](https://aka.ms/azsdk/go/mgmt/migration).\n\nTo learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).\n```\n\n----------------------------------------\n\nTITLE: Release Notes Version 1.0.0\nDESCRIPTION: Breaking changes and feature additions for version 1.0.0 of Azure SDK for Go, including type changes, removed functions and structs, and new functionality.\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.0 (2024-11-20)\n### Breaking Changes\n\n- Type of `AgentProfile.ResourcePredictions` has been changed from `any` to `*ResourcePredictions`\n- Type of `PoolUpdateProperties.AgentProfile` has been changed from `AgentProfileUpdateClassification` to `AgentProfileClassification`\n- Type of `Quota.Name` has been changed from `*string` to `*QuotaName`\n- Type of `Stateful.ResourcePredictions` has been changed from `any` to `*ResourcePredictions`\n- Type of `StatelessAgentProfile.ResourcePredictions` has been changed from `any` to `*ResourcePredictions`\n- Function `*AgentProfileUpdate.GetAgentProfileUpdate` has been removed\n- Function `*AutomaticResourcePredictionsProfileUpdate.GetResourcePredictionsProfileUpdate` has been removed\n- Function `*ManualResourcePredictionsProfileUpdate.GetResourcePredictionsProfileUpdate` has been removed\n- Function `*ResourcePredictionsProfileUpdate.GetResourcePredictionsProfileUpdate` has been removed\n- Function `*StatefulUpdate.GetAgentProfileUpdate` has been removed\n- Function `*StatelessAgentProfileUpdate.GetAgentProfileUpdate` has been removed\n- Function `*SubscriptionUsagesClient.NewListByLocationPager` has been removed\n- Struct `AutomaticResourcePredictionsProfileUpdate` has been removed\n- Struct `ManualResourcePredictionsProfileUpdate` has been removed\n- Struct `QuotaListResult` has been removed\n- Struct `QuotaProperties` has been removed\n- Struct `StatefulUpdate` has been removed\n- Struct `StatelessAgentProfileUpdate` has been removed\n- Field `Properties`, `SystemData`, `Type` of struct `Quota` has been removed\n\n### Features Added\n\n- New function `*SubscriptionUsagesClient.NewUsagesPager(string, *SubscriptionUsagesClientUsagesOptions) *runtime.Pager[SubscriptionUsagesClientUsagesResponse]`\n- New struct `PagedQuota`\n- New struct `ResourcePredictions`\n- New field `CurrentValue`, `Limit`, `Unit` in struct `Quota`\n```\n\n----------------------------------------\n\nTITLE: Authentication with Azure Credentials\nDESCRIPTION: Creates default Azure credentials for authentication with Azure IoTOperations services.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Creating SQL Servers Client\nDESCRIPTION: Creates a new SQL Servers client instance using the client factory\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewSQLServersClient()\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Bare Metal Infrastructure Client Factory in Go\nDESCRIPTION: This code creates a client factory for Azure Bare Metal Infrastructure services, which can be used to instantiate specific clients.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armbaremetalinfrastructure.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Detailed Profile Builder Installation - PowerShell\nDESCRIPTION: Step-by-step installation commands for Profile Builder using PowerShell\n\nLANGUAGE: powershell\nCODE:\n```\ngo get -d github.com/Azure/azure-sdk-for-go/eng/tools/profileBuilder\ncd $env:GOPATH\\src\\github.com\\Azure\\azure-sdk-for-go/eng/tools\\profileBuilder\ngo install\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Networkanalytics Client Factory in Go\nDESCRIPTION: Code to create a client factory for Azure Networkanalytics. The factory is initialized with a subscription ID and credential, and can be used to create specific clients.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armnetworkanalytics.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Quota Module in Go\nDESCRIPTION: This command installs the Azure Quota module using Go's package manager. It requires Go modules for versioning and dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/quota/armquota\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest YAML Settings for Azure Go SDK Generation\nDESCRIPTION: YAML configuration for AutoRest that specifies the Azure ARM mode, required API specifications, license header type, and module version. References specific versions of Azure REST API specs for operations management.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/operationsmanagement/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/operationsmanagement/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 0.8.0\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Chaos Management SDK Generation in Go\nDESCRIPTION: This YAML configuration sets up AutoRest to generate Go SDK code for Azure Chaos Management. It specifies Azure ARM mode, required API specifications, license header, module version, and package tag.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/e4009d2f8d3bf0271757e522c7d1c1997e193d44/specification/chaos/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/e4009d2f8d3bf0271757e522c7d1c1997e193d44/specification/chaos/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.1.0\ntag: package-2024-01\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Client Options for Different Clouds in Go\nDESCRIPTION: This snippet shows how to set up client options to connect to different Azure clouds, such as Azure China, using the arm and azcore packages.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclient, err := armmachinelearningservices.NewQuotasClient(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Breaking Change Type Example in Go\nDESCRIPTION: Example showing type changes for Server and ServerForUpdate structs\n\nLANGUAGE: go\nCODE:\n```\nType of Server.Identity has been changed from *Identity to *MySQLServerIdentity\nType of Server.SKU has been changed from *SKU to *MySQLServerSKU\nType of ServerForUpdate.Identity has been changed from *Identity to *MySQLServerIdentity\nType of ServerForUpdate.SKU has been changed from *SKU to *MySQLServerSKU\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure PostgreSQL Flexible Servers SDK Generation\nDESCRIPTION: YAML configuration for AutoRest tool to generate Go SDK code for Azure PostgreSQL Flexible Servers. Specifies the source API specs, license header, module version, and targets the package-flexibleserver-2024-08-01 API version.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/10925e3dec73699b950f256576cd6983947faaa3/specification/postgresql/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/10925e3dec73699b950f256576cd6983947faaa3/specification/postgresql/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 4.0.0\npackage-flexibleservers: true\ntag: package-flexibleserver-2024-08-01\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Hybrid Container Service Module\nDESCRIPTION: Command to install the Azure Hybrid Container Service module using Go modules\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/hybridcontainerservice/armhybridcontainerservice\n```\n\n----------------------------------------\n\nTITLE: Modifying Service Client Methods\nDESCRIPTION: YAML directive to remove pager methods and export various generated methods in the service client.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: zz_service_client.go\n    where: $\n    transform: >\n      return $.\n        replace(/func \\(client \\*ServiceClient\\) NewListSharesSegmentPager\\(.+\\/\\/ listSharesSegmentCreateRequest creates the ListSharesSegment request/s, `//\\n// listSharesSegmentCreateRequest creates the ListSharesSegment request`).\n        replace(/\\(client \\*ServiceClient\\) listSharesSegmentCreateRequest\\(/, `(client *ServiceClient) ListSharesSegmentCreateRequest(`).\n        replace(/\\(client \\*ServiceClient\\) listSharesSegmentHandleResponse\\(/, `(client *ServiceClient) ListSharesSegmentHandleResponse(`);\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Credentials\nDESCRIPTION: Creates default Azure credentials for authentication with the Web PubSub service using azidentity module.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest Settings for Azure SDK Generation\nDESCRIPTION: YAML configuration for AutoRest that specifies the source API specifications, module version, and other settings for generating Azure SDK for Go. References the Dynatrace resource manager API specs and includes settings for Azure ARM compatibility.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/baac183ffa684d94f697f0fc6f480e02cfb00f3d/specification/dynatrace/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/baac183ffa684d94f697f0fc6f480e02cfb00f3d/specification/dynatrace/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 2.1.0\ntag: package-2023-04-27\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Datadog Module in Go\nDESCRIPTION: This snippet demonstrates how to install the Azure Datadog module using Go's package manager. It requires Go modules for versioning and dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/datadog/armdatadog\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Integrationspaces Module in Go\nDESCRIPTION: This snippet demonstrates how to install the Azure Integrationspaces module using Go's package manager. It utilizes Go modules for versioning and dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/integrationspaces/armintegrationspaces\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Client Options for Different Clouds in Go\nDESCRIPTION: This snippet shows how to configure client options to connect to different Azure clouds, such as Azure China.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armbaremetalinfrastructure.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Portal Module with Go\nDESCRIPTION: Command to install the Azure Portal module using Go modules package management\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/portal/armportal\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Credentials\nDESCRIPTION: Creates default Azure credentials for authentication using azidentity module\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Adding New WebTestKind Enum Value in Go\nDESCRIPTION: This snippet shows the addition of a new value to the WebTestKind enum in the Azure SDK for Go. It introduces a standard web test kind for Application Insights.\n\nLANGUAGE: go\nCODE:\n```\nWebTestKindStandard\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Resource Lock Module\nDESCRIPTION: Command to install the Azure Resource Lock module using Go modules for dependency management\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armlocks\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest Settings for Azure NetApp Go SDK\nDESCRIPTION: Defines the configuration parameters for AutoRest code generation. Specifies the Azure ARM mode, required API specifications, license header type, module version, and API version tag. References the Azure REST API specs from a specific commit.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/e6892bbc13d89929cdbe3b39385628543263f80b/specification/netapp/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/e6892bbc13d89929cdbe3b39385628543263f80b/specification/netapp/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 7.4.0\ntag: package-2024-09-01\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK Go Generation\nDESCRIPTION: This YAML configuration sets up AutoRest for generating the Azure SDK for Go. It enables Azure ARM, specifies the required API specifications from GitHub, sets the license header, and defines the module version.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/healthbot/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/healthbot/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.2.0\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest Settings for Azure DNS SDK\nDESCRIPTION: Base configuration for AutoRest code generation including Azure ARM settings, API specifications, module details and output settings for the DNS service.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/53b1affe357b3bfbb53721d0a2002382a046d3b0/specification/dns/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/53b1affe357b3bfbb53721d0a2002382a046d3b0/specification/dns/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 0.1.0\nmodule-name: profile/p20200901/resourcemanager/dns/armdns\nmodule: github.com/Azure/azure-sdk-for-go/$(module-name)\noutput-folder: $(go-sdk-folder)/$(module-name)\ntag: profile-hybrid-2020-09-01\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Networkcloud Client Factory\nDESCRIPTION: Initializes a client factory for creating Azure Networkcloud service clients using subscription ID and credentials.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armnetworkcloud.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Event Grid SDK Generation in YAML\nDESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure Event Grid SDK for Go. It specifies the Azure ARM mode, required API specifications from GitHub, license header, module version, and the API version tag to use.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/b8691fbfca8fcdc5a241a0b501c32fd4a76bb0cd/specification/eventgrid/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/b8691fbfca8fcdc5a241a0b501c32fd4a76bb0cd/specification/eventgrid/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 2.3.0-beta.2\ntag: package-2024-06-preview\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Data Migration Module\nDESCRIPTION: Command to install the Azure Data Migration module using Go modules package manager\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/datamigration/armdatamigration\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Options for Different Azure Clouds\nDESCRIPTION: Sets up client options for connecting to different Azure clouds including sovereign clouds and Azure Stack.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armimpactreporting.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Astro Client Factory\nDESCRIPTION: Initializes a client factory for Azure Astro services using subscription ID and credentials\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armastro.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Hybrid Data Module\nDESCRIPTION: Command to install the Azure Hybrid Data module using Go modules for dependency management\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/azuredata/armazuredata\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Large Instance SDK Generation in YAML\nDESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure Large Instance SDK for Go. It specifies the Azure ARM mode, required API specifications, license header, module version, and API version tag.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/6051d2b126f5b1e4b623cde8edfa3e25cf730685/specification/azurelargeinstance/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/6051d2b126f5b1e4b623cde8edfa3e25cf730685/specification/azurelargeinstance/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 0.1.0\ntag: package-2023-07-20-preview\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Operational Insights SDK Package\nDESCRIPTION: Command to install the Azure Operational Insights module version 2 using Go modules\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/operationalinsights/armoperationalinsights/v2\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Identity\nDESCRIPTION: Creates a default Azure credential object for authentication with Azure services\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure Private Zones Client in Go\nDESCRIPTION: This code demonstrates how to create a specific client for Private Zones operations using the client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewPrivateZonesClient()\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Kusto Client Factory\nDESCRIPTION: Initializes a new client factory for Azure Kusto services using subscription ID and credentials\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armkusto.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Windows ESU Client for Sovereign Clouds in Go\nDESCRIPTION: This snippet shows how to configure the client factory to connect with sovereign clouds or Azure Stack using ClientOptions. It sets the endpoint to Azure China cloud as an example.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armwindowsesu.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK for Go Generation\nDESCRIPTION: Defines AutoRest configuration settings for generating the Azure SDK for Go. It specifies the Azure ARM mode, required API specifications, license header, and module version.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/logic/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/logic/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.2.0\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure Engagement Fabric Client Factory in Go\nDESCRIPTION: This snippet shows how to create a client factory for Azure Engagement Fabric services. It requires a subscription ID and a credential object.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armengagementfabric.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Removing Module Constants Transformation\nDESCRIPTION: Directive to remove moduleName and moduleVersion constants from the constants.go file.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: constants.go\n    where: $\n    transform: return $.replace(/const \\(\\n\\s+moduleName.+\\n\\s+moduleVersion.+\\n\\)\\n/, \"\");\n```\n\n----------------------------------------\n\nTITLE: Release History Changelog in Markdown\nDESCRIPTION: Markdown formatted changelog documenting version history, new features, breaking changes, bug fixes and other updates for the Azure Key Vault Secrets Go SDK module.\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.3.2-beta.1 (Unreleased)\n\n### Features Added\n\n### Breaking Changes\n\n### Bugs Fixed\n\n### Other Changes\n* Upgraded to API service version `7.6-preview.2`\n\n## 1.3.1 (2025-02-13)\n\n### Other Changes\n* Upgraded dependencies\n\n## 1.3.0 (2024-11-06)\n\n### Features Added\n* Added API Version support. Users can now change the default API Version by setting ClientOptions.APIVersion\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Hybrid Network SDK Generation\nDESCRIPTION: Configuration settings for AutoRest to generate the Azure Hybrid Network SDK. Specifies Azure ARM mode, required API specifications from GitHub, licensing header, module version 2.0.0, and targets package version 2023-09-01.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/db9788dde7a0c2c0d82e4fdf5f7b4de3843937e3/specification/hybridnetwork/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/db9788dde7a0c2c0d82e4fdf5f7b4de3843937e3/specification/hybridnetwork/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 2.0.0\ntag: package-2023-09-01\n```\n\n----------------------------------------\n\nTITLE: Adding New Structs in Go\nDESCRIPTION: Example of new structs added in version 9.1.0\n\nLANGUAGE: Go\nCODE:\n```\ntype IcebergDataset struct {\n    // fields\n}\n\ntype IcebergDatasetTypeProperties struct {\n    // fields\n}\n\ntype IcebergSink struct {\n    // fields\n}\n\ntype IcebergWriteSettings struct {\n    // fields\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Using Default Credentials\nDESCRIPTION: Creates a default Azure credential object for authentication with Azure services using the azidentity module.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Authorization Module in Go\nDESCRIPTION: This command installs the Azure Authorization module using Go's package manager.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/authorization/armauthorization/v3\n```\n\n----------------------------------------\n\nTITLE: Configuring Client with Custom Options\nDESCRIPTION: Creates a client factory with custom options for connecting to different Azure clouds including sovereign clouds and Azure Stack.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armstorsimple8000series.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Network Function Manager Module in Go\nDESCRIPTION: This command installs the Azure Network Function Manager module using Go's package manager.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/networkfunction/armnetworkfunction/v2\n```\n\n----------------------------------------\n\nTITLE: Removing moduleName and moduleVersion Constants from Generated Code\nDESCRIPTION: This YAML directive removes the moduleName and moduleVersion constants from the generated constants.go file using a regular expression replacement.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: constants.go\n    where: $\n    transform: return $.replace(/const \\(\\n\\s+moduleName.+\\n\\s+moduleVersion.+\\n\\)\\n/, \"\");\n```\n\n----------------------------------------\n\nTITLE: Creating StorSimple Service Client\nDESCRIPTION: Creates a specific service client instance from the client factory to access StorSimple APIs.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewBackupsClient()\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK Generation in YAML\nDESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure SDK for Go. It specifies Azure ARM compatibility, required specification files, license header, and module version for the Engagement Fabric resource manager.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/163e27c0ca7570bc39e00a46f255740d9b3ba3cb/specification/engagementfabric/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/163e27c0ca7570bc39e00a46f255740d9b3ba3cb/specification/engagementfabric/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 0.3.0\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Hardware Security Modules SDK Generation\nDESCRIPTION: YAML configuration for AutoRest code generator that specifies the source API specifications, module version, and other settings required for generating the Azure Hardware Security Modules SDK for Go. References specific versions of API specs from the azure-rest-api-specs repository.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/e838027e88cca634c1545e744630de9262a6e72a/specification/hardwaresecuritymodules/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/e838027e88cca634c1545e744630de9262a6e72a/specification/hardwaresecuritymodules/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 2.0.0-beta.2\ntag: package-preview-2024-06\n```\n\n----------------------------------------\n\nTITLE: Creating Azure DNS Private Resolver Client Factory in Go\nDESCRIPTION: Initializes a client factory for Azure DNS Private Resolver using subscription ID and credentials.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armdnsresolver.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Update Module References in Client Constructor\nDESCRIPTION: AutoRest directive to replace module constant references with internal package references in client constructor code.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from:\n      - \"*_client.go\"\n      - \"client.go\"\n      - \"client_factory.go\"\n    where: $\n    transform: return $.replace(/moduleVersion/, \"internal.ModuleVersion\").replace(/moduleName+\"/, \"internal.ModuleName+\\\"/armpolicy\");\n```\n\n----------------------------------------\n\nTITLE: Azure Traffic Manager SDK Changelog Entry\nDESCRIPTION: Release history entries documenting version changes, new features, and improvements across multiple SDK versions from 1.0.0 to 1.3.0.\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.3.0 (2023-11-24)\n### Features Added\n\n- Support for test fakes and OpenTelemetry trace spans.\n\n\n## 1.2.0 (2023-06-23)\n### Features Added\n\n- New value `EndpointMonitorStatusUnmonitored` added to enum type `EndpointMonitorStatus`\n- New enum type `AlwaysServe` with values `AlwaysServeDisabled`, `AlwaysServeEnabled`\n- New function `*ProfilesClient.CheckTrafficManagerNameAvailabilityV2(context.Context, CheckTrafficManagerRelativeDNSNameAvailabilityParameters, *ProfilesClientCheckTrafficManagerNameAvailabilityV2Options) (ProfilesClientCheckTrafficManagerNameAvailabilityV2Response, error)`\n- New field `AlwaysServe` in struct `EndpointProperties`\n\n\n## 1.1.0 (2023-04-07)\n### Features Added\n\n- New struct `ClientFactory` which is a client factory used to create any client in this module\n\n\n## 1.0.0 (2022-05-17)\n\nThe package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/trafficmanager/armtrafficmanager` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html) since version 1.0.0, which contains breaking changes.\n\nTo migrate the existing applications to the latest version, please refer to [Migration Guide](https://aka.ms/azsdk/go/mgmt/migration).\n\nTo learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Palo Alto Networks Go SDK Generation\nDESCRIPTION: YAML configuration for AutoRest tool to generate Go SDK code from Azure Palo Alto Networks REST API specifications. Sets ARM mode, specifies source specification files, defines license header, module version 1.1.0, and targets API version 2023-09-01.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/4bb583bcb67c2bf448712f2bd1593a64a7a8f139/specification/paloaltonetworks/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/4bb583bcb67c2bf448712f2bd1593a64a7a8f139/specification/paloaltonetworks/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.1.0\ntag: package-2023-09-01\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest YAML for Azure Custom Providers\nDESCRIPTION: YAML configuration for AutoRest that specifies settings for generating the Azure Custom Providers SDK. It requires the Azure REST API specifications, sets the module version to 0.7.0, and uses the Microsoft MIT license header.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/customproviders/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/customproviders/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 0.7.0\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Private Edge Zone Module\nDESCRIPTION: Command to install the Azure Private Edge Zone module using Go modules package management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/hybridnetwork/armhybridnetwork/v2\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Credentials\nDESCRIPTION: Creates default Azure credentials for authentication using the azidentity package\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Client Options for Different Clouds in Go\nDESCRIPTION: This snippet shows how to configure client options for connecting to different Azure cloud environments.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armauthorization.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Creating Client Factory for Azure Liftr Qumulo\nDESCRIPTION: Initializes a client factory for creating Azure Liftr Qumulo service clients\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armqumulo.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Removing moduleName and moduleVersion Constants from constants.go\nDESCRIPTION: Directive to remove the moduleName and moduleVersion constant declarations from the constants.go file.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: constants.go\n    where: $\n    transform: return $.replace(/const \\(\\n\\s+moduleName.+\\n\\s+moduleVersion.+\\n\\)\\n/, \"\");\n```\n\n----------------------------------------\n\nTITLE: WebPubSub Replica Management\nDESCRIPTION: Functions for managing WebPubSub service replicas including CRUD operations\n\nLANGUAGE: go\nCODE:\n```\n*ReplicasClient.BeginCreateOrUpdate(context.Context, string, string, string, Replica, *ReplicasClientBeginCreateOrUpdateOptions) (*runtime.Poller[ReplicasClientCreateOrUpdateResponse], error)\n```\n\n----------------------------------------\n\nTITLE: Adding Internal Import to Client Files\nDESCRIPTION: This YAML directive adds an internal import to various client-related Go files. It inserts the import statement for the internal package from the Azure SDK for Go.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from:\n      - \"*_client.go\"\n      - \"client.go\"\n      - \"client_factory.go\"\n    where: $\n    transform: return $.replace(/import \\(\\n/, \"import (\\n\\\"github.com/Azure/azure-sdk-for-go/profile/p20200901/internal\\\"\\n\");\n```\n\n----------------------------------------\n\nTITLE: Release Notes - Version 0.1.0\nDESCRIPTION: Initial release implementing next generation design principles with references to Quick Start documentation.\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.1.0 (2024-09-27)\n### Other Changes\n\nThe package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/computeschedule/armcomputeschedule` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html).\n\nTo learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Kubernetes Configuration Module\nDESCRIPTION: Command to install the Azure Kubernetes Configuration module using Go modules for dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/kubernetesconfiguration/armkubernetesconfiguration/v2\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Datalake SDK Generation for Golang\nDESCRIPTION: YAML configuration for generating the Azure Datalake SDK for Golang, including input specifications, output settings, and various options.\n\nLANGUAGE: yaml\nCODE:\n```\ngo: true\nclear-output-folder: false\nversion: \"^3.0.0\"\nlicense-header: MICROSOFT_MIT_NO_VERSION\ninput-file: \"https://raw.githubusercontent.com/Azure/azure-rest-api-specs/d18a495685ccec837b72891b4deea017f62e8190/specification/storage/data-plane/Azure.Storage.Files.DataLake/stable/2025-05-05/DataLakeStorage.json\"\ncredential-scope: \"https://storage.azure.com/.default\"\noutput-folder: ../generated\nfile-prefix: \"zz_\"\nopenapi-type: \"data-plane\"\nverbose: true\nsecurity: AzureKey\nmodelerfour:\n  group-parameters: false\n  seal-single-value-enum-by-default: true\n  lenient-model-deduplication: true\nexport-clients: true\nuse: \"@autorest/go@4.0.0-preview.65\"\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure DNS SDK Generation in YAML\nDESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure DNS SDK for Go. It specifies the Azure ARM mode, required API specifications from GitHub, license header, module version, and the API version tag to use.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/987a8f38ab2a8359d085e149be042267a9ecc66f/specification/dns/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/987a8f38ab2a8359d085e149be042267a9ecc66f/specification/dns/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.3.0-beta.1\ntag: package-2023-07-preview\n```\n\n----------------------------------------\n\nTITLE: Creating Specific Azure Dev Center Client in Go\nDESCRIPTION: This snippet shows how to create a specific client (AttachedNetworksClient) using the previously created client factory. This allows access to a set of related APIs.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewAttachedNetworksClient()\n```\n\n----------------------------------------\n\nTITLE: Updating Module References Directive\nDESCRIPTION: YAML directive to update moduleName and moduleVersion references to use internal package in client constructor files.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from:\n      - \"*_client.go\"\n      - \"client.go\"\n      - \"client_factory.go\"\n    where: $\n    transform: return $.replace(/moduleVersion/, \"internal.ModuleVersion\").replace(/moduleName\\+\"/, \"internal.ModuleName+\\\"/armcommerce\");\n```\n\n----------------------------------------\n\nTITLE: Release Notes (Markdown)\nDESCRIPTION: Markdown formatted release history documenting changes across versions 0.7.0 through 0.5.0, including feature additions, bug fixes, and major architectural changes.\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 0.7.0 (2023-11-24)\n### Features Added\n\n- Support for test fakes and OpenTelemetry trace spans.\n\n\n## 0.6.1 (2023-04-14)\n### Bug Fixes\n\n- Fix serialization bug of empty value of `any` type.\n\n\n## 0.6.0 (2023-03-31)\n### Features Added\n\n- New struct `ClientFactory` which is a client factory used to create any client in this module\n\n\n## 0.5.0 (2022-05-17)\n\nThe package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/saas/armsaas` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html) since version 0.5.0, which contains breaking changes.\n\nTo migrate the existing applications to the latest version, please refer to [Migration Guide](https://aka.ms/azsdk/go/mgmt/migration).\n\nTo learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Reservations SDK Generation\nDESCRIPTION: YAML configuration for AutoRest to generate Azure Reservations SDK for Go. Specifies Azure ARM mode, required API specifications from Azure REST API specs repository, Microsoft MIT license header, and module version 3.1.0.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/1e7b408f3323e7f5424745718fe62c7a043a2337/specification/reservations/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/1e7b408f3323e7f5424745718fe62c7a043a2337/specification/reservations/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 3.1.0\n```\n\n----------------------------------------\n\nTITLE: New Field: MessageOfTheDay in ManagedClusterAgentPoolProfile\nDESCRIPTION: Adds a new field 'MessageOfTheDay' to the ManagedClusterAgentPoolProfile struct.\n\nLANGUAGE: Go\nCODE:\n```\nNew field `MessageOfTheDay` in struct `ManagedClusterAgentPoolProfile`\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Options for Different Clouds\nDESCRIPTION: Creates client factory with custom options for connecting to different Azure clouds including sovereign clouds and Azure Stack\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armedgeorderpartner.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure using DefaultAzureCredential\nDESCRIPTION: Creates a default Azure credential object for authentication with Azure services.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Example Feature Addition in v4.1.0\nDESCRIPTION: Shows new enum types and values added in the latest release\n\nLANGUAGE: go\nCODE:\n```\n- New value `SiteLoadBalancingLeastRequestsWithTieBreaker` added to enum type `SiteLoadBalancing`\n- New enum type `AutoGeneratedDomainNameLabelScope` with values `AutoGeneratedDomainNameLabelScopeNoReuse`, `AutoGeneratedDomainNameLabelScopeResourceGroupReuse`, `AutoGeneratedDomainNameLabelScopeSubscriptionReuse`, `AutoGeneratedDomainNameLabelScopeTenantReuse`\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Databasewatcher Module in Go\nDESCRIPTION: This command installs the Azure Databasewatcher module using Go's package manager. It requires Go modules for versioning and dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/databasewatcher/armdatabasewatcher\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Sphere Go SDK Generation\nDESCRIPTION: AutoRest configuration that defines parameters for generating Azure Sphere SDK code. It specifies the Azure ARM mode, required API specifications from GitHub, Microsoft MIT license header, module version 1.0.0, and targets the 2024-04-01 API version package.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/09c37754dac91874ff689ed1e60effb4268c8669/specification/sphere/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/09c37754dac91874ff689ed1e60effb4268c8669/specification/sphere/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.0.0\ntag: package-2024-04-01\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Purview Go Module\nDESCRIPTION: Command to install the Azure Purview module using Go modules package management\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/purview/armpurview\n```\n\n----------------------------------------\n\nTITLE: Creating Client Factory for Azure Managed Network\nDESCRIPTION: Initializes a client factory for creating Azure Managed Network service clients using subscription ID and credentials.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armmanagednetwork.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK Go Data Share Module\nDESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure SDK for Go Data Share module. It specifies the Azure ARM mode, required API specifications, license header, and module version.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/datashare/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/datashare/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.2.0\n```\n\n----------------------------------------\n\nTITLE: Retrieving AccessConnector in Go\nDESCRIPTION: Retrieves the details of a specific AccessConnector resource.\n\nLANGUAGE: go\nCODE:\n```\n*AccessConnectorsClient.Get(context.Context, string, string, *AccessConnectorsClientGetOptions) (AccessConnectorsClientGetResponse, error)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Container Service SDK Generation in YAML\nDESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure Container Service SDK. It specifies the Azure ARM mode, required API specifications, license header, module version, and package tag.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/f2826dd1e08d4625b29867c01a232d2dad423521/specification/containerservice/resource-manager/Microsoft.ContainerService/aks/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/f2826dd1e08d4625b29867c01a232d2dad423521/specification/containerservice/resource-manager/Microsoft.ContainerService/aks/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 6.4.0\ntag: package-2024-10\n```\n\n----------------------------------------\n\nTITLE: Adding New Enum Values in Go\nDESCRIPTION: Example of adding new values to existing enum types in Go\n\nLANGUAGE: Go\nCODE:\n```\n// New values added to ClusterConnectionStatus enum\nClusterConnectionStatusDisconnected ClusterConnectionStatus = \"Disconnected\"\n\n// New values added to ClusterDetailedStatus enum\nClusterDetailedStatusUpdatePaused ClusterDetailedStatus = \"UpdatePaused\"\n\n// New values added to RackSKUProvisioningState enum\nRackSKUProvisioningStateCanceled RackSKUProvisioningState = \"Canceled\"\nRackSKUProvisioningStateFailed RackSKUProvisioningState = \"Failed\"\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Container Service SDK Generation in YAML\nDESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure Container Service SDK. It specifies the Azure ARM mode, required API specifications, license header, module version, and package tag.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/f2826dd1e08d4625b29867c01a232d2dad423521/specification/containerservice/resource-manager/Microsoft.ContainerService/aks/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/f2826dd1e08d4625b29867c01a232d2dad423521/specification/containerservice/resource-manager/Microsoft.ContainerService/aks/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 6.4.0\ntag: package-2024-10\n```\n\n----------------------------------------\n\nTITLE: New Client Creation\nDESCRIPTION: Example of creating a new client with credentials and options\n\nLANGUAGE: go\nCODE:\n```\nfunc NewArchiveVersionsClient(string, azcore.TokenCredential, *arm.ClientOptions) (*ArchiveVersionsClient, error)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Using Default Credentials in Go\nDESCRIPTION: This snippet demonstrates how to create a default Azure credential using the azidentity package. It's used for authenticating with Azure Deployment Manager.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure using Default Credentials\nDESCRIPTION: Creates a default Azure credential object for authentication with Azure services using the azidentity package.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure using Default Credential in Go\nDESCRIPTION: This code snippet shows how to create a default Azure credential using the azidentity package. It's used for authenticating with Azure services, including Container Apps.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Declaring New Structs in Go\nDESCRIPTION: New structs are introduced to represent various resources and properties. This snippet shows how new structs are declared in Go.\n\nLANGUAGE: go\nCODE:\n```\n- New struct `ClassificationService`\n- New struct `DiscoveryNlpRequest`\n- New struct `DiscoveryNlpResponse`\n- New struct `NlpSolutions`\n- New struct `ReplacementMapsSelfHelp`\n- New struct `SectionSelfHelp`\n- New struct `SimplifiedSolutionsResource`\n- New struct `SimplifiedSolutionsResourceProperties`\n```\n\n----------------------------------------\n\nTITLE: New Field: MessageOfTheDay in ManagedClusterAgentPoolProfileProperties\nDESCRIPTION: Adds a new field 'MessageOfTheDay' to the ManagedClusterAgentPoolProfileProperties struct.\n\nLANGUAGE: Go\nCODE:\n```\nNew field `MessageOfTheDay` in struct `ManagedClusterAgentPoolProfileProperties`\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest Parameters for Azure Service Linker SDK Generation\nDESCRIPTION: YAML configuration for AutoRest code generation tool. Specifies Azure ARM mode, required API specifications, license header, module version 2.0.0-beta.2, and targets the preview API version package-2024-07-01-preview.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/ad60d7f8eba124edc6999677c55aba2184e303b0/specification/servicelinker/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/ad60d7f8eba124edc6999677c55aba2184e303b0/specification/servicelinker/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 2.0.0-beta.2\ntag: package-2024-07-01-preview\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest Settings for Azure SDK Go Generation\nDESCRIPTION: YAML configuration for AutoRest that specifies the source OpenAPI specs, module version, and other parameters needed to generate the Azure SDK for Go. References the Image Builder service specifications and sets Azure ARM-specific parameters.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/b22c642b361e6d6e7d72a2347a09b0bcf6075d70/specification/imagebuilder/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/b22c642b361e6d6e7d72a2347a09b0bcf6075d70/specification/imagebuilder/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 2.3.0\ntag: package-2024-02\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Storage Sync Module\nDESCRIPTION: Command to install the Azure Storage Sync module using Go modules for dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/storagesync/armstoragesync\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Key Vault Client with Custom Options\nDESCRIPTION: Sets up a client factory with custom options for connecting to different Azure clouds including sovereign clouds and Azure Stack.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armkeyvault.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Default Credentials\nDESCRIPTION: Creates a default Azure credential object for authentication with Azure services\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Cognitive Services SDK Generation in Go\nDESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure Cognitive Services SDK for Go. It specifies Azure ARM mode, required API specifications, MICROSOFT_MIT_NO_VERSION license header, module version 1.7.0, and targets the package-2024-10 tag.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/069a65e8a6d1a6c0c58d9a9d97610b7103b6e8a5/specification/cognitiveservices/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/069a65e8a6d1a6c0c58d9a9d97610b7103b6e8a5/specification/cognitiveservices/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.7.0\ntag: package-2024-10\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Data Factory Go Module\nDESCRIPTION: Command to install the Azure Data Factory module using Go modules for dependency management\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/datafactory/armdatafactory/v9\n```\n\n----------------------------------------\n\nTITLE: Release Notes Entry in Markdown\nDESCRIPTION: Documents the initial 0.1.0 release of the Azure Migration Assessment SDK package noting its implementation of next generation design principles and references to documentation.\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 0.1.0 (2025-03-03)\n### Other Changes\n\nThe package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/migrationassessment/armmigrationassessment` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html).\n\nTo learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Integration Spaces SDK Generation\nDESCRIPTION: YAML configuration that defines parameters for generating Go SDK code using AutoRest. References specific versions of Azure REST API specifications, sets ARM mode, defines license header, and specifies module version 0.1.0 targeting package-2023-11-14-preview.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/db9788dde7a0c2c0d82e4fdf5f7b4de3843937e3/specification/azureintegrationspaces/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/db9788dde7a0c2c0d82e4fdf5f7b4de3843937e3/specification/azureintegrationspaces/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 0.1.0\ntag: package-2023-11-14-preview\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK Generation in YAML\nDESCRIPTION: This YAML configuration sets up AutoRest for generating the Azure SDK for Go. It specifies Azure ARM settings, required specification files, license header, and module version.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/consumption/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/consumption/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.2.0\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Digital Twins\nDESCRIPTION: Creating a default Azure credential for authentication with Azure Digital Twins services.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Initializing Customer Lockbox Client Factory\nDESCRIPTION: Create a new client factory instance for Azure Customer Lockbox services using subscription ID and credentials.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armcustomerlockbox.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK Generation in YAML\nDESCRIPTION: This YAML configuration sets up AutoRest for generating the Azure SDK for Go. It enables Azure ARM mode, specifies required specification files, sets the license header, module version, and API version tag.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/366aaa13cdd218b9adac716680e49473673410c8/specification/app/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/366aaa13cdd218b9adac716680e49473673410c8/specification/app/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 3.1.0-beta.1\ntag: package-preview-2024-08\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Dedicated HSM using DefaultAzureCredential\nDESCRIPTION: This snippet demonstrates how to create a default Azure credential for authentication with Azure Dedicated HSM.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Compute Schedule Module\nDESCRIPTION: Command to install the Azure Compute Schedule module using Go modules for dependency management.\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/computeschedule/armcomputeschedule\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Front Door SDK Generation in YAML\nDESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure Front Door SDK for Go. It specifies the Azure ARM mode, required API specifications, license header, module version, and package tag.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/b54ffc9278eff071455b1dbb4ad2e772afce885d/specification/frontdoor/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/b54ffc9278eff071455b1dbb4ad2e772afce885d/specification/frontdoor/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.4.0\ntag: package-2024-02\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Bare Metal Infrastructure SDK Generation in YAML\nDESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure Bare Metal Infrastructure SDK for Go. It specifies the Azure ARM mode, required API specifications from GitHub, license header, module version, and the API version tag to use.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/90115af9fda46f323e5c42c274f2b376108d1d47/specification/baremetalinfrastructure/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/90115af9fda46f323e5c42c274f2b376108d1d47/specification/baremetalinfrastructure/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 2.0.0-beta.1\ntag: package-preview-2023-08\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK for Go Network Package\nDESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure SDK for Go network package. It specifies the Azure ARM mode, required specification files, license header, module version, and package tag.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/ab04533261eff228f28e08900445d0edef3eb70c/specification/network/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/ab04533261eff228f28e08900445d0edef3eb70c/specification/network/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 6.2.0\ntag: package-2024-05\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Billing SDK Package\nDESCRIPTION: Command to install the Azure Billing module using Go modules for dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/billing/armbilling\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Costmanagement Client for China Cloud in Go\nDESCRIPTION: Sets up client options to connect to Azure China cloud for Costmanagement operations.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armcostmanagement.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Creating a New ApplicationGroupClient in Go\nDESCRIPTION: This code snippet demonstrates how to create a new ApplicationGroupClient using the Azure SDK for Go.\n\nLANGUAGE: go\nCODE:\n```\nNewApplicationGroupClient(string, azcore.TokenCredential, *arm.ClientOptions) (*ApplicationGroupClient, error)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Data Protection SDK Generation in YAML\nDESCRIPTION: This YAML configuration specifies the settings for AutoRest to generate the Azure Data Protection SDK for Go. It includes ARM support, required API specifications, license header, module version, and package tag.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/81a4ee5a83ae38620c0e1404793caffe005d26e4/specification/dataprotection/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/81a4ee5a83ae38620c0e1404793caffe005d26e4/specification/dataprotection/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 3.1.0\ntag: package-2024-04\n```\n\n----------------------------------------\n\nTITLE: Creating New Structs for Managed Service Identity in Go\nDESCRIPTION: Defines new structs ManagedServiceIdentity and UserAssignedIdentity for handling managed service identities.\n\nLANGUAGE: Go\nCODE:\n```\ntype ManagedServiceIdentity struct {\n    // Fields not provided in the changelog\n}\n\ntype UserAssignedIdentity struct {\n    // Fields not provided in the changelog\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Digital Twins Go Module\nDESCRIPTION: Command to install the Azure Digital Twins module using Go modules package management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/digitaltwins/armdigitaltwins\n```\n\n----------------------------------------\n\nTITLE: Creating Power Platform Client Factory\nDESCRIPTION: Initializes a new client factory for Azure Power Platform services using subscription ID and credentials\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armpowerplatform.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Creating App Configuration Stores Client in Go\nDESCRIPTION: This code demonstrates how to create a specific client for managing Azure App Configuration stores using the previously created client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewConfigurationStoresClient()\n```\n\n----------------------------------------\n\nTITLE: Updated Job Client Response Changes\nDESCRIPTION: Breaking changes to job execution response types in version 3.0.0\n\nLANGUAGE: go\nCODE:\n```\n// Removed fields\nField EndTime, StartTime, Status, Template of struct JobExecution has been removed\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Recovery Services SDK Generation\nDESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure Recovery Services SDK. It specifies the Azure ARM mode, required API specifications, license header, module version, and custom directives for modifying operation IDs in the vaults.json file. The configuration targets the package-2024-04 API version.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/33c4457b1d13f83965f4fe3367dca4a6df898100/specification/recoveryservices/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/33c4457b1d13f83965f4fe3367dca4a6df898100/specification/recoveryservices/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 2.0.0\ndirective:\n- from: vaults.json\n  where: '$.paths[\"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/operationStatus/{operationId}\"].get'\n  transform: >\n    $[\"operationId\"] = \"Operations_OperationStatus_Get\"\n- from: vaults.json\n  where: '$.paths[\"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/operationResults/{operationId}\"].get'\n  transform: >\n    $[\"operationId\"] = \"Operations_GetOperationResult\"\ntag: package-2024-04\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Consumption Module for Go\nDESCRIPTION: This command installs the Azure Consumption module using Go's package manager. It requires Go modules for versioning and dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/consumption/armconsumption\n```\n\n----------------------------------------\n\nTITLE: Operation Customization Directives\nDESCRIPTION: Multiple YAML directives to customize operation behaviors including removing responses, changing parameter types, and renaming operations.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: swagger-document\n    where: $[\"paths\"][\"/acr/v1/{name}\"]\n    transform: >\n      delete $.delete[\"responses\"][\"202\"].schema\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Stream Analytics Go SDK Generation\nDESCRIPTION: YAML configuration for AutoRest tool to generate Go SDK for Azure Stream Analytics. Specifies Azure ARM mode, required API specifications, license header, module version, and API version tag.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/fa469a1157c33837a46c9bcd524527e94125189a/specification/streamanalytics/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/fa469a1157c33837a46c9bcd524527e94125189a/specification/streamanalytics/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 2.0.0-beta.1\ntag: package-2021-10-preview\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Fabric Service Client\nDESCRIPTION: Creates a specific service client for accessing Azure Fabric Capacities API using the client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewCapacitiesClient()\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure Automanage Client Factory in Go\nDESCRIPTION: Initializes a client factory for Azure Automanage services using the provided subscription ID and credentials.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armautomanage.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Management Partner Module in Go\nDESCRIPTION: Command to install the Azure Management Partner module using Go modules.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/managementpartner/armmanagementpartner\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Cost Management SDK Generation\nDESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure Cost Management SDK for Go. It specifies the Azure ARM mode, required API specifications, license header, module version, and package tag.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/17aa6a1314de5aafef059d9aa2229901df506e75/specification/cost-management/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/17aa6a1314de5aafef059d9aa2229901df506e75/specification/cost-management/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 2.1.0\ntag: package-2022-10\n```\n\n----------------------------------------\n\nTITLE: Release History Changes Markdown\nDESCRIPTION: Markdown formatted changelog documenting version history, breaking changes, new features, and bug fixes for the Azure CDN SDK for Go\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 2.2.0 (2024-04-26)\n### Features Added\n\n- New enum type `ProfileScrubbingState` with values `ProfileScrubbingStateDisabled`, `ProfileScrubbingStateEnabled`\n- New enum type `ScrubbingRuleEntryMatchOperator` with values `ScrubbingRuleEntryMatchOperatorEqualsAny`\n- New enum type `ScrubbingRuleEntryMatchVariable` with values `ScrubbingRuleEntryMatchVariableQueryStringArgNames`, `ScrubbingRuleEntryMatchVariableRequestIPAddress`, `ScrubbingRuleEntryMatchVariableRequestURI`\n- New enum type `ScrubbingRuleEntryState` with values `ScrubbingRuleEntryStateDisabled`, `ScrubbingRuleEntryStateEnabled`\n- New struct `ProfileLogScrubbing`\n- New struct `ProfileScrubbingRules`\n- New field `LogScrubbing` in struct `ProfileProperties`\n- New field `LogScrubbing` in struct `ProfilePropertiesUpdateParameters`\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Managed Network Go SDK\nDESCRIPTION: YAML configuration that defines parameters for AutoRest code generation tool. Specifies Azure ARM mode, references to REST API specifications, MIT license header requirement, and sets module version to 0.3.0.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/163e27c0ca7570bc39e00a46f255740d9b3ba3cb/specification/managednetwork/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/163e27c0ca7570bc39e00a46f255740d9b3ba3cb/specification/managednetwork/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 0.3.0\n```\n\n----------------------------------------\n\nTITLE: Defining RunningState Enum in Go\nDESCRIPTION: Defines a new enum type RunningState with values for different states of a managed CCF instance.\n\nLANGUAGE: Go\nCODE:\n```\ntype RunningState string\n\nconst (\n    RunningStateActive RunningState = \"Active\"\n    RunningStatePaused RunningState = \"Paused\"\n    RunningStatePausing RunningState = \"Pausing\"\n    RunningStateResuming RunningState = \"Resuming\"\n    RunningStateUnknown RunningState = \"Unknown\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Data Factory Client Factory\nDESCRIPTION: Initializes a client factory for Azure Data Factory with basic configuration\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armdatafactory.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Storage Mover Client Factory in Go\nDESCRIPTION: Initializes a client factory for Azure Storage Mover with a subscription ID and credentials.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armstoragemover.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Creating API Management Client Factory\nDESCRIPTION: Example showing how to create a client factory for instantiating API Management service clients.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armapimanagement.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Event Grid Namespaces Package\nDESCRIPTION: Command to install the Azure Event Grid Namespaces client module using Go's package manager.\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/messaging/eventgrid/aznamespaces\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Event Grid Namespaces Package\nDESCRIPTION: Command to install the Azure Event Grid Namespaces client module using Go's package manager.\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/messaging/eventgrid/aznamespaces\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK Go Generation\nDESCRIPTION: This YAML configuration sets up AutoRest for generating Azure SDK for Go. It specifies the Azure ARM mode, required specification files, license header, module version, and API version tag.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/2bde125befabb21807a2021765901f20e3e74ec8/specification/playwrighttesting/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/2bde125befabb21807a2021765901f20e3e74ec8/specification/playwrighttesting/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.0.0\ntag: package-2024-12-01\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Data Box Edge SDK Generation in Go\nDESCRIPTION: Specifies the AutoRest configuration for generating the Azure Data Box Edge SDK. It sets the Azure ARM flag, defines required specifications, and specifies module details.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/53b1affe357b3bfbb53721d0a2002382a046d3b0/specification/databoxedge/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/53b1affe357b3bfbb53721d0a2002382a046d3b0/specification/databoxedge/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 0.1.0\nmodule-name: profile/p20200901/resourcemanager/databoxedge/armdataboxedge\nmodule: github.com/Azure/azure-sdk-for-go/$(module-name)\noutput-folder: $(go-sdk-folder)/$(module-name)\ntag: profile-hybrid-2020-09-01\n```\n\n----------------------------------------\n\nTITLE: Removing Test Resources using Default Parameters in PowerShell\nDESCRIPTION: This snippet shows the default parameter set for the Remove-TestResources.ps1 script. It allows for specifying a base name, subscription ID, service directory, and other optional parameters to remove test resources from Azure.\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-TestResources.ps1 [-BaseName <String>] [-SubscriptionId <String>] [[-ServiceDirectory] <String>]\n [-Environment <String>] [-ResourceType <String>] [-ServicePrincipalAuth] [-Force]\n [-RemoveTestResourcesRemainingArguments <Object>] [-ProgressAction <ActionPreference>] [-WhatIf] [-Confirm]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Selfhelp Module\nDESCRIPTION: Command to install the Azure Selfhelp module using Go modules dependency management\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/selfhelp/armselfhelp/v2\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Container Instance Module in Go\nDESCRIPTION: This command installs the Azure Container Instance module using Go's package manager. It retrieves the specified version of the module from the Azure SDK for Go repository.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/containerinstance/armcontainerinstance/v2\n```\n\n----------------------------------------\n\nTITLE: Release History Documentation in Markdown\nDESCRIPTION: Markdown formatted changelog documenting version history from 1.0.0 to 1.2.0, including feature additions, bug fixes, and breaking changes.\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.2.0 (2023-11-24)\n### Features Added\n\n- Support for test fakes and OpenTelemetry trace spans.\n\n\n## 1.1.1 (2023-04-14)\n### Bug Fixes\n\n- Fix serialization bug of empty value of `any` type.\n\n## 1.1.0 (2023-03-27)\n### Features Added\n\n- New struct `ClientFactory` which is a client factory used to create any client in this module\n\n\n## 1.0.0 (2022-05-17)\n\nThe package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/analysisservices/armanalysisservices` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html) since version 1.0.0, which contains breaking changes.\n\nTo migrate the existing applications to the latest version, please refer to [Migration Guide](https://aka.ms/azsdk/go/mgmt/migration).\n\nTo learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest Settings for Azure Bot Service Go SDK\nDESCRIPTION: YAML configuration for AutoRest code generation tool. Specifies Azure ARM compatibility, references to API specifications, licensing header requirements, and module versioning for the Bot Service SDK.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/e7bf3adfa2d5e5cdbb804eec35279501794f461c/specification/botservice/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/e7bf3adfa2d5e5cdbb804eec35279501794f461c/specification/botservice/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.2.0\n```\n\n----------------------------------------\n\nTITLE: Release Notes - Version 0.1.0\nDESCRIPTION: Initial release of the package following next generation design principles\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.1.0 (2024-07-26)\n### Other Changes\n\nThe package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/computefleet/armcomputefleet` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html).\n\nTo learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Client Options for Different Clouds in Go\nDESCRIPTION: Demonstrates how to set up client options for connecting to different Azure clouds, including sovereign clouds and Azure Stack.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armdataboxedge.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Elastic Client Factory\nDESCRIPTION: Initializes a client factory for creating Azure Elastic service clients using subscription ID and credentials.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armelastic.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest Settings for Azure SDK Go Generation\nDESCRIPTION: YAML configuration for AutoRest tool to generate Go SDK code from Azure Developer Hub REST API specifications. Specifies ARM mode, source specifications, license header type, module version 0.6.0, and targets the preview-2024-05 API version.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/34f5146bc945549d087d38a8a593c0a5f475ad7f/specification/developerhub/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/34f5146bc945549d087d38a8a593c0a5f475ad7f/specification/developerhub/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 0.6.0\ntag: package-preview-2024-05\n```\n\n----------------------------------------\n\nTITLE: Documenting Release History in Markdown\nDESCRIPTION: This snippet outlines the release history for version 0.1.0 of the Azure SDK for Go's Terraform Resource Manager package. It includes the release date and mentions the adoption of next-generation design principles.\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 0.1.0 (2024-11-20)\n### Other Changes\n\nThe package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/terraform/armterraform` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html).\n\nTo learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK Go - Oracle Resource Manager\nDESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure SDK for Go for the Oracle Resource Manager. It specifies Azure ARM mode, required API specifications, license header, module version, and package tag.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/1c63635d66ae38cff18045ab416a6572d3e15f6e/specification/oracle/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/1c63635d66ae38cff18045ab416a6572d3e15f6e/specification/oracle/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.0.0\ntag: package-2023-09-01\n```\n\n----------------------------------------\n\nTITLE: WebPubSub Custom Domain Configuration\nDESCRIPTION: APIs for managing custom domains and certificates for WebPubSub services\n\nLANGUAGE: go\nCODE:\n```\n*CustomDomainsClient.BeginCreateOrUpdate(context.Context, string, string, string, CustomDomain, *CustomDomainsClientBeginCreateOrUpdateOptions) (*runtime.Poller[CustomDomainsClientCreateOrUpdateResponse], error)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure using Default Credentials in Go\nDESCRIPTION: This snippet demonstrates how to create a default Azure credential for authentication. It uses the azidentity module to provide various authentication methods.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Edgezones Module in Go\nDESCRIPTION: This snippet shows how to install the Azure Edgezones module using Go's package manager. It uses the go get command to fetch and install the module from the specified GitHub repository.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/edgezones/armedgezones\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest Base Settings for KeyVault SDK\nDESCRIPTION: Basic AutoRest configuration for generating KeyVault SDK module. Specifies required API specs, licensing, module versioning, and output settings.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/53b1affe357b3bfbb53721d0a2002382a046d3b0/specification/keyvault/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/53b1affe357b3bfbb53721d0a2002382a046d3b0/specification/keyvault/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 0.1.0\nmodule-name: profile/p20200901/resourcemanager/keyvault/armkeyvault\nmodule: github.com/Azure/azure-sdk-for-go/$(module-name)\noutput-folder: $(go-sdk-folder)/$(module-name)\ntag: profile-hybrid-2020-09-01\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Web PubSub Go SDK\nDESCRIPTION: Command to install the Azure Web PubSub module using Go modules for dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/webpubsub/armwebpubsub\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Compute Fleet Client for Different Clouds in Go\nDESCRIPTION: This snippet shows how to configure the client factory for different Azure clouds or Azure Stack. It uses ClientOptions to set the endpoint for connecting to specific cloud environments.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armcomputefleet.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Version History Entry - 0.5.0\nDESCRIPTION: Release notes for version 0.5.0 documenting migration to next generation design principles\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.5.0 (2022-05-17)\n\nThe package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/synapse/armsynapse` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html) since version 0.5.0, which contains breaking changes.\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Storage Import/Export SDK Generation in YAML\nDESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure Storage Import/Export SDK for Go. It specifies the Azure ARM mode, required API specifications, license header, module version, and includes a custom directive for parameter transformation.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/storageimportexport/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/storageimportexport/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 0.7.0\n\ndirective:\n  - from: swagger-document\n    where: $.parameters.Accept-Language\n    transform: $['x-ms-parameter-location'] = \"method\"\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Blockchain Go SDK Generation\nDESCRIPTION: Configuration settings for AutoRest to generate the Azure Blockchain SDK for Go. Specifies the required API specifications, license header, and module version. Uses Azure ARM mode and references specific versions of the blockchain resource manager specifications.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/blockchain/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/blockchain/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 0.7.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Options for Different Clouds\nDESCRIPTION: Sets up client options for connecting to different Azure clouds including sovereign clouds\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armstoragepool.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure App Platform Client Factory\nDESCRIPTION: Initializes a client factory for Azure App Platform services using subscription ID and credentials.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armappplatform.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK Go Code Generation\nDESCRIPTION: This YAML configuration sets up AutoRest for generating Azure SDK code for Go. It specifies the Azure ARM mode, required API specifications, license header, module version, and package tag.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/92de53a5f1e0e03c94b40475d2135d97148ed014/specification/devcenter/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/92de53a5f1e0e03c94b40475d2135d97148ed014/specification/devcenter/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 2.0.0\ntag: package-2024-02\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Factory with Custom Options\nDESCRIPTION: Creates a client factory with custom options for connecting to different Azure clouds using ClientOptions.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armsaas.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Private DNS Module in Go\nDESCRIPTION: This command installs the Azure Private DNS module using Go's package manager.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/privatedns/armprivatedns\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Stack HCI SDK Generation in Go\nDESCRIPTION: This YAML configuration specifies the settings for AutoRest to generate the Azure Stack HCI SDK for Go. It includes references to the API specifications, sets the Azure ARM flag, specifies the license header, module version, and API version tag.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/c9b146c38df5f76e2d34a3ef771979805ff4ff73/specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/StackHCI/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/c9b146c38df5f76e2d34a3ef771979805ff4ff73/specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/StackHCI/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 2.0.0\ntag: package-2024-04\n```\n\n----------------------------------------\n\nTITLE: Dependency Management with dep\nDESCRIPTION: Example of version constraints for Azure SDK in dep configuration file.\n\nLANGUAGE: toml\nCODE:\n```\n[[constraint]]\n  name = \"github.com/Azure/azure-sdk-for-go\"\n  version = \"21.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Extended Location SDK Function Signatures\nDESCRIPTION: New function signatures added in version 1.3.0-beta.1 for resource sync rules and custom locations management.\n\nLANGUAGE: go\nCODE:\n```\n*ClientFactory.NewResourceSyncRulesClient() *ResourceSyncRulesClient\n*CustomLocationsClient.FindTargetResourceGroup(context.Context, string, string, CustomLocationFindTargetResourceGroupProperties, *CustomLocationsClientFindTargetResourceGroupOptions) (CustomLocationsClientFindTargetResourceGroupResponse, error)\nNewResourceSyncRulesClient(string, azcore.TokenCredential, *arm.ClientOptions) (*ResourceSyncRulesClient, error)\n*ResourceSyncRulesClient.BeginCreateOrUpdate(context.Context, string, string, string, ResourceSyncRule, *ResourceSyncRulesClientBeginCreateOrUpdateOptions) (*runtime.Poller[ResourceSyncRulesClientCreateOrUpdateResponse], error)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Machine Learning Module\nDESCRIPTION: Command to install the Azure Machine Learning Go module using go get\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/machinelearning/armmachinelearning/v4\n```\n\n----------------------------------------\n\nTITLE: Adding Identity Field to ServiceResource and ServiceResourceUpdate Structs in Go\nDESCRIPTION: Adds a new field 'Identity' to the existing ServiceResource and ServiceResourceUpdate structs.\n\nLANGUAGE: Go\nCODE:\n```\ntype ServiceResource struct {\n    // Existing fields\n    Identity *ManagedServiceIdentity\n}\n\ntype ServiceResourceUpdate struct {\n    // Existing fields\n    Identity *ManagedServiceIdentity\n}\n```\n\n----------------------------------------\n\nTITLE: Creating or Updating API Keys in Go\nDESCRIPTION: Performs a create or update operation on API keys using the APIKeysClient.\n\nLANGUAGE: Go\nCODE:\n```\n*APIKeysClient.CreateOrUpdate(context.Context, string, string, string, *APIKeysClientCreateOrUpdateOptions) (APIKeysClientCreateOrUpdateResponse, error)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK for Go\nDESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure SDK for Go. It specifies the Azure ARM mode, required specifications, license header, module version, and API version tag.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/cf5ad1932d00c7d15497705ad6b71171d3d68b1e/specification/postgresqlhsc/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/cf5ad1932d00c7d15497705ad6b71171d3d68b1e/specification/postgresqlhsc/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.2.0-beta.1\ntag: package-preview-2023-03\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK Go Generation\nDESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure SDK for Go. It enables Azure ARM support, specifies the required API specifications from the Azure REST API specs repository, sets the license header, and defines the module version.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/azurearcdata/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/azurearcdata/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 0.7.0\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure Credentials\nDESCRIPTION: Creates default Azure credentials for authentication with Azure Synapse services using azidentity module.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Security Insight Client Factory\nDESCRIPTION: Initializes a new client factory for Azure Security Insight services with subscription ID and credentials.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armsecurityinsights.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest Settings for Azure SDK Generation\nDESCRIPTION: YAML configuration for AutoRest that specifies Azure ARM mode, required API specifications from GitHub, Microsoft MIT license header requirement, and module version 1.2.0. This configuration is used to generate Go SDK code from Azure REST API specifications.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/163e27c0ca7570bc39e00a46f255740d9b3ba3cb/specification/dnc/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/163e27c0ca7570bc39e00a46f255740d9b3ba3cb/specification/dnc/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.2.0\n```\n\n----------------------------------------\n\nTITLE: Documenting Other Changes in Markdown for Azure SDK Go Qumulo Module v1.0.0\nDESCRIPTION: Indicates the release of a stable version 1.0.0.\n\nLANGUAGE: markdown\nCODE:\n```\n### Other Changes\n\n- Release stable version.\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK for Go Generation\nDESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure SDK for Go. It specifies Azure ARM mode, required API specifications, license header, module version, and enables the templatespecs package.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/0cc5e2efd6ffccf30e80d1e150b488dd87198b94/specification/resources/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/0cc5e2efd6ffccf30e80d1e150b488dd87198b94/specification/resources/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.2.0\npackage-templatespecs: true\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Default Credentials\nDESCRIPTION: Creates a default Azure credential object for authentication with Azure services using the azidentity package.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Release Configuration Format in JSON\nDESCRIPTION: Defines the structure of the configuration file used to specify release requests. The JSON contains track1 and track2 requests organized by specification paths and includes target dates and request links.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"track1Requests\": {\n    \"specification/network/resource-manager/readme.md\": {\n      \"package-2020-12-01\": [\n        {\n          \"targetDate\": \"2021-02-11T00:00:00Z\",\n          \"requestLink\": \"https://github.com/Azure/sdk-release-request/issues/1212\"\n        }\n      ]\n    }\n  },\n  \"track2Requests\": {},\n  \"refresh\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Azure DevOps Pipelines Client in Go\nDESCRIPTION: Demonstrates how to create a specific client (in this case, for Pipelines) using the previously created client factory. This client can be used to interact with Azure DevOps Pipelines.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewPipelinesClient()\n```\n\n----------------------------------------\n\nTITLE: Creating Azure NetApp Files Client Factory in Go\nDESCRIPTION: This code creates a client factory for Azure NetApp Files. It requires a subscription ID and a credential object.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armnetapp.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Private 5G Core Module for Go\nDESCRIPTION: Installs the Azure Private 5G Core module using Go's package manager. This command fetches the latest version of the module and its dependencies.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/mobilenetwork/armmobilenetwork/v4\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Default Credentials\nDESCRIPTION: Creates a default Azure credential object for authentication with Azure services.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Updating AccessConnector in Go\nDESCRIPTION: Initiates an asynchronous operation to update an existing AccessConnector resource. Returns a Poller for tracking the operation progress.\n\nLANGUAGE: go\nCODE:\n```\n*AccessConnectorsClient.BeginUpdate(context.Context, string, string, AccessConnectorUpdate, *AccessConnectorsClientBeginUpdateOptions) (*runtime.Poller[AccessConnectorsClientUpdateResponse], error)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest Base Settings for Azure Container Registry\nDESCRIPTION: Primary AutoRest configuration that specifies the module settings, dependencies, and output configuration for the Container Registry SDK generation.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/53b1affe357b3bfbb53721d0a2002382a046d3b0/specification/containerregistry/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/53b1affe357b3bfbb53721d0a2002382a046d3b0/specification/containerregistry/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 0.1.0\nmodule-name: profile/p20200901/resourcemanager/containerregistry/armcontainerregistry\nmodule: github.com/Azure/azure-sdk-for-go/$(module-name)\noutput-folder: $(go-sdk-folder)/$(module-name)\ntag: package-2019-05-only\n```\n\n----------------------------------------\n\nTITLE: Using the new WorkloadNetworksClient.Get method in Go\nDESCRIPTION: Example of using the updated WorkloadNetworksClient.Get method with its new parameter signature in version 2.0.0.\n\nLANGUAGE: Go\nCODE:\n```\nresp, err := client.Get(ctx, resourceGroupName, privateCloudName, &armavs.WorkloadNetworksClientGetOptions{})\nif err != nil {\n    // handle error\n}\n// use resp\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Identity\nDESCRIPTION: Creates default Azure credentials for authentication with Azure services\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Stack HCI Client Factory\nDESCRIPTION: Initializes a client factory for Azure Stack HCI services using subscription ID and credentials.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armazurestackhci.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Adding New Functions in Go\nDESCRIPTION: Example of adding new functions to existing clients in Go\n\nLANGUAGE: Go\nCODE:\n```\nfunc (*ClientFactory) NewKubernetesClusterFeaturesClient() *KubernetesClusterFeaturesClient\n\nfunc (*ClustersClient) BeginContinueUpdateVersion(context.Context, string, string, ClusterContinueUpdateVersionParameters, *ClustersClientBeginContinueUpdateVersionOptions) (*runtime.Poller[ClustersClientContinueUpdateVersionResponse], error)\n\nfunc (*ClustersClient) BeginScanRuntime(context.Context, string, string, *ClustersClientBeginScanRuntimeOptions) (*runtime.Poller[ClustersClientScanRuntimeResponse], error)\n\nfunc NewKubernetesClusterFeaturesClient(string, azcore.TokenCredential, *arm.ClientOptions) (*KubernetesClusterFeaturesClient, error)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest Settings for Azure Lab Services SDK Generation\nDESCRIPTION: Defines the configuration parameters for AutoRest to generate Go SDK code for Azure Lab Services. Specifies the source API specifications, licensing, and module versioning requirements.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/4c2cdccf6ca3281dd50ed8788ce1de2e0d480973/specification/labservices/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/4c2cdccf6ca3281dd50ed8788ce1de2e0d480973/specification/labservices/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.2.0\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure using Default Azure Credential in Go\nDESCRIPTION: This snippet demonstrates how to create a default Azure credential for authentication. It uses the azidentity module to provide various authentication methods with Azure.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Cosmos for PostgreSQL Client Factory\nDESCRIPTION: Initializes a client factory for creating Azure Cosmos for PostgreSQL service clients using subscription ID and credentials.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armcosmosforpostgresql.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure HDInsight Containers Go Module\nDESCRIPTION: Command to install the Azure HDInsight Containers module using Go modules for dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/hdinsightcontainers/armhdinsightcontainers\n```\n\n----------------------------------------\n\nTITLE: Channel Interface Methods - Go\nDESCRIPTION: Interface methods for retrieving channel instances for different channel types including ACS Chat, M365 Extensions, Omnichannel, Outlook, Search Assistant and Telephony channels.\n\nLANGUAGE: go\nCODE:\n```\n*AcsChatChannel.GetChannel() *Channel\n*M365Extensions.GetChannel() *Channel\n*Omnichannel.GetChannel() *Channel\n*OutlookChannel.GetChannel() *Channel\n*SearchAssistant.GetChannel() *Channel\n*TelephonyChannel.GetChannel() *Channel\n```\n\n----------------------------------------\n\nTITLE: New Function Additions in Go SDK\nDESCRIPTION: New client factory and management functions added in version 1.0.0 for managing VM instances and related resources.\n\nLANGUAGE: go\nCODE:\n```\n// New client factory functions\nfunc NewVMInstanceGuestAgentsClient(azcore.TokenCredential, *arm.ClientOptions) (*VMInstanceGuestAgentsClient, error)\nfunc NewVMInstanceHybridIdentityMetadataClient(azcore.TokenCredential, *arm.ClientOptions) (*VMInstanceHybridIdentityMetadataClient, error)\nfunc NewVirtualMachineInstancesClient(azcore.TokenCredential, *arm.ClientOptions) (*VirtualMachineInstancesClient, error)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Advisor in Go\nDESCRIPTION: Creates a default Azure credential for authentication with Azure Advisor.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SQL VM Module with Go\nDESCRIPTION: Command to install the Azure SQL Server VM module using Go modules for dependency management\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/sqlvirtualmachine/armsqlvirtualmachine\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Managed Services Client Factory\nDESCRIPTION: Initializes a client factory for Azure Managed Services using subscription ID and credentials\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armmanagedservices.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK for Go Management Partner\nDESCRIPTION: This YAML configuration specifies the settings for AutoRest to generate the Azure SDK for Go. It requires the Azure REST API specifications for the Management Partner resource provider and sets specific options like azure-arm, license header, and module version.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/managementpartner/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/managementpartner/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 0.7.0\n```\n\n----------------------------------------\n\nTITLE: Release History Changelog Entry\nDESCRIPTION: Markdown changelog entry documenting the initial release of the azure-sdk-for-go trusted signing package, including version number and key changes.\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 0.1.0 (2024-09-29)\n### Other Changes\n\nThe package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/trustedsigning/armtrustedsigning` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html).\n\nTo learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).\n```\n\n----------------------------------------\n\nTITLE: Initializing APIKeysClient in Go\nDESCRIPTION: Creates a new APIKeysClient instance using the provided subscription ID, token credential, and optional client options.\n\nLANGUAGE: Go\nCODE:\n```\nNewAPIKeysClient(string, azcore.TokenCredential, *arm.ClientOptions) (*APIKeysClient, error)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Go SDK Generation\nDESCRIPTION: YAML configuration for generating the Azure App Configuration client using AutoRest. Specifies input files, output settings, and various options for the Go SDK generation process.\n\nLANGUAGE: yaml\nCODE:\n```\ngo: true\nversion: \"^3.0.0\"\ninput-file:\n- https://github.com/Azure/azure-rest-api-specs/blob/1d5799e57a1bbe66a86afc246d363d8163625b45/specification/appconfiguration/data-plane/Microsoft.AppConfiguration/stable/2023-10-01/appconfiguration.json\n- appconfiguration_ext.json\nlicense-header: MICROSOFT_MIT_NO_VERSION\nclear-output-folder: false\nfile-prefix: \"zz_\"\noutput-folder: generated\nopenapi-type: \"data-plane\"\nsecurity: \"AADToken\"\nuse: \"@autorest/go@4.0.0-preview.63\"\nslice-elements-byval: true\nmodelerfour:\n  lenient-model-deduplication: true\n```\n\n----------------------------------------\n\nTITLE: Installing Azure API Management Go SDK\nDESCRIPTION: Command to install the Azure API Management module using Go modules for dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/apimanagement/armapimanagement/v2\n```\n\n----------------------------------------\n\nTITLE: Creating Azure DevOps Client Factory in Go\nDESCRIPTION: Snippet showing how to create a client factory for Azure DevOps. The factory is used to create specific clients for different Azure DevOps operations.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armdevops.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Chaos Module with Go\nDESCRIPTION: Command to install the Azure Chaos module using Go's package manager.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/chaos/armchaos\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Virtual Desktop SDK Module\nDESCRIPTION: Command to install the Azure Virtual Desktop module using Go modules for dependency management\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/desktopvirtualization/armdesktopvirtualization/v2\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Blueprint Client for Sovereign Clouds in Go\nDESCRIPTION: Sets up client options for connecting to sovereign clouds or Azure Stack.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armblueprint.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Updating MongoDB Extension Parameter Types\nDESCRIPTION: Defines and updates the embedding dependency type for MongoDB chat extension parameters\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: swagger-document\n    where: $.definitions\n    transform: |\n      $[\"MongoDBChatExtensionParametersEmbeddingDependency\"] = {\n        \"x-ms-external\": true,\n        \"type\": \"object\", \"properties\": { \"stub\": { \"type\": \"string\" }}\n      };\n      return $;\n  - from: swagger-document\n    where: $.definitions.MongoDBChatExtensionParameters.properties.embedding_dependency\n    transform: $[\"$ref\"] = \"#/definitions/MongoDBChatExtensionParametersEmbeddingDependency\"; return $;\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Migrationassessment Module in Go\nDESCRIPTION: Command to install the Azure Migrationassessment module using Go's package manager.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/migrationassessment/armmigrationassessment\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Addons Module with Go\nDESCRIPTION: This command installs the Azure Addons module using Go's package manager. It requires Go modules for versioning and dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/addons/armaddons\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Serial Console Module with Go\nDESCRIPTION: Command to install the Azure Serial Console module using Go modules package manager.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/serialconsole/armserialconsole\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Data Share Client Factory in Go\nDESCRIPTION: This code creates a client factory for Azure Data Share. It requires a subscription ID and a credential. The factory can be used to create various clients for different Azure Data Share operations.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armdatashare.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK Go Generation\nDESCRIPTION: YAML configuration for AutoRest to generate Azure SDK for Go. It specifies Azure ARM mode, required specifications, license header, and module version. Note that versions 1.0.0 and 1.0.1 were retracted due to a mistake.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/630ec444f8dd7c09b9cdd5fa99951f8a0d1ad41f/specification/loadtestservice/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/630ec444f8dd7c09b9cdd5fa99951f8a0d1ad41f/specification/loadtestservice/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.2.0\n\n# v1.0.0 and v1.0.1 has been retracted because of mistake. When this RP goes GA, it starts at version v1.0.2\n```\n\n----------------------------------------\n\nTITLE: Installing Azure App Service Module in Go\nDESCRIPTION: Command to install the Azure App Service module using Go modules. This installs version 4 of the module.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/appservice/armappservice/v4\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Notification Hubs Client Factory\nDESCRIPTION: Initialize a client factory for Azure Notification Hubs. This code shows how to create a client factory using the subscription ID and credentials.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armnotificationhubs.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Fixing Pager Implementation in Go Client\nDESCRIPTION: YAML directives to modify the pager implementation in the generated Go client. It sets the operationName for x-ms-pageable and adjusts the URL path handling in the client code.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.paths.*.get.x-ms-pageable\n  transform: >\n    $.operationName = \"GetNextPage\";\n- from: zz_azureappconfiguration_client.go\n  where: $\n  transform: >\n    return $.\n      replace(/urlPath\\s+:=\\s+\"\\/\\{nextLink\\}\"/, \"urlPath := nextLink\").\n      replace(/\\s+urlPath\\s+=\\s+strings\\.ReplaceAll\\(urlPath, \"\\{nextLink\\}\", nextLink\\)/, \"\");\n```\n\n----------------------------------------\n\nTITLE: Markdown Release Notes for Azure Connected Cache SDK v0.1.0\nDESCRIPTION: Release history entry documenting the initial release of the Connected Cache SDK package which implements Azure SDK's next generation design principles.\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 0.1.0 (2024-11-20)\n### Other Changes\n\nThe package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/connectedcache/armconnectedcache` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html).\n\nTo learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).\n```\n\n----------------------------------------\n\nTITLE: Release History Entry in Markdown\nDESCRIPTION: Documents the initial 0.1.0 release of the Pinecone Vector DB package, noting its implementation of next generation design principles.\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 0.1.0 (2025-02-06)\n### Other Changes\n\nThe package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/pineconevectordb/armpineconevectordb` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html).\n\nTo learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).\n```\n\n----------------------------------------\n\nTITLE: Installing Azure AgriFood Module\nDESCRIPTION: Command to install the Azure AgriFood module using Go modules package manager.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/agrifood/armagrifood\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Billingbenefits SDK with Go\nDESCRIPTION: Command to install the Azure Billingbenefits module using Go modules package management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/billingbenefits/armbillingbenefits/v2\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK Go Generation\nDESCRIPTION: This YAML configuration sets up AutoRest for generating Azure SDK for Go. It specifies the Azure ARM mode, required API specifications, license header, module details, and output folder.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/53b1affe357b3bfbb53721d0a2002382a046d3b0/specification/resources/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/53b1affe357b3bfbb53721d0a2002382a046d3b0/specification/resources/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 0.1.0\nmodule-name: profile/p20200901/resourcemanager/resources/armresources\nmodule: github.com/Azure/azure-sdk-for-go/$(module-name)\noutput-folder: $(go-sdk-folder)/$(module-name)\ntag: package-resources-2019-10\n```\n\n----------------------------------------\n\nTITLE: Breaking Changes in Go Azure Oracle Database SDK\nDESCRIPTION: Type modifications and struct removals in version 0.2.0. Changes affect CloudExadataInfrastructure, CloudVMCluster, OracleSubscription properties and several struct definitions.\n\nLANGUAGE: go\nCODE:\n```\nCloudExadataInfrastructureProperties.DataStorageSizeInTbs *float64\nCloudVMClusterProperties.NsgCidrs []*NsgCidr\nOracleSubscriptionUpdate.Plan *PlanUpdate\n```\n\n----------------------------------------\n\nTITLE: Creating Azure SaaS Client\nDESCRIPTION: Creates a new client instance from the client factory for accessing Azure SaaS APIs.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewClient()\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure using DefaultAzureCredential in Go\nDESCRIPTION: Creates a default Azure credential for authentication with Azure services.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Creating External Networks Client\nDESCRIPTION: Creates a specific client instance for working with external networks using the client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewExternalNetworksClient()\n```\n\n----------------------------------------\n\nTITLE: Creating AKS Assessment Operations Client in Go\nDESCRIPTION: Initializes a new AKS Assessment Operations client using the previously created client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewAksAssessmentOperationsClient()\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SignalR Go SDK\nDESCRIPTION: Command to install the Azure SignalR module using Go modules package management\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/signalr/armsignalr\n```\n\n----------------------------------------\n\nTITLE: Breaking Changes in Go SDK - Type Changes\nDESCRIPTION: Type changes introduced in version 1.0.0 affecting provisioning state properties across multiple structs.\n\nLANGUAGE: go\nCODE:\n```\n// Type changes from *string to *ProvisioningState\nClusterInventoryItem.ProvisioningState\nClusterProperties.ProvisioningState\nDatastoreInventoryItem.ProvisioningState\n// ... additional type changes\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure using Default Azure Credential in Go\nDESCRIPTION: This code snippet demonstrates how to create a default Azure credential for authentication. It uses the azidentity module to handle various authentication methods.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Client Options\nDESCRIPTION: Sets up client options for connecting to different Azure clouds including sovereign clouds and Azure Stack\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armrelay.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Creating Secret using Legacy KeyVault Module in Go\nDESCRIPTION: Example showing how to create a secret using the deprecated keyvault module. Uses keyvault.BaseClient with an Authorizer for authentication and requires vault URL for each method call.\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/Azure/azure-sdk-for-go/profiles/latest/keyvault/keyvault\"\n\tkvauth \"github.com/Azure/azure-sdk-for-go/services/keyvault/auth\"\n)\n\nfunc main() {\n    vaultURL := \"https://<TODO: your vault name>.vault.azure.net\"\n    secretName := \"mySecret\"\n\tsecretValue := \"mySecretValue\"\n\n    authorizer, err := kvauth.NewAuthorizerFromEnvironment()\n\tif err != nil {\n\t\t// TODO: handle error\n\t}\n\n\tbasicClient := keyvault.New()\n\tbasicClient.Authorizer = authorizer\n\n\tfmt.Println(\"\\ncreating secret in keyvault:\")\n\tvar secParams keyvault.SecretSetParameters\n\tsecParams.Value = &secretValue\n\tnewBundle, err := basicClient.SetSecret(context.Background(), vaultURL, secretName, secParams)\n\tif err != nil {\n\t\t// TODO: handle error\n\t}\n\tfmt.Println(\"added/updated: \" + *newBundle.ID)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Bare Metal Infrastructure Module in Go\nDESCRIPTION: This command installs the Azure Bare Metal Infrastructure module using Go's package manager.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/baremetalinfrastructure/armbaremetalinfrastructure/v2\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Compute Schedule SDK Generation\nDESCRIPTION: Defines the AutoRest configuration for generating Go SDK code from Azure Compute Schedule REST API specifications. Specifies the API version, licensing, and required specification files.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/8a4eca6b060cf70da696963245656fdc440b666b/specification/computeschedule/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/8a4eca6b060cf70da696963245656fdc440b666b/specification/computeschedule/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.0.0\ntag: package-2024-10-01\n```\n\n----------------------------------------\n\nTITLE: Updating CORS Acronym in Go Source Files\nDESCRIPTION: YAML directive to change the 'Cors' acronym to be all caps 'CORS' in Go source files.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: source-file-go\n    where: $\n    transform: >\n      return $.\n        replace(/Cors/g, \"CORS\");\n```\n\n----------------------------------------\n\nTITLE: Authentication Setup with Azure Identity\nDESCRIPTION: Creates a default Azure credential for authenticating with Azure SaaS services.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Logz Client Factory\nDESCRIPTION: Initializes a client factory for Azure Logz services using subscription ID and credentials.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armlogz.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Storage Sync Go SDK\nDESCRIPTION: YAML configuration for AutoRest to generate the Azure Storage Sync Go SDK. Specifies Azure ARM mode, references the Azure REST API specs, sets Microsoft MIT license header, and defines module version 1.2.0.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/storagesync/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/storagesync/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.2.0\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest Parameters for Azure IoT Hub SDK Generation\nDESCRIPTION: YAML configuration for AutoRest tool that defines the parameters for generating the Azure IoT Hub SDK. It specifies the ARM mode, required specification files, license header type, module version, and API version tag.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/32c178f2467f792a322f56174be244135d2c907f/specification/iothub/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/32c178f2467f792a322f56174be244135d2c907f/specification/iothub/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.3.0\ntag: package-2023-06\n```\n\n----------------------------------------\n\nTITLE: Adding Test Fakes and OpenTelemetry Support in Go for Azure Private DNS\nDESCRIPTION: Adds support for test fakes and OpenTelemetry trace spans to enhance testing and observability capabilities.\n\nLANGUAGE: markdown\nCODE:\n```\n### Features Added\n\n- Support for test fakes and OpenTelemetry trace spans.\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Servicefabricmanagedclusters Module in Go\nDESCRIPTION: Uses go get to install the Azure Servicefabricmanagedclusters module from the Azure SDK for Go.\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/servicefabricmanagedclusters/armservicefabricmanagedclusters\n```\n\n----------------------------------------\n\nTITLE: Creating Event Hubs Client Factory in Go\nDESCRIPTION: This code creates a client factory for Azure Event Hubs, which can be used to create specific clients for different operations.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armeventhub.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest Generation for Azure SQL VM SDK\nDESCRIPTION: YAML configuration that defines parameters for generating the Azure SQL Virtual Machine SDK. References specific versions of REST API specs, sets ARM mode, licensing, module version and API version tag.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/e79a5aa63c0551c1b5af1d2853cceb495283d334/specification/sqlvirtualmachine/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/e79a5aa63c0551c1b5af1d2853cceb495283d334/specification/sqlvirtualmachine/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 0.10.0\ntag: package-preview-2022-08\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Apicenter Client Factory\nDESCRIPTION: Initializes a client factory for creating Azure Apicenter service clients using subscription ID and credentials\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armapicenter.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest Parameters for Azure IoT Hub SDK Generation\nDESCRIPTION: YAML configuration for AutoRest tool that defines the parameters for generating the Azure IoT Hub SDK. It specifies the ARM mode, required specification files, license header type, module version, and API version tag.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/32c178f2467f792a322f56174be244135d2c907f/specification/iothub/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/32c178f2467f792a322f56174be244135d2c907f/specification/iothub/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.3.0\ntag: package-2023-06\n```\n\n----------------------------------------\n\nTITLE: Model Transformations and API Customizations\nDESCRIPTION: Collection of directives for customizing generated models, adding properties, and modifying API behaviors.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.definitions\n  transform: >\n    $.BlobPrefix.properties[\"Properties\"] = {\n      \"type\": \"object\",\n      \"$ref\": \"#/definitions/BlobPropertiesInternal\"\n    };\n```\n\n----------------------------------------\n\nTITLE: Creating Power BI Embedded Client Factory\nDESCRIPTION: Initializes a client factory for creating Power BI Embedded service clients\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armpowerbiembedded.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Domain Services Module in Go\nDESCRIPTION: Use go get command to install the Azure Domain Services module from the Azure SDK for Go.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/domainservices/armdomainservices\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure StorSimple SDK Generation\nDESCRIPTION: YAML configuration that defines parameters for AutoRest code generation. Specifies Azure ARM mode, required API specifications from Azure REST API repo, licensing header, and module version 1.2.0.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/163e27c0ca7570bc39e00a46f255740d9b3ba3cb/specification/storsimple8000series/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/163e27c0ca7570bc39e00a46f255740d9b3ba3cb/specification/storsimple8000series/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.2.0\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure using Default Credentials in Go\nDESCRIPTION: This code snippet demonstrates how to create a default Azure credential object for authentication. It uses the azidentity package to create a DefaultAzureCredential instance.\n\nLANGUAGE: Go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Redis Enterprise Module\nDESCRIPTION: Command to install the Azure Redis Enterprise Go module using go get\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/redisenterprise/armredisenterprise/v2\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Locations Client\nDESCRIPTION: Creates a client instance for accessing Custom Locations API functionality using the client factory\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewCustomLocationsClient()\n```\n\n----------------------------------------\n\nTITLE: Markdown Release History Documentation\nDESCRIPTION: Structured changelog entries documenting version updates, new features, and bug fixes for the Azure SDK for Go package from version 1.0.0 to 1.2.0.\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.2.0 (2023-11-24)\n### Features Added\n\n- Support for test fakes and OpenTelemetry trace spans.\n\n\n## 1.1.1 (2023-04-14)\n### Bug Fixes\n\n- Fix serialization bug of empty value of `any` type.\n\n\n## 1.1.0 (2023-03-27)\n### Features Added\n\n- New struct `ClientFactory` which is a client factory used to create any client in this module\n\n## 1.0.0 (2022-05-16)\n\nThe package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armtemplatespecs` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html) since version 1.0.0, which contains breaking changes.\n\nTo migrate the existing applications to the latest version, please refer to [Migration Guide](https://aka.ms/azsdk/go/mgmt/migration).\n\nTo learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Deviceregistry Module for Go\nDESCRIPTION: This command installs the Azure Deviceregistry module using Go's package manager. It requires Go modules for versioning and dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/deviceregistry/armdeviceregistry\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Default Credential in Go\nDESCRIPTION: This snippet demonstrates how to create a default Azure credential using the azidentity package. This credential can be used for authenticating with Azure services.\n\nLANGUAGE: Go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Creating New ClientFactory Method in Go\nDESCRIPTION: This code introduces a new method in the ClientFactory struct to create a DeletedWorkbooksClient. It's part of the Azure SDK for Go, allowing management of deleted workbooks in Application Insights.\n\nLANGUAGE: go\nCODE:\n```\n*ClientFactory.NewDeletedWorkbooksClient() *DeletedWorkbooksClient\n```\n\n----------------------------------------\n\nTITLE: Cleaning up Const Type Names\nDESCRIPTION: YAML directive to rename the PathExpiryOptions enum to ExpiryOptions to avoid stuttering.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.parameters['PathExpiryOptions']\n  transform: >\n    $[\"x-ms-enum\"].name = \"ExpiryOptions\";\n    $[\"x-ms-client-name\"].name = \"ExpiryOptions\";\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Credentials\nDESCRIPTION: Creates default Azure credentials for authentication with Azure services\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Marketplace Ordering Module in Go\nDESCRIPTION: Command to install the Azure Marketplace Ordering module using Go modules.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/marketplaceordering/armmarketplaceordering\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure WebPubSub Go SDK Generation\nDESCRIPTION: YAML configuration that defines the parameters for generating the Azure WebPubSub SDK for Go using AutoRest. Specifies the API spec version, module version 1.3.0, and required GitHub specifications.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/7189fb57f69468c56df76f9a4d68dd9ff04ab100/specification/webpubsub/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/7189fb57f69468c56df76f9a4d68dd9ff04ab100/specification/webpubsub/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.3.0\ntag: package-2024-03-01\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK Go Generation\nDESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure SDK for Go. It specifies the Azure ARM mode, required API specifications, license header, module version, and API version tag.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/cf5ad1932d00c7d15497705ad6b71171d3d68b1e/specification/communication/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/cf5ad1932d00c7d15497705ad6b71171d3d68b1e/specification/communication/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 2.2.0\ntag: package-2023-04\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Sphere Module in Go\nDESCRIPTION: This command installs the Azure Sphere module using Go's package manager. It requires Go modules for versioning and dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/sphere/armsphere\n```\n\n----------------------------------------\n\nTITLE: Creating a Snapshot Client for Azure Appcomplianceautomation in Go\nDESCRIPTION: This code demonstrates how to create a specific client (Snapshot Client) using the previously created client factory.\n\nLANGUAGE: Go\nCODE:\n```\nclient := clientFactory.NewSnapshotClient()\n```\n\n----------------------------------------\n\nTITLE: Updating Module References in Client Constructor\nDESCRIPTION: AutoRest directive to update moduleName and moduleVersion references to use internal package constants in client files.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from:\n      - \"*_client.go\"\n      - \"client.go\"\n      - \"client_factory.go\"\n    where: $\n    transform: return $.replace(/moduleVersion/, \"internal.ModuleVersion\").replace(/moduleName+\"/, \"internal.ModuleName+\\\"/armstorage\");\n```\n\n----------------------------------------\n\nTITLE: Updating Module References in Client Constructor\nDESCRIPTION: AutoRest directive to update moduleName and moduleVersion references to use internal package constants in client files.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from:\n      - \"*_client.go\"\n      - \"client.go\"\n      - \"client_factory.go\"\n    where: $\n    transform: return $.replace(/moduleVersion/, \"internal.ModuleVersion\").replace(/moduleName+\"/, \"internal.ModuleName+\\\"/armstorage\");\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure using Default Credentials in Go\nDESCRIPTION: This snippet demonstrates how to create a default Azure credential using the azidentity package. It's used for authenticating with Azure services.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Kubernetes Fleet Module in Go\nDESCRIPTION: This command installs the Azure Kubernetes Fleet module using Go's package manager. It requires Go modules for versioning and dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/containerservicefleet/armcontainerservicefleet\n```\n\n----------------------------------------\n\nTITLE: Creating a Support Ticket in Go\nDESCRIPTION: Begins the creation of a new support ticket using the TicketsNoSubscriptionClient, specifying the ticket name, details, and optional creation options.\n\nLANGUAGE: go\nCODE:\n```\n*TicketsNoSubscriptionClient.BeginCreate(context.Context, string, TicketDetails, *TicketsNoSubscriptionClientBeginCreateOptions) (*runtime.Poller[TicketsNoSubscriptionClientCreateResponse], error)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Storage Module in Go\nDESCRIPTION: This command installs the Azure Storage module using Go modules for versioning and dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/storage/armstorage\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure using DefaultAzureCredential in Go\nDESCRIPTION: This code demonstrates how to create a default Azure credential for authentication. It uses the NewDefaultAzureCredential function from the azidentity package to create a credential object that can be used for authenticating with Azure services.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Relay Namespaces Client\nDESCRIPTION: Creates a new namespaces client instance using the client factory\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewNamespacesClient()\n```\n\n----------------------------------------\n\nTITLE: Adding New OpenAIClient Functions in Go\nDESCRIPTION: New functions added for OpenAIClient including creation, update, deletion, retrieval, and listing operations.\n\nLANGUAGE: Go\nCODE:\n```\nNewOpenAIClient(string, azcore.TokenCredential, *arm.ClientOptions) (*OpenAIClient, error)\n*OpenAIClient.CreateOrUpdate(context.Context, string, string, string, *OpenAIClientCreateOrUpdateOptions) (OpenAIClientCreateOrUpdateResponse, error)\n*OpenAIClient.Delete(context.Context, string, string, string, *OpenAIClientDeleteOptions) (OpenAIClientDeleteResponse, error)\n*OpenAIClient.Get(context.Context, string, string, string, *OpenAIClientGetOptions) (OpenAIClientGetResponse, error)\n*OpenAIClient.GetStatus(context.Context, string, string, string, *OpenAIClientGetStatusOptions) (OpenAIClientGetStatusResponse, error)\n*OpenAIClient.NewListPager(string, string, *OpenAIClientListOptions) *runtime.Pager[OpenAIClientListResponse]\n*ClientFactory.NewOpenAIClient() *OpenAIClient\n```\n\n----------------------------------------\n\nTITLE: Version 1.0.0 Release Notes\nDESCRIPTION: Documents features added in version 1.0.0, released on February 10, 2025. Introduces new ResourceID field to OperationStatusResult struct.\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.0 (2025-02-10)\n### Features Added\n\n- New field `ResourceID` in struct `OperationStatusResult`\n```\n\n----------------------------------------\n\nTITLE: Creating Azure SAP HANA SapMonitors Client in Go\nDESCRIPTION: Example of creating a specific client (SapMonitorsClient) from the client factory. This client can be used to interact with SAP HANA monitors on Azure.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewSapMonitorsClient()\n```\n\n----------------------------------------\n\nTITLE: Adding Internal Package Import Directive\nDESCRIPTION: AutoRest directive to add internal package import to client-related Go files.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from:\n      - \"*_client.go\"\n      - \"client.go\"\n      - \"client_factory.go\"\n    where: $\n    transform: return $.replace(/import \\(\\n/, \"import (\\n\\\"github.com/Azure/azure-sdk-for-go/profile/p20200901/internal\\\"\\n\");\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Migration Discovery Go Module\nDESCRIPTION: Command to install the Azure Migration Discovery module using Go modules package management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/migrationdiscovery/armmigrationdiscoverysap\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Springappdiscovery Module in Go\nDESCRIPTION: This command installs the Azure Springappdiscovery module using Go's package manager. It requires Go modules for versioning and dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/springappdiscovery/armspringappdiscovery\n```\n\n----------------------------------------\n\nTITLE: Release History Documentation in Markdown\nDESCRIPTION: Markdown formatted changelog documenting version changes from 1.0.0 to 1.2.0, including feature additions, bug fixes, and breaking changes.\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.2.0 (2023-11-24)\n### Features Added\n\n- Support for test fakes and OpenTelemetry trace spans.\n\n\n## 1.1.1 (2023-04-14)\n### Bug Fixes\n\n- Fix serialization bug of empty value of `any` type.\n\n\n## 1.1.0 (2023-03-28)\n### Features Added\n\n- New struct `ClientFactory` which is a client factory used to create any client in this module\n\n\n## 1.0.0 (2022-05-18)\n\nThe package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/edgeorder/armedgeorder` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html) since version 1.0.0, which contains breaking changes.\n\nTo migrate the existing applications to the latest version, please refer to [Migration Guide](https://aka.ms/azsdk/go/mgmt/migration).\n\nTo learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK Go Generation\nDESCRIPTION: This YAML configuration sets up AutoRest for generating the Azure SDK for Go. It specifies the Azure ARM mode, required API specifications from GitHub, license header, module version, and the API version tag to use.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/41e4538ed7bb3ceac3c1322c9455a0812ed110ac/specification/offazurespringboot/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/41e4538ed7bb3ceac3c1322c9455a0812ed110ac/specification/offazurespringboot/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 0.1.0\ntag: package-2023-01-01-preview\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Data SDK Generation\nDESCRIPTION: YAML configuration for AutoRest code generator that specifies Azure ARM mode, required API specifications from Azure REST API specs repository, Microsoft MIT license header requirement, and module version 0.7.0.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/azuredata/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/azuredata/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 0.7.0\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Engagement Fabric Module for Go\nDESCRIPTION: This snippet shows how to install the Azure Engagement Fabric module using Go's package manager. It requires Go modules for versioning and dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/engagementfabric/armengagementfabric\n```\n\n----------------------------------------\n\nTITLE: Updating Module References in Client Constructor\nDESCRIPTION: AutoRest directive to update module name and version references in client constructor files to use internal package constants.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from:\n      - \"*_client.go\"\n      - \"client.go\"\n      - \"client_factory.go\"\n    where: $\n    transform: return $.replace(/moduleVersion/, \"internal.ModuleVersion\").replace(/moduleName+\"/, \"internal.ModuleName+\\\"/armsubscriptions\");\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Visual Studio Module in Go\nDESCRIPTION: This snippet demonstrates how to install the Azure Visual Studio module using Go's package manager. It uses the go get command to fetch and install the module from the specified GitHub repository.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/visualstudio/armvisualstudio\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Subscriptions Module with Go\nDESCRIPTION: Command to install the Azure Subscriptions module using Go modules for dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armsubscriptions\n```\n\n----------------------------------------\n\nTITLE: Transforming Go SDK Code with Directives\nDESCRIPTION: Custom directives for transforming generated Go code. It renames specific functions and removes conditional checks for empty row keys.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: zz_table_client.go\n    where: $\n    transform: >\n      return $.\n        replace(/\\(client \\*TableClient\\) deleteEntityCreateRequest\\(/, `(client *TableClient) DeleteEntityCreateRequest(`).\n        replace(/\\(client \\*TableClient\\) insertEntityCreateRequest\\(/, `(client *TableClient) InsertEntityCreateRequest(`).\n        replace(/\\(client \\*TableClient\\) mergeEntityCreateRequest\\(/, `(client *TableClient) MergeEntityCreateRequest(`).\n        replace(/\\(client \\*TableClient\\) updateEntityCreateRequest\\(/, `(client *TableClient) UpdateEntityCreateRequest(`).\n        replace(/= client\\.deleteEntityCreateRequest\\(/, `= client.DeleteEntityCreateRequest(`).\n        replace(/= client\\.insertEntityCreateRequest\\(/, `= client.InsertEntityCreateRequest(`).\n        replace(/= client\\.mergeEntityCreateRequest\\(/, `= client.MergeEntityCreateRequest(`).\n        replace(/= client\\.updateEntityCreateRequest\\(/, `= client.UpdateEntityCreateRequest(`).\n        replace(/if rowKey == \"\" \\{\\s*.*\\s*\\}\\s*/g, ``);\n  - from:\n      - zz_time_rfc1123.go\n      - zz_time_rfc3339.go\n    where: $\n    transform: return $.replace(/UnmarshalText\\(data\\s+\\[\\]byte\\)\\s+(?:error|\\(error\\))\\s+\\{\\s/g, `UnmarshalText(data []byte) error {\\n\\tif len(data) == 0 {\\n\\t\\treturn nil\\n\\t}\\n`);\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Education using DefaultAzureCredential in Go\nDESCRIPTION: This code snippet shows how to create a default Azure credential for authentication with Azure Education services. It uses the azidentity package.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: New ImportJobs Client Creation - Go\nDESCRIPTION: Creates a new ImportJobs client instance with the provided subscription ID, token credentials and optional client options.\n\nLANGUAGE: go\nCODE:\n```\nNewImportJobsClient(string, azcore.TokenCredential, *arm.ClientOptions) (*ImportJobsClient, error)\n```\n\n----------------------------------------\n\nTITLE: Creating Storage Task Assignment Client - Go\nDESCRIPTION: Creates a specific client instance for working with Storage Task assignments using the client factory\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewStorageTaskAssignmentClient()\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK Generation in YAML\nDESCRIPTION: This YAML configuration specifies the settings for AutoRest to generate the Azure SDK for Go. It sets the Azure ARM flag, requires specific API specifications, sets the license header, and specifies the module version.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/changeanalysis/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/changeanalysis/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.2.0\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Dev Center Module in Go\nDESCRIPTION: This snippet demonstrates how to install the Azure Dev Center module using Go's package manager. It requires Go modules for versioning and dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/devcenter/armdevcenter/v2\n```\n\n----------------------------------------\n\nTITLE: Installing Profile Builder with Go Get\nDESCRIPTION: Simple installation command for the Profile Builder tool using go get\n\nLANGUAGE: bash\nCODE:\n```\ngo get -u github.com/Azure/azure-sdk-for-go/eng/tools/profileBuilder\n```\n\n----------------------------------------\n\nTITLE: Creating VM Image Builder Client Factory\nDESCRIPTION: Initializes a new client factory for Azure Virtual Machine Image Builder services using subscription ID and credentials\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armvirtualmachineimagebuilder.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure App Configuration Module in Go\nDESCRIPTION: This command installs the Azure App Configuration module using Go's package manager. It retrieves the specified version of the module from the Azure SDK for Go repository.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/appconfiguration/armappconfiguration/v2\n```\n\n----------------------------------------\n\nTITLE: Transforming OpenAPI Models for Azure Services\nDESCRIPTION: Filters and transforms OpenAPI definitions to keep only Azure OpenAI On Your Data models and related enhancements. Includes cleanup of error handling structures.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: swagger-document\n    where: $[\"x-ms-paths\"]\n    transform: |\n      return {};\n  - from: swagger-document\n    where: $\n    transform: |\n      const newDefs = {};\n      const newPaths = {};\n      const keep = {};\n      const oydModelRegex = /^(OnYour|Azure|Pinecone|ContentFilter|Mongo|Elasticsearch).+$/;\n      for (const key in $.definitions) {\n        if (!(key in keep) && !key.match(oydModelRegex)) {\n          continue\n        }\n        $lib.log(`Including ${key}`);\n        newDefs[key] = $.definitions[key];\n      }\n      $.definitions = newDefs;\n      $.paths = {};\n      $.parameters = {};\n      return $;\n  - from: swagger-document\n    debug: true\n    where: $.definitions\n    transform: |\n      $[\"Azure.Core.Foundations.Error\"][\"x-ms-client-name\"] = \"Error\";\n      delete $[\"Azure.Core.Foundations.Error\"].properties[\"innererror\"];\n      delete $[\"Azure.Core.Foundations.Error\"].properties[\"details\"];\n      delete $[\"Azure.Core.Foundations.Error\"].properties[\"target\"];\n      $[\"Azure.Core.Foundations.InnerError\"][\"x-ms-external\"] = true;\n      $[\"Azure.Core.Foundations.ErrorResponse\"][\"x-ms-external\"] = true;\n      return $;\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Springappdiscovery Client Factory in Go\nDESCRIPTION: This code creates a client factory for Azure Springappdiscovery. It requires a subscription ID and credentials. The factory can be used to create various clients within the module.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armspringappdiscovery.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Creating a Key using keyvault Module in Go\nDESCRIPTION: This snippet demonstrates how to create a key in Azure Key Vault using the deprecated 'keyvault' module. It shows the process of setting up authentication, creating a client, and calling the CreateKey method.\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/Azure/azure-sdk-for-go/profiles/latest/keyvault/keyvault\"\n\tkvauth \"github.com/Azure/azure-sdk-for-go/services/keyvault/auth\"\n)\n\nfunc main() {\n    vaultURL := \"https://<TODO: your vault name>.vault.azure.net\"\n    authorizer, err := kvauth.NewAuthorizerFromEnvironment()\n\tif err != nil {\n\t\t// TODO: handle error\n\t}\n\n\tbasicClient := keyvault.New()\n\tbasicClient.Authorizer = authorizer\n\n\tfmt.Println(\"\\ncreating a key in keyvault:\")\n    keyParams := keyvault.KeyCreateParameters{\n        Curve: &keyvault.P256,\n        Kty:   &keyvault.EC,\n    }\n\tnewBundle, err := basicClient.CreateKey(context.TODO(), vaultURL, \"<key name>\", keyParams)\n\tif err != nil {\n\t\t// TODO: handle error\n\t}\n\tfmt.Println(\"added/updated: \" + *newBundle.JSONWebKey.Kid)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Template Specs Client Factory\nDESCRIPTION: Initializes a new client factory for Azure Template Specs with basic configuration\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armtemplatespecs.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure DataBox SDK Generation in Go\nDESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure DataBox SDK for Go. It specifies Azure ARM mode, required API specifications, license header, module version, and API version tag.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/17aa6a1314de5aafef059d9aa2229901df506e75/specification/databox/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/17aa6a1314de5aafef059d9aa2229901df506e75/specification/databox/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 2.1.0\ntag: package-2022-12\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Traffic Manager HeatMap Client in Go\nDESCRIPTION: This snippet shows how to create a HeatMap client using the Azure Traffic Manager client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewHeatMapClient()\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Recovery Services Site Recovery Module in Go\nDESCRIPTION: Command to install the Azure Recovery Services Site Recovery module using Go modules.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/recoveryservices/armrecoveryservicessiterecovery/v2\n```\n\n----------------------------------------\n\nTITLE: Specifying TypeSpec Revision for Code Generation in YAML\nDESCRIPTION: This YAML configuration specifies the repository, directory, and commit for generating the client code using TypeSpec.\n\nLANGUAGE: yaml\nCODE:\n```\n# ie: https://github.com/Azure/azure-rest-api-specs/tree/1e243e2b0d0d006599dcb64f82fd92aecc1247be/specification/cognitiveservices/OpenAI.Inference\ndirectory: specification/cognitiveservices/OpenAI.Inference\ncommit: 1e243e2b0d0d006599dcb64f82fd92aecc1247be\nrepo: Azure/azure-rest-api-specs\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest YAML Settings for Azure PowerPlatform SDK Generation\nDESCRIPTION: Defines AutoRest configuration parameters including Azure ARM mode, required API specifications, license header type, and module version for generating the PowerPlatform SDK.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/163e27c0ca7570bc39e00a46f255740d9b3ba3cb/specification/powerplatform/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/163e27c0ca7570bc39e00a46f255740d9b3ba3cb/specification/powerplatform/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 0.3.0\n```\n\n----------------------------------------\n\nTITLE: Release History Entry in Markdown\nDESCRIPTION: Changelog entry format showing version numbers, release dates, and categorized changes including features, breaking changes, bugs, and other modifications.\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 0.1.1 (Unreleased)\n\n### Features Added\n\n### Breaking Changes\n\n### Bugs Fixed\n\n### Other Changes\n\n## 0.1.0 (2024-02-27)\n\n### Features Added\n\n- Initial preview for the Web PubSub Service\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure Test Base Email Events Client in Go\nDESCRIPTION: This snippet shows how to create a specific client for Email Events using the previously created client factory. This client provides access to email event-related APIs in Azure Test Base.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewEmailEventsClient()\n```\n\n----------------------------------------\n\nTITLE: Go New Function Declarations for NewRelic Observability\nDESCRIPTION: New client initialization and operation functions added in version 1.2.0 for managing NewRelic monitoring resources and billing information.\n\nLANGUAGE: go\nCODE:\n```\nfunc NewBillingInfoClient(string, azcore.TokenCredential, *arm.ClientOptions) (*BillingInfoClient, error)\nfunc NewConnectedPartnerResourcesClient(string, azcore.TokenCredential, *arm.ClientOptions) (*ConnectedPartnerResourcesClient, error)\nfunc NewMonitoredSubscriptionsClient(string, azcore.TokenCredential, *arm.ClientOptions) (*MonitoredSubscriptionsClient, error)\n```\n\n----------------------------------------\n\nTITLE: Creating Client Factory\nDESCRIPTION: Instantiates a client factory for Azure Data Boundary services using subscription ID and credentials\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armdataboundaries.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Update Test Resources - Default Parameter Set\nDESCRIPTION: PowerShell command syntax for updating test resources using service directory path. Allows specifying the service directory, base name, subscription ID and deletion time.\n\nLANGUAGE: powershell\nCODE:\n```\nUpdate-TestResources.ps1 [-ServiceDirectory] <String> [-BaseName <String>] [-SubscriptionId <String>]\n [-DeleteAfterHours <Int32>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Client Factory Creation\nDESCRIPTION: Example of creating and using the new ClientFactory to instantiate service clients\n\nLANGUAGE: go\nCODE:\n```\nfactory := armpostgresqlflexibleservers.NewClientFactory(\"subscriptionID\", cred, nil)\n\nflexClient := factory.NewFlexibleServerClient()\nlogClient := factory.NewLogFilesClient()\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure Credentials\nDESCRIPTION: Creates default Azure credentials for authentication using the azidentity package.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Dynatrace Monitors Client in Go\nDESCRIPTION: This code demonstrates how to create a specific client for Dynatrace monitors using the client factory. The NewMonitorsClient method returns a client object that can be used to perform operations related to Dynatrace monitors.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewMonitorsClient()\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Using Default Credentials in Go\nDESCRIPTION: Code snippet demonstrating how to create default Azure credentials for authentication. This is a common method to authenticate with Azure services.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Apicenter Module\nDESCRIPTION: Command to install the Azure Apicenter module using Go modules package manager\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/apicenter/armapicenter\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Fluidrelay Go Module\nDESCRIPTION: Command to install the Azure Fluidrelay module using Go modules package management system.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/fluidrelay/armfluidrelay\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Client Options for Different Clouds in Go\nDESCRIPTION: This snippet shows how to configure client options to connect to different Azure clouds, including sovereign clouds and Azure Stack.\n\nLANGUAGE: Go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armappcomplianceautomation.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Initializing Neon Postgres Client Factory\nDESCRIPTION: Creates a new client factory for Azure Neon Postgres with basic configuration.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armneonpostgres.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Agent Pools Client\nDESCRIPTION: Creates a client instance for managing Agent Pools using the client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewAgentPoolsClient()\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Data Catalog using Default Credentials in Go\nDESCRIPTION: This code snippet demonstrates how to create default Azure credentials for authentication. It uses the azidentity module to provide various authentication methods.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Options for Different Clouds\nDESCRIPTION: Sets up client options for connecting to different Azure clouds including sovereign clouds and Azure Stack.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armavs.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Importing the IscsiPathsClient in Go\nDESCRIPTION: Example of importing and initializing the new IscsiPathsClient added in version 2.0.0-beta.1.\n\nLANGUAGE: Go\nCODE:\n```\nimport \"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/avs/armavs\"\n\nfactory, err := armavs.NewClientFactory(subscriptionID, cred, nil)\nif err != nil {\n    // handle error\n}\n\niscsiPathsClient := factory.NewIscsiPathsClient()\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Managed Application Module\nDESCRIPTION: Command to install the Azure Managed Application module using Go modules package management system.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/solutions/armmanagedapplications/v2\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Monitor Go SDK\nDESCRIPTION: Command to install the Azure Monitor module using Go modules package management\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/monitor/armmonitor\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK Go Generation\nDESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure SDK for Go. It specifies the Azure ARM mode, required API specifications, license header, and module version for the Data Lake Analytics resource manager.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/datalake-analytics/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/datalake-analytics/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 0.8.0\n```\n\n----------------------------------------\n\nTITLE: Preparing Release with PowerShell Script\nDESCRIPTION: Command to run the PowerShell script that prepares a package for release. This script may update the version and/or CHANGELOG.md of the package.\n\nLANGUAGE: powershell\nCODE:\n```\n./eng/common/scripts/Prepare-Release.ps1\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Recovery Services Backup Client for Sovereign Clouds in Go\nDESCRIPTION: This snippet shows how to configure the client factory to connect to sovereign clouds or Azure Stack using ClientOptions.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armrecoveryservicesbackup.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Media Services Go Module\nDESCRIPTION: Command to install the Azure Media Services module using Go modules package management\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/mediaservices/armmediaservices/v3\n```\n\n----------------------------------------\n\nTITLE: Creating Azure VMware Client Factory\nDESCRIPTION: Initializes a client factory for creating Azure VMware Solution service clients.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armavs.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Service Fabric Client Instance\nDESCRIPTION: Creating a specific Service Fabric client instance from the client factory\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewServicesClient()\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Orbital SDK Module\nDESCRIPTION: Command to install the Azure Orbital module using Go modules package management system.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/orbital/armorbital/v2\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK Go Generation\nDESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure SDK for Go. It specifies the Azure ARM mode, required API specifications, license header, module version, and API version tag for the Application Insights resource manager.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/8a0168458930c86636a76bcd7acfdc9c81291bfc/specification/applicationinsights/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/8a0168458930c86636a76bcd7acfdc9c81291bfc/specification/applicationinsights/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 2.0.0-beta.3\ntag: package-2024-08-01\n```\n\n----------------------------------------\n\nTITLE: Installing Azure NetApp Files Module in Go\nDESCRIPTION: This command installs the Azure NetApp Files module using Go's package manager. It specifies the exact version to use.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/netapp/armnetapp/v7\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Factory with Custom Options\nDESCRIPTION: Creates a client factory with custom options for connecting to different Azure clouds including sovereign clouds and Azure Stack.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armmigrationdiscoverysap.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Power BI Private Links Module in Go\nDESCRIPTION: Command to install the Azure Power BI Private Links module using Go modules. This snippet demonstrates how to add the module to a Go project.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/powerbiprivatelinks/armpowerbiprivatelinks/v2\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK for Go Generation\nDESCRIPTION: This YAML configuration sets up AutoRest for generating the Azure SDK for Go. It specifies the Azure ARM mode, required API specifications, license header, module version, and package tag for the API Center resource manager.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/d4205894880b989ede35d62d97c8e901ed14fb5a/specification/apicenter/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/d4205894880b989ede35d62d97c8e901ed14fb5a/specification/apicenter/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.0.0\ntag: package-2024-03\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Scheduler Client Factory\nDESCRIPTION: Initializes a new client factory for Azure Scheduler services using subscription ID and credentials.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armscheduler.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Oracle Database SDK\nDESCRIPTION: Command to install the Azure Oracle Database module using Go modules\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/oracledatabase/armoracledatabase\n```\n\n----------------------------------------\n\nTITLE: Authentication Setup with Azure Credentials\nDESCRIPTION: Initialize default Azure credentials for authentication with Azure AgriFood services.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Factory with Custom Options\nDESCRIPTION: Creates a client factory with custom options for connecting to different Azure clouds\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armmanagementgroups.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Dedicated HSM Module in Go\nDESCRIPTION: This command installs the Azure Dedicated HSM module using Go's package manager.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/hardwaresecuritymodules/armhardwaresecuritymodules/v2\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Blueprint Module with Go\nDESCRIPTION: Command to install the Azure Blueprint module using Go's package manager.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/blueprint/armblueprint\n```\n\n----------------------------------------\n\nTITLE: Release History Changelog Format in Markdown\nDESCRIPTION: Structured changelog entries documenting version releases, features added, and migration information for the Azure SDK for Go armaddons package.\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 0.3.0 (2023-11-24)\n### Features Added\n\n- Support for test fakes and OpenTelemetry trace spans.\n\n\n## 0.2.0 (2023-03-27)\n### Features Added\n\n- New struct `ClientFactory` which is a client factory used to create any client in this module\n\n\n## 0.1.0 (2022-06-10)\n\nThe package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/addons/armaddons` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html) since version 0.1.0, which contains breaking changes.\n\nTo migrate the existing applications to the latest version, please refer to [Migration Guide](https://aka.ms/azsdk/go/mgmt/migration).\n\nTo learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Factory with Custom Options\nDESCRIPTION: Setting up a client factory with custom options for connecting to different Azure clouds\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armservicefabric.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Recoveryservicesdatareplication Module for Go\nDESCRIPTION: Uses go get command to install the Azure Recoveryservicesdatareplication module from the Azure SDK for Go.\n\nLANGUAGE: Shell\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/recoveryservicesdatareplication/armrecoveryservicesdatareplication\n```\n\n----------------------------------------\n\nTITLE: Base AutoRest Configuration for Azure Policy Module\nDESCRIPTION: Main AutoRest configuration specifying Azure ARM settings, required API specs, module details and output settings for the Policy client module.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/53b1affe357b3bfbb53721d0a2002382a046d3b0/specification/resources/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/53b1affe357b3bfbb53721d0a2002382a046d3b0/specification/resources/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 0.1.0\nmodule-name: profile/p20200901/resourcemanager/resources/armpolicy\nmodule: github.com/Azure/azure-sdk-for-go/$(module-name)\noutput-folder: $(go-sdk-folder)/$(module-name)\ntag: package-policy-2016-12\n```\n\n----------------------------------------\n\nTITLE: Installing Azure RedHat Open Shift Module for Go\nDESCRIPTION: Use the go get command to install the Azure RedHat Open Shift module from the Azure SDK for Go.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/redhatopenshift/armredhatopenshift\n```\n\n----------------------------------------\n\nTITLE: Update Module References Directive\nDESCRIPTION: AutoRest directive to update moduleName and moduleVersion references to use internal package constants in client files.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from:\n      - \"*_client.go\"\n      - \"client.go\"\n      - \"client_factory.go\"\n    where: $\n    transform: return $.replace(/moduleVersion/, \"internal.ModuleVersion\").replace(/moduleName\\+\"/, \"internal.ModuleName+\\\"/armmonitor\");\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Container Apps Module in Go\nDESCRIPTION: This snippet demonstrates how to install the Azure Container Apps module using Go's package manager. It uses the 'go get' command to fetch and install the module from the specified GitHub repository.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/appcontainers/armappcontainers/v3\n```\n\n----------------------------------------\n\nTITLE: Removing Module Constants Directive\nDESCRIPTION: AutoRest directive to remove moduleName and moduleVersion constants from the constants.go file.\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: constants.go\n    where: $\n    transform: return $.replace(/const \\(\\n\\s+moduleName.+\\n\\s+moduleVersion.+\\n\\)\\n/, \"\");\n```\n\n----------------------------------------\n\nTITLE: Installing Azure App Platform Module with Go\nDESCRIPTION: Command to install the Azure App Platform module using Go modules for dependency management.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/appplatform/armappplatform/v2\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Resource Connector Client Factory in Go\nDESCRIPTION: Initializes a client factory for Azure Resource Connector, which can be used to create specific clients.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armresourceconnector.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Blueprint Client Factory in Go\nDESCRIPTION: Initializes a client factory for Azure Blueprint using the subscription ID and credentials.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armblueprint.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Confluent Client Factory in Go\nDESCRIPTION: Example of creating a client factory for Azure Confluent with default options.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armconfluent.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Marketplace Client Factory in Go\nDESCRIPTION: This code creates a client factory for Azure Marketplace. It requires a subscription ID and credentials. The factory can be used to create specific clients for different Marketplace operations.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armmarketplace.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Power BI Service Client\nDESCRIPTION: Creates a specific Power BI service client using the client factory for API operations.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewAutoScaleVCoresClient()\n```\n\n----------------------------------------\n\nTITLE: Creating Power BI Service Client\nDESCRIPTION: Creates a specific Power BI service client using the client factory for API operations.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewAutoScaleVCoresClient()\n```\n\n----------------------------------------\n\nTITLE: Creating Blockchain Client Factory\nDESCRIPTION: Initializes a client factory for creating Azure Blockchain service clients with basic configuration.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armblockchain.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Power BI Embedded SDK\nDESCRIPTION: Command to install the Azure Power BI Embedded module using Go modules\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/powerbiembedded/armpowerbiembedded\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Graphservices Client Factory in Go\nDESCRIPTION: Code to create a client factory for Azure Graphservices, which can be used to create specific clients.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armgraphservices.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Pinecone Vectordb Module\nDESCRIPTION: Command to install the Azure Pinecone Vectordb module using Go modules package manager.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/pineconevectordb/armpineconevectordb\n```\n\n----------------------------------------\n\nTITLE: Creating Redis Enterprise Client Factory\nDESCRIPTION: Initializes a client factory for creating Redis Enterprise service clients\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armredisenterprise.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK Go Generation\nDESCRIPTION: This YAML configuration specifies settings for AutoRest to generate the Azure SDK for Go. It sets the Azure ARM flag, defines required specification files, sets the license header, and specifies the module version.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/527f6d35fb0d85c48210ca0f6f6f42814d63bd33/specification/networkfunction/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/527f6d35fb0d85c48210ca0f6f6f42814d63bd33/specification/networkfunction/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 2.2.0\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Support Client Factory\nDESCRIPTION: Initializes a client factory for Azure Support services using subscription ID and credentials\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armsupport.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Cloud Options\nDESCRIPTION: Sets up client options for connecting to different Azure clouds, including sovereign clouds and Azure Stack.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armnginx.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure Automation Client Factory in Go\nDESCRIPTION: This code creates a client factory for Azure Automation. It requires a subscription ID and a credential object. The factory can be used to create specific clients for various Automation operations.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armautomation.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Default Azure Credential in Go\nDESCRIPTION: This snippet demonstrates how to create a default Azure credential using the azidentity package for authentication with Azure services.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Default Azure Credential in Go\nDESCRIPTION: This snippet demonstrates how to create a default Azure credential using the azidentity package for authentication with Azure services.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Front Door Client Factory\nDESCRIPTION: Initializing the client factory for Azure Front Door with subscription ID and credentials.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armfrontdoor.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Documenting Breaking Changes in Markdown for Azure SDK Go Qumulo Module v2.0.0\nDESCRIPTION: Lists breaking changes in version 2.0.0, including type changes, enum removals, and field removals from various structs.\n\nLANGUAGE: markdown\nCODE:\n```\n### Breaking Changes\n\n- Type of `FileSystemResourceProperties.StorageSKU` has been changed from `*StorageSKU` to `*string`\n- `ProvisioningStateNotSpecified` from enum `ProvisioningState` has been removed\n- Enum `StorageSKU` has been removed\n- Field `InitialCapacity` of struct `FileSystemResourceProperties` has been removed\n- Field `ClusterLoginURL`, `PrivateIPs` of struct `FileSystemResourceUpdateProperties` has been removed\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure Logic Apps Client Factory in Go\nDESCRIPTION: This snippet demonstrates how to create a client factory for Azure Logic Apps. It requires a subscription ID and a credential object.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armlogic.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Elastic Module with Go\nDESCRIPTION: Command to install the Azure Elastic module using Go modules package management system.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/elastic/armelastic\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Advisor Client Factory in Go\nDESCRIPTION: Initializes a client factory for Azure Advisor, which can be used to create specific clients.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armadvisor.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Education Students Client in Go\nDESCRIPTION: This snippet shows how to create a specific client (Students client) using the Azure Education client factory. This client provides access to student-related APIs.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewStudentsClient()\n```\n\n----------------------------------------\n\nTITLE: Creating Client Factory for PaloAltoNetworks\nDESCRIPTION: Example of initializing a client factory for accessing PaloAltoNetworks services.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armpanngfw.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Listing AccessConnectors by Resource Group in Go\nDESCRIPTION: Creates a new Pager for listing AccessConnectors within a specific resource group.\n\nLANGUAGE: go\nCODE:\n```\n*AccessConnectorsClient.NewListByResourceGroupPager(string, *AccessConnectorsClientListByResourceGroupOptions) *runtime.Pager[AccessConnectorsClientListByResourceGroupResponse]\n```\n\n----------------------------------------\n\nTITLE: Creating Azure SAP HANA Client Factory in Go\nDESCRIPTION: Demonstrates how to create a client factory for Azure SAP HANA. This factory is used to create specific clients for interacting with SAP HANA services on Azure.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armhanaonazure.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Defining LedgerSKU Enum in Go\nDESCRIPTION: Defines a new enum type LedgerSKU with values for Basic, Standard, and Unknown SKUs.\n\nLANGUAGE: Go\nCODE:\n```\ntype LedgerSKU string\n\nconst (\n    LedgerSKUBasic LedgerSKU = \"Basic\"\n    LedgerSKUStandard LedgerSKU = \"Standard\"\n    LedgerSKUUnknown LedgerSKU = \"Unknown\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Deviceregistry Client for Different Clouds in Go\nDESCRIPTION: This snippet shows how to configure the client factory for different Azure clouds or Azure Stack. It uses ClientOptions to set the endpoint for specific cloud environments.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armdeviceregistry.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Confidential Ledger SDK Generation in YAML\nDESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure Confidential Ledger SDK for Go. It specifies Azure ARM mode, required API specifications, license header, module version, and the API version tag to use.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/c77bbf822be2deaac1b690270c6cd03a52df0e37/specification/confidentialledger/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/c77bbf822be2deaac1b690270c6cd03a52df0e37/specification/confidentialledger/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.3.0-beta.2\ntag: package-preview-2023-06\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Client Options for Different Clouds in Go\nDESCRIPTION: This snippet shows how to configure client options to connect to different Azure clouds, such as Azure China. It uses the arm.ClientOptions struct to set the cloud option.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armappconfiguration.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure SDK Go Generation\nDESCRIPTION: YAML configuration for AutoRest to generate Azure SDK for Go. It specifies Azure ARM settings, required API specifications from GitHub, license header, and module version.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/163e27c0ca7570bc39e00a46f255740d9b3ba3cb/specification/commerce/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/163e27c0ca7570bc39e00a46f255740d9b3ba3cb/specification/commerce/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 0.3.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Options for Different Clouds\nDESCRIPTION: Sets up client options for connecting to different Azure clouds, including sovereign clouds and Azure Stack.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armfluidrelay.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Batch Go Module\nDESCRIPTION: Command to install the Azure Batch module using Go modules package management\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/batch/armbatch/v3\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Logic Apps Client for Different Clouds in Go\nDESCRIPTION: This code shows how to configure the client factory to connect to different Azure clouds, such as Azure China. It uses ClientOptions to set the cloud endpoint.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armlogic.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: New Storage Type Enum Values\nDESCRIPTION: New storage type enum values added in version 3.1.0-beta.1\n\nLANGUAGE: go\nCODE:\n```\nStorageTypeNfsAzureFile\nStorageTypeSmb\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Options for Different Clouds\nDESCRIPTION: Creates a client factory with custom options for connecting to different Azure clouds like Azure China.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armsecurityinsights.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Previous Version (services/**/mgmt/**)\nDESCRIPTION: Example of error handling in the deprecated version of Azure SDK for Go.\n\nLANGUAGE: go\nCODE:\n```\nresp, err := resourceGroupsClient.CreateOrUpdate(context.TODO(), resourceGroupName, resourceGroupParameters)\nif err != nil {\n    log.Fatalf(\"Status code: %d\", resp.Response().StatusCode)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Client Options for Different Clouds in Go\nDESCRIPTION: This snippet shows how to configure client options for connecting to different Azure clouds, such as Azure China. It uses the arm.ClientOptions struct to set the cloud endpoint.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armmongocluster.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Activation Keys Client for Azure Windows ESU in Go\nDESCRIPTION: This code demonstrates how to create a specific client (MultipleActivationKeysClient) using the client factory for Azure Windows ESU.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewMultipleActivationKeysClient()\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Client Options\nDESCRIPTION: Sets up client options for connecting to different Azure clouds including sovereign clouds and Azure Stack.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armhealthbot.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure using Default Azure Credential in Go\nDESCRIPTION: This snippet demonstrates how to create a default Azure credential for authentication with Azure services.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Options for Different Clouds\nDESCRIPTION: Example showing how to configure client options for connecting to different Azure clouds including sovereign clouds.\n\nLANGUAGE: go\nCODE:\n```\noptions := arm.ClientOptions {\n    ClientOptions: azcore.ClientOptions {\n        Cloud: cloud.AzureChina,\n    },\n}\nclientFactory, err := armpanngfw.NewClientFactory(<subscription ID>, cred, &options)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Credentials\nDESCRIPTION: Creates default Azure credentials for authentication with Azure Batch services\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure StorSimple 1200 Series Client Factory in Go\nDESCRIPTION: This code creates a client factory for Azure StorSimple 1200 Series operations. It requires a subscription ID and a credential object. The factory can be used to create specific clients for different operations.\n\nLANGUAGE: Go\nCODE:\n```\nclientFactory, err := armstorsimple1200series.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Credentials\nDESCRIPTION: Creates default Azure credentials for authentication using the azidentity package.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure using DefaultAzureCredential in Go\nDESCRIPTION: This code snippet demonstrates how to create a default Azure credential for authentication. It uses the azidentity package to create a DefaultAzureCredential object.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure using Default Credential in Go\nDESCRIPTION: Code snippet demonstrating how to create a default Azure credential for authentication. This credential can be used to authenticate requests to Azure services.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure using Default Credentials in Go\nDESCRIPTION: This snippet demonstrates how to create a default Azure credential for authentication. It uses the azidentity module to provide various authentication methods.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Authentication Setup with Azure Identity\nDESCRIPTION: Creates default Azure credentials for authentication with Azure services\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Service Client for Azure Service Fabric Mesh in Go\nDESCRIPTION: Code snippet demonstrating how to create a specific service client using the client factory for Azure Service Fabric Mesh.\n\nLANGUAGE: Go\nCODE:\n```\nclient := clientFactory.NewServiceClient()\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure Credentials\nDESCRIPTION: Creates default Azure credentials for authentication with Azure services using azidentity module\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure using DefaultAzureCredential in Go\nDESCRIPTION: Creates a DefaultAzureCredential object for authenticating with Azure services.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Credentials in Go\nDESCRIPTION: Creates a default Azure credential object for authentication with Azure services using the azidentity package.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Service Fabric Go Module\nDESCRIPTION: Command to install the Azure Service Fabric module using Go modules package management\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/servicefabric/armservicefabric\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure Credential in Go\nDESCRIPTION: This code demonstrates how to create a default Azure credential for authentication.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure using Default Azure Credential in Go\nDESCRIPTION: Create a default Azure credential for authentication with Azure services using the azidentity package.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Default Credential in Go\nDESCRIPTION: This snippet shows how to create a default Azure credential using the azidentity package for authentication.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Administrator Client\nDESCRIPTION: Creates a specific client instance for managing PostgreSQL administrators using the client factory.\n\nLANGUAGE: go\nCODE:\n```\nclient := clientFactory.NewAdministratorsClient()\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Device Provisioning Service Client Factory in Go\nDESCRIPTION: This snippet demonstrates how to create a client factory for Azure Device Provisioning Service, which can be used to create specific clients.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armdeviceprovisioningservices.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure using Default Credentials in Go\nDESCRIPTION: This snippet demonstrates how to create a default Azure credential for authentication. It uses the azidentity module to provide various authentication methods.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Default Azure Credential in Go\nDESCRIPTION: This snippet demonstrates how to create a default Azure credential for authentication using the azidentity package.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest Settings for Azure SDK Go Generation\nDESCRIPTION: Defines the AutoRest configuration for generating Go SDK code from Azure REST API specifications. Specifies ARM mode, required API specs from GitHub, license header type, and module version 0.6.0.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/oep/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/oep/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 0.6.0\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Using Default Credentials in Go\nDESCRIPTION: This code demonstrates how to create default Azure credentials for authentication. It uses the azidentity module to provide various authentication methods.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Managed Application Client Factory\nDESCRIPTION: Initializes a client factory for creating Azure Managed Application service clients with basic configuration.\n\nLANGUAGE: go\nCODE:\n```\nclientFactory, err := armmanagedapplications.NewClientFactory(<subscription ID>, cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Default Credential in Go\nDESCRIPTION: This snippet demonstrates how to create a default Azure credential using the azidentity package. This credential is used for authenticating with Azure Backup services.\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Credentials\nDESCRIPTION: Creates default Azure credentials for authentication with Azure services using azidentity module\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest Settings for Azure Connected VMware SDK Generation\nDESCRIPTION: YAML configuration that defines the parameters for AutoRest code generation. Specifies Azure ARM mode, required API specifications from GitHub, Microsoft MIT license header requirement, module version 1.1.1, and targets the package-2023-10 API version tag.\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nrequire:\n- https://github.com/Azure/azure-rest-api-specs/blob/3066a973f4baf2e2bf072a013b585a820bb10146/specification/connectedvmware/resource-manager/readme.md\n- https://github.com/Azure/azure-rest-api-specs/blob/3066a973f4baf2e2bf072a013b585a820bb10146/specification/connectedvmware/resource-manager/readme.go.md\nlicense-header: MICROSOFT_MIT_NO_VERSION\nmodule-version: 1.1.1\ntag: package-2023-10\n```\n\n----------------------------------------\n\nTITLE: Verifying IMDS Availability on Azure VM using curl\nDESCRIPTION: This command uses curl to verify the availability of the managed identity endpoint on an Azure Virtual Machine. It sends a request to the IMDS endpoint to obtain an access token for the Azure Resource Manager.\n\nLANGUAGE: sh\nCODE:\n```\ncurl 'http://169.254.169.254/metadata/identity/oauth2/token?resource=https://management.core.windows.net&api-version=2018-02-01' -H \"Metadata: true\"\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Video Analyzer Module in Go\nDESCRIPTION: This command installs the Azure Video Analyzer module using Go's package management system.\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/videoanalyzer/armvideoanalyzer\n```"
  }
]