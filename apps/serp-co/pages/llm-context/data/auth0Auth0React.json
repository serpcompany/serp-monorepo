[
  {
    "owner": "auth0",
    "repo": "auth0-react",
    "content": "TITLE: Using useAuth0 Hook in React\nDESCRIPTION: This code snippet demonstrates how to use the `useAuth0` hook in a React component to access authentication state and methods. It retrieves `isLoading`, `isAuthenticated`, `error`, `user`, `loginWithRedirect`, and `logout` from the hook and uses them to render content based on the authentication status.\nSOURCE: https://github.com/auth0/auth0-react/blob/main/README.md#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// src/App.js\nimport React from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\n\nfunction App() {\n  const { isLoading, isAuthenticated, error, user, loginWithRedirect, logout } =\n    useAuth0();\n\n  if (isLoading) {\n    return <div>Loading...</div>;\n  }\n  if (error) {\n    return <div>Oops... {error.message}</div>;\n  }\n\n  if (isAuthenticated) {\n    return (\n      <div>\n        Hello {user.name}{' '}\n        <button onClick={() => logout({ logoutParams: { returnTo: window.location.origin } })}>Log out</button>\n      </div>\n    );\n  } else {\n    return <button onClick={() => loginWithRedirect()}>Log in</button>;\n  }\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth0Provider for React 18+\nDESCRIPTION: This code snippet configures the Auth0Provider component in a React application.  It wraps the App component to provide authentication context using Auth0, requiring domain and clientId from Auth0 dashboard. It specifies redirect_uri which is necessary for the callback after authentication.\nSOURCE: https://github.com/auth0/auth0-react/blob/main/README.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// src/index.js\nimport React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Auth0Provider } from '@auth0/auth0-react';\nimport App from './App';\n\nconst root = createRoot(document.getElementById('app'));\n\nroot.render(\n  <Auth0Provider\n    domain=\"YOUR_AUTH0_DOMAIN\"\n    clientId=\"YOUR_AUTH0_CLIENT_ID\"\n    authorizationParams={{\n      redirect_uri: window.location.origin,\n    }}\n  >\n    <App />\n  </Auth0Provider>\n);\n```\n\n----------------------------------------\n\nTITLE: Calling a Protected API using useAuth0 in React\nDESCRIPTION: Demonstrates how to call a protected API using the `useAuth0` hook to retrieve an access token. The `getAccessTokenSilently` method is used with specified `authorizationParams` (audience and scope) to obtain the token. The token is then included in the `Authorization` header of the API request. Error handling is included for scenarios like `login_required` and `consent_required`.\nSOURCE: https://github.com/auth0/auth0-react/blob/main/EXAMPLES.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useEffect, useState } from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\n\nconst Posts = () => {\n  const { getAccessTokenSilently } = useAuth0();\n  const [posts, setPosts] = useState(null);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const token = await getAccessTokenSilently({\n          authorizationParams: {\n            audience: 'https://api.example.com/',\n            scope: 'read:posts',\n          },\n        });\n        const response = await fetch('https://api.example.com/posts', {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        });\n        setPosts(await response.json());\n      } catch (e) {\n        // Handle errors such as `login_required` and `consent_required` by re-prompting for a login\n        console.error(e);\n      }\n    })();\n  }, [getAccessTokenSilently]);\n\n  if (!posts) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <ul>\n      {posts.map((post, index) => {\n        return <li key={index}>{post}</li>;\n      })}\n    </ul>\n  );\n};\n\nexport default Posts;\n```\n\n----------------------------------------\n\nTITLE: Protecting Route in React Router v6 App with Auth0\nDESCRIPTION: This example demonstrates how to protect a route in a React Router v6 application using the Auth0 React SDK. It involves using the `useNavigate` hook within the `Auth0Provider` to handle redirects after authentication. A `ProtectedRoute` component is created using `withAuthenticationRequired` to ensure that only authenticated users can access the protected route.\nSOURCE: https://github.com/auth0/auth0-react/blob/main/EXAMPLES.md#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Route, BrowserRouter, Routes, useNavigate } from 'react-router-dom';\nimport { Auth0Provider, withAuthenticationRequired } from '@auth0/auth0-react';\nimport Profile from './Profile';\n\nconst ProtectedRoute = ({ component, ...args }) => {\n  const Component = withAuthenticationRequired(component, args);\n  return <Component />;\n};\n\nconst Auth0ProviderWithRedirectCallback = ({ children, ...props }) => {\n  const navigate = useNavigate();\n  const onRedirectCallback = (appState) => {\n    navigate((appState && appState.returnTo) || window.location.pathname);\n  };\n  return (\n    <Auth0Provider onRedirectCallback={onRedirectCallback} {...props}>\n      {children}\n    </Auth0Provider>\n  );\n};\n\nexport default function App() {\n  return (\n    <BrowserRouter>\n      <Auth0ProviderWithRedirectCallback\n        domain=\"YOUR_AUTH0_DOMAIN\"\n        clientId=\"YOUR_AUTH0_CLIENT_ID\"\n        authorizationParams={{\n          redirect_uri: window.location.origin,\n        }}\n      >\n        <Routes>\n          <Route path=\"/\" exact />\n          <Route\n            path=\"/profile\"\n            element={<ProtectedRoute component={Profile} />}\n          />\n        </Routes>\n      </Auth0ProviderWithRedirectCallback>\n    </BrowserRouter>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Protecting React Route with withAuthenticationRequired HOC\nDESCRIPTION: Shows how to protect a React route using the `withAuthenticationRequired` higher-order component from the Auth0 React SDK. Unauthenticated users are redirected to the login page and then back to the protected route after login. An optional `onRedirecting` prop displays a message during redirection.\nSOURCE: https://github.com/auth0/auth0-react/blob/main/EXAMPLES.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { withAuthenticationRequired } from '@auth0/auth0-react';\n\nconst PrivateRoute = () => <div>Private</div>;\n\nexport default withAuthenticationRequired(PrivateRoute, {\n  // Show a message while the user waits to be redirected to the login page.\n  onRedirecting: () => <div>Redirecting you to the login page...</div>,\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Auth0Provider Component (v2)\nDESCRIPTION: Illustrates rendering the Auth0Provider component in v2, using the `authorizationParams` property to encapsulate parameters that are passed to Auth0.  This separates SDK configuration from Auth0 specific parameters. Affects methods like loginWithRedirect, loginWithPopup, etc.\nSOURCE: https://github.com/auth0/auth0-react/blob/main/MIGRATION_GUIDE.md#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nReactDOM.render(\n  <Auth0Provider\n    domain=\"YOUR_AUTH0_DOMAIN\"\n    clientId=\"YOUR_AUTH0_CLIENT_ID\"\n    authorizationParams={{\n      redirect_uri: window.location.origin,\n      audience: \"YOUR_AUDIENCE_ID\",\n      scope: \"openid profile email\"\n    }}\n  >\n    <App />\n  </Auth0Provider>,\n  document.getElementById('app')\n);\n```\n\n----------------------------------------\n\nTITLE: Fetching Access Token with cacheMode (v2)\nDESCRIPTION: Illustrates how to fetch an access token with different caching strategies in Auth0-React SDK v2 using the `cacheMode` option.  It replaces the `ignoreCache` option from v1.\nSOURCE: https://github.com/auth0/auth0-react/blob/main/MIGRATION_GUIDE.md#_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nconst { getAccessTokenSilently } = useAuth0();\nconst token = await getAccessTokenSilently({ cacheMode: 'off' });\n```\n\n----------------------------------------\n\nTITLE: Using Auth0 Organizations in React\nDESCRIPTION: Demonstrates how to use Auth0 Organizations with the React SDK.  The first example shows how to specify the organization ID in the `Auth0Provider`'s `authorizationParams`. The second example shows how to handle accepting an invite from an organization using `loginWithRedirect` along with the `invitation` and `organization` parameters extracted from the URL.\nSOURCE: https://github.com/auth0/auth0-react/blob/main/EXAMPLES.md#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nReactDOM.render(\n  <React.StrictMode>\n    <Auth0Provider\n      domain=\"YOUR_AUTH0_DOMAIN\"\n      clientId=\"YOUR_AUTH0_CLIENT_ID\"\n      authorizationParams={{\n        organization: \"YOUR_ORGANIZATION_ID_OR_NAME\"\n        redirectUri: window.location.origin,\n      }}\n    >\n      <App />\n    </Auth0Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Auth0Provider, useAuth0 } from 'auth0/auth0-react';\n\nconst App = () => {\n  const { loginWithRedirect } = useAuth0();\n  const url = window.location.href;\n  const inviteMatches = url.match(/invitation=([^&]+)/);\n  const orgMatches = url.match(/organization=([^&]+)/);\n  if (inviteMatches && orgMatches) {\n    loginWithRedirect({\n      authorizationParams: {\n        organization: orgMatches[1],\n        invitation: inviteMatches[1],\n      }\n    });\n  }\n  return <div>...</div>;\n};\n```\n\n----------------------------------------\n\nTITLE: Replacing localOnly logout with openUrl (v2)\nDESCRIPTION: Illustrates how to achieve local-only logout in v2 by setting `openUrl` to `false` in the `logout` method. This prevents redirection to Auth0 during logout and only clears the user state from the application.\nSOURCE: https://github.com/auth0/auth0-react/blob/main/MIGRATION_GUIDE.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { logout } = useAuth0();\nawait logout({\n  openUrl: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Protecting Route in Next.js App (SPA) with Auth0\nDESCRIPTION: This example shows how to protect a route in a Next.js application (in SPA mode) using the Auth0 React SDK. It wraps the root element in an `Auth0Provider` in `pages/_app.js` and uses Next.js's `Router.replace` function for the `onRedirectCallback`. A profile page is then wrapped with `withAuthenticationRequired` HOC.\nSOURCE: https://github.com/auth0/auth0-react/blob/main/EXAMPLES.md#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n// pages/_app.js\nimport React from 'react';\nimport App from 'next/app';\nimport Router from 'next/router';\nimport { Auth0Provider } from '@auth0/auth0-react';\n\nconst onRedirectCallback = (appState) => {\n  // Use Next.js's Router.replace method to replace the url\n  Router.replace(appState?.returnTo || '/');\n};\n\nclass MyApp extends App {\n  render() {\n    const { Component, pageProps } = this.props;\n    return (\n      <Auth0Provider\n        domain=\"YOUR_AUTH0_DOMAIN\"\n        clientId=\"YOUR_AUTH0_CLIENT_ID\"\n        onRedirectCallback={onRedirectCallback}\n        authorizationParams={{\n          redirect_uri:\n            typeof window !== 'undefined' ? window.location.origin : undefined,\n        }}\n      >\n        <Component {...pageProps} />\n      </Auth0Provider>\n    );\n  }\n}\n\nexport default MyApp;\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// pages/profile.js\nimport React from 'react';\nimport { useAuth0, withAuthenticationRequired } from '@auth0/auth0-react';\n\nconst Profile = () => {\n  const { user } = useAuth0();\n  return (\n    <ul>\n      <li>Name: {user.nickname}</li>\n      <li>E-mail: {user.email}</li>\n    </ul>\n  );\n};\n\n// Wrap the component in the withAuthenticationRequired handler\nexport default withAuthenticationRequired(Profile);\n```\n\n----------------------------------------\n\nTITLE: Logout with logoutParams (v2)\nDESCRIPTION: Shows how to use the `logout` method in v2, utilizing the `logoutParams` property to include parameters passed to Auth0 during logout.  Any properties previously set on the root object passed to logout, except clientId, should now be nested within logoutParams.\nSOURCE: https://github.com/auth0/auth0-react/blob/main/MIGRATION_GUIDE.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait logout({\n  clientId: '',\n  logoutParams: {\n    federated: true / false,\n    returnTo: '',\n    any_custom_property: 'value',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using withAuth0 HOC in React Class Component\nDESCRIPTION: Demonstrates using the `withAuth0` higher-order component to add the Auth0 context to a React class component. This allows accessing Auth0 properties such as the user object via `this.props.auth0`. The user's name is then displayed within the component.\nSOURCE: https://github.com/auth0/auth0-react/blob/main/EXAMPLES.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { Component } from 'react';\nimport { withAuth0 } from '@auth0/auth0-react';\n\nclass Profile extends Component {\n  render() {\n    // `this.props.auth0` has all the same properties as the `useAuth0` hook\n    const { user } = this.props.auth0;\n    return <div>Hello {user.name}</div>;\n  }\n}\n\nexport default withAuth0(Profile);\n```\n\n----------------------------------------\n\nTITLE: Replacing redirectMethod with openUrl (v2)\nDESCRIPTION: Explains how to replace the `redirectMethod` option in `loginWithRedirect` with the `openUrl` callback. It shows how to implement custom redirect logic, like using `window.location.replace`, within the `openUrl` function.\nSOURCE: https://github.com/auth0/auth0-react/blob/main/MIGRATION_GUIDE.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { loginWithRedirect } = useAuth0();\nawait loginWithRedirect({\n  async openUrl(url) {\n    window.location.replace(url);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: withClaimCheck HOC Implementation (v2)\nDESCRIPTION: Presents a custom Higher-Order Component (`withClaimCheck`) to replace the `claimCheck` functionality removed from `withAuthenticationRequired` in Auth0-React v2. This allows developers to customize the claim checking and redirect behavior.\nSOURCE: https://github.com/auth0/auth0-react/blob/main/MIGRATION_GUIDE.md#_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nconst withClaimCheck = (Component, myClaimCheckFunction, returnTo) => {\n  const WithClaimCheckComponent = () => {\n    const { user } =  useAuth0();\n    if (myClaimCheckFunction(user)) {\n      return <Component />\n    }\n    Router.push(returnTo);\n  }\n  return WithClaimCheckComponent;\n}\n\nconst checkClaims = (claim?: User) => claim?.['https://my.app.io/jwt/claims']?.ROLE?.includes('ADMIN');\n\n// Usage\nconst Page = withAuthenticationRequired(\n  withClaimCheck(Component, checkClaims, '/missing-roles' )\n);\n```\n\n----------------------------------------\n\nTITLE: Protecting Route in Gatsby App with Auth0\nDESCRIPTION: This snippet demonstrates how to protect a route in a Gatsby application using Auth0.  It wraps the root element in an `Auth0Provider` in `gatsby-browser.js` and uses Gatsby's `navigate` function for the `onRedirectCallback`. A profile page is then wrapped with `withAuthenticationRequired` HOC to ensure only authenticated users can view it.\nSOURCE: https://github.com/auth0/auth0-react/blob/main/EXAMPLES.md#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// gatsby-browser.js\nimport React from 'react';\nimport { Auth0Provider } from '@auth0/auth0-react';\nimport { navigate } from 'gatsby';\n\nconst onRedirectCallback = (appState) => {\n  // Use Gatsby's navigate method to replace the url\n  navigate(appState?.returnTo || '/', { replace: true });\n};\n\nexport const wrapRootElement = ({ element }) => {\n  return (\n    <Auth0Provider\n      domain=\"YOUR_AUTH0_DOMAIN\"\n      clientId=\"YOUR_AUTH0_CLIENT_ID\"\n      onRedirectCallback={onRedirectCallback}\n      authorizationParams={{\n        redirect_uri: window.location.origin,\n      }}\n    >\n      {element}\n    </Auth0Provider>\n  );\n};\n\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// src/pages/profile.js\nimport React from 'react';\nimport { useAuth0, withAuthenticationRequired } from '@auth0/auth0-react';\n\nconst Profile = () => {\n  const { user } = useAuth0();\n  return (\n    <ul>\n      <li>Name: {user.nickname}</li>\n      <li>E-mail: {user.email}</li>\n    </ul>\n  );\n};\n\n// Wrap the component in the withAuthenticationRequired handler\nexport default withAuthenticationRequired(Profile);\n```\n\n----------------------------------------\n\nTITLE: Usage of HOC with Authentication Required in React\nDESCRIPTION: This code demonstrates the usage of both `withClaimCheck` and `withAuthenticationRequired` HOCs to wrap a React Component. `withAuthenticationRequired` ensures user authentication, while `withClaimCheck` verifies required claims. The order of wrapping matters: authentication should be checked first. It assumes `withAuthenticationRequired` is defined elsewhere and handles authentication logic. Requires the target `Component` to be defined.\nSOURCE: https://github.com/auth0/auth0-react/blob/main/EXAMPLES.md#_snippet_9\n\nLANGUAGE: JSX\nCODE:\n```\n// Usage\nconst Page = withAuthenticationRequired(\n  withClaimCheck(Component, checkClaims, '/missing-roles' )\n);\n```\n\n----------------------------------------\n\nTITLE: Replacing buildAuthorizeUrl with openUrl (v2)\nDESCRIPTION: Demonstrates the replacement of `buildAuthorizeUrl` with the `openUrl` function in v2. It shows how to use `loginWithRedirect` along with the `openUrl` callback to handle redirects using external browsers or custom redirect logic.\nSOURCE: https://github.com/auth0/auth0-react/blob/main/MIGRATION_GUIDE.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { loginWithRedirect } = useAuth0();\n\nawait loginWithRedirect({\n  async openUrl(url) {\n    await Browser.open({ url });\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Auth0Provider Scope Configuration (v2)\nDESCRIPTION: Illustrates how to configure the `Auth0Provider` with a specific scope in Auth0-React SDK v2.  It requires explicitly including `profile email` scopes to retain the default behavior from v1 if they are needed.\nSOURCE: https://github.com/auth0/auth0-react/blob/main/MIGRATION_GUIDE.md#_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nReactDOM.render(\n  <Auth0Provider authorizationParams={{\n    scope: \"profile email scope1\"\n  }}>\n    <App />\n  </Auth0Provider>,\n  document.getElementById('app')\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Claim Check Function in JavaScript\nDESCRIPTION: This code defines a function `checkClaims` to verify the user's claim. Specifically, it checks if the user has the 'ADMIN' role within the 'https://my.app.io/jwt/claims' namespace. It assumes the user object is properly populated with the claims as expected by Auth0. This function expects a User object as input and returns a boolean indicating whether the claim is valid.\nSOURCE: https://github.com/auth0/auth0-react/blob/main/EXAMPLES.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst checkClaims = (claim?: User) => claim?.['https://my.app.io/jwt/claims']?.ROLE?.includes('ADMIN');\n```\n\n----------------------------------------\n\nTITLE: Fetching Access Token with ignoreCache (v1)\nDESCRIPTION: Demonstrates how to fetch an access token while bypassing the cache in Auth0-React SDK v1 using the `ignoreCache` option.\nSOURCE: https://github.com/auth0/auth0-react/blob/main/MIGRATION_GUIDE.md#_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nconst { getAccessTokenSilently } = useAuth0();\nconst token = await getAccessTokenSilently({ ignoreCache: true });\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth0Provider for React <18\nDESCRIPTION: This code snippet configures the Auth0Provider component in a React application using ReactDOM for versions older than 18. It wraps the App component to provide authentication context using Auth0, requiring domain and clientId from Auth0 dashboard. It specifies redirect_uri which is necessary for the callback after authentication.\nSOURCE: https://github.com/auth0/auth0-react/blob/main/README.md#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// src/index.js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Auth0Provider } from '@auth0/auth0-react';\nimport App from './App';\n\nReactDOM.render(\n  <Auth0Provider\n    domain=\"YOUR_AUTH0_DOMAIN\"\n    clientId=\"YOUR_AUTH0_CLIENT_ID\"\n    authorizationParams={{\n      redirect_uri: window.location.origin,\n    }}\n  >\n    <App />\n  </Auth0Provider>,\n  document.getElementById('app')\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Auth0Provider Component (v1)\nDESCRIPTION: Demonstrates how to render the Auth0Provider component in v1, passing configuration properties directly to the component. This approach mixes SDK configuration properties with Auth0 parameters.\nSOURCE: https://github.com/auth0/auth0-react/blob/main/MIGRATION_GUIDE.md#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nReactDOM.render(\n  <Auth0Provider\n    domain=\"YOUR_AUTH0_DOMAIN\"\n    clientId=\"YOUR_AUTH0_CLIENT_ID\"\n    audience=\"YOUR_AUDIENCE_ID\"\n    scope=\"openid profile email\"\n    redirectUri={window.location.origin}\n  >\n    <App />\n  </Auth0Provider>,\n  document.getElementById('app')\n);\n```\n\n----------------------------------------\n\nTITLE: Creating HOC for Claim Check in React\nDESCRIPTION: This code snippet demonstrates creating a Higher-Order Component (HOC) `withClaimCheck` that wraps a given component. It uses `useAuth0` hook to access user information and checks if the user satisfies the condition defined by `myClaimCheckFunction`. If the condition is not met, it redirects the user to the `returnTo` route. It requires the `useAuth0` hook from the `auth0-react` library and `Router` (likely from Next.js or a similar routing library) for navigation.\nSOURCE: https://github.com/auth0/auth0-react/blob/main/EXAMPLES.md#_snippet_7\n\nLANGUAGE: JSX\nCODE:\n```\nconst withClaimCheck = (Component, myClaimCheckFunction, returnTo) => {\n  const { user } =  useAuth0();\n  if (myClaimCheckFunction(user)) {\n    return <Component />\n  }\n  Router.push(returnTo);\n}\n```\n\n----------------------------------------\n\nTITLE: Auth0Provider Scope Configuration (v1)\nDESCRIPTION: Shows how to configure the `Auth0Provider` with a specific scope in Auth0-React SDK v1. The SDK automatically includes the `openid profile email` scopes by default in addition to the user-defined scopes.\nSOURCE: https://github.com/auth0/auth0-react/blob/main/MIGRATION_GUIDE.md#_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nReactDOM.render(\n  <Auth0Provider scope=\"scope1\">\n    <App />\n  </Auth0Provider>,\n  document.getElementById('app')\n);\n```\n\n----------------------------------------\n\nTITLE: Auth0Provider advancedOptions Configuration (v1)\nDESCRIPTION: Demonstrates configuring the `Auth0Provider` with `advancedOptions` to set the `defaultScope` in Auth0-React SDK v1.\nSOURCE: https://github.com/auth0/auth0-react/blob/main/MIGRATION_GUIDE.md#_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nReactDOM.render(\n  <Auth0Provider advancedOptions={{ defaultScope: 'email' }} scope=\"scope1\">\n    <App />\n  </Auth0Provider>,\n  document.getElementById('app')\n);\n```\n\n----------------------------------------\n\nTITLE: Auth0Provider Scope Configuration Merged (v2)\nDESCRIPTION: Shows how to configure the `Auth0Provider` with merged scopes (previously `defaultScope` and `scope`) in Auth0-React SDK v2. The `advancedOptions` and `defaultScope` are removed. The scopes are added to the authorizationParams.\nSOURCE: https://github.com/auth0/auth0-react/blob/main/MIGRATION_GUIDE.md#_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nReactDOM.render(\n  <Auth0Provider authorizationParams={{\n    scope: \"email scope1\"\n  }}>\n    <App />\n  </Auth0Provider>,\n  document.getElementById('app')\n);\n```\n\n----------------------------------------\n\nTITLE: withAuthenticationRequired claimCheck (v1)\nDESCRIPTION: Demonstrates the `claimCheck` property in the `withAuthenticationRequired` Higher Order Component in v1 of Auth0-React.\nSOURCE: https://github.com/auth0/auth0-react/blob/main/MIGRATION_GUIDE.md#_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nwithAuthenticationRequired(MyComponent, {\n  claimCheck: (claim?: User) =>\n    claim?.['https://my.app.io/jwt/claims']?.ROLE?.includes('ADMIN'),\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Next.js Auth0\nDESCRIPTION: This snippet demonstrates how to configure environment variables for a Next.js application using Auth0 for authentication. It defines the Auth0 domain, client ID, and audience for accessing the API. These variables are used by the @auth0/auth0-react library to handle authentication.\nSOURCE: https://github.com/auth0/auth0-react/blob/main/examples/nextjs-app/README.md#_snippet_0\n\nLANGUAGE: dotenv\nCODE:\n```\nNEXT_PUBLIC_DOMAIN=your-tenant.auth0.com\nNEXT_PUBLIC_CLIENT_ID=yourclientid\nNEXT_PUBLIC_AUDIENCE=https://api.example.com/users\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Auth0 User API\nDESCRIPTION: This snippet defines the environment variables required to configure the Auth0 User API.  `DOMAIN` should be set to your Auth0 domain and `AUDIENCE` should be set to your API identifier, as configured in your Auth0 application. These variables are used to authenticate and authorize requests to the `/users` endpoint.\nSOURCE: https://github.com/auth0/auth0-react/blob/main/examples/users-api/README.md#_snippet_0\n\nLANGUAGE: dotenv\nCODE:\n```\nDOMAIN=your_domain\nAUDIENCE=your_audience\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Auth0 React\nDESCRIPTION: This snippet shows the configuration of environment variables required for an Auth0 React application using react-router. It includes the Auth0 domain, client ID, and audience (API identifier). Setting SKIP_PREFLIGHT_CHECK=true is used to avoid issues when nesting the create-react-app project.\nSOURCE: https://github.com/auth0/auth0-react/blob/main/examples/cra-react-router/README.md#_snippet_0\n\nLANGUAGE: dotenv\nCODE:\n```\nREACT_APP_DOMAIN=your_domain\nREACT_APP_CLIENT_ID=your_client_id\nREACT_APP_AUDIENCE=your_audience\nSKIP_PREFLIGHT_CHECK=true # To workaround issues with nesting create-react-app in another package\n```\n\n----------------------------------------\n\nTITLE: Installing Auth0 React SDK with npm\nDESCRIPTION: This command installs the Auth0 React SDK using npm. It adds the @auth0/auth0-react package to your project's dependencies, allowing you to use Auth0 for authentication in your React application.\nSOURCE: https://github.com/auth0/auth0-react/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @auth0/auth0-react\n```\n\n----------------------------------------\n\nTITLE: Installing Auth0 React SDK with yarn\nDESCRIPTION: This command installs the Auth0 React SDK using yarn. It adds the @auth0/auth0-react package to your project's dependencies, enabling Auth0 integration for authentication in your React application.\nSOURCE: https://github.com/auth0/auth0-react/blob/main/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @auth0/auth0-react\n```\n\n----------------------------------------\n\nTITLE: Configuring Gatsby Environment Variables with Auth0\nDESCRIPTION: This snippet demonstrates how to configure environment variables required for integrating an Auth0 application with a Gatsby project. The variables include the Auth0 domain, client ID, and audience, which are used to authenticate users and authorize access to an API. These variables are placed in a `.env.development` file for development purposes.\nSOURCE: https://github.com/auth0/auth0-react/blob/main/examples/gatsby-app/README.md#_snippet_0\n\nLANGUAGE: dotenv\nCODE:\n```\nGATSBY_DOMAIN=your-tenant.auth0.com\nGATSBY_CLIENT_ID=yourclientid\nGATSBY_AUDIENCE=https://api.example.com/users\n```\n\n----------------------------------------\n\nTITLE: Replacing buildLogoutUrl with openUrl (v2)\nDESCRIPTION: Illustrates the replacement of `buildLogoutUrl` with `openUrl` when logging out. It provides an example of using the `logout` method with an `openUrl` callback to customize redirect behavior during logout.\nSOURCE: https://github.com/auth0/auth0-react/blob/main/MIGRATION_GUIDE.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { logout } = useAuth0();\n\nclient.logout({\n  async openUrl(url) {\n    await Browser.open({ url });\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Install dependencies using npm\nDESCRIPTION: This command installs all the necessary dependencies for the Auth0 React SDK project using npm. It retrieves the packages listed in the project's package.json file from the npm registry and installs them in the node_modules directory.\nSOURCE: https://github.com/auth0/auth0-react/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Start development server using npm\nDESCRIPTION: This command starts the development server for the Auth0 React SDK project using npm.  It typically executes a script defined in the package.json file, which may involve running a local web server and setting up hot reloading for development.\nSOURCE: https://github.com/auth0/auth0-react/blob/main/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Run unit tests using npm\nDESCRIPTION: This command executes the unit tests for the Auth0 React SDK project using npm. It runs the test script specified in the package.json file, which typically uses Jest as the test runner. The tests are designed to verify the functionality of individual units of code.\nSOURCE: https://github.com/auth0/auth0-react/blob/main/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Run integration tests using npm and Cypress\nDESCRIPTION: This command runs the integration tests for the Auth0 React SDK project using npm and Cypress.  It requires setting the CYPRESS_USER_EMAIL and CYPRESS_USER_PASSWORD environment variables with the credentials of an Auth0 user who has the read:users permission. The tests are designed to verify the interaction between different parts of the system.\nSOURCE: https://github.com/auth0/auth0-react/blob/main/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nCYPRESS_USER_EMAIL={YOUR USER} CYPRESS_USER_PASSWORD={YOUR PW} npm run test:integration\n```"
  }
]