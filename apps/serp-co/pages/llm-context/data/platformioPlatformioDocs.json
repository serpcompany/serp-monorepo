[
  {
    "owner": "platformio",
    "repo": "platformio-docs",
    "content": "TITLE: Configuring ULP Project Structure\nDESCRIPTION: Required project structure for ULP coprocessor programming showing the placement of ULP assembly files.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/frameworks/espidf_extra.rst#2025-04-10_snippet_5\n\nLANGUAGE: none\nCODE:\n```\nproject_dir\n├── include\n├── src\n│    ├── CMakeLists.txt\n│    └── main.c\n├── ulp\n│    └── ulp_code.S\n├── CMakeLists.txt\n└── platformio.ini\n```\n\n----------------------------------------\n\nTITLE: Implementing User Input Prompts in PlatformIO Build Scripts\nDESCRIPTION: A Python script that prompts the user for their name and adds it as a C/C++ preprocessor define. The script includes a safeguard to prevent blocking when being called by IDEs during integration data dumps.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/scripting/examples/asking_for_input.rst#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nImport(\"env\")\n\n# Do not run a script when external applications, such as IDEs,\n# dump integration data. Otherwise, input() will block the process\n# waiting for the user input\nif env.IsIntegrationDump():\n    # stop the current script execution\n    Return()\n\n# Ask user name\nprint(\"Enter your name:\")\nuser_name = input()\nenv.Append(\n    CPPDEFINES=[(\"USER_NAME\",  env.StringifyMacro(user_name))],\n)\n```\n\n----------------------------------------\n\nTITLE: Defining MCU Frequency with board_build.f_cpu in PlatformIO INI\nDESCRIPTION: The board_build.f_cpu option is used to specify the MCU frequency in Hertz. It accepts a C-like long integer value with an 'L' suffix. This setting is crucial for configuring software to match the actual hardware clock frequency, especially if it has been changed from the default.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/env/options/platform/board_build.f_cpu.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Building and Uploading Firmware for Specific Environment with PlatformIO\nDESCRIPTION: Shows how to build and upload firmware specifically for the Arduino Uno board. The command compiles the project, generates the firmware binary, automatically detects the connected board's serial port, and uploads the firmware to the device.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/cmd_run.rst#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npio run -e uno -t upload\n```\n\n----------------------------------------\n\nTITLE: Defining Board Specifications in ReStructuredText\nDESCRIPTION: This RST code defines tables of board specifications for various microcontroller platforms. Each table includes details like board name, platform, debug support, MCU type, clock frequency, flash memory, and RAM size.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debugging.rst#2025-04-10_snippet_5\n\nLANGUAGE: rst\nCODE:\n```\n.. list-table::\n    :header-rows:  1\n\n    * - Name\n      - Platform\n      - Debug\n      - MCU\n      - Frequency\n      - Flash\n      - RAM\n    * - :ref:`board_atmelsam_tuinozero96`\n      - :ref:`platform_atmelsam`\n      - External\n      - SAMD21G18A\n      - 48MHz\n      - 256KB\n      - 32KB\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU Settings\nDESCRIPTION: Extended configuration showing how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f756zg.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f756zg]\nplatform = ststm32\nboard = nucleo_f756zg\n\n; change microcontroller\nboard_build.mcu = stm32f756zg\n\n; change MCU frequency\nboard_build.f_cpu = 216000000L\n```\n\n----------------------------------------\n\nTITLE: Searching for Sensor Libraries Excluding Temperature\nDESCRIPTION: This command searches for all sensor libraries while excluding temperature-related ones using the PlatformIO CLI.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/lib/cmd_search.rst#2025-04-10_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n> pio lib search \"sensor -temperature\"\n```\n\n----------------------------------------\n\nTITLE: Initializing a Multi-Board PlatformIO Project\nDESCRIPTION: Command to initialize a new PlatformIO project for multiple boards (Arduino Uno, NodeMCU v2, and Teensy 3.1), showing the project initialization process and helpful commands for project management.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/quickstart.rst#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n> pio project init --board uno --board nodemcuv2 --board teensy31\n\nThe current working directory *** will be used for the new project.\nYou can specify another project directory via\n`pio project init -d %PATH_TO_THE_PROJECT_DIR%` command.\n\nThe following files/directories will be created in ***\nplatformio.ini - Project Configuration File. |-> PLEASE EDIT ME <-|\nsrc - Put your source files here\nlib - Put here project specific (private) libraries\nDo you want to continue? [y/N]: y\nProject has been successfully initialized!\nUseful commands:\n`pio run` - process/build project from the current directory\n`pio run --target upload` or `pio run -t upload` - upload firmware to embedded board\n`pio run --target clean` - clean project (remove compiled files)\n```\n\n----------------------------------------\n\nTITLE: Defining Framework Configuration in PlatformIO\nDESCRIPTION: This shows the syntax for the 'framework' option in a PlatformIO project configuration file. The option accepts string values and can be specified multiple times to include multiple frameworks in a project environment.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/env/options/platform/framework.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n``framework``\n```\n\n----------------------------------------\n\nTITLE: Arduino Blink Example Implementation in C++\nDESCRIPTION: Basic Arduino sketch that demonstrates LED blinking functionality by turning the built-in LED on and off with 1-second intervals. The code includes setup for pin configuration and main loop logic.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/ide/vscode.rst#2025-04-10_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n/**\n * Blink\n *\n * Turns on an LED on for one second,\n * then off for one second, repeatedly.\n */\n#include \"Arduino.h\"\n\n// Set LED_BUILTIN if it is not defined by Arduino framework\n// #define LED_BUILTIN 13\n\nvoid setup()\n{\n  // initialize LED digital pin as an output.\n  pinMode(LED_BUILTIN, OUTPUT);\n}\n\nvoid loop()\n{\n  // turn the LED on (HIGH is the voltage level)\n  digitalWrite(LED_BUILTIN, HIGH);\n\n  // wait for a second\n  delay(1000);\n\n  // turn the LED off by making the voltage LOW\n  digitalWrite(LED_BUILTIN, LOW);\n\n   // wait for a second\n  delay(1000);\n}\n```\n\n----------------------------------------\n\nTITLE: Unity Test Implementation for Arduino\nDESCRIPTION: Example test implementation using Unity framework with Arduino, including setup, teardown, and a simple test case.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/advanced/unit-testing/frameworks/custom/examples/custom_unity_library.rst#2025-04-10_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\n#include <Arduino.h>\n#include <unity.h>\n\nvoid setUp(void) {\n    // set stuff up here\n}\n\nvoid tearDown(void) {\n    // clean stuff up here\n}\n\nvoid simple_test(void)\n{\n    TEST_ASSERT_EQUAL(33, 33);\n}\n\nvoid setup()\n{\n    delay(2000);\n\n    UNITY_BEGIN();\n    RUN_TEST(simple_test);\n    UNITY_END();\n}\n\nvoid loop()\n{\n    delay(1000);\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Remote Device Monitor Command\nDESCRIPTION: Shows how to display available options for the monitor command, including help for various configuration options such as baud rate, parity, and flow control.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/remote/cmd_device.rst#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n> pio remote device monitor --help\n\nUsage: pio remote device monitor [OPTIONS]\n\nOptions:\n  -p, --port TEXT       Port, a number or a device name\n  -b, --baud INTEGER    Set baud rate, default=9600\n  --parity [N|E|O|S|M]  Set parity, default=N\n  --rtscts              Enable RTS/CTS flow control, default=Off\n  --xonxoff             Enable software flow control, default=Off\n  --rts [0|1]           Set initial RTS line state, default=0\n  --dtr [0|1]           Set initial DTR line state, default=0\n  --echo                Enable local echo, default=Off\n  --encoding TEXT       Set the encoding for the serial port (e.g. hexlify,\n                        Latin1, UTF-8), default: UTF-8\n  -f, --filter TEXT     Add text transformation\n  --eol [CR|LF|CRLF]    End of line mode, default=CRLF\n  --raw                 Do not apply any encodings/transformations\n  --exit-char INTEGER   ASCII code of special character that is used to exit\n                        the application, default=29 (DEC)\n  --menu-char INTEGER   ASCII code of special character that is used to\n                        control miniterm (menu), default=20 (DEC)\n  --quiet               Diagnostics: suppress non-error messages, default=Off\n  -h, --help            Show this message and exit.\n```\n\n----------------------------------------\n\nTITLE: Customizing Compilation Database with Python Script\nDESCRIPTION: Python script that customizes the compilation database generation by enabling toolchain includes and setting a custom output path using build variables.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/compile_commands.rst#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nImport(\"env\")\n\n# include toolchain paths\nenv.Replace(COMPILATIONDB_INCLUDE_TOOLCHAIN=True)\n\n# override compilation DB path\nenv.Replace(COMPILATIONDB_PATH=os.path.join(\"$BUILD_DIR\", \"compile_commands.json\"))\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Middleware in platformio.ini\nDESCRIPTION: This snippet shows how to configure a build middleware in the platformio.ini file. It specifies an extra script to be run before the build process.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/scripting/middlewares.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:build_middleware]\nextra_scripts = pre:extra_script.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Build Flags in PlatformIO INI File\nDESCRIPTION: This snippet demonstrates how to set custom debug build flags in a PlatformIO project configuration file. It shows how to adjust the optimization level and the amount of debug information generated by the compiler.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/env/options/debug/debug_build_flags.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:debug]\nplatform = ...\nboard = ...\n\n; Set optimization level and amount of debug information generated by the compiler\ndebug_build_flags = -O0 -ggdb3 -g3\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target in Python\nDESCRIPTION: Demonstrates how to use the AddCustomTarget method to create a custom build target in PlatformIO. This method allows specifying the target name, dependencies, actions, title, description, and build behavior.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/scripting/custom_targets.rst#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nImport(\"env\")\n\nenv.AddCustomTarget(\n    name,\n    dependencies,\n    actions,\n    title=None,\n    description=None,\n    always_build=True\n)\n```\n\n----------------------------------------\n\nTITLE: PlatformIO Config File with Value Interpolation\nDESCRIPTION: Example configuration file demonstrating various interpolation techniques including common options, custom options, and environment-specific configurations for Arduino Uno and ESP32 boards.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/interpolation.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n; COMMON options\n; Each \"[env:***]\" extends this \"[env]\" by default\n[env]\nframework = arduino\nbuild_flags = -D VERSION=1.2.3\n\n; CUSTOM options\n; You need manually inject these options into a section\n; using ${extra.<name_of_option>} (see below)\n[extra]\nlib_deps_builtin =\n  SPI\n  Wire\nlib_deps_external =\n  bblanchon/ArduinoJson@>5.6.0\n\n[env:uno]\nplatform = atmelavr\nboard = uno\nlib_deps =\n  ${extra.lib_deps_builtin}\n  ${extra.lib_deps_external}\nplatform_packages =\n  platformio/tool-simavr\ntest_speed = 9600\ntest_testing_command =\n  ${platformio.packages_dir}/tool-simavr/bin/simavr\n  -m\n  atmega328p\n  -f\n  16000000L\n  ${platformio.build_dir}/${this.__env__}/firmware.elf\n\n[env:esp32dev]\nplatform = platformio/espressif32\nboard = esp32dev\nbuild_flags = ${env.build_flags} -Wall\nlib_deps =\n  ${extra.lib_deps_builtin}\n  ${extra.lib_deps_external}\n  knolleary/PubSubClient @ ~2.6\n  paulstoffregen/OneWire @ ^2.3.5\n```\n\n----------------------------------------\n\nTITLE: Basic Arduino Sketch for ESP32\nDESCRIPTION: A simple Arduino sketch that prints 'Hello world!' to the serial monitor every second.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/tutorials/espressif32/arduino_debugging_unit_testing.rst#2025-04-10_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n#include <Arduino.h>\n\nvoid setup()\n{\n    Serial.begin(9600);\n}\n\nvoid loop()\n{\n    Serial.println(\"Hello world!\");\n    delay(1000);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing PlatformIO Core using Python pip\nDESCRIPTION: This command installs or upgrades PlatformIO Core to the latest stable version using Python's pip package manager. It uses the -U flag to upgrade to the newest version if PlatformIO is already installed.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/installation/methods/pypi.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m pip install -U platformio\n```\n\n----------------------------------------\n\nTITLE: Implementing WiFi SoftAP in C with ESP-IDF Framework\nDESCRIPTION: A complete implementation of a WiFi soft access point using the ESP-IDF framework. The code initializes WiFi in AP mode, handles connection events, and sets up the required configurations for broadcasting an access point with specified credentials.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/tutorials/espressif32/espidf_debugging_unit_testing_analysis.rst#2025-04-10_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n/*  WiFi softAP Example\n\n   This example code is in the Public Domain (or CC0 licensed, at your option.)\n\n   Unless required by applicable law or agreed to in writing, this\n   software is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n   CONDITIONS OF ANY KIND, either express or implied.\n*/\n#include <string.h>\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n#include \"esp_mac.h\"\n#include \"esp_wifi.h\"\n#include \"esp_event.h\"\n#include \"esp_log.h\"\n#include \"nvs_flash.h\"\n\n#include \"lwip/err.h\"\n#include \"lwip/sys.h\"\n\n/* The examples use WiFi configuration that you can set via project configuration menu.\n\n   If you'd rather not, just change the below entries to strings with\n   the config you want - ie #define EXAMPLE_WIFI_SSID \"mywifissid\"\n*/\n#define EXAMPLE_ESP_WIFI_SSID      \"mywifissid\"\n#define EXAMPLE_ESP_WIFI_PASS      \"mywifipass\"\n#define EXAMPLE_ESP_WIFI_CHANNEL   1\n#define EXAMPLE_MAX_STA_CONN       4\n\nstatic const char *TAG = \"wifi softAP\";\n\nstatic void wifi_event_handler(void* arg, esp_event_base_t event_base,\n                                    int32_t event_id, void* event_data)\n{\n    if (event_id == WIFI_EVENT_AP_STACONNECTED) {\n        wifi_event_ap_staconnected_t* event = (wifi_event_ap_staconnected_t*) event_data;\n        ESP_LOGI(TAG, \"station \"MACSTR\" join, AID=%d\",\n                 MAC2STR(event->mac), event->aid);\n    } else if (event_id == WIFI_EVENT_AP_STADISCONNECTED) {\n        wifi_event_ap_stadisconnected_t* event = (wifi_event_ap_stadisconnected_t*) event_data;\n        ESP_LOGI(TAG, \"station \"MACSTR\" leave, AID=%d\",\n                 MAC2STR(event->mac), event->aid);\n    }\n}\n\nvoid wifi_init_softap(void)\n{\n    ESP_ERROR_CHECK(esp_netif_init());\n    ESP_ERROR_CHECK(esp_event_loop_create_default());\n    esp_netif_create_default_wifi_ap();\n\n    wifi_init_config_t cfg = WIFI_INIT_CONFIG_DEFAULT();\n    ESP_ERROR_CHECK(esp_wifi_init(&cfg));\n\n    ESP_ERROR_CHECK(esp_event_handler_instance_register(WIFI_EVENT,\n                                                        ESP_EVENT_ANY_ID,\n                                                        &wifi_event_handler,\n                                                        NULL,\n                                                        NULL));\n\n    wifi_config_t wifi_config = {\n        .ap = {\n            .ssid = EXAMPLE_ESP_WIFI_SSID,\n            .ssid_len = strlen(EXAMPLE_ESP_WIFI_SSID),\n            .channel = EXAMPLE_ESP_WIFI_CHANNEL,\n            .password = EXAMPLE_ESP_WIFI_PASS,\n            .max_connection = EXAMPLE_MAX_STA_CONN,\n            .authmode = WIFI_AUTH_WPA_WPA2_PSK,\n            .pmf_cfg = {\n                    .required = false,\n            },\n        },\n    };\n    if (strlen(EXAMPLE_ESP_WIFI_PASS) == 0) {\n        wifi_config.ap.authmode = WIFI_AUTH_OPEN;\n    }\n\n    ESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_AP));\n    ESP_ERROR_CHECK(esp_wifi_set_config(WIFI_IF_AP, &wifi_config));\n    ESP_ERROR_CHECK(esp_wifi_start());\n\n    ESP_LOGI(TAG, \"wifi_init_softap finished. SSID:%s password:%s channel:%d\",\n             EXAMPLE_ESP_WIFI_SSID, EXAMPLE_ESP_WIFI_PASS, EXAMPLE_ESP_WIFI_CHANNEL);\n}\n\nvoid app_main(void)\n{\n    //Initialize NVS\n    esp_err_t ret = nvs_flash_init();\n    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND) {\n      ESP_ERROR_CHECK(nvs_flash_erase());\n      ret = nvs_flash_init();\n    }\n    ESP_ERROR_CHECK(ret);\n\n    ESP_LOGI(TAG, \"ESP_WIFI_MODE_AP\");\n    wifi_init_softap();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Navigating to Project Directory\nDESCRIPTION: Commands to create a new directory for a PlatformIO project and navigate to it using the command line interface.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/quickstart.rst#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# create new directory\n> mkdir path_to_the_new_directory\n\n# go to it\n> cd path_to_the_new_directory\n```\n\n----------------------------------------\n\nTITLE: PlatformIO Custom Board JSON Configuration Structure\nDESCRIPTION: Example JSON structure for defining a custom embedded board in PlatformIO. Includes build settings, framework support, platform compatibility, and upload parameters. The configuration uses key fields like 'build', 'frameworks', 'platforms', and 'upload' to specify board characteristics.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/creating_board.rst#2025-04-10_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"extra_flags\": \"-DHELLO_PLATFORMIO\",\n    \"f_cpu\": \"16000000L\",\n    \"hwids\": [\n      [\n        \"0x1234\",\n        \"0x0013\"\n      ],\n      [\n        \"0x4567\",\n        \"0x0013\"\n      ]\n    ],\n    \"mcu\": \"%MCU_TYPE_HERE%\"\n  },\n  \"frameworks\": [\"%LIST_WITH_SUPPORTED_FRAMEWORKS%\"],\n  \"platforms\": [\"%LIST_WITH_COMPATIBLE_PLATFORMS%\"],\n  \"name\": \"My Test Board\",\n  \"upload\": {\n    \"maximum_ram_size\": 2048,\n    \"maximum_size\": 32256\n  },\n  \"url\": \"http://example.com\",\n  \"vendor\": \"MyCompany\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Environment PlatformIO Project\nDESCRIPTION: Example of a complete platformio.ini file demonstrating configuration for multiple development boards (NodeMCU and BluePill) with custom build flags, library dependencies, monitoring options, and debug settings. Shows common section sharing and variable interpolation.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/index.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[platformio]\ndefault_envs = nodemcuv2\n\n; custom common options\n[common]\nbuild_flags =\n    -D VERSION=1.2.3\n    -D DEBUG=1\nlib_deps_builtin =\n    SPI\n    Wire\nlib_deps_external =\n    bblanchon/ArduinoJson @ ~5.6,!=5.4\n    https://github.com/gioblu/PJON.git#v2.0\n    IRremoteESP8266=https://github.com/markszabo/IRremoteESP8266/archive/master.zip\n\n[env:nodemcuv2]\nplatform = espressif8266\nframework = arduino\nboard = nodemcuv2\n\n; Build options\nbuild_flags =\n    ${common.build_flags}\n    -DSSID_NAME=HELLO\n    -DSSID_PASWORD=WORLD\n\n; Library options\nlib_deps =\n    ${common.lib_deps_builtin}\n    ${common.lib_deps_external}\n    https://github.com/me-no-dev/ESPAsyncTCP.git\n    knolleary/PubSubClient@^2.8\n    paulstoffregen/OneWire\n\n; Serial Monitor options\nmonitor_speed = 115200\nmonitor_flags =\n    --encoding\n    hexlify\n\n; Unit Testing options\ntest_ignore = test_desktop\n\n[env:bluepill_f103c8]\nplatform = ststm32\nframework = arduino\nboard = bluepill_f103c8\n\n; Library options\nlib_deps = ${common.lib_deps_external}\n\n; Debug options\ndebug_tool = custom\ndebug_server =\n    ${platformio.packages_dir}/tool-jlink/JLinkGDBServer\n    -singlerun\n    -if\n    SWD\n    -select\n    USB\n    -port\n    2331\n    -device\n    STM32F103C8\n\n; Unit Testing options\ntest_ignore = test_desktop\n```\n\n----------------------------------------\n\nTITLE: Listing All Available Embedded Boards in PlatformIO\nDESCRIPTION: Example showing how to list all available pre-configured embedded boards in PlatformIO, displaying information like board ID, MCU, frequency, memory, and name.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/cmd_boards.rst#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> pio boards\n\nPlatform: atmelavr\n---------------------------------------------------------------------------\nID                    MCU           Frequency  Flash   RAM    Name\n---------------------------------------------------------------------------\nbtatmega168           atmega168     16MHz     14K    1K    Arduino BT ATmega168\nbtatmega328           atmega328p    16MHz     28K    2K    Arduino BT ATmega328\ndiecimilaatmega168    atmega168     16MHz     14K    1K    Arduino Duemilanove or Diecimila ATmega168\ndiecimilaatmega328    atmega328p    16MHz     30K    2K    Arduino Duemilanove or Diecimila ATmega328\nesplora               atmega32u4    16MHz     28K    2K    Arduino Esplora\nethernet              atmega328p    16MHz     31K    2K    Arduino Ethernet\n...\n```\n\n----------------------------------------\n\nTITLE: RestructuredText Board Documentation\nDESCRIPTION: Documentation structured in RestructuredText format presenting technical specifications of development boards in tabular format. Each table includes headers for Name, Platform, Debug, MCU, Frequency, Flash and RAM specifications.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debugging.rst#2025-04-10_snippet_8\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. list-table::\n    :header-rows:  1\n\n    * - Name\n      - Platform\n      - Debug\n      - MCU\n      - Frequency\n      - Flash\n      - RAM\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Workflow for PlatformIO Run Command\nDESCRIPTION: This YAML configuration sets up a GitHub Actions workflow to build a PlatformIO project using the 'pio run' command. It includes steps for checking out the code, caching dependencies, setting up Python, installing PlatformIO Core, and running the build process.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/ci/github-actions.rst#2025-04-10_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: PlatformIO CI\n\non: [push]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cache/pip\n            ~/.platformio/.cache\n          key: ${{ runner.os }}-pio\n      - uses: actions/setup-python@v5\n        with:\n          python-version: '3.11'\n      - name: Install PlatformIO Core\n        run: pip install --upgrade platformio\n\n      - name: Build PlatformIO Project\n        run: pio run\n```\n\n----------------------------------------\n\nTITLE: Installing Packages from Local Folders in PlatformIO\nDESCRIPTION: Demonstrates how to install packages from local folders using file:// or symlink:// prefixes. The package folder must contain a manifest file with name and version properties.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/pkg/cmd_install.rst#2025-04-10_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n# Unix, hard copying\nfile:///local/path/to/the/package/dir\n\n# Windows, symbolic link\nsymlink://C:/local/path/to/the/package/dir\n\n# Custom package folder name \"SomeLib\" in the storage\nSomeLib=file:///local/path/to/the/package/dir\n```\n\n----------------------------------------\n\nTITLE: Writing Unit Tests for Calculator Library with Unity Framework\nDESCRIPTION: Test file that uses the Unity testing framework to verify the calculator library functions. It includes setUp and tearDown functions, individual test functions for each calculator operation, and an app_main function that runs all the tests. Note that the division test initially contains an incorrect expected value.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/tutorials/espressif32/espidf_debugging_unit_testing_analysis.rst#2025-04-10_snippet_5\n\nLANGUAGE: c\nCODE:\n```\n#include <calculator.h>\n#include <unity.h>\n\nvoid setUp(void)\n{\n  // set stuff up here\n}\n\nvoid tearDown(void)\n{\n  // clean stuff up here\n}\n\nvoid test_function_calculator_addition(void)\n{\n  TEST_ASSERT_EQUAL(32, addition(25, 7));\n}\n\nvoid test_function_calculator_subtraction(void)\n{\n  TEST_ASSERT_EQUAL(20, subtraction(23, 3));\n}\n\nvoid test_function_calculator_multiplication(void)\n{\n  TEST_ASSERT_EQUAL(50, multiplication(25, 2));\n}\n\nvoid test_function_calculator_division(void)\n{\n  TEST_ASSERT_EQUAL(32, division(100, 3));\n}\n\nvoid app_main()\n{\n  UNITY_BEGIN();\n\n  RUN_TEST(test_function_calculator_addition);\n  RUN_TEST(test_function_calculator_subtraction);\n  RUN_TEST(test_function_calculator_multiplication);\n  RUN_TEST(test_function_calculator_division);\n\n  UNITY_END();\n}\n```\n\n----------------------------------------\n\nTITLE: Restructured Text Board Specifications Tables\nDESCRIPTION: A series of RestructuredText tables documenting development board specifications organized by manufacturer. Each table includes board name, platform, debug capabilities, MCU type, frequency, flash memory, and RAM specifications.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debugging.rst#2025-04-10_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. list-table::\n    :header-rows:  1\n\n    * - Name\n      - Platform\n      - Debug\n      - MCU\n      - Frequency\n      - Flash\n      - RAM\n    * - :ref:`board_nordicnrf51_bbcmicrobit`\n      - :ref:`platform_nordicnrf51`\n      - On-board\n      - NRF51822\n      - 16MHz\n      - 256KB\n      - 16KB\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Ports in PlatformIO Project Configuration\nDESCRIPTION: Example configuration showing how to set upload_port with pattern matching in platformio.ini. Demonstrates multiple pattern options for port specification including wildcard matching for USB ports and specific COM port selection.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/env/options/upload/upload_port.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:uno]\nplatform = atmelavr\nframework = arduino\n; any port that starts with /dev/ttyUSB\nupload_port = /dev/ttyUSB*\n\n; COM1 or COM3\nupload_port = COM[13]\n```\n\n----------------------------------------\n\nTITLE: RST Table Structure for STM32 Board Specifications\nDESCRIPTION: ReStructuredText formatted tables containing specifications for various STM32 development boards. Each table includes board name, platform, debug capabilities, MCU model, frequency, flash size, and RAM size.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/frameworks/stm32cube.rst#2025-04-10_snippet_6\n\nLANGUAGE: rst\nCODE:\n```\n.. list-table::\n    :header-rows:  1\n\n    * - Name\n      - Platform\n      - Debug\n      - MCU\n      - Frequency\n      - Flash\n      - RAM\n    * - :ref:`board_ststm32_rhombio_l476dmw1k`\n      - :ref:`platform_ststm32`\n      - On-board\n      - STM32L476VGT6\n      - 80MHz\n      - 1MB\n      - 128KB\n```\n\n----------------------------------------\n\nTITLE: Unit Tests for Arduino String Class on ESP32\nDESCRIPTION: A set of unit tests for the Arduino String class, including concatenation, substring, case conversion, and replacement operations.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/tutorials/espressif32/arduino_debugging_unit_testing.rst#2025-04-10_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n#include <Arduino.h>\n#include <unity.h>\n\nString STR_TO_TEST;\n\nvoid setUp(void) {\n    // set stuff up here\n    STR_TO_TEST = \"Hello, world!\";\n}\n\nvoid tearDown(void) {\n    // clean stuff up here\n    STR_TO_TEST = \"\";\n}\n\nvoid test_string_concat(void) {\n    String hello = \"Hello, \";\n    String world = \"world!\";\n    TEST_ASSERT_EQUAL_STRING(STR_TO_TEST.c_str(), (hello + world).c_str());\n}\n\nvoid test_string_substring(void) {\n    TEST_ASSERT_EQUAL_STRING(\"Hello\", STR_TO_TEST.substring(0, 5).c_str());\n}\n\nvoid test_string_index_of(void) {\n    TEST_ASSERT_EQUAL(7, STR_TO_TEST.indexOf('w'));\n}\n\nvoid test_string_equal_ignore_case(void) {\n    TEST_ASSERT_TRUE(STR_TO_TEST.equalsIgnoreCase(\"HELLO, WORLD!\"));\n}\n\nvoid test_string_to_upper_case(void) {\n    STR_TO_TEST.toUpperCase();\n    TEST_ASSERT_EQUAL_STRING(\"HELLO, WORLD!\", STR_TO_TEST.c_str());\n}\n\nvoid test_string_replace(void) {\n    STR_TO_TEST.replace('!', '?');\n    TEST_ASSERT_EQUAL_STRING(\"Hello, world?\", STR_TO_TEST.c_str());\n}\n\nvoid setup()\n{\n    delay(2000); // service delay\n    UNITY_BEGIN();\n\n    RUN_TEST(test_string_concat);\n    RUN_TEST(test_string_substring);\n    RUN_TEST(test_string_index_of);\n    RUN_TEST(test_string_equal_ignore_case);\n    RUN_TEST(test_string_to_upper_case);\n    RUN_TEST(test_string_replace);\n\n    UNITY_END(); // stop unit testing\n}\n\nvoid loop()\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Calculator Library Functions in C\nDESCRIPTION: Implementation file for the calculator library that defines the four basic arithmetic operations: addition, subtraction, multiplication, and division. Each function takes two integer parameters and returns an integer result.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/tutorials/espressif32/espidf_debugging_unit_testing_analysis.rst#2025-04-10_snippet_4\n\nLANGUAGE: c\nCODE:\n```\n#include \"calculator.h\"\n\nint addition(int a, int b)\n{\n  return a + b;\n}\n\nint subtraction(int a, int b)\n{\n  return a - b;\n}\n\nint multiplication(int a, int b)\n{\n  return a * b;\n}\n\nint division(int a, int b)\n{\n  return a / b;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Multiple Libraries with One Command\nDESCRIPTION: Example showing how to install multiple libraries in one command and add them to project dependencies.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/pkg/cmd_install.rst#2025-04-10_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npio pkg install --library \"bblanchon/ArduinoJson\" --library \"etlcpp/Embedded Template Library\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Build System Hooks in Python\nDESCRIPTION: Python script demonstrating various pre and post build actions including program building, uploading, and file-specific operations. Shows how to add callbacks for different build targets and implement custom actions.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/scripting/actions.rst#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nImport(\"env\")\n\nprint(\"Current CLI targets\", COMMAND_LINE_TARGETS)\nprint(\"Current Build targets\", BUILD_TARGETS)\n\ndef post_program_action(source, target, env):\n    print(\"Program has been built!\")\n    program_path = target[0].get_abspath()\n    print(\"Program path\", program_path)\n    # Use case: sign a firmware, do any manipulations with ELF, etc\n    # env.Execute(f\"sign --elf {program_path}\")\n\nenv.AddPostAction(\"$PROGPATH\", post_program_action)\n\n#\n# Upload actions\n#\n\ndef before_upload(source, target, env):\n    print(\"before_upload\")\n    # do some actions\n\n    # call Node.JS or other script\n    env.Execute(\"node --version\")\n\n\ndef after_upload(source, target, env):\n    print(\"after_upload\")\n    # do some actions\n\nenv.AddPreAction(\"upload\", before_upload)\nenv.AddPostAction(\"upload\", after_upload)\n\n#\n# Custom actions when building program/firmware\n#\n\nenv.AddPreAction(\"buildprog\", callback...)\nenv.AddPostAction(\"buildprog\", callback...)\n\n#\n# Custom actions for specific files/objects\n#\n\nenv.AddPreAction(\"$PROGPATH\", callback...)\nenv.AddPreAction(\"$BUILD_DIR/${PROGNAME}.elf\", [callback1, callback2,...])\nenv.AddPostAction(\"$BUILD_DIR/${PROGNAME}.hex\", callback...)\n\n# custom action before building SPIFFS image. For example, compress HTML, etc.\nenv.AddPreAction(\"$BUILD_DIR/spiffs.bin\", callback...)\n\n# custom action for project's main.cpp\nenv.AddPostAction(\"$BUILD_DIR/src/main.cpp.o\", callback...)\n\n# Custom HEX from ELF\nenv.AddPostAction(\n    \"$BUILD_DIR/${PROGNAME}.elf\",\n    env.VerboseAction(\" \".join([\n        \"$OBJCOPY\", \"-O\", \"ihex\", \"-R\", \".eeprom\",\n        \"$BUILD_DIR/${PROGNAME}.elf\", \"$BUILD_DIR/${PROGNAME}.hex\"\n    ]), \"Building $BUILD_DIR/${PROGNAME}.hex\")\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Adafruit QT Py ESP32 Environment in PlatformIO\nDESCRIPTION: Basic configuration for the Adafruit QT Py ESP32 board in platformio.ini file. This defines the project environment specifying the platform (espressif32) and board identifier.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/adafruit_qtpy_esp32.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_qtpy_esp32]\nplatform = espressif32\nboard = adafruit_qtpy_esp32\n```\n\n----------------------------------------\n\nTITLE: Configuring MCU Type with board_build.mcu Parameter in PlatformIO\nDESCRIPTION: The board_build.mcu parameter defines the microcontroller type used by the compiler to recognize the MCU architecture. This string parameter must match the specific naming convention of the platform being used, with valid values listed in the Boards section of the platforms documentation.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/env/options/platform/board_build.mcu.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nboard_build.mcu\n```\n\n----------------------------------------\n\nTITLE: ESP32 Board Specifications Table in RST Format\nDESCRIPTION: A reStructuredText table listing various ESP32 development boards with their specifications including platform, connection type, processor variant, clock speed, flash memory, and RAM.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/iot-bus-jtag.rst#2025-04-10_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n* - :ref:`board_espressif32_lolin_s3`\n      - :ref:`platform_espressif32`\n      - External\n      - ESP32S3\n      - 240MHz\n      - 16MB\n      - 320KB\n    * - :ref:`board_espressif32_lolin_s3_mini`\n      - :ref:`platform_espressif32`\n      - External\n      - ESP32S3\n      - 240MHz\n      - 4MB\n      - 320KB\n    * - :ref:`board_espressif32_lolin_s3_pro`\n      - :ref:`platform_espressif32`\n      - External\n      - ESP32S3\n      - 240MHz\n      - 16MB\n      - 320KB\n```\n\n----------------------------------------\n\nTITLE: Implementing Calculator Library Functions in C\nDESCRIPTION: This file implements the functions for the calculator library, including addition, subtraction, and multiplication operations.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/tutorials/nordicnrf52/zephyr_debugging_unit_testing_inspect.rst#2025-04-10_snippet_5\n\nLANGUAGE: C\nCODE:\n```\n#include \"calculator.h\"\n\nint add(int a, int b)\n{\n    return a + b;\n}\n\nint sub(int a, int b)\n{\n    return a - b;\n}\n\nint mul(int a, int b)\n{\n    return a * b;\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Manager CLI Help in PlatformIO (Bash)\nDESCRIPTION: This snippet shows how to display help information for the PlatformIO Project Manager CLI. It includes commands to show general help and command-specific help.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/project/index.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio project --help\npio project COMMAND --help\n```\n\n----------------------------------------\n\nTITLE: Configuring Development Platforms in PlatformIO (INI)\nDESCRIPTION: Examples of specifying the Espressif 32 development platform in PlatformIO configuration files. Demonstrates various versioning strategies and source options, including backwards-compatible updates, exact versions, and Git-based sources.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/env/options/platform/platform.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:recommended_specification]\n; allow backwards-compatible new functionality and bug-fixes\nplatform = platformio/espressif32@^6.1.0\n\n[env:allow_only_bug_fixes]\nplatform = platformio/espressif32@~6.1.0\n\n[env:exact_version]\nplatform = platformio/espressif32@6.1.0\n\n[env:latest_version]\n; not recommended as it does not ensure that\n; - builds are repeatable\n; - all developers who checkout the project will build against the same platform version\nplatform = platformio/espressif32\n\n[env:development_verion_by_git]\nplatform = https://github.com/platformio/platform-espressif32.git\n\n[env:custom_git_branch]\nplatform = https://github.com/platformio/platform-espressif32.git#master\n\n[env:specific_git_commit]\nplatform = https://github.com/platformio/platform-espressif32.git#f8340a2081a31c2ac8ed2b16907f2a21dc8897d4\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Platform Packages in PlatformIO\nDESCRIPTION: This code snippet demonstrates how to configure custom platform packages for different build environments in a PlatformIO project. It shows examples of overriding default toolchains, using upstream Git versions of frameworks, and including external packages.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/env/options/platform/platform_packages.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:override_default_toolchain]\nplatform = atmelavr\nplatform_packages =\n  ; use GCC AVR 5.0+\n  toolchain-gccarmnoneeabi@>1.50000.0\n\n[env:override_framework]\nplatform = espressif8266\nplatform_packages =\n  ; use upstream Git version\n  framework-arduinoespressif8266 @ https://github.com/esp8266/Arduino.git\n\n[env:external_package]\nplatform = ststm32\nplatform_packages =\n  ; latest openOCD from PlatformIO Package Registry\n  tool-openocd\n\n  ; source code of ST-Link\n  tool-stlink-source @ https://github.com/texane/stlink.git\n```\n\n----------------------------------------\n\nTITLE: Searching for Arduino-based I2C libraries\nDESCRIPTION: Example of using the 'pio lib search' command with multiple options to find Arduino-compatible libraries related to I2C protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/lib/cmd_search.rst#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npio lib search \"i2c\" --framework=\"arduino\"\n```\n\n----------------------------------------\n\nTITLE: Launching GDB Instance with PlatformIO Debug\nDESCRIPTION: Example of launching a GDB instance and loading initial configuration for a PlatformIO project, demonstrating the debug process.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/cmd_debug.rst#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n> pio debug --interface=gdb -- -x .pioinit\n\n...\nLoading section .text, size 0x2c98 lma 0x4000\nLoading section .ramfunc, size 0x60 lma 0x6c98\nLoading section .data, size 0x100 lma 0x6cf8\nStart address 0x47b0, load size 11768\nTransfer rate: 4 KB/sec, 3922 bytes/write.\ntarget halted due to debug-request, current mode: Thread\nxPSR: 0x81000000 pc: 0x000028f4 msp: 0x20002c00\ntarget halted due to debug-request, current mode: Thread\nxPSR: 0x81000000 pc: 0x000028f4 msp: 0x20002c00\nBreakpoint 2 at 0x413a: file src/main.cpp, line 26.\n```\n\n----------------------------------------\n\nTITLE: Implementing Blink Example in C++ for Arduino\nDESCRIPTION: This code snippet demonstrates a basic Blink example for Arduino-based boards. It toggles the built-in LED on and off with a 1-second interval.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/ide/clion.rst#2025-04-10_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n/**\n * Blink\n *\n * Turns on an LED on for one second,\n * then off for one second, repeatedly.\n */\n#include \"Arduino.h\"\n\n// Set LED_BUILTIN if it is not defined by Arduino framework\n// #define LED_BUILTIN 13\n\nvoid setup()\n{\n  // initialize LED digital pin as an output.\n  pinMode(LED_BUILTIN, OUTPUT);\n}\n\nvoid loop()\n{\n  // turn the LED on (HIGH is the voltage level)\n  digitalWrite(LED_BUILTIN, HIGH);\n\n  // wait for a second\n  delay(1000);\n\n  // turn the LED off by making the voltage LOW\n  digitalWrite(LED_BUILTIN, LOW);\n\n   // wait for a second\n  delay(1000);\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring specific test suites in PlatformIO\nDESCRIPTION: Examples of using ignore options to exclude specific test suites from running based on path patterns.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/cmd_test.rst#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npio test --ignore \"embedded/*\" -i \"test_suite[13]\"\n```\n\n----------------------------------------\n\nTITLE: Python Script for Custom Firmware Name Generation\nDESCRIPTION: A Python script that modifies the program name at build time by retrieving the custom_prog_version value from the project configuration and applying it to the firmware name. This script is executed before the build process.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/scripting/examples/custom_program_name.rst#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nImport(\"env\")\n\nenv.Replace(PROGNAME=\"firmware_%s\" % env.GetProjectOption(\"custom_prog_version\"))\n```\n\n----------------------------------------\n\nTITLE: Updating Board Hardware IDs using Python Script\nDESCRIPTION: Python script that overrides the default board hardware IDs (VID/PID pairs) using the PlatformIO board configuration system.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/scripting/examples/override_board_configuration.rst#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nImport(\"env\")\n\nboard_config = env.BoardConfig()\n# should be array of VID:PID pairs\nboard_config.update(\"build.hwids\", [\n  [\"0x2341\", \"0x0243\"],  # 1st pair\n  [\"0x2A03\", \"0x0043\"],  # 2nd pair, etc.\n])\n```\n\n----------------------------------------\n\nTITLE: Creating Target with Custom Options\nDESCRIPTION: Shows how to create a custom 'ping' target that uses a host specified in the project configuration. This example demonstrates reading custom options and executing shell commands.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/scripting/custom_targets.rst#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nImport(\"env\")\n\nhost = env.GetProjectOption(\"custom_ping_host\")\n\ndef mytarget_callback(*args, **kwargs):\n    print(\"Hello PlatformIO!\")\n    env.Execute(\"ping \" + host)\n\n\nenv.AddCustomTarget(\"ping\", None, mytarget_callback)\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Environments in platformio.ini\nDESCRIPTION: This example shows how to configure default environments in a platformio.ini file. It specifies that only the 'uno' and 'nodemcu' environments should be processed by default when running PlatformIO commands, while 'teensy31' and 'lpmsp430g2553' environments will be ignored unless explicitly specified.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/platformio/options/generic/default_envs.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[platformio]\ndefault_envs = uno, nodemcu\n\n[env:uno]\nplatform = atmelavr\nframework = arduino\nboard = uno\n\n[env:nodemcu]\nplatform = espressif8266\nframework = arduino\nboard = nodemcu\n\n[env:teensy31]\nplatform = teensy\nframework = arduino\nboard = teensy31\n\n[env:lpmsp430g2553]\nplatform = timsp430\nframework = arduino\nboard = lpmsp430g2553\nbuild_flags = -D LED_BUILTIN=RED_LED\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Device Monitor Filter in Python\nDESCRIPTION: Example implementation of a custom device monitor filter that extends the DeviceMonitorFilterBase class to process incoming and outgoing text. Custom filters must be defined in Python files with a 'filter_' prefix.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/device/cmd_monitor.rst#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom platformio.public import DeviceMonitorFilterBase\n\n\nclass Demo(DeviceMonitorFilterBase):\n    NAME = \"demo\"\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        print(\"Demo filter is loaded\")\n\n    def rx(self, text):\n        return f\"Received: {text}\\n\"\n\n    def tx(self, text):\n        print(f\"Sent: {text}\\n\")\n        return text\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy and SSL Settings for PlatformIO Core\nDESCRIPTION: This snippet demonstrates how to disable proxy server certificate verification and set up proxy servers for HTTP, HTTPS, and ALL_PROXY. It includes examples for both Unix and Windows environments.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/installation/proxy-configuration.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Disable proxy server certificate verification\n$ pio settings set enable_proxy_strict_ssl false\n\n# or using global environment variable\n$ export PLATFORMIO_SETTING_ENABLE_PROXY_STRICT_SSL=\"false\"\n\n#\n# Configure proxy server\n#\n\n# Unix\n$ export HTTP_PROXY=\"HTTP_PROXY=http://user:pass@10.10.1.10:3128/\"\n# without authentication\n$ export HTTPS_PROXY=\"http://10.10.1.10:1080\"\n$ export ALL_PROXY=\"socks5://10.10.1.10:3434\"\n\n# Windows\nset HTTP_PROXY=http://user:pass@10.10.1.10:3128/\n```\n\n----------------------------------------\n\nTITLE: Arduino Blink Example Source Code\nDESCRIPTION: Cross-platform implementation of a basic Arduino Blink example that works across multiple board types. The code toggles the built-in LED on and off with a one-second delay between states.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/quickstart.rst#2025-04-10_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\n/**\n * Blink\n *\n * Turns on an LED on for one second,\n * then off for one second, repeatedly.\n */\n#include \"Arduino.h\"\n\n#ifndef LED_BUILTIN\n#define LED_BUILTIN 13\n#endif\n\nvoid setup()\n{\n  // initialize LED digital pin as an output.\n  pinMode(LED_BUILTIN, OUTPUT);\n}\n\nvoid loop()\n{\n  // turn the LED on (HIGH is the voltage level)\n  digitalWrite(LED_BUILTIN, HIGH);\n\n  // wait for a second\n  delay(1000);\n\n  // turn the LED off by making the voltage LOW\n  digitalWrite(LED_BUILTIN, LOW);\n\n   // wait for a second\n  delay(1000);\n}\n```\n\n----------------------------------------\n\nTITLE: Pre-Build Script Environment Configuration in Python\nDESCRIPTION: Example pre-build script demonstrating how to import and modify the global construction environment. Shows debug output and appending of build flags that will affect all build processes.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/scripting/construction_environments.rst#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Import the current working construction\n# environment to the `env` variable.\n# alias of `env = DefaultEnvironment()`\nImport(\"env\")\n\n# Dump construction environment (for debug purpose)\nprint(env.Dump())\n\n# append extra flags to global build environment\n# which later will be used to build:\n# - project source code\n# - frameworks\n# - dependent libraries\nenv.Append(CPPDEFINES=[\n  \"MACRO_1_NAME\",\n  (\"MACRO_2_NAME\", \"MACRO_2_VALUE\")\n])\n```\n\n----------------------------------------\n\nTITLE: Generating ESP32 Board Specification Table in reStructuredText\nDESCRIPTION: This code snippet creates a table in reStructuredText format listing various ESP32 development boards and their specifications. It includes details such as board name, debug capability, MCU type, clock frequency, flash memory size, and RAM capacity.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/espressif32.rst#2025-04-10_snippet_5\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. list-table::\n    :header-rows:  1\n\n    * - Name\n      - Debug\n      - MCU\n      - Frequency\n      - Flash\n      - RAM\n    * - :ref:`board_espressif32_lolin_s3`\n      - External\n      - ESP32S3\n      - 240MHz\n      - 16MB\n      - 320KB\n    * - :ref:`board_espressif32_lolin_s3_mini`\n      - External\n      - ESP32S3\n      - 240MHz\n      - 4MB\n      - 320KB\n    * - :ref:`board_espressif32_lolin_s3_pro`\n      - External\n      - ESP32S3\n      - 240MHz\n      - 16MB\n      - 320KB\n    * - :ref:`board_espressif32_lolin32`\n      - External\n      - ESP32\n      - 240MHz\n      - 4MB\n      - 320KB\n    * - :ref:`board_espressif32_lolin32_lite`\n      - External\n      - ESP32\n      - 240MHz\n      - 4MB\n      - 320KB\n    * - :ref:`board_espressif32_wemosbat`\n      - External\n      - ESP32\n      - 240MHz\n      - 4MB\n      - 320KB\n```\n\n----------------------------------------\n\nTITLE: Writing Unit Tests for Calculator Library in C\nDESCRIPTION: This file contains unit tests for the calculator library using the Unity testing framework. It tests addition, subtraction, multiplication, and division operations.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/tutorials/nordicnrf52/zephyr_debugging_unit_testing_inspect.rst#2025-04-10_snippet_6\n\nLANGUAGE: C\nCODE:\n```\n#include <calculator.h>\n#include <unity.h>\n\nvoid setUp(void)\n{\n  // set stuff up here\n}\n\nvoid tearDown(void)\n{\n  // clean stuff up here\n}\n\nvoid test_function_calculator_addition(void)\n{\n  TEST_ASSERT_EQUAL(32, add(25, 7));\n}\n\nvoid test_function_calculator_subtraction(void)\n{\n  TEST_ASSERT_EQUAL(20, sub(23, 3));\n}\n\nvoid test_function_calculator_multiplication(void)\n{\n  TEST_ASSERT_EQUAL(50, mul(25, 2));\n}\n\nvoid test_function_calculator_division(void)\n{\n  TEST_ASSERT_EQUAL(32, div(100, 3));\n}\n\nvoid main()\n{\n  UNITY_BEGIN();\n\n  RUN_TEST(test_function_calculator_addition);\n  RUN_TEST(test_function_calculator_subtraction);\n  RUN_TEST(test_function_calculator_multiplication);\n  RUN_TEST(test_function_calculator_division);\n\n  UNITY_END();\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Specific Platforms in PlatformIO\nDESCRIPTION: These examples demonstrate how to update specific development platforms using the 'pio pkg update' command. You can specify platform versions or use Git repository URLs.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/pkg/cmd_update.rst#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npio pkg update -p \"aceinna/aceinna_imu@^1.3.8\" -p \"platformio/atmelavr\"\npio pkg update --platform \"https://github.com/platformio/platform-sifive.git\"\n```\n\n----------------------------------------\n\nTITLE: Displaying ESP32 Board Information Table in reStructuredText\nDESCRIPTION: This RST code snippet defines a table structure for displaying ESP32 board information including name, debug support, MCU, frequency, flash size, and RAM size. It uses the list-table directive to create a formatted table.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/espressif32.rst#2025-04-10_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. list-table::\n    :header-rows:  1\n\n    * - Name\n      - Debug\n      - MCU\n      - Frequency\n      - Flash\n      - RAM\n    * - :ref:`board_espressif32_esp32dev`\n      - External\n      - ESP32\n      - 240MHz\n      - 4MB\n      - 320KB\n```\n\n----------------------------------------\n\nTITLE: Updating Specific Tools in PlatformIO\nDESCRIPTION: These examples show how to update specific tools using the 'pio pkg update' command. You can specify tool names or use Git repository URLs.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/pkg/cmd_update.rst#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npio pkg update -t \"platformio/tool-openocd\"\npio pkg update --tool https://github.com/platformio/platform-sifive.git\n```\n\n----------------------------------------\n\nTITLE: Board Specifications Table in reStructuredText\nDESCRIPTION: A table listing microcontroller board specifications including processor model, clock speed, flash memory size, and RAM capacity for various SODAQ and STM32 development boards.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/blackmagic.rst#2025-04-10_snippet_3\n\nLANGUAGE: restructuredtext\nCODE:\n```\n* - :ref:`board_atmelsam_sodaq_explorer`\n      - :ref:`platform_atmelsam`\n      - External\n      - SAMD21J18A\n      - 48MHz\n      - 256KB\n      - 32KB\n```\n\n----------------------------------------\n\nTITLE: Customizing Microduino Core USB Configuration in platformio.ini\nDESCRIPTION: Advanced configuration that demonstrates how to override default board settings like microcontroller type and clock frequency in the PlatformIO project configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/32u416m.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:32u416m]\nplatform = atmelavr\nboard = 32u416m\n\n; change microcontroller\nboard_build.mcu = atmega32u4\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Filtering Boards by MCU Type in PlatformIO\nDESCRIPTION: Example showing how to filter boards based on the MCU type 'ATmega168' using the 'pio boards' command, displaying only boards that use this specific microcontroller.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/cmd_boards.rst#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n> pio boards atmega168\n\nPlatform: atmelavr\n---------------------------------------------------------------------------\nID                    MCU           Frequency  Flash   RAM    Name\n---------------------------------------------------------------------------\nbtatmega168           atmega168     16MHz     14K    1K    Arduino BT ATmega168\ndiecimilaatmega168    atmega168     16MHz     14K    1K    Arduino Duemilanove or Diecimila ATmega168\nminiatmega168         atmega168     16MHz     14K    1K    Arduino Mini ATmega168\natmegangatmega168     atmega168     16MHz     14K    1K    Arduino NG or older ATmega168\nnanoatmega168         atmega168     16MHz     14K    1K    Arduino Nano ATmega168\npro8MHzatmega168      atmega168     8MHz      14K    1K    Arduino Pro or Pro Mini ATmega168 (3.3V, 8 MHz)\npro16MHzatmega168     atmega168     16MHz     14K    1K    Arduino Pro or Pro Mini ATmega168 (5V, 16 MHz)\nlilypadatmega168      atmega168     8MHz      14K    1K    LilyPad Arduino ATmega168\n168pa16m              atmega168p    16MHz     15K    1K    Microduino Core (Atmega168PA@16M,5V)\n168pa8m               atmega168p    8MHz      15K    1K    Microduino Core (Atmega168PA@8M,3.3V)\n```\n\n----------------------------------------\n\nTITLE: Complete PlatformIO Run Example for Multiple Boards\nDESCRIPTION: A complete example showing the execution of 'pio run' for a Wiring Blink example targeting four different boards: Arduino Uno, NodeMCU, Teensy 3.1, and MSP430G2553. The output shows the compilation process and memory usage for each target.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/cmd_run.rst#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n> pio run\n\n[Wed Sep  7 15:48:58 2016] Processing uno (platform: atmelavr, board: uno, framework: arduino)\n-------------------------------------------------------------------------------------------------------\nVerbose mode can be enabled via `-v, --verbose` option\nCollected 36 compatible libraries\nLooking for dependencies...\nProject does not have dependencies\nCompiling .pio/build/uno/src/main.o\nArchiving .pio/build/uno/libFrameworkArduinoVariant.a\nIndexing .pio/build/uno/libFrameworkArduinoVariant.a\nCompiling .pio/build/uno/FrameworkArduino/CDC.o\n...\nCompiling .pio/build/uno/FrameworkArduino/wiring_shift.o\nArchiving .pio/build/uno/libFrameworkArduino.a\nIndexing .pio/build/uno/libFrameworkArduino.a\nLinking .pio/build/uno/firmware.elf\nBuilding .pio/build/uno/firmware.hex\nCalculating size .pio/build/uno/firmware.elf\nAVR Memory Usage\n----------------\nDevice: atmega328p\n\nProgram:    1034 bytes (3.2% Full)\n(.text + .data + .bootloader)\n\nData:          9 bytes (0.4% Full)\n(.data + .bss + .noinit)\n\n\n=========================== [SUCCESS] Took 2.47 seconds ===========================\n\n[Wed Sep  7 15:49:01 2016] Processing nodemcu (platform: espressif8266, board: nodemcu, framework: arduino)\n-------------------------------------------------------------------------------------------------------\nVerbose mode can be enabled via `-v, --verbose` option\nCollected 34 compatible libraries\nLooking for dependencies...\nProject does not have dependencies\nCompiling .pio/build/nodemcu/src/main.o\nArchiving .pio/build/nodemcu/libFrameworkArduinoVariant.a\nIndexing .pio/build/nodemcu/libFrameworkArduinoVariant.a\nCompiling .pio/build/nodemcu/FrameworkArduino/Esp.o\nCompiling .pio/build/nodemcu/FrameworkArduino/FS.o\nCompiling .pio/build/nodemcu/FrameworkArduino/HardwareSerial.o\n...\nArchiving .pio/build/nodemcu/libFrameworkArduino.a\nIndexing .pio/build/nodemcu/libFrameworkArduino.a\nLinking .pio/build/nodemcu/firmware.elf\nCalculating size .pio/build/nodemcu/firmware.elf\ntext       data     bss     dec     hex filename\n221240      888   29400  251528   3d688 .pio/build/nodemcu/firmware.elf\nBuilding .pio/build/nodemcu/firmware.bin\n=========================== [SUCCESS] Took 6.43 seconds ===========================\n\n[Wed Sep  7 15:49:07 2016] Processing teensy31 (platform: teensy, board: teensy31, framework: arduino)\n-------------------------------------------------------------------------------------------------------\nVerbose mode can be enabled via `-v, --verbose` option\nCollected 96 compatible libraries\nLooking for dependencies...\nProject does not have dependencies\nCompiling .pio/build/teensy31/src/main.o\nCompiling .pio/build/teensy31/FrameworkArduino/AudioStream.o\nCompiling .pio/build/teensy31/FrameworkArduino/DMAChannel.o\n...\nCompiling .pio/build/teensy31/FrameworkArduino/yield.o\nArchiving .pio/build/teensy31/libFrameworkArduino.a\nIndexing .pio/build/teensy31/libFrameworkArduino.a\nLinking .pio/build/teensy31/firmware.elf\nCalculating size .pio/build/teensy31/firmware.elf\ntext       data     bss     dec     hex filename\n11288       168    2288   13744    35b0 .pio/build/teensy31/firmware.elf\nBuilding .pio/build/teensy31/firmware.hex\n=========================== [SUCCESS] Took 5.36 seconds ===========================\n\n[Wed Sep  7 15:49:12 2016] Processing lpmsp430g2553 (platform: timsp430, build_flags: -D LED_BUILTIN=RED_LED, board: lpmsp430g2553, framework: arduino)\n-------------------------------------------------------------------------------------------------------\nVerbose mode can be enabled via `-v, --verbose` option\nCollected 29 compatible libraries\nLooking for dependencies...\nProject does not have dependencies\nCompiling .pio/build/lpmsp430g2553/src/main.o\nCompiling .pio/build/lpmsp430g2553/FrameworkAnergia/HardwareSerial.o\nCompiling .pio/build/lpmsp430g2553/FrameworkAnergia/IPAddress.o\n...\nCompiling .pio/build/lpmsp430g2553/FrameworkAnergia/wiring_digital.o\nCompiling .pio/build/lpmsp430g2553/FrameworkAnergia/wiring_pulse.o\nCompiling .pio/build/lpmsp430g2553/FrameworkAnergia/wiring_shift.o\nArchiving .pio/build/lpmsp430g2553/libFrameworkAnergia.a\nIndexing .pio/build/lpmsp430g2553/libFrameworkAnergia.a\nLinking .pio/build/lpmsp430g2553/firmware.elf\nCalculating size .pio/build/lpmsp430g2553/firmware.elf\ntext       data     bss     dec     hex filename\n820           0      20     840     348 .pio/build/lpmsp430g2553/firmware.elf\nBuilding .pio/build/lpmsp430g2553/firmware.hex\n=========================== [SUCCESS] Took 2.34 seconds ===========================\n```\n\n----------------------------------------\n\nTITLE: STM32Duino Core Configuration Example\nDESCRIPTION: Configuration for Nucleo F401RE board with CDC, float printf support, and USB high speed in full speed mode.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/ststm32_extra.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f401re]\nplatform = ststm32\nframework = arduino\nboard = nucleo_f401re\nbuild_flags =\n  -D PIO_FRAMEWORK_ARDUINO_ENABLE_CDC\n  -D PIO_FRAMEWORK_ARDUINO_NANOLIB_FLOAT_PRINTF\n  -D PIO_FRAMEWORK_ARDUINO_USB_HIGHSPEED_FULLMODE\n```\n\n----------------------------------------\n\nTITLE: File Embedding Configuration in platformio.ini for Zephyr Projects\nDESCRIPTION: Configuration settings for the platformio.ini file that enable embedding files at compile time. This is useful for including certificates, keys, or other binary files that need to be accessible in the compiled firmware.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/frameworks/zephyr_extra.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = ...\nboard = ...\nframework = zephyr\nboard_build.embed_files =\n    # files to be embedded\n    src/apps-cert.der\n    src/apps-key.der\n```\n\n----------------------------------------\n\nTITLE: Installing and Running JLink GDB Server with PlatformIO Package Exec\nDESCRIPTION: Example demonstrating how to install the JLink package and run its GDB server with specific parameters for debugging a EFR32BG22 device over JTAG interface.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/pkg/cmd_exec.rst#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n> pio pkg exec -p tool-jlink -- JLinkGDBServer -singlerun -if JTAG -select USB -jtagconf -1,-1 -device EFR32BG22CxxxF512 -port 2331\n```\n\n----------------------------------------\n\nTITLE: Adding FreeRTOS to PlatformIO Project Configuration\nDESCRIPTION: This snippet demonstrates how to add FreeRTOS as an additional framework in the PlatformIO project configuration file. It specifies the SiFive platform and includes both the Freedom E SDK and FreeRTOS frameworks.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/frameworks/freedom-e-sdk_extra.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:freertos]\nplatform = sifive\nframework = freedom-e-sdk, freertos\nboard = ...\n```\n\n----------------------------------------\n\nTITLE: Development Boards Technical Specifications Table\nDESCRIPTION: ReStructuredText formatted table listing development boards with their technical specifications including platform, processor type, clock speed, flash memory size and RAM size. Each entry is formatted as a bullet point with reference links.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/olimex-arm-usb-tiny-h.rst#2025-04-10_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n* - :ref:`board_espressif32_airm2m_core_esp32c3`\n      - :ref:`platform_espressif32`\n      - External\n      - ESP32C3\n      - 160MHz\n      - 4MB\n      - 320KB\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Environment in PlatformIO INI\nDESCRIPTION: Example of a platformio.ini configuration file showing how to set up separate release and debug build environments with shared common configuration. The debug environment is automatically used by PlatformIO debugger.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/build_configurations.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env]\nplatform = ...\nboard = ...\nframework = ...\n... other common configuration\n\n[env:myrelease]\nsome_extra_options = ...\n\n[env:mydebug]\nbuild_type = debug\nsome_extra_options = ...\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for OLIMEX ESP32-GATEWAY\nDESCRIPTION: Example of how to set the upload protocol for the OLIMEX ESP32-GATEWAY board in PlatformIO. The default protocol is 'esptool', but this can be changed to other supported protocols.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32-gateway.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32-gateway]\nplatform = espressif32\nboard = esp32-gateway\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Using pio lib search command in Bash\nDESCRIPTION: Basic usage of the 'pio lib search' command to search for libraries in the PlatformIO Library Registry. The command supports various options and search queries.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/lib/cmd_search.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio lib search [OPTIONS] [QUERY]\n```\n\n----------------------------------------\n\nTITLE: Configuring Log File Output Using ProjectConfig\nDESCRIPTION: Example configuration in platformio.ini for setting up device monitor to log output to a file using the log2file filter.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/device/cmd_monitor.rst#2025-04-10_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[env:log_output_to_file]\n...\nplatform = ...\nmonitor_filters = default, log2file\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for GoogleTest in platformio.ini\nDESCRIPTION: Sets up PlatformIO configuration for using GoogleTest framework in both native and ESP32 environments.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/advanced/unit-testing/frameworks/googletest.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env]\ntest_framework = googletest\n\n[env:native]\nplatform = native\n\n[env:esp32dev]\nplatform = espressif32\nframework = arduino\ntest_framework = googletest\n```\n\n----------------------------------------\n\nTITLE: Configuring Heltec Wireless Stick Lite Board in PlatformIO\nDESCRIPTION: Basic configuration for the Heltec Wireless Stick Lite board in the PlatformIO project configuration file. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/heltec_wireless_stick_lite.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:heltec_wireless_stick_lite]\nplatform = espressif32\nboard = heltec_wireless_stick_lite\n```\n\n----------------------------------------\n\nTITLE: PlatformIO Team Member Removal Example\nDESCRIPTION: Practical example showing how to remove a user 'bob' from the 'dev' team in the 'platformio' organization, including the success message.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/team/cmd_remove.rst#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> pio team remove platformio:dev bob\nThe \"bob\" member has been successfully removed from the \"dev\" team.\n```\n\n----------------------------------------\n\nTITLE: Advanced Dependencies Configuration in PlatformIO\nDESCRIPTION: Demonstrates advanced dependency configuration using an array format with detailed specifications including owner, name, version, and platform constraints.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/manifests/library-json/fields/dependencies.rst#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\"dependencies\":\n[\n    {\n        \"owner\": \"bblanchon\",\n        \"name\": \"ArduinoJson\",\n        \"version\": \"^6.16.1\"\n    },\n    {\n        \"owner\": \"me-no-dev\",\n        \"name\": \"AsyncTCP\",\n        \"version\": \"*\",\n        \"platforms\": [\"espressif32\"]\n    },\n    {\n        \"name\": \"external-repo\",\n        \"version\": \"https://github.com/user/package.git#1.2.3\"\n    },\n    {\n        \"name\": \"external-zip\",\n        \"version\": \"https://github.com/me-no-dev/AsyncTCP/archive/master.zip\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for ESP-IDF without spaces in path\nDESCRIPTION: Configuration example for ESP-IDF projects that demonstrates how to set a custom core directory to avoid whitespace issues in project paths. This is a workaround for the ESP-IDF build system limitation that doesn't support spaces in paths.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/frameworks/espidf_extra.rst#2025-04-10_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\n[platformio]\ncore_dir = C:/.platformio\n\n[env:esp32dev]\nplatform = platformio/espressif32\nframework = espidf\nboard = esp32dev\n```\n\n----------------------------------------\n\nTITLE: Installing Libraries with pio pkg install\nDESCRIPTION: Examples of installing libraries using the '-l' or '--library' option with version constraints and from git repositories.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/pkg/cmd_install.rst#2025-04-10_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npio pkg install -l \"bblanchon/ArduinoJson@^6.19.2\" -l \"milesburton/DallasTemperature@^3.9.1\"\npio pkg install --library https://github.com/Makuna/NeoPixelBus.git\n```\n\n----------------------------------------\n\nTITLE: Exporting PATH in Bash for PlatformIO\nDESCRIPTION: Adds the user's local bin directory to the PATH environment variable in Bash. This allows execution of PlatformIO commands from any terminal.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/installation/shell-commands.rst#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexport PATH=$PATH:$HOME/.local/bin\n```\n\n----------------------------------------\n\nTITLE: Running PlatformIO unit tests with semihosting configuration\nDESCRIPTION: This code snippet demonstrates the output of running a unit test with semihosting enabled on a Nucleo L152RE board. The command shows the test execution process, including building, uploading, and the test results.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/advanced/unit-testing/semihosting.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> pio test\n\nVerbose mode can be enabled via `-v, --verbose` option\nCollected 1 tests\n\nProcessing test_dummy in nucleo_l1521re environment\n---------------------------------------------------\nBuilding...\nUploading...\nTesting...\nInfo : clock speed 300 kHz\nInfo : STLINK V2J29M18 (API v2) VID:PID 0483:374B\nInfo : Target voltage: 3.272727\nInfo : stm32l1.cpu: Cortex-M3 r2p0 processor detected\nInfo : stm32l1.cpu: target has 6 breakpoints, 4 watchpoints\nInfo : starting gdb server for stm32l1.cpu on 3333\nInfo : Listening on port 3333 for gdb connections\nsemihosting is enabled\nInfo : Unable to match requested speed 300 kHz, using 240 kHz\nInfo : Unable to match requested speed 300 kHz, using 240 kHz\nInfo : Listening on port 6666 for tcl connections\nInfo : Listening on port 4444 for telnet connections\ntest/test_dummy/test_main.c:19: test_dummy\t[PASSED]\n-------------------- nucleo_l1521re:test_dummy [PASSED] Took 5.43 seconds --------------------\n\n===================================== SUMMARY =====================================\nEnvironment     Test        Status    Duration\n--------------  ----------  --------  ------------\nnucleo_l1521re  test_dummy  PASSED    00:00:05.433\n==================== 1 test cases: 1 succeeded in 00:00:05.433 ====================\n```\n\n----------------------------------------\n\nTITLE: Setting Monitor Directory Configuration in PlatformIO\nDESCRIPTION: Configuration option that specifies the directory where PlatformIO's device monitor will look for custom filters. Defaults to the 'monitor' directory in the project root and can be overridden using the PLATFORMIO_MONITOR_DIR environment variable.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/platformio/options/directory/monitor_dir.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nmonitor_dir = /path/to/monitor/directory\n```\n\n----------------------------------------\n\nTITLE: Good Practices for Declaring Dependencies in PlatformIO\nDESCRIPTION: This snippet shows recommended practices for declaring dependencies in a PlatformIO project, including specifying version constraints and using Git tags.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/librarymanager/dependencies.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nlib_deps =\n  ; Depend on the latest 6.x stable version of ArduinoJson.\n  ; The minimum required version is 6.19.4.\n  ; New functionality (backward-compatible) and bug-fixed are allowed\n  bblanchon/ArduinoJson @ ^6.19.4\n\n  ; Depend on the exact 1.1.1 version\n  ; No new functionality (backward-compatible) or bug fixes.\n  ; Recommended for safety-critical projects\n  me-no-dev/AsyncTCP @ 1.1.1\n\n  ; Depend on the particular tag (v2.13) of a Git repository\n  https://github.com/username/HelloWorld.git#v2.13\n```\n\n----------------------------------------\n\nTITLE: Installing Debug Tools from PlatformIO Registry\nDESCRIPTION: Example showing how to install debugging tools from the PlatformIO Registry.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/pkg/cmd_install.rst#2025-04-10_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npio pkg install --tool \"platformio/tool-jlink\"\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO Toolbar in VSCode Settings\nDESCRIPTION: This JSON snippet shows how to customize the PlatformIO toolbar in VSCode settings. It includes examples of adding buttons for uploading and monitoring, listing outdated packages, device operations, and sending terminal commands.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/ide/vscode.rst#2025-04-10_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"platformio-ide.toolbar\": [\n    {\n      \"text\": \"$(arrow-right)\",\n      \"tooltip\": \"Upload and Monitor the active environment\",\n      \"commands\": \"platformio-ide.uploadAndMonitor\"\n    },\n    {\n      \"text\": \"Outdated\",\n      \"tooltip\": \"List outdated packages for the activate environment\",\n      \"commands\": [\n        {\n          \"id\": \"workbench.action.tasks.runTask\",\n          \"args\": \"PlatformIO: Outdated (${command:platformio-ide.activeEnvironment})\"\n        }\n      ]\n    },\n    {\n      \"text\": \"$(list-selection)\",\n      \"tooltip\": \"List devices\",\n      \"commands\": [\n        {\n          \"id\": \"platformio-ide.runPIOCoreCommand\",\n          \"args\": \"pio device list\"\n        }\n      ]\n    },\n    {\n      \"text\": \"$(plug)\",\n      \"commands\": [\n        {\n          \"id\": \"platformio-ide.runPIOCoreCommand\",\n          \"args\": \"pio device monitor --filter time\"\n        }\n      ]\n    },\n    {\n      \"text\": \"$(terminal)\",\n      \"commands\": [\n        {\n          \"id\": \"workbench.action.terminal.sendSequence\",\n          \"args\": {\n            \"text\": \"echo 1\\n\"\n          }\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring check_skip_packages in platformio.ini\nDESCRIPTION: Example configuration that enables skipping third-party packages during code analysis with cppcheck and clangtidy tools. This option is useful when developers want to analyze only their project sources and exclude framework or toolchain code that might cause false positives.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/env/options/check/check_skip_packages.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:extra_check_flags]\nplatform = ...\nboard = ...\ncheck_tool = cppcheck, clangtidy\ncheck_skip_packages = yes\n```\n\n----------------------------------------\n\nTITLE: Querying Board Information with PlatformIO CLI\nDESCRIPTION: Example of using the 'pio boards' command to find available Teensy boards in the PlatformIO ecosystem, displaying their IDs, MCUs, frequencies, and memory specifications.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/quickstart.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> pio boards teensy\n\nPlatform: teensy\n---------------------------------------------------------------------------\nID                    MCU            Frequency  Flash   RAM    Name\n---------------------------------------------------------------------------\nteensy20              atmega32u4     16MHz     31K    2.5K  Teensy 2.0\nteensy30              mk20dx128      48MHz     128K   16K   Teensy 3.0\nteensy31              mk20dx256      72MHz     256K   64K   Teensy 3.1 / 3.2\nteensylc              mkl26z64       48MHz     62K    8K    Teensy LC\nteensy20pp            at90usb1286    16MHz     127K   8K    Teensy++ 2.0\n```\n\n----------------------------------------\n\nTITLE: Complex GitHub Actions Workflow for USB_Host_Shield_2.0 Project\nDESCRIPTION: This YAML configuration sets up a comprehensive GitHub Actions workflow for the USB_Host_Shield_2.0 project. It includes a matrix strategy for multiple operating systems and examples, downloads an external library, and runs PlatformIO CI with multiple boards.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/ci/github-actions.rst#2025-04-10_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nname: PlatformIO CI\n\non: [push]\n\njobs:\n  build:\n\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        example: [examples/Bluetooth/PS3SPP/PS3SPP.ino, examples/pl2303/pl2303_gps/pl2303_gps.ino]\n\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cache/pip\n            ~/.platformio/.cache\n          key: ${{ runner.os }}-pio\n      - uses: actions/setup-python@v5\n        with:\n          python-version: '3.11'\n      - name: Install PlatformIO Core\n        run: pip install --upgrade platformio\n\n      - name: Download external library\n        run: |\n          wget https://github.com/xxxajk/spi4teensy3/archive/master.zip -O /tmp/spi4teensy3.zip\n          unzip /tmp/spi4teensy3.zip -d /tmp\n\n      - name: Run PlatformIO\n        run: pio ci --lib=\".\" --lib=\"/tmp/spi4teensy3-master\" --board=uno --board=teensy31 --board=due\n        env:\n          PLATFORMIO_CI_SRC: ${{ matrix.example }}\n```\n\n----------------------------------------\n\nTITLE: Implementing Build Middlewares in Python\nDESCRIPTION: This Python script demonstrates three different build middleware implementations: adding custom macros for files containing 'http', replacing a specific file in the build process, and skipping assembly files from the build.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/scripting/middlewares.rst#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nImport(\"env\")\n\n\n# --- Add custom macros for the ALL files which name contains \"http\"\ndef extra_http_configuration(env, node):\n    \"\"\"\n    `node.name` - a name of File System Node\n    `node.get_path()` - a relative path\n    `node.get_abspath()` - an absolute path\n    \"\"\"\n\n    # do not modify node if file name does not contain \"http\"\n    if \"http\" not in node.name:\n        return node\n\n    # now, we can override ANY SCons variables (CPPDEFINES, CCFLAGS, etc.,) for the specific file\n    # pass SCons variables as extra keyword arguments to `env.Object()` function\n    # p.s: run `pio run -t envdump` to see a list with SCons variables\n\n    return env.Object(\n        node,\n        CPPDEFINES=env[\"CPPDEFINES\"]\n        + [(\"HTTP_HOST\", \"device.local\"), (\"HTTP_PORT\", 8080)],\n        CCFLAGS=env[\"CCFLAGS\"] + [\"-fno-builtin-printf\"]\n    )\n\nenv.AddBuildMiddleware(extra_http_configuration)\n\n\n# --- Replace some file from a build process with another\n\ndef replace_node_with_another(env, node):\n    return env.File(\"path/to/patched/RtosTimer.cpp\")\n\nenv.AddBuildMiddleware(\n    replace_node_with_another,\n    \"framework-mbed/rtos/RtosTimer.cpp\"\n)\n\n\n# --- Skip assembly *.S files from build process\n\ndef skip_asm_from_build(env, node):\n    # to ignore file from a build process, just return None\n    return None\n\nenv.AddBuildMiddleware(skip_asm_from_build, \"*.S\")\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Build Scripts in PlatformIO Library Build Configuration\nDESCRIPTION: Example showing how to extend the PlatformIO build system with a custom Python script. This allows for more complex build customization beyond the standard configuration options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/manifests/library-json/fields/build/builder.rst#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n\"build\": {\n    \"extraScript\": \"generate_headers.py\"\n}\n```\n\n----------------------------------------\n\nTITLE: Interactive Session with Remote Device Monitor\nDESCRIPTION: Demonstrates an interactive session with a remote device, showing port selection, communication with a device, and the help menu accessible through control keys.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/remote/cmd_device.rst#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n> pio remote device monitor\n\n--- Available ports:\n--- /dev/cu.Bluetooth-Incoming-Port n/a\n--- /dev/cu.Bluetooth-Modem n/a\n--- /dev/cu.SLAB_USBtoUART CP2102 USB to UART Bridge Controller\n--- /dev/cu.obd2ecu-SPPDev n/a\nEnter port name:/dev/cu.SLAB_USBtoUART\n--- Miniterm on /dev/cu.SLAB_USBtoUART: 9600,8,N,1 ---\n--- Quit: Ctrl+C  |  Menu: Ctrl+T | Help: Ctrl+T followed by Ctrl+H ---\nHello PlatformIO!\n---\n--- Ctrl+]   Exit program\n--- Ctrl+T   Menu escape key, followed by:\n--- Menu keys:\n---    Ctrl+T  Send the menu character itself to remote\n---    Ctrl+]  Send the exit character itself to remote\n---    Ctrl+I  Show info\n---    Ctrl+U  Upload file (prompt will be shown)\n--- Toggles:\n---    Ctrl+R  RTS          Ctrl+E  local echo\n---    Ctrl+D  DTR          Ctrl+B  BREAK\n---    Ctrl+L  line feed    Ctrl+A  Cycle repr mode\n---\n--- Port settings (Ctrl+T followed by the following):\n---    p          change port\n---    7 8        set data bits\n---    n e o s m  change parity (None, Even, Odd, Space, Mark)\n---    1 2 3      set stop bits (1, 2, 1.5)\n---    b          change baud rate\n---    x X        disable/enable software flow control\n---    r R        disable/enable hardware flow control\n--- exit ---\n```\n\n----------------------------------------\n\nTITLE: Configuring Library Dependencies in PlatformIO INI File\nDESCRIPTION: Demonstrates different ways to specify library dependencies in a PlatformIO project configuration file. Shows examples of using built-in libraries, owner-based declarations, semantic versioning specifications, Git repositories, and custom named dependencies from ZIP archives.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/env/options/library/lib_deps.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nlib_deps =\n    ; name-based (built-in library in framework)\n    SPI\n\n    ; owner-based declaration\n    knolleary/PubSubClient\n\n    ; SemVer specification\n    bblanchon/ArduinoJson @ ~5.6,!=5.4\n\n    ; external Git resource\n    https://github.com/gioblu/PJON.git#v2.0\n\n    ; custom name\n    IRremoteESP8266=https://github.com/markszabo/IRremoteESP8266/archive/master.zip\n```\n\n----------------------------------------\n\nTITLE: Installing PlatformIO Platform Command Usage\nDESCRIPTION: Shows the basic command syntax for installing platforms with various options including specifying versions, owners, URLs and local files.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/platforms/cmd_install.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio platform install [OPTIONS] [PLATFORM...]\n\n# [PLATFORM...] forms\npio platform install <name>\npio platform install <name>@<version>\npio platform install <name>@<version range>\npio platform install <ownername>@<version>\npio platform install <ownername>@<version range>\npio platform install <zip or tarball url>\npio platform install file://<zip or tarball file>\npio platform install file://<folder>\npio platform install <repository>\npio platform install <name=repository>\npio platform install <repository#tag>\n```\n\n----------------------------------------\n\nTITLE: Configuring Source File Filters in PlatformIO INI\nDESCRIPTION: Example of using build_src_filter to include specific C/C++ source files while excluding assembly files from the build process. Uses glob patterns to match files recursively across directories.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/env/options/build/build_src_filter.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nbuild_src_filter =\n  +<**/*.c>\n  +<**/*.cpp>\n  -<**/*.S>\n  -<**/*.asm>\n```\n\n----------------------------------------\n\nTITLE: Board Specifications Table in RST Format\nDESCRIPTION: A reStructuredText formatted table containing development board specifications including MCU type, frequency, flash and RAM sizes for various supported development boards in PlatformIO.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/jlink.rst#2025-04-10_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. list-table::\n    :header-rows:  1\n\n    * - Name\n      - Platform\n      - Debug\n      - MCU\n      - Frequency\n      - Flash\n      - RAM\n```\n\n----------------------------------------\n\nTITLE: Configuring FreeRTOS and SystemView in PlatformIO\nDESCRIPTION: This configuration snippet shows how to modify heap settings and enable Segger SystemView for a SiFive HiFive1 RevB board. It sets the heap size, chooses the heap model, and enables SystemView functionality.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/frameworks/freedom-e-sdk_extra.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:sifive-hifive1-revb]\nplatform = sifive\nframework = freedom-e-sdk, freertos\nboard = hifive1-revb\nmonitor_speed = 115200\n; Configure stack size\nboard_build.freedom-e-sdk.heap_size = 0x400\n; Configure heap model and enable SystemView\nboard_build.freertos.heap_model = heap_1\nboard_build.freertos.systemview = enable\n```\n\n----------------------------------------\n\nTITLE: Pizza Project Directory Structure Example\nDESCRIPTION: Complete directory structure example showing how to organize unit tests in a PlatformIO project, including multiple test suites, shared configuration files, and component-specific tests.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/advanced/unit-testing/structure/hierarchy.rst#2025-04-10_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nproject_dir\n├── include\n│   └── pizza_config.h\n├── lib\n│   ├── Cheese\n│   │   ├── include\n│   │   │   └── cheese.h\n│   │   └── src\n│   │       └── cheese.cpp\n│   ├── Dough\n│   │   ├── include\n│   │   │   └── dough.h\n│   │   └── src\n│   │       └── dough.cpp\n│   └── Sauce\n│       ├── include\n│       │   └── sauce.h\n│       └── src\n│           └── sauce.cpp\n├── platformio.ini\n├── src\n│   └── baking.cpp\n└── test\n   ├── embedded\n   │   ├── components\n   │   │   └── sauce\n   │   │       └── test_tomatos\n   │   │           └── prepare.cpp\n   │   ├── stove\n   │   │   ├── test_humidity\n   │   │   │   ├── measure.cpp\n   │   │   │   └── sensor.cpp\n   │   │   └── test_temperature\n   │   │       ├── measure.cpp\n   │   │       └── sensor\n   │   │           ├── sensor.cpp\n   │   │           └── sensor.h\n   │   ├── unity_config.cpp\n   │   └── unity_config.h\n   └── test_ingredients\n      ├── include\n      │   ├── cheese.h\n      │   ├── vegetables.h\n      │   ├── water.h\n      │   ├── wheat.h\n      │   └── yeast.h\n      └── weighing.cpp\n```\n\n----------------------------------------\n\nTITLE: Setting Git Repository in Library Manifest\nDESCRIPTION: Example showing how to specify a Git repository configuration in a library.json manifest file. The configuration includes the repository type and URL, with optional branch specification.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/manifests/library-json/fields/repository.rst#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"repository\":\n{\n    \"type\": \"git\",\n    \"url\": \"https://github.com/foo/bar.git\"\n}\n```\n\n----------------------------------------\n\nTITLE: VSCode Task Configuration for PlatformIO\nDESCRIPTION: JSON configuration for customizing VSCode task runner behavior with PlatformIO. Specifies monitor task settings with problem matcher and presentation options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/ide/vscode.rst#2025-04-10_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n        {\n            \"type\": \"PlatformIO\",\n            \"task\": \"Monitor\",\n            \"problemMatcher\": [\n                \"$platformio\"\n            ],\n            \"presentation\": {\n                \"panel\": \"new\"\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: PlatformIO System Prune Example Output\nDESCRIPTION: Demonstrates a complete example of running the prune command, showing interactive prompts and the cleanup of cached data and unused packages with detailed space reclamation information\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/system/cmd_prune.rst#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> pio system prune\n\nPrune cached data:\n - cached API requests\n - cached package downloads\n - temporary data\nDo you want to continue? [y/N]: y\nSpace on disk: 2.34MB\n\nPrune unnecessary core packages:\nCalculating...\nDo you want to continue? [y/N]: y\nSpace on disk: 0B\n\nPrune unnecessary development platform packages:\nCalculating...\nPackage                                 Version       Size\n--------------------------------------  ------------  --------\nplatformio/framework-stm32cube          2.0.200813    458.88MB\nplatformio/framework-arduinosam         4.4.191002    290.35MB\nplatformio/framework-arduino-samd       1.8.9         17.59MB\nplatformio/framework-arduinonordicnrf5  1.600.190830  4.70MB\nDo you want to continue? [y/N]: y\nTool Manager: Removing framework-arduino-samd @ 1.8.9\nTool Manager: framework-arduino-samd @ 1.8.9 has been removed!\nTool Manager: Removing framework-arduinonordicnrf5 @ 1.600.190830\nTool Manager: framework-arduinonordicnrf5 @ 1.600.190830 has been removed!\nTool Manager: Removing framework-arduinosam @ 4.4.191002\nTool Manager: framework-arduinosam @ 4.4.191002 has been removed!\nTool Manager: Removing framework-stm32cube @ 2.0.200813\nTool Manager: framework-stm32cube @ 2.0.200813 has been removed!\nSpace on disk: 771.52MB\n\nTotal reclaimed space: 773.86MB\n```\n\n----------------------------------------\n\nTITLE: Configuring USBasp Programmer Upload for ATmega AVR in PlatformIO\nDESCRIPTION: This configuration sets up PlatformIO for uploading firmware to an ATmega AVR microcontroller using a USBasp programmer. It specifies the upload protocol, port, and necessary flags for the avrdude tool.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/atmelavr_extra.rst#2025-04-10_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n[env:program_via_USBasp]\nplatform = atmelavr\nframework = arduino\nupload_protocol = custom\nupload_port = usb\nupload_flags =\n    -C\n    ; use \"tool-avrdude-megaavr\" for the atmelmegaavr platform\n    ${platformio.packages_dir}/tool-avrdude/avrdude.conf\n    -p\n    $BOARD_MCU\n    -P\n    $UPLOAD_PORT\n    -c\n    usbasp\nupload_command = avrdude $UPLOAD_FLAGS -U flash:w:$SOURCE:i\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Nucleo G431RB\nDESCRIPTION: Configuration example for specifying the upload protocol for the Nucleo G431RB board, using ST-Link as the default option.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_g431rb.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_g431rb]\nplatform = ststm32\nboard = nucleo_g431rb\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Running Remote Tests in PlatformIO\nDESCRIPTION: Basic usage syntax for the 'pio remote test' command which enables running tests remotely from a PlatformIO based project. The command supports general testing and agent-specific testing.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/remote/cmd_test.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio remote test [OPTIONS]\n\n# run tests on specified PlatformIO Remote Agent\npio remote --agent NAME test [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: ST-Util Debug Configuration\nDESCRIPTION: Configuration for using ST-Link V2/V2-1 with ST-Util GDB Server. Includes debug server settings and initialization commands.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/custom.rst#2025-04-10_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[env:debug]\nplatform = ststm32\nframework = mbed\nboard = ...\ndebug_tool = custom\ndebug_port = :4242\ndebug_server = $PLATFORMIO_CORE_DIR/packages/tool-stlink/bin/st-util\ndebug_init_cmds =\n  define pio_reset_halt_target\n      monitor reset\n      monitor halt\n  end\n  define pio_reset_run_target\n      monitor reset\n  end\n  target extended-remote $DEBUG_PORT\n  $LOAD_CMDS\n  pio_reset_halt_target\n  $INIT_BREAK\n```\n\n----------------------------------------\n\nTITLE: OpenOCD Debug Server Configuration in PlatformIO\nDESCRIPTION: Specific example demonstrating how to configure OpenOCD as a custom debug server, including the path to the OpenOCD executable and configuration file for an STM32 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/env/options/debug/debug_server.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:debug_openocd]\nplatform = ...\nboard = ...\ndebug_tool = custom\ndebug_server =\n    ${platformio.packages_dir}/tool-openocd/openocd\n    -f\n    ${platformio.packages_dir}/tool-openocd/scripts/board/stm32f103zet6_warship.cfg\n```\n\n----------------------------------------\n\nTITLE: Configuring AppVeyor CI for PlatformIO Native Projects\nDESCRIPTION: This YAML configuration sets up AppVeyor CI for native PlatformIO projects. It installs PlatformIO, updates submodules, and runs the project for specified environments.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/ci/appveyor.rst#2025-04-10_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbuild: off\nenvironment:\n\ninstall:\n    - cmd: git submodule update --init --recursive\n    - cmd: SET PATH=%PATH%;C:\\Python27\\Scripts\n    - cmd: pip install -U platformio\n\ntest_script:\n    - cmd: pio run -e <ID_1> -e <ID_2> -e <ID_N>\n```\n\n----------------------------------------\n\nTITLE: Using 'pio pkg update' Command in PlatformIO\nDESCRIPTION: This command is used to update project dependencies, custom packages, or external sources in PlatformIO. It can be run with various options to specify the update scope and target packages.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/pkg/cmd_update.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio pkg update [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Implementing Calculator Header File in C\nDESCRIPTION: Header file for a simple calculator library with function declarations for addition, subtraction, multiplication, and division operations. The file includes proper header guards and C++ compatibility with extern \"C\" blocks.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/tutorials/espressif32/espidf_debugging_unit_testing_analysis.rst#2025-04-10_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n#ifndef _CALCULATOR_H_\n#define _CALCULATOR_H_\n\n#ifdef __cplusplus\nextern \"C\"\n{\n#endif\n\n  int addition(int a, int b);\n  int subtraction(int a, int b);\n  int multiplication(int a, int b);\n  int division(int a, int b);\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif // _CALCULATOR_H_\n```\n\n----------------------------------------\n\nTITLE: Creating Dependent Target for OTA Updates\nDESCRIPTION: Demonstrates how to create a custom target that depends on the project firmware. This target runs an OTA update script after successful firmware build.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/scripting/custom_targets.rst#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nImport(\"env\")\n\nenv.AddCustomTarget(\n    \"ota\",\n    \"$BUILD_DIR/${PROGNAME}.elf\",\n    \"ota_script --firmware-path $SOURCE\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Command Shortcut Targets in PlatformIO\nDESCRIPTION: Shows how to create custom targets that act as command shortcuts. One target prints system environment variables, while another shows PlatformIO Core and Python versions.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/scripting/custom_targets.rst#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nImport(\"env\")\n\n# Single action/command per 1 target\nenv.AddCustomTarget(\"sysenv\", None, 'python -c \"import os; print(os.environ)\"')\n\n# Multiple actions\nenv.AddCustomTarget(\n    name=\"pioenv\",\n    dependencies=None,\n    actions=[\n        \"pio --version\",\n        \"python --version\"\n    ],\n    title=\"Core Env\",\n    description=\"Show PlatformIO Core and Python versions\"\n)\n```\n\n----------------------------------------\n\nTITLE: Board Specifications RST Tables\nDESCRIPTION: A series of RST-formatted tables containing technical specifications of STM32 development boards organized by manufacturer, including debug capabilities, MCU model, operating frequency, flash and RAM sizes.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/frameworks/stm32cube.rst#2025-04-10_snippet_5\n\nLANGUAGE: rst\nCODE:\n```\n.. list-table::\n    :header-rows:  1\n\n    * - Name\n      - Platform\n      - Debug\n      - MCU\n      - Frequency\n      - Flash\n      - RAM\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Run Configuration for GitLab CI\nDESCRIPTION: Basic GitLab CI configuration using the 'pio run' command for native PlatformIO projects. Sets up Python environment, caching, and runs PlatformIO builds for specified environments.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/ci/gitlab.rst#2025-04-10_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nimage: python:3.11\n\nvariables:  \n  PIP_CACHE_DIR: \"$CI_PROJECT_DIR/.cache/pip\"\n  PLATFORMIO_CACHE_DIR: \"$CI_PROJECT_DIR/.cache/platformio\"\n\ncache:\n  paths:\n    - .cache/pip\n    - .cache/platformio\n\nstages:\n - test\n\nbefore_script:\n  - \"pip install -U platformio\"\n\njob:\n  stage: test\n  script: \"pio run -e <ID_1> -e <ID_2> -e <ID_N>\"\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Macros in PlatformIO Library Build Configuration\nDESCRIPTION: Example showing how to add custom macro definitions to a PlatformIO library build. This configuration adds version and release status information through preprocessor defines.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/manifests/library-json/fields/build/builder.rst#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"build\": {\n    \"flags\": \"-D MYLIB_REV=1.2.3 -DRELEASE\"\n}\n```\n\n----------------------------------------\n\nTITLE: Python Script for Building External Sources\nDESCRIPTION: This Python script demonstrates how to use the BuildSources method to include external source files in the PlatformIO build process. It specifies the build directory and the location of the external sources.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/scripting/examples/external_sources.rst#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nImport(\"env\")\n\nenv.BuildSources(\n    os.path.join(\"$BUILD_DIR\", \"external\", \"build\"),\n    os.path.join(\"$PROJECT_DIR\", \"external\", \"sources\")\n)\n```\n\n----------------------------------------\n\nTITLE: Creating PlatformIO Build System Configuration for Sublime Text\nDESCRIPTION: JSON configuration for setting up a custom build system in Sublime Text for PlatformIO. It defines the main build command and variants for cleaning and uploading.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/ide/sublimetext.rst#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n{\n    \"cmd\": [\"platformio\", \"-f\", \"-c\", \"sublimetext\", \"run\"],\n    \"working_dir\": \"${project_path:${folder}}\",\n    \"variants\":\n    [\n        {\n            \"name\": \"Clean\",\n            \"cmd\": [\"platformio\", \"-f\", \"-c\", \"sublimetext\", \"run\", \"--target\", \"clean\"]\n        },\n        {\n            \"name\": \"Upload\",\n            \"cmd\": [\"platformio\", \"-f\", \"-c\", \"sublimetext\", \"run\", \"--target\", \"upload\"]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Filters in PlatformIO INI\nDESCRIPTION: Example configuration showing how to filter and ignore specific test paths in platformio.ini file. Demonstrates using test_filter to run embedded/* tests while ignoring embedded/components/* tests.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/advanced/unit-testing/structure/hierarchy.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\ntest_filter = embedded/*\ntest_ignore = embedded/components/*\n```\n\n----------------------------------------\n\nTITLE: Configuring AVRISP mkII Programmer Upload for ATmega AVR in PlatformIO\nDESCRIPTION: This configuration sets up PlatformIO for uploading firmware to an ATmega AVR microcontroller using an AVRISP mkII programmer. It defines the upload protocol, port, and necessary flags for the avrdude tool.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/atmelavr_extra.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:program_via_AVRISP_mkII]\nplatform = atmelavr\nframework = arduino\nupload_protocol = custom\nupload_port = usb\nupload_flags =\n    -C\n    ; use \"tool-avrdude-megaavr\" for the atmelmegaavr platform\n    ${platformio.packages_dir}/tool-avrdude/avrdude.conf\n    -p\n    $BOARD_MCU\n    -P\n    $UPLOAD_PORT\n    -c\n    stk500v2\nupload_command = avrdude $UPLOAD_FLAGS -U flash:w:$SOURCE:i\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for Noduino Quantum\nDESCRIPTION: Basic configuration example for setting up a PlatformIO project using the Noduino Quantum board with ESP32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/quantum.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:quantum]\nplatform = espressif32\nboard = quantum\n```\n\n----------------------------------------\n\nTITLE: Configuring J-LINK as Debugging Tool in platformio.ini\nDESCRIPTION: Sets J-LINK as the debugging tool in the PlatformIO project configuration file. Also shows how to configure it for firmware uploading using SWD or JTAG interfaces.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/jlink.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = ...\nboard = ...\ndebug_tool = jlink\n\n; SWD interface\nupload_protocol = jlink\n\n; JTAG interface\nupload_protocol = jlink-jtag\n```\n\n----------------------------------------\n\nTITLE: Configuring Export Options in library.json\nDESCRIPTION: The 'export' object in library.json allows developers to specify which files should be included or excluded when packaging a library. This helps reduce the size of the final archive by omitting unnecessary files like tests, documentation, or media.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/manifests/library-json/fields/export/index.rst#2025-04-10_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"export\": {\n    \"include\": [],\n    \"exclude\": []\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Parallel Programmer Upload for ATmega AVR in PlatformIO\nDESCRIPTION: This snippet demonstrates the PlatformIO configuration for uploading firmware to an ATmega AVR microcontroller using a Parallel Programmer. It defines the upload protocol and necessary flags for the avrdude tool.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/atmelavr_extra.rst#2025-04-10_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\n[env:program_via_PP]\nplatform = atmelavr\nframework = arduino\nupload_protocol = custom\nupload_flags =\n    -C\n    ; use \"tool-avrdude-megaavr\" for the atmelmegaavr platform\n    ${platformio.packages_dir}/tool-avrdude/avrdude.conf\n    -p\n    $BOARD_MCU\n    -c\n    dapa\n    -F\nupload_command = avrdude $UPLOAD_FLAGS -U flash:w:$SOURCE:i\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Board Settings\nDESCRIPTION: Basic PlatformIO configuration for Adafruit PyGamer Advance M4 board setup.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_pygamer_advance_m4.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_pygamer_advance_m4]\nplatform = atmelsam\nboard = adafruit_pygamer_advance_m4\n```\n\n----------------------------------------\n\nTITLE: Example Binary Data Embedding Code\nDESCRIPTION: Example C code showing how to access embedded binary data in ESP32 programs.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/espressif32_extra.rst#2025-04-10_snippet_7\n\nLANGUAGE: c\nCODE:\n```\nextern const uint8_t aws_root_ca_pem_start[] asm(\"_binary_src_aws_root_ca_pem_start\");\nextern const uint8_t aws_root_ca_pem_end[] asm(\"_binary_src_aws_root_ca_pem_end\");\nextern const uint8_t certificate_pem_crt_start[] asm(\"_binary_src_certificate_pem_crt_start\");\nextern const uint8_t certificate_pem_crt_end[] asm(\"_binary_src_certificate_pem_crt_end\");\nextern const uint8_t private_pem_key_start[] asm(\"_binary_src_private_pem_key_start\");\nextern const uint8_t private_pem_key_end[] asm(\"_binary_src_private_pem_key_end\");\n```\n\n----------------------------------------\n\nTITLE: Preparing PlatformIO Project for Debugging\nDESCRIPTION: Example output of preparing a PlatformIO project for debugging, showing the compilation and linking process.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/cmd_debug.rst#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> pio debug\n\n[Sun Apr 30 01:34:01 2017] Processing mzeropro (platform: atmelsam; debug_extra_cmds: b main.cpp:26; board: mzeropro; framework: arduino)\n-------------------------------------------------------------------------------------------------------\nVerbose mode can be enabled via `-v, --verbose` option\nCollected 26 compatible libraries\nLooking for dependencies...\nProject does not have dependencies\nCompiling .pio/build/mzeropro/src/main.o\nCompiling .pio/build/mzeropro/FrameworkArduinoVariant/variant.o\nCompiling .pio/build/mzeropro/FrameworkArduino/IPAddress.o\nCompiling .pio/build/mzeropro/FrameworkArduino/Print.o\nArchiving .pio/build/mzeropro/libFrameworkArduinoVariant.a\nIndexing .pio/build/mzeropro/libFrameworkArduinoVariant.a\n...\nCompiling .pio/build/mzeropro/FrameworkArduino/wiring_analog.o\nCompiling .pio/build/mzeropro/FrameworkArduino/wiring_digital.o\nCompiling .pio/build/mzeropro/FrameworkArduino/wiring_private.o\nCompiling .pio/build/mzeropro/FrameworkArduino/wiring_shift.o\nArchiving .pio/build/mzeropro/libFrameworkArduino.a\nIndexing .pio/build/mzeropro/libFrameworkArduino.a\nLinking .pio/build/mzeropro/firmware.elf\nCalculating size .pio/build/mzeropro/firmware.elf\nBuilding .pio/build/mzeropro/firmware.bin\ntext       data     bss     dec     hex filename\n11512       256    1788   13556    34f4 .pio/build/mzeropro/firmware.elf\n=========================== [SUCCESS] Took 7.82 seconds ===========================\n```\n\n----------------------------------------\n\nTITLE: Accessing PlatformIO Remote CLI Help in Bash\nDESCRIPTION: Demonstrates how to access help for the PlatformIO Remote CLI and its commands, as well as how to run a command on specified PlatformIO Remote Agents.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/remote/index.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio remote --help\npio remote COMMAND --help\n\n# run command on the specified PlatformIO Remote Agents\npio remote --agent NAME_1 --agent NAME_N COMMAND\n```\n\n----------------------------------------\n\nTITLE: Installing PlatformIO via Homebrew on macOS\nDESCRIPTION: This command uses Homebrew to install the latest stable version of PlatformIO on macOS. Homebrew must be installed on the system for this command to work.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/installation/methods/brew.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew install platformio\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO.ini for Renode Testing on SiFive HiFive1 RevB\nDESCRIPTION: Configuration example showing how to set up Renode simulator for testing on a SiFive HiFive1 RevB board using the Zephyr framework. Includes platform package requirements and testing command configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/advanced/unit-testing/simulators/renode.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:hifive1-revb]\nplatform = sifive\nframework = zephyr\nboard = hifive1-revb\n\nplatform_packages =\n    platformio/tool-renode\ntest_testing_command =\n    ${platformio.packages_dir}/tool-renode/renode\n    --disable-xwt\n    -e include @scripts/single-node/sifive_fe310.resc\n    -e showAnalyzer uart1\n    -e sysbus LoadELF @${platformio.build_dir}/${this.__env__}/firmware.elf\n    -e start\n```\n\n----------------------------------------\n\nTITLE: Configuring Upstream RISC-V GAP Platform Version\nDESCRIPTION: Configuration for using the latest upstream development version of the RISC-V GAP platform directly from GitHub.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/riscv_gap.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:upstream_develop]\nplatform = https://github.com/platformio/platform-riscv_gap.git\nboard = ...\n```\n\n----------------------------------------\n\nTITLE: AVR-Stub Breakpoint Mode Configuration\nDESCRIPTION: Configuration example showing how to set specific breakpoint modes using build flags in platformio.ini.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/avr-stub_extra.rst#2025-04-10_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = atmelavr\nboard = uno\n\n; Set breakpoint mode\nbuild_flags =\n  -DAVR8_BREAKPOINT_MODE=2\n\ndebug_tool = avr-stub\ndebug_port = SERIAL_PORT\n\nlib_deps =\n    jdolinay/avr-debugger @ ~1.4\n```\n\n----------------------------------------\n\nTITLE: Configuring lwIP Variant for ESP8266 in PlatformIO\nDESCRIPTION: Changes the lwIP library variant by defining a custom macro with build_flags. This example switches to lwIP v1.4 with higher bandwidth configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/espressif8266_extra.rst#2025-04-10_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\n...\nbuild_flags = -D PIO_FRAMEWORK_ARDUINO_LWIP_HIGHER_BANDWIDTH\n```\n\n----------------------------------------\n\nTITLE: Multiple Dependencies Extension Example with Override Behavior\nDESCRIPTION: Shows how extends handles multiple library dependency configurations, demonstrating that later extends entries override earlier ones rather than merging values.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/env/options/advanced/extends.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[base]\nplatform = teensy\nframework = arduino\nboard = teensy31\n\n[lib_deps1]\nlib_deps =\n    monstrenyatko/ArduinoMqtt @ ^1.5.1\n    bblanchon/ArduinoJson @ ^6.18.3\n    knolleary/PubSubClient @ ^2.8\n\n[lib_deps2]\nlib_deps =\n    sstaub/Ticker @ ^4.3.0\n    thijse/ArduinoLog @ ^1.1.1\n    adafruit/RTClib @ ^1.14.0\n\n[env:final]\nextends = base, lib_deps1, lib_deps2\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Custom Targets\nDESCRIPTION: Shows the PlatformIO configuration file (platformio.ini) setup for using custom targets. It includes specifying the extra script file and custom options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/scripting/custom_targets.rst#2025-04-10_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[env:env_custom_target]\nplatform = ...\n...\nextra_scripts = extra_script.py\ncustom_ping_host = google.com\n```\n\n----------------------------------------\n\nTITLE: Configuring lib_ignore in platformio.ini\nDESCRIPTION: Example of how to configure the lib_ignore directive in platformio.ini to exclude specific libraries from the Library Dependency Finder. Shows both single-line and multi-line syntax options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/env/options/library/lib_ignore.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\\n; Single line\\nlib_ignore = AsyncMqttClient, DNSServer\\n\\n; Multi-line\\nlib_ignore =\\n  AsyncMqttClient\\n  ESP Async WebServer\n```\n\n----------------------------------------\n\nTITLE: Basic Dependencies Configuration in PlatformIO\nDESCRIPTION: Shows how to specify library dependencies using a simple object format. Demonstrates various dependency types including version-pinned libraries, wildcard versions, git repositories, and zip archives.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/manifests/library-json/fields/dependencies.rst#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"dependencies\":\n{\n    \"bblanchon/ArduinoJson\": \"^6.16.1\",\n    \"me-no-dev/AsyncTCP\": \"*\",\n    \"external-repo\": \"https://github.com/user/package.git#1.2.3\",\n    \"external-zip\": \"https://github.com/me-no-dev/AsyncTCP/archive/master.zip\"\n}\n```\n\n----------------------------------------\n\nTITLE: Searching for Dallas Temperature Sensor Libraries\nDESCRIPTION: This command searches for libraries compatible with Dallas temperature sensors like DS18B20 and DS18S20 using the PlatformIO CLI.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/lib/cmd_search.rst#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n> pio lib search \"DS*\"\n```\n\n----------------------------------------\n\nTITLE: Example with Explicit Breakpoint\nDESCRIPTION: Demonstration of how to add an explicit breakpoint in the code using the breakpoint() function when automatic breakpoints aren't working.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/avr-stub_extra.rst#2025-04-10_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nvoid loop()\n{\n  breakpoint();\n  digitalWrite(LED_BUILTIN, HIGH);\n  delay(300);\n  digitalWrite(LED_BUILTIN, LOW);\n  delay(100);\n}\n```\n\n----------------------------------------\n\nTITLE: Board Configuration List Table in reStructuredText\nDESCRIPTION: Table structure showing board specifications including name, platform, debug support, MCU type, frequency, flash and RAM sizes for multiple microcontroller boards.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/frameworks/arduino.rst#2025-04-10_snippet_2\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. list-table::\n    :header-rows:  1\n\n    * - Name\n      - Platform\n      - Debug\n      - MCU\n      - Frequency\n      - Flash\n      - RAM\n```\n\n----------------------------------------\n\nTITLE: ESP32 Board Reference Table in RST Format\nDESCRIPTION: RST formatted table listing ESP32 board variants with their CPU, memory and RAM specifications. Contains board names as reference links followed by technical specifications including processor type, clock speed, flash memory size and RAM size.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/espressif32.rst#2025-04-10_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n* - :ref:`board_espressif32_ioxesp32`\n  - ESP32\n  - 240MHz\n  - 4MB\n  - 320KB\n* - :ref:`board_espressif32_ioxesp32ps`\n  - ESP32\n  - 240MHz\n  - 4MB\n  - 320KB\n```\n\n----------------------------------------\n\nTITLE: Python Build Script for HAL-dependent Library\nDESCRIPTION: Implementation of the extra_script.py that customizes the build process based on HAL definitions. It handles source filtering, path configuration, modifies compilation flags for both the library and dependencies, and demonstrates post-build actions.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/manifests/library-json/fields/build/extrascript.rst#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nImport('env')\nfrom os.path import join, realpath\n\n#\n# Private flags (only for the current \"SomeLib\" source files)\n#\nfor item in env.get(\"CPPDEFINES\", []):\n    if isinstance(item, tuple) and item[0] == \"HAL\":\n        env.Append(CPPPATH=[realpath(join(\"hal\", item[1]))])\n        env.Replace(SRC_FILTER=[\"+<*>\", \"-<hal*>\", \"+<hal/%s>\" % item[1]])\n        break\n\n#\n# Pass flags to the other Project Dependencies (libraries)\n#\nfor lb in env.GetLibBuilders():\n    lb.env.Append(CPPDEFINES=[(\"TEST_LIBDEPS\", 1)])\n    if lb.name == \"OneWire\":\n        lb.env.Append(CPPDEFINES=[(\"OW_PIN\", 13)])\n\n\n# Operate with the project environment (files located in the `src` folder)\nImport(\"projenv\")\n# add (prepend) to the beginning of list\nprojenv.Prepend(CPPPATH=[\"some/path\"])\n# remove specified flags\nprojenv.ProcessUnFlags(\"-fno-rtti\")\n\n# Pass flags to the Global environment (project `src` files, frameworks)\nglobal_env = DefaultEnvironment()\nglobal_env.Append(CPPDEFINES=[(\"TEST_GLOBAL\", 1)])\n\n# Attach post action to the global environment\n\ndef post_program_action(source, target, env):\n    print(\"Program has been built!\")\n    program_path = target[0].get_abspath()\n    print(\"Program path\", program_path)\n    # Use case: sign a firmware, do any manipulations with ELF, etc\n    # env.Execute(f\"sign --elf {program_path}\")\n\nglobal_env.AddPostAction(\"$PROGPATH\", post_program_action)\n```\n\n----------------------------------------\n\nTITLE: Configuring Stable Versions of Espressif 8266 Platform in PlatformIO\nDESCRIPTION: Configuration examples for using stable releases of the Espressif 8266 development platform in platformio.ini, showing how to use the latest stable version or pin to a specific version.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/espressif8266.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n; Latest stable version, NOT recommended\n; Pin the version as shown below\n[env:latest_stable]\nplatform = espressif8266\nboard = ...\n\n; Specific version\n[env:custom_stable]\nplatform = espressif8266@x.y.z\nboard = ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Shippable CI for Native PlatformIO Projects\nDESCRIPTION: This YAML configuration sets up Shippable CI for a native PlatformIO project. It specifies Python 3.11, installs PlatformIO, and runs the project for multiple environments.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/ci/shippable.rst#2025-04-10_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlanguage: python\npython:\n    - \"3.11\"\n\ninstall:\n    - pip install -U platformio\n\nscript:\n    - pio run -e <ID_1> -e <ID_2> -e <ID_N>\n```\n\n----------------------------------------\n\nTITLE: Platform Build Script in Python\nDESCRIPTION: Example main.py build script that defines the build environment, compiler flags, and build targets for the platform. Uses SCons builder and includes firmware building and upload functionality.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/creating_platform.rst#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"\n    Build script for test.py\n    test-builder.py\n\"\"\"\n\nfrom os.path import join\nfrom SCons.Script import AlwaysBuild, Builder, Default, DefaultEnvironment\n\nenv = DefaultEnvironment()\n\n# A full list with the available variables\n# http://www.scons.org/doc/production/HTML/scons-user.html#app-variables\nenv.Replace(\n    AR=\"ar\",\n    AS=\"gcc\",\n    CC=\"gcc\",\n    CXX=\"g++\",\n    OBJCOPY=\"objcopy\",\n    RANLIB=\"ranlib\",\n\n    UPLOADER=join(\"$PIOPACKAGES_DIR\", \"tool-bar\", \"uploader\"),\n    UPLOADCMD=\"$UPLOADER $SOURCES\"\n)\n\nenv.Append(\n    ARFLAGS=[\"...\"],\n\n    ASFLAGS=[\"flag1\", \"flag2\", \"flagN\"],\n    CCFLAGS=[\"flag1\", \"flag2\", \"flagN\"],\n    CXXFLAGS=[\"flag1\", \"flag2\", \"flagN\"],\n    LINKFLAGS=[\"flag1\", \"flag2\", \"flagN\"],\n\n    CPPDEFINES=[\"DEFINE_1\", \"DEFINE=2\", \"DEFINE_N\"],\n\n    LIBS=[\"additional\", \"libs\", \"here\"],\n\n    BUILDERS=dict(\n        ElfToBin=Builder(\n            action=\" \".join([\n                \"$OBJCOPY\",\n                \"-O\",\n                \"binary\",\n                \"$SOURCES\",\n                \"$TARGET\"]),\n            suffix=\".bin\"\n        )\n    )\n)\n\n# The source code of \"platformio-build-tool\" is here\n# https://github.com/platformio/platformio-core/blob/develop/platformio/builder/tools/platformio.py\n\n#\n# Target: Build executable and linkable firmware\n#\ntarget_elf = env.BuildProgram()\n\n#\n# Target: Build the .bin file\n#\ntarget_bin = env.ElfToBin(join(\"$BUILD_DIR\", \"firmware\"), target_elf)\n\n#\n# Target: Upload firmware\n#\nupload = env.Alias([\"upload\"], target_bin, \"$UPLOADCMD\")\nAlwaysBuild(upload)\n\n#\n# Target: Define targets\n#\nDefault(target_bin)\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Custom Mbed OS Target\nDESCRIPTION: Example of platformio.ini configuration for a custom Mbed OS target, including specifying the build flags to include custom target-specific code.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/frameworks/mbed_extra.rst#2025-04-10_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[env:my_custom_board]\nplatform = nxplpc\nframework = mbed\nboard = my_custom_board\nbuild_flags = -I$PROJECT_SRC_DIR/MY_CUSTOM_BOARD_TARGET\n```\n\n----------------------------------------\n\nTITLE: J-Link Debug and Upload Configuration\nDESCRIPTION: Configuration for using J-Link as both debugger and uploader for a custom board. Includes environment setup and custom upload protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/custom.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:jlink_debug_and_upload]\nplatform = teensy\nframework = arduino\nboard = teensy31\nextra_scripts = extra_script.py\nupload_protocol = custom\ndebug_tool = jlink\ndebug_server =\n  /full/path/to/JLinkGDBServerCL\n  -singlerun\n  -if\n  SWD\n  -select\n  USB\n  -port\n  2331\n  -device\n  MK20DX256xxx7\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Test Runner Base Class in Python\nDESCRIPTION: Base class for implementing custom test runners with methods for setup, execution stages and result tracking. Provides framework for custom test implementation.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/advanced/unit-testing/frameworks/custom/api.rst#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass CustomTestRunner:\n    def setup(self):\n        pass\n    \n    def teardown(self):\n        pass\n        \n    def stage_building(self):\n        pass\n        \n    def stage_uploading(self):\n        pass\n        \n    def stage_testing(self):\n        pass\n        \n    def configure_build_env(self):\n        pass\n        \n    def on_testing_data_output(self, data):\n        pass\n        \n    def on_testing_line_output(self, line):\n        pass\n```\n\n----------------------------------------\n\nTITLE: Using Remote Device Monitor Command in PlatformIO\nDESCRIPTION: Connects to a Serial Port of a remote device to receive or send data in real time. Requires a PlatformIO remote agent to be running on the remote machine.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/remote/cmd_device.rst#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npio remote device monitor [OPTIONS]\n\n# Connect to a specified agent\npio remote --agent NAME device monitor [OPTIONS]\npio remote -a NAME device monitor [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Arduino Uno Project Initialization\nDESCRIPTION: Example showing project initialization specifically for Arduino Uno board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/project/cmd_init.rst#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n> pio project init --board uno\n\nThe current working directory *** will be used for the new project.\nYou can specify another project directory via\n`pio project init -d %PATH_TO_THE_PROJECT_DIR%` command.\n...\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Libraries with PlatformIO CLI\nDESCRIPTION: Various usage examples of the 'pio lib uninstall' command for removing libraries from different storage locations and with different options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/lib/cmd_uninstall.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio lib [STORAGE_OPTIONS] uninstall [LIBRARY...]\n\n# uninstall project dependent library\n# (run it from a project root where is located \"platformio.ini\")\npio lib uninstall [LIBRARY...]\n\n# uninstall dependencies for the specific project environment\n# (run it from a project root where is located \"platformio.ini\")\npio lib -e myenv uninstall [OPTIONS] [LIBRARY...]\npio lib -d /path/to/platformio/project -e myenv uninstall [OPTIONS] [LIBRARY...]\n\n# uninstall library from global storage\npio lib --global uninstall [LIBRARY...]\npio lib -g uninstall [LIBRARY...]\n\n# uninstall library from custom storage\npio lib --storage-dir /path/to/dir uninstall [LIBRARY...]\npio lib -d /path/to/dir uninstall [LIBRARY...]\n\n# [LIBRARY...] forms\npio lib [STORAGE_OPTIONS] uninstall <id>\npio lib [STORAGE_OPTIONS] uninstall <id>@<version>\npio lib [STORAGE_OPTIONS] uninstall <id>@<version range>\npio lib [STORAGE_OPTIONS] uninstall <name>\npio lib [STORAGE_OPTIONS] uninstall <name>@<version>\npio lib [STORAGE_OPTIONS] uninstall <name>@<version range>\n```\n\n----------------------------------------\n\nTITLE: Basic ESP-07 Board Configuration in PlatformIO\nDESCRIPTION: Basic configuration for setting up an ESP8266 ESP-07 board project in PlatformIO's project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/esp07.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp07]\nplatform = espressif8266\nboard = esp07\n```\n\n----------------------------------------\n\nTITLE: Setting Flash Mode\nDESCRIPTION: Configuration for ESP32 flash chip interface mode using board_build.flash_mode option.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/espressif32_extra.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nboard_build.flash_mode = qio\n```\n\n----------------------------------------\n\nTITLE: Using the PlatformIO test command\nDESCRIPTION: Basic syntax for the 'pio test' command which runs project tests on the local machine using PlatformIO's unit testing framework.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/cmd_test.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio test [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Example Output of PlatformIO Platform List Command\nDESCRIPTION: This snippet shows the example output of the 'pio platform list' command. It displays information about installed platforms, including their names, descriptions, home URLs, available packages, and versions.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/platforms/cmd_list.rst#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> pio platform list\n\natmelavr ~ Atmel AVR\n====================\nAtmel AVR 8- and 32-bit MCUs deliver a unique combination of performance, power efficiency and design flexibility. Optimized to speed time to market-and easily adapt to new ones-they are based on the industrys most code-efficient architecture for C and assembly programming.\n\nHome: https://platformio.org/platforms/atmelavr\nPackages: toolchain-atmelavr, framework-simba\nVersion: 0.0.0\n\natmelsam ~ Atmel SAM\n====================\nAtmel | SMART offers Flash- based ARM products based on the ARM Cortex-M0+, Cortex-M3 and Cortex-M4 architectures, ranging from 8KB to 2MB of Flash including a rich peripheral and feature mix.\n\nHome: https://platformio.org/platforms/atmelsam\nPackages: framework-arduinosam, framework-mbed, framework-simba, toolchain-gccarmnoneeabi, tool-bossac\nVersion: 0.0.0\n\nespressif8266 ~ Espressif 8266\n==============================\nEspressif Systems is a privately held fabless semiconductor company. They provide wireless communications and Wi-Fi chips which are widely used in mobile devices and the Internet of Things applications.\n\nHome: https://platformio.org/platforms/espressif8266\nPackages: framework-simba, tool-esptool, framework-arduinoespressif8266, sdk-esp8266, toolchain-xtensa\nVersion: 0.0.0\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Speed in PlatformIO INI File\nDESCRIPTION: Examples of setting the debug_speed option in a PlatformIO configuration file. It demonstrates how to set a fixed speed in kHz, use automatic speed (J-Link only), and enable adaptive clocking (J-Link only).\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/env/options/debug/debug_speed.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:custom_debug_speed_examples]\n...\n\n; fixed speed in kHz\ndebug_speed = 500\n\n; automatic speed (only J-Link)\ndebug_speed = auto\n\n; adaptive clocking instead of fixed JTAG speed (only J-Link)\ndebug_speed = adaptive\n```\n\n----------------------------------------\n\nTITLE: Configuring Zephyr Modules in CMakeLists.txt\nDESCRIPTION: Example of how to include additional Zephyr modules in a project by setting the ZEPHYR_EXTRA_MODULES variable. This must be done before including the Zephyr boilerplate file to ensure modules are properly detected and integrated.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/frameworks/zephyr_extra.rst#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Additional modules\nset(ZEPHYR_EXTRA_MODULES \"path/to-zephyr-custom-module\"  [...])\n\n# Boilerplate code, which pulls in the Zephyr build system.\ncmake_minimum_required(VERSION 3.13.1)\ninclude($ENV{ZEPHYR_BASE}/cmake/app/boilerplate.cmake NO_POLICY_SCOPE)\nproject(my_zephyr_app)\n\n# Add your source file to the \"app\" target. This must come after\n# the boilerplate code, which defines the target.\ntarget_sources(app PRIVATE ../src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Using pio pkg install Command\nDESCRIPTION: Basic usage syntax for the 'pio pkg install' command in PlatformIO.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/pkg/cmd_install.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio pkg install [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Running PlatformIO Commands in Eclipse Che Terminal\nDESCRIPTION: Demonstrates various PlatformIO CLI commands for building, cleaning, uploading firmware, and managing remote devices within the Eclipse Che environment.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/ide/eclipseche.rst#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npio run\npio run -t clean\npio remote run -t upload\npio remote device list\npio remote device monitor\n```\n\n----------------------------------------\n\nTITLE: Running PlatformIO Core Commands from Terminal\nDESCRIPTION: Commands to change directory to a PlatformIO project, install PlatformIO Home dependencies, and run a build with upload. This is a solution for antivirus-related access issues.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/faq/troubleshooting.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Change directory to PlatformIO Project where is located \"platformio.ini\"\ncd path/to/platformio/project\n\n# Force PlatformIO to install PlatformIO Home dependencies\npio home\n\n# Force PlatformIO to install toolchains\npio run --target upload\n```\n\n----------------------------------------\n\nTITLE: Using PlatformIO Upgrade Command in Bash\nDESCRIPTION: The basic usage of the 'pio upgrade' command that checks for the latest version of PlatformIO Core and upgrades it if a newer version is available.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/cmd_upgrade.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio upgrade\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Debug Target in PlatformIO.ini\nDESCRIPTION: Example showing how to configure a specific unit test for debugging using the debug_test parameter in a PlatformIO environment configuration. This setting specifies which test should be run in debug mode.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/env/options/debug/debug_test.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:debug_a_test]\n...\n\ndebug_test = test_calculator\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Include Paths in PlatformIO Library Build Configuration\nDESCRIPTION: Example demonstrating how to add multiple include paths to a PlatformIO library build. This helps the compiler find header files located in specific directories.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/manifests/library-json/fields/build/builder.rst#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\"build\": {\n    \"flags\": [\n        \"-I inc\",\n        \"-I inc/target_x13\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AppVeyor CI for PlatformIO Library Projects\nDESCRIPTION: This YAML configuration sets up AppVeyor CI for PlatformIO library projects. It allows specifying source files or directories, installs PlatformIO, and runs CI tests for specified boards.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/ci/appveyor.rst#2025-04-10_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nbuild: off\nenvironment:\n\n  matrix:\n    - PLATFORMIO_CI_SRC: \"path\\\\to\\\\source\\\\file.c\"\n    - PLATFORMIO_CI_SRC: \"path\\\\to\\\\source\\\\file.ino\"\n    - PLATFORMIO_CI_SRC: \"path\\\\to\\\\source\\\\directory\"\n\ninstall:\n    - cmd: git submodule update --init --recursive\n    - cmd: SET PATH=%PATH%;C:\\Python27\\Scripts\n    - cmd: pip install -U platformio\n\ntest_script:\n    - cmd: pio ci --board=<ID_1> --board=<ID_2> --board=<ID_N>\n```\n\n----------------------------------------\n\nTITLE: Customizing ESP32 Board Configuration in PlatformIO\nDESCRIPTION: Example configuration showing how to override default board options for an ESP32 Dev Module. Demonstrates setting custom CPU frequency, flash frequency, flash mode, linker script, and maximum program size.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/env/options/platform/index.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:custom_board_options]\n; Custom CPU Frequency\nboard_build.f_cpu = 160000000L\n\n; Custom FLASH Frequency\nboard_build.f_flash = 80000000L\n\n; Custom FLASH Mode\nboard_build.flash_mode = qio\n\n; Custom linker script\nboard_build.ldscript = /path/to/ldscript.ld\n\n; Custom maximum program size\nboard_upload.maximum_size = 1310720\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced OTA Upload Options for ESP8266\nDESCRIPTION: Example of setting additional OTA upload flags in platformio.ini, such as custom port and authentication password for ESP8266 boards.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/espressif8266_extra.rst#2025-04-10_snippet_16\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nupload_protocol = espota\n; each flag in a new line\nupload_flags =\n  --port=8266\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoTiler Library Path in PlatformIO\nDESCRIPTION: Configuration snippet for adding the GAP8 AutoTiler library to a PlatformIO project. This sets up the build flags to include the library path for the GAPuino board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/riscv_gap_extra.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:gapuino]\nplatform = riscv_gap\nboard = gapuino\nframework = ...\nbuild_flags = -L/path/to/libtile/folder\n```\n\n----------------------------------------\n\nTITLE: Declaring Library Dependencies in platformio.ini\nDESCRIPTION: Example of how to declare library dependencies in the project configuration file using the lib_deps option.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/pkg/cmd_install.rst#2025-04-10_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nlib_deps =\n    bblanchon/ArduinoJson\n    etlcpp/Embedded Template Library\n```\n\n----------------------------------------\n\nTITLE: Configuring Mbed OS Parameters with JSON\nDESCRIPTION: Example of using mbed_app.json to customize Mbed OS compile-time configuration parameters. This JSON file should be placed in the project root directory.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/frameworks/mbed_extra.rst#2025-04-10_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"config\": {\n    \"param1\": {\n      \"value\": \"value1\"\n    },\n    \"param2\": {\n      \"value\": \"value2\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Outdated Packages for ESPHome Project\nDESCRIPTION: Example showing how to check outdated packages for an ESPHome project environment, displaying version information for multiple libraries including ArduinoJson, FastLED, and TinyGPSPlus.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/pkg/cmd_outdated.rst#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> pio pkg outdated -e esp8266-arduino\nChecking  [####################################]  100%\n\nSemantic Versioning color legend:\n<Major Update>  backward-incompatible updates\n<Minor Update>  backward-compatible features\n<Patch Update>  backward-compatible bug fixes\n\nPackage      Current    Wanted    Latest    Type     Environments\n-----------  ---------  --------  --------  -------  ---------------\nArduinoJson  6.18.5     6.18.5    6.19.1    Library  esp8266-arduino\nFastLED      3.3.2      3.3.2     3.5.0     Library  esp8266-arduino\nTinyGPSPlus  1.0.2      1.0.2     1.0.3     Library  esp8266-arduino\n```\n\n----------------------------------------\n\nTITLE: Project Initialization with Custom Directory\nDESCRIPTION: Example demonstrating project initialization in a specified directory path.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/project/cmd_init.rst#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n> pio project init -d %PATH_TO_DIR%\n\nThe following files/directories will be created in ***\n platformio.ini - Project Configuration File. |-> PLEASE EDIT ME <-|\n...\n```\n\n----------------------------------------\n\nTITLE: Creating a library.json manifest file for PlatformIO\nDESCRIPTION: Example of a library.json manifest file that includes metadata such as name, version, description, keywords, repository information, authors, license, and dependencies.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/librarymanager/creating.rst#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"name\": \"HelloWorld\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A \\\"Hello world\\\" program is a computer program that outputs \\\"Hello World\\\" (or some variant) on a display device\",\n  \"keywords\": \"planet, happiness, people\",\n  \"repository\":\n  {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/username/hello-world.git\"\n  },\n  \"authors\":\n  [\n    {\n      \"name\": \"John Smith\",\n      \"email\": \"me@john-smith.com\",\n      \"url\": \"https://www.john-smith/contact\"\n    },\n    {\n      \"name\": \"Andrew Smith\",\n      \"email\": \"me@andrew-smith.com\",\n      \"url\": \"https://www.andrew-smith/contact\",\n      \"maintainer\": true\n    }\n  ],\n  \"license\": \"MIT\",\n  \"homepage\": \"https://www.helloworld.org/\",\n  \"dependencies\": {\n    \"ownername/print\": \"~1.3.0\"\n  },\n  \"frameworks\": \"*\",\n  \"platforms\": \"*\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Port in PlatformIO INI\nDESCRIPTION: The 'debug_port' option is used to specify the debugging port for a remote target. It can be a serial device or network address. If not specified, PlatformIO attempts to detect it automatically. The value should be a string representing the port or address.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/env/options/debug/debug_port.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\ndebug_port = /dev/ttyUSB0\n```\n\nLANGUAGE: ini\nCODE:\n```\ndebug_port = COM3\n```\n\nLANGUAGE: ini\nCODE:\n```\ndebug_port = localhost:3333\n```\n\n----------------------------------------\n\nTITLE: Configuring ST-LINK Debugging Tool in PlatformIO.ini\nDESCRIPTION: Configuration example for setting up the ST-LINK debugging tool in a PlatformIO project configuration file. This snippet shows how to specify ST-LINK as the debugging tool for a project environment.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/stlink.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = ...\nboard = ...\ndebug_tool = stlink\n```\n\n----------------------------------------\n\nTITLE: Library Manager Dependencies Configuration\nDESCRIPTION: YAML configuration showing how to install dependent libraries using PlatformIO Library Manager in Travis CI.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/ci/travis.rst#2025-04-10_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ninstall:\n    - pip install -U platformio\n    - pio lib -g install 1\n```\n\n----------------------------------------\n\nTITLE: Searching for Platforms with mbed Framework\nDESCRIPTION: This example shows how to search for development platforms that support the mbed framework using the 'pio platform search' command with the query 'framework-mbed'.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/platforms/cmd_search.rst#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n> pio platform search framework-mbed\n```\n\n----------------------------------------\n\nTITLE: STM32 Board Configuration Table\nDESCRIPTION: ReStructuredText table listing STM32 development boards with their technical specifications including processor model, clock speed, flash memory and RAM details.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/jlink.rst#2025-04-10_snippet_7\n\nLANGUAGE: restructuredtext\nCODE:\n```\n* - :ref:`board_ststm32_nucleo_l031k6`\n      - :ref:`platform_ststm32`\n      - On-board\n      - STM32L031K6T6\n      - 32MHz\n      - 32KB\n      - 8KB\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic ESP32-C6-DevKitM-1 Board Settings\nDESCRIPTION: Basic board configuration example using the esp32-c6-devkitm-1 board definition in PlatformIO.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32-c6-devkitm-1.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32-c6-devkitm-1]\nplatform = espressif32\nboard = esp32-c6-devkitm-1\n```\n\n----------------------------------------\n\nTITLE: Filtering test suites with PlatformIO\nDESCRIPTION: Examples of using filter options to selectively run test suites based on path patterns relative to the test directory.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/cmd_test.rst#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npio test --filter \"test_common\" -f \"native/*\"\n```\n\n----------------------------------------\n\nTITLE: Extending Unity Test Runner with Custom Testing Stage\nDESCRIPTION: Example of extending the Unity test runner by overriding the testing stage to implement custom test result gathering and reporting. Shows how to add test cases with different statuses, messages, and source information.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/advanced/unit-testing/frameworks/custom/runner.rst#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom platformio.public import TestCase, TestCaseSource, TestStatus, UnityTestRunner\n\n\nclass CustomTestRunner(UnityTestRunner):\n    def stage_testing(self):\n        # 1. Gather test results from Serial, HTTP, Socket, or other sources\n        # 2. Report test results (add cases)\n\n        # Example: Report succeed result with duration (optional)\n        self.test_suite.add_case(\n            TestCase(name=\"test_connectivity\", status=TestStatus.PASSED, duration=1.34)\n        )\n\n        # Example: Report failed result with source file\n        self.test_suite.add_case(\n            TestCase(\n                name=\"test_calculator_division\",\n                status=TestStatus.FAILED,\n                message=\"Expected 32 Was 33\",\n                stdout=\"test/test_desktop/test_calculator.cpp:43:test_calculator_division:FAIL: Expected 32 Was 33\",\n                duration=0.44,\n                source=TestCaseSource(\n                    filename=\"test/test_desktop/test_calculator.cpp\", line=43\n                ),\n            )\n        )\n```\n\n----------------------------------------\n\nTITLE: Configuring ST-LINK for Both Debugging and Firmware Upload\nDESCRIPTION: Configuration example for using ST-LINK as both a debugging tool and upload protocol in PlatformIO. This allows the ST-LINK to be used for both debugging sessions and firmware uploading.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/stlink.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = ...\nboard = ...\ndebug_tool = stlink\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Specifying J-LINK Probe Serial Number\nDESCRIPTION: Shows how to specify a particular J-LINK probe by its serial number when multiple probes are connected to the host machine.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/jlink.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:nrf52_dk]\nplatform = nordicnrf52\nframework = arduino\nboard = nrf52_dk\nupload_flags =\n    -SelectEmuBySN\n    123456789\n```\n\n----------------------------------------\n\nTITLE: Customizing ST Nucleo L010RB Board Settings\nDESCRIPTION: Example of overriding default board settings in PlatformIO, including changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_l010rb.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_l010rb]\nplatform = ststm32\nboard = nucleo_l010rb\n\n; change microcontroller\nboard_build.mcu = stm32l010rbt6\n\n; change MCU frequency\nboard_build.f_cpu = 32000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Arduino Framework with Staging Version for ESP32\nDESCRIPTION: PlatformIO configuration to use the latest staging version of the Arduino framework for ESP32 from the GitHub repository.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/espressif32_extra.rst#2025-04-10_snippet_13\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32dev]\nplatform = platformio/espressif32\nboard = esp32dev\nframework = arduino\nplatform_packages =\n    platformio/framework-arduinoespressif32 @ https://github.com/espressif/arduino-esp32.git\n```\n\n----------------------------------------\n\nTITLE: Development Board List Table in ReStructuredText\nDESCRIPTION: ReStructuredText formatted table containing specifications for multiple development boards, including platform details, debug capabilities, MCU specifications, operating frequencies, and memory configurations.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debugging.rst#2025-04-10_snippet_7\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. list-table::\n    :header-rows:  1\n\n    * - Name\n      - Platform\n      - Debug\n      - MCU\n      - Frequency\n      - Flash\n      - RAM\n    * - :ref:`board_nordicnrf52_ruuvitag`\n      - :ref:`platform_nordicnrf52`\n      - External\n      - NRF52832\n      - 64MHz\n      - 512KB\n      - 64KB\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO CI Command Usage\nDESCRIPTION: Basic syntax for using the PlatformIO CI command to build projects. Accepts source files/directories as arguments with various options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/cmd_ci.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio ci [OPTIONS] [SRC]\n```\n\n----------------------------------------\n\nTITLE: Configuring debug_load_mode Parameter in PlatformIO\nDESCRIPTION: The debug_load_mode parameter controls when PlatformIO loads debugging firmware to the target device. It accepts three possible values: always (default), modified (only when firmware changes), or manual (requires user to pre-flash the device).\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/env/options/debug/debug_load_mode.rst#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n``debug_load_mode``\n```\n\n----------------------------------------\n\nTITLE: Basic AVR-Stub Debug Configuration in PlatformIO\nDESCRIPTION: Initial configuration setup for avr-stub debugging tool in platformio.ini, including required platform settings and library dependencies.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/avr-stub_extra.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = atmelavr\nboard = ...\n\ndebug_tool = avr-stub\ndebug_port = SERIAL_PORT\n\n; GDB stub implementation\nlib_deps =\n    jdolinay/avr-debugger @ ~1.4\n```\n\n----------------------------------------\n\nTITLE: Filtering Tests with Pattern Matching in PlatformIO\nDESCRIPTION: Example showing how to filter tests by name using pattern matching with the 'pio test' command. The example demonstrates using wildcard patterns to include specific tests while ignoring others.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/remote/cmd_test.rst#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npio test --filter \"mytest*\" -i \"test[13]\"\n```\n\n----------------------------------------\n\nTITLE: Searching for official platforms supporting STM32F405RG MCU\nDESCRIPTION: Advanced example of 'pio pkg search' using multiple qualifiers to find official development platforms that support the STM32F405RG microcontroller unit.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/pkg/cmd_search.rst#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n> pio pkg search \"type:platform tier:official STM32F405RG\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Bluetooth LE Characteristics in ESP32 Arduino\nDESCRIPTION: This code creates a BLE server on an ESP32 device with a characteristic that can be read and written. When a new value is written to the characteristic by a connected client, it prints the value to the serial monitor. The BLE device advertises itself as 'ESP32 BLE example'.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/tutorials/espressif32/arduino_debugging_unit_testing.rst#2025-04-10_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\n#include <Arduino.h>\n#include <BLEDevice.h>\n#include <BLEUtils.h>\n#include <BLEServer.h>\n\n#define SERVICE_UUID        \"4fafc201-1fb5-459e-8fcc-c5c9c331914b\"\n#define CHARACTERISTIC_UUID \"beb5483e-36e1-4688-b7f5-ea07361b26a8\"\n\nclass MyCallbacks: public BLECharacteristicCallbacks {\n    void onWrite(BLECharacteristic *pCharacteristic) {\n      std::string value = pCharacteristic->getValue();\n      if (value.length() > 0) {\n        Serial.print(\"\\r\\nNew value: \");\n        for (int i = 0; i < value.length(); i++)\n          Serial.print(value[i]);\n        Serial.println();\n      }\n    }\n};\n\nvoid setup() {\n  Serial.begin(9600);\n\n  BLEDevice::init(\"ESP32 BLE example\");\n  BLEServer *pServer = BLEDevice::createServer();\n  BLEService *pService = pServer->createService(SERVICE_UUID);\n  BLECharacteristic *pCharacteristic = pService->createCharacteristic(\n                                         CHARACTERISTIC_UUID,\n                                         BLECharacteristic::PROPERTY_READ |\n                                         BLECharacteristic::PROPERTY_WRITE\n                                       );\n\n  pCharacteristic->setCallbacks(new MyCallbacks());\n\n  pCharacteristic->setValue(\"Hello World\");\n  pService->start();\n\n  BLEAdvertising *pAdvertising = pServer->getAdvertising();\n  pAdvertising->start();\n}\n\nvoid loop() {\n  delay(2000);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing PlatformIO Core with curl on macOS/Linux\nDESCRIPTION: Downloads and executes the PlatformIO installer script using curl. This method installs PlatformIO Core into a virtual Python environment without requiring administrative permissions.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/installation/methods/installer-script.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL -o get-platformio.py https://raw.githubusercontent.com/platformio/platformio-core-installer/master/get-platformio.py\npython3 get-platformio.py\n```\n\n----------------------------------------\n\nTITLE: Manual udev Rules Installation\nDESCRIPTION: Manually copies the downloaded udev rules file to the system directory.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/installation/udev-rules.rst#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo cp 99-platformio-udev.rules /etc/udev/rules.d/99-platformio-udev.rules\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Check Tools in PlatformIO INI File\nDESCRIPTION: This snippet demonstrates how to set up multiple code analysis tools using the 'check_tool' option in a PlatformIO project configuration file. It specifies both cppcheck and clangtidy as the tools to be used for code checking.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/env/options/check/check_tool.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = ...\nboard = ...\ncheck_tool = cppcheck, clangtidy\n```\n\n----------------------------------------\n\nTITLE: Preventing Script Execution During IDE Integration\nDESCRIPTION: Python hook to check if the script is being executed during IDE integration stage. This allows developers to skip certain script operations when PlatformIO is gathering integration information for IDE plugins.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/scripting/launch_types.rst#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nImport(\"env\")\n\nif env.IsIntegrationDump():\n   # stop the current script execution\n   Return()\n\n# code below runs for the \"build\" and other targets\nenv.Append(CPPDEFINES=[\"MACRO_NAME\"])\n```\n\n----------------------------------------\n\nTITLE: Configuring USBasp and ST-Link Upload Commands\nDESCRIPTION: Combined example showing USBasp configuration for AVR and ST-Link configuration for STM32. Demonstrates custom upload protocols with specific flags and commands for different microcontroller families.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/env/options/upload/upload_command.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:program_via_usbasp]\nplatform = atmelavr\nframework = arduino\nboard = uno\nupload_protocol = custom\nupload_flags =\n    -C\n    ${platformio.packages_dir}/tool-avrdude/avrdude.conf\n    -p\n    atmega328p\n    -Pusb\n    -c\n    stk500v1\nupload_command = avrdude $UPLOAD_FLAGS -U flash:w:$SOURCE:i\n\n\n; Use ST-util for flashing\n; https://github.com/texane/stlink\n\n[env:custom_st_flash]\nplatform = ststm32\nframework = stm32cube\nboard = bluepill_f103c6\nupload_protocol = custom\nupload_command = ${platformio.packages_dir}/tool-stlink/st-flash write $SOURCE 0x8000000\n```\n\n----------------------------------------\n\nTITLE: Installing PlatformIO Core with wget on macOS/Linux\nDESCRIPTION: Downloads and executes the PlatformIO installer script using wget. This is an alternative method for systems that have wget installed instead of curl.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/installation/methods/installer-script.rst#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwget -O get-platformio.py https://raw.githubusercontent.com/platformio/platformio-core-installer/master/get-platformio.py\npython3 get-platformio.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Bootloader for ATmega4808 in PlatformIO\nDESCRIPTION: PlatformIO configuration for setting a custom bootloader and accompanying fuses for an ATmega4808 board. This example shows how to specify a custom bootloader file path and define specific fuse values.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/atmelmegaavr_extra.rst#2025-04-10_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega4808]\nplatform = atmelmegaavr\nframework = arduino\nboard = ATmega4808\n\nboard_bootloader.file = /path/to/custom/bootloader.hex\nboard_bootloader.bootend = 0xFF\nboard_bootloader.syscfg0 = 0xDE\nboard_bootloader.osccfg = 0xFD\nboard_bootloader.lock_bits = 0x0F\n```\n\n----------------------------------------\n\nTITLE: Configuring platformio.ini to use extra scripts\nDESCRIPTION: This snippet shows how to configure the platformio.ini file to reference an external Python script that will handle installing additional Python packages. The extra_scripts parameter points to a Python file that will be executed during the build process.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/scripting/examples/extra_python_packages.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:my_env]\nplatform = ...\nextra_scripts = extra_script.py\n```\n\n----------------------------------------\n\nTITLE: Unity Test File Structure in C\nDESCRIPTION: Example of a basic Unity test file structure including setup, teardown, test functions and different main implementations for native, Arduino and ESP-IDF frameworks.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/advanced/unit-testing/frameworks/unity.rst#2025-04-10_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#include \"unity.h\"\n#include \"file_to_test.h\"\n\nvoid setUp(void) {\n  // set stuff up here\n}\n\nvoid tearDown(void) {\n  // clean stuff up here\n}\n\nvoid test_function_should_doBlahAndBlah(void) {\n  // test stuff\n}\n\nvoid test_function_should_doAlsoDoBlah(void) {\n  // more test stuff\n}\n\nint runUnityTests(void) {\n  UNITY_BEGIN();\n  RUN_TEST(test_function_should_doBlahAndBlah);\n  RUN_TEST(test_function_should_doAlsoDoBlah);\n  return UNITY_END();\n}\n\n// WARNING!!! PLEASE REMOVE UNNECESSARY MAIN IMPLEMENTATIONS //\n\n/**\n  * For native dev-platform or for some embedded frameworks\n  */\nint main(void) {\n  return runUnityTests();\n}\n\n/**\n  * For Arduino framework\n  */\nvoid setup() {\n  // Wait ~2 seconds before the Unity test runner\n  // establishes connection with a board Serial interface\n  delay(2000);\n\n  runUnityTests();\n}\nvoid loop() {}\n\n/**\n  * For ESP-IDF framework\n  */\nvoid app_main() {\n  runUnityTests();\n}\n```\n\n----------------------------------------\n\nTITLE: Basic CMakeLists.txt for Zephyr Framework in PlatformIO\nDESCRIPTION: A typical CMakeLists.txt file for a Zephyr project that pulls in the Zephyr build system and specifies the source files. The file must use relative paths to source files since they are located outside the zephyr folder.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/frameworks/zephyr_extra.rst#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Boilerplate code, which pulls in the Zephyr build system.\ncmake_minimum_required(VERSION 3.13.1)\ninclude($ENV{ZEPHYR_BASE}/cmake/app/boilerplate.cmake NO_POLICY_SCOPE)\nproject(my_zephyr_app)\n\n# Add your source file to the \"app\" target. This must come after the boilerplate\n# code, which defines the target. Note relative path to source file\ntarget_sources(app PRIVATE ../src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring Monitor Port Settings in PlatformIO INI\nDESCRIPTION: Demonstrates various ways to specify the monitor_port parameter in PlatformIO configuration files, including Unix ports, Windows COM ports with patterns, and socket connections.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/env/options/monitor/monitor_port.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:custom_monitor_port]\n...\n; Unix\nmonitor_port = /dev/ttyUSB1\n\n; Windows, COM1 or COM3\nmonitor_port = COM[13]\n\n; Socket\nmonitor_port = socket://localhost:4444\n```\n\n----------------------------------------\n\nTITLE: Overriding Fuse Values for Atmel AVR in PlatformIO\nDESCRIPTION: This Python script shows how to override default fuse values for an Atmel AVR microcontroller in PlatformIO. It replaces the FUSESFLAGS environment variable with custom high, extended, low, and lock fuse values.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/atmelavr_extra.rst#2025-04-10_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nImport(\"env\")\n\nenv.Replace(\n    FUSESFLAGS=[\n        \"-Uhfuse:w:0xAA:m\",\n        \"-Uefuse:w:0xBB:m\",\n        \"-Ulfuse:w:0xCC:m\",\n        \"-Ulock:w:0xDD:m\"\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Root CMakeLists.txt for ESP-IDF\nDESCRIPTION: Basic CMake configuration required in the project root directory to enable ESP-IDF build system integration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/frameworks/espidf_extra.rst#2025-04-10_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# The following lines of boilerplate have to be in your project's CMakeLists\n# in this exact order for cmake to work correctly\ncmake_minimum_required(VERSION 3.16.0)\n\ninclude($ENV{IDF_PATH}/tools/cmake/project.cmake)\nproject(project-name)\n```\n\n----------------------------------------\n\nTITLE: Running Command from First Matched Package in PlatformIO\nDESCRIPTION: Example showing how to run an OpenOCD command from the first matching installed package, displaying the help information for OpenOCD.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/pkg/cmd_exec.rst#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> pio pkg exec -- openocd --help\n\nOpenOCD x86_64 Open On-Chip Debugger 0.11.0+dev (2021-10-17-00:18)\nLicensed under GNU GPL v2\nFor bug reports, read\n    http://openocd.org/doc/doxygen/bugs.html\nOpen On-Chip Debugger\nLicensed under GNU GPL v2\n--help       | -h   display this help\n--version    | -v   display OpenOCD version\n--file       | -f   use configuration file <name>\n--search     | -s   dir to search for config files and scripts\n--debug      | -d   set debug level to 3\n             | -d<n>    set debug level to <level>\n--log_output | -l   redirect log output to file <name>\n--command    | -c   run <command>\n```\n\n----------------------------------------\n\nTITLE: Configuring LittleFS Filesystem for ESP8266\nDESCRIPTION: Example of selecting LittleFS as the filesystem for ESP8266 Arduino projects using the board_build.filesystem option in platformio.ini. By default, SPIFFS is used for legacy compatibility.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/espressif8266_extra.rst#2025-04-10_snippet_14\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = espressif8266\nframework = arduino\nboard = ...\nboard_build.filesystem = littlefs\n```\n\n----------------------------------------\n\nTITLE: Enabling Serial Debug for ESP8266 in PlatformIO\nDESCRIPTION: Activates serial debugging output by specifying which serial port to use for debug messages. This config enables debugging on the primary Serial port.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/espressif8266_extra.rst#2025-04-10_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\n...\nbuild_flags = -DDEBUG_ESP_PORT=Serial\n\n; or for Serial1\nbuild_flags = -DDEBUG_ESP_PORT=Serial1\n```\n\n----------------------------------------\n\nTITLE: Defining extra_scripts in platformio.ini\nDESCRIPTION: Configuration snippet showing how to define extra scripts in platformio.ini. The extra_scripts option accepts file paths relative to the project folder and can include multiple script files for PRE and POST build operations.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/env/options/advanced/extra_scripts.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nextra_scripts = pre:script_path.py post:another_script.py\n```\n\n----------------------------------------\n\nTITLE: Defining upload_resetmethod in PlatformIO configuration\nDESCRIPTION: The 'upload_resetmethod' option is a string type configuration that specifies the reset method for the 'uploader' tool. It is not available for all development platforms and is primarily supported by the Espressif8266 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/env/options/upload/upload_resetmethod.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nupload_resetmethod = value\n```\n\n----------------------------------------\n\nTITLE: Running PlatformIO with Program Arguments Example\nDESCRIPTION: Example showing how to pass extra arguments to a native program in PlatformIO using the --program-arg option. Multiple arguments can be passed using either the full or shortened format.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/cmd_run.rst#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> pio run -t exec --program-arg \"arg1\" --program-arg=\"--option1=value1\"\n# or short format\n> pio run -t exec -a \"arg1\" -a \"--option1=value1\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Shippable CI for USB_Host_Shield_2.0 Project\nDESCRIPTION: This YAML configuration sets up Shippable CI for the USB_Host_Shield_2.0 project. It specifies multiple source files, installs PlatformIO and additional dependencies, and runs CI tests for multiple boards.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/ci/shippable.rst#2025-04-10_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nlanguage: python\npython:\n    - \"3.11\"\n\nenv:\n    - PLATFORMIO_CI_SRC=examples/Bluetooth/PS3SPP/PS3SPP.ino\n    - PLATFORMIO_CI_SRC=examples/pl2303/pl2303_gps/pl2303_gps.ino\n\ninstall:\n    - pip install -U platformio\n    - wget https://github.com/xxxajk/spi4teensy3/archive/master.zip -O /tmp/spi4teensy3.zip\n    - unzip /tmp/spi4teensy3.zip -d /tmp\n\nscript:\n    - pio ci --lib=\".\" --lib=\"/tmp/spi4teensy3-master\" --board=uno --board=teensy31 --board=due\n```\n\n----------------------------------------\n\nTITLE: Configuring Doctest Framework in platformio.ini\nDESCRIPTION: Basic configuration for setting up the Doctest testing framework in a PlatformIO project. This snippet shows the minimum required configuration in the platformio.ini file to enable Doctest for native testing.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/advanced/unit-testing/frameworks/doctest.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:native]\nplatform = native\ntest_framework = doctest\n```\n\n----------------------------------------\n\nTITLE: Configuring AVR ISP Upload Command with Custom Protocol\nDESCRIPTION: Example configuration for programming an Arduino Uno using AVR ISP with custom upload protocol. Uses avrdude with specific flags for atmega328p microcontroller and defines custom upload parameters.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/env/options/upload/upload_command.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:program_via_AVR_ISP]\nplatform = atmelavr\nframework = arduino\nboard = uno\nupload_protocol = custom\nupload_flags =\n    -C\n    ${platformio.packages_dir}/tool-avrdude/avrdude.conf\n    -p\n    atmega328p\n    -P\n    $UPLOAD_PORT\n    -b\n    115200\n    -c\n    stk500v1\nupload_command = avrdude $UPLOAD_FLAGS -U flash:w:$SOURCE:i\n```\n\n----------------------------------------\n\nTITLE: Configuring ESP-Prog Upload Protocol in platformio.ini\nDESCRIPTION: Configuration settings for using ESP-Prog as both a debug tool and upload protocol in the PlatformIO project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/esp-prog.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = ...\nboard = ...\ndebug_tool = esp-prog\nupload_protocol = esp-prog\n```\n\n----------------------------------------\n\nTITLE: Basic STM32L073Z-EVAL Board Configuration\nDESCRIPTION: Basic PlatformIO configuration for the STM32L073Z-EVAL board using the ststm32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/eval_l073z.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:eval_l073z]\nplatform = ststm32\nboard = eval_l073z\n```\n\n----------------------------------------\n\nTITLE: Overriding Filesystem Image Name for ESP8266\nDESCRIPTION: Example of using a PRE extra script to customize the filesystem image name for ESP8266 projects.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/espressif8266_extra.rst#2025-04-10_snippet_18\n\nLANGUAGE: ini\nCODE:\n```\n[env:d1]\nplatform = espressif8266\nframework = arduino\nboard = d1\nboard_build.filesystem = littlefs\nextra_scripts =\n    pre:extra_script.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Chip Erase Before Programming for ATmega AVR in PlatformIO\nDESCRIPTION: This snippet shows how to configure PlatformIO to erase the chip memory before programming an ATmega AVR microcontroller. It adds the -e flag to the upload_flags option to execute a chip erase.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/atmelavr_extra.rst#2025-04-10_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\n[env:uno]\nplatform = atmelavr\nframework = arduino\nboard = uno\nupload_flags =\n  -e\n```\n\n----------------------------------------\n\nTITLE: Installing Development Platforms with pio pkg install\nDESCRIPTION: Examples of installing development platforms using the '-p' or '--platform' option, supporting both registry packages and git repositories.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/pkg/cmd_install.rst#2025-04-10_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npio pkg install -p \"aceinna/aceinna_imu@^1.3.8\" -p \"platformio/atmelavr\"\npio pkg install --platform \"https://github.com/platformio/platform-sifive.git\"\n```\n\n----------------------------------------\n\nTITLE: Updating specified libraries in global storage\nDESCRIPTION: Example of updating specific libraries (Json and IRremote) in the global storage using the 'pio lib update' command.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/lib/cmd_update.rst#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n> pio lib -g update Json 4\n\nLibrary Storage: /storage/dir/...\nUpdating Json @ 5.6.4:  [Up-to-date]\nUpdating IRremote @ 2.2.1:  [Up-to-date]\n```\n\n----------------------------------------\n\nTITLE: Setting C/C++ Compiler Flags\nDESCRIPTION: Python script that demonstrates how to set separate compiler flags for C and C++ compilation. CCFLAGS are applied to both C and C++, while CFLAGS and CXXFLAGS are specific to C and C++ respectively.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/scripting/examples/split_build_flags.rst#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nImport(\"env\")\n\n# General options that are passed to the C and C++ compilers\nenv.Append(CCFLAGS=[\"flag1\", \"flag2\"])\n\n# General options that are passed to the C compiler (C only; not C++)\nenv.Append(CFLAGS=[\"flag1\", \"flag2\"])\n\n# General options that are passed to the C++ compiler\nenv.Append(CXXFLAGS=[\"flag1\", \"flag2\"])\n```\n\n----------------------------------------\n\nTITLE: Example Output of pio update Command\nDESCRIPTION: Sample output showing package checking and update status for various platforms and libraries. The output displays the current status of installed components, showing which are up-to-date and which ones are being checked for updates.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/cmd_update.rst#2025-04-10_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n> pio update\n\nPlatform Manager\n================\nPlatform timsp430\n--------\nUpdating timsp430 @ 0.0.0:  [Up-to-date]\nUpdating toolchain-timsp430 @ 1.40603.0:    [Up-to-date]\nUpdating framework-energiamsp430 @ 1.17.0:  [Up-to-date]\nUpdating tool-scons @ 2.4.1:    [Up-to-date]\n\nPlatform freescalekinetis\n--------\nUpdating freescalekinetis @ 0.0.0:  [Up-to-date]\nUpdating framework-mbed @ 1.121.1:  [Up-to-date]\nUpdating toolchain-gccarmnoneeabi @ 1.40804.0:  [Up-to-date]\nUpdating tool-scons @ 2.4.1:    [Up-to-date]\n\nPlatform ststm32\n--------\nUpdating ststm32 @ 0.0.0:   [Up-to-date]\nUpdating framework-libopencm3 @ 1.1.0:  [Up-to-date]\nUpdating toolchain-gccarmnoneeabi @ 1.40804.0:  [Up-to-date]\nUpdating tool-stlink @ 1.10200.0:   [Up-to-date]\nUpdating framework-spl @ 1.10201.0:     [Up-to-date]\nUpdating framework-cmsis @ 1.40300.0:   [Up-to-date]\nUpdating framework-mbed @ 1.121.1:  [Up-to-date]\nUpdating tool-scons @ 2.4.1:    [Up-to-date]\n\nPlatform lattice_ice40\n--------\nUpdating lattice_ice40 @ 0.0.0:     [Up-to-date]\nUpdating toolchain-icestorm @ 1.7.0:    [Up-to-date]\nUpdating tool-scons @ 2.4.1:    [Up-to-date]\n\nPlatform atmelavr\n--------\nUpdating atmelavr @ 0.0.0:  [Up-to-date]\nUpdating framework-arduinoavr @ 1.10608.1:  [Up-to-date]\nUpdating tool-avrdude @ 1.60001.1:  [Up-to-date]\nUpdating toolchain-atmelavr @ 1.40801.0:    [Up-to-date]\nUpdating tool-scons @ 2.4.1:    [Up-to-date]\n\nPlatform espressif8266\n--------\nUpdating espressif8266 @ 0.0.0:     [Up-to-date]\nUpdating tool-scons @ 2.4.1:    [Up-to-date]\nUpdating toolchain-xtensa @ 1.40802.0:  [Up-to-date]\nUpdating tool-esptool @ 1.409.0:    [Up-to-date]\nUpdating tool-mkspiffs @ 1.102.0:   [Up-to-date]\nUpdating framework-arduinoespressif8266 @ 1.20300.0:    [Up-to-date]\nUpdating sdk-esp8266 @ 1.10502.0:   [Up-to-date]\n\nPlatform linux_x86_64\n--------\nUpdating linux_x86_64 @ 0.0.0:  [Up-to-date]\nUpdating toolchain-gcclinux64 @ 1.40801.0:  [Up-to-date]\nUpdating tool-scons @ 2.4.1:    [Up-to-date]\n\nPlatform windows_x86\n--------\nUpdating windows_x86 @ 0.0.0:   [Up-to-date]\nUpdating toolchain-gccmingw32 @ 1.40800.0:  [Up-to-date]\nUpdating tool-scons @ 2.4.1:    [Up-to-date]\n\nPlatform teensy\n--------\nUpdating teensy @ 0.0.0:    [Up-to-date]\nUpdating framework-arduinoteensy @ 1.128.0:     [Up-to-date]\nUpdating tool-teensy @ 1.1.0:   [Up-to-date]\nUpdating framework-mbed @ 1.121.1:  [Up-to-date]\nUpdating tool-scons @ 2.4.1:    [Up-to-date]\nUpdating toolchain-atmelavr @ 1.40801.0:    [Up-to-date]\nUpdating toolchain-gccarmnoneeabi @ 1.40804.0:  [Up-to-date]\n\nPlatform nordicnrf51\n--------\nUpdating nordicnrf51 @ 0.0.0:   [Up-to-date]\nUpdating toolchain-gccarmnoneeabi @ 1.40804.0:  [Up-to-date]\nUpdating framework-arduinonordicnrf51 @ 1.20302.0:  [Up-to-date]\nUpdating framework-mbed @ 1.121.1:  [Up-to-date]\nUpdating tool-scons @ 2.4.1:    [Up-to-date]\n\nPlatform titiva\n--------\nUpdating titiva @ 0.0.0:    [Up-to-date]\nUpdating framework-libopencm3 @ 1.1.0:  [Up-to-date]\nUpdating toolchain-gccarmnoneeabi @ 1.40804.0:  [Up-to-date]\nUpdating framework-energiativa @ 1.17.0:    [Up-to-date]\nUpdating tool-scons @ 2.4.1:    [Up-to-date]\n\nPlatform atmelsam\n--------\nUpdating atmelsam @ 0.0.0:  [Up-to-date]\nUpdating toolchain-gccarmnoneeabi @ 1.40804.0:  [Up-to-date]\nUpdating tool-openocd @ 1.900.0:    [Up-to-date]\nUpdating framework-mbed @ 1.121.1:  [Up-to-date]\nUpdating tool-scons @ 2.4.1:    [Up-to-date]\nUpdating tool-avrdude @ 1.60001.1:  [Up-to-date]\nUpdating tool-bossac @ 1.10601.0:   [Up-to-date]\n\nPlatform siliconlabsefm32\n--------\nUpdating siliconlabsefm32 @ 0.0.0:  [Up-to-date]\nUpdating framework-mbed @ 1.121.1:  [Up-to-date]\nUpdating toolchain-gccarmnoneeabi @ 1.40804.0:  [Up-to-date]\nUpdating tool-scons @ 2.4.1:    [Up-to-date]\n\nPlatform microchippic32\n--------\nUpdating microchippic32 @ 0.0.0:    [Up-to-date]\nUpdating framework-arduinomicrochippic32 @ 1.10201.0:   [Up-to-date]\nUpdating toolchain-microchippic32 @ 1.40803.0:  [Up-to-date]\nUpdating tool-pic32prog @ 1.200200.0:   [Up-to-date]\nUpdating tool-scons @ 2.4.1:    [Up-to-date]\n\nPlatform linux_i686\n--------\nUpdating linux_i686 @ 0.0.0:    [Up-to-date]\nUpdating toolchain-gcclinux32 @ 1.40801.0:  [Up-to-date]\nUpdating tool-scons @ 2.4.1:    [Up-to-date]\n\nPlatform intel_arc32\n--------\nUpdating intel_arc32 @ 0.0.0:   [Up-to-date]\nUpdating framework-arduinointel @ 1.10006.0:    [Up-to-date]\nUpdating tool-arduino101load @ 1.124.0:     [Up-to-date]\nUpdating toolchain-intelarc32 @ 1.40805.0:  [Up-to-date]\nUpdating tool-scons @ 2.4.1:    [Up-to-date]\n\nPlatform nxplpc\n--------\nUpdating nxplpc @ 0.0.0:    [Up-to-date]\nUpdating framework-mbed @ 1.121.1:  [Up-to-date]\nUpdating toolchain-gccarmnoneeabi @ 1.40804.0:  [Up-to-date]\nUpdating tool-scons @ 2.4.1:    [Up-to-date]\n\nPlatform linux_arm\n--------\nUpdating linux_arm @ 0.0.0:     [Up-to-date]\nUpdating toolchain-gccarmlinuxgnueabi @ 1.40802.0:  [Up-to-date]\nUpdating tool-scons @ 2.4.1:    [Up-to-date]\n\nPlatform native\n--------\nUpdating native @ 0.0.0:    [Up-to-date]\nUpdating tool-scons @ 2.4.1:    [Up-to-date]\n\n\nLibrary Manager\n===============\nUpdating Adafruit-GFX @ 334e815bc1:     [Up-to-date]\nUpdating Adafruit-ST7735 @ d53d4bf03a:  [Up-to-date]\nUpdating Adafruit-DHT @ 09344416d2:     [Up-to-date]\nUpdating Adafruit-Unified-Sensor @ f2af6f4efc:  [Up-to-date]\nUpdating ESP8266_SSD1306 @ 3.2.3:   [Up-to-date]\nUpdating EngduinoMagnetometer @ 3.1.0:  [Up-to-date]\nUpdating IRremote @ 2.2.1:  [Up-to-date]\nUpdating Json @ 5.6.4:  [Up-to-date]\nUpdating MODSERIAL @ d8422efe47:    [Up-to-date]\nUpdating PJON @ 1fb26fd:    [Checking]\ngit version 2.7.4 (Apple Git-66)\nAlready up-to-date.\nUpdating Servo @ 36b69a7ced07:  [Checking]\nMercurial Distributed SCM (version 3.8.4)\n(see https://mercurial-scm.org for more information)\n\nCopyright (C) 2005-2016 Matt Mackall and others\nThis is free software; see the source for copying conditions. There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\npulling from https://developer.mbed.org/users/simon/code/Servo/\nsearching for changes\nno changes found\nUpdating TextLCD @ 308d188a2d3a:    [Checking]\nMercurial Distributed SCM (version 3.8.4)\n(see https://mercurial-scm.org for more information)\n\nCopyright (C) 2005-2016 Matt Mackall and others\nThis is free software; see the source for copying conditions. There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\npulling from https://developer.mbed.org/users/simon/code/TextLCD/\nsearching for changes\nno changes found\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Cache Directory in platformio.ini\nDESCRIPTION: Example configuration demonstrating how to set up build cache directory for multiple STM32 development boards. The cache is shared between environments using the same STM32Cube framework to speed up build process.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/platformio/options/directory/build_cache_dir.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[platformio]\n; Set a path to a cache folder\nbuild_cache_dir =\n\n; Examples:\n; (Unix) build_cache_dir = /path/to/cache/folder\n; (Windows) build_cache_dir = C:/path/to/cache/folder\n\n[env:bluepill_f103c6]\nplatform = ststm32\nframework = stm32cube\nboard = bluepill_f103c6\n\n[env:nucleo_f411re]\nplatform = ststm32\nframework = stm32cube\nboard = nucleo_f411re\n```\n\n----------------------------------------\n\nTITLE: Installing PlatformIO Core using Local Download on macOS/Linux\nDESCRIPTION: Instructions for installing PlatformIO after manually downloading the installer script. This approach requires changing to the directory where the script was downloaded before execution.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/installation/methods/installer-script.rst#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# change directory to the folder where is located downloaded \"get-platformio.py\"\ncd /path-to-dir/where/get-platformio.py/is-located\n\n# run it\npython get-platformio.py\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Python Build Script for PlatformIO\nDESCRIPTION: Example Python script that extends the PlatformIO build environment by adding custom preprocessor definitions and include paths. This script can be referenced by the extraScript option in library.json.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/manifests/library-json/fields/build/builder.rst#2025-04-10_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nImport('env')\n# print(env.Dump())\nenv.Append(\n    CPPDEFINES=[\"HELLO=WORLD\", \"TAG=1.2.3\", \"DEBUG\"],\n    CPPPATH=[\"inc\", \"inc/devices\"]\n)\n\n# some python code that generates header files \"on-the-fly\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Flags in library.json for PlatformIO\nDESCRIPTION: The \"flags\" field in library.json can be used to specify extra flags for build processes. It accepts either a String or Array value. When using the -I flag, paths should be relative to the root directory where library.json is located.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/manifests/library-json/fields/build/flags.rst#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n``flags``\n```\n\n----------------------------------------\n\nTITLE: Adding Team Members with PlatformIO CLI (Bash)\nDESCRIPTION: Command syntax for adding new members to an existing team within a PlatformIO organization. Requires organization name, team name, and username of the member to be added.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/team/cmd_add.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio team add ORGNAME:TEAMNAME USERNAME\n```\n\n----------------------------------------\n\nTITLE: Ignoring Mbed OS Components with .mbedignore\nDESCRIPTION: Example of using .mbedignore file to exclude specific Mbed OS components from the build process, reducing compilation time and firmware size.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/frameworks/mbed_extra.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nmbed-os/connectivity/cellular/*\nmbed-os/connectivity/nanostack/*\nmbed-os/storage/kvstore/*\n```\n\n----------------------------------------\n\nTITLE: Enabling External RAM for ESP-IDF Framework\nDESCRIPTION: Configuration to enable external RAM (PSRAM) support for ESP32 using ESP-IDF framework.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/espressif32_extra.rst#2025-04-10_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = platformio/espressif32\nframework = espidf\nboard = ...\nbuild_flags =\n    -DCONFIG_SPIRAM_CACHE_WORKAROUND\n```\n\n----------------------------------------\n\nTITLE: PlatformIO Check Custom Flags Example\nDESCRIPTION: Example demonstrating how to pass custom flags to the analysis tool, including preprocessor definitions and tool-specific options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/cmd_check.rst#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npio check --flags \"-DDEBUG cppcheck: --std=c++11 --platform=avr8\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Bootloader for Arduino Uno in PlatformIO\nDESCRIPTION: This INI snippet demonstrates how to configure a custom bootloader for an Arduino Uno board in PlatformIO. It specifies the bootloader file path and custom fuse values including lock and unlock bits.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/atmelavr_extra.rst#2025-04-10_snippet_14\n\nLANGUAGE: ini\nCODE:\n```\n[env:uno]\nplatform = atmelavr\nframework = arduino\nboard = uno\n\nboard_bootloader.file = /path/to/custom/bootloader.hex\nboard_bootloader.lfuse = 0xFF\nboard_bootloader.hfuse = 0xDE\nboard_bootloader.efuse = 0xFD\nboard_bootloader.lock_bits = 0x0F\nboard_bootloader.unlock_bits = 0x3F\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Directory in PlatformIO Project\nDESCRIPTION: The 'data_dir' option specifies the directory for storing project data and ESP8266/ESP32 file system contents. It defaults to the 'data' folder in the project root. This can be overridden using the PLATFORMIO_DATA_DIR environment variable.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/platformio/options/directory/data_dir.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\ndata_dir = <Project>/data\n```\n\n----------------------------------------\n\nTITLE: Native Environment Project Initialization\nDESCRIPTION: Example showing project initialization with native environment and custom build flags.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/project/cmd_init.rst#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n> pio project init --environment native --project-option=\"platform=native\" --project-option=\"build_flags=-DRELEASE=1\"\n\nThe current working directory *** will be used for the new project.\n...\n```\n\n----------------------------------------\n\nTITLE: Defining build_src_flags in PlatformIO Configuration (INI)\nDESCRIPTION: The build_src_flags option is used to specify build flags that are applied only to project source files in the src directory. It has similar behavior to build_flags but with a more limited scope. This option can be set multiple times and can also be configured using the PLATFORMIO_BUILD_SRC_FLAGS environment variable.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/env/options/build/build_src_flags.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nbuild_src_flags = -D DEBUG -I include\n```\n\n----------------------------------------\n\nTITLE: OpenOCD Debug Configuration\nDESCRIPTION: Configuration for using ST-Link V2/V2-1 with OpenOCD GDB Server. Specifies debug server path and board configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/custom.rst#2025-04-10_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[env:debug]\nplatform = ststm32\nframework = mbed\nboard = ...\ndebug_tool = custom\ndebug_server =\n  $PLATFORMIO_CORE_DIR/packages/tool-openocd/bin/openocd\n  -f\n  $PLATFORMIO_CORE_DIR/packages/tool-openocd/scripts/board/st_nucleo_f4.cfg\n```\n\n----------------------------------------\n\nTITLE: Configuring Arduino Zero Board in PlatformIO\nDESCRIPTION: This snippet shows how to configure the Arduino Zero board in the PlatformIO project configuration file. It sets the platform to atmelsam and the board to zero.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/zero.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:zero]\nplatform = atmelsam\nboard = zero\n```\n\n----------------------------------------\n\nTITLE: Basic Build Flags Configuration in PlatformIO\nDESCRIPTION: Example showing how to set specific defines and include/library paths in PlatformIO build configuration\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/env/options/build/build_flags.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:specific_defines]\nbuild_flags =\n  -DFOO -DBAR=1\n  -D BUILD_ENV_NAME=$PIOENV\n  -D CURRENT_TIME=$UNIX_TIME\n  -DFLOAT_VALUE=1.23457e+07\n\n[env:specific_inclibs]\nbuild_flags =\n  -I/opt/include\n  -I\"relative/path with space\"\n  -I\"C:\\windows\\dir\"\n  -I\"${platformio.packages_dir}/framework-foo/include\"\n  -L/opt/lib\n  -lfoo\n\n[env:ignore_incremental_builds]\nbuild_flags = -DLAST_BUILD_TIME=$UNIX_TIME\n```\n\n----------------------------------------\n\nTITLE: Implementing Test Case Class in Python\nDESCRIPTION: Class for representing individual test cases with attributes for tracking name, status, messages, output and execution details. Handles test case metadata and results.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/advanced/unit-testing/frameworks/custom/api.rst#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass TestCase:\n    name      # Name of test case\n    status    # TestStatus instance\n    message   # Failure explanation message\n    stdout    # Test case output\n    duration  # Execution time in seconds\n    exception # Unexpected exception details\n    source    # TestCaseSource instance\n```\n\n----------------------------------------\n\nTITLE: Setting monitor_speed in platformio.ini\nDESCRIPTION: Example configuration that sets a custom monitor speed (baud rate) of 115200 for serial communication. This overrides the default value of 9600 baud when using the serial monitor.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/env/options/monitor/monitor_speed.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:custom_monitor_speedrate]\n...\nmonitor_speed = 115200\n```\n\n----------------------------------------\n\nTITLE: Configuring Monitor Filters in platformio.ini\nDESCRIPTION: This example shows how to configure multiple monitor filters in a platformio.ini environment configuration. It applies the default filter to remove terminal control codes, adds timestamps with milliseconds for each new line, and logs all device monitor data to a file in the current working directory.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/env/options/monitor/monitor_filters.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:log_output_to_file_with_timestamp]\n...\nplatform = ...\nmonitor_filters =\n  default   ; Remove typical terminal control codes from input\n  time      ; Add timestamp with milliseconds for each new line\n  log2file  ; Log data to a file \"platformio-device-monitor-*.log\" located in the current working directory\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom GoogleTest Command in platformio.ini\nDESCRIPTION: Shows how to override the default testing command to include custom GoogleTest filter options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/advanced/unit-testing/frameworks/googletest.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = native\ntest_testing_command =\n  ${platformio.build_dir}/${this.__env__}/program\n  --gtest_filter=FooTest.*-FooTest.Bar\n```\n\n----------------------------------------\n\nTITLE: PlatformIO Check Fail on Defect Example\nDESCRIPTION: Example showing how to configure the check command to fail on specific defect severity levels.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/cmd_check.rst#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npio check --fail-on-defect=low --fail-on-defect=medium\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Aceinna OpenIMU 300ZA\nDESCRIPTION: This snippet shows how to configure a PlatformIO project for the Aceinna OpenIMU 300ZA board. It sets the platform and board in the project's configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/aceinna_imu/OpenIMU300ZA.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:OpenIMU300ZA]\nplatform = aceinna_imu\nboard = OpenIMU300ZA\n```\n\n----------------------------------------\n\nTITLE: Configuring AVRISP Programmer Upload for ATmega AVR in PlatformIO\nDESCRIPTION: This snippet shows the PlatformIO configuration for uploading firmware to an ATmega AVR microcontroller using an AVRISP programmer. It specifies the upload protocol, port, speed, and necessary flags for the avrdude tool.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/atmelavr_extra.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:program_via_AVRISP]\nplatform = atmelavr\nframework = arduino\nupload_protocol = custom\nupload_port = SERIAL_PORT_HERE\nupload_speed = 19200\nupload_flags =\n    -C\n    ; use \"tool-avrdude-megaavr\" for the atmelmegaavr platform\n    ${platformio.packages_dir}/tool-avrdude/avrdude.conf\n    -p\n    $BOARD_MCU\n    -P\n    $UPLOAD_PORT\n    -b\n    $UPLOAD_SPEED\n    -c\n    stk500v1\nupload_command = avrdude $UPLOAD_FLAGS -U flash:w:$SOURCE:i\n```\n\n----------------------------------------\n\nTITLE: Configuring Renode Simulator for Unit Testing in PlatformIO INI\nDESCRIPTION: This snippet demonstrates how to integrate the Renode simulation framework into PlatformIO's unit testing system. It sets up a SiFive HiFive1 Rev B board with the Zephyr framework and configures Renode for hardware simulation.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/migration.rst#2025-04-10_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[env:hifive1-revb]\nplatform = sifive\nframework = zephyr\nboard = hifive1-revb\n\nplatform_packages =\n    platformio/tool-renode\ntest_testing_command =\n    ${platformio.packages_dir}/tool-renode/renode\n    --disable-xwt\n    -e include @scripts/single-node/sifive_fe310.resc\n    -e showAnalyzer uart1\n    -e sysbus LoadELF @${platformio.build_dir}/${this.__env__}/firmware.elf\n    -e start\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Directory in PlatformIO library.json\nDESCRIPTION: Example configuration showing how to set the source directory to the root directory and exclude specific folders from the build process. This demonstrates using the 'srcDir' property set to '.' to include all files and the 'srcFilter' property to exclude 'examples' and 'test' directories.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/manifests/library-json/fields/build/srcdir.rst#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"name\": \"SomeLib\",\n  \"version\": \"0.0.0\",\n  \"build\": {\n    \"srcDir\": \".\",\n    \"srcFilter\": \"+<*> -<examples> -<test>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Packages from Remote Archives in PlatformIO\nDESCRIPTION: Illustrates how to install packages from remote TAR or ZIP archives using HTTP(S) URLs. Custom package names can be specified using the <name>= syntax.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/pkg/cmd_install.rst#2025-04-10_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n# TAR archive\nhttps://github.com/bblanchon/ArduinoJson/archive/refs/heads/6.x.tar.gz\n\n# ZIP archive\nhttps://github.com/bblanchon/ArduinoJson/archive/refs/heads/6.x.zip\n\n# Custom package folder name \"JSON\" in the storage\nJSON=https://github.com/bblanchon/ArduinoJson/archive/refs/heads/6.x.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Unpublishing PlatformIO Package Command Syntax\nDESCRIPTION: Command syntax for unpublishing a package or specific version from the PlatformIO registry. Supports organization scoped packages and version-specific unpublishing within 72 hours of publication.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/pkg/cmd_unpublish.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio pkg unpublish [<organization>/]<pkgname>[@<version>] [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Board Specifications Table in reStructuredText\nDESCRIPTION: A reStructuredText table listing Adafruit development boards with their platform, microcontroller, clock speed, flash memory and RAM specifications.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/frameworks/arduino.rst#2025-04-10_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n* - :ref:`board_atmelsam_adafruit_crickit_m0`\n      - :ref:`platform_atmelsam`\n      - SAMD21G18A\n      - 48MHz\n      - 256KB\n      - 32KB\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Raspberry Pi Pico Project in PlatformIO\nDESCRIPTION: Basic configuration for a Raspberry Pi Pico project in the platformio.ini file. This defines the board and platform to use.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/raspberrypi/pico.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:pico]\nplatform = raspberrypi\nboard = pico\n```\n\n----------------------------------------\n\nTITLE: pyOCD Debug Configuration\nDESCRIPTION: Configuration for using pyOCD with CMSIS-DAP based boards. Simple setup using pyocd-gdbserver as the debug server.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/custom.rst#2025-04-10_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n[env:debug]\nplatform = ...\nboard = ...\nframework = mbed\ndebug_tool = custom\ndebug_server = pyocd-gdbserver\n```\n\n----------------------------------------\n\nTITLE: Arduino Blink Example Code for PlatformIO in Sublime Text\nDESCRIPTION: Example C code for an Arduino project that blinks the onboard LED. This file should be saved as main.c in the src directory of the PlatformIO project.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/ide/sublimetext.rst#2025-04-10_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n#include \"Arduino.h\"\n#define WLED    13  // Most Arduino boards already have an LED attached to pin 13 on the board itself\n\nvoid setup()\n{\n  pinMode(WLED, OUTPUT);  // set pin as output\n}\n\nvoid loop()\n{\n  digitalWrite(WLED, HIGH);  // set the LED on\n  delay(1000);               // wait for a second\n  digitalWrite(WLED, LOW);   // set the LED off\n  delay(1000);               // wait for a second\n}\n```\n\n----------------------------------------\n\nTITLE: Redirecting UART Output to Socket in PlatformIO INI\nDESCRIPTION: This snippet shows how to redirect UART output to a socket when using Renode as the debug tool. It overrides the default debug settings to create a socket terminal and connect it to UART0.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/renode_extra.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:hifive1-revb]\nplatform = sifive\nframework = zephyr\nboard = hifive1-revb\n; Override the default debug settings\ndebug_tool = custom\ndebug_port = localhost:3333\ndebug_server = renode\n  --hide-log\n  -e machine StartGdbServer 3333 True\n  -e emulation CreateServerSocketTerminal 4321 \"externalUART\" false\n  -e connector Connect uart0 externalUART\ndebug_extra_cmds =\n    monitor start\n\n# Monitor port for Renode integration\nmonitor_port = socket://localhost:4321\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL Support for ESP8266 in PlatformIO\nDESCRIPTION: Controls SSL cipher support by defining custom macros. This example enables basic SSL ciphers which use less ROM space compared to the default all-ciphers configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/espressif8266_extra.rst#2025-04-10_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\n...\nbuild_flags = -D BEARSSL_SSL_BASIC\n```\n\n----------------------------------------\n\nTITLE: Adding User to Device Group\nDESCRIPTION: Command to add the current user to the device access group (typically dialout) for permanent device access permissions.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/installation/udev-rules.rst#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo usermod -a -G dialout $USERNAME\n```\n\n----------------------------------------\n\nTITLE: Filtering Arduino-based Boards in PlatformIO\nDESCRIPTION: Example showing how to filter and display only Arduino-based boards in PlatformIO using the 'pio boards' command with a filter parameter.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/cmd_boards.rst#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n> pio boards arduino\n\nPlatform: atmelavr\n---------------------------------------------------------------------------\nID                    MCU           Frequency  Flash   RAM    Name\n---------------------------------------------------------------------------\nbtatmega168           atmega168     16MHz     14K    1K    Arduino BT ATmega168\nbtatmega328           atmega328p    16MHz     28K    2K    Arduino BT ATmega328\ndiecimilaatmega168    atmega168     16MHz     14K    1K    Arduino Duemilanove or Diecimila ATmega168\ndiecimilaatmega328    atmega328p    16MHz     30K    2K    Arduino Duemilanove or Diecimila ATmega328\nesplora               atmega32u4    16MHz     28K    2K    Arduino Esplora\nethernet              atmega328p    16MHz     31K    2K    Arduino Ethernet\n...\n```\n\n----------------------------------------\n\nTITLE: Using PlatformIO Settings Reset Command in Bash\nDESCRIPTION: Command usage for resetting all PlatformIO settings to their default values.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/cmd_settings.rst#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npio settings reset\n```\n\n----------------------------------------\n\nTITLE: PlatformIO Project Configuration File\nDESCRIPTION: Example platformio.ini configuration file for a multi-board project targeting Arduino Uno (ATmega AVR), NodeMCU v2 (ESP8266), and Teensy 3.1 boards, all using the Arduino framework.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/quickstart.rst#2025-04-10_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n; PlatformIO Project Configuration File\n;\n;   Build options: build flags, source filter, extra scripting\n;   Upload options: custom port, speed and extra flags\n;   Library options: dependencies, extra library storages\n;\n; Please visit documentation for the other options and examples\n; https://docs.platformio.org/en/latest/projectconf/index.html\n\n[env:uno]\nplatform = atmelavr\nframework = arduino\nboard = uno\n\n[env:nodemcuv2]\nplatform = espressif8266\nframework = arduino\nboard = nodemcuv2\n\n[env:teensy31]\nplatform = teensy\nframework = arduino\nboard = teensy31\n```\n\n----------------------------------------\n\nTITLE: Arduino Blink Example in C++\nDESCRIPTION: A simple Arduino sketch that blinks the built-in LED. It demonstrates basic Arduino functions like pinMode, digitalWrite, and delay.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/ide/visualstudio.rst#2025-04-10_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n#include \"Arduino.h\"\n\nvoid setup()\n{\n  pinMode(LED_BUILTIN, OUTPUT);  // set pin as output\n}\n\nvoid loop()\n{\n  digitalWrite(LED_BUILTIN, HIGH);  // set the LED on\n  delay(1000);               // wait for a second\n  digitalWrite(LED_BUILTIN, LOW);   // set the LED off\n  delay(1000);               // wait for a second\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Doctest Main Function for PlatformIO\nDESCRIPTION: Implementation of a custom main() function required for Doctest testing in PlatformIO. This code includes the necessary configuration to make Doctest report successful test cases and properly integrate with PlatformIO's test runner.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/advanced/unit-testing/frameworks/doctest.rst#2025-04-10_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n#define DOCTEST_CONFIG_IMPLEMENT  // REQUIRED: Enable custom main()\n#include <doctest.h>\n\n// TEST_CASE ...\n// TEST_SUITE ...\n\nint main(int argc, char **argv)\n{\n  doctest::Context context;\n\n  // BEGIN:: PLATFORMIO REQUIRED OPTIONS\n  context.setOption(\"success\", true);     // Report successful tests\n  context.setOption(\"no-exitcode\", true); // Do not return non-zero code on failed test case\n  // END:: PLATFORMIO REQUIRED OPTIONS\n\n  // YOUR CUSTOM DOCTEST OPTIONS\n\n  context.applyCommandLine(argc, argv);\n  return context.run();\n}\n```\n\n----------------------------------------\n\nTITLE: Running PlatformIO for Specific Environments Example\nDESCRIPTION: Example showing how to use the -e option to process only specific environments (NodeMCU and Teensy 3.1) instead of all environments defined in the project configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/cmd_run.rst#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n> pio run -e nodemcu -e teensy31\n\n[Wed Sep  7 15:49:01 2016] Processing nodemcu (platform: espressif8266, board: nodemcu, framework: arduino)\n-------------------------------------------------------------------------------------------------------\nVerbose mode can be enabled via `-v, --verbose` option\nCollected 34 compatible libraries\nLooking for dependencies...\nProject does not have dependencies\nCompiling .pio/build/nodemcu/src/main.o\nArchiving .pio/build/nodemcu/libFrameworkArduinoVariant.a\nIndexing .pio/build/nodemcu/libFrameworkArduinoVariant.a\nCompiling .pio/build/nodemcu/FrameworkArduino/Esp.o\nCompiling .pio/build/nodemcu/FrameworkArduino/FS.o\nCompiling .pio/build/nodemcu/FrameworkArduino/HardwareSerial.o\n...\nArchiving .pio/build/nodemcu/libFrameworkArduino.a\nIndexing .pio/build/nodemcu/libFrameworkArduino.a\nLinking .pio/build/nodemcu/firmware.elf\nCalculating size .pio/build/nodemcu/firmware.elf\ntext       data     bss     dec     hex filename\n221240      888   29400  251528   3d688 .pio/build/nodemcu/firmware.elf\nBuilding .pio/build/nodemcu/firmware.bin\n=========================== [SUCCESS] Took 6.43 seconds ===========================\n\n[Wed Sep  7 15:49:07 2016] Processing teensy31 (platform: teensy, board: teensy31, framework: arduino)\n```\n\n----------------------------------------\n\nTITLE: Configuring Doctest with Custom Identifiers\nDESCRIPTION: Example of configuring Doctest using preprocessor identifiers in platformio.ini. This approach uses build_flags to define Doctest configuration macros that control its behavior.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/advanced/unit-testing/frameworks/doctest.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:extra_doctest_identifiers]\nplatform = native\ntest_framework = doctest\nbuild_flags =\n    -D DOCTEST_CONFIG_SUPER_FAST_ASSERTS\n    -D DOCTEST_CONFIG_NO_COMPARISON_WARNING_SUPPRESSION\n```\n\n----------------------------------------\n\nTITLE: Implementing LED Blink with Arduino for Nordic nRF52-DK\nDESCRIPTION: This code snippet demonstrates a basic LED blinking program using the Arduino framework for the Nordic nRF52-DK board. It toggles the built-in LED every 100 milliseconds.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/tutorials/nordicnrf52/arduino_debugging_unit_testing.rst#2025-04-10_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n#include <Arduino.h>\n\nvoid setup()\n{\n  pinMode(LED_BUILTIN, OUTPUT);\n}\n\nvoid loop()\n{\n  digitalWrite(LED_BUILTIN, HIGH);\n  delay(100);\n  digitalWrite(LED_BUILTIN, LOW);\n  delay(100);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring platformio.ini for Custom Firmware Name with Version\nDESCRIPTION: A platformio.ini configuration that sets up an environment with custom program naming capabilities. It includes a custom_prog_version variable, references an external Python script, and passes the version to the code via build flags.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/scripting/examples/custom_program_name.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:env_custom_prog_name]\nplatform = platformio/espressif32\nframework = arduino\nboard = esp32dev\nbuild_flags =\n    -DVERSION=${this.custom_prog_version}\nextra_scripts = pre:extra_script.py\ncustom_prog_version = 1.2.3\n```\n\n----------------------------------------\n\nTITLE: Defining Compatible Platforms in PlatformIO Library Manifest\nDESCRIPTION: This snippet demonstrates how to specify a list of compatible development platforms in a library.json manifest file. It shows how to declare compatibility with specific platforms (atmelavr and espressif8266).\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/manifests/library-json/fields/platforms.rst#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"platforms\": [\"atmelavr\", \"espressif8266\"]\n```\n\n----------------------------------------\n\nTITLE: Implementing Unit Tests for Arduino LED Functionality\nDESCRIPTION: C++ test implementation file that uses the Unity test framework to verify LED functionality on an Arduino board. Tests include checking the LED pin number and toggling the LED between HIGH and LOW states.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/tutorials/core/unit_testing_blink.rst#2025-04-10_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n#include <Arduino.h>\n#include <unity.h>\n\nvoid setUp(void)\n{\n  // set stuff up here\n}\n\nvoid tearDown(void)\n{\n  // clean stuff up here\n}\n\nvoid test_led_builtin_pin_number(void)\n{\n  TEST_ASSERT_EQUAL(13, LED_BUILTIN);\n}\n\nvoid test_led_state_high(void)\n{\n  digitalWrite(LED_BUILTIN, HIGH);\n  TEST_ASSERT_EQUAL(HIGH, digitalRead(LED_BUILTIN));\n}\n\nvoid test_led_state_low(void)\n{\n  digitalWrite(LED_BUILTIN, LOW);\n  TEST_ASSERT_EQUAL(LOW, digitalRead(LED_BUILTIN));\n}\n\nvoid setup()\n{\n  // NOTE!!! Wait for >2 secs\n  // if board doesn't support software reset via Serial.DTR/RTS\n  delay(2000);\n\n  pinMode(LED_BUILTIN, OUTPUT);\n\n  UNITY_BEGIN(); // IMPORTANT LINE!\n  RUN_TEST(test_led_builtin_pin_number);\n}\n\nuint8_t i = 0;\nuint8_t max_blinks = 5;\n\nvoid loop()\n{\n  if (i < max_blinks)\n  {\n    RUN_TEST(test_led_state_high);\n    delay(500);\n    RUN_TEST(test_led_state_low);\n    delay(500);\n    i++;\n  }\n  else if (i == max_blinks)\n  {\n    UNITY_END(); // stop unit testing\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Build Type in platformio.ini\nDESCRIPTION: Configuration setting for specifying the build type in PlatformIO projects. The build_type parameter accepts a string value, does not support multiple values, and defaults to 'release' if not specified.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/env/options/build/build_type.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nbuild_type = release\n```\n\n----------------------------------------\n\nTITLE: Configuring J-Link Debugging for ST Nucleo Board\nDESCRIPTION: PlatformIO configuration for using Segger J-Link probe with ST Nucleo F446RE board and J-Link GDB Server. Includes debug server setup and initialization commands.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/custom.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:debug_jlink]\nplatform = ststm32\nframework = mbed\nboard = nucleo_f446re\n\ndebug_tool = custom\ndebug_port = :2331\n\ndebug_server =\n  /full/path/to/JLinkGDBServerCL\n  -singlerun\n  -if\n  SWD\n  -select\n  USB\n  -port\n  2331\n  -device\n  STM32F446RE\n\ndebug_init_cmds =\n  define pio_reset_halt_target\n      monitor reset\n      monitor halt\n  end\n  define pio_reset_run_target\n      monitor clrbp\n      monitor reset\n      monitor go\n  end\n  target extended-remote $DEBUG_PORT\n  monitor clrbp\n  monitor speed auto\n  pio_reset_halt_target\n  $LOAD_CMDS\n  $INIT_BREAK\n```\n\n----------------------------------------\n\nTITLE: Enabling CERT security standard checking in PlatformIO\nDESCRIPTION: PlatformIO project configuration showing how to enable the CERT addon for Cppcheck. This allows checking code against SEI CERT secure coding standard for C/C++.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/advanced/static-code-analysis/tools/cppcheck.rst#2025-04-10_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = ...\nboard = ...\ncheck_tool = cppcheck\ncheck_flags =\n  cppcheck: --addon=cert.py\n```\n\n----------------------------------------\n\nTITLE: Using PlatformIO Package List Command\nDESCRIPTION: Basic command syntax for listing installed packages in PlatformIO. This command shows all installed packages and their dependencies in a tree structure, with support for various filtering options and global package viewing.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/pkg/cmd_list.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio pkg list [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: PlatformIO Project Config Output Example\nDESCRIPTION: Demonstrates sample output from the project config command showing various configuration settings including platform, framework, build flags and other project-specific parameters.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/project/cmd_config.rst#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> pio project config\nComputed project configuration for Tasmota Project\n\nplatformio\n----------\nsrc_dir          =  tasmota\nbuild_dir        =  .pioenvs\nbuild_cache_dir  =  .cache\nextra_configs    =  platformio_tasmota_env.ini\n                    platformio_override.ini\ndefault_envs     =  tasmota\n\ncommon\n------\nframework               =  arduino\nboard                   =  esp01_1m\nboard_build.flash_mode  =  dout\nplatform                =  espressif8266\nbuild_flags             =  -D NDEBUG\n                           -mtarget-align\n                           -Wl,-Map,firmware.map\n                           -Wl,-Teagle.flash.1m.ld\n                           -DBEARSSL_SSL_BASIC\n                           -DPIO_FRAMEWORK_ARDUINO_ESPRESSIF_SDK22x_190703\n                           -DPIO_FRAMEWORK_ARDUINO_LWIP2_HIGHER_BANDWIDTH_LOW_FLASH\n                           -DVTABLES_IN_FLASH\n                           -fno-exceptions\n                           -lstdc++\nbuild_unflags           =  -Wall\nboard_build.f_cpu       =  80000000L\nmonitor_speed           =  115200\nupload_speed            =  115200\nupload_resetmethod      =  nodemcu\nupload_port             =  COM5\nextra_scripts           =  pio/strip-floats.py\n                           pio/name-firmware.py\n\nscripts_defaults\n----------------\nextra_scripts  =  pio/strip-floats.py\n                  pio/name-firmware.py\n\n...\n```\n\n----------------------------------------\n\nTITLE: Basic Team List Command Usage\nDESCRIPTION: Command syntax for listing teams and their members in PlatformIO. The command accepts an optional organization name parameter and supports JSON output formatting.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/team/cmd_list.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio team list [OPTIONS] [ORGNAME]\n```\n\n----------------------------------------\n\nTITLE: Setting up MISRA addon in project configuration\nDESCRIPTION: PlatformIO project configuration showing how to enable the MISRA addon for Cppcheck using a JSON configuration file. This allows checking code against MISRA compliance rules.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/advanced/static-code-analysis/tools/cppcheck.rst#2025-04-10_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = ...\nboard = ...\ncheck_tool = cppcheck\ncheck_flags =\n  cppcheck: --addon=misra.json\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration in PlatformIO\nDESCRIPTION: Basic configuration setup for ST Nucleo F303ZE board in platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f303ze.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f303ze]\nplatform = ststm32\nboard = nucleo_f303ze\n```\n\n----------------------------------------\n\nTITLE: Configuring TUMPA as Debug and Upload Tool in PlatformIO\nDESCRIPTION: Extended configuration example for using TUMPA for both debugging and firmware uploading. This shows how to set the debug tool and upload protocol to use TUMPA in a PlatformIO project.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/tumpa.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = ...\nboard = ...\ndebug_tool = tumpa\nupload_protocol = tumpa\n```\n\n----------------------------------------\n\nTITLE: Using Project-Specific PlatformIO Commands in Eclipse Che\nDESCRIPTION: Shows how to use the --project-dir option with PlatformIO commands to specify different projects within the same workspace.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/ide/eclipseche.rst#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npio remote run --project-dir project-A -t upload\npio remote run --project-dir project-A -t upload\npio remote run -d project-B -t upload\n```\n\n----------------------------------------\n\nTITLE: Configuring Project Dependencies in platformio.ini (Good Practice)\nDESCRIPTION: An example of recommended practices for configuring project dependencies in the platformio.ini file. This includes using semantic versioning and specific tags to ensure compatibility and reproducibility.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/migration.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\n; Depend on the latest compatible version of development platform\n; allowing new functionality (backward-compatible), and bug fixes.\n; No breaking changes\n; FYI: ^4 == ^4.0.0 == (>=4.0.0, <5.0.0)\nplatform = platformio/espressif32 @ ^4\n\nlib_deps =\n  ; Depend on the latest 6.x stable version of ArduinoJson.\n  ; The minimum required version is 6.19.4.\n  ; New functionality (backward-compatible) and bug-fixed are allowed\n  bblanchon/ArduinoJson @ ^6.19.4\n\n  ; Depend on the exact 1.1.1 version\n  ; No new functionality (backward-compatible) or bug fixes.\n  ; Recommended for safety-critical projects\n  me-no-dev/AsyncTCP @ 1.1.1\n\n  ; Depend on the particular tag (v2.13) of a Git repository\n  https://github.com/username/HelloWorld.git#v2.13\n```\n\n----------------------------------------\n\nTITLE: Example: Adding Member to PlatformIO Developers Team (Bash)\nDESCRIPTION: Practical example showing how to add a user named 'bob' to the 'developers' team in the 'platformio' organization.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/team/cmd_add.rst#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> pio team add platformio:developers bob\nThe new member \"bob\" has been successfully added to the \"developers\" team.\n```\n\n----------------------------------------\n\nTITLE: Basic Usage - PIO Access Private Command\nDESCRIPTION: Shows the basic command syntax for setting a resource to private access in PlatformIO.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/access/cmd_private.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio access private [OPTIONS] URN\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Custom Unit Testing Examples in reStructuredText\nDESCRIPTION: This snippet defines a table of contents using reStructuredText syntax. It sets up a nested structure for examples related to custom unit testing frameworks, with a specific link to documentation on using a custom Unity library.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/advanced/unit-testing/frameworks/custom/examples/index.rst#2025-04-10_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n  :maxdepth: 1\n\n  custom_unity_library\n```\n\n----------------------------------------\n\nTITLE: Configuring ESP USB Bridge for Upload Protocol\nDESCRIPTION: Configuration example showing how to set up ESP USB Bridge for both debugging and firmware uploading capabilities.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/esp-usb-bridge.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = ...\nboard = ...\ndebug_tool = esp-usb-bridge\nupload_protocol = esp-usb-bridge\n```\n\n----------------------------------------\n\nTITLE: PlatformIO Configuration for ESP32 Debugging\nDESCRIPTION: Configuration in platformio.ini to enable debugging with Olimex ARM-USB-OCD-H for ESP32.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/tutorials/espressif32/arduino_debugging_unit_testing.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32dev]\nplatform = espressif32\nboard = esp32dev\nframework = arduino\ndebug_tool = olimex-arm-usb-ocd-h\n```\n\n----------------------------------------\n\nTITLE: Configuring Pre-Uninstall Bash Script in PlatformIO Package\nDESCRIPTION: Example configuration for running a Bash script before package uninstallation. The script is specified as a list of command arguments and is located at the package root.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/manifests/library-json/fields/scripts.rst#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\"scripts\": {\n    \"preuninstall\": [\"maintenance.sh\", \"--action\", \"uninstall\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Extending PlatformIO Configuration with Additional Environments\nDESCRIPTION: Extra configuration file (extra_envs.ini) that adds additional ESP32 board environments and inherits common settings from the base config.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/platformio/options/generic/extra_configs.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32dev]\nboard = esp32dev\nbuild_flags = ${common.lib_flags} ${common.debug_flags}\n\n[env:lolin32]\nplatform = platformio/espressif32\nframework = espidf\nboard = lolin32\nbuild_flags = ${common.debug_flags}\n```\n\n----------------------------------------\n\nTITLE: PlatformIO Configuration for Arduino UNO Project\nDESCRIPTION: Sample platformio.ini file that configures a project for Arduino UNO. It specifies the platform, framework, and board type for the project.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/ide/sublimetext.rst#2025-04-10_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n; PlatformIO Project Configuration File\n;\n;   Build options: build flags, source filter, extra scripting\n;   Upload options: custom port, speed and extra flags\n;   Library options: dependencies, extra library storages\n;\n; Please visit documentation for the other options and examples\n; https://docs.platformio.org/en/latest/projectconf/index.html\n\n[env:arduino_uno]\nplatform = atmelavr\nframework = arduino\nboard = uno\n```\n\n----------------------------------------\n\nTITLE: Configuring Upstream Microchip PIC32 Platform Version in PlatformIO\nDESCRIPTION: INI configuration for using the latest upstream development version of the Microchip PIC32 platform from GitHub in PlatformIO projects.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/microchippic32.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:upstream_develop]\nplatform = https://github.com/platformio/platform-microchippic32.git\nboard = ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Bluetooth LE LED Control for Nordic nRF52-DK\nDESCRIPTION: This code snippet demonstrates how to set up a Bluetooth LE peripheral with a characteristic that controls the state of the built-in LED on the Nordic nRF52-DK board using the BLEPeripheral library.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/tutorials/nordicnrf52/arduino_debugging_unit_testing.rst#2025-04-10_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\n#include <Arduino.h>\n#include <SPI.h>\n#include <BLEPeripheral.h>\n\nBLEPeripheral ledPeripheral = BLEPeripheral();\n\nBLEService ledService = BLEService(\"19b10000e8f2537e4f6cd104768a1214\");\nBLECharCharacteristic ledCharacteristic = BLECharCharacteristic(\"19b10001e8f2537e4f6cd104768a1214\", BLERead | BLEWrite);\n\nvoid setup()\n{\n  pinMode(LED_BUILTIN, OUTPUT);\n\n  ledPeripheral.setAdvertisedServiceUuid(ledService.uuid());\n  ledPeripheral.addAttribute(ledService);\n  ledPeripheral.addAttribute(ledCharacteristic);\n  ledPeripheral.setLocalName(\"Nordic NRF52 DK\");\n  ledPeripheral.begin();\n}\n\nvoid loop()\n{\n\n```\n\n----------------------------------------\n\nTITLE: Development Board Configuration Table\nDESCRIPTION: Structured listing of development boards with their technical specifications including processor type, clock speed, flash memory and RAM. Organized in a reference table format with platform identifiers.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/jlink.rst#2025-04-10_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n* - :ref:`board_espressif32_frogboard`\n      - :ref:`platform_espressif32`\n      - External\n      - ESP32\n      - 240MHz\n      - 4MB\n      - 320KB\n```\n\n----------------------------------------\n\nTITLE: mDNS and Logical Devices List Example\nDESCRIPTION: Example showing how to list both mDNS services and logical devices using additional command options\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/device/cmd_list.rst#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n> pio device list --mdns --logical\nMulticast DNS Services\n======================\n\nPlatformIO._bttremote._tcp.local.\n------------------------------\nType: _bttremote._tcp.local.\nIP: ...\nPort: 62941\nProperties: ...\n\nTime for PlatformIO._adisk._tcp.local.\n---------------------------------\nType: _adisk._tcp.local.\nIP: 192.168.0.1\nPort: 9\nProperties: ...\n\nPlatformIO._ssh._tcp.local.\n------------------------\nType: _ssh._tcp.local.\nIP: ...\nPort: 22\n\nPlatformIO._sftp-ssh._tcp.local.\n-----------------------------\nType: _sftp-ssh._tcp.local.\nIP: ...\nPort: 22\n\n\nLogical Devices\n===============\n/\n-\nName:\n\n/Volumes/PIO\n-------------\nName: PIO\n\n/Volumes/PLUS\n--------------\nName: PLUS\n```\n\n----------------------------------------\n\nTITLE: Using the PlatformIO Project Metadata Command in Bash\nDESCRIPTION: This command dumps build metadata for a PlatformIO project, including toolchain information, compiler flags, defines/macros, preprocessor includes, program path, SVD path, and targets. It can be customized with various options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/project/cmd_metadata.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio project metadata [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Configuring Bluetooth for Zephyr Project\nDESCRIPTION: This configuration enables Bluetooth, debug logging, and sets the device name for the Zephyr project.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/tutorials/nordicnrf52/zephyr_debugging_unit_testing_inspect.rst#2025-04-10_snippet_1\n\nLANGUAGE: INI\nCODE:\n```\nCONFIG_BT=y\nCONFIG_BT_DEBUG_LOG=y\nCONFIG_BT_DEVICE_NAME=\"Test beacon\"\n```\n\n----------------------------------------\n\nTITLE: Generating PlatformIO Project for Qt Creator IDE\nDESCRIPTION: Command-line instructions for generating a PlatformIO project compatible with Qt Creator IDE. The process includes specifying the board ID using PlatformIO's project initialization command with the qtcreator IDE option.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/ide/qtcreator.rst#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npio project init --ide qtcreator --board <ID>\n\n# For example, generate project for Arduino UNO\npio project init --ide qtcreator --board uno\n```\n\n----------------------------------------\n\nTITLE: Defining Example Projects in PlatformIO Configuration\nDESCRIPTION: This code snippet demonstrates how to configure example projects in PlatformIO using the 'examples' field. It shows two example projects: 'Hello' and 'Blink', each with their base directory and list of associated files.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/manifests/library-json/fields/examples.rst#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"examples\": [\n    {\n        \"name\": \"Hello\",\n        \"base\": \"examples/world\",\n        \"files\": [\n            \"platformio.ini\",\n            \"include/world.h\",\n            \"src/world.c\",\n            \"README\",\n            \"extra.py\"\n        ]\n    },\n    {\n        \"name\": \"Blink\",\n        \"base\": \"examples/blink\",\n        \"files\": [\"blink.cpp\", \"blink.h\"]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Using pio lib install Command with Various Options in Bash\nDESCRIPTION: Demonstrates different usage patterns for the pio lib install command, including installing project dependencies, specifying environments, using global or custom storage, and various library reference formats.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/lib/cmd_install.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio lib [STORAGE_OPTIONS] install [OPTIONS] [LIBRARY...]\n\n# RECOMMENDED\n# install all project dependencies declared via \"lib_deps\"\n# (run it from a project root where is located \"platformio.ini\")\npio lib install [OPTIONS]\n\n# install project dependent library\n# (run it from a project root where is located \"platformio.ini\")\npio lib install [OPTIONS] [LIBRARY...]\n\n# install dependencies for the specific project environment\n# (run it from a project root where is located \"platformio.ini\")\npio lib -e myenv install [OPTIONS] [LIBRARY...]\npio lib -d /path/to/platformio/project -e myenv install [OPTIONS] [LIBRARY...]\n\n# install to global storage (NOT RECOMMENDED)\npio lib --global install [OPTIONS] [LIBRARY...]\npio lib -g install [OPTIONS] [LIBRARY...]\n\n# install to custom storage\npio lib --storage-dir /path/to/dir install [OPTIONS] [LIBRARY...]\npio lib -d /path/to/dir1 -d /path/to/dir2 install [OPTIONS] [LIBRARY...]\n\n# [LIBRARY...] forms\npio lib [STORAGE_OPTIONS] install (with no args, install project dependencies from \"lib_deps\")\npio lib [STORAGE_OPTIONS] install <ownername/name>\npio lib [STORAGE_OPTIONS] install <ownername/name>@<version>\npio lib [STORAGE_OPTIONS] install <ownername/name>@<version range>\npio lib [STORAGE_OPTIONS] install <zip or tarball url>\npio lib [STORAGE_OPTIONS] install file://<zip or tarball file>\npio lib [STORAGE_OPTIONS] install file://<folder>\npio lib [STORAGE_OPTIONS] install <repository>\npio lib [STORAGE_OPTIONS] install <name>=<repository> (name it should have locally)\npio lib [STORAGE_OPTIONS] install <repository#tag> (\"tag\" can be commit, branch or tag)\n```\n\n----------------------------------------\n\nTITLE: Advanced PVS-Studio Configuration with Custom Flags\nDESCRIPTION: Example configuration showing how to set custom analysis mode, disable specific errors, and specify a custom license file location.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/advanced/static-code-analysis/tools/pvs-studio.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = ...\nboard = ...\ncheck_tool = pvs-studio\ncheck_flags =\n  pvs-studio: --analysis-mode=4 --errors-off=V532,V586 --lic-file=/path/to/file.lic\n```\n\n----------------------------------------\n\nTITLE: Configuring build_unflags in PlatformIO INI file\nDESCRIPTION: This snippet demonstrates how to use the build_unflags option to remove specific compiler flags and replace them with new ones using build_flags. It removes the -Os optimization flag and C++11 standard flag, then adds an -O2 optimization flag.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/env/options/build/build_unflags.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:unflags]\nbuild_unflags = -Os -std=gnu++11\nbuild_flags = -O2\n```\n\n----------------------------------------\n\nTITLE: Implementing LED Blinking with STM32Cube HAL (C)\nDESCRIPTION: This snippet contains the main program logic for LED blinking using STM32Cube HAL. It initializes the LED GPIO and toggles the LED state in an infinite loop.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/tutorials/ststm32/stm32cube_debugging_unit_testing.rst#2025-04-10_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#include \"main.h\"\n\nvoid LED_Init();\n\nint main(void)\n{\n  HAL_Init();\n  LED_Init();\n\n  while (1)\n  {\n    HAL_GPIO_TogglePin(LED_GPIO_PORT, LED_PIN);\n    HAL_Delay(1000);\n  }\n}\n\nvoid LED_Init()\n{\n  LED_GPIO_CLK_ENABLE();\n  GPIO_InitTypeDef GPIO_InitStruct;\n  GPIO_InitStruct.Pin = LED_PIN;\n  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;\n  GPIO_InitStruct.Pull = GPIO_PULLUP;\n  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;\n  HAL_GPIO_Init(LED_GPIO_PORT, &GPIO_InitStruct);\n}\n\nvoid SysTick_Handler(void)\n{\n  HAL_IncTick();\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Output of PlatformIO Upgrade Command\nDESCRIPTION: Example output when running the 'pio upgrade' command when the installed version is already the latest available version.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/cmd_upgrade.rst#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> pio upgrade\n\nYou are up-to-date!\nPlatformIO x.x.x is currently the newest version available.\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU Settings\nDESCRIPTION: Extended configuration for Adafruit Metro M4 including custom microcontroller and frequency settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_metro_m4.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_metro_m4]\nplatform = atmelsam\nboard = adafruit_metro_m4\n\n; change microcontroller\nboard_build.mcu = samd51j19a\n\n; change MCU frequency\nboard_build.f_cpu = 120000000L\n```\n\n----------------------------------------\n\nTITLE: Defining Common Environment Settings in PlatformIO INI\nDESCRIPTION: Example showing how to use the common [env] section to share configuration settings across multiple specific environments. This approach reduces duplication in platformio.ini files.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/env/index.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env]\nplatform = ststm32\nframework = stm32cube\nboard = nucleo_l152re\nlib_deps = Dep1, Dep2\n\n[env:release]\nbuild_flags = -D RELEASE\nlib_deps =\n    ${env.lib_deps}\n    Dep3\n\n[env:debug]\nbuild_type = debug\nbuild_flags = -D DEBUG\nlib_deps = DepCustom\n```\n\n----------------------------------------\n\nTITLE: PlatformIO Makefile Configuration for VIM\nDESCRIPTION: Makefile wrapper that provides common PlatformIO commands including build, upload, clean, program, and update functionality. Includes optional PATH configuration for troubleshooting.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/ide/vim.rst#2025-04-10_snippet_1\n\nLANGUAGE: make\nCODE:\n```\n# Uncomment lines below if you have problems with $PATH\n#SHELL := /bin/bash\n#PATH := /usr/local/bin:$(PATH)\n\nall:\n        pio -f -c vim run\n\nupload:\n        pio -f -c vim run --target upload\n\nclean:\n        pio -f -c vim run --target clean\n\nprogram:\n        pio -f -c vim run --target program\n\nuploadfs:\n        pio -f -c vim run --target uploadfs\n\nupdate:\n        pio -f -c vim update\n```\n\n----------------------------------------\n\nTITLE: Displaying Information for ArduinoJson Package\nDESCRIPTION: This example demonstrates how to use the 'pio pkg show' command to display information about the ArduinoJson package. It shows various details such as version, publication date, license, and compatibility information.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/pkg/cmd_show.rst#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> pio pkg show bblanchon/ArduinoJson\n\nbblanchon/ArduinoJson\nLibrary • 6.19.3 • Public • Published Tue Mar  8 16:24:14 2022\n\nhttps://registry.platformio.org/libraries/bblanchon/ArduinoJson\n\nA simple and efficient JSON library for embedded C++. ...\n\n---------------------  ----------------------------------------------------------------\nHomepage               https://arduinojson.org/?utm_source=meta&utm_medium=library.json\nRepository             https://github.com/bblanchon/ArduinoJson.git\nLicense                MIT\nPopularity             2\nStars                  5599\nExamples               10\nInstalled Size         385.83KB\nUsed By                134\nCompatible Platforms   *\nCompatible Frameworks  *\nKeywords               json, rest, http, web\n---------------------  ----------------------------------------------------------------\n\nVersion    Size      Published\n---------  --------  -------------------\n6.19.3     85.04KB   2022-03-08 16:24:14\n6.19.2     84.82KB   2022-02-14 08:06:06\n...\n```\n\n----------------------------------------\n\nTITLE: Setting Up Command Hotkeys for PlatformIO in Sublime Text\nDESCRIPTION: JSON configuration for custom keyboard shortcuts in Sublime Text. Sets F11 for cleaning projects and F12 for uploading firmware to the target device.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/ide/sublimetext.rst#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n[\n    { \"keys\": [\"f11\"], \"command\": \"build\", \"args\": {\"variant\": \"Clean\"} },\n    { \"keys\": [\"f12\"], \"command\": \"build\", \"args\": {\"variant\": \"Upload\"} }\n]\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Package Uninstall Command Usage\nDESCRIPTION: Shows the basic command syntax for uninstalling packages in PlatformIO.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/pkg/cmd_uninstall.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio pkg uninstall [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Configuring Mini-Module FT2232H as Debugging Tool in platformio.ini\nDESCRIPTION: Example configuration for using the Mini-Module FT2232H as a debugging tool in the project's platformio.ini file. This sets the debug_tool option to 'minimodule'.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/minimodule.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = ...\nboard = ...\ndebug_tool = minimodule\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: PlatformIO configuration demonstrating how to specify the upload protocol for Arduino Uno R4 WiFi board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/renesas-ra/uno_r4_wifi.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:uno_r4_wifi]\nplatform = renesas-ra\nboard = uno_r4_wifi\n\nupload_protocol = sam-ba\n```\n\n----------------------------------------\n\nTITLE: Configuring Upstream Development Version of Atmel megaAVR Platform\nDESCRIPTION: Configuration example for using the latest development version of the Atmel megaAVR platform directly from the GitHub repository, which may include features not yet available in stable releases.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/atmelmegaavr.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:upstream_develop]\nplatform = https://github.com/platformio/platform-atmelmegaavr.git\nboard = ...\n```\n\n----------------------------------------\n\nTITLE: Defining test_port in PlatformIO Configuration (INI)\nDESCRIPTION: The test_port option specifies the communication interface between the PlatformIO Unit Testing Test Runner and the target device. It accepts a string pattern and cannot have multiple values. If not specified, PlatformIO will attempt to detect the port automatically.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/env/options/test/test_port.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\ntest_port = /dev/ttyUSB0\n```\n\n----------------------------------------\n\nTITLE: Implementing GoogleTest in C++ for PlatformIO\nDESCRIPTION: Demonstrates how to set up a basic GoogleTest file for both Arduino-based and native environments, including the main function and test setup.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/advanced/unit-testing/frameworks/googletest.rst#2025-04-10_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n#include <gtest/gtest.h>\n// uncomment line below if you plan to use GMock\n// #include <gmock/gmock.h>\n\n// TEST(...)\n// TEST_F(...)\n\n#if defined(ARDUINO)\n#include <Arduino.h>\n\nvoid setup()\n{\n    // should be the same value as for the `test_speed` option in \"platformio.ini\"\n    // default value is test_speed=115200\n    Serial.begin(115200);\n\n    ::testing::InitGoogleTest();\n    // if you plan to use GMock, replace the line above with\n    // ::testing::InitGoogleMock();\n}\n\nvoid loop()\n{\n  // Run tests\n  if (RUN_ALL_TESTS())\n  ;\n\n  // sleep for 1 sec\n  delay(1000);\n}\n\n#else\nint main(int argc, char **argv)\n{\n    ::testing::InitGoogleTest(&argc, argv);\n    // if you plan to use GMock, replace the line above with\n    // ::testing::InitGoogleMock(&argc, argv);\n\n    if (RUN_ALL_TESTS())\n    ;\n\n    // Always return zero-code and allow PlatformIO to parse results\n    return 0;\n}\n#endif\n```\n\n----------------------------------------\n\nTITLE: Configuring Hybrid Unit Testing in platformio.ini\nDESCRIPTION: An example of configuring hybrid unit testing in the platformio.ini file. This setup demonstrates using different testing frameworks for native and embedded environments, allowing for more flexible and comprehensive testing strategies.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/migration.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:native]\nplatform = native\ntest_framework = googletest\ntest_filter =\n  common/*\n  native/*\n\n[env:embedded]\nplatform = ...\nframework = ...\ntest_framework = unity\ntest_filter =\n  common/*\n  embedded/*\n```\n\n----------------------------------------\n\nTITLE: Equivalent PlatformIO Configuration Without Common Environment\nDESCRIPTION: Example showing the equivalent configuration without using the common [env] section. This demonstrates how the common section helps reduce redundancy in the configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/env/index.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:release]\nplatform = ststm32\nframework = stm32cube\nboard = nucleo_l152re\nbuild_flags = -D RELEASE\nlib_deps = Dep1, Dep2, Dep3\n\n[env:debug]\nplatform = ststm32\nframework = stm32cube\nboard = nucleo_l152re\nbuild_type = debug\nbuild_flags = -D DEBUG\nlib_deps = DepCustom\n```\n\n----------------------------------------\n\nTITLE: Configuring Library Compatibility Mode in PlatformIO INI File\nDESCRIPTION: This snippet demonstrates how to set the 'lib_compat_mode' option in a PlatformIO project configuration file. It sets the mode to 'strict', which checks for compatibility with both frameworks and development platforms.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/env/options/library/lib_compat_mode.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\n; Checks for the compatibility with frameworks and dev/platforms\nlib_compat_mode = strict\n```\n\n----------------------------------------\n\nTITLE: Using 'pio access public' Command in PlatformIO CLI\nDESCRIPTION: This command sets a resource to be publicly accessible. It requires a URN (Uniform Resource Name) as an argument and accepts an optional --urn-type flag to specify the resource type.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/access/cmd_public.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio access public [OPTIONS] URN\n```\n\n----------------------------------------\n\nTITLE: Using the library.json Schema URL in Shell\nDESCRIPTION: The URL to the official PlatformIO library.json JSON Schema, which can be used for validation of library manifest files.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/manifests/library-json/fields/schema.rst#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhttps://raw.githubusercontent.com/platformio/platformio-core/develop/platformio/assets/schema/library.json\n```\n\n----------------------------------------\n\nTITLE: Installing PlatformIO Core using Local Download on Windows\nDESCRIPTION: Windows-specific instructions for installing PlatformIO after manually downloading the installer script. Note the Windows path format and explicit python.exe command.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/installation/methods/installer-script.rst#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# change directory to the folder where is located downloaded \"get-platformio.py\"\ncd C:/path-to-dir/where/get-platformio.py/is-located\n\n# run it\npython.exe get-platformio.py\n```\n\n----------------------------------------\n\nTITLE: Manual Library Dependencies Configuration\nDESCRIPTION: YAML configuration for manually downloading and including dependent libraries in Travis CI builds.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/ci/travis.rst#2025-04-10_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ninstall:\n    - pip install -U platformio\n    - wget https://github.com/PaulStoffregen/OneWire/archive/master.zip -O /tmp/onewire_source.zip\n    - unzip /tmp/onewire_source.zip -d /tmp/\n\nscript:\n    - pio ci --lib=\"/tmp/OneWire-master\" --board=<ID_1> --board=<ID_2> --board=<ID_N>\n```\n\n----------------------------------------\n\nTITLE: String Macro Example in PlatformIO\nDESCRIPTION: Example demonstrating string macro usage in both configuration and source code\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/env/options/build/build_flags.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nbuild_flags =\n    '-D MYSTRING=\"Text is \\\\\"Quoted\\\\\"\"'\n    '-D MYFONT=&roboto14'\n```\n\nLANGUAGE: cpp\nCODE:\n```\n#include <stdio.h>\n\n#define CONFIG_LV_FONT_DEFAULT MYFONT\n\nint main(void) {\n    printf(\"MYSTRING=<%s>\\n\", MYSTRING);\n    return(0);\n}\n```\n\n----------------------------------------\n\nTITLE: PlatformIO Shared Directory Path Configuration\nDESCRIPTION: Configuration example for the shared_dir parameter in PlatformIO which specifies the directory used for synchronizing files with remote machines. The default path is '<Project>/shared' and can be overridden via PLATFORMIO_SHARED_DIR environment variable.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/platformio/options/directory/shared_dir.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nshared_dir\n```\n\n----------------------------------------\n\nTITLE: Arduino Application with AVR-Stub Debug Integration\nDESCRIPTION: Example Arduino sketch showing how to initialize and implement avr-stub debugging, including necessary includes and debug initialization in setup().\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/avr-stub_extra.rst#2025-04-10_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n#include \"Arduino.h\"\n#include \"avr8-stub.h\"\n#include \"app_api.h\" // only needed with flash breakpoints\n\nvoid setup()\n{\n  // initialize GDB stub\n  debug_init();\n  pinMode(LED_BUILTIN, OUTPUT);\n}\n\nvoid loop()\n{\n  digitalWrite(LED_BUILTIN, HIGH);\n  delay(1000);\n  digitalWrite(LED_BUILTIN, LOW);\n  delay(1000);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Default Targets in PlatformIO INI File\nDESCRIPTION: This snippet demonstrates how to configure multiple default targets (upload and monitor) in a PlatformIO project's configuration file. This setup will automatically upload the firmware and start the Serial Monitor when executing 'pio run' without specifying targets.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/env/options/build/targets.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:upload_and_monitor]\ntargets = upload, monitor\n```\n\n----------------------------------------\n\nTITLE: Configuring Defect Severity Reporting in platformio.ini\nDESCRIPTION: This example shows how to configure a PlatformIO project to only report medium and high severity defects when running static code analysis tools. The 'check_severity' option accepts values of 'low', 'medium', and 'high', with the default being all three levels.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/env/options/check/check_severity.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:detect_only_medium_or_high_defects]\nplatform = ...\nboard = ...\ncheck_severity = medium, high\n```\n\n----------------------------------------\n\nTITLE: Basic Command Usage - PlatformIO Access List\nDESCRIPTION: Shows the basic command syntax for listing accessible resources. The command accepts optional parameters for owner and additional options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/access/cmd_list.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio access list [OPTIONS] [OWNER]\n```\n\n----------------------------------------\n\nTITLE: Configuring ESP-Prog Debug Tool in platformio.ini\nDESCRIPTION: Basic configuration settings for enabling ESP-Prog as a debugging tool in the PlatformIO project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/esp-prog.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = ...\nboard = ...\ndebug_tool = esp-prog\n```\n\n----------------------------------------\n\nTITLE: Configuring Black Magic Probe for firmware uploading\nDESCRIPTION: Extended configuration for using Black Magic Probe as both a debugging tool and firmware uploader in PlatformIO projects. Sets up the upload port and protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/blackmagic.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = ...\nboard = ...\ndebug_tool = blackmagic\ndebug_port = <CONFIGURE GDB PORT>\n\nupload_port = <THE SAME AS DEBUG PORT>\n\n; SWD interface\nupload_protocol = blackmagic\n\n; JTAG interface\nupload_protocol = blackmagic-jtag\n```\n\n----------------------------------------\n\nTITLE: Configuring Stable Versions of Atmel megaAVR Platform in platformio.ini\nDESCRIPTION: Configuration examples for specifying stable versions of the Atmel megaAVR development platform in the project configuration file. Shows how to use the latest stable version or pin to a specific version.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/atmelmegaavr.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n; Latest stable version, NOT recommended\n; Pin the version as shown below\n[env:latest_stable]\nplatform = atmelmegaavr\nboard = ...\n\n; Specific version\n[env:custom_stable]\nplatform = atmelmegaavr@x.y.z\nboard = ...\n```\n\n----------------------------------------\n\nTITLE: Configuring ESP32 OTA Upload in platformio.ini\nDESCRIPTION: Configuration settings for enabling OTA uploads in the project's platformio.ini file. Includes setting the upload protocol to 'espota' and specifying the upload port.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/espressif32_extra.rst#2025-04-10_snippet_10\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nupload_protocol = espota\nupload_port = IP_ADDRESS_HERE or mDNS_NAME.local\n```\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = platformio/espressif32\nboard = esp32dev\nframework = arduino\nupload_protocol = espota\nupload_port = 192.168.0.255\n```\n\n----------------------------------------\n\nTITLE: Starting PlatformIO Remote Agent\nDESCRIPTION: Command syntax for starting a PlatformIO Remote Agent with optional parameters. This allows remote access to devices connected to the host machine from anywhere in the world.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/remote/cmd_agent.rst#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npio remote agent start [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Configuring Bluetooth LE and Dependencies in platformio.ini for Nordic nRF52-DK\nDESCRIPTION: This configuration snippet sets up the SoftDevice version for Bluetooth LE and adds the BLEPeripheral library as a dependency for the Nordic nRF52-DK board in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/tutorials/nordicnrf52/arduino_debugging_unit_testing.rst#2025-04-10_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[env:nrf52_dk]\nplatform = nordicnrf52\nboard = nrf52_dk\nframework = arduino\ndebug_tool = jlink\n; SoftDevice version\nbuild_flags = -DNRF52_S132\nlib_deps =\n  BLEPeripheral\n```\n\n----------------------------------------\n\nTITLE: Configuring Extra Scripts in platformio.ini\nDESCRIPTION: Example of configuring PRE and POST extra scripts in the platformio.ini project configuration file. Shows how to specify launch types using prefixes and how to include multiple scripts for different environments.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/scripting/launch_types.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:my_env_1]\nplatform = ...\n; Defaults to POST script since no prefix is used\nextra_scripts = post_extra_script.py\n\n[env:my_env_2]\nplatform = ...\nextra_scripts =\n  pre:pre_extra_script.py\n  post:post_extra_script1.py\n  post_extra_script2.py\n```\n\n----------------------------------------\n\nTITLE: Project Directory Structure for Zephyr Framework in PlatformIO\nDESCRIPTION: Displays the required directory and file structure for a PlatformIO project using the Zephyr framework. The structure includes the standard PlatformIO directories along with a special 'zephyr' folder for Zephyr-specific configuration files.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/frameworks/zephyr_extra.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nproject_dir\n├── include\n├── src\n│    └── main.c\n├── zephyr\n│    ├── prj.conf\n│    └── CMakeLists.txt\n└── platformio.ini\n```\n\n----------------------------------------\n\nTITLE: STM32 Board Configuration Table\nDESCRIPTION: Structured table containing specifications for STM32 development boards, including microcontroller model, clock speed, memory sizes, and debug probe configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/frameworks/stm32cube.rst#2025-04-10_snippet_4\n\nLANGUAGE: rst\nCODE:\n```\n* - :ref:`board_ststm32_black_f407ve`\n      - :ref:`platform_ststm32`\n      - External\n      - STM32F407VET6\n      - 168MHz\n      - 512KB\n      - 128KB\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Project Config Command Usage\nDESCRIPTION: Shows the basic command syntax for running the project config tool with optional parameters.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/project/cmd_config.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio project config [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Setting CPU Frequency for ESP8266 in PlatformIO\nDESCRIPTION: Configures the CPU frequency for an ESP8266 board. This example sets the frequency to 160MHz using the board_build.f_cpu configuration option.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/espressif8266_extra.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\n; set frequency to 160MHz\nboard_build.f_cpu = 160000000L\n```\n\n----------------------------------------\n\nTITLE: Implementing Unit Tests for Arduino String Class on Nordic nRF52-DK\nDESCRIPTION: This code snippet demonstrates how to write unit tests for the Arduino String class using the Unity testing framework. It includes tests for string concatenation, substring extraction, index finding, case-insensitive comparison, uppercase conversion, and character replacement.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/tutorials/nordicnrf52/arduino_debugging_unit_testing.rst#2025-04-10_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n#include <Arduino.h>\n#include <unity.h>\n\nString STR_TO_TEST;\n\nvoid setUp(void)\n{\n  // set stuff up here\n  STR_TO_TEST = \"Hello, world!\";\n}\n\nvoid tearDown(void)\n{\n  // clean stuff up here\n  STR_TO_TEST = \"\";\n}\n\nvoid test_string_concat(void)\n{\n  String hello = \"Hello, \";\n  String world = \"world!\";\n  TEST_ASSERT_EQUAL_STRING(STR_TO_TEST.c_str(), (hello + world).c_str());\n}\n\nvoid test_string_substring(void)\n{\n  TEST_ASSERT_EQUAL_STRING(\"Hello\", STR_TO_TEST.substring(0, 5).c_str());\n}\n\nvoid test_string_index_of(void)\n{\n  TEST_ASSERT_EQUAL(7, STR_TO_TEST.indexOf('w'));\n}\n\nvoid test_string_equal_ignore_case(void)\n{\n  TEST_ASSERT_TRUE(STR_TO_TEST.equalsIgnoreCase(\"HELLO, WORLD!\"));\n}\n\nvoid test_string_to_upper_case(void)\n{\n  STR_TO_TEST.toUpperCase();\n  TEST_ASSERT_EQUAL_STRING(\"HELLO, WORLD!\", STR_TO_TEST.c_str());\n}\n\nvoid test_string_replace(void)\n{\n  STR_TO_TEST.replace('!', '?');\n  TEST_ASSERT_EQUAL_STRING(\"Hello, world?\", STR_TO_TEST.c_str());\n}\n\nvoid setup()\n{\n  delay(2000); // service delay\n  UNITY_BEGIN();\n\n  RUN_TEST(test_string_concat);\n  RUN_TEST(test_string_substring);\n  RUN_TEST(test_string_index_of);\n  RUN_TEST(test_string_equal_ignore_case);\n  RUN_TEST(test_string_to_upper_case);\n  RUN_TEST(test_string_replace);\n\n  UNITY_END(); // stop unit testing\n}\n\nvoid loop()\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Sourcing .profile in Zsh for PlatformIO\nDESCRIPTION: Sources the .profile file in Zsh, enabling support for both Bash and Zsh shells when setting up PlatformIO command execution.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/installation/shell-commands.rst#2025-04-10_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nemulate sh -c '. ~/.profile'\n```\n\n----------------------------------------\n\nTITLE: Using Platform Update Command in PlatformIO CLI\nDESCRIPTION: Basic usage syntax for the 'pio platform update' command, which allows updating all platforms or specific ones. The command also supports semantic versioning for targeting specific platform versions.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/platforms/cmd_update.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio platform update [OPTIONS] [PLATFORM...]\n\n# update specific platform version using Semantic Versioning\npio platform update PLATFORM@X.Y.Z\n```\n\n----------------------------------------\n\nTITLE: Configuring Stable Intel ARC32 Platform\nDESCRIPTION: Configuration snippets for using stable versions of the Intel ARC32 platform. Shows how to specify both latest stable and specific versions in the project configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/intel_arc32.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n; Latest stable version, NOT recommended\n; Pin the version as shown below\n[env:latest_stable]\nplatform = intel_arc32\nboard = ...\n\n; Specific version\n[env:custom_stable]\nplatform = intel_arc32@x.y.z\nboard = ...\n```\n\n----------------------------------------\n\nTITLE: PlatformIO CI Command Configuration for GitLab CI\nDESCRIPTION: GitLab CI configuration using the 'pio ci' command for library projects. Includes settings for specifying boards and test files through command line interface.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/ci/gitlab.rst#2025-04-10_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nimage: python:3.11\n\nvariables:  \n  PIP_CACHE_DIR: \"$CI_PROJECT_DIR/.cache/pip\"\n  PLATFORMIO_CACHE_DIR: \"$CI_PROJECT_DIR/.cache/platformio\"\n\ncache:\n  paths:\n    - .cache/pip\n    - .cache/platformio\n\nstages:\n - test\n\nbefore_script:\n  - \"pip install -U platformio\"\n\njob:\n  stage: test\n  script: \"pio ci --board=<ID_1> --board=<ID_2> --board=<ID_N>\"\n  variables: {PLATFORMIO_CI_SRC: \"path/to/test/file.c\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring Upstream Linux i686 Platform Version in PlatformIO\nDESCRIPTION: Configuration example for using the upstream development version of the Linux i686 platform directly from GitHub repository.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/linux_i686.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:upstream_develop]\nplatform = https://github.com/platformio/platform-linux_i686.git\n```\n\n----------------------------------------\n\nTITLE: Configuring Simavr Debug Tool in platformio.ini\nDESCRIPTION: Example configuration for enabling simavr debugging tool in a PlatformIO project's environment section. The config specifies the basic required settings including platform, board and debug tool selection.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/simavr.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = ...\nboard = ...\ndebug_tool = simavr\n```\n\n----------------------------------------\n\nTITLE: Configuring Pontech Quick240 Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to set up the Pontech Quick240 board in the PlatformIO project configuration file. It specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/microchippic32/quick240_usb.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:quick240_usb]\nplatform = microchippic32\nboard = quick240_usb\n```\n\n----------------------------------------\n\nTITLE: Configuring Upstream Platform Version in PlatformIO\nDESCRIPTION: Configuration for using the latest upstream development version of the Aceinna IMU platform from GitHub.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/aceinna_imu.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:upstream_develop]\nplatform = https://github.com/aceinna/platform-aceinna_imu.git\nboard = ...\n```\n\n----------------------------------------\n\nTITLE: Initializing PlatformIO Project\nDESCRIPTION: Command to initialize a new PlatformIO project specifying target board\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/ide/cloud9.rst#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npio project init --board <ID>\n\n# initialize project for Arduino Uno\npio project init --board uno\n```\n\n----------------------------------------\n\nTITLE: Python Script for Adding Extra Linker Flags\nDESCRIPTION: Python build script that appends additional linker flags to the build environment. Adds static linking flags for GCC and C++ standard libraries.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/scripting/examples/extra_linker_flags.rst#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nImport(\"env\")\n\n#\n# Dump build environment (for debug)\n# print(env.Dump())\n#\n\nenv.Append(\n  LINKFLAGS=[\n      \"-static\",\n      \"-static-libgcc\",\n      \"-static-libstdc++\"\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Using 'pio org create' Command in Bash\nDESCRIPTION: This snippet demonstrates the usage syntax for the 'pio org create' command. It shows the basic structure of the command with placeholders for options and the organization name.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/org/cmd_create.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio org create [OPTIONS] ORGNAME\n```\n\n----------------------------------------\n\nTITLE: Example Output of PlatformIO Remote Update Command\nDESCRIPTION: Demonstrates the typical output of running the 'pio remote update' command, showing the update status for various platforms and libraries.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/remote/cmd_update.rst#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> pio remote update\n\nPlatform Manager\n================\nPlatform timsp430\n--------\nUpdating timsp430 @ 0.0.0:  [Up-to-date]\nUpdating toolchain-timsp430 @ 1.40603.0:    [Up-to-date]\nUpdating framework-energiamsp430 @ 1.17.0:  [Up-to-date]\nUpdating framework-arduinomsp430 @ 1.10601.0:   [Up-to-date]\nUpdating tool-scons @ 2.4.1:    [Up-to-date]\n\nPlatform freescalekinetis\n--------\nUpdating freescalekinetis @ 0.0.0:  [Up-to-date]\nUpdating framework-mbed @ 1.121.1:  [Up-to-date]\nUpdating toolchain-gccarmnoneeabi @ 1.40804.0:  [Up-to-date]\nUpdating tool-scons @ 2.4.1:    [Up-to-date]\n\n# ... (output truncated for brevity) ...\n\nLibrary Manager\n===============\nUpdating Adafruit-GFX @ 334e815bc1:     [Up-to-date]\nUpdating Adafruit-ST7735 @ d53d4bf03a:  [Up-to-date]\nUpdating Adafruit-DHT @ 09344416d2:     [Up-to-date]\nUpdating Adafruit-Unified-Sensor @ f2af6f4efc:  [Up-to-date]\nUpdating ESP8266_SSD1306 @ 3.2.3:   [Up-to-date]\nUpdating EngduinoMagnetometer @ 3.1.0:  [Up-to-date]\nUpdating IRremote @ 2.2.1:  [Up-to-date]\nUpdating Json @ 5.6.4:  [Up-to-date]\nUpdating MODSERIAL @ d8422efe47:    [Up-to-date]\nUpdating PJON @ 1fb26fd:    [Checking]\ngit version 2.7.4 (Apple Git-66)\nAlready up-to-date.\nUpdating Servo @ 36b69a7ced07:  [Checking]\nMercurial Distributed SCM (version 3.8.4)\n(see https://mercurial-scm.org for more information)\n\nCopyright (C) 2005-2016 Matt Mackall and others\nThis is free software; see the source for copying conditions. There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\npulling from https://developer.mbed.org/users/simon/code/Servo/\nsearching for changes\nno changes found\nUpdating TextLCD @ 308d188a2d3a:    [Checking]\nMercurial Distributed SCM (version 3.8.4)\n(see https://mercurial-scm.org for more information)\n\nCopyright (C) 2005-2016 Matt Mackall and others\nThis is free software; see the source for copying conditions. There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\npulling from https://developer.mbed.org/users/simon/code/TextLCD/\nsearching for changes\nno changes found\n```\n\n----------------------------------------\n\nTITLE: Example of Setting a Package to Public Access in PlatformIO\nDESCRIPTION: This example demonstrates how to use the 'pio access public' command to set a specific package (identified by its URN) to public access. The command returns a success message upon completion.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/access/cmd_public.rst#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> pio access public prn:reg:pkg:8036:platform\nThe resource \"prn:reg:pkg:8036:platform\" has been successfully updated.\n```\n\n----------------------------------------\n\nTITLE: Using pio account show Command in Bash\nDESCRIPTION: Basic usage of the command to display information about a PlatformIO account, including active subscriptions and available packages and services. The command can be run directly from the terminal.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/account/cmd_show.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio account show\n```\n\n----------------------------------------\n\nTITLE: Starting Device Monitor and Viewing Available Ports\nDESCRIPTION: Example of running the device monitor without parameters, which shows the list of available serial ports on the system.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/device/cmd_monitor.rst#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n> pio device monitor\n\n--- Available ports:\n--- /dev/cu.Bluetooth-Incoming-Port n/a\n--- /dev/cu.Bluetooth-Modem n/a\n--- /dev/cu.SLAB_USBtoUART CP2102 USB to UART Bridge Controller\n--- /dev/cu.obd2ecu-SPPDev n/a\n```\n\n----------------------------------------\n\nTITLE: Selecting SDK Version for ESP8266 in PlatformIO\nDESCRIPTION: Specifies which Espressif SDK version to use with a custom macro in build_flags. This example switches to the SDK-pre-3.0 version.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/espressif8266_extra.rst#2025-04-10_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\n...\nbuild_flags = -D PIO_FRAMEWORK_ARDUINO_ESPRESSIF_SDK3\n```\n\n----------------------------------------\n\nTITLE: Board Hardware Specifications Table\nDESCRIPTION: A reStructuredText table containing board specifications including platform, debug capabilities, MCU details, operating frequency and memory configurations. Lists boards from multiple manufacturers including ThaiEasyElec, The Things Network, ThunderPack, TinyCircuits, and others.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/frameworks/arduino.rst#2025-04-10_snippet_3\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. list-table::\n    :header-rows:  1\n\n    * - Name\n      - Platform \n      - Debug\n      - MCU\n      - Frequency\n      - Flash\n      - RAM\n```\n\n----------------------------------------\n\nTITLE: Updating Specific Libraries in PlatformIO\nDESCRIPTION: These examples illustrate how to update specific libraries using the 'pio pkg update' command. You can specify library names with versions or use Git repository URLs.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/pkg/cmd_update.rst#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npio pkg update -l \"bblanchon/ArduinoJson@^6.19.2\" -l \"milesburton/DallasTemperature@^3.9.1\"\npio pkg update --library https://github.com/Makuna/NeoPixelBus.git\n```\n\n----------------------------------------\n\nTITLE: Board Specifications Table in RST Format\nDESCRIPTION: Structured table containing technical specifications of various microcontroller boards including MCU model, clock frequency, memory sizes and debug interface type\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debugging.rst#2025-04-10_snippet_4\n\nLANGUAGE: rst\nCODE:\n```\n.. list-table::\n    :header-rows:  1\n\n    * - Name\n      - Platform\n      - Debug\n      - MCU\n      - Frequency\n      - Flash\n      - RAM\n```\n\n----------------------------------------\n\nTITLE: Using the 'pio team update' Command in Bash\nDESCRIPTION: This snippet demonstrates the basic usage of the 'pio team update' command. It allows users to update the details of a specific team within an organization in PlatformIO.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/team/cmd_update.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio team update [OPTIONS] ORGNAME:TEAMNAME\n```\n\n----------------------------------------\n\nTITLE: Configuring JTAG-HS2 as Debug Tool in platformio.ini\nDESCRIPTION: This snippet shows how to set up the JTAG-HS2 as a debugging tool in the PlatformIO project configuration file. It defines the basic configuration needed in the project's environment section.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/digilent-hs2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = ...\nboard = ...\ndebug_tool = digilent-hs2\n```\n\n----------------------------------------\n\nTITLE: Setting Build Flags in PlatformIO\nDESCRIPTION: Examples showing how to set build flags using PLATFORMIO_BUILD_FLAGS environment variable in both Unix and Windows environments. Demonstrates setting multiple compiler flags and preprocessor directives.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/envvars.rst#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Unix:\nexport PLATFORMIO_BUILD_FLAGS=-DFOO\nexport PLATFORMIO_BUILD_FLAGS=-DFOO -DBAR=1 -Wall\n\n# Windows:\nSET PLATFORMIO_BUILD_FLAGS=-DFOO\nSET PLATFORMIO_BUILD_FLAGS=-DFOO -DBAR=1 -Wall\n```\n\n----------------------------------------\n\nTITLE: Installing PlatformIO Core Automatically\nDESCRIPTION: Command for installing PlatformIO Core into a virtual environment in automatic mode. Returns exit code 0 on success.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/installation/integration.rst#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython get-platformio.py\n```\n\n----------------------------------------\n\nTITLE: Using Upstream Development Version of Nordic nRF52 Platform\nDESCRIPTION: Configuration for using the development version of the Nordic nRF52 platform directly from GitHub repository. This is useful for testing cutting-edge features not yet available in official releases.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/nordicnrf52.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:upstream_develop]\nplatform = https://github.com/platformio/platform-nordicnrf52.git\nboard = ...\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Workflow for PlatformIO CI Command\nDESCRIPTION: This YAML configuration sets up a GitHub Actions workflow to build PlatformIO examples or tests using the 'pio ci' command. It includes a matrix strategy for running multiple examples and specifies board IDs for the build process.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/ci/github-actions.rst#2025-04-10_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: PlatformIO CI\n\non: [push]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        example: [path/to/test/file.c, examples/file.ino, path/to/test/directory]\n\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cache/pip\n            ~/.platformio/.cache\n          key: ${{ runner.os }}-pio\n      - uses: actions/setup-python@v5\n        with:\n          python-version: '3.11'\n      - name: Install PlatformIO Core\n        run: pip install --upgrade platformio\n\n      - name: Build PlatformIO examples\n        run: pio ci --board=<ID_1> --board=<ID_2> --board=<ID_N>\n        env:\n          PLATFORMIO_CI_SRC: ${{ matrix.example }}\n```\n\n----------------------------------------\n\nTITLE: Configuring ESP8266 OTA Updates in PlatformIO\nDESCRIPTION: Configuration for Over-the-Air (OTA) updates for ESP8266 boards, showing how to set up the upload protocol and port in platformio.ini. This allows firmware to be uploaded wirelessly.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/espressif8266_extra.rst#2025-04-10_snippet_15\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = espressif8266\nboard = nodemcuv2\nframework = arduino\nupload_protocol = espota\nupload_port = 192.168.0.255\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Load Commands with Flash Erase in PlatformIO INI\nDESCRIPTION: Example configuration showing how to combine flash erase monitor commands with program loading in a PlatformIO environment. This setup erases flash sectors before loading the program.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/env/options/debug/debug_load_cmds.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:debug]\nplatform = ...\nboard = ...\ndebug_load_cmds =\n  monitor flash erase_sector 0 0 11\n  load\n```\n\n----------------------------------------\n\nTITLE: Demonstrating a typical library directory structure in PlatformIO\nDESCRIPTION: Shows the recommended folder structure for a PlatformIO library with examples, include, and src directories along with the library.json manifest file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/librarymanager/creating.rst#2025-04-10_snippet_0\n\nLANGUAGE: plain text\nCODE:\n```\n├── examples\n│   └── echo\n├── include\n│   └── HelloWorld.h\n├── library.json\n└── src\n    └── HelloWorld.cpp\n```\n\n----------------------------------------\n\nTITLE: Configuring Stable Raspberry Pi RP2040 Platform in PlatformIO\nDESCRIPTION: INI configuration for using the stable version of the Raspberry Pi RP2040 platform in PlatformIO projects. It shows how to specify the latest stable version or pin to a specific version.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/raspberrypi.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n; Latest stable version, NOT recommended\n; Pin the version as shown below\n[env:latest_stable]\nplatform = raspberrypi\nboard = ...\n\n; Specific version\n[env:custom_stable]\nplatform = raspberrypi@x.y.z\nboard = ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Tool in platformio.ini\nDESCRIPTION: Example of specifying a debug tool in the PlatformIO project configuration file. This sets the debug tool to be used for the project.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debugging.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\ndebug_tool = jlink\n```\n\n----------------------------------------\n\nTITLE: Customizing Seeed Studio XIAO ESP32S3 Board Settings\nDESCRIPTION: Example of overriding default board settings in platformio.ini, such as changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/seeed_xiao_esp32s3.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:seeed_xiao_esp32s3]\nplatform = espressif32\nboard = seeed_xiao_esp32s3\n\n; change microcontroller\nboard_build.mcu = esp32s3\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Defining Test Status Constants in Python\nDESCRIPTION: Enumeration class defining possible test execution statuses including PASSED, FAILED, SKIPPED and ERRORED states. Used to track test case execution results.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/advanced/unit-testing/frameworks/custom/api.rst#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass TestStatus:\n    PASSED   # Test or test suite passed\n    FAILED   # Test or test suite failed\n    SKIPPED  # Test or test suite was skipped\n    ERRORED  # Test suite encountered unexpected error\n```\n\n----------------------------------------\n\nTITLE: Enabling External RAM for Arduino Framework\nDESCRIPTION: Configuration to enable external RAM (PSRAM) support for ESP32 using Arduino framework.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/espressif32_extra.rst#2025-04-10_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = platformio/espressif32\nframework = arduino\nboard = ...\nbuild_flags =\n    -DBOARD_HAS_PSRAM\n    -mfix-esp32-psram-cache-issue\n```\n\n----------------------------------------\n\nTITLE: Teensy Project Initialization with mbed Framework\nDESCRIPTION: Example demonstrating project initialization for Teensy 3.1 board with custom mbed framework configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/project/cmd_init.rst#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n> pio project init --board teensy31 --project-option \"framework=mbed\"\n\nThe current working directory *** will be used for the new project.\nYou can specify another project directory via\n`pio project init -d %PATH_TO_THE_PROJECT_DIR%` command.\n\n...\n```\n\n----------------------------------------\n\nTITLE: Using Arduino Framework with Staging Version for ESP8266\nDESCRIPTION: Configuration example for using the development version of the ESP8266 Arduino framework directly from GitHub instead of the stable release version.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/espressif8266_extra.rst#2025-04-10_snippet_17\n\nLANGUAGE: ini\nCODE:\n```\n[env:nodemcuv2]\nplatform = espressif8266\nboard = nodemcuv2\nframework = arduino\nplatform_packages =\n    platformio/framework-arduinoespressif8266 @ https://github.com/esp8266/Arduino.git\n```\n\n----------------------------------------\n\nTITLE: Generating RST Table for Microcontroller Board Specifications\nDESCRIPTION: This RST code snippet defines a table structure for listing microcontroller board specifications. It includes columns for board reference, platform, debugger type, MCU, clock speed, flash memory, and RAM size.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/blackmagic.rst#2025-04-10_snippet_5\n\nLANGUAGE: rst\nCODE:\n```\n    * - :ref:`board_nordicnrf51_waveshare_ble400`\n      - :ref:`platform_nordicnrf51`\n      - External\n      - NRF51822\n      - 32MHz\n      - 256KB\n      - 32KB\n    * - :ref:`board_ststm32_waveshare_open103z`\n      - :ref:`platform_ststm32`\n      - External\n      - STM32F103ZET6\n      - 72MHz\n      - 512KB\n      - 64KB\n    * - :ref:`board_ststm32_blackpill_f401cc`\n      - :ref:`platform_ststm32`\n      - External\n      - STM32F401CCU6\n      - 84MHz\n      - 256KB\n      - 64KB\n```\n\n----------------------------------------\n\nTITLE: PlatformIO Build System Configuration\nDESCRIPTION: Cloud9 build system configuration for PlatformIO projects supporting C/C++/H/INO/PDE files\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/ide/cloud9.rst#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"cmd\" : [\"pio\", \"run\", \"-d\", \"$file\"],\n    \"info\" : \"Building $project_path/$file_name\",\n    \"selector\": \"^.*\\\\.(cpp|c|h|hpp|S|ini|ino|pde)$\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Board Settings in PlatformIO\nDESCRIPTION: Basic configuration for Arduino Nicla Vision M4 core board using PlatformIO's project configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nicla_vision_m4.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nicla_vision_m4]\nplatform = ststm32\nboard = nicla_vision_m4\n```\n\n----------------------------------------\n\nTITLE: Configuring Linux x86_64 Platform with Upstream Version in PlatformIO\nDESCRIPTION: Configuration example for using the latest upstream development version of the Linux x86_64 platform directly from its GitHub repository in PlatformIO.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/linux_x86_64.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:upstream_develop]\nplatform = https://github.com/platformio/platform-linux_x86_64.git\n```\n\n----------------------------------------\n\nTITLE: Using Remote Device List Command in PlatformIO\nDESCRIPTION: Lists Serial Ports on remote machines where a PlatformIO remote agent is running. Supports filtering by specific agents and JSON output option.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/remote/cmd_device.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio remote device list [OPTIONS]\n\n# List devices from the specified agents. Multiple agents are allowed.\npio remote --agent NAME device list [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Updating all installed libraries in global storage\nDESCRIPTION: Example of updating all installed libraries in the global storage using the 'pio lib update' command.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/lib/cmd_update.rst#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> pio lib -g update\n\nLibrary Storage: /storage/dir/...\nUpdating ESP8266_SSD1306 @ 3.2.3:   [Up-to-date]\nUpdating EngduinoMagnetometer @ 3.1.0:  [Up-to-date]\nUpdating IRremote @ 2.2.1:  [Up-to-date]\nUpdating Json @ 5.4.0:  [Out-of-date]\nLibraryManager: Installing id=64 @ 5.6.4\nDownloading  [####################################]  100%\nUnpacking  [####################################]  100%\nJson @ 5.6.4 has been successfully installed!\nUpdating PJON @ 1fb26fd:    [Checking]\ngit version 2.7.4 (Apple Git-66)\nAlready up-to-date.\nUpdating TextLCD @ 308d188a2d3a:    [Checking]\nMercurial Distributed SCM (version 3.8.4)\n(see https://mercurial-scm.org for more information)\n\nCopyright (C) 2005-2016 Matt Mackall and others\nThis is free software; see the source for copying conditions. There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\npulling from https://developer.mbed.org/users/simon/code/TextLCD/\nsearching for changes\nno changes found\n```\n\n----------------------------------------\n\nTITLE: Configuring Stable RISC-V GAP Platform Version\nDESCRIPTION: Configuration examples for using stable releases of the RISC-V GAP development platform, including latest stable and specific version pinning.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/riscv_gap.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n; Latest stable version, NOT recommended\n; Pin the version as shown below\n[env:latest_stable]\nplatform = riscv_gap\nboard = ...\n\n; Specific version\n[env:custom_stable]\nplatform = riscv_gap@x.y.z\nboard = ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Teensy USB Features in PlatformIO\nDESCRIPTION: This example shows how to enable USB RAW HID feature for a Teensy 2.0 board in PlatformIO. It uses the USB_RAWHID macro in the build_flags to specify the USB feature.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/teensy_extra.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:teensy_hid_device]\nplatform = teensy\nframework = arduino\nboard = teensy20\nbuild_flags = -D USB_RAWHID\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directory Path in PlatformIO\nDESCRIPTION: The include_dir setting specifies the path to project's default header files. It is added to CPPPATH during build and defaults to the 'include' directory in the project root. Can be overridden via PLATFORMIO_INCLUDE_DIR environment variable.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/platformio/options/directory/include_dir.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\ninclude_dir = \"include\"\n```\n\n----------------------------------------\n\nTITLE: Setting Debug Levels\nDESCRIPTION: Configuration options for different debug levels in ESP32 Arduino framework.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/espressif32_extra.rst#2025-04-10_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = ...\nboard = ...\nframework = arduino\n\n;;;;; Possible options ;;;;;;\n\n; None\nbuild_flags = -DCORE_DEBUG_LEVEL=0\n\n; Error\nbuild_flags = -DCORE_DEBUG_LEVEL=1\n\n; Warn\nbuild_flags = -DCORE_DEBUG_LEVEL=2\n\n; Info\nbuild_flags = -DCORE_DEBUG_LEVEL=3\n\n; Debug\nbuild_flags = -DCORE_DEBUG_LEVEL=4\n\n; Verbose\nbuild_flags = -DCORE_DEBUG_LEVEL=5\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Core Directory in PlatformIO\nDESCRIPTION: Example showing how to set a custom core_dir path in the platformio.ini configuration file. This setting determines where PlatformIO stores development platforms, toolchains, and other core data.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/platformio/options/directory/core_dir.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[platformio]\ncore_dir = /path/to/custom/pio-core/storage\n```\n\n----------------------------------------\n\nTITLE: Final PlatformIO Project Structure\nDESCRIPTION: Representation of the complete PlatformIO project directory structure, showing the basic layout with configuration file, source directory, and library directory.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/quickstart.rst#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nproject_dir\n├── lib\n│   └── README\n├── platformio.ini\n└── src\n    └── main.cpp\n```\n\n----------------------------------------\n\nTITLE: PlatformIO Home Server Launch Example\nDESCRIPTION: Example output when launching the PlatformIO Home server, showing the ASCII art logo and server URL information.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/cmd_home.rst#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> pio home\n\n  ___I_\n /\\-_--\\   PlatformIO Home\n/  \\_-__\\\n|[]| [] |  http://127.0.0.1:8008\n|__|____|_______________________\n\nOpen PlatformIO Home in your browser by this URL => http://127.0.0.1:8008\nPlatformIO Home has been started. Press Ctrl+C to shutdown.\n```\n\n----------------------------------------\n\nTITLE: Configuring Flash Execution with Bridge Interaction\nDESCRIPTION: PlatformIO configuration for running code from HyperFlash with bridge interaction. This setup changes the boot mode to jtag_hyper and specifies the sequence of upload commands.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/riscv_gap_extra.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:gapuino]\nplatform = riscv_gap\nboard = gapuino\nframework = ...\nboard_upload.boot_mode = jtag_hyper\nboard_upload.commands = reqloop ioloop start wait\n```\n\n----------------------------------------\n\nTITLE: Displaying Intel MCS-51 and WCH Microcontroller Board Specifications in RST\nDESCRIPTION: This RST code snippet creates a table listing various Intel MCS-51 and WCH microcontroller boards with their specifications, including debug capability, MCU model, frequency, flash memory, and RAM size.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/intel_mcs51.rst#2025-04-10_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\nWCH\n~~~\n\n.. list-table::\n    :header-rows:  1\n\n    * - Name\n      - Debug\n      - MCU\n      - Frequency\n      - Flash\n      - RAM\n    * - :ref:`board_intel_mcs51_CH559`\n      - No\n      - CH559\n      - 12MHz\n      - 64KB\n      - 6.25KB\n```\n\n----------------------------------------\n\nTITLE: Declaring Common and Specific Dependencies in PlatformIO Configuration\nDESCRIPTION: This snippet demonstrates how to declare common dependencies for all environments and specific dependencies for a debug environment in a PlatformIO project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/librarymanager/dependencies.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n; Common dependencies declared in the common \"[env]\" section\n[env]\nplatform = ...\nboard = ...\nframework = ...\nlib_deps =\n  dep_1\n  dep_2\n\n[env:release]\nbuild_flags = -D RELEASE=1\n\n; Specific dependencies that extend the common dependencies\n[env:debug]\nlib_deps =\n  ${env.lib_deps}\n  dep_3\n```\n\n----------------------------------------\n\nTITLE: Using PlatformIO Check Command\nDESCRIPTION: Basic command syntax for running static analysis checks on PlatformIO projects. By default uses cppcheck analysis tool.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/cmd_check.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio check [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: MCS51 Board Specifications Table in RST\nDESCRIPTION: ReStructuredText formatted table listing technical specifications for Intel MCS51 compatible microcontroller boards including various models from Nuvoton and STC series. Shows details like debug support, MCU model, frequency, flash and RAM sizes.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/intel_mcs51.rst#2025-04-10_snippet_2\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. list-table::\n    :header-rows:  1\n\n    * - Name\n      - Debug\n      - MCU\n      - Frequency\n      - Flash\n      - RAM\n```\n\n----------------------------------------\n\nTITLE: ESP32 Board Configuration Table in RST Format\nDESCRIPTION: RST format table displaying detailed specifications for various ESP32 development boards including memory configurations, chip variants, and clock speeds. Each row represents a different board model with its technical parameters.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/olimex-arm-usb-tiny-h.rst#2025-04-10_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n* - :ref:`board_espressif32_nebulas3`\n      - :ref:`platform_espressif32`\n      - External\n      - ESP32S3\n      - 240MHz\n      - 4MB\n      - 320KB\n```\n\n----------------------------------------\n\nTITLE: Configuring File Inclusion for PlatformIO Export in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the 'include' option in the export configuration of PlatformIO. It shows how to specify glob patterns to selectively include files during the export process.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/manifests/library-json/fields/export/include.rst#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"export\": {\n    \"include\":\n    [\n        \"dir/*.[ch]pp\",\n        \"dir/examples/*\",\n        \"*/*/*.h\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating PlatformIO Project for CodeBlocks Integration\nDESCRIPTION: Command to initialize a PlatformIO project with CodeBlocks IDE integration. This command generates all necessary project files compatible with CodeBlocks, using the specified board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/ide/codeblocks.rst#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npio project init --ide codeblocks --board <ID>\n\n# For example, generate project for Arduino UNO\npio project init --ide codeblocks --board uno\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Run Configuration for Travis CI\nDESCRIPTION: Basic YAML configuration for running PlatformIO builds using the 'pio run' command in Travis CI. Uses Python environment and caches PlatformIO packages.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/ci/travis.rst#2025-04-10_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlanguage: python\npython:\n    - \"3.11\"\n\nsudo: false\ncache:\n    directories:\n        - \"~/.platformio\"\n        - $HOME/.cache/pip\n\ninstall:\n    - pip install -U platformio\n    - pio update\n\nscript:\n    - pio run -e <ID_1> -e <ID_2> -e <ID_N>\n```\n\n----------------------------------------\n\nTITLE: USB Host Shield Example Build Commands\nDESCRIPTION: Complete build commands for USB Host Shield project, including dependency installation and multi-board compilation.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/ci/drone.rst#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npip install -U platformio\nwget https://github.com/xxxajk/spi4teensy3/archive/master.zip -O /tmp/spi4teensy3.zip\nunzip /tmp/spi4teensy3.zip -d /tmp\npio ci --lib=\".\" --lib=\"/tmp/spi4teensy3-master\" --board=uno --board=teensy31 --board=due\n```\n\n----------------------------------------\n\nTITLE: Passing arguments to test programs in PlatformIO\nDESCRIPTION: Examples showing how to pass extra arguments to the testing program using the --program-arg option, which can be specified multiple times.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/cmd_test.rst#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n> pio test --program-arg \"--abort-after=1\" --program-arg=\"-s\"\n# or short format\n> pio test -a \"-aa=1\" -a \"-s\"\n```\n\n----------------------------------------\n\nTITLE: AppVeyor CI Configuration for USB_Host_Shield_2.0 Project\nDESCRIPTION: This YAML configuration sets up AppVeyor CI for the USB_Host_Shield_2.0 project. It specifies source files, installs dependencies including a custom library, and runs CI tests for multiple boards.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/ci/appveyor.rst#2025-04-10_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nbuild: off\nenvironment:\n\n  matrix:\n    - PLATFORMIO_CI_SRC: \"examples\\\\Bluetooth\\\\PS3SPP\\\\PS3SPP.ino\"\n    - PLATFORMIO_CI_SRC: \"examples\\\\pl2303\\\\pl2303_gps\\\\pl2303_gps.ino\"\n\ninstall:\n    - cmd: git submodule update --init --recursive\n    - cmd: SET PATH=%PATH%;C:\\Python27\\Scripts\n    - cmd: pip install -U platformio\n    - cmd: git clone https://github.com/xxxajk/spi4teensy3.git C:\\spi4teensy\n\ntest_script:\n    - cmd: pio ci --lib=\".\" --lib=\"C:\\\\spi4teensy\" --board=uno --board=teensy31 --board=due\n```\n\n----------------------------------------\n\nTITLE: Uploading ESP32 Firmware via OTA using PlatformIO CLI\nDESCRIPTION: Commands for uploading firmware to an ESP32 device over-the-air using the PlatformIO CLI. The upload port can be specified as an IP address or mDNS name.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/espressif32_extra.rst#2025-04-10_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npio run --target upload --upload-port IP_ADDRESS_HERE or mDNS_NAME.local\n```\n\nLANGUAGE: none\nCODE:\n```\npio run -t upload --upload-port 192.168.0.255\npio run -t upload --upload-port myesp32.local\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Options in platformio.ini (INI)\nDESCRIPTION: Example of how to define custom options in the platformio.ini file. Custom options should start with 'custom_' or 'board_' to avoid warnings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/scripting/examples/platformio_ini_custom_options.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[universe]\nhello = world\n\n[env:my_env]\nplatform = ...\nextra_scripts = extra_script.py\n\ncustom_option1 = value1\ncustom_option2 = value2\n```\n\n----------------------------------------\n\nTITLE: Displaying PlatformIO Serial Monitor Interface and Commands\nDESCRIPTION: Shows the complete output of a PlatformIO serial monitor session including connection information, received output from the device showing 'Hello PlatformIO!', and a comprehensive list of keyboard shortcuts for controlling the monitor interface.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/device/cmd_monitor.rst#2025-04-10_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nEnter port name:/dev/cu.SLAB_USBtoUART\n--- Miniterm on /dev/cu.SLAB_USBtoUART: 9600,8,N,1 ---\n--- Quit: Ctrl+C  |  Menu: Ctrl+T | Help: Ctrl+T followed by Ctrl+H ---\nHello PlatformIO!\n---\n--- Ctrl+]   Exit program\n--- Ctrl+T   Menu escape key, followed by:\n--- Menu keys:\n---    Ctrl+T  Send the menu character itself to remote\n---    Ctrl+]  Send the exit character itself to remote\n---    Ctrl+I  Show info\n---    Ctrl+U  Upload file (prompt will be shown)\n--- Toggles:\n---    Ctrl+R  RTS          Ctrl+E  local echo\n---    Ctrl+D  DTR          Ctrl+B  BREAK\n---    Ctrl+L  line feed    Ctrl+A  Cycle repr mode\n---\n--- Port settings (Ctrl+T followed by the following):\n---    p          change port\n---    7 8        set data bits\n---    n e o s m  change parity (None, Even, Odd, Space, Mark)\n---    1 2 3      set stop bits (1, 2, 1.5)\n---    b          change baud rate\n---    x X        disable/enable software flow control\n---    r R        disable/enable hardware flow control\n--- exit ---\n```\n\n----------------------------------------\n\nTITLE: Configuring LDF in platformio.ini\nDESCRIPTION: Example of configuring Library Dependency Finder mode and build flags in the project configuration file. This example shows setting LDF to chain+ mode and defining a project version.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/librarymanager/ldf.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nlib_ldf_mode = chain+\nbuild_flags = -D MY_PROJECT_VERSION=13\n```\n\n----------------------------------------\n\nTITLE: Configuring Shippable CI for PlatformIO Library Projects\nDESCRIPTION: This YAML configuration sets up Shippable CI for a PlatformIO library project. It allows specifying source files or directories, installs PlatformIO, and runs CI tests for multiple boards.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/ci/shippable.rst#2025-04-10_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nlanguage: python\npython:\n    - \"3.11\"\n\nenv:\n    - PLATFORMIO_CI_SRC=path/to/source/file.c\n    - PLATFORMIO_CI_SRC=path/to/source/file.ino\n    - PLATFORMIO_CI_SRC=path/to/source/directory\n\ninstall:\n    - pip install -U platformio\n\nscript:\n    - pio ci --board=<ID_1> --board=<ID_2> --board=<ID_N>\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU Options\nDESCRIPTION: Extended PlatformIO configuration demonstrating how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32-poe-iso.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32-poe-iso]\nplatform = espressif32\nboard = esp32-poe-iso\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Options in Python Script (Python)\nDESCRIPTION: Demonstrates how to access custom options defined in platformio.ini using the ProjectConfig API in a Python script. It shows both environment-specific and global option access.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/scripting/examples/platformio_ini_custom_options.rst#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# \"env.GetProjectOption\" shortcut for the active environment\nvalue1 = env.GetProjectOption(\"custom_option1\")\nvalue2 = env.GetProjectOption(\"custom_option2\")\n\n# Read value from other environments\nconfig = env.GetProjectConfig()\nworld = config.get(\"universe\", \"hello\")\n```\n\n----------------------------------------\n\nTITLE: Displaying PlatformIO Package Manager Help in Bash\nDESCRIPTION: Commands to display help information for the PlatformIO Package Manager CLI. The first command shows general package manager help, while the second shows help for a specific subcommand.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/pkg/index.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio pkg --help\npio pkg COMMAND --help\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic PlatformIO Environment for ATtiny2313\nDESCRIPTION: Basic configuration for setting up a PlatformIO environment for the ATtiny2313 board. This snippet defines the platform (atmelavr) and board (attiny2313) in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/attiny2313.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:attiny2313]\nplatform = atmelavr\nboard = attiny2313\n```\n\n----------------------------------------\n\nTITLE: QEMU Test Execution Command Output\nDESCRIPTION: Example output of running unit tests using QEMU emulator through PlatformIO CLI, showing test execution and results summary.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/advanced/unit-testing/simulators/qemu.rst#2025-04-10_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n> pio test --without-uploading\n\nVerbose mode can be enabled via `-v, --verbose` option\nCollected 1 tests\n\nProcessing test_dummy in hifive1 environment\n--------------------------------------------\nBuilding...\nTesting...\ntest/test_dummy/main.c:18: dummy_test\t[PASSED]\n---------------------- hifive1:test_dummy [PASSED] Took 2.05 seconds ----------------------\n\n======================================= SUMMARY =======================================\nEnvironment    Test        Status    Duration\n-------------  ----------  --------  ------------\nhifive1        test_dummy  PASSED    00:00:02.055\n====================== 1 test cases: 1 succeeded in 00:00:02.055 ======================\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Atmel ATSAMR21-XPRO Board\nDESCRIPTION: Basic configuration for the Atmel ATSAMR21-XPRO board in platformio.ini. This snippet sets up the project to use the atmelsam platform with the samr21_xpro board identifier.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/samr21_xpro.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:samr21_xpro]\nplatform = atmelsam\nboard = samr21_xpro\n```\n\n----------------------------------------\n\nTITLE: ArduinoJson Library CI Configuration Example\nDESCRIPTION: Complete GitLab CI configuration for the ArduinoJson library, demonstrating multiple test jobs for different examples using template inheritance and variable customization.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/ci/gitlab.rst#2025-04-10_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nimage: python:3.11\n\nvariables:  \n  PIP_CACHE_DIR: \"$CI_PROJECT_DIR/.cache/pip\"\n  PLATFORMIO_CACHE_DIR: \"$CI_PROJECT_DIR/.cache/platformio\"\n\ncache:\n  paths:\n    - .cache/pip\n    - .cache/platformio\n\nstages:\n - test\n\n.job_template: &pio_run\n  script:\n    - \"pio ci --lib='.' --board=uno --board=teensy31 --board=nodemcuv2 $PLATFORMIO_CI_EXTRA_ARGS\"\n\nbefore_script:\n  - \"pip install -U platformio\"\n\nJsonGeneratorExample:\n  <<: *pio_run\n  variables:\n    PLATFORMIO_CI_EXTRA_ARGS: \"--board=due\"\n    PLATFORMIO_CI_SRC: examples/JsonGeneratorExample\n\nJsonHttpClient:\n  <<: *pio_run\n  variables:\n    PLATFORMIO_CI_SRC: examples/JsonHttpClient\n\nJsonParserExample:\n  <<: *pio_run\n  variables:\n    PLATFORMIO_CI_SRC: examples/JsonParserExample\n\nJsonServer:\n  <<: *pio_run\n  variables:\n    PLATFORMIO_CI_SRC: examples/JsonServer\n\nJsonUdpBeacon:\n  <<: *pio_run\n  variables:\n    PLATFORMIO_CI_SRC: examples/JsonUdpBeacon\n\nProgmemExample:\n  stage: test\n  <<: *pio_run\n  variables:\n    PLATFORMIO_CI_SRC: examples/ProgmemExample\n\nStringExample:\n  stage: test\n  <<: *pio_run\n  variables:\n    PLATFORMIO_CI_SRC: examples/StringExample\n```\n\n----------------------------------------\n\nTITLE: Customizing Doctest Testing Command in platformio.ini\nDESCRIPTION: Configuration example showing how to override the default testing command in platformio.ini. This approach allows passing custom command-line arguments directly to the Doctest test runner.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/advanced/unit-testing/frameworks/doctest.rst#2025-04-10_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = native\ntest_testing_command =\n  ${platformio.build_dir}/${this.__env__}/program\n  -aa=1\n  -s\n```\n\n----------------------------------------\n\nTITLE: Configuring Hardware Settings for Atmel AVR in PlatformIO\nDESCRIPTION: This INI snippet demonstrates how to configure hardware settings for an Atmel AVR microcontroller (ATmega32) in PlatformIO. It specifies clock frequency, UART, oscillator type, brown-out detection voltage, and EEPROM save settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/atmelavr_extra.rst#2025-04-10_snippet_10\n\nLANGUAGE: ini\nCODE:\n```\n[env:custom_fuses]\nplatform = atmelavr\nframework = arduino\nboard = ATmega32\n\nboard_build.f_cpu = 1000000L\nboard_hardware.uart = uart0\nboard_hardware.oscillator = internal\nboard_hardware.bod = 2.7v\nboard_hardware.eesave = no\n\nupload_protocol = usbasp\nupload_flags =\n  -Pusb\n```\n\n----------------------------------------\n\nTITLE: Board Specifications in RST Format\nDESCRIPTION: ReStructuredText table format documentation showing detailed specifications of ESP32 development boards from various manufacturers including oddWires, senseBox, u-blox, and uPesy.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/frameworks/espidf.rst#2025-04-10_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. list-table::\n    :header-rows:  1\n\n    * - Name\n      - Platform\n      - Debug\n      - MCU\n      - Frequency\n      - Flash\n      - RAM\n    * - :ref:`board_espressif32_iotbusio`\n      - :ref:`platform_espressif32`\n      - External\n      - ESP32\n      - 240MHz\n      - 4MB\n      - 320KB\n```\n\n----------------------------------------\n\nTITLE: Setting check_flags in PlatformIO Configuration (INI)\nDESCRIPTION: This snippet demonstrates how to set the 'check_flags' option in a PlatformIO project configuration file. It shows how to specify common flags and tool-specific flags for cppcheck and clangtidy.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/env/options/check/check_flags.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:extra_check_flags]\nplatform = ...\nboard = ...\ncheck_tool = cppcheck, clangtidy\ncheck_flags =\n  --common-flag\n  cppcheck: --enable=performance --inline-suppr\n  clangtidy: -fix-errors -format-style=mozilla\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration for MultiTech mDot\nDESCRIPTION: Configuration example showing how to set the upload protocol for the board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/mts_mdot_f405rg.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:mts_mdot_f405rg]\nplatform = ststm32\nboard = mts_mdot_f405rg\n\nupload_protocol = mbed\n```\n\n----------------------------------------\n\nTITLE: Configuring Energia Framework in PlatformIO\nDESCRIPTION: Shows how to configure the Energia framework in a PlatformIO project using the projectconf_env_framework setting.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/frameworks/energia.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nframework = energia\n```\n\n----------------------------------------\n\nTITLE: Configuring ESP USB Bridge Debug Tool in PlatformIO\nDESCRIPTION: Basic configuration example for enabling ESP USB Bridge as a debugging tool in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/esp-usb-bridge.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = ...\nboard = ...\ndebug_tool = esp-usb-bridge\n```\n\n----------------------------------------\n\nTITLE: Python Script for Overriding ESP8266 Filesystem Image Name\nDESCRIPTION: Python script that overrides the default filesystem image name for ESP8266 projects by changing the ESP8266_FS_IMAGE_NAME environment variable.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/espressif8266_extra.rst#2025-04-10_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nImport(\"env\")\nenv.Replace(ESP8266_FS_IMAGE_NAME=\"custom_image_name\")\n```\n\n----------------------------------------\n\nTITLE: Generating Patch File for Arduino Pins Configuration in Shell\nDESCRIPTION: This command generates a patch file by comparing the original Arduino pins configuration file with a modified version. The patch is saved in the project's patches folder.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/scripting/examples/override_package_files.rst#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndiff ~/.platformio/packages/framework-arduinoavr/variants/standard/pins_arduino.h /tmp/pins_arduino_modified.h > /path/to/platformio/project/patches/1-framework-arduinoavr-add-pin-a8.patch\n```\n\n----------------------------------------\n\nTITLE: Changing a PlatformIO Setting in Bash\nDESCRIPTION: Example of changing the 'check_platformio_interval' setting to check for PlatformIO Core updates daily.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/cmd_settings.rst#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n> pio settings set check_platformio_interval 1\nThe new value for the setting has been set!\nName                            Value [Default]   Description\n------------------------------------------------------------------------------------------\ncheck_platformio_interval       1 [7]             Check for the new PlatformIO interval (days)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTables Location for ESP8266 in PlatformIO\nDESCRIPTION: Specifies where to store C++ virtual tables using build_flags. Options include flash memory (default), heap (DRAM), or instruction RAM (IRAM).\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/espressif8266_extra.rst#2025-04-10_snippet_11\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\n...\n\n; Flash (default)\nbuild_flags = -DVTABLES_IN_FLASH\n\n; Heap\nbuild_flags = -DVTABLES_IN_DRAM\n\n; IRAM\nbuild_flags = -DVTABLES_IN_IRAM\n```\n\n----------------------------------------\n\nTITLE: Adding Users to PlatformIO Organizations (CLI Command)\nDESCRIPTION: Basic command syntax for adding a user as an owner to a PlatformIO organization. Takes two required parameters: ORGNAME (the organization name) and USERNAME (the user to add as owner).\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/org/cmd_add.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio org add ORGNAME USERNAME\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Mbed OS Target in JSON\nDESCRIPTION: Example of custom_targets.json file used to define a custom board (NUCLEO-F401RE) for use with Mbed OS in PlatformIO projects.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/frameworks/mbed_extra.rst#2025-04-10_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"NUCLEO_F401RE\": {\n    \"inherits\": [\n        \"MCU_STM32\"\n    ],\n    \"supported_form_factors\": [\n        \"ARDUINO\",\n        \"MORPHO\"\n    ],\n    \"core\": \"Cortex-M4F\",\n    \"extra_labels_add\": [\n        \"STM32F4\",\n        \"STM32F401xE\"\n    ],\n    \"macros_add\": [\n        \"STM32F401xE\"\n    ],\n    \"config\": {\n        \"clock_source\": {\n            \"help\": \"Mask value : USE_PLL_HSE_EXTC | USE_PLL_HSE_XTAL (need HW patch) | USE_PLL_HSI\",\n            \"value\": \"USE_PLL_HSE_EXTC|USE_PLL_HSI\",\n            \"macro_name\": \"CLOCK_SOURCE\"\n        }\n    },\n    \"detect_code\": [\n        \"0720\"\n    ],\n    \"device_has_add\": [\n        \"SERIAL_ASYNCH\",\n        \"FLASH\",\n        \"MPU\"\n    ],\n    \"device_name\": \"STM32F401RE\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Source File Filters in PlatformIO Library Build Configuration\nDESCRIPTION: Example showing how to include specific file types at the top level of a library directory. This configuration tells PlatformIO to compile C and C++ files and include header files from the root.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/manifests/library-json/fields/build/builder.rst#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n\"build\": {\n    \"srcFilter\": [\n        \"+<*.c>\",\n        \"+<*.cpp>\",\n        \"+<*.h>\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Flags for ATmega328PB in PlatformIO\nDESCRIPTION: Example configuration showing how to set multiple upload flags for an ATmega328PB board using PlatformIO. The flags include port specification, upload speed, and various fuse settings for the microcontroller.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/env/options/upload/upload_flags.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:atmega328pb]\nplatform = atmelavr\nboard = atmega328pb\nframework = arduino\nupload_flags =\n  -P$UPLOAD_PORT\n  -b$UPLOAD_SPEED\n  -u\n  -Ulock:w:0xCF:m\n  -Uhfuse:w:0xD7:m\n  -Uefuse:w:0xF6:m\n  -Ulfuse:w:0xE2:m\n```\n\n----------------------------------------\n\nTITLE: Windows Device List Example Output\nDESCRIPTION: Example output of the device list command on Windows systems, showing COM ports and connected devices\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/device/cmd_list.rst#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n> pio device list\nCOM4\n----------\nHardware ID: USB VID:PID=0451:F432\nDescription: MSP430 Application UART (COM4)\n\nCOM3\n----------\nHardware ID: USB VID:PID=10C4:EA60 SNR=0001\nDescription: Silicon Labs CP210x USB to UART Bridge (COM3)\n```\n\n----------------------------------------\n\nTITLE: Maple STM32 USB Configuration\nDESCRIPTION: Example configuration for Discovery F407VG board using maple core with USB mass storage enabled.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/ststm32_extra.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_f407vg]\nplatform = ststm32\nframework = arduino\nboard = disco_f407vg\nboard_build.core = maple\nbuild_flags = -D ENABLE_USB_MASS_STORAGE\n```\n\n----------------------------------------\n\nTITLE: Example Output of Platform Show Command for AtmelAVR\nDESCRIPTION: Example showing the detailed output when running the platform show command for the AtmelAVR platform, including version information, frameworks, and package details.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/platforms/cmd_show.rst#2025-04-10_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n> pio platform show atmelavr\n\natmelavr ~ Atmel AVR\n====================\nAtmel AVR 8- and 32-bit MCUs deliver a unique combination of performance, power efficiency and design flexibility. Optimized to speed time to market-and easily adapt to new ones-they are based on the industrys most code-efficient architecture for C and assembly programming.\n\nVersion: 1.2.1\nHome: https://platformio.org/platforms/atmelavr\nLicense: Apache-2.0\nFrameworks: simba, arduino\n\nPackage toolchain-atmelavr\n--------------------------\nType: toolchain\nRequirements: ~1.40902.0\nInstalled: Yes\nDescription: avr-gcc\nUrl: http://www.atmel.com/products/microcontrollers/avr/32-bitavruc3.aspx?tab=tools\nVersion: 1.40902.0 (4.9.2)\n\nPackage framework-arduinoavr\n----------------------------\nType: framework\nRequirements: ~1.10612.1\nInstalled: Yes\nUrl: https://www.arduino.cc/en/Main/Software\nVersion: 1.10612.1 (1.6.12)\nDescription: Arduino Wiring-based Framework (AVR Core, 1.6)\n\nPackage framework-simba\n-----------------------\nType: framework\nRequirements: >=7.0.0\nInstalled: Yes\nUrl: https://github.com/eerimoq/simba\nVersion: 11.0.0\nDescription: Simba Embedded Programming Platform\n\nPackage tool-avrdude\n--------------------\nType: uploader\nRequirements: ~1.60300.0\nInstalled: Yes\nDescription: AVRDUDE\nUrl: http://www.nongnu.org/avrdude/\nVersion: 1.60300.0 (6.3.0)\n\nPackage tool-micronucleus\n-------------------------\nType: uploader\nRequirements: ~1.200.0\nInstalled: No (optional)\n```\n\n----------------------------------------\n\nTITLE: Library List Command Output Example\nDESCRIPTION: Example output of the 'pio lib -g list' command showing installed libraries with their details including ID, version, keywords, compatible frameworks and platforms, and authors.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/lib/cmd_list.rst#2025-04-10_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n> pio lib -g list\n\nLibrary Storage: /storage/dir/...\n\nAdafruit Unified Sensor\n=======================\n#ID: 31\nRequired for all Adafruit Unified Sensor based libraries.\n\nVersion: 1.0.2\nKeywords: sensors\nCompatible frameworks: arduino\nCompatible platforms: atmelavr, atmelsam, espressif8266, intel_arc32, microchippic32, nordicnrf51, teensy, timsp430\nAuthors: Adafruit\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO Environments with Different HAL Settings\nDESCRIPTION: Example platformio.ini file that configures two build environments (foo and bar) with different hardware abstraction layer definitions using the native platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/manifests/library-json/fields/build/extrascript.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:foo]\nplatform = native\nbuild_flags = -DHAL=foo\n\n[env:bar]\nplatform = native\nbuild_flags = -DHAL=bar\n```\n\n----------------------------------------\n\nTITLE: Patch File Content for Adding PIN_A8 Definition\nDESCRIPTION: This diff patch adds a new PIN_A8 definition and modifies a comment in the Arduino pins configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/scripting/examples/override_package_files.rst#2025-04-10_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n63a64\n> #define PIN_A8   (99)\n112c113\n< // 14-21 PA0-PA7 works\n---\n> // 14-21 PA0-PA7 works\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Matrix for PlatformIO CI\nDESCRIPTION: Defines environment variables for different board configurations and examples to be tested in the CI pipeline.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/ci/travis.rst#2025-04-10_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- PLATFORMIO_CI_SRC=examples/Boards_Bluetooth/Arduino_101_BLE PLATFORMIO_CI_EXTRA_ARGS=\"--board=genuino101\"\n- PLATFORMIO_CI_SRC=examples/Boards_USB_Serial/Blue_Pill_STM32F103C PLATFORMIO_CI_EXTRA_ARGS=\"--board=bluepill_f103c8 --project-option='framework=arduino'\"\n- PLATFORMIO_CI_SRC=examples/Export_Demo/myPlant_ESP8266 PLATFORMIO_CI_EXTRA_ARGS=\"--board=nodemcuv2 --project-option='lib_ignore=WiFi101'\"\n```\n\n----------------------------------------\n\nTITLE: Manual Library Installation in CircleCI\nDESCRIPTION: CircleCI configuration for manually downloading and including a library in the build process using the --lib option.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/ci/circleci.rst#2025-04-10_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- run:\n    name: Install library\n    command: |\n      wget https://github.com/PaulStoffregen/OneWire/archive/master.zip -O /tmp/onewire_source.zip\n      unzip /tmp/onewire_source.zip -d /tmp/\n- run:\n    name: Compile project\n    command: pio ci --lib=\"/tmp/OneWire-master\" --board=<ID_1> --board=<ID_2> --board=<ID_N>\n```\n\n----------------------------------------\n\nTITLE: PlatformIO Remote Run Example\nDESCRIPTION: Shows an example of using the 'pio remote run' command to build and upload firmware for an Arduino Uno board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/remote/cmd_run.rst#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> pio remote run --environment uno --target upload\n```\n\n----------------------------------------\n\nTITLE: Configuring Arduino as ISP Programmer Upload for ATmega AVR in PlatformIO\nDESCRIPTION: This snippet shows the PlatformIO configuration for uploading firmware to an ATmega AVR microcontroller using an Arduino as ISP programmer. It defines the upload protocol, port, speed, and necessary flags for the avrdude tool.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/atmelavr_extra.rst#2025-04-10_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[env:program_via_ArduinoISP]\nplatform = atmelavr\nframework = arduino\nupload_protocol = custom\nupload_port = SERIAL_PORT_HERE\nupload_speed = 19200\nupload_flags =\n    -C\n    ; use \"tool-avrdude-megaavr\" for the atmelmegaavr platform\n    ${platformio.packages_dir}/tool-avrdude/avrdude.conf\n    -p\n    $BOARD_MCU\n    -P\n    $UPLOAD_PORT\n    -b\n    $UPLOAD_SPEED\n    -c\n    stk500v1\nupload_command = avrdude $UPLOAD_FLAGS -U flash:w:$SOURCE:i\n```\n\n----------------------------------------\n\nTITLE: Accessing Device Manager CLI Help in PlatformIO\nDESCRIPTION: These commands display help information for the PlatformIO Device Manager CLI. The first command shows general help, while the second provides help for a specific command.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/device/index.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio device --help\npio device COMMAND --help\n```\n\n----------------------------------------\n\nTITLE: Configuring Sanguino ATmega644 (8 MHz) in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the Sanguino ATmega644 or ATmega644A (8 MHz) board in a PlatformIO project's configuration file. It sets the platform to atmelavr and specifies the board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/sanguino_atmega644_8m.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:sanguino_atmega644_8m]\nplatform = atmelavr\nboard = sanguino_atmega644_8m\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Nucleo G070RB Board\nDESCRIPTION: Basic configuration for using the Nucleo G070RB board in a PlatformIO project. This sets up the environment with the STM32 platform and specifies the board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_g070rb.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_g070rb]\nplatform = ststm32\nboard = nucleo_g070rb\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Custom Test Runner in Python\nDESCRIPTION: Minimal implementation of a custom test runner class that inherits from TestRunnerBase. This is the basic structure required for a custom test runner in PlatformIO.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/advanced/unit-testing/frameworks/custom/runner.rst#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom platformio.public import TestRunnerBase\n\nclass CustomTestRunner(TestRunnerBase):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Run Command Usage Syntax\nDESCRIPTION: Shows the basic syntax for using the 'pio run' command in PlatformIO. This command is used to build and process project targets.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/cmd_run.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio run [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Setting STM32F103C4 Upload Protocol\nDESCRIPTION: Example showing how to configure the upload protocol for the STM32F103C4 board, using serial as the protocol\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103C4.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103C4]\nplatform = ststm32\nboard = genericSTM32F103C4\n\nupload_protocol = serial\n```\n\n----------------------------------------\n\nTITLE: Advanced WiPy3 Board Configuration\nDESCRIPTION: Shows how to override default board settings including microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/wipy3.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:wipy3]\nplatform = espressif32\nboard = wipy3\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Ignoring Tests with Pattern Matching in PlatformIO Remote\nDESCRIPTION: Example showing how to ignore specific tests using pattern matching with the 'pio remote test' command. The example demonstrates using wildcard patterns to exclude tests that match specified patterns.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/remote/cmd_test.rst#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npio remote test --ignore \"mytest*\" -i \"test[13]\"\n```\n\n----------------------------------------\n\nTITLE: Setting Serial Port Encoding in PlatformIO Configuration\nDESCRIPTION: The monitor_encoding parameter defines the character encoding used when reading from or writing to the serial port in PlatformIO. It accepts a string value and defaults to UTF-8 if not specified.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/env/options/monitor/monitor_encoding.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nmonitor_encoding = UTF-8\n```\n\n----------------------------------------\n\nTITLE: Using 'pio team create' Command in Bash\nDESCRIPTION: This snippet demonstrates the usage syntax for the 'pio team create' command. It shows how to create a new team within an organization, including the required ORGNAME:TEAMNAME format.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/team/cmd_create.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio team create [OPTIONS] ORGNAME:TEAMNAME\n```\n\n----------------------------------------\n\nTITLE: Example Usage - Setting Package to Private\nDESCRIPTION: Demonstrates setting a specific package resource to private access using its URN identifier.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/access/cmd_private.rst#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> pio access private prn:reg:pkg:8036:platform\nThe resource \"prn:reg:pkg:8036:platform\" has been successfully updated.\n```\n\n----------------------------------------\n\nTITLE: Configuring Library Archive Setting in PlatformIO\nDESCRIPTION: Example of disabling library archiving in a PlatformIO environment configuration. Setting lib_archive to 'no' makes the build system link object files directly instead of creating static libraries.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/env/options/library/lib_archive.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nlib_archive = no\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic AT90CAN32 Environment in PlatformIO\nDESCRIPTION: Sets up a basic PlatformIO environment for AT90CAN32 microcontroller boards. This configuration defines the platform as atmelavr and the board as AT90CAN32.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/AT90CAN32.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:AT90CAN32]\nplatform = atmelavr\nboard = AT90CAN32\n```\n\n----------------------------------------\n\nTITLE: Framework Configuration in platformio.ini\nDESCRIPTION: Configuration setting for enabling the FSP framework in PlatformIO projects targeting Renesas RA microcontrollers\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/frameworks/fsp.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nframework = fsp\n```\n\n----------------------------------------\n\nTITLE: Using PlatformIO Package Publish Command in Bash\nDESCRIPTION: This snippet demonstrates the basic usage of the 'pio pkg publish' command in PlatformIO. It allows publishing a package to the PlatformIO Registry, with optional specification of the source directory or archive file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/pkg/cmd_publish.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio pkg publish [<source directory, tar.gz or zip>] [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Installing PlatformIO CLI Tab Completion\nDESCRIPTION: This command installs tab completion support for PlatformIO CLI. It can be used with fish, zsh, or bash shells. An optional --path argument can be provided to specify a custom installation path.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/system/completion/cmd_install.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio system completion install [OPTIONS] [SHELL]\n```\n\n----------------------------------------\n\nTITLE: Original Arduino INO File Structure\nDESCRIPTION: Example of a basic Arduino sketch file with setup, loop, and a custom function, which lacks proper C++ headers and function declarations.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/faq/ino-to-cpp.rst#2025-04-10_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nvoid setup () {\n    someFunction(13);\n}\n\nvoid loop() {\n    delay(1000);\n}\n\nvoid someFunction(int num) {\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Linker Script in PlatformIO\nDESCRIPTION: Configuration option for specifying a custom linker script path. The option takes a string value and can only be specified once. Used to override the default framework linker script, particularly useful for projects requiring special memory layouts or bootloader configurations.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/env/options/platform/board_build.ldscript.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nboard_build.ldscript\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Startup File in STM32Cube PlatformIO Project\nDESCRIPTION: This configuration demonstrates how to specify a custom startup file for an STM32Cube project. It sets the 'startup_file' option to a specific file for a custom board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/frameworks/stm32cube_extra.rst#2025-04-10_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[env:custom_board_name]\nplatform = ststm32\nframework = stm32cube\nboard = custom_board_name\nboard_build.stm32cube.startup_file = startup_stm32l152xca.s\n```\n\n----------------------------------------\n\nTITLE: rst-formatted Board Specifications Table\nDESCRIPTION: ReStructuredText formatted tables containing technical specifications for various ESP32 development boards including details like platform, debug support, MCU type, clock frequency, flash size and RAM size\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/frameworks/espidf.rst#2025-04-10_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. list-table::\n    :header-rows:  1\n\n    * - Name\n      - Platform\n      - Debug\n      - MCU\n      - Frequency\n      - Flash\n      - RAM\n    * - :ref:`board_espressif32_hornbill32dev`\n      - :ref:`platform_espressif32`\n      - External\n      - ESP32\n      - 240MHz\n      - 4MB\n      - 320KB\n```\n\n----------------------------------------\n\nTITLE: Configuring Atmel-ICE for Firmware Upload in platformio.ini\nDESCRIPTION: This code snippet demonstrates how to configure Atmel-ICE for both debugging and firmware uploading. It sets up the upload protocol alongside the debugging tool to use Atmel-ICE for firmware transfers.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/atmel-ice.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = ...\nboard = ...\ndebug_tool = atmel-ice\nupload_protocol = atmel-ice\n```\n\n----------------------------------------\n\nTITLE: Generating PlatformIO Project for Arduino UNO in NetBeans\nDESCRIPTION: This command demonstrates how to initialize a PlatformIO project for Arduino UNO board, configured for use with NetBeans IDE.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/ide/netbeans.rst#2025-04-10_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npio project init --ide netbeans --board uno\n```\n\n----------------------------------------\n\nTITLE: Library Dependency Graph Output Example\nDESCRIPTION: An example of the Library Dependency Graph output when building a project, showing the library names that can be referenced in the lib_ignore directive.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/env/options/library/lib_ignore.rst#2025-04-10_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n...\\nLibrary Dependency Finder -> https://bit.ly/configure-pio-ldf\\nLDF MODES: FINDER(chain+) COMPATIBILITY(soft)\\nCollected 54 compatible libraries\\nScanning dependencies...\\nDependency Graph\\n|-- <Hash> v1.0\\n|-- <AsyncMqttClient> v0.8.2\\n|   |-- <ESPAsyncTCP> v1.1.3\\n|-- <ESP8266WiFi> v1.0\\n|-- <ESP Async WebServer> v1.1.1\\n|   |-- <ESPAsyncTCP> v1.1.3\\n|   |-- <ESP8266WiFi> v1.0\\n|   |-- <Hash> v1.0\\n|   |-- <ArduinoJson> v5.13.1\\n|-- <ArduinoJson> v5.13.1\\n|-- <DNSServer> v1.1.0\\n|   |-- <ESP8266WiFi> v1.0\\n|-- <Ticker> v1.0\\n....\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO Project for Arduino Uno\nDESCRIPTION: PlatformIO configuration file (platformio.ini) that specifies an Arduino Uno board with the ATmega AVR platform and Arduino framework.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/tutorials/core/unit_testing_blink.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:uno]\nplatform = atmelavr\nframework = arduino\nboard = uno\n```\n\n----------------------------------------\n\nTITLE: Specifying Universal Platform Compatibility in PlatformIO Library Manifest\nDESCRIPTION: This snippet shows how to indicate that a library is compatible with all platforms in a library.json manifest file, using the wildcard symbol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/manifests/library-json/fields/platforms.rst#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\"platforms\": \"*\"\n```\n\n----------------------------------------\n\nTITLE: Basic Configuration Inheritance in PlatformIO\nDESCRIPTION: Demonstrates basic configuration inheritance using the extends option to combine settings from multiple base configurations into release and debug environments.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/env/options/advanced/extends.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[strict_ldf]\nlib_ldf_mode = chain+\nlib_compat_mode = strict\n\n[espressi32_base]\nplatform = platformio/espressif32\nframework = arduino\n\n[env:release]\nextends = espressi32_base, strict_ldf\nboard = esp32dev\nbuild_flags = -D RELEASE\n\n[env:debug]\nextends = env:release\nbuild_type = debug\nbuild_flags = -D DEBUG\n```\n\n----------------------------------------\n\nTITLE: Installing PlatformIO Development Version from GitHub\nDESCRIPTION: This command installs the latest development version of PlatformIO Core directly from the 'develop' branch on GitHub using pip.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/installation/development-version.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install -U https://github.com/platformio/platformio-core/archive/develop.zip\n```\n\n----------------------------------------\n\nTITLE: Customizing MCU and Frequency Settings\nDESCRIPTION: Example of overriding default microcontroller and frequency settings for the Electrosmith Daisy Patch SM board using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/electrosmith_daisy_patch_sm.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:electrosmith_daisy_patch_sm]\nplatform = ststm32\nboard = electrosmith_daisy_patch_sm\n\n; change microcontroller\nboard_build.mcu = stm32h750ibk6\n\n; change MCU frequency\nboard_build.f_cpu = 400000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring srcFilter in library.json for PlatformIO\nDESCRIPTION: The 'srcFilter' property allows developers to specify which source files should be included or excluded during build. The paths should be relative to the 'srcDir' option of the library. It can be specified as either a String or an Array value, and follows the same syntax as the build_src_filter option in platformio.ini.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/manifests/library-json/fields/build/srcfilter.rst#2025-04-10_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"srcFilter\": \"+<*> -<excluded_file.c>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Maxim 32 Platform Version in platformio.ini\nDESCRIPTION: Examples of how to configure the Maxim 32 platform version in the PlatformIO project configuration file. Shows options for using the latest stable release, a specific version, or the upstream development version.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/maxim32.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n; Latest stable version, NOT recommended\n; Pin the version as shown below\n[env:latest_stable]\nplatform = maxim32\nboard = ...\n\n; Specific version\n[env:custom_stable]\nplatform = maxim32@x.y.z\nboard = ...\n\n[env:upstream_develop]\nplatform = https://github.com/platformio/platform-maxim32.git\nboard = ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Unity Test Framework for STM32 UART (C)\nDESCRIPTION: This implementation file sets up UART communication for the Unity test framework on STM32. It initializes USART2 for test output.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/tutorials/ststm32/stm32cube_debugging_unit_testing.rst#2025-04-10_snippet_3\n\nLANGUAGE: C\nCODE:\n```\n#include \"unity_config.h\"\n#include \"stm32f4xx_hal.h\"\n\n#define USARTx USART2\n#define USARTx_CLK_ENABLE() __HAL_RCC_USART2_CLK_ENABLE()\n#define USARTx_CLK_DISABLE() __HAL_RCC_USART2_CLK_DISABLE()\n#define USARTx_RX_GPIO_CLK_ENABLE() __HAL_RCC_GPIOA_CLK_ENABLE()\n#define USARTx_TX_GPIO_CLK_ENABLE() __HAL_RCC_GPIOA_CLK_ENABLE()\n#define USARTx_RX_GPIO_CLK_DISABLE() __HAL_RCC_GPIOA_CLK_DISABLE()\n#define USARTx_TX_GPIO_CLK_DISABLE() __HAL_RCC_GPIOA_CLK_DISABLE()\n\n#define USARTx_FORCE_RESET() __HAL_RCC_USART2_FORCE_RESET()\n#define USARTx_RELEASE_RESET() __HAL_RCC_USART2_RELEASE_RESET()\n\n#define USARTx_TX_PIN GPIO_PIN_2\n#define USARTx_TX_GPIO_PORT GPIOA\n#define USARTx_TX_AF GPIO_AF7_USART2\n#define USARTx_RX_PIN GPIO_PIN_3\n#define USARTx_RX_GPIO_PORT GPIOA\n#define USARTx_RX_AF GPIO_AF7_USART2\n\nstatic UART_HandleTypeDef UartHandle;\n\nvoid unityOutputStart()\n{\n  GPIO_InitTypeDef GPIO_InitStruct;\n\n  USARTx_TX_GPIO_CLK_ENABLE();\n  USARTx_RX_GPIO_CLK_ENABLE();\n\n  USARTx_CLK_ENABLE();\n\n  GPIO_InitStruct.Pin = USARTx_TX_PIN;\n  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;\n  GPIO_InitStruct.Pull = GPIO_PULLUP;\n  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;\n  GPIO_InitStruct.Alternate = USARTx_TX_AF;\n\n  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);\n\n  GPIO_InitStruct.Pin = USARTx_RX_PIN;\n  GPIO_InitStruct.Alternate = USARTx_RX_AF;\n\n  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);\n  UartHandle.Instance = USARTx;\n\n  UartHandle.Init.BaudRate = 115200;\n  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;\n  UartHandle.Init.StopBits = UART_STOPBITS_1;\n  UartHandle.Init.Parity = UART_PARITY_NONE;\n  UartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE;\n  UartHandle.Init.Mode = UART_MODE_TX_RX;\n  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;\n\n  if (HAL_UART_Init(&UartHandle) != HAL_OK)\n  {\n    while (1)\n    {\n    }\n  }\n}\n\nvoid unityOutputChar(char c)\n{\n  HAL_UART_Transmit(&UartHandle, (uint8_t *)(&c), 1, 1000);\n}\n\nvoid unityOutputFlush() {}\n\nvoid unityOutputComplete()\n{\n  USARTx_CLK_DISABLE();\n  USARTx_RX_GPIO_CLK_DISABLE();\n  USARTx_TX_GPIO_CLK_DISABLE();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Tools with pio pkg install\nDESCRIPTION: Examples of installing tools using the '-t' or '--tool' option from both the registry and repositories.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/pkg/cmd_install.rst#2025-04-10_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npio pkg install -t \"platformio/tool-openocd\"\npio pkg install --tool https://github.com/platformio/platform-sifive.git\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO with QEMU for RISC-V Testing\nDESCRIPTION: Configuration example for setting up QEMU emulator with a HiFive1 board using the SiFive platform. Demonstrates platform package installation and test command configuration for RISC-V emulation.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/advanced/unit-testing/simulators/qemu.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:hifive1]\nplatform = sifive\nframework = freedom-e-sdk\nboard = hifive1\n\nplatform_packages =\n    platformio/tool-qemu-riscv\ntest_testing_command =\n    ${platformio.packages_dir}/tool-qemu-riscv/bin/qemu-system-riscv32\n    -nographic\n    -machine\n    sifive_e\n    -kernel\n    ${platformio.build_dir}/${this.__env__}/firmware.elf\n```\n\n----------------------------------------\n\nTITLE: Configuring ATmega3209 with pymcuprog Upload in PlatformIO\nDESCRIPTION: PlatformIO configuration for using pymcuprog to upload firmware to an ATmega3209 board via UART. This defines upload flags and command for the serial UPDI programming method.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/atmelmegaavr_extra.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega3209_pymcuprog_upload]\nplatform = atmelmegaavr\nframework = arduino\nboard = ATmega3209\nupload_speed = 115200\nupload_flags =\n    --tool\n    uart\n    --device\n    atmega3209\n    --uart\n    $UPLOAD_PORT\n    --clk\n    $UPLOAD_SPEED\nupload_command = pymcuprog write --erase $UPLOAD_FLAGS --filename $SOURCE\n```\n\n----------------------------------------\n\nTITLE: Creating a PlatformIO Organization in Bash\nDESCRIPTION: This example shows how to use the 'pio org create' command to create a new organization named 'platformio' with an email and display name. It demonstrates the usage of the --email and --displayname options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/org/cmd_create.rst#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> pio org create platformio --email contact@platformio.org --displayname PlatformIO\nThe organization \"platformio\" has been successfully created.\n```\n\n----------------------------------------\n\nTITLE: Generating ReStructuredText Table for STM32 Boards\nDESCRIPTION: This code snippet generates a ReStructuredText table listing STM32 boards with their specifications. It includes details like board name, platform, debug capabilities, MCU model, CPU frequency, flash size, and RAM size.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/frameworks/stm32cube.rst#2025-04-10_snippet_3\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. list-table::\n    :header-rows:  1\n\n    * - Name\n      - Platform\n      - Debug\n      - MCU\n      - Frequency\n      - Flash\n      - RAM\n    * - :ref:`board_ststm32_genericSTM32F423RH`\n      - :ref:`platform_ststm32`\n      - External\n      - STM32F423RHT6\n      - 100MHz\n      - 1.50MB\n      - 320KB\n    * - :ref:`board_ststm32_genericSTM32F446RC`\n      - :ref:`platform_ststm32`\n      - External\n      - STM32F446RCT6\n      - 180MHz\n      - 256KB\n      - 128KB\n```\n\n----------------------------------------\n\nTITLE: Enabling Custom System Setup in STM32Cube PlatformIO Project\nDESCRIPTION: This configuration enables the use of a custom system setup implementation for an STM32Cube project. It sets the 'custom_system_setup' option to 'yes' for a Nucleo F401RE board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/frameworks/stm32cube_extra.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f401re]\nplatform = ststm32\nframework = stm32cube\nboard = nucleo_f401re\nboard_build.stm32cube.custom_system_setup = yes\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for ATmega168P\nDESCRIPTION: Basic configuration settings for ATmega168P board in platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega168P.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega168P]\nplatform = atmelavr\nboard = ATmega168P\n```\n\n----------------------------------------\n\nTITLE: PlatformIO Library Links List - Featured Monthly Libraries\nDESCRIPTION: A formatted list of monthly featured Arduino/ESP8266 libraries with their PlatformIO repository URLs, including popular libraries like ArduinoJson, DHT sensor library, and WifiManager.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/lib/cmd_stats.rst#2025-04-10_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nName                     Url\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nArduinoJson              https://platformio.org/lib/show/64/ArduinoJson\nDHT sensor library       https://platformio.org/lib/show/19/DHT%20sensor%20library\nAdafruit Unified Sensor  https://platformio.org/lib/show/31/Adafruit%20Unified%20Sensor\nPubSubClient             https://platformio.org/lib/show/89/PubSubClient\nOneWire                  https://platformio.org/lib/show/1/OneWire\nESPAsyncTCP              https://platformio.org/lib/show/305/ESPAsyncTCP\nTime                     https://platformio.org/lib/show/44/Time\nDallasTemperature        https://platformio.org/lib/show/54/DallasTemperature\nESPAsyncWebServer        https://platformio.org/lib/show/306/ESPAsyncWebServer\nWifiManager              https://platformio.org/lib/show/567/WifiManager\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Calliope Mini v3 in PlatformIO\nDESCRIPTION: Configuration for specifying the upload protocol for the Calliope Mini v3 board. This example sets the upload protocol to cmsis-dap, which is also the default protocol for this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/calliopemini_v3.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:calliopemini_v3]\nplatform = nordicnrf52\nboard = calliopemini_v3\n\nupload_protocol = cmsis-dap\n```\n\n----------------------------------------\n\nTITLE: Custom Build Flags Configuration\nDESCRIPTION: YAML configuration demonstrating how to specify custom build flags using environment variables in Travis CI.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/ci/travis.rst#2025-04-10_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nenv:\n    - PLATFORMIO_CI_SRC=path/to/test/file.c PLATFORMIO_BUILD_FLAGS=\"-D SPECIFIC_MACROS_PER_TEST_ENV -I/extra/inc\"\n    - PLATFORMIO_CI_SRC=examples/file.ino\n    - PLATFORMIO_CI_SRC=path/to/test/directory\n\ninstall:\n    - pip install -U platformio\n    - export PLATFORMIO_BUILD_FLAGS=\"-D GLOBAL_MACROS_FOR_ALL_TEST_ENV\"\n```\n\n----------------------------------------\n\nTITLE: Installing Build Tools on Linux\nDESCRIPTION: Command sequence for installing the required build tools on Linux systems. Updates package lists and installs the build-essential package which includes GCC and other development tools.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/native_extra.rst#2025-04-10_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt update\nsudo apt install build-essential\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Ignore Patterns in PlatformIO\nDESCRIPTION: Example showing how to configure test_ignore in a PlatformIO project environment. Demonstrates ignoring all tests in the 'embedded' directory and specific test suites numbered 1 and 3.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/env/options/test/test_ignore.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = embedded\ntest_ignore =\n    embedded/*\n    test_suite[13]\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic LightBlue Bean Board Settings\nDESCRIPTION: Basic PlatformIO configuration for LightBlue Bean board setup using the atmelavr platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/lightblue-bean.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:lightblue-bean]\nplatform = atmelavr\nboard = lightblue-bean\n```\n\n----------------------------------------\n\nTITLE: Defining the build configuration object in PlatformIO\nDESCRIPTION: This section defines the 'build' configuration object that can be specified in platformio.ini to customize advanced settings for the build system. The build object is optional and accepts multiple sub-options like flags, unflags, includedir, and others.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/manifests/library-json/fields/build/index.rst#2025-04-10_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n``build``\n---------\n\n*Optional* | Type: ``Object``\n\nSpecify advanced settings, options and flags for the build system. Possible\noptions:\n\n.. toctree::\n    :maxdepth: 2\n\n    flags\n    unflags\n    includedir\n    srcdir\n    srcfilter\n    extrascript\n    libarchive\n    libldfmode\n    libcompatmode\n    builder\n```\n\n----------------------------------------\n\nTITLE: Configuring ESP32 OTA Upload Flags in platformio.ini\nDESCRIPTION: Example of setting additional OTA upload flags in the platformio.ini file, such as specifying a custom port number for the ESP32 OTA process.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/espressif32_extra.rst#2025-04-10_snippet_11\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nupload_protocol = espota\n; each flag in a new line\nupload_flags =\n    --port=3232\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Test in platformio.ini\nDESCRIPTION: Example of specifying a unit test to debug in the PlatformIO project configuration file. This sets the name of the test to be debugged.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debugging.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\ndebug_test = test_name\n```\n\n----------------------------------------\n\nTITLE: Customizing ATmega644P Board Parameters in PlatformIO\nDESCRIPTION: Advanced configuration for the ATmega644P board with custom microcontroller and frequency settings. This demonstrates how to override default board settings defined in the board manifest.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega644P.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega644P]\nplatform = atmelavr\nboard = ATmega644P\n\n; change microcontroller\nboard_build.mcu = atmega644p\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Specifying Version Requirements for PlatformIO Packages\nDESCRIPTION: Demonstrates how to specify version requirements for packages using Semantic Versioning. Includes an example of complex version constraints for the espressif32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/pkg/cmd_install.rst#2025-04-10_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nplatformio/espressif32@>=3.5.0,<4,!=3.2.0\n\n# or short form\nplatformio/espressif32@^3.5.0,!=3.2.0\n```\n\n----------------------------------------\n\nTITLE: Organizing Libraries in PlatformIO Project Structure\nDESCRIPTION: This snippet demonstrates the recommended directory structure for organizing libraries in a PlatformIO project. It shows how to arrange multiple libraries (Foo and Bar) within the lib directory.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/platformio/options/directory/lib_dir.rst#2025-04-10_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n|--lib\n|  |--Bar\n|  |  |--docs\n|  |  |--examples\n|  |  |--src\n|  |     |- Bar.c\n|  |     |- Bar.h\n|  |--Foo\n|  |  |- Foo.c\n|  |  |- Foo.h\n|- platformio.ini\n|--src\n   |- main.c\n```\n\n----------------------------------------\n\nTITLE: Configuring Teensy Optimization in PlatformIO\nDESCRIPTION: This snippet demonstrates how to set optimization for the smallest code size on a Teensy 3.6 board using PlatformIO's configuration file. It uses the TEENSY_OPT_SMALLEST_CODE macro in the build_flags.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/teensy_extra.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:teensy_hid_device]\nplatform = teensy\nframework = arduino\nboard = teensy36\nbuild_flags = -D TEENSY_OPT_SMALLEST_CODE\n```\n\n----------------------------------------\n\nTITLE: Executing PlatformIO Account Deletion Command\nDESCRIPTION: Command line syntax for permanently deleting a PlatformIO account and all related data including organizations, teams, and resources. This action cannot be undone.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/account/cmd_destroy.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio account destroy [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Board Configuration Table Format\nDESCRIPTION: ReStructuredText table format showing board configurations including name, platform, debug mode, MCU, frequency, flash and RAM specifications.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/frameworks/stm32cube.rst#2025-04-10_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. list-table::\n    :header-rows:  1\n\n    * - Name\n      - Platform\n      - Debug\n      - MCU\n      - Frequency\n      - Flash\n      - RAM\n```\n\n----------------------------------------\n\nTITLE: Overriding Bootloader Upload Command for Atmel AVR in PlatformIO\nDESCRIPTION: This Python script shows how to completely override the bootloader upload command for an Atmel AVR microcontroller in PlatformIO. It replaces the BOOTUPLOADERFLAGS and UPLOADBOOTCMD environment variables with custom settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/atmelavr_extra.rst#2025-04-10_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nImport(\"env\")\n\nenv.Replace(\n    BOOTUPLOADERFLAGS=[\n        # use \"tool-avrdude-megaavr\" for the atmelmegaavr platform\n        \"-C\", \"$PROJECT_PACKAGES_DIR/tool-avrdude/avrdude.conf\",\n        \"-p\", \"$BOARD_MCU\",\n        \"-c\", \"atmelice_isp\"\n    ],\n    UPLOADBOOTCMD=\"avrdude $BOOTUPLOADERFLAGS -Ulock:w:0x0F:m\",\n)\n```\n\n----------------------------------------\n\nTITLE: Using 'pio access grant' Command in Bash\nDESCRIPTION: This snippet shows the basic usage syntax for the 'pio access grant' command. It includes options and parameters for specifying the access level, user/team, and resource URN.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/access/cmd_grant.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio access grant [OPTIONS] LEVEL <ORGNAME:TEAMNAME>|<USERNAME> URN\n```\n\n----------------------------------------\n\nTITLE: ESP8266 Board Specifications in RST Format\nDESCRIPTION: ReStructuredText formatted tables containing technical specifications for various ESP8266 development boards. The tables include details about board names, platforms, debug capabilities, MCU specifications, operating frequencies, and memory configurations.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/frameworks/esp8266-nonos-sdk.rst#2025-04-10_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. list-table::\n    :header-rows:  1\n\n    * - Name\n      - Platform\n      - Debug\n      - MCU\n      - Frequency\n      - Flash\n      - RAM\n    * - :ref:`board_espressif8266_d1`\n      - :ref:`platform_espressif8266`\n      - No\n      - ESP8266\n      - 80MHz\n      - 4MB\n      - 80KB\n```\n\n----------------------------------------\n\nTITLE: Using pio lib update command\nDESCRIPTION: Basic usage of the 'pio lib update' command for updating libraries in PlatformIO. Includes options for updating all project libraries, specific libraries, and libraries in different storage locations.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/lib/cmd_update.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio lib [STORAGE_OPTIONS] update [OPTIONS]\n\n# update all project libraries\n# (run it from a project root where is located \"platformio.ini\")\npio lib update [OPTIONS]\n\n# update project dependent library\npio lib [STORAGE_OPTIONS] update [OPTIONS] [LIBRARY...]\n\n# update library in global storage\npio lib --global update [OPTIONS] [LIBRARY...]\npio lib -g update [OPTIONS] [LIBRARY...]\n\n# update library in custom storage\npio lib --storage-dir /path/to/dir update [OPTIONS] [LIBRARY...]\npio lib -d /path/to/dir update [OPTIONS] [LIBRARY...]\n\n# [LIBRARY...] forms\npio lib [STORAGE_OPTIONS] update <id>\npio lib [STORAGE_OPTIONS] update <id>@<version>\npio lib [STORAGE_OPTIONS] update <id>@<version range>\npio lib [STORAGE_OPTIONS] update <name>\npio lib [STORAGE_OPTIONS] update <name>@<version>\npio lib [STORAGE_OPTIONS] update <name>@<version range>\n```\n\n----------------------------------------\n\nTITLE: Configuring check_src_filters in PlatformIO Configuration File\nDESCRIPTION: This example demonstrates how to use check_src_filters to selectively include and exclude files from the check process. The configuration includes a specific SPI implementation file while excluding most source files, and includes only specific test files matching a pattern.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/env/options/check/check_src_filters.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:check_src_filters]\nplatform = ...\nboard = ...\ncheck_src_filters =\n  -<src/*>\n  +<src/spi/spi.cpp>\n  -<tests/>\n  +<tests/test_embedded/*.c*>\n```\n\n----------------------------------------\n\nTITLE: Generating PlatformIO Project for Visual Studio\nDESCRIPTION: Command to generate a PlatformIO project configured for Visual Studio IDE. It creates necessary project files and configuration for the specified board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/ide/visualstudio.rst#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npio project init --ide visualstudio --board <ID>\n```\n\n----------------------------------------\n\nTITLE: Configuring boards_dir in PlatformIO INI file\nDESCRIPTION: Specifies the location of project-specific board definitions. Default is '<Project>/boards'. PlatformIO searches for boards in this directory first, followed by global and development platform directories.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/platformio/options/directory/boards_dir.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nboards_dir = <Project>/boards\n```\n\n----------------------------------------\n\nTITLE: Configuring Upstream Development Version in PlatformIO\nDESCRIPTION: Configuration example for using the latest upstream development version of the NXP i.MX RT platform directly from the GitHub repository.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/nxpimxrt.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:upstream_develop]\nplatform = https://github.com/platformio/platform-nxpimxrt.git\nboard = ...\n```\n\n----------------------------------------\n\nTITLE: Accessing PlatformIO System Commands Help\nDESCRIPTION: Commands to display help information for PlatformIO system commands. Shows how to access general system command help and specific command help.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/system/index.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio system --help\npio system COMMAND --help\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Library Package Examples\nDESCRIPTION: Examples demonstrating how to uninstall library packages with version specifications and from Git repositories.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/pkg/cmd_uninstall.rst#2025-04-10_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npio pkg uninstall -l \"bblanchon/ArduinoJson@^6.19.2\" -l \"milesburton/DallasTemperature@^3.9.1\"\npio pkg uninstall --library https://github.com/Makuna/NeoPixelBus.git\n```\n\n----------------------------------------\n\nTITLE: Configuring LDF Mode in PlatformIO INI File\nDESCRIPTION: Example configuration showing how to set the lib_ldf_mode to chain+ in a PlatformIO environment. The chain+ mode enables evaluation of C/C++ Preprocessor conditional syntax during dependency analysis.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/env/options/library/lib_ldf_mode.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\n; evaluate C/C++ Preprocessor conditional syntax\nlib_ldf_mode = chain+\n```\n\n----------------------------------------\n\nTITLE: Configuring IOT-Bus JTAG Debug Tool in platformio.ini\nDESCRIPTION: This snippet shows how to configure the IOT-Bus JTAG as the debugging tool in the project configuration file. It also demonstrates setting it as the upload protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/iot-bus-jtag.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = ...\nboard = ...\ndebug_tool = iot-bus-jtag\n\n# Optional: Set as upload protocol\nupload_protocol = iot-bus-jtag\n```\n\n----------------------------------------\n\nTITLE: Dynamic Build Flags with Git Revision\nDESCRIPTION: Example showing how to generate dynamic build flags using Python to include Git revision information\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/env/options/build/build_flags.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:git_revision_macro]\nbuild_flags = !python git_rev_macro.py\n```\n\nLANGUAGE: python\nCODE:\n```\nimport subprocess\n\nrevision = (\n    subprocess.check_output([\"git\", \"rev-parse\", \"HEAD\"])\n    .strip()\n    .decode(\"utf-8\")\n)\nprint(\"'-DGIT_REV=\\\"%s\\\"'\" % revision)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flash Frequency for ESP8266 in PlatformIO\nDESCRIPTION: Sets the flash frequency for ESP8266 using the board_build.f_flash option. This example configures it to 80MHz. Other possible values include 20MHz, 26MHz, and 40MHz (default).\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/espressif8266_extra.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\n; set frequency to 80MHz\nboard_build.f_flash = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Using PlatformIO Settings Get Command in Bash\nDESCRIPTION: Command usage for retrieving PlatformIO settings. The command can be used to list all settings or get a specific setting by providing its name.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/cmd_settings.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio settings get [NAME]\n```\n\n----------------------------------------\n\nTITLE: Customizing MS51XB9AE Board Settings in PlatformIO\nDESCRIPTION: Extended PlatformIO configuration showing how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/MS51XB9AE.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:MS51XB9AE]\nplatform = intel_mcs51\nboard = MS51XB9AE\n\n; change microcontroller\nboard_build.mcu = ms51xb9ae\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Basic Debug Server Configuration in PlatformIO\nDESCRIPTION: Example showing how to configure a basic custom debug server with multiple arguments in the project configuration file. The first line specifies the server executable path, followed by multiple argument lines.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/env/options/debug/debug_server.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:debug]\nplatform = ...\nboard = ...\ndebug_server =\n  /path/to/debugging/server\n  arg1\n  arg2\n  ...\n  argN\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Adafruit MagTag 2.9 ESP32S2\nDESCRIPTION: Basic configuration for using the Adafruit MagTag 2.9 ESP32S2 board in PlatformIO projects. This snippet sets up the essential project environment configuration with the espressif32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/adafruit_magtag29_esp32s2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_magtag29_esp32s2]\nplatform = espressif32\nboard = adafruit_magtag29_esp32s2\n```\n\n----------------------------------------\n\nTITLE: Configuring Wicked Device WildFire V3 in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the Wicked Device WildFire V3 board in the PlatformIO project configuration file. It sets the platform to atmelavr and the board to wildfirev3.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/wildfirev3.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:wildfirev3]\nplatform = atmelavr\nboard = wildfirev3\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration for ESP32C3\nDESCRIPTION: Basic PlatformIO configuration for setting up an AirM2M CORE ESP32C3 board project.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/airm2m_core_esp32c3.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:airm2m_core_esp32c3]\nplatform = espressif32\nboard = airm2m_core_esp32c3\n```\n\n----------------------------------------\n\nTITLE: Executing Travis CI Build Script\nDESCRIPTION: Runs the 'make travis-build' command to execute the build process for the Blynk library.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/ci/travis.rst#2025-04-10_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nscript:\n    - make travis-build\n```\n\n----------------------------------------\n\nTITLE: Listing Remote Agents in PlatformIO\nDESCRIPTION: Displays a list of active PlatformIO Remote Agents that were started using the user's PlatformIO account or shared by other developers. The output shows the agent's hostname, ID, and start time.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/remote/cmd_agent.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio remote agent list\n```\n\n----------------------------------------\n\nTITLE: Granting Admin Access to Team in PlatformIO\nDESCRIPTION: This example shows how to grant 'admin' access to the 'developers' team within the 'platformio' organization for a specific resource in the PlatformIO Registry.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/access/cmd_grant.rst#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n> pio access grant admin platformio:developers prn:reg:pkg:8036:platform\nAccess for resource \"prn:reg:pkg:8036:platform\" has been granted for \"platformio:developers\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Upstream Lattice iCE40 Platform in platformio.ini\nDESCRIPTION: This snippet demonstrates how to use the development version of the Lattice iCE40 platform from GitHub in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/lattice_ice40.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:upstream_develop]\nplatform = https://github.com/platformio/platform-lattice_ice40.git\nboard = ...\n```\n\n----------------------------------------\n\nTITLE: Configuring test_build_src in PlatformIO project configuration\nDESCRIPTION: This example demonstrates how to enable the test_build_src option in a PlatformIO project configuration file. When set to 'yes', this option forces the unit testing engine to build the main source code from the src directory alongside the test code.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/env/options/test/test_build_src.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = ...\ntest_build_src = yes\n```\n\n----------------------------------------\n\nTITLE: Customizing STM32F401CE Microcontroller Settings in PlatformIO\nDESCRIPTION: Advanced configuration example showing how to override default microcontroller settings such as MCU model and CPU frequency in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F401CE.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F401CE]\nplatform = ststm32\nboard = genericSTM32F401CE\n\n; change microcontroller\nboard_build.mcu = stm32f401ceu6\n\n; change MCU frequency\nboard_build.f_cpu = 84000000L\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Licenses using SPDX Expression in PlatformIO Configuration\nDESCRIPTION: Example of specifying multiple licenses using an SPDX Expression in a PlatformIO configuration file. This example demonstrates complex license logic combining MIT with a choice between LGPL-2.1-or-later and BSD-3-Clause.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/manifests/library-json/fields/license.rst#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\"license\": \"MIT AND (LGPL-2.1-or-later OR BSD-3-Clause)\"\n```\n\n----------------------------------------\n\nTITLE: PlatformIO Account Registration Command Usage\nDESCRIPTION: Shows the basic command syntax for registering a new PlatformIO account. The command accepts various options for specifying user details like username, email, password, and name.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/account/cmd_register.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio account register [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Initializing PlatformIO Project for Eclipse IDE\nDESCRIPTION: Commands to generate a new PlatformIO project configured for Eclipse IDE integration. Shows both generic command format and specific example for Arduino UNO board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/ide/eclipse.rst#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npio project init --ide eclipse --board <ID>\n\n# For example, generate project for Arduino UNO\npio project init --ide eclipse --board uno\n```\n\n----------------------------------------\n\nTITLE: Configuring Upstream Version of Freescale Kinetis Platform in INI\nDESCRIPTION: Example platformio.ini configuration for using the upstream development version of the Freescale Kinetis platform from GitHub.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/freescalekinetis.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:upstream_develop]\nplatform = https://github.com/platformio/platform-freescalekinetis.git\nboard = ...\n```\n\n----------------------------------------\n\nTITLE: Setting Debug Tool Configuration in PlatformIO.ini\nDESCRIPTION: Example configuration showing how to specify a custom debugging tool in a PlatformIO project environment. The debug_tool option accepts a string value to define which debugging tool/probe should be used for the project.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/env/options/debug/debug_tool.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:debug]\nplatform = ...\nboard = ...\ndebug_tool = custom\n```\n\n----------------------------------------\n\nTITLE: Configuring Bus Pirate as ISP Programmer Upload for ATmega AVR in PlatformIO\nDESCRIPTION: This configuration sets up PlatformIO for uploading firmware to an ATmega AVR microcontroller using a Bus Pirate as ISP programmer. It specifies the upload protocol, port, speed, and necessary flags for the avrdude tool.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/atmelavr_extra.rst#2025-04-10_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\n[env:program_via_BP]\nplatform = atmelavr\nframework = arduino\nupload_protocol = custom\nupload_port = SERIAL_PORT_HERE\nupload_speed = 115200\nupload_flags =\n    -C\n    ; use \"tool-avrdude-megaavr\" for the atmelmegaavr platform\n    ${platformio.packages_dir}/tool-avrdude/avrdude.conf\n    -p\n    $BOARD_MCU\n    -P\n    $UPLOAD_PORT\n    -b\n    $UPLOAD_SPEED\n    -c\n    buspirate\nupload_command = avrdude $UPLOAD_FLAGS -U flash:w:$SOURCE:i\n```\n\n----------------------------------------\n\nTITLE: Listing All Supported Frameworks in PlatformIO\nDESCRIPTION: An example command showing how to list all frameworks supported by PlatformIO. The output displays framework names, descriptions, and homepage URLs.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/platforms/cmd_frameworks.rst#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> pio platform frameworks\n```\n\n----------------------------------------\n\nTITLE: Development Board Specifications Table in RST Format\nDESCRIPTION: RST-formatted table listing development boards and their technical specifications including processor type, clock speed, memory sizes, and platform information.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/cmsis-dap.rst#2025-04-10_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n* - :ref:`board_raspberrypi_pico`\n  - :ref:`platform_raspberrypi`\n  - External\n  - RP2040\n  - 133MHz\n  - 2MB\n  - 264KB\n```\n\n----------------------------------------\n\nTITLE: Basic Clang-Tidy Configuration in PlatformIO\nDESCRIPTION: Basic configuration to enable Clang-Tidy tool in PlatformIO's project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/advanced/static-code-analysis/tools/clang-tidy.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = ...\nboard = ...\ncheck_tool = clangtidy\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO Environment with Custom Hardware IDs\nDESCRIPTION: Basic platformio.ini configuration that sets up an Arduino Uno environment and includes a custom pre-script for hardware ID modification.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/scripting/examples/override_board_configuration.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:uno]\nplatform = atmelavr\nboard = uno\nframework = arduino\nextra_scripts = pre:custon_hwids.py\n```\n\n----------------------------------------\n\nTITLE: Configuring DiamexISP Programmer Upload for ATmega AVR in PlatformIO\nDESCRIPTION: This configuration sets up PlatformIO for uploading firmware to an ATmega AVR microcontroller using a DiamexISP programmer. It specifies the upload protocol, port, speed, and necessary flags for the avrdude tool.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/atmelavr_extra.rst#2025-04-10_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[env:program_via_DiamexISP]\nplatform = atmelavr\nframework = arduino\nupload_protocol = avrispv2\nupload_port = SERIAL_PORT_HERE\nupload_speed = 19200\nupload_flags =\n    -C\n    ; use \"tool-avrdude-megaavr\" for the atmelmegaavr platform\n    ${platformio.packages_dir}/tool-avrdude/avrdude.conf\n    -p\n    $BOARD_MCU\n    -P\n    $UPLOAD_PORT\n    -b\n    $UPLOAD_SPEED\n    -c\n    stk500v2\nupload_command = avrdude $UPLOAD_FLAGS -U flash:w:$SOURCE:i\n```\n\n----------------------------------------\n\nTITLE: Using the PlatformIO Organization Destroy Command in Bash\nDESCRIPTION: Command syntax for removing a PlatformIO organization and all its associated teams. The command requires the organization name as a parameter and permanently deletes the specified organization.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/org/cmd_destroy.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio org destroy ORGNAME\n```\n\n----------------------------------------\n\nTITLE: Uninstalling a Specific Library Example\nDESCRIPTION: An example of uninstalling the AsyncMqttClient library from the global storage using the PlatformIO CLI.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/lib/cmd_uninstall.rst#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> pio lib -g uninstall AsyncMqttClient\n\nLibrary Storage: /storage/dir/...\nUninstalling AsyncMqttClient @ 0.2.0:   [OK]\n```\n\n----------------------------------------\n\nTITLE: Granting Maintainer Access to User in PlatformIO\nDESCRIPTION: This example demonstrates how to grant 'maintainer' access to a user named 'bob' for a specific resource in the PlatformIO Registry.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/access/cmd_grant.rst#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> pio access grant maintainer bob prn:reg:pkg:8036:platform\nAccess for resource \"prn:reg:pkg:8036:platform\" has been granted for \"bob\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Black Magic Probe in PlatformIO project\nDESCRIPTION: Basic configuration for using Black Magic Probe as a debugging tool in PlatformIO's project configuration file. Defines the debugging tool and port setup.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/blackmagic.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = ...\nboard = ...\ndebug_tool = blackmagic\ndebug_port = <CONFIGURE GDB PORT>\n\n;\n; Debug Port Examples\n;\n\n; Linux\ndebug_port = /dev/ttyACM0\n\n; Windows for COM1-COM9\ndebug_port = COM3\n; Windows for COM10-XXX\ndebug_port = \\\\.\\COM13\n\n; macOS\ndebug_port = /dev/cu.usbmodemE2C0C4C6\n```\n\n----------------------------------------\n\nTITLE: STM32 Board Specifications Table\nDESCRIPTION: Reference table containing technical specifications for STM32 development boards, including board names, microcontroller models, clock speeds, and memory configurations.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/frameworks/cmsis.rst#2025-04-10_snippet_2\n\nLANGUAGE: markup\nCODE:\n```\n* - :ref:`board_ststm32_devebox_h743vitx`\n      - :ref:`platform_ststm32`\n      - STM32H743VIT6\n      - 480MHz\n      - 2MB\n      - 512KB\n```\n\n----------------------------------------\n\nTITLE: Configuring Upstream Teensy Platform Version\nDESCRIPTION: Configuration for using the latest upstream development version of the Teensy platform from GitHub.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/teensy.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:upstream_develop]\nplatform = https://github.com/platformio/platform-teensy.git\nboard = ...\n```\n\n----------------------------------------\n\nTITLE: Displaying PlatformIO Access Help Commands\nDESCRIPTION: Commands to display help information for the PlatformIO access command and its subcommands. These commands show all available options and usage instructions.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/access/index.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio access --help\npio access COMMAND --help\n```\n\n----------------------------------------\n\nTITLE: Listing Resources by Owner - PlatformIO CLI\nDESCRIPTION: Example demonstrating how to list accessible resources for a specific owner (platformio), showing tool-related resources and their access levels.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/access/cmd_list.rst#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n> pio access list platformio\n\n...\n\ntool-scons\n----------\nURN:              prn:reg:pkg:8192:tool\nOwner:            platformio\nAccess level(s):  Admin\n\ntool-simavr\n-----------\nURN:              prn:reg:pkg:8193:tool\nOwner:            platformio\nAccess level(s):  Admin\n\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Olimex ARM-USB-OCD-H as Debug Tool in PlatformIO\nDESCRIPTION: Basic configuration to enable the Olimex ARM-USB-OCD-H debug probe in the PlatformIO project configuration file. This sets up the debugging tool for use with compatible boards.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/olimex-arm-usb-ocd-h.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = ...\nboard = ...\ndebug_tool = olimex-arm-usb-ocd-h\n```\n\n----------------------------------------\n\nTITLE: Enabling Exceptions for ESP8266 Arduino Framework\nDESCRIPTION: Example of enabling C++ exceptions in ESP8266 Arduino framework by setting the PIO_FRAMEWORK_ARDUINO_ENABLE_EXCEPTIONS flag. This adds the -fexceptions flag and links against the stdc++-exc library.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/espressif8266_extra.rst#2025-04-10_snippet_13\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\n...\n\n; Enable exceptions\nbuild_flags = -D PIO_FRAMEWORK_ARDUINO_ENABLE_EXCEPTIONS\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO Project with Custom Source Directory\nDESCRIPTION: Example configuration for using the default ESP-IDF main folder structure in platformio.ini\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/frameworks/espidf_extra.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[platformio]\nsrc_dir = main\n\n[env:esp32dev]\nplatform = platformio/espressif32\nframework = espidf\nboard = esp32dev\n```\n\n----------------------------------------\n\nTITLE: Basic Library Stats Command Usage\nDESCRIPTION: Shows how to use the basic pio lib stats command to view library registry statistics.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/lib/cmd_stats.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio lib stats\n```\n\n----------------------------------------\n\nTITLE: Installing Required Libraries for PlatformIO\nDESCRIPTION: Installs a list of libraries from the PlatformIO Library Registry and GitHub repositories using the pio lib command.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/ci/travis.rst#2025-04-10_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- pio lib -g install 17 28 91 418 419 420 65 44 19 299 259 177 https://github.com/vshymanskyy/BlynkESP8266.git https://github.com/cmaglie/FlashStorage.git https://github.com/michael71/Timer5.git\n```\n\n----------------------------------------\n\nTITLE: Defining 'unflags' in PlatformIO Configuration (INI)\nDESCRIPTION: The 'unflags' option is used to remove base or initial flags set by the development platform. It can be specified as either a string or an array in the project configuration file. This option allows for fine-tuning of compiler flags by removing unwanted default flags.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/manifests/library-json/fields/build/unflags.rst#2025-04-10_snippet_0\n\nLANGUAGE: INI\nCODE:\n```\nunflags = -flag1 -flag2\n; or\nunflags =\n    -flag1\n    -flag2\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Shows how to configure the upload protocol for the Franzininho WiFi MSC board using the esptool protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/franzininho_wifi_msc_esp32s2.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:franzininho_wifi_msc_esp32s2]\nplatform = espressif32\nboard = franzininho_wifi_msc_esp32s2\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: PlatformIO Library Links List - Core Libraries\nDESCRIPTION: A formatted list of popular Arduino/ESP8266 libraries with their PlatformIO repository URLs, including ESPAsyncWebServer, Adafruit GFX, and other core libraries.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/lib/cmd_stats.rst#2025-04-10_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nESPAsyncWebServer        https://platformio.org/lib/show/306/ESPAsyncWebServer\nAdafruit GFX Library     https://platformio.org/lib/show/13/Adafruit%20GFX%20Library\nI2Cdevlib-Core           https://platformio.org/lib/show/11/I2Cdevlib-Core\nTimeAlarms               https://platformio.org/lib/show/68/TimeAlarms\nPubSubClient             https://platformio.org/lib/show/89/PubSubClient\nTimer                    https://platformio.org/lib/show/75/Timer\nesp8266_mdns             https://platformio.org/lib/show/1091/esp8266_mdns\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Sanguino ATmega644 Settings in PlatformIO INI\nDESCRIPTION: This snippet demonstrates how to override default settings for the Sanguino ATmega644 board in a PlatformIO project configuration. It shows how to change the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/sanguino_atmega644.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:sanguino_atmega644]\nplatform = atmelavr\nboard = sanguino_atmega644\n\n; change microcontroller\nboard_build.mcu = atmega644\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Init Commands for PlatformIO\nDESCRIPTION: Example configuration showing how to set custom debug initialization commands for GDB in PlatformIO. Uses special variables like $DEBUG_PORT, $INIT_BREAK, and $LOAD_CMDS to configure the debugger behavior.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/env/options/debug/debug_init_cmds.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:debug]\nplatform = ...\nboard = ...\ndebug_init_cmds =\n  target extended-remote $DEBUG_PORT\n  $INIT_BREAK\n  monitor reset halt\n  $LOAD_CMDS\n  monitor init\n  monitor reset halt\n```\n\n----------------------------------------\n\nTITLE: Implementing Bluetooth Beacon in C for Zephyr on Nordic nRF52-DK\nDESCRIPTION: This code snippet implements a Bluetooth beacon using the Zephyr framework. It sets up advertisement data based on the Eddystone specification and initializes the Bluetooth subsystem.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/tutorials/nordicnrf52/zephyr_debugging_unit_testing_inspect.rst#2025-04-10_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#include <zephyr/types.h>\n#include <stddef.h>\n#include <sys/printk.h>\n#include <sys/util.h>\n\n#include <bluetooth/bluetooth.h>\n#include <bluetooth/hci.h>\n\n#define DEVICE_NAME CONFIG_BT_DEVICE_NAME\n#define DEVICE_NAME_LEN (sizeof(DEVICE_NAME) - 1)\n\nstatic const struct bt_data ad[] = {\n    BT_DATA_BYTES(BT_DATA_FLAGS, BT_LE_AD_NO_BREDR),\n    BT_DATA_BYTES(BT_DATA_UUID16_ALL, 0xaa, 0xfe),\n    BT_DATA_BYTES(BT_DATA_SVC_DATA16,\n                  0xaa, 0xfe,\n                  0x10, // Eddystone-URL frame type\n                  0x00, // Calibrated Tx power at 0m\n                  0x00, // URL Scheme Prefix http://www.\n                  'z', 'e', 'p', 'h', 'y', 'r',\n                  'p', 'r', 'o', 'j', 'e', 'c', 't',\n                  0x08) // .org\n};\n\nstatic const struct bt_data sd[] = {\n    BT_DATA(BT_DATA_NAME_COMPLETE, DEVICE_NAME, DEVICE_NAME_LEN),\n};\n\nstatic void bt_ready(int err)\n{\n  if (err)\n  {\n    printk(\"Bluetooth init failed (err %d)\\n\", err);\n    return;\n  }\n\n  printk(\"Bluetooth initialized\\n\");\n\n  err = bt_le_adv_start(BT_LE_ADV_NCONN, ad, ARRAY_SIZE(ad),\n                        sd, ARRAY_SIZE(sd));\n  if (err)\n  {\n    printk(\"Advertising failed to start (err %d)\\n\", err);\n    return;\n  }\n\n  printk(\"Beacon started\\n\");\n}\n\nvoid main(void)\n{\n  int err;\n\n  printk(\"Starting Beacon Demo\\n\");\n\n  err = bt_enable(bt_ready);\n  if (err)\n  {\n    printk(\"Bluetooth init failed (err %d)\\n\", err);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_l552ze_q.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_l552ze_q]\nplatform = ststm32\nboard = nucleo_l552ze_q\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Library Installation via PlatformIO Library Manager\nDESCRIPTION: CircleCI configuration snippet for installing dependent libraries using PlatformIO's Library Manager.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/ci/circleci.rst#2025-04-10_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- run:\n    name: Install library\n    command: pio lib -g install 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Upstream Native Platform in PlatformIO\nDESCRIPTION: Configuration for using the latest upstream development version of the Native platform directly from GitHub repository.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/native.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:upstream_develop]\nplatform = https://github.com/platformio/platform-native.git\n```\n\n----------------------------------------\n\nTITLE: Configuring the monitor_dtr option in platformio.ini\nDESCRIPTION: The monitor_dtr configuration option sets the initial DTR (Data Terminal Ready) line state for the serial monitor. It accepts a value of either 0 (off) or 1 (on) and cannot be specified multiple times.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/env/options/monitor/monitor_dtr.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nmonitor_dtr = 0  ; or 1\n```\n\n----------------------------------------\n\nTITLE: Renode Test Execution Command\nDESCRIPTION: Example command for running tests with Renode simulator, showing how to execute tests without uploading firmware to physical hardware.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/advanced/unit-testing/simulators/renode.rst#2025-04-10_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n> pio test --without-uploading\n```\n\n----------------------------------------\n\nTITLE: Specifying Multiple Header Files in PlatformIO Library Manifest\nDESCRIPTION: This example demonstrates how to specify multiple header files in the 'headers' field of a PlatformIO library manifest. It allows the listed headers to be included in project source files using the #include <...> directive.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/manifests/library-json/fields/headers.rst#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\"headers\": [\"FooCore.h\", \"FooFeature.h\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Cppcheck as the default check tool in PlatformIO\nDESCRIPTION: Basic configuration for setting Cppcheck as the check tool in PlatformIO's project configuration file (platformio.ini). This snippet shows how to enable all additional checks with the check_flags option.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/advanced/static-code-analysis/tools/cppcheck.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = ...\nboard = ...\ncheck_tool = cppcheck\ncheck_flags = --enable=all\n```\n\n----------------------------------------\n\nTITLE: Configuring Stable Teensy Platform Version\nDESCRIPTION: Configuration options for using stable releases of the Teensy development platform in PlatformIO projects.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/teensy.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n; Latest stable version, NOT recommended\n; Pin the version as shown below\n[env:latest_stable]\nplatform = teensy\nboard = ...\n\n; Specific version\n[env:custom_stable]\nplatform = teensy@x.y.z\nboard = ...\n```\n\n----------------------------------------\n\nTITLE: Overriding Bootloader Flags for Atmel AVR in PlatformIO\nDESCRIPTION: This Python script shows how to override bootloader flags for an Atmel AVR microcontroller in PlatformIO. It replaces the BOOTFLAGS environment variable with custom flash and lock bit settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/atmelavr_extra.rst#2025-04-10_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nImport(\"env\")\n\nbootloader_path = \"/path/to/custom/bootloader.hex\"\n\nenv.Replace(\n    BOOTFLAGS=[\n        \"-Uflash:w:%s:i\" % bootloader_path,\n        \"-Ulock:w:0xFF:m\"\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Nordic nRF52 Platform Versions in PlatformIO.ini\nDESCRIPTION: Example configurations for using different versions of the Nordic nRF52 platform in PlatformIO. Shows how to specify the latest stable version or pin to a specific version for better reproducibility.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/nordicnrf52.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n; Latest stable version, NOT recommended\n; Pin the version as shown below\n[env:latest_stable]\nplatform = nordicnrf52\nboard = ...\n\n; Specific version\n[env:custom_stable]\nplatform = nordicnrf52@x.y.z\nboard = ...\n```\n\n----------------------------------------\n\nTITLE: Board Specifications List in RST Format\nDESCRIPTION: A ReStructuredText (RST) formatted table listing development boards and their technical specifications including platform, CPU type, clock speed, flash size and RAM.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/olimex-jtag-tiny.rst#2025-04-10_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n* - :ref:`board_espressif32_arduino_nano_esp32`\n      - :ref:`platform_espressif32`\n      - External\n      - ESP32S3\n      - 240MHz\n      - 16MB\n      - 320KB\n```\n\n----------------------------------------\n\nTITLE: Enabling Custom DSP Library in STM32Cube PlatformIO Project\nDESCRIPTION: This snippet demonstrates how to enable the use of a custom DSP library in an STM32Cube project. It sets the 'custom_dsp_library' option to 'yes' for a Nucleo F401RE board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/frameworks/stm32cube_extra.rst#2025-04-10_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f401re]\nplatform = ststm32\nframework = stm32cube\nboard = nucleo_f401re\nboard_build.stm32cube.custom_dsp_library = yes\n```\n\n----------------------------------------\n\nTITLE: Configuring FTDI Chip for Firmware Upload in platformio.ini\nDESCRIPTION: This snippet demonstrates how to configure FTDI Chip for both debugging and firmware uploading. It sets the debug_tool to 'ftdi' and upload_protocol to 'ftdi'.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/ftdi.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = ...\nboard = ...\ndebug_tool = ftdi\nupload_protocol = ftdi\n```\n\n----------------------------------------\n\nTITLE: Executing PlatformIO Account Password Change Command\nDESCRIPTION: This command is used to initiate the process of changing the password for a PlatformIO account. When executed, it will likely prompt the user for their current password and the new password they wish to set.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/account/cmd_password.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio account password\n```\n\n----------------------------------------\n\nTITLE: PlatformIO Check Source Filter Example\nDESCRIPTION: Example showing how to use source filters to include specific directories for analysis while excluding others using GLOB patterns.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/cmd_check.rst#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npio check --src-filters=\"+<src/app/>\" --src-filters=\"-<src/app/uart/>\"\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration for STM32F303CB\nDESCRIPTION: PlatformIO configuration showing how to specify an upload protocol for STM32F303CB. This example sets the upload protocol to ST-Link, which is also the default protocol for this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F303CB.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F303CB]\nplatform = ststm32\nboard = genericSTM32F303CB\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Defining SEGGER IP Switch Board Specifications in reStructuredText\nDESCRIPTION: This snippet defines the specifications for the SEGGER IP Switch board using a reStructuredText list table. It includes details such as debug interface, MCU model, clock frequency, flash memory, and RAM.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/freescalekinetis.rst#2025-04-10_snippet_3\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. list-table::\n    :header-rows:  1\n\n    * - Name\n      - Debug\n      - MCU\n      - Frequency\n      - Flash\n      - RAM\n    * - :ref:`board_freescalekinetis_segger_ip_switch`\n      - External\n      - MK66FN2M0VMD18\n      - 180MHz\n      - 2MB\n      - 256KB\n```\n\n----------------------------------------\n\nTITLE: Configuring Upstream Nordic nRF51 Platform\nDESCRIPTION: Configuration for using the latest development version of Nordic nRF51 platform directly from GitHub repository.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/nordicnrf51.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:upstream_develop]\nplatform = https://github.com/platformio/platform-nordicnrf51.git\nboard = ...\n```\n\n----------------------------------------\n\nTITLE: Revoking Access from a Team\nDESCRIPTION: Example showing how to revoke access from the 'developers' team in the 'platformio' organization for a specific package resource.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/access/cmd_revoke.rst#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n> pio access revoke platformio:developers prn:reg:pkg:8036:platform\nAccess for resource \"prn:reg:pkg:8036:platform\" has been revoked for \"platformio:developers\"\n```\n\n----------------------------------------\n\nTITLE: Destroying Teams in PlatformIO CLI\nDESCRIPTION: Command syntax for destroying a team within a PlatformIO organization. Requires organization name and team name as parameters.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/team/cmd_destroy.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio team destroy ORGNAME:TEAMNAME\n```\n\n----------------------------------------\n\nTITLE: Appending Bootloader Uploader Flags for Atmel AVR in PlatformIO\nDESCRIPTION: This Python script demonstrates how to append specific bootloader uploader flags for an Atmel AVR microcontroller in PlatformIO. It adds erase chip and port specification flags to the BOOTUPLOADERFLAGS environment variable.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/atmelavr_extra.rst#2025-04-10_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nImport(\"env\")\n\nenv.Append(\n    BOOTUPLOADERFLAGS=[\n        \"-e\", \"-p\", \"/dev/cu.usbserial-1414302\"\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Using PlatformIO Package Pack Command\nDESCRIPTION: Command syntax for creating a package tarball using PlatformIO's package manager. Allows specifying source directory or archive file with optional output path configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/pkg/cmd_pack.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio pkg pack [<source directory, tar.gz or zip>] [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Customizing Flash Size with LD Script for ESP8266 in PlatformIO\nDESCRIPTION: Overrides the default linker script to define how flash memory is split using the board_build.ldscript option. This allows for customizing the flash layout for different memory requirements.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/espressif8266_extra.rst#2025-04-10_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nboard_build.ldscript = eagle.flash.4m.ld\n```\n\n----------------------------------------\n\nTITLE: Overriding Debug Configuration in PlatformIO\nDESCRIPTION: Debug configuration file (extra_debug.ini) that demonstrates how to override base configuration values and customize build flags.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/platformio/options/generic/extra_configs.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n# Override base \"common.debug_flags\"\n[common]\ndebug_flags = -D DEBUG=1\n\n[env:lolin32]\nbuild_flags = -Og\n```\n\n----------------------------------------\n\nTITLE: Arduino Sample Code\nDESCRIPTION: Example Arduino code demonstrating serial communication with counter increment\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/ide/cloud9.rst#2025-04-10_snippet_2\n\nLANGUAGE: c++\nCODE:\n```\n#include <Arduino.h>\n\nint i = 0;\n\nvoid setup() {\n    Serial.begin(9600);\n    Serial.println(\"Hello Cloud9!\");\n}\n\nvoid loop() {\n    /*  serial echo */\n    while (Serial.available()) {\n        Serial.write(Serial.read());\n    }\n\n    i++;\n    Serial.println(i);\n    delay(100);\n}\n```\n\n----------------------------------------\n\nTITLE: Checking PlatformIO Core Installation Status with Installer Script\nDESCRIPTION: Command for verifying if PlatformIO Core is installed and ready for use. Returns exit code 0 if installed, non-zero otherwise.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/installation/integration.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython get-platformio.py check core\n```\n\n----------------------------------------\n\nTITLE: Overriding Default STC12C5A16S2 Board Settings in PlatformIO\nDESCRIPTION: This snippet demonstrates how to override the default board settings for Generic STC12C5A16S2 in a PlatformIO project by specifying custom microcontroller and frequency values.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC12C5A16S2.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC12C5A16S2]\nplatform = intel_mcs51\nboard = STC12C5A16S2\n\n; change microcontroller\nboard_build.mcu = stc12c5a16s2\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Using the 'pio org update' Command in PlatformIO CLI\nDESCRIPTION: This command is used to update an organization's details in PlatformIO. It allows changing the organization name, email, and display name. The command requires the current organization name and accepts optional parameters for the new details.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/org/cmd_update.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio org update [OPTIONS] ORGNAME\n```\n\n----------------------------------------\n\nTITLE: Searching for Texas Instruments Development Platforms\nDESCRIPTION: This example demonstrates how to search for Texas Instruments (TI) development platforms using the 'pio platform search' command with the query 'texas'.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/platforms/cmd_search.rst#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n> pio platform search texas\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic BlackPill F103C8 Environment in PlatformIO\nDESCRIPTION: Basic configuration for setting up a PlatformIO environment for the BlackPill F103C8 (128k) board. This snippet defines the platform and board ID to use for the project.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/blackpill_f103c8_128.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:blackpill_f103c8_128]\nplatform = ststm32\nboard = blackpill_f103c8_128\n```\n\n----------------------------------------\n\nTITLE: Customizing SparkFun ESP32 Thing Plus C Board Settings\nDESCRIPTION: How to override default board settings such as microcontroller type and CPU frequency in PlatformIO. This allows customizing hardware configuration for specific project needs.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/sparkfun_esp32s2_thing_plus_c.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:sparkfun_esp32s2_thing_plus_c]\nplatform = espressif32\nboard = sparkfun_esp32s2_thing_plus_c\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Initializing PlatformIO Project in Codeanywhere\nDESCRIPTION: Command to initialize a new PlatformIO project specifying a target board. The example shows initializing a project for Arduino Uno.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/ide/codeanywhere.rst#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npio project init --board <ID>\n\n# initialize project for Arduino Uno\npio project init --board uno\n```\n\n----------------------------------------\n\nTITLE: Using PlatformIO Account Login Command in Bash\nDESCRIPTION: This command is used to log in to a PlatformIO account. It can be run with optional username and password parameters, or these can be entered later in a Login Wizard. The command also supports using the PLATFORMIO_AUTH_TOKEN environment variable for CI systems and remote operations.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/account/cmd_login.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio account login [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Build Flags in GitHub Actions for PlatformIO\nDESCRIPTION: This YAML snippet demonstrates how to set custom build flags for a PlatformIO CI build using the PLATFORMIO_BUILD_FLAGS environment variable in a GitHub Actions workflow.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/ci/github-actions.rst#2025-04-10_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Run PlatformIO\n  run: pio ci path/to/test/file.c --board=<ID_1> --board=<ID_2> --board=<ID_N>\n  env:\n    PLATFORMIO_BUILD_FLAGS: -D SPECIFIC_MACRO -I/extra/inc\n```\n\n----------------------------------------\n\nTITLE: Viewing PlatformIO Installer Script Help\nDESCRIPTION: Command to display help information for the PlatformIO Core Installer Script, showing available arguments and options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/installation/integration.rst#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython get-platformio.py --help\n```\n\n----------------------------------------\n\nTITLE: Specifying Single Header File in PlatformIO Library Manifest\nDESCRIPTION: This example shows how to specify a single header file in the 'headers' field of a PlatformIO library manifest. It allows the specified header to be included in project source files using the #include <...> directive.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/manifests/library-json/fields/headers.rst#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"headers\": \"MyLibrary.h\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Protocol for STM32F103C8 in PlatformIO\nDESCRIPTION: Setting a specific upload protocol for STM32F103C8 board. This example shows how to set the default stlink protocol explicitly.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103C8.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103C8]\nplatform = ststm32\nboard = genericSTM32F103C8\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Setting libArchive in library.json\nDESCRIPTION: Example showing libArchive configuration in library.json manifest. When set to true (default), the library is compiled into a static archive (.a file). When false, object files are linked directly, which can be useful for overriding weak symbols.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/manifests/library-json/fields/build/libarchive.rst#2025-04-10_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"libArchive\": true\n```\n\nLANGUAGE: json\nCODE:\n```\n\"libArchive\": false\n```\n\n----------------------------------------\n\nTITLE: Configuring Stable Version of CHIPS Alliance Platform in platformio.ini\nDESCRIPTION: Configuration examples for using stable releases of the CHIPS Alliance development platform in PlatformIO projects. Shows how to specify the latest stable version or pin to a specific version.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/chipsalliance.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n; Latest stable version, NOT recommended\n; Pin the version as shown below\n[env:latest_stable]\nplatform = chipsalliance\nboard = ...\n\n; Specific version\n[env:custom_stable]\nplatform = chipsalliance@x.y.z\nboard = ...\n```\n\n----------------------------------------\n\nTITLE: Configuring MSP Debug Tool in PlatformIO\nDESCRIPTION: Basic configuration for setting up MSP Debug as the debugging tool in the PlatformIO project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/mspdebug.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = ...\nboard = ...\ndebug_tool = mspdebug\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Platform Packages Examples\nDESCRIPTION: Examples showing how to uninstall specific platform packages with version constraints and from Git repositories.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/pkg/cmd_uninstall.rst#2025-04-10_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npio pkg uninstall -p \"aceinna/aceinna_imu@^1.3.8\" -p \"platformio/atmelavr\"\npio pkg uninstall --platform \"https://github.com/platformio/platform-sifive.git\"\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Arduino MKR WAN 1300\nDESCRIPTION: PlatformIO configuration demonstrating how to change the upload protocol for Arduino MKR WAN 1300. This example sets the protocol to sam-ba, which is also the default.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/mkrwan1300.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:mkrwan1300]\nplatform = atmelsam\nboard = mkrwan1300\n\nupload_protocol = sam-ba\n```\n\n----------------------------------------\n\nTITLE: Customizing AVR32DA48 Configuration in PlatformIO\nDESCRIPTION: Advanced configuration for the AVR32DA48 board with custom microcontroller and frequency settings. This example demonstrates how to override default board settings such as the microcontroller model and clock frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/AVR32DA48.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:AVR32DA48]\nplatform = atmelmegaavr\nboard = AVR32DA48\n\n; change microcontroller\nboard_build.mcu = avr32da48\n\n; change MCU frequency\nboard_build.f_cpu = 24000000L\n```\n\n----------------------------------------\n\nTITLE: Platform Manifest Configuration in JSON\nDESCRIPTION: Example platform.json manifest file that defines platform metadata, dependencies, frameworks and required packages. Contains configuration for a fictitious 'myplatform' development platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/creating_platform.rst#2025-04-10_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"myplatform\",\n  \"title\": \"My Platform\",\n  \"description\": \"My custom development platform\",\n  \"homepage\": \"https://mycompany.com\",\n  \"license\": \"Apache-2.0\",\n  \"keywords\": [\"keyword_1\", \"keyword_N\"],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/platformio/platform-myplatform.git\"\n  },\n  \"version\": \"0.0.0\",\n  \"frameworks\": {\n    \"%FRAMEWORK_NAME_1%\": {\n      \"package\": \"framework-%FRAMEWORK_NAME_1%\",\n      \"script\": \"builder/frameworks/%FRAMEWORK_NAME_1%.py\"\n    },\n    \"%FRAMEWORK_NAME_N%\": {\n      \"package\": \"framework-%FRAMEWORK_NAME_N%\",\n      \"script\": \"builder/frameworks/%FRAMEWORK_NAME_N%.py\"\n    }\n  },\n  \"packages\": {\n    \"toolchain-gccarmnoneeabi\": {\n      \"type\": \"toolchain\",\n      \"owner\": \"platformio\",\n      \"version\": \">=1.40803.0,<1.40805.0\"\n    },\n    \"framework-%FRAMEWORK_NAME_1%\": {\n      \"type\": \"framework\",\n      \"optional\": true,\n      \"version\": \"~1.10607.0\"\n    },\n    \"framework-%FRAMEWORK_NAME_N%\": {\n      \"type\": \"framework\",\n      \"optional\": true,\n      \"version\": \"~1.117.0\"\n    },\n    \"tool-direct-vcs-url\": {\n      \"type\": \"uploader\",\n      \"optional\": true,\n      \"version\": \"https://github.com/user/repo.git\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Stable Linux ARM Platform Versions in PlatformIO\nDESCRIPTION: INI configuration for selecting stable versions of the Linux ARM platform in PlatformIO. Shows how to use the latest stable version or pin to a specific version.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/linux_arm.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n; Latest stable version, NOT recommended\n; Pin the version as shown below\n[env:latest_stable]\nplatform = linux_arm\n\n; Specific version\n[env:custom_stable]\nplatform = linux_arm@x.y.z\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic PlatformIO Environment for BlackPill F401CE\nDESCRIPTION: Basic PlatformIO configuration for the BlackPill F401CE board. This sets up the environment with the ststm32 platform and specifies the board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/blackpill_f401ce.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:blackpill_f401ce]\nplatform = ststm32\nboard = blackpill_f401ce\n```\n\n----------------------------------------\n\nTITLE: Searching for 1-Wire libraries using pio lib search\nDESCRIPTION: Example of using the 'pio lib search' command to find libraries related to 1-Wire protocol. This demonstrates how to use a specific search query.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/lib/cmd_search.rst#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npio lib search \"1-wire\"\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for DevEBox H750VBTX\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the board. This snippet sets the upload protocol to stlink.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/devebox_h750vbtx.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:devebox_h750vbtx]\nplatform = ststm32\nboard = devebox_h750vbtx\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Authors in PlatformIO Library Manifest (JavaScript)\nDESCRIPTION: This snippet shows how to specify multiple authors' contact information in the library.json manifest. It uses an array of objects, each containing author details. The example also demonstrates how to mark an author as a maintainer.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/manifests/library-json/fields/authors.rst#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\"authors\":\n[\n    {\n        \"name\": \"John Smith\",\n        \"email\": \"me@john-smith.com\",\n        \"url\": \"https://www.john-smith/contact\"\n    },\n    {\n        \"name\": \"Andrew Smith\",\n        \"email\": \"me@andrew-smith.com\",\n        \"url\": \"https://www.andrew-smith/contact\",\n        \"maintainer\": true\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Using PlatformIO Platform Search Command\nDESCRIPTION: This snippet demonstrates the basic usage of the 'pio platform search' command, which is used to search for development platforms in PlatformIO. The command can be followed by a query and optional flags.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/platforms/cmd_search.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio platform search QUERY [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Capturing Device Monitor Output to a File\nDESCRIPTION: Command example showing how to use the log2file filter to save the output of the device monitor to a log file in the project's logs directory.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/device/cmd_monitor.rst#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n> pio device monitor -f default -f log2file\n```\n\n----------------------------------------\n\nTITLE: Using PlatformIO Library Management Commands in Bash\nDESCRIPTION: Basic usage examples of the 'pio lib' command in PlatformIO. Shows how to access help information for the main command and its subcommands.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/lib/index.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# To print all available commands and options use\npio lib --help\npio lib COMMAND --help\n```\n\n----------------------------------------\n\nTITLE: Unix Device List Example Output\nDESCRIPTION: Example output of the device list command on Unix-based systems, showing connected USB-to-UART devices\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/device/cmd_list.rst#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> pio device list\n/dev/cu.SLAB_USBtoUART\n----------\nHardware ID: USB VID:PID=10c4:ea60 SNR=0001\nDescription: CP2102 USB to UART Bridge Controller\n\n/dev/cu.uart-1CFF4676258F4543\n----------\nHardware ID: USB VID:PID=451:f432 SNR=1CFF4676258F4543\nDescription: Texas Instruments MSP-FET430UIF\n```\n\n----------------------------------------\n\nTITLE: Configuring Upstream STM32 Platform in PlatformIO INI File\nDESCRIPTION: This snippet demonstrates how to configure an environment to use the upstream development version of the STM32 platform from GitHub in a PlatformIO project's ini file. It specifies the platform URL and a placeholder for the board selection.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/ststm32.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:upstream_develop]\nplatform = https://github.com/platformio/platform-ststm32.git\nboard = ...\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration for ST Nucleo F413ZH\nDESCRIPTION: Basic PlatformIO configuration for the ST Nucleo F413ZH board using the STM32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f413zh.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f413zh]\nplatform = ststm32\nboard = nucleo_f413zh\n```\n\n----------------------------------------\n\nTITLE: Configuring Upstream Development Version of Windows x86 Platform in PlatformIO\nDESCRIPTION: Demonstrates how to use the latest development version of Windows x86 platform directly from GitHub repository in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/windows_x86.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:upstream_develop]\nplatform = https://github.com/platformio/platform-windows_x86.git\n```\n\n----------------------------------------\n\nTITLE: Configuring Upstream NXP LPC Platform in PlatformIO\nDESCRIPTION: Configuration example for using the development version of the NXP LPC platform directly from GitHub repository in platformio.ini.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/nxplpc.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:upstream_develop]\nplatform = https://github.com/platformio/platform-nxplpc.git\nboard = ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Renode as Debug Tool in PlatformIO INI\nDESCRIPTION: This snippet shows how to set up Renode as the debugging tool in a PlatformIO project configuration file. It specifies the debug_tool option in the project environment.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/renode_extra.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = ...\nboard = ...\ndebug_tool = renode\n```\n\n----------------------------------------\n\nTITLE: Running Native Programs with PlatformIO\nDESCRIPTION: Examples showing how to execute native programs using PlatformIO's CLI. Demonstrates the basic execution command and how to pass additional arguments to the program using both long and short format options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/native_extra.rst#2025-04-10_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n> pio run -t exec\n\n# extra args\n> pio run -t exec --program-arg \"arg1\" --program-arg=\"--option1=value1\"\n\n# or short format\n> pio run -t exec -a \"arg1\" -a \"--option1=value1\"\n```\n\n----------------------------------------\n\nTITLE: Setting Debug Level for ESP8266 in PlatformIO\nDESCRIPTION: Configures debug level by enabling specific debug macros. This comprehensive example shows various debug flag combinations for different subsystems.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/espressif8266_extra.rst#2025-04-10_snippet_10\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = ...\nboard = ...\nframework = arduino\n\n;;;;; Possible options ;;;;;;\n\n; SSL\nbuild_flags = -DDEBUG_ESP_SSL\n\n; TLS_MEM\nbuild_flags = -DDEBUG_ESP_TLS_MEM\n\n; HTTP_CLIENT\nbuild_flags = -DDEBUG_ESP_HTTP_CLIENT\n\n; HTTP_SERVER\nbuild_flags = -DDEBUG_ESP_HTTP_SERVER\n\n; SSL+TLS_MEM\nbuild_flags =\n  -DDEBUG_ESP_SSL\n  -DDEBUG_ESP_TLS_MEM\n\n; SSL+HTTP_CLIENT\nbuild_flags =\n  -DDEBUG_ESP_SSL\n  -DDEBUG_ESP_HTTP_CLIENT\n\n; SSL+HTTP_SERVER\nbuild_flags =\n  -DDEBUG_ESP_SSL\n  -DDEBUG_ESP_HTTP_SERVER\n\n; TLS_MEM+HTTP_CLIENT\nbuild_flags =\n  -DDEBUG_ESP_TLS_MEM\n  -DDEBUG_ESP_HTTP_CLIENT\n\n; TLS_MEM+HTTP_SERVER\nbuild_flags =\n  -DDEBUG_ESP_TLS_MEM\n  -DDEBUG_ESP_HTTP_SERVER\n\n; HTTP_CLIENT+HTTP_SERVER\nbuild_flags =\n  -DDEBUG_ESP_HTTP_CLIENT\n  -DDEBUG_ESP_HTTP_SERVER\n\n; SSL+TLS_MEM+HTTP_CLIENT\nbuild_flags =\n  -DDEBUG_ESP_SSL\n  -DDEBUG_ESP_TLS_MEM\n  -DDEBUG_ESP_HTTP_CLIENT\n\n; SSL+TLS_MEM+HTTP_SERVER\nbuild_flags =\n  -DDEBUG_ESP_SSL\n  -DDEBUG_ESP_TLS_MEM\n  -DDEBUG_ESP_HTTP_SERVER\n\n; SSL+HTTP_CLIENT+HTTP_SERVER\nbuild_flags =\n  -DDEBUG_ESP_SSL\n  -DDEBUG_ESP_HTTP_CLIENT\n  -DDEBUG_ESP_HTTP_SERVER\n\n; TLS_MEM+HTTP_CLIENT+HTTP_SERVER\nbuild_flags =\n  -DDEBUG_ESP_TLS_MEM\n  -DDEBUG_ESP_HTTP_CLIENT\n  -DDEBUG_ESP_HTTP_SERVER\n\n; SSL+TLS_MEM+HTTP_CLIENT+HTTP_SERVER\nbuild_flags =\n  -DDEBUG_ESP_SSL\n  -DDEBUG_ESP_TLS_MEM\n  -DDEBUG_ESP_HTTP_CLIENT\n  -DDEBUG_ESP_HTTP_SERVER\n\n; CORE\nbuild_flags = -DDEBUG_ESP_CORE\n\n; WIFI\nbuild_flags = -DDEBUG_ESP_WIFI\n\n; HTTP_UPDATE\nbuild_flags = -DDEBUG_ESP_HTTP_UPDATE\n\n; UPDATER\nbuild_flags = -DDEBUG_ESP_UPDATER\n\n; OTA\nbuild_flags = -DDEBUG_ESP_OTA\n\n; OOM\nbuild_flags =\n  -DDEBUG_ESP_OOM\n  -include \"umm_malloc/umm_malloc_cfg.h\"\n\n; CORE+WIFI+HTTP_UPDATE+UPDATER+OTA+OOM\nbuild_flags =\n  -DDEBUG_ESP_CORE\n  -DDEBUG_ESP_WIFI\n  -DDEBUG_ESP_HTTP_UPDATE\n  -DDEBUG_ESP_UPDATER\n  -DDEBUG_ESP_OTA\n  -DDEBUG_ESP_OOM -include \"umm_malloc/umm_malloc_cfg.h\"\n\n; SSL+TLS_MEM+HTTP_CLIENT+HTTP_SERVER+CORE+WIFI+HTTP_UPDATE+UPDATER+OTA+OOM\nbuild_flags =\n  -DDEBUG_ESP_SSL\n  -DDEBUG_ESP_TLS_MEM\n  -DDEBUG_ESP_HTTP_CLIENT\n  -DDEBUG_ESP_HTTP_SERVER\n  -DDEBUG_ESP_CORE\n  -DDEBUG_ESP_WIFI\n  -DDEBUG_ESP_HTTP_UPDATE\n  -DDEBUG_ESP_UPDATER\n  -DDEBUG_ESP_OTA\n  -DDEBUG_ESP_OOM -include \"umm_malloc/umm_malloc_cfg.h\"\n\n; NoAssert-NDEBUG\nbuild_flags = -DNDEBUG\n```\n\n----------------------------------------\n\nTITLE: Creating a Python script to install additional packages\nDESCRIPTION: This Python script demonstrates how to install extra Python packages into the PlatformIO virtual environment. It shows three methods: listing installed packages, installing packages directly from PyPi, and conditionally installing a package if an import fails.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/scripting/examples/extra_python_packages.rst#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nImport(\"env\")\n\n# List installed packages\nenv.Execute(\"$PYTHONEXE -m pip list\")\n\n# Install custom packages from the PyPi registry\nenv.Execute(\"$PYTHONEXE -m pip install pkg1 pkg2\")\n\n# Install missed package\ntry:\n\timport some_package\nexcept ImportError:\n\tenv.Execute(\"$PYTHONEXE -m pip install some_package\")\n```\n\n----------------------------------------\n\nTITLE: Getting Detailed PlatformIO Core Installation State\nDESCRIPTION: Command that dumps the detailed state of PlatformIO Core installation to a JSON file, including paths to executables and version information.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/installation/integration.rst#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nget-platformio.py check core --dump-state tmpdir/pioinstaller-state.json\n```\n\n----------------------------------------\n\nTITLE: Configuring Upstream Version of OpenHW Platform in PlatformIO\nDESCRIPTION: Configuration example for using the latest upstream development version of the OpenHW Group platform from its GitHub repository in a PlatformIO project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/openhw.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:upstream_develop]\nplatform = https://github.com/platformio/platform-openhw.git\nboard = ...\n```\n\n----------------------------------------\n\nTITLE: Including PlatformIO IDE Features in reStructuredText\nDESCRIPTION: This snippet includes the content of the 'pioide_features.rst' file, which likely contains a list or description of PlatformIO IDE features.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/ide/pioide.rst#2025-04-10_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. include:: pioide_features.rst\n```\n\n----------------------------------------\n\nTITLE: Setting Numerical Base for Debug Console in VSCode\nDESCRIPTION: This code snippet demonstrates how to set the default numerical base for displaying numeric output in the VSCode Debug Console. It allows changing the format of variables, such as displaying them in hexadecimal.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/ide/vscode.rst#2025-04-10_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nset output-radix 16\n```\n\n----------------------------------------\n\nTITLE: Defining a Single License in PlatformIO Configuration using JavaScript\nDESCRIPTION: Example of specifying a single license using an SPDX license ID in a PlatformIO configuration file. This example uses the Apache-2.0 license identifier.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/manifests/library-json/fields/license.rst#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"license\": \"Apache-2.0\"\n```\n\n----------------------------------------\n\nTITLE: Customizing AVR64DD28 Build Parameters in PlatformIO\nDESCRIPTION: Extended configuration for AVR64DD28 that demonstrates how to override default board settings. This example shows how to explicitly set the microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/AVR64DD28.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:AVR64DD28]\nplatform = atmelmegaavr\nboard = AVR64DD28\n\n; change microcontroller\nboard_build.mcu = avr64dd28\n\n; change MCU frequency\nboard_build.f_cpu = 24000000L\n```\n\n----------------------------------------\n\nTITLE: Initializing Global Variables in C++\nDESCRIPTION: This code snippet demonstrates the initialization of global variables that would be stored in the .data segment. It includes an integer and a character array with pre-defined values.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/faq/program-memory-usage.rst#2025-04-10_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nint val = 3;\nchar string[] = \"Hello World\";\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for UBW32 MX460 Board\nDESCRIPTION: This snippet shows how to configure a PlatformIO project for the UBW32 MX460 board using the microchippic32 platform. It demonstrates setting the board ID in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/microchippic32/ubw32_mx460.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ubw32_mx460]\nplatform = microchippic32\nboard = ubw32_mx460\n```\n\n----------------------------------------\n\nTITLE: Installing AVR Platform with Default Packages\nDESCRIPTION: Example showing installation of the ATMEL AVR platform with its default package configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/platforms/cmd_install.rst#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> pio platform install atmelavr\n\nPlatformManager: Installing atmelavr\nDownloading...\nUnpacking  [####################################]  100%\natmelavr @ 0.0.0 has been successfully installed!\nPackageManager: Installing tool-scons @ >=2.3.0,<2.6.0\nDownloading  [####################################]  100%\nUnpacking  [####################################]  100%\ntool-scons @ 2.4.1 has been successfully installed!\nPackageManager: Installing toolchain-atmelavr @ ~1.40801.0\nDownloading  [####################################]  100%\nUnpacking  [####################################]  100%\ntoolchain-atmelavr @ 1.40801.0 has been successfully installed!\nThe platform 'atmelavr' has been successfully installed!\nThe rest of packages will be installed automatically depending on your build environment.\n```\n\n----------------------------------------\n\nTITLE: Customizing Adafruit FunHouse ESP32S2 Board Settings\nDESCRIPTION: Example of how to override default board settings in PlatformIO. This demonstrates changing the microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/adafruit_funhouse_esp32s2.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_funhouse_esp32s2]\nplatform = espressif32\nboard = adafruit_funhouse_esp32s2\n\n; change microcontroller\nboard_build.mcu = esp32s2\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: PlatformIO CI Command Configuration for Travis CI\nDESCRIPTION: YAML configuration for running PlatformIO CI command, suitable for library projects with examples or testing code. Includes board specification options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/ci/travis.rst#2025-04-10_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nlanguage: python\npython:\n    - \"3.11\"\n\nsudo: false\ncache:\n    directories:\n        - \"~/.platformio\"\n        - $HOME/.cache/pip\n\nenv:\n    - PLATFORMIO_CI_SRC=path/to/test/file.c\n    - PLATFORMIO_CI_SRC=examples/file.ino\n    - PLATFORMIO_CI_SRC=path/to/test/directory\n\ninstall:\n    - pip install -U platformio\n    - pio update\n\nscript:\n    - pio ci --board=<ID_1> --board=<ID_2> --board=<ID_N>\n```\n\n----------------------------------------\n\nTITLE: Installing PlatformIO Core CLI in Cloud9\nDESCRIPTION: Command to install PlatformIO Core CLI tools in Cloud9's Ubuntu workspace using Python and curl\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/ide/cloud9.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo python -c \"$(curl -fsSL https://raw.githubusercontent.com/platformio/platformio/develop/scripts/get-platformio.py)\"\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Package Outdated Command Usage\nDESCRIPTION: Shows the basic command syntax for checking outdated packages in PlatformIO projects.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/pkg/cmd_outdated.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio pkg outdated [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Configuring Upstream TI MSP430 Platform Version in platformio.ini\nDESCRIPTION: This snippet demonstrates how to use the upstream development version of the TI MSP430 platform by specifying the GitHub repository URL in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/timsp430.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:upstream_develop]\nplatform = https://github.com/platformio/platform-timsp430.git\nboard = ...\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration for STM32 Core Board F401RC\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/coreboard_f401rc.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:coreboard_f401rc]\nplatform = ststm32\nboard = coreboard_f401rc\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Implementing $schema in library.json\nDESCRIPTION: Example of how to add the $schema field to a library.json manifest file. This enables schema validation and autocomplete features in compatible editors like VSCode.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/manifests/library-json/fields/schema.rst#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"$schema\": \"https://raw.githubusercontent.com/platformio/platformio-core/develop/platformio/assets/schema/library.json\",\n  \"name\": \"Foo\",\n  \"version\": \"1.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting SCons Command Flags in Shell Environment\nDESCRIPTION: Examples of setting the SCONSFLAGS environment variable to pass command-line options to SCons build system in both POSIX shell and Windows CMD environments. Shows how to enable tree output and dry-run functionality.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/faq/custom-scons-cli-options.rst#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# POSIX shell\nexport SCONSFLAGS=\"--tree=all\"\n```\n\nLANGUAGE: batch\nCODE:\n```\n# Windows CMD\nC:\\Users\\foo> set SCONSFLAGS=--dry-run\n```\n\n----------------------------------------\n\nTITLE: Customizing Generic MS51TC0AE Board Settings in PlatformIO\nDESCRIPTION: This snippet demonstrates how to override default settings for the Generic MS51TC0AE board in a PlatformIO project. It shows how to change the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/MS51TC0AE.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:MS51TC0AE]\nplatform = intel_mcs51\nboard = MS51TC0AE\n\n; change microcontroller\nboard_build.mcu = ms51tc0ae\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Stable Nordic nRF52 Platform Version\nDESCRIPTION: Example platformio.ini configuration to use the stable release version of the Nordic nRF52 development platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/nordicnrf52.rst#2025-04-10_snippet_0\n\nLANGUAGE: INI\nCODE:\n```\n[env:myproject]\nplatform = nordicnrf52\nboard = ...\n\n```\n\n----------------------------------------\n\nTITLE: RST Board Configuration Tables\nDESCRIPTION: ReStructuredText tables listing ESP32 board configurations including debug capabilities, MCU specifications, operating frequency, flash and RAM sizes. Tables are organized by manufacturer.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/espressif32.rst#2025-04-10_snippet_4\n\nLANGUAGE: rst\nCODE:\n```\n.. list-table::\n    :header-rows:  1\n\n    * - Name\n      - Debug\n      - MCU\n      - Frequency\n      - Flash\n      - RAM\n    * - :ref:`board_espressif32_m5stack-core-esp32`\n      - No\n      - ESP32\n      - 240MHz\n      - 4MB\n      - 320KB\n```\n\n----------------------------------------\n\nTITLE: Configuring Stable Espressif32 Platform Version\nDESCRIPTION: INI configuration for setting up stable platform versions in PlatformIO projects. Shows both latest stable and pinned version options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/espressif32.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n; Latest stable version, NOT recommended\n; Pin the version as shown below\n[env:latest_stable]\nplatform = espressif32\nboard = ...\n\n; Specific version\n[env:custom_stable]\nplatform = espressif32@x.y.z\nboard = ...\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration with MCU Options\nDESCRIPTION: Extended configuration showing how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15F2K52S2.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15F2K52S2]\nplatform = intel_mcs51\nboard = STC15F2K52S2\n\n; change microcontroller\nboard_build.mcu = stc15f2k52s2\n\n; change MCU frequency\nboard_build.f_cpu = 6000000L\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example for specifying the upload protocol for the Leafony AP03 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/leafony_ap03.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:leafony_ap03]\nplatform = ststm32\nboard = leafony_ap03\n\nupload_protocol = serial\n```\n\n----------------------------------------\n\nTITLE: Uninstalling PlatformIO Shell Completion\nDESCRIPTION: Command syntax for uninstalling PlatformIO shell completion files. Supports optional custom installation path specification.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/system/completion/cmd_uninstall.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio system completion uninstall [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Syntax for PlatformIO Package Execution Command\nDESCRIPTION: Shows the various syntax options for using the 'pio pkg exec' command, including executing a command directly, using a double-hyphen separator, specifying a package, and using the call option.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/pkg/cmd_exec.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio pkg exec [OPTIONS] [ARGS]\npio pkg exec -- <CMD> [ARGS]\npio pkg exec --package <SPECIFICATION> -- <CMD> [ARGS]\npio pkg exec --call '<cmd> [args]'\n```\n\n----------------------------------------\n\nTITLE: Creating a Team with Description in PlatformIO\nDESCRIPTION: This example shows how to create a new team named 'dev' within the 'platformio' organization, including a description for the team. It demonstrates the use of the --description option.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/team/cmd_create.rst#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> pio team create platformio:dev --description \"Developers team\"\nThe team \"dev\" has been successfully created.\n```\n\n----------------------------------------\n\nTITLE: Restructured Text Navigation Structure for Upload Options\nDESCRIPTION: Defines a table of contents tree structure for upload-related configuration options in restructuredText format. Lists various upload configuration parameters that can be set in PlatformIO projects.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/env/options/upload/index.rst#2025-04-10_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n\n    upload_port\n    upload_protocol\n    upload_speed\n    upload_flags\n    upload_resetmethod\n    upload_command\n```\n\n----------------------------------------\n\nTITLE: Configuring Nordic nRF52840-DK Board in platformio.ini\nDESCRIPTION: Basic board configuration snippet for setting up Nordic nRF52840-DK with Adafruit BSP in PlatformIO project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/nrf52840_dk_adafruit.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nrf52840_dk_adafruit]\nplatform = nordicnrf52\nboard = nrf52840_dk_adafruit\n```\n\n----------------------------------------\n\nTITLE: Appending Uploader Flags for Atmel AVR in PlatformIO\nDESCRIPTION: This Python script demonstrates how to append specific uploader flags for programming an Atmel AVR microcontroller in PlatformIO. It adds the -V and -D flags to the FUSESUPLOADERFLAGS environment variable.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/atmelavr_extra.rst#2025-04-10_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nImport(\"env\")\n\nenv.Append(\n    FUSESUPLOADERFLAGS=[\n        \"-V\",\n        \"-D\"\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Advanced STM32F413CG Board Configuration\nDESCRIPTION: Extended configuration showing how to override default microcontroller and frequency settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F413CG.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F413CG]\nplatform = ststm32\nboard = genericSTM32F413CG\n\n; change microcontroller\nboard_build.mcu = stm32f413cgu6\n\n; change MCU frequency\nboard_build.f_cpu = 100000000L\n```\n\n----------------------------------------\n\nTITLE: Framework Configuration in platformio.ini\nDESCRIPTION: Basic configuration setting to enable STM32Cube framework in a PlatformIO project\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/frameworks/stm32cube.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nframework = stm32cube\n```\n\n----------------------------------------\n\nTITLE: Defining ExtraScript in library.json for Custom Build Process\nDESCRIPTION: Example library.json configuration that specifies an extra script to be executed before the build process, allowing for custom build behavior of the library.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/manifests/library-json/fields/build/extrascript.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n{\n    \"name\": \"SomeLib\",\n    \"version\": \"0.0.0\",\n    \"build\": {\n        \"extraScript\": \"extra_script.py\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ATmega3209 with pyupdi Upload in PlatformIO\nDESCRIPTION: PlatformIO configuration for using pyupdi to upload firmware to an ATmega3209 board. This sets up the upload flags and command for programming via a standard serial port.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/atmelmegaavr_extra.rst#2025-04-10_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega3209_pyupdi_upload]\nplatform = atmelmegaavr\nframework = arduino\nboard = ATmega3209\nupload_speed = 115200\nupload_flags =\n    -d\n    mega3209\n    -c\n    $UPLOAD_PORT\n    -b\n    $UPLOAD_SPEED\nupload_command = pyupdi $UPLOAD_FLAGS -f $SOURCE\n```\n\n----------------------------------------\n\nTITLE: Configuring Upstream Shakti Platform Version in PlatformIO\nDESCRIPTION: INI configuration for using the latest upstream development version of the Shakti platform from GitHub in PlatformIO projects.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/shakti.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:upstream_develop]\nplatform = https://github.com/platformio/platform-shakti.git\nboard = ...\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Documentation Structure\nDESCRIPTION: Document structure defining the tutorials and examples section of PlatformIO documentation, including navigation tree and resource links.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/tutorials/index.rst#2025-04-10_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _tutorials:\n\nTutorials and Examples\n======================\n\nOfficial\n--------\n\nTutorials\n~~~~~~~~~\n\n.. toctree::\n    :maxdepth: 1\n\n    espressif32/arduino_debugging_unit_testing\n    espressif32/espidf_debugging_unit_testing_analysis\n    ststm32/stm32cube_debugging_unit_testing\n    nordicnrf52/arduino_debugging_unit_testing\n    nordicnrf52/zephyr_debugging_unit_testing_inspect\n    core/unit_testing_blink\n    riscv/riscv_asm_video_tutorial\n```\n\n----------------------------------------\n\nTITLE: Customizing MCU and Frequency Settings\nDESCRIPTION: Advanced configuration showing how to override default microcontroller and frequency settings for the ST STM32LDISCOVERY board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_l152rb.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_l152rb]\nplatform = ststm32\nboard = disco_l152rb\n\n; change microcontroller\nboard_build.mcu = stm32l152rbt6\n\n; change MCU frequency\nboard_build.f_cpu = 32000000L\n```\n\n----------------------------------------\n\nTITLE: Searching for packages with names starting with 'DHT'\nDESCRIPTION: Example of using 'pio pkg search' with a wildcard to find packages whose names start with 'DHT'. This demonstrates the use of the asterisk (*) operator for truncation searches.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/pkg/cmd_search.rst#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n> pio pkg search \"DHT*\"\n```\n\n----------------------------------------\n\nTITLE: Setting Default Testing Command for Native Platform in PlatformIO\nDESCRIPTION: This snippet shows the default configuration for the testing command on the native platform. It specifies the path to the compiled program in the build directory.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/env/options/test/test_testing_command.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = native\ntest_testing_command =\n  ${platformio.build_dir}/${this.__env__}/program\n```\n\n----------------------------------------\n\nTITLE: Customizing u-blox EVK-NINA-B1 Board Parameters\nDESCRIPTION: Advanced configuration showing how to override default board settings like microcontroller and CPU frequency in platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/ublox_evk_nina_b1.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ublox_evk_nina_b1]\nplatform = nordicnrf52\nboard = ublox_evk_nina_b1\n\n; change microcontroller\nboard_build.mcu = nrf52832\n\n; change MCU frequency\nboard_build.f_cpu = 64000000L\n```\n\n----------------------------------------\n\nTITLE: Searching libraries by keywords\nDESCRIPTION: Example of using the 'pio lib search' command to find libraries that match multiple keywords (web and http in this case).\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/lib/cmd_search.rst#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npio lib search --keyword=\"web\" --keyword=\"http\"\n```\n\n----------------------------------------\n\nTITLE: Bad Practices for Declaring Dependencies in PlatformIO\nDESCRIPTION: This snippet illustrates practices to avoid when declaring dependencies in a PlatformIO project, such as omitting package owners and depending on development branches.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/librarymanager/dependencies.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nlib_deps =\n  ; Omit library package owner (<owner>/<name>) and depend on the library by name.\n  ; Lead to the conflicts when there are multiple libraries with the same name\n  OneWire\n\n  ; Depend on ANY/Latest version of the development platform\n  ; allowing breaking changes\n  me-no-dev/AsyncTCP\n\n  ; Depend on the development branch of the Git repository,\n  ; allow breaking changes, and untested commits\n  https://github.com/username/HelloWorld.git\n```\n\n----------------------------------------\n\nTITLE: ESP32 Board Configuration Table in RST Format\nDESCRIPTION: A structured table in RST format listing ESP32 development boards with their specifications including platform type, connection type, processor variant, clock speed, and memory specifications.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/tumpa.rst#2025-04-10_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n* - :ref:`board_espressif32_valtrack_v4_mfw_esp32_c3`\n      - :ref:`platform_espressif32`\n      - External\n      - ESP32C3\n      - 160MHz\n      - 4MB\n      - 320KB\n```\n\n----------------------------------------\n\nTITLE: Configuring SDT32620B Board in PlatformIO Project\nDESCRIPTION: Basic configuration for using the SDT32620B board in a PlatformIO project environment. This snippet demonstrates how to specify the board in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/maxim32/sdt32620b.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:sdt32620b]\nplatform = maxim32\nboard = sdt32620b\n```\n\n----------------------------------------\n\nTITLE: Customizing MCU Settings for TTGO LoRa32-V1\nDESCRIPTION: Example showing how to override default microcontroller and frequency settings for the TTGO LoRa32-V1 board\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/ttgo-lora32-v1.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ttgo-lora32-v1]\nplatform = espressif32\nboard = ttgo-lora32-v1\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring QEMU Debugging Tool in PlatformIO Configuration\nDESCRIPTION: Example configuration for setting up QEMU as the debugging tool in the PlatformIO project configuration file. This snippet shows how to specify QEMU as the debugging tool in the project's environment configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/qemu.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = ...\nboard = ...\ndebug_tool = qemu\n```\n\n----------------------------------------\n\nTITLE: Using the pio lib builtin Command in PlatformIO\nDESCRIPTION: Shows the basic syntax for the deprecated 'pio lib builtin' command which lists built-in libraries based on installed platforms and frameworks.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/lib/cmd_builtin.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio lib builtin [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Creating System-wide Symlinks for PlatformIO Commands\nDESCRIPTION: Creates system-wide symbolic links for PlatformIO executables. This method allows all users to access PlatformIO commands but may require administrator access.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/installation/shell-commands.rst#2025-04-10_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmkdir -p /usr/local/bin\nln -s ~/.platformio/penv/bin/platformio /usr/local/bin/platformio\nln -s ~/.platformio/penv/bin/pio /usr/local/bin/pio\nln -s ~/.platformio/penv/bin/piodebuggdb /usr/local/bin/piodebuggdb\n```\n\n----------------------------------------\n\nTITLE: Basic ESP32-S3 Board Configuration in PlatformIO\nDESCRIPTION: Basic configuration for setting up an ESP32-S3-DevKitC-1 board project in PlatformIO.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32-s3-devkitc-1.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32-s3-devkitc-1]\nplatform = espressif32\nboard = esp32-s3-devkitc-1\n```\n\n----------------------------------------\n\nTITLE: Simple Project Initialization Example\nDESCRIPTION: Example showing project initialization in current working directory with output showing created directory structure.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/project/cmd_init.rst#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> pio project init\n\nThe current working directory *** will be used for the new project.\nYou can specify another project directory via\n`pio project init -d %PATH_TO_THE_PROJECT_DIR%` command.\n\nThe following files/directories will be created in ***\nplatformio.ini - Project Configuration File. |-> PLEASE EDIT ME <-|\nsrc - Put your source files here\nlib - Put here project specific (private) libraries\nProject has been successfully initialized!\nUseful commands:\n`pio run` - process/build project from the current directory\n`pio run --target upload` or `pio run -t upload` - upload firmware to embedded board\n`pio run --target clean` - clean project (remove compiled files)\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for ATmega164P\nDESCRIPTION: Basic environment configuration for ATmega164P board in platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega164P.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega164P]\nplatform = atmelavr\nboard = ATmega164P\n```\n\n----------------------------------------\n\nTITLE: Remote Firmware Upload with PlatformIO\nDESCRIPTION: Command to remotely upload firmware to devices visible to the PlatformIO Remote Agent. This allows programming devices from the cloud IDE.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/ide/codeanywhere.rst#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npio remote run -t upload\n```\n\n----------------------------------------\n\nTITLE: PlatformIO Check Skip Packages Example\nDESCRIPTION: Example showing how to exclude third-party packages from the checking process.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/cmd_check.rst#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npio check --skip-packages\n```\n\n----------------------------------------\n\nTITLE: Listing PlatformIO Organizations\nDESCRIPTION: This command lists all organizations and their owners in PlatformIO. It can be run with or without options, and optionally with an owner specified.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/org/cmd_list.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio org list [OPTIONS] [OWNER]\n```\n\n----------------------------------------\n\nTITLE: Configuring Teensy CLI Upload Protocol in PlatformIO\nDESCRIPTION: This configuration demonstrates how to set up the command-line version of the Teensy upload tools for a Teensy 3.6 board. It uses the upload_protocol option to specify the teensy-cli upload method.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/teensy_extra.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:teensy36]\nplatform = teensy\nframework = arduino\nboard = teensy36\nupload_protocol = teensy-cli\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration for STM32 Platform\nDESCRIPTION: Basic configuration in platformio.ini file to set up a project for Seeed Arch Max board using the STM32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/seeedArchMax.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:seeedArchMax]\nplatform = ststm32\nboard = seeedArchMax\n```\n\n----------------------------------------\n\nTITLE: Example Shell Completion Uninstall Output\nDESCRIPTION: Example output showing successful uninstallation of PlatformIO shell completion for fish shell, with the default path location.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/system/completion/cmd_uninstall.rst#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> pio system completion uninstall\n\nPlatformIO CLI completion has been uninstalled for fish shell from ~/.config/fish/completions/pio.fish\nPlease restart a current shell session.\n```\n\n----------------------------------------\n\nTITLE: RST Table Structure for ESP32 Board Specs\nDESCRIPTION: ReStructuredText table format showing ESP32 board specifications including board name, platform, debug support, MCU type, frequency, flash size and RAM size.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/frameworks/espidf.rst#2025-04-10_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. list-table::\n    :header-rows:  1\n\n    * - Name\n      - Platform\n      - Debug\n      - MCU\n      - Frequency\n      - Flash\n      - RAM\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for STM32F103R4 Board\nDESCRIPTION: Basic PlatformIO configuration for the STM32F103R4 board, including platform and board selection.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103R4.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103R4]\nplatform = ststm32\nboard = genericSTM32F103R4\n```\n\n----------------------------------------\n\nTITLE: Using PlatformIO Account Update Command in Bash\nDESCRIPTION: This command is used to update a PlatformIO account profile. It can be run with various options to update specific account details such as username, email, first name, last name, and password.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/account/cmd_update.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio account update [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for RHF76 052\nDESCRIPTION: Configuration to specify the upload protocol for the RHF76 052 board. In this example, it's set to 'serial'.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/rhf76_052.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:rhf76_052]\nplatform = ststm32\nboard = rhf76_052\n\nupload_protocol = serial\n```\n\n----------------------------------------\n\nTITLE: Configuring Stable Nordic nRF51 Platform\nDESCRIPTION: Configuration for using stable released versions of the Nordic nRF51 platform, allowing both latest stable and specific version pinning.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/nordicnrf51.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n; Latest stable version, NOT recommended\n; Pin the version as shown below\n[env:latest_stable]\nplatform = nordicnrf51\nboard = ...\n\n; Specific version\n[env:custom_stable]\nplatform = nordicnrf51@x.y.z\nboard = ...\n```\n\n----------------------------------------\n\nTITLE: Listing Remote Devices with PlatformIO\nDESCRIPTION: Command to list all remote devices that are connected to the host machine where the PlatformIO Remote Agent is running.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/ide/codeanywhere.rst#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npio remote device list\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of 'pio boards' Command in PlatformIO\nDESCRIPTION: Shows the basic command syntax for the 'pio boards' command, which lists pre-configured embedded boards in PlatformIO.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/cmd_boards.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio boards [OPTIONS] [FILTER]\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for the PlatformIO Account Command\nDESCRIPTION: Shows how to access help information for the 'pio account' command and its subcommands. This provides details on command usage and available options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/account/index.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio account --help\npio account COMMAND --help\n```\n\n----------------------------------------\n\nTITLE: Installing AVR Platform with Uploader Only\nDESCRIPTION: Example demonstrating how to install the ATMEL AVR platform with only the uploader utility while skipping default packages.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/platforms/cmd_install.rst#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n> pio platform install atmelavr --skip-default-package --with-package=uploader\n\nPlatformManager: Installing atmelavr\nDownloading  [####################################]  100%\nUnpacking  [####################################]  100%\natmelavr @ 0.0.0 has been successfully installed!\nPackageManager: Installing tool-micronucleus @ ~1.200.0\nDownloading  [####################################]  100%\nUnpacking  [####################################]  100%\ntool-micronucleus @ 1.200.0 has been successfully installed!\nPackageManager: Installing tool-avrdude @ ~1.60001.0\nDownloading  [####################################]  100%\nUnpacking  [####################################]  100%\ntool-avrdude @ 1.60001.1 has been successfully installed!\nThe platform 'atmelavr' has been successfully installed!\nThe rest of packages will be installed automatically depending on your build environment.\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Board Configuration Index\nDESCRIPTION: A toctree-based index structure organizing board configuration files by platform/manufacturer, including detailed listings for Espressif8266, Freescale Kinetis, Heltec CubeCell, Intel MCS-51, and other platforms.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/index.rst#2025-04-10_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n        \n    freescalekinetis/IBMEthernetKit\n    freescalekinetis/frdm_k22f\n    freescalekinetis/frdm_k64f\n```\n\n----------------------------------------\n\nTITLE: Configuring Cppcheck Tool Version in PlatformIO Project\nDESCRIPTION: Example configuration showing how to specify a static analysis tool (cppcheck) and its version in a PlatformIO project environment. The configuration demonstrates setting up basic project parameters and specifying a particular version of cppcheck through platform packages.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/advanced/static-code-analysis/configuration.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = ...\nboard = ...\ncheck_tool = cppcheck\nplatform_packages = tool-cppcheck@1.260.0\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for AZ-Delivery ESP-32 Dev Kit C V4\nDESCRIPTION: Basic PlatformIO configuration for using the AZ-Delivery ESP-32 Dev Kit C V4 board in a project environment file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/az-delivery-devkit-v4.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:az-delivery-devkit-v4]\nplatform = espressif32\nboard = az-delivery-devkit-v4\n```\n\n----------------------------------------\n\nTITLE: Basic Gemma Board Configuration in PlatformIO\nDESCRIPTION: Basic configuration for the Adafruit Gemma board in the PlatformIO project configuration file (platformio.ini). Sets up the basic environment with atmelavr platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/gemma.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:gemma]\nplatform = atmelavr\nboard = gemma\n```\n\n----------------------------------------\n\nTITLE: Implementing Unit Tests for STM32 LED Control in C++\nDESCRIPTION: Demonstrates implementation of unit tests for LED control functionality using Unity framework. Includes setUp and tearDown functions for GPIO initialization, test cases for pin number verification and LED state control, and a main function that executes the test suite with timing delays.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/tutorials/ststm32/stm32cube_debugging_unit_testing.rst#2025-04-10_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\n#include \"../src/main.h\"\n#include <unity.h>\n\nvoid setUp(void)\n{\n  LED_GPIO_CLK_ENABLE();\n  GPIO_InitTypeDef GPIO_InitStruct;\n  GPIO_InitStruct.Pin = LED_PIN;\n  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;\n  GPIO_InitStruct.Pull = GPIO_PULLUP;\n  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;\n  HAL_GPIO_Init(LED_GPIO_PORT, &GPIO_InitStruct);\n}\n\nvoid tearDown(void)\n{\n  HAL_GPIO_DeInit(LED_GPIO_PORT, LED_PIN);\n}\n\nvoid test_led_builtin_pin_number(void)\n{\n  TEST_ASSERT_EQUAL(GPIO_PIN_5, LED_PIN);\n}\n\nvoid test_led_state_high(void)\n{\n  HAL_GPIO_WritePin(LED_GPIO_PORT, LED_PIN, GPIO_PIN_SET);\n  TEST_ASSERT_EQUAL(GPIO_PIN_SET, HAL_GPIO_ReadPin(LED_GPIO_PORT, LED_PIN));\n}\n\nvoid test_led_state_low(void)\n{\n  HAL_GPIO_WritePin(LED_GPIO_PORT, LED_PIN, GPIO_PIN_RESET);\n  TEST_ASSERT_EQUAL(GPIO_PIN_RESET, HAL_GPIO_ReadPin(LED_GPIO_PORT, LED_PIN));\n}\n\nint main()\n{\n  HAL_Init();      // initialize the HAL library\n  HAL_Delay(2000); // service delay\n\n  UNITY_BEGIN();\n  RUN_TEST(test_led_builtin_pin_number);\n\n  for (unsigned int i = 0; i < 5; i++)\n  {\n    RUN_TEST(test_led_state_high);\n    HAL_Delay(500);\n    RUN_TEST(test_led_state_low);\n    HAL_Delay(500);\n  }\n\n  UNITY_END(); // stop unit testing\n\n  while (1)\n  {\n  }\n}\n\nvoid SysTick_Handler(void)\n{\n  HAL_IncTick();\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing STM32F446RC Board Settings\nDESCRIPTION: Example of overriding default board settings in platformio.ini. This snippet demonstrates changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F446RC.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F446RC]\nplatform = ststm32\nboard = genericSTM32F446RC\n\n; change microcontroller\nboard_build.mcu = stm32f446rct6\n\n; change MCU frequency\nboard_build.f_cpu = 180000000L\n```\n\n----------------------------------------\n\nTITLE: Installing Python Virtual Environment on Debian/Ubuntu for PlatformIO\nDESCRIPTION: Command to install the Python virtual environment package on Debian/Ubuntu-based Linux distributions. This is required for PlatformIO Core to function properly.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/faq/install-python.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install python3-venv\n```\n\n----------------------------------------\n\nTITLE: Configuring Base PlatformIO Project Configuration\nDESCRIPTION: Base platformio.ini configuration file showing how to specify extra config files and define global environment settings for ESP32 development.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/platformio/options/generic/extra_configs.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[platformio]\nextra_configs =\n  extra_envs.ini\n  extra_debug.ini\n\n; Global data for all [env:***]\n[env]\nplatform = platformio/espressif32\nframework = espidf\n\n; Custom data group\n; can be use in [env:***] via ${common.***}\n[common]\ndebug_flags = -D RELEASE\nlib_flags = -lc -lm\n\n[env:esp-wrover-kit]\nboard = esp-wrover-kit\nbuild_flags = ${common.debug_flags}\n```\n\n----------------------------------------\n\nTITLE: Setting monitor_parity Configuration Option in PlatformIO\nDESCRIPTION: The monitor_parity option configures parity checking for the serial monitor. It accepts a string value with a default of 'N' (None). This setting controls how the device monitor handles parity bits when communicating with devices.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/env/options/monitor/monitor_parity.rst#2025-04-10_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmonitor_parity = N\n```\n\n----------------------------------------\n\nTITLE: Configuring Stable Platform Version in PlatformIO\nDESCRIPTION: Configuration examples for using stable releases of the Aceinna IMU platform, showing both latest and specific version pinning.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/aceinna_imu.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n; Latest stable version, NOT recommended\n; Pin the version as shown below\n[env:latest_stable]\nplatform = aceinna_imu\nboard = ...\n\n; Specific version\n[env:custom_stable]\nplatform = aceinna_imu@x.y.z\nboard = ...\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Speed\nDESCRIPTION: Configuration for setting custom upload speed for ESP32.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/espressif32_extra.rst#2025-04-10_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nupload_speed = 9600\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Table of Atmel SAM Board Specifications\nDESCRIPTION: Table listing of development board specifications with columns for name, debug support, MCU type, operating frequency, flash memory and RAM sizes. The content is structured in multiple sections based on board manufacturers.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/atmelsam.rst#2025-04-10_snippet_2\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. list-table::\n    :header-rows:  1\n\n    * - Name\n      - Debug\n      - MCU\n      - Frequency\n      - Flash\n      - RAM\n    * - :ref:`board_atmelsam_due`\n      - External\n      - AT91SAM3X8E\n      - 84MHz\n      - 512KB\n      - 96KB\n```\n\n----------------------------------------\n\nTITLE: Defining Test Case Source Information in Python\nDESCRIPTION: Class for storing source file information for test cases including file path and line number location. Used to track where tests are implemented.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/advanced/unit-testing/frameworks/custom/api.rst#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass TestCaseSource:\n    file      # Source file path \n    line      # Line number of test case\n```\n\n----------------------------------------\n\nTITLE: Listing All Accessible Resources - PlatformIO CLI\nDESCRIPTION: Example showing how to list all accessible resources, displaying details like URN, owner, and access levels for various platforms and tools.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/access/cmd_list.rst#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> pio access list\n\n...\n\natmelsam\n--------\nURN:              prn:reg:pkg:8007:platform\nOwner:            platformio\nAccess level(s):  Admin\n\nespressif8266\n-------------\nURN:              prn:reg:pkg:8008:platform\nOwner:            platformio\nAccess level(s):  Admin\n\nchipsalliance\n-------------\nURN:              prn:reg:pkg:8036:platform\nOwner:            platformio\nAccess level(s):  Admin\n\ncontrib-piohome\n---------------\nURN:              prn:reg:pkg:8037:tool\nOwner:            platformio\nAccess level(s):  Admin\n\n...\n```\n\n----------------------------------------\n\nTITLE: Basic STC15F203A Board Configuration in PlatformIO\nDESCRIPTION: Basic configuration for setting up an STC15F203A board project in platformio.ini. Specifies the platform and board type.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15F203A.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15F203A]\nplatform = intel_mcs51\nboard = STC15F203A\n```\n\n----------------------------------------\n\nTITLE: Configuring Olimex ARM-USB-TINY Debugging Tool in platformio.ini\nDESCRIPTION: Example configuration for using the Olimex ARM-USB-TINY as a debugging tool and upload protocol in a PlatformIO project's platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/olimex-jtag-tiny.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = ...\nboard = ...\ndebug_tool = olimex-jtag-tiny\nupload_protocol = olimex-jtag-tiny\n```\n\n----------------------------------------\n\nTITLE: Configuring Adafruit Feather ESP32 V2 in platformio.ini\nDESCRIPTION: Basic configuration for the Adafruit Feather ESP32 V2 board in the project's platformio.ini file. It specifies the platform and board to use.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/adafruit_feather_esp32_v2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_feather_esp32_v2]\nplatform = espressif32\nboard = adafruit_feather_esp32_v2\n```\n\n----------------------------------------\n\nTITLE: Configuring USBtinyISP Programmer Upload for ATmega AVR in PlatformIO\nDESCRIPTION: This snippet demonstrates two PlatformIO configurations for uploading firmware to an ATmega AVR microcontroller using a USBtinyISP programmer. It includes a simple setup and a more detailed custom configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/atmelavr_extra.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = atmelavr\nframework = arduino\nupload_protocol = usbtiny\n\n[env:program_via_USBtinyISP]\nplatform = atmelavr\nframework = arduino\nupload_protocol = custom\nupload_flags =\n    -C\n    ; use \"tool-avrdude-megaavr\" for the atmelmegaavr platform\n    ${platformio.packages_dir}/tool-avrdude/avrdude.conf\n    -p\n    $BOARD_MCU\n    -c\n    usbtiny\nupload_command = avrdude $UPLOAD_FLAGS -U flash:w:$SOURCE:i\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic AVR64DA32 Board Setup in PlatformIO\nDESCRIPTION: Basic configuration for using the AVR64DA32 board in a PlatformIO project. This snippet sets up the platform and board in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/AVR64DA32.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:AVR64DA32]\nplatform = atmelmegaavr\nboard = AVR64DA32\n```\n\n----------------------------------------\n\nTITLE: Configuring Verilator Debug Tool in platformio.ini\nDESCRIPTION: Basic configuration example showing how to enable Verilator as the debugging tool in a PlatformIO project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/verilator.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = ...\nboard = ...\ndebug_tool = verilator\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic PlatformIO Environment for Adafruit ESP32-S2 Feather\nDESCRIPTION: Basic configuration for the Adafruit ESP32-S2 Feather Development Board in platformio.ini file. This snippet sets up the essential environment with the correct platform and board identifier.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/featheresp32-s2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:featheresp32-s2]\nplatform = espressif32\nboard = featheresp32-s2\n```\n\n----------------------------------------\n\nTITLE: Defining RST Table of Contents\nDESCRIPTION: ReStructuredText directive that defines the table of contents tree structure for the FAQ documentation section, specifying a max depth of 2 levels.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/faq/index.rst#2025-04-10_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n    :maxdepth: 2\n\n    general\n    arduino-vs-platformio\n    install-python\n    advanced-serial-monitor\n    program-memory-usage\n    ino-to-cpp\n    custom-scons-cli-options\n    troubleshooting\n```\n\n----------------------------------------\n\nTITLE: Basic STC8C2K60S2 Board Configuration in PlatformIO\nDESCRIPTION: Basic configuration snippet for setting up an STC8C2K60S2 board project in PlatformIO's project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8C2K60S2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8C2K60S2]\nplatform = intel_mcs51\nboard = STC8C2K60S2\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Example showing how to configure the upload protocol for the SparkFun 9DoF Razor IMU M0 board, using sam-ba as the upload method.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/sparkfun_samd21_9dof.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:sparkfun_samd21_9dof]\nplatform = atmelsam\nboard = sparkfun_samd21_9dof\n\nupload_protocol = sam-ba\n```\n\n----------------------------------------\n\nTITLE: Configuring TI-ICDI Debug Tool in PlatformIO\nDESCRIPTION: This snippet shows how to configure the TI-ICDI debug tool in the PlatformIO project configuration file. It sets the debug_tool option to ti-icdi.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/ti-icdi.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = ...\nboard = ...\ndebug_tool = ti-icdi\n```\n\n----------------------------------------\n\nTITLE: Checking Device Permissions\nDESCRIPTION: Command to check the permissions and group ownership of a serial port device file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/installation/udev-rules.rst#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nls -l /dev/ttyACM0\n\n# prints something like:\n# crw-rw---- 1 root dialout 166, 0 juil. 10 13:43 /dev/ttyACM0\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for sakura.io Evaluation Board\nDESCRIPTION: Basic PlatformIO configuration for the sakura.io Evaluation Board. This sets up the essential parameters needed to compile and upload code to the board using the ststm32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/sakuraio_evb_01.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:sakuraio_evb_01]\nplatform = ststm32\nboard = sakuraio_evb_01\n```\n\n----------------------------------------\n\nTITLE: Customizing ST B-U585I-IOT02A Discovery Board Settings\nDESCRIPTION: This snippet demonstrates how to override default board settings in PlatformIO, such as changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_b_u585i_iot02a.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_b_u585i_iot02a]\nplatform = ststm32\nboard = disco_b_u585i_iot02a\n\n; change microcontroller\nboard_build.mcu = stm32u585aii6q\n\n; change MCU frequency\nboard_build.f_cpu = 160000000L\n```\n\n----------------------------------------\n\nTITLE: Installing udev Rules via curl\nDESCRIPTION: Downloads and installs PlatformIO udev rules using curl command to give proper device access permissions.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/installation/udev-rules.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL https://raw.githubusercontent.com/platformio/platformio-core/develop/platformio/assets/system/99-platformio-udev.rules | sudo tee /etc/udev/rules.d/99-platformio-udev.rules\n```\n\n----------------------------------------\n\nTITLE: Unix Environment Variable Configuration\nDESCRIPTION: Commands for setting up WiFi credentials as environment variables on Unix systems with proper escaping of special characters.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/interpolation.rst#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport WIFI_PASS='\\\"my\\~p\\&a\\\\\\$\\$\\$\\$word\\\"'\n```\n\n----------------------------------------\n\nTITLE: Configuring Upstream Platform Version in platformio.ini\nDESCRIPTION: This snippet demonstrates how to use the upstream development version of the Intel MCS-51 platform by specifying the GitHub repository URL in the PlatformIO project configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/intel_mcs51.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:upstream_develop]\nplatform = https://github.com/platformio/platform-intel_mcs51.git\nboard = ...\n```\n\n----------------------------------------\n\nTITLE: Advanced STC89C54RD+ Board Configuration\nDESCRIPTION: Extended PlatformIO configuration showing how to override default board settings including microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC89C54RD+.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC89C54RD+]\nplatform = intel_mcs51\nboard = STC89C54RD+\n\n; change microcontroller\nboard_build.mcu = stc89c54rd+\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the board\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/deneyapkart.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:deneyapkart]\nplatform = espressif32\nboard = deneyapkart\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring Stable Atmel SAM Platform Version in PlatformIO\nDESCRIPTION: Shows how to specify a stable version of the Atmel SAM platform in the PlatformIO project configuration file. Includes options for using the latest stable version or pinning to a specific version.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/atmelsam.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n; Latest stable version, NOT recommended\n; Pin the version as shown below\n[env:latest_stable]\nplatform = atmelsam\nboard = ...\n\n; Specific version\n[env:custom_stable]\nplatform = atmelsam@x.y.z\nboard = ...\n```\n\n----------------------------------------\n\nTITLE: Configuring STM32 Platform Version in PlatformIO\nDESCRIPTION: INI configuration examples for specifying the STM32 platform version in PlatformIO's project configuration file. Shows how to use both latest stable and specific versions.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/ststm32.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n; Latest stable version, NOT recommended\n; Pin the version as shown below\n[env:latest_stable]\nplatform = ststm32\nboard = ...\n\n; Specific version\n[env:custom_stable]\nplatform = ststm32@x.y.z\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO CLI Usage in Bash\nDESCRIPTION: Demonstrates the basic syntax for using the PlatformIO CLI. The command 'pio' is followed by optional arguments and a specific command.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/index.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio [OPTIONS] COMMAND\n```\n\n----------------------------------------\n\nTITLE: Board Configuration Table in RST Format\nDESCRIPTION: A table listing development boards with their specifications including platform type, microcontroller model, clock speed, flash memory and RAM size.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/jlink.rst#2025-04-10_snippet_8\n\nLANGUAGE: restructuredtext\nCODE:\n```\n* - :ref:`board_ststm32_genericSTM32F373RC`\n      - :ref:`platform_ststm32`\n      - External\n      - STM32F373RCT6\n      - 72MHz\n      - 256KB\n      - 32KB\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration with MCU Settings\nDESCRIPTION: Extended configuration that demonstrates how to override default board settings including microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/heltec-cubecell/cubecell_board_v2.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:cubecell_board_v2]\nplatform = heltec-cubecell\nboard = cubecell_board_v2\n\n; change microcontroller\nboard_build.mcu = asr6501\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Handling BLE Connection and LED Control in Arduino for Nordic nRF52\nDESCRIPTION: This code snippet demonstrates how to handle a BLE connection and respond to characteristic writes on a Nordic nRF52 board. When a connected device writes to the LED characteristic, the code turns the built-in LED on or off based on the received value (1 or 0).\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/tutorials/nordicnrf52/arduino_debugging_unit_testing.rst#2025-04-10_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\nBLECentral central = ledPeripheral.central();\n\n    if (central)\n    {\n      while (central.connected())\n      {\n        if (ledCharacteristic.written())\n        {\n          if (ledCharacteristic.value())\n          {\n            digitalWrite(LED_BUILTIN, HIGH);\n          }\n          else\n          {\n            digitalWrite(LED_BUILTIN, LOW);\n          }\n        }\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Customizing STM32F103R6 Board Settings\nDESCRIPTION: Example of overriding default board settings, such as microcontroller model and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103R6.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103R6]\nplatform = ststm32\nboard = genericSTM32F103R6\n\n; change microcontroller\nboard_build.mcu = stm32f103r6t6\n\n; change MCU frequency\nboard_build.f_cpu = 72000000L\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Run Command in Drone CI\nDESCRIPTION: Basic setup for running PlatformIO builds in Drone CI using the 'pio run' command. This is recommended for native PlatformIO projects targeting multiple environments.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/ci/drone.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -U platformio\npio run -e <ID_1> -e <ID_2> -e <ID_N>\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Espressif 32 Boards\nDESCRIPTION: This RST code defines a table of contents for Espressif 32 board configurations in PlatformIO documentation, listing a large number of supported boards.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/index.rst#2025-04-10_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\nEspressif 32\n------------\n\n.. toctree::\n    :maxdepth: 1\n        \n    espressif32/4d_systems_esp32s3_gen4_r8n16\n    espressif32/esp32cam\n    espressif32/alksesp32\n    espressif32/az-delivery-devkit-v4\n    espressif32/featheresp32\n    espressif32/featheresp32-s2\n    espressif32/adafruit_feather_esp32_v2\n    espressif32/adafruit_feather_esp32s2\n    espressif32/adafruit_feather_esp32s2_reversetft\n    espressif32/adafruit_feather_esp32s2_tft\n    espressif32/adafruit_feather_esp32s3\n    espressif32/adafruit_feather_esp32s3_nopsram\n    espressif32/adafruit_feather_esp32s3_reversetft\n    espressif32/adafruit_feather_esp32s3_tft\n    espressif32/adafruit_funhouse_esp32s2\n    espressif32/adafruit_itsybitsy_esp32\n    espressif32/adafruit_magtag29_esp32s2\n    espressif32/adafruit_matrixportal_esp32s3\n    espressif32/adafruit_metro_esp32s2\n    espressif32/adafruit_metro_esp32s3\n    espressif32/adafruit_qtpy_esp32\n    espressif32/adafruit_qtpy_esp32c3\n    espressif32/adafruit_qtpy_esp32s2\n    espressif32/adafruit_qtpy_esp32s3_n4r2\n    espressif32/adafruit_qtpy_esp32s3_nopsram\n    espressif32/adafruit_qualia_s3_rgb666\n    espressif32/adafruit_camera_esp32s3\n    espressif32/esp32-c3-m1i-kit\n    espressif32/nodemcu-32s2\n    espressif32/airm2m_core_esp32c3\n    espressif32/espea32\n    espressif32/arduino_nano_esp32\n    espressif32/atd147_s3\n    espressif32/ioxesp32\n    espressif32/ioxesp32ps\n    espressif32/aventen_s3_sync\n    espressif32/bpi-bit\n    espressif32/bpi_leaf_s3\n    espressif32/wifiduino32\n    espressif32/wifiduino32s3\n    espressif32/wifiduino32c3\n    espressif32/cnrs_aw2eth\n    espressif32/connaxio_espoir\n    espressif32/cytron_maker_feather_aiot_s3\n    espressif32/d-duino-32\n    espressif32/dfrobot_beetle_esp32c3\n    espressif32/dfrobot_firebeetle2_esp32e\n    espressif32/dfrobot_firebeetle2_esp32s3\n    espressif32/dfrobot_romeo_esp32s3\n    espressif32/esp32doit-devkit-v1\n    espressif32/esp32doit-espduino\n    espressif32/deneyapkart\n    espressif32/deneyapkart1A\n    espressif32/deneyapkart1Av2\n    espressif32/deneyapkartg\n    espressif32/deneyapmini\n    espressif32/deneyapminiv2\n    espressif32/denky_d4\n    espressif32/denky32\n    espressif32/minimain_esp32s2\n    espressif32/pocket_32\n    espressif32/fm-devkit\n    espressif32/pico32\n    espressif32/esp32s3_powerfeather\n    espressif32/esp32s3camlcd\n    espressif32/esp32vn-iot-uno\n    espressif32/espectro32\n    espressif32/espino32\n    espressif32/etboard\n    espressif32/esp320\n    espressif32/atmegazero_esp32s2\n    espressif32/esp-wrover-kit\n    espressif32/esp32dev\n    espressif32/esp32-c3-devkitc-02\n    espressif32/esp32-c3-devkitm-1\n    espressif32/esp32-c6-devkitc-1\n    espressif32/esp32-c6-devkitm-1\n    espressif32/esp32-pico-devkitm-2\n    espressif32/esp32-s2-kaluga-1\n    espressif32/esp32-s2-saola-1\n    espressif32/esp32s3box\n    espressif32/esp32-s3-devkitc-1\n    espressif32/esp32-s3-devkitm-1\n    espressif32/esp32s3usbotg\n    espressif32/firebeetle32\n    espressif32/piranha_esp32\n    espressif32/franzininho_wifi_esp32s2\n    espressif32/esp32-s2-franzininho\n    espressif32/franzininho_wifi_msc_esp32s2\n    espressif32/freenove_esp32_s3_wroom\n    espressif32/freenove_esp32_wrover\n    espressif32/frogboard\n    espressif32/honeylemon\n    espressif32/heltec_wifi_kit_32\n    espressif32/heltec_wifi_kit_32_v2\n    espressif32/heltec_wifi_kit_32_V3\n    espressif32/heltec_wifi_lora_32\n    espressif32/heltec_wifi_lora_32_V2\n    espressif32/heltec_wifi_lora_32_V3\n    espressif32/heltec_wireless_stick\n    espressif32/heltec_wireless_stick_lite\n    espressif32/hornbill32dev\n    espressif32/hornbill32minima\n    espressif32/inex_openkb\n    espressif32/imbrios-logsens-v1p1\n    espressif32/intorobot\n    espressif32/iotaap_magnolia\n    espressif32/kits-edu\n    espressif32/nebulas3\n    espressif32/sensesiot_weizen\n    espressif32/labplus_mpython\n    espressif32/lilka_v2\n    espressif32/lilygo-t-display\n    espressif32/lilygo-t-display-s3\n    espressif32/lilygo-t3-s3\n    espressif32/lionbit\n    espressif32/lionbits3\n    espressif32/m5stack-atoms3\n    espressif32/m5stack-core-esp32\n    espressif32/m5stack-core-esp32-16M\n    espressif32/m5stack-core2\n    espressif32/m5stack-cores3\n    espressif32/m5stack-fire\n    espressif32/m5stack-grey\n    espressif32/m5stack-stamps3\n    espressif32/m5stack-station\n    espressif32/m5stack-timer-cam\n    espressif32/m5stack-atom\n    espressif32/m5stack-coreink\n    espressif32/m5stamp-pico\n    espressif32/m5stick-c\n    espressif32/mgbot-iotik32a\n    espressif32/mgbot-iotik32b\n    espressif32/mhetesp32devkit\n    espressif32/mhetesp32minikit\n    espressif32/magicbit\n    espressif32/kb32-ft\n    espressif32/nano32\n    espressif32/microduino-core-esp32\n    espressif32/motorgo_mini_1\n    espressif32/redpill_esp32s3\n    espressif32/namino_arancio\n    espressif32/namino_rosso\n    espressif32/node32s\n    espressif32/nodemcu-32s\n    espressif32/quantum\n    espressif32/odroid_esp32\n    espressif32/esp32-devkitlipo\n    espressif32/esp32-evb\n    espressif32/esp32-gateway\n    espressif32/esp32-pro\n    espressif32/esp32-poe\n    espressif32/esp32-poe-iso\n    espressif32/oroca_edubot\n    espressif32/onehorse32dev\n    espressif32/healthypi4\n    espressif32/pycom_gpy\n    espressif32/lopy\n    espressif32/lopy4\n    espressif32/wipy3\n    espressif32/qchip\n    espressif32/rymcu-esp32-c3-devkitm-1\n    espressif32/rymcu-esp32-devkitc\n    espressif32/rymcu-esp32-s3-devkitc-1\n    espressif32/roboheart_hercules\n    espressif32/s_odi_ultra\n    espressif32/sg-o_airMon\n    espressif32/watchy\n    espressif32/edgebox-esp-100\n    espressif32/seeed_xiao_esp32c3\n    espressif32/seeed_xiao_esp32s3\n    espressif32/wesp32\n    espressif32/bee_data_logger\n    espressif32/bee_motion\n    espressif32/bee_motion_mini\n    espressif32/bee_motion_s3\n    espressif32/bee_s3\n    espressif32/sparkfun_esp32_iot_redboard\n    espressif32/sparkfun_esp32micromod\n    espressif32/esp32thing\n    espressif32/esp32thing_plus\n    espressif32/sparkfun_esp32s2_thing_plus_c\n    espressif32/sparkfun_esp32s2_thing_plus\n    espressif32/sparkfun_lora_gateway_1-channel\n    espressif32/dpu_esp32\n    espressif32/tamc_termod_s3\n    espressif32/ttgo-lora32-v1\n    espressif32/ttgo-lora32-v2\n    espressif32/ttgo-lora32-v21\n    espressif32/ttgo-t-beam\n    espressif32/ttgo-t-oi-plus\n    espressif32/ttgo-t-watch\n    espressif32/ttgo-t1\n    espressif32/ttgo-t7-v13-mini32\n    espressif32/ttgo-t7-v14-mini32\n    espressif32/trueverit-iot-driver\n    espressif32/trueverit-iot-driver-mk2\n    espressif32/trueverit-iot-driver-mk3\n    espressif32/turta_iot_node\n    espressif32/um_feathers2\n    espressif32/um_feathers2_neo\n    espressif32/um_feathers3\n    espressif32/um_nanos3\n    espressif32/um_pros3\n    espressif32/um_rmp\n    espressif32/tinypico\n    espressif32/um_tinys2\n    espressif32/um_tinys3\n    espressif32/valtrack_v4_mfw_esp32_c3\n    espressif32/valtrack_v4_vts_esp32_c3\n    espressif32/vintlabs-devkit-v1\n    espressif32/wemos_d1_mini32\n    espressif32/wemos_d1_uno32\n    espressif32/lolin_c3_mini\n    espressif32/lolin_d32\n    espressif32/lolin_d32_pro\n    espressif32/lolin_s2_mini\n    espressif32/lolin_s2_pico\n    espressif32/lolin_s3\n    espressif32/lolin_s3_mini\n    espressif32/lolin_s3_pro\n    espressif32/lolin32\n    espressif32/lolin32_lite\n    espressif32/weactstudio_esp32c3coreboard\n    espressif32/wemosbat\n    espressif32/widora-air\n    espressif32/wt32-eth01\n    espressif32/xinabox_cw02\n    espressif32/nscreen-32\n    espressif32/micros2\n    espressif32/iotbusio\n    espressif32/iotbusproteus\n    espressif32/sensebox_mcu_esp32s2\n    espressif32/nina_w10\n    espressif32/upesy_wroom\n    espressif32/upesy_wrover\n    espressif32/unphone7\n    espressif32/unphone8\n    espressif32/unphone9\n```\n\n----------------------------------------\n\nTITLE: Configuring WiringPi Framework in PlatformIO\nDESCRIPTION: This snippet shows how to configure the WiringPi framework in a PlatformIO project's configuration file. It sets the framework option to 'wiringpi' in the environment settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/frameworks/wiringpi.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nframework = wiringpi\n```\n\n----------------------------------------\n\nTITLE: Suppressing unused function warnings in Arduino projects\nDESCRIPTION: Example of how to suppress specific warnings in C/C++ code using inline suppression comments. The example shows how to suppress 'unusedFunction' warnings for Arduino's setup and loop functions.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/advanced/static-code-analysis/tools/cppcheck.rst#2025-04-10_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n// cppcheck-suppress unusedFunction\nvoid setup()\n{\n  ...\n}\n\n// cppcheck-suppress unusedFunction\nvoid loop()\n{\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Variables for PlatformIO CI Command\nDESCRIPTION: Environment variable configuration for PlatformIO CI command. Specifies source files or directories to be built.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/ci/drone.rst#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nPLATFORMIO_CI_SRC=path/to/source/file.c\nPLATFORMIO_CI_SRC=path/to/source/file.ino\nPLATFORMIO_CI_SRC=path/to/source/directory\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic N78E517 Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to set up the Generic N78E517 board in the PlatformIO project configuration file. It specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/N78E517.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:N78E517]\nplatform = intel_mcs51\nboard = N78E517\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic FRDM-KL46Z Board Environment in PlatformIO\nDESCRIPTION: Basic configuration for the Freescale Kinetis FRDM-KL46Z board in platformio.ini. This snippet defines the environment using the freescalekinetis platform with the board ID 'frdm_kl46z'.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/freescalekinetis/frdm_kl46z.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:frdm_kl46z]\nplatform = freescalekinetis\nboard = frdm_kl46z\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the TinyS3 board, using esptool as the default protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/um_tinys3.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:um_tinys3]\nplatform = espressif32\nboard = um_tinys3\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Basic ESP32-EVB Board Configuration\nDESCRIPTION: Basic configuration setup for OLIMEX ESP32-EVB board using PlatformIO. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32-evb.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32-evb]\nplatform = espressif32\nboard = esp32-evb\n```\n\n----------------------------------------\n\nTITLE: Customizing Seeeduino LoRaWAN Board Settings\nDESCRIPTION: Examples of how to override default Seeeduino LoRaWAN settings like microcontroller type and MCU frequency in platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/seeeduino_lorawan.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:seeeduino_lorawan]\nplatform = atmelsam\nboard = seeeduino_lorawan\n\n; change microcontroller\nboard_build.mcu = samd21g18a\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Basic CurrentRanger Board Configuration in PlatformIO\nDESCRIPTION: Configuration snippet for setting up the CurrentRanger board in platformio.ini using the atmelsam platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/current_ranger.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:current_ranger]\nplatform = atmelsam\nboard = current_ranger\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the PHYTEC reel board v2.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/reel_board_v2.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:reel_board_v2]\nplatform = nordicnrf52\nboard = reel_board_v2\n\nupload_protocol = cmsis-dap\n```\n\n----------------------------------------\n\nTITLE: Customizing WEMOS LOLIN32 Board Settings in PlatformIO\nDESCRIPTION: Extended PlatformIO configuration showing how to override default board settings such as microcontroller type and CPU frequency for the WEMOS LOLIN32 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/lolin32.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:lolin32]\nplatform = espressif32\nboard = lolin32\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Listing ESP32, STM32, and Nordic Board Specifications in reStructuredText\nDESCRIPTION: This code snippet is a reStructuredText table listing various microcontroller boards. It includes details such as board reference, platform, chip location, processor type, CPU speed, flash memory, and RAM for each board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/jlink.rst#2025-04-10_snippet_9\n\nLANGUAGE: reStructuredText\nCODE:\n```\n    * - :ref:`board_espressif32_wemos_d1_mini32`\n      - :ref:`platform_espressif32`\n      - External\n      - ESP32\n      - 240MHz\n      - 4MB\n      - 320KB\n    * - :ref:`board_espressif32_wemos_d1_uno32`\n      - :ref:`platform_espressif32`\n      - External\n      - ESP32\n      - 240MHz\n      - 4MB\n      - 320KB\n    * - :ref:`board_espressif32_lolin_c3_mini`\n      - :ref:`platform_espressif32`\n      - External\n      - ESP32C3\n      - 160MHz\n      - 4MB\n      - 320KB\n    * - :ref:`board_espressif32_lolin_d32`\n      - :ref:`platform_espressif32`\n      - External\n      - ESP32\n      - 240MHz\n      - 4MB\n      - 320KB\n    * - :ref:`board_espressif32_lolin_d32_pro`\n      - :ref:`platform_espressif32`\n      - External\n      - ESP32\n      - 240MHz\n      - 4MB\n      - 320KB\n    * - :ref:`board_espressif32_lolin_s2_mini`\n      - :ref:`platform_espressif32`\n      - External\n      - ESP32S2\n      - 240MHz\n      - 4MB\n      - 320KB\n    * - :ref:`board_espressif32_lolin_s2_pico`\n      - :ref:`platform_espressif32`\n      - External\n      - ESP32S2\n      - 240MHz\n      - 4MB\n      - 320KB\n    * - :ref:`board_espressif32_lolin_s3`\n      - :ref:`platform_espressif32`\n      - External\n      - ESP32S3\n      - 240MHz\n      - 16MB\n      - 320KB\n    * - :ref:`board_espressif32_lolin_s3_mini`\n      - :ref:`platform_espressif32`\n      - External\n      - ESP32S3\n      - 240MHz\n      - 4MB\n      - 320KB\n    * - :ref:`board_espressif32_lolin_s3_pro`\n      - :ref:`platform_espressif32`\n      - External\n      - ESP32S3\n      - 240MHz\n      - 16MB\n      - 320KB\n    * - :ref:`board_espressif32_lolin32`\n      - :ref:`platform_espressif32`\n      - External\n      - ESP32\n      - 240MHz\n      - 4MB\n      - 320KB\n    * - :ref:`board_espressif32_lolin32_lite`\n      - :ref:`platform_espressif32`\n      - External\n      - ESP32\n      - 240MHz\n      - 4MB\n      - 320KB\n    * - :ref:`board_nordicnrf51_waveshare_ble400`\n      - :ref:`platform_nordicnrf51`\n      - External\n      - NRF51822\n      - 32MHz\n      - 256KB\n      - 32KB\n    * - :ref:`board_ststm32_waveshare_open103z`\n      - :ref:`platform_ststm32`\n      - External\n      - STM32F103ZET6\n      - 72MHz\n      - 512KB\n      - 64KB\n    * - :ref:`board_ststm32_blackpill_f401cc`\n      - :ref:`platform_ststm32`\n      - External\n      - STM32F401CCU6\n      - 84MHz\n      - 256KB\n      - 64KB\n    * - :ref:`board_ststm32_blackpill_f411ce`\n      - :ref:`platform_ststm32`\n      - External\n      - STM32F411CEU6\n      - 100MHz\n      - 512KB\n      - 128KB\n    * - :ref:`board_ststm32_blackpill_f401ce`\n      - :ref:`platform_ststm32`\n      - External\n      - STM32F401CEU6\n      - 84MHz\n      - 512KB\n      - 96KB\n    * - :ref:`board_espressif32_weactstudio_esp32c3coreboard`\n      - :ref:`platform_espressif32`\n      - External\n      - ESP32C3\n      - 160MHz\n      - 384KB\n      - 400KB\n    * - :ref:`board_ststm32_weact_mini_h743vitx`\n      - :ref:`platform_ststm32`\n      - External\n      - STM32H743VIT6\n      - 480MHz\n      - 2MB\n      - 512KB\n    * - :ref:`board_ststm32_weact_mini_h750vbtx`\n      - :ref:`platform_ststm32`\n      - External\n      - STM32H750VBT6\n      - 480MHz\n      - 512KB\n      - 128KB\n    * - :ref:`board_espressif32_wemosbat`\n      - :ref:`platform_espressif32`\n      - External\n      - ESP32\n      - 240MHz\n      - 4MB\n      - 320KB\n    * - :ref:`board_espressif32_wt32-eth01`\n      - :ref:`platform_espressif32`\n      - External\n      - ESP32\n      - 240MHz\n      - 4MB\n      - 320KB\n    * - :ref:`board_ststm32_wraith32_v1`\n      - :ref:`platform_ststm32`\n      - External\n      - STM32F051K6\n      - 48MHz\n      - 32KB\n      - 7.75KB\n    * - :ref:`board_espressif32_xinabox_cw02`\n      - :ref:`platform_espressif32`\n      - External\n      - ESP32\n      - 240MHz\n      - 4MB\n      - 320KB\n    * - :ref:`board_nordicnrf52_dwm1001_dev`\n      - :ref:`platform_nordicnrf52`\n      - On-board\n      - NRF52832\n      - 64MHz\n      - 512KB\n      - 64KB\n    * - :ref:`board_nordicnrf52_hackaBLE`\n      - :ref:`platform_nordicnrf52`\n      - External\n      - NRF52832\n      - 64MHz\n      - 512KB\n      - 64KB\n    * - :ref:`board_espressif32_micros2`\n      - :ref:`platform_espressif32`\n      - External\n      - ESP32S2\n      - 240MHz\n      - 16MB\n      - 320KB\n    * - :ref:`board_nordicnrf51_ng_beacon`\n      - :ref:`platform_nordicnrf51`\n      - External\n      - NRF51822\n      - 16MHz\n      - 256KB\n      - 32KB\n    * - :ref:`board_espressif32_iotbusio`\n      - :ref:`platform_espressif32`\n      - External\n      - ESP32\n      - 240MHz\n      - 4MB\n      - 320KB\n    * - :ref:`board_espressif32_iotbusproteus`\n      - :ref:`platform_espressif32`\n      - External\n      - ESP32\n      - 240MHz\n      - 4MB\n      - 320KB\n    * - :ref:`board_ststm32_sakuraio_evb_01`\n      - :ref:`platform_ststm32`\n      - On-board\n      - STM32F411RET6\n      - 100MHz\n      - 1MB\n      - 128KB\n    * - :ref:`board_espressif32_sensebox_mcu_esp32s2`\n      - :ref:`platform_espressif32`\n      - External\n      - ESP32S2\n      - 240MHz\n      - 4MB\n      - 320KB\n    * - :ref:`board_nordicnrf52_ublox_bmd345eval_nrf52840`\n      - :ref:`platform_nordicnrf52`\n      - On-board\n      - NRF52840\n      - 64MHz\n      - 1MB\n      - 256KB\n    * - :ref:`board_ststm32_ublox_c030_n211`\n      - :ref:`platform_ststm32`\n      - External\n      - STM32F437VG\n      - 180MHz\n      - 1MB\n      - 256KB\n    * - :ref:`board_ststm32_ublox_c030_r410m`\n      - :ref:`platform_ststm32`\n      - On-board\n      - STM32F437VG\n      - 180MHz\n      - 1MB\n      - 256KB\n    * - :ref:`board_ststm32_ublox_c030_u201`\n      - :ref:`platform_ststm32`\n      - External\n      - STM32F437VG\n      - 180MHz\n      - 1MB\n      - 256KB\n    * - :ref:`board_nordicnrf52_ublox_evk_nina_b1`\n      - :ref:`platform_nordicnrf52`\n      - On-board\n      - NRF52832\n      - 64MHz\n      - 512KB\n      - 64KB\n    * - :ref:`board_ststm32_ublox_evk_odin_w2`\n      - :ref:`platform_ststm32`\n      - External\n      - STM32F439ZIY6\n      - 168MHz\n      - 2MB\n      - 256KB\n    * - :ref:`board_ststm32_mtb_ublox_odin_w2`\n      - :ref:`platform_ststm32`\n      - On-board\n      - STM32F439ZIY6\n      - 168MHz\n      - 2MB\n      - 256KB\n    * - :ref:`board_espressif32_upesy_wroom`\n      - :ref:`platform_espressif32`\n      - External\n      - ESP32\n      - 240MHz\n      - 4MB\n      - 320KB\n    * - :ref:`board_espressif32_upesy_wrover`\n      - :ref:`platform_espressif32`\n      - External\n      - ESP32\n      - 240MHz\n      - 4MB\n      - 320KB\n    * - :ref:`board_espressif32_unphone7`\n      - :ref:`platform_espressif32`\n      - External\n      - ESP32\n      - 240MHz\n      - 4MB\n      - 320KB\n    * - :ref:`board_espressif32_unphone8`\n      - :ref:`platform_espressif32`\n      - External\n      - ESP32S3\n      - 240MHz\n      - 7.94MB\n      - 2.31MB\n    * - :ref:`board_espressif32_unphone9`\n      - :ref:`platform_espressif32`\n      - External\n      - ESP32S3\n      - 240MHz\n      - 7.94MB\n      - 8.31MB\n```\n\n----------------------------------------\n\nTITLE: Installing Xcode Command Line Tools on macOS\nDESCRIPTION: Command to install the Xcode Command Line Tools on macOS, which includes the GCC compiler and other development tools needed for native development.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/native_extra.rst#2025-04-10_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nxcode-select --install\n```\n\n----------------------------------------\n\nTITLE: Configuring MISRA compliance check with JSON configuration\nDESCRIPTION: JSON configuration file for enabling the MISRA addon in Cppcheck. This configuration specifies the MISRA script path and points to a file containing MISRA rule descriptions.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/advanced/static-code-analysis/tools/cppcheck.rst#2025-04-10_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"script\": \"addons/misra.py\",\n  \"args\": [\"--rule-texts=misra-rules.txt\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing WEMOS D1 MINI ESP32 Hardware Settings in PlatformIO\nDESCRIPTION: Advanced configuration showing how to override default board settings such as microcontroller type and CPU frequency. This allows for customization of the build environment beyond the default board configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/wemos_d1_mini32.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:wemos_d1_mini32]\nplatform = espressif32\nboard = wemos_d1_mini32\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for IAP15W205S Board\nDESCRIPTION: Basic configuration for the IAP15W205S board in platformio.ini file. This sets up the project environment with the intel_mcs51 platform and specifies the target board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/IAP15W205S.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:IAP15W205S]\nplatform = intel_mcs51\nboard = IAP15W205S\n```\n\n----------------------------------------\n\nTITLE: Customizing AT90CAN64 Board Parameters in PlatformIO\nDESCRIPTION: Advanced configuration example showing how to override default AT90CAN64 settings in the PlatformIO project configuration file, including changing the microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/AT90CAN64.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:AT90CAN64]\nplatform = atmelavr\nboard = AT90CAN64\n\n; change microcontroller\nboard_build.mcu = at90can64\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Seeed Studio XIAO ESP32C3 Board Settings\nDESCRIPTION: Example of overriding default board settings, such as changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/seeed_xiao_esp32c3.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:seeed_xiao_esp32c3]\nplatform = espressif32\nboard = seeed_xiao_esp32c3\n\n; change microcontroller\nboard_build.mcu = esp32c3\n\n; change MCU frequency\nboard_build.f_cpu = 160000000L\n```\n\n----------------------------------------\n\nTITLE: Defining RestructuredText Substitution for PlatformIO Core\nDESCRIPTION: This snippet defines a RestructuredText substitution for 'PlatformIO Core' to be used throughout the document. It allows for consistent formatting and easy updates.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/installation/index.rst#2025-04-10_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. |PIOCore| replace:: **PlatformIO Core**\n```\n\n----------------------------------------\n\nTITLE: Configuring TUMPA Debug Tool in PlatformIO Configuration File\nDESCRIPTION: Example configuration for setting up TUMPA as a debugging tool in the PlatformIO project configuration file (platformio.ini). This snippet shows how to specify TUMPA as the debug tool for a project environment.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/tumpa.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = ...\nboard = ...\ndebug_tool = tumpa\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Extra Commands in PlatformIO INI File\nDESCRIPTION: This snippet demonstrates how to set extra debug commands in the PlatformIO configuration file. It includes examples of setting breakpoints and loading a custom .gdbinit file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/env/options/debug/debug_extra_cmds.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:debug]\nplatform = ...\nboard = ...\ndebug_extra_cmds =\n  break main.cpp:13\n  break foo.cpp:100\n  source .gdbinit\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU and Frequency Settings\nDESCRIPTION: Extended configuration example showing how to override default board settings like microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/blue_f407ve_mini.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:blue_f407ve_mini]\nplatform = ststm32\nboard = blue_f407ve_mini\n\n; change microcontroller\nboard_build.mcu = stm32f407vet6\n\n; change MCU frequency\nboard_build.f_cpu = 168000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Stable Version of Silicon Labs EFM32 Platform in platformio.ini\nDESCRIPTION: Example platformio.ini configuration for using a stable version of the Silicon Labs EFM32 development platform. Shows how to specify the latest stable version or pin to a specific version.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/siliconlabsefm32.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n; Latest stable version, NOT recommended\n; Pin the version as shown below\n[env:latest_stable]\nplatform = siliconlabsefm32\nboard = ...\n\n; Specific version\n[env:custom_stable]\nplatform = siliconlabsefm32@x.y.z\nboard = ...\n```\n\n----------------------------------------\n\nTITLE: Example Output of Remote Device List Command\nDESCRIPTION: Shows the expected output format when listing remote devices, including hardware IDs and descriptions of connected devices.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/remote/cmd_device.rst#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> pio remote device list\n\nAgent innomac.local\n===================\n/dev/cu.Bluetooth-Incoming-Port\n-------------------------------\nHardware ID: n/a\nDescription: n/a\n/dev/cu.obd2ecu-SPPDev\n----------------------\nHardware ID: n/a\nDescription: n/a\n/dev/cu.usbmodemFA1431\n----------------------\nHardware ID: USB VID:PID=2A03:0043 SER=75435353038351015271 LOCATION=250-1.4.3\nDescription: Arduino Uno\n/dev/cu.usbserial-A6004003\n--------------------------\nHardware ID: USB VID:PID=0403:6001 SER=A6004003 LOCATION=253-1.3.1\nDescription: FT232R USB UART - FT232R USB UART\n/dev/cu.SLAB_USBtoUART\n----------------------\nHardware ID: USB VID:PID=10C4:EA60 SER=0001 LOCATION=253-1.3.2\nDescription: CP2102 USB to UART Bridge Controller - CP2102 USB to UART Bridge Controller\n/dev/cu.usbmodem589561\n----------------------\nHardware ID: USB VID:PID=16C0:0483 SER=589560 LOCATION=250-1.4.1\nDescription: USB Serial\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for STM32H750VBT6\nDESCRIPTION: Configuration to change the upload protocol for the STM32H750VBT6 board. The example sets it to 'serial', which is also the default.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32H750VB.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32H750VB]\nplatform = ststm32\nboard = genericSTM32H750VB\n\nupload_protocol = serial\n```\n\n----------------------------------------\n\nTITLE: Configuring Stable TI TIVA Platform Version in platformio.ini\nDESCRIPTION: Shows how to configure the platformio.ini file to use a stable version of the TI TIVA platform. It includes options for using the latest stable version or pinning to a specific version.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/titiva.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n; Latest stable version, NOT recommended\n; Pin the version as shown below\n[env:latest_stable]\nplatform = titiva\nboard = ...\n\n; Specific version\n[env:custom_stable]\nplatform = titiva@x.y.z\nboard = ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Protocol for Frog Board ESP32\nDESCRIPTION: Example of specifying the upload protocol for the Frog Board ESP32. The default protocol is 'esptool', but this can be explicitly set in the configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/frogboard.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:frogboard]\nplatform = espressif32\nboard = frogboard\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring Stable Release Version in PlatformIO\nDESCRIPTION: Configuration examples for using stable releases of the NXP i.MX RT platform in platformio.ini. Shows how to use the latest stable version or pin to a specific version number.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/nxpimxrt.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n; Latest stable version, NOT recommended\n; Pin the version as shown below\n[env:latest_stable]\nplatform = nxpimxrt\nboard = ...\n\n; Specific version\n[env:custom_stable]\nplatform = nxpimxrt@x.y.z\nboard = ...\n```\n\n----------------------------------------\n\nTITLE: Basic PVS-Studio Configuration in PlatformIO\nDESCRIPTION: Minimal configuration required to enable PVS-Studio tool in PlatformIO project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/advanced/static-code-analysis/tools/pvs-studio.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = ...\nboard = ...\ncheck_tool = pvs-studio\n```\n\n----------------------------------------\n\nTITLE: Configuring MSP Debug for Both Debugging and Uploading\nDESCRIPTION: Configuration to use MSP Debug for both debugging and firmware uploading in the PlatformIO project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/mspdebug.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = ...\nboard = ...\ndebug_tool = mspdebug\nupload_protocol = mspdebug\n```\n\n----------------------------------------\n\nTITLE: Defining reference label for piocore in reStructuredText\nDESCRIPTION: This snippet defines a reference label 'piocore' that can be used elsewhere in the document to link to this section.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/index.rst#2025-04-10_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _piocore:\n```\n\n----------------------------------------\n\nTITLE: Configuring CMSIS Framework in PlatformIO\nDESCRIPTION: Shows how to enable the CMSIS framework in the PlatformIO project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/frameworks/cmsis.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:your_environment]\nframework = cmsis\n```\n\n----------------------------------------\n\nTITLE: Basic Project Initialization Command\nDESCRIPTION: Basic command syntax for initializing a PlatformIO project with available options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/project/cmd_init.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio project init [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Connaxio Espoir in PlatformIO\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the Connaxio Espoir board. The default protocol is 'esptool' but this can be changed as shown.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/connaxio_espoir.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:connaxio_espoir]\nplatform = espressif32\nboard = connaxio_espoir\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring ESP8266 Non-OS SDK Framework in platformio.ini\nDESCRIPTION: This snippet shows how to configure the ESP8266 Non-OS SDK framework in the platformio.ini file for a PlatformIO project.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/frameworks/esp8266-nonos-sdk.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:your_env_name]\nplatform = espressif8266\nframework = esp8266-nonos-sdk\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU Settings\nDESCRIPTION: Extended configuration for ST Nucleo F446ZE including microcontroller and frequency settings\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f446ze.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f446ze]\nplatform = ststm32\nboard = nucleo_f446ze\n\n; change microcontroller\nboard_build.mcu = stm32f446zet6\n\n; change MCU frequency\nboard_build.f_cpu = 180000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing WT32-ETH01 Board Parameters\nDESCRIPTION: Example showing how to override default board settings like microcontroller type and CPU frequency using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/wt32-eth01.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:wt32-eth01]\nplatform = espressif32\nboard = wt32-eth01\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Cricket-L082CZ Board in PlatformIO\nDESCRIPTION: This snippet shows how to configure the Cricket-L082CZ board in the PlatformIO project configuration file. It sets the platform to STM32 and specifies the board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/cricket_l082cz.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:cricket_l082cz]\nplatform = ststm32\nboard = cricket_l082cz\n```\n\n----------------------------------------\n\nTITLE: Setting Flash Mode for ESP8266 in PlatformIO\nDESCRIPTION: Configures the flash chip interface mode using board_build.flash_mode. This parameter is stored in the binary image header and is used by the ROM bootloader to communicate with the flash chip.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/espressif8266_extra.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nboard_build.flash_mode = qio\n```\n\n----------------------------------------\n\nTITLE: Configuring CMSIS-DAP debugging tool in platformio.ini\nDESCRIPTION: This code snippet shows how to configure the CMSIS-DAP debugging tool in the project's platformio.ini file. It sets the debug_tool option to cmsis-dap.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/cmsis-dap.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = ...\nboard = ...\ndebug_tool = cmsis-dap\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Run Configuration for CircleCI\nDESCRIPTION: Basic CircleCI configuration using pio run command for native PlatformIO projects. Uses Python orb and installs PlatformIO via pip.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/ci/circleci.rst#2025-04-10_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 2.1\norbs:\n  python: circleci/python@1.4.0\n\njobs:\n  build:\n    executor: python/default\n    steps:\n      - checkout  # checkout source code to working directory\n      - run:\n          name: Install PlatformIO\n          command: pip install --upgrade platformio\n      - run:\n          name: Compile Project\n          command: pio run\n\nworkflows:\n  main:\n    jobs:\n      - build\n```\n\n----------------------------------------\n\nTITLE: Advanced N79E815 Board Configuration with Custom Settings\nDESCRIPTION: Extended configuration for the N79E815 board with custom microcontroller and frequency settings using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/N79E815.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:N79E815]\nplatform = intel_mcs51\nboard = N79E815\n\n; change microcontroller\nboard_build.mcu = n79e815\n\n; change MCU frequency\nboard_build.f_cpu = 22118400L\n```\n\n----------------------------------------\n\nTITLE: Board Specifications Table in ReStructuredText Format\nDESCRIPTION: A table formatted in ReStructuredText (RST) markup listing development board specifications. The table includes details about various boards from different manufacturers with information about their platforms, processors, clock speeds, and memory configurations.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/cmsis-dap.rst#2025-04-10_snippet_3\n\nLANGUAGE: markup\nCODE:\n```\n* - :ref:`board_espressif32_xinabox_cw02`\n      - :ref:`platform_espressif32`\n      - External\n      - ESP32\n      - 240MHz\n      - 4MB\n      - 320KB\n    * - :ref:`board_nordicnrf52_dwm1001_dev`\n      - :ref:`platform_nordicnrf52`\n      - On-board\n      - NRF52832\n      - 64MHz\n      - 512KB\n      - 64KB\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of PlatformIO Device Monitor Command\nDESCRIPTION: Shows the basic command syntax for using the PlatformIO device monitor for serial communication.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/device/cmd_monitor.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio device monitor [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Custom microS2 MCU and Frequency Configuration\nDESCRIPTION: Example showing how to override default microcontroller and frequency settings for the microS2 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/micros2.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:micros2]\nplatform = espressif32\nboard = micros2\n\n; change microcontroller\nboard_build.mcu = esp32s2\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration for PlatformIO\nDESCRIPTION: Basic configuration setup for Adafruit Feather Bluefruit Sense board in platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/adafruit_feather_nrf52840_sense.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_feather_nrf52840_sense]\nplatform = nordicnrf52\nboard = adafruit_feather_nrf52840_sense\n```\n\n----------------------------------------\n\nTITLE: Using PlatformIO Remote Run Command\nDESCRIPTION: Demonstrates the basic usage of the 'pio remote run' command and how to specify a PlatformIO Remote Agent.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/remote/cmd_run.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio remote run [OPTIONS]\n\n# process environments using specified PlatformIO Remote Agent\npio remote --agent NAME run [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Configuring Adafruit NeoKey Trinkey Board in PlatformIO\nDESCRIPTION: This snippet shows how to configure the Adafruit NeoKey Trinkey board in the PlatformIO project configuration file. It sets the platform to atmelsam and the board to adafruit_neokeytrinkey_m0.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_neokeytrinkey_m0.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_neokeytrinkey_m0]\nplatform = atmelsam\nboard = adafruit_neokeytrinkey_m0\n```\n\n----------------------------------------\n\nTITLE: Initializing PlatformIO Project for VIM\nDESCRIPTION: Command to initialize a new PlatformIO project with VIM IDE integration. Requires specifying a target board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/ide/vim.rst#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npio project init --ide vim --board <ID>\n```\n\n----------------------------------------\n\nTITLE: Advanced ATtiny827 Board Configuration with Custom Settings\nDESCRIPTION: Extended configuration for ATtiny827 board with custom microcontroller and frequency settings. Demonstrates how to override default board settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/ATtiny827.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATtiny827]\nplatform = atmelmegaavr\nboard = ATtiny827\n\n; change microcontroller\nboard_build.mcu = attiny827\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Unexpected Maker FeatherS3 Board Settings\nDESCRIPTION: Example of overriding default board settings such as microcontroller and CPU frequency using board_*** options in platformio.ini.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/um_feathers3.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:um_feathers3]\nplatform = espressif32\nboard = um_feathers3\n\n; change microcontroller\nboard_build.mcu = esp32s3\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Using PlatformIO Account Logout Command in Bash\nDESCRIPTION: This command is used to log out of a PlatformIO account. It terminates the current user session and removes authentication credentials.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/account/cmd_logout.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio account logout\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic FeatherS2 Environment in PlatformIO\nDESCRIPTION: Basic configuration for the Unexpected Maker FeatherS2 board in the PlatformIO project's configuration file. This snippet sets up the minimal required settings to work with the board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/um_feathers2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:um_feathers2]\nplatform = espressif32\nboard = um_feathers2\n```\n\n----------------------------------------\n\nTITLE: Uninstalling PlatformIO Core from pip and Homebrew installations\nDESCRIPTION: Commands to uninstall PlatformIO Core depending on the installation method. For pip installations, use the pip uninstall commands. For macOS users who installed via Homebrew, use the brew uninstall command.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/installation/uninstall.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# uninstall standalone PlatformIO Core installed via `pip`\npip uninstall platformio\npython -m pip uninstall platformio\n\n# uninstall Homebrew's PlatformIO Core (only macOS users if you installed it via Homebrew before)\nbrew uninstall platformio\n```\n\n----------------------------------------\n\nTITLE: Board Configuration Table in RST Format\nDESCRIPTION: A table listing development board configurations including specifications like processor type, clock speed, flash memory, and RAM. The data is formatted in ReStructuredText (RST) table format.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/jlink.rst#2025-04-10_snippet_5\n\nLANGUAGE: rst\nCODE:\n```\n* - :ref:`board_ststm32_opta_m4`\n      - :ref:`platform_ststm32`\n      - External\n      - STM32H747XIH6\n      - 480MHz\n      - 1MB\n      - 287.35KB\n```\n\n----------------------------------------\n\nTITLE: Advanced AVR64DB64 Board Configuration with Custom Settings\nDESCRIPTION: Extended PlatformIO configuration for AVR64DB64 board with custom microcontroller and frequency settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/AVR64DB64.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:AVR64DB64]\nplatform = atmelmegaavr\nboard = AVR64DB64\n\n; change microcontroller\nboard_build.mcu = avr64db64\n\n; change MCU frequency\nboard_build.f_cpu = 24000000L\n```\n\n----------------------------------------\n\nTITLE: Custom MCU Configuration for ESP32-S3 Reverse TFT\nDESCRIPTION: Extended PlatformIO configuration showing how to customize microcontroller settings like MCU model and frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/adafruit_feather_esp32s3_reversetft.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_feather_esp32s3_reversetft]\nplatform = espressif32\nboard = adafruit_feather_esp32s3_reversetft\n\n; change microcontroller\nboard_build.mcu = esp32s3\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic STC8G1K17T Board Settings in PlatformIO\nDESCRIPTION: Demonstrates how to configure a basic PlatformIO environment for the STC8G1K17T board. This snippet shows the minimal required configuration to target this board in a project's platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8G1K17T.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8G1K17T]\nplatform = intel_mcs51\nboard = STC8G1K17T\n```\n\n----------------------------------------\n\nTITLE: Custom MCU and Frequency Configuration\nDESCRIPTION: Extended PlatformIO configuration showing how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/shakti/artix7_35t.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:artix7_35t]\nplatform = shakti\nboard = artix7_35t\n\n; change microcontroller\nboard_build.mcu = E-Class\n\n; change MCU frequency\nboard_build.f_cpu = 50000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO Environment for STC12C5A32S2\nDESCRIPTION: This snippet shows how to configure a PlatformIO environment for the Generic STC12C5A32S2 board in the project configuration file. It sets the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC12C5A32S2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC12C5A32S2]\nplatform = intel_mcs51\nboard = STC12C5A32S2\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO System Prune Command Usage\nDESCRIPTION: Shows the basic command syntax for pruning unused data in PlatformIO\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/system/cmd_prune.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio system prune\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Server Ready Pattern in PlatformIO\nDESCRIPTION: Examples showing how to configure the debug_server_ready_pattern option in a PlatformIO project's configuration file. Demonstrates both string matching and regular expression patterns for detecting when the debug server is ready.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/env/options/debug/debug_server_ready_pattern.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:custom_debug_server_ready_pattern]\n...\n\n; match by string\ndebug_server_ready_pattern = Waiting for GDB connection\n\n; match by regular expression\ndebug_server_ready_pattern = -.*Listening on port \\d+ for gdb connections\n```\n\n----------------------------------------\n\nTITLE: Advanced ESP32-S3 Board Configuration with MCU Settings\nDESCRIPTION: Extended configuration showing how to customize microcontroller and frequency settings for the ESP32-S3-DevKitC-1 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32-s3-devkitc-1.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32-s3-devkitc-1]\nplatform = espressif32\nboard = esp32-s3-devkitc-1\n\n; change microcontroller\nboard_build.mcu = esp32s3\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Defining RestructuredText Table of Contents for Installation\nDESCRIPTION: This snippet creates a table of contents for the installation section using RestructuredText directives. It lists various subsections related to PlatformIO Core installation and configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/installation/index.rst#2025-04-10_snippet_2\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n    :maxdepth: 2\n\n    requirements\n    methods/index\n    development-version\n    shell-commands\n    udev-rules\n    integration\n    proxy-configuration\n    troubleshooting\n    uninstall\n```\n\n----------------------------------------\n\nTITLE: Adding Owner to PlatformIO Organization Example\nDESCRIPTION: Example showing how to add a user named 'bob' as an owner of the 'platformio' organization, with the command output message.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/org/cmd_add.rst#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> pio org add platformio bob\nThe new owner \"bob\" has been successfully added to the \"platformio\" organization.\n```\n\n----------------------------------------\n\nTITLE: Configuring Atmel-ICE as a Debugging Tool in platformio.ini\nDESCRIPTION: This code snippet shows how to configure the Atmel-ICE as the debugging tool in a PlatformIO project configuration file. This allows using Atmel-ICE for debugging ARM Cortex-M based microcontrollers.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/atmel-ice.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = ...\nboard = ...\ndebug_tool = atmel-ice\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration for OROCA EduBot\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the board. Demonstrates setting esptool as the upload method.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/oroca_edubot.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:oroca_edubot]\nplatform = espressif32\nboard = oroca_edubot\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Project Environment for ST Nucleo F767ZI in PlatformIO\nDESCRIPTION: Basic platformio.ini configuration for an ST Nucleo F767ZI project. This sets up the essential environment with the STM32 platform and specifies the board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f767zi.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f767zi]\nplatform = ststm32\nboard = nucleo_f767zi\n```\n\n----------------------------------------\n\nTITLE: Generating Board Configuration Table in reStructuredText\nDESCRIPTION: This RST code snippet creates a table listing various development boards and their specifications. It includes details such as board name, platform, debug capabilities, MCU, frequency, flash memory, and RAM for boards from u-blox, uPesy, and ubIQio.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debugging.rst#2025-04-10_snippet_9\n\nLANGUAGE: rst\nCODE:\n```\nuPesy\n~~~~~\n\n.. list-table::\n    :header-rows:  1\n\n    * - Name\n      - Platform\n      - Debug\n      - MCU\n      - Frequency\n      - Flash\n      - RAM\n    * - :ref:`board_espressif32_upesy_wroom`\n      - :ref:`platform_espressif32`\n      - External\n      - ESP32\n      - 240MHz\n      - 4MB\n      - 320KB\n    * - :ref:`board_espressif32_upesy_wrover`\n      - :ref:`platform_espressif32`\n      - External\n      - ESP32\n      - 240MHz\n      - 4MB\n      - 320KB\n\nubIQio\n~~~~~~\n\n.. list-table::\n    :header-rows:  1\n\n    * - Name\n      - Platform\n      - Debug\n      - MCU\n      - Frequency\n      - Flash\n      - RAM\n    * - :ref:`board_atmelavr_ardhat`\n      - :ref:`platform_atmelavr`\n      - External\n      - ATMEGA328P\n      - 16MHz\n      - 31.50KB\n      - 2KB\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Build Source in PlatformIO\nDESCRIPTION: Configuration snippet for platformio.ini that enables building main source code alongside test code. This approach is not recommended as the primary method but can be useful for testing independent libraries.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/advanced/unit-testing/structure/shared-code.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = ...\ntest_build_src = true\n```\n\n----------------------------------------\n\nTITLE: Getting Help for PlatformIO Platform Commands (Bash)\nDESCRIPTION: Shows how to display help information for the PlatformIO platform command and its subcommands. These commands provide details about available options and usage instructions.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/platforms/index.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio platform --help\npio platform COMMAND --help\n```\n\n----------------------------------------\n\nTITLE: Customizing Board Parameters in PlatformIO for ST STM32F0308DISCOVERY\nDESCRIPTION: Demonstrates how to override default board settings in PlatformIO by changing the microcontroller model and CPU frequency. These options allow for customization of the build for specific project requirements.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_f030r8.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_f030r8]\nplatform = ststm32\nboard = disco_f030r8\n\n; change microcontroller\nboard_build.mcu = stm32f030r8t6\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring STM32F103RC Board in platformio.ini\nDESCRIPTION: Basic configuration for STM32F103RC board in the project's platformio.ini file, specifying the platform and board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103RC.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103RC]\nplatform = ststm32\nboard = genericSTM32F103RC\n```\n\n----------------------------------------\n\nTITLE: Including Custom Libraries in PlatformIO C Project\nDESCRIPTION: This code snippet shows how to include custom libraries (Foo and Bar) in a C source file within a PlatformIO project. PlatformIO automatically finds these libraries and configures the preprocessor's include paths.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/platformio/options/directory/lib_dir.rst#2025-04-10_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#include <Foo.h>\n#include <Bar.h>\n\n// rest of H/C/CPP code\n```\n\n----------------------------------------\n\nTITLE: Customizing ST STM32F3DISCOVERY Board Settings in PlatformIO\nDESCRIPTION: This snippet demonstrates how to override default board settings for the ST STM32F3DISCOVERY in PlatformIO. It shows examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_f303vc.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_f303vc]\nplatform = ststm32\nboard = disco_f303vc\n\n; change microcontroller\nboard_build.mcu = stm32f303vct6\n\n; change MCU frequency\nboard_build.f_cpu = 72000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing INEX OpenKB Board Settings in PlatformIO\nDESCRIPTION: Advanced PlatformIO configuration for INEX OpenKB board with custom microcontroller and CPU frequency settings. This demonstrates how to override default board parameters defined in the board manifest JSON.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/inex_openkb.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:inex_openkb]\nplatform = espressif32\nboard = inex_openkb\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing MCU and Frequency for ST STM32F4DISCOVERY\nDESCRIPTION: Example of overriding default microcontroller and frequency settings for the ST STM32F4DISCOVERY board in PlatformIO.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_f407vg.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_f407vg]\nplatform = ststm32\nboard = disco_f407vg\n\n; change microcontroller\nboard_build.mcu = stm32f407vgt6\n\n; change MCU frequency\nboard_build.f_cpu = 168000000L\n```\n\n----------------------------------------\n\nTITLE: Defining Project Description in PlatformIO Configuration\nDESCRIPTION: The 'description' field is a string type configuration option in PlatformIO projects. It allows for a short description of the project, which is used in various places within PlatformIO Home. This field can only have a single value.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/platformio/options/generic/description.rst#2025-04-10_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"description\"\n```\n\n----------------------------------------\n\nTITLE: Zephyr Framework Configuration in PlatformIO\nDESCRIPTION: Configuration setting for enabling the Zephyr framework in a PlatformIO project. Uses the projectconf environment framework option.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/frameworks/zephyr.rst#2025-04-10_snippet_0\n\nLANGUAGE: RST\nCODE:\n```\n:ref:`projectconf_env_framework` = ``zephyr``\n```\n\n----------------------------------------\n\nTITLE: Customizing Generic N79E715 Board Settings in PlatformIO INI File\nDESCRIPTION: This snippet demonstrates how to override default settings for the Generic N79E715 board in the PlatformIO configuration. It shows examples of changing the microcontroller and MCU frequency using board-specific options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/N79E715.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:N79E715]\nplatform = intel_mcs51\nboard = N79E715\n\n; change microcontroller\nboard_build.mcu = n79e715\n\n; change MCU frequency\nboard_build.f_cpu = 22118400L\n```\n\n----------------------------------------\n\nTITLE: Advanced ESP32-PICO-DevKitM-2 Configuration with MCU Settings\nDESCRIPTION: Extended board configuration showing how to override default microcontroller settings including MCU type and frequency. Demonstrates customizing hardware-specific parameters.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32-pico-devkitm-2.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32-pico-devkitm-2]\nplatform = espressif32\nboard = esp32-pico-devkitm-2\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing ESP32vn IoT Uno Hardware Settings in platformio.ini\nDESCRIPTION: Advanced configuration for ESP32vn IoT Uno board with custom microcontroller and CPU frequency settings. This demonstrates how to override the default hardware settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32vn-iot-uno.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32vn-iot-uno]\nplatform = espressif32\nboard = esp32vn-iot-uno\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration for ML51UB9AE\nDESCRIPTION: Basic PlatformIO configuration for setting up the ML51UB9AE board with the intel_mcs51 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/ML51UB9AE.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ML51UB9AE]\nplatform = intel_mcs51\nboard = ML51UB9AE\n```\n\n----------------------------------------\n\nTITLE: Uninstalling PlatformIO Core\nDESCRIPTION: Commands to uninstall standalone PlatformIO Core from a system using pip and brew package managers. Used when troubleshooting multiple core instances.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/installation/troubleshooting.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip uninstall platformio\npython -m pip uninstall platformio\n\n# if you used macOS \"brew\"\nbrew uninstall platformio\n```\n\n----------------------------------------\n\nTITLE: J-Link Upload Script Implementation\nDESCRIPTION: Python script implementing custom upload functionality for J-Link. Creates and executes J-Link command scripts for firmware upload.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/custom.rst#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom os import makedirs\nfrom os.path import isdir, join\nImport('env')\n\ndef _jlink_cmd_script(env, source):\n    build_dir = env.subst(\"$BUILD_DIR\")\n    if not isdir(build_dir):\n        makedirs(build_dir)\n    script_path = join(build_dir, \"upload.jlink\")\n    commands = [\"h\", \"loadbin %s,0x0\" % source, \"r\", \"q\"]\n    with open(script_path, \"w\") as fp:\n        fp.write(\"\\n\".join(commands))\n    return script_path\n\nenv.Replace(\n    __jlink_cmd_script=_jlink_cmd_script,\n    UPLOADER=\"/full/path/to/JLink\",\n    UPLOADERFLAGS=[\n        \"-device\", \"MK20DX256xxx7\",\n        \"-speed\", \"4000\",\n        \"-if\", \"swd\",\n        \"-autoconnect\", \"1\"\n    ],\n    UPLOADCMD='\"$UPLOADER\" $UPLOADERFLAGS -CommanderScript ${__jlink_cmd_script(__env__, SOURCE)}'\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Board Settings in PlatformIO\nDESCRIPTION: Basic configuration for Arduino Nicla Vision board in platformio.ini file, specifying the platform and board type.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nicla_vision.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nicla_vision]\nplatform = ststm32\nboard = nicla_vision\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Dwenguino Board Settings in PlatformIO\nDESCRIPTION: This snippet demonstrates how to override default Dwenguino board settings in the PlatformIO configuration. It shows examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/dwenguino.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:dwenguino]\nplatform = atmelavr\nboard = dwenguino\n\n; change microcontroller\nboard_build.mcu = at90usb646\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU and Frequency Settings\nDESCRIPTION: Extended PlatformIO configuration demonstrating how to override default board settings like microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/roboheart_hercules.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:roboheart_hercules]\nplatform = espressif32\nboard = roboheart_hercules\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring ESP8266 MMU Options with PlatformIO\nDESCRIPTION: Examples of configuring different MMU (Memory Management Unit) options for ESP8266 boards using PlatformIO's build_flags. Shows three different configurations for espduino, espino, and d1_mini boards.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/espressif8266_extra.rst#2025-04-10_snippet_12\n\nLANGUAGE: ini\nCODE:\n```\n[env:espduino]\nplatform = espressif8266\nframework = arduino\nboard = espduino\nbuild_flags =\n    -D PIO_FRAMEWORK_ARDUINO_MMU_CACHE16_IRAM48\n\n[env:espino]\nplatform = espressif8266\nframework = arduino\nboard = espino\nbuild_flags =\n    -D PIO_FRAMEWORK_ARDUINO_MMU_CACHE16_IRAM32_SECHEAP_NOTSHARED\n\n[env:d1_mini]\nplatform = espressif8266\nframework = arduino\nboard = d1_mini\nbuild_flags =\n    -D PIO_FRAMEWORK_ARDUINO_MMU_CUSTOM\n    -D MMU_IRAM_SIZE=0xC000\n    -D MMU_ICACHE_SIZE=0x4000\n    -D MMU_IRAM_HEAP\n```\n\n----------------------------------------\n\nTITLE: Adding MSYS2 Paths to Windows Environment Variables\nDESCRIPTION: This code block specifies the directory paths that need to be added to the Windows PATH system environment variable after installing MSYS2. These paths ensure access to the GCC toolchain binaries.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/native_extra.rst#2025-04-10_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nC:\\msys64\\mingw64\\bin\nC:\\msys64\\ucrt64\\bin\nC:\\msys64\\usr\\bin\n```\n\n----------------------------------------\n\nTITLE: Using PlatformIO Debug Command in Bash\nDESCRIPTION: Basic usage of the 'pio debug' command with optional arguments. Includes a shortcut for launching GDB interface.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/cmd_debug.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio debug [OPTIONS]\n\n# A binary shortcut for \"pio debug --interface=gdb\" command\npiodebuggdb [GDB OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Customizing OLIMEX ESP32-DevKit-LiPo Board Settings\nDESCRIPTION: Example of overriding default board settings in PlatformIO configuration. Demonstrates changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32-devkitlipo.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32-devkitlipo]\nplatform = espressif32\nboard = esp32-devkitlipo\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration for PlatformIO\nDESCRIPTION: Basic configuration setup for Schirmilabs Eduino WiFi board in platformio.ini file. Specifies the platform and board type.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/eduinowifi.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:eduinowifi]\nplatform = espressif8266\nboard = eduinowifi\n```\n\n----------------------------------------\n\nTITLE: Customizing DataStation Mini MCU Settings\nDESCRIPTION: Advanced configuration example showing how to override default microcontroller settings including MCU model and frequency specifications.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/microchippic32/dsmini.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:dsmini]\nplatform = microchippic32\nboard = dsmini\n\n; change microcontroller\nboard_build.mcu = 32MX150F128C\n\n; change MCU frequency\nboard_build.f_cpu = 40000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO Environment with Custom MCU Settings for Pinaka\nDESCRIPTION: Extended configuration for Pinaka board that demonstrates how to override default board settings such as microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/shakti/pinaka.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:pinaka]\nplatform = shakti\nboard = pinaka\n\n; change microcontroller\nboard_build.mcu = E-Class\n\n; change MCU frequency\nboard_build.f_cpu = 50000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Onehorse ESP32 Dev Module Board Settings in PlatformIO\nDESCRIPTION: Advanced configuration example showing how to override default board settings such as microcontroller type and CPU frequency in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/onehorse32dev.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:onehorse32dev]\nplatform = espressif32\nboard = onehorse32dev\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Build Variant for STM32Cube BSP in PlatformIO\nDESCRIPTION: This configuration sets a custom build variant for the STM32Cube Board Support Package. It specifies the 'variant' option for a Nucleo G474RE board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/frameworks/stm32cube_extra.rst#2025-04-10_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_g474re]\nplatform = ststm32\nframework = stm32cube\nboard = nucleo_g474re\nboard_build.stm32cube.variant = STM32G4xx_Nucleo\n```\n\n----------------------------------------\n\nTITLE: Configuring Maple Core for STM32\nDESCRIPTION: Example configuration for using the maple core with an HY-TinySTM103TB board in PlatformIO.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/ststm32_extra.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:hy_tinystm103tb]\nplatform = ststm32\nframework = arduino\nboard = hy_tinystm103tb\nboard_build.core = maple\n```\n\n----------------------------------------\n\nTITLE: Configuring TI LaunchPad MSP-EXP430FR2355LP Board in PlatformIO\nDESCRIPTION: This code snippet demonstrates how to configure the TI LaunchPad MSP-EXP430FR2355LP board in the PlatformIO project configuration file. It shows the basic setup and how to override default board settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/timsp430/lpmsp430fr2355.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:lpmsp430fr2355]\nplatform = timsp430\nboard = lpmsp430fr2355\n\n; change microcontroller\nboard_build.mcu = msp430fr2355\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic ATtiny1606 Board Settings in PlatformIO\nDESCRIPTION: Basic configuration for setting up an ATtiny1606 project environment in PlatformIO's project configuration file. Specifies the platform and board type.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/ATtiny1606.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATtiny1606]\nplatform = atmelmegaavr\nboard = ATtiny1606\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Check Tools in PlatformIO\nDESCRIPTION: Example configuration showing how to enable both cppcheck and clang-tidy code analysis tools for a PlatformIO project environment using the check_tool option in platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/advanced/static-code-analysis/tools/index.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = ...\nboard = ...\ncheck_tool = cppcheck, clangtidy\n```\n\n----------------------------------------\n\nTITLE: Using the 'pio account forgot' Command in Bash\nDESCRIPTION: This command allows users to reset their PlatformIO account password. It can be used with or without the optional username/email parameter. If omitted, users can enter their credentials in the Forgot Wizard later.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/account/cmd_forgot.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio account forgot [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Configuring Malyan M200 V1 Board in PlatformIO INI\nDESCRIPTION: Basic configuration for the Malyan M200 V1 board in a platformio.ini file. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/malyanm200_f103cb.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:malyanm200_f103cb]\nplatform = ststm32\nboard = malyanm200_f103cb\n```\n\n----------------------------------------\n\nTITLE: Running PlatformIO with Specific Targets via Command Line\nDESCRIPTION: This snippet shows how to run PlatformIO with specific targets using the command line interface. It includes examples for cleaning the project and dumping the current build environment.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/env/options/build/targets.rst#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# clean project\npio run -t clean\n\n# dump current build environment\npio run --target envdump\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for ST 32F429IDISCOVERY\nDESCRIPTION: Basic PlatformIO configuration for the ST 32F429IDISCOVERY board using the STM32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_f429zi.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_f429zi]\nplatform = ststm32\nboard = disco_f429zi\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic PlatformIO Environment for ESP32 DOIT DEVKIT V1\nDESCRIPTION: Basic PlatformIO environment configuration for the ESP32 DOIT DEVKIT V1 board. This snippet sets up the minimal required configuration to target this specific board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32doit-devkit-v1.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32doit-devkit-v1]\nplatform = espressif32\nboard = esp32doit-devkit-v1\n```\n\n----------------------------------------\n\nTITLE: Configuring Upstream Atmel AVR Platform Version\nDESCRIPTION: Example platformio.ini configuration for using the latest upstream development version of the Atmel AVR platform from GitHub.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/atmelavr.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:upstream_develop]\nplatform = https://github.com/platformio/platform-atmelavr.git\nboard = ...\n```\n\n----------------------------------------\n\nTITLE: Using 'pio pkg show' Command in Bash\nDESCRIPTION: This command is used to show package information from the PlatformIO Registry. It can be used with options to specify package type and can display detailed information about a package including its version, size, and compatibility.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/pkg/cmd_show.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio pkg show [OPTIONS] [<owner>/]<pkg>[@<version>]\n```\n\n----------------------------------------\n\nTITLE: Command Usage Syntax for pio access revoke\nDESCRIPTION: The basic syntax for using the 'pio access revoke' command, which requires specifying a user/team and the URN resource identifier.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/access/cmd_revoke.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio access revoke [OPTIONS] <ORGNAME:TEAMNAME>|<USERNAME> URN\n```\n\n----------------------------------------\n\nTITLE: Customizing Arduino Nano Every Board Settings in platformio.ini\nDESCRIPTION: Extended environment configuration with custom microcontroller and frequency settings for Arduino Nano Every. Demonstrates how to override default board settings from the board manifest.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/nano_every.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nano_every]\nplatform = atmelmegaavr\nboard = nano_every\n\n; change microcontroller\nboard_build.mcu = atmega4809\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Unity Test Framework for STM32 (C)\nDESCRIPTION: This header file configures the Unity test framework for use with STM32. It defines output functions for the test results.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/tutorials/ststm32/stm32cube_debugging_unit_testing.rst#2025-04-10_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n#ifndef UNITY_CONFIG_H\n#define UNITY_CONFIG_H\n\n#ifndef NULL\n#ifndef __cplusplus\n#define NULL (void*)0\n#else\n#define NULL 0\n#endif\n#endif\n\n#ifdef __cplusplus\nextern \"C\"\n{\n#endif\n\nvoid unityOutputStart();\nvoid unityOutputChar(char);\nvoid unityOutputFlush();\nvoid unityOutputComplete();\n\n#define UNITY_OUTPUT_START()    unityOutputStart()\n#define UNITY_OUTPUT_CHAR(c)    unityOutputChar(c)\n#define UNITY_OUTPUT_FLUSH()    unityOutputFlush()\n#define UNITY_OUTPUT_COMPLETE() unityOutputComplete()\n\n#ifdef __cplusplus\n}\n#endif /* extern \"C\" */\n\n#endif /* UNITY_CONFIG_H */\n```\n\n----------------------------------------\n\nTITLE: Customizing FYSETC S6 Board Settings in PlatformIO\nDESCRIPTION: This snippet demonstrates how to override default board settings in PlatformIO configuration. It shows examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/fysetc_s6.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:fysetc_s6]\nplatform = ststm32\nboard = fysetc_s6\n\n; change microcontroller\nboard_build.mcu = stm32f446vet6\n\n; change MCU frequency\nboard_build.f_cpu = 168000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Department of Alchemy MiniMain ESP32-S2 Board Settings\nDESCRIPTION: This snippet demonstrates how to override default board settings in a PlatformIO project. It shows examples of changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/minimain_esp32s2.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:minimain_esp32s2]\nplatform = espressif32\nboard = minimain_esp32s2\n\n; change microcontroller\nboard_build.mcu = esp32s2\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Arduino Mini ATmega168 Settings\nDESCRIPTION: This example demonstrates how to override default board settings in the PlatformIO configuration. It changes the microcontroller to atmega168 and sets the MCU frequency to 16MHz.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/miniatmega168.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:miniatmega168]\nplatform = atmelavr\nboard = miniatmega168\n\n; change microcontroller\nboard_build.mcu = atmega168\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: ESP32 Board Configuration Table in RST Format\nDESCRIPTION: ReStructuredText formatted table containing specifications for various ESP32 development boards including their platform, CPU type, clock speed, flash size and RAM size.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/esp-prog.rst#2025-04-10_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n* - :ref:`board_espressif32_lolin_d32`\n      - :ref:`platform_espressif32`\n      - External\n      - ESP32\n      - 240MHz\n      - 4MB\n      - 320KB\n    * - :ref:`board_espressif32_lolin_d32_pro`\n      - :ref:`platform_espressif32`\n      - External\n      - ESP32\n      - 240MHz\n      - 4MB\n      - 320KB\n```\n\n----------------------------------------\n\nTITLE: Customizing ST Nucleo L053R8 Board Parameters in PlatformIO\nDESCRIPTION: INI configuration showing how to override default board settings such as microcontroller model and CPU frequency in a PlatformIO project.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_l053r8.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_l053r8]\nplatform = ststm32\nboard = nucleo_l053r8\n\n; change microcontroller\nboard_build.mcu = stm32l053r8t6\n\n; change MCU frequency\nboard_build.f_cpu = 32000000L\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Device List Command Usage\nDESCRIPTION: Shows the basic command syntax for listing devices in PlatformIO\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/device/cmd_list.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio device list [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Customizing Generic N78E055 Board Settings in PlatformIO\nDESCRIPTION: This snippet illustrates how to override default settings for the Generic N78E055 board in a PlatformIO project. It shows examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/N78E055.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:N78E055]\nplatform = intel_mcs51\nboard = N78E055\n\n; change microcontroller\nboard_build.mcu = n78e055\n\n; change MCU frequency\nboard_build.f_cpu = 22118400L\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Fuses for ATmega3209 in PlatformIO\nDESCRIPTION: PlatformIO configuration for setting custom fuse values on an ATmega3209 board. This example demonstrates how to override default fuses with custom values using the xplainedmini_updi upload protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/atmelmegaavr_extra.rst#2025-04-10_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[env:custom_fuses]\nplatform = atmelmegaavr\nframework = arduino\nboard = ATmega3209\nupload_protocol = xplainedmini_updi\nboard_fuses.bootend = 0xAA\nboard_fuses.syscfg0 = 0xBB\nboard_fuses.osccfg = 0xCC\n```\n\n----------------------------------------\n\nTITLE: Searching for nRF24 or HttpClient Libraries for Energia\nDESCRIPTION: This command searches for Energia-based libraries related to nRF24 or HttpClient using the PlatformIO CLI. The search query is equivalent to 'energia nRF24 OR energia HttpClient'.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/lib/cmd_search.rst#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n> pio lib search \"+(nRF24 HttpClient)\" --framework=\"arduino\"\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU Settings\nDESCRIPTION: Shows how to override default board settings including microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/lora_e5_dev_board.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:lora_e5_dev_board]\nplatform = ststm32\nboard = lora_e5_dev_board\n\n; change microcontroller\nboard_build.mcu = stm32wle5jc\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Pycom LoPy\nDESCRIPTION: This snippet shows how to set a specific upload protocol for the Pycom LoPy board in the PlatformIO configuration. It uses the esptool protocol as an example.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/lopy.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:lopy]\nplatform = espressif32\nboard = lopy\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Customizing Trueverit ESP32 Board Settings in PlatformIO\nDESCRIPTION: This code demonstrates how to override default board settings for the Trueverit ESP32 Universal IoT Driver MK II. It shows examples of changing the microcontroller and MCU frequency using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/trueverit-iot-driver-mk2.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:trueverit-iot-driver-mk2]\nplatform = espressif32\nboard = trueverit-iot-driver-mk2\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: PlatformIO Project Configuration for Arduino Uno\nDESCRIPTION: Configuration file (platformio.ini) for a PlatformIO project targeting Arduino Uno. It specifies the platform, framework, and board used in the project.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/ide/visualstudio.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n; PlatformIO Project Configuration File\n;\n;   Build options: build flags, source filter, extra scripting\n;   Upload options: custom port, speed and extra flags\n;   Library options: dependencies, extra library storages\n;\n; Please visit documentation for the other options and examples\n; https://docs.platformio.org/en/latest/projectconf/index.html\n\n[env:arduino_uno]\nplatform = atmelavr\nframework = arduino\nboard = uno\n```\n\n----------------------------------------\n\nTITLE: Customizing BlackPill F103C8 Hardware Settings in PlatformIO\nDESCRIPTION: Example of overriding default board settings for the BlackPill F103C8 (128k) by changing the microcontroller and MCU frequency. These options allow for custom hardware configurations.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/blackpill_f103c8_128.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:blackpill_f103c8_128]\nplatform = ststm32\nboard = blackpill_f103c8_128\n\n; change microcontroller\nboard_build.mcu = stm32f103c8t6\n\n; change MCU frequency\nboard_build.f_cpu = 72000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU Settings\nDESCRIPTION: Extended PlatformIO configuration showing how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/airm2m_core_esp32c3.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:airm2m_core_esp32c3]\nplatform = espressif32\nboard = airm2m_core_esp32c3\n\n; change microcontroller\nboard_build.mcu = esp32c3\n\n; change MCU frequency\nboard_build.f_cpu = 160000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Different Operating Systems\nDESCRIPTION: Examples of how to set environment variables in Windows, Unix (bash/zsh), and Unix (fish) environments. Shows the basic syntax for setting named values that affect process behavior.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/envvars.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Windows\nset VARIABLE_NAME=VALUE\n\n# Windows GUI -> https://www.youtube.com/watch?v=bEroNNzqlF4\n\n# Unix (bash, zsh)\nexport VARIABLE_NAME=VALUE\n\n# Unix (fish)\nset -x VARIABLE_NAME VALUE\n```\n\n----------------------------------------\n\nTITLE: Custom MCU Configuration\nDESCRIPTION: Example showing how to override default board settings like microcontroller model and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/1bitsy_stm32f415rgt.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:1bitsy_stm32f415rgt]\nplatform = ststm32\nboard = 1bitsy_stm32f415rgt\n\n; change microcontroller\nboard_build.mcu = stm32f415rgt\n\n; change MCU frequency\nboard_build.f_cpu = 168000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Speed for ESP8266 in PlatformIO\nDESCRIPTION: Configures the upload speed for flashing the ESP8266 using the upload_speed option. This example sets it to 9600 baud.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/espressif8266_extra.rst#2025-04-10_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nupload_speed = 9600\n```\n\n----------------------------------------\n\nTITLE: Customizing Arduino MKR NB 1500 Board Settings in PlatformIO\nDESCRIPTION: Example of overriding default board settings such as microcontroller and CPU frequency for the Arduino MKR NB 1500 in a PlatformIO project configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/mkrnb1500.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:mkrnb1500]\nplatform = atmelsam\nboard = mkrnb1500\n\n; change microcontroller\nboard_build.mcu = samd21g18a\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced ESPea32 Board Configuration\nDESCRIPTION: Extended configuration demonstrating how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/espea32.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:espea32]\nplatform = espressif32\nboard = espea32\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration for ESP32\nDESCRIPTION: Configures the basic environment settings for VALTRACK-V4VTS board using PlatformIO.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/valtrack_v4_vts_esp32_c3.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:valtrack_v4_vts_esp32_c3]\nplatform = espressif32\nboard = valtrack_v4_vts_esp32_c3\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU Settings\nDESCRIPTION: Configuration example showing how to override default microcontroller and frequency settings for the Portenta C33.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/renesas-ra/portenta_c33.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:portenta_c33]\nplatform = renesas-ra\nboard = portenta_c33\n\n; change microcontroller\nboard_build.mcu = r7fa6m5bh2cbg\n\n; change MCU frequency\nboard_build.f_cpu = 200000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Adafruit Feather ESP32-S3 TFT Board in PlatformIO\nDESCRIPTION: Basic configuration for the Adafruit Feather ESP32-S3 TFT board in the project's platformio.ini file. It specifies the platform and board to use.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/adafruit_feather_esp32s3_tft.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_feather_esp32s3_tft]\nplatform = espressif32\nboard = adafruit_feather_esp32s3_tft\n```\n\n----------------------------------------\n\nTITLE: Defining Single Author in PlatformIO Library Manifest (JavaScript)\nDESCRIPTION: This snippet demonstrates how to specify a single author's contact information in the library.json manifest. It includes the required 'name' field along with optional 'email' and 'url' fields.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/manifests/library-json/fields/authors.rst#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"authors\":\n{\n    \"name\": \"John Smith\",\n    \"email\": \"me@john-smith.com\",\n    \"url\": \"https://www.john-smith/contact\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional UART Analyzer in PlatformIO INI\nDESCRIPTION: This snippet demonstrates how to add an additional UART analyzer when using Renode as the upload tool. It overrides the default upload settings to include a showAnalyzer command for UART1.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/renode_extra.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:hifive1-revb]\nplatform = sifive\nframework = zephyr\nboard = hifive1-revb\n; Override the default upload settings\nupload_command = renode $UPLOAD_FLAGS\nupload_flags =\n    -e include @scripts/single-node/sifive_fe310.resc\n    -e showAnalyzer uart1\n    -e sysbus LoadELF @$SOURCE\n    -e start\n```\n\n----------------------------------------\n\nTITLE: Customizing STM32F103C8 Board Settings in PlatformIO\nDESCRIPTION: Advanced configuration options for the STM32F103C8 board, including how to override default microcontroller and CPU frequency settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103C8.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103C8]\nplatform = ststm32\nboard = genericSTM32F103C8\n\n; change microcontroller\nboard_build.mcu = stm32f103c8t6\n\n; change MCU frequency\nboard_build.f_cpu = 72000000L\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Directory Structure for Arduino Unit Testing\nDESCRIPTION: Shows the directory structure for a PlatformIO project with unit tests. The structure includes the main configuration file and a test directory containing the test implementation file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/tutorials/core/unit_testing_blink.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nproject_dir\n├── platformio.ini\n└── test\n    └── test_blink\n        └── test_main.cpp\n```\n\n----------------------------------------\n\nTITLE: Configuring workspace_dir in PlatformIO\nDESCRIPTION: The workspace_dir option specifies the path to a project workspace directory where PlatformIO stores compiled objects, static libraries, firmwares, and external library dependencies. By default, it points to a .pio folder in the project root but can be customized as needed.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/platformio/options/directory/workspace_dir.rst#2025-04-10_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nworkspace_dir\n```\n\n----------------------------------------\n\nTITLE: Configuring Olimex ARM-USB-TINY-H Debugging Tool in platformio.ini\nDESCRIPTION: Shows how to set the debug_tool option to use Olimex ARM-USB-TINY-H for debugging, and optionally set it as the upload protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/olimex-arm-usb-tiny-h.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = ...\nboard = ...\ndebug_tool = olimex-arm-usb-tiny-h\n\n# Optional: Use for firmware upload\nupload_protocol = olimex-arm-usb-tiny-h\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for SDT52832B Board in PlatformIO\nDESCRIPTION: Configuration example showing how to set the upload protocol for the SDT52832B board. This example uses the default 'mbed' protocol, but other options include blackmagic, cmsis-dap, jlink, nrfjprog, and stlink.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/sdt52832b.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:sdt52832b]\nplatform = nordicnrf52\nboard = sdt52832b\n\nupload_protocol = mbed\n```\n\n----------------------------------------\n\nTITLE: Customizing TinyPICO Board Settings in PlatformIO INI File\nDESCRIPTION: Example of overriding default board settings for the Unexpected Maker TinyPICO, including changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/tinypico.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:tinypico]\nplatform = espressif32\nboard = tinypico\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Basic STM32F407VE Board Configuration\nDESCRIPTION: Basic PlatformIO configuration for STM32F407VE board setup using the ststm32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F407VET6.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F407VET6]\nplatform = ststm32\nboard = genericSTM32F407VET6\n```\n\n----------------------------------------\n\nTITLE: Customizing Teensy 4.1 Board Settings in PlatformIO INI File\nDESCRIPTION: This snippet demonstrates how to override default Teensy 4.1 settings in the PlatformIO configuration. It shows how to change the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/teensy/teensy41.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:teensy41]\nplatform = teensy\nboard = teensy41\n\n; change microcontroller\nboard_build.mcu = imxrt1062\n\n; change MCU frequency\nboard_build.f_cpu = 600000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Stable Platform Version in platformio.ini\nDESCRIPTION: Configuration examples for using stable releases of the Renesas RA platform, including latest stable and specific version pinning.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/renesas-ra.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n; Latest stable version, NOT recommended\n; Pin the version as shown below\n[env:latest_stable]\nplatform = renesas-ra\nboard = ...\n\n; Specific version\n[env:custom_stable]\nplatform = renesas-ra@x.y.z\nboard = ...\n```\n\n----------------------------------------\n\nTITLE: Team List Command Example Output\nDESCRIPTION: Example output showing how team information is displayed, including team name, description, and member list.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/team/cmd_list.rst#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> pio team list\n\nplatformio:dev\n------------------------\nDescription:  Developers team\nMembers:      alice, bob\n```\n\n----------------------------------------\n\nTITLE: Cleaning Project Build Files with PlatformIO CLI\nDESCRIPTION: Demonstrates how to use the PlatformIO CLI to clean build artifacts from a project. The command removes compiled binaries, object files, and libraries for all configured environments (uno, nodemcu, teensy31, and lpmsp430g2553).\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/cmd_run.rst#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npio run -t clean\n```\n\n----------------------------------------\n\nTITLE: Customizing VintLabs ESP32 Devkit Board Settings\nDESCRIPTION: Example of overriding default board settings in platformio.ini, such as changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/vintlabs-devkit-v1.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:vintlabs-devkit-v1]\nplatform = espressif32\nboard = vintlabs-devkit-v1\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Uninstalling PlatformIO Development Platforms using CLI\nDESCRIPTION: This command is used to uninstall specified PlatformIO development platforms. It can uninstall a specific platform version using Semantic Versioning.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/platforms/cmd_uninstall.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio platform uninstall [PLATFORM...]\n\n# uninstall specific platform version using Semantic Versioning\npio platform uninstall PLATFORM@X.Y.Z\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to set custom upload protocol for Olimex STM32-H103\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/olimex_f103.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:olimex_f103]\nplatform = ststm32\nboard = olimex_f103\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Customizing ESP320 Board Settings in PlatformIO\nDESCRIPTION: Advanced configuration that demonstrates how to override default board settings such as microcontroller type and CPU frequency using board_*** options in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp320.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp320]\nplatform = espressif32\nboard = esp320\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Device Monitor Help Command Example\nDESCRIPTION: Command and output showing all available options for the PlatformIO device monitor, including parameters for port settings, flow control, encoding, and filters.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/device/cmd_monitor.rst#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n> pio device monitor --help\nUsage: pio device monitor [OPTIONS]\n\nOptions:\n  -p, --port TEXT       Port, a number or a device name\n  -b, --baud INTEGER    Set baud rate, default=9600\n  --parity [N|E|O|S|M]  Set parity, default=N\n  --rtscts              Enable RTS/CTS flow control, default=Off\n  --xonxoff             Enable software flow control, default=Off\n  --rts [0|1]           Set initial RTS line state, default=0\n  --dtr [0|1]           Set initial DTR line state, default=0\n  --echo                Enable local echo, default=Off\n  --encoding TEXT       Set the encoding for the serial port (e.g. hexlify,\n                        Latin1, UTF-8), default: UTF-8\n  -f, --filter TEXT     Add filters / text transformation\n  --eol [CR|LF|CRLF]    End of line mode, default=CRLF\n  --raw                 Do not apply any encodings/transformations\n  --exit-char INTEGER   ASCII code of special character that is used to exit\n                        the application, default=29 (DEC)\n  --menu-char INTEGER   ASCII code of special character that is used to\n                        control miniterm (menu), default=20 (DEC)\n  --quiet               Diagnostics: suppress non-error messages, default=Off\n  -h, --help            Show this message and exit.\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Trueverit ESP32 Universal IoT Driver MK III\nDESCRIPTION: Configuration example for changing the upload protocol. Sets the protocol to esptool, which is the default for this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/trueverit-iot-driver-mk3.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:trueverit-iot-driver-mk3]\nplatform = espressif32\nboard = trueverit-iot-driver-mk3\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Customizing ST Nucleo L412KB Board Settings\nDESCRIPTION: Example of overriding default board settings in platformio.ini. Shows how to change the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_l412kb.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_l412kb]\nplatform = ststm32\nboard = nucleo_l412kb\n\n; change microcontroller\nboard_build.mcu = stm32l412kbu6\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Tool in platformio.ini for Nordic nRF52-DK\nDESCRIPTION: This configuration snippet specifies the JLink debug tool for the Nordic nRF52-DK board in the platformio.ini file. It sets up the project for Arduino framework and enables debugging.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/tutorials/nordicnrf52/arduino_debugging_unit_testing.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nrf52_dk]\nplatform = nordicnrf52\nboard = nrf52_dk\nframework = arduino\ndebug_tool = jlink\n```\n\n----------------------------------------\n\nTITLE: Searching for All Available Development Platforms\nDESCRIPTION: This example shows how to use the 'pio platform search' command without any query to display all available development platforms. It lists platforms with their descriptions and package information.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/platforms/cmd_search.rst#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> pio platform search\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic STC8H04 Board in PlatformIO Project\nDESCRIPTION: This INI configuration snippet sets up a PlatformIO environment for the Generic STC8H04 board using the intel_mcs51 platform. It demonstrates how to specify the board and override default settings like microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8H04.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8H04]\nplatform = intel_mcs51\nboard = STC8H04\n\n; change microcontroller\nboard_build.mcu = stc8h04\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Configuring Heltec WiFi LoRa 32 Board in PlatformIO\nDESCRIPTION: Basic configuration for the Heltec WiFi LoRa 32 board in the project's platformio.ini file. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/heltec_wifi_lora_32.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:heltec_wifi_lora_32]\nplatform = espressif32\nboard = heltec_wifi_lora_32\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU Settings\nDESCRIPTION: Extended configuration with custom microcontroller and frequency settings for WEMOS LOLIN S3 Mini\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/lolin_s3_mini.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:lolin_s3_mini]\nplatform = espressif32\nboard = lolin_s3_mini\n\n; change microcontroller\nboard_build.mcu = esp32s3\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: ESPea32 Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the ESPea32 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/espea32.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:espea32]\nplatform = espressif32\nboard = espea32\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring Run Button in Codeanywhere for PlatformIO\nDESCRIPTION: JSON configuration to set up the Codeanywhere Run Button to execute the 'pio run' command, which builds the PlatformIO project.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/ide/codeanywhere.rst#2025-04-10_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n\"commands\": [\n    \"pio run\"\n]\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for STC15F104\nDESCRIPTION: Basic environment configuration for the STC15F104 board in platformio.ini file. Specifies the platform and board type.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15F104.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15F104]\nplatform = intel_mcs51\nboard = STC15F104\n```\n\n----------------------------------------\n\nTITLE: STM32 Board Specifications in RST Format\nDESCRIPTION: ReStructuredText formatted tables containing detailed specifications for STM32 development boards including MCU model, frequency, memory sizes and debug capabilities.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/frameworks/libopencm3.rst#2025-04-10_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. list-table::\n    :header-rows:  1\n\n    * - Name\n      - Platform\n      - Debug\n      - MCU\n      - Frequency\n      - Flash\n      - RAM\n    * - :ref:`board_ststm32_piconomix_px_her0`\n      - :ref:`platform_ststm32`\n      - External\n      - STM32L072RB\n      - 32MHz\n      - 128KB\n      - 20KB\n```\n\n----------------------------------------\n\nTITLE: Sonoff TH Upload Protocol Configuration\nDESCRIPTION: PlatformIO configuration specifying upload protocol for Sonoff TH board using esptool.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/sonoff_th.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:sonoff_th]\nplatform = espressif8266\nboard = sonoff_th\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Advanced ESP32 Board Configuration\nDESCRIPTION: Extended PlatformIO configuration showing how to override default microcontroller and frequency settings for the Unexpected Maker RMP board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/um_rmp.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:um_rmp]\nplatform = espressif32\nboard = um_rmp\n\n; change microcontroller\nboard_build.mcu = esp32s2\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Stable Versions of Heltec CubeCell Platform in platformio.ini\nDESCRIPTION: Examples of how to configure the platformio.ini file to use either the latest stable version or a specific stable version of the Heltec CubeCell development platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/heltec-cubecell.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n; Latest stable version, NOT recommended\n; Pin the version as shown below\n[env:latest_stable]\nplatform = heltec-cubecell\nboard = ...\n\n; Specific version\n[env:custom_stable]\nplatform = heltec-cubecell@x.y.z\nboard = ...\n```\n\n----------------------------------------\n\nTITLE: Configuring FTDI Chip as Debug Tool in platformio.ini\nDESCRIPTION: This snippet shows how to set FTDI Chip as the debugging tool in the project configuration file. It sets the debug_tool option to 'ftdi'.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/ftdi.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = ...\nboard = ...\ndebug_tool = ftdi\n```\n\n----------------------------------------\n\nTITLE: Example of PlatformIO CLI Tab Completion Installation\nDESCRIPTION: This example demonstrates the installation of PlatformIO CLI tab completion for the fish shell. After running the command, it shows the installation path and prompts the user to restart their shell session.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/system/completion/cmd_install.rst#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> pio system completion install\n\nPlatformIO CLI completion has been installed for fish shell to ~/.config/fish/completions/pio.fish\nPlease restart a current shell session\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for ESPino32\nDESCRIPTION: This snippet demonstrates how to set a specific upload protocol for the ESPino32 board in the PlatformIO configuration. It uses the 'esptool' protocol as an example.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/espino32.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:espino32]\nplatform = espressif32\nboard = espino32\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Arduino MKR NB 1500 in PlatformIO\nDESCRIPTION: Configuration example for changing the upload protocol to sam-ba for the Arduino MKR NB 1500 board in a PlatformIO project.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/mkrnb1500.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:mkrnb1500]\nplatform = atmelsam\nboard = mkrnb1500\n\nupload_protocol = sam-ba\n```\n\n----------------------------------------\n\nTITLE: Customizing VNG VBLUno52 Board Settings in PlatformIO\nDESCRIPTION: Example of overriding default board settings in the PlatformIO configuration. It demonstrates changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/vbluno52.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:vbluno52]\nplatform = nordicnrf52\nboard = vbluno52\n\n; change microcontroller\nboard_build.mcu = nrf52832\n\n; change MCU frequency\nboard_build.f_cpu = 64000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Board Settings in PlatformIO\nDESCRIPTION: Basic configuration for TTGO LoRa32-OLED v2.1.6 board in platformio.ini file, specifying the platform and board name.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/ttgo-lora32-v21.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ttgo-lora32-v21]\nplatform = espressif32\nboard = ttgo-lora32-v21\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic ESP32-C3-DevKitM-1 Environment in PlatformIO\nDESCRIPTION: Basic configuration for ESP32-C3-DevKitM-1 board in platformio.ini file. This snippet defines the basic environment setup required to work with the ESP32-C3-DevKitM-1 board using the Espressif32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32-c3-devkitm-1.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32-c3-devkitm-1]\nplatform = espressif32\nboard = esp32-c3-devkitm-1\n```\n\n----------------------------------------\n\nTITLE: Generating ReStructuredText Table for STM32 and Tiva C Boards\nDESCRIPTION: This code snippet generates a ReStructuredText table listing various development boards for STM32 and Tiva C microcontrollers. It includes details like board name, platform, debug capabilities, MCU model, CPU frequency, flash size, and RAM size.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/frameworks/libopencm3.rst#2025-04-10_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. list-table::\n    :header-rows:  1\n\n    * - Name\n      - Platform\n      - Debug\n      - MCU\n      - Frequency\n      - Flash\n      - RAM\n    * - :ref:`board_ststm32_nucleo_f411re`\n      - :ref:`platform_ststm32`\n      - On-board\n      - STM32F411RET6\n      - 100MHz\n      - 512KB\n      - 128KB\n    * - :ref:`board_ststm32_nucleo_f412zg`\n      - :ref:`platform_ststm32`\n      - On-board\n      - STM32F412ZGT6\n      - 100MHz\n      - 1MB\n      - 256KB\n    * - :ref:`board_ststm32_nucleo_f413zh`\n      - :ref:`platform_ststm32`\n      - On-board\n      - STM32F413ZHT6\n      - 100MHz\n      - 1.50MB\n      - 320KB\n```\n\n----------------------------------------\n\nTITLE: USB Host Shield Example Environment Variables\nDESCRIPTION: Environment variable configuration for USB Host Shield project examples.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/ci/drone.rst#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nPLATFORMIO_CI_SRC=examples/Bluetooth/PS3SPP/PS3SPP.ino\nPLATFORMIO_CI_SRC=examples/pl2303/pl2303_gps/pl2303_gps.ino\n```\n\n----------------------------------------\n\nTITLE: Customizing STM32F103VC Board Settings in PlatformIO INI File\nDESCRIPTION: Example of overriding default board settings in the PlatformIO configuration. Demonstrates changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103VC.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103VC]\nplatform = ststm32\nboard = genericSTM32F103VC\n\n; change microcontroller\nboard_build.mcu = stm32f103vct6\n\n; change MCU frequency\nboard_build.f_cpu = 72000000L\n```\n\n----------------------------------------\n\nTITLE: Arduino Hello World Sample for Codeanywhere\nDESCRIPTION: A simple Arduino sketch that prints a counter to the serial port and echoes any received serial data. This sample code demonstrates basic serial communication.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/ide/codeanywhere.rst#2025-04-10_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n#include <Arduino.h>\n\nint i = 0;\n\nvoid setup() {\n    Serial.begin(9600);\n    Serial.println(\"Hello Codeanywhere!\");\n}\n\nvoid loop() {\n    /*  serial echo */\n    while (Serial.available()) {\n        Serial.write(Serial.read());\n    }\n\n    i++;\n    Serial.println(i);\n    delay(100);\n}\n```\n\n----------------------------------------\n\nTITLE: ESP32-S3-DevKitM-1 Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32-s3-devkitm-1.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32-s3-devkitm-1]\nplatform = espressif32\nboard = esp32-s3-devkitm-1\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Customizing Aceinna OpenIMU 300ZA Board Settings\nDESCRIPTION: This snippet demonstrates how to override default board settings in PlatformIO for the Aceinna OpenIMU 300ZA. It shows examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/aceinna_imu/OpenIMU300ZA.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:OpenIMU300ZA]\nplatform = aceinna_imu\nboard = OpenIMU300ZA\n\n; change microcontroller\nboard_build.mcu = stm32f405rg\n\n; change MCU frequency\nboard_build.f_cpu = 120000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced ESP32 Board Configuration\nDESCRIPTION: Configuration with customized microcontroller and frequency settings for the Nebula S3 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/nebulas3.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nebulas3]\nplatform = espressif32\nboard = nebulas3\n\n; change microcontroller\nboard_build.mcu = esp32s3\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Using PlatformIO Platform List Command in Bash\nDESCRIPTION: This command lists all installed platforms in PlatformIO. It can be run with an optional --json-output flag to return the output in JSON format.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/platforms/cmd_list.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio platform list [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Configuring Upstream Platform Version in platformio.ini\nDESCRIPTION: Configuration example for using the latest upstream development version of the Renesas RA platform from GitHub.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/renesas-ra.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:upstream_develop]\nplatform = https://github.com/platformio/platform-renesas-ra.git\nboard = ...\n```\n\n----------------------------------------\n\nTITLE: Customizing ATtiny84 MCU and Frequency Settings in PlatformIO\nDESCRIPTION: This example demonstrates how to override the default board settings by specifying a custom microcontroller and clock frequency for the ATtiny84 board in the project configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/attiny84.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:attiny84]\nplatform = atmelavr\nboard = attiny84\n\n; change microcontroller\nboard_build.mcu = attiny84\n\n; change MCU frequency\nboard_build.f_cpu = 8000000L\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Section Declaration in INI\nDESCRIPTION: Demonstrates the basic section declaration syntax for PlatformIO configuration in the platformio.ini file. This section is used to specify global PlatformIO settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/platformio/index.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[platformio]\n```\n\n----------------------------------------\n\nTITLE: RST Board Configuration Table\nDESCRIPTION: A reStructuredText table containing development board specifications including processor type, clock speed, flash memory, and RAM configurations.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/blackmagic.rst#2025-04-10_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n* - :ref:`board_nordicnrf52_laird_bl654_dvk`\n  - :ref:`platform_nordicnrf52`\n  - On-board\n  - NRF52840\n  - 64MHz\n  - 1MB\n  - 256KB\n```\n\n----------------------------------------\n\nTITLE: Configuring Upstream SiFive Platform Version in PlatformIO\nDESCRIPTION: PlatformIO configuration for using the latest upstream development version of the SiFive platform directly from GitHub repository.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/sifive.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:upstream_develop]\nplatform = https://github.com/platformio/platform-sifive.git\nboard = ...\n```\n\n----------------------------------------\n\nTITLE: Configuring CMSIS-DAP for firmware uploading\nDESCRIPTION: This code snippet demonstrates how to configure CMSIS-DAP for firmware uploading by setting both the debug_tool and upload_protocol options in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/cmsis-dap.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = ...\nboard = ...\ndebug_tool = cmsis-dap\nupload_protocol = cmsis-dap\n```\n\n----------------------------------------\n\nTITLE: Setting PlatformIO Cache Directory Configuration\nDESCRIPTION: Configuration entry for specifying the PlatformIO cache directory. The cache_dir option defines where PlatformIO stores cached data like registry requests and downloaded packages. The default location is under the core directory in a 'cache' subfolder.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/platformio/options/directory/cache_dir.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\ncache_dir\n```\n\n----------------------------------------\n\nTITLE: Customizing HelvePic32 SMD MX270 Board Settings in PlatformIO\nDESCRIPTION: Extended configuration for the HelvePic32 SMD MX270 board, demonstrating how to override default settings like the microcontroller model and CPU frequency using board-specific options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/microchippic32/helvepic32_smd_mx270.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:helvepic32_smd_mx270]\nplatform = microchippic32\nboard = helvepic32_smd_mx270\n\n; change microcontroller\nboard_build.mcu = 32MX270F256D\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced N2+ Board Configuration with MCU and Frequency Override\nDESCRIPTION: Extended configuration demonstrating how to override default microcontroller and frequency settings for the N2+ board\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/netduino2plus.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:netduino2plus]\nplatform = ststm32\nboard = netduino2plus\n\n; change microcontroller\nboard_build.mcu = stm32f405rgt6\n\n; change MCU frequency\nboard_build.f_cpu = 168000000L\n```\n\n----------------------------------------\n\nTITLE: ESP32 Board Specifications Table in RST Format\nDESCRIPTION: A restructuredText formatted table listing various ESP32 development boards with their specifications including platform, connection type, processor, clock speed, and memory configurations.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/olimex-jtag-tiny.rst#2025-04-10_snippet_2\n\nLANGUAGE: restructuredtext\nCODE:\n```\n* - :ref:`board_espressif32_sensesiot_weizen`\n      - :ref:`platform_espressif32`\n      - External\n      - ESP32\n      - 240MHz\n      - 4MB\n      - 320KB\n```\n\n----------------------------------------\n\nTITLE: Configuring ST Nucleo L152RE Board in platformio.ini\nDESCRIPTION: Basic configuration for using the ST Nucleo L152RE board in a PlatformIO project. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_l152re.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_l152re]\nplatform = ststm32\nboard = nucleo_l152re\n```\n\n----------------------------------------\n\nTITLE: Customizing MH ET LIVE ESP32MiniKit Board Settings\nDESCRIPTION: Example of overriding default board settings for the MH ET LIVE ESP32MiniKit, including changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/mhetesp32minikit.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:mhetesp32minikit]\nplatform = espressif32\nboard = mhetesp32minikit\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Generic STC15W404S Board Settings in PlatformIO\nDESCRIPTION: This snippet demonstrates how to override default board settings in PlatformIO. It shows examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15W404S.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15W404S]\nplatform = intel_mcs51\nboard = STC15W404S\n\n; change microcontroller\nboard_build.mcu = stc15w404s\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Searching for trending libraries in PlatformIO Registry\nDESCRIPTION: Example of using 'pio pkg search' to list trending libraries in the PlatformIO Registry. The command uses the 'type:library' qualifier and sorts results by trending.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/pkg/cmd_search.rst#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> pio pkg search \"type:library\" --sort trending\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration for ST Nucleo H723ZG\nDESCRIPTION: Extended PlatformIO configuration showing how to customize microcontroller and frequency settings for the ST Nucleo H723ZG board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_h723zg.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_h723zg]\nplatform = ststm32\nboard = nucleo_h723zg\n\n; change microcontroller\nboard_build.mcu = stm32h723zgt6\n\n; change MCU frequency\nboard_build.f_cpu = 550000000L\n```\n\n----------------------------------------\n\nTITLE: STM32 Board Specifications Table\nDESCRIPTION: Markdown table containing board specifications including debug capabilities, MCU model, clock frequency, flash memory size, and RAM size for various STM32-based development boards.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/ststm32.rst#2025-04-10_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n* - Name\n      - Debug\n      - MCU\n      - Frequency\n      - Flash\n      - RAM\n```\n\n----------------------------------------\n\nTITLE: Library Stats Command Output Example\nDESCRIPTION: Example output showing various library statistics including recently updated libraries, recently added libraries, and popular keywords.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/lib/cmd_stats.rst#2025-04-10_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nRECENTLY UPDATED\n****************\nName                     Date                    Url\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nGroveEncoder             12 hours ago            https://platformio.org/lib/show/1382/GroveEncoder\nRF24G                    12 hours ago            https://platformio.org/lib/show/1381/RF24G\nSim800L Library Revised  12 hours ago            https://platformio.org/lib/show/1380/Sim800L%20Library%20Revised\nArduinoSTL               12 hours ago            https://platformio.org/lib/show/750/ArduinoSTL\nhd44780                  13 hours ago            https://platformio.org/lib/show/738/hd44780\n```\n\n----------------------------------------\n\nTITLE: Advanced STC8H1K16 Board Configuration with Custom Settings\nDESCRIPTION: Extended configuration for the STC8H1K16 board with custom microcontroller and frequency settings using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8H1K16.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8H1K16]\nplatform = intel_mcs51\nboard = STC8H1K16\n\n; change microcontroller\nboard_build.mcu = stc8h1k16\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Selecting System File for Dual-Core STM32H7 in PlatformIO\nDESCRIPTION: This snippet shows how to select a specific system file for a dual-core STM32H7 target. It sets the 'system_file' option to a specific implementation for the Discovery H747XI board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/frameworks/stm32cube_extra.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_h747xi]\nplatform = ststm32\nframework = stm32cube\nboard = disco_h747xi\nboard_build.stm32cube.system_file = system_stm32h7xx_dualcore_bootcm7_cm4gated.c\n```\n\n----------------------------------------\n\nTITLE: Configuring Component CMakeLists.txt\nDESCRIPTION: Minimal CMake configuration for registering component source files in the build system.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/frameworks/espidf_extra.rst#2025-04-10_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nidf_component_register(SRCS \"foo.c\" \"bar.c\")\n```\n\n----------------------------------------\n\nTITLE: Customizing SparkFun ESP32-S2 Thing Plus Board Settings\nDESCRIPTION: Example of overriding default board settings in platformio.ini, such as changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/sparkfun_esp32s2_thing_plus.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:sparkfun_esp32s2_thing_plus]\nplatform = espressif32\nboard = sparkfun_esp32s2_thing_plus\n\n; change microcontroller\nboard_build.mcu = esp32s2\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Black STM32F407VG\nDESCRIPTION: Configuration to change the upload protocol for the Black STM32F407VG board. This example sets it to stlink.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/black_f407vg.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:black_f407vg]\nplatform = ststm32\nboard = black_f407vg\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Customizing Trueverit ESP32 Universal IoT Driver MK III Settings\nDESCRIPTION: Example of overriding default board settings in PlatformIO configuration. Demonstrates changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/trueverit-iot-driver-mk3.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:trueverit-iot-driver-mk3]\nplatform = espressif32\nboard = trueverit-iot-driver-mk3\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing ESPectro32 Board Settings in PlatformIO INI File\nDESCRIPTION: This snippet demonstrates how to override default ESPectro32 settings in the PlatformIO project configuration file. It includes examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/espectro32.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:espectro32]\nplatform = espressif32\nboard = espectro32\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for CHIPS Alliance Boards\nDESCRIPTION: This RST code defines a table of contents for CHIPS Alliance board configurations in PlatformIO documentation.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/index.rst#2025-04-10_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nCHIPS Alliance\n--------------\n\n.. toctree::\n    :maxdepth: 1\n        \n    chipsalliance/swervolf_nexys\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Example configuration for specifying the upload protocol for the BluesWireless Swan R5 board, using ST-Link as the default upload method.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/bw_swan_r5.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:bw_swan_r5]\nplatform = ststm32\nboard = bw_swan_r5\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Using 'pio lib show' Command in Bash\nDESCRIPTION: This snippet demonstrates the usage of the 'pio lib show' command in Bash. It can be used to display detailed information about a specific library, identified by either its Library ID or Name from the PlatformIO Library Registry.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/lib/cmd_show.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio lib show [LIBRARY]\n```\n\n----------------------------------------\n\nTITLE: Including HISTORY.rst File in reStructuredText\nDESCRIPTION: This snippet uses the reStructuredText include directive to incorporate the contents of the HISTORY.rst file into the current document. This is typically used to maintain a separate history or changelog file and include it in the main documentation.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/history.rst#2025-04-10_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. include:: ../../HISTORY.rst\n```\n\n----------------------------------------\n\nTITLE: Customizing TTGO T-Beam Board Settings\nDESCRIPTION: Example of overriding default board settings, such as microcontroller and CPU frequency, in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/ttgo-t-beam.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ttgo-t-beam]\nplatform = espressif32\nboard = ttgo-t-beam\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for ESPectro32 in PlatformIO INI File\nDESCRIPTION: This snippet shows how to set the upload protocol for the ESPectro32 board in the PlatformIO project configuration file. It uses the 'esptool' protocol as an example.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/espectro32.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:espectro32]\nplatform = espressif32\nboard = espectro32\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring Sanguino ATmega644P Board in PlatformIO\nDESCRIPTION: This snippet shows how to configure the Sanguino ATmega644P board in a PlatformIO project's configuration file. It sets the platform to atmelavr and the board to sanguino_atmega644p.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/sanguino_atmega644p.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:sanguino_atmega644p]\nplatform = atmelavr\nboard = sanguino_atmega644p\n```\n\n----------------------------------------\n\nTITLE: Advanced STC8H1K24 Board Configuration with Custom Settings\nDESCRIPTION: Extended configuration showing how to override default board settings like microcontroller type and CPU frequency using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8H1K24.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8H1K24]\nplatform = intel_mcs51\nboard = STC8H1K24\n\n; change microcontroller\nboard_build.mcu = stc8h1k24\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Arduino Nano Board Environment\nDESCRIPTION: Basic PlatformIO configuration for Arduino Nano ATmega328 board setup in projectconf file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/nanoatmega328.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nanoatmega328]\nplatform = atmelavr\nboard = nanoatmega328\n```\n\n----------------------------------------\n\nTITLE: Configuring JTAG-HS2 as Upload Protocol in platformio.ini\nDESCRIPTION: This snippet demonstrates how to configure the JTAG-HS2 for firmware uploading by setting the appropriate upload protocol in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/digilent-hs2.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = ...\nboard = ...\ndebug_tool = digilent-hs1\nupload_protocol = digilent-hs1\n```\n\n----------------------------------------\n\nTITLE: Customizing TI LaunchPad MSP-EXP430FR2311LP Board Settings\nDESCRIPTION: Advanced PlatformIO configuration for the TI LaunchPad MSP-EXP430FR2311LP board with custom microcontroller and CPU frequency settings. This example shows how to override default board settings using board_*** options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/timsp430/lpmsp430fr2311.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:lpmsp430fr2311]\nplatform = timsp430\nboard = lpmsp430fr2311\n\n; change microcontroller\nboard_build.mcu = msp430fr2311\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring STM32F401RE Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the STM32F401RE board in a PlatformIO project's INI file. It specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F401RE.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F401RE]\nplatform = ststm32\nboard = genericSTM32F401RE\n```\n\n----------------------------------------\n\nTITLE: Registering Source File in ESP-IDF CMake Project\nDESCRIPTION: A CMake configuration snippet that registers the main.c file as a source file in the ESP-IDF component. This is necessary for the ESP-IDF build system to include the file during compilation.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/tutorials/espressif32/espidf_debugging_unit_testing_analysis.rst#2025-04-10_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nidf_component_register(SRCS \"main.c\")\n```\n\n----------------------------------------\n\nTITLE: Basic ML51EB9AE Board Configuration in PlatformIO\nDESCRIPTION: Basic configuration setup for ML51EB9AE board in platformio.ini file. Specifies the platform and board type.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/ML51EB9AE.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ML51EB9AE]\nplatform = intel_mcs51\nboard = ML51EB9AE\n```\n\n----------------------------------------\n\nTITLE: Initializing PlatformIO Project for Emacs Integration\nDESCRIPTION: Command for generating a new PlatformIO project with Emacs IDE integration. The command creates the necessary project structure and configuration files for working with embedded development in Emacs.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/ide/emacs.rst#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npio project init --ide emacs --board <ID>\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example demonstrating how to set a specific upload protocol for the PX-HER0 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/piconomix_px_her0.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:piconomix_px_her0]\nplatform = ststm32\nboard = piconomix_px_her0\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: ESP32-PRO Upload Protocol Configuration\nDESCRIPTION: PlatformIO configuration showing how to specify the upload protocol for the ESP32-PRO board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32-pro.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32-pro]\nplatform = espressif32\nboard = esp32-pro\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Setting STM32F410C8 Upload Protocol\nDESCRIPTION: Configuration example for specifying the upload protocol in platformio.ini. Shows how to set serial as the upload method.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F410C8.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F410C8]\nplatform = ststm32\nboard = genericSTM32F410C8\n\nupload_protocol = serial\n```\n\n----------------------------------------\n\nTITLE: Advanced Arduboy DevKit Configuration Options\nDESCRIPTION: Extended PlatformIO configuration showing how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/arduboy_devkit.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:arduboy_devkit]\nplatform = atmelavr\nboard = arduboy_devkit\n\n; change microcontroller\nboard_build.mcu = atmega32u4\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Controllino Maxi Automation Board Configuration in PlatformIO\nDESCRIPTION: Extended configuration for the Controllino Maxi Automation board with custom microcontroller and frequency settings. This demonstrates how to override default board settings in the project configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/controllino_maxi_automation.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:controllino_maxi_automation]\nplatform = atmelavr\nboard = controllino_maxi_automation\n\n; change microcontroller\nboard_build.mcu = atmega2560\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Upload Protocol for STM32-E407\nDESCRIPTION: Configuration example showing how to specify a custom upload protocol for the STM32-E407 board. This demonstrates using the stlink protocol for firmware uploading.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/olimex_e407.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:olimex_e407]\nplatform = ststm32\nboard = olimex_e407\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Directory in PlatformIO INI File\nDESCRIPTION: The 'test_dir' option in the PlatformIO configuration specifies the directory where the unit testing engine will look for tests. It is of type 'DirPath', cannot have multiple values, and defaults to '<Project>/test'.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/platformio/options/directory/test_dir.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\ntest_dir = \"<Project>/test\"\n```\n\n----------------------------------------\n\nTITLE: Customizing chipKIT WiFire rev. C Board Settings in PlatformIO\nDESCRIPTION: Advanced PlatformIO configuration demonstrating how to override default board settings for the chipKIT WiFire rev. C. This example shows how to change the microcontroller and MCU frequency values.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/microchippic32/chipkit_wifire_revc.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:chipkit_wifire_revc]\nplatform = microchippic32\nboard = chipkit_wifire_revc\n\n; change microcontroller\nboard_build.mcu = 32MZ2048EFG100\n\n; change MCU frequency\nboard_build.f_cpu = 200000000L\n```\n\n----------------------------------------\n\nTITLE: Getting a Specific PlatformIO Setting in Bash\nDESCRIPTION: Example of retrieving a specific PlatformIO setting by providing its name to the 'pio settings get' command.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/cmd_settings.rst#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n> pio settings get check_prune_system_threshold\nName                            Value [Default]   Description\n------------------------------------------------------------------------------------------\ncheck_prune_system_threshold    1024              Check for pruning unnecessary data threshold (megabytes)\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for STM32H735G-DK Discovery Kit\nDESCRIPTION: Configuration to change the upload protocol for the STM32H735G-DK Discovery kit board in PlatformIO. This example sets it to 'stlink'.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_h735ig.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_h735ig]\nplatform = ststm32\nboard = disco_h735ig\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Customizing NodeMCU Hardware Settings in PlatformIO\nDESCRIPTION: Demonstrates how to override default NodeMCU board settings in PlatformIO configuration, including changing the microcontroller type and CPU frequency. These settings are based on the board's JSON manifest.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/nodemcu.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nodemcu]\nplatform = espressif8266\nboard = nodemcu\n\n; change microcontroller\nboard_build.mcu = esp8266\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Adafruit Pro Trinket 5V/16MHz (FTDI) in PlatformIO INI file\nDESCRIPTION: This code snippet shows how to configure the Adafruit Pro Trinket 5V/16MHz (FTDI) board in the PlatformIO project configuration file (platformio.ini). It sets the platform to atmelavr and the board to protrinket5ftdi.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/protrinket5ftdi.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:protrinket5ftdi]\nplatform = atmelavr\nboard = protrinket5ftdi\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_circuitplayground_m0.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_circuitplayground_m0]\nplatform = atmelsam\nboard = adafruit_circuitplayground_m0\n\nupload_protocol = sam-ba\n```\n\n----------------------------------------\n\nTITLE: Customizing Generic STC15F102 Board Settings in PlatformIO\nDESCRIPTION: This snippet illustrates how to override default settings for the Generic STC15F102 board in a PlatformIO project. It shows examples of changing the microcontroller and MCU frequency using board-specific options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15F102.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15F102]\nplatform = intel_mcs51\nboard = STC15F102\n\n; change microcontroller\nboard_build.mcu = stc15f102\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: PVS-Studio License File Format Example\nDESCRIPTION: Example content of a PVS-Studio license file that should be saved in UTF-8 + BOM format.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/advanced/static-code-analysis/tools/pvs-studio.rst#2025-04-10_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nname@domain.com\nAAAA-BBBB-CCCC-DDDD\n```\n\n----------------------------------------\n\nTITLE: Example Output of 'pio lib show' Command\nDESCRIPTION: This code block shows an example of the output produced by the 'pio lib show' command when used to display information about the 'PubSubClient' library. It includes details such as the library's ID, version, description, authors, keywords, compatible frameworks and platforms, and download statistics.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/lib/cmd_show.rst#2025-04-10_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n> pio lib show OneWire\n\nPubSubClient\n============\n#ID: 89\nA client library for MQTT messaging. MQTT is a lightweight messaging protocol ideal for small devices. This library allows you to send and receive MQTT messages. It supports the latest MQTT 3.1.1 protocol and can be configured to use the older MQTT 3.1...\n\nVersion: 2.6, released 10 months ago\nManifest: https://raw.githubusercontent.com/ivankravets/pubsubclient/patch-2/library.json\nHomepage: http://pubsubclient.knolleary.net\nRepository: https://github.com/knolleary/pubsubclient.git\n\nAuthors\n-------\nNick O'Leary https://github.com/knolleary\n\nKeywords\n--------\nethernet\nmqtt\niot\nm2m\n\nCompatible frameworks\n---------------------\nArduino\n\nCompatible platforms\n--------------------\nAtmel AVR\nAtmel SAM\nEspressif 8266\nIntel ARC32\nMicrochip PIC32\nNordic nRF51\nTeensy\nTI MSP430\n\nHeaders\n-------\nPubSubClient.h\n\nExamples\n--------\nhttp://dl.platformio.org/libraries/examples/0/89/mqtt_auth.ino\nhttp://dl.platformio.org/libraries/examples/0/89/mqtt_basic.ino\nhttp://dl.platformio.org/libraries/examples/0/89/mqtt_esp8266.ino\nhttp://dl.platformio.org/libraries/examples/0/89/mqtt_publish_in_callback.ino\nhttp://dl.platformio.org/libraries/examples/0/89/mqtt_reconnect_nonblocking.ino\nhttp://dl.platformio.org/libraries/examples/0/89/mqtt_stream.ino\n\nVersions\n--------\n2.6, released 10 months ago\n\nDownloads\n---------\nToday: 25\nWeek: 120\nMonth: 462\n```\n\n----------------------------------------\n\nTITLE: Customizing Generic STC15F105E Board Settings in PlatformIO INI File\nDESCRIPTION: This snippet demonstrates how to override default settings for the Generic STC15F105E board in the PlatformIO configuration. It shows how to change the microcontroller and MCU frequency using board-specific options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15F105E.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15F105E]\nplatform = intel_mcs51\nboard = STC15F105E\n\n; change microcontroller\nboard_build.mcu = stc15f105e\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Basic ATtiny426 Configuration in platformio.ini\nDESCRIPTION: Basic configuration snippet for setting up an ATtiny426 project in PlatformIO. This defines the minimal required parameters including the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/ATtiny426.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATtiny426]\nplatform = atmelmegaavr\nboard = ATtiny426\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Nordic nRF52-DK in PlatformIO\nDESCRIPTION: PlatformIO configuration showing how to specify a custom upload protocol for the Nordic nRF52-DK board. The example uses the J-Link protocol, which is also the default for this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/nrf52_dk.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:nrf52_dk]\nplatform = nordicnrf52\nboard = nrf52_dk\n\nupload_protocol = jlink\n```\n\n----------------------------------------\n\nTITLE: Extended PlatformIO Configuration with Customized MCU Settings\nDESCRIPTION: Extended configuration in platformio.ini that includes custom settings for the microcontroller and clock frequency. This example shows how to override default board settings with specific values.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/attiny167.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:attiny167]\nplatform = atmelavr\nboard = attiny167\n\n; change microcontroller\nboard_build.mcu = attiny167\n\n; change MCU frequency\nboard_build.f_cpu = 8000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Adafruit MatrixPortal ESP32-S3\nDESCRIPTION: Configuration example showing how to set the upload protocol for the Adafruit MatrixPortal ESP32-S3 board in platformio.ini. The default protocol is esptool.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/adafruit_matrixportal_esp32s3.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_matrixportal_esp32s3]\nplatform = espressif32\nboard = adafruit_matrixportal_esp32s3\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Project Structure Definition\nDESCRIPTION: Defines the basic file structure for a PlatformIO project using custom Unity testing framework.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/advanced/unit-testing/frameworks/custom/examples/custom_unity_library.rst#2025-04-10_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n/project\n├── platformio.ini\n└── test\n    ├── test_blink\n    │   └── test_main.cpp\n    └── test_custom_runner.py\n\n2 directories, 3 files\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration for ESP32-C3-DevKitC-02\nDESCRIPTION: Minimal PlatformIO configuration for setting up an ESP32-C3-DevKitC-02 project with the Espressif32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32-c3-devkitc-02.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32-c3-devkitc-02]\nplatform = espressif32\nboard = esp32-c3-devkitc-02\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Maple Board\nDESCRIPTION: Configuration example showing how to set a specific upload protocol (DFU in this case) for the Maple board in platformio.ini.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/maple.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:maple]\nplatform = ststm32\nboard = maple\n\nupload_protocol = dfu\n```\n\n----------------------------------------\n\nTITLE: Customizing ATtiny417 settings in PlatformIO configuration\nDESCRIPTION: Advanced PlatformIO configuration for the ATtiny417 board showing how to override default board settings such as microcontroller model and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/ATtiny417.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATtiny417]\nplatform = atmelmegaavr\nboard = ATtiny417\n\n; change microcontroller\nboard_build.mcu = attiny417\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing BlackPill F401CE Board Settings in PlatformIO\nDESCRIPTION: Advanced PlatformIO configuration showing how to override default board settings such as microcontroller model and CPU frequency using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/blackpill_f401ce.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:blackpill_f401ce]\nplatform = ststm32\nboard = blackpill_f401ce\n\n; change microcontroller\nboard_build.mcu = stm32f401ceu6\n\n; change MCU frequency\nboard_build.f_cpu = 84000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic PlatformIO Environment for ESP32-CAM\nDESCRIPTION: Basic configuration for setting up a PlatformIO environment for the AI Thinker ESP32-CAM board. This snippet defines the platform and board ID required for development.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32cam.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32cam]\nplatform = espressif32\nboard = esp32cam\n```\n\n----------------------------------------\n\nTITLE: Advanced TinyS3 Board Configuration\nDESCRIPTION: Extended configuration example showing how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/um_tinys3.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:um_tinys3]\nplatform = espressif32\nboard = um_tinys3\n\n; change microcontroller\nboard_build.mcu = esp32s3\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Project Environment in PlatformIO INI\nDESCRIPTION: Basic platformio.ini configuration showing environment setup and extra script inclusion for compilation database customization.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/compile_commands.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = ...\nboard = ...\nextra_scripts = pre:extra_script.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Olimex ARM-USB-OCD Debug Tool in PlatformIO\nDESCRIPTION: Sample configuration for setting up the Olimex ARM-USB-OCD debugger in the project's platformio.ini file. This enables debugging capabilities for the specified environment.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/olimex-arm-usb-ocd.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = ...\nboard = ...\ndebug_tool = olimex-arm-usb-ocd\n```\n\n----------------------------------------\n\nTITLE: Using the pio update Command in PlatformIO CLI\nDESCRIPTION: Basic syntax for the 'pio update' command which checks or updates installed PlatformIO Core packages, platforms, and global libraries. This command is deprecated as of version 6.0 and will be removed in future releases.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/cmd_update.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio update [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Unexpected Maker PROS3\nDESCRIPTION: Configuration for specifying the upload protocol in PlatformIO. This snippet shows how to set the upload protocol to esptool, which is the default for the Unexpected Maker PROS3 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/um_pros3.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:um_pros3]\nplatform = espressif32\nboard = um_pros3\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring SODAQ Autonomo Board in PlatformIO\nDESCRIPTION: Basic PlatformIO configuration for the SODAQ Autonomo board using the atmelsam platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/sodaq_autonomo.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:sodaq_autonomo]\nplatform = atmelsam\nboard = sodaq_autonomo\n```\n\n----------------------------------------\n\nTITLE: N2+ Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to set a specific upload protocol for the N2+ board\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/netduino2plus.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:netduino2plus]\nplatform = ststm32\nboard = netduino2plus\n\nupload_protocol = dfu\n```\n\n----------------------------------------\n\nTITLE: Configuring Econode-L082CZ Board in PlatformIO\nDESCRIPTION: This snippet shows how to configure the Econode-L082CZ board in the PlatformIO project configuration file. It includes the basic setup and examples of how to override default board settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/econode_l082cz.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:econode_l082cz]\nplatform = ststm32\nboard = econode_l082cz\n\n; change microcontroller\nboard_build.mcu = stm32l082czy6\n\n; change MCU frequency\nboard_build.f_cpu = 32000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Protocol for ESP32-S2-Kaluga-1\nDESCRIPTION: Example of setting a specific upload protocol in platformio.ini. The default protocol is esptool, but the board supports multiple protocols including JTAG-based options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32-s2-kaluga-1.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32-s2-kaluga-1]\nplatform = espressif32\nboard = esp32-s2-kaluga-1\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring Mini-Module FT2232H for Firmware Uploading in platformio.ini\nDESCRIPTION: Example configuration for using the Mini-Module FT2232H for both debugging and firmware uploading in the project's platformio.ini file. This sets both the debug_tool and upload_protocol options to 'minimodule'.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/minimodule.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = ...\nboard = ...\ndebug_tool = minimodule\nupload_protocol = minimodule\n```\n\n----------------------------------------\n\nTITLE: Advanced STM32F413CH Board Configuration\nDESCRIPTION: Extended PlatformIO configuration showing how to override default microcontroller and frequency settings\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F413CH.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F413CH]\nplatform = ststm32\nboard = genericSTM32F413CH\n\n; change microcontroller\nboard_build.mcu = stm32f413chu6\n\n; change MCU frequency\nboard_build.f_cpu = 100000000L\n```\n\n----------------------------------------\n\nTITLE: Atmel AVR Board Specifications Table\nDESCRIPTION: A restructured text table listing various Atmel AVR boards with their specifications including microcontroller type, clock speed, and memory configurations. The table includes entries for different board variants from manufacturers like Sparkfun, SODAQ, and others.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/simavr.rst#2025-04-10_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n* - :ref:`board_atmelavr_prusa_rambo`\n      - :ref:`platform_atmelavr`\n      - External\n      - ATMEGA2560\n      - 16MHz\n      - 252KB\n      - 8KB\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to set the upload protocol for the SLSTK3701A Giant Gecko S1 board to mbed.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/siliconlabsefm32/efm32gg11_stk3701.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:efm32gg11_stk3701]\nplatform = siliconlabsefm32\nboard = efm32gg11_stk3701\n\nupload_protocol = mbed\n```\n\n----------------------------------------\n\nTITLE: ESP32-S3 Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the ESP32-S3-DevKitC-1 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32-s3-devkitc-1.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32-s3-devkitc-1]\nplatform = espressif32\nboard = esp32-s3-devkitc-1\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Customizing NodeMCU-32S Board Settings in PlatformIO\nDESCRIPTION: Advanced configuration for the NodeMCU-32S board showing how to override default settings such as microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/nodemcu-32s.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nodemcu-32s]\nplatform = espressif32\nboard = nodemcu-32s\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for PlatformIO Organization Commands\nDESCRIPTION: These commands show the help information for the 'pio org' command and its subcommands. They list all available commands and options for organization management in PlatformIO.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/org/index.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio org --help\n```\n\nLANGUAGE: bash\nCODE:\n```\npio org COMMAND --help\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration for STM32F412RG in PlatformIO\nDESCRIPTION: Configure the upload protocol for STM32F412RG in PlatformIO. This example uses the 'serial' protocol, which is the default option for this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F412RG.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F412RG]\nplatform = ststm32\nboard = genericSTM32F412RG\n\nupload_protocol = serial\n```\n\n----------------------------------------\n\nTITLE: Customizing ST Nucleo L452RE Hardware Settings in PlatformIO\nDESCRIPTION: Extended configuration for customizing the microcontroller and CPU frequency settings of the ST Nucleo L452RE board in a PlatformIO project.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_l452re.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_l452re]\nplatform = ststm32\nboard = nucleo_l452re\n\n; change microcontroller\nboard_build.mcu = stm32l452ret6\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Arduino Yun Board Settings in PlatformIO INI File\nDESCRIPTION: This snippet demonstrates how to override default Arduino Yun settings in the PlatformIO project configuration file. It includes examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/yun.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:yun]\nplatform = atmelavr\nboard = yun\n\n; change microcontroller\nboard_build.mcu = atmega32u4\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Setting upload protocol for NXP i.MX RT1020 Evaluation Kit\nDESCRIPTION: Configuration example for changing the upload protocol to mbed for the NXP i.MX RT1020 Evaluation Kit in platformio.ini.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nxpimxrt/mimxrt1020_evk.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:mimxrt1020_evk]\nplatform = nxpimxrt\nboard = mimxrt1020_evk\n\nupload_protocol = mbed\n```\n\n----------------------------------------\n\nTITLE: PlatformIO CI Documentation Structure\nDESCRIPTION: ReStructuredText table of contents defining the structure for CI platform integration guides including AppVeyor, CircleCI, Drone, GitHub Actions, GitLab, Shippable and Travis.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/ci/index.rst#2025-04-10_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n    :maxdepth: 2\n\n    appveyor\n    circleci\n    drone\n    github-actions\n    gitlab\n    shippable\n    travis\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for STM32F103VB\nDESCRIPTION: Configuration to specify the upload protocol for the STM32F103VB board. In this example, it's set to use the ST-Link protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103VB.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103VB]\nplatform = ststm32\nboard = genericSTM32F103VB\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic PlatformIO Environment for STM32F103T4\nDESCRIPTION: Basic PlatformIO project configuration for the STM32F103T4 board. This snippet defines the platform and board ID required for a minimal working environment.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103T4.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103T4]\nplatform = ststm32\nboard = genericSTM32F103T4\n```\n\n----------------------------------------\n\nTITLE: Using PlatformIO Settings Set Command in Bash\nDESCRIPTION: Command usage for modifying PlatformIO settings. The command requires a setting name and the new value to be provided.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/cmd_settings.rst#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npio settings set NAME VALUE\n```\n\n----------------------------------------\n\nTITLE: Configuring STM32F7508-DK Board in PlatformIO\nDESCRIPTION: Basic PlatformIO configuration for the STM32F7508-DK board, including platform and board ID. Additional options demonstrate how to override default microcontroller and frequency settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_f750n8.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_f750n8]\nplatform = ststm32\nboard = disco_f750n8\n\n; change microcontroller\nboard_build.mcu = stm32f750n8h6\n\n; change MCU frequency\nboard_build.f_cpu = 216000000L\n```\n\n----------------------------------------\n\nTITLE: Overriding Default ESPino Settings in PlatformIO INI File\nDESCRIPTION: This example demonstrates how to override default ESPino settings in the PlatformIO configuration. It shows how to change the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/espino.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:espino]\nplatform = espressif8266\nboard = espino\n\n; change microcontroller\nboard_build.mcu = esp8266\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU and Frequency Settings\nDESCRIPTION: Extended configuration showing how to override default board settings like microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_feather_m0_express.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_feather_m0_express]\nplatform = atmelsam\nboard = adafruit_feather_m0_express\n\n; change microcontroller\nboard_build.mcu = samd21g18a\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: INI configuration demonstrating how to specify the upload protocol for the Adafruit Feather nRF52840 Express.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/adafruit_feather_nrf52840.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_feather_nrf52840]\nplatform = nordicnrf52\nboard = adafruit_feather_nrf52840\n\nupload_protocol = nrfutil\n```\n\n----------------------------------------\n\nTITLE: Configuring Upstream Espressif32 Platform Version\nDESCRIPTION: INI configuration for using the latest upstream development version from GitHub repository.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/espressif32.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:upstream_develop]\nplatform = https://github.com/platformio/platform-espressif32.git\nboard = ...\n```\n\n----------------------------------------\n\nTITLE: Customizing STC8A8K32D4 Configuration in PlatformIO\nDESCRIPTION: Extended PlatformIO project configuration for STC8A8K32D4 board with custom microcontroller and frequency settings. This demonstrates how to override default board settings using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8A8K32D4.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8A8K32D4]\nplatform = intel_mcs51\nboard = STC8A8K32D4\n\n; change microcontroller\nboard_build.mcu = stc8a8k32d4\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Listing All PlatformIO Settings in Bash\nDESCRIPTION: Example of listing all PlatformIO settings and their current values using the 'pio settings get' command with no arguments.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/cmd_settings.rst#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> pio settings get\n\nName                            Value [Default]   Description\n------------------------------------------------------------------------------------------\ncheck_platformio_interval       7                 Check for the new PlatformIO Core interval (days)\ncheck_prune_system_threshold    1024              Check for pruning unnecessary data threshold (megabytes)\nenable_cache                    Yes               Enable caching for HTTP API requests\nenable_telemetry                Yes               Telemetry service <https://bit.ly/pio-telemetry> (Yes/No)\nforce_verbose                   No                Force verbose output when processing environments\nprojects_dir                    ~/Documents/PlatformIO/Projects Default location for PlatformIO projects (PlatformIO Home)\n```\n\n----------------------------------------\n\nTITLE: Searching libraries by author\nDESCRIPTION: Example of using the 'pio lib search' command to find libraries by a specific author (Adafruit Industries in this case).\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/lib/cmd_search.rst#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npio lib search --author=\"Adafruit Industries\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced STC8A4K16S2A12 Settings in platformio.ini\nDESCRIPTION: Extended configuration for a PlatformIO project targeting the STC8A4K16S2A12 board with custom microcontroller and frequency settings. Demonstrates how to override default board settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8A4K16S2A12.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8A4K16S2A12]\nplatform = intel_mcs51\nboard = STC8A4K16S2A12\n\n; change microcontroller\nboard_build.mcu = stc8a4k16s2a12\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Accessing Remote Serial Monitor with PlatformIO\nDESCRIPTION: Command to open a serial monitor connection to remote devices. This allows reading and sending data to devices connected to the remote machine.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/ide/codeanywhere.rst#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npio remote device monitor\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Structure in Eclipse Che\nDESCRIPTION: Shows the recommended folder structure for multiple PlatformIO-based projects within a single Eclipse Che workspace.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/ide/eclipseche.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n├── project-A\n│   ├── lib\n│   │   └── README\n│   ├── platformio.ini\n│   └── src\n│       └── main.ino\n└── project-B\n    ├── lib\n    │   └── README\n    ├── platformio.ini\n    └── src\n        ├── main.cpp\n        └── main.h\n```\n\n----------------------------------------\n\nTITLE: Customizing ST 32F469IDISCOVERY Board Settings\nDESCRIPTION: Example of overriding default board settings in PlatformIO configuration. Demonstrates changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_f469ni.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_f469ni]\nplatform = ststm32\nboard = disco_f469ni\n\n; change microcontroller\nboard_build.mcu = stm32f469nih6\n\n; change MCU frequency\nboard_build.f_cpu = 180000000L\n```\n\n----------------------------------------\n\nTITLE: Basic STC8C1K08 Board Configuration\nDESCRIPTION: Basic PlatformIO configuration for STC8C1K08 board using the intel_mcs51 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8C1K08.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8C1K08]\nplatform = intel_mcs51\nboard = STC8C1K08\n```\n\n----------------------------------------\n\nTITLE: Customizing ATtiny427 Board Settings in PlatformIO\nDESCRIPTION: Extended configuration for the ATtiny427 board in platformio.ini with customized microcontroller and frequency settings. This demonstrates how to override default board settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/ATtiny427.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATtiny427]\nplatform = atmelmegaavr\nboard = ATtiny427\n\n; change microcontroller\nboard_build.mcu = attiny427\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Blinker WiFiduino32\nDESCRIPTION: This configuration shows how to set the upload protocol for the Blinker WiFiduino32 board. In this case, it's set to use the esptool protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/wifiduino32.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:wifiduino32]\nplatform = espressif32\nboard = wifiduino32\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO Environment for STC15F408AD\nDESCRIPTION: Basic PlatformIO configuration for setting up a project with the Generic STC15F408AD board. This snippet shows how to specify the target board in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15F408AD.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15F408AD]\nplatform = intel_mcs51\nboard = STC15F408AD\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU Settings\nDESCRIPTION: Extended PlatformIO configuration showing how to override default microcontroller and frequency settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/mhetesp32devkit.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:mhetesp32devkit]\nplatform = espressif32\nboard = mhetesp32devkit\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Searching for packages supporting STM32F405RG MCU\nDESCRIPTION: Example of using 'pio pkg search' to find packages that support the STM32F405RG microcontroller unit. This demonstrates a specific hardware compatibility search.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/pkg/cmd_search.rst#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n> pio pkg search \"STM32F405RG\"\n```\n\n----------------------------------------\n\nTITLE: Customizing STM32F410CB Board Parameters in PlatformIO\nDESCRIPTION: Extended configuration showing how to override default board settings such as microcontroller model and CPU frequency in the PlatformIO configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F410CB.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F410CB]\nplatform = ststm32\nboard = genericSTM32F410CB\n\n; change microcontroller\nboard_build.mcu = stm32f410cbt6\n\n; change MCU frequency\nboard_build.f_cpu = 100000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for ESP32-CAM\nDESCRIPTION: Configuration for specifying the upload protocol for the AI Thinker ESP32-CAM board. This example sets the upload protocol to esptool, which is also the default option.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32cam.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32cam]\nplatform = espressif32\nboard = esp32cam\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Customizing Arduino Uno Board Settings in PlatformIO\nDESCRIPTION: Advanced PlatformIO configuration for the Arduino Uno board that demonstrates how to override default board settings such as microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/uno.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:uno]\nplatform = atmelavr\nboard = uno\n\n; change microcontroller\nboard_build.mcu = atmega328p\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/airm2m_core_esp32c3.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:airm2m_core_esp32c3]\nplatform = espressif32\nboard = airm2m_core_esp32c3\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for SparkFun Pro Micro 3.3V/8MHz\nDESCRIPTION: Basic PlatformIO configuration for the SparkFun Pro Micro 3.3V/8MHz board. Sets the platform to atmelavr and specifies the board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/sparkfun_promicro8.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:sparkfun_promicro8]\nplatform = atmelavr\nboard = sparkfun_promicro8\n```\n\n----------------------------------------\n\nTITLE: Customizing ATtiny45 Hardware Settings in platformio.ini\nDESCRIPTION: Extended configuration for Generic ATtiny45 that demonstrates how to override default board settings such as microcontroller type and CPU frequency in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/attiny45.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:attiny45]\nplatform = atmelavr\nboard = attiny45\n\n; change microcontroller\nboard_build.mcu = attiny45\n\n; change MCU frequency\nboard_build.f_cpu = 8000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing LightBlue Bean MCU Settings\nDESCRIPTION: Advanced PlatformIO configuration demonstrating how to override default microcontroller and frequency settings for the LightBlue Bean board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/lightblue-bean.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:lightblue-bean]\nplatform = atmelavr\nboard = lightblue-bean\n\n; change microcontroller\nboard_build.mcu = atmega328p\n\n; change MCU frequency\nboard_build.f_cpu = 8000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Board Settings for SparkFun SAMD51 MicroMod\nDESCRIPTION: Example showing how to override default board settings such as microcontroller model and CPU frequency in the PlatformIO configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/sparkfun_samd51_micromod.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:sparkfun_samd51_micromod]\nplatform = atmelsam\nboard = sparkfun_samd51_micromod\n\n; change microcontroller\nboard_build.mcu = samd51j20a\n\n; change MCU frequency\nboard_build.f_cpu = 120000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring TI-ICDI for Firmware Upload in PlatformIO\nDESCRIPTION: This snippet demonstrates how to configure TI-ICDI for both debugging and firmware uploading in the PlatformIO project configuration file. It sets both the debug_tool and upload_protocol options to ti-icdi.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/ti-icdi.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = ...\nboard = ...\ndebug_tool = ti-icdi\nupload_protocol = ti-icdi\n```\n\n----------------------------------------\n\nTITLE: Customizing ATmega16 MCU Settings in PlatformIO\nDESCRIPTION: Advanced configuration showing how to override default microcontroller settings including MCU type and clock frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega16.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega16]\nplatform = atmelavr\nboard = ATmega16\n\n; change microcontroller\nboard_build.mcu = atmega16\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Board Specifications Table in reST Format\nDESCRIPTION: A reStructuredText formatted table containing specifications for various development boards including information about platforms, processors, memory configurations, and connectivity options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/olimex-arm-usb-ocd.rst#2025-04-10_snippet_2\n\nLANGUAGE: markup\nCODE:\n```\n* - :ref:`board_espressif32_airm2m_core_esp32c3`\n  - :ref:`platform_espressif32`\n  - External\n  - ESP32C3\n  - 160MHz\n  - 4MB\n  - 320KB\n```\n\n----------------------------------------\n\nTITLE: Configuring AVR32DB32 Board in PlatformIO Project Configuration\nDESCRIPTION: Basic configuration for using the AVR32DB32 board in a PlatformIO project. This snippet shows how to specify the board and platform in the project's platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/AVR32DB32.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:AVR32DB32]\nplatform = atmelmegaavr\nboard = AVR32DB32\n```\n\n----------------------------------------\n\nTITLE: Generating PlatformIO Project for NetBeans IDE\nDESCRIPTION: This command initializes a PlatformIO project configured for NetBeans IDE. It uses the PlatformIO Core CLI to create the project structure and configuration files.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/ide/netbeans.rst#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npio project init --ide netbeans --board <ID>\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic BPI-Leaf-S3 Board Settings in PlatformIO\nDESCRIPTION: Basic PlatformIO configuration for BPI-Leaf-S3 board specifying the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/bpi_leaf_s3.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:bpi_leaf_s3]\nplatform = espressif32\nboard = bpi_leaf_s3\n```\n\n----------------------------------------\n\nTITLE: Configuring Deneyap Mini Board in PlatformIO\nDESCRIPTION: Basic configuration for the Deneyap Mini board using the Espressif32 platform in the project's platformio.ini file. It sets the board ID and platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/deneyapmini.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:deneyapmini]\nplatform = espressif32\nboard = deneyapmini\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU Settings\nDESCRIPTION: Extended PlatformIO configuration showing how to override default microcontroller and frequency settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/eval_f373vc.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:eval_f373vc]\nplatform = ststm32\nboard = eval_f373vc\n\n; change microcontroller\nboard_build.mcu = stm32f373vct6\n\n; change MCU frequency\nboard_build.f_cpu = 72000000L\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration for Franzininho WiFi MSC ESP32S2\nDESCRIPTION: Configures the basic build environment for Franzininho WiFi MSC board using the espressif32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/franzininho_wifi_msc_esp32s2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:franzininho_wifi_msc_esp32s2]\nplatform = espressif32\nboard = franzininho_wifi_msc_esp32s2\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration with MCU Settings\nDESCRIPTION: Extended configuration for Controllino Mini with custom microcontroller and frequency settings. Demonstrates how to override default board settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/controllino_mini.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:controllino_mini]\nplatform = atmelavr\nboard = controllino_mini\n\n; change microcontroller\nboard_build.mcu = atmega328p\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Board Parameters for Arty A7-100 in PlatformIO\nDESCRIPTION: Advanced configuration showing how to override default board settings such as microcontroller type and CPU frequency in the PlatformIO project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/shakti/artix7_100t.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:artix7_100t]\nplatform = shakti\nboard = artix7_100t\n\n; change microcontroller\nboard_build.mcu = C-Class\n\n; change MCU frequency\nboard_build.f_cpu = 50000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for NodeMCU 1.0 (ESP-12E Module)\nDESCRIPTION: Configuration for specifying the upload protocol for the NodeMCU board. This example explicitly sets the upload protocol to esptool, which is also the default method for this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/nodemcuv2.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:nodemcuv2]\nplatform = espressif8266\nboard = nodemcuv2\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Arduino Giga R1 (M7 core)\nDESCRIPTION: Configuration example showing how to set the upload protocol for the Arduino Giga R1 (M7 core). The board supports cmsis-dap, dfu, jlink, mbed, and stlink protocols, with dfu being the default.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/giga_r1_m7.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:giga_r1_m7]\nplatform = ststm32\nboard = giga_r1_m7\n\nupload_protocol = dfu\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for 96Boards Neonkey\nDESCRIPTION: Basic configuration example showing how to set up a PlatformIO project for the 96Boards Neonkey board using the STM32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/b96b_aerocore2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:b96b_aerocore2]\nplatform = ststm32\nboard = b96b_aerocore2\n```\n\n----------------------------------------\n\nTITLE: Customizing Arduino Pro Mini ATmega168 Settings in PlatformIO INI File\nDESCRIPTION: This snippet demonstrates how to override default settings for the Arduino Pro or Pro Mini ATmega168 (5V, 16 MHz) board in the PlatformIO project configuration file. It shows how to change the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/pro16MHzatmega168.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:pro16MHzatmega168]\nplatform = atmelavr\nboard = pro16MHzatmega168\n\n; change microcontroller\nboard_build.mcu = atmega168\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: ESP32 Board Specifications Table\nDESCRIPTION: Markdown table listing ESP32 development boards with their specifications including platform type, CPU variants, clock speeds, flash memory and RAM sizes.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/olimex-arm-usb-ocd.rst#2025-04-10_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n* - :ref:`board_espressif32_um_tinys2`\n      - :ref:`platform_espressif32`\n      - External\n      - ESP32S2\n      - 240MHz\n      - 4MB\n      - 320KB\n    * - :ref:`board_espressif32_um_tinys3`\n      - :ref:`platform_espressif32`\n      - External\n      - ESP32S3\n      - 240MHz\n      - 8MB\n      - 320KB\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration with Custom Settings\nDESCRIPTION: Example showing how to customize microcontroller and frequency settings for the SparkFun RED-V RedBoard in PlatformIO configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/sifive/sparkfun_redboard_v.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:sparkfun_redboard_v]\nplatform = sifive\nboard = sparkfun_redboard_v\n\n; change microcontroller\nboard_build.mcu = fe310\n\n; change MCU frequency\nboard_build.f_cpu = 320000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Arduino Nano ATmega328 Settings in PlatformIO INI\nDESCRIPTION: Example of overriding default board settings in PlatformIO configuration. Shows how to change the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/nanoatmega328new.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nanoatmega328new]\nplatform = atmelavr\nboard = nanoatmega328new\n\n; change microcontroller\nboard_build.mcu = atmega328p\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring LilyGo T-Display in platformio.ini\nDESCRIPTION: Basic configuration for LilyGo T-Display board in the PlatformIO project configuration file. This defines the environment using the espressif32 platform and lilygo-t-display board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/lilygo-t-display.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:lilygo-t-display]\nplatform = espressif32\nboard = lilygo-t-display\n```\n\n----------------------------------------\n\nTITLE: Customizing Teensy 3.0 Board Settings in PlatformIO INI File\nDESCRIPTION: This snippet demonstrates how to override default Teensy 3.0 settings in a PlatformIO project. It shows how to change the microcontroller and MCU frequency using board-specific options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/teensy/teensy30.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:teensy30]\nplatform = teensy\nboard = teensy30\n\n; change microcontroller\nboard_build.mcu = mk20dx128\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic STC8A8K60S4A12 Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the Generic STC8A8K60S4A12 board in the PlatformIO project configuration file. It sets the platform and board ID, and demonstrates how to override default board settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8A8K60S4A12.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8A8K60S4A12]\nplatform = intel_mcs51\nboard = STC8A8K60S4A12\n\n; change microcontroller\nboard_build.mcu = stc8a8k60s4a12\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Project Structure in reStructuredText\nDESCRIPTION: This snippet defines a table of contents for the Project Structure section using reStructuredText formatting. It includes links to pages about best practices, hierarchy, and shared code.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/advanced/unit-testing/structure/index.rst#2025-04-10_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   best-practices\n   hierarchy\n   shared-code\n```\n\n----------------------------------------\n\nTITLE: Example Output of PlatformIO Built-in Libraries Command\nDESCRIPTION: Demonstrates the standard output format when running the 'pio lib builtin' command. The output shows libraries grouped by framework with details including version, homepage, keywords, and compatibility information.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/lib/cmd_builtin.rst#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> pio lib builtin\n\nframework-arduinoavr\n********************\n\nBridge\n======\nEnables the communication between the Linux processor and the microcontroller. For Arduino/Genuino Yún, Yún Shield and TRE only.\n\nVersion: 1.6.1\nHomepage: http://www.arduino.cc/en/Reference/YunBridgeLibrary\nKeywords: communication\nCompatible frameworks: arduino\nCompatible platforms: *\nAuthors: Arduino\n\nEEPROM\n======\nEnables reading and writing to the permanent board storage.\n\nVersion: 2.0\nHomepage: http://www.arduino.cc/en/Reference/EEPROM\nKeywords: data, storage\nCompatible frameworks: arduino\nCompatible platforms: atmelavr\nAuthors: Arduino, Christopher Andrews\n\n...\n\n\nframework-arduinosam\n********************\n\nAudio\n=====\nAllows playing audio files from an SD card. For Arduino DUE only.\n\nVersion: 1.0\nHomepage: http://arduino.cc/en/Reference/Audio\nKeywords: signal, input, output\nCompatible frameworks: arduino\nCompatible platforms: atmelsam\nAuthors: Arduino\n\n...\n\n\nframework-arduinoespressif32\n****************************\n\nSPI\n===\nEnables the communication with devices that use the Serial Peripheral Interface (SPI) Bus. For all Arduino boards, BUT Arduino DUE.\n\nVersion: 1.0\nHomepage: http://arduino.cc/en/Reference/SPI\nKeywords: signal, input, output\nCompatible frameworks: arduino\nCompatible platforms:\nAuthors: Hristo Gochkov\n\n...\n\nframework-arduinoespressif8266\n******************************\n\nArduinoOTA\n==========\nEnables Over The Air upgrades, via wifi and espota.py UDP request/TCP download.\n\nVersion: 1.0\nKeywords: communication\nCompatible frameworks: arduino\nCompatible platforms: espressif8266\nAuthors: Ivan Grokhotkov and Miguel Angel Ajo\n\nDNSServer\n=========\nA simple DNS server for ESP8266.\n\nVersion: 1.1.0\nKeywords: communication\nCompatible frameworks: arduino\nCompatible platforms: espressif8266\nAuthors: Kristijan Novoselić\n\n...\n\nframework-arduinointel\n**********************\n\nAdafruit NeoPixel\n=================\nArduino library for controlling single-wire-based LED pixels and strip.\n\nVersion: 1.0.3\nHomepage: https://github.com/adafruit/Adafruit_NeoPixel\nKeywords: display\nCompatible frameworks: arduino\nCompatible platforms: *\nAuthors: Adafruit\n\nCurieBLE\n========\nLibrary to manage the Bluetooth Low Energy module with Curie Core boards.\n\nVersion: 1.0\nKeywords: communication\nCompatible frameworks: arduino\nCompatible platforms: intel_arc32\nAuthors: Emutex\n\nCurieEEPROM\n===========\nEnables reading and writing to OTP flash area of Curie\n\nVersion: 1.0\nHomepage: http://www.arduino.cc/en/Reference/EEPROM\nKeywords: data, storage\nCompatible frameworks: arduino\nCompatible platforms: intel_arc32\nAuthors: Intel\n\n...\n\nframework-arduinomicrochippic32\n*******************************\n\nFirmata\n=======\nEnables the communication with computer apps using a standard serial protocol. For all Arduino boards.\n\nVersion: 2.4.4\nHomepage: https://github.com/firmata/arduino\nKeywords: device, control\nCompatible frameworks: arduino\nCompatible platforms: *\nAuthors: Firmata Developers\n\nframework-arduinoteensy\n***********************\n\nAdafruit CC3000 Library\n=======================\nLibrary code for Adafruit's CC3000 WiFi breakouts.\n\nVersion: 1.0.1\nHomepage: https://github.com/adafruit/Adafruit_CC3000_Library\nKeywords: communication\nCompatible frameworks: arduino\nCompatible platforms: *\nAuthors: Adafruit\n\n...\n\nframework-energiamsp430\n***********************\n\nAIR430BoostEuropeETSI\n=====================\nLibrary for the CC110L Sub-1GHz radio BoosterPack for use in Europe\n\nVersion: 1.0.0\nHomepage: http://energia.nu/reference/libraries/\nKeywords: communication\nCompatible frameworks: arduino\nCompatible platforms:\nAuthors: Energia\n\n...\n\nframework-energiativa\n*********************\n\naJson\n=====\nAn Arduino library to enable JSON processing with Arduino\n\nKeywords: json, rest, http, web\nCompatible frameworks: arduino\nCompatible platforms: atmelavr\n```\n\n----------------------------------------\n\nTITLE: Basic STC8C2K16S4 Board Configuration\nDESCRIPTION: Basic PlatformIO configuration for setting up a project with the STC8C2K16S4 board using the intel_mcs51 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8C2K16S4.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8C2K16S4]\nplatform = intel_mcs51\nboard = STC8C2K16S4\n```\n\n----------------------------------------\n\nTITLE: Customizing BL653 Development Kit Board Settings\nDESCRIPTION: Advanced PlatformIO configuration for customizing the BL653 Development Kit board settings, including changing the microcontroller type and CPU frequency. These options override the default settings in the board manifest.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/laird_bl653_dvk.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:laird_bl653_dvk]\nplatform = nordicnrf52\nboard = laird_bl653_dvk\n\n; change microcontroller\nboard_build.mcu = nrf52833\n\n; change MCU frequency\nboard_build.f_cpu = 64000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Nordic Thingy:52 Board Settings\nDESCRIPTION: Example showing how to override default board settings like microcontroller and CPU frequency in PlatformIO configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/thingy_52.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:thingy_52]\nplatform = nordicnrf52\nboard = thingy_52\n\n; change microcontroller\nboard_build.mcu = nrf52832\n\n; change MCU frequency\nboard_build.f_cpu = 64000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Atmel ATSAMW25-XPRO Board in platformio.ini\nDESCRIPTION: Basic configuration for the Atmel ATSAMW25-XPRO board in the platformio.ini file. It sets the platform to atmelsam and the board to samd21g18a.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/samd21g18a.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:samd21g18a]\nplatform = atmelsam\nboard = samd21g18a\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for MKR Vidor 4000\nDESCRIPTION: Configuration to specify the upload protocol for the MKR Vidor 4000 board. This example sets the upload protocol to sam-ba, which is the default for this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/mkrvidor4000.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:mkrvidor4000]\nplatform = atmelsam\nboard = mkrvidor4000\n\nupload_protocol = sam-ba\n```\n\n----------------------------------------\n\nTITLE: Configuring Stable TI MSP430 Platform Version in platformio.ini\nDESCRIPTION: This snippet shows how to configure a stable version of the TI MSP430 platform in the platformio.ini file. It includes examples for using the latest stable version and a specific version number.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/timsp430.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n; Latest stable version, NOT recommended\n; Pin the version as shown below\n[env:latest_stable]\nplatform = timsp430\nboard = ...\n\n; Specific version\n[env:custom_stable]\nplatform = timsp430@x.y.z\nboard = ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic STC8H8K32U Board Settings in PlatformIO\nDESCRIPTION: Basic configuration for using the STC8H8K32U board with the Intel MCS-51 platform in a PlatformIO project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8H8K32U.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8H8K32U]\nplatform = intel_mcs51\nboard = STC8H8K32U\n```\n\n----------------------------------------\n\nTITLE: Customizing IntoRobot Board MCU Settings\nDESCRIPTION: Example showing how to override default microcontroller and frequency settings for the IntoRobot Fig board\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/intorobot.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:intorobot]\nplatform = espressif32\nboard = intorobot\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for XinaBox CW01 Board\nDESCRIPTION: Basic PlatformIO configuration for the XinaBox CW01 board that uses the espressif8266 platform. This configuration defines the board type in the project's platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/xinabox_cw01.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:xinabox_cw01]\nplatform = espressif8266\nboard = xinabox_cw01\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Arduino LilyPad USB\nDESCRIPTION: Basic configuration for a PlatformIO project targeting the Arduino LilyPad USB board. This sets up the atmelavr platform with the LilyPadUSB board ID in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/LilyPadUSB.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:LilyPadUSB]\nplatform = atmelavr\nboard = LilyPadUSB\n```\n\n----------------------------------------\n\nTITLE: ATMega AVR Board Reference Table\nDESCRIPTION: RST-formatted table listing ATMega AVR boards with specifications including microcontroller model, clock speed, flash memory and RAM size. Each entry includes reference links to board and platform documentation.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/simavr.rst#2025-04-10_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n* - :ref:`board_atmelavr_leonardo`\n      - :ref:`platform_atmelavr`\n      - External\n      - ATMEGA32U4\n      - 16MHz\n      - 28KB\n      - 2.50KB\n```\n\n----------------------------------------\n\nTITLE: Generating PlatformIO Project for Sublime Text using CLI\nDESCRIPTION: Command line instructions for generating a PlatformIO project compatible with Sublime Text. The example specifically shows how to create a project for Arduino UNO board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/ide/sublimetext.rst#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npio project init --ide sublimetext --board <ID>\n\n# For example, generate project for Arduino UNO\npio project init --ide sublimetext --board uno\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for WifInfo Board\nDESCRIPTION: This snippet demonstrates how to specify the upload protocol for the WifInfo board in the PlatformIO configuration. It shows setting the protocol to 'esptool', which is the default option.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/wifinfo.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:wifinfo]\nplatform = espressif8266\nboard = wifinfo\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO Project for MakerAsia KB32-FT Board\nDESCRIPTION: Basic configuration in platformio.ini to set up a project for the MakerAsia KB32-FT board using the Espressif32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/kb32-ft.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:kb32-ft]\nplatform = espressif32\nboard = kb32-ft\n```\n\n----------------------------------------\n\nTITLE: Configuring Arduino Nano RP2040 Connect Board in PlatformIO\nDESCRIPTION: This snippet shows how to configure the Arduino Nano RP2040 Connect board in the PlatformIO project configuration file. It sets the platform and board ID, and demonstrates how to override default board settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/raspberrypi/nanorp2040connect.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nanorp2040connect]\nplatform = raspberrypi\nboard = nanorp2040connect\n\n; change microcontroller\nboard_build.mcu = rp2040\n\n; change MCU frequency\nboard_build.f_cpu = 133000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration with MCU Settings\nDESCRIPTION: Extended configuration demonstrating how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/lopy4.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:lopy4]\nplatform = espressif32\nboard = lopy4\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for M5Stack Station\nDESCRIPTION: This configuration snippet shows how to set the upload protocol for the M5Stack Station board. In this case, it's set to 'esptool', which is the default protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/m5stack-station.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:m5stack-station]\nplatform = espressif32\nboard = m5stack-station\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring STM32F103VD Board in PlatformIO's projectconf\nDESCRIPTION: This snippet shows how to set up the build environment for the STM32F103VD board in the project's configuration file. It includes the basic board setup and examples of how to override default MCU and frequency settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103VD.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103VD]\nplatform = ststm32\nboard = genericSTM32F103VD\n\n; change microcontroller\nboard_build.mcu = stm32f103vdt6\n\n; change MCU frequency\nboard_build.f_cpu = 72000000L\n```\n\n----------------------------------------\n\nTITLE: Defining Library Version in PlatformIO Manifest (JavaScript)\nDESCRIPTION: This snippet demonstrates how to specify the version of a library in a PlatformIO library.json manifest file. It includes the required 'version' field along with other common fields like 'name' and 'repository'.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/manifests/library-json/fields/version.rst#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"name\": \"Bar\",\n\"version\": \"1.0.0\",\n\"repository\":\n{\n    \"type\": \"git\",\n    \"url\": \"https://github.com/foo/bar.git\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Aceinna OpenIMU 330 Board in PlatformIO\nDESCRIPTION: Basic configuration for the Aceinna OpenIMU 330 board in the PlatformIO project configuration file. It specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/aceinna_imu/OpenIMU330.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:OpenIMU330]\nplatform = aceinna_imu\nboard = OpenIMU330\n```\n\n----------------------------------------\n\nTITLE: Custom MCU Configuration for BluzDK\nDESCRIPTION: Example showing how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf51/bluz_dk.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:bluz_dk]\nplatform = nordicnrf51\nboard = bluz_dk\n\n; change microcontroller\nboard_build.mcu = nrf51822\n\n; change MCU frequency\nboard_build.f_cpu = 32000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring JTAG-HS1 Debugging Tool in PlatformIO\nDESCRIPTION: This snippet shows how to configure the JTAG-HS1 debugging tool in the PlatformIO project configuration file. It sets the debug_tool option to use the JTAG-HS1 probe.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/digilent-hs1.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = ...\nboard = ...\ndebug_tool = digilent-hs1\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic PlatformIO Environment for WEMOS D1 R32\nDESCRIPTION: Basic configuration for a PlatformIO project using the WEMOS D1 R32 board. This snippet defines the environment, platform, and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/wemos_d1_uno32.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:wemos_d1_uno32]\nplatform = espressif32\nboard = wemos_d1_uno32\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the Argonkey board, using ST-Link as the default option.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/b96b_argonkey.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:b96b_argonkey]\nplatform = ststm32\nboard = b96b_argonkey\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU and Frequency Settings\nDESCRIPTION: Extended configuration example showing how to override default board settings like microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32s3_powerfeather.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32s3_powerfeather]\nplatform = espressif32\nboard = esp32s3_powerfeather\n\n; change microcontroller\nboard_build.mcu = esp32s3\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU Settings\nDESCRIPTION: Example showing how to override default microcontroller settings including MCU model and frequency for the Gnat-L082CZ board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/gnat_l082cz.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:gnat_l082cz]\nplatform = ststm32\nboard = gnat_l082cz\n\n; change microcontroller\nboard_build.mcu = stm32l082czy6\n\n; change MCU frequency\nboard_build.f_cpu = 32000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced STC8A4K64S2A12 Board Configuration\nDESCRIPTION: Extended PlatformIO configuration with custom microcontroller and frequency settings for the STC8A4K64S2A12 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8A4K64S2A12.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8A4K64S2A12]\nplatform = intel_mcs51\nboard = STC8A4K64S2A12\n\n; change microcontroller\nboard_build.mcu = stc8a4k64s2a12\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Customizing Adafruit Feather 328P Settings in PlatformIO INI File\nDESCRIPTION: This snippet demonstrates how to override default settings for the Adafruit Feather 328P board in a PlatformIO project. It shows how to change the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/feather328p.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:feather328p]\nplatform = atmelavr\nboard = feather328p\n\n; change microcontroller\nboard_build.mcu = atmega328p\n\n; change MCU frequency\nboard_build.f_cpu = 8000000L\n```\n\n----------------------------------------\n\nTITLE: PlatformIO Team Member Removal Command Syntax\nDESCRIPTION: Shows the basic syntax for removing a team member using the PlatformIO CLI. Requires organization name, team name, and username of the member to be removed.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/team/cmd_remove.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio team remove ORGNAME:TEAMNAME USERNAME\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Ruuvi Tag in PlatformIO INI File\nDESCRIPTION: Configuration example for specifying the upload protocol for the Ruuvi Tag board. Shows how to set the upload protocol to JLink.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/ruuvitag.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:ruuvitag]\nplatform = nordicnrf52\nboard = ruuvitag\n\nupload_protocol = jlink\n```\n\n----------------------------------------\n\nTITLE: SODAQ SARA Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the SODAQ SARA board using sam-ba protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/sodaq_sara.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:sodaq_sara]\nplatform = atmelsam\nboard = sodaq_sara\n\nupload_protocol = sam-ba\n```\n\n----------------------------------------\n\nTITLE: Development Board Specifications Table in RST\nDESCRIPTION: ReStructured Text formatted tables containing detailed specifications for development boards from various manufacturers including Nordic, RedBearLab, Ruuvi, SEGGER, and ST. Each table includes board name, platform, debug capabilities, MCU model, operating frequency, flash size, and RAM specifications.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/frameworks/zephyr.rst#2025-04-10_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. list-table::\n    :header-rows:  1\n\n    * - Name\n      - Platform\n      - Debug\n      - MCU\n      - Frequency\n      - Flash\n      - RAM\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration - PlatformIO INI\nDESCRIPTION: Basic configuration for setting up a SainSmart Due board project using the native USB port in PlatformIO.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/sainSmartDueUSB.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:sainSmartDueUSB]\nplatform = atmelsam\nboard = sainSmartDueUSB\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Initial Breakpoints in PlatformIO\nDESCRIPTION: Examples showing different ways to configure initial breakpoints in PlatformIO project configuration. Includes examples for disabling breakpoints, setting temporary breakpoints at specific functions, and setting breakpoints at specific line numbers in source files.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/env/options/debug/debug_init_break.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:debug]\nplatform = ...\nboard = ...\n\n; Examples 1: disable initial breakpoint\ndebug_init_break =\n\n; Examples 2: temporary stop at ``void loop()`` function\ndebug_init_break = tbreak loop\n\n; Examples 3: stop in main.cpp at line 13\ndebug_init_break = break main.cpp:13\n\n; Examples 4: temporary stop at ``void Reset_Handler(void)``\ndebug_init_break = tbreak Reset_Handler\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration - PlatformIO INI\nDESCRIPTION: Basic configuration setup for LilyGo T-Display-S3 board in platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/lilygo-t-display-s3.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:lilygo-t-display-s3]\nplatform = espressif32\nboard = lilygo-t-display-s3\n```\n\n----------------------------------------\n\nTITLE: Severity Level Definitions\nDESCRIPTION: Text-based definitions of the three severity levels (high, medium, low) used in static code analysis, indicating how defects are classified based on their potential impact.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/advanced/static-code-analysis/severity.rst#2025-04-10_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhigh - Issues that are possibly bugs\nmedium - Suggestions about defensive programming in order to prevent potential bugs\nlow - Issues related to code cleanup and performance (unused functions, redundant code, const-ness, etc)\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Board Settings in PlatformIO\nDESCRIPTION: Basic configuration for setting up the Waveshare BLE400 board in PlatformIO's project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf51/waveshare_ble400.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:waveshare_ble400]\nplatform = nordicnrf51\nboard = waveshare_ble400\n```\n\n----------------------------------------\n\nTITLE: Customizing SODAQ Tatu Board Settings in PlatformIO\nDESCRIPTION: Advanced PlatformIO configuration for the SODAQ Tatu board with customized microcontroller and frequency settings. This demonstrates how to override default board settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/sodaq_tatu.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:sodaq_tatu]\nplatform = atmelavr\nboard = sodaq_tatu\n\n; change microcontroller\nboard_build.mcu = atmega1284p\n\n; change MCU frequency\nboard_build.f_cpu = 8000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Upstream Raspberry Pi RP2040 Platform in PlatformIO\nDESCRIPTION: INI configuration for using the upstream development version of the Raspberry Pi RP2040 platform in PlatformIO projects. It specifies the GitHub repository URL for the platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/raspberrypi.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:upstream_develop]\nplatform = https://github.com/platformio/platform-raspberrypi.git\nboard = ...\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Adafruit Bluefruit nRF52832 Feather\nDESCRIPTION: Configuration example for specifying the upload protocol for the Adafruit Bluefruit nRF52832 Feather board in PlatformIO. Sets the upload protocol to nrfutil.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/adafruit_feather_nrf52832.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_feather_nrf52832]\nplatform = nordicnrf52\nboard = adafruit_feather_nrf52832\n\nupload_protocol = nrfutil\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for ESP32-S3-USB-OTG\nDESCRIPTION: Configuration to specify the upload protocol for the ESP32-S3-USB-OTG board. The default protocol is 'esptool'.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32s3usbotg.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32s3usbotg]\nplatform = espressif32\nboard = esp32s3usbotg\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Board Settings in PlatformIO INI File\nDESCRIPTION: This snippet demonstrates how to override default board settings for the Generic IAP15W4K58S4. It shows examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/IAP15W4K58S4.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:IAP15W4K58S4]\nplatform = intel_mcs51\nboard = IAP15W4K58S4\n\n; change microcontroller\nboard_build.mcu = iap15w4k58s4\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Board Tables\nDESCRIPTION: A series of RST formatted tables listing development board specifications including MCU type, frequency, memory sizes and debug capabilities. Tables are grouped by manufacturer including Midatronics, MikroElektronika, MotorGo, MultiTech, and others.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debugging.rst#2025-04-10_snippet_6\n\nLANGUAGE: rst\nCODE:\n```\n.. list-table::\n    :header-rows:  1\n\n    * - Name\n      - Platform\n      - Debug\n      - MCU\n      - Frequency\n      - Flash\n      - RAM\n```\n\n----------------------------------------\n\nTITLE: Customizing STC8G2K64S2 Board Configuration in PlatformIO\nDESCRIPTION: Extended configuration for the Generic STC8G2K64S2 board with custom microcontroller and frequency settings. This example demonstrates how to override default board settings from the board manifest file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8G2K64S2.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8G2K64S2]\nplatform = intel_mcs51\nboard = STC8G2K64S2\n\n; change microcontroller\nboard_build.mcu = stc8g2k64s2\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Viewing Remote Agent List Output Example\nDESCRIPTION: Example output of the 'pio remote agent list' command, showing an active agent named 'innomac.local' with its ID and start time information.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/remote/cmd_agent.rst#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> pio remote agent list\n\ninnomac.local\n-------------\nID: 98853d930......788d77375e7\nStarted: 2016-10-26 16:32:56\n```\n\n----------------------------------------\n\nTITLE: STM32 Board Specifications Table in reStructuredText\nDESCRIPTION: RestructuredText formatted table listing STM32 development boards with their platform, MCU model, frequency, flash and RAM specifications. The table is split into boards with integrated debugging capabilities and those requiring external debug tools.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/frameworks/cmsis.rst#2025-04-10_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. list-table::\n    :header-rows:  1\n\n    * - Name\n      - Platform\n      - MCU\n      - Frequency\n      - Flash\n      - RAM\n```\n\n----------------------------------------\n\nTITLE: Customizing STC8H4K32LCD Board Settings in PlatformIO\nDESCRIPTION: Extended configuration for the STC8H4K32LCD board with custom microcontroller and frequency settings. This example demonstrates how to override default board settings by modifying the microcontroller model and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8H4K32LCD.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8H4K32LCD]\nplatform = intel_mcs51\nboard = STC8H4K32LCD\n\n; change microcontroller\nboard_build.mcu = stc8h4k32lcd\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Maxim ARM mbed MAX32600\nDESCRIPTION: Configuring the upload protocol for the Maxim ARM mbed Enabled Development Platform for MAX32600. This example sets it to 'mbed'.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/maxim32/max32600mbed.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:max32600mbed]\nplatform = maxim32\nboard = max32600mbed\n\nupload_protocol = mbed\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/adafruit_feather_nrf52840_sense.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_feather_nrf52840_sense]\nplatform = nordicnrf52\nboard = adafruit_feather_nrf52840_sense\n\nupload_protocol = nrfutil\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for WeMos D1 mini Lite\nDESCRIPTION: This snippet shows how to set the upload protocol for the WeMos D1 mini Lite board in the PlatformIO configuration. It sets the upload protocol to esptool.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/d1_mini_lite.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:d1_mini_lite]\nplatform = espressif8266\nboard = d1_mini_lite\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Customizing ESP32-S3-USB-OTG Board Settings\nDESCRIPTION: Example of overriding default board settings in PlatformIO, such as changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32s3usbotg.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32s3usbotg]\nplatform = espressif32\nboard = esp32s3usbotg\n\n; change microcontroller\nboard_build.mcu = esp32s3\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing SparkFun Blynk Board Hardware Settings in PlatformIO\nDESCRIPTION: Advanced configuration for customizing hardware settings of the SparkFun Blynk Board. This example shows how to override default microcontroller and CPU frequency settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/sparkfunBlynk.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:sparkfunBlynk]\nplatform = espressif8266\nboard = sparkfunBlynk\n\n; change microcontroller\nboard_build.mcu = esp8266\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing PYBStick Standard 26 Board Settings\nDESCRIPTION: Example of overriding default board settings in platformio.ini, such as changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/pybstick26_std.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:pybstick26_std]\nplatform = ststm32\nboard = pybstick26_std\n\n; change microcontroller\nboard_build.mcu = stm32f411ceu6\n\n; change MCU frequency\nboard_build.f_cpu = 100000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing ATmega88PB Board Settings in platformio.ini\nDESCRIPTION: Advanced configuration for an ATmega88PB board that overrides default settings. This example shows how to change the microcontroller model and CPU frequency in the PlatformIO configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega88PB.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega88PB]\nplatform = atmelavr\nboard = ATmega88PB\n\n; change microcontroller\nboard_build.mcu = atmega88pb\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring STM32F401CD Board in PlatformIO\nDESCRIPTION: This snippet shows how to configure the STM32F401CD board in the PlatformIO project configuration file. It sets the platform and board options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F401CD.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F401CD]\nplatform = ststm32\nboard = genericSTM32F401CD\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Digispark USB Environment in PlatformIO\nDESCRIPTION: Basic configuration for setting up a Digispark USB board project using the atmelavr platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/digispark-tiny.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:digispark-tiny]\nplatform = atmelavr\nboard = digispark-tiny\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Adafruit Feather M4 Express Environment in PlatformIO\nDESCRIPTION: Basic configuration for setting up an Adafruit Feather M4 Express board in the platformio.ini file. This snippet initializes the board with the atmelsam platform using the default configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_feather_m4.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_feather_m4]\nplatform = atmelsam\nboard = adafruit_feather_m4\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Generic IAP15F206A Settings\nDESCRIPTION: This snippet demonstrates how to override default board settings in the PlatformIO configuration. It shows examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/IAP15F206A.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:IAP15F206A]\nplatform = intel_mcs51\nboard = IAP15F206A\n\n; change microcontroller\nboard_build.mcu = iap15f206a\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Configuring RGB Station Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the RGB Station board in the PlatformIO project configuration file. It sets the platform to microchippic32 and the board to rgb_station.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/microchippic32/rgb_station.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:rgb_station]\nplatform = microchippic32\nboard = rgb_station\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for STEVAL-FCU001V1 Board\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the STEVAL-FCU001V1 Flight controller board, using ST-Link as the selected protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/steval_fcu001v1.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:steval_fcu001v1]\nplatform = ststm32\nboard = steval_fcu001v1\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Customizing Adafruit Feather ESP32 V2 Settings\nDESCRIPTION: Example of overriding default board settings in platformio.ini. It demonstrates how to change the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/adafruit_feather_esp32_v2.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_feather_esp32_v2]\nplatform = espressif32\nboard = adafruit_feather_esp32_v2\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Board Configuration Data in ReStructuredText\nDESCRIPTION: Tabular data listing various development boards and their specifications including platform type, microcontroller model, clock speed, flash memory size, and RAM size.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/frameworks/arduino.rst#2025-04-10_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n* - :ref:`board_atmelavr_sanguino_atmega644p_8m`\n      - :ref:`platform_atmelavr`\n      - ATMEGA644P\n      - 8MHz\n      - 63KB\n      - 4KB\n```\n\n----------------------------------------\n\nTITLE: Configuring ATmega8535 Board in PlatformIO INI File\nDESCRIPTION: This code snippet shows how to configure the ATmega8535 board in the PlatformIO project configuration file. It sets the platform to atmelavr and specifies the board as ATmega8535.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega8535.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega8535]\nplatform = atmelavr\nboard = ATmega8535\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO INI for Extra Scripts\nDESCRIPTION: Platform.ini configuration to enable post-build script execution by specifying the extra_scripts option\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/scripting/actions.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:pre_and_post_hooks]\nextra_scripts = post:extra_script.py\n```\n\n----------------------------------------\n\nTITLE: Customizing Board MCU and Frequency Settings\nDESCRIPTION: Example showing how to override default board settings like microcontroller and CPU frequency in PlatformIO configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_slidetrinkey_m0.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_slidetrinkey_m0]\nplatform = atmelsam\nboard = adafruit_slidetrinkey_m0\n\n; change microcontroller\nboard_build.mcu = samd21e18a\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Converted C++ File with Proper Declarations\nDESCRIPTION: The same Arduino code converted to a valid C++ file with the Arduino.h include and function prototypes. This enables code completion and linting in most IDEs.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/faq/ino-to-cpp.rst#2025-04-10_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n#include <Arduino.h>\n\nvoid someFunction(int num);\n\nvoid setup () {\n    someFunction(13);\n}\n\nvoid loop() {\n    delay(1000);\n}\n\nvoid someFunction(int num) {\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for WEMOS LOLIN32 Lite\nDESCRIPTION: Configuration example for changing the upload protocol to esptool for the WEMOS LOLIN32 Lite board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/lolin32_lite.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:lolin32_lite]\nplatform = espressif32\nboard = lolin32_lite\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Adafruit QT Py ESP32-S2\nDESCRIPTION: Configuration example showing how to set a specific upload protocol for the Adafruit QT Py ESP32-S2 board in PlatformIO.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/adafruit_qtpy_esp32s2.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_qtpy_esp32s2]\nplatform = espressif32\nboard = adafruit_qtpy_esp32s2\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Customizing u-blox C030-R410M IoT Board Settings\nDESCRIPTION: Example of overriding default board settings in PlatformIO. Demonstrates changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/ublox_c030_r410m.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ublox_c030_r410m]\nplatform = ststm32\nboard = ublox_c030_r410m\n\n; change microcontroller\nboard_build.mcu = stm32f437vg\n\n; change MCU frequency\nboard_build.f_cpu = 180000000L\n```\n\n----------------------------------------\n\nTITLE: Custom MCU Configuration\nDESCRIPTION: Example showing how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/leafony_ap03.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:leafony_ap03]\nplatform = ststm32\nboard = leafony_ap03\n\n; change microcontroller\nboard_build.mcu = stm32l452ret6\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Calliope Mini v3 Board Settings in PlatformIO\nDESCRIPTION: Advanced configuration that overrides default settings for the Calliope Mini v3 board in PlatformIO. This example shows how to change the microcontroller and MCU frequency using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/calliopemini_v3.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:calliopemini_v3]\nplatform = nordicnrf52\nboard = calliopemini_v3\n\n; change microcontroller\nboard_build.mcu = nrf52833\n\n; change MCU frequency\nboard_build.f_cpu = 64000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for TTGO T1 in PlatformIO\nDESCRIPTION: PlatformIO configuration that explicitly specifies the upload protocol to use for the TTGO T1 board. This example uses the default 'esptool' protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/ttgo-t1.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:ttgo-t1]\nplatform = espressif32\nboard = ttgo-t1\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring Maple Board in platformio.ini\nDESCRIPTION: Basic configuration for the Maple board in the project's platformio.ini file. It specifies the platform and board to use.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/maple.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:maple]\nplatform = ststm32\nboard = maple\n```\n\n----------------------------------------\n\nTITLE: Configuring Aventen S3 Sync Board in PlatformIO\nDESCRIPTION: Basic configuration for the Aventen S3 Sync board in the project's platformio.ini file. It specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/aventen_s3_sync.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:aventen_s3_sync]\nplatform = espressif32\nboard = aventen_s3_sync\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Library List Command Usage\nDESCRIPTION: Shows various ways to use the 'pio lib list' command to display installed libraries from different storage locations including project-specific, global, and custom storage directories.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/lib/cmd_list.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio lib [STORAGE_OPTIONS] list [OPTIONS]\n\n# list project dependent libraries\n# (run it from a project root where is located \"platformio.ini\")\npio lib list [OPTIONS]\n\n# list libraries from global storage\npio lib --global list [OPTIONS]\npio lib -g list [OPTIONS]\n\n# list libraries from custom storage\npio lib --storage-dir /path/to/dir list [OPTIONS]\npio lib -d /path/to/dir list [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Customizing MoteinoMEGA Board Settings in PlatformIO\nDESCRIPTION: Example of overriding default board settings in PlatformIO configuration. This snippet demonstrates how to change the microcontroller type and CPU frequency for the MoteinoMEGA board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/moteinomega.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:moteinomega]\nplatform = atmelavr\nboard = moteinomega\n\n; change microcontroller\nboard_build.mcu = atmega1284p\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration with Custom Settings\nDESCRIPTION: Extended project configuration demonstrating how to override default board settings like microcontroller and CPU frequency using board_*** options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/whispernode.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:whispernode]\nplatform = atmelavr\nboard = whispernode\n\n; change microcontroller\nboard_build.mcu = atmega328p\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Arduino Uno R4 Minima Board in PlatformIO\nDESCRIPTION: Basic configuration for using the Arduino Uno R4 Minima board with the Renesas RA platform in a PlatformIO project's platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/renesas-ra/uno_r4_minima.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:uno_r4_minima]\nplatform = renesas-ra\nboard = uno_r4_minima\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for ESP-WROVER-KIT (INI)\nDESCRIPTION: Basic PlatformIO configuration for the ESP-WROVER-KIT board, including platform and board selection.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp-wrover-kit.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp-wrover-kit]\nplatform = espressif32\nboard = esp-wrover-kit\n```\n\n----------------------------------------\n\nTITLE: Advanced ESP8266 Board Configuration\nDESCRIPTION: Extended PlatformIO configuration showing how to override default board settings like MCU and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/huzzah.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:huzzah]\nplatform = espressif8266\nboard = huzzah\n\n; change microcontroller\nboard_build.mcu = esp8266\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU Settings\nDESCRIPTION: Extended PlatformIO configuration demonstrating how to override default microcontroller and frequency settings for the Argonkey board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/b96b_argonkey.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:b96b_argonkey]\nplatform = ststm32\nboard = b96b_argonkey\n\n; change microcontroller\nboard_build.mcu = stm32f412cg\n\n; change MCU frequency\nboard_build.f_cpu = 100000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced Configuration of LinkIt Smart 7688 Duo with Custom Parameters\nDESCRIPTION: Extended configuration for the LinkIt Smart 7688 Duo board with customized microcontroller and frequency settings. This demonstrates how to override default board settings through the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/smart7688.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:smart7688]\nplatform = atmelavr\nboard = smart7688\n\n; change microcontroller\nboard_build.mcu = atmega32u4\n\n; change MCU frequency\nboard_build.f_cpu = 8000000L\n```\n\n----------------------------------------\n\nTITLE: Custom MCU Configuration\nDESCRIPTION: Example showing how to override default board settings like microcontroller model and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103ZF.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103ZF]\nplatform = ststm32\nboard = genericSTM32F103ZF\n\n; change microcontroller\nboard_build.mcu = stm32f103zft6\n\n; change MCU frequency\nboard_build.f_cpu = 72000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU and Frequency Override\nDESCRIPTION: Extended configuration demonstrating how to override default microcontroller and frequency settings for the ST Nucleo H743ZI board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_h743zi.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_h743zi]\nplatform = ststm32\nboard = nucleo_h743zi\n\n; change microcontroller\nboard_build.mcu = stm32h743zit6\n\n; change MCU frequency\nboard_build.f_cpu = 400000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Arduino MKR WiFi 1010 Hardware Settings\nDESCRIPTION: Advanced configuration for the Arduino MKR WiFi 1010 board that demonstrates how to override default hardware settings such as the microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/mkrwifi1010.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:mkrwifi1010]\nplatform = atmelsam\nboard = mkrwifi1010\n\n; change microcontroller\nboard_build.mcu = samd21g18a\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Digilent chipKIT Cmod Board Settings\nDESCRIPTION: This example demonstrates how to override default board settings in PlatformIO. It shows how to change the microcontroller and MCU frequency for the Digilent chipKIT Cmod.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/microchippic32/chipkit_cmod.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:chipkit_cmod]\nplatform = microchippic32\nboard = chipkit_cmod\n\n; change microcontroller\nboard_build.mcu = 32MX150F128D\n\n; change MCU frequency\nboard_build.f_cpu = 40000000L\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration for BluePill F103C8\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/bluepill_f103c8_128k.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:bluepill_f103c8_128k]\nplatform = ststm32\nboard = bluepill_f103c8_128k\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: PlatformIO Configuration with Custom Upload Protocol\nDESCRIPTION: PlatformIO configuration for the Namino Rosso board with a specified upload protocol. This example explicitly sets the upload protocol to esptool, which is also the default for this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/namino_rosso.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:namino_rosso]\nplatform = espressif32\nboard = namino_rosso\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Customizing Teensy 3.5 MCU Settings\nDESCRIPTION: Advanced PlatformIO configuration showing how to override default microcontroller and frequency settings for the Teensy 3.5 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/teensy/teensy35.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:teensy35]\nplatform = teensy\nboard = teensy35\n\n; change microcontroller\nboard_build.mcu = mk64fx512\n\n; change MCU frequency\nboard_build.f_cpu = 120000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing ATmega328P Board Settings in PlatformIO\nDESCRIPTION: Advanced configuration example showing how to override default board settings such as microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega328P.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega328P]\nplatform = atmelavr\nboard = ATmega328P\n\n; change microcontroller\nboard_build.mcu = atmega328p\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Upload Protocol for Arty A7-100 in PlatformIO\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the Arty A7-100 board. This example explicitly sets the FTDI protocol, which is also the default option.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/shakti/artix7_100t.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:artix7_100t]\nplatform = shakti\nboard = artix7_100t\n\nupload_protocol = ftdi\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Generic ESP8285 Module\nDESCRIPTION: This snippet shows how to specify the upload protocol in the platformio.ini file. It sets the protocol to 'esptool', which is the default for this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/esp8285.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp8285]\nplatform = espressif8266\nboard = esp8285\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration for ESP8266\nDESCRIPTION: Basic PlatformIO configuration for the Olimex MOD-WIFI-ESP8266(-DEV) board using the espressif8266 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/modwifi.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:modwifi]\nplatform = espressif8266\nboard = modwifi\n```\n\n----------------------------------------\n\nTITLE: Configuring Arduino Nano Every in platformio.ini\nDESCRIPTION: Basic environment configuration for Arduino Nano Every in platformio.ini file. Sets the platform to atmelmegaavr and the board to nano_every.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/nano_every.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nano_every]\nplatform = atmelmegaavr\nboard = nano_every\n```\n\n----------------------------------------\n\nTITLE: Configuring Upstream Version of CHIPS Alliance Platform in platformio.ini\nDESCRIPTION: Configuration example for using the latest upstream development version of the CHIPS Alliance platform directly from GitHub repository.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/chipsalliance.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:upstream_develop]\nplatform = https://github.com/platformio/platform-chipsalliance.git\nboard = ...\n```\n\n----------------------------------------\n\nTITLE: Installing PlatformIO Core in Codeanywhere\nDESCRIPTION: Command to install PlatformIO Core using Python's installation script. This needs to be run in the SSH Terminal of the Codeanywhere container.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/ide/codeanywhere.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo python -c \"$(curl -fsSL https://raw.githubusercontent.com/platformio/platformio/develop/scripts/get-platformio.py)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Seeeduino Wio Terminal in platformio.ini\nDESCRIPTION: Basic configuration for the Seeeduino Wio Terminal board in the platformio.ini file. This sets up the board with the required platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/seeed_wio_terminal.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:seeed_wio_terminal]\nplatform = atmelsam\nboard = seeed_wio_terminal\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for 32F723EDISCOVERY Board\nDESCRIPTION: Basic PlatformIO configuration for the 32F723EDISCOVERY board, specifying the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_f723ie.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_f723ie]\nplatform = ststm32\nboard = disco_f723ie\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Environment Configuration for STC8H4K48LCD\nDESCRIPTION: Minimal configuration needed to set up a PlatformIO environment for the STC8H4K48LCD board using the intel_mcs51 platform\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8H4K48LCD.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8H4K48LCD]\nplatform = intel_mcs51\nboard = STC8H4K48LCD\n```\n\n----------------------------------------\n\nTITLE: Customizing ATmega164A Board Settings in PlatformIO INI File\nDESCRIPTION: This snippet demonstrates how to override default settings for the ATmega164A board in a PlatformIO project. It shows how to change the microcontroller and MCU frequency using board-specific options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega164A.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega164A]\nplatform = atmelavr\nboard = ATmega164A\n\n; change microcontroller\nboard_build.mcu = atmega164a\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for M5Stack-ATOM\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the M5Stack-ATOM board. Demonstrates setting the protocol to esptool.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/m5stack-atom.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:m5stack-atom]\nplatform = espressif32\nboard = m5stack-atom\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO Environment for M5Stack Core2\nDESCRIPTION: Basic PlatformIO configuration for M5Stack Core2 board using the espressif32 platform. This configuration specifies the minimum required settings in the platformio.ini file to target this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/m5stack-core2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:m5stack-core2]\nplatform = espressif32\nboard = m5stack-core2\n```\n\n----------------------------------------\n\nTITLE: Configuring Nucleo G071RB Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the Nucleo G071RB board in the PlatformIO project configuration file. It includes options for selecting the board, changing the microcontroller, and modifying the CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_g071rb.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_g071rb]\nplatform = ststm32\nboard = nucleo_g071rb\n\n; change microcontroller\nboard_build.mcu = stm32g071rbt6\n\n; change MCU frequency\nboard_build.f_cpu = 64000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for External Sources\nDESCRIPTION: This snippet shows how to configure the platformio.ini file to use an extra script for including external sources in the build process.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/scripting/examples/external_sources.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:my_env]\nplatform = ...\nextra_scripts = pre:extra_script.py\n```\n\n----------------------------------------\n\nTITLE: Configuring SparkFun MicroMod Teensy Board in PlatformIO INI\nDESCRIPTION: Basic configuration for the SparkFun MicroMod Teensy board in the PlatformIO project configuration file. Sets the platform to Teensy and the board to teensymm.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/teensy/teensymm.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:teensymm]\nplatform = teensy\nboard = teensymm\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic WeMos D1 mini Pro Board Settings in PlatformIO\nDESCRIPTION: Basic PlatformIO configuration for WeMos D1 mini Pro board using espressif8266 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/d1_mini_pro.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:d1_mini_pro]\nplatform = espressif8266\nboard = d1_mini_pro\n```\n\n----------------------------------------\n\nTITLE: Advanced ALKS ESP32 Board Configuration\nDESCRIPTION: Extended configuration example showing how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/alksesp32.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:alksesp32]\nplatform = espressif32\nboard = alksesp32\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: PlatformIO CI Exclude Paths Example\nDESCRIPTION: Example showing how to exclude specific directories and file patterns from the build process using the --exclude option.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/cmd_ci.rst#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npio ci --exclude=src/examples --exclude=src/foo/*.h [SRC]\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Maple Mini Original (INI)\nDESCRIPTION: Configuration example for changing the upload protocol to DFU for the Maple Mini Original board in PlatformIO.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/maple_mini_origin.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:maple_mini_origin]\nplatform = ststm32\nboard = maple_mini_origin\n\nupload_protocol = dfu\n```\n\n----------------------------------------\n\nTITLE: Customizing STM32F411RE MCU and Frequency Settings\nDESCRIPTION: Example showing how to override default microcontroller and frequency settings for the STM32F411RE board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F411RE.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F411RE]\nplatform = ststm32\nboard = genericSTM32F411RE\n\n; change microcontroller\nboard_build.mcu = stm32f411ret6\n\n; change MCU frequency\nboard_build.f_cpu = 100000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU Settings\nDESCRIPTION: Advanced configuration example showing how to override default MCU settings like microcontroller type and frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_trellis_m4.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_trellis_m4]\nplatform = atmelsam\nboard = adafruit_trellis_m4\n\n; change microcontroller\nboard_build.mcu = samd51j19a\n\n; change MCU frequency\nboard_build.f_cpu = 120000000L\n```\n\n----------------------------------------\n\nTITLE: Overriding Default ESP32-S3-Box Settings\nDESCRIPTION: Example of overriding default board settings in platformio.ini, such as changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32s3box.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32s3box]\nplatform = espressif32\nboard = esp32s3box\n\n; change microcontroller\nboard_build.mcu = esp32s3\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for KITS ESP32 EDU in PlatformIO\nDESCRIPTION: Configuration snippet showing how to specify the upload protocol for the KITS ESP32 EDU board. The board supports 'espota' and 'esptool' protocols, with 'esptool' being the default.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/kits-edu.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:kits-edu]\nplatform = espressif32\nboard = kits-edu\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Renode Configuration in RST\nDESCRIPTION: RST documentation structure defining Renode's capabilities, supported platforms, frameworks, and compatible boards for PlatformIO debugging tool integration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/renode.rst#2025-04-10_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _debugging_tool_renode:\\n\\nRenode\\n======\\n\\n.. image:: ../../_static/images/debug_probes/renode.png\\n  :target: https://renode.io/?utm_source=platformio&utm_medium=docs\\n\\nRenode is a development framework which accelerates IoT and embedded systems\\ndevelopment by letting you simulate physical hardware systems - including both the CPU,\\nperipherals, sensors, environment and wired or wireless medium between nodes.\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Board Settings for ST 32L0538DISCOVERY in PlatformIO\nDESCRIPTION: Basic configuration for the ST 32L0538DISCOVERY board in the platformio.ini file, specifying the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_l053c8.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_l053c8]\nplatform = ststm32\nboard = disco_l053c8\n```\n\n----------------------------------------\n\nTITLE: Configuring HelvePic32 Robot Board in PlatformIO\nDESCRIPTION: Basic configuration for setting up the HelvePic32 Robot board in a PlatformIO project environment file. This snippet specifies the platform as microchippic32 and the board as helvepic32_robot.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/microchippic32/helvepic32_robot.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:helvepic32_robot]\nplatform = microchippic32\nboard = helvepic32_robot\n```\n\n----------------------------------------\n\nTITLE: Basic PX-HER0 Board Configuration\nDESCRIPTION: Basic configuration example for setting up a PlatformIO environment for the Piconomix PX-HER0 board using the STM32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/piconomix_px_her0.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:piconomix_px_her0]\nplatform = ststm32\nboard = piconomix_px_her0\n```\n\n----------------------------------------\n\nTITLE: Removing a User from PlatformIO Organization Example\nDESCRIPTION: A practical example showing how to remove a user named 'bob' from the 'platformio' organization, along with the success message displayed after successful removal.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/org/cmd_remove.rst#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> pio org remove platformio bob\nThe `bob` owner has been successfully removed from the `platformio` organization.\n```\n\n----------------------------------------\n\nTITLE: Configuring ATmega164A Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure a PlatformIO project for the ATmega164A board in the project's INI file. It sets the platform to atmelavr and specifies the board as ATmega164A.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega164A.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega164A]\nplatform = atmelavr\nboard = ATmega164A\n```\n\n----------------------------------------\n\nTITLE: Advanced Controllino Mega Board Configuration with Custom Settings\nDESCRIPTION: Extended configuration example showing how to override default board settings like microcontroller type and CPU frequency in PlatformIO's project configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/controllino_mega.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:controllino_mega]\nplatform = atmelavr\nboard = controllino_mega\n\n; change microcontroller\nboard_build.mcu = atmega2560\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced ESP32-EVB Board Configuration\nDESCRIPTION: Extended configuration for OLIMEX ESP32-EVB showing how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32-evb.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32-evb]\nplatform = espressif32\nboard = esp32-evb\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Specifying Upload Protocol for Arduino Opta\nDESCRIPTION: PlatformIO configuration that specifies the upload protocol for Arduino Opta. This example sets the upload protocol to DFU (Device Firmware Update), which is the default protocol for this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/opta.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:opta]\nplatform = ststm32\nboard = opta\n\nupload_protocol = dfu\n```\n\n----------------------------------------\n\nTITLE: Configuring Arduino Uno Board in PlatformIO\nDESCRIPTION: Basic PlatformIO configuration for the Arduino Uno board using the atmelavr platform. This configuration is added to the project's platformio.ini file to specify the target board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/uno.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:uno]\nplatform = atmelavr\nboard = uno\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration with Custom Settings\nDESCRIPTION: Extended configuration for SparkFun Mega Pro 5V/16MHz with custom MCU and frequency settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/sparkfun_megapro16MHz.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:sparkfun_megapro16MHz]\nplatform = atmelavr\nboard = sparkfun_megapro16MHz\n\n; change microcontroller\nboard_build.mcu = atmega2560\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing MCU and Frequency Settings for FRDM-K66F\nDESCRIPTION: Extended configuration showing how to override default board settings such as microcontroller model and CPU frequency in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/freescalekinetis/frdm_k66f.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:frdm_k66f]\nplatform = freescalekinetis\nboard = frdm_k66f\n\n; change microcontroller\nboard_build.mcu = mk66fn2m0vmd18\n\n; change MCU frequency\nboard_build.f_cpu = 180000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing ATtiny24 Board Settings in PlatformIO\nDESCRIPTION: This snippet demonstrates how to override default settings for the Generic ATtiny24 board in PlatformIO. It shows how to change the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/attiny24.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:attiny24]\nplatform = atmelavr\nboard = attiny24\n\n; change microcontroller\nboard_build.mcu = attiny24\n\n; change MCU frequency\nboard_build.f_cpu = 8000000L\n```\n\n----------------------------------------\n\nTITLE: Installing pymcuprog for UPDI Programming in PlatformIO\nDESCRIPTION: Command to install pymcuprog, a Python-based CLI tool for programming AVR devices with UPDI interface. This tool supports both Microchip debuggers and standard serial ports for programming.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/atmelmegaavr_extra.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install pymcuprog\n```\n\n----------------------------------------\n\nTITLE: Specification Tables in RST Format\nDESCRIPTION: ReStructuredText formatted tables containing development board specifications organized by manufacturer, including boards from Adafruit, Arduino, Atmel, BBC, ElectronutLabs, Freescale, Generic, Holyiot and others. Each table includes details about platform, debug capabilities, MCU type, frequency, flash and RAM sizes.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/frameworks/zephyr.rst#2025-04-10_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. list-table::\n    :header-rows:  1\n\n    * - Name\n      - Platform\n      - Debug\n      - MCU\n      - Frequency\n      - Flash\n      - RAM\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic u-blox EVK-ODIN-W2 Environment in PlatformIO\nDESCRIPTION: Basic configuration for setting up a PlatformIO environment for the u-blox EVK-ODIN-W2 board. This defines the platform (STM32) and the specific board identifier.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/ublox_evk_odin_w2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ublox_evk_odin_w2]\nplatform = ststm32\nboard = ublox_evk_odin_w2\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic STC8A8K60D4 Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the Generic STC8A8K60D4 board in a PlatformIO project's configuration file. It sets the platform and board, and demonstrates how to override default settings such as the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8A8K60D4.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8A8K60D4]\nplatform = intel_mcs51\nboard = STC8A8K60D4\n\n; change microcontroller\nboard_build.mcu = stc8a8k60d4\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: PlatformIO Configuration with Custom Upload Protocol\nDESCRIPTION: PlatformIO configuration showing how to specify a custom upload protocol for the RYMCU Nebula Pi F103VE board. This example uses the STLink protocol, which is also the default.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/rymcu_nebulapi_f103ve.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:rymcu_nebulapi_f103ve]\nplatform = ststm32\nboard = rymcu_nebulapi_f103ve\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Restarting udev Service\nDESCRIPTION: Commands to restart the udev service and apply the new rules. Provides two alternative methods.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/installation/udev-rules.rst#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo service udev restart\n\n# or\n\nsudo udevadm control --reload-rules\nsudo udevadm trigger\n```\n\n----------------------------------------\n\nTITLE: Basic ATtiny3224 Board Configuration in PlatformIO\nDESCRIPTION: Initializes basic project configuration for ATtiny3224 board using the atmelmegaavr platform in platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/ATtiny3224.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATtiny3224]\nplatform = atmelmegaavr\nboard = ATtiny3224\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Nucleo G071RB in PlatformIO\nDESCRIPTION: This code snippet demonstrates how to set the upload protocol for the Nucleo G071RB board in the PlatformIO configuration file. The default protocol is 'stlink', but it can be changed as shown.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_g071rb.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_g071rb]\nplatform = ststm32\nboard = nucleo_g071rb\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Particle Argon in PlatformIO\nDESCRIPTION: Configuration example for specifying the upload protocol for the Particle Argon board. Uses the 'nrfutil' protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/particle_argon.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:particle_argon]\nplatform = nordicnrf52\nboard = particle_argon\n\nupload_protocol = nrfutil\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for ATmega809 Board\nDESCRIPTION: Basic configuration for the ATmega809 board in the platformio.ini file. This setup uses the atmelmegaavr platform with the ATmega809 board identifier.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/ATmega809.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega809]\nplatform = atmelmegaavr\nboard = ATmega809\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Arduino BT ATmega168 Board Settings\nDESCRIPTION: Basic PlatformIO configuration for Arduino BT ATmega168 board using the atmelavr platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/btatmega168.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:btatmega168]\nplatform = atmelavr\nboard = btatmega168\n```\n\n----------------------------------------\n\nTITLE: Customizing ST Nucleo F429ZI Hardware Settings\nDESCRIPTION: Demonstrates how to override default board settings like microcontroller type and CPU frequency in the PlatformIO configuration. This allows for custom hardware configurations beyond the default board definition.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f429zi.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f429zi]\nplatform = ststm32\nboard = nucleo_f429zi\n\n; change microcontroller\nboard_build.mcu = stm32f429zit6\n\n; change MCU frequency\nboard_build.f_cpu = 180000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Wio Node Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the Wio Node board in the PlatformIO project configuration file. It sets the platform to espressif8266 and the board to wio_node.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/wio_node.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:wio_node]\nplatform = espressif8266\nboard = wio_node\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for STM32F103C6 in platformio.ini\nDESCRIPTION: Configuration for specifying the upload protocol for the STM32F103C6 board. This example uses the serial protocol which is also the default option.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103C6.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103C6]\nplatform = ststm32\nboard = genericSTM32F103C6\n\nupload_protocol = serial\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: PlatformIO configuration showing how to set the upload protocol for ST Nucleo F413ZH.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f413zh.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f413zh]\nplatform = ststm32\nboard = nucleo_f413zh\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Specifying Upload Protocol for Adafruit Grand Central M4\nDESCRIPTION: Configures the upload protocol for the Adafruit Grand Central M4 board. This example shows how to set the upload protocol to SAM-BA, which is the default protocol for this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_grandcentral_m4.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_grandcentral_m4]\nplatform = atmelsam\nboard = adafruit_grandcentral_m4\n\nupload_protocol = sam-ba\n```\n\n----------------------------------------\n\nTITLE: Customizing SainSmart Due Board Settings in PlatformIO\nDESCRIPTION: Example showing how to override default board settings such as microcontroller type and CPU frequency in the platformio.ini file. These options allow customization of the build process for specific project requirements.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/sainSmartDue.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:sainSmartDue]\nplatform = atmelsam\nboard = sainSmartDue\n\n; change microcontroller\nboard_build.mcu = at91sam3x8e\n\n; change MCU frequency\nboard_build.f_cpu = 84000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for ACSIP S76S in PlatformIO\nDESCRIPTION: Configuration example showing how to specify the upload protocol for ACSIP S76S board in the platformio.ini file. The default protocol is stlink but this can be explicitly set.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/acsip_s76s.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:acsip_s76s]\nplatform = ststm32\nboard = acsip_s76s\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Structure for HAL-based Library Example\nDESCRIPTION: Shows the directory structure for a sample project that uses a HAL-based library with different hardware abstraction layers.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/manifests/library-json/fields/build/extrascript.rst#2025-04-10_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n├── lib\n│   ├── README\n│   └── SomeLib\n│       ├── extra_script.py\n│       ├── hal\n│       │   ├── bar\n│       │   │   ├── hal.c\n│       │   │   └── hal.h\n│       │   ├── foo\n│       │       ├── hal.c\n│       │       └── hal.h\n│       ├── library.json\n│       ├── SomeLib.c\n│       └── SomeLib.h\n├── platformio.ini\n└── src\n    └── test.c\n```\n\n----------------------------------------\n\nTITLE: Customizing Arduino Nano ESP32 Board Settings\nDESCRIPTION: Example showing how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/arduino_nano_esp32.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:arduino_nano_esp32]\nplatform = espressif32\nboard = arduino_nano_esp32\n\n; change microcontroller\nboard_build.mcu = esp32s3\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Creating Symlinks for PlatformIO Commands (User-specific)\nDESCRIPTION: Creates symbolic links in the user's local bin directory for PlatformIO executables. This allows user-specific access to PlatformIO commands from any terminal.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/installation/shell-commands.rst#2025-04-10_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nln -s ~/.platformio/penv/bin/platformio ~/.local/bin/platformio\nln -s ~/.platformio/penv/bin/pio ~/.local/bin/pio\nln -s ~/.platformio/penv/bin/piodebuggdb ~/.local/bin/piodebuggdb\n```\n\n----------------------------------------\n\nTITLE: Basic STM32F413CH Board Configuration\nDESCRIPTION: Basic PlatformIO configuration for STM32F413CH board using the STM32 platform\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F413CH.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F413CH]\nplatform = ststm32\nboard = genericSTM32F413CH\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic WEMOS D1 MINI ESP32 Environment in PlatformIO\nDESCRIPTION: Basic configuration for setting up a WEMOS D1 MINI ESP32 board environment in platformio.ini. This defines the platform and board name required for PlatformIO to properly build and upload firmware to the device.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/wemos_d1_mini32.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:wemos_d1_mini32]\nplatform = espressif32\nboard = wemos_d1_mini32\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Protocol for L476DMW1K Board\nDESCRIPTION: PlatformIO configuration example showing how to specify an upload protocol for the L476DMW1K board. The board supports blackmagic, cmsis-dap, jlink, and stlink protocols, with cmsis-dap as the default.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/rhombio_l476dmw1k.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:rhombio_l476dmw1k]\nplatform = ststm32\nboard = rhombio_l476dmw1k\n\nupload_protocol = cmsis-dap\n```\n\n----------------------------------------\n\nTITLE: Customizing Deneyap Kart 1A Board Settings in PlatformIO\nDESCRIPTION: Demonstrates how to override default board settings such as microcontroller and CPU frequency for the Deneyap Kart 1A in the PlatformIO configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/deneyapkart1A.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:deneyapkart1A]\nplatform = espressif32\nboard = deneyapkart1A\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Arduino M0 MCU and Frequency Settings in PlatformIO\nDESCRIPTION: Advanced configuration for Arduino M0 that overrides default microcontroller and frequency settings using board-specific options in the PlatformIO configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/mzeroUSB.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:mzeroUSB]\nplatform = atmelsam\nboard = mzeroUSB\n\n; change microcontroller\nboard_build.mcu = samd21g18a\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Vajra Board\nDESCRIPTION: Configuration for changing the upload protocol to FTDI for the Vajra board. This shows how to specify which protocol to use when uploading firmware.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/shakti/vajra.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:vajra]\nplatform = shakti\nboard = vajra\n\nupload_protocol = ftdi\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Protocol for ESP32vn IoT Uno in platformio.ini\nDESCRIPTION: Configuration example showing how to specify the upload protocol for ESP32vn IoT Uno. The example uses the default 'esptool' protocol, but this can be changed to any of the supported protocols.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32vn-iot-uno.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32vn-iot-uno]\nplatform = espressif32\nboard = esp32vn-iot-uno\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring Nordic nRF51 Dongle Board in platformio.ini\nDESCRIPTION: Basic configuration for the Nordic nRF51 Dongle (PCA10031) board in the PlatformIO project configuration file. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf51/nrf51_dongle.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nrf51_dongle]\nplatform = nordicnrf51\nboard = nrf51_dongle\n```\n\n----------------------------------------\n\nTITLE: Customizing Adafruit ItsyBitsy 5V/16MHz PlatformIO Configuration\nDESCRIPTION: Extended PlatformIO configuration that demonstrates how to customize microcontroller settings such as MCU type and frequency for the Adafruit ItsyBitsy 5V/16MHz board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/itsybitsy32u4_5V.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:itsybitsy32u4_5V]\nplatform = atmelavr\nboard = itsybitsy32u4_5V\n\n; change microcontroller\nboard_build.mcu = atmega32u4\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Raspberry Pi SWD Debug Tool\nDESCRIPTION: Basic configuration for setting up Raspberry Pi SWD as a debugging tool in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/raspberrypi-swd.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = ...\nboard = ...\ndebug_tool = raspberrypi-swd\n```\n\n----------------------------------------\n\nTITLE: Advanced ATmega6450 Board Configuration with Custom Settings\nDESCRIPTION: Extended configuration for the ATmega6450 board with custom microcontroller and frequency settings using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega6450.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega6450]\nplatform = atmelavr\nboard = ATmega6450\n\n; change microcontroller\nboard_build.mcu = atmega6450\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing ATtiny814 Board Settings in PlatformIO\nDESCRIPTION: Advanced PlatformIO configuration demonstrating how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/ATtiny814.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATtiny814]\nplatform = atmelmegaavr\nboard = ATtiny814\n\n; change microcontroller\nboard_build.mcu = attiny814\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Adafruit QT Py ESP32-S2 Board Settings\nDESCRIPTION: Example of overriding default board settings in the PlatformIO configuration. It demonstrates how to change the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/adafruit_qtpy_esp32s2.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_qtpy_esp32s2]\nplatform = espressif32\nboard = adafruit_qtpy_esp32s2\n\n; change microcontroller\nboard_build.mcu = esp32s2\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for RedBearLab BLE Nano 1.5\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the RedBearLab BLE Nano 1.5. The board supports multiple protocols including blackmagic, cmsis-dap, jlink, nrfjprog, and stlink.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf51/redBearLabBLENano.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:redBearLabBLENano]\nplatform = nordicnrf51\nboard = redBearLabBLENano\n\nupload_protocol = cmsis-dap\n```\n\n----------------------------------------\n\nTITLE: Customizing Raspberry Pi 2 Model B Settings in PlatformIO\nDESCRIPTION: This code demonstrates how to override default settings for the Raspberry Pi 2 Model B in a PlatformIO project. It includes examples of changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/linux_arm/raspberrypi_2b.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:raspberrypi_2b]\nplatform = linux_arm\nboard = raspberrypi_2b\n\n; change microcontroller\nboard_build.mcu = bcm2836\n\n; change MCU frequency\nboard_build.f_cpu = 900000000L\n```\n\n----------------------------------------\n\nTITLE: Custom MCU Configuration for Demo F030F4\nDESCRIPTION: Example showing how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/demo_f030f4.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:demo_f030f4]\nplatform = ststm32\nboard = demo_f030f4\n\n; change microcontroller\nboard_build.mcu = stm32f030f4p6\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Generic ATtiny441 Board Settings in PlatformIO\nDESCRIPTION: This snippet demonstrates how to override default settings for the Generic ATtiny441 board in a PlatformIO project. It shows how to change the microcontroller and MCU frequency using board-specific options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/attiny441.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:attiny441]\nplatform = atmelavr\nboard = attiny441\n\n; change microcontroller\nboard_build.mcu = attiny441\n\n; change MCU frequency\nboard_build.f_cpu = 8000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Black STM32F407VG Board in PlatformIO\nDESCRIPTION: Basic configuration for using the Black STM32F407VG board in a PlatformIO project. Sets the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/black_f407vg.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:black_f407vg]\nplatform = ststm32\nboard = black_f407vg\n```\n\n----------------------------------------\n\nTITLE: Customizing ElectronutLabs Blip Board Settings\nDESCRIPTION: Example of overriding default board settings in PlatformIO, such as changing the microcontroller and CPU frequency. This demonstrates how to customize the build for specific requirements.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/electronut_blip.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:electronut_blip]\nplatform = nordicnrf52\nboard = electronut_blip\n\n; change microcontroller\nboard_build.mcu = nrf52840\n\n; change MCU frequency\nboard_build.f_cpu = 64000000L\n```\n\n----------------------------------------\n\nTITLE: Basic Configuration for ST Nucleo H743ZI\nDESCRIPTION: Base configuration for setting up an environment for the ST Nucleo H743ZI board using PlatformIO.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_h743zi.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_h743zi]\nplatform = ststm32\nboard = nucleo_h743zi\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for SODAQ Moja Board with Basic Settings\nDESCRIPTION: Basic PlatformIO configuration for the SODAQ Moja board using the Atmel AVR platform. This snippet shows the minimal required configuration in the project's platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/sodaq_moja.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:sodaq_moja]\nplatform = atmelavr\nboard = sodaq_moja\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for WEMOS LOLIN32 Board\nDESCRIPTION: PlatformIO configuration showing how to specify the upload protocol for the WEMOS LOLIN32 board. The default protocol is esptool but many other protocols are supported.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/lolin32.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:lolin32]\nplatform = espressif32\nboard = lolin32\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring ESP32-S2-Kaluga-1 Kit in PlatformIO\nDESCRIPTION: Basic configuration for ESP32-S2-Kaluga-1 Kit in platformio.ini file. This sets up the board with the espressif32 platform using the board's default settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32-s2-kaluga-1.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32-s2-kaluga-1]\nplatform = espressif32\nboard = esp32-s2-kaluga-1\n```\n\n----------------------------------------\n\nTITLE: Configuring SparkFun RedBoard Turbo in PlatformIO\nDESCRIPTION: Basic configuration for setting up a PlatformIO project for the SparkFun RedBoard Turbo board. This configuration uses the atmelsam platform with the sparkfun_redboard_turbo board identifier.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/sparkfun_redboard_turbo.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:sparkfun_redboard_turbo]\nplatform = atmelsam\nboard = sparkfun_redboard_turbo\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for SparkFun RedBoard Turbo\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the SparkFun RedBoard Turbo. This example uses the default sam-ba protocol, but the board also supports atmel-ice, blackmagic, and jlink protocols.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/sparkfun_redboard_turbo.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:sparkfun_redboard_turbo]\nplatform = atmelsam\nboard = sparkfun_redboard_turbo\n\nupload_protocol = sam-ba\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO Environment for Holyiot YJ-16019\nDESCRIPTION: Basic configuration for setting up a PlatformIO environment that targets the Holyiot YJ-16019 board with the Nordic nRF52 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/holyiot_yj16019.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:holyiot_yj16019]\nplatform = nordicnrf52\nboard = holyiot_yj16019\n```\n\n----------------------------------------\n\nTITLE: Advanced ATmega2561 Board Configuration\nDESCRIPTION: Extended PlatformIO configuration for ATmega2561 showing how to override default board settings including microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega2561.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega2561]\nplatform = atmelavr\nboard = ATmega2561\n\n; change microcontroller\nboard_build.mcu = atmega2561\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO Environment for Hornbill ESP32 Dev\nDESCRIPTION: Basic PlatformIO configuration for the Hornbill ESP32 Dev board, specifying the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/hornbill32dev.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:hornbill32dev]\nplatform = espressif32\nboard = hornbill32dev\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Freescale Kinetis FRDM-KL43Z\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the FRDM-KL43Z board. The board supports cmsis-dap, jlink, and mbed protocols with mbed being the default.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/freescalekinetis/frdm_kl43z.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:frdm_kl43z]\nplatform = freescalekinetis\nboard = frdm_kl43z\n\nupload_protocol = mbed\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for WEMOS D1 R1\nDESCRIPTION: Configuration to specify the upload protocol for the WEMOS D1 R1 board. In this example, it's set to use the 'esptool' protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/d1.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:d1]\nplatform = espressif8266\nboard = d1\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Customizing MKR Vidor 4000 Build Settings\nDESCRIPTION: Example of overriding default board settings in platformio.ini. This snippet demonstrates changing the microcontroller and CPU frequency for the MKR Vidor 4000.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/mkrvidor4000.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:mkrvidor4000]\nplatform = atmelsam\nboard = mkrvidor4000\n\n; change microcontroller\nboard_build.mcu = samd21g18a\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Using PlatformIO Remote Update Command in Bash\nDESCRIPTION: Shows the basic usage of the 'pio remote update' command and how to target specific agents or machines for updates.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/remote/cmd_update.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio remote update [OPTIONS]\n\n# start update process on the specified agents/machines\npio remote --agent NAME update [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Configuring Stable Atmel AVR Platform Version\nDESCRIPTION: Example platformio.ini configuration for using stable releases of the Atmel AVR platform, with options for latest stable or pinned version.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/atmelavr.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n; Latest stable version, NOT recommended \n; Pin the version as shown below\n[env:latest_stable]\nplatform = atmelavr\nboard = ...\n\n; Specific version\n[env:custom_stable]\nplatform = atmelavr@x.y.z\nboard = ...\n```\n\n----------------------------------------\n\nTITLE: Customizing ST Nucleo F103RB Hardware Settings in PlatformIO\nDESCRIPTION: Advanced PlatformIO configuration that overrides default ST Nucleo F103RB settings like microcontroller type and CPU frequency. This shows how to customize hardware parameters for specific project needs.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f103rb.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f103rb]\nplatform = ststm32\nboard = nucleo_f103rb\n\n; change microcontroller\nboard_build.mcu = stm32f103rbt6\n\n; change MCU frequency\nboard_build.f_cpu = 72000000L\n```\n\n----------------------------------------\n\nTITLE: Custom MCU Configuration for STM32F303CB\nDESCRIPTION: Extended configuration for STM32F303CB in platformio.ini with customized microcontroller and frequency settings. This demonstrates how to override default board settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F303CB.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F303CB]\nplatform = ststm32\nboard = genericSTM32F303CB\n\n; change microcontroller\nboard_build.mcu = stm32f303cbt6\n\n; change MCU frequency\nboard_build.f_cpu = 72000000L\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration in PlatformIO\nDESCRIPTION: Basic PlatformIO configuration example for the STC8H4K64TLCD board using the intel_mcs51 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8H4K64TLCD.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8H4K64TLCD]\nplatform = intel_mcs51\nboard = STC8H4K64TLCD\n```\n\n----------------------------------------\n\nTITLE: Customizing Adafruit QT Py ESP32-S3 No PSRAM Board Settings\nDESCRIPTION: Example of overriding default board settings in the PlatformIO configuration. Demonstrates changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/adafruit_qtpy_esp32s3_nopsram.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_qtpy_esp32s3_nopsram]\nplatform = espressif32\nboard = adafruit_qtpy_esp32s3_nopsram\n\n; change microcontroller\nboard_build.mcu = esp32s3\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Adafruit Feather ESP32-S3\nDESCRIPTION: Configuration example showing how to set a specific upload protocol for the Adafruit Feather ESP32-S3 board. The default protocol is 'esptool'.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/adafruit_feather_esp32s3.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_feather_esp32s3]\nplatform = espressif32\nboard = adafruit_feather_esp32s3\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Customizing Microcontroller Settings for Seeeduino Wio Lite MG126\nDESCRIPTION: Extended PlatformIO configuration that demonstrates how to override default settings like microcontroller type and CPU frequency for the Seeeduino Wio Lite MG126 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/seeed_wio_lite_mg126.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:seeed_wio_lite_mg126]\nplatform = atmelsam\nboard = seeed_wio_lite_mg126\n\n; change microcontroller\nboard_build.mcu = samd21g18a\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO Environment for 4D Systems ESP32S3 GEN4 Board\nDESCRIPTION: Basic PlatformIO configuration for the 4D Systems GEN4-ESP32 16MB (ESP32S3-R8N16) board in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/4d_systems_esp32s3_gen4_r8n16.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:4d_systems_esp32s3_gen4_r8n16]\nplatform = espressif32\nboard = 4d_systems_esp32s3_gen4_r8n16\n```\n\n----------------------------------------\n\nTITLE: Library Header with Conditional Includes\nDESCRIPTION: Example of a library header file with preprocessor conditionals that LDF can evaluate. Shows conditional inclusion of header files based on defined macros and version checks.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/librarymanager/ldf.rst#2025-04-10_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#ifdef MY_PROJECT_VERSION\n// include common file for the project\n#include \"my_common.h\"\n#endif\n\n#if MY_PROJECT_VERSION < 10\n// this include will be ignored because does not satisfy condition above\n#include \"my_old.h\"\n#endif\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic PlatformIO Environment for STC8H2K64T\nDESCRIPTION: This snippet shows the basic configuration needed in platformio.ini to use the Generic STC8H2K64T board. It specifies the platform as intel_mcs51 and sets the board identifier.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8H2K64T.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8H2K64T]\nplatform = intel_mcs51\nboard = STC8H2K64T\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for sakura.io Board\nDESCRIPTION: Configuration for specifying the upload protocol in PlatformIO. This example sets the protocol to 'mbed', which is the default for this board, but it can be changed to other supported protocols.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/sakuraio_evb_01.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:sakuraio_evb_01]\nplatform = ststm32\nboard = sakuraio_evb_01\n\nupload_protocol = mbed\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration for Trueverit ESP32\nDESCRIPTION: Basic configuration for setting up a PlatformIO project with Trueverit ESP32 Universal IoT Driver board. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/trueverit-iot-driver.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:trueverit-iot-driver]\nplatform = espressif32\nboard = trueverit-iot-driver\n```\n\n----------------------------------------\n\nTITLE: Configuring Project Dependencies in platformio.ini (Bad Practice)\nDESCRIPTION: An example of deprecated practices for configuring project dependencies in the platformio.ini file. This includes using unspecified versions and relying on latest/development versions, which can lead to breaking changes.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/migration.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\n; Depend on ANY/Latest version of the development platform\n; allowing breaking changes\nplatform = platformio/espressif32\n\nlib_deps =\n  ; Omit library package owner (<owner>/<name>) and depend on the library by name.\n  ; Lead to the conflicts when there are multiple libraries with the same name\n  OneWire\n\n  ; Depend on ANY/Latest version of the development platform\n  ; allowing breaking changes\n  me-no-dev/AsyncTCP\n\n  ; Depend on the development branch of the Git repository,\n  ; allow breaking changes, and untested commits\n  https://github.com/username/HelloWorld.git\n```\n\n----------------------------------------\n\nTITLE: Customizing BluePill F103C8 Board Settings\nDESCRIPTION: This snippet demonstrates how to override default board settings such as microcontroller and CPU frequency in the PlatformIO configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/bluepill_f103c8.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:bluepill_f103c8]\nplatform = ststm32\nboard = bluepill_f103c8\n\n; change microcontroller\nboard_build.mcu = stm32f103c8t6\n\n; change MCU frequency\nboard_build.f_cpu = 72000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO Environment for Aceinna MTLT335\nDESCRIPTION: This snippet shows how to set up a PlatformIO environment for the Aceinna MTLT335 board. It specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/aceinna_imu/OpenIMU335.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:OpenIMU335]\nplatform = aceinna_imu\nboard = OpenIMU335\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration with Custom MCU Settings\nDESCRIPTION: Extended configuration for the RedBearLab Blend Micro board with custom microcontroller and frequency settings. This demonstrates how to override default board settings in platformio.ini.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/blendmicro16.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:blendmicro16]\nplatform = atmelavr\nboard = blendmicro16\n\n; change microcontroller\nboard_build.mcu = atmega32u4\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: STM32 Board Specifications Table in RST Format\nDESCRIPTION: A structured table in RST format listing STM32 microcontroller boards with their technical specifications including MCU model, clock speed, flash memory, and RAM capacity.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/frameworks/stm32cube.rst#2025-04-10_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n* - :ref:`board_ststm32_genericSTM32F103T6`\n      - :ref:`platform_ststm32`\n      - STM32F103T6U6\n      - 72MHz\n      - 32KB\n      - 10KB\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Arduino MKR WAN 1310\nDESCRIPTION: Configuration example for specifying the upload protocol (sam-ba) for the Arduino MKR WAN 1310 board in a PlatformIO project.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/mkrwan1310.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:mkrwan1310]\nplatform = atmelsam\nboard = mkrwan1310\n\nupload_protocol = sam-ba\n```\n\n----------------------------------------\n\nTITLE: Configuring ESP32-C6-DevKitM-1 Upload Protocol\nDESCRIPTION: Example configuration for specifying the upload protocol for the ESP32-C6-DevKitM-1 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32-c6-devkitm-1.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32-c6-devkitm-1]\nplatform = espressif32\nboard = esp32-c6-devkitm-1\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Displaying ESP32 OTA Upload Tool Help Information\nDESCRIPTION: Command to view the help information for the ESP32 OTA upload tool, showing available options and their usage.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/espressif32_extra.rst#2025-04-10_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n~/.platformio/packages/framework-arduinoespressif32/tools/espota.py --help\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example for specifying the upload protocol for the Nordic nRF52840-DK board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/nrf52840_dk_adafruit.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:nrf52840_dk_adafruit]\nplatform = nordicnrf52\nboard = nrf52840_dk_adafruit\n\nupload_protocol = jlink\n```\n\n----------------------------------------\n\nTITLE: Basic ESP32 Board Configuration\nDESCRIPTION: Basic PlatformIO configuration for Unexpected Maker RMP board using the espressif32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/um_rmp.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:um_rmp]\nplatform = espressif32\nboard = um_rmp\n```\n\n----------------------------------------\n\nTITLE: Configuring Raspberry Pi SWD Upload Protocol\nDESCRIPTION: Configuration for using Raspberry Pi SWD as both debugging tool and firmware upload protocol in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/raspberrypi-swd.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = ...\nboard = ...\ndebug_tool = raspberrypi-swd\nupload_protocol = raspberrypi-swd\n```\n\n----------------------------------------\n\nTITLE: Customizing NIBO 2 Robot Configuration in PlatformIO\nDESCRIPTION: This configuration demonstrates how to override default settings for the nicai-systems NIBO 2 robot. It shows how to change the microcontroller type and CPU frequency using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/nibo2.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nibo2]\nplatform = atmelavr\nboard = nibo2\n\n; change microcontroller\nboard_build.mcu = atmega128\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Freescale Kinetis FRDM-KL43Z Board Configuration\nDESCRIPTION: Advanced configuration example showing how to override default board settings such as microcontroller model and CPU frequency in platformio.ini.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/freescalekinetis/frdm_kl43z.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:frdm_kl43z]\nplatform = freescalekinetis\nboard = frdm_kl43z\n\n; change microcontroller\nboard_build.mcu = mkl43z256vlh4\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Board Setup in platformio.ini\nDESCRIPTION: Basic configuration for the ST Discovery F072RB board in the project's platformio.ini file. This sets up the board with its default settings using the ststm32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_f072rb.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_f072rb]\nplatform = ststm32\nboard = disco_f072rb\n```\n\n----------------------------------------\n\nTITLE: Basic ESP32 Feather Board Configuration\nDESCRIPTION: Basic PlatformIO configuration for ESP32 Feather board setup using espressif32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/featheresp32.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:featheresp32]\nplatform = espressif32\nboard = featheresp32\n```\n\n----------------------------------------\n\nTITLE: Documentation URL Redirect Mapping\nDESCRIPTION: A complete mapping of documentation URL redirects showing the old paths and their corresponding new locations. The redirects organize content into clearer categories like core, integration, advanced, and reorganize URL structure for better navigation.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/redirects.txt#2025-04-10_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/advanced/unit-testing/structure.html -> /advanced/unit-testing/structure/index.html\n/ci/appveyor.html -> /integration/ci/appveyor.html\n/ci/circleci.html -> /integration/ci/circleci.html\n/ci/drone.html -> /integration/ci/drone.html\n/ci/github-actions.html -> /integration/ci/github-actions.html\n/ci/gitlab.html -> /integration/ci/gitlab.html\n/ci/index.html -> /integration/ci/index.html\n/ci/jenkins.html -> /integration/ci/jenkins.html\n/ci/shippable.html -> /integration/ci/shippable.html\n/ci/travis.html -> /integration/ci/travis.html\n/core.html -> /core/index.html\n[...truncated for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Board Settings in platformio.ini\nDESCRIPTION: Example showing how to override default board settings like microcontroller type and CPU frequency for the Particle Boron using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/particle_boron.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:particle_boron]\nplatform = nordicnrf52\nboard = particle_boron\n\n; change microcontroller\nboard_build.mcu = nrf52840\n\n; change MCU frequency\nboard_build.f_cpu = 64000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration with Custom Settings for ATtiny4313\nDESCRIPTION: Extended configuration for PlatformIO projects targeting the ATtiny4313 board with customized microcontroller and frequency settings. This example demonstrates how to override default board settings from the board manifest.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/attiny4313.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:attiny4313]\nplatform = atmelavr\nboard = attiny4313\n\n; change microcontroller\nboard_build.mcu = attiny4313\n\n; change MCU frequency\nboard_build.f_cpu = 8000000L\n```\n\n----------------------------------------\n\nTITLE: Disabling Bundled Components in STM32Cube PlatformIO Project\nDESCRIPTION: This snippet shows how to disable the bundled components feature in an STM32Cube project. It sets the 'disable_embedded_libs' option to 'yes' for a Discovery F303VC board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/frameworks/stm32cube_extra.rst#2025-04-10_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_f303vc]\nplatform = ststm32\nframework = stm32cube\nboard = disco_f303vc\nboard_build.stm32cube.disable_embedded_libs = yes\n```\n\n----------------------------------------\n\nTITLE: Configuring Stable Native Platform Versions in PlatformIO\nDESCRIPTION: Configuration examples for using stable versions of the Native development platform, including latest stable and specific version pinning.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/native.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n; Latest stable version, NOT recommended\n; Pin the version as shown below\n[env:latest_stable]\nplatform = native\n\n; Specific version\n[env:custom_stable]\nplatform = native@x.y.z\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic PlatformIO Environment for Blues Swan R5\nDESCRIPTION: Basic configuration for setting up a PlatformIO environment targeting the Blues Swan R5 board. This configuration uses the ststm32 platform with the default board settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/blues_swan_r5.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:blues_swan_r5]\nplatform = ststm32\nboard = blues_swan_r5\n```\n\n----------------------------------------\n\nTITLE: Customizing LilyGo T3-S3 Board Settings in PlatformIO\nDESCRIPTION: This example demonstrates how to override default board settings in the PlatformIO configuration. It shows how to change the microcontroller and MCU frequency for the LilyGo T3-S3 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/lilygo-t3-s3.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:lilygo-t3-s3]\nplatform = espressif32\nboard = lilygo-t3-s3\n\n; change microcontroller\nboard_build.mcu = esp32s3\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration in PlatformIO\nDESCRIPTION: Basic configuration setup for S.ODI Ultra v1 board in platformio.ini file\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/s_odi_ultra.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:s_odi_ultra]\nplatform = espressif32\nboard = s_odi_ultra\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration for STM32F103RB\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the STM32F103RB board. Sets ST-Link as the upload protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103RB.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103RB]\nplatform = ststm32\nboard = genericSTM32F103RB\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for ST Nucleo F446RE Board\nDESCRIPTION: Basic PlatformIO configuration for the ST Nucleo F446RE board. This snippet shows how to specify the board in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f446re.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f446re]\nplatform = ststm32\nboard = nucleo_f446re\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Board Settings in platformio.ini\nDESCRIPTION: This example demonstrates how to override default board settings for the Blinker WiFiduino32. It shows how to change the microcontroller and MCU frequency using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/wifiduino32.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:wifiduino32]\nplatform = espressif32\nboard = wifiduino32\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the Portenta H7 board, using DFU as the selected protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/portenta_h7_m7.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:portenta_h7_m7]\nplatform = ststm32\nboard = portenta_h7_m7\n\nupload_protocol = dfu\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration with PlatformIO\nDESCRIPTION: Basic configuration to set up a PlatformIO project for the Nucleo F722ZE board using the STM32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f722ze.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f722ze]\nplatform = ststm32\nboard = nucleo_f722ze\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Quirkbot Board Settings in PlatformIO\nDESCRIPTION: Basic configuration for initializing a Quirkbot board project in PlatformIO using the atmelavr platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/quirkbot.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:quirkbot]\nplatform = atmelavr\nboard = quirkbot\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for RedBearLab BLE Nano 1.5\nDESCRIPTION: Basic configuration for the RedBearLab BLE Nano 1.5 board in the platformio.ini file. This sets up the Nordic nRF51 platform with the appropriate board identifier.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf51/redBearLabBLENano.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:redBearLabBLENano]\nplatform = nordicnrf51\nboard = redBearLabBLENano\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Protocol for ESP320 Board\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the ESP320 board. The board supports 'espota' and 'esptool' protocols, with 'esptool' being the default.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp320.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp320]\nplatform = espressif32\nboard = esp320\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Basic SODAQ SARA Board Configuration in PlatformIO\nDESCRIPTION: Basic configuration for setting up a PlatformIO project targeting the SODAQ SARA board using the atmelsam platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/sodaq_sara.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:sodaq_sara]\nplatform = atmelsam\nboard = sodaq_sara\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for ST Nucleo F446RE in PlatformIO\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the ST Nucleo F446RE board. In this case, it uses the STLink protocol which is the default.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f446re.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f446re]\nplatform = ststm32\nboard = nucleo_f446re\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Customizing N79E814 Board Parameters in PlatformIO\nDESCRIPTION: Extended configuration example showing how to override default board settings such as microcontroller model and CPU frequency in a PlatformIO project.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/N79E814.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:N79E814]\nplatform = intel_mcs51\nboard = N79E814\n\n; change microcontroller\nboard_build.mcu = n79e814\n\n; change MCU frequency\nboard_build.f_cpu = 22118400L\n```\n\n----------------------------------------\n\nTITLE: Customizing Ruuvi Tag Board Settings in PlatformIO INI File\nDESCRIPTION: Example of overriding default Ruuvi Tag settings in a PlatformIO project. Demonstrates changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/ruuvitag.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ruuvitag]\nplatform = nordicnrf52\nboard = ruuvitag\n\n; change microcontroller\nboard_build.mcu = nrf52832\n\n; change MCU frequency\nboard_build.f_cpu = 64000000L\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_proxlighttrinkey_m0.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_proxlighttrinkey_m0]\nplatform = atmelsam\nboard = adafruit_proxlighttrinkey_m0\n\nupload_protocol = sam-ba\n```\n\n----------------------------------------\n\nTITLE: Customizing SparkFun ESP32 MicroMod Board Settings\nDESCRIPTION: This code snippet demonstrates how to override default board settings in the PlatformIO configuration. It shows examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/sparkfun_esp32micromod.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:sparkfun_esp32micromod]\nplatform = espressif32\nboard = sparkfun_esp32micromod\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing PONTECH UAV100 Board Settings in PlatformIO\nDESCRIPTION: Extended configuration for the PONTECH UAV100 board that demonstrates how to override default settings like microcontroller type and CPU frequency using board_*** options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/microchippic32/usbono_pic32.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:usbono_pic32]\nplatform = microchippic32\nboard = usbono_pic32\n\n; change microcontroller\nboard_build.mcu = 32MX440F512H\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring ESP32-S2-Saola-1 Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the Espressif ESP32-S2-Saola-1 board in the PlatformIO project configuration file. It sets the platform and board, and demonstrates how to override default board settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32-s2-saola-1.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32-s2-saola-1]\nplatform = espressif32\nboard = esp32-s2-saola-1\n\n; change microcontroller\nboard_build.mcu = esp32s2\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU Settings\nDESCRIPTION: Example showing how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/nscreen-32.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nscreen-32]\nplatform = espressif32\nboard = nscreen-32\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Example JSON Output of PlatformIO Installation State\nDESCRIPTION: Sample JSON file content showing installation state details for PlatformIO Core on macOS, including paths to executables, versions, and system information.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/installation/integration.rst#2025-04-10_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cache_dir\": \"/Users/Freedom/.platformio/.cache\",\n  \"core_dir\": \"/Users/Freedom/.platformio\",\n  \"core_version\": \"4.3.1\",\n  \"installer_version\": \"0.2.0\",\n  \"is_develop_core\": false,\n  \"penv_bin_dir\": \"/Users/Freedom/.platformio/penv/bin\",\n  \"penv_dir\": \"/Users/Freedom/.platformio/penv\",\n  \"platformio_exe\": \"/Users/Freedom/.platformio/penv/bin/platformio\",\n  \"python_exe\": \"/Users/Freedom/.platformio/penv/bin/python\",\n  \"system\": \"darwin_x86_64\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for ST DISCO-L072CZ-LRWAN1 in PlatformIO\nDESCRIPTION: Configuration example for specifying the upload protocol for the ST DISCO-L072CZ-LRWAN1 board. Sets the protocol to ST-Link, which is the default.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_l072cz_lrwan1.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_l072cz_lrwan1]\nplatform = ststm32\nboard = disco_l072cz_lrwan1\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Overriding Default WiFiduino Settings in PlatformIO INI File\nDESCRIPTION: This snippet demonstrates how to override default WiFiduino settings in the PlatformIO configuration. It shows examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/wifiduino.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:wifiduino]\nplatform = espressif8266\nboard = wifiduino\n\n; change microcontroller\nboard_build.mcu = esp8266\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring PYBStick Lite 26 Board in platformio.ini\nDESCRIPTION: Basic configuration for using the PYBStick Lite 26 board in a PlatformIO project. The configuration specifies the STM32 platform and the board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/pybstick26_lite.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:pybstick26_lite]\nplatform = ststm32\nboard = pybstick26_lite\n```\n\n----------------------------------------\n\nTITLE: Configuring MXChip AZ3166 Board in PlatformIO\nDESCRIPTION: Basic configuration for setting up the Microsoft Azure IoT Development Kit (MXChip AZ3166) in a PlatformIO project configuration file. This defines the board and platform to use.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/mxchip_az3166.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:mxchip_az3166]\nplatform = ststm32\nboard = mxchip_az3166\n```\n\n----------------------------------------\n\nTITLE: Customizing Arduino Duemilanove or Diecimila ATmega168 settings in PlatformIO INI file\nDESCRIPTION: This snippet demonstrates how to override default board settings in the PlatformIO project configuration file. It shows examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/diecimilaatmega168.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:diecimilaatmega168]\nplatform = atmelavr\nboard = diecimilaatmega168\n\n; change microcontroller\nboard_build.mcu = atmega168\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Protocol for ST 32F401CDISCOVERY\nDESCRIPTION: Shows how to specify the upload protocol for the ST 32F401CDISCOVERY board. This example explicitly sets the ST-Link protocol, which is already the default for this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_f401vc.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_f401vc]\nplatform = ststm32\nboard = disco_f401vc\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for ProtoCentral HealthyPi 4\nDESCRIPTION: This configuration snippet shows how to set the upload protocol for the ProtoCentral HealthyPi 4 board. It uses the 'esptool' protocol, which is the default for this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/healthypi4.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:healthypi4]\nplatform = espressif32\nboard = healthypi4\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Overriding Fuse Upload Command for Atmel AVR in PlatformIO\nDESCRIPTION: This Python script shows how to completely override the fuse upload command for an Atmel AVR microcontroller in PlatformIO. It replaces the FUSESUPLOADERFLAGS and SETFUSESCMD environment variables with custom settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/atmelavr_extra.rst#2025-04-10_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nImport(\"env\")\n\nenv.Replace(\n    FUSESUPLOADERFLAGS=[\n        # use \"tool-avrdude-megaavr\" for the atmelmegaavr platform\n        \"-C\", \"$PROJECT_PACKAGES_DIR/tool-avrdude/avrdude.conf\",\n        \"-p\", \"$BOARD_MCU\",\n        \"-c\", \"atmelice_isp\",\n        \"-e\", \"-v\"\n    ],\n    SETFUSESCMD=\"avrdude $FUSESUPLOADERFLAGS -Ulock:w:0x0F:m\",\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flash Frequency\nDESCRIPTION: Sets the ESP32 flash frequency to 80MHz using board_build.f_flash option.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/espressif32_extra.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\n; set frequency to 80MHz\nboard_build.f_flash = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol in platformio.ini\nDESCRIPTION: Configuration for specifying the upload protocol for the ST Discovery F072RB board. This example sets the upload protocol to 'stlink', which is also the default protocol for this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_f072rb.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_f072rb]\nplatform = ststm32\nboard = disco_f072rb\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration with MCU Options\nDESCRIPTION: Extended configuration showing how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega164P.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega164P]\nplatform = atmelavr\nboard = ATmega164P\n\n; change microcontroller\nboard_build.mcu = atmega164p\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring NXP i.MX RT1060 Evaluation Kit in platformio.ini\nDESCRIPTION: Basic configuration for the NXP i.MX RT1060 Evaluation Kit in the PlatformIO project configuration file. Sets the platform and board options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nxpimxrt/mimxrt1060_evk.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:mimxrt1060_evk]\nplatform = nxpimxrt\nboard = mimxrt1060_evk\n```\n\n----------------------------------------\n\nTITLE: Configuring ATtiny1607 Board in PlatformIO Project Configuration\nDESCRIPTION: Basic configuration for setting up an ATtiny1607 board in the platformio.ini project file. This specifies the platform and board to use for the build environment.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/ATtiny1607.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATtiny1607]\nplatform = atmelmegaavr\nboard = ATtiny1607\n```\n\n----------------------------------------\n\nTITLE: Customizing Generic STC15F201A Board Settings in PlatformIO INI File\nDESCRIPTION: This snippet demonstrates how to override default settings for the Generic STC15F201A board in the PlatformIO project configuration file. It shows how to change the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15F201A.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15F201A]\nplatform = intel_mcs51\nboard = STC15F201A\n\n; change microcontroller\nboard_build.mcu = stc15f201a\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Updating PlatformIO Organization Details\nDESCRIPTION: This example demonstrates how to update the email and display name of an organization named 'platformio'. It sets the email to 'contact@platformio.org' and the display name to 'PlatformIO'.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/org/cmd_update.rst#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> pio org update platformio --email contact@platformio.org --displayname PlatformIO\n```\n\n----------------------------------------\n\nTITLE: Uploading Configuration for RedBearLab Blend 2\nDESCRIPTION: Example platformio.ini configuration that specifies the upload protocol for the RedBearLab Blend 2 board, using CMSIS-DAP as the selected protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/redbear_blend2.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:redbear_blend2]\nplatform = nordicnrf52\nboard = redbear_blend2\n\nupload_protocol = cmsis-dap\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/gen4iod.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:gen4iod]\nplatform = espressif8266\nboard = gen4iod\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring MAX32625PICO Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the MAX32625PICO board in the PlatformIO project configuration file. It includes the basic setup and examples of overriding default board settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/maxim32/max32625pico.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:max32625pico]\nplatform = maxim32\nboard = max32625pico\n\n; change microcontroller\nboard_build.mcu = max32625\n\n; change MCU frequency\nboard_build.f_cpu = 96000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring chipKIT Lenny Board in PlatformIO INI File\nDESCRIPTION: This code snippet shows how to configure a PlatformIO project for the chipKIT Lenny board. It demonstrates setting the platform and board ID, as well as how to override default board settings such as microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/microchippic32/lenny.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:lenny]\nplatform = microchippic32\nboard = lenny\n\n; change microcontroller\nboard_build.mcu = 32MX270F256D\n\n; change MCU frequency\nboard_build.f_cpu = 40000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Sanguino ATmega644P Board Settings\nDESCRIPTION: This snippet demonstrates how to override default settings for the Sanguino ATmega644P board in a PlatformIO project. It shows how to change the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/sanguino_atmega644p.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:sanguino_atmega644p]\nplatform = atmelavr\nboard = sanguino_atmega644p\n\n; change microcontroller\nboard_build.mcu = atmega644p\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing STC15F2K48S2 Board Settings\nDESCRIPTION: Advanced PlatformIO configuration showing how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15F2K48S2.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15F2K48S2]\nplatform = intel_mcs51\nboard = STC15F2K48S2\n\n; change microcontroller\nboard_build.mcu = stc15f2k48s2\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for AfroFlight Rev5 (8MHz)\nDESCRIPTION: Configuration to specify the upload protocol for the AfroFlight Rev5 (8MHz) board. In this example, it's set to the default 'serial' protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/afroflight_f103cb.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:afroflight_f103cb]\nplatform = ststm32\nboard = afroflight_f103cb\n\nupload_protocol = serial\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration for Pycom LoPy4\nDESCRIPTION: Example configuration showing how to specify the upload protocol for the Pycom LoPy4 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/lopy4.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:lopy4]\nplatform = espressif32\nboard = lopy4\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic PlatformIO Environment for ST Nucleo F030R8\nDESCRIPTION: Basic project configuration for ST Nucleo F030R8 board using the STM32 platform in platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f030r8.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f030r8]\nplatform = ststm32\nboard = nucleo_f030r8\n```\n\n----------------------------------------\n\nTITLE: Configuring Arduino Mini ATmega328 in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the Arduino Mini ATmega328 board in the PlatformIO project configuration file. It sets the platform and board options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/miniatmega328.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:miniatmega328]\nplatform = atmelavr\nboard = miniatmega328\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Aceinna Low Cost RTK\nDESCRIPTION: Configuration to set the upload protocol for the Aceinna Low Cost RTK board. In this example, it's set to use the ST-Link protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/aceinna_imu/LowCostRTK.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:LowCostRTK]\nplatform = aceinna_imu\nboard = LowCostRTK\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Configuring Frog Board ESP32 in PlatformIO\nDESCRIPTION: Basic PlatformIO configuration for the Frog Board ESP32. Sets up the project environment with the correct board ID and platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/frogboard.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:frogboard]\nplatform = espressif32\nboard = frogboard\n```\n\n----------------------------------------\n\nTITLE: Advanced STM32F410RB Board Configuration\nDESCRIPTION: Extended PlatformIO configuration demonstrating how to customize microcontroller and frequency settings for the STM32F410RB board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F410RB.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F410RB]\nplatform = ststm32\nboard = genericSTM32F410RB\n\n; change microcontroller\nboard_build.mcu = stm32f410rbt6\n\n; change MCU frequency\nboard_build.f_cpu = 100000000L\n```\n\n----------------------------------------\n\nTITLE: Basic ATmega165P Board Configuration in PlatformIO\nDESCRIPTION: Basic configuration settings for ATmega165P board in platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega165P.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega165P]\nplatform = atmelavr\nboard = ATmega165P\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for firmware deployment.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/mhetesp32devkit.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:mhetesp32devkit]\nplatform = espressif32\nboard = mhetesp32devkit\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Espotel LoRa Module\nDESCRIPTION: Configuration for specifying the upload protocol for the Espotel LoRa Module. This example sets the upload protocol to ST-Link, which is also the default protocol for this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/elmo_f411re.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:elmo_f411re]\nplatform = ststm32\nboard = elmo_f411re\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Custom MCU Configuration for STM32F103RD\nDESCRIPTION: Demonstrates how to override default board settings like microcontroller model and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103RD.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103RD]\nplatform = ststm32\nboard = genericSTM32F103RD\n\n; change microcontroller\nboard_build.mcu = stm32f103rdt6\n\n; change MCU frequency\nboard_build.f_cpu = 72000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for EspinalLab ATMegaZero ESP32-S2\nDESCRIPTION: Configuration example for changing the upload protocol for the EspinalLab ATMegaZero ESP32-S2 board in PlatformIO. Sets the upload protocol to 'esptool'.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/atmegazero_esp32s2.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:atmegazero_esp32s2]\nplatform = espressif32\nboard = atmegazero_esp32s2\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Wio Link Upload Protocol Configuration\nDESCRIPTION: PlatformIO configuration demonstrating how to specify the upload protocol for the Wio Link board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/wio_link.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:wio_link]\nplatform = espressif8266\nboard = wio_link\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring Adafruit Feather ESP32-S2 in platformio.ini\nDESCRIPTION: This snippet shows how to configure the Adafruit Feather ESP32-S2 board in the project's platformio.ini file. It includes the basic setup and demonstrates how to override default board settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/adafruit_feather_esp32s2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_feather_esp32s2]\nplatform = espressif32\nboard = adafruit_feather_esp32s2\n\n; change microcontroller\nboard_build.mcu = esp32s2\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: ESP32 Board Configuration Table in RST Format\nDESCRIPTION: A structured table in reStructuredText format listing ESP32 development boards and their specifications including platform type, processor model, clock speed, flash size, and RAM size\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/olimex-jtag-tiny.rst#2025-04-10_snippet_3\n\nLANGUAGE: restructuredtext\nCODE:\n```\n* - :ref:`board_espressif32_um_tinys2`\n      - :ref:`platform_espressif32`\n      - External\n      - ESP32S2\n      - 240MHz\n      - 4MB\n      - 320KB\n```\n\n----------------------------------------\n\nTITLE: Configuring Upstream TI TIVA Platform Version in platformio.ini\nDESCRIPTION: Demonstrates how to configure the platformio.ini file to use the upstream development version of the TI TIVA platform from its GitHub repository.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/titiva.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:upstream_develop]\nplatform = https://github.com/platformio/platform-titiva.git\nboard = ...\n```\n\n----------------------------------------\n\nTITLE: Customizing MCU and Frequency Settings for Nucleo F030R8\nDESCRIPTION: Project configuration with custom microcontroller and frequency settings for the ST Nucleo F030R8 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f030r8.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f030r8]\nplatform = ststm32\nboard = nucleo_f030r8\n\n; change microcontroller\nboard_build.mcu = stm32f030r8t6\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring STM32F103R8 Board in platformio.ini\nDESCRIPTION: Basic configuration for using the STM32F103R8 board in a PlatformIO project. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103R8.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103R8]\nplatform = ststm32\nboard = genericSTM32F103R8\n```\n\n----------------------------------------\n\nTITLE: Customizing STM32H735G-DK Discovery Kit Settings\nDESCRIPTION: Example of overriding default board settings in PlatformIO, including changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_h735ig.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_h735ig]\nplatform = ststm32\nboard = disco_h735ig\n\n; change microcontroller\nboard_build.mcu = stm32h735igk6\n\n; change MCU frequency\nboard_build.f_cpu = 550000000L\n```\n\n----------------------------------------\n\nTITLE: Setting upload protocol for NXP i.MX RT1050 Evaluation Kit\nDESCRIPTION: This code snippet shows how to set the upload protocol for the NXP i.MX RT1050 Evaluation Kit in platformio.ini. The default protocol is 'mbed'.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nxpimxrt/mimxrt1050_evk.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:mimxrt1050_evk]\nplatform = nxpimxrt\nboard = mimxrt1050_evk\n\nupload_protocol = mbed\n```\n\n----------------------------------------\n\nTITLE: Advanced ESP32-PRO Board Configuration\nDESCRIPTION: Extended PlatformIO configuration demonstrating how to override default board settings such as microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32-pro.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32-pro]\nplatform = espressif32\nboard = esp32-pro\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Board Settings in PlatformIO Configuration\nDESCRIPTION: Example of how to override default board settings in PlatformIO by specifying custom microcontroller and frequency settings. This demonstrates adjusting the MCU type and clock frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/adafruit_feather_esp32s2_tft.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_feather_esp32s2_tft]\nplatform = espressif32\nboard = adafruit_feather_esp32s2_tft\n\n; change microcontroller\nboard_build.mcu = esp32s2\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for TinyS2\nDESCRIPTION: Basic configuration for setting up a PlatformIO project with the Unexpected Maker TinyS2 board using the espressif32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/um_tinys2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:um_tinys2]\nplatform = espressif32\nboard = um_tinys2\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU and Frequency Settings\nDESCRIPTION: Extended configuration showing how to override default microcontroller and frequency settings for the Seeed Arch Max board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/seeedArchMax.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:seeedArchMax]\nplatform = ststm32\nboard = seeedArchMax\n\n; change microcontroller\nboard_build.mcu = stm32f407vet6\n\n; change MCU frequency\nboard_build.f_cpu = 168000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring NodeMCU-32S Board in PlatformIO\nDESCRIPTION: Basic configuration for using the NodeMCU-32S board in a PlatformIO project. This snippet shows how to specify the board and platform in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/nodemcu-32s.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nodemcu-32s]\nplatform = espressif32\nboard = nodemcu-32s\n```\n\n----------------------------------------\n\nTITLE: Customizing ATmega644/A Board Settings in PlatformIO INI File\nDESCRIPTION: This example demonstrates how to override default ATmega644/A settings in the PlatformIO project configuration. It shows how to change the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega644A.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega644A]\nplatform = atmelavr\nboard = ATmega644A\n\n; change microcontroller\nboard_build.mcu = atmega644a\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Teensy 3.0 Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure a PlatformIO project for the Teensy 3.0 board. It sets the platform to 'teensy' and the board to 'teensy30'.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/teensy/teensy30.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:teensy30]\nplatform = teensy\nboard = teensy30\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for SparkFun ESP8266 Thing Dev Board\nDESCRIPTION: This snippet shows how to set the upload protocol for the SparkFun ESP8266 Thing Dev board in the PlatformIO configuration. The board supports 'espota' and 'esptool' protocols, with 'esptool' as the default.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/thingdev.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:thingdev]\nplatform = espressif8266\nboard = thingdev\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Library Directory in PlatformIO\nDESCRIPTION: The `globallib_dir` setting specifies the directory path for storing global libraries. It is deprecated and defaults to the 'lib' directory under PlatformIO core directory. Can be overridden using the PLATFORMIO_GLOBALLIB_DIR environment variable.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/platformio/options/directory/globallib_dir.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\ngloballib_dir = /path/to/global/libraries\n```\n\n----------------------------------------\n\nTITLE: Configuring MKR Sharky Board for STM32 Platform in PlatformIO\nDESCRIPTION: This snippet shows how to configure the MKR Sharky board in the project's platformio.ini file. It sets the platform to STM32 and specifies the board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/mkr_sharky.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:mkr_sharky]\nplatform = ststm32\nboard = mkr_sharky\n```\n\n----------------------------------------\n\nTITLE: Configuring Arduino Yun Mini Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to set up the Arduino Yun Mini board in the PlatformIO project configuration file. It specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/yunmini.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:yunmini]\nplatform = atmelavr\nboard = yunmini\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration with Custom MCU Settings\nDESCRIPTION: Extended configuration for the TinyLily board that demonstrates how to override default board settings like microcontroller type and CPU frequency in a PlatformIO project.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/tinylily.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:tinylily]\nplatform = atmelavr\nboard = tinylily\n\n; change microcontroller\nboard_build.mcu = atmega328p\n\n; change MCU frequency\nboard_build.f_cpu = 8000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring TTGO T7 V1.4 Mini32 Board in PlatformIO\nDESCRIPTION: Basic configuration for setting up a PlatformIO project environment for the TTGO T7 V1.4 Mini32 board with the Espressif32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/ttgo-t7-v14-mini32.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ttgo-t7-v14-mini32]\nplatform = espressif32\nboard = ttgo-t7-v14-mini32\n```\n\n----------------------------------------\n\nTITLE: Configuring File System Type\nDESCRIPTION: Configuration for setting the file system type (LittleFS) for ESP32.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/espressif32_extra.rst#2025-04-10_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = platformio/espressif32\nframework = arduino\nboard = ...\nboard_build.filesystem = littlefs\n```\n\n----------------------------------------\n\nTITLE: Custom MCU Configuration for FRDM-KL25Z\nDESCRIPTION: Example showing how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/freescalekinetis/frdm_kl25z.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:frdm_kl25z]\nplatform = freescalekinetis\nboard = frdm_kl25z\n\n; change microcontroller\nboard_build.mcu = mkl25z128vlk4\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic PlatformIO Environment for ST STM32F0308DISCOVERY\nDESCRIPTION: Sets up a basic PlatformIO environment for the ST STM32F0308DISCOVERY board using the STM32 platform. This configuration uses the 'disco_f030r8' board ID in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_f030r8.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_f030r8]\nplatform = ststm32\nboard = disco_f030r8\n```\n\n----------------------------------------\n\nTITLE: Configuring BL654 Development Kit in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the BL654 Development Kit in the PlatformIO project configuration file. It sets the platform and board, and demonstrates how to override default board settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/laird_bl654_dvk.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:laird_bl654_dvk]\nplatform = nordicnrf52\nboard = laird_bl654_dvk\n\n; change microcontroller\nboard_build.mcu = nrf52840\n\n; change MCU frequency\nboard_build.f_cpu = 64000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing ATtiny1627 Board Configuration in PlatformIO\nDESCRIPTION: Extended PlatformIO configuration for ATtiny1627 showing how to override default settings like microcontroller type and CPU frequency using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/ATtiny1627.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATtiny1627]\nplatform = atmelmegaavr\nboard = ATtiny1627\n\n; change microcontroller\nboard_build.mcu = attiny1627\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Generic STC15W201S Board Settings in PlatformIO\nDESCRIPTION: This snippet demonstrates how to override default settings for the Generic STC15W201S board in PlatformIO. It shows how to change the microcontroller and MCU frequency using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15W201S.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15W201S]\nplatform = intel_mcs51\nboard = STC15W201S\n\n; change microcontroller\nboard_build.mcu = stc15w201s\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Customizing Arduino Industrial 101 Settings\nDESCRIPTION: This code snippet demonstrates how to override default settings for the Arduino Industrial 101 board in PlatformIO. It shows examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/chiwawa.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:chiwawa]\nplatform = atmelavr\nboard = chiwawa\n\n; change microcontroller\nboard_build.mcu = atmega32u4\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the board, using esptool as the default option.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/adafruit_feather_esp32s2_reversetft.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_feather_esp32s2_reversetft]\nplatform = espressif32\nboard = adafruit_feather_esp32s2_reversetft\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: PlatformIO configuration demonstrating how to set the upload protocol for the board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/olimexino_stm32f3.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:olimexino_stm32f3]\nplatform = ststm32\nboard = olimexino_stm32f3\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Configuring ATtiny214 Board in platformio.ini\nDESCRIPTION: Basic configuration for ATtiny214 board in the PlatformIO project configuration file. This sets up the atmelmegaavr platform with the ATtiny214 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/ATtiny214.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATtiny214]\nplatform = atmelmegaavr\nboard = ATtiny214\n```\n\n----------------------------------------\n\nTITLE: Customizing STM32F417VE Board Parameters in PlatformIO\nDESCRIPTION: Shows how to override default board settings for the STM32F417VE in a PlatformIO project. This example demonstrates changing the microcontroller model and MCU frequency using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F417VE.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F417VE]\nplatform = ststm32\nboard = genericSTM32F417VE\n\n; change microcontroller\nboard_build.mcu = stm32f417vet6\n\n; change MCU frequency\nboard_build.f_cpu = 168000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Sanguino ATmega644P Board in PlatformIO.ini\nDESCRIPTION: Basic configuration for using the Sanguino ATmega644P or ATmega644PA (8 MHz) board in a PlatformIO project. Sets the platform to atmelavr and specifies the board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/sanguino_atmega644p_8m.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:sanguino_atmega644p_8m]\nplatform = atmelavr\nboard = sanguino_atmega644p_8m\n```\n\n----------------------------------------\n\nTITLE: Configuring Mbed Framework in PlatformIO\nDESCRIPTION: Sets the PlatformIO project configuration to use the Mbed framework.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/frameworks/mbed.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:myproject]\nframework = mbed\n```\n\n----------------------------------------\n\nTITLE: Configuring ESP-IDF Project with AWS IoT Component\nDESCRIPTION: Example of adding external ESP-IDF component using EXTRA_COMPONENT_DIRS in CMake configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/frameworks/espidf_extra.rst#2025-04-10_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n# The following lines of boilerplate have to be in your project's CMakeLists\n# in this exact order for cmake to work correctly\ncmake_minimum_required(VERSION 3.16)\n\ninclude($ENV{IDF_PATH}/tools/cmake/project.cmake)\nlist(APPEND EXTRA_COMPONENT_DIRS esp-aws-iot)\nproject(subscribe_publish)\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for DFRobot Firebeetle 2 ESP32-S3\nDESCRIPTION: A basic PlatformIO configuration example for the DFRobot Firebeetle 2 ESP32-S3 board. This snippet shows the minimal required configuration to set up a project for this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/dfrobot_firebeetle2_esp32s3.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:dfrobot_firebeetle2_esp32s3]\nplatform = espressif32\nboard = dfrobot_firebeetle2_esp32s3\n```\n\n----------------------------------------\n\nTITLE: Configuring TinyPICO Board in PlatformIO INI File\nDESCRIPTION: Basic configuration for the Unexpected Maker TinyPICO board in the PlatformIO project configuration file. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/tinypico.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:tinypico]\nplatform = espressif32\nboard = tinypico\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration in platformio.ini\nDESCRIPTION: Basic configuration setup for the FRDM-KW24D512 board in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/freescalekinetis/frdm_kw24d.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:frdm_kw24d]\nplatform = freescalekinetis\nboard = frdm_kw24d\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for ST Nucleo F072RB\nDESCRIPTION: Configuration to specify the upload protocol for ST Nucleo F072RB. The example shows how to set the upload protocol to stlink in platformio.ini.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f072rb.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f072rb]\nplatform = ststm32\nboard = nucleo_f072rb\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Element14 chipKIT Pi Board\nDESCRIPTION: Basic PlatformIO configuration for the Element14 chipKIT Pi board using the microchippic32 platform. This configuration should be added to the platformio.ini file for your project.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/microchippic32/chipkit_pi.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:chipkit_pi]\nplatform = microchippic32\nboard = chipkit_pi\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for ST 32F469IDISCOVERY\nDESCRIPTION: Configuration example for specifying the upload protocol in PlatformIO. Sets the upload protocol to ST-Link, which is the default for this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_f469ni.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_f469ni]\nplatform = ststm32\nboard = disco_f469ni\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for STM32F401RB\nDESCRIPTION: Configuration to set the upload protocol for the STM32F401RB board. The example uses the serial protocol, which is the default.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F401RB.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F401RB]\nplatform = ststm32\nboard = genericSTM32F401RB\n\nupload_protocol = serial\n```\n\n----------------------------------------\n\nTITLE: PlatformIO Project Name Configuration\nDESCRIPTION: Defines the name property for a PlatformIO project. This field accepts a string value and cannot have multiple values. If not specified, it defaults to the project folder name.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/platformio/options/generic/name.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nname\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for ST STM32F4DISCOVERY\nDESCRIPTION: Basic PlatformIO configuration for the ST STM32F4DISCOVERY board, including platform and board selection.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_f407vg.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_f407vg]\nplatform = ststm32\nboard = disco_f407vg\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Example showing how to configure the upload protocol for the Portenta C33 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/renesas-ra/portenta_c33.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:portenta_c33]\nplatform = renesas-ra\nboard = portenta_c33\n\nupload_protocol = dfu\n```\n\n----------------------------------------\n\nTITLE: Customizing ATtiny402 Board Settings in PlatformIO\nDESCRIPTION: Advanced PlatformIO configuration showing how to override default microcontroller and frequency settings for the ATtiny402 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/ATtiny402.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATtiny402]\nplatform = atmelmegaavr\nboard = ATtiny402\n\n; change microcontroller\nboard_build.mcu = attiny402\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU Settings\nDESCRIPTION: Extended configuration showing how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/adafruit_qualia_s3_rgb666.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_qualia_s3_rgb666]\nplatform = espressif32\nboard = adafruit_qualia_s3_rgb666\n\n; change microcontroller\nboard_build.mcu = esp32s3\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing NXP i.MX RT1064 Evaluation Kit Settings\nDESCRIPTION: Example of overriding default board settings in PlatformIO, such as changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nxpimxrt/mimxrt1064_evk.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:mimxrt1064_evk]\nplatform = nxpimxrt\nboard = mimxrt1064_evk\n\n; change microcontroller\nboard_build.mcu = mimxrt1064dvl6a\n\n; change MCU frequency\nboard_build.f_cpu = 600000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring ST Nucleo F412ZG Board in PlatformIO\nDESCRIPTION: Basic configuration for using the ST Nucleo F412ZG board in a PlatformIO project. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f412zg.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f412zg]\nplatform = ststm32\nboard = nucleo_f412zg\n```\n\n----------------------------------------\n\nTITLE: Customizing WEMOS LOLIN C3 Mini Board Settings\nDESCRIPTION: Advanced configuration for the WEMOS LOLIN C3 Mini board, overriding default settings such as microcontroller type and CPU frequency through board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/lolin_c3_mini.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:lolin_c3_mini]\nplatform = espressif32\nboard = lolin_c3_mini\n\n; change microcontroller\nboard_build.mcu = esp32c3\n\n; change MCU frequency\nboard_build.f_cpu = 160000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced STM32 F407VG Board Configuration\nDESCRIPTION: Extended PlatformIO configuration demonstrating how to override default microcontroller and frequency settings for the F407VG board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/diymore_f407vgt.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:diymore_f407vgt]\nplatform = ststm32\nboard = diymore_f407vgt\n\n; change microcontroller\nboard_build.mcu = stm32f407vgt6\n\n; change MCU frequency\nboard_build.f_cpu = 168000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring ATmega1609 Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the ATmega1609 board in the PlatformIO project configuration file. It sets the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/ATmega1609.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega1609]\nplatform = atmelmegaavr\nboard = ATmega1609\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration for ESP32-S3 Reverse TFT\nDESCRIPTION: PlatformIO configuration demonstrating how to specify the upload protocol for the board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/adafruit_feather_esp32s3_reversetft.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_feather_esp32s3_reversetft]\nplatform = espressif32\nboard = adafruit_feather_esp32s3_reversetft\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Basic ESP32 Dev Module Configuration in PlatformIO\nDESCRIPTION: Basic configuration for setting up an ESP32 Dev Module project in PlatformIO's project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32dev.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32dev]\nplatform = espressif32\nboard = esp32dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic STC8A8K64D4 Board in PlatformIO INI File\nDESCRIPTION: This code snippet shows how to configure the Generic STC8A8K64D4 board in the PlatformIO project configuration file. It sets the platform to intel_mcs51 and specifies the board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8A8K64D4.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8A8K64D4]\nplatform = intel_mcs51\nboard = STC8A8K64D4\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for ESP32-C6-DevKitC-1\nDESCRIPTION: Configuration that specifies the upload protocol for ESP32-C6-DevKitC-1 in a PlatformIO project. This example explicitly sets the upload method to esptool, which is also the default protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32-c6-devkitc-1.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32-c6-devkitc-1]\nplatform = espressif32\nboard = esp32-c6-devkitc-1\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration in PlatformIO\nDESCRIPTION: Basic PlatformIO configuration for STM8S-DISCOVERY board using the ststm8 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm8/stm8sdisco.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:stm8sdisco]\nplatform = ststm8\nboard = stm8sdisco\n```\n\n----------------------------------------\n\nTITLE: Final Merged PlatformIO Configuration\nDESCRIPTION: The resulting configuration after all files are merged, showing how values are inherited and overridden across multiple config files.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/platformio/options/generic/extra_configs.rst#2025-04-10_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[common]\ndebug_flags = -D DEBUG=1\nlib_flags = -lc -lm\n\n[env:esp-wrover-kit]\nplatform = platformio/espressif32\nframework = espidf\nboard = esp-wrover-kit\nbuild_flags = ${common.debug_flags}\n\n[env:esp32dev]\nplatform = platformio/espressif32\nframework = espidf\nboard = esp32dev\nbuild_flags = ${common.lib_flags} ${common.debug_flags}\n\n[env:lolin32]\nplatform = platformio/espressif32\nframework = espidf\nboard = lolin32\nbuild_flags = -Og\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Board Settings for nRF52832-MDK\nDESCRIPTION: Basic PlatformIO configuration for the nRF52832-MDK board using the nordicnrf52 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/nrf52832_mdk.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nrf52832_mdk]\nplatform = nordicnrf52\nboard = nrf52832_mdk\n```\n\n----------------------------------------\n\nTITLE: Custom MCU and Frequency Configuration\nDESCRIPTION: Example showing how to override default board settings including microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/espresso_lite_v2.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:espresso_lite_v2]\nplatform = espressif8266\nboard = espresso_lite_v2\n\n; change microcontroller\nboard_build.mcu = esp8266\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Basic 1Bitsy Board Configuration\nDESCRIPTION: Basic PlatformIO configuration for 1Bitsy board using STM32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/1bitsy_stm32f415rgt.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:1bitsy_stm32f415rgt]\nplatform = ststm32\nboard = 1bitsy_stm32f415rgt\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with Custom Settings\nDESCRIPTION: Extended PlatformIO configuration demonstrating how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/titiva/lptm4c1294ncpdt.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:lptm4c1294ncpdt]\nplatform = titiva\nboard = lptm4c1294ncpdt\n\n; change microcontroller\nboard_build.mcu = lptm4c1294ncpdt\n\n; change MCU frequency\nboard_build.f_cpu = 120000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic PlatformIO Environment for Microduino Core+\nDESCRIPTION: Basic PlatformIO configuration for the Microduino Core+ (ATmega1284P) board. This snippet demonstrates the minimal required configuration in the platformio.ini file to set up a project for this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/1284p16m.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:1284p16m]\nplatform = atmelavr\nboard = 1284p16m\n```\n\n----------------------------------------\n\nTITLE: Basic ESP32-S3 Board Configuration\nDESCRIPTION: Configuration snippet for setting up a basic PlatformIO environment for the DFRobot Romeo ESP32-S3 board using the espressif32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/dfrobot_romeo_esp32s3.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:dfrobot_romeo_esp32s3]\nplatform = espressif32\nboard = dfrobot_romeo_esp32s3\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration in PlatformIO\nDESCRIPTION: Basic configuration example for setting up an ST Nucleo L432KC board project using the ststm32 platform\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_l432kc.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_l432kc]\nplatform = ststm32\nboard = nucleo_l432kc\n```\n\n----------------------------------------\n\nTITLE: Configuring Cytron Maker Feather AIoT S3 in PlatformIO\nDESCRIPTION: Basic configuration for the Cytron Maker Feather AIoT S3 board in a PlatformIO project's platformio.ini file. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/cytron_maker_feather_aiot_s3.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:cytron_maker_feather_aiot_s3]\nplatform = espressif32\nboard = cytron_maker_feather_aiot_s3\n```\n\n----------------------------------------\n\nTITLE: Customizing STC8H1K33 Board Settings in PlatformIO\nDESCRIPTION: Advanced configuration for customizing the STC8H1K33 board settings in a PlatformIO project. This example shows how to override default settings like the microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8H1K33.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8H1K33]\nplatform = intel_mcs51\nboard = STC8H1K33\n\n; change microcontroller\nboard_build.mcu = stc8h1k33\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Advanced AVR64DA48 Board Configuration with MCU Settings\nDESCRIPTION: Extended configuration for AVR64DA48 showing how to override default microcontroller and frequency settings using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/AVR64DA48.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:AVR64DA48]\nplatform = atmelmegaavr\nboard = AVR64DA48\n\n; change microcontroller\nboard_build.mcu = avr64da48\n\n; change MCU frequency\nboard_build.f_cpu = 24000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing STC8A4K60S2A12 Board Configuration in PlatformIO\nDESCRIPTION: Advanced configuration for the Generic STC8A4K60S2A12 board with custom microcontroller and frequency settings. This example demonstrates how to override default board settings using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8A4K60S2A12.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8A4K60S2A12]\nplatform = intel_mcs51\nboard = STC8A4K60S2A12\n\n; change microcontroller\nboard_build.mcu = stc8a4k60s2a12\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Circuit Playground Classic Settings\nDESCRIPTION: Extended PlatformIO configuration showing how to override default board settings like microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/circuitplay_classic.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:circuitplay_classic]\nplatform = atmelavr\nboard = circuitplay_classic\n\n; change microcontroller\nboard_build.mcu = atmega32u4\n\n; change MCU frequency\nboard_build.f_cpu = 8000000L\n```\n\n----------------------------------------\n\nTITLE: DigiStump Oak Upload Protocol Configuration\nDESCRIPTION: PlatformIO configuration showing how to specify the upload protocol for the DigiStump Oak board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/oak.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:oak]\nplatform = espressif8266\nboard = oak\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Olimex STM32-P405\nDESCRIPTION: Configuration example for specifying the upload protocol in PlatformIO. Sets the upload protocol to ST-Link for the Olimex STM32-P405 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/olimex_p405.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:olimex_p405]\nplatform = ststm32\nboard = olimex_p405\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Customizing ATmega48PB Board Settings in platformio.ini\nDESCRIPTION: Advanced configuration for the ATmega48PB board that demonstrates how to override default settings like microcontroller model and CPU frequency in a PlatformIO project.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega48PB.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega48PB]\nplatform = atmelavr\nboard = ATmega48PB\n\n; change microcontroller\nboard_build.mcu = atmega48pb\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring SODAQ Tatu Board in PlatformIO\nDESCRIPTION: Basic PlatformIO configuration for the SODAQ Tatu board. This snippet shows how to specify the board in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/sodaq_tatu.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:sodaq_tatu]\nplatform = atmelavr\nboard = sodaq_tatu\n```\n\n----------------------------------------\n\nTITLE: Configuring Seeeduino Femto M0 in platformio.ini\nDESCRIPTION: Basic configuration for the Seeeduino Femto M0 board in the platformio.ini file. This snippet sets the platform and board options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/seeed_femto.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:seeed_femto]\nplatform = atmelsam\nboard = seeed_femto\n```\n\n----------------------------------------\n\nTITLE: Customizing TI FraunchPad MSP-EXP430FR5739LP Board Settings\nDESCRIPTION: This snippet demonstrates how to override default board settings in the PlatformIO configuration. It shows examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/timsp430/lpmsp430fr5739.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:lpmsp430fr5739]\nplatform = timsp430\nboard = lpmsp430fr5739\n\n; change microcontroller\nboard_build.mcu = msp430fr5739\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Protocol for STM32 Nucleo G474RE\nDESCRIPTION: Sets the upload protocol for the Nucleo G474RE board. The board supports multiple protocols including blackmagic, cmsis-dap, jlink, mbed, and stlink, with stlink being the default.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_g474re.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_g474re]\nplatform = ststm32\nboard = nucleo_g474re\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Board Configuration for Pro Trinket\nDESCRIPTION: Basic configuration example showing how to set up a PlatformIO project environment for the Adafruit Pro Trinket 3V/12MHz board using the atmelavr platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/protrinket3.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:protrinket3]\nplatform = atmelavr\nboard = protrinket3\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for STM32F103R4\nDESCRIPTION: Configuration to specify the upload protocol for the STM32F103R4 board in PlatformIO.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103R4.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103R4]\nplatform = ststm32\nboard = genericSTM32F103R4\n\nupload_protocol = serial\n```\n\n----------------------------------------\n\nTITLE: Sonoff S20 Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the Sonoff S20 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/sonoff_s20.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:sonoff_s20]\nplatform = espressif8266\nboard = sonoff_s20\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Customizing RedBearLab BLE Nano 2 Board Settings\nDESCRIPTION: Example of overriding default board settings in PlatformIO, such as changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/redbear_blenano2.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:redbear_blenano2]\nplatform = nordicnrf52\nboard = redbear_blenano2\n\n; change microcontroller\nboard_build.mcu = nrf52832\n\n; change MCU frequency\nboard_build.f_cpu = 64000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced PlatformIO Settings for CubeCell Board Plus\nDESCRIPTION: Extended PlatformIO configuration showing how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/heltec-cubecell/cubecell_board_plus.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:cubecell_board_plus]\nplatform = heltec-cubecell\nboard = cubecell_board_plus\n\n; change microcontroller\nboard_build.mcu = asr6502\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Arduino Due\nDESCRIPTION: Configuration that specifies the upload protocol for Arduino Due in PlatformIO. This example sets the upload protocol to SAM-BA, which is the default method for programming the Arduino Due.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/due.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:due]\nplatform = atmelsam\nboard = due\n\nupload_protocol = sam-ba\n```\n\n----------------------------------------\n\nTITLE: Customizing Franzininho WiFi ESP32S2 Board Settings in PlatformIO\nDESCRIPTION: Advanced configuration example showing how to override default board settings such as microcontroller model and CPU frequency using board_build options in the PlatformIO project configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/franzininho_wifi_esp32s2.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:franzininho_wifi_esp32s2]\nplatform = espressif32\nboard = franzininho_wifi_esp32s2\n\n; change microcontroller\nboard_build.mcu = esp32s2\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Adafruit Feather ESP32-S3 Board Parameters\nDESCRIPTION: Extended configuration that demonstrates how to override default board settings like microcontroller type and CPU frequency. This allows for customization of the board parameters for specific project requirements.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/adafruit_feather_esp32s3_nopsram.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_feather_esp32s3_nopsram]\nplatform = espressif32\nboard = adafruit_feather_esp32s3_nopsram\n\n; change microcontroller\nboard_build.mcu = esp32s3\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Fuses for ATmega AVR in PlatformIO\nDESCRIPTION: This configuration demonstrates how to set custom fuse values for an ATmega AVR microcontroller in PlatformIO. It specifies the upload protocol, speed, and custom fuse values for lfuse, hfuse, and efuse.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/atmelavr_extra.rst#2025-04-10_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\n[env:custom_fuses]\nplatform = atmelavr\nframework = arduino\nboard = uno\nupload_protocol = stk500v1\nupload_speed = 19200\nboard_fuses.lfuse = 0xAA\nboard_fuses.hfuse = 0xBB\nboard_fuses.efuse = 0xCC\nupload_flags =\n    -PCOM15\n    -b$UPLOAD_SPEED\n    -e\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Protocol for ST Nucleo L011K4\nDESCRIPTION: Configuration for specifying the upload protocol (stlink) for the ST Nucleo L011K4 board in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_l011k4.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_l011k4]\nplatform = ststm32\nboard = nucleo_l011k4\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: PlatformIO configuration specifying the upload protocol for the Electrosmith Daisy Petal SM board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/electrosmith_daisy_petal_sm.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:electrosmith_daisy_petal_sm]\nplatform = ststm32\nboard = electrosmith_daisy_petal_sm\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Overriding u-blox ODIN-W2 Default Settings in PlatformIO\nDESCRIPTION: Example of how to override default board settings such as microcontroller type and CPU frequency in the PlatformIO configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/mtb_ublox_odin_w2.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:mtb_ublox_odin_w2]\nplatform = ststm32\nboard = mtb_ublox_odin_w2\n\n; change microcontroller\nboard_build.mcu = stm32f439ziy6\n\n; change MCU frequency\nboard_build.f_cpu = 168000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic STC8F2K60S4 Board Environment in PlatformIO\nDESCRIPTION: Sets up a basic PlatformIO environment for the STC8F2K60S4 board using the intel_mcs51 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8F2K60S4.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8F2K60S4]\nplatform = intel_mcs51\nboard = STC8F2K60S4\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the ESP32-PoE-ISO board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32-poe-iso.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32-poe-iso]\nplatform = espressif32\nboard = esp32-poe-iso\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Basic STM32F415RG Board Configuration\nDESCRIPTION: Basic PlatformIO configuration for the STM32F415RG board using the ststm32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F415RG.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F415RG]\nplatform = ststm32\nboard = genericSTM32F415RG\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for WeMos D1 R2 and mini\nDESCRIPTION: A minimal configuration for the WeMos D1 R2 and mini board in the platformio.ini file. This sets up the board with the ESP8266 platform using the default settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/d1_mini.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:d1_mini]\nplatform = espressif8266\nboard = d1_mini\n```\n\n----------------------------------------\n\nTITLE: Customizing Arduino Fio Board Settings in PlatformIO\nDESCRIPTION: Advanced configuration showing how to override default settings for the Arduino Fio board in a PlatformIO project. This example demonstrates changing the microcontroller type and MCU frequency values.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/fio.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:fio]\nplatform = atmelavr\nboard = fio\n\n; change microcontroller\nboard_build.mcu = atmega328p\n\n; change MCU frequency\nboard_build.f_cpu = 8000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Smart Bee S3 Board Settings in PlatformIO\nDESCRIPTION: Example showing how to override default board settings like microcontroller type and CPU frequency in the PlatformIO configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/bee_s3.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:bee_s3]\nplatform = espressif32\nboard = bee_s3\n\n; change microcontroller\nboard_build.mcu = esp32s3\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing STM8S003F3 MCU Settings\nDESCRIPTION: Advanced configuration showing how to override default microcontroller settings like MCU model and frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm8/stm8s003f3.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:stm8s003f3]\nplatform = ststm8\nboard = stm8s003f3\n\n; change microcontroller\nboard_build.mcu = stm8s003f3p6\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Seeeduino Board Settings in PlatformIO INI File\nDESCRIPTION: This snippet demonstrates how to override default Seeeduino settings in the PlatformIO configuration. It shows examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/seeeduino.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:seeeduino]\nplatform = atmelavr\nboard = seeeduino\n\n; change microcontroller\nboard_build.mcu = atmega328p\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Specifying Upload Protocol for ESPresso Lite 1.0 in PlatformIO INI File\nDESCRIPTION: This snippet shows how to set the upload protocol for the ESPresso Lite 1.0 board in the PlatformIO configuration. It uses the 'esptool' protocol as an example.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/espresso_lite_v1.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:espresso_lite_v1]\nplatform = espressif8266\nboard = espresso_lite_v1\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Customizing MS51FB9AE Board Settings in PlatformIO\nDESCRIPTION: Extended configuration example showing how to override default board settings such as microcontroller type and CPU frequency in a PlatformIO project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/MS51FB9AE.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:MS51FB9AE]\nplatform = intel_mcs51\nboard = MS51FB9AE\n\n; change microcontroller\nboard_build.mcu = ms51fb9ae\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration in PlatformIO\nDESCRIPTION: Basic configuration for using the ST Nucleo L412RB-P board in a PlatformIO project environment.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_l412rb_p.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_l412rb_p]\nplatform = ststm32\nboard = nucleo_l412rb_p\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration with MCU Overrides\nDESCRIPTION: Extended configuration for Minitronics v2.0 that demonstrates how to override default board settings such as microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/minitronics20.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:minitronics20]\nplatform = atmelsam\nboard = minitronics20\n\n; change microcontroller\nboard_build.mcu = samd21j18a\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic ATtiny85 Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the Generic ATtiny85 board in the PlatformIO project configuration file. It sets the platform to atmelavr and the board to attiny85.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/attiny85.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:attiny85]\nplatform = atmelavr\nboard = attiny85\n```\n\n----------------------------------------\n\nTITLE: Configuring Linux x86_64 Platform with Stable Versions in PlatformIO\nDESCRIPTION: Configuration examples for using the stable versions of the Linux x86_64 development platform in PlatformIO. Shows how to use the latest stable version or pin to a specific version in your project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/linux_x86_64.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n; Latest stable version, NOT recommended\n; Pin the version as shown below\n[env:latest_stable]\nplatform = linux_x86_64\n\n; Specific version\n[env:custom_stable]\nplatform = linux_x86_64@x.y.z\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic AT90PWM316 Environment in PlatformIO\nDESCRIPTION: Basic configuration for an AT90PWM316 board in the PlatformIO project configuration file. This defines the platform as atmelavr and the board as at90pwm316.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/at90pwm316.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:at90pwm316]\nplatform = atmelavr\nboard = at90pwm316\n```\n\n----------------------------------------\n\nTITLE: Configuring M5Stack Core ESP32 in platformio.ini\nDESCRIPTION: Basic configuration for using the M5Stack Core ESP32 board with the Espressif32 platform in a PlatformIO project.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/m5stack-core-esp32.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:m5stack-core-esp32]\nplatform = espressif32\nboard = m5stack-core-esp32\n```\n\n----------------------------------------\n\nTITLE: Configuring Upstream Atmel SAM Platform Version in PlatformIO\nDESCRIPTION: Demonstrates how to use the latest upstream development version of the Atmel SAM platform by specifying the GitHub repository URL in the PlatformIO project configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/atmelsam.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:upstream_develop]\nplatform = https://github.com/platformio/platform-atmelsam.git\nboard = ...\n```\n\n----------------------------------------\n\nTITLE: Customizing STM32H747I-DISCO Board Configuration\nDESCRIPTION: Example of how to override default board settings in platformio.ini including microcontroller model and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_h747xi.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_h747xi]\nplatform = ststm32\nboard = disco_h747xi\n\n; change microcontroller\nboard_build.mcu = stm32h747xih6\n\n; change MCU frequency\nboard_build.f_cpu = 400000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing STM32 Microcontroller Settings in PlatformIO\nDESCRIPTION: Advanced PlatformIO configuration that overrides default board settings like microcontroller model and CPU frequency. This demonstrates how to customize the hardware configuration for the ST Nucleo H753ZI board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_h753zi.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_h753zi]\nplatform = ststm32\nboard = nucleo_h753zi\n\n; change microcontroller\nboard_build.mcu = stm32h753zit6\n\n; change MCU frequency\nboard_build.f_cpu = 400000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Hardware Settings for u-blox EVK-ODIN-W2\nDESCRIPTION: Example demonstrating how to override default board settings like microcontroller type and CPU frequency. These settings modify the board's configuration defined in the board manifest JSON file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/ublox_evk_odin_w2.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ublox_evk_odin_w2]\nplatform = ststm32\nboard = ublox_evk_odin_w2\n\n; change microcontroller\nboard_build.mcu = stm32f439ziy6\n\n; change MCU frequency\nboard_build.f_cpu = 168000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Protocol for WEMOS LOLIN S2 PICO\nDESCRIPTION: Configuration that specifies the upload protocol for the WEMOS LOLIN S2 PICO board. This example uses the default 'esptool' protocol but demonstrates how to set a specific upload method.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/lolin_s2_pico.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:lolin_s2_pico]\nplatform = espressif32\nboard = lolin_s2_pico\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Board Settings in PlatformIO\nDESCRIPTION: Basic configuration for setting up the TI LaunchPad MSP-EXP430G2 board in PlatformIO's project configuration file. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/timsp430/lpmsp430g2452.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:lpmsp430g2452]\nplatform = timsp430\nboard = lpmsp430g2452\n```\n\n----------------------------------------\n\nTITLE: Customizing STC8F2K60S2 Board Settings in platformio.ini\nDESCRIPTION: Extended configuration example showing how to override default board settings such as microcontroller type and CPU frequency for the STC8F2K60S2 board in PlatformIO.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8F2K60S2.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8F2K60S2]\nplatform = intel_mcs51\nboard = STC8F2K60S2\n\n; change microcontroller\nboard_build.mcu = stc8f2k60s2\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic PlatformIO Environment for Pinaka Board\nDESCRIPTION: Basic configuration for setting up a PlatformIO project environment for the Pinaka board. This snippet specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/shakti/pinaka.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:pinaka]\nplatform = shakti\nboard = pinaka\n```\n\n----------------------------------------\n\nTITLE: Customizing Nordic nRF52-DK Board Settings in PlatformIO\nDESCRIPTION: Advanced PlatformIO configuration for the Nordic nRF52-DK board with customized microcontroller and CPU frequency settings. The configuration overrides default settings defined in the board manifest file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/nrf52_dk.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nrf52_dk]\nplatform = nordicnrf52\nboard = nrf52_dk\n\n; change microcontroller\nboard_build.mcu = nrf52832\n\n; change MCU frequency\nboard_build.f_cpu = 64000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for STM32H747I-DISCO Board\nDESCRIPTION: Basic PlatformIO configuration for STM32H747I-DISCO board in platformio.ini file. This configuration sets up the board with its default settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_h747xi.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_h747xi]\nplatform = ststm32\nboard = disco_h747xi\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Phoenix 1.0 in PlatformIO INI File\nDESCRIPTION: This snippet shows how to set the upload protocol for the Phoenix 1.0 board in the PlatformIO configuration. It sets the upload protocol to esptool.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/phoenix_v1.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:phoenix_v1]\nplatform = espressif8266\nboard = phoenix_v1\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Board Settings in PlatformIO\nDESCRIPTION: Advanced PlatformIO configuration showing how to override default board settings like microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/timsp430/lpmsp430f5529.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:lpmsp430f5529]\nplatform = timsp430\nboard = lpmsp430f5529\n\n; change microcontroller\nboard_build.mcu = msp430f5529\n\n; change MCU frequency\nboard_build.f_cpu = 25000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Adafruit MONSTER M4SK Board Settings\nDESCRIPTION: Example of overriding default board settings in platformio.ini, such as changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_monster_m4sk.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_monster_m4sk]\nplatform = atmelsam\nboard = adafruit_monster_m4sk\n\n; change microcontroller\nboard_build.mcu = samd51g19a\n\n; change MCU frequency\nboard_build.f_cpu = 120000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Altair Board Settings in PlatformIO INI File\nDESCRIPTION: This example demonstrates how to override default Altair board settings in a PlatformIO configuration. It shows how to change the microcontroller and MCU frequency using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/altair.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:altair]\nplatform = atmelavr\nboard = altair\n\n; change microcontroller\nboard_build.mcu = atmega256rfr2\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Enabling Custom Configuration Header in STM32Cube PlatformIO Project\nDESCRIPTION: This snippet demonstrates how to enable a custom configuration header for an STM32Cube project in PlatformIO. It sets the 'custom_config_header' option to 'yes' for a Nucleo F401RE board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/frameworks/stm32cube_extra.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f401re]\nplatform = ststm32\nframework = stm32cube\nboard = nucleo_f401re\nboard_build.stm32cube.custom_config_header = yes\n```\n\n----------------------------------------\n\nTITLE: Custom Unity Test Runner Implementation\nDESCRIPTION: Python implementation of a custom test runner that extends UnityTestRunner to ignore the default Unity package.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/advanced/unit-testing/frameworks/custom/examples/custom_unity_library.rst#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom platformio.public import UnityTestRunner\n\nclass CustomTestRunner(UnityTestRunner):\n\n    # Ignore \"throwtheswitch/Unity\" package\n    EXTRA_LIB_DEPS = None\n\n    # Do not add default Unity to the build process\n    def configure_build_env(self, env):\n        pass\n```\n\n----------------------------------------\n\nTITLE: Configuring STM3210C-EVAL Board in PlatformIO\nDESCRIPTION: Basic PlatformIO configuration for the STM3210C-EVAL board using the STM32 platform. This snippet defines the board ID in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/eval_f107vc.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:eval_f107vc]\nplatform = ststm32\nboard = eval_f107vc\n```\n\n----------------------------------------\n\nTITLE: Overriding Default ATtiny87 Settings in PlatformIO INI File\nDESCRIPTION: This code demonstrates how to override default settings for the Generic ATtiny87 board in the PlatformIO configuration. It shows examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/attiny87.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:attiny87]\nplatform = atmelavr\nboard = attiny87\n\n; change microcontroller\nboard_build.mcu = attiny87\n\n; change MCU frequency\nboard_build.f_cpu = 8000000L\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration for STM32G071B Discovery\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the board\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_g071rb.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_g071rb]\nplatform = ststm32\nboard = disco_g071rb\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration for STC8H4K60TLCD\nDESCRIPTION: Basic PlatformIO configuration for setting up the STC8H4K60TLCD board with the intel_mcs51 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8H4K60TLCD.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8H4K60TLCD]\nplatform = intel_mcs51\nboard = STC8H4K60TLCD\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced PlatformIO Environment with Custom Settings\nDESCRIPTION: Extended PlatformIO configuration for the Adafruit Metro board with custom microcontroller and frequency settings. This demonstrates how to override default board settings in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/metro.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:metro]\nplatform = atmelavr\nboard = metro\n\n; change microcontroller\nboard_build.mcu = atmega328p\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Controllino Maxi Board Settings in PlatformIO\nDESCRIPTION: Extended configuration for the Controllino Maxi board that demonstrates how to override default settings like microcontroller type and MCU frequency in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/controllino_maxi.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:controllino_maxi]\nplatform = atmelavr\nboard = controllino_maxi\n\n; change microcontroller\nboard_build.mcu = atmega2560\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: STM32F407IG Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F407IGT6.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F407IGT6]\nplatform = ststm32\nboard = genericSTM32F407IGT6\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU and Frequency Settings\nDESCRIPTION: Example showing how to override default board settings including microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_h745zi_q.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_h745zi_q]\nplatform = ststm32\nboard = nucleo_h745zi_q\n\n; change microcontroller\nboard_build.mcu = stm32h745zit6\n\n; change MCU frequency\nboard_build.f_cpu = 480000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing SparkFun Digital Sandbox Board Settings in PlatformIO\nDESCRIPTION: This snippet demonstrates how to override default board settings in the PlatformIO configuration. It shows examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/sparkfun_digitalsandbox.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:sparkfun_digitalsandbox]\nplatform = atmelavr\nboard = sparkfun_digitalsandbox\n\n; change microcontroller\nboard_build.mcu = atmega328p\n\n; change MCU frequency\nboard_build.f_cpu = 8000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic STC15F103 Environment in platformio.ini\nDESCRIPTION: Basic configuration for setting up a PlatformIO environment for the STC15F103 board on the intel_mcs51 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15F103.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15F103]\nplatform = intel_mcs51\nboard = STC15F103\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration - PlatformIO INI\nDESCRIPTION: Advanced configuration showing how to override default board settings like MCU and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/lilygo-t-display-s3.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:lilygo-t-display-s3]\nplatform = espressif32\nboard = lilygo-t-display-s3\n\n; change microcontroller\nboard_build.mcu = esp32s3\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring OLIMEX ESP32-DevKit-LiPo Board in PlatformIO\nDESCRIPTION: Basic configuration for the OLIMEX ESP32-DevKit-LiPo board in the PlatformIO project configuration file. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32-devkitlipo.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32-devkitlipo]\nplatform = espressif32\nboard = esp32-devkitlipo\n```\n\n----------------------------------------\n\nTITLE: Customizing ST STM32G0316-DISCO Board Settings\nDESCRIPTION: Example of overriding default board settings such as microcontroller model and CPU frequency using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_g031j6.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_g031j6]\nplatform = ststm32\nboard = disco_g031j6\n\n; change microcontroller\nboard_build.mcu = stm32g031j6\n\n; change MCU frequency\nboard_build.f_cpu = 64000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring SeeedStudio CUI32stem Board in PlatformIO\nDESCRIPTION: Basic PlatformIO configuration for the SeeedStudio CUI32stem board in the project's platformio.ini file. This sets up the microchippic32 platform with the cui32stem board target.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/microchippic32/cui32stem.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:cui32stem]\nplatform = microchippic32\nboard = cui32stem\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Metro nRF52840 Express in PlatformIO\nDESCRIPTION: Configuration for specifying the upload protocol for the Metro nRF52840 Express board. This example shows how to explicitly set the nrfutil protocol in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/adafruit_metro_nrf52840.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_metro_nrf52840]\nplatform = nordicnrf52\nboard = adafruit_metro_nrf52840\n\nupload_protocol = nrfutil\n```\n\n----------------------------------------\n\nTITLE: Configuring STM32F446RC Board in platformio.ini\nDESCRIPTION: Basic configuration for the STM32F446RC board in the project's platformio.ini file. This snippet sets the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F446RC.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F446RC]\nplatform = ststm32\nboard = genericSTM32F446RC\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for WiFiduino in PlatformIO INI File\nDESCRIPTION: This snippet shows how to set the upload protocol for the WiFiduino board in the PlatformIO configuration. It sets the protocol to esptool, which is the default option.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/wifiduino.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:wifiduino]\nplatform = espressif8266\nboard = wifiduino\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Customizing ESP8266 ESP-12E Board Parameters in PlatformIO\nDESCRIPTION: Advanced configuration for the Espressif ESP8266 ESP-12E board that demonstrates how to override default settings such as microcontroller type and CPU frequency. These settings allow fine-tuning the board configuration for specific project requirements.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/esp12e.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp12e]\nplatform = espressif8266\nboard = esp12e\n\n; change microcontroller\nboard_build.mcu = esp8266\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing STM32F423CH Hardware Parameters in PlatformIO\nDESCRIPTION: Example showing how to override default board settings such as microcontroller model and CPU frequency in the platformio.ini configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F423CH.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F423CH]\nplatform = ststm32\nboard = genericSTM32F423CH\n\n; change microcontroller\nboard_build.mcu = stm32f423chu6\n\n; change MCU frequency\nboard_build.f_cpu = 100000000L\n```\n\n----------------------------------------\n\nTITLE: Basic Teensy 3.6 Configuration in platformio.ini\nDESCRIPTION: Basic configuration for a Teensy 3.6 board in PlatformIO's project configuration file. This sets up the environment with the teensy platform and teensy36 board identifier.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/teensy/teensy36.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:teensy36]\nplatform = teensy\nboard = teensy36\n```\n\n----------------------------------------\n\nTITLE: Configuring Department of Alchemy MiniMain ESP32-S2 Board in PlatformIO\nDESCRIPTION: This snippet shows how to configure the Department of Alchemy MiniMain ESP32-S2 board in a PlatformIO project's configuration file. It sets the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/minimain_esp32s2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:minimain_esp32s2]\nplatform = espressif32\nboard = minimain_esp32s2\n```\n\n----------------------------------------\n\nTITLE: Basic Configuration for ATtiny1624 in PlatformIO\nDESCRIPTION: Basic project configuration for the ATtiny1624 board in platformio.ini file. This configures the environment to use the atmelmegaavr platform with the ATtiny1624 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/ATtiny1624.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATtiny1624]\nplatform = atmelmegaavr\nboard = ATtiny1624\n```\n\n----------------------------------------\n\nTITLE: STM32 Board Reference Table\nDESCRIPTION: ReStructuredText table listing STM32 development board specifications including board names, CPU models, clock speeds, flash memory and RAM sizes.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/stlink.rst#2025-04-10_snippet_2\n\nLANGUAGE: restructuredtext\nCODE:\n```\n* - :ref:`board_ststm32_disco_f401vc`\n      - :ref:`platform_ststm32`\n      - On-board\n      - STM32F401VCT6\n      - 84MHz\n      - 256KB\n      - 64KB\n```\n\n----------------------------------------\n\nTITLE: Advanced DigiStump Oak Board Configuration\nDESCRIPTION: Extended PlatformIO configuration demonstrating how to override default board settings like microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/oak.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:oak]\nplatform = espressif8266\nboard = oak\n\n; change microcontroller\nboard_build.mcu = esp8266\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: ESP32 Upload Protocol Configuration\nDESCRIPTION: Configuration specifying the upload protocol for the Nebula S3 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/nebulas3.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:nebulas3]\nplatform = espressif32\nboard = nebulas3\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Customizing RYMCU ESP32-DevKitC Board Settings in PlatformIO\nDESCRIPTION: Extended configuration for the RYMCU ESP32-DevKitC board that overrides default settings such as microcontroller type and CPU frequency using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/rymcu-esp32-devkitc.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:rymcu-esp32-devkitc]\nplatform = espressif32\nboard = rymcu-esp32-devkitc\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for ST STM32G0316-DISCO\nDESCRIPTION: Configuration to specify the upload protocol for the ST STM32G0316-DISCO board. In this example, it's set to the default 'mbed' protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_g031j6.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_g031j6]\nplatform = ststm32\nboard = disco_g031j6\n\nupload_protocol = mbed\n```\n\n----------------------------------------\n\nTITLE: Customizing Generic STC12C5A08S2 Board Settings in PlatformIO\nDESCRIPTION: This snippet demonstrates how to override default settings for the Generic STC12C5A08S2 board in a PlatformIO project. It shows how to change the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC12C5A08S2.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC12C5A08S2]\nplatform = intel_mcs51\nboard = STC12C5A08S2\n\n; change microcontroller\nboard_build.mcu = stc12c5a08s2\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Configuring uPesy ESP32 Wrover DevKit in platformio.ini\nDESCRIPTION: Basic configuration for the uPesy ESP32 Wrover DevKit board in the PlatformIO project configuration file. Specifies the board and platform to use.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/upesy_wrover.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:upesy_wrover]\nplatform = espressif32\nboard = upesy_wrover\n```\n\n----------------------------------------\n\nTITLE: Configuring Blinker WiFiduino32 Board in platformio.ini\nDESCRIPTION: This snippet shows how to configure the Blinker WiFiduino32 board in the PlatformIO project configuration file. It sets the platform to espressif32 and the board to wifiduino32.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/wifiduino32.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:wifiduino32]\nplatform = espressif32\nboard = wifiduino32\n```\n\n----------------------------------------\n\nTITLE: Configuring STM32G431CB Board in PlatformIO\nDESCRIPTION: This snippet shows how to configure the STM32G431CB board in the PlatformIO project configuration file. It includes the basic setup and examples of how to override default settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32G431CB.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32G431CB]\nplatform = ststm32\nboard = genericSTM32G431CB\n\n; change microcontroller\nboard_build.mcu = stm32g431cbu6\n\n; change MCU frequency\nboard_build.f_cpu = 170000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Raspberry Pi 1 Model B in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the Raspberry Pi 1 Model B board in the PlatformIO project configuration file (platformio.ini). It sets the platform to linux_arm and specifies the board as raspberrypi_1b.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/linux_arm/raspberrypi_1b.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:raspberrypi_1b]\nplatform = linux_arm\nboard = raspberrypi_1b\n```\n\n----------------------------------------\n\nTITLE: Customizing Teensy 4.0 MCU and Frequency Settings\nDESCRIPTION: Example of overriding default Teensy 4.0 microcontroller and CPU frequency settings in platformio.ini.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/teensy/teensy40.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:teensy40]\nplatform = teensy\nboard = teensy40\n\n; change microcontroller\nboard_build.mcu = imxrt1062\n\n; change MCU frequency\nboard_build.f_cpu = 600000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing STC12C5A60S2 Board Settings in PlatformIO INI File\nDESCRIPTION: This code snippet demonstrates how to override default settings for the Generic STC12C5A60S2 board in the PlatformIO project configuration file. It includes examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC12C5A60S2.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC12C5A60S2]\nplatform = intel_mcs51\nboard = STC12C5A60S2\n\n; change microcontroller\nboard_build.mcu = stc12c5a60s2\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for Maple RET6\nDESCRIPTION: Basic configuration for Maple (RET6) board in platformio.ini file using the STM32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/maple_ret6.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:maple_ret6]\nplatform = ststm32\nboard = maple_ret6\n```\n\n----------------------------------------\n\nTITLE: Customizing AT89S51 Hardware Settings in platformio.ini\nDESCRIPTION: Advanced configuration that overrides default board settings for the AT89S51 microcontroller. This example shows how to specify a custom MCU and adjust the CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/AT89S51.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:AT89S51]\nplatform = intel_mcs51\nboard = AT89S51\n\n; change microcontroller\nboard_build.mcu = at89s51\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Sonoff Basic in PlatformIO\nDESCRIPTION: Configuration example for specifying the upload protocol for Sonoff Basic board. This shows how to explicitly set the upload protocol to esptool in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/sonoff_basic.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:sonoff_basic]\nplatform = espressif8266\nboard = sonoff_basic\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for STM32F103VD in PlatformIO\nDESCRIPTION: This configuration demonstrates how to specify the upload protocol for the STM32F103VD board. The example uses the 'stlink' protocol, which is the default for this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103VD.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103VD]\nplatform = ststm32\nboard = genericSTM32F103VD\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU Settings\nDESCRIPTION: Extended configuration showing how to override default board settings like microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_circuitplayground_m0.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_circuitplayground_m0]\nplatform = atmelsam\nboard = adafruit_circuitplayground_m0\n\n; change microcontroller\nboard_build.mcu = samd21g18a\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing AVR64DA32 Board Settings in PlatformIO\nDESCRIPTION: Extended configuration for the AVR64DA32 board that demonstrates how to override default settings like microcontroller type and CPU frequency in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/AVR64DA32.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:AVR64DA32]\nplatform = atmelmegaavr\nboard = AVR64DA32\n\n; change microcontroller\nboard_build.mcu = avr64da32\n\n; change MCU frequency\nboard_build.f_cpu = 24000000L\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for TAMC Termod S3.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/tamc_termod_s3.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:tamc_termod_s3]\nplatform = espressif32\nboard = tamc_termod_s3\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring LinkIt Smart 7688 Duo in PlatformIO\nDESCRIPTION: Basic configuration for the LinkIt Smart 7688 Duo board in platformio.ini file. This sets up the environment with the correct platform and board identifier.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/smart7688.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:smart7688]\nplatform = atmelavr\nboard = smart7688\n```\n\n----------------------------------------\n\nTITLE: Configuring ST Nucleo L010RB Board in PlatformIO\nDESCRIPTION: Basic PlatformIO configuration for the ST Nucleo L010RB board using the STM32 platform. This snippet sets up the board ID and platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_l010rb.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_l010rb]\nplatform = ststm32\nboard = nucleo_l010rb\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic STM32F103C4 Board Settings\nDESCRIPTION: Basic configuration snippet for setting up an STM32F103C4 board environment in platformio.ini\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103C4.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103C4]\nplatform = ststm32\nboard = genericSTM32F103C4\n```\n\n----------------------------------------\n\nTITLE: Customizing AT90CAN32 Board Settings in PlatformIO\nDESCRIPTION: Demonstrates how to override default AT90CAN32 settings in PlatformIO configuration. This example shows how to explicitly set the microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/AT90CAN32.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:AT90CAN32]\nplatform = atmelavr\nboard = AT90CAN32\n\n; change microcontroller\nboard_build.mcu = at90can32\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing ATtiny1607 Board Settings in PlatformIO\nDESCRIPTION: Advanced configuration example showing how to override default settings for the ATtiny1607 board, including changing the microcontroller model and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/ATtiny1607.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATtiny1607]\nplatform = atmelmegaavr\nboard = ATtiny1607\n\n; change microcontroller\nboard_build.mcu = attiny1607\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Generic STC8H04A10 Board Settings in PlatformIO\nDESCRIPTION: This snippet demonstrates how to override default settings for the Generic STC8H04A10 board in the PlatformIO project configuration. It shows how to change the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8H04A10.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8H04A10]\nplatform = intel_mcs51\nboard = STC8H04A10\n\n; change microcontroller\nboard_build.mcu = stc8h04a10\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic STC15W4K56S4 Board Settings in PlatformIO\nDESCRIPTION: Basic configuration example for setting up the STC15W4K56S4 board in the PlatformIO project configuration file. Specifies the platform and board type.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15W4K56S4.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15W4K56S4]\nplatform = intel_mcs51\nboard = STC15W4K56S4\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU Options\nDESCRIPTION: PlatformIO configuration for ST Nucleo F413ZH with custom microcontroller and frequency settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f413zh.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f413zh]\nplatform = ststm32\nboard = nucleo_f413zh\n\n; change microcontroller\nboard_build.mcu = stm32f413zht6\n\n; change MCU frequency\nboard_build.f_cpu = 100000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic STEVAL-FCU001V1 Environment in PlatformIO\nDESCRIPTION: Basic configuration example for setting up a PlatformIO environment for the STEVAL-FCU001V1 Flight controller board using the STM32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/steval_fcu001v1.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:steval_fcu001v1]\nplatform = ststm32\nboard = steval_fcu001v1\n```\n\n----------------------------------------\n\nTITLE: Advanced HiFive1 Board Configuration - PlatformIO INI\nDESCRIPTION: Extended configuration for HiFive1 board showing how to customize microcontroller and frequency settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/sifive/hifive1.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:hifive1]\nplatform = sifive\nboard = hifive1\n\n; change microcontroller\nboard_build.mcu = fe310\n\n; change MCU frequency\nboard_build.f_cpu = 320000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing MCU and Frequency Settings for AGAFIA SG0\nDESCRIPTION: Extended configuration for the Sigma IC AGAFIA SG0 board that demonstrates how to override default board settings. This example shows how to change the microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/agafia_sg0.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:agafia_sg0]\nplatform = ststm32\nboard = agafia_sg0\n\n; change microcontroller\nboard_build.mcu = stm32g071rbt6\n\n; change MCU frequency\nboard_build.f_cpu = 64000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Board Settings in PlatformIO\nDESCRIPTION: Example showing how to override default board settings like microcontroller type and CPU frequency in the project configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf51/waveshare_ble400.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:waveshare_ble400]\nplatform = nordicnrf51\nboard = waveshare_ble400\n\n; change microcontroller\nboard_build.mcu = nrf51822\n\n; change MCU frequency\nboard_build.f_cpu = 32000000L\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Arduino M0 Pro Board Settings in PlatformIO\nDESCRIPTION: This snippet demonstrates how to override default board settings such as microcontroller and CPU frequency for the Arduino M0 Pro in the PlatformIO configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/mzeropro.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:mzeropro]\nplatform = atmelsam\nboard = mzeropro\n\n; change microcontroller\nboard_build.mcu = samd21g18a\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Lilka v2 Board in PlatformIO Project Configuration\nDESCRIPTION: Basic configuration for using the Lilka v2 board in a PlatformIO project. This sets the platform to espressif32 and specifies the board as lilka_v2.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/lilka_v2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:lilka_v2]\nplatform = espressif32\nboard = lilka_v2\n```\n\n----------------------------------------\n\nTITLE: Customizing ATtiny214 Board Settings in platformio.ini\nDESCRIPTION: Advanced configuration for ATtiny214 board with custom microcontroller and frequency settings. This example shows how to override default board settings in the PlatformIO project configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/ATtiny214.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATtiny214]\nplatform = atmelmegaavr\nboard = ATtiny214\n\n; change microcontroller\nboard_build.mcu = attiny214\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Freedom E SDK Framework in PlatformIO\nDESCRIPTION: Shows how to configure the Freedom E SDK framework in a PlatformIO project's configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/frameworks/freedom-e-sdk.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:your_env_name]\nframework = freedom-e-sdk\n```\n\n----------------------------------------\n\nTITLE: Configuring STM32F103VB Board in platformio.ini\nDESCRIPTION: Basic configuration for using the STM32F103VB board in a PlatformIO project. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103VB.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103VB]\nplatform = ststm32\nboard = genericSTM32F103VB\n```\n\n----------------------------------------\n\nTITLE: Customizing Microduino Core Board Settings in PlatformIO\nDESCRIPTION: Extended PlatformIO configuration for Microduino Core that demonstrates how to override default board settings such as microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/328p8m.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:328p8m]\nplatform = atmelavr\nboard = 328p8m\n\n; change microcontroller\nboard_build.mcu = atmega328p\n\n; change MCU frequency\nboard_build.f_cpu = 8000000L\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example for setting the upload protocol to stlink for the ST Nucleo F446ZE board\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f446ze.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f446ze]\nplatform = ststm32\nboard = nucleo_f446ze\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Customizing NIBObee Board Configuration in PlatformIO\nDESCRIPTION: Advanced configuration for the PlatformIO environment with custom microcontroller and frequency settings for the NIBObee robot board. This snippet demonstrates how to override default board settings using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/nibobee.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nibobee]\nplatform = atmelavr\nboard = nibobee\n\n; change microcontroller\nboard_build.mcu = atmega16\n\n; change MCU frequency\nboard_build.f_cpu = 15000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring SparkFun SAMD51 Thing Plus in PlatformIO\nDESCRIPTION: Basic PlatformIO configuration for the SparkFun SAMD51 Thing Plus board. Sets the platform to atmelsam and specifies the board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/sparkfun_samd51_thing_plus.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:sparkfun_samd51_thing_plus]\nplatform = atmelsam\nboard = sparkfun_samd51_thing_plus\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for STM32F103VE in PlatformIO\nDESCRIPTION: Configuration for specifying the upload protocol for the STM32F103VE board. This example sets the upload protocol to stlink, which is also the default protocol for this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103VE.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103VE]\nplatform = ststm32\nboard = genericSTM32F103VE\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Protocol for ESP8266 ESP-12E in PlatformIO\nDESCRIPTION: Configuration that specifies the upload protocol for the Espressif ESP8266 ESP-12E board. This example demonstrates how to explicitly set the upload protocol to esptool, which is also the default method.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/esp12e.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp12e]\nplatform = espressif8266\nboard = esp12e\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Customizing MotorGo Mini 1 Board Settings in PlatformIO\nDESCRIPTION: Example of overriding default board settings in PlatformIO configuration. This demonstrates how to modify the microcontroller type and CPU frequency for the MotorGo Mini 1 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/motorgo_mini_1.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:motorgo_mini_1]\nplatform = espressif32\nboard = motorgo_mini_1\n\n; change microcontroller\nboard_build.mcu = esp32s3\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Silicognition wESP32 Board\nDESCRIPTION: Basic PlatformIO configuration for the Silicognition wESP32 board using the espressif32 platform. This snippet defines the minimal required configuration in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/wesp32.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:wesp32]\nplatform = espressif32\nboard = wesp32\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Adafruit Hallowing M4\nDESCRIPTION: This snippet shows how to set the upload protocol for the Adafruit Hallowing M4 board in PlatformIO. It uses the 'sam-ba' protocol as an example.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_hallowing_m4.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_hallowing_m4]\nplatform = atmelsam\nboard = adafruit_hallowing_m4\n\nupload_protocol = sam-ba\n```\n\n----------------------------------------\n\nTITLE: Customizing Arduino Leonardo Board Configuration in PlatformIO\nDESCRIPTION: Advanced configuration for Arduino Leonardo showing how to override default board settings including microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/leonardo.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:leonardo]\nplatform = atmelavr\nboard = leonardo\n\n; change microcontroller\nboard_build.mcu = atmega32u4\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Pycom GPy Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the Pycom GPy board. The board supports espota and esptool protocols.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/pycom_gpy.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:pycom_gpy]\nplatform = espressif32\nboard = pycom_gpy\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Customizing STC8F1K08 Board Settings in PlatformIO\nDESCRIPTION: This code demonstrates how to override default settings for the Generic STC8F1K08 board in a PlatformIO project. It shows examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8F1K08.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8F1K08]\nplatform = intel_mcs51\nboard = STC8F1K08\n\n; change microcontroller\nboard_build.mcu = stc8f1k08\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for SparkFun ESP32 Thing Plus C\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the SparkFun ESP32 Thing Plus C. The default protocol is 'esptool', but this can be explicitly set in the project configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/sparkfun_esp32s2_thing_plus_c.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:sparkfun_esp32s2_thing_plus_c]\nplatform = espressif32\nboard = sparkfun_esp32s2_thing_plus_c\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Basic STC15F201EA Board Configuration in PlatformIO\nDESCRIPTION: Basic INI configuration for setting up an STC15F201EA board project in PlatformIO. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15F201EA.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15F201EA]\nplatform = intel_mcs51\nboard = STC15F201EA\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for Namino Rosso\nDESCRIPTION: Minimal PlatformIO configuration for using the Namino Rosso board in a project. This configuration sets up the board with its default settings using the espressif32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/namino_rosso.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:namino_rosso]\nplatform = espressif32\nboard = namino_rosso\n```\n\n----------------------------------------\n\nTITLE: Configuring Stable Platform Version in platformio.ini\nDESCRIPTION: This snippet shows how to configure the stable version of the Intel MCS-51 platform in the PlatformIO project configuration file. It includes options for using the latest stable version or pinning to a specific version.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/intel_mcs51.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n; Latest stable version, NOT recommended\n; Pin the version as shown below\n[env:latest_stable]\nplatform = intel_mcs51\nboard = ...\n\n; Specific version\n[env:custom_stable]\nplatform = intel_mcs51@x.y.z\nboard = ...\n```\n\n----------------------------------------\n\nTITLE: Customizing CNRS AW2ETH Board Settings in PlatformIO INI File\nDESCRIPTION: This snippet demonstrates how to override default settings for the CNRS AW2ETH board in the PlatformIO configuration. It shows examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/cnrs_aw2eth.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:cnrs_aw2eth]\nplatform = espressif32\nboard = cnrs_aw2eth\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directory Settings in library.json\nDESCRIPTION: Example configuration for overriding the default include directory path and specifying additional include paths using build flags. Sets the base include path to the library root and adds multiple custom include directories.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/manifests/library-json/fields/build/includedir.rst#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"name\": \"SomeLib\",\n    \"version\": \"0.0.0\",\n    \"build\": {\n      \"includeDir\": \".\",\n      \"flags\": [\n        \"-I include\",\n        \"-I extra\",\n        \"-I drivers\"\n      ]\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Advanced ESP32-S3-DevKitM-1 Board Configuration\nDESCRIPTION: Extended configuration demonstrating how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32-s3-devkitm-1.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32-s3-devkitm-1]\nplatform = espressif32\nboard = esp32-s3-devkitm-1\n\n; change microcontroller\nboard_build.mcu = esp32s3\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Basic STM32F413RG Board Configuration\nDESCRIPTION: Basic PlatformIO configuration for STM32F413RG board setup using the ststm32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F413RG.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F413RG]\nplatform = ststm32\nboard = genericSTM32F413RG\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Parashu Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to set the upload protocol for the Parashu board in the PlatformIO configuration. It sets the protocol to FTDI.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/shakti/parashu.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:parashu]\nplatform = shakti\nboard = parashu\n\nupload_protocol = ftdi\n```\n\n----------------------------------------\n\nTITLE: Customizing W79E659 Board Parameters in PlatformIO Configuration\nDESCRIPTION: Advanced configuration example showing how to override default board settings such as microcontroller type and CPU frequency in the platformio.ini file. This allows for customized builds specific to project requirements.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/W79E659.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:W79E659]\nplatform = intel_mcs51\nboard = W79E659\n\n; change microcontroller\nboard_build.mcu = w79e659\n\n; change MCU frequency\nboard_build.f_cpu = 22118400L\n```\n\n----------------------------------------\n\nTITLE: Configuring JTAG-HS1 for Firmware Upload in PlatformIO\nDESCRIPTION: This snippet demonstrates how to configure the JTAG-HS1 tool for firmware uploading in addition to debugging. It sets both the debug_tool and upload_protocol options to use the JTAG-HS1 probe.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/digilent-hs1.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = ...\nboard = ...\ndebug_tool = digilent-hs1\nupload_protocol = digilent-hs1\n```\n\n----------------------------------------\n\nTITLE: Advanced AVR32DA28 Configuration with Custom Settings\nDESCRIPTION: Extended configuration example for the AVR32DA28 board, demonstrating how to override default settings such as microcontroller type and CPU frequency in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/AVR32DA28.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:AVR32DA28]\nplatform = atmelmegaavr\nboard = AVR32DA28\n\n; change microcontroller\nboard_build.mcu = avr32da28\n\n; change MCU frequency\nboard_build.f_cpu = 24000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing HiFive1 Rev B Board Configuration in PlatformIO\nDESCRIPTION: Extended configuration example showing how to override default board settings like microcontroller model and CPU frequency for the HiFive1 Rev B board in a PlatformIO project.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/sifive/hifive1-revb.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:hifive1-revb]\nplatform = sifive\nboard = hifive1-revb\n\n; change microcontroller\nboard_build.mcu = fe310\n\n; change MCU frequency\nboard_build.f_cpu = 320000000L\n```\n\n----------------------------------------\n\nTITLE: Overriding Default ATtiny1626 Settings in PlatformIO\nDESCRIPTION: This example demonstrates how to override default settings for the ATtiny1626 board in a PlatformIO project. It shows how to change the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/ATtiny1626.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATtiny1626]\nplatform = atmelmegaavr\nboard = ATtiny1626\n\n; change microcontroller\nboard_build.mcu = attiny1626\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for TTGO LoRa32-OLED V2\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the TTGO LoRa32-OLED V2 board in PlatformIO.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/ttgo-lora32-v2.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:ttgo-lora32-v2]\nplatform = espressif32\nboard = ttgo-lora32-v2\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO Environment for TI LaunchPad MSP-EXP430FR5969LP\nDESCRIPTION: Basic PlatformIO configuration for the TI LaunchPad MSP-EXP430FR5969LP board. This snippet sets up the platform and board ID in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/timsp430/lpmsp430fr5969.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:lpmsp430fr5969]\nplatform = timsp430\nboard = lpmsp430fr5969\n```\n\n----------------------------------------\n\nTITLE: Advanced ATtiny404 Board Configuration with Custom Settings\nDESCRIPTION: Extended configuration for ATtiny404 board with custom microcontroller and frequency settings. Demonstrates how to override default board settings using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/ATtiny404.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATtiny404]\nplatform = atmelmegaavr\nboard = ATtiny404\n\n; change microcontroller\nboard_build.mcu = attiny404\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration for FRDM-K82F\nDESCRIPTION: PlatformIO configuration showing how to specify the upload protocol for the Freescale Kinetis FRDM-K82F board. The example uses the mbed protocol which is the default for this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/freescalekinetis/frdm_k82f.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:frdm_k82f]\nplatform = freescalekinetis\nboard = frdm_k82f\n\nupload_protocol = mbed\n```\n\n----------------------------------------\n\nTITLE: Customizing ESP32 Pico Kit Hardware Settings\nDESCRIPTION: Extended PlatformIO configuration demonstrating how to override default microcontroller and frequency settings for ESP32 Pico Kit using the board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/pico32.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:pico32]\nplatform = espressif32\nboard = pico32\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Development Board Reference Table in RST Format\nDESCRIPTION: A restructuredText formatted table containing specifications for various development boards including their platform dependencies, processor types, clock speeds, and memory configurations.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/jlink.rst#2025-04-10_snippet_4\n\nLANGUAGE: restructuredtext\nCODE:\n```\n* - :ref:`board_atmelsam_adafruit_hallowing_m4`\n      - :ref:`platform_atmelsam`\n      - External\n      - SAMD51J19A\n      - 120MHz\n      - 496KB\n      - 192KB\n```\n\n----------------------------------------\n\nTITLE: Configuring Black STM32F407ZG Board in PlatformIO\nDESCRIPTION: Basic PlatformIO configuration for the Black STM32F407ZG board, including platform and board ID specification.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/black_f407zg.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:black_f407zg]\nplatform = ststm32\nboard = black_f407zg\n```\n\n----------------------------------------\n\nTITLE: Customizing Pycom LoPy Board Settings\nDESCRIPTION: This snippet demonstrates how to override default Pycom LoPy settings in the PlatformIO configuration. It includes examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/lopy.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:lopy]\nplatform = espressif32\nboard = lopy\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Adafruit BLM Badge Environment in PlatformIO\nDESCRIPTION: Basic configuration for the Adafruit BLM Badge board in the PlatformIO project configuration file. This sets up the minimum required environment to work with the board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_blm_badge.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_blm_badge]\nplatform = atmelsam\nboard = adafruit_blm_badge\n```\n\n----------------------------------------\n\nTITLE: Basic STM32F103VG Board Configuration\nDESCRIPTION: Basic configuration for setting up an STM32F103VG board project with the ststm32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103VG.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103VG]\nplatform = ststm32\nboard = genericSTM32F103VG\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for NXP i.MX RT1064 Evaluation Kit\nDESCRIPTION: Basic PlatformIO configuration for the NXP i.MX RT1064 Evaluation Kit board. Sets the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nxpimxrt/mimxrt1064_evk.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:mimxrt1064_evk]\nplatform = nxpimxrt\nboard = mimxrt1064_evk\n```\n\n----------------------------------------\n\nTITLE: Configuring Nordic nRF52833-DK Board in PlatformIO\nDESCRIPTION: This snippet shows how to configure the Nordic nRF52833-DK board in the PlatformIO project configuration file. It sets the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/nrf52833_dk.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nrf52833_dk]\nplatform = nordicnrf52\nboard = nrf52833_dk\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration with MCU Options\nDESCRIPTION: Extended environment configuration showing how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/microchippic32/fubarino_mini.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:fubarino_mini]\nplatform = microchippic32\nboard = fubarino_mini\n\n; change microcontroller\nboard_build.mcu = 32MX250F128D\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced ESP32-S3 Board Configuration\nDESCRIPTION: Extended configuration showing how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/dfrobot_romeo_esp32s3.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:dfrobot_romeo_esp32s3]\nplatform = espressif32\nboard = dfrobot_romeo_esp32s3\n\n; change microcontroller\nboard_build.mcu = esp32s3\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic STC15W408AS Board in PlatformIO\nDESCRIPTION: This snippet shows how to configure the Generic STC15W408AS board in the PlatformIO project configuration file. It sets the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15W408AS.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15W408AS]\nplatform = intel_mcs51\nboard = STC15W408AS\n```\n\n----------------------------------------\n\nTITLE: Customizing DFRobot Beetle ESP32-C3 Board Settings\nDESCRIPTION: Extended configuration for customizing the DFRobot Beetle ESP32-C3 board settings including microcontroller and CPU frequency overrides.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/dfrobot_beetle_esp32c3.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:dfrobot_beetle_esp32c3]\nplatform = espressif32\nboard = dfrobot_beetle_esp32c3\n\n; change microcontroller\nboard_build.mcu = esp32c3\n\n; change MCU frequency\nboard_build.f_cpu = 160000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring ATmega1284P Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the ATmega1284P board in the PlatformIO project configuration file. It includes the basic setup and examples of how to override default board settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega1284P.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega1284P]\nplatform = atmelavr\nboard = ATmega1284P\n\n; change microcontroller\nboard_build.mcu = atmega1284p\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Basic Controllino Mega Board Configuration in PlatformIO\nDESCRIPTION: Basic configuration snippet for setting up a Controllino Mega board project in PlatformIO's project configuration file. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/controllino_mega.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:controllino_mega]\nplatform = atmelavr\nboard = controllino_mega\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU Settings\nDESCRIPTION: Extended configuration showing how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/trueverit-iot-driver.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:trueverit-iot-driver]\nplatform = espressif32\nboard = trueverit-iot-driver\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration for PlatformIO\nDESCRIPTION: Basic configuration example for setting up YeaCreate NSCREEN-32 board in PlatformIO environment.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/nscreen-32.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nscreen-32]\nplatform = espressif32\nboard = nscreen-32\n```\n\n----------------------------------------\n\nTITLE: Configuring STM32F103TB Board in PlatformIO.ini\nDESCRIPTION: Basic configuration for setting up a PlatformIO project environment for the STM32F103TB board using the ststm32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103TB.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103TB]\nplatform = ststm32\nboard = genericSTM32F103TB\n```\n\n----------------------------------------\n\nTITLE: Customizing ATmega324PA Board Settings in PlatformIO INI File\nDESCRIPTION: This example demonstrates how to override default ATmega324PA board settings in the PlatformIO configuration. It shows how to change the microcontroller and MCU frequency using board-specific build flags.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega324PA.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega324PA]\nplatform = atmelavr\nboard = ATmega324PA\n\n; change microcontroller\nboard_build.mcu = atmega324pa\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing ATtiny826 Configuration with Board Options\nDESCRIPTION: Extended configuration example showing how to override default ATtiny826 settings in platformio.ini. This demonstrates changing the microcontroller model and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/ATtiny826.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATtiny826]\nplatform = atmelmegaavr\nboard = ATtiny826\n\n; change microcontroller\nboard_build.mcu = attiny826\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the NanoS3 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/um_nanos3.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:um_nanos3]\nplatform = espressif32\nboard = um_nanos3\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Customizing MakerAsia KB32-FT Board Settings in PlatformIO\nDESCRIPTION: Example of overriding default board settings for MakerAsia KB32-FT by configuring microcontroller type and CPU frequency in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/kb32-ft.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:kb32-ft]\nplatform = espressif32\nboard = kb32-ft\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring M5Stick-C Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the M5Stick-C board in the PlatformIO project configuration file (platformio.ini). It sets the platform to espressif32 and specifies the board as m5stick-c.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/m5stick-c.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:m5stick-c]\nplatform = espressif32\nboard = m5stick-c\n```\n\n----------------------------------------\n\nTITLE: Basic OpenRTK330L Board Configuration in PlatformIO\nDESCRIPTION: Basic PlatformIO configuration for the OpenRTK330L board using the aceinna_imu platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/aceinna_imu/OpenRTK330L.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:OpenRTK330L]\nplatform = aceinna_imu\nboard = OpenRTK330L\n```\n\n----------------------------------------\n\nTITLE: Configuring DFRobot Firebeetle 2 ESP32-E Board in platformio.ini\nDESCRIPTION: Basic configuration for the DFRobot Firebeetle 2 ESP32-E board in the PlatformIO project configuration file. This snippet sets the platform and board options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/dfrobot_firebeetle2_esp32e.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:dfrobot_firebeetle2_esp32e]\nplatform = espressif32\nboard = dfrobot_firebeetle2_esp32e\n```\n\n----------------------------------------\n\nTITLE: Configuring Arduino M0 Basic Environment with PlatformIO\nDESCRIPTION: Basic configuration for setting up an Arduino M0 project using the ATMELSAM platform in the PlatformIO project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/mzeroUSB.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:mzeroUSB]\nplatform = atmelsam\nboard = mzeroUSB\n```\n\n----------------------------------------\n\nTITLE: Board Specifications Table in RST Format\nDESCRIPTION: A reStructuredText formatted table listing development boards and their specifications including platform, connection type, microcontroller model, clock speed, flash memory, and RAM size.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/blackmagic.rst#2025-04-10_snippet_4\n\nLANGUAGE: rst\nCODE:\n```\n* - :ref:`board_ststm32_genericSTM32F407IGT6`\n      - :ref:`platform_ststm32`\n      - External\n      - STM32F407IGT6\n      - 168MHz\n      - 1MB\n      - 192KB\n```\n\n----------------------------------------\n\nTITLE: Basic STC15F104W Board Configuration in PlatformIO\nDESCRIPTION: Basic configuration setup for the STC15F104W board in PlatformIO's project configuration file. Specifies the platform and board type.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15F104W.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15F104W]\nplatform = intel_mcs51\nboard = STC15F104W\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic PlatformIO Environment for Heltec Wireless Stick\nDESCRIPTION: Basic configuration for setting up a PlatformIO environment to work with the Heltec Wireless Stick board. This snippet defines the platform and board ID for the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/heltec_wireless_stick.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:heltec_wireless_stick]\nplatform = espressif32\nboard = heltec_wireless_stick\n```\n\n----------------------------------------\n\nTITLE: Advanced Pycom GPy Board Configuration\nDESCRIPTION: Extended PlatformIO configuration demonstrating how to override default MCU and frequency settings for the Pycom GPy board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/pycom_gpy.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:pycom_gpy]\nplatform = espressif32\nboard = pycom_gpy\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Generic IRC15W415AS\nDESCRIPTION: This snippet shows how to configure a PlatformIO project for the Generic IRC15W415AS board. It sets the platform to intel_mcs51 and specifies the board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/IRC15W415AS.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:IRC15W415AS]\nplatform = intel_mcs51\nboard = IRC15W415AS\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Arduino MKR WiFi 1010\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the Arduino MKR WiFi 1010 board. The board supports atmel-ice, blackmagic, jlink, and sam-ba protocols, with sam-ba as the default.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/mkrwifi1010.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:mkrwifi1010]\nplatform = atmelsam\nboard = mkrwifi1010\n\nupload_protocol = sam-ba\n```\n\n----------------------------------------\n\nTITLE: Configuring Adafruit Feather 328P in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the Adafruit Feather 328P board in a PlatformIO project's configuration file. It sets the platform to atmelavr and the board to feather328p.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/feather328p.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:feather328p]\nplatform = atmelavr\nboard = feather328p\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU Settings\nDESCRIPTION: Extended configuration for Adafruit Metro ESP32-S3 with custom microcontroller and frequency settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/adafruit_metro_esp32s3.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_metro_esp32s3]\nplatform = espressif32\nboard = adafruit_metro_esp32s3\n\n; change microcontroller\nboard_build.mcu = esp32s3\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Arduino Nano 33 BLE Board in PlatformIO\nDESCRIPTION: Basic configuration for the Arduino Nano 33 BLE board in the project's platformio.ini file. It specifies the platform and board to use.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/nano33ble.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nano33ble]\nplatform = nordicnrf52\nboard = nano33ble\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for Imbrios LogSens V1P1\nDESCRIPTION: Basic environment configuration for Imbrios LogSens V1P1 board in platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/imbrios-logsens-v1p1.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:imbrios-logsens-v1p1]\nplatform = espressif32\nboard = imbrios-logsens-v1p1\n```\n\n----------------------------------------\n\nTITLE: Customizing Particle Argon Board Settings in PlatformIO\nDESCRIPTION: Example of overriding default board settings in the PlatformIO configuration. Demonstrates changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/particle_argon.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:particle_argon]\nplatform = nordicnrf52\nboard = particle_argon\n\n; change microcontroller\nboard_build.mcu = nrf52840\n\n; change MCU frequency\nboard_build.f_cpu = 64000000L\n```\n\n----------------------------------------\n\nTITLE: ESP8266 ESP-07S Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the ESP-07S board\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/esp07s.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp07s]\nplatform = espressif8266\nboard = esp07s\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Basic MAX32625MBED Board Configuration\nDESCRIPTION: Basic PlatformIO configuration for MAX32625MBED board setup using the maxim32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/maxim32/max32625mbed.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:max32625mbed]\nplatform = maxim32\nboard = max32625mbed\n```\n\n----------------------------------------\n\nTITLE: Customizing SDT32620B Board Settings in PlatformIO\nDESCRIPTION: Advanced configuration that demonstrates how to override default board settings for the SDT32620B. This example shows how to change the microcontroller and CPU frequency values.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/maxim32/sdt32620b.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:sdt32620b]\nplatform = maxim32\nboard = sdt32620b\n\n; change microcontroller\nboard_build.mcu = max32620iwg\n\n; change MCU frequency\nboard_build.f_cpu = 96000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with Custom Settings\nDESCRIPTION: Extended PlatformIO configuration demonstrating how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8H1K17.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8H1K17]\nplatform = intel_mcs51\nboard = STC8H1K17\n\n; change microcontroller\nboard_build.mcu = stc8h1k17\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Customizing WEMOS D1 R32 Hardware Configuration in PlatformIO\nDESCRIPTION: Extended PlatformIO configuration that overrides default board settings like microcontroller type and CPU frequency. This allows for hardware customization beyond the default settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/wemos_d1_uno32.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:wemos_d1_uno32]\nplatform = espressif32\nboard = wemos_d1_uno32\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for ElectronutLabs Blip\nDESCRIPTION: Configuration to specify the upload protocol for the ElectronutLabs Blip board. This example sets the protocol to 'blackmagic', which is the default for this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/electronut_blip.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:electronut_blip]\nplatform = nordicnrf52\nboard = electronut_blip\n\nupload_protocol = blackmagic\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration with MCU Settings\nDESCRIPTION: Extended configuration showing how to override default board settings like microcontroller and CPU frequency\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/uno_wifi_rev2.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:uno_wifi_rev2]\nplatform = atmelmegaavr\nboard = uno_wifi_rev2\n\n; change microcontroller\nboard_build.mcu = atmega4809\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with Custom Settings\nDESCRIPTION: Extended PlatformIO configuration showing how to override default board settings including microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8A8K64S4A12.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8A8K64S4A12]\nplatform = intel_mcs51\nboard = STC8A8K64S4A12\n\n; change microcontroller\nboard_build.mcu = stc8a8k64s4a12\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Protocol for FRDM-K66F\nDESCRIPTION: Configuration example showing how to specify the upload protocol in platformio.ini. The FRDM-K66F supports cmsis-dap, jlink, and mbed protocols, with mbed being the default.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/freescalekinetis/frdm_k66f.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:frdm_k66f]\nplatform = freescalekinetis\nboard = frdm_k66f\n\nupload_protocol = mbed\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Seeed Studio Edgebox-ESP-100\nDESCRIPTION: Configuration to specify the upload protocol for the Seeed Studio Edgebox-ESP-100 board. In this example, it's set to use the default 'esptool' protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/edgebox-esp-100.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:edgebox-esp-100]\nplatform = espressif32\nboard = edgebox-esp-100\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU Settings\nDESCRIPTION: Demonstrates how to override default board settings like microcontroller type and CPU frequency\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/adafruit_ledglasses_nrf52840.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_ledglasses_nrf52840]\nplatform = nordicnrf52\nboard = adafruit_ledglasses_nrf52840\n\n; change microcontroller\nboard_build.mcu = nrf52840\n\n; change MCU frequency\nboard_build.f_cpu = 64000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for STM32F103ZC\nDESCRIPTION: Configuration to specify the upload protocol for the STM32F103ZC board. In this example, it's set to use the ST-Link protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103ZC.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103ZC]\nplatform = ststm32\nboard = genericSTM32F103ZC\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Configuring WEMOS LOLIN S2 Mini Board in platformio.ini\nDESCRIPTION: Basic configuration for the WEMOS LOLIN S2 Mini board in the PlatformIO project configuration file. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/lolin_s2_mini.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:lolin_s2_mini]\nplatform = espressif32\nboard = lolin_s2_mini\n```\n\n----------------------------------------\n\nTITLE: Customizing Hexiwear Board Settings in PlatformIO\nDESCRIPTION: Extended configuration for customizing the Hexiwear board settings in PlatformIO, including how to override the default microcontroller and MCU frequency settings defined in the board manifest.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/freescalekinetis/hexiwear.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:hexiwear]\nplatform = freescalekinetis\nboard = hexiwear\n\n; change microcontroller\nboard_build.mcu = mk64fn1m0vdc12\n\n; change MCU frequency\nboard_build.f_cpu = 120000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced ATtiny426 Configuration with Customizations\nDESCRIPTION: Extended configuration for ATtiny426 that demonstrates how to override default settings from the board manifest, including changing the microcontroller and adjusting the MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/ATtiny426.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATtiny426]\nplatform = atmelmegaavr\nboard = ATtiny426\n\n; change microcontroller\nboard_build.mcu = attiny426\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Raspberry Pi Pico Settings in PlatformIO\nDESCRIPTION: Advanced configuration for a Raspberry Pi Pico project that overrides default microcontroller and frequency settings using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/raspberrypi/pico.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:pico]\nplatform = raspberrypi\nboard = pico\n\n; change microcontroller\nboard_build.mcu = rp2040\n\n; change MCU frequency\nboard_build.f_cpu = 133000000L\n```\n\n----------------------------------------\n\nTITLE: Custom OpenScope MCU and Frequency Configuration\nDESCRIPTION: Extended configuration showing how to customize the microcontroller and CPU frequency settings for the OpenScope board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/microchippic32/openscope.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:openscope]\nplatform = microchippic32\nboard = openscope\n\n; change microcontroller\nboard_build.mcu = 32MZ2048EFG124\n\n; change MCU frequency\nboard_build.f_cpu = 200000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Cytron Maker Feather AIoT S3\nDESCRIPTION: Example of changing the upload protocol in platformio.ini. The default protocol is 'esptool', but this can be modified as needed.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/cytron_maker_feather_aiot_s3.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:cytron_maker_feather_aiot_s3]\nplatform = espressif32\nboard = cytron_maker_feather_aiot_s3\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Customizing PHYTEC reel board settings in PlatformIO\nDESCRIPTION: Extended PlatformIO configuration demonstrating how to override default board settings such as microcontroller type and CPU frequency using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/reel_board.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:reel_board]\nplatform = nordicnrf52\nboard = reel_board\n\n; change microcontroller\nboard_build.mcu = nrf52840\n\n; change MCU frequency\nboard_build.f_cpu = 64000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Arduino Yun Mini Board Settings in PlatformIO INI File\nDESCRIPTION: This snippet demonstrates how to override default Arduino Yun Mini settings in the PlatformIO project configuration file. It shows examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/yunmini.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:yunmini]\nplatform = atmelavr\nboard = yunmini\n\n; change microcontroller\nboard_build.mcu = atmega32u4\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Protocol for Adafruit PyPortal M4\nDESCRIPTION: Example configuration for specifying the upload protocol for the Adafruit PyPortal M4 board. This shows how to set the protocol to sam-ba, one of the three supported protocols (atmel-ice, jlink, sam-ba).\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_pyportal_m4.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_pyportal_m4]\nplatform = atmelsam\nboard = adafruit_pyportal_m4\n\nupload_protocol = sam-ba\n```\n\n----------------------------------------\n\nTITLE: Customizing ML54LD1AE Board Configuration in PlatformIO\nDESCRIPTION: Advanced configuration example showing how to override default settings for the Generic ML54LD1AE board, including changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/ML54LD1AE.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ML54LD1AE]\nplatform = intel_mcs51\nboard = ML54LD1AE\n\n; change microcontroller\nboard_build.mcu = ml54ld1ae\n\n; change MCU frequency\nboard_build.f_cpu = 24000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing STC8H2K60T Board Parameters in PlatformIO\nDESCRIPTION: Advanced configuration for the STC8H2K60T board that demonstrates how to override default settings like microcontroller type and CPU frequency through the board_*** options in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8H2K60T.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8H2K60T]\nplatform = intel_mcs51\nboard = STC8H2K60T\n\n; change microcontroller\nboard_build.mcu = stc8h2k60t\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Configuring Olimex ARM-USB-OCD as Upload Protocol in PlatformIO\nDESCRIPTION: Configuration for using the Olimex ARM-USB-OCD not only for debugging but also for firmware uploading by setting the appropriate upload protocol in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/olimex-arm-usb-ocd.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = ...\nboard = ...\ndebug_tool = olimex-arm-usb-ocd\nupload_protocol = olimex-arm-usb-ocd\n```\n\n----------------------------------------\n\nTITLE: Advanced STM32F401RC Board Configuration\nDESCRIPTION: Extended configuration for STM32F401RC board including microcontroller and frequency settings. Demonstrates how to override default board settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F401RC.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F401RC]\nplatform = ststm32\nboard = genericSTM32F401RC\n\n; change microcontroller\nboard_build.mcu = stm32f401rct6\n\n; change MCU frequency\nboard_build.f_cpu = 84000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Armstrap Eagle 2048 Board in PlatformIO\nDESCRIPTION: This snippet shows how to configure the Armstrap Eagle 2048 board in the PlatformIO project configuration file. It sets the platform and board options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/armstrap_eagle2048.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:armstrap_eagle2048]\nplatform = ststm32\nboard = armstrap_eagle2048\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic STC8F2K60S2 Environment in platformio.ini\nDESCRIPTION: Basic configuration for using the STC8F2K60S2 board with the Intel MCS-51 platform in PlatformIO projects. This defines the minimal required environment settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8F2K60S2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8F2K60S2]\nplatform = intel_mcs51\nboard = STC8F2K60S2\n```\n\n----------------------------------------\n\nTITLE: Custom MCU Configuration for PYBStick 26 Pro\nDESCRIPTION: PlatformIO configuration showing how to customize microcontroller and frequency settings for the PYBStick 26 Pro board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/pybstick26_pro.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:pybstick26_pro]\nplatform = ststm32\nboard = pybstick26_pro\n\n; change microcontroller\nboard_build.mcu = stm32f412re\n\n; change MCU frequency\nboard_build.f_cpu = 100000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Adafruit PyPortal M4 Titano in PlatformIO\nDESCRIPTION: Basic configuration for the Adafruit PyPortal M4 Titano board in PlatformIO's project configuration file. This sets up the platform and board ID for development.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_pyportal_m4_titano.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_pyportal_m4_titano]\nplatform = atmelsam\nboard = adafruit_pyportal_m4_titano\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for ST Nucleo F429ZI\nDESCRIPTION: Configures the upload protocol for the ST Nucleo F429ZI board. This example explicitly sets the upload protocol to stlink, which is also the default protocol for this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f429zi.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f429zi]\nplatform = ststm32\nboard = nucleo_f429zi\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for M5Stick-C in PlatformIO INI File\nDESCRIPTION: This snippet shows how to set the upload protocol for the M5Stick-C board in the PlatformIO project configuration file. It sets the upload protocol to esptool, which is the default for this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/m5stick-c.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:m5stick-c]\nplatform = espressif32\nboard = m5stick-c\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Board Settings in PlatformIO\nDESCRIPTION: Basic configuration for setting up the Elektor F072C8 board in the platformio.ini file, specifying the platform and board type.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/elektor_f072c8.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:elektor_f072c8]\nplatform = ststm32\nboard = elektor_f072c8\n```\n\n----------------------------------------\n\nTITLE: Customizing FireBeetle-ESP32 Board Settings\nDESCRIPTION: Example of overriding default board settings like microcontroller and CPU frequency in the project configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/firebeetle32.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:firebeetle32]\nplatform = espressif32\nboard = firebeetle32\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for FireBeetle-ESP32\nDESCRIPTION: Configuration example for specifying the upload protocol for the FireBeetle-ESP32 board. In this case, it's set to the default 'esptool' protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/firebeetle32.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:firebeetle32]\nplatform = espressif32\nboard = firebeetle32\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Specifying Upload Protocol for ST Nucleo F103RB\nDESCRIPTION: PlatformIO configuration example showing how to specify the upload protocol for the ST Nucleo F103RB board. This demonstrates setting the upload_protocol option to use ST-Link for firmware uploading.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f103rb.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f103rb]\nplatform = ststm32\nboard = nucleo_f103rb\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Bluey nRF52832 IoT\nDESCRIPTION: Configuration to change the upload protocol for the Bluey nRF52832 IoT board. In this example, it's set to J-Link.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/bluey.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:bluey]\nplatform = nordicnrf52\nboard = bluey\n\nupload_protocol = jlink\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU Settings\nDESCRIPTION: Extended PlatformIO configuration demonstrating how to override default microcontroller and frequency settings for the Tiny STM103T board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/hy_tinystm103tb.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:hy_tinystm103tb]\nplatform = ststm32\nboard = hy_tinystm103tb\n\n; change microcontroller\nboard_build.mcu = stm32f103tbu6\n\n; change MCU frequency\nboard_build.f_cpu = 72000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Heltec CubeCell-Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the Heltec CubeCell-Board (HTCC-AB01) in the PlatformIO project configuration file. It sets the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/heltec-cubecell/cubecell_board.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:cubecell_board]\nplatform = heltec-cubecell\nboard = cubecell_board\n```\n\n----------------------------------------\n\nTITLE: Customizing SparkFun LoRa Gateway 1-Channel Board Settings in PlatformIO\nDESCRIPTION: Advanced configuration for customizing microcontroller and CPU frequency settings for the SparkFun LoRa Gateway 1-Channel board. This demonstrates how to override default board settings using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/sparkfun_lora_gateway_1-channel.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:sparkfun_lora_gateway_1-channel]\nplatform = espressif32\nboard = sparkfun_lora_gateway_1-channel\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Heltec WiFi Kit 32 (V3)\nDESCRIPTION: PlatformIO configuration demonstrating how to specify the upload protocol for the board. The default protocol is esptool, but this can be changed using the upload_protocol option.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/heltec_wifi_kit_32_V3.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:heltec_wifi_kit_32_V3]\nplatform = espressif32\nboard = heltec_wifi_kit_32_V3\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring Arduino MKR WAN 1300 in PlatformIO\nDESCRIPTION: Basic PlatformIO configuration for Arduino MKR WAN 1300 using the atmelsam platform. This snippet defines the board in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/mkrwan1300.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:mkrwan1300]\nplatform = atmelsam\nboard = mkrwan1300\n```\n\n----------------------------------------\n\nTITLE: Customizing M5Stack GREY ESP32 Board Settings in PlatformIO\nDESCRIPTION: Demonstrates how to override default board settings using board_*** options. This example shows customizing the microcontroller type and CPU frequency for an M5Stack GREY ESP32 project.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/m5stack-grey.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:m5stack-grey]\nplatform = espressif32\nboard = m5stack-grey\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic AT90CAN128 Environment in PlatformIO\nDESCRIPTION: Basic configuration for setting up an AT90CAN128 project environment in PlatformIO's project configuration file. This snippet defines the platform as atmelavr and specifies the AT90CAN128 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/AT90CAN128.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:AT90CAN128]\nplatform = atmelavr\nboard = AT90CAN128\n```\n\n----------------------------------------\n\nTITLE: Configuring OLIMEX ESP32-GATEWAY Board in PlatformIO\nDESCRIPTION: Basic PlatformIO configuration for the OLIMEX ESP32-GATEWAY board using the Espressif32 platform. Includes options to override default settings like microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32-gateway.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32-gateway]\nplatform = espressif32\nboard = esp32-gateway\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Stable Linux i686 Platform Versions in PlatformIO\nDESCRIPTION: Configuration examples for using stable versions of the Linux i686 platform in PlatformIO projects, including latest stable and specific version pinning.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/linux_i686.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n; Latest stable version, NOT recommended\n; Pin the version as shown below\n[env:latest_stable]\nplatform = linux_i686\n\n; Specific version\n[env:custom_stable]\nplatform = linux_i686@x.y.z\n```\n\n----------------------------------------\n\nTITLE: Advanced ESP8266 ESP-07S Board Configuration\nDESCRIPTION: Example showing how to override default board settings like microcontroller type and CPU frequency\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/esp07s.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp07s]\nplatform = espressif8266\nboard = esp07s\n\n; change microcontroller\nboard_build.mcu = esp8266\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic STC15F2K08S2 Board in PlatformIO\nDESCRIPTION: This snippet shows how to configure the Generic STC15F2K08S2 board in a PlatformIO project's configuration file (platformio.ini). It sets the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15F2K08S2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15F2K08S2]\nplatform = intel_mcs51\nboard = STC15F2K08S2\n```\n\n----------------------------------------\n\nTITLE: Custom MCU Configuration\nDESCRIPTION: Example showing how to override default board settings like microcontroller model and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/ublox_c030_n211.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ublox_c030_n211]\nplatform = ststm32\nboard = ublox_c030_n211\n\n; change microcontroller\nboard_build.mcu = stm32f437vg\n\n; change MCU frequency\nboard_build.f_cpu = 180000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Lattice iCEstick FPGA Evaluation Kit\nDESCRIPTION: This snippet demonstrates how to configure a PlatformIO project for the Lattice iCEstick FPGA Evaluation Kit. It sets the platform and board ID in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/lattice_ice40/icestick.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:icestick]\nplatform = lattice_ice40\nboard = icestick\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration with Custom Settings for chipKIT uC32\nDESCRIPTION: Extended configuration for a PlatformIO project with the Digilent chipKIT uC32 board, demonstrating how to override default board settings such as microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/microchippic32/chipkit_uc32.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:chipkit_uc32]\nplatform = microchippic32\nboard = chipkit_uc32\n\n; change microcontroller\nboard_build.mcu = 32MX340F512H\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring SparkFun Digital Sandbox Board in PlatformIO\nDESCRIPTION: This snippet shows how to configure the SparkFun Digital Sandbox board in the PlatformIO project configuration file. It sets the platform to atmelavr and specifies the board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/sparkfun_digitalsandbox.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:sparkfun_digitalsandbox]\nplatform = atmelavr\nboard = sparkfun_digitalsandbox\n```\n\n----------------------------------------\n\nTITLE: Customizing Arduino Robot Motor Board Settings\nDESCRIPTION: Extended PlatformIO configuration showing how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/robotMotor.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:robotMotor]\nplatform = atmelavr\nboard = robotMotor\n\n; change microcontroller\nboard_build.mcu = atmega32u4\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring SparkFun Mega Pro 3.3V/8MHz in PlatformIO\nDESCRIPTION: Basic configuration snippet for setting up a PlatformIO project with the SparkFun Mega Pro 3.3V/8MHz board. This defines the environment, platform, and board ID in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/sparkfun_megapro8MHz.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:sparkfun_megapro8MHz]\nplatform = atmelavr\nboard = sparkfun_megapro8MHz\n```\n\n----------------------------------------\n\nTITLE: Configuring Raytac MDBT50Q-RX Dongle in PlatformIO INI file\nDESCRIPTION: Basic configuration for the Raytac MDBT50Q-RX Dongle board in the PlatformIO project configuration file. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/raytac_mdbt50q_rx.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:raytac_mdbt50q_rx]\nplatform = nordicnrf52\nboard = raytac_mdbt50q_rx\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the board, with esptool as the default option.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/microduino-core-esp32.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:microduino-core-esp32]\nplatform = espressif32\nboard = microduino-core-esp32\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with Custom Settings\nDESCRIPTION: Extended configuration example showing how to override default board settings like microcontroller type and CPU frequency in platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/IAP15W1K29S.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:IAP15W1K29S]\nplatform = intel_mcs51\nboard = IAP15W1K29S\n\n; change microcontroller\nboard_build.mcu = iap15w1k29s\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Configuring HelvePic32 Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the HelvePic32 board in the PlatformIO project configuration file. It sets the platform to microchippic32 and the board to helvepic32.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/microchippic32/helvepic32.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:helvepic32]\nplatform = microchippic32\nboard = helvepic32\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for WeMos D1 R2 and mini\nDESCRIPTION: Configuration example that shows how to specify the upload protocol for the WeMos D1 R2 and mini board. The board supports 'espota' and 'esptool' protocols, with 'esptool' being the default.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/d1_mini.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:d1_mini]\nplatform = espressif8266\nboard = d1_mini\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: AVR Board Specifications Table Structure\nDESCRIPTION: ReStructuredText table format defining specifications for AVR development boards including debug capability, MCU model, frequency, flash and RAM sizes.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/atmelavr.rst#2025-04-10_snippet_2\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. list-table::\n    :header-rows:  1\n\n    * - Name\n      - Debug\n      - MCU\n      - Frequency\n      - Flash\n      - RAM\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration for Tiny STM103T\nDESCRIPTION: Basic PlatformIO configuration for setting up the Tiny STM103T board using the STM32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/hy_tinystm103tb.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:hy_tinystm103tb]\nplatform = ststm32\nboard = hy_tinystm103tb\n```\n\n----------------------------------------\n\nTITLE: Configuring Teensy++ 2.0 Board in PlatformIO\nDESCRIPTION: This snippet shows how to configure the Teensy++ 2.0 board in the PlatformIO project configuration file. It sets the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/teensy/teensy2pp.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:teensy2pp]\nplatform = teensy\nboard = teensy2pp\n```\n\n----------------------------------------\n\nTITLE: Advanced STM32F405RG Configuration with MCU and Frequency Settings\nDESCRIPTION: Extended configuration showing how to override default microcontroller and frequency settings for the STM32F405RG board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F405RG.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F405RG]\nplatform = ststm32\nboard = genericSTM32F405RG\n\n; change microcontroller\nboard_build.mcu = stm32f405rgt6\n\n; change MCU frequency\nboard_build.f_cpu = 168000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for STM32F103RC in platformio.ini\nDESCRIPTION: Example of changing the upload protocol for STM32F103RC board to stlink in platformio.ini. Other supported protocols include blackmagic, cmsis-dap, dfu, jlink, and serial.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103RC.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103RC]\nplatform = ststm32\nboard = genericSTM32F103RC\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Customizing Generic MS51EC0AE Configuration\nDESCRIPTION: Advanced configuration example showing how to override default board settings such as microcontroller type and CPU frequency in PlatformIO.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/MS51EC0AE.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:MS51EC0AE]\nplatform = intel_mcs51\nboard = MS51EC0AE\n\n; change microcontroller\nboard_build.mcu = ms51ec0ae\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Aceinna MTLT335\nDESCRIPTION: This snippet shows how to specify the upload protocol for the Aceinna MTLT335 board in PlatformIO. The default protocol is stlink, but it can be changed to blackmagic or jlink.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/aceinna_imu/OpenIMU335.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:OpenIMU335]\nplatform = aceinna_imu\nboard = OpenIMU335\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for NXP LPCXpresso54114 Board\nDESCRIPTION: Basic PlatformIO configuration for the NXP LPCXpresso54114 board in the project's platformio.ini file. This sets up the build environment to use the nxplpc platform with the lpc54114 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nxplpc/lpc54114.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:lpc54114]\nplatform = nxplpc\nboard = lpc54114\n```\n\n----------------------------------------\n\nTITLE: Advanced ATtiny43U Configuration with Custom Settings\nDESCRIPTION: Extended configuration example showing how to customize microcontroller settings like MCU model and frequency using board-specific options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/attiny43.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:attiny43]\nplatform = atmelavr\nboard = attiny43\n\n; change microcontroller\nboard_build.mcu = attiny43u\n\n; change MCU frequency\nboard_build.f_cpu = 8000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration with Custom Settings\nDESCRIPTION: Extended configuration for STC8H1K32S2A10 with custom microcontroller and frequency settings. Demonstrates how to override default board settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8H1K32S2A10.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8H1K32S2A10]\nplatform = intel_mcs51\nboard = STC8H1K32S2A10\n\n; change microcontroller\nboard_build.mcu = stc8h1k32s2a10\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Customizing Arduino Uno Mini Board Settings in PlatformIO\nDESCRIPTION: This snippet demonstrates how to override default board settings in a PlatformIO project. It shows examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/uno_mini.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:uno_mini]\nplatform = atmelavr\nboard = uno_mini\n\n; change microcontroller\nboard_build.mcu = atmega328p\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration for ML56SD1AE\nDESCRIPTION: Basic PlatformIO configuration for setting up the ML56SD1AE board with the intel_mcs51 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/ML56SD1AE.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ML56SD1AE]\nplatform = intel_mcs51\nboard = ML56SD1AE\n```\n\n----------------------------------------\n\nTITLE: Configuring Bluey nRF52832 IoT Board in platformio.ini\nDESCRIPTION: Basic configuration for the Bluey nRF52832 IoT board in the project's platformio.ini file. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/bluey.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:bluey]\nplatform = nordicnrf52\nboard = bluey\n```\n\n----------------------------------------\n\nTITLE: STM32F405RG Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to set the upload protocol for the STM32F405RG board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F405RG.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F405RG]\nplatform = ststm32\nboard = genericSTM32F405RG\n\nupload_protocol = serial\n```\n\n----------------------------------------\n\nTITLE: Configuring Parashu Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the Parashu board in the PlatformIO project configuration file. It sets the platform to Shakti and the board to Parashu.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/shakti/parashu.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:parashu]\nplatform = shakti\nboard = parashu\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to set the upload protocol for STM32F373RC board to stlink.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F373RC.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F373RC]\nplatform = ststm32\nboard = genericSTM32F373RC\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration\nDESCRIPTION: Basic PlatformIO configuration for the 3DP001V1 evaluation board using the STM32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/st3dp001_eval.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:st3dp001_eval]\nplatform = ststm32\nboard = st3dp001_eval\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration for ST Nucleo H723ZG\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the ST Nucleo H723ZG board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_h723zg.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_h723zg]\nplatform = ststm32\nboard = nucleo_h723zg\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Advanced ESP32 Thing Plus Configuration with MCU Settings\nDESCRIPTION: Extended configuration showing how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32thing_plus.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32thing_plus]\nplatform = espressif32\nboard = esp32thing_plus\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for u-blox ODIN-W2 in projectconf\nDESCRIPTION: Basic configuration for using the u-blox ODIN-W2 board in PlatformIO's project configuration file. Sets the platform to STM32 and specifies the board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/mtb_ublox_odin_w2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:mtb_ublox_odin_w2]\nplatform = ststm32\nboard = mtb_ublox_odin_w2\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Trueverit ESP32 Board in PlatformIO\nDESCRIPTION: This configuration shows how to set a specific upload protocol for the Trueverit ESP32 Universal IoT Driver MK II board. In this example, it sets the upload protocol to 'esptool'.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/trueverit-iot-driver-mk2.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:trueverit-iot-driver-mk2]\nplatform = espressif32\nboard = trueverit-iot-driver-mk2\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring ESP32-C6-DevKitC-1 in PlatformIO Project\nDESCRIPTION: Basic configuration for an ESP32-C6-DevKitC-1 board in a PlatformIO project's platformio.ini file. This establishes the minimum required settings to target this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32-c6-devkitc-1.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32-c6-devkitc-1]\nplatform = espressif32\nboard = esp32-c6-devkitc-1\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration for STM32 Nucleo G431KB\nDESCRIPTION: PlatformIO configuration showing how to specify the upload protocol for the Nucleo G431KB board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_g431kb.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_g431kb]\nplatform = ststm32\nboard = nucleo_g431kb\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic nRF51 DK Board Settings\nDESCRIPTION: Basic PlatformIO environment configuration for the nRF51 DK board using the nordicnrf51 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf51/nrf51_dk.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nrf51_dk]\nplatform = nordicnrf51\nboard = nrf51_dk\n```\n\n----------------------------------------\n\nTITLE: Customizing ST Nucleo F746ZG Board Settings in PlatformIO\nDESCRIPTION: Advanced configuration for customizing the microcontroller and CPU frequency of the ST Nucleo F746ZG board in the PlatformIO project configuration file. This demonstrates how to override default board settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f746zg.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f746zg]\nplatform = ststm32\nboard = nucleo_f746zg\n\n; change microcontroller\nboard_build.mcu = stm32f746zgt6\n\n; change MCU frequency\nboard_build.f_cpu = 216000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Dongsen Tech Pocket 32\nDESCRIPTION: This snippet shows how to set the upload protocol for the Dongsen Tech Pocket 32 board. In this example, it's set to the default 'esptool' protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/pocket_32.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:pocket_32]\nplatform = espressif32\nboard = pocket_32\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Customizing SparkFun MicroMod Teensy Board Settings in PlatformIO INI\nDESCRIPTION: Example of overriding default board settings for the SparkFun MicroMod Teensy. Demonstrates changing the microcontroller and MCU frequency using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/teensy/teensymm.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:teensymm]\nplatform = teensy\nboard = teensymm\n\n; change microcontroller\nboard_build.mcu = imxrt1062\n\n; change MCU frequency\nboard_build.f_cpu = 600000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring MKR Vidor 4000 Board in platformio.ini\nDESCRIPTION: Basic configuration for the MKR Vidor 4000 board in the project's platformio.ini file. This sets the platform to atmelsam and specifies the board as mkrvidor4000.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/mkrvidor4000.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:mkrvidor4000]\nplatform = atmelsam\nboard = mkrvidor4000\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Adafruit Metro M0 Express\nDESCRIPTION: Configuration for specifying the upload protocol for Adafruit Metro M0 Express in PlatformIO. This example sets the upload protocol to sam-ba, which is also the default protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_metro_m0.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_metro_m0]\nplatform = atmelsam\nboard = adafruit_metro_m0\n\nupload_protocol = sam-ba\n```\n\n----------------------------------------\n\nTITLE: Customizing LOGISENSES Senses Weizen Board Parameters\nDESCRIPTION: Extended PlatformIO configuration showing how to override default board settings like microcontroller and CPU frequency for the LOGISENSES Senses Weizen board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/sensesiot_weizen.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:sensesiot_weizen]\nplatform = espressif32\nboard = sensesiot_weizen\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring ATmega88 Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the ATmega88 board in the PlatformIO project configuration file. It sets the platform to atmelavr and specifies the board as ATmega88.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega88.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega88]\nplatform = atmelavr\nboard = ATmega88\n```\n\n----------------------------------------\n\nTITLE: Customizing Armstrap Eagle 1024 Board Settings\nDESCRIPTION: Example of overriding default board settings in the PlatformIO configuration. Shows how to change the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/armstrap_eagle1024.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:armstrap_eagle1024]\nplatform = ststm32\nboard = armstrap_eagle1024\n\n; change microcontroller\nboard_build.mcu = stm32f417vgt6\n\n; change MCU frequency\nboard_build.f_cpu = 168000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced MS51BA9AE Board Configuration with Custom Settings\nDESCRIPTION: Extended PlatformIO configuration showing how to override default board settings including microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/MS51BA9AE.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:MS51BA9AE]\nplatform = intel_mcs51\nboard = MS51BA9AE\n\n; change microcontroller\nboard_build.mcu = ms51ba9ae\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Board Configuration for STC8G1K17\nDESCRIPTION: Basic configuration example showing how to set up a PlatformIO project environment for the STC8G1K17 board using the intel_mcs51 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8G1K17.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8G1K17]\nplatform = intel_mcs51\nboard = STC8G1K17\n```\n\n----------------------------------------\n\nTITLE: Customizing UBW32 MX795 Board Settings in PlatformIO\nDESCRIPTION: This code snippet illustrates how to override default settings for the UBW32 MX795 board in a PlatformIO project. It shows examples of changing the microcontroller and MCU frequency using board-specific options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/microchippic32/ubw32_mx795.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ubw32_mx795]\nplatform = microchippic32\nboard = ubw32_mx795\n\n; change microcontroller\nboard_build.mcu = 32MX795F512L\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: STM32F413CH Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the STM32F413CH board\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F413CH.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F413CH]\nplatform = ststm32\nboard = genericSTM32F413CH\n\nupload_protocol = serial\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU Settings\nDESCRIPTION: Configuration with custom microcontroller and frequency settings for the FRDM-KW24D512 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/freescalekinetis/frdm_kw24d.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:frdm_kw24d]\nplatform = freescalekinetis\nboard = frdm_kw24d\n\n; change microcontroller\nboard_build.mcu = mkw24d512\n\n; change MCU frequency\nboard_build.f_cpu = 50000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Olimex STM32-P405\nDESCRIPTION: Basic PlatformIO configuration for the Olimex STM32-P405 board in the project's platformio.ini file. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/olimex_p405.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:olimex_p405]\nplatform = ststm32\nboard = olimex_p405\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for STM32F411CE Board\nDESCRIPTION: Basic PlatformIO configuration for the STM32F411CE board. Sets the platform to ststm32 and specifies the board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F411CE.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F411CE]\nplatform = ststm32\nboard = genericSTM32F411CE\n```\n\n----------------------------------------\n\nTITLE: Customizing Arduino Nano 33 BLE Board Settings\nDESCRIPTION: Example of overriding default board settings in the platformio.ini file. It demonstrates changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/nano33ble.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nano33ble]\nplatform = nordicnrf52\nboard = nano33ble\n\n; change microcontroller\nboard_build.mcu = nrf52840\n\n; change MCU frequency\nboard_build.f_cpu = 64000000L\n```\n\n----------------------------------------\n\nTITLE: Overriding Default HelvePic32 Settings in PlatformIO INI File\nDESCRIPTION: This snippet demonstrates how to override default HelvePic32 settings in the PlatformIO project configuration file. It shows examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/microchippic32/helvepic32.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:helvepic32]\nplatform = microchippic32\nboard = helvepic32\n\n; change microcontroller\nboard_build.mcu = 32MX250F128B\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring ESP-WROOM-02 Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the Espressif ESP-WROOM-02 board in the PlatformIO project configuration file. It sets the platform and board options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/esp_wroom_02.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp_wroom_02]\nplatform = espressif8266\nboard = esp_wroom_02\n```\n\n----------------------------------------\n\nTITLE: Advanced ATtiny13 Board Configuration with Custom Settings\nDESCRIPTION: Extended configuration for ATtiny13 board with custom microcontroller and frequency settings. Demonstrates how to override default board settings using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/attiny13.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:attiny13]\nplatform = atmelavr\nboard = attiny13\n\n; change microcontroller\nboard_build.mcu = attiny13\n\n; change MCU frequency\nboard_build.f_cpu = 9600000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for u-blox C030-R410M IoT\nDESCRIPTION: Configuration to set the upload protocol for the u-blox C030-R410M IoT board. In this example, it's set to 'stlink'.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/ublox_c030_r410m.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:ublox_c030_r410m]\nplatform = ststm32\nboard = ublox_c030_r410m\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Customizing STM32F423RH Board Settings\nDESCRIPTION: Example of overriding default board settings in platformio.ini, such as changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F423RH.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F423RH]\nplatform = ststm32\nboard = genericSTM32F423RH\n\n; change microcontroller\nboard_build.mcu = stm32f423rht6\n\n; change MCU frequency\nboard_build.f_cpu = 100000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Adafruit MatrixPortal ESP32-S3 Settings\nDESCRIPTION: Example of overriding default board settings in platformio.ini. It demonstrates how to change the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/adafruit_matrixportal_esp32s3.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_matrixportal_esp32s3]\nplatform = espressif32\nboard = adafruit_matrixportal_esp32s3\n\n; change microcontroller\nboard_build.mcu = esp32s3\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU and Frequency Settings\nDESCRIPTION: Extended configuration example showing how to override default board settings like microcontroller model and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_l476rg.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_l476rg]\nplatform = ststm32\nboard = nucleo_l476rg\n\n; change microcontroller\nboard_build.mcu = stm32l476rgt6\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Arduino Due (USB Native Port) in PlatformIO INI\nDESCRIPTION: Basic configuration for the Arduino Due (USB Native Port) board in the PlatformIO project configuration file. It specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/dueUSB.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:dueUSB]\nplatform = atmelsam\nboard = dueUSB\n```\n\n----------------------------------------\n\nTITLE: Customizing STM32F103VF Board Settings\nDESCRIPTION: Example of overriding default board settings in platformio.ini, such as changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103VF.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103VF]\nplatform = ststm32\nboard = genericSTM32F103VF\n\n; change microcontroller\nboard_build.mcu = stm32f103vft6\n\n; change MCU frequency\nboard_build.f_cpu = 72000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration with Custom Settings\nDESCRIPTION: Extended configuration example showing how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/engduinov3.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:engduinov3]\nplatform = atmelavr\nboard = engduinov3\n\n; change microcontroller\nboard_build.mcu = atmega32u4\n\n; change MCU frequency\nboard_build.f_cpu = 8000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced N79E854 Board Configuration\nDESCRIPTION: Extended PlatformIO configuration demonstrating how to override default board settings including microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/N79E854.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:N79E854]\nplatform = intel_mcs51\nboard = N79E854\n\n; change microcontroller\nboard_build.mcu = n79e854\n\n; change MCU frequency\nboard_build.f_cpu = 22118400L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic ATmega644P Board Settings in PlatformIO\nDESCRIPTION: Basic configuration for the ATmega644P board in the project's platformio.ini file. This snippet specifies the platform (atmelavr) and board (ATmega644P).\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega644P.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega644P]\nplatform = atmelavr\nboard = ATmega644P\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Protocol for FeatherS2\nDESCRIPTION: Configuration to specify the upload protocol for the Unexpected Maker FeatherS2 board. This example uses the default esptool protocol, but the board supports multiple uploading methods.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/um_feathers2.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:um_feathers2]\nplatform = espressif32\nboard = um_feathers2\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring 96Boards B96B-F446VE Board in PlatformIO\nDESCRIPTION: Basic configuration for the 96Boards B96B-F446VE board in the project's platformio.ini file. This sets up the STM32 platform and specifies the board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/b96b_f446ve.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:b96b_f446ve]\nplatform = ststm32\nboard = b96b_f446ve\n```\n\n----------------------------------------\n\nTITLE: Customizing SDT32625B Board Settings in PlatformIO INI File\nDESCRIPTION: This snippet demonstrates how to override default SDT32625B board settings in the PlatformIO configuration. It shows examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/maxim32/sdt32625b.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:sdt32625b]\nplatform = maxim32\nboard = sdt32625b\n\n; change microcontroller\nboard_build.mcu = max32625itk\n\n; change MCU frequency\nboard_build.f_cpu = 96000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Adafruit pyBadge M4 Express\nDESCRIPTION: Configuration to change the upload protocol for the Adafruit pyBadge M4 Express board in PlatformIO. This example sets the upload protocol to sam-ba.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_pybadge_m4.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_pybadge_m4]\nplatform = atmelsam\nboard = adafruit_pybadge_m4\n\nupload_protocol = sam-ba\n```\n\n----------------------------------------\n\nTITLE: Basic N79E854 Board Configuration\nDESCRIPTION: Basic PlatformIO configuration for Generic N79E854 board setup using the intel_mcs51 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/N79E854.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:N79E854]\nplatform = intel_mcs51\nboard = N79E854\n```\n\n----------------------------------------\n\nTITLE: Customizing D-duino-32 MCU Settings\nDESCRIPTION: Example showing how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/d-duino-32.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:d-duino-32]\nplatform = espressif32\nboard = d-duino-32\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: ESP32 Board Specifications Table in RST Format\nDESCRIPTION: RST-formatted table containing detailed specifications for various ESP32 development boards including processor type, clock speed, memory configurations, and platform references\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/olimex-arm-usb-ocd-h.rst#2025-04-10_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n* - :ref:`board_espressif32_um_tinys2`\n      - :ref:`platform_espressif32`\n      - External\n      - ESP32S2\n      - 240MHz\n      - 4MB\n      - 320KB\n    * - :ref:`board_espressif32_um_tinys3`\n      - :ref:`platform_espressif32`\n      - External\n      - ESP32S3\n      - 240MHz\n      - 8MB\n      - 320KB\n```\n\n----------------------------------------\n\nTITLE: Customizing Arduino Portenta H7 (M4 core) Board Settings in PlatformIO\nDESCRIPTION: Advanced configuration for the Arduino Portenta H7 (M4 core) board with custom microcontroller and frequency settings. This demonstrates how to override default board settings using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/portenta_h7_m4.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:portenta_h7_m4]\nplatform = ststm32\nboard = portenta_h7_m4\n\n; change microcontroller\nboard_build.mcu = stm32h747xih6\n\n; change MCU frequency\nboard_build.f_cpu = 480000000L\n```\n\n----------------------------------------\n\nTITLE: STM32F103RF Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the STM32F103RF board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103RF.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103RF]\nplatform = ststm32\nboard = genericSTM32F103RF\n\nupload_protocol = serial\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for Heltec CubeCell Solar Sensor\nDESCRIPTION: Basic configuration example for setting up the Heltec CubeCell Capsule Solar Sensor board in platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/heltec-cubecell/cubecell_capsule_solar_sensor.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:cubecell_capsule_solar_sensor]\nplatform = heltec-cubecell\nboard = cubecell_capsule_solar_sensor\n```\n\n----------------------------------------\n\nTITLE: Setting up PlatformIO Configuration for Arduino Opta\nDESCRIPTION: Basic PlatformIO configuration for the Arduino Opta board. This sets up the essential environment with the STM32 platform and specifies the board as 'opta'.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/opta.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:opta]\nplatform = ststm32\nboard = opta\n```\n\n----------------------------------------\n\nTITLE: Custom MCU and Frequency Configuration for Adafruit QT Py M0\nDESCRIPTION: Advanced configuration for the Adafruit QT Py M0 board that overrides the default microcontroller and CPU frequency settings using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_qt_py_m0.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_qt_py_m0]\nplatform = atmelsam\nboard = adafruit_qt_py_m0\n\n; change microcontroller\nboard_build.mcu = samd21e18a\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for WEMOS D1 MINI ESP32 in PlatformIO\nDESCRIPTION: Configuration for specifying the upload protocol in the PlatformIO environment. This example explicitly sets esptool as the upload protocol, which is also the default method for this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/wemos_d1_mini32.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:wemos_d1_mini32]\nplatform = espressif32\nboard = wemos_d1_mini32\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Customizing Adafruit Feather ESP32-S3 TFT Board Settings\nDESCRIPTION: Example of overriding default board settings in the platformio.ini file. It demonstrates how to change the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/adafruit_feather_esp32s3_tft.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_feather_esp32s3_tft]\nplatform = espressif32\nboard = adafruit_feather_esp32s3_tft\n\n; change microcontroller\nboard_build.mcu = esp32s3\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Arduino MKR WAN 1310 Board Settings\nDESCRIPTION: Example of overriding default board settings, such as microcontroller and CPU frequency, in a PlatformIO project configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/mkrwan1310.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:mkrwan1310]\nplatform = atmelsam\nboard = mkrwan1310\n\n; change microcontroller\nboard_build.mcu = samd21g18a\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for M5Stack GREY ESP32\nDESCRIPTION: Configuration example showing how to specify the upload protocol for M5Stack GREY ESP32. This explicitly sets the upload method to esptool (which is the default, but shown here for demonstration).\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/m5stack-grey.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:m5stack-grey]\nplatform = espressif32\nboard = m5stack-grey\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring Pycom LoPy Board in PlatformIO\nDESCRIPTION: This snippet shows how to configure the Pycom LoPy board in the PlatformIO project configuration file. It sets the platform to espressif32 and the board to lopy.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/lopy.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:lopy]\nplatform = espressif32\nboard = lopy\n```\n\n----------------------------------------\n\nTITLE: ESP32 Thing Plus Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the ESP32 Thing Plus board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32thing_plus.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32thing_plus]\nplatform = espressif32\nboard = esp32thing_plus\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Advanced MCU Configuration for STM32 Core Board F401RC\nDESCRIPTION: Extended configuration example showing how to override default microcontroller and frequency settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/coreboard_f401rc.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:coreboard_f401rc]\nplatform = ststm32\nboard = coreboard_f401rc\n\n; change microcontroller\nboard_build.mcu = stm32f401rct6\n\n; change MCU frequency\nboard_build.f_cpu = 84000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Generic ML51PC0AE Board Settings in PlatformIO\nDESCRIPTION: This snippet demonstrates how to override default settings for the Generic ML51PC0AE board in a PlatformIO project. It shows how to change the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/ML51PC0AE.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ML51PC0AE]\nplatform = intel_mcs51\nboard = ML51PC0AE\n\n; change microcontroller\nboard_build.mcu = ml51pc0ae\n\n; change MCU frequency\nboard_build.f_cpu = 24000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Hornbill ESP32 Dev\nDESCRIPTION: Demonstrates how to specify the upload protocol in PlatformIO configuration, using esptool as an example.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/hornbill32dev.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:hornbill32dev]\nplatform = espressif32\nboard = hornbill32dev\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring ST STM32F3DISCOVERY Board in PlatformIO\nDESCRIPTION: This snippet shows how to configure the ST STM32F3DISCOVERY board in a PlatformIO project's configuration file. It sets the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_f303vc.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_f303vc]\nplatform = ststm32\nboard = disco_f303vc\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Freenove ESP32-Wrover Board\nDESCRIPTION: Basic project configuration for Freenove ESP32-Wrover board using the PlatformIO platform. Sets the board identifier to use the Espressif32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/freenove_esp32_wrover.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:freenove_esp32_wrover]\nplatform = espressif32\nboard = freenove_esp32_wrover\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with Custom Settings\nDESCRIPTION: Example showing how to override default board settings like microcontroller and CPU frequency\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/valtrack_v4_mfw_esp32_c3.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:valtrack_v4_mfw_esp32_c3]\nplatform = espressif32\nboard = valtrack_v4_mfw_esp32_c3\n\n; change microcontroller\nboard_build.mcu = esp32c3\n\n; change MCU frequency\nboard_build.f_cpu = 160000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Protocol for Adafruit QT Py ESP32\nDESCRIPTION: Example configuration for explicitly setting the upload protocol in platformio.ini. This shows how to specify esptool as the upload method, which is also the default protocol for this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/adafruit_qtpy_esp32.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_qtpy_esp32]\nplatform = espressif32\nboard = adafruit_qtpy_esp32\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Customizing ST Nucleo L496ZG Board Parameters in PlatformIO\nDESCRIPTION: Advanced PlatformIO configuration for the ST Nucleo L496ZG board, demonstrating how to override default board settings such as microcontroller model and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_l496zg.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_l496zg]\nplatform = ststm32\nboard = nucleo_l496zg\n\n; change microcontroller\nboard_build.mcu = stm32l496zgt6\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for STM32F417VG\nDESCRIPTION: Configuration for changing the upload protocol to serial for the STM32F417VG board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F417VG.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F417VG]\nplatform = ststm32\nboard = genericSTM32F417VG\n\nupload_protocol = serial\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration in PlatformIO\nDESCRIPTION: Basic configuration setup for PHYTEC reel board v2 in platformio.ini file, specifying the platform and board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/reel_board_v2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:reel_board_v2]\nplatform = nordicnrf52\nboard = reel_board_v2\n```\n\n----------------------------------------\n\nTITLE: Basic STC8G2K32S4 Board Configuration in PlatformIO\nDESCRIPTION: Basic configuration for STC8G2K32S4 board in platformio.ini file. Sets up the platform and board for Intel MCS51 development.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8G2K32S4.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8G2K32S4]\nplatform = intel_mcs51\nboard = STC8G2K32S4\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU Settings\nDESCRIPTION: Extended configuration example showing how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/ublox_bmd345eval_nrf52840.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ublox_bmd345eval_nrf52840]\nplatform = nordicnrf52\nboard = ublox_bmd345eval_nrf52840\n\n; change microcontroller\nboard_build.mcu = nrf52840\n\n; change MCU frequency\nboard_build.f_cpu = 64000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Moteino M0 Board in PlatformIO INI File\nDESCRIPTION: This snippet demonstrates how to configure the Moteino M0 board in the PlatformIO project configuration file. It includes the basic setup and examples of how to override default board settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/moteino_zero.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:moteino_zero]\nplatform = atmelsam\nboard = moteino_zero\n\n; change microcontroller\nboard_build.mcu = samd21g18a\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Teensy++ 2.0 Board Settings\nDESCRIPTION: This snippet demonstrates how to override default Teensy++ 2.0 settings in the PlatformIO configuration. It shows examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/teensy/teensy2pp.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:teensy2pp]\nplatform = teensy\nboard = teensy2pp\n\n; change microcontroller\nboard_build.mcu = at90usb1286\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Basic OLIMEXINO-STM32 Board Configuration\nDESCRIPTION: Basic configuration for setting up an environment targeting the OLIMEXINO-STM32 board using the STM32 platform\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/olimexino.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:olimexino]\nplatform = ststm32\nboard = olimexino\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Protocol for ESP32-S3-Box\nDESCRIPTION: Example of setting a specific upload protocol (esptool) for the ESP32-S3-Box board in platformio.ini.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32s3box.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32s3box]\nplatform = espressif32\nboard = esp32s3box\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Customizing ESP32S3 CAM LCD Board Settings in PlatformIO\nDESCRIPTION: Advanced configuration for customizing ESP32S3 CAM LCD board settings like microcontroller type and CPU frequency using board-specific options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32s3camlcd.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32s3camlcd]\nplatform = espressif32\nboard = esp32s3camlcd\n\n; change microcontroller\nboard_build.mcu = esp32s3\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration in platformio.ini\nDESCRIPTION: Configures the basic environment settings for the Adafruit LED Glasses Driver nRF52840 board\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/adafruit_ledglasses_nrf52840.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_ledglasses_nrf52840]\nplatform = nordicnrf52\nboard = adafruit_ledglasses_nrf52840\n```\n\n----------------------------------------\n\nTITLE: Customizing TTGO T-OI PLUS Board Configuration in PlatformIO\nDESCRIPTION: Advanced configuration that demonstrates how to override default board settings such as microcontroller type and CPU frequency in the PlatformIO project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/ttgo-t-oi-plus.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ttgo-t-oi-plus]\nplatform = espressif32\nboard = ttgo-t-oi-plus\n\n; change microcontroller\nboard_build.mcu = esp32c3\n\n; change MCU frequency\nboard_build.f_cpu = 160000000L\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Board Tables\nDESCRIPTION: Table structures documenting specifications for various microcontroller boards, including details about MCU, frequency, memory, and debug capabilities. Organized by manufacturer.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debugging.rst#2025-04-10_snippet_2\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. list-table::\n    :header-rows:  1\n\n    * - Name\n      - Platform\n      - Debug\n      - MCU\n      - Frequency\n      - Flash\n      - RAM\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic PlatformIO Environment for FK407M1 Board\nDESCRIPTION: Basic configuration for setting up a PlatformIO project environment for the FK407M1 board. This snippet defines the platform as STM32 and specifies the board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/fk407m1.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:fk407m1]\nplatform = ststm32\nboard = fk407m1\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Freenove ESP32-Wrover in PlatformIO\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the Freenove ESP32-Wrover board. The default protocol is 'esptool' but this can be changed to other supported protocols.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/freenove_esp32_wrover.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:freenove_esp32_wrover]\nplatform = espressif32\nboard = freenove_esp32_wrover\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Customizing RushUp Cloud-JAM Board Settings\nDESCRIPTION: This snippet demonstrates how to override default board settings in the PlatformIO configuration. It shows examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/cloud_jam.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:cloud_jam]\nplatform = ststm32\nboard = cloud_jam\n\n; change microcontroller\nboard_build.mcu = stm32f401ret6\n\n; change MCU frequency\nboard_build.f_cpu = 84000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced PrntrBoard V2 Configuration\nDESCRIPTION: Extended configuration demonstrating how to override default microcontroller and frequency settings for PrntrBoard V2.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/prntr_v2.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:prntr_v2]\nplatform = ststm32\nboard = prntr_v2\n\n; change microcontroller\nboard_build.mcu = stm32f407vet6\n\n; change MCU frequency\nboard_build.f_cpu = 168000000L\n```\n\n----------------------------------------\n\nTITLE: Basic Sonoff S20 Board Configuration\nDESCRIPTION: Basic configuration setup for Sonoff S20 board in PlatformIO's project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/sonoff_s20.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:sonoff_s20]\nplatform = espressif8266\nboard = sonoff_s20\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration with Custom Settings\nDESCRIPTION: Extended configuration example showing how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/protrinket5.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:protrinket5]\nplatform = atmelavr\nboard = protrinket5\n\n; change microcontroller\nboard_build.mcu = atmega328p\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring TTGO T-Watch in platformio.ini\nDESCRIPTION: Basic configuration for the TTGO T-Watch board in a PlatformIO project configuration file. This sets up the essential parameters needed for building projects for this ESP32-based board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/ttgo-t-watch.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ttgo-t-watch]\nplatform = espressif32\nboard = ttgo-t-watch\n```\n\n----------------------------------------\n\nTITLE: Advanced STM32F407IG Board Configuration\nDESCRIPTION: Extended configuration showing how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F407IGT6.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F407IGT6]\nplatform = ststm32\nboard = genericSTM32F407IGT6\n\n; change microcontroller\nboard_build.mcu = stm32f407igt6\n\n; change MCU frequency\nboard_build.f_cpu = 168000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Adafruit Metro M0 Express Board Settings\nDESCRIPTION: Configuration for customizing the Adafruit Metro M0 Express board settings in PlatformIO, including changing the microcontroller and MCU frequency. This demonstrates how to override default board settings using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_metro_m0.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_metro_m0]\nplatform = atmelsam\nboard = adafruit_metro_m0\n\n; change microcontroller\nboard_build.mcu = samd21g18a\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Protocol for RYMCU ESP32-DevKitC in PlatformIO\nDESCRIPTION: Configuration example showing how to specify the upload protocol (esptool) for the RYMCU ESP32-DevKitC board in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/rymcu-esp32-devkitc.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:rymcu-esp32-devkitc]\nplatform = espressif32\nboard = rymcu-esp32-devkitc\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Customizing Calliope mini Board Settings in PlatformIO\nDESCRIPTION: Advanced configuration for the Calliope mini board that demonstrates how to customize microcontroller and CPU frequency settings by overriding the default board configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf51/calliope_mini.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:calliope_mini]\nplatform = nordicnrf51\nboard = calliope_mini\n\n; change microcontroller\nboard_build.mcu = nrf51822\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Adafruit Feather ESP32-S2 TFT\nDESCRIPTION: Configuration example showing how to specify the upload protocol in PlatformIO. This sets the upload protocol to esptool, which is the default method for this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/adafruit_feather_esp32s2_tft.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_feather_esp32s2_tft]\nplatform = espressif32\nboard = adafruit_feather_esp32s2_tft\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring ESP32vn IoT Uno Basic Environment in platformio.ini\nDESCRIPTION: Basic configuration for ESP32vn IoT Uno board using the Espressif32 platform in platformio.ini file. This sets up the minimal required settings for a project targeting the ESP32vn IoT Uno board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32vn-iot-uno.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32vn-iot-uno]\nplatform = espressif32\nboard = esp32vn-iot-uno\n```\n\n----------------------------------------\n\nTITLE: Customizing MKR Sharky Board Settings in PlatformIO\nDESCRIPTION: This snippet demonstrates how to override default MKR Sharky settings in the platformio.ini file. It shows examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/mkr_sharky.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:mkr_sharky]\nplatform = ststm32\nboard = mkr_sharky\n\n; change microcontroller\nboard_build.mcu = stm32wb55cg\n\n; change MCU frequency\nboard_build.f_cpu = 64000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced N79E855 Board Configuration with Custom Settings\nDESCRIPTION: Extended configuration example showing how to customize microcontroller and frequency settings for the N79E855 board in PlatformIO.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/N79E855.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:N79E855]\nplatform = intel_mcs51\nboard = N79E855\n\n; change microcontroller\nboard_build.mcu = n79e855\n\n; change MCU frequency\nboard_build.f_cpu = 22118400L\n```\n\n----------------------------------------\n\nTITLE: Customizing MCU and CPU Frequency for Blues Swan R5\nDESCRIPTION: Extended PlatformIO configuration that overrides the default microcontroller and CPU frequency settings for the Blues Swan R5 board. This demonstrates how to customize board-specific settings in the project configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/blues_swan_r5.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:blues_swan_r5]\nplatform = ststm32\nboard = blues_swan_r5\n\n; change microcontroller\nboard_build.mcu = stm32l4r5ziy6\n\n; change MCU frequency\nboard_build.f_cpu = 120000000L\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the board\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/lolin_d32.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:lolin_d32]\nplatform = espressif32\nboard = lolin_d32\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Customizing Holyiot YJ-16019 Board Settings in PlatformIO\nDESCRIPTION: Advanced configuration example showing how to override default board settings such as microcontroller type and CPU frequency in the PlatformIO project configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/holyiot_yj16019.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:holyiot_yj16019]\nplatform = nordicnrf52\nboard = holyiot_yj16019\n\n; change microcontroller\nboard_build.mcu = nrf52832\n\n; change MCU frequency\nboard_build.f_cpu = 64000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced M5Stack CoreS3 Configuration with MCU Settings\nDESCRIPTION: Extended board configuration showing how to override default microcontroller and frequency settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/m5stack-cores3.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:m5stack-cores3]\nplatform = espressif32\nboard = m5stack-cores3\n\n; change microcontroller\nboard_build.mcu = esp32s3\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Protocol for ESP-WROVER-KIT (INI)\nDESCRIPTION: Example of specifying the upload protocol for the ESP-WROVER-KIT board in PlatformIO configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp-wrover-kit.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp-wrover-kit]\nplatform = espressif32\nboard = esp-wrover-kit\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for M5Stack-Core Ink in PlatformIO\nDESCRIPTION: Configuration showing how to specify the upload protocol for the M5Stack-Core Ink board. This example explicitly sets the esptool protocol, which is the default upload method.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/m5stack-coreink.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:m5stack-coreink]\nplatform = espressif32\nboard = m5stack-coreink\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic PlatformIO Environment for TTGO T1 ESP32 Board\nDESCRIPTION: The basic PlatformIO project configuration for the TTGO T1 board. It specifies the Espressif32 platform and the TTGO T1 board identifier.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/ttgo-t1.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ttgo-t1]\nplatform = espressif32\nboard = ttgo-t1\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration for MGBOT IOTIK 32A\nDESCRIPTION: Basic PlatformIO configuration for setting up a project with MGBOT IOTIK 32A board using the Espressif32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/mgbot-iotik32a.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:mgbot-iotik32a]\nplatform = espressif32\nboard = mgbot-iotik32a\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for OROCA EduBot\nDESCRIPTION: Basic environment configuration for OROCA EduBot board using PlatformIO. Sets up the essential platform and board parameters.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/oroca_edubot.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:oroca_edubot]\nplatform = espressif32\nboard = oroca_edubot\n```\n\n----------------------------------------\n\nTITLE: Configuring TI FraunchPad MSP-EXP430FR5739LP Board in PlatformIO\nDESCRIPTION: This snippet shows how to configure the TI FraunchPad MSP-EXP430FR5739LP board in the PlatformIO project configuration file. It sets the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/timsp430/lpmsp430fr5739.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:lpmsp430fr5739]\nplatform = timsp430\nboard = lpmsp430fr5739\n```\n\n----------------------------------------\n\nTITLE: Basic ATmega328 Board Configuration in PlatformIO\nDESCRIPTION: Basic PlatformIO configuration for ATmega328 board setup using the atmelavr platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega328.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega328]\nplatform = atmelavr\nboard = ATmega328\n```\n\n----------------------------------------\n\nTITLE: Overriding Default ATmega328PB Settings in PlatformIO Configuration\nDESCRIPTION: This snippet demonstrates how to override default settings for the ATmega328PB board in the PlatformIO configuration. It shows examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega328PB.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega328PB]\nplatform = atmelavr\nboard = ATmega328PB\n\n; change microcontroller\nboard_build.mcu = atmega328pb\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU and Frequency Settings\nDESCRIPTION: Extended configuration example showing how to override default microcontroller and frequency settings for the Mbed Connect Cloud board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/mbed_connect_odin.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:mbed_connect_odin]\nplatform = ststm32\nboard = mbed_connect_odin\n\n; change microcontroller\nboard_build.mcu = stm32f439ziy6\n\n; change MCU frequency\nboard_build.f_cpu = 168000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring ESPino32 Board in platformio.ini\nDESCRIPTION: This snippet shows how to configure the ESPino32 board in the PlatformIO project configuration file. It sets the platform and board, and demonstrates how to override default board settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/espino32.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:espino32]\nplatform = espressif32\nboard = espino32\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Franzininho WiFi Board Settings\nDESCRIPTION: Example of overriding default board settings in platformio.ini, such as changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32-s2-franzininho.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32-s2-franzininho]\nplatform = espressif32\nboard = esp32-s2-franzininho\n\n; change microcontroller\nboard_build.mcu = esp32s2\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Arduino Zero\nDESCRIPTION: This snippet shows how to set the upload protocol for the Arduino Zero board in PlatformIO. It sets the protocol to cmsis-dap, which is the default for this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/zero.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:zero]\nplatform = atmelsam\nboard = zero\n\nupload_protocol = cmsis-dap\n```\n\n----------------------------------------\n\nTITLE: Customizing STC15F2K16S2 Board Settings in platformio.ini\nDESCRIPTION: Advanced configuration for the STC15F2K16S2 board with custom microcontroller and frequency settings. This example shows how to override default board settings in the project configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15F2K16S2.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15F2K16S2]\nplatform = intel_mcs51\nboard = STC15F2K16S2\n\n; change microcontroller\nboard_build.mcu = stc15f2k16s2\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Customizing KITS ESP32 EDU Board Parameters in PlatformIO\nDESCRIPTION: This snippet demonstrates how to override default board settings in the PlatformIO configuration. It shows examples of changing the microcontroller type and CPU frequency using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/kits-edu.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:kits-edu]\nplatform = espressif32\nboard = kits-edu\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Arduino Ethernet Board Settings in PlatformIO INI File\nDESCRIPTION: This snippet demonstrates how to override default Arduino Ethernet board settings in the PlatformIO project configuration. It shows examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ethernet.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ethernet]\nplatform = atmelavr\nboard = ethernet\n\n; change microcontroller\nboard_build.mcu = atmega328p\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: PlatformIO Project Configuration\nDESCRIPTION: Configuration file for Nordic nRF52 based Arduino Nano 33 BLE board with custom test framework settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/advanced/unit-testing/frameworks/custom/examples/custom_unity_library.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nano33ble]\nplatform = nordicnrf52\nboard = nano33ble\nframework = arduino\ntest_framework = custom\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for SparkFun ESP32 Thing Plus C\nDESCRIPTION: Basic configuration for using the SparkFun ESP32 Thing Plus C board in PlatformIO. This snippet shows how to specify the board in the project's configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/sparkfun_esp32s2_thing_plus_c.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:sparkfun_esp32s2_thing_plus_c]\nplatform = espressif32\nboard = sparkfun_esp32s2_thing_plus_c\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for ATmega1280\nDESCRIPTION: Basic configuration setting for ATmega1280 board in platformio.ini file, specifying the platform and board type.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega1280.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega1280]\nplatform = atmelavr\nboard = ATmega1280\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic STC8C2K60S4 Board in PlatformIO\nDESCRIPTION: Basic configuration for setting up a PlatformIO project environment for the Generic STC8C2K60S4 board using the intel_mcs51 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8C2K60S4.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8C2K60S4]\nplatform = intel_mcs51\nboard = STC8C2K60S4\n```\n\n----------------------------------------\n\nTITLE: Customizing 96Boards B96B-F446VE Board Settings\nDESCRIPTION: Example of overriding default board settings in platformio.ini, such as changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/b96b_f446ve.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:b96b_f446ve]\nplatform = ststm32\nboard = b96b_f446ve\n\n; change microcontroller\nboard_build.mcu = stm32f446vet6\n\n; change MCU frequency\nboard_build.f_cpu = 168000000L\n```\n\n----------------------------------------\n\nTITLE: Setting CPU Frequency for ESP32\nDESCRIPTION: Configuration for setting the ESP32 CPU frequency to 160MHz using board_build.f_cpu option.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/espressif32_extra.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\n; set frequency to 160MHz\nboard_build.f_cpu = 160000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic IAP15W105 Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the Generic IAP15W105 board in the PlatformIO project configuration file. It sets the platform to intel_mcs51 and specifies the board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/IAP15W105.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:IAP15W105]\nplatform = intel_mcs51\nboard = IAP15W105\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for STC8G1K08T Board\nDESCRIPTION: A minimal configuration example for the STC8G1K08T board in the platformio.ini file. This sets up the board with the intel_mcs51 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8G1K08T.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8G1K08T]\nplatform = intel_mcs51\nboard = STC8G1K08T\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Fubarino Mini 2.0 Board\nDESCRIPTION: Basic configuration example for setting up a PlatformIO environment for the Fubarino Mini 2.0 board. This snippet defines the platform and board ID in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/microchippic32/fubarino_mini_20.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:fubarino_mini_20]\nplatform = microchippic32\nboard = fubarino_mini_20\n```\n\n----------------------------------------\n\nTITLE: Customizing ST Nucleo F207ZG Board Parameters in PlatformIO\nDESCRIPTION: Example showing how to override default board settings such as microcontroller type and CPU frequency in the PlatformIO configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f207zg.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f207zg]\nplatform = ststm32\nboard = nucleo_f207zg\n\n; change microcontroller\nboard_build.mcu = stm32f207zgt6\n\n; change MCU frequency\nboard_build.f_cpu = 120000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Nordic nRF52833-DK Board Settings\nDESCRIPTION: This snippet demonstrates how to override default board settings in the PlatformIO configuration. It shows examples of changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/nrf52833_dk.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nrf52833_dk]\nplatform = nordicnrf52\nboard = nrf52833_dk\n\n; change microcontroller\nboard_build.mcu = nrf52833\n\n; change MCU frequency\nboard_build.f_cpu = 64000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Generic ML51BB9AE Board in projectconf\nDESCRIPTION: Basic configuration for using the Generic ML51BB9AE board in a PlatformIO project. This snippet shows how to specify the board in the project's configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/ML51BB9AE.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ML51BB9AE]\nplatform = intel_mcs51\nboard = ML51BB9AE\n```\n\n----------------------------------------\n\nTITLE: Customizing Generic STC15W204S Board Settings in PlatformIO\nDESCRIPTION: Extended project configuration showing how to override default board settings like microcontroller model and CPU frequency in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15W204S.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15W204S]\nplatform = intel_mcs51\nboard = STC15W204S\n\n; change microcontroller\nboard_build.mcu = stc15w204s\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Customizing P-Nucleo WB55RG Board Settings in PlatformIO\nDESCRIPTION: This snippet demonstrates how to override default board settings such as microcontroller model and CPU frequency in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_wb55rg_p.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_wb55rg_p]\nplatform = ststm32\nboard = nucleo_wb55rg_p\n\n; change microcontroller\nboard_build.mcu = stm32wb55rg\n\n; change MCU frequency\nboard_build.f_cpu = 64000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Waveshare Open103Z\nDESCRIPTION: Configuration example for specifying the upload protocol for the Waveshare Open103Z board. Sets the protocol to ST-Link, which is the default.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/waveshare_open103z.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:waveshare_open103z]\nplatform = ststm32\nboard = waveshare_open103z\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration with Custom Settings\nDESCRIPTION: Extended configuration example showing how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15W103.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15W103]\nplatform = intel_mcs51\nboard = STC15W103\n\n; change microcontroller\nboard_build.mcu = stc15w103\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Adafruit Feather ESP32 V2\nDESCRIPTION: Configuration to specify the upload protocol for the Adafruit Feather ESP32 V2 board. This example uses the default 'esptool' protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/adafruit_feather_esp32_v2.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_feather_esp32_v2]\nplatform = espressif32\nboard = adafruit_feather_esp32_v2\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic MS51FB9AE Board in PlatformIO Project\nDESCRIPTION: Basic configuration example for using the Generic MS51FB9AE board in a PlatformIO project configuration file. This specifies the Intel MCS-51 platform and the MS51FB9AE board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/MS51FB9AE.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:MS51FB9AE]\nplatform = intel_mcs51\nboard = MS51FB9AE\n```\n\n----------------------------------------\n\nTITLE: Configuring SODAQ Ndogo Board in PlatformIO\nDESCRIPTION: Basic configuration for setting up a PlatformIO project with the SODAQ Ndogo board. Uses the atmelavr platform with the sodaq_ndogo board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/sodaq_ndogo.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:sodaq_ndogo]\nplatform = atmelavr\nboard = sodaq_ndogo\n```\n\n----------------------------------------\n\nTITLE: Customizing STM32F411CC Board Settings\nDESCRIPTION: Example of overriding default board settings such as microcontroller model and CPU frequency in the project configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F411CC.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F411CC]\nplatform = ststm32\nboard = genericSTM32F411CC\n\n; change microcontroller\nboard_build.mcu = stm32f411ccu6\n\n; change MCU frequency\nboard_build.f_cpu = 100000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for BlackPill F401CE\nDESCRIPTION: PlatformIO configuration example demonstrating how to specify the upload protocol for the BlackPill F401CE board. This example uses the ST-Link protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/blackpill_f401ce.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:blackpill_f401ce]\nplatform = ststm32\nboard = blackpill_f401ce\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic TTGO T-OI PLUS Board Environment in PlatformIO\nDESCRIPTION: Basic configuration for setting up a PlatformIO project for the TTGO T-OI PLUS RISC-V ESP32-C3 board. This snippet defines the platform and board ID to use in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/ttgo-t-oi-plus.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ttgo-t-oi-plus]\nplatform = espressif32\nboard = ttgo-t-oi-plus\n```\n\n----------------------------------------\n\nTITLE: Basic STM32F103CB Board Configuration\nDESCRIPTION: Basic PlatformIO configuration for STM32F103CB board setup using the ststm32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103CB.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103CB]\nplatform = ststm32\nboard = genericSTM32F103CB\n```\n\n----------------------------------------\n\nTITLE: Advanced ATtiny817 Board Configuration with Custom Settings\nDESCRIPTION: Extended configuration example showing how to customize microcontroller and frequency settings for the ATtiny817 board in PlatformIO.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/ATtiny817.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATtiny817]\nplatform = atmelmegaavr\nboard = ATtiny817\n\n; change microcontroller\nboard_build.mcu = attiny817\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Atmel SAMC21-XPRO Board Settings\nDESCRIPTION: Example of how to override default board settings like microcontroller model and CPU frequency in the PlatformIO configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/samc21_xpro.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:samc21_xpro]\nplatform = atmelsam\nboard = samc21_xpro\n\n; change microcontroller\nboard_build.mcu = samc21j18a\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO Environment for Generic STC12C5A48S2 Board\nDESCRIPTION: Basic configuration for setting up a PlatformIO environment targeting the Generic STC12C5A48S2 board with the Intel MCS-51 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC12C5A48S2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC12C5A48S2]\nplatform = intel_mcs51\nboard = STC12C5A48S2\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/st3dp001_eval.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:st3dp001_eval]\nplatform = ststm32\nboard = st3dp001_eval\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Testing Command with Extra Arguments in PlatformIO\nDESCRIPTION: This example demonstrates how to override the default testing command and add extra program arguments. It includes the program path and additional command-line arguments.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/env/options/test/test_testing_command.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = native\ntest_testing_command =\n  ${platformio.build_dir}/${this.__env__}/program\n  arg1\n  --option2\n  option2_value\n```\n\n----------------------------------------\n\nTITLE: Customizing MCU and Clock Settings for BL652 Development Kit\nDESCRIPTION: Extended configuration that demonstrates how to override default microcontroller and frequency settings for the BL652 Development Kit. This allows customizing the board's core parameters.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/laird_bl652_dvk.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:laird_bl652_dvk]\nplatform = nordicnrf52\nboard = laird_bl652_dvk\n\n; change microcontroller\nboard_build.mcu = nrf52832\n\n; change MCU frequency\nboard_build.f_cpu = 64000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Adafruit Bluefruit Micro Board Settings\nDESCRIPTION: This snippet demonstrates how to override default board settings in PlatformIO. It shows examples of changing the microcontroller and MCU frequency for the Adafruit Bluefruit Micro.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/bluefruitmicro.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:bluefruitmicro]\nplatform = atmelavr\nboard = bluefruitmicro\n\n; change microcontroller\nboard_build.mcu = atmega32u4\n\n; change MCU frequency\nboard_build.f_cpu = 8000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring LightBlue Bean+ Board in PlatformIO Project\nDESCRIPTION: Basic configuration for using the LightBlue Bean+ board in a PlatformIO project. This snippet shows how to specify the board in the platformio.ini configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/lightblue-beanplus.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:lightblue-beanplus]\nplatform = atmelavr\nboard = lightblue-beanplus\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Adafruit Bluefruit Micro\nDESCRIPTION: This code snippet shows how to configure a PlatformIO project for the Adafruit Bluefruit Micro board. It sets the platform to atmelavr and specifies the board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/bluefruitmicro.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:bluefruitmicro]\nplatform = atmelavr\nboard = bluefruitmicro\n```\n\n----------------------------------------\n\nTITLE: Customizing ST Nucleo WL55JC Board Settings\nDESCRIPTION: Example of overriding default board settings in PlatformIO configuration. Demonstrates changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_wl55jc.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_wl55jc]\nplatform = ststm32\nboard = nucleo_wl55jc\n\n; change microcontroller\nboard_build.mcu = stm32wl55jc\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Board Settings for WiFiduino32S3\nDESCRIPTION: Example showing how to override default board settings like microcontroller model and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/wifiduino32s3.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:wifiduino32s3]\nplatform = espressif32\nboard = wifiduino32s3\n\n; change microcontroller\nboard_build.mcu = esp32s3\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the board. The default protocol is esptool.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/lolin_d32_pro.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:lolin_d32_pro]\nplatform = espressif32\nboard = lolin_d32_pro\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for BluePill F103C8\nDESCRIPTION: Basic configuration in platformio.ini to set up a project for the BluePill F103C8 board using the STM32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/bluepill_f103c8_128k.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:bluepill_f103c8_128k]\nplatform = ststm32\nboard = bluepill_f103c8_128k\n```\n\n----------------------------------------\n\nTITLE: Customizing Board Parameters for Blinker WiFiduinoV2 (ESP32-C3)\nDESCRIPTION: Advanced configuration example showing how to override default hardware settings like microcontroller type and CPU frequency for the Blinker WiFiduinoV2 ESP32-C3 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/wifiduino32c3.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:wifiduino32c3]\nplatform = espressif32\nboard = wifiduino32c3\n\n; change microcontroller\nboard_build.mcu = esp32c3\n\n; change MCU frequency\nboard_build.f_cpu = 160000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing AVR-IoT WG Board Parameters in PlatformIO\nDESCRIPTION: Advanced configuration example demonstrating how to override default board settings in platformio.ini. This example shows how to change the microcontroller and CPU frequency for the AVR-IoT WG Development Board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/avr_iot_wg.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:avr_iot_wg]\nplatform = atmelmegaavr\nboard = avr_iot_wg\n\n; change microcontroller\nboard_build.mcu = atmega4808\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic ML56MD1AE Board in platformio.ini\nDESCRIPTION: This snippet shows how to configure the Generic ML56MD1AE board in the PlatformIO project configuration file. It sets the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/ML56MD1AE.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ML56MD1AE]\nplatform = intel_mcs51\nboard = ML56MD1AE\n```\n\n----------------------------------------\n\nTITLE: Basic STM32F407IG Board Configuration\nDESCRIPTION: Basic configuration for setting up a PlatformIO project with STM32F407IG board using the ststm32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F407IGT6.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F407IGT6]\nplatform = ststm32\nboard = genericSTM32F407IGT6\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic W79E2051 Board in PlatformIO\nDESCRIPTION: This snippet shows how to configure the Generic W79E2051 board in a PlatformIO project's configuration file (platformio.ini). It sets the platform to intel_mcs51 and specifies the board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/W79E2051.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:W79E2051]\nplatform = intel_mcs51\nboard = W79E2051\n```\n\n----------------------------------------\n\nTITLE: Defining MikroElektronika Hexiwear Board Specifications in reStructuredText\nDESCRIPTION: This snippet defines the specifications for the MikroElektronika Hexiwear board using a reStructuredText list table. It includes details such as debug interface, MCU model, clock frequency, flash memory, and RAM.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/freescalekinetis.rst#2025-04-10_snippet_2\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. list-table::\n    :header-rows:  1\n\n    * - Name\n      - Debug\n      - MCU\n      - Frequency\n      - Flash\n      - RAM\n    * - :ref:`board_freescalekinetis_hexiwear`\n      - External\n      - MK64FN1M0VDC12\n      - 120MHz\n      - 1MB\n      - 256KB\n```\n\n----------------------------------------\n\nTITLE: ESPDuino Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the ESPDuino board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/espduino.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:espduino]\nplatform = espressif8266\nboard = espduino\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration for PlatformIO\nDESCRIPTION: Basic environment configuration for Deneyap Mini v2 board in platformio.ini file\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/deneyapminiv2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:deneyapminiv2]\nplatform = espressif32\nboard = deneyapminiv2\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU and Frequency Settings\nDESCRIPTION: Extended configuration showing how to override default board settings like microcontroller model and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_f100rb.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_f100rb]\nplatform = ststm32\nboard = disco_f100rb\n\n; change microcontroller\nboard_build.mcu = stm32f100rbt6\n\n; change MCU frequency\nboard_build.f_cpu = 24000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU Settings\nDESCRIPTION: Extended PlatformIO configuration showing how to customize microcontroller and frequency settings for the BlackPill board\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/blackpill_f411ce.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:blackpill_f411ce]\nplatform = ststm32\nboard = blackpill_f411ce\n\n; change microcontroller\nboard_build.mcu = stm32f411ceu6\n\n; change MCU frequency\nboard_build.f_cpu = 100000000L\n```\n\n----------------------------------------\n\nTITLE: Custom MCU Configuration for BluePill F103C6\nDESCRIPTION: PlatformIO configuration with custom microcontroller and frequency settings for the BluePill F103C6 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/bluepill_f103c6.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:bluepill_f103c6]\nplatform = ststm32\nboard = bluepill_f103c6\n\n; change microcontroller\nboard_build.mcu = stm32f103c6t6\n\n; change MCU frequency\nboard_build.f_cpu = 72000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU Settings\nDESCRIPTION: Extended configuration for PHYTEC reel board v2 with custom microcontroller and frequency settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/reel_board_v2.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:reel_board_v2]\nplatform = nordicnrf52\nboard = reel_board_v2\n\n; change microcontroller\nboard_build.mcu = nrf52840\n\n; change MCU frequency\nboard_build.f_cpu = 64000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Qchip ESP32 Board\nDESCRIPTION: This snippet shows how to configure the project environment for the Qchip board in the platformio.ini file. It specifies the platform and board to use.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/qchip.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:qchip]\nplatform = espressif32\nboard = qchip\n```\n\n----------------------------------------\n\nTITLE: Customizing STM32F103C4 MCU Settings\nDESCRIPTION: Configuration example showing how to override default microcontroller and frequency settings for the STM32F103C4 board\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103C4.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103C4]\nplatform = ststm32\nboard = genericSTM32F103C4\n\n; change microcontroller\nboard_build.mcu = stm32f103c4t6\n\n; change MCU frequency\nboard_build.f_cpu = 72000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Wraith V1 ESC Board Parameters in PlatformIO\nDESCRIPTION: Extended PlatformIO configuration showing how to override default board settings such as the microcontroller model and CPU frequency. These options can be used to customize the build for specific requirements.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/wraith32_v1.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:wraith32_v1]\nplatform = ststm32\nboard = wraith32_v1\n\n; change microcontroller\nboard_build.mcu = stm32f051k6\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic STC15F2K24S2 Board in platformio.ini\nDESCRIPTION: Basic configuration for using the Generic STC15F2K24S2 board in a PlatformIO project configuration file. This snippet defines the board and platform settings required for building projects for this microcontroller.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15F2K24S2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15F2K24S2]\nplatform = intel_mcs51\nboard = STC15F2K24S2\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU and Frequency Settings\nDESCRIPTION: Extended configuration showing how to override default microcontroller and frequency settings for the STM32G071B Discovery board\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_g071rb.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_g071rb]\nplatform = ststm32\nboard = disco_g071rb\n\n; change microcontroller\nboard_build.mcu = stm32g071rbt6\n\n; change MCU frequency\nboard_build.f_cpu = 64000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring AVR32DB28 Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the AVR32DB28 board in the platformio.ini file. It includes the basic setup and examples of how to override default settings like microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/AVR32DB28.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:AVR32DB28]\nplatform = atmelmegaavr\nboard = AVR32DB28\n\n; change microcontroller\nboard_build.mcu = avr32db28\n\n; change MCU frequency\nboard_build.f_cpu = 24000000L\n```\n\n----------------------------------------\n\nTITLE: Custom MCU Configuration for OpenIMU300\nDESCRIPTION: PlatformIO configuration with custom microcontroller and frequency settings for the OpenIMU300 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/aceinna_imu/OpenIMU300.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:OpenIMU300]\nplatform = aceinna_imu\nboard = OpenIMU300\n\n; change microcontroller\nboard_build.mcu = stm32f405rg\n\n; change MCU frequency\nboard_build.f_cpu = 120000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring ST Nucleo F410RB Board in PlatformIO\nDESCRIPTION: Basic configuration for the ST Nucleo F410RB board in a PlatformIO project's platformio.ini file. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f410rb.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f410rb]\nplatform = ststm32\nboard = nucleo_f410rb\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for EFM32GG-STK3700 Giant Gecko\nDESCRIPTION: Basic PlatformIO configuration for the EFM32GG-STK3700 board using the siliconlabsefm32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/siliconlabsefm32/efm32gg_stk3700.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:efm32gg_stk3700]\nplatform = siliconlabsefm32\nboard = efm32gg_stk3700\n```\n\n----------------------------------------\n\nTITLE: Customizing Raspberry Pi Zero Hardware Settings in PlatformIO\nDESCRIPTION: Advanced configuration that demonstrates how to override default hardware settings for Raspberry Pi Zero in a PlatformIO project. This example shows how to modify the microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/linux_arm/raspberrypi_zero.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:raspberrypi_zero]\nplatform = linux_arm\nboard = raspberrypi_zero\n\n; change microcontroller\nboard_build.mcu = bcm2835\n\n; change MCU frequency\nboard_build.f_cpu = 1000000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Arduino Nicla Sense ME Board Settings\nDESCRIPTION: This snippet demonstrates how to override default board settings in the PlatformIO configuration. It shows examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/nicla_sense_me.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nicla_sense_me]\nplatform = nordicnrf52\nboard = nicla_sense_me\n\n; change microcontroller\nboard_build.mcu = nrf52832\n\n; change MCU frequency\nboard_build.f_cpu = 64000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing LilyGo T-Display Board Settings in platformio.ini\nDESCRIPTION: Example configuration for overriding default board settings such as microcontroller type and CPU frequency using board_*** options in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/lilygo-t-display.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:lilygo-t-display]\nplatform = espressif32\nboard = lilygo-t-display\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: RST Text Substitution Definition\nDESCRIPTION: Definition of a reStructuredText substitution for 'PlatformIO Home' text formatting.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/home/index.rst#2025-04-10_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. |PIOHOME| replace:: **PlatformIO Home**\n```\n\n----------------------------------------\n\nTITLE: Basic Configuration for Adafruit QT Py M0 in PlatformIO\nDESCRIPTION: The basic configuration for the Adafruit QT Py M0 board in platformio.ini file. This configuration specifies the platform (atmelsam) and the board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_qt_py_m0.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_qt_py_m0]\nplatform = atmelsam\nboard = adafruit_qt_py_m0\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for ST STM8S103F3 Breakout Board\nDESCRIPTION: Configuration to specify the upload protocol for the ST STM8S103F3 Breakout Board. In this example, it's set to 'serial'.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm8/stm8sblue.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:stm8sblue]\nplatform = ststm8\nboard = stm8sblue\n\nupload_protocol = serial\n```\n\n----------------------------------------\n\nTITLE: Custom MCU Configuration for hackaBLE\nDESCRIPTION: PlatformIO configuration demonstrating how to override default microcontroller and frequency settings for the hackaBLE board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/hackaBLE.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:hackaBLE]\nplatform = nordicnrf52\nboard = hackaBLE\n\n; change microcontroller\nboard_build.mcu = nrf52832\n\n; change MCU frequency\nboard_build.f_cpu = 64000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/grasshopper_l082cz.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:grasshopper_l082cz]\nplatform = ststm32\nboard = grasshopper_l082cz\n\nupload_protocol = dfu\n```\n\n----------------------------------------\n\nTITLE: Customizing SODAQ Ndogo Board Settings in PlatformIO\nDESCRIPTION: Advanced configuration showing how to override default board settings such as microcontroller type and CPU frequency for the SODAQ Ndogo board in a PlatformIO project.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/sodaq_ndogo.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:sodaq_ndogo]\nplatform = atmelavr\nboard = sodaq_ndogo\n\n; change microcontroller\nboard_build.mcu = atmega1284p\n\n; change MCU frequency\nboard_build.f_cpu = 8000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring AVR32DB48 Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the AVR32DB48 board in the PlatformIO project configuration file. It sets the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/AVR32DB48.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:AVR32DB48]\nplatform = atmelmegaavr\nboard = AVR32DB48\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Protocol for Heltec WiFi Kit 32 (V2)\nDESCRIPTION: Configuration for specifying the upload protocol for the Heltec WiFi Kit 32 (V2) board. This snippet shows how to explicitly set the upload protocol to esptool in the project configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/heltec_wifi_kit_32_v2.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:heltec_wifi_kit_32_v2]\nplatform = espressif32\nboard = heltec_wifi_kit_32_v2\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic ATtiny816 Board Settings in PlatformIO\nDESCRIPTION: Basic configuration for setting up an ATtiny816 board project in PlatformIO platformio.ini file. Specifies the platform and board type.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/ATtiny816.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATtiny816]\nplatform = atmelmegaavr\nboard = ATtiny816\n```\n\n----------------------------------------\n\nTITLE: ESP32 Feather Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the ESP32 Feather board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/featheresp32.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:featheresp32]\nplatform = espressif32\nboard = featheresp32\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Customizing STC15W404AS Configuration in PlatformIO\nDESCRIPTION: Extended configuration example showing how to override default board settings such as microcontroller type and CPU frequency for the STC15W404AS board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15W404AS.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15W404AS]\nplatform = intel_mcs51\nboard = STC15W404AS\n\n; change microcontroller\nboard_build.mcu = stc15w404as\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Protocol for Atmel SAMC21-XPRO\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the Atmel SAMC21-XPRO board, using CMSIS-DAP as the selected protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/samc21_xpro.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:samc21_xpro]\nplatform = atmelsam\nboard = samc21_xpro\n\nupload_protocol = cmsis-dap\n```\n\n----------------------------------------\n\nTITLE: Customizing BBC micro:bit V2 Board Settings\nDESCRIPTION: Example of overriding default board settings in the PlatformIO configuration. Shows how to change the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/bbcmicrobit_v2.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:bbcmicrobit_v2]\nplatform = nordicnrf52\nboard = bbcmicrobit_v2\n\n; change microcontroller\nboard_build.mcu = nrf52833\n\n; change MCU frequency\nboard_build.f_cpu = 64000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for VintLabs ESP32 Devkit\nDESCRIPTION: Example of specifying the upload protocol in platformio.ini. The default protocol is 'esptool', but this can be changed to other supported protocols.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/vintlabs-devkit-v1.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:vintlabs-devkit-v1]\nplatform = espressif32\nboard = vintlabs-devkit-v1\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Protocol for Elektor LoRa Node Core F072C8\nDESCRIPTION: PlatformIO configuration specifying the upload protocol for the Elektor LoRa Node Core F072C8 board. This example uses the serial protocol, which is also the default.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/elektor_f072cb.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:elektor_f072cb]\nplatform = ststm32\nboard = elektor_f072cb\n\nupload_protocol = serial\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Adafruit Feather ESP32-S2 TFT\nDESCRIPTION: Basic PlatformIO configuration for the Adafruit Feather ESP32-S2 TFT board in the project's configuration file. This snippet defines the environment using the espressif32 platform and the board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/adafruit_feather_esp32s2_tft.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_feather_esp32s2_tft]\nplatform = espressif32\nboard = adafruit_feather_esp32s2_tft\n```\n\n----------------------------------------\n\nTITLE: Customizing Denky32 Board Settings in PlatformIO\nDESCRIPTION: Example of overriding default Denky32 board settings in the PlatformIO configuration. This shows how to change the microcontroller type and CPU frequency using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/denky32.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:denky32]\nplatform = espressif32\nboard = denky32\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for ESP32 Pico Kit\nDESCRIPTION: Basic PlatformIO configuration for ESP32 Pico Kit in platformio.ini file. This sets up the project environment with the espressif32 platform and pico32 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/pico32.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:pico32]\nplatform = espressif32\nboard = pico32\n```\n\n----------------------------------------\n\nTITLE: Advanced ML51TD1AE Board Configuration\nDESCRIPTION: Extended PlatformIO configuration for ML51TD1AE board with custom microcontroller and frequency settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/ML51TD1AE.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ML51TD1AE]\nplatform = intel_mcs51\nboard = ML51TD1AE\n\n; change microcontroller\nboard_build.mcu = ml51td1ae\n\n; change MCU frequency\nboard_build.f_cpu = 24000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring unPhone 7 Board in platformio.ini\nDESCRIPTION: Basic configuration for the unPhone 7 board in the project's platformio.ini file. This sets up the ESP32 platform with the unPhone 7 board identifier.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/unphone7.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:unphone7]\nplatform = espressif32\nboard = unphone7\n```\n\n----------------------------------------\n\nTITLE: Customizing MCU and Frequency Settings for Seeeduino Wio Terminal\nDESCRIPTION: Configuration example showing how to override default microcontroller and frequency settings for the Seeeduino Wio Terminal board in platformio.ini.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/seeed_wio_terminal.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:seeed_wio_terminal]\nplatform = atmelsam\nboard = seeed_wio_terminal\n\n; change microcontroller\nboard_build.mcu = samd51p19a\n\n; change MCU frequency\nboard_build.f_cpu = 120000000L\n```\n\n----------------------------------------\n\nTITLE: PlatformIO Configuration with Custom Upload Protocol for Namino Arancio\nDESCRIPTION: Configuration that specifies a custom upload protocol for the Namino Arancio board. This example sets 'esptool' as the upload protocol, which is also the default for this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/namino_arancio.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:namino_arancio]\nplatform = espressif32\nboard = namino_arancio\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for ATmega640\nDESCRIPTION: Basic configuration setup for ATmega640 board in platformio.ini file. Specifies the platform and board settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega640.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega640]\nplatform = atmelavr\nboard = ATmega640\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for ST 32F411EDISCOVERY Board\nDESCRIPTION: Basic configuration for ST 32F411EDISCOVERY board in platformio.ini file. This snippet sets up the build environment with the STM32 platform and specifies the board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_f411ve.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_f411ve]\nplatform = ststm32\nboard = disco_f411ve\n```\n\n----------------------------------------\n\nTITLE: Configuring Heltec WiFi Kit 32 in PlatformIO Project Configuration\nDESCRIPTION: Basic configuration for using the Heltec WiFi Kit 32 board with the Espressif32 platform in PlatformIO's project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/heltec_wifi_kit_32.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:heltec_wifi_kit_32]\nplatform = espressif32\nboard = heltec_wifi_kit_32\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU Settings\nDESCRIPTION: Extended configuration with custom microcontroller and frequency settings for the Adafruit ProxLight Trinkey M0.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_proxlighttrinkey_m0.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_proxlighttrinkey_m0]\nplatform = atmelsam\nboard = adafruit_proxlighttrinkey_m0\n\n; change microcontroller\nboard_build.mcu = samd21e18a\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration with Custom Settings for ESP32-S3\nDESCRIPTION: This configuration example shows how to override default board settings such as microcontroller type and CPU frequency using board_build options in PlatformIO.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/dfrobot_firebeetle2_esp32s3.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:dfrobot_firebeetle2_esp32s3]\nplatform = espressif32\nboard = dfrobot_firebeetle2_esp32s3\n\n; change microcontroller\nboard_build.mcu = esp32s3\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with Custom Settings\nDESCRIPTION: Extended configuration showing how to override default board settings like MCU and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/imbrios-logsens-v1p1.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:imbrios-logsens-v1p1]\nplatform = espressif32\nboard = imbrios-logsens-v1p1\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration with MCU Settings\nDESCRIPTION: Extended configuration example showing how to override default microcontroller and frequency settings for the Maple (RET6) board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/maple_ret6.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:maple_ret6]\nplatform = ststm32\nboard = maple_ret6\n\n; change microcontroller\nboard_build.mcu = stm32f103ret6\n\n; change MCU frequency\nboard_build.f_cpu = 72000000L\n```\n\n----------------------------------------\n\nTITLE: Basic Pycom GPy Board Configuration\nDESCRIPTION: Basic PlatformIO configuration for Pycom GPy board using the espressif32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/pycom_gpy.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:pycom_gpy]\nplatform = espressif32\nboard = pycom_gpy\n```\n\n----------------------------------------\n\nTITLE: HONEYLemon Upload Protocol Configuration\nDESCRIPTION: PlatformIO configuration showing how to specify the upload protocol for the HONEYLemon board\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/honeylemon.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:honeylemon]\nplatform = espressif32\nboard = honeylemon\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic ATmega4809 Project in PlatformIO\nDESCRIPTION: Basic configuration for setting up an ATmega4809 project in PlatformIO's project configuration file. This defines the board and platform required to build for the ATmega4809 microcontroller.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/ATmega4809.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega4809]\nplatform = atmelmegaavr\nboard = ATmega4809\n```\n\n----------------------------------------\n\nTITLE: Custom MCU Configuration for Sparky V1 F303\nDESCRIPTION: Advanced board configuration example showing how to override default microcontroller settings and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/sparky_v1.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:sparky_v1]\nplatform = ststm32\nboard = sparky_v1\n\n; change microcontroller\nboard_build.mcu = stm32f303cct6\n\n; change MCU frequency\nboard_build.f_cpu = 72000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing ML51EC0AE Board Configuration in PlatformIO\nDESCRIPTION: Extended PlatformIO configuration that demonstrates how to override default board settings such as microcontroller type and CPU frequency for the Generic ML51EC0AE board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/ML51EC0AE.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ML51EC0AE]\nplatform = intel_mcs51\nboard = ML51EC0AE\n\n; change microcontroller\nboard_build.mcu = ml51ec0ae\n\n; change MCU frequency\nboard_build.f_cpu = 24000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU Options\nDESCRIPTION: Extended configuration example showing how to override default board settings like microcontroller model and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_l073rz.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_l073rz]\nplatform = ststm32\nboard = nucleo_l073rz\n\n; change microcontroller\nboard_build.mcu = stm32l073rz\n\n; change MCU frequency\nboard_build.f_cpu = 32000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing DevEBox H750VBTX Board Configuration\nDESCRIPTION: Example of how to override default board settings in PlatformIO configuration. This snippet demonstrates changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/devebox_h750vbtx.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:devebox_h750vbtx]\nplatform = ststm32\nboard = devebox_h750vbtx\n\n; change microcontroller\nboard_build.mcu = stm32h750vbt6\n\n; change MCU frequency\nboard_build.f_cpu = 480000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Heltec WiFi Kit 32 (V3)\nDESCRIPTION: Basic PlatformIO configuration for the Heltec WiFi Kit 32 (V3) board in the project configuration file. Sets the target platform to espressif32 and the board to heltec_wifi_kit_32_V3.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/heltec_wifi_kit_32_V3.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:heltec_wifi_kit_32_V3]\nplatform = espressif32\nboard = heltec_wifi_kit_32_V3\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic STM32F410C8 Board Settings\nDESCRIPTION: Basic configuration for setting up an STM32F410C8 board project environment in platformio.ini. Specifies the platform and board type.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F410C8.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F410C8]\nplatform = ststm32\nboard = genericSTM32F410C8\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for MakerAsia KB32-FT in PlatformIO\nDESCRIPTION: Configuration to specify the upload protocol for MakerAsia KB32-FT board in platformio.ini. This example uses the default esptool protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/kb32-ft.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:kb32-ft]\nplatform = espressif32\nboard = kb32-ft\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Customizing Generic STC8F2K32S2 Board Settings in PlatformIO\nDESCRIPTION: This code snippet demonstrates how to override default settings for the Generic STC8F2K32S2 board in PlatformIO. It shows how to change the microcontroller and MCU frequency using board-specific options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8F2K32S2.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8F2K32S2]\nplatform = intel_mcs51\nboard = STC8F2K32S2\n\n; change microcontroller\nboard_build.mcu = stc8f2k32s2\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration for PlatformIO\nDESCRIPTION: Basic configuration for setting up a PlatformIO environment for the SparkFun RED-V Thing Plus board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/sifive/sparkfun_thing_plus_v.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:sparkfun_thing_plus_v]\nplatform = sifive\nboard = sparkfun_thing_plus_v\n```\n\n----------------------------------------\n\nTITLE: Customizing AVR128DA32 Board Settings in PlatformIO INI File\nDESCRIPTION: This snippet demonstrates how to override default AVR128DA32 settings in the PlatformIO configuration. It shows examples of changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/AVR128DA32.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:AVR128DA32]\nplatform = atmelmegaavr\nboard = AVR128DA32\n\n; change microcontroller\nboard_build.mcu = avr128da32\n\n; change MCU frequency\nboard_build.f_cpu = 24000000L\n```\n\n----------------------------------------\n\nTITLE: Overriding Default RGB Station Settings in PlatformIO INI File\nDESCRIPTION: This example demonstrates how to override default RGB Station board settings in the PlatformIO configuration. It shows how to change the microcontroller and MCU frequency using board-specific options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/microchippic32/rgb_station.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:rgb_station]\nplatform = microchippic32\nboard = rgb_station\n\n; change microcontroller\nboard_build.mcu = 32MX270F256D\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Ruuvi Tag Board in PlatformIO INI File\nDESCRIPTION: Basic configuration for using the Ruuvi Tag board with the Nordic nRF52 platform in a PlatformIO project. Specifies the board ID and platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/ruuvitag.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ruuvitag]\nplatform = nordicnrf52\nboard = ruuvitag\n```\n\n----------------------------------------\n\nTITLE: Setting up PlatformIO Configuration for ST Nucleo L496ZG\nDESCRIPTION: Basic PlatformIO configuration for the ST Nucleo L496ZG board using the ststm32 platform. This creates a simple environment configuration in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_l496zg.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_l496zg]\nplatform = ststm32\nboard = nucleo_l496zg\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for M5Stack AtomS3\nDESCRIPTION: Example of changing the upload protocol for the M5Stack AtomS3 board in PlatformIO configuration. The default protocol is 'esptool'.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/m5stack-atoms3.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:m5stack-atoms3]\nplatform = espressif32\nboard = m5stack-atoms3\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic PlatformIO Environment for KITS ESP32 EDU\nDESCRIPTION: Basic configuration for setting up a PlatformIO environment for the KITS ESP32 EDU board in the project configuration file (platformio.ini). This snippet specifies the platform and board to use.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/kits-edu.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:kits-edu]\nplatform = espressif32\nboard = kits-edu\n```\n\n----------------------------------------\n\nTITLE: Customizing Heltec WiFi Kit 32 (V2) Board Parameters\nDESCRIPTION: Example of how to override default board settings in PlatformIO configuration. This snippet demonstrates changing the microcontroller type and CPU frequency of the Heltec WiFi Kit 32 (V2) board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/heltec_wifi_kit_32_v2.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:heltec_wifi_kit_32_v2]\nplatform = espressif32\nboard = heltec_wifi_kit_32_v2\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Basic ALKS ESP32 Board Configuration\nDESCRIPTION: Minimal configuration required to set up an ALKS ESP32 board in PlatformIO's project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/alksesp32.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:alksesp32]\nplatform = espressif32\nboard = alksesp32\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Generic ESP8285 Module\nDESCRIPTION: This snippet shows how to configure the project environment for the Generic ESP8285 Module in the platformio.ini file. It specifies the platform and board to use.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/esp8285.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp8285]\nplatform = espressif8266\nboard = esp8285\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for SparkFun 9DoF Razor IMU M0\nDESCRIPTION: Basic environment configuration for SparkFun 9DoF Razor IMU M0 board using the atmelsam platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/sparkfun_samd21_9dof.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:sparkfun_samd21_9dof]\nplatform = atmelsam\nboard = sparkfun_samd21_9dof\n```\n\n----------------------------------------\n\nTITLE: Basic STM32F103RB Board Configuration in PlatformIO\nDESCRIPTION: Basic board configuration for STM32F103RB in platformio.ini file. Sets up the base environment with the ststm32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103RB.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103RB]\nplatform = ststm32\nboard = genericSTM32F103RB\n```\n\n----------------------------------------\n\nTITLE: Configuring Seeed Arch Pro Board in platformio.ini\nDESCRIPTION: This snippet shows how to configure the Seeed Arch Pro board in the platformio.ini file. It sets the platform to nxplpc and the board to seeedArchPro.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nxplpc/seeedArchPro.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:seeedArchPro]\nplatform = nxplpc\nboard = seeedArchPro\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration for AVR128DB48 with Custom Settings\nDESCRIPTION: Extended configuration for AVR128DB48 board that demonstrates how to override default board settings such as microcontroller model and clock frequency in the PlatformIO project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/AVR128DB48.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:AVR128DB48]\nplatform = atmelmegaavr\nboard = AVR128DB48\n\n; change microcontroller\nboard_build.mcu = avr128db48\n\n; change MCU frequency\nboard_build.f_cpu = 24000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing STC8C2K60S4 Board Parameters in PlatformIO\nDESCRIPTION: Extended configuration showing how to override default board settings such as microcontroller type and CPU frequency in a PlatformIO project environment.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8C2K60S4.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8C2K60S4]\nplatform = intel_mcs51\nboard = STC8C2K60S4\n\n; change microcontroller\nboard_build.mcu = stc8c2k60s4\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Customizing Denky D4 Board Settings in platformio.ini\nDESCRIPTION: Example of overriding default board settings for the Denky D4 (PICO-V3-02). This snippet demonstrates changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/denky_d4.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:denky_d4]\nplatform = espressif32\nboard = denky_d4\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing ESP32-C3-DevKitM-1 Board Settings in PlatformIO\nDESCRIPTION: Advanced configuration for ESP32-C3-DevKitM-1 with custom MCU and frequency settings. This demonstrates how to override default board settings such as the microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32-c3-devkitm-1.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32-c3-devkitm-1]\nplatform = espressif32\nboard = esp32-c3-devkitm-1\n\n; change microcontroller\nboard_build.mcu = esp32c3\n\n; change MCU frequency\nboard_build.f_cpu = 160000000L\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example demonstrating how to specify the upload protocol for the board, with J-Link as the default option.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/ublox_bmd345eval_nrf52840.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:ublox_bmd345eval_nrf52840]\nplatform = nordicnrf52\nboard = ublox_bmd345eval_nrf52840\n\nupload_protocol = jlink\n```\n\n----------------------------------------\n\nTITLE: Customizing NXP i.MX RT1010 Evaluation Kit Settings\nDESCRIPTION: Example of overriding default board settings in platformio.ini, such as changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nxpimxrt/mimxrt1010_evk.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:mimxrt1010_evk]\nplatform = nxpimxrt\nboard = mimxrt1010_evk\n\n; change microcontroller\nboard_build.mcu = mimxrt1011dae5a\n\n; change MCU frequency\nboard_build.f_cpu = 500000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for STM32F417VE in PlatformIO\nDESCRIPTION: Demonstrates how to configure the upload protocol for the STM32F417VE board. This example shows using the default 'serial' protocol in the PlatformIO project configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F417VE.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F417VE]\nplatform = ststm32\nboard = genericSTM32F417VE\n\nupload_protocol = serial\n```\n\n----------------------------------------\n\nTITLE: Configuring Denky D4 Board in platformio.ini\nDESCRIPTION: Basic configuration for using the Denky D4 (PICO-V3-02) board in a PlatformIO project. This snippet sets the platform to espressif32 and specifies the board as denky_d4.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/denky_d4.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:denky_d4]\nplatform = espressif32\nboard = denky_d4\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Protocol for ST Nucleo L496ZG in PlatformIO\nDESCRIPTION: PlatformIO configuration for the ST Nucleo L496ZG board with custom upload protocol settings. This example shows how to specify the ST-Link protocol for firmware uploading.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_l496zg.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_l496zg]\nplatform = ststm32\nboard = nucleo_l496zg\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for MGBOT IOTIK 32B\nDESCRIPTION: Configures the upload protocol for the MGBOT IOTIK 32B board, specifying 'esptool' as the upload method in the PlatformIO project configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/mgbot-iotik32b.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:mgbot-iotik32b]\nplatform = espressif32\nboard = mgbot-iotik32b\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU Settings\nDESCRIPTION: Extended PlatformIO configuration demonstrating how to override default microcontroller and frequency settings for the IOXESP32PS board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/ioxesp32ps.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ioxesp32ps]\nplatform = espressif32\nboard = ioxesp32ps\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Arduino Zero USB Board Settings\nDESCRIPTION: Advanced configuration showing how to override default board settings such as microcontroller and CPU frequency in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/zeroUSB.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:zeroUSB]\nplatform = atmelsam\nboard = zeroUSB\n\n; change microcontroller\nboard_build.mcu = samd21g18a\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for WeAct Studio ESP32C3CoreBoard\nDESCRIPTION: Basic configuration for the WeAct Studio ESP32C3CoreBoard in the PlatformIO project configuration file. This sets up the environment with the espressif32 platform and the appropriate board identifier.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/weactstudio_esp32c3coreboard.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:weactstudio_esp32c3coreboard]\nplatform = espressif32\nboard = weactstudio_esp32c3coreboard\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Adafruit FunHouse ESP32S2\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the Adafruit FunHouse board. The default protocol is esptool but can be changed as shown.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/adafruit_funhouse_esp32s2.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_funhouse_esp32s2]\nplatform = espressif32\nboard = adafruit_funhouse_esp32s2\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration for ST Nucleo F439ZI\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f439zi.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f439zi]\nplatform = ststm32\nboard = nucleo_f439zi\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Customizing AVR32DA32 Board Configuration in PlatformIO\nDESCRIPTION: Advanced configuration for the AVR32DA32 board with custom microcontroller and frequency settings. This example shows how to override default board settings using board_build properties.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/AVR32DA32.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:AVR32DA32]\nplatform = atmelmegaavr\nboard = AVR32DA32\n\n; change microcontroller\nboard_build.mcu = avr32da32\n\n; change MCU frequency\nboard_build.f_cpu = 24000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring ST 32F769IDISCOVERY Board in PlatformIO\nDESCRIPTION: Basic PlatformIO configuration for the ST 32F769IDISCOVERY board using the STM32 platform. Includes options for changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_f769ni.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_f769ni]\nplatform = ststm32\nboard = disco_f769ni\n\n; change microcontroller\nboard_build.mcu = stm32f769nih6\n\n; change MCU frequency\nboard_build.f_cpu = 216000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for STC15F105 Board\nDESCRIPTION: Basic configuration for using the STC15F105 board in a PlatformIO project's platformio.ini file. This sets up the Intel MCS-51 platform with the STC15F105 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15F105.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15F105]\nplatform = intel_mcs51\nboard = STC15F105\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration\nDESCRIPTION: Initial configuration for IoT-Bus Proteus board in platformio.ini file\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/iotbusproteus.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:iotbusproteus]\nplatform = espressif32\nboard = iotbusproteus\n```\n\n----------------------------------------\n\nTITLE: Changing Upload Protocol for LOLIN S3 PRO\nDESCRIPTION: Example of configuring a specific upload protocol (esptool) for the WEMOS LOLIN S3 PRO board in a PlatformIO project.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/lolin_s3_pro.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:lolin_s3_pro]\nplatform = espressif32\nboard = lolin_s3_pro\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for OLIMEX ESP32-PoE\nDESCRIPTION: This configuration snippet shows how to set the upload protocol for the OLIMEX ESP32-PoE board in the platformio.ini file. It sets the upload protocol to esptool, which is the default for this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32-poe.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32-poe]\nplatform = espressif32\nboard = esp32-poe\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Customizing WEMOS LOLIN32 Lite Board Settings\nDESCRIPTION: Example of overriding default board settings such as microcontroller and CPU frequency using board_*** options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/lolin32_lite.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:lolin32_lite]\nplatform = espressif32\nboard = lolin32_lite\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced STM32F415RG Board Configuration\nDESCRIPTION: Extended PlatformIO configuration showing how to override default microcontroller and frequency settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F415RG.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F415RG]\nplatform = ststm32\nboard = genericSTM32F415RG\n\n; change microcontroller\nboard_build.mcu = stm32f415rgt6\n\n; change MCU frequency\nboard_build.f_cpu = 168000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring ATmega1608 Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the ATmega1608 board in the PlatformIO project configuration file. It includes the basic setup and examples of how to override default board settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/ATmega1608.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega1608]\nplatform = atmelmegaavr\nboard = ATmega1608\n\n; change microcontroller\nboard_build.mcu = atmega1608\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Arduino Due\nDESCRIPTION: Basic PlatformIO environment configuration for Arduino Due board. This sets up the essential parameters needed for building projects targeting the Arduino Due's programming port.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/due.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:due]\nplatform = atmelsam\nboard = due\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for Arduino Nano ATmega168\nDESCRIPTION: Basic environment configuration for Arduino Nano ATmega168 board in platformio.ini file\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/nanoatmega168.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nanoatmega168]\nplatform = atmelavr\nboard = nanoatmega168\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Lion:Bit Dev Board\nDESCRIPTION: Basic configuration for setting up a PlatformIO project for the Lion:Bit Dev Board using the espressif32 platform. This configuration uses the lionbit board ID in the project's configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/lionbit.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:lionbit]\nplatform = espressif32\nboard = lionbit\n```\n\n----------------------------------------\n\nTITLE: Customizing Generic IRC15W415S Board Settings in PlatformIO\nDESCRIPTION: Advanced configuration that demonstrates how to override default board settings in platformio.ini. This example shows how to change the microcontroller model and CPU frequency for the Generic IRC15W415S board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/IRC15W415S.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:IRC15W415S]\nplatform = intel_mcs51\nboard = IRC15W415S\n\n; change microcontroller\nboard_build.mcu = irc15w415s\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Customizing RUMBA32 F446VE Board Settings in PlatformIO\nDESCRIPTION: Advanced configuration for the RUMBA32 F446VE board, demonstrating how to override default microcontroller and frequency settings in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/rumba32_f446ve.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:rumba32_f446ve]\nplatform = ststm32\nboard = rumba32_f446ve\n\n; change microcontroller\nboard_build.mcu = stm32f446ret6\n\n; change MCU frequency\nboard_build.f_cpu = 180000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU and Frequency Settings\nDESCRIPTION: Extended configuration example showing how to override default microcontroller and frequency settings\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/deneyapminiv2.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:deneyapminiv2]\nplatform = espressif32\nboard = deneyapminiv2\n\n; change microcontroller\nboard_build.mcu = esp32s2\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic MKR FOX 1200 Board Settings\nDESCRIPTION: Basic configuration for setting up an Arduino MKR FOX 1200 board environment in PlatformIO using the atmelsam platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/mkrfox1200.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:mkrfox1200]\nplatform = atmelsam\nboard = mkrfox1200\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration with MCU Settings\nDESCRIPTION: Configuration with custom microcontroller and frequency settings for Heltec WiFi LoRa 32 V2\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/heltec_wifi_lora_32_V2.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:heltec_wifi_lora_32_V2]\nplatform = espressif32\nboard = heltec_wifi_lora_32_V2\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration for OSHChip in PlatformIO\nDESCRIPTION: Basic PlatformIO configuration for the OSHChip board using the nordicnrf51 platform. This configuration specifies the minimal settings needed to work with this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf51/oshchip.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:oshchip]\nplatform = nordicnrf51\nboard = oshchip\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Protocol for Waveshare BLE400\nDESCRIPTION: Example configuration for specifying the upload protocol (JLink) in the project settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf51/waveshare_ble400.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:waveshare_ble400]\nplatform = nordicnrf51\nboard = waveshare_ble400\n\nupload_protocol = jlink\n```\n\n----------------------------------------\n\nTITLE: Customizing ATtiny25 Board Parameters in PlatformIO\nDESCRIPTION: Advanced configuration for customizing the Generic ATtiny25 board settings in PlatformIO, including changing the microcontroller and clock frequency parameters.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/attiny25.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:attiny25]\nplatform = atmelavr\nboard = attiny25\n\n; change microcontroller\nboard_build.mcu = attiny25\n\n; change MCU frequency\nboard_build.f_cpu = 8000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Adafruit Feather STM32F405 Board Settings\nDESCRIPTION: Example of overriding default board settings in platformio.ini, such as changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/adafruit_feather_f405.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_feather_f405]\nplatform = ststm32\nboard = adafruit_feather_f405\n\n; change microcontroller\nboard_build.mcu = stm32f405rgt6\n\n; change MCU frequency\nboard_build.f_cpu = 168000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing MCU and Frequency Settings for nRF52840-MDK Board\nDESCRIPTION: Extended configuration for the nRF52840-MDK board that demonstrates how to override default board settings such as microcontroller type and CPU frequency using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/nrf52840_mdk.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nrf52840_mdk]\nplatform = nordicnrf52\nboard = nrf52840_mdk\n\n; change microcontroller\nboard_build.mcu = nrf52840\n\n; change MCU frequency\nboard_build.f_cpu = 64000000L\n```\n\n----------------------------------------\n\nTITLE: Defining replacement for PIOCORE in reStructuredText\nDESCRIPTION: This snippet defines a replacement for the |PIOCORE| text with bold 'PlatformIO Core' in reStructuredText.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/index.rst#2025-04-10_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. |PIOCORE| replace:: **PlatformIO Core**\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO Environment for Microduino Core+\nDESCRIPTION: This code snippet shows how to set up a PlatformIO environment for the Microduino Core+ board. It specifies the platform as atmelavr and the board as 1284p8m.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/1284p8m.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:1284p8m]\nplatform = atmelavr\nboard = 1284p8m\n```\n\n----------------------------------------\n\nTITLE: PlatformIO Configuration with Custom Upload Protocol\nDESCRIPTION: Configuration for Adafruit Gemma M0 with a specified upload protocol. This example shows how to set the upload protocol to sam-ba, which is also the default protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_gemma_m0.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_gemma_m0]\nplatform = atmelsam\nboard = adafruit_gemma_m0\n\nupload_protocol = sam-ba\n```\n\n----------------------------------------\n\nTITLE: Customizing MakerAsia Nano32 Board Settings in PlatformIO\nDESCRIPTION: Extended configuration that overrides default board settings such as microcontroller type and CPU frequency. This demonstrates how to customize board parameters using the board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/nano32.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nano32]\nplatform = espressif32\nboard = nano32\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring NXP i.MX RT1010 Evaluation Kit in PlatformIO\nDESCRIPTION: Basic configuration for the NXP i.MX RT1010 Evaluation Kit in the project's platformio.ini file. Specifies the platform and board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nxpimxrt/mimxrt1010_evk.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:mimxrt1010_evk]\nplatform = nxpimxrt\nboard = mimxrt1010_evk\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Board Environment for ST Nucleo F401RE in PlatformIO\nDESCRIPTION: Basic configuration setup for ST Nucleo F401RE board in platformio.ini file. This snippet shows how to specify the board and platform for your project environment.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f401re.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f401re]\nplatform = ststm32\nboard = nucleo_f401re\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic STorM32 Board Settings in PlatformIO\nDESCRIPTION: Basic PlatformIO configuration for the STorM32 BGC v1.31 RC board using the ststm32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/storm32_v1_31_rc.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:storm32_v1_31_rc]\nplatform = ststm32\nboard = storm32_v1_31_rc\n```\n\n----------------------------------------\n\nTITLE: Configuring ATmega808 Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to set up the ATmega808 board in the PlatformIO project configuration file. It includes basic setup and examples of overriding default board settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/ATmega808.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega808]\nplatform = atmelmegaavr\nboard = ATmega808\n\n; change microcontroller\nboard_build.mcu = atmega808\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing ML54SD1AE Board Configuration in PlatformIO\nDESCRIPTION: Extended PlatformIO configuration for the ML54SD1AE board with custom microcontroller and clock frequency settings. This demonstrates how to override default board settings in the project configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/ML54SD1AE.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ML54SD1AE]\nplatform = intel_mcs51\nboard = ML54SD1AE\n\n; change microcontroller\nboard_build.mcu = ml54sd1ae\n\n; change MCU frequency\nboard_build.f_cpu = 24000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic STC15W1K20S Board in PlatformIO\nDESCRIPTION: This snippet shows how to configure the Generic STC15W1K20S board in the PlatformIO project configuration file (platformio.ini). It sets the platform to intel_mcs51 and the board to STC15W1K20S.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15W1K20S.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15W1K20S]\nplatform = intel_mcs51\nboard = STC15W1K20S\n```\n\n----------------------------------------\n\nTITLE: Customizing AVR32DB32 Board Settings in PlatformIO\nDESCRIPTION: Advanced configuration for the AVR32DB32 board showing how to override default settings like microcontroller model and CPU frequency in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/AVR32DB32.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:AVR32DB32]\nplatform = atmelmegaavr\nboard = AVR32DB32\n\n; change microcontroller\nboard_build.mcu = avr32db32\n\n; change MCU frequency\nboard_build.f_cpu = 24000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Generic STC8F2K16S4 Board\nDESCRIPTION: This snippet shows how to configure a PlatformIO project for the Generic STC8F2K16S4 board. It sets the platform to intel_mcs51 and specifies the board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8F2K16S4.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8F2K16S4]\nplatform = intel_mcs51\nboard = STC8F2K16S4\n```\n\n----------------------------------------\n\nTITLE: Customizing NXP i.MX RT1015 Evaluation Kit settings\nDESCRIPTION: Example of overriding default board settings in platformio.ini, such as changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nxpimxrt/mimxrt1015_evk.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:mimxrt1015_evk]\nplatform = nxpimxrt\nboard = mimxrt1015_evk\n\n; change microcontroller\nboard_build.mcu = mimxrt1015daf5a\n\n; change MCU frequency\nboard_build.f_cpu = 500000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing ATtiny3216 MCU Settings in PlatformIO\nDESCRIPTION: Advanced configuration example showing how to override default microcontroller and frequency settings for the ATtiny3216 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/ATtiny3216.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATtiny3216]\nplatform = atmelmegaavr\nboard = ATtiny3216\n\n; change microcontroller\nboard_build.mcu = attiny3216\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Delta DFBM-NQ620 Board in platformio.ini\nDESCRIPTION: This snippet shows how to configure the Delta DFBM-NQ620 board in the platformio.ini file. It includes the basic board setup and examples of how to override default settings like microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/delta_dfbm_nq620.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:delta_dfbm_nq620]\nplatform = nordicnrf52\nboard = delta_dfbm_nq620\n\n; change microcontroller\nboard_build.mcu = nrf52832\n\n; change MCU frequency\nboard_build.f_cpu = 64000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing LOLIN S3 PRO Board Settings\nDESCRIPTION: Configuration example showing how to override default board settings by changing the microcontroller and CPU frequency in the project configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/lolin_s3_pro.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:lolin_s3_pro]\nplatform = espressif32\nboard = lolin_s3_pro\n\n; change microcontroller\nboard_build.mcu = esp32s3\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Adafruit Feather STM32F405\nDESCRIPTION: Configuration to change the upload protocol for the Adafruit Feather STM32F405 board in platformio.ini. The example sets it to 'stlink'.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/adafruit_feather_f405.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_feather_f405]\nplatform = ststm32\nboard = adafruit_feather_f405\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Configuring ESP32 FM DevKit Board in platformio.ini\nDESCRIPTION: This snippet shows how to configure the ESP32 FM DevKit board in the platformio.ini file. It includes the basic configuration and examples of how to override default settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/fm-devkit.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:fm-devkit]\nplatform = espressif32\nboard = fm-devkit\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU Settings\nDESCRIPTION: Extended PlatformIO configuration showing how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/adafruit_feather_esp32s2_reversetft.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_feather_esp32s2_reversetft]\nplatform = espressif32\nboard = adafruit_feather_esp32s2_reversetft\n\n; change microcontroller\nboard_build.mcu = esp32s2\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Denky D4 Board\nDESCRIPTION: Configuration to specify the upload protocol for the Denky D4 (PICO-V3-02) board. This example sets the upload protocol to esptool.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/denky_d4.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:denky_d4]\nplatform = espressif32\nboard = denky_d4\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic AVR128DA48 Board Settings in PlatformIO\nDESCRIPTION: Basic PlatformIO configuration for AVR128DA48 board using the atmelmegaavr platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/AVR128DA48.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:AVR128DA48]\nplatform = atmelmegaavr\nboard = AVR128DA48\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for WeAct Studio MiniSTM32H750VBTX\nDESCRIPTION: Configuration for specifying the upload protocol for the WeAct Studio MiniSTM32H750VBTX board. The board supports blackmagic, cmsis-dap, jlink, and stlink protocols, with stlink as default.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/weact_mini_h750vbtx.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:weact_mini_h750vbtx]\nplatform = ststm32\nboard = weact_mini_h750vbtx\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Advanced AVR128DA64 Board Configuration with Custom Settings\nDESCRIPTION: Extended configuration example showing how to override default board settings like microcontroller model and CPU frequency\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/AVR128DA64.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:AVR128DA64]\nplatform = atmelmegaavr\nboard = AVR128DA64\n\n; change microcontroller\nboard_build.mcu = avr128da64\n\n; change MCU frequency\nboard_build.f_cpu = 24000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic PlatformIO Environment for STM32F410CB\nDESCRIPTION: Basic configuration for setting up an STM32F410CB board in PlatformIO's project configuration file. This snippet establishes the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F410CB.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F410CB]\nplatform = ststm32\nboard = genericSTM32F410CB\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Labplus mPython Board\nDESCRIPTION: This snippet shows how to configure a PlatformIO project for the Labplus mPython board. It sets the platform to espressif32 and specifies the board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/labplus_mpython.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:labplus_mpython]\nplatform = espressif32\nboard = labplus_mpython\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU and Frequency Settings\nDESCRIPTION: Extended configuration example showing how to override default microcontroller and frequency settings for the SLSTK3701A Giant Gecko S1 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/siliconlabsefm32/efm32gg11_stk3701.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:efm32gg11_stk3701]\nplatform = siliconlabsefm32\nboard = efm32gg11_stk3701\n\n; change microcontroller\nboard_build.mcu = efm32gg11b820f2048gl192\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Freenove ESP32-Wrover Board Settings in PlatformIO\nDESCRIPTION: Advanced project configuration that overrides default board settings like microcontroller type and CPU frequency. This demonstrates how to customize the board configuration for specific project needs.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/freenove_esp32_wrover.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:freenove_esp32_wrover]\nplatform = espressif32\nboard = freenove_esp32_wrover\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing RemRam v1 Board Parameters in PlatformIO\nDESCRIPTION: Advanced configuration for the RemRam v1 board showing how to override default settings such as microcontroller type and CPU frequency using the board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/remram_v1.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:remram_v1]\nplatform = ststm32\nboard = remram_v1\n\n; change microcontroller\nboard_build.mcu = stm32f765vit6\n\n; change MCU frequency\nboard_build.f_cpu = 216000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing STM32F072-EVAL MCU and Frequency Settings\nDESCRIPTION: Advanced configuration that overrides default board settings by specifying the exact microcontroller model and CPU frequency. This demonstrates how to customize hardware-specific parameters.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/eval_f072vb.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:eval_f072vb]\nplatform = ststm32\nboard = eval_f072vb\n\n; change microcontroller\nboard_build.mcu = stm32f072vbt6\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for STM32F411CC\nDESCRIPTION: Configuration example for specifying the upload protocol in the project settings. The default protocol is 'serial'.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F411CC.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F411CC]\nplatform = ststm32\nboard = genericSTM32F411CC\n\nupload_protocol = serial\n```\n\n----------------------------------------\n\nTITLE: Customizing TI LaunchPad MSP-EXP430G2553LP board parameters\nDESCRIPTION: Advanced configuration example showing how to override default board settings such as microcontroller model and CPU frequency in a PlatformIO project.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/timsp430/lpmsp430g2553.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:lpmsp430g2553]\nplatform = timsp430\nboard = lpmsp430g2553\n\n; change microcontroller\nboard_build.mcu = msp430g2553\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Generic IRC15W415S Board\nDESCRIPTION: Basic configuration for using the Generic IRC15W415S board in the platformio.ini project configuration file. This sets up the project to use the intel_mcs51 platform with the IRC15W415S board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/IRC15W415S.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:IRC15W415S]\nplatform = intel_mcs51\nboard = IRC15W415S\n```\n\n----------------------------------------\n\nTITLE: Custom MCU Configuration for BlackPill F303CC\nDESCRIPTION: PlatformIO configuration with custom microcontroller and frequency settings for the BlackPill F303CC board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/robotdyn_blackpill_f303cc.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:robotdyn_blackpill_f303cc]\nplatform = ststm32\nboard = robotdyn_blackpill_f303cc\n\n; change microcontroller\nboard_build.mcu = stm32f303cct6\n\n; change MCU frequency\nboard_build.f_cpu = 72000000L\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for Arduino Uno WiFi Rev2\nDESCRIPTION: Basic configuration snippet for setting up Arduino Uno WiFi Rev2 board in platformio.ini file\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/uno_wifi_rev2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:uno_wifi_rev2]\nplatform = atmelmegaavr\nboard = uno_wifi_rev2\n```\n\n----------------------------------------\n\nTITLE: Configuring ATtiny417 in PlatformIO project configuration\nDESCRIPTION: Basic PlatformIO configuration for the ATtiny417 board using the atmelmegaavr platform. This snippet shows how to specify the board in your project's configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/ATtiny417.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATtiny417]\nplatform = atmelmegaavr\nboard = ATtiny417\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration in PlatformIO\nDESCRIPTION: Basic configuration for setting up the Adafruit Circuit Playground Express board in platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_circuitplayground_m0.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_circuitplayground_m0]\nplatform = atmelsam\nboard = adafruit_circuitplayground_m0\n```\n\n----------------------------------------\n\nTITLE: Customizing ATtiny212 Board Configuration in PlatformIO\nDESCRIPTION: Advanced configuration for ATtiny212 showing how to override default board settings like microcontroller type and CPU frequency in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/ATtiny212.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATtiny212]\nplatform = atmelmegaavr\nboard = ATtiny212\n\n; change microcontroller\nboard_build.mcu = attiny212\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing ACSIP S76S Board Configuration in PlatformIO\nDESCRIPTION: Extended configuration for ACSIP S76S that demonstrates how to override default board settings like microcontroller type and CPU frequency in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/acsip_s76s.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:acsip_s76s]\nplatform = ststm32\nboard = acsip_s76s\n\n; change microcontroller\nboard_build.mcu = stm32l073rz\n\n; change MCU frequency\nboard_build.f_cpu = 32000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing AVR64DA28 Board Settings in PlatformIO\nDESCRIPTION: Advanced PlatformIO configuration demonstrating how to override default settings for the AVR64DA28 board, including microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/AVR64DA28.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:AVR64DA28]\nplatform = atmelmegaavr\nboard = AVR64DA28\n\n; change microcontroller\nboard_build.mcu = avr64da28\n\n; change MCU frequency\nboard_build.f_cpu = 24000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Sino:Bit Board in PlatformIO INI File\nDESCRIPTION: Basic configuration for the Sino:Bit board using the Nordic nRF51 platform. Includes options to override default settings such as microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf51/Sinobit.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:Sinobit]\nplatform = nordicnrf51\nboard = Sinobit\n\n; change microcontroller\nboard_build.mcu = nrf51822\n\n; change MCU frequency\nboard_build.f_cpu = 32000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring NIBObee 1284 Board in platformio.ini\nDESCRIPTION: Basic configuration for the nicai-systems NIBObee robot with Tuning Kit in the project's platformio.ini file. This sets the platform to atmelavr and specifies the board as nibobee_1284.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/nibobee_1284.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nibobee_1284]\nplatform = atmelavr\nboard = nibobee_1284\n```\n\n----------------------------------------\n\nTITLE: Setting upload protocol for NXP i.MX RT1015 Evaluation Kit\nDESCRIPTION: Configuration to change the upload protocol for the NXP i.MX RT1015 Evaluation Kit. In this example, it's set to 'mbed'.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nxpimxrt/mimxrt1015_evk.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:mimxrt1015_evk]\nplatform = nxpimxrt\nboard = mimxrt1015_evk\n\nupload_protocol = mbed\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for STM32F103R6\nDESCRIPTION: Configuration to set the upload protocol for the STM32F103R6 board. The default protocol is 'serial'.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103R6.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103R6]\nplatform = ststm32\nboard = genericSTM32F103R6\n\nupload_protocol = serial\n```\n\n----------------------------------------\n\nTITLE: Configuring SparkFun LoRa Gateway 1-Channel Board in PlatformIO\nDESCRIPTION: Basic configuration for setting up the SparkFun LoRa Gateway 1-Channel board in the PlatformIO environment. This snippet specifies the platform (espressif32) and board identifier.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/sparkfun_lora_gateway_1-channel.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:sparkfun_lora_gateway_1-channel]\nplatform = espressif32\nboard = sparkfun_lora_gateway_1-channel\n```\n\n----------------------------------------\n\nTITLE: M5Stack CoreS3 Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/m5stack-cores3.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:m5stack-cores3]\nplatform = espressif32\nboard = m5stack-cores3\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Basic PICadillo 35T Board Configuration\nDESCRIPTION: Basic PlatformIO configuration for the PICadillo 35T board using the microchippic32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/microchippic32/picadillo_35t.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:picadillo_35t]\nplatform = microchippic32\nboard = picadillo_35t\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic STC8H1K32S2 Board in PlatformIO\nDESCRIPTION: This snippet shows how to configure the Generic STC8H1K32S2 board in a PlatformIO project's configuration file (platformio.ini). It sets the platform to intel_mcs51 and specifies the board as STC8H1K32S2.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8H1K32S2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8H1K32S2]\nplatform = intel_mcs51\nboard = STC8H1K32S2\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration for TI LaunchPad tm4c129\nDESCRIPTION: Basic PlatformIO environment configuration for the TI LaunchPad board using the titiva platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/titiva/lptm4c1294ncpdt.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:lptm4c1294ncpdt]\nplatform = titiva\nboard = lptm4c1294ncpdt\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration with MCU Settings\nDESCRIPTION: Extended configuration for AVR128DB32 that demonstrates how to override default board settings including microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/AVR128DB32.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:AVR128DB32]\nplatform = atmelmegaavr\nboard = AVR128DB32\n\n; change microcontroller\nboard_build.mcu = avr128db32\n\n; change MCU frequency\nboard_build.f_cpu = 24000000L\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration for STC8H1K17\nDESCRIPTION: Basic PlatformIO configuration for setting up the STC8H1K17 board using the intel_mcs51 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8H1K17.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8H1K17]\nplatform = intel_mcs51\nboard = STC8H1K17\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU Settings\nDESCRIPTION: Demonstrates how to override default board settings like microcontroller type and CPU frequency using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/franzininho_wifi_msc_esp32s2.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:franzininho_wifi_msc_esp32s2]\nplatform = espressif32\nboard = franzininho_wifi_msc_esp32s2\n\n; change microcontroller\nboard_build.mcu = esp32s2\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for NanoS3\nDESCRIPTION: Basic configuration setup for Unexpected Maker NanoS3 board in platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/um_nanos3.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:um_nanos3]\nplatform = espressif32\nboard = um_nanos3\n```\n\n----------------------------------------\n\nTITLE: Customizing NXP i.MX RT1020 Evaluation Kit settings\nDESCRIPTION: Example of overriding default board settings in platformio.ini. It demonstrates changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nxpimxrt/mimxrt1020_evk.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:mimxrt1020_evk]\nplatform = nxpimxrt\nboard = mimxrt1020_evk\n\n; change microcontroller\nboard_build.mcu = mimxrt1021dag5a\n\n; change MCU frequency\nboard_build.f_cpu = 500000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol Configuration\nDESCRIPTION: Configuration example for specifying the upload protocol used to program the board\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/elektor_f072c8.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:elektor_f072c8]\nplatform = ststm32\nboard = elektor_f072c8\n\nupload_protocol = serial\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration for STM32 Nucleo G431KB\nDESCRIPTION: Basic PlatformIO configuration for Nucleo G431KB board using the STM32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_g431kb.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_g431kb]\nplatform = ststm32\nboard = nucleo_g431kb\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for FK407M1 Board\nDESCRIPTION: Configuration for specifying the upload protocol for the FK407M1 board. This example shows how to set STLink as the upload protocol, which is also the default for this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/fk407m1.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:fk407m1]\nplatform = ststm32\nboard = fk407m1\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for ST Nucleo F411RE in PlatformIO\nDESCRIPTION: Configuration example showing how to specify an upload protocol for the ST Nucleo F411RE board. This snippet demonstrates using the stlink protocol, which is the default for this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f411re.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f411re]\nplatform = ststm32\nboard = nucleo_f411re\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the board\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/deneyapminiv2.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:deneyapminiv2]\nplatform = espressif32\nboard = deneyapminiv2\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring Widora AIR Board in platformio.ini\nDESCRIPTION: Basic configuration for using the Widora AIR board with the Espressif32 platform in a PlatformIO project. Sets the board ID and platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/widora-air.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:widora-air]\nplatform = espressif32\nboard = widora-air\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Adafruit Trinket M0\nDESCRIPTION: Basic PlatformIO configuration for Adafruit Trinket M0 board. This snippet shows how to specify the board in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_trinket_m0.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_trinket_m0]\nplatform = atmelsam\nboard = adafruit_trinket_m0\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU Settings\nDESCRIPTION: Extended PlatformIO configuration demonstrating how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/mgbot-iotik32a.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:mgbot-iotik32a]\nplatform = espressif32\nboard = mgbot-iotik32a\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Generic STC8F1K08S2A10 Board Settings in PlatformIO\nDESCRIPTION: This snippet demonstrates how to override default board settings in a PlatformIO project configuration. It includes examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8F1K08S2A10.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8F1K08S2A10]\nplatform = intel_mcs51\nboard = STC8F1K08S2A10\n\n; change microcontroller\nboard_build.mcu = stc8f1k08s2A10\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Basic NodeMCU-32S2 Board Configuration\nDESCRIPTION: Basic configuration for setting up a PlatformIO project with NodeMCU-32S2 board using the espressif32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/nodemcu-32s2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nodemcu-32s2]\nplatform = espressif32\nboard = nodemcu-32s2\n```\n\n----------------------------------------\n\nTITLE: Customizing STM32F103RC Board Settings in platformio.ini\nDESCRIPTION: Example of overriding default STM32F103RC board settings by changing the microcontroller and clock frequency in platformio.ini.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103RC.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103RC]\nplatform = ststm32\nboard = genericSTM32F103RC\n\n; change microcontroller\nboard_build.mcu = stm32f103rct6\n\n; change MCU frequency\nboard_build.f_cpu = 72000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for DFRobot Firebeetle 2 ESP32-E\nDESCRIPTION: Configuration to specify the upload protocol for the DFRobot Firebeetle 2 ESP32-E board. This example uses the default 'esptool' protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/dfrobot_firebeetle2_esp32e.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:dfrobot_firebeetle2_esp32e]\nplatform = espressif32\nboard = dfrobot_firebeetle2_esp32e\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring Deneyap Kart 1A v2 Board in PlatformIO\nDESCRIPTION: Basic configuration for the Deneyap Kart 1A v2 board in the project's platformio.ini file. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/deneyapkart1Av2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:deneyapkart1Av2]\nplatform = espressif32\nboard = deneyapkart1Av2\n```\n\n----------------------------------------\n\nTITLE: Advanced ATtiny824 Configuration with Custom Settings\nDESCRIPTION: Demonstrates how to override default board settings like microcontroller type and CPU frequency in the PlatformIO configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/ATtiny824.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATtiny824]\nplatform = atmelmegaavr\nboard = ATtiny824\n\n; change microcontroller\nboard_build.mcu = attiny824\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU Settings\nDESCRIPTION: Extended configuration showing how to override default board settings like microcontroller type and CPU frequency using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/microduino-core-esp32.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:microduino-core-esp32]\nplatform = espressif32\nboard = microduino-core-esp32\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with Custom Settings\nDESCRIPTION: Extended PlatformIO configuration demonstrating how to override default board settings including microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8A8K32S4A12.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8A8K32S4A12]\nplatform = intel_mcs51\nboard = STC8A8K32S4A12\n\n; change microcontroller\nboard_build.mcu = stc8a8k32s4a12\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Customizing Board Parameters in PlatformIO\nDESCRIPTION: Example showing how to override default board settings such as microcontroller model and CPU frequency in a PlatformIO project configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f070rb.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f070rb]\nplatform = ststm32\nboard = nucleo_f070rb\n\n; change microcontroller\nboard_build.mcu = stm32f070rbt6\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration with Custom MCU Settings for STC15W4K48S4\nDESCRIPTION: Extended PlatformIO configuration that demonstrates how to override default board settings like microcontroller model and CPU frequency. This example shows customizing the microcontroller and clock frequency for the STC15W4K48S4 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15W4K48S4.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15W4K48S4]\nplatform = intel_mcs51\nboard = STC15W4K48S4\n\n; change microcontroller\nboard_build.mcu = stc15w4k48s4\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration for ESP32-S2\nDESCRIPTION: Basic PlatformIO configuration for Adafruit Feather ESP32-S2 Reverse TFT board using the espressif32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/adafruit_feather_esp32s2_reversetft.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_feather_esp32s2_reversetft]\nplatform = espressif32\nboard = adafruit_feather_esp32s2_reversetft\n```\n\n----------------------------------------\n\nTITLE: Example of Uninstalling PlatformIO Development Platform\nDESCRIPTION: This example demonstrates the process of uninstalling the 'atmelavr' platform using the 'pio platform uninstall' command. It shows the output of the command, including the uninstallation of dependent packages.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/platforms/cmd_uninstall.rst#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> pio platform uninstall atmelavr\nUninstalling platform atmelavr @ 0.0.0:    [OK]\nUninstalling package tool-scons @ 2.4.1:    [OK]\nUninstalling package toolchain-atmelavr @ 1.40801.0:    [OK]\nThe platform 'atmelavr' has been successfully uninstalled!\n```\n\n----------------------------------------\n\nTITLE: Customizing Generic STC15W202S Board Settings in PlatformIO\nDESCRIPTION: This snippet demonstrates how to override default board settings in the PlatformIO configuration. It shows examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15W202S.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15W202S]\nplatform = intel_mcs51\nboard = STC15W202S\n\n; change microcontroller\nboard_build.mcu = stc15w202s\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for u-blox NINA-W10 series\nDESCRIPTION: Configuration to specify the upload protocol for the u-blox NINA-W10 series board in PlatformIO.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/nina_w10.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:nina_w10]\nplatform = espressif32\nboard = nina_w10\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Customizing SparkFun RedBoard Settings in PlatformIO\nDESCRIPTION: Advanced configuration for SparkFun RedBoard that demonstrates how to override default board settings. This example shows how to specify the microcontroller and adjust the MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/sparkfun_redboard.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:sparkfun_redboard]\nplatform = atmelavr\nboard = sparkfun_redboard\n\n; change microcontroller\nboard_build.mcu = atmega328p\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration for PlatformIO\nDESCRIPTION: Minimal configuration required to set up a PlatformIO project for the Heltec CubeCell-GPS board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/heltec-cubecell/cubecell_gps.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:cubecell_gps]\nplatform = heltec-cubecell\nboard = cubecell_gps\n```\n\n----------------------------------------\n\nTITLE: Customizing TI LaunchPad MSP-EXP430G2 w/ MSP430G2231 Configuration\nDESCRIPTION: Example of overriding default board settings in platformio.ini. This demonstrates how to change the microcontroller and CPU frequency for the TI LaunchPad MSP-EXP430G2 w/ MSP430G2231 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/timsp430/lpmsp430g2231.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:lpmsp430g2231]\nplatform = timsp430\nboard = lpmsp430g2231\n\n; change microcontroller\nboard_build.mcu = msp430g2231\n\n; change MCU frequency\nboard_build.f_cpu = 1000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Upstream Development Version of Espressif 8266 Platform\nDESCRIPTION: Configuration example for using the latest upstream development version of the Espressif 8266 platform directly from GitHub in platformio.ini.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/espressif8266.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:upstream_develop]\nplatform = https://github.com/platformio/platform-espressif8266.git\nboard = ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic ATmega329 Project in PlatformIO\nDESCRIPTION: A basic configuration for setting up an ATmega329 project in PlatformIO's project configuration file. This snippet defines the basic environment, platform, and board selection.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega329.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega329]\nplatform = atmelavr\nboard = ATmega329\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Board Settings in PlatformIO\nDESCRIPTION: Basic configuration for setting up the Maxim Health Sensor Platform board in PlatformIO environment settings. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/maxim32/max32620hsp.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:max32620hsp]\nplatform = maxim32\nboard = max32620hsp\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Board Settings in PlatformIO\nDESCRIPTION: Basic PlatformIO configuration for the Adafruit Slide Trinkey board using the atmelsam platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_slidetrinkey_m0.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_slidetrinkey_m0]\nplatform = atmelsam\nboard = adafruit_slidetrinkey_m0\n```\n\n----------------------------------------\n\nTITLE: Customizing MGBOT IOTIK 32B Board Settings\nDESCRIPTION: Demonstrates how to override default board settings such as microcontroller and CPU frequency in the PlatformIO configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/mgbot-iotik32b.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:mgbot-iotik32b]\nplatform = espressif32\nboard = mgbot-iotik32b\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for BluePill F103C8\nDESCRIPTION: This snippet shows how to set a specific upload protocol (in this case, ST-Link) for the BluePill F103C8 board in the PlatformIO configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/bluepill_f103c8.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:bluepill_f103c8]\nplatform = ststm32\nboard = bluepill_f103c8\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Customizing Board Settings for Silicognition wESP32\nDESCRIPTION: Extended PlatformIO configuration showing how to override default board settings such as microcontroller type and CPU frequency for the Silicognition wESP32 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/wesp32.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:wesp32]\nplatform = espressif32\nboard = wesp32\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for TI LaunchPad MSP-EXP430FR2311LP\nDESCRIPTION: Basic PlatformIO configuration for the TI LaunchPad MSP-EXP430FR2311LP board. This configuration sets up the board with the timsp430 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/timsp430/lpmsp430fr2311.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:lpmsp430fr2311]\nplatform = timsp430\nboard = lpmsp430fr2311\n```\n\n----------------------------------------\n\nTITLE: Advanced OpenRTK330L Board Configuration with MCU Settings\nDESCRIPTION: Extended PlatformIO configuration for OpenRTK330L with custom microcontroller and frequency settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/aceinna_imu/OpenRTK330L.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:OpenRTK330L]\nplatform = aceinna_imu\nboard = OpenRTK330L\n\n; change microcontroller\nboard_build.mcu = stm32f469IG\n\n; change MCU frequency\nboard_build.f_cpu = 180000000L\n```\n\n----------------------------------------\n\nTITLE: PlatformIO Upload Protocol Configuration\nDESCRIPTION: Configuration for specifying the upload protocol for Heltec WiFi LoRa 32 V2\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/heltec_wifi_lora_32_V2.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:heltec_wifi_lora_32_V2]\nplatform = espressif32\nboard = heltec_wifi_lora_32_V2\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for ATtiny1627 Board\nDESCRIPTION: Basic PlatformIO configuration for using the ATtiny1627 board in a project. This sets up the appropriate platform (atmelmegaavr) and board identifier.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/ATtiny1627.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATtiny1627]\nplatform = atmelmegaavr\nboard = ATtiny1627\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Digilent Nexys A7 Board\nDESCRIPTION: Basic configuration for using the Digilent Nexys A7 board with PlatformIO. This snippet shows how to specify the board in the platformio.ini configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/openhw/nexys_a7.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nexys_a7]\nplatform = openhw\nboard = nexys_a7\n```\n\n----------------------------------------\n\nTITLE: Customizing ST Nucleo F412ZG Board Settings\nDESCRIPTION: Example of overriding default board settings, such as changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f412zg.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f412zg]\nplatform = ststm32\nboard = nucleo_f412zg\n\n; change microcontroller\nboard_build.mcu = stm32f412zgt6\n\n; change MCU frequency\nboard_build.f_cpu = 100000000L\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for STC8H3K32S2\nDESCRIPTION: Basic environment configuration for the STC8H3K32S2 board in platformio.ini file, specifying the platform and board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8H3K32S2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8H3K32S2]\nplatform = intel_mcs51\nboard = STC8H3K32S2\n```\n\n----------------------------------------\n\nTITLE: Customizing M5Stack Timer CAM Board Settings in PlatformIO\nDESCRIPTION: Example of overriding default board settings for the M5Stack Timer CAM. This snippet demonstrates how to change the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/m5stack-timer-cam.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:m5stack-timer-cam]\nplatform = espressif32\nboard = m5stack-timer-cam\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic PlatformIO Environment for chipKIT WF32\nDESCRIPTION: Basic configuration snippet for setting up a PlatformIO environment for the Digilent chipKIT WF32 board. This configuration specifies the platform as microchippic32 and the board as chipkit_wf32.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/microchippic32/chipkit_wf32.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:chipkit_wf32]\nplatform = microchippic32\nboard = chipkit_wf32\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration with Custom MCU Settings for chipKIT Pro MX7\nDESCRIPTION: Extended configuration demonstrating how to override default board settings such as microcontroller type and CPU frequency using board_build properties in platformio.ini.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/microchippic32/chipkit_pro_mx7.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:chipkit_pro_mx7]\nplatform = microchippic32\nboard = chipkit_pro_mx7\n\n; change microcontroller\nboard_build.mcu = 32MX795F512L\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU and Frequency Settings\nDESCRIPTION: Extended configuration example showing how to override default microcontroller and frequency settings for the Maxim Wireless Sensor Node Demonstrator.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/maxim32/maxwsnenv.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:maxwsnenv]\nplatform = maxim32\nboard = maxwsnenv\n\n; change microcontroller\nboard_build.mcu = max32610\n\n; change MCU frequency\nboard_build.f_cpu = 24000000L\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Wio Node Settings in PlatformIO INI File\nDESCRIPTION: This snippet demonstrates how to override default Wio Node settings in the PlatformIO configuration. It changes the microcontroller and MCU frequency using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/wio_node.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:wio_node]\nplatform = espressif8266\nboard = wio_node\n\n; change microcontroller\nboard_build.mcu = esp8266\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for Arduino Mega 2560\nDESCRIPTION: Minimal configuration for setting up an Arduino Mega 2560 project in PlatformIO. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/megaatmega2560.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:megaatmega2560]\nplatform = atmelavr\nboard = megaatmega2560\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for XinaBox CW02 in PlatformIO\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the XinaBox CW02 board. The default protocol is esptool.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/xinabox_cw02.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:xinabox_cw02]\nplatform = espressif32\nboard = xinabox_cw02\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for NXP mbed LPC1768 in PlatformIO\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the NXP mbed LPC1768 board. The board supports blackmagic, cmsis-dap, jlink, and mbed protocols, with mbed being the default.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nxplpc/lpc1768.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:lpc1768]\nplatform = nxplpc\nboard = lpc1768\n\nupload_protocol = mbed\n```\n\n----------------------------------------\n\nTITLE: Customizing Hornbill ESP32 Dev Board Settings\nDESCRIPTION: Example of overriding default board settings in PlatformIO, such as changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/hornbill32dev.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:hornbill32dev]\nplatform = espressif32\nboard = hornbill32dev\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced STC15F203A Board Configuration with Custom Settings\nDESCRIPTION: Extended configuration example showing how to override default board settings like microcontroller type and CPU frequency in platformio.ini.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15F203A.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15F203A]\nplatform = intel_mcs51\nboard = STC15F203A\n\n; change microcontroller\nboard_build.mcu = stc15f203a\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for STM32F446RC\nDESCRIPTION: Configuration for changing the upload protocol in platformio.ini. This example sets the protocol to serial, which is the default for this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F446RC.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F446RC]\nplatform = ststm32\nboard = genericSTM32F446RC\n\nupload_protocol = serial\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/imbrios-logsens-v1p1.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:imbrios-logsens-v1p1]\nplatform = espressif32\nboard = imbrios-logsens-v1p1\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Environment Configuration for STM8S105K4T6\nDESCRIPTION: Basic configuration for setting up a PlatformIO environment for the STM8S105K4T6 board using the ststm8 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm8/stm8sblack.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:stm8sblack]\nplatform = ststm8\nboard = stm8sblack\n```\n\n----------------------------------------\n\nTITLE: Configuring ESP32-S3-Box Board in platformio.ini\nDESCRIPTION: Basic configuration for the Espressif ESP32-S3-Box board in the platformio.ini file. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32s3box.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32s3box]\nplatform = espressif32\nboard = esp32s3box\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Pic32 CUI32-Development Stick Settings\nDESCRIPTION: This snippet demonstrates how to override default board settings in the PlatformIO configuration. It shows examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/microchippic32/cui32.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:cui32]\nplatform = microchippic32\nboard = cui32\n\n; change microcontroller\nboard_build.mcu = 32MX440F512H\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Blues Cygnet Board Environment\nDESCRIPTION: Basic PlatformIO configuration for Blues Cygnet board using STM32 platform\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/blues_cygnet.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:blues_cygnet]\nplatform = ststm32\nboard = blues_cygnet\n```\n\n----------------------------------------\n\nTITLE: Configuring SparkFun ESP32-S2 Thing Plus Board in platformio.ini\nDESCRIPTION: Basic configuration for the SparkFun ESP32-S2 Thing Plus board in the project's platformio.ini file. It specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/sparkfun_esp32s2_thing_plus.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:sparkfun_esp32s2_thing_plus]\nplatform = espressif32\nboard = sparkfun_esp32s2_thing_plus\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic STC8C1K12 Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to set up the Generic STC8C1K12 board in the PlatformIO project configuration file. It specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8C1K12.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8C1K12]\nplatform = intel_mcs51\nboard = STC8C1K12\n```\n\n----------------------------------------\n\nTITLE: Customizing TTGO T7 V1.4 Mini32 Board Settings in PlatformIO\nDESCRIPTION: Example showing how to override default board settings like microcontroller type and CPU frequency using board_build options in the PlatformIO configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/ttgo-t7-v14-mini32.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ttgo-t7-v14-mini32]\nplatform = espressif32\nboard = ttgo-t7-v14-mini32\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing STM32F411CE Board Settings in PlatformIO\nDESCRIPTION: Example of overriding default board settings in PlatformIO configuration. Demonstrates changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F411CE.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F411CE]\nplatform = ststm32\nboard = genericSTM32F411CE\n\n; change microcontroller\nboard_build.mcu = stm32f411ceu6\n\n; change MCU frequency\nboard_build.f_cpu = 100000000L\n```\n\n----------------------------------------\n\nTITLE: Custom MCU Settings Configuration\nDESCRIPTION: Configuration example showing how to override default microcontroller and frequency settings for the SparkFun 9DoF Razor IMU M0 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/sparkfun_samd21_9dof.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:sparkfun_samd21_9dof]\nplatform = atmelsam\nboard = sparkfun_samd21_9dof\n\n; change microcontroller\nboard_build.mcu = samd21g18a\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU Settings\nDESCRIPTION: Extended configuration showing how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/lolin_s3.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:lolin_s3]\nplatform = espressif32\nboard = lolin_s3\n\n; change microcontroller\nboard_build.mcu = esp32s3\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: ESP32-EVB Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the OLIMEX ESP32-EVB board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32-evb.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32-evb]\nplatform = espressif32\nboard = esp32-evb\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration for Sparky V1 F303\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the board using ST-Link.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/sparky_v1.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:sparky_v1]\nplatform = ststm32\nboard = sparky_v1\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic ML51TB9AE Board in PlatformIO\nDESCRIPTION: This snippet shows how to configure the Generic ML51TB9AE board in a PlatformIO project's configuration file. It sets the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/ML51TB9AE.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ML51TB9AE]\nplatform = intel_mcs51\nboard = ML51TB9AE\n```\n\n----------------------------------------\n\nTITLE: Configuring RYMCU ESP32-DevKitC Board in PlatformIO Configuration\nDESCRIPTION: Basic configuration for the RYMCU ESP32-DevKitC board in the platformio.ini project configuration file. It specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/rymcu-esp32-devkitc.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:rymcu-esp32-devkitc]\nplatform = espressif32\nboard = rymcu-esp32-devkitc\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol in PlatformIO INI\nDESCRIPTION: Shows how to set the upload protocol for the Aceinna OpenIMU 330ZA board. In this example, it's set to stlink.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/aceinna_imu/OpenRTK.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:OpenRTK]\nplatform = aceinna_imu\nboard = OpenRTK\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Customizing MCU and Clock Settings for RAK811 LoRa Tracker\nDESCRIPTION: Configuration example showing how to override default board settings by customizing the microcontroller type and CPU frequency in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/rak811_tracker.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:rak811_tracker]\nplatform = ststm32\nboard = rak811_tracker\n\n; change microcontroller\nboard_build.mcu = stm32l151rbt6\n\n; change MCU frequency\nboard_build.f_cpu = 32000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring STM32F103R6 Board in PlatformIO\nDESCRIPTION: Basic configuration for using the STM32F103R6 board in a PlatformIO project. Sets the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103R6.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103R6]\nplatform = ststm32\nboard = genericSTM32F103R6\n```\n\n----------------------------------------\n\nTITLE: Configuring Adafruit Feather M0 Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the Adafruit Feather M0 board in the PlatformIO project configuration file. It includes the basic setup and demonstrates how to override default board settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_feather_m0.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_feather_m0]\nplatform = atmelsam\nboard = adafruit_feather_m0\n\n; change microcontroller\nboard_build.mcu = samd21g18a\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic MAX32620FTHR Board Settings\nDESCRIPTION: Basic PlatformIO configuration for MAX32620FTHR board setup using the maxim32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/maxim32/max32620fthr.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:max32620fthr]\nplatform = maxim32\nboard = max32620fthr\n```\n\n----------------------------------------\n\nTITLE: Advanced N79E352 Board Configuration with Custom Settings\nDESCRIPTION: Extended PlatformIO configuration demonstrating how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/N79E352.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:N79E352]\nplatform = intel_mcs51\nboard = N79E352\n\n; change microcontroller\nboard_build.mcu = n79e352\n\n; change MCU frequency\nboard_build.f_cpu = 22118400L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Board Settings in PlatformIO\nDESCRIPTION: Basic configuration for ST STM32LDISCOVERY board in platformio.ini file, specifying the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_l152rb.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_l152rb]\nplatform = ststm32\nboard = disco_l152rb\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for ESP32-S3 PowerFeather\nDESCRIPTION: Initial configuration setup for ESP32-S3 PowerFeather board in platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32s3_powerfeather.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32s3_powerfeather]\nplatform = espressif32\nboard = esp32s3_powerfeather\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Adafruit Feather ESP32-S3 TFT\nDESCRIPTION: Configuration to specify the upload protocol for the Adafruit Feather ESP32-S3 TFT board. The example uses the default 'esptool' protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/adafruit_feather_esp32s3_tft.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_feather_esp32s3_tft]\nplatform = espressif32\nboard = adafruit_feather_esp32s3_tft\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Digilent chipKIT UNO32\nDESCRIPTION: This snippet shows how to configure a PlatformIO project for the Digilent chipKIT UNO32 board. It sets the platform to microchippic32 and the board to uno_pic32.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/microchippic32/uno_pic32.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:uno_pic32]\nplatform = microchippic32\nboard = uno_pic32\n```\n\n----------------------------------------\n\nTITLE: Customizing ATmega169A Board Settings in PlatformIO INI File\nDESCRIPTION: This code snippet demonstrates how to override default ATmega169A board settings in a PlatformIO project configuration file. It shows examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega169A.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega169A]\nplatform = atmelavr\nboard = ATmega169A\n\n; change microcontroller\nboard_build.mcu = atmega169a\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic STC8H2K60T Board Settings in PlatformIO\nDESCRIPTION: Basic configuration for the STC8H2K60T board in the platformio.ini project configuration file. This sets up the Intel MCS-51 platform with the STC8H2K60T board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8H2K60T.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8H2K60T]\nplatform = intel_mcs51\nboard = STC8H2K60T\n```\n\n----------------------------------------\n\nTITLE: Customizing ATtiny807 Board Settings in PlatformIO\nDESCRIPTION: Advanced PlatformIO configuration demonstrating how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/ATtiny807.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATtiny807]\nplatform = atmelmegaavr\nboard = ATtiny807\n\n; change microcontroller\nboard_build.mcu = attiny807\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing NoFire Board Settings in PlatformIO\nDESCRIPTION: Advanced PlatformIO configuration showing how to override default microcontroller and frequency settings for the Pontech NoFire board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/microchippic32/nofire.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nofire]\nplatform = microchippic32\nboard = nofire\n\n; change microcontroller\nboard_build.mcu = 32MZ2048EFG100\n\n; change MCU frequency\nboard_build.f_cpu = 200000000L\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Demonstrates how to set the upload protocol for firmware deployment to the board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/valtrack_v4_vts_esp32_c3.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:valtrack_v4_vts_esp32_c3]\nplatform = espressif32\nboard = valtrack_v4_vts_esp32_c3\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Customizing ArtronShop IOXESP32 Board Settings in PlatformIO\nDESCRIPTION: Advanced configuration example showing how to override default board settings such as the microcontroller and CPU frequency. These settings override the defaults in the board manifest file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/ioxesp32.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ioxesp32]\nplatform = espressif32\nboard = ioxesp32\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing ATtiny2313 Board Configuration in PlatformIO\nDESCRIPTION: Extended configuration for the ATtiny2313 board that demonstrates how to override default settings. This example shows how to change the microcontroller model and adjust the MCU frequency to 8MHz.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/attiny2313.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:attiny2313]\nplatform = atmelavr\nboard = attiny2313\n\n; change microcontroller\nboard_build.mcu = attiny2313\n\n; change MCU frequency\nboard_build.f_cpu = 8000000L\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration for STM32 Core Board F401RC\nDESCRIPTION: Minimal configuration setup for Core board F401RCT6 using PlatformIO. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/coreboard_f401rc.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:coreboard_f401rc]\nplatform = ststm32\nboard = coreboard_f401rc\n```\n\n----------------------------------------\n\nTITLE: Custom MCU Configuration for MultiTech mDot\nDESCRIPTION: Example showing how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/mts_mdot_f405rg.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:mts_mdot_f405rg]\nplatform = ststm32\nboard = mts_mdot_f405rg\n\n; change microcontroller\nboard_build.mcu = stm32f411ret6\n\n; change MCU frequency\nboard_build.f_cpu = 100000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing STC8H4K60TLR Board Configuration in platformio.ini\nDESCRIPTION: Extended configuration for the STC8H4K60TLR board with custom microcontroller and frequency settings. This snippet demonstrates how to override the default board settings using the board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8H4K60TLR.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8H4K60TLR]\nplatform = intel_mcs51\nboard = STC8H4K60TLR\n\n; change microcontroller\nboard_build.mcu = stc8h4k60tlr\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Customizing ST Nucleo F303K8 Board Settings\nDESCRIPTION: Example of overriding default board settings in the PlatformIO configuration. Demonstrates changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f303k8.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f303k8]\nplatform = ststm32\nboard = nucleo_f303k8\n\n; change microcontroller\nboard_build.mcu = stm32f303k8t6\n\n; change MCU frequency\nboard_build.f_cpu = 72000000L\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration in PlatformIO\nDESCRIPTION: Basic configuration for setting up a PlatformIO project for the Microduino Core ESP32 board using the espressif32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/microduino-core-esp32.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:microduino-core-esp32]\nplatform = espressif32\nboard = microduino-core-esp32\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Protocol for Lion:Bit Dev Board\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the Lion:Bit Dev Board. This example uses the default esptool protocol, but the board supports multiple other protocols as well.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/lionbit.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:lionbit]\nplatform = espressif32\nboard = lionbit\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring RedBearLab BLE Nano 2 Board in PlatformIO\nDESCRIPTION: Basic PlatformIO configuration for the RedBearLab BLE Nano 2 board. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/redbear_blenano2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:redbear_blenano2]\nplatform = nordicnrf52\nboard = redbear_blenano2\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for IntoRobot Board\nDESCRIPTION: Configuration example for specifying the upload protocol (esptool) for the IntoRobot Fig board\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/intorobot.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:intorobot]\nplatform = espressif32\nboard = intorobot\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Custom MCU and Frequency Configuration for Armstrap Eagle 512\nDESCRIPTION: Advanced configuration that shows how to override default board settings such as microcontroller and CPU frequency in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/armstrap_eagle512.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:armstrap_eagle512]\nplatform = ststm32\nboard = armstrap_eagle512\n\n; change microcontroller\nboard_build.mcu = stm32f407vet6\n\n; change MCU frequency\nboard_build.f_cpu = 168000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing LoRa32u4II Board Settings in PlatformIO INI File\nDESCRIPTION: This snippet demonstrates how to override default settings for the LoRa32u4II board in the PlatformIO configuration. It includes examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/lora32u4II.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:lora32u4II]\nplatform = atmelavr\nboard = lora32u4II\n\n; change microcontroller\nboard_build.mcu = atmega32u4\n\n; change MCU frequency\nboard_build.f_cpu = 8000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring STM32F4Stamp F405 Board in platformio.ini\nDESCRIPTION: Basic configuration for using the STM32F4Stamp F405 board in a PlatformIO project. This snippet shows how to specify the board in the project's configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/stm32f4stamp.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:stm32f4stamp]\nplatform = ststm32\nboard = stm32f4stamp\n```\n\n----------------------------------------\n\nTITLE: Customizing SparkFun SAMD21 Mini Breakout Settings\nDESCRIPTION: Example of overriding default board settings in PlatformIO, such as changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/sparkfun_samd21_mini_usb.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:sparkfun_samd21_mini_usb]\nplatform = atmelsam\nboard = sparkfun_samd21_mini_usb\n\n; change microcontroller\nboard_build.mcu = samd21g18a\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring WEMOS LOLIN32 Board in PlatformIO\nDESCRIPTION: Basic PlatformIO configuration for the WEMOS LOLIN32 board using the Espressif32 platform. This snippet shows how to define the board in the PlatformIO configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/lolin32.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:lolin32]\nplatform = espressif32\nboard = lolin32\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic PlatformIO Project for ACSIP S76S Board\nDESCRIPTION: Basic configuration in platformio.ini file to set up a project for the ACSIP S76S board using the STM32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/acsip_s76s.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:acsip_s76s]\nplatform = ststm32\nboard = acsip_s76s\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for WeMos D1 mini Pro\nDESCRIPTION: Configuration example showing how to specify the upload protocol for WeMos D1 mini Pro board using esptool.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/d1_mini_pro.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:d1_mini_pro]\nplatform = espressif8266\nboard = d1_mini_pro\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Customizing WeAct Studio MiniSTM32H750VBTX Board Settings\nDESCRIPTION: Advanced configuration options for the WeAct Studio MiniSTM32H750VBTX board in PlatformIO, including how to change the microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/weact_mini_h750vbtx.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:weact_mini_h750vbtx]\nplatform = ststm32\nboard = weact_mini_h750vbtx\n\n; change microcontroller\nboard_build.mcu = stm32h750vbt6\n\n; change MCU frequency\nboard_build.f_cpu = 480000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Heltec CubeCell-Module\nDESCRIPTION: Basic configuration for setting up a PlatformIO project for the Heltec CubeCell-Module (HTCC-AM01) board. This defines the platform and board in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/heltec-cubecell/cubecell_module.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:cubecell_module]\nplatform = heltec-cubecell\nboard = cubecell_module\n```\n\n----------------------------------------\n\nTITLE: Advanced ESPDuino Board Configuration with MCU Settings\nDESCRIPTION: Extended configuration showing how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/espduino.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:espduino]\nplatform = espressif8266\nboard = espduino\n\n; change microcontroller\nboard_build.mcu = esp8266\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Pinoccio Scout Hardware Settings\nDESCRIPTION: Extended configuration for the Pinoccio Scout board with custom microcontroller and frequency settings. This demonstrates how to override default board settings using the board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/pinoccio.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:pinoccio]\nplatform = atmelavr\nboard = pinoccio\n\n; change microcontroller\nboard_build.mcu = atmega256rfr2\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration in PlatformIO\nDESCRIPTION: Basic configuration for using the Freenove ESP32-S3 WROOM board in a PlatformIO project environment\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/freenove_esp32_s3_wroom.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:freenove_esp32_s3_wroom]\nplatform = espressif32\nboard = freenove_esp32_s3_wroom\n```\n\n----------------------------------------\n\nTITLE: Configuring ESPino Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the ESPino board in the PlatformIO project configuration file. It sets the platform to espressif8266 and the board to espino.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/espino.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:espino]\nplatform = espressif8266\nboard = espino\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Nordic nRF52833-DK\nDESCRIPTION: This snippet shows how to specify the upload protocol for the Nordic nRF52833-DK board in the PlatformIO configuration. It sets the protocol to J-Link.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/nrf52833_dk.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:nrf52833_dk]\nplatform = nordicnrf52\nboard = nrf52833_dk\n\nupload_protocol = jlink\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic PlatformIO Environment for MoteinoMEGA\nDESCRIPTION: Basic PlatformIO configuration for the MoteinoMEGA board using the atmelavr platform. This snippet shows the minimum required settings for a project targeting this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/moteinomega.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:moteinomega]\nplatform = atmelavr\nboard = moteinomega\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for ST Nucleo F302R8\nDESCRIPTION: Configuration to specify the upload protocol for the ST Nucleo F302R8 board. In this example, it's set to use the ST-Link protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f302r8.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f302r8]\nplatform = ststm32\nboard = nucleo_f302r8\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Customizing Maxim ARM mbed MAX32600 Board Settings\nDESCRIPTION: Example of overriding default board settings in PlatformIO, such as changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/maxim32/max32600mbed.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:max32600mbed]\nplatform = maxim32\nboard = max32600mbed\n\n; change microcontroller\nboard_build.mcu = max32600\n\n; change MCU frequency\nboard_build.f_cpu = 24000000L\n```\n\n----------------------------------------\n\nTITLE: STM32F103RE Upload Protocol Configuration\nDESCRIPTION: PlatformIO configuration showing how to specify the upload protocol for the STM32F103RE board, using stlink as an example.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103RE.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103RE]\nplatform = ststm32\nboard = genericSTM32F103RE\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Advanced Node32s Board Configuration with Override Options\nDESCRIPTION: Example showing how to override default board settings like microcontroller and CPU frequency using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/node32s.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:node32s]\nplatform = espressif32\nboard = node32s\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Protocol for BPI-Bit\nDESCRIPTION: PlatformIO configuration demonstrating how to set the upload protocol for the BPI-Bit board. Shows usage of the esptool upload protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/bpi-bit.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:bpi-bit]\nplatform = espressif32\nboard = bpi-bit\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring WEMOS LOLIN32 Lite Board in PlatformIO\nDESCRIPTION: Basic configuration for using the WEMOS LOLIN32 Lite board in a PlatformIO project. Specifies the board ID and platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/lolin32_lite.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:lolin32_lite]\nplatform = espressif32\nboard = lolin32_lite\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration for ST NUCLEO-G031K8\nDESCRIPTION: Basic PlatformIO configuration for ST NUCLEO-G031K8 board using STM32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_g031k8.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_g031k8]\nplatform = ststm32\nboard = nucleo_g031k8\n```\n\n----------------------------------------\n\nTITLE: Customizing SparkFun Pro Micro 3.3V/8MHz Board Settings\nDESCRIPTION: Example of overriding default board settings in PlatformIO configuration. Demonstrates changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/sparkfun_promicro8.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:sparkfun_promicro8]\nplatform = atmelavr\nboard = sparkfun_promicro8\n\n; change microcontroller\nboard_build.mcu = atmega32u4\n\n; change MCU frequency\nboard_build.f_cpu = 8000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing uPesy ESP32 Wrover DevKit Settings\nDESCRIPTION: Example of overriding default board settings in the PlatformIO configuration. Demonstrates changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/upesy_wrover.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:upesy_wrover]\nplatform = espressif32\nboard = upesy_wrover\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration for STM32F3\nDESCRIPTION: Basic PlatformIO configuration for setting up an Olimexino STM32F3 board project.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/olimexino_stm32f3.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:olimexino_stm32f3]\nplatform = ststm32\nboard = olimexino_stm32f3\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration with MCU Settings\nDESCRIPTION: Extended configuration demonstrating how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/fysetc_f6_13.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:fysetc_f6_13]\nplatform = atmelavr\nboard = fysetc_f6_13\n\n; change microcontroller\nboard_build.mcu = atmega2560\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring ATtiny1626 Board in PlatformIO project\nDESCRIPTION: This snippet shows how to configure the ATtiny1626 board in a PlatformIO project's configuration file. It sets the platform and board name.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/ATtiny1626.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATtiny1626]\nplatform = atmelmegaavr\nboard = ATtiny1626\n```\n\n----------------------------------------\n\nTITLE: Configuring ST 32F413HDISCOVERY Board in PlatformIO\nDESCRIPTION: Basic configuration for using the ST 32F413HDISCOVERY board in a PlatformIO project. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_f413zh.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_f413zh]\nplatform = ststm32\nboard = disco_f413zh\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for DOIT ESPduino32\nDESCRIPTION: Configuration for specifying the upload protocol to use with the DOIT ESPduino32 board. This example sets esptool as the upload protocol in the project configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32doit-espduino.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32doit-espduino]\nplatform = espressif32\nboard = esp32doit-espduino\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic W79E633 Board in PlatformIO\nDESCRIPTION: Basic configuration for the Generic W79E633 board in the PlatformIO project configuration file. This snippet sets the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/W79E633.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:W79E633]\nplatform = intel_mcs51\nboard = W79E633\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Nordic nRF51 Dongle\nDESCRIPTION: Configuration example showing how to set the upload protocol for the Nordic nRF51 Dongle board. In this case, it's set to use the J-Link protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf51/nrf51_dongle.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:nrf51_dongle]\nplatform = nordicnrf51\nboard = nrf51_dongle\n\nupload_protocol = jlink\n```\n\n----------------------------------------\n\nTITLE: Configuring Arduino LilyPad ATmega168 in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the Arduino LilyPad ATmega168 board in the PlatformIO project configuration file. It sets the platform and board, and demonstrates how to override default settings like microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/lilypadatmega168.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:lilypadatmega168]\nplatform = atmelavr\nboard = lilypadatmega168\n\n; change microcontroller\nboard_build.mcu = atmega168\n\n; change MCU frequency\nboard_build.f_cpu = 8000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with Custom Settings\nDESCRIPTION: Extended configuration example showing how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/sifive/sparkfun_thing_plus_v.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:sparkfun_thing_plus_v]\nplatform = sifive\nboard = sparkfun_thing_plus_v\n\n; change microcontroller\nboard_build.mcu = fe310\n\n; change MCU frequency\nboard_build.f_cpu = 320000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing XinaBox CW01 Board Configuration in PlatformIO\nDESCRIPTION: Extended PlatformIO configuration that overrides default settings for the XinaBox CW01 board, including microcontroller type and CPU frequency. These settings can be adjusted by referencing the board's JSON manifest.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/xinabox_cw01.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:xinabox_cw01]\nplatform = espressif8266\nboard = xinabox_cw01\n\n; change microcontroller\nboard_build.mcu = esp8266\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Ethernet IoT Starter Kit Board in PlatformIO\nDESCRIPTION: Basic PlatformIO configuration for the Ethernet IoT Starter Kit board using the freescalekinetis platform. This sets up the environment with default board settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/freescalekinetis/IBMEthernetKit.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:IBMEthernetKit]\nplatform = freescalekinetis\nboard = IBMEthernetKit\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for ESP-WROOM-02 in PlatformIO INI File\nDESCRIPTION: This snippet shows how to set the upload protocol for the Espressif ESP-WROOM-02 board in the PlatformIO configuration. It demonstrates setting the protocol to 'esptool'.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/esp_wroom_02.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp_wroom_02]\nplatform = espressif8266\nboard = esp_wroom_02\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU and Frequency Override\nDESCRIPTION: Extended configuration example showing how to override default microcontroller and frequency settings for the SparkFun ESP8266 Thing\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/thing.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:thing]\nplatform = espressif8266\nboard = thing\n\n; change microcontroller\nboard_build.mcu = esp8266\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Taida Century nRF52 Board\nDESCRIPTION: Configuration for specifying the upload protocol to use with the board. This example sets JLink as the protocol, which is also the default for this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/stct_nrf52_minidev.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:stct_nrf52_minidev]\nplatform = nordicnrf52\nboard = stct_nrf52_minidev\n\nupload_protocol = jlink\n```\n\n----------------------------------------\n\nTITLE: Configuring WiFi Slot Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to set up a PlatformIO environment for the WiFi Slot board using the Espressif8266 platform. It includes the basic configuration and examples of how to override default settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/wifi_slot.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:wifi_slot]\nplatform = espressif8266\nboard = wifi_slot\n\n; change microcontroller\nboard_build.mcu = esp8266\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing NIBObee 1284 Board Settings in platformio.ini\nDESCRIPTION: Advanced configuration for the nicai-systems NIBObee robot that overrides default board settings. This example shows how to explicitly set the microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/nibobee_1284.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nibobee_1284]\nplatform = atmelavr\nboard = nibobee_1284\n\n; change microcontroller\nboard_build.mcu = atmega1284p\n\n; change MCU frequency\nboard_build.f_cpu = 20000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU Settings\nDESCRIPTION: Extended PlatformIO configuration demonstrating how to override default microcontroller and frequency settings for the Adafruit Rotary Trinkey.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_rotarytrinkey_m0.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_rotarytrinkey_m0]\nplatform = atmelsam\nboard = adafruit_rotarytrinkey_m0\n\n; change microcontroller\nboard_build.mcu = samd21e18a\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring BlackPill F103C8 Board in PlatformIO.ini\nDESCRIPTION: Basic configuration for using the BlackPill F103C8 in a PlatformIO project. Sets the platform to STM32 and specifies the board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/blackpill_f103c8.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:blackpill_f103c8]\nplatform = ststm32\nboard = blackpill_f103c8\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Shows how to configure the upload protocol for the board, with DFU as the default option.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/microduino32_flash.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:microduino32_flash]\nplatform = ststm32\nboard = microduino32_flash\n\nupload_protocol = dfu\n```\n\n----------------------------------------\n\nTITLE: Customizing WeMos D1 R2 and mini Hardware Settings\nDESCRIPTION: Configuration example that demonstrates how to override the default hardware settings for the WeMos D1 R2 and mini board. This includes changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/d1_mini.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:d1_mini]\nplatform = espressif8266\nboard = d1_mini\n\n; change microcontroller\nboard_build.mcu = esp8266\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic PlatformIO Environment for Curiosity Nano AVR128DB48\nDESCRIPTION: Basic configuration for setting up a PlatformIO project environment for the Curiosity Nano AVR128DB48 board. This snippet specifies the atmelmegaavr platform and the board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/curiosity_nano_db.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:curiosity_nano_db]\nplatform = atmelmegaavr\nboard = curiosity_nano_db\n```\n\n----------------------------------------\n\nTITLE: Customizing Sonoff Basic Board Configuration in PlatformIO\nDESCRIPTION: Advanced configuration for Sonoff Basic board that overrides default microcontroller and CPU frequency settings. This demonstrates how to customize board parameters in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/sonoff_basic.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:sonoff_basic]\nplatform = espressif8266\nboard = sonoff_basic\n\n; change microcontroller\nboard_build.mcu = esp8266\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring ST 32F746GDISCOVERY Board in PlatformIO\nDESCRIPTION: Basic PlatformIO configuration for the ST 32F746GDISCOVERY board, including platform and board ID specification.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_f746ng.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_f746ng]\nplatform = ststm32\nboard = disco_f746ng\n```\n\n----------------------------------------\n\nTITLE: Configuring ESPectro Core Board in PlatformIO's project configuration file\nDESCRIPTION: Basic configuration for the ESPectro Core board in the PlatformIO project file. Sets the platform to espressif8266 and the board to espectro.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/espectro.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:espectro]\nplatform = espressif8266\nboard = espectro\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for u-blox NINA-W10 series\nDESCRIPTION: Basic PlatformIO configuration for the u-blox NINA-W10 series board using the Espressif32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/nina_w10.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nina_w10]\nplatform = espressif32\nboard = nina_w10\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU Settings\nDESCRIPTION: Demonstrates how to override default board settings like microcontroller type and CPU frequency using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/adafruit_qtpy_esp32s3_n4r2.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_qtpy_esp32s3_n4r2]\nplatform = espressif32\nboard = adafruit_qtpy_esp32s3_n4r2\n\n; change microcontroller\nboard_build.mcu = esp32s3\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Basic ESPresso Lite 2.0 Board Configuration\nDESCRIPTION: Minimal configuration needed to set up an ESPresso Lite 2.0 board project in PlatformIO.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/espresso_lite_v2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:espresso_lite_v2]\nplatform = espressif8266\nboard = espresso_lite_v2\n```\n\n----------------------------------------\n\nTITLE: Customizing WeMos D1 mini Pro MCU and Frequency Settings\nDESCRIPTION: PlatformIO configuration showing how to override default microcontroller and frequency settings for WeMos D1 mini Pro board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/d1_mini_pro.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:d1_mini_pro]\nplatform = espressif8266\nboard = d1_mini_pro\n\n; change microcontroller\nboard_build.mcu = esp8266\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for M5Stack Timer CAM in PlatformIO\nDESCRIPTION: Configuration to specify the upload protocol for the M5Stack Timer CAM board. This example sets the upload protocol to 'esptool'.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/m5stack-timer-cam.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:m5stack-timer-cam]\nplatform = espressif32\nboard = m5stack-timer-cam\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO Environment for SparkFun SAMD21 Dev Breakout\nDESCRIPTION: Basic PlatformIO configuration for the SparkFun SAMD21 Dev Breakout board. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/sparkfun_samd21_dev_usb.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:sparkfun_samd21_dev_usb]\nplatform = atmelsam\nboard = sparkfun_samd21_dev_usb\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO Environment for NUCLEO-8S208RB\nDESCRIPTION: Basic PlatformIO configuration for the NUCLEO-8S208RB board in the project's platformio.ini file. This specifies the platform as ststm8 and the board as nucleo_8s208rb.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm8/nucleo_8s208rb.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_8s208rb]\nplatform = ststm8\nboard = nucleo_8s208rb\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Blues Cygnet\nDESCRIPTION: PlatformIO configuration specifying ST-Link as the upload protocol for Blues Cygnet board\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/blues_cygnet.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:blues_cygnet]\nplatform = ststm32\nboard = blues_cygnet\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Customizing Aventen S3 Sync Board Settings\nDESCRIPTION: Example of overriding default board settings in platformio.ini, including changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/aventen_s3_sync.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:aventen_s3_sync]\nplatform = espressif32\nboard = aventen_s3_sync\n\n; change microcontroller\nboard_build.mcu = esp32s3\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing STM32F103ZG Board Settings\nDESCRIPTION: Example of overriding default board settings in platformio.ini, such as changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103ZG.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103ZG]\nplatform = ststm32\nboard = genericSTM32F103ZG\n\n; change microcontroller\nboard_build.mcu = stm32f103zgt6\n\n; change MCU frequency\nboard_build.f_cpu = 72000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom MCU Settings for Arduino BT ATmega168\nDESCRIPTION: Advanced PlatformIO configuration demonstrating how to override default microcontroller settings like MCU model and frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/btatmega168.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:btatmega168]\nplatform = atmelavr\nboard = btatmega168\n\n; change microcontroller\nboard_build.mcu = atmega168\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for SparkFun Pro Micro\nDESCRIPTION: Basic configuration setup for the SparkFun Pro Micro board in platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/sparkfun_promicro16.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:sparkfun_promicro16]\nplatform = atmelavr\nboard = sparkfun_promicro16\n```\n\n----------------------------------------\n\nTITLE: Configuring TI LaunchPad MSP-EXP430FR6989LP in platformio.ini\nDESCRIPTION: This snippet shows how to configure the TI LaunchPad MSP-EXP430FR6989LP board in the PlatformIO project configuration file. It sets the platform and board, and demonstrates how to override default board settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/timsp430/lpmsp430fr6989.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:lpmsp430fr6989]\nplatform = timsp430\nboard = lpmsp430fr6989\n\n; change microcontroller\nboard_build.mcu = msp430fr6989\n\n; change MCU frequency\nboard_build.f_cpu = 8000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced STM32F103RF Configuration with MCU and Frequency Settings\nDESCRIPTION: Extended PlatformIO configuration demonstrating how to override default microcontroller and frequency settings for the STM32F103RF board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103RF.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103RF]\nplatform = ststm32\nboard = genericSTM32F103RF\n\n; change microcontroller\nboard_build.mcu = stm32f103rft6\n\n; change MCU frequency\nboard_build.f_cpu = 72000000L\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for Blue STM32F407VE Mini\nDESCRIPTION: Basic configuration setup for the Blue STM32F407VE Mini board in platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/blue_f407ve_mini.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:blue_f407ve_mini]\nplatform = ststm32\nboard = blue_f407ve_mini\n```\n\n----------------------------------------\n\nTITLE: Custom ATmega32 MCU Configuration\nDESCRIPTION: Advanced configuration example showing how to customize microcontroller and frequency settings for ATmega32 board in PlatformIO.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega32.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega32]\nplatform = atmelavr\nboard = ATmega32\n\n; change microcontroller\nboard_build.mcu = atmega32\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for decaWave DWM1001 Module Development Board\nDESCRIPTION: Basic PlatformIO configuration for the decaWave DWM1001 Module Development Board. Specifies the board ID and platform to use.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/dwm1001_dev.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:dwm1001_dev]\nplatform = nordicnrf52\nboard = dwm1001_dev\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for TinyPICO Board in PlatformIO INI File\nDESCRIPTION: Configuration to specify the upload protocol for the Unexpected Maker TinyPICO board. In this example, it's set to use the 'esptool' protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/tinypico.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:tinypico]\nplatform = espressif32\nboard = tinypico\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Hornbill ESP32 Minima\nDESCRIPTION: Basic PlatformIO configuration for the Hornbill ESP32 Minima board. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/hornbill32minima.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:hornbill32minima]\nplatform = espressif32\nboard = hornbill32minima\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Alorium Hinj Board\nDESCRIPTION: Basic PlatformIO configuration for the Alorium Hinj board. This snippet shows how to specify the board in the platformio.ini file using the atmelavr platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/alorium_hinj.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:alorium_hinj]\nplatform = atmelavr\nboard = alorium_hinj\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for SweetPea ESP-210\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the SweetPea ESP-210 board in platformio.ini. This sets the upload method to esptool.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/esp210.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp210]\nplatform = espressif8266\nboard = esp210\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Customizing FK407M1 Board Settings in PlatformIO\nDESCRIPTION: Extended configuration for the FK407M1 board with custom microcontroller and frequency settings. This demonstrates how to override default board settings from the board manifest.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/fk407m1.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:fk407m1]\nplatform = ststm32\nboard = fk407m1\n\n; change microcontroller\nboard_build.mcu = stm32f407vet6\n\n; change MCU frequency\nboard_build.f_cpu = 168000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Cricket-L082CZ\nDESCRIPTION: This configuration snippet shows how to set the upload protocol for the Cricket-L082CZ board. In this case, it's set to DFU (Device Firmware Upgrade).\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/cricket_l082cz.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:cricket_l082cz]\nplatform = ststm32\nboard = cricket_l082cz\n\nupload_protocol = dfu\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration in PlatformIO\nDESCRIPTION: Basic configuration setup for ST Nucleo F446ZE board in platformio.ini file\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f446ze.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f446ze]\nplatform = ststm32\nboard = nucleo_f446ze\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration for ST Nucleo L476RG\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the board, using ST-Link as the default uploader.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_l476rg.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_l476rg]\nplatform = ststm32\nboard = nucleo_l476rg\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Custom Hardware Configuration for ThaiEasyElec ESPino\nDESCRIPTION: Example of how to override default ThaiEasyElec ESPino settings such as microcontroller type and CPU frequency in the PlatformIO configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/espinotee.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:espinotee]\nplatform = espressif8266\nboard = espinotee\n\n; change microcontroller\nboard_build.mcu = esp8266\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Protocol for Particle Boron\nDESCRIPTION: Configuration example showing how to set a specific upload protocol for the Particle Boron board. The board supports multiple protocols with nrfutil as the default.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/particle_boron.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:particle_boron]\nplatform = nordicnrf52\nboard = particle_boron\n\nupload_protocol = nrfutil\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic IntoRobot Board Settings in PlatformIO\nDESCRIPTION: Basic configuration for IntoRobot Fig board using the espressif32 platform in platformio.ini\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/intorobot.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:intorobot]\nplatform = espressif32\nboard = intorobot\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU Settings\nDESCRIPTION: Extended configuration for Eduino WiFi board with custom microcontroller and frequency settings using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/eduinowifi.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:eduinowifi]\nplatform = espressif8266\nboard = eduinowifi\n\n; change microcontroller\nboard_build.mcu = esp8266\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the ST 32L476GDISCOVERY board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_l476vg.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_l476vg]\nplatform = ststm32\nboard = disco_l476vg\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for ESPectro Core in PlatformIO\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the ESPectro Core board. The board supports both 'espota' and 'esptool' protocols, with 'esptool' being the default.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/espectro.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:espectro]\nplatform = espressif8266\nboard = espectro\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Demonstrates how to configure the upload protocol for the STM32F407VG board, with STLink as the default option.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F407VGT6.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F407VGT6]\nplatform = ststm32\nboard = genericSTM32F407VGT6\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Raspberry Pi 3 Model B\nDESCRIPTION: This snippet shows how to configure a PlatformIO project for the Raspberry Pi 3 Model B board. It sets the platform to linux_arm and the board to raspberrypi_3b.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/linux_arm/raspberrypi_3b.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:raspberrypi_3b]\nplatform = linux_arm\nboard = raspberrypi_3b\n```\n\n----------------------------------------\n\nTITLE: Customizing Generic ESP8285 Module Settings\nDESCRIPTION: This snippet demonstrates how to override default board settings in the platformio.ini file. It shows examples of changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/esp8285.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp8285]\nplatform = espressif8266\nboard = esp8285\n\n; change microcontroller\nboard_build.mcu = esp8266\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring ATmega48PB Board in platformio.ini\nDESCRIPTION: Basic configuration for using the ATmega48PB board in a PlatformIO project. This snippet shows how to specify the board in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega48PB.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega48PB]\nplatform = atmelavr\nboard = ATmega48PB\n```\n\n----------------------------------------\n\nTITLE: Configuring Arduino/Genuino 101 Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the Arduino/Genuino 101 board in the PlatformIO project configuration file. It includes the basic setup and examples of overriding default board settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_arc32/genuino101.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:genuino101]\nplatform = intel_arc32\nboard = genuino101\n\n; change microcontroller\nboard_build.mcu = ARCv2EM\n\n; change MCU frequency\nboard_build.f_cpu = 32000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced ThunderPack Board Configuration\nDESCRIPTION: Extended PlatformIO configuration showing how to override default MCU and frequency settings\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/thunder_pack_f411.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:thunder_pack_f411]\nplatform = ststm32\nboard = thunder_pack_f411\n\n; change microcontroller\nboard_build.mcu = stm32f411ceu6\n\n; change MCU frequency\nboard_build.f_cpu = 100000000L\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration for ST Nucleo L486RG\nDESCRIPTION: Basic PlatformIO configuration for setting up an ST Nucleo L486RG board project using the STM32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_l486rg.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_l486rg]\nplatform = ststm32\nboard = nucleo_l486rg\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for STM3210C-EVAL in PlatformIO\nDESCRIPTION: PlatformIO configuration example showing how to specify the upload protocol for the STM3210C-EVAL board. This example uses the ST-Link protocol, which is the default option.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/eval_f107vc.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:eval_f107vc]\nplatform = ststm32\nboard = eval_f107vc\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Advanced STC8C1K08 Board Configuration\nDESCRIPTION: Extended PlatformIO configuration for STC8C1K08 board with custom microcontroller and frequency settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8C1K08.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8C1K08]\nplatform = intel_mcs51\nboard = STC8C1K08\n\n; change microcontroller\nboard_build.mcu = stc8c1k08\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Configuring STM32F423RH Board in platformio.ini\nDESCRIPTION: Basic configuration for the STM32F423RH board in the project's platformio.ini file. It sets the platform and board name.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F423RH.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F423RH]\nplatform = ststm32\nboard = genericSTM32F423RH\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration with Custom Settings\nDESCRIPTION: Extended configuration example showing how to override default board settings like microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/microchippic32/flipnclickmz.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:flipnclickmz]\nplatform = microchippic32\nboard = flipnclickmz\n\n; change microcontroller\nboard_build.mcu = 32MZ2048EFH100\n\n; change MCU frequency\nboard_build.f_cpu = 252000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced ESP-07 Board Configuration with Custom Settings\nDESCRIPTION: Extended configuration demonstrating how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/esp07.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp07]\nplatform = espressif8266\nboard = esp07\n\n; change microcontroller\nboard_build.mcu = esp8266\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Hornbill ESP32 Minima\nDESCRIPTION: Demonstrates how to specify the upload protocol in PlatformIO configuration. The default protocol is 'esptool'.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/hornbill32minima.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:hornbill32minima]\nplatform = espressif32\nboard = hornbill32minima\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to set the upload protocol for the FRDM-KW24D512 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/freescalekinetis/frdm_kw24d.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:frdm_kw24d]\nplatform = freescalekinetis\nboard = frdm_kw24d\n\nupload_protocol = mbed\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for STM32F103T4 in PlatformIO\nDESCRIPTION: Configuration snippet that specifies the upload protocol for the STM32F103T4 board. This example uses the serial protocol, which is the default option for this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103T4.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103T4]\nplatform = ststm32\nboard = genericSTM32F103T4\n\nupload_protocol = serial\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Generic ML51LD1AE Board\nDESCRIPTION: Basic configuration for using the Generic ML51LD1AE board in a PlatformIO project file (platformio.ini). This defines the platform and board for the build environment.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/ML51LD1AE.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ML51LD1AE]\nplatform = intel_mcs51\nboard = ML51LD1AE\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic PlatformIO Environment for Adafruit Grand Central M4\nDESCRIPTION: Sets up a basic PlatformIO environment for the Adafruit Grand Central M4 board. This configuration specifies the atmelsam platform and the board identifier.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_grandcentral_m4.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_grandcentral_m4]\nplatform = atmelsam\nboard = adafruit_grandcentral_m4\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for STM32F401CD\nDESCRIPTION: This snippet illustrates how to set the upload protocol for the STM32F401CD board in the PlatformIO configuration. It uses the serial protocol as an example.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F401CD.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F401CD]\nplatform = ststm32\nboard = genericSTM32F401CD\n\nupload_protocol = serial\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU Settings\nDESCRIPTION: Configuration example showing how to override default board settings like microcontroller and CPU frequency\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/s_odi_ultra.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:s_odi_ultra]\nplatform = espressif32\nboard = s_odi_ultra\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic N79E715 Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the Generic N79E715 board in the PlatformIO project configuration file (platformio.ini). It sets the platform to intel_mcs51 and specifies the board as N79E715.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/N79E715.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:N79E715]\nplatform = intel_mcs51\nboard = N79E715\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Board Settings in platformio.ini\nDESCRIPTION: This snippet demonstrates how to override default board settings for the TI LaunchPad MSP-EXP430FR4133LP. It shows how to change the microcontroller and MCU frequency using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/timsp430/lpmsp430fr4133.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:lpmsp430fr4133]\nplatform = timsp430\nboard = lpmsp430fr4133\n\n; change microcontroller\nboard_build.mcu = msp430fr4133\n\n; change MCU frequency\nboard_build.f_cpu = 8000000L\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for Controllino Mini\nDESCRIPTION: Basic configuration setup for Controllino Mini board in platformio.ini file. Specifies the platform and board type.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/controllino_mini.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:controllino_mini]\nplatform = atmelavr\nboard = controllino_mini\n```\n\n----------------------------------------\n\nTITLE: Customizing Arduino Leonardo ETH Board Settings in PlatformIO\nDESCRIPTION: Example showing how to override default board settings such as microcontroller type and CPU frequency in a PlatformIO project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/leonardoeth.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:leonardoeth]\nplatform = atmelavr\nboard = leonardoeth\n\n; change microcontroller\nboard_build.mcu = atmega32u4\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Digilent chipKIT MAX32\nDESCRIPTION: This snippet shows how to configure a PlatformIO project for the Digilent chipKIT MAX32 board. It sets the platform to microchippic32 and the board to mega_pic32.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/microchippic32/mega_pic32.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:mega_pic32]\nplatform = microchippic32\nboard = mega_pic32\n```\n\n----------------------------------------\n\nTITLE: Configuring u-blox EVK-NINA-B1 in platformio.ini\nDESCRIPTION: Basic configuration for the u-blox EVK-NINA-B1 board in platformio.ini file. This sets up the Nordic nRF52 platform with the correct board identifier.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/ublox_evk_nina_b1.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ublox_evk_nina_b1]\nplatform = nordicnrf52\nboard = ublox_evk_nina_b1\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for NIBO Burger Robot (ATmega1284P)\nDESCRIPTION: This INI configuration sets up a PlatformIO environment for the nicai-systems NIBO burger robot with Tuning Kit. It specifies the platform as ATmega AVR and the board as niboburger_1284.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/niboburger_1284.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:niboburger_1284]\nplatform = atmelavr\nboard = niboburger_1284\n```\n\n----------------------------------------\n\nTITLE: Configuring ST Nucleo U575ZI-Q Board in PlatformIO\nDESCRIPTION: Basic configuration for using the ST Nucleo U575ZI-Q board in a PlatformIO project. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_u575zi_q.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_u575zi_q]\nplatform = ststm32\nboard = nucleo_u575zi_q\n```\n\n----------------------------------------\n\nTITLE: Customizing Arduino Mega MCU Settings\nDESCRIPTION: Advanced PlatformIO configuration showing how to override default microcontroller and frequency settings for the Arduino Mega board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/megaatmega1280.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:megaatmega1280]\nplatform = atmelavr\nboard = megaatmega1280\n\n; change microcontroller\nboard_build.mcu = atmega1280\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring FireBeetle-ESP32 Board in platformio.ini\nDESCRIPTION: Basic configuration for using the FireBeetle-ESP32 board in a PlatformIO project. Specifies the board and platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/firebeetle32.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:firebeetle32]\nplatform = espressif32\nboard = firebeetle32\n```\n\n----------------------------------------\n\nTITLE: Customizing ESP-WROOM-02 Board Settings in PlatformIO INI File\nDESCRIPTION: This snippet demonstrates how to override default settings for the Espressif ESP-WROOM-02 board in the PlatformIO configuration. It shows examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/esp_wroom_02.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp_wroom_02]\nplatform = espressif8266\nboard = esp_wroom_02\n\n; change microcontroller\nboard_build.mcu = esp8266\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Basic Configuration for ThaiEasyElec ESPino in PlatformIO\nDESCRIPTION: Basic PlatformIO configuration for the ThaiEasyElec ESPino board using the espressif8266 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/espinotee.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:espinotee]\nplatform = espressif8266\nboard = espinotee\n```\n\n----------------------------------------\n\nTITLE: Customizing STC15F105 Board Configuration in PlatformIO\nDESCRIPTION: Extended configuration for the STC15F105 board demonstrating how to override default settings such as the microcontroller type and CPU frequency in a PlatformIO project.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15F105.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15F105]\nplatform = intel_mcs51\nboard = STC15F105\n\n; change microcontroller\nboard_build.mcu = stc15f105\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Basic Wio Link Board Configuration\nDESCRIPTION: Basic PlatformIO configuration for Wio Link board setup using the espressif8266 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/wio_link.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:wio_link]\nplatform = espressif8266\nboard = wio_link\n```\n\n----------------------------------------\n\nTITLE: Configuring M5Stack Station Board in PlatformIO\nDESCRIPTION: This snippet shows how to configure the M5Stack Station board in the PlatformIO project configuration file. It sets the platform to espressif32 and the board to m5stack-station.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/m5stack-station.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:m5stack-station]\nplatform = espressif32\nboard = m5stack-station\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Example showing how to configure the upload protocol for the board. Supports espota and esptool protocols.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/s_odi_ultra.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:s_odi_ultra]\nplatform = espressif32\nboard = s_odi_ultra\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration with MCU and Frequency Settings\nDESCRIPTION: Extended configuration for the SparkFun Serial 7-Segment Display board with custom microcontroller and frequency settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/sparkfun_serial7seg.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:sparkfun_serial7seg]\nplatform = atmelavr\nboard = sparkfun_serial7seg\n\n; change microcontroller\nboard_build.mcu = atmega328p\n\n; change MCU frequency\nboard_build.f_cpu = 8000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for STM32F103TB in PlatformIO.ini\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the STM32F103TB board in a PlatformIO project environment.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103TB.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103TB]\nplatform = ststm32\nboard = genericSTM32F103TB\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Using Upstream Development Version of Heltec CubeCell Platform\nDESCRIPTION: Example of how to configure the platformio.ini file to use the latest upstream development version of the Heltec CubeCell platform directly from the GitHub repository.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/heltec-cubecell.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:upstream_develop]\nplatform = https://github.com/HelTecAutomation/platform-heltec-cubecell.git\nboard = ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Adafruit Matrix Portal M4 Environment in PlatformIO\nDESCRIPTION: Basic configuration snippet for setting up an Adafruit Matrix Portal M4 board in a PlatformIO project configuration file. This defines the platform as atmelsam and specifies the board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_matrix_portal_m4.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_matrix_portal_m4]\nplatform = atmelsam\nboard = adafruit_matrix_portal_m4\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for ST Nucleo F072RB\nDESCRIPTION: Basic configuration for the ST Nucleo F072RB board in platformio.ini file. This defines the environment with the ststm32 platform and nucleo_f072rb board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f072rb.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f072rb]\nplatform = ststm32\nboard = nucleo_f072rb\n```\n\n----------------------------------------\n\nTITLE: Advanced Moteino Board Configuration\nDESCRIPTION: Extended PlatformIO configuration for Moteino board showing how to override default microcontroller and frequency settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/moteino.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:moteino]\nplatform = atmelavr\nboard = moteino\n\n; change microcontroller\nboard_build.mcu = atmega328p\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Upstream Intel ARC32 Platform\nDESCRIPTION: Configuration for using the latest upstream development version of Intel ARC32 platform directly from the GitHub repository.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/intel_arc32.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:upstream_develop]\nplatform = https://github.com/platformio/platform-intel_arc32.git\nboard = ...\n```\n\n----------------------------------------\n\nTITLE: Customizing ESPresso Lite 1.0 Board Settings in PlatformIO INI File\nDESCRIPTION: This snippet demonstrates how to override default settings for the ESPresso Lite 1.0 board in the PlatformIO configuration. It shows examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/espresso_lite_v1.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:espresso_lite_v1]\nplatform = espressif8266\nboard = espresso_lite_v1\n\n; change microcontroller\nboard_build.mcu = esp8266\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f756zg.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f756zg]\nplatform = ststm32\nboard = nucleo_f756zg\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Customizing SQFMI Watchy v2.0 Board Settings in PlatformIO\nDESCRIPTION: Configuration example showing how to override default board settings such as microcontroller and CPU frequency in the PlatformIO project file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/watchy.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:watchy]\nplatform = espressif32\nboard = watchy\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: ESP32-PICO-DevKitM-2 Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the board. Sets the protocol to esptool which is the default upload method.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32-pico-devkitm-2.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32-pico-devkitm-2]\nplatform = espressif32\nboard = esp32-pico-devkitm-2\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Customizing Arduino Due (USB Native Port) Settings in PlatformIO INI\nDESCRIPTION: Example of overriding default board settings in the PlatformIO configuration. It demonstrates changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/dueUSB.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:dueUSB]\nplatform = atmelsam\nboard = dueUSB\n\n; change microcontroller\nboard_build.mcu = at91sam3x8e\n\n; change MCU frequency\nboard_build.f_cpu = 84000000L\n```\n\n----------------------------------------\n\nTITLE: Overriding Default SDT52832B Settings in PlatformIO\nDESCRIPTION: Extended configuration for the SDT52832B board showing how to override default settings like microcontroller type and CPU frequency. This demonstrates the use of board_build.mcu and board_build.f_cpu options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/sdt52832b.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:sdt52832b]\nplatform = nordicnrf52\nboard = sdt52832b\n\n; change microcontroller\nboard_build.mcu = nrf52832\n\n; change MCU frequency\nboard_build.f_cpu = 64000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Protocol for MAX32620FTHR\nDESCRIPTION: PlatformIO configuration demonstrating how to set the upload protocol for the MAX32620FTHR board to mbed.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/maxim32/max32620fthr.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:max32620fthr]\nplatform = maxim32\nboard = max32620fthr\n\nupload_protocol = mbed\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration with Custom MCU Settings for chipKIT Pro MX4\nDESCRIPTION: Extended configuration for a PlatformIO project targeting the Digilent chipKIT Pro MX4 board with custom microcontroller and frequency settings. This demonstrates how to override default board settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/microchippic32/chipkit_pro_mx4.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:chipkit_pro_mx4]\nplatform = microchippic32\nboard = chipkit_pro_mx4\n\n; change microcontroller\nboard_build.mcu = 32MX460F512L\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring STM32F401RB Board in platformio.ini\nDESCRIPTION: Basic configuration for the STM32F401RB board in the PlatformIO project configuration file. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F401RB.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F401RB]\nplatform = ststm32\nboard = genericSTM32F401RB\n```\n\n----------------------------------------\n\nTITLE: Configuring Arduino MKR NB 1500 Board in PlatformIO INI File\nDESCRIPTION: Basic configuration for using the Arduino MKR NB 1500 board in a PlatformIO project. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/mkrnb1500.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:mkrnb1500]\nplatform = atmelsam\nboard = mkrnb1500\n```\n\n----------------------------------------\n\nTITLE: Advanced STC15W104 Board Configuration\nDESCRIPTION: Extended PlatformIO configuration showing how to override default board settings like microcontroller model and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15W104.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15W104]\nplatform = intel_mcs51\nboard = STC15W104\n\n; change microcontroller\nboard_build.mcu = stc15w104\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Configuring ESPresso Lite 1.0 Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to set up the ESPresso Lite 1.0 board in the PlatformIO project configuration file. It specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/espresso_lite_v1.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:espresso_lite_v1]\nplatform = espressif8266\nboard = espresso_lite_v1\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to set the upload protocol for the STM32F103ZF board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103ZF.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103ZF]\nplatform = ststm32\nboard = genericSTM32F103ZF\n\nupload_protocol = serial\n```\n\n----------------------------------------\n\nTITLE: Customizing ST B-G431B-ESC1 Board Settings in PlatformIO\nDESCRIPTION: Example of how to override default board settings in PlatformIO, including changing the microcontroller model and CPU frequency. This allows for customized configurations based on project requirements.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_b_g431b_esc1.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_b_g431b_esc1]\nplatform = ststm32\nboard = disco_b_g431b_esc1\n\n; change microcontroller\nboard_build.mcu = stm32g431cbu6\n\n; change MCU frequency\nboard_build.f_cpu = 170000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing ATmega88 Board Settings in PlatformIO INI File\nDESCRIPTION: This code demonstrates how to override default ATmega88 settings in the PlatformIO configuration. It shows examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega88.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega88]\nplatform = atmelavr\nboard = ATmega88\n\n; change microcontroller\nboard_build.mcu = atmega88\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for 96Boards B96B-F446VE\nDESCRIPTION: Configuration to specify the upload protocol for the 96Boards B96B-F446VE board. In this example, it's set to use the ST-Link protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/b96b_f446ve.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:b96b_f446ve]\nplatform = ststm32\nboard = b96b_f446ve\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Seeed Studio XIAO ESP32S3\nDESCRIPTION: Configuration to change the upload protocol for the Seeed Studio XIAO ESP32S3 board. The example uses the default 'esptool' protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/seeed_xiao_esp32s3.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:seeed_xiao_esp32s3]\nplatform = espressif32\nboard = seeed_xiao_esp32s3\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Labplus mPython\nDESCRIPTION: This snippet shows how to set the upload protocol for the Labplus mPython board in PlatformIO. It specifies the use of the esptool protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/labplus_mpython.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:labplus_mpython]\nplatform = espressif32\nboard = labplus_mpython\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic STC15F102W Board in PlatformIO\nDESCRIPTION: This code snippet shows how to configure the Generic STC15F102W board in a PlatformIO project's configuration file (platformio.ini). It sets the platform to intel_mcs51 and the board to STC15F102W.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15F102W.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15F102W]\nplatform = intel_mcs51\nboard = STC15F102W\n```\n\n----------------------------------------\n\nTITLE: Configuring VCCGND F407ZGT6 Mini Board in platformio.ini\nDESCRIPTION: This snippet shows how to configure the VCCGND F407ZGT6 Mini board in the PlatformIO project configuration file. It sets the platform and board, and demonstrates how to override default board settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/vccgnd_f407zg_mini.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:vccgnd_f407zg_mini]\nplatform = ststm32\nboard = vccgnd_f407zg_mini\n\n; change microcontroller\nboard_build.mcu = stm32f407zgt6\n\n; change MCU frequency\nboard_build.f_cpu = 168000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic PlatformIO Environment for STC8H8K60U\nDESCRIPTION: Basic PlatformIO project configuration for the STC8H8K60U board. This snippet shows how to set up a project environment targeting the intel_mcs51 platform with the STC8H8K60U board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8H8K60U.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8H8K60U]\nplatform = intel_mcs51\nboard = STC8H8K60U\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the board\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/d1_wroom_02.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:d1_wroom_02]\nplatform = espressif8266\nboard = d1_wroom_02\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Advanced STM32F0DISCOVERY Configuration with MCU Options\nDESCRIPTION: Extended PlatformIO configuration showing how to customize microcontroller and frequency settings for the STM32F0DISCOVERY board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_f051r8.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_f051r8]\nplatform = ststm32\nboard = disco_f051r8\n\n; change microcontroller\nboard_build.mcu = stm32f051r8t6\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced Wio Link Board Configuration\nDESCRIPTION: Extended PlatformIO configuration showing how to override default microcontroller and frequency settings for the Wio Link board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/wio_link.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:wio_link]\nplatform = espressif8266\nboard = wio_link\n\n; change microcontroller\nboard_build.mcu = esp8266\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for SweetPea ESP-210 Board\nDESCRIPTION: Basic configuration for using the SweetPea ESP-210 board in a PlatformIO project's platformio.ini file. This defines the board and platform to use for the build environment.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/esp210.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp210]\nplatform = espressif8266\nboard = esp210\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: PlatformIO configuration demonstrating how to specify the upload protocol for firmware deployment.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_l486rg.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_l486rg]\nplatform = ststm32\nboard = nucleo_l486rg\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Basic DigiStump Oak Board Configuration\nDESCRIPTION: Basic PlatformIO configuration for DigiStump Oak board setup using the espressif8266 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/oak.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:oak]\nplatform = espressif8266\nboard = oak\n```\n\n----------------------------------------\n\nTITLE: Configuring Microduino Core Board in PlatformIO\nDESCRIPTION: Basic configuration for the Microduino Core (Atmega328P@16M,5V) board in a PlatformIO project. Sets up the environment with the atmelavr platform and the 328p16m board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/328p16m.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:328p16m]\nplatform = atmelavr\nboard = 328p16m\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for ST Nucleo F410RB in PlatformIO\nDESCRIPTION: Configuration example for changing the upload protocol to ST-Link for the ST Nucleo F410RB board in platformio.ini.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f410rb.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f410rb]\nplatform = ststm32\nboard = nucleo_f410rb\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration\nDESCRIPTION: Basic PlatformIO configuration for Olimex STM32-H103 board with ststm32 platform\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/olimex_f103.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:olimex_f103]\nplatform = ststm32\nboard = olimex_f103\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic SpellFoundry Sleepy Pi 2 Board in PlatformIO\nDESCRIPTION: Basic configuration for SpellFoundry Sleepy Pi 2 in platformio.ini file. This snippet shows the minimal required configuration to use the board with the atmelavr platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/sleepypi.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:sleepypi]\nplatform = atmelavr\nboard = sleepypi\n```\n\n----------------------------------------\n\nTITLE: Configuring Upstream ST STM8 Platform Version in PlatformIO\nDESCRIPTION: This INI code snippet demonstrates how to configure the upstream development version of the ST STM8 platform in a PlatformIO project, using the GitHub repository URL.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/ststm8.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:upstream_develop]\nplatform = https://github.com/platformio/platform-ststm8.git\nboard = ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Denky32 Board in PlatformIO\nDESCRIPTION: Basic PlatformIO configuration for the Denky32 (WROOM32) board in the project's platformio.ini file. This sets up the ESP32 platform with the Denky32 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/denky32.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:denky32]\nplatform = espressif32\nboard = denky32\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic PlatformIO Environment for Elektor LoRa Node Core F072C8\nDESCRIPTION: Basic PlatformIO configuration for the Elektor LoRa Node Core F072C8 board using the ststm32 platform. This configuration uses the default board settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/elektor_f072cb.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:elektor_f072cb]\nplatform = ststm32\nboard = elektor_f072cb\n```\n\n----------------------------------------\n\nTITLE: Customizing ST Nucleo L152RE Board Settings\nDESCRIPTION: Example of overriding default board settings in platformio.ini, such as changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_l152re.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_l152re]\nplatform = ststm32\nboard = nucleo_l152re\n\n; change microcontroller\nboard_build.mcu = stm32l152ret6\n\n; change MCU frequency\nboard_build.f_cpu = 32000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic RUMBA32 F446VE Board Setup in PlatformIO\nDESCRIPTION: Basic PlatformIO environment configuration for the RUMBA32 F446VE 3D printer control board. This snippet demonstrates how to specify the board in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/rumba32_f446ve.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:rumba32_f446ve]\nplatform = ststm32\nboard = rumba32_f446ve\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Teensy LC in PlatformIO INI File\nDESCRIPTION: This snippet demonstrates how to set the upload protocol for the Teensy LC board in the PlatformIO project configuration file. It uses the 'teensy-gui' protocol as an example.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/teensy/teensylc.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:teensylc]\nplatform = teensy\nboard = teensylc\n\nupload_protocol = teensy-gui\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration for ST Nucleo L433RC-P\nDESCRIPTION: Configuration example showing how to set a specific upload protocol for the board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_l433rc_p.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_l433rc_p]\nplatform = ststm32\nboard = nucleo_l433rc_p\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Customizing Arduino LilyPad ATmega328 Board Settings in PlatformIO\nDESCRIPTION: Advanced configuration that demonstrates how to override default board settings such as microcontroller type and CPU frequency for the Arduino LilyPad ATmega328 in the PlatformIO project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/lilypadatmega328.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:lilypadatmega328]\nplatform = atmelavr\nboard = lilypadatmega328\n\n; change microcontroller\nboard_build.mcu = atmega328p\n\n; change MCU frequency\nboard_build.f_cpu = 8000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for WEMOS LOLIN C3 Mini\nDESCRIPTION: Configuration to specify the upload protocol for the WEMOS LOLIN C3 Mini board. This example uses the default 'esptool' protocol, but the board supports multiple protocols.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/lolin_c3_mini.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:lolin_c3_mini]\nplatform = espressif32\nboard = lolin_c3_mini\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for unPhone 9\nDESCRIPTION: Configuration example for changing the upload protocol for the unPhone 9 board. It sets the upload protocol to esptool, which is the default for this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/unphone9.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:unphone9]\nplatform = espressif32\nboard = unphone9\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Smart Bee Motion Board\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the Smart Bee Motion board in a PlatformIO project. The default protocol is esptool, but this can be explicitly set in the configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/bee_motion.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:bee_motion]\nplatform = espressif32\nboard = bee_motion\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic ATmega6490P Board Settings in PlatformIO\nDESCRIPTION: Basic configuration for setting up an ATmega6490P board project in PlatformIO's project configuration file. Specifies the platform and board type.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega6490P.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega6490P]\nplatform = atmelavr\nboard = ATmega6490P\n```\n\n----------------------------------------\n\nTITLE: Customizing MCU and Clock Settings for ST Nucleo F767ZI\nDESCRIPTION: Advanced platformio.ini configuration that overrides default board settings to customize the microcontroller and CPU frequency for the ST Nucleo F767ZI.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f767zi.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f767zi]\nplatform = ststm32\nboard = nucleo_f767zi\n\n; change microcontroller\nboard_build.mcu = stm32f767zit6\n\n; change MCU frequency\nboard_build.f_cpu = 216000000L\n```\n\n----------------------------------------\n\nTITLE: Basic STM32F412CE Board Configuration in PlatformIO\nDESCRIPTION: Basic configuration for setting up the STM32F412CE board in platformio.ini project file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F412CE.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F412CE]\nplatform = ststm32\nboard = genericSTM32F412CE\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Armstrap Eagle 1024\nDESCRIPTION: Configuration example for specifying the upload protocol for the Armstrap Eagle 1024 board. In this case, it's set to use the BlackMagic protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/armstrap_eagle1024.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:armstrap_eagle1024]\nplatform = ststm32\nboard = armstrap_eagle1024\n\nupload_protocol = blackmagic\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic STM32F411RE Board Settings in PlatformIO\nDESCRIPTION: Basic PlatformIO configuration for STM32F411RE board using the ststm32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F411RE.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F411RE]\nplatform = ststm32\nboard = genericSTM32F411RE\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic STC8H3K60S4 Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the Generic STC8H3K60S4 board in a PlatformIO project's configuration file (platformio.ini). It sets the platform and board, and demonstrates how to override default settings like the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8H3K60S4.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8H3K60S4]\nplatform = intel_mcs51\nboard = STC8H3K60S4\n\n; change microcontroller\nboard_build.mcu = stc8h3k60s4\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Upload Protocol for ESP32 DEVKIT\nDESCRIPTION: PlatformIO configuration demonstrating how to specify the upload protocol. This example uses the default 'esptool' protocol, but can be changed to any supported protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32doit-devkit-v1.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32doit-devkit-v1]\nplatform = espressif32\nboard = esp32doit-devkit-v1\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Advanced STC15F201EA Board Configuration with Custom Settings\nDESCRIPTION: Extended INI configuration demonstrating how to override default board settings such as microcontroller model and CPU frequency using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15F201EA.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15F201EA]\nplatform = intel_mcs51\nboard = STC15F201EA\n\n; change microcontroller\nboard_build.mcu = stc15f201ea\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Basic ESP32-S3-DevKitM-1 Board Configuration\nDESCRIPTION: Minimal configuration for setting up an ESP32-S3-DevKitM-1 board project using PlatformIO.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32-s3-devkitm-1.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32-s3-devkitm-1]\nplatform = espressif32\nboard = esp32-s3-devkitm-1\n```\n\n----------------------------------------\n\nTITLE: Customizing STM32F401CC Board Settings in platformio.ini\nDESCRIPTION: Advanced PlatformIO configuration for STM32F401CC board with custom microcontroller and frequency settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F401CC.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F401CC]\nplatform = ststm32\nboard = genericSTM32F401CC\n\n; change microcontroller\nboard_build.mcu = stm32f401ccu6\n\n; change MCU frequency\nboard_build.f_cpu = 84000000L\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for STM32G071B Discovery\nDESCRIPTION: Minimal configuration required in platformio.ini to use the STM32G071B Discovery board with STM32 platform\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_g071rb.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_g071rb]\nplatform = ststm32\nboard = disco_g071rb\n```\n\n----------------------------------------\n\nTITLE: Basic STC8C2K32S4 Board Configuration in PlatformIO\nDESCRIPTION: Basic configuration setup for the STC8C2K32S4 board using the intel_mcs51 platform in PlatformIO's project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8C2K32S4.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8C2K32S4]\nplatform = intel_mcs51\nboard = STC8C2K32S4\n```\n\n----------------------------------------\n\nTITLE: Customizing Circuit Playground Bluefruit Settings in PlatformIO\nDESCRIPTION: Advanced configuration example that demonstrates how to override default board settings such as microcontroller type and CPU frequency using board_*** options in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/adafruit_cplaynrf52840.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_cplaynrf52840]\nplatform = nordicnrf52\nboard = adafruit_cplaynrf52840\n\n; change microcontroller\nboard_build.mcu = nrf52840\n\n; change MCU frequency\nboard_build.f_cpu = 64000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing STC8H4K48TLCD Board Settings in PlatformIO\nDESCRIPTION: This code snippet demonstrates how to override default settings for the Generic STC8H4K48TLCD board in a PlatformIO project. It shows how to change the microcontroller and MCU frequency using board-specific options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8H4K48TLCD.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8H4K48TLCD]\nplatform = intel_mcs51\nboard = STC8H4K48TLCD\n\n; change microcontroller\nboard_build.mcu = stc8h4k48tlcd\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Advanced ESP32 Feather Board Configuration\nDESCRIPTION: Extended PlatformIO configuration showing how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/featheresp32.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:featheresp32]\nplatform = espressif32\nboard = featheresp32\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing STM32F103R8 Build Settings\nDESCRIPTION: Example of overriding default board settings in platformio.ini, such as changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103R8.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103R8]\nplatform = ststm32\nboard = genericSTM32F103R8\n\n; change microcontroller\nboard_build.mcu = stm32f103r8t6\n\n; change MCU frequency\nboard_build.f_cpu = 72000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for SparkFun Blynk Board\nDESCRIPTION: Configuration for specifying the upload protocol for the SparkFun Blynk Board. This snippet shows how to set the upload protocol to esptool in the PlatformIO project configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/sparkfunBlynk.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:sparkfunBlynk]\nplatform = espressif8266\nboard = sparkfunBlynk\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration in platformio.ini\nDESCRIPTION: Minimal configuration required to use the Demo F030F4 board in a PlatformIO project.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/demo_f030f4.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:demo_f030f4]\nplatform = ststm32\nboard = demo_f030f4\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Adafruit Feather M4 CAN\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the Adafruit Feather M4 CAN board. This sets the protocol to sam-ba, which is also the default protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_feather_m4_can.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_feather_m4_can]\nplatform = atmelsam\nboard = adafruit_feather_m4_can\n\nupload_protocol = sam-ba\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic AT89S51 Environment in platformio.ini\nDESCRIPTION: Basic configuration for using the AT89S51 microcontroller with the Intel MCS-51 platform in PlatformIO. This snippet defines the essential platform and board settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/AT89S51.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:AT89S51]\nplatform = intel_mcs51\nboard = AT89S51\n```\n\n----------------------------------------\n\nTITLE: Configuring LowPowerLab Moteino (8Mhz) Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the LowPowerLab Moteino (8Mhz) board in the PlatformIO project configuration file. It sets the platform to atmelavr and the board to moteino8mhz.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/moteino8mhz.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:moteino8mhz]\nplatform = atmelavr\nboard = moteino8mhz\n```\n\n----------------------------------------\n\nTITLE: Configuring Stable Shakti Platform Version in PlatformIO\nDESCRIPTION: INI configuration for using the latest stable or a specific stable version of the Shakti platform in PlatformIO projects.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/shakti.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n; Latest stable version, NOT recommended\n; Pin the version as shown below\n[env:latest_stable]\nplatform = shakti\nboard = ...\n\n; Specific version\n[env:custom_stable]\nplatform = shakti@x.y.z\nboard = ...\n```\n\n----------------------------------------\n\nTITLE: Configuring ATmega3290P Board in PlatformIO\nDESCRIPTION: Basic configuration for setting up an ATmega3290P board in the platformio.ini project configuration file. This configuration specifies the platform as atmelavr and the board as ATmega3290P.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega3290P.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega3290P]\nplatform = atmelavr\nboard = ATmega3290P\n```\n\n----------------------------------------\n\nTITLE: Customizing Maple Mini Hardware Configuration in PlatformIO\nDESCRIPTION: Extended PlatformIO configuration that overrides default board settings, specifically changing the microcontroller model and adjusting the CPU frequency. This demonstrates how to customize hardware parameters.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/maple_mini_b20.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:maple_mini_b20]\nplatform = ststm32\nboard = maple_mini_b20\n\n; change microcontroller\nboard_build.mcu = stm32f103cbt6\n\n; change MCU frequency\nboard_build.f_cpu = 72000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Stable Lattice iCE40 Platform in platformio.ini\nDESCRIPTION: This snippet shows how to configure a project to use either the latest stable version or a specific stable version of the Lattice iCE40 platform in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/lattice_ice40.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n; Latest stable version, NOT recommended\n; Pin the version as shown below\n[env:latest_stable]\nplatform = lattice_ice40\nboard = ...\n\n; Specific version\n[env:custom_stable]\nplatform = lattice_ice40@x.y.z\nboard = ...\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Silicognition wESP32\nDESCRIPTION: PlatformIO configuration example showing how to specify an upload protocol for the Silicognition wESP32 board. This example uses the default 'esptool' protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/wesp32.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:wesp32]\nplatform = espressif32\nboard = wesp32\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring STM32F103VC Board in PlatformIO INI File\nDESCRIPTION: Basic configuration for the STM32F103VC board in the PlatformIO project configuration file. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103VC.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103VC]\nplatform = ststm32\nboard = genericSTM32F103VC\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for Digilent chipKIT uC32\nDESCRIPTION: Configuration for setting up a PlatformIO project with the Digilent chipKIT uC32 board. This snippet shows the minimal required settings in platformio.ini to target this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/microchippic32/chipkit_uc32.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:chipkit_uc32]\nplatform = microchippic32\nboard = chipkit_uc32\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Protocol for NAMote72\nDESCRIPTION: Example of how to set a specific upload protocol for the NAMote72 board in a PlatformIO project. This shows how to use the mbed protocol which is the default for this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/mote_l152rc.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:mote_l152rc]\nplatform = ststm32\nboard = mote_l152rc\n\nupload_protocol = mbed\n```\n\n----------------------------------------\n\nTITLE: Customizing NXP LPCXpresso54114 Hardware Settings\nDESCRIPTION: Example configuration demonstrating how to override default board settings like microcontroller model and CPU frequency in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nxplpc/lpc54114.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:lpc54114]\nplatform = nxplpc\nboard = lpc54114\n\n; change microcontroller\nboard_build.mcu = lpc54114j256bd64\n\n; change MCU frequency\nboard_build.f_cpu = 100000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Protocol for ESP32-C3-DevKitM-1\nDESCRIPTION: Configuration for specifying the upload protocol for ESP32-C3-DevKitM-1. This snippet shows how to set the upload protocol to esptool, which is the default uploader for ESP32 boards.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32-c3-devkitm-1.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32-c3-devkitm-1]\nplatform = espressif32\nboard = esp32-c3-devkitm-1\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Protocol for Munich Labs RedPill ESP32-S3\nDESCRIPTION: Configuration example showing how to specify an upload protocol for the RedPill ESP32-S3 board. The default is 'esptool' but several other protocols are supported.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/redpill_esp32s3.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:redpill_esp32s3]\nplatform = espressif32\nboard = redpill_esp32s3\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: STM32F410R8 Upload Protocol Configuration\nDESCRIPTION: Example configuration for setting the upload protocol for the STM32F410R8 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F410R8.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F410R8]\nplatform = ststm32\nboard = genericSTM32F410R8\n\nupload_protocol = serial\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration for Artix-7 35T\nDESCRIPTION: Basic PlatformIO configuration for setting up an environment targeting the Artix-7 35T board using the Shakti platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/shakti/artix7_35t.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:artix7_35t]\nplatform = shakti\nboard = artix7_35t\n```\n\n----------------------------------------\n\nTITLE: Configuring Thunderboard Sense 2 in PlatformIO\nDESCRIPTION: Basic configuration for the Thunderboard Sense 2 board in the project's platformio.ini file. It specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/siliconlabsefm32/tb_sense_12.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:tb_sense_12]\nplatform = siliconlabsefm32\nboard = tb_sense_12\n```\n\n----------------------------------------\n\nTITLE: Customizing STM32 MCU Settings for Nucleo F303RE\nDESCRIPTION: Advanced configuration that overrides default board settings to customize the microcontroller type and CPU frequency. Demonstrates how to modify board-specific parameters in the project configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f303re.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f303re]\nplatform = ststm32\nboard = nucleo_f303re\n\n; change microcontroller\nboard_build.mcu = stm32f303ret6\n\n; change MCU frequency\nboard_build.f_cpu = 72000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Unexpected Maker FeatherS2 Neo Board Settings\nDESCRIPTION: Example of overriding default board settings in the PlatformIO configuration. Demonstrates changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/um_feathers2_neo.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:um_feathers2_neo]\nplatform = espressif32\nboard = um_feathers2_neo\n\n; change microcontroller\nboard_build.mcu = esp32s2\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced STC8C2K16S4 Board Configuration\nDESCRIPTION: Extended PlatformIO configuration example showing how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8C2K16S4.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8C2K16S4]\nplatform = intel_mcs51\nboard = STC8C2K16S4\n\n; change microcontroller\nboard_build.mcu = stc8c2k16s4\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for STM32F412CG\nDESCRIPTION: Configuration example for setting the upload protocol to serial (default) for the STM32F412CG board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F412CG.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F412CG]\nplatform = ststm32\nboard = genericSTM32F412CG\n\nupload_protocol = serial\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration for Maxim Wireless Sensor Node\nDESCRIPTION: Basic configuration settings for initializing a PlatformIO project with the Maxim Wireless Sensor Node Demonstrator board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/maxim32/maxwsnenv.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:maxwsnenv]\nplatform = maxim32\nboard = maxwsnenv\n```\n\n----------------------------------------\n\nTITLE: Customizing ATtiny841 Board Settings with Override Options\nDESCRIPTION: Advanced configuration example showing how to override default microcontroller and frequency settings for the ATtiny841 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/attiny841.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:attiny841]\nplatform = atmelavr\nboard = attiny841\n\n; change microcontroller\nboard_build.mcu = attiny841\n\n; change MCU frequency\nboard_build.f_cpu = 8000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Board Settings in PlatformIO\nDESCRIPTION: Basic configuration for setting up an Electrosmith Daisy Patch SM board project in PlatformIO using the STM32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/electrosmith_daisy_patch_sm.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:electrosmith_daisy_patch_sm]\nplatform = ststm32\nboard = electrosmith_daisy_patch_sm\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for XinaBox CW01 Board\nDESCRIPTION: PlatformIO configuration that specifies the upload protocol for the XinaBox CW01 board. This example sets the protocol to esptool, which is the default, but could be changed to espota if needed.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/xinabox_cw01.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:xinabox_cw01]\nplatform = espressif8266\nboard = xinabox_cw01\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for SparkFun ESP32 IoT RedBoard\nDESCRIPTION: Demonstrates the basic board configuration in platformio.ini file for SparkFun ESP32 IoT RedBoard project.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/sparkfun_esp32_iot_redboard.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:sparkfun_esp32_iot_redboard]\nplatform = espressif32\nboard = sparkfun_esp32_iot_redboard\n```\n\n----------------------------------------\n\nTITLE: Customizing Generic IRC15F107W Board Settings in PlatformIO\nDESCRIPTION: Advanced PlatformIO configuration for the Generic IRC15F107W board with custom microcontroller and frequency settings. This example shows how to override default board settings defined in the board manifest file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/IRC15F107W.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:IRC15F107W]\nplatform = intel_mcs51\nboard = IRC15F107W\n\n; change microcontroller\nboard_build.mcu = irc15f107w\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the board. Default protocol is esptool.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/adafruit_itsybitsy_esp32.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_itsybitsy_esp32]\nplatform = espressif32\nboard = adafruit_itsybitsy_esp32\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for RedBearLab Blend 2\nDESCRIPTION: Minimal platformio.ini configuration for using the RedBearLab Blend 2 board with the Nordic nRF52 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/redbear_blend2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:redbear_blend2]\nplatform = nordicnrf52\nboard = redbear_blend2\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration with MCU and Frequency Override\nDESCRIPTION: Extended PlatformIO configuration for the Namino Rosso board with custom microcontroller and frequency settings. This demonstrates how to override default board settings using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/namino_rosso.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:namino_rosso]\nplatform = espressif32\nboard = namino_rosso\n\n; change microcontroller\nboard_build.mcu = esp32s3\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Teensy 2.0 Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the Teensy 2.0 board in the PlatformIO project configuration file. It sets the platform to 'teensy' and the board to 'teensy2'.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/teensy/teensy2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:teensy2]\nplatform = teensy\nboard = teensy2\n```\n\n----------------------------------------\n\nTITLE: STM32F103CB Upload Protocol Configuration\nDESCRIPTION: PlatformIO configuration showing how to specify the upload protocol for the STM32F103CB board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103CB.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103CB]\nplatform = ststm32\nboard = genericSTM32F103CB\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Wio Node in PlatformIO INI File\nDESCRIPTION: This snippet shows how to set the upload protocol for the Wio Node board in the PlatformIO configuration. It sets the upload protocol to esptool.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/wio_node.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:wio_node]\nplatform = espressif8266\nboard = wio_node\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Customizing STC8G1K17A Board Settings in PlatformIO\nDESCRIPTION: Extended configuration for the STC8G1K17A board with custom microcontroller and frequency settings. This demonstrates how to override default board settings defined in the board manifest file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8G1K17A.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8G1K17A]\nplatform = intel_mcs51\nboard = STC8G1K17A\n\n; change microcontroller\nboard_build.mcu = stc8g1k17a\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Customizing ATmega8515 Board Settings in PlatformIO\nDESCRIPTION: Advanced configuration example showing how to override default ATmega8515 settings such as microcontroller model and CPU frequency in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega8515.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega8515]\nplatform = atmelavr\nboard = ATmega8515\n\n; change microcontroller\nboard_build.mcu = atmega8515\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic IAP15W4K58S4 Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to set up the Generic IAP15W4K58S4 board in the PlatformIO project configuration file. It specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/IAP15W4K58S4.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:IAP15W4K58S4]\nplatform = intel_mcs51\nboard = IAP15W4K58S4\n```\n\n----------------------------------------\n\nTITLE: Customizing ATtiny1604 Board Settings in PlatformIO\nDESCRIPTION: Advanced configuration showing how to override default board settings like microcontroller type and CPU frequency in the PlatformIO environment.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/ATtiny1604.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATtiny1604]\nplatform = atmelmegaavr\nboard = ATtiny1604\n\n; change microcontroller\nboard_build.mcu = attiny1604\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring BQ ZUM BT-328 in PlatformIO Project Configuration\nDESCRIPTION: Basic configuration for using the BQ ZUM BT-328 board in a PlatformIO project. This sets up the environment with the AtmelAVR platform and specifies the board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/zumbt328.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:zumbt328]\nplatform = atmelavr\nboard = zumbt328\n```\n\n----------------------------------------\n\nTITLE: Configuring Stable Microchip PIC32 Platform Version in PlatformIO\nDESCRIPTION: INI configuration for using stable releases of the Microchip PIC32 development platform in PlatformIO projects. Shows how to specify the latest stable version or pin to a specific version.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/microchippic32.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n; Latest stable version, NOT recommended\n; Pin the version as shown below\n[env:latest_stable]\nplatform = microchippic32\nboard = ...\n\n; Specific version\n[env:custom_stable]\nplatform = microchippic32@x.y.z\nboard = ...\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration for Adafruit Rotary Trinkey\nDESCRIPTION: Basic PlatformIO configuration for setting up an Adafruit Rotary Trinkey project using the ATMELSAM platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_rotarytrinkey_m0.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_rotarytrinkey_m0]\nplatform = atmelsam\nboard = adafruit_rotarytrinkey_m0\n```\n\n----------------------------------------\n\nTITLE: Customizing STC8F2K60S4 Board Configuration in PlatformIO\nDESCRIPTION: Demonstrates how to override default board settings like microcontroller type and clock frequency in the PlatformIO configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8F2K60S4.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8F2K60S4]\nplatform = intel_mcs51\nboard = STC8F2K60S4\n\n; change microcontroller\nboard_build.mcu = stc8f2k60s4\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Configuring ST Nucleo L011K4 Board in PlatformIO\nDESCRIPTION: Basic configuration for the ST Nucleo L011K4 board in the project's platformio.ini file, specifying the STM32 platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_l011k4.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_l011k4]\nplatform = ststm32\nboard = nucleo_l011k4\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU Options\nDESCRIPTION: Configuration with custom microcontroller and frequency settings for IoT-Bus Proteus board\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/iotbusproteus.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:iotbusproteus]\nplatform = espressif32\nboard = iotbusproteus\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Black STM32F407ZG\nDESCRIPTION: Configuration to specify the upload protocol for the Black STM32F407ZG board in PlatformIO.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/black_f407zg.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:black_f407zg]\nplatform = ststm32\nboard = black_f407zg\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for RedBearLab Blend Micro\nDESCRIPTION: Basic configuration for the RedBearLab Blend Micro 3.3V/16MHz board in platformio.ini. This sets up the environment with the atmelavr platform and blendmicro16 board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/blendmicro16.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:blendmicro16]\nplatform = atmelavr\nboard = blendmicro16\n```\n\n----------------------------------------\n\nTITLE: Customizing Arduino M0 Pro Hardware Settings\nDESCRIPTION: Extended configuration for Arduino M0 Pro that overrides default settings to customize the microcontroller and CPU frequency in the project's platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/mzeroproUSB.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:mzeroproUSB]\nplatform = atmelsam\nboard = mzeroproUSB\n\n; change microcontroller\nboard_build.mcu = samd21g18a\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO Environment for TAMC DPU ESP32\nDESCRIPTION: Basic configuration for setting up a PlatformIO environment to work with the TAMC DPU ESP32 board. This snippet demonstrates the minimal required configuration in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/dpu_esp32.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:dpu_esp32]\nplatform = espressif32\nboard = dpu_esp32\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the board\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/piranha_esp32.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:piranha_esp32]\nplatform = espressif32\nboard = piranha_esp32\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Customizing DFRobot Firebeetle 2 ESP32-E Board Settings\nDESCRIPTION: Example of overriding default board settings in the PlatformIO project configuration file. This snippet demonstrates changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/dfrobot_firebeetle2_esp32e.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:dfrobot_firebeetle2_esp32e]\nplatform = espressif32\nboard = dfrobot_firebeetle2_esp32e\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Adafruit PyPortal M4 Titano Board Settings\nDESCRIPTION: This snippet demonstrates how to override default board settings in PlatformIO configuration, allowing customization of microcontroller and frequency parameters for the Adafruit PyPortal M4 Titano.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_pyportal_m4_titano.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_pyportal_m4_titano]\nplatform = atmelsam\nboard = adafruit_pyportal_m4_titano\n\n; change microcontroller\nboard_build.mcu = samd51j20a\n\n; change MCU frequency\nboard_build.f_cpu = 120000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic PlatformIO Environment for Turta IoT Node\nDESCRIPTION: Basic configuration for setting up a PlatformIO environment for the Turta IoT Node ESP32 board. This snippet shows the minimal required configuration in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/turta_iot_node.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:turta_iot_node]\nplatform = espressif32\nboard = turta_iot_node\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration in PlatformIO\nDESCRIPTION: Basic configuration example for setting up an ST Nucleo L073RZ board project in PlatformIO using the STM32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_l073rz.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_l073rz]\nplatform = ststm32\nboard = nucleo_l073rz\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU and Frequency Settings\nDESCRIPTION: Extended configuration showing how to override default board settings for microcontroller and CPU frequency\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/piranha_esp32.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:piranha_esp32]\nplatform = espressif32\nboard = piranha_esp32\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing ST 32L0538DISCOVERY Board Parameters in PlatformIO\nDESCRIPTION: Example showing how to override default board settings in platformio.ini by changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_l053c8.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_l053c8]\nplatform = ststm32\nboard = disco_l053c8\n\n; change microcontroller\nboard_build.mcu = stm32l053c8t6\n\n; change MCU frequency\nboard_build.f_cpu = 32000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration with Custom Settings\nDESCRIPTION: Extended configuration for N79E8132 board with custom microcontroller and frequency settings in platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/N79E8132.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:N79E8132]\nplatform = intel_mcs51\nboard = N79E8132\n\n; change microcontroller\nboard_build.mcu = n79e8132\n\n; change MCU frequency\nboard_build.f_cpu = 22118400L\n```\n\n----------------------------------------\n\nTITLE: Basic IRC15W107 Board Configuration in PlatformIO\nDESCRIPTION: Basic configuration snippet for setting up the IRC15W107 board in the project's platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/IRC15W107.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:IRC15W107]\nplatform = intel_mcs51\nboard = IRC15W107\n```\n\n----------------------------------------\n\nTITLE: STM32F413RG Upload Protocol Configuration\nDESCRIPTION: PlatformIO configuration showing how to set the upload protocol for STM32F413RG board using serial communication.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F413RG.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F413RG]\nplatform = ststm32\nboard = genericSTM32F413RG\n\nupload_protocol = serial\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU and Frequency Settings\nDESCRIPTION: Example showing how to override default board settings including microcontroller model and CPU frequency in PlatformIO configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/b96b_aerocore2.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:b96b_aerocore2]\nplatform = ststm32\nboard = b96b_aerocore2\n\n; change microcontroller\nboard_build.mcu = stm32f427vit6\n\n; change MCU frequency\nboard_build.f_cpu = 168000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for STM32F401RE in PlatformIO INI File\nDESCRIPTION: This snippet shows how to specify the upload protocol for the STM32F401RE board in the PlatformIO INI file. The default protocol is 'serial', but it can be changed to other supported protocols.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F401RE.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F401RE]\nplatform = ststm32\nboard = genericSTM32F401RE\n\nupload_protocol = serial\n```\n\n----------------------------------------\n\nTITLE: Customizing W79E632 Board Configuration in platformio.ini\nDESCRIPTION: Advanced configuration for the Generic W79E632 board that demonstrates how to override default settings like microcontroller model and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/W79E632.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:W79E632]\nplatform = intel_mcs51\nboard = W79E632\n\n; change microcontroller\nboard_build.mcu = w79e632\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic PlatformIO Environment for SparkFun Blynk Board\nDESCRIPTION: Basic configuration for setting up a PlatformIO environment for the SparkFun Blynk Board. This snippet defines the platform and board in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/sparkfunBlynk.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:sparkfunBlynk]\nplatform = espressif8266\nboard = sparkfunBlynk\n```\n\n----------------------------------------\n\nTITLE: Customizing ST B-L475E-IOT01A Hardware Settings in PlatformIO\nDESCRIPTION: Configuration example showing how to override default board settings like microcontroller type and CPU frequency for the ST B-L475E-IOT01A Discovery kit.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_l475vg_iot01a.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_l475vg_iot01a]\nplatform = ststm32\nboard = disco_l475vg_iot01a\n\n; change microcontroller\nboard_build.mcu = stm32l475vgt6\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing ESP8266 ESP-01 1M Board Parameters in platformio.ini\nDESCRIPTION: Extended configuration for an ESP8266 ESP-01 1M board with customized microcontroller and CPU frequency settings. This demonstrates how to override default board settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/esp01_1m.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp01_1m]\nplatform = espressif8266\nboard = esp01_1m\n\n; change microcontroller\nboard_build.mcu = esp8266\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: ESP-07 Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the ESP-07 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/esp07.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp07]\nplatform = espressif8266\nboard = esp07\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for ESP-Mx DevKit (ESP8285) in PlatformIO\nDESCRIPTION: This code demonstrates how to specify the upload protocol for the ESP-Mx DevKit (ESP8285) board in the PlatformIO configuration. The board supports 'espota' and 'esptool' protocols, with 'esptool' as the default.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/espmxdevkit.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:espmxdevkit]\nplatform = espressif8266\nboard = espmxdevkit\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for AVR128DB64\nDESCRIPTION: Basic configuration setup for AVR128DB64 board in platformio.ini file, specifying the platform and board name.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/AVR128DB64.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:AVR128DB64]\nplatform = atmelmegaavr\nboard = AVR128DB64\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO Environment for Generic STC8H1K64S2A10\nDESCRIPTION: This snippet shows how to set up a PlatformIO environment for the Generic STC8H1K64S2A10 board in the projectconf file. It specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8H1K64S2A10.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8H1K64S2A10]\nplatform = intel_mcs51\nboard = STC8H1K64S2A10\n```\n\n----------------------------------------\n\nTITLE: Customizing M5Stamp-Pico Hardware Settings in PlatformIO\nDESCRIPTION: Advanced configuration that demonstrates how to override default hardware settings for the M5Stamp-Pico board. This example shows how to modify the microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/m5stamp-pico.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:m5stamp-pico]\nplatform = espressif32\nboard = m5stamp-pico\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration in PlatformIO\nDESCRIPTION: Basic configuration setup for STM32F373RC board using the ststm32 platform in platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F373RC.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F373RC]\nplatform = ststm32\nboard = genericSTM32F373RC\n```\n\n----------------------------------------\n\nTITLE: DigiX Upload Protocol Configuration\nDESCRIPTION: Example showing how to configure the upload protocol for the Digistump DigiX board using SAM-BA.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/digix.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:digix]\nplatform = atmelsam\nboard = digix\n\nupload_protocol = sam-ba\n```\n\n----------------------------------------\n\nTITLE: Customizing ATtiny816 Board Settings in PlatformIO\nDESCRIPTION: Advanced configuration example showing how to override default board settings like microcontroller type and CPU frequency in platformio.ini.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/ATtiny816.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATtiny816]\nplatform = atmelmegaavr\nboard = ATtiny816\n\n; change microcontroller\nboard_build.mcu = attiny816\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for EFM32GG-STK3700\nDESCRIPTION: Configuration example showing how to set the upload protocol for the EFM32GG-STK3700 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/siliconlabsefm32/efm32gg_stk3700.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:efm32gg_stk3700]\nplatform = siliconlabsefm32\nboard = efm32gg_stk3700\n\nupload_protocol = mbed\n```\n\n----------------------------------------\n\nTITLE: Configuring TinyDuino Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the TinyCircuits TinyDuino Processor Board in the PlatformIO project configuration file. It sets the platform to atmelavr and the board to tinyduino.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/tinyduino.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:tinyduino]\nplatform = atmelavr\nboard = tinyduino\n```\n\n----------------------------------------\n\nTITLE: Customizing Adafruit Hallowing M4 Board Settings\nDESCRIPTION: This code demonstrates how to override default board settings in PlatformIO, such as changing the microcontroller and MCU frequency for the Adafruit Hallowing M4.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_hallowing_m4.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_hallowing_m4]\nplatform = atmelsam\nboard = adafruit_hallowing_m4\n\n; change microcontroller\nboard_build.mcu = samd51j19a\n\n; change MCU frequency\nboard_build.f_cpu = 120000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Adafruit QT Py ESP32-C3 in platformio.ini\nDESCRIPTION: Basic configuration for the Adafruit QT Py ESP32-C3 board in the project's platformio.ini file. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/adafruit_qtpy_esp32c3.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_qtpy_esp32c3]\nplatform = espressif32\nboard = adafruit_qtpy_esp32c3\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for STM32F401RE in PlatformIO INI File\nDESCRIPTION: This snippet shows how to specify the upload protocol for the STM32F401RE board in the PlatformIO INI file. The default protocol is 'serial', but it can be changed to other supported protocols.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F401RE.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F401RE]\nplatform = ststm32\nboard = genericSTM32F401RE\n\nupload_protocol = serial\n```\n\n----------------------------------------\n\nTITLE: Customized PlatformIO Configuration for chipKIT DP32\nDESCRIPTION: Extended configuration for the Digilent chipKIT DP32 board with custom microcontroller and clock frequency settings. This demonstrates how to override default board settings in a PlatformIO project.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/microchippic32/chipkit_dp32.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:chipkit_dp32]\nplatform = microchippic32\nboard = chipkit_dp32\n\n; change microcontroller\nboard_build.mcu = 32MX250F128B\n\n; change MCU frequency\nboard_build.f_cpu = 40000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing BPI-Bit MCU and Frequency Settings\nDESCRIPTION: Advanced PlatformIO configuration showing how to override default microcontroller and frequency settings for the BPI-Bit board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/bpi-bit.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:bpi-bit]\nplatform = espressif32\nboard = bpi-bit\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 160000000L\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration - PlatformIO INI\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the Lion:Bit S3 STEM Dev Board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/lionbits3.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:lionbits3]\nplatform = espressif32\nboard = lionbits3\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Adafruit Matrix Portal M4 in PlatformIO\nDESCRIPTION: Configuration snippet demonstrating how to specify an upload protocol for the Adafruit Matrix Portal M4 board in a PlatformIO project. The example uses the sam-ba protocol, which is also the default.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_matrix_portal_m4.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_matrix_portal_m4]\nplatform = atmelsam\nboard = adafruit_matrix_portal_m4\n\nupload_protocol = sam-ba\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for nRF51 DK\nDESCRIPTION: Configuration example for specifying the upload protocol for the nRF51 DK board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf51/nrf51_dk.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:nrf51_dk]\nplatform = nordicnrf51\nboard = nrf51_dk\n\nupload_protocol = jlink\n```\n\n----------------------------------------\n\nTITLE: Customizing TAMC DPU ESP32 Board Settings in PlatformIO\nDESCRIPTION: This snippet shows how to override default board settings such as microcontroller type and CPU frequency in the PlatformIO configuration file. These settings allow for customization of the build process.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/dpu_esp32.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:dpu_esp32]\nplatform = espressif32\nboard = dpu_esp32\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring ST Nucleo L412KB Board in PlatformIO\nDESCRIPTION: Basic configuration for the ST Nucleo L412KB board in the project's platformio.ini file. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_l412kb.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_l412kb]\nplatform = ststm32\nboard = nucleo_l412kb\n```\n\n----------------------------------------\n\nTITLE: Customizing Generic N79E825 Board Configuration in platformio.ini\nDESCRIPTION: Extended configuration for the Generic N79E825 board with custom microcontroller and frequency settings. This demonstrates how to override default board settings using the board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/N79E825.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:N79E825]\nplatform = intel_mcs51\nboard = N79E825\n\n; change microcontroller\nboard_build.mcu = n79e825\n\n; change MCU frequency\nboard_build.f_cpu = 6000000L\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for Namino Arancio Board\nDESCRIPTION: Basic project configuration for the Namino Arancio board in the platformio.ini file. This configuration sets up the espressif32 platform with the board ID 'namino_arancio'.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/namino_arancio.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:namino_arancio]\nplatform = espressif32\nboard = namino_arancio\n```\n\n----------------------------------------\n\nTITLE: Customizing Generic W79E2051 Board Settings in PlatformIO\nDESCRIPTION: This snippet demonstrates how to override default settings for the Generic W79E2051 board in a PlatformIO project. It shows how to change the microcontroller and MCU frequency using board-specific options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/W79E2051.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:W79E2051]\nplatform = intel_mcs51\nboard = W79E2051\n\n; change microcontroller\nboard_build.mcu = w79e2051\n\n; change MCU frequency\nboard_build.f_cpu = 22118400L\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration for Maple RET6\nDESCRIPTION: Example configuration showing how to specify the upload protocol for the Maple (RET6) board using DFU protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/maple_ret6.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:maple_ret6]\nplatform = ststm32\nboard = maple_ret6\n\nupload_protocol = dfu\n```\n\n----------------------------------------\n\nTITLE: Customizing ATtiny261 MCU and Clock Settings\nDESCRIPTION: Example showing how to override default board settings including microcontroller model and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/attiny261.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:attiny261]\nplatform = atmelavr\nboard = attiny261\n\n; change microcontroller\nboard_build.mcu = attiny261\n\n; change MCU frequency\nboard_build.f_cpu = 8000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced STM32F412CE Board Configuration with MCU Settings\nDESCRIPTION: Extended configuration showing how to override default microcontroller and frequency settings for the STM32F412CE board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F412CE.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F412CE]\nplatform = ststm32\nboard = genericSTM32F412CE\n\n; change microcontroller\nboard_build.mcu = stm32f412ceu6\n\n; change MCU frequency\nboard_build.f_cpu = 100000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing ST 32F429IDISCOVERY Board Settings\nDESCRIPTION: Example of overriding default board settings like microcontroller and CPU frequency in PlatformIO configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_f429zi.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_f429zi]\nplatform = ststm32\nboard = disco_f429zi\n\n; change microcontroller\nboard_build.mcu = stm32f429zit6\n\n; change MCU frequency\nboard_build.f_cpu = 180000000L\n```\n\n----------------------------------------\n\nTITLE: ESP32 Upload Protocol Configuration\nDESCRIPTION: PlatformIO configuration demonstrating how to specify the upload protocol for the Unexpected Maker RMP board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/um_rmp.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:um_rmp]\nplatform = espressif32\nboard = um_rmp\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Advanced N78E366 Board Configuration in PlatformIO\nDESCRIPTION: Extended configuration for the N78E366 board including custom microcontroller and frequency settings. Demonstrates how to override default board settings using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/N78E366.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:N78E366]\nplatform = intel_mcs51\nboard = N78E366\n\n; change microcontroller\nboard_build.mcu = n78e366\n\n; change MCU frequency\nboard_build.f_cpu = 22118400L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for ST B-L475E-IOT01A in PlatformIO\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the ST B-L475E-IOT01A Discovery kit. This example sets the upload protocol to 'stlink', which is also the default.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_l475vg_iot01a.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_l475vg_iot01a]\nplatform = ststm32\nboard = disco_l475vg_iot01a\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Customizing Generic STC15F2K40S2 Board Settings in PlatformIO\nDESCRIPTION: Example of overriding default board settings in PlatformIO for the Generic STC15F2K40S2. This snippet demonstrates how to change the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15F2K40S2.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15F2K40S2]\nplatform = intel_mcs51\nboard = STC15F2K40S2\n\n; change microcontroller\nboard_build.mcu = stc15f2k40s2\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Customizing MCU and Frequency Settings for senseBox MCU-S2 ESP32-S2\nDESCRIPTION: Example showing how to override default board settings in platformio.ini, specifically changing the microcontroller type and CPU frequency for the senseBox MCU-S2 ESP32-S2 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/sensebox_mcu_esp32s2.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:sensebox_mcu_esp32s2]\nplatform = espressif32\nboard = sensebox_mcu_esp32s2\n\n; change microcontroller\nboard_build.mcu = esp32s2\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration with MCU Settings\nDESCRIPTION: Extended configuration showing how to override default board settings such as microcontroller type and CPU frequency\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/nanoatmega168.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nanoatmega168]\nplatform = atmelavr\nboard = nanoatmega168\n\n; change microcontroller\nboard_build.mcu = atmega168\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for ST 32L100DISCOVERY\nDESCRIPTION: Configuration to change the upload protocol for the ST 32L100DISCOVERY board. In this example, it's set to use the ST-Link protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_l100rc.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_l100rc]\nplatform = ststm32\nboard = disco_l100rc\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Customizing Arduino Nano Board Settings\nDESCRIPTION: Advanced PlatformIO configuration demonstrating how to override default board settings such as microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/nanoatmega328.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nanoatmega328]\nplatform = atmelavr\nboard = nanoatmega328\n\n; change microcontroller\nboard_build.mcu = atmega328p\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for STC15W1K16S\nDESCRIPTION: Basic project configuration example showing how to set up an environment for the STC15W1K16S board using the intel_mcs51 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15W1K16S.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15W1K16S]\nplatform = intel_mcs51\nboard = STC15W1K16S\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic M5Stack-Core Ink Environment in PlatformIO\nDESCRIPTION: Basic configuration for M5Stack-Core Ink board in the project's platformio.ini file. This sets up the essential environment with the espressif32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/m5stack-coreink.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:m5stack-coreink]\nplatform = espressif32\nboard = m5stack-coreink\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic STC15F203EA Environment in platformio.ini\nDESCRIPTION: Basic configuration for the STC15F203EA board in the platformio.ini file, specifying the Intel MCS-51 platform and the board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15F203EA.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15F203EA]\nplatform = intel_mcs51\nboard = STC15F203EA\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for MH ET LIVE ESP32MiniKit\nDESCRIPTION: Configuration to specify the upload protocol for the MH ET LIVE ESP32MiniKit board. In this example, it's set to the default 'esptool' protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/mhetesp32minikit.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:mhetesp32minikit]\nplatform = espressif32\nboard = mhetesp32minikit\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Example configuration showing how to specify the upload protocol for the Mbed Connect Cloud board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/mbed_connect_odin.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:mbed_connect_odin]\nplatform = ststm32\nboard = mbed_connect_odin\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Basic ATtiny404 Board Configuration in PlatformIO\nDESCRIPTION: Basic configuration for setting up an ATtiny404 board project in PlatformIO's project configuration file. Specifies the platform and board type.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/ATtiny404.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATtiny404]\nplatform = atmelmegaavr\nboard = ATtiny404\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic PlatformIO Environment for Adafruit Feather M4 CAN\nDESCRIPTION: Basic configuration for setting up the Adafruit Feather M4 CAN board in PlatformIO's project configuration file. This defines the platform as atmelsam and specifies the board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_feather_m4_can.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_feather_m4_can]\nplatform = atmelsam\nboard = adafruit_feather_m4_can\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Teensy 4.1 in PlatformIO INI File\nDESCRIPTION: This snippet shows how to set the upload protocol for Teensy 4.1 in the PlatformIO configuration. It uses the 'teensy-gui' protocol as an example.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/teensy/teensy41.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:teensy41]\nplatform = teensy\nboard = teensy41\n\nupload_protocol = teensy-gui\n```\n\n----------------------------------------\n\nTITLE: Customizing ATmega8 Board Configuration\nDESCRIPTION: Advanced configuration example showing how to override default microcontroller and frequency settings for ATmega8 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega8.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega8]\nplatform = atmelavr\nboard = ATmega8\n\n; change microcontroller\nboard_build.mcu = atmega8\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Adafruit Matrix Portal M4 Board Settings in PlatformIO\nDESCRIPTION: Configuration example showing how to override default board settings such as microcontroller type and CPU frequency for the Adafruit Matrix Portal M4 in a PlatformIO project.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_matrix_portal_m4.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_matrix_portal_m4]\nplatform = atmelsam\nboard = adafruit_matrix_portal_m4\n\n; change microcontroller\nboard_build.mcu = samd51j19a\n\n; change MCU frequency\nboard_build.f_cpu = 120000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Deneyap Mini\nDESCRIPTION: Configuration example for specifying the upload protocol in the platformio.ini file. It sets the upload protocol to esptool, which is the default for this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/deneyapmini.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:deneyapmini]\nplatform = espressif32\nboard = deneyapmini\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Protocol for Franzininho WiFi ESP32S2\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the Franzininho WiFi board in PlatformIO. The example uses esptool which is the default upload protocol for this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/franzininho_wifi_esp32s2.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:franzininho_wifi_esp32s2]\nplatform = espressif32\nboard = franzininho_wifi_esp32s2\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring Stable NXP LPC Platform in PlatformIO\nDESCRIPTION: Configuration examples for using stable release versions of the NXP LPC platform in platformio.ini. Shows both latest stable version and specific version pinning.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/nxplpc.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n; Latest stable version, NOT recommended\n; Pin the version as shown below\n[env:latest_stable]\nplatform = nxplpc\nboard = ...\n\n; Specific version\n[env:custom_stable]\nplatform = nxplpc@x.y.z\nboard = ...\n```\n\n----------------------------------------\n\nTITLE: Configuring ATtiny202 Board in PlatformIO\nDESCRIPTION: Basic PlatformIO configuration for the ATtiny202 board in the platformio.ini file. This sets up the environment with the atmelmegaavr platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/ATtiny202.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATtiny202]\nplatform = atmelmegaavr\nboard = ATtiny202\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic ATmega168 Board Settings in PlatformIO\nDESCRIPTION: Basic configuration for setting up an ATmega168 board environment in platformio.ini. Specifies the platform and board type.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega168.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega168]\nplatform = atmelavr\nboard = ATmega168\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/adafruit_metro_esp32s3.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_metro_esp32s3]\nplatform = espressif32\nboard = adafruit_metro_esp32s3\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Deneyap Kart 1A v2\nDESCRIPTION: Configuration to change the upload protocol for the Deneyap Kart 1A v2 board in platformio.ini. The example uses the default 'esptool' protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/deneyapkart1Av2.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:deneyapkart1Av2]\nplatform = espressif32\nboard = deneyapkart1Av2\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Customizing ESP32 Hardware Parameters in PlatformIO\nDESCRIPTION: Advanced PlatformIO configuration that overrides default board settings. This demonstrates how to change the microcontroller type and CPU frequency for custom builds.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32doit-devkit-v1.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32doit-devkit-v1]\nplatform = espressif32\nboard = esp32doit-devkit-v1\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Raytac MDBT50Q-RX Dongle settings in PlatformIO INI file\nDESCRIPTION: Example of overriding default board settings in the PlatformIO configuration. Demonstrates changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/raytac_mdbt50q_rx.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:raytac_mdbt50q_rx]\nplatform = nordicnrf52\nboard = raytac_mdbt50q_rx\n\n; change microcontroller\nboard_build.mcu = nrf52840\n\n; change MCU frequency\nboard_build.f_cpu = 64000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Arduino Mega Board Settings\nDESCRIPTION: Basic PlatformIO configuration for Arduino Mega board, specifying the platform and board type.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/megaatmega1280.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:megaatmega1280]\nplatform = atmelavr\nboard = megaatmega1280\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO Environment for ESP32S3 CAM LCD Board\nDESCRIPTION: Basic configuration for setting up a PlatformIO environment for the ESP32S3 CAM LCD board using the espressif32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32s3camlcd.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32s3camlcd]\nplatform = espressif32\nboard = esp32s3camlcd\n```\n\n----------------------------------------\n\nTITLE: Customizing ST Nucleo U575ZI-Q Board Settings\nDESCRIPTION: Example of overriding default board settings, such as microcontroller and CPU frequency, using board_*** options in the PlatformIO configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_u575zi_q.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_u575zi_q]\nplatform = ststm32\nboard = nucleo_u575zi_q\n\n; change microcontroller\nboard_build.mcu = stm32u575zit6q\n\n; change MCU frequency\nboard_build.f_cpu = 160000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced MS51XC0BE Board Configuration with Custom Settings\nDESCRIPTION: Extended configuration example showing how to override default board settings such as microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/MS51XC0BE.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:MS51XC0BE]\nplatform = intel_mcs51\nboard = MS51XC0BE\n\n; change microcontroller\nboard_build.mcu = ms51xc0be\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Microduino Core USB in platformio.ini\nDESCRIPTION: Basic configuration for setting up a PlatformIO project for the Microduino Core USB board. This snippet shows how to specify the board in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/32u416m.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:32u416m]\nplatform = atmelavr\nboard = 32u416m\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration for STC8H3K32S2\nDESCRIPTION: Extended environment configuration showing how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8H3K32S2.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8H3K32S2]\nplatform = intel_mcs51\nboard = STC8H3K32S2\n\n; change microcontroller\nboard_build.mcu = stc8h3k32s2\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Customizing Arduino NG or older ATmega8 Settings\nDESCRIPTION: This snippet demonstrates how to override default settings for the Arduino NG or older ATmega8 board in a PlatformIO project. It shows how to change the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/atmegangatmega8.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:atmegangatmega8]\nplatform = atmelavr\nboard = atmegangatmega8\n\n; change microcontroller\nboard_build.mcu = atmega8\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with Custom MCU Settings\nDESCRIPTION: Extended PlatformIO configuration showing how to override default board settings like microcontroller model and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f439zi.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f439zi]\nplatform = ststm32\nboard = nucleo_f439zi\n\n; change microcontroller\nboard_build.mcu = stm32f439zit6\n\n; change MCU frequency\nboard_build.f_cpu = 180000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing STM32F417VG Board Settings\nDESCRIPTION: Example of overriding default board settings like microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F417VG.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F417VG]\nplatform = ststm32\nboard = genericSTM32F417VG\n\n; change microcontroller\nboard_build.mcu = stm32f417vgt6\n\n; change MCU frequency\nboard_build.f_cpu = 168000000L\n```\n\n----------------------------------------\n\nTITLE: Overriding Default STC8H3K48S4 Board Settings in PlatformIO\nDESCRIPTION: This snippet demonstrates how to override default settings for the Generic STC8H3K48S4 board in a PlatformIO project. It includes examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8H3K48S4.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8H3K48S4]\nplatform = intel_mcs51\nboard = STC8H3K48S4\n\n; change microcontroller\nboard_build.mcu = stc8h3k48s4\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Configuring MotorGo Mini 1 Board in PlatformIO\nDESCRIPTION: Basic configuration for the MotorGo Mini 1 (ESP32-S3) board in the PlatformIO project configuration file. This sets up the essential environment with the correct platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/motorgo_mini_1.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:motorgo_mini_1]\nplatform = espressif32\nboard = motorgo_mini_1\n```\n\n----------------------------------------\n\nTITLE: Configuring ST Nucleo F042K6 Board in platformio.ini\nDESCRIPTION: Basic configuration for using the ST Nucleo F042K6 board in a PlatformIO project. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f042k6.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f042k6]\nplatform = ststm32\nboard = nucleo_f042k6\n```\n\n----------------------------------------\n\nTITLE: Customizing OLIMEX ESP32-PoE Board Settings\nDESCRIPTION: This example demonstrates how to override default board settings in the platformio.ini file. It shows how to change the microcontroller and MCU frequency for the OLIMEX ESP32-PoE board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32-poe.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32-poe]\nplatform = espressif32\nboard = esp32-poe\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration for PYBStick 26 Pro\nDESCRIPTION: PlatformIO configuration demonstrating how to specify the upload protocol for PYBStick 26 Pro board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/pybstick26_pro.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:pybstick26_pro]\nplatform = ststm32\nboard = pybstick26_pro\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Circuit Playground Classic Board\nDESCRIPTION: Basic PlatformIO configuration for setting up the Adafruit Circuit Playground Classic board using the atmelavr platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/circuitplay_classic.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:circuitplay_classic]\nplatform = atmelavr\nboard = circuitplay_classic\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the Adafruit Slide Trinkey board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_slidetrinkey_m0.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_slidetrinkey_m0]\nplatform = atmelsam\nboard = adafruit_slidetrinkey_m0\n\nupload_protocol = sam-ba\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Generic N76E616 Board\nDESCRIPTION: This snippet shows how to configure a PlatformIO project for the Generic N76E616 board. It sets the platform to intel_mcs51 and the board to N76E616.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/N76E616.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:N76E616]\nplatform = intel_mcs51\nboard = N76E616\n```\n\n----------------------------------------\n\nTITLE: Configuring TI LaunchPad MSP-EXP430G2553LP in platformio.ini\nDESCRIPTION: Basic configuration example for using the TI LaunchPad MSP-EXP430G2553LP board in a PlatformIO project. This snippet shows how to specify the board in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/timsp430/lpmsp430g2553.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:lpmsp430g2553]\nplatform = timsp430\nboard = lpmsp430g2553\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Board Configuration with Custom Settings\nDESCRIPTION: Extended configuration example demonstrating how to override default board settings like microcontroller type and CPU frequency for the Pro Trinket board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/protrinket3.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:protrinket3]\nplatform = atmelavr\nboard = protrinket3\n\n; change microcontroller\nboard_build.mcu = atmega328p\n\n; change MCU frequency\nboard_build.f_cpu = 12000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic ML51OB9AE Board in PlatformIO\nDESCRIPTION: This snippet shows how to configure the Generic ML51OB9AE board in a PlatformIO project's configuration file. It sets the platform and board ID, and demonstrates how to override default board settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/ML51OB9AE.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ML51OB9AE]\nplatform = intel_mcs51\nboard = ML51OB9AE\n\n; change microcontroller\nboard_build.mcu = ml51ob9ae\n\n; change MCU frequency\nboard_build.f_cpu = 24000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing ATtiny202 Board Settings in PlatformIO\nDESCRIPTION: Extended PlatformIO configuration for the ATtiny202 board with custom microcontroller and frequency settings. This example shows how to override default settings defined in the board manifest.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/ATtiny202.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATtiny202]\nplatform = atmelmegaavr\nboard = ATtiny202\n\n; change microcontroller\nboard_build.mcu = attiny202\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Teensy 3.1\nDESCRIPTION: PlatformIO configuration showing how to specify the upload protocol for Teensy 3.1 / 3.2 board. The default protocol is teensy-gui, but this example demonstrates how to set it explicitly.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/teensy/teensy31.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:teensy31]\nplatform = teensy\nboard = teensy31\n\nupload_protocol = teensy-gui\n```\n\n----------------------------------------\n\nTITLE: Advanced STM32F103VG Board Configuration\nDESCRIPTION: Extended configuration showing how to override default microcontroller and frequency settings for the STM32F103VG board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103VG.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103VG]\nplatform = ststm32\nboard = genericSTM32F103VG\n\n; change microcontroller\nboard_build.mcu = stm32f103vgt6\n\n; change MCU frequency\nboard_build.f_cpu = 72000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced DigiX Configuration with MCU and Frequency Settings\nDESCRIPTION: PlatformIO configuration example showing how to override default board settings like microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/digix.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:digix]\nplatform = atmelsam\nboard = digix\n\n; change microcontroller\nboard_build.mcu = at91sam3x8e\n\n; change MCU frequency\nboard_build.f_cpu = 84000000L\n```\n\n----------------------------------------\n\nTITLE: Custom MCU Configuration for STM32F412RG in PlatformIO\nDESCRIPTION: Override default board settings for STM32F412RG by specifying custom microcontroller and CPU frequency values in the PlatformIO configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F412RG.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F412RG]\nplatform = ststm32\nboard = genericSTM32F412RG\n\n; change microcontroller\nboard_build.mcu = stm32f412rgt6\n\n; change MCU frequency\nboard_build.f_cpu = 100000000L\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration for ESP32-PoE-ISO\nDESCRIPTION: Basic PlatformIO configuration for setting up the ESP32-PoE-ISO board with the espressif32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32-poe-iso.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32-poe-iso]\nplatform = espressif32\nboard = esp32-poe-iso\n```\n\n----------------------------------------\n\nTITLE: Customizing Adafruit Feather M4 Express MCU Parameters\nDESCRIPTION: Advanced configuration for the Adafruit Feather M4 Express that overrides the default microcontroller and MCU frequency settings. This demonstrates how to customize board-specific parameters in PlatformIO.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_feather_m4.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_feather_m4]\nplatform = atmelsam\nboard = adafruit_feather_m4\n\n; change microcontroller\nboard_build.mcu = samd51j19a\n\n; change MCU frequency\nboard_build.f_cpu = 120000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Board Settings in PlatformIO for SparkFun SAMD21 Dev Breakout\nDESCRIPTION: Example of overriding default board settings in PlatformIO, such as changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/sparkfun_samd21_dev_usb.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:sparkfun_samd21_dev_usb]\nplatform = atmelsam\nboard = sparkfun_samd21_dev_usb\n\n; change microcontroller\nboard_build.mcu = samd21g18a\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: ALKS ESP32 Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the ALKS ESP32 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/alksesp32.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:alksesp32]\nplatform = espressif32\nboard = alksesp32\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Customizing STC8H4K64LCD Board Settings in PlatformIO\nDESCRIPTION: Advanced PlatformIO configuration for the STC8H4K64LCD board that demonstrates how to customize the microcontroller type and clock frequency settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8H4K64LCD.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8H4K64LCD]\nplatform = intel_mcs51\nboard = STC8H4K64LCD\n\n; change microcontroller\nboard_build.mcu = stc8h4k64lcd\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for TI LaunchPad MSP-EXP430FR5994LP\nDESCRIPTION: Basic PlatformIO configuration for the MSP-EXP430FR5994LP board using the timsp430 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/timsp430/lpmsp430fr5994.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:lpmsp430fr5994]\nplatform = timsp430\nboard = lpmsp430fr5994\n```\n\n----------------------------------------\n\nTITLE: Customizing M5Stack Core ESP32 16M Board Settings\nDESCRIPTION: This snippet demonstrates how to override default board settings in the PlatformIO configuration. It shows examples of changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/m5stack-core-esp32-16M.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:m5stack-core-esp32-16M]\nplatform = espressif32\nboard = m5stack-core-esp32-16M\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for PYBSTICK26 Duino\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the PYBSTICK26 Duino board. The board supports multiple protocols with stlink being the default.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/pybstick26_duino.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:pybstick26_duino]\nplatform = ststm32\nboard = pybstick26_duino\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for ST Nucleo F746ZG in PlatformIO\nDESCRIPTION: Configuration for specifying the upload protocol for the ST Nucleo F746ZG board in the PlatformIO project configuration file. This example uses the STLink protocol, which is also the default option.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f746zg.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f746zg]\nplatform = ststm32\nboard = nucleo_f746zg\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic ATtiny861 Board in platformio.ini\nDESCRIPTION: This snippet shows how to configure the Generic ATtiny861 board in the PlatformIO project configuration file. It sets the platform to atmelavr and the board to attiny861.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/attiny861.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:attiny861]\nplatform = atmelavr\nboard = attiny861\n```\n\n----------------------------------------\n\nTITLE: Configuring STM32H750VBT6 Board in PlatformIO\nDESCRIPTION: Basic configuration for the STM32H750VBT6 board in the project's platformio.ini file. It specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32H750VB.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32H750VB]\nplatform = ststm32\nboard = genericSTM32H750VB\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Protocol for WiFiduino32S3\nDESCRIPTION: Example configuration for setting the upload protocol to esptool for flashing the board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/wifiduino32s3.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:wifiduino32s3]\nplatform = espressif32\nboard = wifiduino32s3\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for WEMOS LOLIN C3 Mini\nDESCRIPTION: Basic configuration for the WEMOS LOLIN C3 Mini board in the project's platformio.ini file. This sets up the board with the Espressif32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/lolin_c3_mini.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:lolin_c3_mini]\nplatform = espressif32\nboard = lolin_c3_mini\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Protocol for Heltec Wireless Stick\nDESCRIPTION: Configuration example showing how to set a specific upload protocol for the Heltec Wireless Stick. This snippet demonstrates setting esptool as the upload protocol in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/heltec_wireless_stick.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:heltec_wireless_stick]\nplatform = espressif32\nboard = heltec_wireless_stick\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Board Settings in PlatformIO\nDESCRIPTION: Basic PlatformIO configuration for the Vajra board using the Shakti platform. This snippet shows the minimal required settings in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/shakti/vajra.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:vajra]\nplatform = shakti\nboard = vajra\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for STC8H8K48U\nDESCRIPTION: Basic configuration setup for STC8H8K48U board in platformio.ini file, specifying the platform and board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8H8K48U.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8H8K48U]\nplatform = intel_mcs51\nboard = STC8H8K48U\n```\n\n----------------------------------------\n\nTITLE: Customizing Arduino Mega ADK Settings in PlatformIO Configuration\nDESCRIPTION: Advanced configuration example showing how to override default Arduino Mega ADK settings such as microcontroller type and CPU frequency in the PlatformIO project configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/megaADK.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:megaADK]\nplatform = atmelavr\nboard = megaADK\n\n; change microcontroller\nboard_build.mcu = atmega2560\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Protocol for Adafruit PyPortal M4 Titano\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the Adafruit PyPortal M4 Titano board in PlatformIO. This example uses the SAM-BA bootloader protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_pyportal_m4_titano.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_pyportal_m4_titano]\nplatform = atmelsam\nboard = adafruit_pyportal_m4_titano\n\nupload_protocol = sam-ba\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Controllino Maxi Board\nDESCRIPTION: Basic configuration for using the Controllino Maxi board in a PlatformIO project. This code snippet sets up the platform and board in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/controllino_maxi.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:controllino_maxi]\nplatform = atmelavr\nboard = controllino_maxi\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/heltec_wifi_kit_8.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:heltec_wifi_kit_8]\nplatform = espressif8266\nboard = heltec_wifi_kit_8\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for STC15F105W Board\nDESCRIPTION: Basic platformio.ini configuration for setting up an environment targeting the STC15F105W board on the intel_mcs51 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15F105W.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15F105W]\nplatform = intel_mcs51\nboard = STC15F105W\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Trueverit ESP32 Universal IoT Driver MK III\nDESCRIPTION: Basic PlatformIO configuration for the Trueverit ESP32 Universal IoT Driver MK III board. Sets the platform to espressif32 and specifies the board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/trueverit-iot-driver-mk3.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:trueverit-iot-driver-mk3]\nplatform = espressif32\nboard = trueverit-iot-driver-mk3\n```\n\n----------------------------------------\n\nTITLE: OLIMEXINO-STM32 Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the OLIMEXINO-STM32 board\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/olimexino.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:olimexino]\nplatform = ststm32\nboard = olimexino\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Advanced AVR128DA28 Board Configuration with Custom Settings\nDESCRIPTION: Extended configuration for AVR128DA28 showing how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/AVR128DA28.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:AVR128DA28]\nplatform = atmelmegaavr\nboard = AVR128DA28\n\n; change microcontroller\nboard_build.mcu = avr128da28\n\n; change MCU frequency\nboard_build.f_cpu = 24000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring WeMos WiFi and Bluetooth Battery Board in PlatformIO\nDESCRIPTION: Basic configuration for a PlatformIO project using the WeMos WiFi and Bluetooth Battery board with the Espressif32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/wemosbat.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:wemosbat]\nplatform = espressif32\nboard = wemosbat\n```\n\n----------------------------------------\n\nTITLE: Basic hackaBLE Board Configuration\nDESCRIPTION: Basic PlatformIO configuration for the hackaBLE board using the Nordic nRF52 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/hackaBLE.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:hackaBLE]\nplatform = nordicnrf52\nboard = hackaBLE\n```\n\n----------------------------------------\n\nTITLE: Customizing RHF76 052 Board Settings\nDESCRIPTION: Example of overriding default board settings in platformio.ini, such as changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/rhf76_052.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:rhf76_052]\nplatform = ststm32\nboard = rhf76_052\n\n; change microcontroller\nboard_build.mcu = stm32l051c8t6\n\n; change MCU frequency\nboard_build.f_cpu = 32000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing PanStamp AVR Board Settings in PlatformIO INI File\nDESCRIPTION: This snippet demonstrates how to override default PanStamp AVR settings in the PlatformIO project configuration file. It changes the microcontroller to atmega328p and sets the MCU frequency to 8MHz.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/panStampAVR.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:panStampAVR]\nplatform = atmelavr\nboard = panStampAVR\n\n; change microcontroller\nboard_build.mcu = atmega328p\n\n; change MCU frequency\nboard_build.f_cpu = 8000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing SODAQ ExpLoRer Board Settings\nDESCRIPTION: This snippet demonstrates how to override default board settings for the SODAQ ExpLoRer. It changes the microcontroller and MCU frequency using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/sodaq_explorer.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:sodaq_explorer]\nplatform = atmelsam\nboard = sodaq_explorer\n\n; change microcontroller\nboard_build.mcu = samd21j18a\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic sduino UNO Board Environment in PlatformIO\nDESCRIPTION: Basic configuration for the sduino UNO (STM8S105K6) board in platformio.ini file. This sets up the platform and board ID for a PlatformIO project.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm8/s8uno.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:s8uno]\nplatform = ststm8\nboard = s8uno\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic STM8S003F3 Board Settings\nDESCRIPTION: Basic configuration for STM8S003F3 board in platformio.ini, specifying the platform and board type.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm8/stm8s003f3.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:stm8s003f3]\nplatform = ststm8\nboard = stm8s003f3\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for STM32F103ZG\nDESCRIPTION: Configuration to change the upload protocol for the STM32F103ZG board. In this example, it's set to 'serial', which is also the default.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103ZG.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103ZG]\nplatform = ststm32\nboard = genericSTM32F103ZG\n\nupload_protocol = serial\n```\n\n----------------------------------------\n\nTITLE: Configuring Circuit Playground Bluefruit in PlatformIO\nDESCRIPTION: Basic configuration example for the Circuit Playground Bluefruit board in the platformio.ini file. This sets up the project to use the nordicnrf52 platform with the adafruit_cplaynrf52840 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/adafruit_cplaynrf52840.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_cplaynrf52840]\nplatform = nordicnrf52\nboard = adafruit_cplaynrf52840\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for SODAQ ONE\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the SODAQ ONE board. Uses the sam-ba protocol which is the default option.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/sodaq_one.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:sodaq_one]\nplatform = atmelsam\nboard = sodaq_one\n\nupload_protocol = sam-ba\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Heltec WiFi LoRa 32\nDESCRIPTION: Configuration to specify the upload protocol for the Heltec WiFi LoRa 32 board in platformio.ini. The example uses the default 'esptool' protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/heltec_wifi_lora_32.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:heltec_wifi_lora_32]\nplatform = espressif32\nboard = heltec_wifi_lora_32\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Customizing N76E616 Board Settings in PlatformIO\nDESCRIPTION: This example demonstrates how to override default settings for the Generic N76E616 board in a PlatformIO project. It shows how to change the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/N76E616.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:N76E616]\nplatform = intel_mcs51\nboard = N76E616\n\n; change microcontroller\nboard_build.mcu = n76e616\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Customizing ArtronShop ATD1.47-S3 Board Settings in PlatformIO\nDESCRIPTION: Advanced PlatformIO configuration showing how to override default board settings such as microcontroller type and CPU frequency. These customizations are specified through board_* options in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/atd147_s3.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:atd147_s3]\nplatform = espressif32\nboard = atd147_s3\n\n; change microcontroller\nboard_build.mcu = esp32s3\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic IAP15F2K61S2 Board in PlatformIO\nDESCRIPTION: This snippet shows how to configure the Generic IAP15F2K61S2 board in the PlatformIO project configuration file. It sets the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/IAP15F2K61S2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:IAP15F2K61S2]\nplatform = intel_mcs51\nboard = IAP15F2K61S2\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration with Custom Settings\nDESCRIPTION: Extended configuration example showing how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8H1K08S2A10.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8H1K08S2A10]\nplatform = intel_mcs51\nboard = STC8H1K08S2A10\n\n; change microcontroller\nboard_build.mcu = stc8h1k08s2a10\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Overriding Default OpenBCI 32bit Board Settings in PlatformIO\nDESCRIPTION: This snippet demonstrates how to override default settings for the OpenBCI 32bit board in the PlatformIO configuration. It shows examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/microchippic32/openbci.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:openbci]\nplatform = microchippic32\nboard = openbci\n\n; change microcontroller\nboard_build.mcu = 32MX250F128B\n\n; change MCU frequency\nboard_build.f_cpu = 40000000L\n```\n\n----------------------------------------\n\nTITLE: PrntrBoard V2 Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to set the upload protocol for PrntrBoard V2. Demonstrates setting the STLink protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/prntr_v2.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:prntr_v2]\nplatform = ststm32\nboard = prntr_v2\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Upload Protocol for ST Nucleo F070RB\nDESCRIPTION: Configuration example demonstrating how to specify an upload protocol (ST-Link in this case) for the ST Nucleo F070RB board in PlatformIO.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f070rb.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f070rb]\nplatform = ststm32\nboard = nucleo_f070rb\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for Flip N Click MZ\nDESCRIPTION: Basic configuration example for setting up a PlatformIO project for the Flip N Click MZ board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/microchippic32/flipnclickmz.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:flipnclickmz]\nplatform = microchippic32\nboard = flipnclickmz\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration for N79E875 in PlatformIO\nDESCRIPTION: Basic configuration for setting up the Generic N79E875 board in PlatformIO's project configuration file. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/N79E875.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:N79E875]\nplatform = intel_mcs51\nboard = N79E875\n```\n\n----------------------------------------\n\nTITLE: Advanced Sonoff TH Board Configuration\nDESCRIPTION: Extended PlatformIO configuration for Sonoff TH board with custom microcontroller and frequency settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/sonoff_th.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:sonoff_th]\nplatform = espressif8266\nboard = sonoff_th\n\n; change microcontroller\nboard_build.mcu = esp8266\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Overriding Default STC15F102E Board Settings in PlatformIO INI File\nDESCRIPTION: This snippet demonstrates how to override default board settings for the Generic STC15F102E in the PlatformIO configuration. It includes examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15F102E.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15F102E]\nplatform = intel_mcs51\nboard = STC15F102E\n\n; change microcontroller\nboard_build.mcu = stc15f102e\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for STM32F401CB in PlatformIO\nDESCRIPTION: This code demonstrates how to set the upload protocol for the STM32F401CB board in the PlatformIO configuration. The default protocol is 'serial', but it can be changed to other supported protocols.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F401CB.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F401CB]\nplatform = ststm32\nboard = genericSTM32F401CB\n\nupload_protocol = serial\n```\n\n----------------------------------------\n\nTITLE: Configuring Arduboy Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the Arduboy board in the PlatformIO project configuration file. It sets the platform to atmelavr and the board to arduboy.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/arduboy.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:arduboy]\nplatform = atmelavr\nboard = arduboy\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic NXP mbed LPC1768 Board Settings in PlatformIO\nDESCRIPTION: Basic configuration for the NXP mbed LPC1768 board in the PlatformIO project configuration file. This sets up the environment with the nxplpc platform and lpc1768 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nxplpc/lpc1768.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:lpc1768]\nplatform = nxplpc\nboard = lpc1768\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic STC8F1K08S Environment in PlatformIO\nDESCRIPTION: Basic configuration for setting up a PlatformIO project environment for the Generic STC8F1K08S board using the intel_mcs51 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8F1K08S.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8F1K08S]\nplatform = intel_mcs51\nboard = STC8F1K08S\n```\n\n----------------------------------------\n\nTITLE: Basic AVR64DB64 Board Configuration in PlatformIO\nDESCRIPTION: Basic PlatformIO configuration for AVR64DB64 board setup using the atmelmegaavr platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/AVR64DB64.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:AVR64DB64]\nplatform = atmelmegaavr\nboard = AVR64DB64\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration for Agrumino Lemon\nDESCRIPTION: Basic configuration for setting up Agrumino Lemon v4 board in PlatformIO project configuration file. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/agruminolemon.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:agruminolemon]\nplatform = espressif8266\nboard = agruminolemon\n```\n\n----------------------------------------\n\nTITLE: Configuring VCCGND F103ZET6 Mini Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the VCCGND F103ZET6 Mini board in the PlatformIO project configuration file. It includes options for specifying the board, changing the microcontroller, and adjusting the MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/vccgnd_f103zet6.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:vccgnd_f103zet6]\nplatform = ststm32\nboard = vccgnd_f103zet6\n\n; change microcontroller\nboard_build.mcu = stm32f103zet6\n\n; change MCU frequency\nboard_build.f_cpu = 72000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Xplained Pro ATmega4809 Board Settings in PlatformIO\nDESCRIPTION: This snippet shows the basic configuration required in platformio.ini to use the Xplained Pro ATmega4809 board with the atmelmegaavr platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/xplained_pro_4809.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:xplained_pro_4809]\nplatform = atmelmegaavr\nboard = xplained_pro_4809\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU and Frequency Override\nDESCRIPTION: Extended configuration showing how to override default microcontroller and frequency settings for the SEGGER IP Switch Board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/freescalekinetis/segger_ip_switch.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:segger_ip_switch]\nplatform = freescalekinetis\nboard = segger_ip_switch\n\n; change microcontroller\nboard_build.mcu = mk66fn2m0vmd18\n\n; change MCU frequency\nboard_build.f_cpu = 180000000L\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the SEGGER IP Switch Board, with JLink as the selected protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/freescalekinetis/segger_ip_switch.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:segger_ip_switch]\nplatform = freescalekinetis\nboard = segger_ip_switch\n\nupload_protocol = jlink\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic PlatformIO Environment for Adafruit PyPortal M4\nDESCRIPTION: Basic configuration for setting up a PlatformIO environment targeting the Adafruit PyPortal M4 board using the atmelsam platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_pyportal_m4.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_pyportal_m4]\nplatform = atmelsam\nboard = adafruit_pyportal_m4\n```\n\n----------------------------------------\n\nTITLE: STM32L073Z-EVAL Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/eval_l073z.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:eval_l073z]\nplatform = ststm32\nboard = eval_l073z\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Configuring ST Nucleo WL55JC Board in PlatformIO\nDESCRIPTION: Basic configuration for the ST Nucleo WL55JC board in the PlatformIO project configuration file. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_wl55jc.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_wl55jc]\nplatform = ststm32\nboard = nucleo_wl55jc\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration for STM32373C-EVAL\nDESCRIPTION: Basic PlatformIO configuration for STM32373C-EVAL board using the STM32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/eval_f373vc.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:eval_f373vc]\nplatform = ststm32\nboard = eval_f373vc\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Atmel ATSAMR21-XPRO in PlatformIO\nDESCRIPTION: Configuration for specifying the upload protocol in platformio.ini. This example shows how to set CMSIS-DAP as the protocol for uploading firmware to the ATSAMR21-XPRO board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/samr21_xpro.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:samr21_xpro]\nplatform = atmelsam\nboard = samr21_xpro\n\nupload_protocol = cmsis-dap\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for u-blox EVK-ODIN-W2\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the u-blox EVK-ODIN-W2 board. This board supports multiple protocols including blackmagic, cmsis-dap, jlink, and stlink (default).\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/ublox_evk_odin_w2.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:ublox_evk_odin_w2]\nplatform = ststm32\nboard = ublox_evk_odin_w2\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Basic STC15F100 Board Configuration in PlatformIO\nDESCRIPTION: Basic configuration setup for STC15F100 board using the intel_mcs51 platform in platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15F100.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15F100]\nplatform = intel_mcs51\nboard = STC15F100\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU Settings\nDESCRIPTION: Extended PlatformIO configuration demonstrating how to override default microcontroller settings including MCU model and frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/cloud_jam_l4.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:cloud_jam_l4]\nplatform = ststm32\nboard = cloud_jam_l4\n\n; change microcontroller\nboard_build.mcu = stm32l476rgt6\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing ATtiny13A Board Settings in PlatformIO INI File\nDESCRIPTION: This code snippet demonstrates how to override default ATtiny13A settings in the PlatformIO project configuration file. It shows examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/attiny13a.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:attiny13a]\nplatform = atmelavr\nboard = attiny13a\n\n; change microcontroller\nboard_build.mcu = attiny13a\n\n; change MCU frequency\nboard_build.f_cpu = 9600000L\n```\n\n----------------------------------------\n\nTITLE: Configuring SensorTile.box Board in PlatformIO INI File\nDESCRIPTION: Basic configuration for the SensorTile.box board in the PlatformIO project configuration file. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/steval_mksboxv1.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:steval_mksboxv1]\nplatform = ststm32\nboard = steval_mksboxv1\n```\n\n----------------------------------------\n\nTITLE: Configuring ATtiny424 Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to set up the ATtiny424 board in the PlatformIO project configuration file. It includes the basic setup and examples of how to override default board settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/ATtiny424.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATtiny424]\nplatform = atmelmegaavr\nboard = ATtiny424\n\n; change microcontroller\nboard_build.mcu = attiny424\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Basic STC15F101E Board Configuration in PlatformIO\nDESCRIPTION: Basic PlatformIO configuration for STC15F101E board using the intel_mcs51 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15F101E.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15F101E]\nplatform = intel_mcs51\nboard = STC15F101E\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic PlatformIO Environment for Atmel SAMC21-XPRO\nDESCRIPTION: Basic configuration for setting up a PlatformIO project environment for the Atmel SAMC21-XPRO board using the atmelsam platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/samc21_xpro.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:samc21_xpro]\nplatform = atmelsam\nboard = samc21_xpro\n```\n\n----------------------------------------\n\nTITLE: Configuring Arduino Mega ADK in PlatformIO Project Configuration\nDESCRIPTION: Basic configuration example for setting up an Arduino Mega ADK board in the PlatformIO environment. This snippet shows how to specify the board in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/megaADK.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:megaADK]\nplatform = atmelavr\nboard = megaADK\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration for ST NUCLEO-G031K8\nDESCRIPTION: PlatformIO configuration demonstrating how to set the upload protocol for the ST NUCLEO-G031K8 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_g031k8.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_g031k8]\nplatform = ststm32\nboard = nucleo_g031k8\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Protocol in PlatformIO\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/ttgo-lora32-v21.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:ttgo-lora32-v21]\nplatform = espressif32\nboard = ttgo-lora32-v21\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic M5Stack StampS3 Board Settings\nDESCRIPTION: Basic PlatformIO configuration for M5Stack StampS3 board specifying the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/m5stack-stamps3.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:m5stack-stamps3]\nplatform = espressif32\nboard = m5stack-stamps3\n```\n\n----------------------------------------\n\nTITLE: Configuring ATtiny204 Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the ATtiny204 board in the PlatformIO project configuration file. It sets the platform and board name, and demonstrates how to override default board settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/ATtiny204.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATtiny204]\nplatform = atmelmegaavr\nboard = ATtiny204\n\n; change microcontroller\nboard_build.mcu = attiny204\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for ST Nucleo F412ZG\nDESCRIPTION: Configuration to change the upload protocol for the ST Nucleo F412ZG board. In this example, it's set to 'stlink'.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f412zg.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f412zg]\nplatform = ststm32\nboard = nucleo_f412zg\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for Arduino Pro Mini\nDESCRIPTION: Basic configuration settings in platformio.ini file to set up an Arduino Pro Mini ATmega328 project using the atmelavr platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/pro16MHzatmega328.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:pro16MHzatmega328]\nplatform = atmelavr\nboard = pro16MHzatmega328\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU Settings\nDESCRIPTION: Extended configuration showing how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/um_tinys2.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:um_tinys2]\nplatform = espressif32\nboard = um_tinys2\n\n; change microcontroller\nboard_build.mcu = esp32s2\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Generic ATtiny828 Board Settings in PlatformIO\nDESCRIPTION: Advanced configuration for Generic ATtiny828 board with custom microcontroller and frequency settings. This snippet demonstrates how to override default board settings in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/attiny828.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:attiny828]\nplatform = atmelavr\nboard = attiny828\n\n; change microcontroller\nboard_build.mcu = attiny828\n\n; change MCU frequency\nboard_build.f_cpu = 8000000L\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration for STM32F103RD\nDESCRIPTION: Shows how to configure the upload protocol for the board in platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103RD.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103RD]\nplatform = ststm32\nboard = genericSTM32F103RD\n\nupload_protocol = serial\n```\n\n----------------------------------------\n\nTITLE: Configuring Seeeduino Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the Seeeduino board in the PlatformIO project configuration file. It sets the platform to atmelavr and specifies the board as seeeduino.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/seeeduino.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:seeeduino]\nplatform = atmelavr\nboard = seeeduino\n```\n\n----------------------------------------\n\nTITLE: Configuring Heltec CubeCell-1/2AA Node in PlatformIO INI\nDESCRIPTION: This snippet shows how to set up the Heltec CubeCell-1/2AA Node (HTCC-AB02A) in a PlatformIO project configuration file. It specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/heltec-cubecell/cubecell_node.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:cubecell_node]\nplatform = heltec-cubecell\nboard = cubecell_node\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic STC8F2K64S4 Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the Generic STC8F2K64S4 board in a PlatformIO project's configuration file (platformio.ini). It sets the platform and board, and demonstrates how to override default board settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8F2K64S4.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8F2K64S4]\nplatform = intel_mcs51\nboard = STC8F2K64S4\n\n; change microcontroller\nboard_build.mcu = stc8f2k64s4\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Advanced AVR64DB28 Configuration with MCU and Frequency Settings\nDESCRIPTION: Extended configuration example showing how to override default board settings like microcontroller model and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/AVR64DB28.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:AVR64DB28]\nplatform = atmelmegaavr\nboard = AVR64DB28\n\n; change microcontroller\nboard_build.mcu = avr64db28\n\n; change MCU frequency\nboard_build.f_cpu = 24000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with Custom Settings\nDESCRIPTION: Extended configuration example showing how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/lolin_d32_pro.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:lolin_d32_pro]\nplatform = espressif32\nboard = lolin_d32_pro\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing ATmega324P Board Settings in PlatformIO INI File\nDESCRIPTION: This snippet demonstrates how to override default ATmega324P settings in the PlatformIO project configuration file. It shows examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega324P.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega324P]\nplatform = atmelavr\nboard = ATmega324P\n\n; change microcontroller\nboard_build.mcu = atmega324p\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring AVR128DB28 Board in PlatformIO\nDESCRIPTION: This snippet shows how to configure the AVR128DB28 board in a PlatformIO project's configuration file. It sets the platform and board, and demonstrates how to override default settings like microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/AVR128DB28.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:AVR128DB28]\nplatform = atmelmegaavr\nboard = AVR128DB28\n\n; change microcontroller\nboard_build.mcu = avr128db28\n\n; change MCU frequency\nboard_build.f_cpu = 24000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Freescale Kinetis FRDM-K66F in platformio.ini\nDESCRIPTION: Basic configuration for the FRDM-K66F board in the platformio.ini file. This sets up the development environment with the correct platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/freescalekinetis/frdm_k66f.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:frdm_k66f]\nplatform = freescalekinetis\nboard = frdm_k66f\n```\n\n----------------------------------------\n\nTITLE: STM32F410RB Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to set the upload protocol for the STM32F410RB board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F410RB.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F410RB]\nplatform = ststm32\nboard = genericSTM32F410RB\n\nupload_protocol = serial\n```\n\n----------------------------------------\n\nTITLE: Arduino Tian Advanced Configuration with MCU Settings\nDESCRIPTION: Extended configuration for Arduino Tian showing how to override default microcontroller and frequency settings using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/tian.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:tian]\nplatform = atmelsam\nboard = tian\n\n; change microcontroller\nboard_build.mcu = samd21g18a\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Connaxio Espoir Hardware Settings in PlatformIO\nDESCRIPTION: Advanced configuration that demonstrates how to override default board settings such as microcontroller type and CPU frequency for the Connaxio Espoir board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/connaxio_espoir.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:connaxio_espoir]\nplatform = espressif32\nboard = connaxio_espoir\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for emonPi\nDESCRIPTION: Basic configuration setup for the emonPi board in platformio.ini file, specifying the platform and board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/emonpi.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:emonpi]\nplatform = atmelavr\nboard = emonpi\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO Environment for ST Nucleo F207ZG\nDESCRIPTION: Basic PlatformIO configuration for the ST Nucleo F207ZG board using the ststm32 platform. This snippet defines the minimal environment setup needed in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f207zg.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f207zg]\nplatform = ststm32\nboard = nucleo_f207zg\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for UBW32 MX795 Board\nDESCRIPTION: This code snippet shows how to configure a PlatformIO project for the UBW32 MX795 board using the microchippic32 platform. It demonstrates setting the board ID in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/microchippic32/ubw32_mx795.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ubw32_mx795]\nplatform = microchippic32\nboard = ubw32_mx795\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Protocol for Adafruit ItsyBitsy M4\nDESCRIPTION: Shows how to set a specific upload protocol for the Adafruit ItsyBitsy M4 board. In this example, sam-ba is explicitly set as the upload protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_itsybitsy_m4.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_itsybitsy_m4]\nplatform = atmelsam\nboard = adafruit_itsybitsy_m4\n\nupload_protocol = sam-ba\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Electrosmith Daisy in PlatformIO\nDESCRIPTION: Configuration that demonstrates how to specify the upload protocol for the Electrosmith Daisy board. The example uses the ST-Link protocol, though the board supports multiple upload methods.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/electrosmith_daisy.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:electrosmith_daisy]\nplatform = ststm32\nboard = electrosmith_daisy\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Configuring STM32F103ZC Board in platformio.ini\nDESCRIPTION: Basic configuration for using the STM32F103ZC board in a PlatformIO project. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103ZC.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103ZC]\nplatform = ststm32\nboard = genericSTM32F103ZC\n```\n\n----------------------------------------\n\nTITLE: Customizing ST Nucleo F446RE Board Settings in PlatformIO\nDESCRIPTION: Example of how to override default board settings in PlatformIO configuration, specifically changing the microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f446re.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f446re]\nplatform = ststm32\nboard = nucleo_f446re\n\n; change microcontroller\nboard_build.mcu = stm32f446ret6\n\n; change MCU frequency\nboard_build.f_cpu = 180000000L\n```\n\n----------------------------------------\n\nTITLE: Overriding Default ATtiny1634 Settings in PlatformIO INI File\nDESCRIPTION: This snippet demonstrates how to override default settings for the Generic ATtiny1634 board in the PlatformIO project configuration file. It shows examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/attiny1634.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:attiny1634]\nplatform = atmelavr\nboard = attiny1634\n\n; change microcontroller\nboard_build.mcu = attiny1634\n\n; change MCU frequency\nboard_build.f_cpu = 8000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic D-duino-32 Board Settings\nDESCRIPTION: Basic PlatformIO configuration for D-duino-32 board specifying the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/d-duino-32.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:d-duino-32]\nplatform = espressif32\nboard = d-duino-32\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for IAP15F106 with Custom MCU Settings\nDESCRIPTION: Advanced configuration for the IAP15F106 board, overriding default settings such as microcontroller type and CPU frequency. This demonstrates how to customize board-specific parameters in a PlatformIO project.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/IAP15F106.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:IAP15F106]\nplatform = intel_mcs51\nboard = IAP15F106\n\n; change microcontroller\nboard_build.mcu = iap15f106\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Configuring ST Nucleo F746ZG Board in PlatformIO\nDESCRIPTION: Basic configuration for setting up the ST Nucleo F746ZG board in the PlatformIO project configuration file (platformio.ini). This snippet specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f746zg.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f746zg]\nplatform = ststm32\nboard = nucleo_f746zg\n```\n\n----------------------------------------\n\nTITLE: Basic AVR128DA28 Board Configuration in PlatformIO\nDESCRIPTION: Basic configuration setup for using the AVR128DA28 board in PlatformIO projects. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/AVR128DA28.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:AVR128DA28]\nplatform = atmelmegaavr\nboard = AVR128DA28\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic STC8F1K08S2 Environment in PlatformIO\nDESCRIPTION: Basic configuration for setting up the STC8F1K08S2 board in the PlatformIO environment file. Specifies the platform and board type.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8F1K08S2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8F1K08S2]\nplatform = intel_mcs51\nboard = STC8F1K08S2\n```\n\n----------------------------------------\n\nTITLE: Customizing SODAQ Autonomo Board Settings\nDESCRIPTION: Example of overriding default board settings for SODAQ Autonomo, such as changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/sodaq_autonomo.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:sodaq_autonomo]\nplatform = atmelsam\nboard = sodaq_autonomo\n\n; change microcontroller\nboard_build.mcu = samd21j18a\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for ST Nucleo H745ZI-Q\nDESCRIPTION: Minimal configuration required to use the ST Nucleo H745ZI-Q board in a PlatformIO project.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_h745zi_q.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_h745zi_q]\nplatform = ststm32\nboard = nucleo_h745zi_q\n```\n\n----------------------------------------\n\nTITLE: Configuring Arty FPGA Dev Kit in PlatformIO\nDESCRIPTION: Basic configuration for the Arty FPGA Dev Kit board in the project's platformio.ini file. It specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/sifive/e310-arty.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:e310-arty]\nplatform = sifive\nboard = e310-arty\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Electrosmith Daisy Environment in PlatformIO\nDESCRIPTION: Basic configuration for an Electrosmith Daisy project in PlatformIO. Specifies the STM32 platform and the Electrosmith Daisy board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/electrosmith_daisy.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:electrosmith_daisy]\nplatform = ststm32\nboard = electrosmith_daisy\n```\n\n----------------------------------------\n\nTITLE: Advanced ATmega1280 Configuration with Custom Settings\nDESCRIPTION: Extended configuration example showing how to override default microcontroller and frequency settings for the ATmega1280 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega1280.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega1280]\nplatform = atmelavr\nboard = ATmega1280\n\n; change microcontroller\nboard_build.mcu = atmega1280\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Arduino MKR WAN 1310 Board in PlatformIO\nDESCRIPTION: Basic configuration for using the Arduino MKR WAN 1310 board in a PlatformIO project. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/mkrwan1310.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:mkrwan1310]\nplatform = atmelsam\nboard = mkrwan1310\n```\n\n----------------------------------------\n\nTITLE: Customizing ST 32F3348DISCOVERY Board Settings\nDESCRIPTION: Example of overriding default board settings in platformio.ini. Demonstrates changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_f334c8.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_f334c8]\nplatform = ststm32\nboard = disco_f334c8\n\n; change microcontroller\nboard_build.mcu = stm32f334c8t6\n\n; change MCU frequency\nboard_build.f_cpu = 72000000L\n```\n\n----------------------------------------\n\nTITLE: Overriding Default LightUp Board Settings in PlatformIO\nDESCRIPTION: Advanced configuration showing how to override default board settings such as microcontroller type and clock frequency in a PlatformIO project. This allows customization of hardware parameters.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/lightup.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:lightup]\nplatform = atmelavr\nboard = lightup\n\n; change microcontroller\nboard_build.mcu = atmega32u4\n\n; change MCU frequency\nboard_build.f_cpu = 8000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for RedBearLab nRF51822\nDESCRIPTION: Configuration to specify the upload protocol for the RedBearLab nRF51822 board. This example sets it to cmsis-dap.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf51/redBearLab.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:redBearLab]\nplatform = nordicnrf51\nboard = redBearLab\n\nupload_protocol = cmsis-dap\n```\n\n----------------------------------------\n\nTITLE: Advanced ML56SD1AE Configuration with Custom Settings\nDESCRIPTION: Extended PlatformIO configuration demonstrating how to override default board settings such as microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/ML56SD1AE.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ML56SD1AE]\nplatform = intel_mcs51\nboard = ML56SD1AE\n\n; change microcontroller\nboard_build.mcu = ml56sd1ae\n\n; change MCU frequency\nboard_build.f_cpu = 24000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for BlackPill F103C8 in PlatformIO.ini\nDESCRIPTION: Configuration example showing how to specify an upload protocol for the BlackPill F103C8 board. The example uses ST-Link as the upload protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/blackpill_f103c8.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:blackpill_f103c8]\nplatform = ststm32\nboard = blackpill_f103c8\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Configuring WifInfo Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to set up a PlatformIO environment for the WifInfo board using the ESP8266 platform. It includes the basic configuration and examples of how to override default board settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/wifinfo.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:wifinfo]\nplatform = espressif8266\nboard = wifinfo\n\n; change microcontroller\nboard_build.mcu = esp8266\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Generic STC8F1K17 Board Settings in PlatformIO\nDESCRIPTION: This example illustrates how to override default settings for the Generic STC8F1K17 board in a PlatformIO project. It shows how to change the microcontroller and MCU frequency using board-specific options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8F1K17.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8F1K17]\nplatform = intel_mcs51\nboard = STC8F1K17\n\n; change microcontroller\nboard_build.mcu = stc8f1k17\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Basic ATmega6450 Board Configuration in PlatformIO\nDESCRIPTION: Basic configuration settings for the ATmega6450 board in a PlatformIO project's configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega6450.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega6450]\nplatform = atmelavr\nboard = ATmega6450\n```\n\n----------------------------------------\n\nTITLE: OpenRTK330L Upload Protocol Configuration\nDESCRIPTION: PlatformIO configuration demonstrating how to set the upload protocol for the OpenRTK330L board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/aceinna_imu/OpenRTK330L.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:OpenRTK330L]\nplatform = aceinna_imu\nboard = OpenRTK330L\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: BBC micro:bit Upload Protocol Configuration\nDESCRIPTION: PlatformIO configuration demonstrating how to specify the upload protocol for the BBC micro:bit board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf51/bbcmicrobit.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:bbcmicrobit]\nplatform = nordicnrf51\nboard = bbcmicrobit\n\nupload_protocol = cmsis-dap\n```\n\n----------------------------------------\n\nTITLE: Configuring SODAQ ExpLoRer Board in platformio.ini\nDESCRIPTION: This snippet shows how to configure the SODAQ ExpLoRer board in the platformio.ini file. It sets the platform to atmelsam and the board to sodaq_explorer.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/sodaq_explorer.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:sodaq_explorer]\nplatform = atmelsam\nboard = sodaq_explorer\n```\n\n----------------------------------------\n\nTITLE: Configuring Nordic Thingy:52 Board in PlatformIO\nDESCRIPTION: Basic PlatformIO configuration for Nordic Thingy:52 board using the nordicnrf52 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/thingy_52.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:thingy_52]\nplatform = nordicnrf52\nboard = thingy_52\n```\n\n----------------------------------------\n\nTITLE: Configuring Stable Version of Freescale Kinetis Platform in INI\nDESCRIPTION: Example platformio.ini configuration for using the latest stable version or a specific version of the Freescale Kinetis platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/freescalekinetis.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n; Latest stable version, NOT recommended\n; Pin the version as shown below\n[env:latest_stable]\nplatform = freescalekinetis\nboard = ...\n\n; Specific version\n[env:custom_stable]\nplatform = freescalekinetis@x.y.z\nboard = ...\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Heltec CubeCell-Board Settings in PlatformIO INI File\nDESCRIPTION: This snippet demonstrates how to override default settings for the Heltec CubeCell-Board (HTCC-AB01) in the PlatformIO project configuration file. It shows how to change the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/heltec-cubecell/cubecell_board.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:cubecell_board]\nplatform = heltec-cubecell\nboard = cubecell_board\n\n; change microcontroller\nboard_build.mcu = asr6501\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring SparkFun Qduino Mini Board in PlatformIO\nDESCRIPTION: This code snippet shows how to configure the SparkFun Qduino Mini board in a PlatformIO project's configuration file. It sets the platform to atmelavr and specifies the board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/sparkfun_qduinomini.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:sparkfun_qduinomini]\nplatform = atmelavr\nboard = sparkfun_qduinomini\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration with Custom MCU Settings\nDESCRIPTION: Extended configuration for Adafruit Gemma M0 with customized microcontroller settings. This example demonstrates how to override the default MCU and frequency settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_gemma_m0.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_gemma_m0]\nplatform = atmelsam\nboard = adafruit_gemma_m0\n\n; change microcontroller\nboard_build.mcu = samd21e18a\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for ST 32L0538DISCOVERY in PlatformIO\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the ST 32L0538DISCOVERY board in platformio.ini.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_l053c8.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_l053c8]\nplatform = ststm32\nboard = disco_l053c8\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Customizing Heltec WiFi Kit 32 Board Parameters in PlatformIO\nDESCRIPTION: Example of how to override default board settings such as microcontroller and CPU frequency in the PlatformIO configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/heltec_wifi_kit_32.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:heltec_wifi_kit_32]\nplatform = espressif32\nboard = heltec_wifi_kit_32\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for STM32F423RH\nDESCRIPTION: Configuration to set the upload protocol for the STM32F423RH board. The example uses the serial protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F423RH.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F423RH]\nplatform = ststm32\nboard = genericSTM32F423RH\n\nupload_protocol = serial\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Atmel SAMD21-XPRO\nDESCRIPTION: Basic PlatformIO configuration for the Atmel SAMD21-XPRO board. Specifies the platform and board ID to use.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/samd21_xpro.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:samd21_xpro]\nplatform = atmelsam\nboard = samd21_xpro\n```\n\n----------------------------------------\n\nTITLE: Configuring ATtiny1616 Board in PlatformIO\nDESCRIPTION: Basic configuration for the ATtiny1616 board in the platformio.ini file. This sets up the atmelmegaavr platform with the ATtiny1616 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/ATtiny1616.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATtiny1616]\nplatform = atmelmegaavr\nboard = ATtiny1616\n```\n\n----------------------------------------\n\nTITLE: Customizing Deneyap Mini Board Settings\nDESCRIPTION: Example of overriding default board settings in the platformio.ini file. It demonstrates changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/deneyapmini.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:deneyapmini]\nplatform = espressif32\nboard = deneyapmini\n\n; change microcontroller\nboard_build.mcu = esp32s2\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration with Custom Settings\nDESCRIPTION: Extended PlatformIO configuration showing how to override default board settings like microcontroller model and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/timsp430/lpmsp430fr5994.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:lpmsp430fr5994]\nplatform = timsp430\nboard = lpmsp430fr5994\n\n; change microcontroller\nboard_build.mcu = msp430fr5994\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic SODAQ ONE Board Settings in PlatformIO\nDESCRIPTION: Basic configuration example for SODAQ ONE board in platformio.ini project file. Sets up the core board and platform parameters.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/sodaq_one.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:sodaq_one]\nplatform = atmelsam\nboard = sodaq_one\n```\n\n----------------------------------------\n\nTITLE: Configuring Arduino Mini ATmega168 in PlatformIO\nDESCRIPTION: This snippet shows how to configure the Arduino Mini ATmega168 board in the PlatformIO project configuration file (platformio.ini). It sets the platform to atmelavr and specifies the board as miniatmega168.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/miniatmega168.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:miniatmega168]\nplatform = atmelavr\nboard = miniatmega168\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for ST Nucleo H753ZI\nDESCRIPTION: PlatformIO configuration that specifies the upload protocol for the ST Nucleo H753ZI board. This example sets ST-Link as the upload protocol, which is also the default for this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_h753zi.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_h753zi]\nplatform = ststm32\nboard = nucleo_h753zi\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Sonoff SV in PlatformIO\nDESCRIPTION: Configuration for specifying the upload protocol for Sonoff SV in platformio.ini. This example explicitly sets the upload protocol to esptool, which is also the default option.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/sonoff_sv.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:sonoff_sv]\nplatform = espressif8266\nboard = sonoff_sv\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Customizing RYMCU ESP32-C3-DevKitM-1 Board Settings\nDESCRIPTION: Example of overriding default board settings in PlatformIO. Demonstrates how to change the microcontroller and CPU frequency for the RYMCU ESP32-C3-DevKitM-1 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/rymcu-esp32-c3-devkitm-1.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:rymcu-esp32-c3-devkitm-1]\nplatform = espressif32\nboard = rymcu-esp32-c3-devkitm-1\n\n; change microcontroller\nboard_build.mcu = esp32c3\n\n; change MCU frequency\nboard_build.f_cpu = 160000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU Settings\nDESCRIPTION: Extended configuration example showing how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm8/mb208.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:mb208]\nplatform = ststm8\nboard = mb208\n\n; change microcontroller\nboard_build.mcu = stm8s208mbt6\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring TI LaunchPad MSP-EXP430FR4133LP in platformio.ini\nDESCRIPTION: This snippet shows how to configure the TI LaunchPad MSP-EXP430FR4133LP board in the platformio.ini file. It sets the platform to timsp430 and the board to lpmsp430fr4133.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/timsp430/lpmsp430fr4133.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:lpmsp430fr4133]\nplatform = timsp430\nboard = lpmsp430fr4133\n```\n\n----------------------------------------\n\nTITLE: Configuring Board Listings in reStructuredText\nDESCRIPTION: This snippet demonstrates how to structure board listings using reStructuredText toctree directives. It organizes boards by manufacturer/family and provides relative paths to individual board configuration files.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/index.rst#2025-04-10_snippet_4\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n        \n    nordicnrf51/bbcmicrobit\n    nordicnrf51/bluz_dk\n    nordicnrf51/calliope_mini\n    nordicnrf51/nrf51_beacon\n    nordicnrf51/nrf51_dongle\n    nordicnrf51/nrf51_dk\n    nordicnrf51/oshchip\n    nordicnrf51/redBearLabBLENano\n    nordicnrf51/redBearLab\n    nordicnrf51/seeedTinyBLE\n    nordicnrf51/Sinobit\n    nordicnrf51/vbluno51\n    nordicnrf51/waveshare_ble400\n    nordicnrf51/ng_beacon\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for STM32F0DISCOVERY\nDESCRIPTION: Minimal configuration required to set up a PlatformIO project for the STM32F0DISCOVERY board using the ststm32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_f051r8.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_f051r8]\nplatform = ststm32\nboard = disco_f051r8\n```\n\n----------------------------------------\n\nTITLE: Configuring ATmega324P Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the ATmega324P board in the PlatformIO project configuration file. It sets the platform to atmelavr and specifies the board as ATmega324P.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega324P.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega324P]\nplatform = atmelavr\nboard = ATmega324P\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Adafruit pyBadge AirLift M4\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the Adafruit pyBadge AirLift M4. This board supports atmel-ice, jlink, and sam-ba protocols, with sam-ba as the default.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_pybadge_airlift_m4.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_pybadge_airlift_m4]\nplatform = atmelsam\nboard = adafruit_pybadge_airlift_m4\n\nupload_protocol = sam-ba\n```\n\n----------------------------------------\n\nTITLE: Configuring ATmega1281 Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the ATmega1281 board in the PlatformIO project configuration file. It sets the platform and board, and demonstrates how to override default settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega1281.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega1281]\nplatform = atmelavr\nboard = ATmega1281\n\n; change microcontroller\nboard_build.mcu = atmega1281\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Adafruit pIRkey\nDESCRIPTION: Configuration to change the upload protocol for the Adafruit pIRkey board. In this example, it's set to sam-ba.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_pirkey.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_pirkey]\nplatform = atmelsam\nboard = adafruit_pirkey\n\nupload_protocol = sam-ba\n```\n\n----------------------------------------\n\nTITLE: Overriding Default STC15W1K20S Board Settings in PlatformIO\nDESCRIPTION: This snippet demonstrates how to override default settings for the Generic STC15W1K20S board in the PlatformIO configuration. It shows examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15W1K20S.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15W1K20S]\nplatform = intel_mcs51\nboard = STC15W1K20S\n\n; change microcontroller\nboard_build.mcu = stc15w1k20s\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic STM32-E407 Environment in PlatformIO\nDESCRIPTION: Basic configuration for a PlatformIO project targeting the STM32-E407 board. This snippet defines the platform and board identifiers needed for project initialization.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/olimex_e407.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:olimex_e407]\nplatform = ststm32\nboard = olimex_e407\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for ESP8266 ESP-01 1M in platformio.ini\nDESCRIPTION: Configuration demonstrating how to specify the upload protocol for an ESP8266 ESP-01 1M board. This example explicitly sets the upload protocol to esptool.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/esp01_1m.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp01_1m]\nplatform = espressif8266\nboard = esp01_1m\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for Generic ATtiny167 Board\nDESCRIPTION: Basic configuration in platformio.ini file to set up a project for the Generic ATtiny167 board. This defines the platform as atmelavr and the board as attiny167.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/attiny167.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:attiny167]\nplatform = atmelavr\nboard = attiny167\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO Environment for Generic N79E843\nDESCRIPTION: This snippet shows how to set up a PlatformIO environment for the Generic N79E843 board in the project configuration file. It specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/N79E843.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:N79E843]\nplatform = intel_mcs51\nboard = N79E843\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Atmel SAMD21-XPRO\nDESCRIPTION: Demonstrates how to specify the upload protocol in PlatformIO configuration. Uses CMSIS-DAP as the upload protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/samd21_xpro.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:samd21_xpro]\nplatform = atmelsam\nboard = samd21_xpro\n\nupload_protocol = cmsis-dap\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the WEMOS LOLIN S3 Mini board\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/lolin_s3_mini.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:lolin_s3_mini]\nplatform = espressif32\nboard = lolin_s3_mini\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Basic AVR64DA64 Board Configuration in PlatformIO\nDESCRIPTION: Minimal configuration needed to set up an AVR64DA64 board project in platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/AVR64DA64.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:AVR64DA64]\nplatform = atmelmegaavr\nboard = AVR64DA64\n```\n\n----------------------------------------\n\nTITLE: Configuring Teensy 4.0 Basic Environment in platformio.ini\nDESCRIPTION: Basic configuration for setting up a Teensy 4.0 board environment in platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/teensy/teensy40.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:teensy40]\nplatform = teensy\nboard = teensy40\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic PlatformIO Environment for HelvePic32 SMD MX270\nDESCRIPTION: Basic configuration for setting up a PlatformIO environment for the HelvePic32 SMD MX270 board. This configuration specifies the platform (microchippic32) and board identifier.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/microchippic32/helvepic32_smd_mx270.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:helvepic32_smd_mx270]\nplatform = microchippic32\nboard = helvepic32_smd_mx270\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for M5Stack Core ESP32\nDESCRIPTION: Configuration example demonstrating how to specify the upload protocol for the M5Stack Core ESP32 board. The board supports both espota and esptool protocols.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/m5stack-core-esp32.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:m5stack-core-esp32]\nplatform = espressif32\nboard = m5stack-core-esp32\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Example of configuring the upload protocol for the board using esptool as the specified protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/iotbusio.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:iotbusio]\nplatform = espressif32\nboard = iotbusio\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Seeed Arch Pro\nDESCRIPTION: This snippet shows how to set the upload protocol for the Seeed Arch Pro board. It uses the 'mbed' protocol, which is the default for this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nxplpc/seeedArchPro.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:seeedArchPro]\nplatform = nxplpc\nboard = seeedArchPro\n\nupload_protocol = mbed\n```\n\n----------------------------------------\n\nTITLE: Configuring Arduino Pro Mini ATmega168 in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the Arduino Pro or Pro Mini ATmega168 (5V, 16 MHz) board in the PlatformIO project configuration file. It sets the platform to atmelavr and specifies the board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/pro16MHzatmega168.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:pro16MHzatmega168]\nplatform = atmelavr\nboard = pro16MHzatmega168\n```\n\n----------------------------------------\n\nTITLE: Configuring RedBearLab nRF51822 Board in platformio.ini\nDESCRIPTION: Basic configuration for the RedBearLab nRF51822 board in the project's platformio.ini file. It sets the platform and board name.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf51/redBearLab.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:redBearLab]\nplatform = nordicnrf51\nboard = redBearLab\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration for ATmega640\nDESCRIPTION: Extended configuration for ATmega640 showing how to override default board settings including microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega640.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega640]\nplatform = atmelavr\nboard = ATmega640\n\n; change microcontroller\nboard_build.mcu = atmega640\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing LPCXpresso11U68 Board Settings\nDESCRIPTION: Example of overriding default board settings in platformio.ini, such as changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nxplpc/lpc11u68.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:lpc11u68]\nplatform = nxplpc\nboard = lpc11u68\n\n; change microcontroller\nboard_build.mcu = lpc11u68\n\n; change MCU frequency\nboard_build.f_cpu = 50000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for ST B-G431B-ESC1 Discovery Board\nDESCRIPTION: Basic PlatformIO configuration for the ST B-G431B-ESC1 Discovery board. This snippet defines the board ID and platform settings required for development.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_b_g431b_esc1.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_b_g431b_esc1]\nplatform = ststm32\nboard = disco_b_g431b_esc1\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration for Deneyap Kart G\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/deneyapkartg.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:deneyapkartg]\nplatform = espressif32\nboard = deneyapkartg\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration with Custom Options for STC8G2K60S2\nDESCRIPTION: Extended configuration showing how to override default settings for the STC8G2K60S2 board in PlatformIO, including how to change the microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8G2K60S2.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8G2K60S2]\nplatform = intel_mcs51\nboard = STC8G2K60S2\n\n; change microcontroller\nboard_build.mcu = stc8g2k60s2\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the Demo F030F4 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/demo_f030f4.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:demo_f030f4]\nplatform = ststm32\nboard = demo_f030f4\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Configuring SODAQ SFF Board in platformio.ini\nDESCRIPTION: Basic configuration for the SODAQ SFF board in the PlatformIO project configuration file. It specifies the platform and board to use.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/sodaq_sff.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:sodaq_sff]\nplatform = atmelsam\nboard = sodaq_sff\n```\n\n----------------------------------------\n\nTITLE: ThunderPack Upload Protocol Configuration\nDESCRIPTION: PlatformIO configuration demonstrating how to set the upload protocol for the ThunderPack board\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/thunder_pack_f411.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:thunder_pack_f411]\nplatform = ststm32\nboard = thunder_pack_f411\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Seeeduino Femto M0\nDESCRIPTION: Configuration to change the upload protocol for the Seeeduino Femto M0 board. This example sets the protocol to sam-ba.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/seeed_femto.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:seeed_femto]\nplatform = atmelsam\nboard = seeed_femto\n\nupload_protocol = sam-ba\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for ElectronutLabs Papyr\nDESCRIPTION: Basic configuration setup for using ElectronutLabs Papyr board with PlatformIO. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/electronut_papyr.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:electronut_papyr]\nplatform = nordicnrf52\nboard = electronut_papyr\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for STC8C2K32S2\nDESCRIPTION: Basic configuration setup for STC8C2K32S2 board in platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8C2K32S2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8C2K32S2]\nplatform = intel_mcs51\nboard = STC8C2K32S2\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU Settings\nDESCRIPTION: Extended configuration showing how to override default board settings including microcontroller type and CPU frequency specifications.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/agruminolemon.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:agruminolemon]\nplatform = espressif8266\nboard = agruminolemon\n\n; change microcontroller\nboard_build.mcu = esp8266\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring ATmega168PB Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the ATmega168PB board in the PlatformIO project configuration file. It sets the platform and board options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega168PB.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega168PB]\nplatform = atmelavr\nboard = ATmega168PB\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic STC8G2K64S4 Board in PlatformIO\nDESCRIPTION: This snippet shows how to configure the Generic STC8G2K64S4 board in the PlatformIO project configuration file (platformio.ini). It sets the platform to intel_mcs51 and specifies the board as STC8G2K64S4.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8G2K64S4.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8G2K64S4]\nplatform = intel_mcs51\nboard = STC8G2K64S4\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for ST Nucleo L053R8 in PlatformIO\nDESCRIPTION: INI configuration demonstrating how to specify the upload protocol (STLink in this example) for a ST Nucleo L053R8 board in a PlatformIO project.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_l053r8.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_l053r8]\nplatform = ststm32\nboard = nucleo_l053r8\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic HiFive1 Rev B Environment in PlatformIO\nDESCRIPTION: Basic configuration for setting up a PlatformIO project with the HiFive1 Rev B board. This configuration specifies the SiFive platform and the board model.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/sifive/hifive1-revb.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:hifive1-revb]\nplatform = sifive\nboard = hifive1-revb\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for ST B-U585I-IOT02A Discovery\nDESCRIPTION: This snippet shows how to set the upload protocol for the ST B-U585I-IOT02A Discovery board in PlatformIO. The default protocol is 'stlink'.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_b_u585i_iot02a.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_b_u585i_iot02a]\nplatform = ststm32\nboard = disco_b_u585i_iot02a\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Customizing ML51TC0AE Board Settings in PlatformIO\nDESCRIPTION: Advanced configuration for the Generic ML51TC0AE board in PlatformIO with custom microcontroller and clock frequency settings. Shows how to override default board settings using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/ML51TC0AE.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ML51TC0AE]\nplatform = intel_mcs51\nboard = ML51TC0AE\n\n; change microcontroller\nboard_build.mcu = ml51tc0ae\n\n; change MCU frequency\nboard_build.f_cpu = 24000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced Digispark Pro Board Configuration with Custom Settings\nDESCRIPTION: Extended configuration for Digispark Pro board with custom microcontroller and frequency settings. Demonstrates how to override default board settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/digispark-pro32.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:digispark-pro32]\nplatform = atmelavr\nboard = digispark-pro32\n\n; change microcontroller\nboard_build.mcu = attiny167\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for SparkFun SAMD21 Mini Breakout\nDESCRIPTION: Configuration to change the upload protocol for the SparkFun SAMD21 Mini Breakout board. In this example, it's set to sam-ba.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/sparkfun_samd21_mini_usb.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:sparkfun_samd21_mini_usb]\nplatform = atmelsam\nboard = sparkfun_samd21_mini_usb\n\nupload_protocol = sam-ba\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for STM32F072-EVAL\nDESCRIPTION: Configuration snippet showing how to specify the upload protocol for the STM32F072-EVAL board. This example sets the upload protocol to stlink, which is also the default protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/eval_f072vb.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:eval_f072vb]\nplatform = ststm32\nboard = eval_f072vb\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Configuring Teensy 3.1 Board in PlatformIO\nDESCRIPTION: Basic PlatformIO configuration for Teensy 3.1 / 3.2 board. This defines the minimum required settings in the project's configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/teensy/teensy31.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:teensy31]\nplatform = teensy\nboard = teensy31\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for NXP i.MX RT1060 Evaluation Kit\nDESCRIPTION: Configuration to specify the upload protocol for the NXP i.MX RT1060 Evaluation Kit. This example sets it to 'mbed', which is the default protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nxpimxrt/mimxrt1060_evk.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:mimxrt1060_evk]\nplatform = nxpimxrt\nboard = mimxrt1060_evk\n\nupload_protocol = mbed\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU and Frequency Settings\nDESCRIPTION: Extended PlatformIO configuration showing how to override default microcontroller and frequency settings for the ST NUCLEO-G031K8 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_g031k8.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_g031k8]\nplatform = ststm32\nboard = nucleo_g031k8\n\n; change microcontroller\nboard_build.mcu = stm32g031k8\n\n; change MCU frequency\nboard_build.f_cpu = 64000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Aceinna OpenIMU 330 Board Settings\nDESCRIPTION: Example of overriding default board settings in PlatformIO configuration. It demonstrates changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/aceinna_imu/OpenIMU330.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:OpenIMU330]\nplatform = aceinna_imu\nboard = OpenIMU330\n\n; change microcontroller\nboard_build.mcu = stm32l431cb\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Microduino Core+ Board Settings in PlatformIO\nDESCRIPTION: Example showing how to override default board settings like microcontroller type and CPU frequency in the PlatformIO configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/644pa8m.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:644pa8m]\nplatform = atmelavr\nboard = 644pa8m\n\n; change microcontroller\nboard_build.mcu = atmega644p\n\n; change MCU frequency\nboard_build.f_cpu = 8000000L\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration in PlatformIO\nDESCRIPTION: Demonstrates the basic configuration for using Nordic Beacon Kit (PCA20006) board in PlatformIO projects.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf51/nrf51_beacon.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nrf51_beacon]\nplatform = nordicnrf51\nboard = nrf51_beacon\n```\n\n----------------------------------------\n\nTITLE: Configuring Adafruit QT Py ESP32-S2 in PlatformIO\nDESCRIPTION: Basic PlatformIO configuration for the Adafruit QT Py ESP32-S2 board in the project's platformio.ini file. It specifies the platform and board to use.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/adafruit_qtpy_esp32s2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_qtpy_esp32s2]\nplatform = espressif32\nboard = adafruit_qtpy_esp32s2\n```\n\n----------------------------------------\n\nTITLE: Overriding Default NAMote72 Settings in PlatformIO\nDESCRIPTION: Examples of how to override default board settings such as microcontroller type and CPU frequency in the PlatformIO project configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/mote_l152rc.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:mote_l152rc]\nplatform = ststm32\nboard = mote_l152rc\n\n; change microcontroller\nboard_build.mcu = stm32l152rc\n\n; change MCU frequency\nboard_build.f_cpu = 32000000L\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration for STM32\nDESCRIPTION: Basic PlatformIO configuration for the Electrosmith Daisy Petal SM board using the STM32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/electrosmith_daisy_petal_sm.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:electrosmith_daisy_petal_sm]\nplatform = ststm32\nboard = electrosmith_daisy_petal_sm\n```\n\n----------------------------------------\n\nTITLE: Configuring SparkFun ESP32 Thing Board in platformio.ini\nDESCRIPTION: This snippet shows how to configure the SparkFun ESP32 Thing board in the platformio.ini file. It includes the basic configuration and examples of overriding default settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32thing.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32thing]\nplatform = espressif32\nboard = esp32thing\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic STC8F1K08S2A10 Board in PlatformIO\nDESCRIPTION: This snippet shows how to configure the Generic STC8F1K08S2A10 board in a PlatformIO project's configuration file. It sets the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8F1K08S2A10.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8F1K08S2A10]\nplatform = intel_mcs51\nboard = STC8F1K08S2A10\n```\n\n----------------------------------------\n\nTITLE: Customizing FRDM-K22F Board Parameters in PlatformIO\nDESCRIPTION: Advanced configuration for overriding default board settings such as microcontroller type and CPU frequency. This example shows how to change the MCU to mk22fn512vlh12 and set the CPU frequency to 120MHz.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/freescalekinetis/frdm_k22f.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:frdm_k22f]\nplatform = freescalekinetis\nboard = frdm_k22f\n\n; change microcontroller\nboard_build.mcu = mk22fn512vlh12\n\n; change MCU frequency\nboard_build.f_cpu = 120000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Flora Board Settings in PlatformIO\nDESCRIPTION: Basic configuration for setting up an Adafruit Flora board project in PlatformIO using the atmelavr platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/flora8.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:flora8]\nplatform = atmelavr\nboard = flora8\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for u-blox C030-R410M IoT Board\nDESCRIPTION: Basic PlatformIO configuration for the u-blox C030-R410M IoT board. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/ublox_c030_r410m.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ublox_c030_r410m]\nplatform = ststm32\nboard = ublox_c030_r410m\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for M5Stack Core ESP32 16M\nDESCRIPTION: This snippet shows how to specify the upload protocol for the M5Stack Core ESP32 16M board in the PlatformIO configuration. It sets the protocol to 'esptool'.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/m5stack-core-esp32-16M.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:m5stack-core-esp32-16M]\nplatform = espressif32\nboard = m5stack-core-esp32-16M\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Customizing WeMos D1 mini Lite Board Settings\nDESCRIPTION: This snippet demonstrates how to override default board settings in the PlatformIO configuration. It shows examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/d1_mini_lite.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:d1_mini_lite]\nplatform = espressif8266\nboard = d1_mini_lite\n\n; change microcontroller\nboard_build.mcu = esp8266\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing M5Stack Core ESP32 Properties\nDESCRIPTION: Example showing how to override default board settings like microcontroller type and CPU frequency in the platformio.ini configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/m5stack-core-esp32.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:m5stack-core-esp32]\nplatform = espressif32\nboard = m5stack-core-esp32\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration for ATmega168P\nDESCRIPTION: Extended configuration settings for ATmega168P board with custom microcontroller and frequency specifications.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega168P.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega168P]\nplatform = atmelavr\nboard = ATmega168P\n\n; change microcontroller\nboard_build.mcu = atmega168p\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO Environment for Blinker WiFiduinoV2 (ESP32-C3)\nDESCRIPTION: Basic configuration for the Blinker WiFiduinoV2 ESP32-C3 board in platformio.ini. This defines the platform and board settings required to build and upload firmware.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/wifiduino32c3.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:wifiduino32c3]\nplatform = espressif32\nboard = wifiduino32c3\n```\n\n----------------------------------------\n\nTITLE: Customizing ATmega64 Board Settings in PlatformIO\nDESCRIPTION: Extended PlatformIO configuration showing how to override default microcontroller and frequency settings for the ATmega64 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega64.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega64]\nplatform = atmelavr\nboard = ATmega64\n\n; change microcontroller\nboard_build.mcu = atmega64\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration with MCU Settings\nDESCRIPTION: Configuration with custom microcontroller and frequency settings for ST Nucleo L433RC-P board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_l433rc_p.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_l433rc_p]\nplatform = ststm32\nboard = nucleo_l433rc_p\n\n; change microcontroller\nboard_build.mcu = stm32l433rc\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Basic ATmega169P Board Configuration in PlatformIO\nDESCRIPTION: Basic configuration setup for ATmega169P board in platformio.ini project file. Specifies the platform and board type.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega169P.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega169P]\nplatform = atmelavr\nboard = ATmega169P\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO Environment for Sigma IC AGAFIA SG0 Board\nDESCRIPTION: Basic configuration for the Sigma IC AGAFIA SG0 board in the PlatformIO project configuration file. This snippet sets up the basic environment with the STM32 platform and AGAFIA SG0 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/agafia_sg0.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:agafia_sg0]\nplatform = ststm32\nboard = agafia_sg0\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for ST 32F746GDISCOVERY\nDESCRIPTION: Configuration example for specifying the upload protocol (e.g., stlink) for the ST 32F746GDISCOVERY board in PlatformIO.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_f746ng.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_f746ng]\nplatform = ststm32\nboard = disco_f746ng\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Configuring ATtiny13A Board in PlatformIO INI File\nDESCRIPTION: This code snippet shows how to configure the ATtiny13A board in the PlatformIO project configuration file (platformio.ini). It sets the platform to atmelavr and the board to attiny13a.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/attiny13a.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:attiny13a]\nplatform = atmelavr\nboard = attiny13a\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic STC8G1K12 Board in PlatformIO\nDESCRIPTION: Basic PlatformIO configuration for the Generic STC8G1K12 board using the intel_mcs51 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8G1K12.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8G1K12]\nplatform = intel_mcs51\nboard = STC8G1K12\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO Environment for USBasp stick\nDESCRIPTION: Basic configuration for setting up a PlatformIO environment to use the USBasp stick. This snippet defines the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/usbasp.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:usbasp]\nplatform = atmelavr\nboard = usbasp\n```\n\n----------------------------------------\n\nTITLE: Customizing Digispark USB MCU Settings\nDESCRIPTION: Example of overriding default board settings including microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/digispark-tiny.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:digispark-tiny]\nplatform = atmelavr\nboard = digispark-tiny\n\n; change microcontroller\nboard_build.mcu = attiny85\n\n; change MCU frequency\nboard_build.f_cpu = 16500000L\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for Adafruit Gemma M0\nDESCRIPTION: Basic configuration for Adafruit Gemma M0 in platformio.ini file. This sets up the basic environment with the atmelsam platform and adafruit_gemma_m0 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_gemma_m0.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_gemma_m0]\nplatform = atmelsam\nboard = adafruit_gemma_m0\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Adafruit NeoKey Trinkey\nDESCRIPTION: This snippet shows how to set the upload protocol for the Adafruit NeoKey Trinkey board in the PlatformIO configuration. It sets the upload protocol to sam-ba.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_neokeytrinkey_m0.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_neokeytrinkey_m0]\nplatform = atmelsam\nboard = adafruit_neokeytrinkey_m0\n\nupload_protocol = sam-ba\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic ESP8266 ESP-12E Board Settings in PlatformIO\nDESCRIPTION: Basic configuration for the Espressif ESP8266 ESP-12E board in the PlatformIO project configuration file. This snippet defines the platform and board ID required to develop for this hardware.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/esp12e.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp12e]\nplatform = espressif8266\nboard = esp12e\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic M5Stamp-Pico Environment in PlatformIO\nDESCRIPTION: Basic configuration for the M5Stamp-Pico board in the PlatformIO project configuration file. This snippet defines the essential environment settings needed to work with the M5Stamp-Pico ESP32 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/m5stamp-pico.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:m5stamp-pico]\nplatform = espressif32\nboard = m5stamp-pico\n```\n\n----------------------------------------\n\nTITLE: Basic STM32F401RC Board Configuration\nDESCRIPTION: Basic configuration setup for STM32F401RC board in platformio.ini file. Specifies the platform and board type.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F401RC.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F401RC]\nplatform = ststm32\nboard = genericSTM32F401RC\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Generic STC15W408S Board\nDESCRIPTION: This snippet shows how to configure a PlatformIO project for the Generic STC15W408S board. It sets the platform to intel_mcs51 and specifies the board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15W408S.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15W408S]\nplatform = intel_mcs51\nboard = STC15W408S\n```\n\n----------------------------------------\n\nTITLE: Configuring Adafruit PyGamer M4 Express Board in PlatformIO\nDESCRIPTION: Basic configuration for the Adafruit PyGamer M4 Express board in the project's platformio.ini file. It specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_pygamer_m4.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_pygamer_m4]\nplatform = atmelsam\nboard = adafruit_pygamer_m4\n```\n\n----------------------------------------\n\nTITLE: Basic STC15F101W Board Configuration\nDESCRIPTION: Basic PlatformIO configuration for the STC15F101W board using the intel_mcs51 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15F101W.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15F101W]\nplatform = intel_mcs51\nboard = STC15F101W\n```\n\n----------------------------------------\n\nTITLE: Customizing Generic STC8H1K64S2A10 Board Settings in PlatformIO\nDESCRIPTION: This snippet demonstrates how to override default board settings in the PlatformIO environment. It shows examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8H1K64S2A10.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8H1K64S2A10]\nplatform = intel_mcs51\nboard = STC8H1K64S2A10\n\n; change microcontroller\nboard_build.mcu = stc8h1k64s2a10\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Basic N79E855 Board Configuration in PlatformIO\nDESCRIPTION: Basic configuration for setting up the N79E855 board in PlatformIO's project configuration file. Specifies the platform and board type.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/N79E855.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:N79E855]\nplatform = intel_mcs51\nboard = N79E855\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Adafruit Metro M4 AirLift Lite\nDESCRIPTION: Configuration to set the upload protocol for the Adafruit Metro M4 AirLift Lite board. This example uses the SAM-BA protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_metro_m4_airliftlite.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_metro_m4_airliftlite]\nplatform = atmelsam\nboard = adafruit_metro_m4_airliftlite\n\nupload_protocol = sam-ba\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for ESP32 Thing Plus\nDESCRIPTION: Basic configuration for setting up an ESP32 Thing Plus project environment in PlatformIO.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32thing_plus.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32thing_plus]\nplatform = espressif32\nboard = esp32thing_plus\n```\n\n----------------------------------------\n\nTITLE: Customizing STC8C2K64S2 MCU Settings in platformio.ini\nDESCRIPTION: Advanced configuration for the Generic STC8C2K64S2 board with custom microcontroller and frequency settings. This example shows how to override default board settings defined in the board manifest JSON file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8C2K64S2.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8C2K64S2]\nplatform = intel_mcs51\nboard = STC8C2K64S2\n\n; change microcontroller\nboard_build.mcu = stc8c2k64s2\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration in PlatformIO\nDESCRIPTION: Basic configuration for setting up the ST Nucleo F756ZG board in PlatformIO's project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f756zg.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f756zg]\nplatform = ststm32\nboard = nucleo_f756zg\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for BL652 Development Kit\nDESCRIPTION: Basic configuration for using the Laird BL652 Development Kit with PlatformIO. This code specifies the platform (nordicnrf52) and board (laird_bl652_dvk) in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/laird_bl652_dvk.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:laird_bl652_dvk]\nplatform = nordicnrf52\nboard = laird_bl652_dvk\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for FRDM-KL46Z Board in PlatformIO\nDESCRIPTION: Configuration for specifying the upload protocol for the Freescale Kinetis FRDM-KL46Z board. This example sets the upload_protocol to 'mbed', which is the default protocol (other options include 'cmsis-dap' and 'jlink').\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/freescalekinetis/frdm_kl46z.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:frdm_kl46z]\nplatform = freescalekinetis\nboard = frdm_kl46z\n\nupload_protocol = mbed\n```\n\n----------------------------------------\n\nTITLE: Configuring Teensy LC Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the Teensy LC board in the PlatformIO project configuration file. It sets the platform and board, and demonstrates how to override default board settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/teensy/teensylc.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:teensylc]\nplatform = teensy\nboard = teensylc\n\n; change microcontroller\nboard_build.mcu = mkl26z64\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Generic ATtiny84 in projectconf\nDESCRIPTION: This snippet shows the basic configuration for using a Generic ATtiny84 board in the PlatformIO project configuration file. It specifies the AVR platform and the board identifier.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/attiny84.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:attiny84]\nplatform = atmelavr\nboard = attiny84\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Shows how to configure the upload protocol for the board, using nrfutil as an example\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/adafruit_ledglasses_nrf52840.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_ledglasses_nrf52840]\nplatform = nordicnrf52\nboard = adafruit_ledglasses_nrf52840\n\nupload_protocol = nrfutil\n```\n\n----------------------------------------\n\nTITLE: Configuring VintLabs ESP32 Devkit Board in platformio.ini\nDESCRIPTION: Basic configuration for the VintLabs ESP32 Devkit board in the project's platformio.ini file. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/vintlabs-devkit-v1.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:vintlabs-devkit-v1]\nplatform = espressif32\nboard = vintlabs-devkit-v1\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration for STC8H4K48TLR Board\nDESCRIPTION: Extended configuration example demonstrating how to override default board settings such as microcontroller model and CPU frequency in platformio.ini.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8H4K48TLR.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8H4K48TLR]\nplatform = intel_mcs51\nboard = STC8H4K48TLR\n\n; change microcontroller\nboard_build.mcu = stc8h4k48tlr\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Configuring Arduino Duemilanove Environment in platformio.ini\nDESCRIPTION: Basic configuration for an Arduino Duemilanove or Diecimila ATmega328 project environment in platformio.ini. This sets up the minimum required parameters for building a project for this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/diecimilaatmega328.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:diecimilaatmega328]\nplatform = atmelavr\nboard = diecimilaatmega328\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Black STM32F407ZE\nDESCRIPTION: Configuration example for changing the upload protocol to ST-Link in platformio.ini. The board supports multiple protocols including blackmagic, cmsis-dap, jlink, serial, and stlink.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/black_f407ze.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:black_f407ze]\nplatform = ststm32\nboard = black_f407ze\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Customizing ST 32F413HDISCOVERY Board Settings\nDESCRIPTION: Example of overriding default board settings such as microcontroller and CPU frequency using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_f413zh.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_f413zh]\nplatform = ststm32\nboard = disco_f413zh\n\n; change microcontroller\nboard_build.mcu = stm32f413zht6\n\n; change MCU frequency\nboard_build.f_cpu = 100000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Teensy 3.0 in PlatformIO INI File\nDESCRIPTION: This snippet shows how to set the upload protocol for Teensy 3.0 in a PlatformIO project. It demonstrates setting the protocol to 'teensy-gui', which is the default option.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/teensy/teensy30.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:teensy30]\nplatform = teensy\nboard = teensy30\n\nupload_protocol = teensy-gui\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Arduino Nano ESP32 Environment\nDESCRIPTION: Basic PlatformIO environment configuration for Arduino Nano ESP32 board using the Espressif32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/arduino_nano_esp32.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:arduino_nano_esp32]\nplatform = espressif32\nboard = arduino_nano_esp32\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for STC15W1K24S\nDESCRIPTION: Minimal configuration required in platformio.ini to set up a project for the STC15W1K24S board using the intel_mcs51 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15W1K24S.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15W1K24S]\nplatform = intel_mcs51\nboard = STC15W1K24S\n```\n\n----------------------------------------\n\nTITLE: Configuring Microduino Core+ Board in PlatformIO\nDESCRIPTION: This code snippet shows how to configure the Microduino Core+ (Atmega644PA@16M,5V) board in a PlatformIO project's configuration file. It sets the platform to atmelavr and the board to 644pa16m.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/644pa16m.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:644pa16m]\nplatform = atmelavr\nboard = 644pa16m\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO Environment for Digilent chipKIT MX3 Board\nDESCRIPTION: Basic configuration for setting up a PlatformIO project environment for the Digilent chipKIT MX3 board. This defines the platform as microchippic32 and sets the board to chipkit_mx3.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/microchippic32/chipkit_mx3.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:chipkit_mx3]\nplatform = microchippic32\nboard = chipkit_mx3\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the ESPresso Lite 2.0 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/espresso_lite_v2.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:espresso_lite_v2]\nplatform = espressif8266\nboard = espresso_lite_v2\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for Heltec Wifi Kit 8\nDESCRIPTION: Basic configuration setup for Heltec Wifi Kit 8 board in platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/heltec_wifi_kit_8.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:heltec_wifi_kit_8]\nplatform = espressif8266\nboard = heltec_wifi_kit_8\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for MotorGo Mini 1 Board\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the MotorGo Mini 1 board. This sets the upload method to the default 'esptool' protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/motorgo_mini_1.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:motorgo_mini_1]\nplatform = espressif32\nboard = motorgo_mini_1\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring INEX OpenKB Board in PlatformIO\nDESCRIPTION: Basic PlatformIO configuration for INEX OpenKB board using the ESP32 platform. This configuration sets up the project environment with the appropriate board identifier.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/inex_openkb.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:inex_openkb]\nplatform = espressif32\nboard = inex_openkb\n```\n\n----------------------------------------\n\nTITLE: Basic ML51TD1AE Board Configuration\nDESCRIPTION: Basic PlatformIO configuration for ML51TD1AE board using the intel_mcs51 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/ML51TD1AE.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ML51TD1AE]\nplatform = intel_mcs51\nboard = ML51TD1AE\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Aceinna OpenIMU 330\nDESCRIPTION: Configuration example for changing the upload protocol for the Aceinna OpenIMU 330 board in PlatformIO. It sets the upload protocol to ST-Link.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/aceinna_imu/OpenIMU330.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:OpenIMU330]\nplatform = aceinna_imu\nboard = OpenIMU330\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration for ESP32\nDESCRIPTION: Basic PlatformIO configuration for ArtronShop IOXESP32PS board using the espressif32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/ioxesp32ps.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ioxesp32ps]\nplatform = espressif32\nboard = ioxesp32ps\n```\n\n----------------------------------------\n\nTITLE: Custom ATtiny416 Configuration with Override Settings\nDESCRIPTION: Advanced configuration for ATtiny416 board with custom microcontroller and frequency settings. This snippet demonstrates how to override default board settings in the PlatformIO project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/ATtiny416.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATtiny416]\nplatform = atmelmegaavr\nboard = ATtiny416\n\n; change microcontroller\nboard_build.mcu = attiny416\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for SLSTK3400A Happy Gecko Board\nDESCRIPTION: Basic PlatformIO configuration for the SLSTK3400A USB-enabled Happy Gecko board using the siliconlabsefm32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/siliconlabsefm32/efm32hg_stk3400.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:efm32hg_stk3400]\nplatform = siliconlabsefm32\nboard = efm32hg_stk3400\n```\n\n----------------------------------------\n\nTITLE: ESP8266 Upload Protocol Configuration\nDESCRIPTION: PlatformIO configuration demonstrating how to specify the upload protocol for the board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/huzzah.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:huzzah]\nplatform = espressif8266\nboard = huzzah\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for ESP32-S3-USB-OTG Board\nDESCRIPTION: Basic PlatformIO configuration for the Espressif ESP32-S3-USB-OTG board. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32s3usbotg.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32s3usbotg]\nplatform = espressif32\nboard = esp32s3usbotg\n```\n\n----------------------------------------\n\nTITLE: Basic Generic8051 Board Configuration in PlatformIO\nDESCRIPTION: Basic configuration setup for Generic 8051 board in platformio.ini file specifying the platform and board type.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/Generic8051.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:Generic8051]\nplatform = intel_mcs51\nboard = Generic8051\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic BOB3 Board Settings in PlatformIO\nDESCRIPTION: Basic PlatformIO environment configuration for the BOB3 coding bot, specifying the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/bob3.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:bob3]\nplatform = atmelavr\nboard = bob3\n```\n\n----------------------------------------\n\nTITLE: Customizing Board Parameters in PlatformIO\nDESCRIPTION: Advanced configuration demonstrating how to override default board settings like microcontroller model and CPU frequency in the project configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/timsp430/lpmsp430g2452.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:lpmsp430g2452]\nplatform = timsp430\nboard = lpmsp430g2452\n\n; change microcontroller\nboard_build.mcu = msp430g2452\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f722ze.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f722ze]\nplatform = ststm32\nboard = nucleo_f722ze\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Customizing SweetPea ESP-210 Settings in PlatformIO\nDESCRIPTION: Example showing how to override default board settings in platformio.ini, such as changing the microcontroller type and CPU frequency for the SweetPea ESP-210 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/esp210.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp210]\nplatform = espressif8266\nboard = esp210\n\n; change microcontroller\nboard_build.mcu = esp8266\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring ATmega3209 Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the ATmega3209 board in the PlatformIO project configuration file. It sets the platform and board, and demonstrates how to override default settings like microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/ATmega3209.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega3209]\nplatform = atmelmegaavr\nboard = ATmega3209\n\n; change microcontroller\nboard_build.mcu = atmega3209\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol\nDESCRIPTION: Configuration example for specifying the upload protocol for the board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nicla_vision_m4.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:nicla_vision_m4]\nplatform = ststm32\nboard = nicla_vision_m4\n\nupload_protocol = dfu\n```\n\n----------------------------------------\n\nTITLE: Customizing Deneyap Kart 1A v2 Board Settings\nDESCRIPTION: Example of overriding default board settings in platformio.ini, such as changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/deneyapkart1Av2.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:deneyapkart1Av2]\nplatform = espressif32\nboard = deneyapkart1Av2\n\n; change microcontroller\nboard_build.mcu = esp32s3\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for WiFi Slot in PlatformIO INI File\nDESCRIPTION: This snippet demonstrates how to specify the upload protocol for the WiFi Slot board. The board supports 'espota' and 'esptool' protocols, with 'esptool' being the default.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/wifi_slot.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:wifi_slot]\nplatform = espressif8266\nboard = wifi_slot\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Arduino MKR GSM 1400\nDESCRIPTION: Configures the upload protocol for the Arduino MKR GSM 1400 board. The default protocol is sam-ba, but this example shows how to explicitly set it in the project configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/mkrgsm1400.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:mkrgsm1400]\nplatform = atmelsam\nboard = mkrgsm1400\n\nupload_protocol = sam-ba\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Atmel AT90PWM216 in platformio.ini\nDESCRIPTION: Basic configuration for setting up a PlatformIO project environment for the Atmel AT90PWM216 board. This snippet demonstrates how to specify the board in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/at90pwm216.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:at90pwm216]\nplatform = atmelavr\nboard = at90pwm216\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for LOLIN D32 PRO\nDESCRIPTION: Initial configuration setup for WEMOS LOLIN D32 PRO board in platformio.ini file. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/lolin_d32_pro.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:lolin_d32_pro]\nplatform = espressif32\nboard = lolin_d32_pro\n```\n\n----------------------------------------\n\nTITLE: Configuring ST STM32L4+ Discovery kit IoT node in platformio.ini\nDESCRIPTION: Basic configuration for the ST STM32L4+ Discovery kit IoT node board in the PlatformIO project configuration file. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_l4s5i_iot01a.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_l4s5i_iot01a]\nplatform = ststm32\nboard = disco_l4s5i_iot01a\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic STC15F205EA Board in PlatformIO\nDESCRIPTION: This snippet shows how to configure the Generic STC15F205EA board in the PlatformIO project configuration file. It sets the platform and board, and demonstrates how to override default settings such as microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15F205EA.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15F205EA]\nplatform = intel_mcs51\nboard = STC15F205EA\n\n; change microcontroller\nboard_build.mcu = stc15f205ea\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration for STC12C5A40S2\nDESCRIPTION: Basic PlatformIO configuration for the STC12C5A40S2 board, specifying the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC12C5A40S2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC12C5A40S2]\nplatform = intel_mcs51\nboard = STC12C5A40S2\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Board Settings in PlatformIO\nDESCRIPTION: Basic PlatformIO configuration for setting up an Adafruit Trinket 5V/16MHz board project using the atmelavr platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/trinket5.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:trinket5]\nplatform = atmelavr\nboard = trinket5\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration with MCU Settings\nDESCRIPTION: Extended configuration example showing how to override default microcontroller and frequency settings for the Trinket board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/trinket3.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:trinket3]\nplatform = atmelavr\nboard = trinket3\n\n; change microcontroller\nboard_build.mcu = attiny85\n\n; change MCU frequency\nboard_build.f_cpu = 8000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Fubarino SD Board Settings in PlatformIO\nDESCRIPTION: Extended configuration for Fubarino SD board that demonstrates how to override default settings such as microcontroller type and CPU frequency in the PlatformIO project configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/microchippic32/fubarino_sd.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:fubarino_sd]\nplatform = microchippic32\nboard = fubarino_sd\n\n; change microcontroller\nboard_build.mcu = 32MX795F512H\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Custom MCU and Frequency Configuration for RepRap RAMBo\nDESCRIPTION: Advanced configuration example showing how to override default microcontroller and frequency settings for the RepRap RAMBo board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/reprap_rambo.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:reprap_rambo]\nplatform = atmelavr\nboard = reprap_rambo\n\n; change microcontroller\nboard_build.mcu = atmega2560\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO Environment for Adafruit Feather ESP32-S3 No PSRAM\nDESCRIPTION: Basic configuration for setting up a PlatformIO project environment for the Adafruit Feather ESP32-S3 No PSRAM board. This configuration specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/adafruit_feather_esp32s3_nopsram.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_feather_esp32s3_nopsram]\nplatform = espressif32\nboard = adafruit_feather_esp32s3_nopsram\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with Custom Settings\nDESCRIPTION: Extended PlatformIO configuration demonstrating how to override default board settings such as microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/trinket5.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:trinket5]\nplatform = atmelavr\nboard = trinket5\n\n; change microcontroller\nboard_build.mcu = attiny85\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Generic STC15F102 Board\nDESCRIPTION: This snippet shows how to configure a PlatformIO project for the Generic STC15F102 board using the Intel MCS-51 platform. It demonstrates setting the board ID and platform in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15F102.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15F102]\nplatform = intel_mcs51\nboard = STC15F102\n```\n\n----------------------------------------\n\nTITLE: Customizing ATmega4808 Board Settings in PlatformIO INI File\nDESCRIPTION: This snippet demonstrates how to override default settings for the ATmega4808 board in the PlatformIO project configuration. It shows examples of changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/ATmega4808.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega4808]\nplatform = atmelmegaavr\nboard = ATmega4808\n\n; change microcontroller\nboard_build.mcu = atmega4808\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Revoking Access from an Individual User\nDESCRIPTION: Example demonstrating how to revoke user 'bob' from accessing a specific package platform resource.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/access/cmd_revoke.rst#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> pio access revoke bob prn:reg:pkg:8036:platform\nAccess for resource \"prn:reg:pkg:8036:platform\" has been revoked for \"bob\"\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Maple Mini Original (INI)\nDESCRIPTION: Basic PlatformIO configuration for the Maple Mini Original board, specifying the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/maple_mini_origin.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:maple_mini_origin]\nplatform = ststm32\nboard = maple_mini_origin\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Parameters for STC8H2K64T\nDESCRIPTION: This snippet demonstrates how to override default board settings in platformio.ini. It shows how to change the microcontroller type and CPU frequency for the STC8H2K64T board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8H2K64T.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8H2K64T]\nplatform = intel_mcs51\nboard = STC8H2K64T\n\n; change microcontroller\nboard_build.mcu = stc8h2k64t\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Implementing Calculator Library Header in C\nDESCRIPTION: This header file declares the functions for a simple calculator library including addition, subtraction, multiplication, and division operations.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/tutorials/nordicnrf52/zephyr_debugging_unit_testing_inspect.rst#2025-04-10_snippet_4\n\nLANGUAGE: C\nCODE:\n```\n#ifndef _CALCULATOR_H_\n#define _CALCULATOR_H_\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\nint add (int a, int b);\nint sub (int a, int b);\nint mul (int a, int b);\nint div (int a, int b);\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif // _CALCULATOR_H_\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Arduino Robot Motor Board Environment\nDESCRIPTION: Basic PlatformIO configuration for setting up an Arduino Robot Motor board environment. Specifies the platform as atmelavr and board as robotMotor.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/robotMotor.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:robotMotor]\nplatform = atmelavr\nboard = robotMotor\n```\n\n----------------------------------------\n\nTITLE: Customizing TTGO T-Watch Hardware Settings\nDESCRIPTION: Advanced configuration options for overriding default hardware settings of the TTGO T-Watch board. This example demonstrates how to change the microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/ttgo-t-watch.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ttgo-t-watch]\nplatform = espressif32\nboard = ttgo-t-watch\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic M5Stack-ATOM Environment in PlatformIO\nDESCRIPTION: Basic configuration for setting up an M5Stack-ATOM project environment in PlatformIO's platformio.ini file. Specifies the platform and board type.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/m5stack-atom.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:m5stack-atom]\nplatform = espressif32\nboard = m5stack-atom\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with Custom Settings\nDESCRIPTION: Extended PlatformIO configuration demonstrating how to override default board settings such as microcontroller model and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15W4K32S4.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15W4K32S4]\nplatform = intel_mcs51\nboard = STC15W4K32S4\n\n; change microcontroller\nboard_build.mcu = stc15w4k32s4\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Adafruit Feather M4 Express\nDESCRIPTION: Configuration snippet demonstrating how to specify the upload protocol for Adafruit Feather M4 Express. This example sets the upload protocol to sam-ba, which is also the default protocol for this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_feather_m4.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_feather_m4]\nplatform = atmelsam\nboard = adafruit_feather_m4\n\nupload_protocol = sam-ba\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Franzininho WiFi Board\nDESCRIPTION: Configuration to specify the upload protocol for the Franzininho WiFi Board. In this example, it's set to the default 'esptool' protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32-s2-franzininho.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32-s2-franzininho]\nplatform = espressif32\nboard = esp32-s2-franzininho\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Customizing Hardware Settings for Heltec CubeCell-Module Plus in INI\nDESCRIPTION: Extended platformio.ini configuration that demonstrates how to override default board settings like microcontroller type and CPU frequency. These customizations allow fine-tuning the hardware configuration for specific project requirements.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/heltec-cubecell/cubecell_module_plus.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:cubecell_module_plus]\nplatform = heltec-cubecell\nboard = cubecell_module_plus\n\n; change microcontroller\nboard_build.mcu = asr6502\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: PlatformIO CI Command for Library Projects\nDESCRIPTION: CI command setup for library projects, allowing specification of boards through command line interface.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/ci/drone.rst#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install -U platformio\npio ci --board=<ID_1> --board=<ID_2> --board=<ID_N>\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic PlatformIO Environment for STC8A4K60S2A12\nDESCRIPTION: Basic configuration for using the Generic STC8A4K60S2A12 board in a PlatformIO project environment. This snippet shows the minimal required settings in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8A4K60S2A12.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8A4K60S2A12]\nplatform = intel_mcs51\nboard = STC8A4K60S2A12\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Adafruit Feather ESP32-S2\nDESCRIPTION: This code snippet demonstrates how to set the upload protocol for the Adafruit Feather ESP32-S2 board in the platformio.ini file. The default protocol is 'esptool', but it can be changed to other supported protocols.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/adafruit_feather_esp32s2.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_feather_esp32s2]\nplatform = espressif32\nboard = adafruit_feather_esp32s2\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Customizing MCU and Frequency Settings for ESP32C3CoreBoard\nDESCRIPTION: Advanced configuration example that shows how to override default board settings like the microcontroller type and CPU frequency. This allows for customization of the board's core parameters.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/weactstudio_esp32c3coreboard.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:weactstudio_esp32c3coreboard]\nplatform = espressif32\nboard = weactstudio_esp32c3coreboard\n\n; change microcontroller\nboard_build.mcu = esp32c3\n\n; change MCU frequency\nboard_build.f_cpu = 160000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU and Frequency Override\nDESCRIPTION: Extended configuration showing how to override default board settings like microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/electronut_papyr.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:electronut_papyr]\nplatform = nordicnrf52\nboard = electronut_papyr\n\n; change microcontroller\nboard_build.mcu = nrf52840\n\n; change MCU frequency\nboard_build.f_cpu = 64000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Adafruit pyBadge M4 Express Board Settings\nDESCRIPTION: Example of overriding default board settings in PlatformIO. It demonstrates changing the microcontroller and MCU frequency for the Adafruit pyBadge M4 Express.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_pybadge_m4.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_pybadge_m4]\nplatform = atmelsam\nboard = adafruit_pybadge_m4\n\n; change microcontroller\nboard_build.mcu = samd51j19a\n\n; change MCU frequency\nboard_build.f_cpu = 120000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic ATtiny88 Board in PlatformIO Project Configuration\nDESCRIPTION: Basic configuration for using the Generic ATtiny88 board in a PlatformIO project. This snippet shows how to specify the ATtiny88 board in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/attiny88.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:attiny88]\nplatform = atmelavr\nboard = attiny88\n```\n\n----------------------------------------\n\nTITLE: Customizing Board MCU and Frequency Settings\nDESCRIPTION: Example showing how to override default board settings including microcontroller type and CPU frequency using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/maxim32/max32620hsp.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:max32620hsp]\nplatform = maxim32\nboard = max32620hsp\n\n; change microcontroller\nboard_build.mcu = max32620\n\n; change MCU frequency\nboard_build.f_cpu = 96000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Waveshare Open103Z Board in platformio.ini\nDESCRIPTION: Basic configuration for the Waveshare Open103Z board in the PlatformIO project configuration file. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/waveshare_open103z.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:waveshare_open103z]\nplatform = ststm32\nboard = waveshare_open103z\n```\n\n----------------------------------------\n\nTITLE: Customizing Adafruit PyGamer M4 Express Board Settings\nDESCRIPTION: Example of overriding default board settings in the platformio.ini file. It demonstrates how to change the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_pygamer_m4.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_pygamer_m4]\nplatform = atmelsam\nboard = adafruit_pygamer_m4\n\n; change microcontroller\nboard_build.mcu = samd51j19a\n\n; change MCU frequency\nboard_build.f_cpu = 120000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing RYMCU ESP32-S3-DevKitC-1 Board Settings\nDESCRIPTION: Example of overriding default board settings in PlatformIO configuration. Demonstrates changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/rymcu-esp32-s3-devkitc-1.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:rymcu-esp32-s3-devkitc-1]\nplatform = espressif32\nboard = rymcu-esp32-s3-devkitc-1\n\n; change microcontroller\nboard_build.mcu = esp32s3\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Upload Protocol for INEX OpenKB in PlatformIO\nDESCRIPTION: PlatformIO configuration that specifies the upload protocol for INEX OpenKB board. This example explicitly sets esptool as the upload protocol, which is also the default option.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/inex_openkb.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:inex_openkb]\nplatform = espressif32\nboard = inex_openkb\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO Environment for Prusa MM Control Board\nDESCRIPTION: Basic PlatformIO configuration for the Original Prusa i3 MK3 Multi Material 2.0 Upgrade board. This snippet shows how to set up the environment in the platformio.ini file using the 'prusa_mm_control' board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/prusa_mm_control.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:prusa_mm_control]\nplatform = atmelavr\nboard = prusa_mm_control\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Fubarino SD Board\nDESCRIPTION: Basic configuration for setting up a PlatformIO project environment for the Fubarino SD board. This snippet defines the platform and board ID in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/microchippic32/fubarino_sd.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:fubarino_sd]\nplatform = microchippic32\nboard = fubarino_sd\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for AGAFIA SG0\nDESCRIPTION: Configuration showing how to specify a particular upload protocol for the Sigma IC AGAFIA SG0 board. This example uses the ST-Link upload protocol, which is also the default for this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/agafia_sg0.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:agafia_sg0]\nplatform = ststm32\nboard = agafia_sg0\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Overriding Default EnviroDIY Mayfly Settings in PlatformIO INI File\nDESCRIPTION: This snippet demonstrates how to override default settings for the EnviroDIY Mayfly board in a PlatformIO project configuration file. It changes the microcontroller to atmega1284p and sets the MCU frequency to 8MHz.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/mayfly.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:mayfly]\nplatform = atmelavr\nboard = mayfly\n\n; change microcontroller\nboard_build.mcu = atmega1284p\n\n; change MCU frequency\nboard_build.f_cpu = 8000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic STC15W202S Board in PlatformIO\nDESCRIPTION: This snippet shows how to configure the Generic STC15W202S board in the PlatformIO project configuration file. It sets the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15W202S.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15W202S]\nplatform = intel_mcs51\nboard = STC15W202S\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration for BluePill F103C6\nDESCRIPTION: PlatformIO configuration specifying ST-Link as the upload protocol for the BluePill F103C6 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/bluepill_f103c6.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:bluepill_f103c6]\nplatform = ststm32\nboard = bluepill_f103c6\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Customizing ProtoCentral HealthyPi 4 Board Settings\nDESCRIPTION: This example demonstrates how to override default board settings in the PlatformIO configuration. It shows how to change the microcontroller and MCU frequency for the HealthyPi 4 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/healthypi4.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:healthypi4]\nplatform = espressif32\nboard = healthypi4\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Enabling Standard C Library for Zephyr\nDESCRIPTION: This configuration enables the standard version of newlib C library for compatibility with the Unity testing framework.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/tutorials/nordicnrf52/zephyr_debugging_unit_testing_inspect.rst#2025-04-10_snippet_3\n\nLANGUAGE: INI\nCODE:\n```\nCONFIG_NEWLIB_LIBC=y\n```\n\n----------------------------------------\n\nTITLE: Configuring LoRa32u4II Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the LoRa32u4II board in the PlatformIO project configuration file. It sets the platform to atmelavr and the board to lora32u4II.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/lora32u4II.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:lora32u4II]\nplatform = atmelavr\nboard = lora32u4II\n```\n\n----------------------------------------\n\nTITLE: Customizing Heltec CubeCell-Board PRO Configuration in PlatformIO\nDESCRIPTION: Extended PlatformIO configuration for Heltec CubeCell-Board PRO with custom microcontroller and frequency settings. This demonstrates how to override default board settings in platformio.ini.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/heltec-cubecell/cubecell_board_pro.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:cubecell_board_pro]\nplatform = heltec-cubecell\nboard = cubecell_board_pro\n\n; change microcontroller\nboard_build.mcu = asr6601\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing EspinalLab ATMegaZero ESP32-S2 Board Settings\nDESCRIPTION: Example of overriding default board settings in PlatformIO configuration. Demonstrates changing the microcontroller and CPU frequency for the EspinalLab ATMegaZero ESP32-S2 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/atmegazero_esp32s2.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:atmegazero_esp32s2]\nplatform = espressif32\nboard = atmegazero_esp32s2\n\n; change microcontroller\nboard_build.mcu = esp32s2\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for RAK811 LoRa Tracker\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the RAK811 LoRa Tracker. This example uses the ST-Link protocol for uploading firmware to the board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/rak811_tracker.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:rak811_tracker]\nplatform = ststm32\nboard = rak811_tracker\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Customizing Adafruit ESP32-S2 Feather Board Settings\nDESCRIPTION: Advanced configuration with custom microcontroller and frequency settings. This example demonstrates how to override default board settings using the board_*** options to modify the MCU type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/featheresp32-s2.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:featheresp32-s2]\nplatform = espressif32\nboard = featheresp32-s2\n\n; change microcontroller\nboard_build.mcu = esp32s2\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for M200 V2 Board\nDESCRIPTION: Basic configuration for PlatformIO.ini to set up a project for the M200 V2 board using the STM32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/malyanm200_f070cb.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:malyanm200_f070cb]\nplatform = ststm32\nboard = malyanm200_f070cb\n```\n\n----------------------------------------\n\nTITLE: Customizing STC8F1K08S Settings in PlatformIO\nDESCRIPTION: Advanced configuration showing how to override default board settings like microcontroller type and CPU frequency for the STC8F1K08S board in PlatformIO.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8F1K08S.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8F1K08S]\nplatform = intel_mcs51\nboard = STC8F1K08S\n\n; change microcontroller\nboard_build.mcu = stc8f1k08s\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Configuring ATmega2560 Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to set up the ATmega2560 board in the PlatformIO project configuration file. It includes the basic setup and examples of how to override default board settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega2560.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega2560]\nplatform = atmelavr\nboard = ATmega2560\n\n; change microcontroller\nboard_build.mcu = atmega2560\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the SparkFun ESP8266 Thing board\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/thing.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:thing]\nplatform = espressif8266\nboard = thing\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring ESP-Mx DevKit (ESP8285) Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to set up the build environment for the ESP-Mx DevKit (ESP8285) board in the PlatformIO configuration file. It includes the basic setup and examples of how to override default board settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/espmxdevkit.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:espmxdevkit]\nplatform = espressif8266\nboard = espmxdevkit\n\n; change microcontroller\nboard_build.mcu = esp8266\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for RedBearLab BLE Nano 2\nDESCRIPTION: Configuring the upload protocol for the RedBearLab BLE Nano 2 board in PlatformIO. This example uses the CMSIS-DAP protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/redbear_blenano2.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:redbear_blenano2]\nplatform = nordicnrf52\nboard = redbear_blenano2\n\nupload_protocol = cmsis-dap\n```\n\n----------------------------------------\n\nTITLE: Configuring RedBearLab Blend Micro 3.3V/8MHz in platformio.ini\nDESCRIPTION: This snippet shows how to configure the RedBearLab Blend Micro 3.3V/8MHz board in the PlatformIO project configuration file. It sets the platform and board options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/blendmicro8.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:blendmicro8]\nplatform = atmelavr\nboard = blendmicro8\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic PlatformIO Environment for Adafruit Metro\nDESCRIPTION: Basic PlatformIO configuration for the Adafruit Metro board. This snippet defines the environment, platform, and board ID to use in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/metro.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:metro]\nplatform = atmelavr\nboard = metro\n```\n\n----------------------------------------\n\nTITLE: Configuring WiFiduino Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the WiFiduino board in the PlatformIO project configuration file. It sets the platform to espressif8266 and the board to wifiduino.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/wifiduino.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:wifiduino]\nplatform = espressif8266\nboard = wifiduino\n```\n\n----------------------------------------\n\nTITLE: Customizing ML51DB9AE Board Settings in platformio.ini\nDESCRIPTION: Extended configuration for the Generic ML51DB9AE board with customized microcontroller and clock frequency settings. This demonstrates how to override default board settings from the board manifest.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/ML51DB9AE.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ML51DB9AE]\nplatform = intel_mcs51\nboard = ML51DB9AE\n\n; change microcontroller\nboard_build.mcu = ml51db9ae\n\n; change MCU frequency\nboard_build.f_cpu = 24000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Arduino Robot Control Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the Arduino Robot Control board in the PlatformIO project configuration file. It specifies the platform and board ID, and demonstrates how to override default board settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/robotControl.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:robotControl]\nplatform = atmelavr\nboard = robotControl\n\n; change microcontroller\nboard_build.mcu = atmega32u4\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with Custom Settings\nDESCRIPTION: Extended configuration example showing how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/sanguino_atmega1284p.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:sanguino_atmega1284p]\nplatform = atmelavr\nboard = sanguino_atmega1284p\n\n; change microcontroller\nboard_build.mcu = atmega1284p\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring M300 Board in platformio.ini\nDESCRIPTION: Basic configuration for the M300 board in the project's platformio.ini file. It specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/malyanm300_f070cb.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:malyanm300_f070cb]\nplatform = ststm32\nboard = malyanm300_f070cb\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for ST Nucleo L496ZG-P\nDESCRIPTION: Configuration example for specifying the upload protocol in platformio.ini. This shows how to explicitly set the ST-Link protocol for uploading firmware to the ST Nucleo L496ZG-P board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_l496zg_p.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_l496zg_p]\nplatform = ststm32\nboard = nucleo_l496zg_p\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Customizing M5Stack AtomS3 Board Settings\nDESCRIPTION: Example of overriding default M5Stack AtomS3 settings in PlatformIO, including changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/m5stack-atoms3.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:m5stack-atoms3]\nplatform = espressif32\nboard = m5stack-atoms3\n\n; change microcontroller\nboard_build.mcu = esp32s3\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring SODAQ GaLoRa Board in platformio.ini\nDESCRIPTION: This snippet shows how to configure the SODAQ GaLoRa board in the PlatformIO project configuration file. It sets the platform to atmelavr and specifies the board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/sodaq_galora.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:sodaq_galora]\nplatform = atmelavr\nboard = sodaq_galora\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic STC12C5A52S2 Board Environment\nDESCRIPTION: Basic PlatformIO configuration for the STC12C5A52S2 board using the intel_mcs51 platform\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC12C5A52S2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC12C5A52S2]\nplatform = intel_mcs51\nboard = STC12C5A52S2\n```\n\n----------------------------------------\n\nTITLE: Customizing AT90PWM316 Settings in PlatformIO Configuration\nDESCRIPTION: Advanced configuration for an AT90PWM316 board with customized microcontroller and frequency settings. This demonstrates how to override default board settings using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/at90pwm316.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:at90pwm316]\nplatform = atmelavr\nboard = at90pwm316\n\n; change microcontroller\nboard_build.mcu = at90pwm316\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing ATmega8535 Board Settings in PlatformIO INI File\nDESCRIPTION: This code snippet demonstrates how to override default ATmega8535 settings in the PlatformIO project configuration file. It shows examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega8535.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega8535]\nplatform = atmelavr\nboard = ATmega8535\n\n; change microcontroller\nboard_build.mcu = atmega8535\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Raspberry Pi 3 Model B Settings in PlatformIO\nDESCRIPTION: This example demonstrates how to override default settings for the Raspberry Pi 3 Model B in a PlatformIO project. It shows how to change the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/linux_arm/raspberrypi_3b.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:raspberrypi_3b]\nplatform = linux_arm\nboard = raspberrypi_3b\n\n; change microcontroller\nboard_build.mcu = bcm2837\n\n; change MCU frequency\nboard_build.f_cpu = 1200000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Arduino NG or older ATmega168 Configuration\nDESCRIPTION: Advanced configuration for the Arduino NG or older ATmega168 board with customized microcontroller and frequency settings. This demonstrates how to override default board settings in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/atmegangatmega168.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:atmegangatmega168]\nplatform = atmelavr\nboard = atmegangatmega168\n\n; change microcontroller\nboard_build.mcu = atmega168\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Board Settings\nDESCRIPTION: Basic PlatformIO configuration for the Grasshopper-L082CZ board using the ststm32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/grasshopper_l082cz.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:grasshopper_l082cz]\nplatform = ststm32\nboard = grasshopper_l082cz\n```\n\n----------------------------------------\n\nTITLE: Configuring ST 32F3348DISCOVERY Board in platformio.ini\nDESCRIPTION: Basic configuration for using the ST 32F3348DISCOVERY board in a PlatformIO project. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_f334c8.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_f334c8]\nplatform = ststm32\nboard = disco_f334c8\n```\n\n----------------------------------------\n\nTITLE: Customizing Adafruit NeoKey Trinkey Board Settings\nDESCRIPTION: This snippet demonstrates how to override default board settings in the PlatformIO configuration. It shows examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_neokeytrinkey_m0.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_neokeytrinkey_m0]\nplatform = atmelsam\nboard = adafruit_neokeytrinkey_m0\n\n; change microcontroller\nboard_build.mcu = samd21e18a\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Heltec WiFi Kit 32 (V2)\nDESCRIPTION: Basic configuration for setting up a PlatformIO environment for the Heltec WiFi Kit 32 (V2) board. This snippet shows the minimal project configuration needed in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/heltec_wifi_kit_32_v2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:heltec_wifi_kit_32_v2]\nplatform = espressif32\nboard = heltec_wifi_kit_32_v2\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Filtering in PlatformIO Project Configuration\nDESCRIPTION: Example configuration showing how to use the `test_filter` option in a PlatformIO project's ini file. This configuration processes only test suites that match either 'test_common' or any test within the 'native/' directory.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/env/options/test/test_filter.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = native\ntest_filter =\n  test_common\n  native/*\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic ATtiny48 Board in PlatformIO\nDESCRIPTION: Basic platformio.ini configuration for using the Generic ATtiny48 board with the atmelavr platform. This sets up the project environment with the correct board target.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/attiny48.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:attiny48]\nplatform = atmelavr\nboard = attiny48\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO Environment for Generic STC89C52RC Board\nDESCRIPTION: Basic PlatformIO configuration for the Generic STC89C52RC board using the intel_mcs51 platform. This defines the minimal environment setup needed in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC89C52RC.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC89C52RC]\nplatform = intel_mcs51\nboard = STC89C52RC\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for SODAQ ExpLoRer\nDESCRIPTION: This snippet shows how to set the upload protocol for the SODAQ ExpLoRer board. It uses the sam-ba protocol, which is the default for this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/sodaq_explorer.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:sodaq_explorer]\nplatform = atmelsam\nboard = sodaq_explorer\n\nupload_protocol = sam-ba\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Protocol for unPhone 8\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the unPhone 8 board. This sets the protocol to esptool, which is the default protocol for this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/unphone8.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:unphone8]\nplatform = espressif32\nboard = unphone8\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Customizing Heltec WiFi LoRa 32 Board Settings\nDESCRIPTION: Example of overriding default board settings in platformio.ini, including changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/heltec_wifi_lora_32.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:heltec_wifi_lora_32]\nplatform = espressif32\nboard = heltec_wifi_lora_32\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing STC15W401AS Board Settings in PlatformIO\nDESCRIPTION: This snippet demonstrates how to override default board settings in the PlatformIO configuration. It shows how to change the microcontroller type and the MCU frequency from their default values.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15W401AS.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15W401AS]\nplatform = intel_mcs51\nboard = STC15W401AS\n\n; change microcontroller\nboard_build.mcu = stc15w401as\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Customizing Cricket-L082CZ Board Settings\nDESCRIPTION: This example demonstrates how to override default board settings in the PlatformIO configuration. It shows how to change the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/cricket_l082cz.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:cricket_l082cz]\nplatform = ststm32\nboard = cricket_l082cz\n\n; change microcontroller\nboard_build.mcu = stm32l082czy6\n\n; change MCU frequency\nboard_build.f_cpu = 32000000L\n```\n\n----------------------------------------\n\nTITLE: Basic M5Stack CoreS3 Board Configuration\nDESCRIPTION: Basic board configuration for M5Stack CoreS3 using PlatformIO. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/m5stack-cores3.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:m5stack-cores3]\nplatform = espressif32\nboard = m5stack-cores3\n```\n\n----------------------------------------\n\nTITLE: Overriding Default STC8H3K48S2 Settings in PlatformIO\nDESCRIPTION: Advanced configuration that demonstrates how to customize the board settings by overriding default values such as microcontroller type and CPU frequency in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8H3K48S2.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8H3K48S2]\nplatform = intel_mcs51\nboard = STC8H3K48S2\n\n; change microcontroller\nboard_build.mcu = stc8h3k48s2\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration in PlatformIO for SparkFun SAMD51 MicroMod\nDESCRIPTION: Basic configuration example for setting up a PlatformIO project with the SparkFun SAMD51 MicroMod board. This initializes the environment with the correct platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/sparkfun_samd51_micromod.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:sparkfun_samd51_micromod]\nplatform = atmelsam\nboard = sparkfun_samd51_micromod\n```\n\n----------------------------------------\n\nTITLE: STM32F103V8 Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the STM32F103V8 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103V8.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103V8]\nplatform = ststm32\nboard = genericSTM32F103V8\n\nupload_protocol = serial\n```\n\n----------------------------------------\n\nTITLE: Configuring LightUp Board in PlatformIO Project Configuration\nDESCRIPTION: Basic configuration for using the LightUp board in a PlatformIO project configuration file. This snippet demonstrates how to specify the board in the project's platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/lightup.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:lightup]\nplatform = atmelavr\nboard = lightup\n```\n\n----------------------------------------\n\nTITLE: Overriding Default SparkFun ESP8266 Thing Dev Board Settings\nDESCRIPTION: This snippet demonstrates how to override default board settings such as microcontroller and CPU frequency in the PlatformIO configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/thingdev.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:thingdev]\nplatform = espressif8266\nboard = thingdev\n\n; change microcontroller\nboard_build.mcu = esp8266\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO Environment for Dwenguino Board\nDESCRIPTION: This snippet shows how to set up a PlatformIO environment for the Dwenguino board in the project configuration file. It specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/dwenguino.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:dwenguino]\nplatform = atmelavr\nboard = dwenguino\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for STM32F411RC\nDESCRIPTION: Configuration to specify the upload protocol for the STM32F411RC board. This example sets it to the default 'serial' protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F411RC.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F411RC]\nplatform = ststm32\nboard = genericSTM32F411RC\n\nupload_protocol = serial\n```\n\n----------------------------------------\n\nTITLE: Customizing STEVAL-FCU001V1 Board Settings in PlatformIO\nDESCRIPTION: Example showing how to override default board settings for the STEVAL-FCU001V1 Flight controller, including changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/steval_fcu001v1.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:steval_fcu001v1]\nplatform = ststm32\nboard = steval_fcu001v1\n\n; change microcontroller\nboard_build.mcu = stm32f401ccu6\n\n; change MCU frequency\nboard_build.f_cpu = 84000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Arduino Giga R1 (M4 core) with PlatformIO\nDESCRIPTION: Basic configuration for the Arduino Giga R1 (M4 core) board in platformio.ini. This snippet defines the board and platform used for the project.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/giga_r1_m4.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:giga_r1_m4]\nplatform = ststm32\nboard = giga_r1_m4\n```\n\n----------------------------------------\n\nTITLE: Customizing MKR FOX 1200 MCU Settings\nDESCRIPTION: Advanced configuration showing how to override default microcontroller settings including MCU model and frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/mkrfox1200.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:mkrfox1200]\nplatform = atmelsam\nboard = mkrfox1200\n\n; change microcontroller\nboard_build.mcu = samd21g18a\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring AVR64DD20 Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to set up the AVR64DD20 board in the PlatformIO project configuration file. It includes the basic setup and examples of how to override default board settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/AVR64DD20.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:AVR64DD20]\nplatform = atmelmegaavr\nboard = AVR64DD20\n\n; change microcontroller\nboard_build.mcu = avr64dd20\n\n; change MCU frequency\nboard_build.f_cpu = 24000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic NIBO burger Board Settings\nDESCRIPTION: Basic PlatformIO configuration for the NIBO burger robot board using the atmelavr platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/niboburger.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:niboburger]\nplatform = atmelavr\nboard = niboburger\n```\n\n----------------------------------------\n\nTITLE: Advanced ATmega645P Board Configuration with Custom Settings\nDESCRIPTION: Extended configuration example showing how to override default board settings like microcontroller type and CPU frequency in PlatformIO.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega645P.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega645P]\nplatform = atmelavr\nboard = ATmega645P\n\n; change microcontroller\nboard_build.mcu = atmega645p\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for STC15F2K52S2\nDESCRIPTION: Basic environment configuration for STC15F2K52S2 board in platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15F2K52S2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15F2K52S2]\nplatform = intel_mcs51\nboard = STC15F2K52S2\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenBCI 32bit Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the OpenBCI 32bit board in the PlatformIO project configuration file. It sets the platform to microchippic32 and the board to openbci.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/microchippic32/openbci.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:openbci]\nplatform = microchippic32\nboard = openbci\n```\n\n----------------------------------------\n\nTITLE: Customizing ATtiny88 Board Settings in PlatformIO\nDESCRIPTION: Advanced configuration for the Generic ATtiny88 board with customized microcontroller and frequency settings. This demonstrates how to override default board settings using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/attiny88.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:attiny88]\nplatform = atmelavr\nboard = attiny88\n\n; change microcontroller\nboard_build.mcu = attiny88\n\n; change MCU frequency\nboard_build.f_cpu = 8000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced PICadillo 35T Board Configuration\nDESCRIPTION: Extended PlatformIO configuration showing how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/microchippic32/picadillo_35t.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:picadillo_35t]\nplatform = microchippic32\nboard = picadillo_35t\n\n; change microcontroller\nboard_build.mcu = 32MX795F512L\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration with MCU Settings\nDESCRIPTION: Extended configuration showing how to override default microcontroller settings and CPU frequency for Cicada-L082CZ board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/cicada_l082cz.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:cicada_l082cz]\nplatform = ststm32\nboard = cicada_l082cz\n\n; change microcontroller\nboard_build.mcu = stm32l082czy6\n\n; change MCU frequency\nboard_build.f_cpu = 32000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic PlatformIO Environment for ST Nucleo F429ZI\nDESCRIPTION: Sets up a basic PlatformIO environment for the ST Nucleo F429ZI board using the ststm32 platform. This configuration is the minimal required setup to work with this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f429zi.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f429zi]\nplatform = ststm32\nboard = nucleo_f429zi\n```\n\n----------------------------------------\n\nTITLE: ESP32 Board Configuration Table in reStructuredText\nDESCRIPTION: A table listing various ESP32-based development boards with their specifications including platform, RAM type, ESP32 variant, CPU frequency, flash memory size, and RAM size. The table is formatted in reStructuredText.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/iot-bus-jtag.rst#2025-04-10_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n* - :ref:`board_espressif32_cytron_maker_feather_aiot_s3`\n  - :ref:`platform_espressif32`\n  - External\n  - ESP32S3\n  - 240MHz\n  - 8MB\n  - 320KB\n* - :ref:`board_espressif32_d-duino-32`\n  - :ref:`platform_espressif32`\n  - External\n  - ESP32\n  - 240MHz\n  - 4MB\n  - 320KB\n* - :ref:`board_espressif32_dfrobot_beetle_esp32c3`\n  - :ref:`platform_espressif32`\n  - External\n  - ESP32C3\n  - 160MHz\n  - 4MB\n  - 320KB\n```\n\n----------------------------------------\n\nTITLE: Configuring ATtiny261 Basic Board Settings in PlatformIO\nDESCRIPTION: Basic PlatformIO configuration for ATtiny261 board setup using the atmelavr platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/attiny261.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:attiny261]\nplatform = atmelavr\nboard = attiny261\n```\n\n----------------------------------------\n\nTITLE: Overriding Default STC15F2K08S2 Board Settings in PlatformIO\nDESCRIPTION: This snippet demonstrates how to override default settings for the Generic STC15F2K08S2 board in a PlatformIO project. It shows examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15F2K08S2.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15F2K08S2]\nplatform = intel_mcs51\nboard = STC15F2K08S2\n\n; change microcontroller\nboard_build.mcu = stc15f2k08s2\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for TinyLily Board\nDESCRIPTION: Basic configuration for setting up a PlatformIO project environment for the TinyCircuits TinyLily Mini Processor board. This snippet specifies the platform as atmelavr and the board as tinylily.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/tinylily.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:tinylily]\nplatform = atmelavr\nboard = tinylily\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Generic AT89S52\nDESCRIPTION: Demonstrates how to specify the upload protocol for the Generic AT89S52 board. The default protocol is 'avrdude', but this example shows how to explicitly set it.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/AT89S52.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:AT89S52]\nplatform = intel_mcs51\nboard = AT89S52\n\nupload_protocol = avrdude\n```\n\n----------------------------------------\n\nTITLE: Customizing Heltec WiFi LoRa 32 (V3) Board Settings\nDESCRIPTION: Example of overriding default board settings in PlatformIO, such as changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/heltec_wifi_lora_32_V3.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:heltec_wifi_lora_32_V3]\nplatform = espressif32\nboard = heltec_wifi_lora_32_V3\n\n; change microcontroller\nboard_build.mcu = esp32s3\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing STC15F103E Board Configuration in PlatformIO\nDESCRIPTION: Extended configuration for the STC15F103E board that demonstrates how to override default board settings such as microcontroller type and CPU frequency using board_* options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15F103E.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15F103E]\nplatform = intel_mcs51\nboard = STC15F103E\n\n; change microcontroller\nboard_build.mcu = stc15f103e\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Basic ATmega32 Board Configuration in PlatformIO\nDESCRIPTION: Basic configuration example for setting up an ATmega32 project in PlatformIO using the atmelavr platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega32.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega32]\nplatform = atmelavr\nboard = ATmega32\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Nordic Thingy:52\nDESCRIPTION: Configuration example showing how to specify the upload protocol (JLink) for the Nordic Thingy:52 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/thingy_52.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:thingy_52]\nplatform = nordicnrf52\nboard = thingy_52\n\nupload_protocol = jlink\n```\n\n----------------------------------------\n\nTITLE: Configuring STC8G1K17A Board in PlatformIO Project Configuration\nDESCRIPTION: Basic configuration for the STC8G1K17A board in the platformio.ini file. This sets up the Intel MCS51 platform with the STC8G1K17A board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8G1K17A.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8G1K17A]\nplatform = intel_mcs51\nboard = STC8G1K17A\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Protocol for ESP32S3 CAM LCD Board\nDESCRIPTION: Configuration for specifying the upload protocol for the ESP32S3 CAM LCD board, using esptool as the default option.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32s3camlcd.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32s3camlcd]\nplatform = espressif32\nboard = esp32s3camlcd\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Customizing Board Settings in PlatformIO\nDESCRIPTION: Example of overriding default board settings in PlatformIO, such as changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/dwm1001_dev.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:dwm1001_dev]\nplatform = nordicnrf52\nboard = dwm1001_dev\n\n; change microcontroller\nboard_build.mcu = nrf52832\n\n; change MCU frequency\nboard_build.f_cpu = 64000000L\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for SparkFun Fio V3\nDESCRIPTION: Minimal configuration required to use the SparkFun Fio V3 board in a PlatformIO project environment.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/sparkfun_fiov3.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:sparkfun_fiov3]\nplatform = atmelavr\nboard = sparkfun_fiov3\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Adafruit Bluefruit nRF52832 Feather\nDESCRIPTION: Basic PlatformIO configuration for the Adafruit Bluefruit nRF52832 Feather board. Sets the platform and board options in the project's configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/adafruit_feather_nrf52832.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_feather_nrf52832]\nplatform = nordicnrf52\nboard = adafruit_feather_nrf52832\n```\n\n----------------------------------------\n\nTITLE: Customized PlatformIO Configuration for STC8F2K08S2 Board\nDESCRIPTION: Extended configuration for STC8F2K08S2 board showing how to override default board settings like microcontroller type and CPU frequency in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8F2K08S2.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8F2K08S2]\nplatform = intel_mcs51\nboard = STC8F2K08S2\n\n; change microcontroller\nboard_build.mcu = stc8f2k08s2\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Customizing NIBO burger MCU Settings\nDESCRIPTION: Extended PlatformIO configuration showing how to override default microcontroller and frequency settings for the NIBO burger robot board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/niboburger.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:niboburger]\nplatform = atmelavr\nboard = niboburger\n\n; change microcontroller\nboard_build.mcu = atmega16\n\n; change MCU frequency\nboard_build.f_cpu = 15000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Project Environment for Generic ML56LD1AE in PlatformIO\nDESCRIPTION: Basic PlatformIO project configuration for the Generic ML56LD1AE board. This snippet shows how to set up the project environment by specifying the platform and board in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/ML56LD1AE.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ML56LD1AE]\nplatform = intel_mcs51\nboard = ML56LD1AE\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration for WeAct MiniSTM32H743VITX\nDESCRIPTION: Basic PlatformIO configuration for initializing the WeAct Studio MiniSTM32H743VITX board using the STM32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/weact_mini_h743vitx.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:weact_mini_h743vitx]\nplatform = ststm32\nboard = weact_mini_h743vitx\n```\n\n----------------------------------------\n\nTITLE: Advanced Generic8051 Board Configuration with Overrides\nDESCRIPTION: Extended configuration for Generic 8051 board with custom microcontroller and frequency settings using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/Generic8051.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:Generic8051]\nplatform = intel_mcs51\nboard = Generic8051\n\n; change microcontroller\nboard_build.mcu = 8051\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for nRF52832-MDK\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/nrf52832_mdk.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:nrf52832_mdk]\nplatform = nordicnrf52\nboard = nrf52832_mdk\n\nupload_protocol = cmsis-dap\n```\n\n----------------------------------------\n\nTITLE: Customizing Arduino Zero Board Settings\nDESCRIPTION: This example demonstrates how to override default Arduino Zero board settings in the PlatformIO configuration. It shows how to change the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/zero.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:zero]\nplatform = atmelsam\nboard = zero\n\n; change microcontroller\nboard_build.mcu = samd21g18a\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Adafruit Bluefruit nRF52832 Feather Board Settings\nDESCRIPTION: Example of overriding default board settings in PlatformIO configuration. Demonstrates changing the microcontroller and MCU frequency for the Adafruit Bluefruit nRF52832 Feather.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/adafruit_feather_nrf52832.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_feather_nrf52832]\nplatform = nordicnrf52\nboard = adafruit_feather_nrf52832\n\n; change microcontroller\nboard_build.mcu = nrf52832\n\n; change MCU frequency\nboard_build.f_cpu = 64000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Microduino Core Board Configuration in PlatformIO\nDESCRIPTION: Extended configuration for the Microduino Core board with customized microcontroller settings and MCU frequency. Shows how to override default board settings using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/328p16m.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:328p16m]\nplatform = atmelavr\nboard = 328p16m\n\n; change microcontroller\nboard_build.mcu = atmega328p\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring ATmega1284 Board in platformio.ini\nDESCRIPTION: Basic configuration for the ATmega1284 board in the platformio.ini file. This sets up the build environment with the correct platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega1284.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega1284]\nplatform = atmelavr\nboard = ATmega1284\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU Settings\nDESCRIPTION: Extended configuration example showing how to override default board settings like microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/adafruit_itsybitsy_nrf52840.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_itsybitsy_nrf52840]\nplatform = nordicnrf52\nboard = adafruit_itsybitsy_nrf52840\n\n; change microcontroller\nboard_build.mcu = nrf52840\n\n; change MCU frequency\nboard_build.f_cpu = 64000000L\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration for STM32 Platform\nDESCRIPTION: Demonstrates the basic PlatformIO configuration for the SeeedStudio LoRa E5 Dev Board using the STM32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/lora_e5_dev_board.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:lora_e5_dev_board]\nplatform = ststm32\nboard = lora_e5_dev_board\n```\n\n----------------------------------------\n\nTITLE: Customizing ATmega128 Board Settings in PlatformIO.ini\nDESCRIPTION: Extended configuration for ATmega128/A board with custom microcontroller and frequency settings. This demonstrates how to override default board settings defined in the board manifest file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega128.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega128]\nplatform = atmelavr\nboard = ATmega128\n\n; change microcontroller\nboard_build.mcu = atmega128\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing ST DISCO-L072CZ-LRWAN1 Board Settings in PlatformIO\nDESCRIPTION: Example of overriding default board settings in the PlatformIO configuration. Demonstrates changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_l072cz_lrwan1.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_l072cz_lrwan1]\nplatform = ststm32\nboard = disco_l072cz_lrwan1\n\n; change microcontroller\nboard_build.mcu = stm32l072cz\n\n; change MCU frequency\nboard_build.f_cpu = 32000000L\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for Prusa RAMBo\nDESCRIPTION: Basic environment configuration for the Prusa RAMBo board using the atmelavr platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/prusa_rambo.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:prusa_rambo]\nplatform = atmelavr\nboard = prusa_rambo\n```\n\n----------------------------------------\n\nTITLE: Customizing N79E824 Board Settings in platformio.ini\nDESCRIPTION: Advanced configuration example showing how to override default board settings in platformio.ini. Demonstrates changing the microcontroller type and MCU frequency for the Generic N79E824 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/N79E824.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:N79E824]\nplatform = intel_mcs51\nboard = N79E824\n\n; change microcontroller\nboard_build.mcu = n79e824\n\n; change MCU frequency\nboard_build.f_cpu = 6000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing STC8H8K60U Board Parameters in PlatformIO\nDESCRIPTION: Advanced PlatformIO project configuration for the STC8H8K60U board with custom settings. This example shows how to override default board parameters like microcontroller model and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8H8K60U.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8H8K60U]\nplatform = intel_mcs51\nboard = STC8H8K60U\n\n; change microcontroller\nboard_build.mcu = stc8h8k60u\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom J-LINK Debug Server\nDESCRIPTION: Demonstrates how to set up a custom J-LINK GDB server with specific parameters for debugging an STM32 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/jlink.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:debug_jlink]\nplatform = ststm32\nframework = mbed\nboard = nucleo_f446re\n\ndebug_tool = jlink\ndebug_port = :2331\n\ndebug_server =\n  /full/path/to/JLinkGDBServerCL\n  -singlerun\n  -if\n  SWD\n  -select\n  USB\n  -port\n  2331\n  -device\n  STM32F446RE\n```\n\n----------------------------------------\n\nTITLE: Configuring Smart Bee Data Logger Board in PlatformIO\nDESCRIPTION: Basic configuration for the Smart Bee Data Logger board in the project's platformio.ini file. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/bee_data_logger.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:bee_data_logger]\nplatform = espressif32\nboard = bee_data_logger\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with Custom Settings\nDESCRIPTION: Example showing how to override default board settings like microcontroller type and CPU frequency in PlatformIO configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/quantum.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:quantum]\nplatform = espressif32\nboard = quantum\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Board Settings with Override Options\nDESCRIPTION: Example showing how to override default board settings like microcontroller type and CPU frequency in the configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nicla_vision.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nicla_vision]\nplatform = ststm32\nboard = nicla_vision\n\n; change microcontroller\nboard_build.mcu = stm32h747xih6\n\n; change MCU frequency\nboard_build.f_cpu = 480000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Seeed Tiny BLE\nDESCRIPTION: Configuration example showing how to set the upload protocol for the Seeed Tiny BLE board. In this case, it's set to cmsis-dap.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf51/seeedTinyBLE.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:seeedTinyBLE]\nplatform = nordicnrf51\nboard = seeedTinyBLE\n\nupload_protocol = cmsis-dap\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration for PlatformIO\nDESCRIPTION: Basic configuration setup for WEMOS LOLIN S3 Mini board in platformio.ini file\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/lolin_s3_mini.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:lolin_s3_mini]\nplatform = espressif32\nboard = lolin_s3_mini\n```\n\n----------------------------------------\n\nTITLE: Customizing Heltec CubeCell-1/2AA Node Settings in PlatformIO INI\nDESCRIPTION: This snippet demonstrates how to override default board settings for the Heltec CubeCell-1/2AA Node (HTCC-AB02A) in a PlatformIO project. It shows examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/heltec-cubecell/cubecell_node.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:cubecell_node]\nplatform = heltec-cubecell\nboard = cubecell_node\n\n; change microcontroller\nboard_build.mcu = asr6502\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring ST Nucleo L031K6 Board in PlatformIO\nDESCRIPTION: Basic PlatformIO configuration for the ST Nucleo L031K6 board, including platform and board selection.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_l031k6.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_l031k6]\nplatform = ststm32\nboard = nucleo_l031k6\n```\n\n----------------------------------------\n\nTITLE: Customizing STC15F202A Board Parameters in PlatformIO\nDESCRIPTION: Advanced configuration for the STC15F202A board in the platformio.ini project file. This example demonstrates how to override default board settings, specifically changing the microcontroller model and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15F202A.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15F202A]\nplatform = intel_mcs51\nboard = STC15F202A\n\n; change microcontroller\nboard_build.mcu = stc15f202a\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Configuring Unexpected Maker FeatherS2 Neo Board in platformio.ini\nDESCRIPTION: Basic configuration for the Unexpected Maker FeatherS2 Neo board in the PlatformIO project configuration file. Sets the platform to espressif32 and specifies the board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/um_feathers2_neo.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:um_feathers2_neo]\nplatform = espressif32\nboard = um_feathers2_neo\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration with Custom Settings\nDESCRIPTION: Extended configuration demonstrating how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/one.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:one]\nplatform = atmelavr\nboard = one\n\n; change microcontroller\nboard_build.mcu = atmega32u4\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic PlatformIO Environment for MultiTech mDot F411\nDESCRIPTION: Basic configuration for setting up a PlatformIO environment for the MultiTech mDot F411 board. This defines the platform as STM32 and specifies the board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/mts_mdot_f411re.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:mts_mdot_f411re]\nplatform = ststm32\nboard = mts_mdot_f411re\n```\n\n----------------------------------------\n\nTITLE: Customizing Wicked Device WildFire V3 Settings in PlatformIO INI File\nDESCRIPTION: This snippet demonstrates how to override default settings for the Wicked Device WildFire V3 board in the PlatformIO configuration. It shows how to change the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/wildfirev3.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:wildfirev3]\nplatform = atmelavr\nboard = wildfirev3\n\n; change microcontroller\nboard_build.mcu = atmega1284p\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic PlatformIO Environment for Sanguino ATmega1284p (8MHz) in INI\nDESCRIPTION: Basic configuration for setting up a PlatformIO environment for the Sanguino ATmega1284p (8MHz) board. The configuration specifies the platform as atmelavr and the board as sanguino_atmega1284_8m.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/sanguino_atmega1284_8m.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:sanguino_atmega1284_8m]\nplatform = atmelavr\nboard = sanguino_atmega1284_8m\n```\n\n----------------------------------------\n\nTITLE: Basic Sonoff TH Board Configuration\nDESCRIPTION: Basic PlatformIO configuration for Sonoff TH board using espressif8266 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/sonoff_th.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:sonoff_th]\nplatform = espressif8266\nboard = sonoff_th\n```\n\n----------------------------------------\n\nTITLE: Customizing PYBSTICK26 Duino MCU Settings in PlatformIO\nDESCRIPTION: Advanced configuration example showing how to override default board settings such as microcontroller model and CPU frequency in the PlatformIO project file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/pybstick26_duino.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:pybstick26_duino]\nplatform = ststm32\nboard = pybstick26_duino\n\n; change microcontroller\nboard_build.mcu = stm32f072rb\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Basic HiFive1 Board Configuration - PlatformIO INI\nDESCRIPTION: Basic configuration for setting up a HiFive1 board project in PlatformIO. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/sifive/hifive1.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:hifive1]\nplatform = sifive\nboard = hifive1\n```\n\n----------------------------------------\n\nTITLE: Customizing STC8H4K60LCD Board Configuration in platformio.ini\nDESCRIPTION: Advanced configuration example showing how to override default settings for the STC8H4K60LCD board, including changing the microcontroller model and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8H4K60LCD.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8H4K60LCD]\nplatform = intel_mcs51\nboard = STC8H4K60LCD\n\n; change microcontroller\nboard_build.mcu = stc8h4k60lcd\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Advanced ATmega165P Board Configuration with Custom Settings\nDESCRIPTION: Extended configuration demonstrating how to override default board settings like microcontroller model and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega165P.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega165P]\nplatform = atmelavr\nboard = ATmega165P\n\n; change microcontroller\nboard_build.mcu = atmega165p\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Arduino MKR WiFi 1010 Board in PlatformIO\nDESCRIPTION: Basic configuration for the Arduino MKR WiFi 1010 board in the PlatformIO project's configuration file. This sets up the atmelsam platform with the mkrwifi1010 board identifier.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/mkrwifi1010.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:mkrwifi1010]\nplatform = atmelsam\nboard = mkrwifi1010\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration with Custom Settings\nDESCRIPTION: Extended configuration showing how to override default board settings like microcontroller model and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15F204EA.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15F204EA]\nplatform = intel_mcs51\nboard = STC15F204EA\n\n; change microcontroller\nboard_build.mcu = stc15f204ea\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Configuring Invent One Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the Invent One board in the PlatformIO project configuration file. It specifies the platform and board name.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/inventone.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:inventone]\nplatform = espressif8266\nboard = inventone\n```\n\n----------------------------------------\n\nTITLE: Customizing SLSTK3400A Board Parameters\nDESCRIPTION: Example of overriding default board settings like microcontroller type and CPU frequency in the PlatformIO configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/siliconlabsefm32/efm32hg_stk3400.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:efm32hg_stk3400]\nplatform = siliconlabsefm32\nboard = efm32hg_stk3400\n\n; change microcontroller\nboard_build.mcu = efm32hg322f64\n\n; change MCU frequency\nboard_build.f_cpu = 25000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced ATmega3250P Board Configuration with Custom Settings\nDESCRIPTION: Extended configuration for ATmega3250P board with custom microcontroller and frequency settings\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega3250P.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega3250P]\nplatform = atmelavr\nboard = ATmega3250P\n\n; change microcontroller\nboard_build.mcu = atmega3250p\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration - PlatformIO INI\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the SainSmart Due board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/sainSmartDueUSB.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:sainSmartDueUSB]\nplatform = atmelsam\nboard = sainSmartDueUSB\n\nupload_protocol = sam-ba\n```\n\n----------------------------------------\n\nTITLE: Using pio org remove Command Syntax in PlatformIO CLI\nDESCRIPTION: The basic syntax for removing a user from a PlatformIO organization using the CLI command. It requires specifying both the organization name and the username to be removed.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/org/cmd_remove.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio org remove ORGNAME USERNAME\n```\n\n----------------------------------------\n\nTITLE: Customizing ATmega1284 Board Settings\nDESCRIPTION: Example of overriding default board settings in platformio.ini. This demonstrates how to change the microcontroller and CPU frequency for the ATmega1284 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega1284.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega1284]\nplatform = atmelavr\nboard = ATmega1284\n\n; change microcontroller\nboard_build.mcu = atmega1284\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring ATmega324PB Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the ATmega324PB board in the PlatformIO project configuration file. It includes the basic setup and examples of how to override default board settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega324PB.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega324PB]\nplatform = atmelavr\nboard = ATmega324PB\n\n; change microcontroller\nboard_build.mcu = atmega324pb\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Post-Install Python Script in PlatformIO Package\nDESCRIPTION: Example configuration for running a Python script after package installation. The script is located in the package's 'scripts' folder and will be executed automatically after installation completes.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/manifests/library-json/fields/scripts.rst#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"scripts\": {\n    \"postinstall\": \"scripts/after_install.py\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration for Arduino Uno R4 WiFi\nDESCRIPTION: Basic PlatformIO configuration for Arduino Uno R4 WiFi board using the Renesas RA platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/renesas-ra/uno_r4_wifi.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:uno_r4_wifi]\nplatform = renesas-ra\nboard = uno_r4_wifi\n```\n\n----------------------------------------\n\nTITLE: Customizing ESP32-CAM Hardware Settings in PlatformIO\nDESCRIPTION: Advanced configuration for customizing microcontroller and CPU frequency settings for the AI Thinker ESP32-CAM board in PlatformIO. This demonstrates how to override default board settings using board_*** options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32cam.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32cam]\nplatform = espressif32\nboard = esp32cam\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing MCU and CPU Frequency for Unexpected Maker PROS3\nDESCRIPTION: Configuration for overriding default board settings in PlatformIO. This snippet demonstrates how to customize the microcontroller type and CPU frequency by modifying the board_build.mcu and board_build.f_cpu parameters.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/um_pros3.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:um_pros3]\nplatform = espressif32\nboard = um_pros3\n\n; change microcontroller\nboard_build.mcu = esp32s3\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Arty FPGA Dev Kit\nDESCRIPTION: Configuration to change the upload protocol for the Arty FPGA Dev Kit. The example uses the FTDI protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/sifive/e310-arty.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:e310-arty]\nplatform = sifive\nboard = e310-arty\n\nupload_protocol = ftdi\n```\n\n----------------------------------------\n\nTITLE: Customizing M5Stack Station Board Settings\nDESCRIPTION: This example demonstrates how to override default M5Stack Station settings in the PlatformIO configuration. It shows how to change the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/m5stack-station.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:m5stack-station]\nplatform = espressif32\nboard = m5stack-station\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring WeMos D1 mini Lite Board in PlatformIO\nDESCRIPTION: This snippet shows how to configure the WeMos D1 mini Lite board in the PlatformIO project configuration file. It sets the platform to espressif8266 and the board to d1_mini_lite.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/d1_mini_lite.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:d1_mini_lite]\nplatform = espressif8266\nboard = d1_mini_lite\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration for W79E8213\nDESCRIPTION: Defines the basic PlatformIO project configuration for W79E8213 board using intel_mcs51 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/W79E8213.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:W79E8213]\nplatform = intel_mcs51\nboard = W79E8213\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO Environment for ATmega649 Board\nDESCRIPTION: Basic configuration for setting up a PlatformIO project with the ATmega649 board. Specifies the atmelavr platform and ATmega649 board ID in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega649.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega649]\nplatform = atmelavr\nboard = ATmega649\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for RYMCU STM32F407VE Board\nDESCRIPTION: Basic configuration for the RYMCU STM32F407VE board in the platformio.ini project configuration file. This snippet shows the minimal required settings to target this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/rymcu_f407ve.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:rymcu_f407ve]\nplatform = ststm32\nboard = rymcu_f407ve\n```\n\n----------------------------------------\n\nTITLE: Configuring ML51TC0AE Board in PlatformIO Project Configuration\nDESCRIPTION: Basic configuration for the Generic ML51TC0AE board in the PlatformIO project configuration file. Sets the platform to Intel MCS-51 and specifies the board type.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/ML51TC0AE.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ML51TC0AE]\nplatform = intel_mcs51\nboard = ML51TC0AE\n```\n\n----------------------------------------\n\nTITLE: Customizing Ai-Thinker ESP-C3-M1-I-Kit Board Settings\nDESCRIPTION: Example of overriding default board settings in platformio.ini. Demonstrates changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32-c3-m1i-kit.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32-c3-m1i-kit]\nplatform = espressif32\nboard = esp32-c3-m1i-kit\n\n; change microcontroller\nboard_build.mcu = esp32c3\n\n; change MCU frequency\nboard_build.f_cpu = 160000000L\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to set the upload protocol for the STM32373C-EVAL board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/eval_f373vc.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:eval_f373vc]\nplatform = ststm32\nboard = eval_f373vc\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration for MS51IA9AE\nDESCRIPTION: Basic PlatformIO configuration for setting up MS51IA9AE board with intel_mcs51 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/MS51IA9AE.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:MS51IA9AE]\nplatform = intel_mcs51\nboard = MS51IA9AE\n```\n\n----------------------------------------\n\nTITLE: Customizing 96Boards Nitrogen MCU Settings\nDESCRIPTION: Advanced configuration that shows how to override default board settings such as microcontroller type and CPU frequency in the PlatformIO project configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/96b_nitrogen.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:96b_nitrogen]\nplatform = nordicnrf52\nboard = 96b_nitrogen\n\n; change microcontroller\nboard_build.mcu = nrf52832\n\n; change MCU frequency\nboard_build.f_cpu = 64000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Teensy 3.1 Board Settings\nDESCRIPTION: Extended PlatformIO configuration that demonstrates how to override default Teensy 3.1 / 3.2 settings such as microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/teensy/teensy31.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:teensy31]\nplatform = teensy\nboard = teensy31\n\n; change microcontroller\nboard_build.mcu = mk20dx256\n\n; change MCU frequency\nboard_build.f_cpu = 72000000L\n```\n\n----------------------------------------\n\nTITLE: Overriding Default AVR32DB48 Settings in PlatformIO INI File\nDESCRIPTION: This example demonstrates how to override default settings for the AVR32DB48 board in the PlatformIO configuration. It shows how to change the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/AVR32DB48.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:AVR32DB48]\nplatform = atmelmegaavr\nboard = AVR32DB48\n\n; change microcontroller\nboard_build.mcu = avr32db48\n\n; change MCU frequency\nboard_build.f_cpu = 24000000L\n```\n\n----------------------------------------\n\nTITLE: Basic ESP32 Board Configuration\nDESCRIPTION: Basic configuration for the Nebula S3 board using the espressif32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/nebulas3.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nebulas3]\nplatform = espressif32\nboard = nebulas3\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for STM32F103R8\nDESCRIPTION: Configuration to change the upload protocol for the STM32F103R8 board. In this example, it's set to 'stlink'.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103R8.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103R8]\nplatform = ststm32\nboard = genericSTM32F103R8\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic PlatformIO Project for Heltec CubeCell-Board PRO\nDESCRIPTION: Basic PlatformIO configuration for Heltec CubeCell-Board PRO (HTCC-AB03). This snippet shows how to specify the board and platform in the project's platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/heltec-cubecell/cubecell_board_pro.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:cubecell_board_pro]\nplatform = heltec-cubecell\nboard = cubecell_board_pro\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Heltec WiFi Kit 32 in PlatformIO\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the Heltec WiFi Kit 32 board in PlatformIO.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/heltec_wifi_kit_32.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:heltec_wifi_kit_32]\nplatform = espressif32\nboard = heltec_wifi_kit_32\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring Arduino MKR1000 in PlatformIO\nDESCRIPTION: Basic configuration for the Arduino MKR1000 board in the PlatformIO project configuration file. This snippet shows how to specify the board using the 'mkr1000USB' ID with the atmelsam platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/mkr1000USB.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:mkr1000USB]\nplatform = atmelsam\nboard = mkr1000USB\n```\n\n----------------------------------------\n\nTITLE: Customizing Flora Board MCU Settings in PlatformIO\nDESCRIPTION: Advanced configuration showing how to override default microcontroller and frequency settings for the Adafruit Flora board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/flora8.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:flora8]\nplatform = atmelavr\nboard = flora8\n\n; change microcontroller\nboard_build.mcu = atmega32u4\n\n; change MCU frequency\nboard_build.f_cpu = 8000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with Custom Settings\nDESCRIPTION: Extended PlatformIO configuration showing how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8H4K60TLCD.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8H4K60TLCD]\nplatform = intel_mcs51\nboard = STC8H4K60TLCD\n\n; change microcontroller\nboard_build.mcu = stc8h4k60tlcd\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Basic PrntrBoard V2 Configuration\nDESCRIPTION: Basic configuration for PrntrBoard V2 in PlatformIO project configuration file. Sets up the STM32 platform and board definition.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/prntr_v2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:prntr_v2]\nplatform = ststm32\nboard = prntr_v2\n```\n\n----------------------------------------\n\nTITLE: Customizing Thunderboard Sense 2 MCU and Frequency\nDESCRIPTION: Example of overriding default board settings in platformio.ini, including changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/siliconlabsefm32/tb_sense_12.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:tb_sense_12]\nplatform = siliconlabsefm32\nboard = tb_sense_12\n\n; change microcontroller\nboard_build.mcu = EFR32MG12P432F1024\n\n; change MCU frequency\nboard_build.f_cpu = 40000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Digispark Pro Board\nDESCRIPTION: Basic configuration for setting up a PlatformIO project environment for the Digispark Pro board. This snippet defines the essential parameters in the platformio.ini file needed to target this specific board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/digispark-pro.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:digispark-pro]\nplatform = atmelavr\nboard = digispark-pro\n```\n\n----------------------------------------\n\nTITLE: Configuring Seeed Studio XIAO ESP32S3 Board in PlatformIO\nDESCRIPTION: Basic configuration for the Seeed Studio XIAO ESP32S3 board in the project's platformio.ini file. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/seeed_xiao_esp32s3.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:seeed_xiao_esp32s3]\nplatform = espressif32\nboard = seeed_xiao_esp32s3\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Ai-Thinker ESP-C3-M1-I-Kit\nDESCRIPTION: Example of changing the upload protocol in platformio.ini. Sets the upload protocol to esptool, which is the default for this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32-c3-m1i-kit.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32-c3-m1i-kit]\nplatform = espressif32\nboard = esp32-c3-m1i-kit\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Customizing N79E823 Board Configuration in platformio.ini\nDESCRIPTION: Advanced configuration for the Generic N79E823 board with custom microcontroller and frequency settings. This example shows how to override default board settings in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/N79E823.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:N79E823]\nplatform = intel_mcs51\nboard = N79E823\n\n; change microcontroller\nboard_build.mcu = n79e823\n\n; change MCU frequency\nboard_build.f_cpu = 6000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Arduino MKR GSM 1400 Board in platformio.ini\nDESCRIPTION: Sets up the build environment for the Arduino MKR GSM 1400 board using the atmelsam platform. This snippet demonstrates how to specify the board and optionally override default settings like microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/mkrgsm1400.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:mkrgsm1400]\nplatform = atmelsam\nboard = mkrgsm1400\n\n; change microcontroller\nboard_build.mcu = samd21g18a\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Defining table of contents in reStructuredText\nDESCRIPTION: This snippet defines a table of contents for the document, including links to installation guide, quickstart guide, and user guide, with a maximum depth of 2.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/index.rst#2025-04-10_snippet_2\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :maxdepth: 2\n\n    installation/index\n    quickstart\n    userguide/index\n```\n\n----------------------------------------\n\nTITLE: Configuring WeAct Studio BlackPill V2.0 (STM32F401CC) in PlatformIO\nDESCRIPTION: Example configuration for the WeAct Studio BlackPill V2.0 (STM32F401CC) board in the PlatformIO project configuration file. It sets the platform, board, and board-specific options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/blackpill_f401cc.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:blackpill_f401cc]\nplatform = ststm32\nboard = blackpill_f401cc\n\n; change microcontroller\nboard_build.mcu = stm32f401ccu6\n\n; change MCU frequency\nboard_build.f_cpu = 84000000L\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration in PlatformIO\nDESCRIPTION: Basic configuration for setting up the IAP15W413AS board in the PlatformIO environment file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/IAP15W413AS.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:IAP15W413AS]\nplatform = intel_mcs51\nboard = IAP15W413AS\n```\n\n----------------------------------------\n\nTITLE: Customizing Generic ML51TB9AE Board Settings in PlatformIO\nDESCRIPTION: This snippet demonstrates how to override default settings for the Generic ML51TB9AE board in a PlatformIO project. It includes examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/ML51TB9AE.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ML51TB9AE]\nplatform = intel_mcs51\nboard = ML51TB9AE\n\n; change microcontroller\nboard_build.mcu = ml51tb9ae\n\n; change MCU frequency\nboard_build.f_cpu = 24000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Arduino Nicla Sense ME\nDESCRIPTION: This snippet shows how to set the upload protocol for the Arduino Nicla Sense ME board in the PlatformIO configuration. It sets the protocol to cmsis-dap, which is the default for this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/nicla_sense_me.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:nicla_sense_me]\nplatform = nordicnrf52\nboard = nicla_sense_me\n\nupload_protocol = cmsis-dap\n```\n\n----------------------------------------\n\nTITLE: Basic Node32s Board Configuration in PlatformIO\nDESCRIPTION: Basic configuration example for setting up a Node32s board project in PlatformIO using the espressif32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/node32s.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:node32s]\nplatform = espressif32\nboard = node32s\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Generic STC15W404S Board\nDESCRIPTION: This snippet shows how to configure a PlatformIO project for the Generic STC15W404S board. It sets the platform to intel_mcs51 and specifies the board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15W404S.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15W404S]\nplatform = intel_mcs51\nboard = STC15W404S\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for IAP15F106 Board\nDESCRIPTION: Basic configuration to use the IAP15F106 board in a PlatformIO project's platformio.ini file. This sets up the project to target the Intel MCS-51 platform with the IAP15F106 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/IAP15F106.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:IAP15F106]\nplatform = intel_mcs51\nboard = IAP15F106\n```\n\n----------------------------------------\n\nTITLE: Configuring Altair Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the Altair board in a PlatformIO project's configuration file. It sets the platform to atmelavr and specifies the board as altair.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/altair.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:altair]\nplatform = atmelavr\nboard = altair\n```\n\n----------------------------------------\n\nTITLE: Configuring IceZUM Alhambra FPGA in PlatformIO Project\nDESCRIPTION: Basic configuration for using the IceZUM Alhambra FPGA board in a PlatformIO project file. This sets up the lattice_ice40 platform with the icezum board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/lattice_ice40/icezum.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:icezum]\nplatform = lattice_ice40\nboard = icezum\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for WeAct Studio BlackPill V2.0 (STM32F401CC)\nDESCRIPTION: Configuration example showing how to set the upload protocol for the WeAct Studio BlackPill V2.0 (STM32F401CC) board in the PlatformIO project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/blackpill_f401cc.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:blackpill_f401cc]\nplatform = ststm32\nboard = blackpill_f401cc\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Custom MCU Configuration\nDESCRIPTION: Example showing how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f031k6.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f031k6]\nplatform = ststm32\nboard = nucleo_f031k6\n\n; change microcontroller\nboard_build.mcu = stm32f031k6t6\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic ATtiny427 Board Setup in PlatformIO\nDESCRIPTION: Basic configuration for the ATtiny427 board in the platformio.ini file. This snippet sets up the platform and board for a PlatformIO project using the atmelmegaavr platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/ATtiny427.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATtiny427]\nplatform = atmelmegaavr\nboard = ATtiny427\n```\n\n----------------------------------------\n\nTITLE: Customizing Seeeduino Femto M0 Board Settings\nDESCRIPTION: Example of overriding default board settings in platformio.ini. This snippet demonstrates changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/seeed_femto.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:seeed_femto]\nplatform = atmelsam\nboard = seeed_femto\n\n; change microcontroller\nboard_build.mcu = samd21g18a\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing ATtiny1606 Board Parameters in PlatformIO\nDESCRIPTION: Advanced configuration showing how to override default board settings like microcontroller type and CPU frequency in the PlatformIO project configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/ATtiny1606.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATtiny1606]\nplatform = atmelmegaavr\nboard = ATtiny1606\n\n; change microcontroller\nboard_build.mcu = attiny1606\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Generic STC8C2K64S4 Board Settings in PlatformIO\nDESCRIPTION: This snippet demonstrates how to override default board settings in PlatformIO. It shows examples of changing the microcontroller and MCU frequency for the Generic STC8C2K64S4 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8C2K64S4.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8C2K64S4]\nplatform = intel_mcs51\nboard = STC8C2K64S4\n\n; change microcontroller\nboard_build.mcu = stc8c2k64s4\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Customizing MultiTech mDot F411 Board Settings in PlatformIO\nDESCRIPTION: Example showing how to override default board settings such as microcontroller type and CPU frequency in the PlatformIO configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/mts_mdot_f411re.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:mts_mdot_f411re]\nplatform = ststm32\nboard = mts_mdot_f411re\n\n; change microcontroller\nboard_build.mcu = stm32f411ret6\n\n; change MCU frequency\nboard_build.f_cpu = 100000000L\n```\n\n----------------------------------------\n\nTITLE: Basic STM32F103ZF Board Configuration\nDESCRIPTION: Minimal configuration required to use the STM32F103ZF board in PlatformIO projects.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103ZF.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103ZF]\nplatform = ststm32\nboard = genericSTM32F103ZF\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Generic STC15F205A Board\nDESCRIPTION: This snippet shows how to configure the project configuration file (platformio.ini) for the Generic STC15F205A board. It sets the platform to intel_mcs51 and specifies the board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15F205A.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15F205A]\nplatform = intel_mcs51\nboard = STC15F205A\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Example configuration for specifying the upload protocol for Smart Bee Motion S3 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/bee_motion_s3.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:bee_motion_s3]\nplatform = espressif32\nboard = bee_motion_s3\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring Adafruit Hallowing M0 Board in PlatformIO INI\nDESCRIPTION: This snippet shows how to configure the Adafruit Hallowing M0 board in the PlatformIO project configuration file. It includes options for changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_hallowing.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_hallowing]\nplatform = atmelsam\nboard = adafruit_hallowing\n\n; change microcontroller\nboard_build.mcu = samd21g18a\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for ATtiny806\nDESCRIPTION: Basic configuration for setting up an ATtiny806 project in PlatformIO. This snippet sets the platform to atmelmegaavr and specifies the ATtiny806 board in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/ATtiny806.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATtiny806]\nplatform = atmelmegaavr\nboard = ATtiny806\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for STM32F103ZD in PlatformIO\nDESCRIPTION: Configuration example showing how to specify the upload protocol for an STM32F103ZD board. This example uses the default 'stlink' protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103ZD.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103ZD]\nplatform = ststm32\nboard = genericSTM32F103ZD\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Customizing Black STM32F407ZG Board Settings\nDESCRIPTION: Example of overriding default board settings in PlatformIO, such as changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/black_f407zg.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:black_f407zg]\nplatform = ststm32\nboard = black_f407zg\n\n; change microcontroller\nboard_build.mcu = stm32f407zgt6\n\n; change MCU frequency\nboard_build.f_cpu = 168000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring AVR128DA32 Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the AVR128DA32 board in the PlatformIO project configuration file. It sets the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/AVR128DA32.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:AVR128DA32]\nplatform = atmelmegaavr\nboard = AVR128DA32\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Board Configuration for STC8H3K64S2\nDESCRIPTION: Basic configuration setup for the STC8H3K64S2 board in platformio.ini file, specifying the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8H3K64S2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8H3K64S2]\nplatform = intel_mcs51\nboard = STC8H3K64S2\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for RemRam v1 in PlatformIO\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the RemRam v1 board. This snippet demonstrates using the ST-Link protocol, which is the default option.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/remram_v1.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:remram_v1]\nplatform = ststm32\nboard = remram_v1\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Customizing Blues Cygnet MCU Settings\nDESCRIPTION: PlatformIO configuration with custom microcontroller and frequency settings for Blues Cygnet board\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/blues_cygnet.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:blues_cygnet]\nplatform = ststm32\nboard = blues_cygnet\n\n; change microcontroller\nboard_build.mcu = stm32l433cct6\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Creating RestructuredText Reference for Core Installation\nDESCRIPTION: This snippet creates a RestructuredText reference label for the core installation section. It allows for easy linking to this section from other parts of the documentation.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/installation/index.rst#2025-04-10_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. _core_installation:\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Generic 8052 Settings in PlatformIO INI File\nDESCRIPTION: This snippet demonstrates how to override default settings for the Generic 8052 board in the PlatformIO configuration. It shows examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/Generic8052.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:Generic8052]\nplatform = intel_mcs51\nboard = Generic8052\n\n; change microcontroller\nboard_build.mcu = 8052\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Environment for STC15W402AS in PlatformIO\nDESCRIPTION: Basic configuration setup for the STC15W402AS board in a PlatformIO project configuration file. This snippet defines the environment, platform, and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15W402AS.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15W402AS]\nplatform = intel_mcs51\nboard = STC15W402AS\n```\n\n----------------------------------------\n\nTITLE: Configuring Particle Argon Board in PlatformIO INI File\nDESCRIPTION: Basic configuration for the Particle Argon board in the PlatformIO project configuration file. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/particle_argon.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:particle_argon]\nplatform = nordicnrf52\nboard = particle_argon\n```\n\n----------------------------------------\n\nTITLE: Node32s Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for Node32s board programming.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/node32s.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:node32s]\nplatform = espressif32\nboard = node32s\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Advanced OSHChip Configuration with Custom MCU Settings\nDESCRIPTION: Extended PlatformIO configuration for the OSHChip board with customized microcontroller and frequency settings. This example demonstrates how to override default board settings using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf51/oshchip.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:oshchip]\nplatform = nordicnrf51\nboard = oshchip\n\n; change microcontroller\nboard_build.mcu = nrf51822\n\n; change MCU frequency\nboard_build.f_cpu = 32000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Arduino BT ATmega328 Board Settings in PlatformIO INI file\nDESCRIPTION: This code snippet demonstrates how to override default settings for the Arduino BT ATmega328 board in a PlatformIO project. It shows examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/btatmega328.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:btatmega328]\nplatform = atmelavr\nboard = btatmega328\n\n; change microcontroller\nboard_build.mcu = atmega328p\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Adafruit Feather ESP32-S3 Board in PlatformIO\nDESCRIPTION: Basic configuration for the Adafruit Feather ESP32-S3 2MB PSRAM board in the PlatformIO project configuration file. It specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/adafruit_feather_esp32s3.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_feather_esp32s3]\nplatform = espressif32\nboard = adafruit_feather_esp32s3\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic STC12C5A08S2 Board in PlatformIO\nDESCRIPTION: This snippet shows how to configure the Generic STC12C5A08S2 board in a PlatformIO project's configuration file. It sets the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC12C5A08S2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC12C5A08S2]\nplatform = intel_mcs51\nboard = STC12C5A08S2\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU Settings\nDESCRIPTION: Extended configuration showing how to override default microcontroller and frequency settings for the ST Nucleo L412RB-P board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_l412rb_p.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_l412rb_p]\nplatform = ststm32\nboard = nucleo_l412rb_p\n\n; change microcontroller\nboard_build.mcu = stm32l412rbt6p\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing STM32F103C6 Board Configuration in platformio.ini\nDESCRIPTION: Extended configuration for the STM32F103C6 board with custom microcontroller and clock frequency settings. This demonstrates how to override default board settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103C6.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103C6]\nplatform = ststm32\nboard = genericSTM32F103C6\n\n; change microcontroller\nboard_build.mcu = stm32f103c6t6\n\n; change MCU frequency\nboard_build.f_cpu = 72000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring NANO 33 IoT Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the NANO 33 IoT board in the PlatformIO project configuration file. It sets the platform and board, and demonstrates how to override default settings like microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/nano_33_iot.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nano_33_iot]\nplatform = atmelsam\nboard = nano_33_iot\n\n; change microcontroller\nboard_build.mcu = samd21g18a\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing STC8H8K32U Board Settings in PlatformIO\nDESCRIPTION: Advanced configuration example demonstrating how to override default board settings such as microcontroller type and CPU frequency for the STC8H8K32U board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8H8K32U.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8H8K32U]\nplatform = intel_mcs51\nboard = STC8H8K32U\n\n; change microcontroller\nboard_build.mcu = stc8h8k32u\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Customizing Curiosity Nano AVR128DB48 Settings in PlatformIO\nDESCRIPTION: Extended configuration example showing how to override default board settings such as microcontroller type and CPU frequency using the board_*** options in the PlatformIO project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/curiosity_nano_db.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:curiosity_nano_db]\nplatform = atmelmegaavr\nboard = curiosity_nano_db\n\n; change microcontroller\nboard_build.mcu = avr128db48\n\n; change MCU frequency\nboard_build.f_cpu = 24000000L\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for Curiosity Nano ATmega4809\nDESCRIPTION: Basic configuration example for setting up a PlatformIO project with the Curiosity Nano ATmega4809 board using the atmelmegaavr platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/curiosity_nano_4809.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:curiosity_nano_4809]\nplatform = atmelmegaavr\nboard = curiosity_nano_4809\n```\n\n----------------------------------------\n\nTITLE: Advanced STC15F101W Board Configuration\nDESCRIPTION: Extended PlatformIO configuration showing how to override default board settings including microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15F101W.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15F101W]\nplatform = intel_mcs51\nboard = STC15F101W\n\n; change microcontroller\nboard_build.mcu = stc15f101w\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for ST Sensor Node\nDESCRIPTION: This snippet shows how to set the upload protocol for the ST Sensor Node in the PlatformIO configuration. It uses the 'mbed' protocol as an example, which is the default for this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/silica_sensor_node.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:silica_sensor_node]\nplatform = ststm32\nboard = silica_sensor_node\n\nupload_protocol = mbed\n```\n\n----------------------------------------\n\nTITLE: Customizing ATtiny3217 Board Settings in platformio.ini\nDESCRIPTION: Advanced configuration showing how to override default board settings like microcontroller model and CPU frequency in a PlatformIO project for the ATtiny3217 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/ATtiny3217.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATtiny3217]\nplatform = atmelmegaavr\nboard = ATtiny3217\n\n; change microcontroller\nboard_build.mcu = attiny3217\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Protocol for SainSmart Due\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the SainSmart Due board. This example uses the SAM-BA bootloader protocol which is the default for this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/sainSmartDue.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:sainSmartDue]\nplatform = atmelsam\nboard = sainSmartDue\n\nupload_protocol = sam-ba\n```\n\n----------------------------------------\n\nTITLE: Customizing Adafruit Trinket M0 Board Settings\nDESCRIPTION: Extended PlatformIO configuration demonstrating how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_trinket_m0.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_trinket_m0]\nplatform = atmelsam\nboard = adafruit_trinket_m0\n\n; change microcontroller\nboard_build.mcu = samd21e18a\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring ATtiny3217 Board in platformio.ini\nDESCRIPTION: Basic configuration for using the ATtiny3217 board in a PlatformIO project. This snippet shows how to specify the atmelmegaavr platform and ATtiny3217 board in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/ATtiny3217.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATtiny3217]\nplatform = atmelmegaavr\nboard = ATtiny3217\n```\n\n----------------------------------------\n\nTITLE: Customizing Black STM32F407ZE Board Settings\nDESCRIPTION: Example of overriding default board settings in platformio.ini. Demonstrates changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/black_f407ze.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:black_f407ze]\nplatform = ststm32\nboard = black_f407ze\n\n; change microcontroller\nboard_build.mcu = stm32f407zet6\n\n; change MCU frequency\nboard_build.f_cpu = 168000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Big Tree Tech EBB42 V1.1\nDESCRIPTION: PlatformIO configuration example showing how to specify the upload protocol for the Big Tree Tech EBB42 V1.1 board. Default protocol is stlink.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/btt_ebb42_v1_1.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:btt_ebb42_v1_1]\nplatform = ststm32\nboard = btt_ebb42_v1_1\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Configuring Arduino Nicla Sense ME Board in PlatformIO\nDESCRIPTION: This snippet shows how to configure the Arduino Nicla Sense ME board in the PlatformIO project configuration file. It sets the platform to nordicnrf52 and the board to nicla_sense_me.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/nicla_sense_me.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nicla_sense_me]\nplatform = nordicnrf52\nboard = nicla_sense_me\n```\n\n----------------------------------------\n\nTITLE: Basic BluzDK Board Configuration in PlatformIO\nDESCRIPTION: Initial configuration setup for BluzDK board using the nordicnrf51 platform in platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf51/bluz_dk.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:bluz_dk]\nplatform = nordicnrf51\nboard = bluz_dk\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Protocol for ST Nucleo L452RE in PlatformIO\nDESCRIPTION: Configuration for specifying the upload protocol (ST-Link) for an ST Nucleo L452RE board in a PlatformIO project. The board supports multiple protocols with ST-Link being the default.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_l452re.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_l452re]\nplatform = ststm32\nboard = nucleo_l452re\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Customizing RAK811 LoRa Tracker Board Settings\nDESCRIPTION: Example of overriding default board settings in platformio.ini. Demonstrates changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/rak811_tracker_32.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:rak811_tracker_32]\nplatform = ststm32\nboard = rak811_tracker_32\n\n; change microcontroller\nboard_build.mcu = stm32l151rbt6\n\n; change MCU frequency\nboard_build.f_cpu = 32000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring ArtronShop IOXESP32 Board in PlatformIO\nDESCRIPTION: Basic configuration for using the ArtronShop IOXESP32 board in a PlatformIO project. This sets up the project to use the espressif32 platform with the IOXESP32 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/ioxesp32.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ioxesp32]\nplatform = espressif32\nboard = ioxesp32\n```\n\n----------------------------------------\n\nTITLE: Customizing Black STM32F407VG Board Settings\nDESCRIPTION: Advanced configuration options for the Black STM32F407VG board, including changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/black_f407vg.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:black_f407vg]\nplatform = ststm32\nboard = black_f407vg\n\n; change microcontroller\nboard_build.mcu = stm32f407vgt6\n\n; change MCU frequency\nboard_build.f_cpu = 168000000L\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Board Documentation Index\nDESCRIPTION: ReStructuredText table of contents tree structure organizing documentation for microcontroller boards by manufacturer and model.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/index.rst#2025-04-10_snippet_5\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n        \n    ststm8/nucleo_8s207k8\n    ststm8/nucleo_8s208rb\n    ststm8/stm8sdisco\n    ststm8/stm8s003f3\n    ststm8/stm8sblue\n    ststm8/stm8sblack\n    ststm8/mb208\n    ststm8/s8uno\n```\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n        \n    teensy/teensymm\n    teensy/teensy2\n    teensy/teensy30\n    teensy/teensy31\n    teensy/teensy35\n    teensy/teensy36\n    teensy/teensy40\n    teensy/teensy41\n    teensy/teensylc\n    teensy/teensy2pp\n```\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n        \n    timsp430/lpmsp430fr5739\n    timsp430/lpmsp430f5529\n    timsp430/lpmsp430fr2311\n    timsp430/lpmsp430fr2355\n    timsp430/lpmsp430fr2433\n    timsp430/lpmsp430fr2476\n    timsp430/lpmsp430fr4133\n    timsp430/lpmsp430fr5969\n    timsp430/lpmsp430fr5994\n    timsp430/lpmsp430fr6989\n    timsp430/lpmsp430g2231\n    timsp430/lpmsp430g2452\n    timsp430/lpmsp430g2553\n```\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n        \n    titiva/lplm4f120h5qr\n    titiva/lptm4c123gh6pm\n    titiva/lptm4c1294ncpdt\n```\n\n----------------------------------------\n\nTITLE: Basic STM32 Board Configuration\nDESCRIPTION: Basic PlatformIO environment configuration for the ST Nucleo F334R8 board using the STM32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f334r8.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f334r8]\nplatform = ststm32\nboard = nucleo_f334r8\n```\n\n----------------------------------------\n\nTITLE: Configuring STM32F103ZG Board in PlatformIO\nDESCRIPTION: Basic configuration for the STM32F103ZG board in the project's platformio.ini file. It specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103ZG.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103ZG]\nplatform = ststm32\nboard = genericSTM32F103ZG\n```\n\n----------------------------------------\n\nTITLE: Customizing STC8G1K12A Board Configuration in PlatformIO\nDESCRIPTION: An advanced configuration example showing how to override default board settings such as microcontroller type and CPU frequency in the projectconf file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8G1K12A.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8G1K12A]\nplatform = intel_mcs51\nboard = STC8G1K12A\n\n; change microcontroller\nboard_build.mcu = stc8g1k12a\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Configuring ATtiny1614 Board in PlatformIO Configuration\nDESCRIPTION: Basic configuration for using the ATtiny1614 board with the atmelmegaavr platform in a PlatformIO project file. This snippet defines the minimum required settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/ATtiny1614.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATtiny1614]\nplatform = atmelmegaavr\nboard = ATtiny1614\n```\n\n----------------------------------------\n\nTITLE: Advanced NodeMCU-32S2 Configuration with MCU Settings\nDESCRIPTION: Extended configuration example showing how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/nodemcu-32s2.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nodemcu-32s2]\nplatform = espressif32\nboard = nodemcu-32s2\n\n; change microcontroller\nboard_build.mcu = esp32s2\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Generic STC8G1K08 Board Settings in PlatformIO\nDESCRIPTION: This snippet demonstrates how to override default settings for the Generic STC8G1K08 board in PlatformIO. It shows how to change the microcontroller and MCU frequency using board-specific options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8G1K08.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8G1K08]\nplatform = intel_mcs51\nboard = STC8G1K08\n\n; change microcontroller\nboard_build.mcu = stc8g1k08\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU Settings\nDESCRIPTION: Extended configuration demonstrating how to override default board settings like microcontroller and CPU frequency\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/lolin_d32.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:lolin_d32]\nplatform = espressif32\nboard = lolin_d32\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Arty FPGA Dev Kit Settings\nDESCRIPTION: Example of overriding default board settings in platformio.ini, such as changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/sifive/e310-arty.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:e310-arty]\nplatform = sifive\nboard = e310-arty\n\n; change microcontroller\nboard_build.mcu = fe310\n\n; change MCU frequency\nboard_build.f_cpu = 450000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring STM32F103T6 Board in platformio.ini\nDESCRIPTION: This snippet shows how to configure the STM32F103T6 board in the platformio.ini file. It includes options for changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103T6.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103T6]\nplatform = ststm32\nboard = genericSTM32F103T6\n\n; change microcontroller\nboard_build.mcu = stm32f103t6u6\n\n; change MCU frequency\nboard_build.f_cpu = 72000000L\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the board. The board supports both 'espota' and 'esptool' protocols.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/agruminolemon.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:agruminolemon]\nplatform = espressif8266\nboard = agruminolemon\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for SparkFun LoRa Gateway 1-Channel Board\nDESCRIPTION: Configuration to specify the upload protocol for the SparkFun LoRa Gateway 1-Channel board. This example uses the default 'esptool' protocol but demonstrates how to change it.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/sparkfun_lora_gateway_1-channel.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:sparkfun_lora_gateway_1-channel]\nplatform = espressif32\nboard = sparkfun_lora_gateway_1-channel\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Advanced Configuration for STC8H1K08S2 Board with Custom Parameters\nDESCRIPTION: Extended PlatformIO project configuration for the Generic STC8H1K08S2 board with customized microcontroller and clock frequency settings. This demonstrates how to override default board settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8H1K08S2.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8H1K08S2]\nplatform = intel_mcs51\nboard = STC8H1K08S2\n\n; change microcontroller\nboard_build.mcu = stc8h1k08s2\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Customizing Arduino Due Hardware Settings\nDESCRIPTION: Configuration example demonstrating how to override default Arduino Due hardware settings in PlatformIO. This shows customization of the microcontroller and CPU frequency values.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/due.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:due]\nplatform = atmelsam\nboard = due\n\n; change microcontroller\nboard_build.mcu = at91sam3x8e\n\n; change MCU frequency\nboard_build.f_cpu = 84000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Atmel ATSAMW25-XPRO\nDESCRIPTION: Configuration to set the upload protocol for the Atmel ATSAMW25-XPRO board. This example uses the cmsis-dap protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/samd21g18a.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:samd21g18a]\nplatform = atmelsam\nboard = samd21g18a\n\nupload_protocol = cmsis-dap\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Demonstrates how to configure the upload protocol for the board, with STLink as the default option.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/lora_e5_dev_board.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:lora_e5_dev_board]\nplatform = ststm32\nboard = lora_e5_dev_board\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for STM32VLDISCOVERY\nDESCRIPTION: Basic configuration for setting up a PlatformIO project with the ST STM32VLDISCOVERY board using the ststm32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_f100rb.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_f100rb]\nplatform = ststm32\nboard = disco_f100rb\n```\n\n----------------------------------------\n\nTITLE: Custom Hardware Configuration for WEMOS LOLIN S2 PICO\nDESCRIPTION: Extended configuration that overrides default microcontroller and frequency settings for the WEMOS LOLIN S2 PICO board. This demonstrates how to customize board-specific hardware parameters.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/lolin_s2_pico.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:lolin_s2_pico]\nplatform = espressif32\nboard = lolin_s2_pico\n\n; change microcontroller\nboard_build.mcu = esp32s2\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing ST 32L100DISCOVERY Board Settings\nDESCRIPTION: Example of overriding default board settings in platformio.ini. It demonstrates changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_l100rc.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_l100rc]\nplatform = ststm32\nboard = disco_l100rc\n\n; change microcontroller\nboard_build.mcu = stm32l100rct6\n\n; change MCU frequency\nboard_build.f_cpu = 32000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Atmel ATSAMW25-XPRO Board Settings\nDESCRIPTION: Example of overriding default board settings in platformio.ini. It demonstrates changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/samd21g18a.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:samd21g18a]\nplatform = atmelsam\nboard = samd21g18a\n\n; change microcontroller\nboard_build.mcu = samd21g18a\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Basic AVR128DA64 Board Configuration in PlatformIO\nDESCRIPTION: Basic configuration example for setting up an AVR128DA64 board environment in platformio.ini\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/AVR128DA64.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:AVR128DA64]\nplatform = atmelmegaavr\nboard = AVR128DA64\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Teensy++ 2.0\nDESCRIPTION: This snippet shows how to specify the upload protocol for the Teensy++ 2.0 board in the PlatformIO configuration. It sets the protocol to 'teensy-gui'.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/teensy/teensy2pp.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:teensy2pp]\nplatform = teensy\nboard = teensy2pp\n\nupload_protocol = teensy-gui\n```\n\n----------------------------------------\n\nTITLE: Basic STM32 F407VG Board Configuration\nDESCRIPTION: Basic PlatformIO configuration for the Diymore F407VG board using the STM32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/diymore_f407vgt.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:diymore_f407vgt]\nplatform = ststm32\nboard = diymore_f407vgt\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Delta DFBM-NQ620\nDESCRIPTION: This code snippet demonstrates how to set the upload protocol for the Delta DFBM-NQ620 board in the platformio.ini file. The default protocol is cmsis-dap, but it can be changed as shown.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/delta_dfbm_nq620.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:delta_dfbm_nq620]\nplatform = nordicnrf52\nboard = delta_dfbm_nq620\n\nupload_protocol = cmsis-dap\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Protocol for Seeeduino Wio Terminal\nDESCRIPTION: Example configuration for changing the upload protocol for the Seeeduino Wio Terminal. This sets the upload protocol to sam-ba, which is also the default protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/seeed_wio_terminal.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:seeed_wio_terminal]\nplatform = atmelsam\nboard = seeed_wio_terminal\n\nupload_protocol = sam-ba\n```\n\n----------------------------------------\n\nTITLE: Customizing Atmel ATSAMR21-XPRO Board Settings in PlatformIO\nDESCRIPTION: Advanced configuration for overriding default board settings in platformio.ini. This example shows how to change the microcontroller type and MCU frequency for the ATSAMR21-XPRO board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/samr21_xpro.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:samr21_xpro]\nplatform = atmelsam\nboard = samr21_xpro\n\n; change microcontroller\nboard_build.mcu = samr21g18a\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing SODAQ ONE MCU and Frequency Settings\nDESCRIPTION: Extended configuration example showing how to override default microcontroller and frequency settings for the SODAQ ONE board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/sodaq_one.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:sodaq_one]\nplatform = atmelsam\nboard = sodaq_one\n\n; change microcontroller\nboard_build.mcu = samd21g18a\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Defining Upload Speed in PlatformIO Configuration (RST)\nDESCRIPTION: This snippet defines the 'upload_speed' configuration option for PlatformIO projects. It specifies the type of the option as a Number and indicates that it cannot have multiple values. The upload_speed determines the baud rate used by the uploader tool when sending firmware to the board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/env/options/upload/upload_speed.rst#2025-04-10_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n``upload_speed``\n----------------\n\nType: ``Number`` | Multiple: ``No``\n\nA connection speed (`baud rate <http://en.wikipedia.org/wiki/Baud>`_)\nwhich \"uploader\" tool uses when sending firmware to board.\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic STM32F413RH Board in PlatformIO\nDESCRIPTION: Basic configuration for STM32F413RH board in the project's platformio.ini file. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F413RH.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F413RH]\nplatform = ststm32\nboard = genericSTM32F413RH\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU Settings\nDESCRIPTION: Extended configuration example showing how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/bee_motion_s3.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:bee_motion_s3]\nplatform = espressif32\nboard = bee_motion_s3\n\n; change microcontroller\nboard_build.mcu = esp32s3\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for RepRap RAMBo\nDESCRIPTION: Basic environment configuration in platformio.ini for the RepRap RAMBo board using the ATMELAVR platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/reprap_rambo.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:reprap_rambo]\nplatform = atmelavr\nboard = reprap_rambo\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Protocol for Blinker WiFiduinoV2 (ESP32-C3)\nDESCRIPTION: Example configuration for setting the upload protocol for the Blinker WiFiduinoV2 ESP32-C3 board. This example explicitly sets esptool as the upload protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/wifiduino32c3.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:wifiduino32c3]\nplatform = espressif32\nboard = wifiduino32c3\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: NodeMCU-32S2 Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the NodeMCU-32S2 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/nodemcu-32s2.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:nodemcu-32s2]\nplatform = espressif32\nboard = nodemcu-32s2\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration for PlatformIO\nDESCRIPTION: Basic configuration setup for Adafruit Metro ESP32-S3 board in platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/adafruit_metro_esp32s3.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_metro_esp32s3]\nplatform = espressif32\nboard = adafruit_metro_esp32s3\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU and Frequency Settings\nDESCRIPTION: Extended INI configuration showing how to override default board settings like microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/siliconlabsefm32/efm32wg_stk3800.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:efm32wg_stk3800]\nplatform = siliconlabsefm32\nboard = efm32wg_stk3800\n\n; change microcontroller\nboard_build.mcu = efm32wg990f256\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for FYSETC F6 V1.3\nDESCRIPTION: Basic configuration settings for FYSETC F6 V1.3 board in platformio.ini file using the atmelavr platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/fysetc_f6_13.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:fysetc_f6_13]\nplatform = atmelavr\nboard = fysetc_f6_13\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for STC15W103\nDESCRIPTION: Basic environment configuration for the STC15W103 board specifying the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15W103.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15W103]\nplatform = intel_mcs51\nboard = STC15W103\n```\n\n----------------------------------------\n\nTITLE: Basic OpenScope Board Configuration in PlatformIO\nDESCRIPTION: Basic configuration for setting up a PlatformIO project with the Digilent OpenScope board using the microchippic32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/microchippic32/openscope.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:openscope]\nplatform = microchippic32\nboard = openscope\n```\n\n----------------------------------------\n\nTITLE: Customizing Pro Trinket Board Settings\nDESCRIPTION: Example showing how to override default board settings like microcontroller type and CPU frequency in PlatformIO configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/protrinket3ftdi.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:protrinket3ftdi]\nplatform = atmelavr\nboard = protrinket3ftdi\n\n; change microcontroller\nboard_build.mcu = atmega328p\n\n; change MCU frequency\nboard_build.f_cpu = 12000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing ST 32F411EDISCOVERY Board Configuration\nDESCRIPTION: Advanced configuration options for ST 32F411EDISCOVERY board that demonstrates how to override default board settings such as microcontroller model and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_f411ve.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_f411ve]\nplatform = ststm32\nboard = disco_f411ve\n\n; change microcontroller\nboard_build.mcu = stm32f411vet6\n\n; change MCU frequency\nboard_build.f_cpu = 100000000L\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Environment Configuration for STC8H4K32TLR\nDESCRIPTION: Basic configuration for setting up an STC8H4K32TLR build environment in platformio.ini.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8H4K32TLR.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8H4K32TLR]\nplatform = intel_mcs51\nboard = STC8H4K32TLR\n```\n\n----------------------------------------\n\nTITLE: Overriding Default STC8H1K32S2 Board Settings in PlatformIO\nDESCRIPTION: This snippet demonstrates how to override default settings for the Generic STC8H1K32S2 board in a PlatformIO project. It shows how to change the microcontroller and MCU frequency using board-specific options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8H1K32S2.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8H1K32S2]\nplatform = intel_mcs51\nboard = STC8H1K32S2\n\n; change microcontroller\nboard_build.mcu = stc8h1k32s2\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Customizing Arduino MKRZERO MCU Settings\nDESCRIPTION: Example showing how to override default microcontroller and frequency settings for the MKRZERO board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/mkrzero.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:mkrzero]\nplatform = atmelsam\nboard = mkrzero\n\n; change microcontroller\nboard_build.mcu = samd21g18a\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for u-blox ODIN-W2 in PlatformIO\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the u-blox ODIN-W2 board. The default protocol is 'stlink' but can be changed to other supported protocols.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/mtb_ublox_odin_w2.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:mtb_ublox_odin_w2]\nplatform = ststm32\nboard = mtb_ublox_odin_w2\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Configuring Arduino Giga R1 (M7 core) in PlatformIO\nDESCRIPTION: Basic configuration for the Arduino Giga R1 (M7 core) board in platformio.ini file. This sets up the STM32 platform and specifies the board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/giga_r1_m7.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:giga_r1_m7]\nplatform = ststm32\nboard = giga_r1_m7\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic PlatformIO Environment for Adafruit pyCamera S3\nDESCRIPTION: Basic configuration for setting up a PlatformIO environment for the Adafruit pyCamera S3 board. This snippet defines the platform and board ID in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/adafruit_camera_esp32s3.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_camera_esp32s3]\nplatform = espressif32\nboard = adafruit_camera_esp32s3\n```\n\n----------------------------------------\n\nTITLE: Customizing M5Stack-ATOM Board Settings\nDESCRIPTION: Advanced configuration showing how to override default board settings like microcontroller type and CPU frequency using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/m5stack-atom.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:m5stack-atom]\nplatform = espressif32\nboard = m5stack-atom\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Arduino M0 Pro in PlatformIO\nDESCRIPTION: This snippet shows how to set the upload protocol for the Arduino M0 Pro board in the PlatformIO configuration. It uses the CMSIS-DAP protocol as an example.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/mzeropro.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:mzeropro]\nplatform = atmelsam\nboard = mzeropro\n\nupload_protocol = cmsis-dap\n```\n\n----------------------------------------\n\nTITLE: RST Contents Directive\nDESCRIPTION: ReStructuredText directive for generating a local table of contents.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/home/index.rst#2025-04-10_snippet_2\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. contents:: Contents\n    :local:\n```\n\n----------------------------------------\n\nTITLE: Changing Upload Protocol for Invent One Board in PlatformIO\nDESCRIPTION: This snippet shows how to change the upload protocol for the Invent One board to 'esptool' in the PlatformIO configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/inventone.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:inventone]\nplatform = espressif8266\nboard = inventone\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the board, using stlink as the selected protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_f100rb.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_f100rb]\nplatform = ststm32\nboard = disco_f100rb\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Customizing Ethernet IoT Starter Kit Board Settings\nDESCRIPTION: Advanced PlatformIO configuration that demonstrates how to override default board settings like microcontroller type and CPU frequency using board_*** options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/freescalekinetis/IBMEthernetKit.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:IBMEthernetKit]\nplatform = freescalekinetis\nboard = IBMEthernetKit\n\n; change microcontroller\nboard_build.mcu = mk64fn1m0vll12\n\n; change MCU frequency\nboard_build.f_cpu = 120000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic ATmega64 Board Settings in PlatformIO\nDESCRIPTION: Basic PlatformIO configuration for ATmega64 board setup using the atmelavr platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega64.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega64]\nplatform = atmelavr\nboard = ATmega64\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic STC15F201A Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the Generic STC15F201A board in the PlatformIO project configuration file. It sets the platform to intel_mcs51 and the board to STC15F201A.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15F201A.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15F201A]\nplatform = intel_mcs51\nboard = STC15F201A\n```\n\n----------------------------------------\n\nTITLE: Displaying PlatformIO Team Command Help\nDESCRIPTION: Commands to display help information for the PlatformIO organization management functionality and its subcommands.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/team/index.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio org --help\npio org COMMAND --help\n```\n\n----------------------------------------\n\nTITLE: Customizing 3D Printer Controller Board Settings\nDESCRIPTION: Example of overriding default board settings in PlatformIO, including changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/armed_v1.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:armed_v1]\nplatform = ststm32\nboard = armed_v1\n\n; change microcontroller\nboard_build.mcu = stm32f407vet6\n\n; change MCU frequency\nboard_build.f_cpu = 168000000L\n```\n\n----------------------------------------\n\nTITLE: Overriding Default STC8C1K12 Settings in PlatformIO INI File\nDESCRIPTION: This code demonstrates how to override default settings for the Generic STC8C1K12 board in the PlatformIO configuration. It shows examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8C1K12.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8C1K12]\nplatform = intel_mcs51\nboard = STC8C1K12\n\n; change microcontroller\nboard_build.mcu = stc8c1k12\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO Environment for RushUp Cloud-JAM\nDESCRIPTION: This snippet shows how to configure a PlatformIO environment for the RushUp Cloud-JAM board in the project configuration file. It sets the platform and board options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/cloud_jam.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:cloud_jam]\nplatform = ststm32\nboard = cloud_jam\n```\n\n----------------------------------------\n\nTITLE: Customizing M5Stick-C Board Settings in PlatformIO INI File\nDESCRIPTION: This snippet demonstrates how to override default M5Stick-C settings in the PlatformIO project configuration file. It shows examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/m5stick-c.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:m5stick-c]\nplatform = espressif32\nboard = m5stick-c\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO Project for Generic W79E658 Board\nDESCRIPTION: This INI configuration sets up a PlatformIO project environment for the Generic W79E658 board using the Intel MCS-51 platform. It specifies the board ID and platform to use.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/W79E658.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:W79E658]\nplatform = intel_mcs51\nboard = W79E658\n```\n\n----------------------------------------\n\nTITLE: Custom MCU Configuration for ODROID-GO\nDESCRIPTION: Example showing how to override default board settings including microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/odroid_esp32.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:odroid_esp32]\nplatform = espressif32\nboard = odroid_esp32\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for Heltec WiFi LoRa 32 V2\nDESCRIPTION: Basic configuration setup for Heltec WiFi LoRa 32 V2 board in platformio.ini file\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/heltec_wifi_lora_32_V2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:heltec_wifi_lora_32_V2]\nplatform = espressif32\nboard = heltec_wifi_lora_32_V2\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration for ODROID-GO\nDESCRIPTION: Configuration example showing how to specify the upload protocol for ODROID-GO board. Supports espota and esptool protocols.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/odroid_esp32.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:odroid_esp32]\nplatform = espressif32\nboard = odroid_esp32\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with Custom Settings\nDESCRIPTION: Extended PlatformIO configuration for STC89C516RD+ with custom microcontroller and frequency settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC89C516RD+.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC89C516RD+]\nplatform = intel_mcs51\nboard = STC89C516RD+\n\n; change microcontroller\nboard_build.mcu = stc89c516rd+\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Customizing ATmega165/A Board Settings in PlatformIO\nDESCRIPTION: Advanced configuration showing how to override default settings for the ATmega165/A board in a PlatformIO project. This example demonstrates changing the microcontroller model to atmega165a and setting the MCU frequency to 16MHz.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega165.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega165]\nplatform = atmelavr\nboard = ATmega165\n\n; change microcontroller\nboard_build.mcu = atmega165a\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring STM32F103C8 Board in PlatformIO\nDESCRIPTION: Basic configuration for the STM32F103C8 board in a PlatformIO project file. This sets up the platform and board ID for your environment.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103C8.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103C8]\nplatform = ststm32\nboard = genericSTM32F103C8\n```\n\n----------------------------------------\n\nTITLE: PlatformIO Organization Listing Example\nDESCRIPTION: This example demonstrates the output of the 'pio org list' command, showing the organization name, display name, and owners.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/org/cmd_list.rst#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> pio org list\n\n...\n\nplatformio\n----------\nDisplay Name:  PlatformIO\nOwners:        alice, bob\n\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring PYBStick Standard 26 Board in platformio.ini\nDESCRIPTION: Basic configuration for using the PYBStick Standard 26 board in a PlatformIO project. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/pybstick26_std.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:pybstick26_std]\nplatform = ststm32\nboard = pybstick26_std\n```\n\n----------------------------------------\n\nTITLE: Customizing Board Configuration in PlatformIO\nDESCRIPTION: Extended PlatformIO configuration for the Vajra board showing how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/shakti/vajra.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:vajra]\nplatform = shakti\nboard = vajra\n\n; change microcontroller\nboard_build.mcu = C-Class\n\n; change MCU frequency\nboard_build.f_cpu = 50000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing STM32F412CG Board Settings\nDESCRIPTION: Example showing how to override default board settings like microcontroller model and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F412CG.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F412CG]\nplatform = ststm32\nboard = genericSTM32F412CG\n\n; change microcontroller\nboard_build.mcu = stm32f412cgu6\n\n; change MCU frequency\nboard_build.f_cpu = 100000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing NXP i.MX RT1060 Evaluation Kit Settings\nDESCRIPTION: Example of overriding default board settings in the PlatformIO configuration. Demonstrates changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nxpimxrt/mimxrt1060_evk.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:mimxrt1060_evk]\nplatform = nxpimxrt\nboard = mimxrt1060_evk\n\n; change microcontroller\nboard_build.mcu = mimxrt1062dvl6a\n\n; change MCU frequency\nboard_build.f_cpu = 600000000L\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration for PlatformIO\nDESCRIPTION: Basic configuration setup for Adafruit ProxLight Trinkey M0 board in platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_proxlighttrinkey_m0.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_proxlighttrinkey_m0]\nplatform = atmelsam\nboard = adafruit_proxlighttrinkey_m0\n```\n\n----------------------------------------\n\nTITLE: Customizing UBW32 MX460 Board Settings in PlatformIO\nDESCRIPTION: This snippet illustrates how to override default settings for the UBW32 MX460 board in a PlatformIO project. It shows examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/microchippic32/ubw32_mx460.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ubw32_mx460]\nplatform = microchippic32\nboard = ubw32_mx460\n\n; change microcontroller\nboard_build.mcu = 32MX460F512L\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing MCU and Frequency Settings for Adafruit PyPortal M4\nDESCRIPTION: Advanced configuration example showing how to override default board settings such as microcontroller type and CPU frequency for the Adafruit PyPortal M4.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_pyportal_m4.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_pyportal_m4]\nplatform = atmelsam\nboard = adafruit_pyportal_m4\n\n; change microcontroller\nboard_build.mcu = samd51j20a\n\n; change MCU frequency\nboard_build.f_cpu = 120000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic NodeMCU Environment in PlatformIO\nDESCRIPTION: Sets up a basic PlatformIO environment for the NodeMCU 0.9 board with ESP8266 platform. This configuration is the minimal required setup to target the NodeMCU board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/nodemcu.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nodemcu]\nplatform = espressif8266\nboard = nodemcu\n```\n\n----------------------------------------\n\nTITLE: Configuring Black STM32F407VE Board in PlatformIO\nDESCRIPTION: Basic configuration for using the Black STM32F407VE board in a PlatformIO project. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/black_f407ve.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:black_f407ve]\nplatform = ststm32\nboard = black_f407ve\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for STM32F446RE\nDESCRIPTION: Example configuration demonstrating how to specify an upload protocol for the STM32F446RE board. The default protocol is 'serial', but this can be changed to other supported protocols.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F446RE.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F446RE]\nplatform = ststm32\nboard = genericSTM32F446RE\n\nupload_protocol = serial\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO Environment for Calliope Mini v3\nDESCRIPTION: Basic configuration for setting up a PlatformIO environment for the Calliope Mini v3 board. This defines the platform as nordicnrf52 and the board as calliopemini_v3.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/calliopemini_v3.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:calliopemini_v3]\nplatform = nordicnrf52\nboard = calliopemini_v3\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic ATmega8 Board Settings in PlatformIO\nDESCRIPTION: Basic configuration for ATmega8 board in platformio.ini project configuration file. Specifies the platform and board type.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega8.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega8]\nplatform = atmelavr\nboard = ATmega8\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for STM32F7508-DK\nDESCRIPTION: Example of how to set the upload protocol for the STM32F7508-DK board in PlatformIO. The default protocol is stlink, but this can be changed to other supported protocols.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_f750n8.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_f750n8]\nplatform = ststm32\nboard = disco_f750n8\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Customizing RVfpga: Digilent Nexys A7 Settings\nDESCRIPTION: This code snippet demonstrates how to override default board settings in the platformio.ini file. It includes examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/chipsalliance/swervolf_nexys.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:swervolf_nexys]\nplatform = chipsalliance\nboard = swervolf_nexys\n\n; change microcontroller\nboard_build.mcu = \n\n; change MCU frequency\nboard_build.f_cpu = 320000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring ATmega644/A Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the ATmega644/A board in the PlatformIO project configuration file. It specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega644A.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega644A]\nplatform = atmelavr\nboard = ATmega644A\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU Options\nDESCRIPTION: Extended configuration showing how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_l552ze_q.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_l552ze_q]\nplatform = ststm32\nboard = nucleo_l552ze_q\n\n; change microcontroller\nboard_build.mcu = stm32l552zet6\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Digilent Cerebot 32MX4 Configuration in PlatformIO\nDESCRIPTION: Advanced PlatformIO configuration for the Digilent Cerebot 32MX4 board with custom microcontroller and frequency settings. This example demonstrates how to override default board settings defined in the board manifest.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/microchippic32/cerebot32mx4.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:cerebot32mx4]\nplatform = microchippic32\nboard = cerebot32mx4\n\n; change microcontroller\nboard_build.mcu = 32MX460F512L\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring ST STM8S103F3 Breakout Board in PlatformIO\nDESCRIPTION: Basic configuration for the ST STM8S103F3 Breakout Board in the PlatformIO project configuration file. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm8/stm8sblue.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:stm8sblue]\nplatform = ststm8\nboard = stm8sblue\n```\n\n----------------------------------------\n\nTITLE: Setting upload protocol for ETBoard in PlatformIO projectconf\nDESCRIPTION: This snippet illustrates how to set the upload protocol for the ETBoard in the PlatformIO project configuration. It sets the protocol to esptool, which is the default option.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/etboard.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:etboard]\nplatform = espressif32\nboard = etboard\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: OSHChip Configuration with Custom Upload Protocol\nDESCRIPTION: PlatformIO configuration for the OSHChip board with a specified upload protocol. This example shows how to configure the board to use the JLink upload protocol explicitly.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf51/oshchip.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:oshchip]\nplatform = nordicnrf51\nboard = oshchip\n\nupload_protocol = jlink\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic ATtiny25 Board Settings in PlatformIO\nDESCRIPTION: Basic configuration for setting up a Generic ATtiny25 board in the PlatformIO project configuration file. This defines the platform and board to use for the build environment.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/attiny25.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:attiny25]\nplatform = atmelavr\nboard = attiny25\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for ESP32 Pico Kit\nDESCRIPTION: PlatformIO configuration example showing how to specify the upload protocol for ESP32 Pico Kit. In this case, esptool is selected as the upload protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/pico32.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:pico32]\nplatform = espressif32\nboard = pico32\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Installing PlatformIO and Updating Dependencies\nDESCRIPTION: Installs the latest version of PlatformIO and updates its components using pip.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/ci/travis.rst#2025-04-10_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ninstall:\n    - pip install -U platformio\n    - pio update\n```\n\n----------------------------------------\n\nTITLE: Customizing STC8G1K08A Board Settings in PlatformIO Environment\nDESCRIPTION: Advanced platformio.ini configuration showing how to override default board settings such as microcontroller model and CPU frequency. This demonstrates customizing the build process for STC8G1K08A-based projects.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8G1K08A.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8G1K08A]\nplatform = intel_mcs51\nboard = STC8G1K08A\n\n; change microcontroller\nboard_build.mcu = stc8g1k08a\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for DFRobot Beetle ESP32-C3\nDESCRIPTION: Basic configuration for setting up a PlatformIO project for the DFRobot Beetle ESP32-C3 board using the espressif32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/dfrobot_beetle_esp32c3.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:dfrobot_beetle_esp32c3]\nplatform = espressif32\nboard = dfrobot_beetle_esp32c3\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Generic ML51EC0AE Board\nDESCRIPTION: Basic PlatformIO configuration for the Generic ML51EC0AE board in the project's platformio.ini file. This establishes the platform and board settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/ML51EC0AE.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ML51EC0AE]\nplatform = intel_mcs51\nboard = ML51EC0AE\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration for PlatformIO\nDESCRIPTION: Basic configuration setup for using the ST 32L476GDISCOVERY board in PlatformIO projects.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_l476vg.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_l476vg]\nplatform = ststm32\nboard = disco_l476vg\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU and Frequency Settings\nDESCRIPTION: Extended PlatformIO configuration demonstrating how to override default microcontroller and frequency settings for the Nucleo G431KB board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_g431kb.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_g431kb]\nplatform = ststm32\nboard = nucleo_g431kb\n\n; change microcontroller\nboard_build.mcu = stm32g431kbt6\n\n; change MCU frequency\nboard_build.f_cpu = 170000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Arduino Giga R1 (M4 core) Settings in PlatformIO\nDESCRIPTION: This configuration demonstrates how to override default board settings such as microcontroller and CPU frequency. This allows for customization of the build environment.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/giga_r1_m4.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:giga_r1_m4]\nplatform = ststm32\nboard = giga_r1_m4\n\n; change microcontroller\nboard_build.mcu = stm32h747xih6\n\n; change MCU frequency\nboard_build.f_cpu = 480000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic STC8G2K32S2 Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the Generic STC8G2K32S2 board in the PlatformIO project configuration file. It sets the platform to intel_mcs51 and specifies the board as STC8G2K32S2.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8G2K32S2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8G2K32S2]\nplatform = intel_mcs51\nboard = STC8G2K32S2\n```\n\n----------------------------------------\n\nTITLE: Customizing BQ ZUM BT-328 Configuration in PlatformIO\nDESCRIPTION: Advanced configuration that shows how to override default board settings such as microcontroller type and CPU frequency in a PlatformIO project.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/zumbt328.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:zumbt328]\nplatform = atmelavr\nboard = zumbt328\n\n; change microcontroller\nboard_build.mcu = atmega328p\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Adafruit MONSTER M4SK\nDESCRIPTION: Configuration to change the upload protocol for the Adafruit MONSTER M4SK board to sam-ba in platformio.ini.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_monster_m4sk.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_monster_m4sk]\nplatform = atmelsam\nboard = adafruit_monster_m4sk\n\nupload_protocol = sam-ba\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration for ST Nucleo F091RC\nDESCRIPTION: Basic PlatformIO configuration for initializing the ST Nucleo F091RC board using the STM32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f091rc.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f091rc]\nplatform = ststm32\nboard = nucleo_f091rc\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for MKR FOX 1200\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the board using sam-ba protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/mkrfox1200.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:mkrfox1200]\nplatform = atmelsam\nboard = mkrfox1200\n\nupload_protocol = sam-ba\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the IOXESP32PS board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/ioxesp32ps.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:ioxesp32ps]\nplatform = espressif32\nboard = ioxesp32ps\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Customizing Xplained Pro ATmega4809 Board Parameters in PlatformIO\nDESCRIPTION: This snippet demonstrates how to override default board settings in platformio.ini, specifically changing the microcontroller and CPU frequency for the Xplained Pro ATmega4809 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/xplained_pro_4809.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:xplained_pro_4809]\nplatform = atmelmegaavr\nboard = xplained_pro_4809\n\n; change microcontroller\nboard_build.mcu = atmega4809\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for BMD-345-EVAL\nDESCRIPTION: Basic configuration example for setting up a PlatformIO project with the u-blox BMD-345-EVAL board using the Nordic nRF52 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/ublox_bmd345eval_nrf52840.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ublox_bmd345eval_nrf52840]\nplatform = nordicnrf52\nboard = ublox_bmd345eval_nrf52840\n```\n\n----------------------------------------\n\nTITLE: Configuring ATmega128 Board in PlatformIO.ini\nDESCRIPTION: Basic configuration for ATmega128/A board in the platformio.ini project configuration file. This specifies the board and platform to use for the build environment.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega128.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega128]\nplatform = atmelavr\nboard = ATmega128\n```\n\n----------------------------------------\n\nTITLE: Advanced HelvePic32 Board Configuration\nDESCRIPTION: Extended PlatformIO configuration showing how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/microchippic32/helvepic32_smd.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:helvepic32_smd]\nplatform = microchippic32\nboard = helvepic32_smd\n\n; change microcontroller\nboard_build.mcu = 32MX250F128D\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for STC15F2K60S2 Board\nDESCRIPTION: Basic configuration in platformio.ini to set up a project for the Generic STC15F2K60S2 board using the intel_mcs51 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15F2K60S2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15F2K60S2]\nplatform = intel_mcs51\nboard = STC15F2K60S2\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic NoFire Board Settings in PlatformIO\nDESCRIPTION: Basic PlatformIO configuration for the Pontech NoFire board using the microchippic32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/microchippic32/nofire.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nofire]\nplatform = microchippic32\nboard = nofire\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Adafruit MagTag 2.9 ESP32S2\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the Adafruit MagTag 2.9 ESP32S2 board. This uses esptool as the upload protocol, which is also the default for this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/adafruit_magtag29_esp32s2.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_magtag29_esp32s2]\nplatform = espressif32\nboard = adafruit_magtag29_esp32s2\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring Arduino Pro Mini Board in PlatformIO INI File\nDESCRIPTION: This code snippet shows how to configure the Arduino Pro or Pro Mini ATmega328 (3.3V, 8 MHz) board in the PlatformIO project configuration file. It sets the platform to atmelavr and the board to pro8MHzatmega328.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/pro8MHzatmega328.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:pro8MHzatmega328]\nplatform = atmelavr\nboard = pro8MHzatmega328\n```\n\n----------------------------------------\n\nTITLE: Customizing SparkFun SAMD51 Thing Plus Settings\nDESCRIPTION: Example of overriding default board settings in PlatformIO. Demonstrates changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/sparkfun_samd51_thing_plus.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:sparkfun_samd51_thing_plus]\nplatform = atmelsam\nboard = sparkfun_samd51_thing_plus\n\n; change microcontroller\nboard_build.mcu = samd51j20a\n\n; change MCU frequency\nboard_build.f_cpu = 120000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing TTGO LoRa32-OLED V2 Board Settings\nDESCRIPTION: Example of overriding default board settings in the PlatformIO configuration. Demonstrates changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/ttgo-lora32-v2.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ttgo-lora32-v2]\nplatform = espressif32\nboard = ttgo-lora32-v2\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration with MCU Settings\nDESCRIPTION: Extended configuration showing how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/oroca_edubot.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:oroca_edubot]\nplatform = espressif32\nboard = oroca_edubot\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration in PlatformIO\nDESCRIPTION: Basic configuration for using Adafruit Trellis M4 board with PlatformIO.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_trellis_m4.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_trellis_m4]\nplatform = atmelsam\nboard = adafruit_trellis_m4\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the WEMOS LOLIN S3 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/lolin_s3.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:lolin_s3]\nplatform = espressif32\nboard = lolin_s3\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration in PlatformIO\nDESCRIPTION: Basic configuration for Fishino Piranha ESP-32 board in platformio.ini file\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/piranha_esp32.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:piranha_esp32]\nplatform = espressif32\nboard = piranha_esp32\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for M5Stack Core2\nDESCRIPTION: PlatformIO configuration for M5Stack Core2 that specifies the upload protocol to use. This example explicitly sets the upload protocol to 'esptool', which is also the default option for this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/m5stack-core2.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:m5stack-core2]\nplatform = espressif32\nboard = m5stack-core2\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO Upload Protocol for Pinaka Board\nDESCRIPTION: Configuration example showing how to set a specific upload protocol for the Pinaka board. This uses the 'ftdi' protocol which is the default option.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/shakti/pinaka.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:pinaka]\nplatform = shakti\nboard = pinaka\n\nupload_protocol = ftdi\n```\n\n----------------------------------------\n\nTITLE: Using Symbolic Links for External Libraries in PlatformIO\nDESCRIPTION: Shows how to use symbolic links to reference external local libraries instead of the deprecated lib_extra_dirs option.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/env/options/library/lib_extra_dirs.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nlib_deps =\n    FooLib=symlink://../../shared-libraries/FooLib\n```\n\n----------------------------------------\n\nTITLE: Configuring ATmega169A Board in PlatformIO INI File\nDESCRIPTION: This code snippet shows how to configure the ATmega169A board in a PlatformIO project configuration file (platformio.ini). It sets the platform to atmelavr and specifies the board as ATmega169A.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega169A.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega169A]\nplatform = atmelavr\nboard = ATmega169A\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the STM32F103ZE board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103ZE.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103ZE]\nplatform = ststm32\nboard = genericSTM32F103ZE\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for Seeeduino Zero\nDESCRIPTION: Basic configuration for setting up a Seeeduino Zero project in platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/seeed_zero.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:seeed_zero]\nplatform = atmelsam\nboard = seeed_zero\n```\n\n----------------------------------------\n\nTITLE: Overriding Default STC8H1K08 Board Settings in PlatformIO\nDESCRIPTION: This snippet demonstrates how to override default board settings for the Generic STC8H1K08 in a PlatformIO project. It shows examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8H1K08.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8H1K08]\nplatform = intel_mcs51\nboard = STC8H1K08\n\n; change microcontroller\nboard_build.mcu = stc8h1k08\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Customizing Tuino 096 Board Settings in PlatformIO\nDESCRIPTION: Advanced configuration example showing how to override default board settings such as microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/tuinozero96.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:tuinozero96]\nplatform = atmelsam\nboard = tuinozero96\n\n; change microcontroller\nboard_build.mcu = samd21g18a\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO Environment for STC15F103E Board\nDESCRIPTION: Basic configuration for setting up a PlatformIO environment for the Generic STC15F103E board. This snippet specifies the platform and board ID in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15F103E.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15F103E]\nplatform = intel_mcs51\nboard = STC15F103E\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Adafruit PyGamer M4 Express\nDESCRIPTION: Configuration to specify the upload protocol for the Adafruit PyGamer M4 Express board. In this example, it sets the protocol to sam-ba.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_pygamer_m4.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_pygamer_m4]\nplatform = atmelsam\nboard = adafruit_pygamer_m4\n\nupload_protocol = sam-ba\n```\n\n----------------------------------------\n\nTITLE: Customizing STM32F413RH Board Parameters in PlatformIO\nDESCRIPTION: Extended configuration that demonstrates how to override default board settings such as microcontroller model and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F413RH.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F413RH]\nplatform = ststm32\nboard = genericSTM32F413RH\n\n; change microcontroller\nboard_build.mcu = stm32f413rht6\n\n; change MCU frequency\nboard_build.f_cpu = 100000000L\n```\n\n----------------------------------------\n\nTITLE: Setting upload protocol for PHYTEC reel board\nDESCRIPTION: PlatformIO configuration showing how to specify the upload protocol for the PHYTEC reel board. This example uses the default cmsis-dap protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/reel_board.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:reel_board]\nplatform = nordicnrf52\nboard = reel_board\n\nupload_protocol = cmsis-dap\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic PlatformIO Environment for Franzininho WiFi ESP32S2\nDESCRIPTION: Basic configuration for setting up a PlatformIO project targeting the Franzininho WiFi board with ESP32S2 microcontroller. This defines the platform and board ID in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/franzininho_wifi_esp32s2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:franzininho_wifi_esp32s2]\nplatform = espressif32\nboard = franzininho_wifi_esp32s2\n```\n\n----------------------------------------\n\nTITLE: Custom MCU Configuration for Nordic Beacon Kit\nDESCRIPTION: Shows how to override default board settings including microcontroller type and CPU frequency using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf51/nrf51_beacon.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nrf51_beacon]\nplatform = nordicnrf51\nboard = nrf51_beacon\n\n; change microcontroller\nboard_build.mcu = nrf51822\n\n; change MCU frequency\nboard_build.f_cpu = 32000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring ATmega329P Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the ATmega329P board in the PlatformIO project configuration file. It sets the platform to atmelavr and specifies the board as ATmega329P.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega329P.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega329P]\nplatform = atmelavr\nboard = ATmega329P\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration for STM32F0DISCOVERY\nDESCRIPTION: PlatformIO configuration demonstrating how to specify the upload protocol for the STM32F0DISCOVERY board, using ST-Link as the default uploader.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_f051r8.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_f051r8]\nplatform = ststm32\nboard = disco_f051r8\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic PlatformIO Environment for Digilent Cerebot 32MX4\nDESCRIPTION: Basic PlatformIO configuration for the Digilent Cerebot 32MX4 board. This snippet shows the minimal required configuration in the platformio.ini file to target this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/microchippic32/cerebot32mx4.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:cerebot32mx4]\nplatform = microchippic32\nboard = cerebot32mx4\n```\n\n----------------------------------------\n\nTITLE: Customizing ST Nucleo L4R5ZI Board Settings in PlatformIO\nDESCRIPTION: Example of overriding default board settings in platformio.ini, such as changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_l4r5zi.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_l4r5zi]\nplatform = ststm32\nboard = nucleo_l4r5zi\n\n; change microcontroller\nboard_build.mcu = stm32l4r5zit6\n\n; change MCU frequency\nboard_build.f_cpu = 120000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced STM32F103CB Board Configuration\nDESCRIPTION: Extended PlatformIO configuration demonstrating how to override default microcontroller and frequency settings for the STM32F103CB board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103CB.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103CB]\nplatform = ststm32\nboard = genericSTM32F103CB\n\n; change microcontroller\nboard_build.mcu = stm32f103cbt6\n\n; change MCU frequency\nboard_build.f_cpu = 72000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for FYSETC S6 in PlatformIO\nDESCRIPTION: This snippet shows how to set a specific upload protocol for the FYSETC S6 board in PlatformIO configuration. It uses the 'stlink' protocol as an example.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/fysetc_s6.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:fysetc_s6]\nplatform = ststm32\nboard = fysetc_s6\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration in PlatformIO\nDESCRIPTION: Basic configuration to set up a PlatformIO project for WEMOS LOLIN S3 board using the espressif32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/lolin_s3.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:lolin_s3]\nplatform = espressif32\nboard = lolin_s3\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for TI LaunchPad Tiva C\nDESCRIPTION: Basic configuration settings for setting up a PlatformIO project targeting the TI LaunchPad (Tiva C) board with tm4c123 microcontroller.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/titiva/lptm4c123gh6pm.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:lptm4c123gh6pm]\nplatform = titiva\nboard = lptm4c123gh6pm\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic ATtiny45 Environment in platformio.ini\nDESCRIPTION: Basic configuration for setting up a Generic ATtiny45 board in the platformio.ini project file. This establishes the platform as atmelavr and the board as attiny45.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/attiny45.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:attiny45]\nplatform = atmelavr\nboard = attiny45\n```\n\n----------------------------------------\n\nTITLE: Customizing Dongsen Tech Pocket 32 Board Settings\nDESCRIPTION: This snippet demonstrates how to override default board settings for the Dongsen Tech Pocket 32. It shows examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/pocket_32.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:pocket_32]\nplatform = espressif32\nboard = pocket_32\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration for Seeeduino Zero\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the Seeeduino Zero board using sam-ba protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/seeed_zero.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:seeed_zero]\nplatform = atmelsam\nboard = seeed_zero\n\nupload_protocol = sam-ba\n```\n\n----------------------------------------\n\nTITLE: Defining monitor_eol Parameter\nDESCRIPTION: Specifies the end of line mode for serial monitor output. This configuration option accepts a string value and cannot have multiple values. The default value is 'CRLF'.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/env/options/monitor/monitor_eol.rst#2025-04-10_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmonitor_eol\n```\n\n----------------------------------------\n\nTITLE: Customizing Generic STC8C2K16S2 Board Configuration in PlatformIO\nDESCRIPTION: Advanced configuration demonstrating how to override default board settings like microcontroller type and CPU frequency in platformio.ini for the Generic STC8C2K16S2 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8C2K16S2.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8C2K16S2]\nplatform = intel_mcs51\nboard = STC8C2K16S2\n\n; change microcontroller\nboard_build.mcu = stc8c2k16s2\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Configuring Ai-Thinker ESP-C3-M1-I-Kit Board in PlatformIO\nDESCRIPTION: Basic configuration for the Ai-Thinker ESP-C3-M1-I-Kit board in the project's platformio.ini file. Sets the platform to espressif32 and the board to esp32-c3-m1i-kit.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32-c3-m1i-kit.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32-c3-m1i-kit]\nplatform = espressif32\nboard = esp32-c3-m1i-kit\n```\n\n----------------------------------------\n\nTITLE: Advanced ML51EB9AE Board Configuration with Custom Settings\nDESCRIPTION: Extended configuration for ML51EB9AE board with custom microcontroller and frequency settings. Demonstrates how to override default board settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/ML51EB9AE.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ML51EB9AE]\nplatform = intel_mcs51\nboard = ML51EB9AE\n\n; change microcontroller\nboard_build.mcu = ml51eb9ae\n\n; change MCU frequency\nboard_build.f_cpu = 24000000L\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Shows how to configure the upload protocol for the board using the upload_protocol option.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/adafruit_qtpy_esp32s3_n4r2.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_qtpy_esp32s3_n4r2]\nplatform = espressif32\nboard = adafruit_qtpy_esp32s3_n4r2\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Customizing STM32F103RG Board Settings\nDESCRIPTION: Example of overriding default board settings in platformio.ini, such as changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103RG.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103RG]\nplatform = ststm32\nboard = genericSTM32F103RG\n\n; change microcontroller\nboard_build.mcu = stm32f103rgt6\n\n; change MCU frequency\nboard_build.f_cpu = 72000000L\n```\n\n----------------------------------------\n\nTITLE: Basic STC89C58RD+ Board Configuration in PlatformIO\nDESCRIPTION: Basic configuration snippet for setting up the STC89C58RD+ board in the project's configuration file. Specifies the platform and board options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC89C58RD+.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC89C58RD+]\nplatform = intel_mcs51\nboard = STC89C58RD+\n```\n\n----------------------------------------\n\nTITLE: Customizing TinyDuino Board Settings in PlatformIO INI File\nDESCRIPTION: This snippet demonstrates how to override default settings for the TinyCircuits TinyDuino Processor Board in the PlatformIO project configuration file. It shows how to change the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/tinyduino.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:tinyduino]\nplatform = atmelavr\nboard = tinyduino\n\n; change microcontroller\nboard_build.mcu = atmega328p\n\n; change MCU frequency\nboard_build.f_cpu = 8000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic PlatformIO Environment for Seeeduino Wio Lite MG126\nDESCRIPTION: Basic PlatformIO configuration for the Seeeduino Wio Lite MG126 board. This snippet defines the platform as atmelsam and specifies the board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/seeed_wio_lite_mg126.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:seeed_wio_lite_mg126]\nplatform = atmelsam\nboard = seeed_wio_lite_mg126\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for ST Nucleo L152RE\nDESCRIPTION: Configuration to specify the upload protocol for the ST Nucleo L152RE board. In this example, it's set to use the ST-Link protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_l152re.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_l152re]\nplatform = ststm32\nboard = nucleo_l152re\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_feather_m0_express.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_feather_m0_express]\nplatform = atmelsam\nboard = adafruit_feather_m0_express\n\nupload_protocol = sam-ba\n```\n\n----------------------------------------\n\nTITLE: Configuring Tuino 096 Board in PlatformIO\nDESCRIPTION: Basic configuration for using Tuino 096 board with PlatformIO. Defines the board and platform in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/tuinozero96.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:tuinozero96]\nplatform = atmelsam\nboard = tuinozero96\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_trellis_m4.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_trellis_m4]\nplatform = atmelsam\nboard = adafruit_trellis_m4\n\nupload_protocol = sam-ba\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration for BluzDK\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the BluzDK board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf51/bluz_dk.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:bluz_dk]\nplatform = nordicnrf51\nboard = bluz_dk\n\nupload_protocol = jlink\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Board Environment in PlatformIO\nDESCRIPTION: Basic configuration for setting up a PlatformIO environment for the Pololu A-Star 32U4 board using the atmelavr platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/a-star32U4.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:a-star32U4]\nplatform = atmelavr\nboard = a-star32U4\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic ML51TC1AE Board in PlatformIO\nDESCRIPTION: This snippet shows how to configure the Generic ML51TC1AE board in the PlatformIO project configuration file (platformio.ini). It sets the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/ML51TC1AE.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ML51TC1AE]\nplatform = intel_mcs51\nboard = ML51TC1AE\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Raspberry Pi 1 Model B Settings in PlatformIO INI File\nDESCRIPTION: This snippet demonstrates how to override default settings for the Raspberry Pi 1 Model B in the PlatformIO project configuration file. It includes examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/linux_arm/raspberrypi_1b.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:raspberrypi_1b]\nplatform = linux_arm\nboard = raspberrypi_1b\n\n; change microcontroller\nboard_build.mcu = bcm2835\n\n; change MCU frequency\nboard_build.f_cpu = 700000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring STM32F072-EVAL Board in PlatformIO\nDESCRIPTION: Basic configuration for using the STM32F072-EVAL board in a PlatformIO project environment. This sets up the project to use the STM32 platform with the eval_f072vb board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/eval_f072vb.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:eval_f072vb]\nplatform = ststm32\nboard = eval_f072vb\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for NXP i.MX RT1064 Evaluation Kit\nDESCRIPTION: Configuration to set the upload protocol for the NXP i.MX RT1064 Evaluation Kit. The example uses the 'mbed' protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nxpimxrt/mimxrt1064_evk.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:mimxrt1064_evk]\nplatform = nxpimxrt\nboard = mimxrt1064_evk\n\nupload_protocol = mbed\n```\n\n----------------------------------------\n\nTITLE: Customizing Adafruit Feather ESP32-S3 Board Settings\nDESCRIPTION: Example of overriding default board settings in the PlatformIO configuration. It demonstrates changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/adafruit_feather_esp32s3.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_feather_esp32s3]\nplatform = espressif32\nboard = adafruit_feather_esp32s3\n\n; change microcontroller\nboard_build.mcu = esp32s3\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO Environment for Generic IAP12C5A62S2 Board\nDESCRIPTION: Basic PlatformIO configuration for the Generic IAP12C5A62S2 board using the intel_mcs51 platform. This configuration should be added to the platformio.ini file in your project.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/IAP12C5A62S2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:IAP12C5A62S2]\nplatform = intel_mcs51\nboard = IAP12C5A62S2\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Protocol for TTGO T7 V1.4 Mini32\nDESCRIPTION: Example configuration showing how to specify the upload protocol for the TTGO T7 V1.4 Mini32 board. The default protocol is esptool, but multiple other protocols are supported.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/ttgo-t7-v14-mini32.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:ttgo-t7-v14-mini32]\nplatform = espressif32\nboard = ttgo-t7-v14-mini32\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU and Frequency Settings\nDESCRIPTION: Extended configuration showing how to override default microcontroller and frequency settings for the Seeeduino Zero board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/seeed_zero.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:seeed_zero]\nplatform = atmelsam\nboard = seeed_zero\n\n; change microcontroller\nboard_build.mcu = samd21g18a\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for STM32H747I-DISCO\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the STM32H747I-DISCO board. This example uses the STLink protocol which is the default.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_h747xi.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_h747xi]\nplatform = ststm32\nboard = disco_h747xi\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Configuring Seeed Studio XIAO ESP32C3 Board in PlatformIO\nDESCRIPTION: Basic configuration for using the Seeed Studio XIAO ESP32C3 board in a PlatformIO project. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/seeed_xiao_esp32c3.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:seeed_xiao_esp32c3]\nplatform = espressif32\nboard = seeed_xiao_esp32c3\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration for STC89C516RD+\nDESCRIPTION: Basic PlatformIO configuration for the STC89C516RD+ board using the intel_mcs51 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC89C516RD+.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC89C516RD+]\nplatform = intel_mcs51\nboard = STC89C516RD+\n```\n\n----------------------------------------\n\nTITLE: Customizing Microduino Core+ Board Settings\nDESCRIPTION: This code snippet demonstrates how to override default board settings for the Microduino Core+ in a PlatformIO project. It shows how to change the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/644pa16m.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:644pa16m]\nplatform = atmelavr\nboard = 644pa16m\n\n; change microcontroller\nboard_build.mcu = atmega644p\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Protocol for BPI-Leaf-S3\nDESCRIPTION: PlatformIO configuration example showing how to specify the upload protocol for the BPI-Leaf-S3 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/bpi_leaf_s3.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:bpi_leaf_s3]\nplatform = espressif32\nboard = bpi_leaf_s3\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO Project with Extra Script\nDESCRIPTION: Basic platformio.ini configuration that specifies the build platform and points to an external Python script for additional build configurations.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/scripting/examples/extra_linker_flags.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:env_extra_link_flags]\nplatform = windows_x86\nextra_scripts = extra_script.py\n```\n\n----------------------------------------\n\nTITLE: Configuring STM32F412RE Board in platformio.ini\nDESCRIPTION: Basic configuration for the STM32F412RE board in the PlatformIO project configuration file. Sets the platform and board type.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F412RE.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F412RE]\nplatform = ststm32\nboard = genericSTM32F412RE\n```\n\n----------------------------------------\n\nTITLE: Customizing Board Parameters in PlatformIO Configuration\nDESCRIPTION: Example showing how to override default board settings such as microcontroller type and CPU frequency in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/4d_systems_esp32s3_gen4_r8n16.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:4d_systems_esp32s3_gen4_r8n16]\nplatform = espressif32\nboard = 4d_systems_esp32s3_gen4_r8n16\n\n; change microcontroller\nboard_build.mcu = esp32s3\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing ubIQio Ardhat Board Settings in PlatformIO\nDESCRIPTION: This INI configuration demonstrates how to override default settings for the ubIQio Ardhat board in PlatformIO. It shows examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ardhat.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ardhat]\nplatform = atmelavr\nboard = ardhat\n\n; change microcontroller\nboard_build.mcu = atmega328p\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing NIBO Burger Robot Settings in PlatformIO\nDESCRIPTION: This INI configuration demonstrates how to override default settings for the NIBO burger robot. It shows examples of changing the microcontroller and MCU frequency using board-specific options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/niboburger_1284.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:niboburger_1284]\nplatform = atmelavr\nboard = niboburger_1284\n\n; change microcontroller\nboard_build.mcu = atmega1284p\n\n; change MCU frequency\nboard_build.f_cpu = 20000000L\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the SparkFun Qwiic Micro board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/sparkfun_qwiic_micro_samd21e.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:sparkfun_qwiic_micro_samd21e]\nplatform = atmelsam\nboard = sparkfun_qwiic_micro_samd21e\n\nupload_protocol = sam-ba\n```\n\n----------------------------------------\n\nTITLE: Basic WiPy3 Board Configuration\nDESCRIPTION: Configures the basic environment settings for the Pycom WiPy3 board using the espressif32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/wipy3.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:wipy3]\nplatform = espressif32\nboard = wipy3\n```\n\n----------------------------------------\n\nTITLE: Configuring Adafruit ItsyBitsy M0 with Custom MCU Settings in PlatformIO\nDESCRIPTION: Advanced configuration for Adafruit ItsyBitsy M0 with custom microcontroller and frequency settings in platformio.ini file. This example demonstrates how to override default board settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_itsybitsy_m0.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_itsybitsy_m0]\nplatform = atmelsam\nboard = adafruit_itsybitsy_m0\n\n; change microcontroller\nboard_build.mcu = samd21g18a\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration with Custom Settings\nDESCRIPTION: Extended configuration for ATmega6450P board with custom microcontroller and frequency settings. Demonstrates how to override default board settings using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega6450P.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega6450P]\nplatform = atmelavr\nboard = ATmega6450P\n\n; change microcontroller\nboard_build.mcu = atmega6450p\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing STC8H4K32TLCD Board Settings in PlatformIO\nDESCRIPTION: Advanced configuration for the STC8H4K32TLCD board, demonstrating how to override default settings like microcontroller type and CPU frequency. These customizations can be added to the platformio.ini file to tailor the board configuration to specific project needs.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8H4K32TLCD.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8H4K32TLCD]\nplatform = intel_mcs51\nboard = STC8H4K32TLCD\n\n; change microcontroller\nboard_build.mcu = stc8h4k32tlcd\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Configuring unPhone 9 Board in PlatformIO\nDESCRIPTION: Basic configuration for the unPhone 9 board in the PlatformIO project configuration file. It sets the platform to espressif32 and the board to unphone9.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/unphone9.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:unphone9]\nplatform = espressif32\nboard = unphone9\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic W79E632 Board in platformio.ini\nDESCRIPTION: Basic configuration snippet for setting up a PlatformIO project targeting the Generic W79E632 board on the intel_mcs51 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/W79E632.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:W79E632]\nplatform = intel_mcs51\nboard = W79E632\n```\n\n----------------------------------------\n\nTITLE: Basic Arduboy DevKit Board Configuration\nDESCRIPTION: Basic PlatformIO configuration for Arduboy DevKit board using the atmelavr platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/arduboy_devkit.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:arduboy_devkit]\nplatform = atmelavr\nboard = arduboy_devkit\n```\n\n----------------------------------------\n\nTITLE: Customizing Generic STC15F2K24AS Board Settings in PlatformIO\nDESCRIPTION: This code snippet shows how to override default settings for the Generic STC15F2K24AS board in a PlatformIO project. It includes examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15F2K24AS.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15F2K24AS]\nplatform = intel_mcs51\nboard = STC15F2K24AS\n\n; change microcontroller\nboard_build.mcu = stc15f2k24as\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Customizing Board Settings\nDESCRIPTION: Example showing how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/grasshopper_l082cz.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:grasshopper_l082cz]\nplatform = ststm32\nboard = grasshopper_l082cz\n\n; change microcontroller\nboard_build.mcu = stm32l082czy6\n\n; change MCU frequency\nboard_build.f_cpu = 32000000L\n```\n\n----------------------------------------\n\nTITLE: Basic GAPuino Board Configuration in PlatformIO\nDESCRIPTION: Basic configuration for setting up a GAPuino board project in PlatformIO's project configuration file. Specifies the platform and board name.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/riscv_gap/gapuino.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:gapuino]\nplatform = riscv_gap\nboard = gapuino\n```\n\n----------------------------------------\n\nTITLE: Configuring ftDuino Board in PlatformIO Project Configuration\nDESCRIPTION: Basic configuration for using the ftDuino board in a PlatformIO project. This snippet shows how to specify the board in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ftduino.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ftduino]\nplatform = atmelavr\nboard = ftduino\n```\n\n----------------------------------------\n\nTITLE: Configuring Whisper Debug Tool in platformio.ini\nDESCRIPTION: This snippet shows how to configure the Whisper RISCV simulator as a debugging tool in the project configuration file. It sets the debug_tool option to 'whisper' in a project environment.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/whisper.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = ...\nboard = ...\ndebug_tool = whisper\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Generic STC15F100W Board\nDESCRIPTION: Basic configuration example for setting up a PlatformIO project environment for the Generic STC15F100W board using the Intel MCS-51 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15F100W.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15F100W]\nplatform = intel_mcs51\nboard = STC15F100W\n```\n\n----------------------------------------\n\nTITLE: Customizing Generic W79E4051 Board Settings in platformio.ini\nDESCRIPTION: This example demonstrates how to override default board settings in the PlatformIO configuration. It shows how to change the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/W79E4051.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:W79E4051]\nplatform = intel_mcs51\nboard = W79E4051\n\n; change microcontroller\nboard_build.mcu = w79e4051\n\n; change MCU frequency\nboard_build.f_cpu = 22118400L\n```\n\n----------------------------------------\n\nTITLE: Customizing uPesy ESP32 Wroom DevKit Board Settings\nDESCRIPTION: Example of overriding default board settings using board_*** options in PlatformIO configuration. This demonstrates how to change the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/upesy_wroom.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:upesy_wroom]\nplatform = espressif32\nboard = upesy_wroom\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Curiosity Nano AVR128DA48\nDESCRIPTION: Basic configuration for setting up a PlatformIO project targeting the Curiosity Nano AVR128DA48 board. This snippet shows how to specify the board in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/curiosity_nano_da.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:curiosity_nano_da]\nplatform = atmelmegaavr\nboard = curiosity_nano_da\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration with MCU Settings\nDESCRIPTION: Extended environment configuration showing how to override default board settings like microcontroller model and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/lora_e5_mini.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:lora_e5_mini]\nplatform = ststm32\nboard = lora_e5_mini\n\n; change microcontroller\nboard_build.mcu = stm32wle5jc\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring ETBoard in PlatformIO projectconf\nDESCRIPTION: This snippet shows how to configure the ETBoard in the PlatformIO project configuration file. It sets the platform to espressif32 and the board to etboard.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/etboard.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:etboard]\nplatform = espressif32\nboard = etboard\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for TTGO T-Watch\nDESCRIPTION: Configuration for specifying the upload protocol for the TTGO T-Watch board. This example shows how to explicitly set the upload protocol to esptool, which is the default but can be changed to espota if needed.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/ttgo-t-watch.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:ttgo-t-watch]\nplatform = espressif32\nboard = ttgo-t-watch\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Initializing GPIO for LED Blinking in STM32Cube (C)\nDESCRIPTION: This snippet defines the GPIO pin and port for the LED, and enables the GPIO clock. It's part of the main header file for the blink project.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/tutorials/ststm32/stm32cube_debugging_unit_testing.rst#2025-04-10_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#ifndef MAIN_H\n#define MAIN_H\n\n#include \"stm32f4xx_hal.h\"\n\n#define LED_PIN                                GPIO_PIN_5\n#define LED_GPIO_PORT                          GPIOA\n#define LED_GPIO_CLK_ENABLE()                  __HAL_RCC_GPIOA_CLK_ENABLE()\n\n#endif // MAIN_H\n```\n\n----------------------------------------\n\nTITLE: Customizing STC15F408AD Board Settings in PlatformIO\nDESCRIPTION: Extended PlatformIO configuration that demonstrates how to override default board settings such as the microcontroller model and CPU frequency for the Generic STC15F408AD board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15F408AD.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15F408AD]\nplatform = intel_mcs51\nboard = STC15F408AD\n\n; change microcontroller\nboard_build.mcu = stc15f408ad\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Configuring MH ET LIVE ESP32MiniKit Board in platformio.ini\nDESCRIPTION: Basic configuration for using the MH ET LIVE ESP32MiniKit board in a PlatformIO project. Specifies the board and platform to use.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/mhetesp32minikit.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:mhetesp32minikit]\nplatform = espressif32\nboard = mhetesp32minikit\n```\n\n----------------------------------------\n\nTITLE: Customizing ML54MD1AE Board Settings in platformio.ini\nDESCRIPTION: Advanced configuration example showing how to override default board settings such as microcontroller type and CPU frequency in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/ML54MD1AE.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ML54MD1AE]\nplatform = intel_mcs51\nboard = ML54MD1AE\n\n; change microcontroller\nboard_build.mcu = ml54md1ae\n\n; change MCU frequency\nboard_build.f_cpu = 24000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for SparkFun SAMD51 MicroMod\nDESCRIPTION: Configuration example demonstrating how to specify the upload protocol for the SparkFun SAMD51 MicroMod board. This uses the default sam-ba protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/sparkfun_samd51_micromod.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:sparkfun_samd51_micromod]\nplatform = atmelsam\nboard = sparkfun_samd51_micromod\n\nupload_protocol = sam-ba\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for STC8H4K48TLR Board\nDESCRIPTION: Basic configuration for using the STC8H4K48TLR board in platformio.ini. This sets up the Intel MCS-51 platform with the STC8H4K48TLR board as the target.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8H4K48TLR.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8H4K48TLR]\nplatform = intel_mcs51\nboard = STC8H4K48TLR\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic ATtiny1634 Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the Generic ATtiny1634 board in the PlatformIO project configuration file. It sets the platform to atmelavr and the board to attiny1634.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/attiny1634.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:attiny1634]\nplatform = atmelavr\nboard = attiny1634\n```\n\n----------------------------------------\n\nTITLE: Basic N79E352 Board Configuration in PlatformIO\nDESCRIPTION: Basic PlatformIO configuration for setting up a project with the N79E352 board using the intel_mcs51 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/N79E352.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:N79E352]\nplatform = intel_mcs51\nboard = N79E352\n```\n\n----------------------------------------\n\nTITLE: Configuring STC15F2K16S2 Board in platformio.ini\nDESCRIPTION: Basic configuration for the STC15F2K16S2 board in the platformio.ini project configuration file. This sets up the board and platform for Intel MCS-51 development.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15F2K16S2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15F2K16S2]\nplatform = intel_mcs51\nboard = STC15F2K16S2\n```\n\n----------------------------------------\n\nTITLE: Customizing ng-beacon Board Settings in PlatformIO INI File\nDESCRIPTION: This snippet demonstrates how to override default ng-beacon settings in the project configuration. It shows examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf51/ng_beacon.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ng_beacon]\nplatform = nordicnrf51\nboard = ng_beacon\n\n; change microcontroller\nboard_build.mcu = nrf51822\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring M5Stack Timer CAM Board in PlatformIO INI File\nDESCRIPTION: Basic configuration for the M5Stack Timer CAM board using the Espressif32 platform. This snippet sets up the board in the project's configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/m5stack-timer-cam.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:m5stack-timer-cam]\nplatform = espressif32\nboard = m5stack-timer-cam\n```\n\n----------------------------------------\n\nTITLE: Customizing SparkFun RedBoard Turbo Hardware Configuration\nDESCRIPTION: Extended configuration example for the SparkFun RedBoard Turbo that demonstrates how to override the default microcontroller and CPU frequency settings using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/sparkfun_redboard_turbo.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:sparkfun_redboard_turbo]\nplatform = atmelsam\nboard = sparkfun_redboard_turbo\n\n; change microcontroller\nboard_build.mcu = samd21g18a\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for RAK811 LoRa Tracker\nDESCRIPTION: Basic environment configuration for RAK811 LoRa Tracker in platformio.ini file. This sets up the STM32 platform with the RAK811 tracker board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/rak811_tracker.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:rak811_tracker]\nplatform = ststm32\nboard = rak811_tracker\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for Adafruit Feather M0 Express\nDESCRIPTION: Minimal configuration required in platformio.ini to use the Adafruit Feather M0 Express board with PlatformIO.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_feather_m0_express.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_feather_m0_express]\nplatform = atmelsam\nboard = adafruit_feather_m0_express\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic STC8H1K12 Board in PlatformIO\nDESCRIPTION: This snippet shows how to configure the Generic STC8H1K12 board in a PlatformIO project's configuration file. It sets the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8H1K12.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8H1K12]\nplatform = intel_mcs51\nboard = STC8H1K12\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic PlatformIO Environment for Microduino Core+\nDESCRIPTION: Basic PlatformIO configuration for setting up a build environment targeting the Microduino Core+ board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/644pa8m.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:644pa8m]\nplatform = atmelavr\nboard = 644pa8m\n```\n\n----------------------------------------\n\nTITLE: Basic N79E822 Board Configuration in PlatformIO\nDESCRIPTION: Basic configuration snippet for setting up a PlatformIO project targeting the N79E822 board using the intel_mcs51 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/N79E822.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:N79E822]\nplatform = intel_mcs51\nboard = N79E822\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for ST Nucleo F030R8\nDESCRIPTION: Configuration example showing how to specify the upload protocol for ST Nucleo F030R8 board. The default protocol is stlink, but other protocols like blackmagic, cmsis-dap, jlink, and mbed are also supported.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f030r8.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f030r8]\nplatform = ststm32\nboard = nucleo_f030r8\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for STM32F413RH Board\nDESCRIPTION: Configuration showing how to specify the upload protocol for STM32F413RH. The board supports multiple protocols including blackmagic, dfu, jlink, serial, and stlink with serial being the default.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F413RH.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F413RH]\nplatform = ststm32\nboard = genericSTM32F413RH\n\nupload_protocol = serial\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration in PlatformIO\nDESCRIPTION: Basic configuration for the oddWires IoT-Bus Io board using the espressif32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/iotbusio.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:iotbusio]\nplatform = espressif32\nboard = iotbusio\n```\n\n----------------------------------------\n\nTITLE: Customizing Arduino MKR1000 Hardware Settings\nDESCRIPTION: Advanced configuration for the Arduino MKR1000 board with custom microcontroller and frequency settings. This snippet demonstrates how to override default board settings using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/mkr1000USB.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:mkr1000USB]\nplatform = atmelsam\nboard = mkr1000USB\n\n; change microcontroller\nboard_build.mcu = samd21g18a\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Seeeduino XIAO in platformio.ini\nDESCRIPTION: Basic configuration for setting up a PlatformIO project for the Seeeduino XIAO board. Specifies the Atmel SAM platform and selects the XIAO board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/seeed_xiao.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:seeed_xiao]\nplatform = atmelsam\nboard = seeed_xiao\n```\n\n----------------------------------------\n\nTITLE: Basic ESPea32 Board Configuration\nDESCRIPTION: Basic configuration for setting up an ESPea32 board environment in PlatformIO's project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/espea32.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:espea32]\nplatform = espressif32\nboard = espea32\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for Pycom LoPy4\nDESCRIPTION: Minimal configuration required to set up a PlatformIO project for the Pycom LoPy4 board using the espressif32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/lopy4.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:lopy4]\nplatform = espressif32\nboard = lopy4\n```\n\n----------------------------------------\n\nTITLE: Customizing ATmega3290 Hardware Settings in PlatformIO\nDESCRIPTION: Advanced configuration for the ATmega3290 board in PlatformIO, overriding default settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega3290.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega3290]\nplatform = atmelavr\nboard = ATmega3290\n\n; change microcontroller\nboard_build.mcu = atmega3290\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Customized M200 V2 Board Configuration with MCU and Frequency Override\nDESCRIPTION: Extended PlatformIO.ini configuration that demonstrates how to override default board settings like microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/malyanm200_f070cb.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:malyanm200_f070cb]\nplatform = ststm32\nboard = malyanm200_f070cb\n\n; change microcontroller\nboard_build.mcu = stm32f070cbt6\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for SparkFun RED-V RedBoard\nDESCRIPTION: Basic configuration example showing how to set up a PlatformIO environment for the SparkFun RED-V RedBoard using the SiFive platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/sifive/sparkfun_redboard_v.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:sparkfun_redboard_v]\nplatform = sifive\nboard = sparkfun_redboard_v\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for TTGO T-Beam\nDESCRIPTION: Configuration to specify the upload protocol for the TTGO T-Beam board. In this example, it's set to the default 'esptool' protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/ttgo-t-beam.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:ttgo-t-beam]\nplatform = espressif32\nboard = ttgo-t-beam\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Customizing STC15W408S Board Settings in PlatformIO\nDESCRIPTION: This example demonstrates how to override default board settings in a PlatformIO project. It shows how to change the microcontroller and MCU frequency for the STC15W408S board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15W408S.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15W408S]\nplatform = intel_mcs51\nboard = STC15W408S\n\n; change microcontroller\nboard_build.mcu = stc15w408s\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Customizing Turta IoT Node Hardware Settings in PlatformIO\nDESCRIPTION: Example of customizing the Turta IoT Node hardware settings by overriding default configurations in the platformio.ini file. This shows how to modify the microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/turta_iot_node.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:turta_iot_node]\nplatform = espressif32\nboard = turta_iot_node\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU Settings\nDESCRIPTION: Extended PlatformIO configuration demonstrating how to override default microcontroller and frequency settings for the DevEBox H743VITX board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/devebox_h743vitx.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:devebox_h743vitx]\nplatform = ststm32\nboard = devebox_h743vitx\n\n; change microcontroller\nboard_build.mcu = stm32h743vit6\n\n; change MCU frequency\nboard_build.f_cpu = 480000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration for ATtiny806 with Custom Settings\nDESCRIPTION: Extended configuration for an ATtiny806 project that overrides default board settings. This example demonstrates how to change the microcontroller model and set a custom CPU frequency using board-specific options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/ATtiny806.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATtiny806]\nplatform = atmelmegaavr\nboard = ATtiny806\n\n; change microcontroller\nboard_build.mcu = attiny806\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for NXP LPCXpresso54608\nDESCRIPTION: Configuration example for changing the upload protocol to 'mbed' for the NXP LPCXpresso54608 board in platformio.ini.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nxplpc/lpc546xx.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:lpc546xx]\nplatform = nxplpc\nboard = lpc546xx\n\nupload_protocol = mbed\n```\n\n----------------------------------------\n\nTITLE: Customizing ATtiny412 Board Settings in PlatformIO\nDESCRIPTION: Extended configuration showing how to override default board settings such as microcontroller type and CPU frequency in a PlatformIO project. This allows for customization of hardware-specific parameters.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/ATtiny412.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATtiny412]\nplatform = atmelmegaavr\nboard = ATtiny412\n\n; change microcontroller\nboard_build.mcu = attiny412\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Custom MCU and Frequency Configuration for RedBearLab Blend 2\nDESCRIPTION: Example platformio.ini configuration that overrides the default microcontroller and frequency settings for the RedBearLab Blend 2 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/redbear_blend2.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:redbear_blend2]\nplatform = nordicnrf52\nboard = redbear_blend2\n\n; change microcontroller\nboard_build.mcu = nrf52832\n\n; change MCU frequency\nboard_build.f_cpu = 64000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for WeMos Board\nDESCRIPTION: Configuration for specifying the upload protocol used to flash firmware to the WeMos WiFi and Bluetooth Battery board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/wemosbat.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:wemosbat]\nplatform = espressif32\nboard = wemosbat\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for SparkFun SAMD51 Thing Plus\nDESCRIPTION: Configuration example for changing the upload protocol to sam-ba for the SparkFun SAMD51 Thing Plus board in PlatformIO.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/sparkfun_samd51_thing_plus.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:sparkfun_samd51_thing_plus]\nplatform = atmelsam\nboard = sparkfun_samd51_thing_plus\n\nupload_protocol = sam-ba\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for STM32F401CC in platformio.ini\nDESCRIPTION: PlatformIO configuration specifying the upload protocol for STM32F401CC board, using the serial protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F401CC.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F401CC]\nplatform = ststm32\nboard = genericSTM32F401CC\n\nupload_protocol = serial\n```\n\n----------------------------------------\n\nTITLE: Basic ATtiny824 Board Configuration in PlatformIO\nDESCRIPTION: Configures a basic PlatformIO environment for the ATtiny824 board using the atmelmegaavr platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/ATtiny824.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATtiny824]\nplatform = atmelmegaavr\nboard = ATtiny824\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration with Custom Settings\nDESCRIPTION: Extended configuration for AVR128DB64 board with custom microcontroller and frequency settings. Demonstrates how to override default board settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/AVR128DB64.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:AVR128DB64]\nplatform = atmelmegaavr\nboard = AVR128DB64\n\n; change microcontroller\nboard_build.mcu = avr128db64\n\n; change MCU frequency\nboard_build.f_cpu = 24000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic N76E885 Board in PlatformIO\nDESCRIPTION: This snippet shows how to set up a PlatformIO environment for the Generic N76E885 board in the project configuration file. It includes the basic setup and examples of how to override default board settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/N76E885.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:N76E885]\nplatform = intel_mcs51\nboard = N76E885\n\n; change microcontroller\nboard_build.mcu = n76e885\n\n; change MCU frequency\nboard_build.f_cpu = 22118400L\n```\n\n----------------------------------------\n\nTITLE: Configuring EnviroDIY Mayfly Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the EnviroDIY Mayfly board in a PlatformIO project configuration file. It sets the platform to atmelavr and the board to mayfly.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/mayfly.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:mayfly]\nplatform = atmelavr\nboard = mayfly\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Econode-L082CZ\nDESCRIPTION: This snippet demonstrates how to set the upload protocol for the Econode-L082CZ board in the PlatformIO configuration. The board supports multiple protocols, with 'dfu' as the default.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/econode_l082cz.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:econode_l082cz]\nplatform = ststm32\nboard = econode_l082cz\n\nupload_protocol = dfu\n```\n\n----------------------------------------\n\nTITLE: Configuring ST Nucleo F303K8 Board in platformio.ini\nDESCRIPTION: Basic configuration for the ST Nucleo F303K8 board in the PlatformIO project configuration file. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f303k8.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f303k8]\nplatform = ststm32\nboard = nucleo_f303k8\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Board Settings in PlatformIO\nDESCRIPTION: Basic PlatformIO configuration for the STC8H3K32S4 board, setting the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8H3K32S4.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8H3K32S4]\nplatform = intel_mcs51\nboard = STC8H3K32S4\n```\n\n----------------------------------------\n\nTITLE: Configuring Arduino Uno Mini Board in PlatformIO\nDESCRIPTION: This snippet shows how to configure the Arduino Uno Mini board in a PlatformIO project's configuration file. It sets the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/uno_mini.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:uno_mini]\nplatform = atmelavr\nboard = uno_mini\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Board Settings in platformio.ini\nDESCRIPTION: This example demonstrates how to override default board settings such as the microcontroller and CPU frequency in the PlatformIO configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/ML56MD1AE.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ML56MD1AE]\nplatform = intel_mcs51\nboard = ML56MD1AE\n\n; change microcontroller\nboard_build.mcu = ml56md1ae\n\n; change MCU frequency\nboard_build.f_cpu = 24000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Board Environment for ESP8266 ESP-01 1M in platformio.ini\nDESCRIPTION: Basic configuration for setting up an ESP8266 ESP-01 1M board environment in the PlatformIO project configuration file. This defines the platform and board type.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/esp01_1m.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp01_1m]\nplatform = espressif8266\nboard = esp01_1m\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic STM32-H407 Environment in PlatformIO\nDESCRIPTION: Sets up a basic PlatformIO environment for the Olimex STM32-H407 board using the ststm32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/olimex_h407.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:olimex_h407]\nplatform = ststm32\nboard = olimex_h407\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO Environment for ML51XB9AE Board\nDESCRIPTION: A basic configuration for setting up a PlatformIO project environment using the ML51XB9AE board. This snippet initializes the platform and board options in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/ML51XB9AE.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ML51XB9AE]\nplatform = intel_mcs51\nboard = ML51XB9AE\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Protocol for TAMC DPU ESP32\nDESCRIPTION: Example configuration that specifies the upload protocol for a TAMC DPU ESP32 board in PlatformIO. This snippet shows how to set esptool as the upload method in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/dpu_esp32.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:dpu_esp32]\nplatform = espressif32\nboard = dpu_esp32\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: WiPy3 Upload Protocol Configuration\nDESCRIPTION: Demonstrates how to configure the upload protocol for the WiPy3 board using esptool.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/wipy3.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:wipy3]\nplatform = espressif32\nboard = wipy3\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Arduino Uno R4 Minima\nDESCRIPTION: Configuration to specify the upload protocol for the Arduino Uno R4 Minima board in platformio.ini. The default protocol is 'dfu'.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/renesas-ra/uno_r4_minima.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:uno_r4_minima]\nplatform = renesas-ra\nboard = uno_r4_minima\n\nupload_protocol = dfu\n```\n\n----------------------------------------\n\nTITLE: Advanced STC15F202EA Board Configuration\nDESCRIPTION: Extended PlatformIO configuration demonstrating how to override default board settings including microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15F202EA.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15F202EA]\nplatform = intel_mcs51\nboard = STC15F202EA\n\n; change microcontroller\nboard_build.mcu = stc15f202ea\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Configuring WEMOS D1 R1 Board in PlatformIO\nDESCRIPTION: Basic configuration for the WEMOS D1 R1 board in the project's platformio.ini file. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/d1.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:d1]\nplatform = espressif8266\nboard = d1\n```\n\n----------------------------------------\n\nTITLE: Customizing Generic STC15W408AS Board Settings in PlatformIO\nDESCRIPTION: This snippet demonstrates how to override default board settings in the PlatformIO configuration. It includes examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15W408AS.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15W408AS]\nplatform = intel_mcs51\nboard = STC15W408AS\n\n; change microcontroller\nboard_build.mcu = stc15w408as\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Board Settings for Munich Labs RedPill ESP32-S3\nDESCRIPTION: Example showing how to override default microcontroller and frequency settings for the RedPill ESP32-S3 board in PlatformIO configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/redpill_esp32s3.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:redpill_esp32s3]\nplatform = espressif32\nboard = redpill_esp32s3\n\n; change microcontroller\nboard_build.mcu = esp32s3\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring ATtiny826 Board in PlatformIO Configuration File\nDESCRIPTION: Basic configuration for ATtiny826 board in platformio.ini file. This sets up the build environment for the atmelmegaavr platform targeting the ATtiny826 microcontroller.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/ATtiny826.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATtiny826]\nplatform = atmelmegaavr\nboard = ATtiny826\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Upload Protocol for AT89S51\nDESCRIPTION: Configuration demonstrating how to change the upload protocol for the AT89S51 board. This example specifies 'avrdude' as the upload protocol instead of using the default one.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/AT89S51.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:AT89S51]\nplatform = intel_mcs51\nboard = AT89S51\n\nupload_protocol = avrdude\n```\n\n----------------------------------------\n\nTITLE: Basic N76E003 Board Configuration in platformio.ini\nDESCRIPTION: Basic configuration for using the N76E003 board with the Intel MCS-51 platform in PlatformIO projects. This snippet defines the essential parameters needed to compile and upload code to the board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/N76E003.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:N76E003]\nplatform = intel_mcs51\nboard = N76E003\n```\n\n----------------------------------------\n\nTITLE: Overriding Default ATmega168PB Settings in PlatformIO INI File\nDESCRIPTION: This snippet demonstrates how to override default ATmega168PB settings in the PlatformIO project configuration file. It includes examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega168PB.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega168PB]\nplatform = atmelavr\nboard = ATmega168PB\n\n; change microcontroller\nboard_build.mcu = atmega168pb\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Adafruit CLUE nRF52840 in platformio.ini\nDESCRIPTION: Basic configuration for the Adafruit CLUE nRF52840 board in the project's platformio.ini file. This snippet sets the platform and board options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/adafruit_clue_nrf52840.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_clue_nrf52840]\nplatform = nordicnrf52\nboard = adafruit_clue_nrf52840\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Adafruit CLUE nRF52840\nDESCRIPTION: Configuration to set the upload protocol for the Adafruit CLUE nRF52840 board. This example uses the nrfutil protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/adafruit_clue_nrf52840.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_clue_nrf52840]\nplatform = nordicnrf52\nboard = adafruit_clue_nrf52840\n\nupload_protocol = nrfutil\n```\n\n----------------------------------------\n\nTITLE: Overriding Default RedBearLab Blend Settings in PlatformIO INI File\nDESCRIPTION: This example demonstrates how to override default board settings for the RedBearLab Blend. It shows how to change the microcontroller and MCU frequency using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/blend.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:blend]\nplatform = atmelavr\nboard = blend\n\n; change microcontroller\nboard_build.mcu = atmega32u4\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Generic IAP12C5A62S2 Board Settings in PlatformIO\nDESCRIPTION: Extended PlatformIO configuration that demonstrates how to override default board settings such as microcontroller type and CPU frequency. These customizations can be added to your platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/IAP12C5A62S2.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:IAP12C5A62S2]\nplatform = intel_mcs51\nboard = IAP12C5A62S2\n\n; change microcontroller\nboard_build.mcu = iap12c5a62s2\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic ATtiny1604 Board Settings in PlatformIO\nDESCRIPTION: Basic configuration for setting up an ATtiny1604 board in the PlatformIO environment file (platformio.ini).\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/ATtiny1604.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATtiny1604]\nplatform = atmelmegaavr\nboard = ATtiny1604\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic STC8F1K08 Board in PlatformIO\nDESCRIPTION: This snippet shows how to configure the Generic STC8F1K08 board in a PlatformIO project's configuration file. It sets the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8F1K08.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8F1K08]\nplatform = intel_mcs51\nboard = STC8F1K08\n```\n\n----------------------------------------\n\nTITLE: Configuring LowPowerLab MightyHat Board in PlatformIO\nDESCRIPTION: This snippet shows how to configure the LowPowerLab MightyHat board in the PlatformIO project configuration file. It sets the platform to atmelavr and specifies the board as mightyhat.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/mightyhat.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:mightyhat]\nplatform = atmelavr\nboard = mightyhat\n```\n\n----------------------------------------\n\nTITLE: Customizing Heltec WiFi Kit 32 (V3) Board Settings\nDESCRIPTION: Advanced PlatformIO configuration showing how to override default board settings like microcontroller type and CPU frequency using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/heltec_wifi_kit_32_V3.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:heltec_wifi_kit_32_V3]\nplatform = espressif32\nboard = heltec_wifi_kit_32_V3\n\n; change microcontroller\nboard_build.mcu = esp32s3\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring ST Nucleo G0B1RE Board in platformio.ini\nDESCRIPTION: This snippet shows how to configure the ST Nucleo G0B1RE board in the PlatformIO project configuration file. It includes options for changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_g0b1re.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_g0b1re]\nplatform = ststm32\nboard = nucleo_g0b1re\n\n; change microcontroller\nboard_build.mcu = stm32g0b1ret6\n\n; change MCU frequency\nboard_build.f_cpu = 64000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic STC8H4K32LCD Board in PlatformIO\nDESCRIPTION: Basic configuration for the STC8H4K32LCD board in the PlatformIO project configuration file. This sets up the environment with the intel_mcs51 platform and the STC8H4K32LCD board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8H4K32LCD.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8H4K32LCD]\nplatform = intel_mcs51\nboard = STC8H4K32LCD\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Demonstrates how to configure the upload protocol for the SparkFun ESP32 IoT RedBoard.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/sparkfun_esp32_iot_redboard.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:sparkfun_esp32_iot_redboard]\nplatform = espressif32\nboard = sparkfun_esp32_iot_redboard\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Customizing Adafruit MagTag 2.9 ESP32S2 Hardware Settings\nDESCRIPTION: Advanced configuration that demonstrates how to override default hardware settings for the Adafruit MagTag 2.9 ESP32S2 board, including changing the microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/adafruit_magtag29_esp32s2.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_magtag29_esp32s2]\nplatform = espressif32\nboard = adafruit_magtag29_esp32s2\n\n; change microcontroller\nboard_build.mcu = esp32s2\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for SparkFun SAMD21 Dev Breakout\nDESCRIPTION: Configuration to specify the upload protocol for the SparkFun SAMD21 Dev Breakout board. In this example, it's set to use the SAM-BA bootloader.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/sparkfun_samd21_dev_usb.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:sparkfun_samd21_dev_usb]\nplatform = atmelsam\nboard = sparkfun_samd21_dev_usb\n\nupload_protocol = sam-ba\n```\n\n----------------------------------------\n\nTITLE: Customizing Board Settings in PlatformIO\nDESCRIPTION: Advanced configuration showing how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/ttgo-lora32-v21.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ttgo-lora32-v21]\nplatform = espressif32\nboard = ttgo-lora32-v21\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration for STM32\nDESCRIPTION: Basic configuration setup for Mbed Connect Cloud board using PlatformIO's environment configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/mbed_connect_odin.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:mbed_connect_odin]\nplatform = ststm32\nboard = mbed_connect_odin\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Maple Mini in PlatformIO\nDESCRIPTION: PlatformIO configuration specifying the upload protocol for the Maple Mini board. This example explicitly sets the default 'dfu' protocol, though the board also supports blackmagic, cmsis-dap, jlink, and stlink protocols.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/maple_mini_b20.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:maple_mini_b20]\nplatform = ststm32\nboard = maple_mini_b20\n\nupload_protocol = dfu\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the ESP32-S3 PowerFeather board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32s3_powerfeather.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32s3_powerfeather]\nplatform = espressif32\nboard = esp32s3_powerfeather\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the Eduino WiFi board, using esptool as the upload method.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/eduinowifi.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:eduinowifi]\nplatform = espressif8266\nboard = eduinowifi\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Customizing STC89C51RC Board Parameters in PlatformIO\nDESCRIPTION: Extended configuration example showing how to override default board settings like microcontroller model and CPU frequency in the PlatformIO project configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC89C51RC.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC89C51RC]\nplatform = intel_mcs51\nboard = STC89C51RC\n\n; change microcontroller\nboard_build.mcu = stc89c51rc\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Customizing Arduino MKR WAN 1300 Settings in PlatformIO\nDESCRIPTION: Advanced PlatformIO configuration for Arduino MKR WAN 1300 that overrides default board settings such as microcontroller type and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/mkrwan1300.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:mkrwan1300]\nplatform = atmelsam\nboard = mkrwan1300\n\n; change microcontroller\nboard_build.mcu = samd21g18a\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example demonstrating how to specify the upload protocol for the 96Boards Neonkey board in PlatformIO.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/b96b_aerocore2.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:b96b_aerocore2]\nplatform = ststm32\nboard = b96b_aerocore2\n\nupload_protocol = dfu\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic STC15W201S Board in PlatformIO\nDESCRIPTION: This snippet shows how to configure the Generic STC15W201S board in the PlatformIO project configuration file. It sets the platform to intel_mcs51 and the board to STC15W201S.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15W201S.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15W201S]\nplatform = intel_mcs51\nboard = STC15W201S\n```\n\n----------------------------------------\n\nTITLE: Customizing SeeedStudio CUI32stem Board Settings in PlatformIO\nDESCRIPTION: Advanced PlatformIO configuration for the SeeedStudio CUI32stem board that overrides default settings such as microcontroller type and MCU frequency. This demonstrates how to customize the board's properties using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/microchippic32/cui32stem.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:cui32stem]\nplatform = microchippic32\nboard = cui32stem\n\n; change microcontroller\nboard_build.mcu = 32MX795F512H\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for LilyGo T-Display in platformio.ini\nDESCRIPTION: Configuration example demonstrating how to specify the upload protocol for the LilyGo T-Display board. The example sets esptool as the upload protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/lilygo-t-display.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:lilygo-t-display]\nplatform = espressif32\nboard = lilygo-t-display\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Customizing ATmega649 Board Settings in PlatformIO\nDESCRIPTION: Advanced configuration example showing how to override default board settings in PlatformIO. Demonstrates changing the microcontroller type and MCU frequency for the ATmega649 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega649.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega649]\nplatform = atmelavr\nboard = ATmega649\n\n; change microcontroller\nboard_build.mcu = atmega649\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring ElectronutLabs Blip Board in PlatformIO\nDESCRIPTION: Basic PlatformIO configuration for the ElectronutLabs Blip board using the Nordic nRF52 platform. This snippet sets up the board ID and platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/electronut_blip.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:electronut_blip]\nplatform = nordicnrf52\nboard = electronut_blip\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for STM32F103VC in PlatformIO INI File\nDESCRIPTION: Configuration to specify the upload protocol for the STM32F103VC board. In this example, it's set to use the ST-Link protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103VC.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103VC]\nplatform = ststm32\nboard = genericSTM32F103VC\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Generic ATtiny828 Board\nDESCRIPTION: Basic configuration for Generic ATtiny828 board in platformio.ini file. This snippet shows how to set up a project environment targeting the attiny828 board with the atmelavr platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/attiny828.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:attiny828]\nplatform = atmelavr\nboard = attiny828\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration with MCU Settings\nDESCRIPTION: Extended configuration demonstrating how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/um_nanos3.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:um_nanos3]\nplatform = espressif32\nboard = um_nanos3\n\n; change microcontroller\nboard_build.mcu = esp32s3\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Raspberry Pi 2 Model B\nDESCRIPTION: This snippet shows how to configure a PlatformIO project for the Raspberry Pi 2 Model B board. It sets the platform to linux_arm and specifies the board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/linux_arm/raspberrypi_2b.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:raspberrypi_2b]\nplatform = linux_arm\nboard = raspberrypi_2b\n```\n\n----------------------------------------\n\nTITLE: Customizing STorM32 MCU and Clock Settings\nDESCRIPTION: PlatformIO configuration demonstrating how to override default microcontroller and frequency settings for the STorM32 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/storm32_v1_31_rc.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:storm32_v1_31_rc]\nplatform = ststm32\nboard = storm32_v1_31_rc\n\n; change microcontroller\nboard_build.mcu = stm32f103rct6\n\n; change MCU frequency\nboard_build.f_cpu = 72000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing STC15W402AS Configuration with Board Options in PlatformIO\nDESCRIPTION: Advanced configuration for the STC15W402AS board that demonstrates how to override default settings such as microcontroller model and CPU frequency in a PlatformIO project.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15W402AS.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15W402AS]\nplatform = intel_mcs51\nboard = STC15W402AS\n\n; change microcontroller\nboard_build.mcu = stc15w402as\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Configuring Arduino BT ATmega328 Board in PlatformIO INI file\nDESCRIPTION: This code snippet shows how to configure the Arduino BT ATmega328 board in a PlatformIO project's INI file. It sets the platform to atmelavr and specifies the board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/btatmega328.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:btatmega328]\nplatform = atmelavr\nboard = btatmega328\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Protocol in PlatformIO for Seeeduino XIAO\nDESCRIPTION: Configuration example showing how to set a specific upload protocol for the Seeeduino XIAO board. Uses the SAM-BA bootloader protocol for uploading firmware.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/seeed_xiao.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:seeed_xiao]\nplatform = atmelsam\nboard = seeed_xiao\n\nupload_protocol = sam-ba\n```\n\n----------------------------------------\n\nTITLE: Customizing ST Nucleo L031K6 Board Settings\nDESCRIPTION: Example of overriding default board settings such as microcontroller and CPU frequency in PlatformIO configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_l031k6.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_l031k6]\nplatform = ststm32\nboard = nucleo_l031k6\n\n; change microcontroller\nboard_build.mcu = stm32l031k6t6\n\n; change MCU frequency\nboard_build.f_cpu = 32000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic STC8H3K60S2 Board in PlatformIO INI File\nDESCRIPTION: This snippet demonstrates how to configure the Generic STC8H3K60S2 board in the PlatformIO project configuration file. It includes the basic setup and examples of overriding default board settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8H3K60S2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8H3K60S2]\nplatform = intel_mcs51\nboard = STC8H3K60S2\n\n; change microcontroller\nboard_build.mcu = stc8h3k60s2\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO Environment for N79E814 Board\nDESCRIPTION: Basic configuration for setting up a PlatformIO environment to work with the Generic N79E814 board. This snippet defines the board and platform in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/N79E814.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:N79E814]\nplatform = intel_mcs51\nboard = N79E814\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic PlatformIO Environment for NIBObee Robot Board\nDESCRIPTION: Basic configuration for the PlatformIO environment to work with the NIBObee robot board. This snippet specifies the atmelavr platform and sets the board to nibobee in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/nibobee.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nibobee]\nplatform = atmelavr\nboard = nibobee\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU Settings\nDESCRIPTION: Extended configuration example showing how to customize microcontroller settings like MCU model and frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103ZE.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103ZE]\nplatform = ststm32\nboard = genericSTM32F103ZE\n\n; change microcontroller\nboard_build.mcu = stm32f103zet6\n\n; change MCU frequency\nboard_build.f_cpu = 72000000L\n```\n\n----------------------------------------\n\nTITLE: Overriding Default STC8H1K28 Board Settings in PlatformIO\nDESCRIPTION: This snippet demonstrates how to override default board settings for the Generic STC8H1K28 in the PlatformIO configuration. It shows examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8H1K28.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8H1K28]\nplatform = intel_mcs51\nboard = STC8H1K28\n\n; change microcontroller\nboard_build.mcu = stc8h1k28\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for MS51DA9AE Board\nDESCRIPTION: Basic configuration for setting up a PlatformIO environment using the Generic MS51DA9AE board with the Intel MCS-51 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/MS51DA9AE.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:MS51DA9AE]\nplatform = intel_mcs51\nboard = MS51DA9AE\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Seeed Wio 3G\nDESCRIPTION: Configuration snippet showing how to specify the upload protocol for the Seeed Wio 3G board. This example explicitly sets the upload protocol to ST-Link, which is also the default option.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/wio_3g.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:wio_3g]\nplatform = ststm32\nboard = wio_3g\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for NodeMCU in PlatformIO\nDESCRIPTION: Configures the upload protocol for the NodeMCU board. This example explicitly sets the upload protocol to 'esptool', which is also the default option for this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/nodemcu.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:nodemcu]\nplatform = espressif8266\nboard = nodemcu\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Customizing Generic STC15F101 Board Settings in PlatformIO INI File\nDESCRIPTION: This snippet demonstrates how to override default settings for the Generic STC15F101 board in the PlatformIO project configuration. It shows how to change the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15F101.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15F101]\nplatform = intel_mcs51\nboard = STC15F101\n\n; change microcontroller\nboard_build.mcu = stc15f101\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Configuring BluePill F103C8 Board in PlatformIO\nDESCRIPTION: This snippet shows how to configure the BluePill F103C8 board in the PlatformIO project configuration file. It sets the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/bluepill_f103c8.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:bluepill_f103c8]\nplatform = ststm32\nboard = bluepill_f103c8\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with Custom Settings\nDESCRIPTION: Extended configuration example showing how to override default board settings like microcontroller type and CPU frequency using board_*** options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/maxim32/max32630fthr.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:max32630fthr]\nplatform = maxim32\nboard = max32630fthr\n\n; change microcontroller\nboard_build.mcu = max32630\n\n; change MCU frequency\nboard_build.f_cpu = 96000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for 32F412GDISCOVERY in PlatformIO\nDESCRIPTION: Configuration for specifying the upload protocol for the 32F412GDISCOVERY board in PlatformIO. The example shows how to set the upload protocol to stlink.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_f412zg.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_f412zg]\nplatform = ststm32\nboard = disco_f412zg\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for NXP LPCXpresso54114\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the NXP LPCXpresso54114 board. This example uses the mbed protocol, which is also the default.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nxplpc/lpc54114.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:lpc54114]\nplatform = nxplpc\nboard = lpc54114\n\nupload_protocol = mbed\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Board Settings for TTGO LoRa32-V1\nDESCRIPTION: Basic PlatformIO configuration for setting up the TTGO LoRa32-V1 board with ESP32 platform\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/ttgo-lora32-v1.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ttgo-lora32-v1]\nplatform = espressif32\nboard = ttgo-lora32-v1\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with Custom Settings\nDESCRIPTION: Extended PlatformIO configuration showing how to override default board settings like MCU and frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/MS51FC0AE.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:MS51FC0AE]\nplatform = intel_mcs51\nboard = MS51FC0AE\n\n; change microcontroller\nboard_build.mcu = ms51fc0ae\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing TI LaunchPad MSP-EXP430FR5969LP Board Settings\nDESCRIPTION: Advanced PlatformIO configuration that overrides default board settings like microcontroller type and CPU frequency. This demonstrates how to customize the board configuration for specific project requirements.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/timsp430/lpmsp430fr5969.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:lpmsp430fr5969]\nplatform = timsp430\nboard = lpmsp430fr5969\n\n; change microcontroller\nboard_build.mcu = msp430fr5969\n\n; change MCU frequency\nboard_build.f_cpu = 8000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Taida Century nRF52 mini board\nDESCRIPTION: Basic configuration for using the Taida Century nRF52 mini board with PlatformIO. This snippet sets up the environment with the required platform and board settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/stct_nrf52_minidev.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:stct_nrf52_minidev]\nplatform = nordicnrf52\nboard = stct_nrf52_minidev\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with Custom Settings\nDESCRIPTION: Demonstrates how to override default board settings including microcontroller type and CPU frequency for the W79E8213 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/W79E8213.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:W79E8213]\nplatform = intel_mcs51\nboard = W79E8213\n\n; change microcontroller\nboard_build.mcu = w79e8213\n\n; change MCU frequency\nboard_build.f_cpu = 20000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Arduino Yun Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the Arduino Yun board in the PlatformIO project configuration file. It sets the platform to atmelavr and the board to yun.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/yun.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:yun]\nplatform = atmelavr\nboard = yun\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration for ATmega48\nDESCRIPTION: Extended configuration for ATmega48/A board showing how to override default settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega48.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega48]\nplatform = atmelavr\nboard = ATmega48\n\n; change microcontroller\nboard_build.mcu = atmega48\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring ST Nucleo L4R5ZI Board in PlatformIO\nDESCRIPTION: Basic configuration for the ST Nucleo L4R5ZI board in a PlatformIO project's platformio.ini file. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_l4r5zi.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_l4r5zi]\nplatform = ststm32\nboard = nucleo_l4r5zi\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic MS51PC0AE Board in platformio.ini\nDESCRIPTION: Basic configuration for the MS51PC0AE board in a PlatformIO project's platformio.ini file. This sets up the Intel MCS-51 platform with the Generic MS51PC0AE board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/MS51PC0AE.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:MS51PC0AE]\nplatform = intel_mcs51\nboard = MS51PC0AE\n```\n\n----------------------------------------\n\nTITLE: Configuring MS51XB9AE Board in PlatformIO\nDESCRIPTION: Basic PlatformIO configuration for using the MS51XB9AE board with the intel_mcs51 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/MS51XB9AE.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:MS51XB9AE]\nplatform = intel_mcs51\nboard = MS51XB9AE\n```\n\n----------------------------------------\n\nTITLE: Customizing ATtiny48 Board Parameters in PlatformIO\nDESCRIPTION: Advanced platformio.ini configuration showing how to override default board settings like the microcontroller type and clock frequency for the Generic ATtiny48 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/attiny48.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:attiny48]\nplatform = atmelavr\nboard = attiny48\n\n; change microcontroller\nboard_build.mcu = attiny48\n\n; change MCU frequency\nboard_build.f_cpu = 8000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for ST Nucleo WL55JC\nDESCRIPTION: Configuration example for specifying the upload protocol for the ST Nucleo WL55JC board. In this case, it's set to use the ST-Link protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_wl55jc.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_wl55jc]\nplatform = ststm32\nboard = nucleo_wl55jc\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Adafruit ESP32-S2 Feather\nDESCRIPTION: Configuration for specifying the upload protocol for the Adafruit ESP32-S2 Feather Development Board. This example explicitly sets esptool as the upload protocol, which is also the default option.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/featheresp32-s2.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:featheresp32-s2]\nplatform = espressif32\nboard = featheresp32-s2\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Customizing STC15F2K60S2 Board Settings in PlatformIO\nDESCRIPTION: Extended configuration example showing how to override default board settings such as microcontroller type and CPU frequency in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15F2K60S2.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15F2K60S2]\nplatform = intel_mcs51\nboard = STC15F2K60S2\n\n; change microcontroller\nboard_build.mcu = stc15f2k60s2\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Customizing Adafruit pyCamera S3 Board Settings in PlatformIO\nDESCRIPTION: Advanced configuration showing how to override default board settings like microcontroller type and CPU frequency for the Adafruit pyCamera S3 board in the PlatformIO project configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/adafruit_camera_esp32s3.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_camera_esp32s3]\nplatform = espressif32\nboard = adafruit_camera_esp32s3\n\n; change microcontroller\nboard_build.mcu = esp32s3\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for ATmega6490\nDESCRIPTION: Basic configuration setup for ATmega6490 board in platformio.ini file\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega6490.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega6490]\nplatform = atmelavr\nboard = ATmega6490\n```\n\n----------------------------------------\n\nTITLE: Configuring Olimex ARM-USB-OCD-H for Firmware Upload in PlatformIO\nDESCRIPTION: Extended configuration that enables using the Olimex ARM-USB-OCD-H not only for debugging but also for firmware uploading by changing the upload protocol in the PlatformIO project configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/olimex-arm-usb-ocd-h.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = ...\nboard = ...\ndebug_tool = olimex-arm-usb-ocd-h\nupload_protocol = olimex-arm-usb-ocd-h\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/adafruit_metro_esp32s2.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_metro_esp32s2]\nplatform = espressif32\nboard = adafruit_metro_esp32s2\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Custom BBC micro:bit MCU Configuration\nDESCRIPTION: Extended PlatformIO configuration showing how to customize microcontroller and frequency settings for the BBC micro:bit board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf51/bbcmicrobit.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:bbcmicrobit]\nplatform = nordicnrf51\nboard = bbcmicrobit\n\n; change microcontroller\nboard_build.mcu = nrf51822\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU Settings\nDESCRIPTION: Extended configuration example showing how to override default microcontroller settings like MCU model and frequency\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_l432kc.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_l432kc]\nplatform = ststm32\nboard = nucleo_l432kc\n\n; change microcontroller\nboard_build.mcu = stm32l432kcu6\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Basic STM32 Board Configuration\nDESCRIPTION: Basic configuration for setting up the u-blox C030-N211 board in PlatformIO's project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/ublox_c030_n211.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ublox_c030_n211]\nplatform = ststm32\nboard = ublox_c030_n211\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for ubIQio Ardhat Board\nDESCRIPTION: This INI configuration sets up a PlatformIO environment for the ubIQio Ardhat board. It specifies the platform as atmelavr and the board as ardhat.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ardhat.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ardhat]\nplatform = atmelavr\nboard = ardhat\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to set the upload protocol for the WeAct Studio MiniSTM32H743VITX board using ST-Link.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/weact_mini_h743vitx.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:weact_mini_h743vitx]\nplatform = ststm32\nboard = weact_mini_h743vitx\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Phoenix 1.0 Settings in PlatformIO INI File\nDESCRIPTION: This snippet demonstrates how to override default settings for the Phoenix 1.0 board in the PlatformIO configuration. It shows examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/phoenix_v1.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:phoenix_v1]\nplatform = espressif8266\nboard = phoenix_v1\n\n; change microcontroller\nboard_build.mcu = esp8266\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Generic STC8A8K16S4A12 Board Settings in PlatformIO\nDESCRIPTION: This snippet demonstrates how to override default settings for the Generic STC8A8K16S4A12 board in the PlatformIO configuration. It shows how to change the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8A8K16S4A12.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8A8K16S4A12]\nplatform = intel_mcs51\nboard = STC8A8K16S4A12\n\n; change microcontroller\nboard_build.mcu = stc8a8k16s4a12\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Customizing Arduino Pro Mini Board Settings in PlatformIO INI File\nDESCRIPTION: This code snippet demonstrates how to override default settings for the Arduino Pro or Pro Mini ATmega328 (3.3V, 8 MHz) board in the PlatformIO project configuration file. It shows how to change the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/pro8MHzatmega328.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:pro8MHzatmega328]\nplatform = atmelavr\nboard = pro8MHzatmega328\n\n; change microcontroller\nboard_build.mcu = atmega328p\n\n; change MCU frequency\nboard_build.f_cpu = 8000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for uPesy ESP32 Wrover DevKit\nDESCRIPTION: Configuration to specify the upload protocol for the uPesy ESP32 Wrover DevKit. In this example, it's set to the default 'esptool' protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/upesy_wrover.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:upesy_wrover]\nplatform = espressif32\nboard = upesy_wrover\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Customizing Adafruit QT Py ESP32 Board Settings in PlatformIO\nDESCRIPTION: Configuration example showing how to override default board settings like microcontroller type and CPU frequency in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/adafruit_qtpy_esp32.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_qtpy_esp32]\nplatform = espressif32\nboard = adafruit_qtpy_esp32\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration - PlatformIO INI\nDESCRIPTION: Basic configuration setup for Lion:Bit S3 STEM Dev Board in platformio.ini file using the espressif32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/lionbits3.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:lionbits3]\nplatform = espressif32\nboard = lionbits3\n```\n\n----------------------------------------\n\nTITLE: Customizing AfroFlight Rev5 (8MHz) Board Settings\nDESCRIPTION: Example of overriding default board settings such as microcontroller and CPU frequency in the PlatformIO configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/afroflight_f103cb.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:afroflight_f103cb]\nplatform = ststm32\nboard = afroflight_f103cb\n\n; change microcontroller\nboard_build.mcu = stm32f103cbt6\n\n; change MCU frequency\nboard_build.f_cpu = 72000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring 32F412GDISCOVERY Board in PlatformIO\nDESCRIPTION: Basic configuration for the 32F412GDISCOVERY board in the PlatformIO project configuration file. Sets the platform to ststm32 and board to disco_f412zg.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_f412zg.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_f412zg]\nplatform = ststm32\nboard = disco_f412zg\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for ST Nucleo U575ZI-Q\nDESCRIPTION: Configuration example for specifying the upload protocol (e.g., stlink) for the ST Nucleo U575ZI-Q board in PlatformIO.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_u575zi_q.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_u575zi_q]\nplatform = ststm32\nboard = nucleo_u575zi_q\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Microduino Core (Atmega168PA@8M,3.3V) in INI\nDESCRIPTION: This snippet shows how to configure the PlatformIO project configuration file (platformio.ini) for the Microduino Core (Atmega168PA@8M,3.3V) board. It sets the platform and board options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/168pa8m.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:168pa8m]\nplatform = atmelavr\nboard = 168pa8m\n```\n\n----------------------------------------\n\nTITLE: Configuring SparkFun ATmega128RFA1 Dev Board in PlatformIO\nDESCRIPTION: This code snippet shows how to configure the SparkFun ATmega128RFA1 Dev Board in the PlatformIO project configuration file. It sets the platform to atmelavr and the board to sparkfun_satmega128rfa1.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/sparkfun_satmega128rfa1.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:sparkfun_satmega128rfa1]\nplatform = atmelavr\nboard = sparkfun_satmega128rfa1\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/electronut_papyr.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:electronut_papyr]\nplatform = nordicnrf52\nboard = electronut_papyr\n\nupload_protocol = blackmagic\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for RYMCU STM32F407VE Board\nDESCRIPTION: Configuration snippet showing how to specify the upload protocol for the RYMCU STM32F407VE board. This example uses the ST-Link protocol, which is the default method for this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/rymcu_f407ve.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:rymcu_f407ve]\nplatform = ststm32\nboard = rymcu_f407ve\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Configuring STC15W100 Board with Custom Settings in platformio.ini\nDESCRIPTION: Advanced configuration example for STC15W100 board that overrides default settings like microcontroller model and CPU frequency in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15W100.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15W100]\nplatform = intel_mcs51\nboard = STC15W100\n\n; change microcontroller\nboard_build.mcu = stc15w100\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic STC15W100 Board Environment in platformio.ini\nDESCRIPTION: Basic configuration example for STC15W100 board in a PlatformIO project's platformio.ini file. This snippet sets up the minimum required configuration to work with this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15W100.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15W100]\nplatform = intel_mcs51\nboard = STC15W100\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for BL652 Development Kit\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the BL652 Development Kit. This demonstrates setting J-Link as the upload method, though the board supports multiple protocols.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/laird_bl652_dvk.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:laird_bl652_dvk]\nplatform = nordicnrf52\nboard = laird_bl652_dvk\n\nupload_protocol = jlink\n```\n\n----------------------------------------\n\nTITLE: Configuring Arduino Portenta H7 (M4 core) Board in PlatformIO\nDESCRIPTION: Basic configuration for the Arduino Portenta H7 (M4 core) board in the PlatformIO project configuration file. This snippet defines the environment, platform, and board selection.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/portenta_h7_m4.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:portenta_h7_m4]\nplatform = ststm32\nboard = portenta_h7_m4\n```\n\n----------------------------------------\n\nTITLE: Customizing STC12C5A52S2 Board Settings\nDESCRIPTION: Advanced PlatformIO configuration demonstrating how to override default board settings like microcontroller type and CPU frequency\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC12C5A52S2.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC12C5A52S2]\nplatform = intel_mcs51\nboard = STC12C5A52S2\n\n; change microcontroller\nboard_build.mcu = stc12c5a52s2\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Customizing STM3210C-EVAL Board Settings in PlatformIO\nDESCRIPTION: Extended PlatformIO configuration showing how to override default board settings such as microcontroller type and CPU frequency using the board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/eval_f107vc.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:eval_f107vc]\nplatform = ststm32\nboard = eval_f107vc\n\n; change microcontroller\nboard_build.mcu = stm32f107vct6\n\n; change MCU frequency\nboard_build.f_cpu = 72000000L\n```\n\n----------------------------------------\n\nTITLE: Custom MCU Configuration\nDESCRIPTION: Example showing how to override default board settings like microcontroller model and CPU frequency using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/piconomix_px_her0.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:piconomix_px_her0]\nplatform = ststm32\nboard = piconomix_px_her0\n\n; change microcontroller\nboard_build.mcu = stm32l072rb\n\n; change MCU frequency\nboard_build.f_cpu = 32000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU and Frequency Settings\nDESCRIPTION: Extended board configuration showing how to override default microcontroller and frequency settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/bluepill_f103c8_128k.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:bluepill_f103c8_128k]\nplatform = ststm32\nboard = bluepill_f103c8_128k\n\n; change microcontroller\nboard_build.mcu = stm32f103c8t6\n\n; change MCU frequency\nboard_build.f_cpu = 72000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Arduino Esplora Board in PlatformIO Project Configuration\nDESCRIPTION: Basic configuration for using Arduino Esplora board in a PlatformIO project environment. This snippet shows how to specify the board in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/esplora.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:esplora]\nplatform = atmelavr\nboard = esplora\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration in PlatformIO\nDESCRIPTION: Basic PlatformIO configuration for Smart Bee Motion Mini board using the espressif32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/bee_motion_mini.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:bee_motion_mini]\nplatform = espressif32\nboard = bee_motion_mini\n```\n\n----------------------------------------\n\nTITLE: Basic ESP8266 Board Configuration\nDESCRIPTION: Basic PlatformIO configuration for Adafruit HUZZAH ESP8266 board setup.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/huzzah.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:huzzah]\nplatform = espressif8266\nboard = huzzah\n```\n\n----------------------------------------\n\nTITLE: Customizing Phoenix 2.0 Board Configuration in PlatformIO\nDESCRIPTION: Advanced configuration for the Phoenix 2.0 board that demonstrates how to override default board settings such as microcontroller type and CPU frequency using the board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/phoenix_v2.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:phoenix_v2]\nplatform = espressif8266\nboard = phoenix_v2\n\n; change microcontroller\nboard_build.mcu = esp8266\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Aventen S3 Sync\nDESCRIPTION: Configuration to specify the upload protocol for the Aventen S3 Sync board. In this example, it's set to the default 'esptool' protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/aventen_s3_sync.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:aventen_s3_sync]\nplatform = espressif32\nboard = aventen_s3_sync\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Customizing STC15W102 Board Settings in PlatformIO\nDESCRIPTION: Extended configuration example showing how to override default board settings like microcontroller type and CPU frequency in a PlatformIO project for the STC15W102 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15W102.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15W102]\nplatform = intel_mcs51\nboard = STC15W102\n\n; change microcontroller\nboard_build.mcu = stc15w102\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Configuring STM32F103VE Board in PlatformIO\nDESCRIPTION: Basic configuration for the STM32F103VE board in platformio.ini file. This sets up the environment with the ststm32 platform and the genericSTM32F103VE board identifier.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103VE.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103VE]\nplatform = ststm32\nboard = genericSTM32F103VE\n```\n\n----------------------------------------\n\nTITLE: Configuring ng-beacon Board in PlatformIO INI File\nDESCRIPTION: Basic configuration for the ng-beacon board using the Nordic nRF51 platform. This snippet sets up the environment, platform, and board in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf51/ng_beacon.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ng_beacon]\nplatform = nordicnrf51\nboard = ng_beacon\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic 8052 Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the Generic 8052 board in the PlatformIO project configuration file. It sets the platform to intel_mcs51 and specifies the board as Generic8052.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/Generic8052.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:Generic8052]\nplatform = intel_mcs51\nboard = Generic8052\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Generic IAP15W105 Settings in PlatformIO INI File\nDESCRIPTION: This snippet demonstrates how to override default settings for the Generic IAP15W105 board in the PlatformIO configuration. It shows how to change the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/IAP15W105.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:IAP15W105]\nplatform = intel_mcs51\nboard = IAP15W105\n\n; change microcontroller\nboard_build.mcu = iap15w105\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Customizing ATmega168 Board Parameters in PlatformIO\nDESCRIPTION: Advanced configuration showing how to override default board settings like microcontroller type and CPU frequency in platformio.ini.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega168.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega168]\nplatform = atmelavr\nboard = ATmega168\n\n; change microcontroller\nboard_build.mcu = atmega168\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic IRC15W1K31S Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the Generic IRC15W1K31S board in a PlatformIO project's configuration file. It sets the platform and board, and demonstrates how to override default settings such as microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/IRC15W1K31S.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:IRC15W1K31S]\nplatform = intel_mcs51\nboard = IRC15W1K31S\n\n; change microcontroller\nboard_build.mcu = irc15w1k31s\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU Settings\nDESCRIPTION: Extended PlatformIO configuration showing how to override default microcontroller and frequency settings for the SparkFun Qwiic Micro board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/sparkfun_qwiic_micro_samd21e.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:sparkfun_qwiic_micro_samd21e]\nplatform = atmelsam\nboard = sparkfun_qwiic_micro_samd21e\n\n; change microcontroller\nboard_build.mcu = samd21e18a\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing STM32 Nucleo G474RE MCU Settings in PlatformIO\nDESCRIPTION: Demonstrates how to override default Nucleo G474RE settings by modifying the microcontroller type and CPU frequency. These board-specific settings are defined in the board's JSON manifest file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_g474re.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_g474re]\nplatform = ststm32\nboard = nucleo_g474re\n\n; change microcontroller\nboard_build.mcu = stm32g474ret6\n\n; change MCU frequency\nboard_build.f_cpu = 170000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Widora AIR\nDESCRIPTION: Configuration example for specifying the upload protocol. Widora AIR supports 'espota' and 'esptool', with 'esptool' as the default.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/widora-air.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:widora-air]\nplatform = espressif32\nboard = widora-air\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Board Settings in PlatformIO\nDESCRIPTION: Basic configuration for setting up the Arduino Pro Mini ATmega168 board in PlatformIO's project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/pro8MHzatmega168.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:pro8MHzatmega168]\nplatform = atmelavr\nboard = pro8MHzatmega168\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for L476DMW1K Board\nDESCRIPTION: Basic PlatformIO configuration for the L476DMW1K board in the project's platformio.ini file. This configuration specifies the STM32 platform and the board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/rhombio_l476dmw1k.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:rhombio_l476dmw1k]\nplatform = ststm32\nboard = rhombio_l476dmw1k\n```\n\n----------------------------------------\n\nTITLE: Overriding Default ML51SD1AE Board Settings in platformio.ini\nDESCRIPTION: Example showing how to override the default board settings such as microcontroller type and CPU frequency in a PlatformIO project configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/ML51SD1AE.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ML51SD1AE]\nplatform = intel_mcs51\nboard = ML51SD1AE\n\n; change microcontroller\nboard_build.mcu = ml51sd1ae\n\n; change MCU frequency\nboard_build.f_cpu = 24000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing STC15F204A Board Settings in PlatformIO.ini\nDESCRIPTION: Advanced configuration for the STC15F204A board showing how to override default settings such as microcontroller type and CPU frequency in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15F204A.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15F204A]\nplatform = intel_mcs51\nboard = STC15F204A\n\n; change microcontroller\nboard_build.mcu = stc15f204a\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO Environment for STC15W4K48S4 Board\nDESCRIPTION: Basic PlatformIO configuration for the STC15W4K48S4 board. This snippet shows how to specify the board in the platformio.ini file to create a project targeting the STC15W4K48S4 microcontroller on the intel_mcs51 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15W4K48S4.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15W4K48S4]\nplatform = intel_mcs51\nboard = STC15W4K48S4\n```\n\n----------------------------------------\n\nTITLE: Customizing Maple Mini Original Board Settings (INI)\nDESCRIPTION: Example of overriding default board settings in PlatformIO, such as changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/maple_mini_origin.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:maple_mini_origin]\nplatform = ststm32\nboard = maple_mini_origin\n\n; change microcontroller\nboard_build.mcu = stm32f103cbt6\n\n; change MCU frequency\nboard_build.f_cpu = 72000000L\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration for BlackPill F303CC\nDESCRIPTION: PlatformIO configuration specifying the upload protocol for the BlackPill F303CC board using ST-Link.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/robotdyn_blackpill_f303cc.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:robotdyn_blackpill_f303cc]\nplatform = ststm32\nboard = robotdyn_blackpill_f303cc\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic MS51TC0AE Board in PlatformIO\nDESCRIPTION: This snippet shows how to configure the Generic MS51TC0AE board in a PlatformIO project's configuration file (platformio.ini). It sets the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/MS51TC0AE.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:MS51TC0AE]\nplatform = intel_mcs51\nboard = MS51TC0AE\n```\n\n----------------------------------------\n\nTITLE: Customizing LowPowerLab Moteino (8Mhz) Board Settings in PlatformIO INI File\nDESCRIPTION: This snippet demonstrates how to override default settings for the LowPowerLab Moteino (8Mhz) board in the PlatformIO configuration. It shows how to change the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/moteino8mhz.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:moteino8mhz]\nplatform = atmelavr\nboard = moteino8mhz\n\n; change microcontroller\nboard_build.mcu = atmega328p\n\n; change MCU frequency\nboard_build.f_cpu = 8000000L\n```\n\n----------------------------------------\n\nTITLE: Basic N2+ Board Configuration in PlatformIO\nDESCRIPTION: Basic configuration for setting up a project targeting the N2+ board using the STM32 platform\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/netduino2plus.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:netduino2plus]\nplatform = ststm32\nboard = netduino2plus\n```\n\n----------------------------------------\n\nTITLE: Basic BBC micro:bit Board Configuration\nDESCRIPTION: Basic PlatformIO configuration for BBC micro:bit board using the Nordic nRF51 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf51/bbcmicrobit.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:bbcmicrobit]\nplatform = nordicnrf51\nboard = bbcmicrobit\n```\n\n----------------------------------------\n\nTITLE: Configuring Arduino Industrial 101 in PlatformIO\nDESCRIPTION: This code snippet shows how to configure the Arduino Industrial 101 board in the PlatformIO project configuration file. It sets the platform to atmelavr and the board to chiwawa.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/chiwawa.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:chiwawa]\nplatform = atmelavr\nboard = chiwawa\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO Environment for chipKIT WiFire rev. C\nDESCRIPTION: Basic PlatformIO configuration for the chipKIT WiFire rev. C board in the platformio.ini file. This configuration sets up the project to use the microchippic32 platform with the chipkit_wifire_revc board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/microchippic32/chipkit_wifire_revc.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:chipkit_wifire_revc]\nplatform = microchippic32\nboard = chipkit_wifire_revc\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic ATtiny44 in PlatformIO Project Configuration\nDESCRIPTION: Basic PlatformIO project configuration for the Generic ATtiny44 board. This configuration sets up the atmelavr platform with the attiny44 board identifier.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/attiny44.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:attiny44]\nplatform = atmelavr\nboard = attiny44\n```\n\n----------------------------------------\n\nTITLE: Configuring Board in PlatformIO INI File\nDESCRIPTION: Sets up the PlatformIO environment for the Aceinna OpenIMU 330ZA board. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/aceinna_imu/OpenRTK.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:OpenRTK]\nplatform = aceinna_imu\nboard = OpenRTK\n```\n\n----------------------------------------\n\nTITLE: Customizing STC8F2K16S2 Board Configuration in PlatformIO\nDESCRIPTION: Extended configuration example showing how to override default board settings such as microcontroller type and CPU frequency in the PlatformIO project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8F2K16S2.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8F2K16S2]\nplatform = intel_mcs51\nboard = STC8F2K16S2\n\n; change microcontroller\nboard_build.mcu = stc8f2k16s2\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic STC8H4K64TLR Board in PlatformIO Project\nDESCRIPTION: Basic configuration for using the STC8H4K64TLR board in a PlatformIO project. This snippet sets up the environment using the intel_mcs51 platform with the STC8H4K64TLR board identifier.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8H4K64TLR.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8H4K64TLR]\nplatform = intel_mcs51\nboard = STC8H4K64TLR\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for FRDM-K64F\nDESCRIPTION: Configuration to specify the upload protocol for the FRDM-K64F board, with 'mbed' as the default option.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/freescalekinetis/frdm_k64f.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:frdm_k64f]\nplatform = freescalekinetis\nboard = frdm_k64f\n\nupload_protocol = mbed\n```\n\n----------------------------------------\n\nTITLE: Customizing Microduino Core+ Board Settings\nDESCRIPTION: This snippet demonstrates how to override default board settings in PlatformIO. It shows examples of changing the microcontroller and MCU frequency for the Microduino Core+ board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/1284p8m.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:1284p8m]\nplatform = atmelavr\nboard = 1284p8m\n\n; change microcontroller\nboard_build.mcu = atmega1284p\n\n; change MCU frequency\nboard_build.f_cpu = 8000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for OLIMEX ESP32-DevKit-LiPo\nDESCRIPTION: Configuration to specify the upload protocol for the OLIMEX ESP32-DevKit-LiPo board in PlatformIO. Uses the default 'esptool' protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32-devkitlipo.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32-devkitlipo]\nplatform = espressif32\nboard = esp32-devkitlipo\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the MGBOT IOTIK 32A board. Supports both espota and esptool protocols.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/mgbot-iotik32a.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:mgbot-iotik32a]\nplatform = espressif32\nboard = mgbot-iotik32a\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration with MCU Settings\nDESCRIPTION: Extended PlatformIO configuration demonstrating how to override default board settings like microcontroller type and CPU frequency\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/168pa16m.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:168pa16m]\nplatform = atmelavr\nboard = 168pa16m\n\n; change microcontroller\nboard_build.mcu = atmega168p\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU and Frequency Settings\nDESCRIPTION: Extended PlatformIO configuration showing how to customize microcontroller and frequency settings for the WeAct Studio MiniSTM32H743VITX board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/weact_mini_h743vitx.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:weact_mini_h743vitx]\nplatform = ststm32\nboard = weact_mini_h743vitx\n\n; change microcontroller\nboard_build.mcu = stm32h743vit6\n\n; change MCU frequency\nboard_build.f_cpu = 480000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing The Things Uno Board Settings in PlatformIO\nDESCRIPTION: This INI code snippet demonstrates how to override default settings for The Things Uno board in a PlatformIO environment. It shows examples of changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/the_things_uno.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:the_things_uno]\nplatform = atmelavr\nboard = the_things_uno\n\n; change microcontroller\nboard_build.mcu = atmega32u4\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration for Sanguino ATmega1284p\nDESCRIPTION: Base configuration settings for setting up a PlatformIO project with the Sanguino ATmega1284p board using the atmelavr platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/sanguino_atmega1284p.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:sanguino_atmega1284p]\nplatform = atmelavr\nboard = sanguino_atmega1284p\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic STM32F103ZD Board Environment in PlatformIO\nDESCRIPTION: Basic configuration for setting up an STM32F103ZD board in PlatformIO's project configuration file. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103ZD.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103ZD]\nplatform = ststm32\nboard = genericSTM32F103ZD\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Protocol for Nucleo G070RB in PlatformIO\nDESCRIPTION: Example configuration that specifies the upload protocol for the Nucleo G070RB board. This demonstrates how to select ST-Link as the upload method.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_g070rb.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_g070rb]\nplatform = ststm32\nboard = nucleo_g070rb\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Configuring ST STM32G0316-DISCO Board in PlatformIO\nDESCRIPTION: Basic configuration for using the ST STM32G0316-DISCO board in a PlatformIO project. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_g031j6.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_g031j6]\nplatform = ststm32\nboard = disco_g031j6\n```\n\n----------------------------------------\n\nTITLE: Customizing Generic ML51TC1AE Board Settings in PlatformIO\nDESCRIPTION: This snippet demonstrates how to override default settings for the Generic ML51TC1AE board in the PlatformIO configuration. It shows how to change the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/ML51TC1AE.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ML51TC1AE]\nplatform = intel_mcs51\nboard = ML51TC1AE\n\n; change microcontroller\nboard_build.mcu = ml51tc1ae\n\n; change MCU frequency\nboard_build.f_cpu = 24000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic PlatformIO Environment for STC8H1K33\nDESCRIPTION: Basic configuration for setting up a PlatformIO project environment for the Generic STC8H1K33 board. This snippet defines the platform and board settings in the projectconf file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8H1K33.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8H1K33]\nplatform = intel_mcs51\nboard = STC8H1K33\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU Settings\nDESCRIPTION: Shows how to override default board settings like microcontroller type and CPU frequency using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F407VGT6.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F407VGT6]\nplatform = ststm32\nboard = genericSTM32F407VGT6\n\n; change microcontroller\nboard_build.mcu = stm32f407vgt6\n\n; change MCU frequency\nboard_build.f_cpu = 168000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU Settings\nDESCRIPTION: Configuration example showing how to override default microcontroller and frequency settings\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/sparkfun_micromod_f405.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:sparkfun_micromod_f405]\nplatform = ststm32\nboard = sparkfun_micromod_f405\n\n; change microcontroller\nboard_build.mcu = stm32f405rgt6\n\n; change MCU frequency\nboard_build.f_cpu = 168000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with Custom Settings\nDESCRIPTION: Extended PlatformIO configuration showing how to customize microcontroller and frequency settings for the MS51XB9BE board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/MS51XB9BE.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:MS51XB9BE]\nplatform = intel_mcs51\nboard = MS51XB9BE\n\n; change microcontroller\nboard_build.mcu = ms51xb9be\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing STC15W101 Board Settings in PlatformIO\nDESCRIPTION: Advanced PlatformIO configuration for the Generic STC15W101 board, demonstrating how to override default settings like the microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15W101.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15W101]\nplatform = intel_mcs51\nboard = STC15W101\n\n; change microcontroller\nboard_build.mcu = stc15w101\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Configuring Pic32 CUI32-Development Stick in PlatformIO\nDESCRIPTION: This snippet shows how to configure the Pic32 CUI32-Development Stick board in the PlatformIO project configuration file (platformio.ini). It sets the platform to microchippic32 and the board to cui32.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/microchippic32/cui32.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:cui32]\nplatform = microchippic32\nboard = cui32\n```\n\n----------------------------------------\n\nTITLE: Advanced STM32F407VE Board Configuration\nDESCRIPTION: Extended PlatformIO configuration demonstrating how to customize microcontroller and frequency settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F407VET6.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F407VET6]\nplatform = ststm32\nboard = genericSTM32F407VET6\n\n; change microcontroller\nboard_build.mcu = stm32f407vet6\n\n; change MCU frequency\nboard_build.f_cpu = 168000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Board Configuration in PlatformIO\nDESCRIPTION: Extended PlatformIO configuration demonstrating how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8H3K32S4.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8H3K32S4]\nplatform = intel_mcs51\nboard = STC8H3K32S4\n\n; change microcontroller\nboard_build.mcu = stc8h3k32s4\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Configuring NXP LPCXpresso54608 Board in platformio.ini\nDESCRIPTION: Basic configuration for the NXP LPCXpresso54608 board in the project's platformio.ini file. It sets the platform to nxplpc and the board to lpc546xx.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nxplpc/lpc546xx.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:lpc546xx]\nplatform = nxplpc\nboard = lpc546xx\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for 96Boards Nitrogen\nDESCRIPTION: Basic configuration for setting up a PlatformIO project with the 96Boards Nitrogen board. This snippet defines the platform and board in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/96b_nitrogen.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:96b_nitrogen]\nplatform = nordicnrf52\nboard = 96b_nitrogen\n```\n\n----------------------------------------\n\nTITLE: Configuring SparkFun SAMD21 Pro RF Board in PlatformIO\nDESCRIPTION: Basic configuration for the SparkFun SAMD21 Pro RF board in the PlatformIO project configuration file. Sets the platform to atmelsam and specifies the board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/sparkfun_samd21_proRF.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:sparkfun_samd21_proRF]\nplatform = atmelsam\nboard = sparkfun_samd21_proRF\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic IAP15F206A Board in PlatformIO\nDESCRIPTION: This snippet shows how to configure the Generic IAP15F206A board in the PlatformIO project configuration file (platformio.ini). It sets the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/IAP15F206A.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:IAP15F206A]\nplatform = intel_mcs51\nboard = IAP15F206A\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO Environment for Alorium XLR8 (INI)\nDESCRIPTION: This snippet shows how to set up a PlatformIO environment for the Alorium XLR8 board in the project configuration file. It specifies the platform and board to use.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/alorium_xlr8.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:alorium_xlr8]\nplatform = atmelavr\nboard = alorium_xlr8\n```\n\n----------------------------------------\n\nTITLE: Customizing Metro nRF52840 Express Board Settings in PlatformIO\nDESCRIPTION: Advanced configuration for the Metro nRF52840 Express board with custom microcontroller and frequency settings. This demonstrates how to override default board settings in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/adafruit_metro_nrf52840.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_metro_nrf52840]\nplatform = nordicnrf52\nboard = adafruit_metro_nrf52840\n\n; change microcontroller\nboard_build.mcu = nrf52840\n\n; change MCU frequency\nboard_build.f_cpu = 64000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring STM32F411RC Board in platformio.ini\nDESCRIPTION: Basic configuration for the STM32F411RC board in the PlatformIO project configuration file. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F411RC.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F411RC]\nplatform = ststm32\nboard = genericSTM32F411RC\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic PlatformIO Environment for Digispark Pro\nDESCRIPTION: Basic PlatformIO configuration for setting up a project targeting the Digispark Pro (16 MHz) with 64 byte buffer. This snippet defines the basic environment configuration using the atmelavr platform and the digispark-pro64 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/digispark-pro64.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:digispark-pro64]\nplatform = atmelavr\nboard = digispark-pro64\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for STM32F411CE in PlatformIO\nDESCRIPTION: Configuration example for changing the upload protocol for the STM32F411CE board. Sets the protocol to serial, which is the default.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F411CE.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F411CE]\nplatform = ststm32\nboard = genericSTM32F411CE\n\nupload_protocol = serial\n```\n\n----------------------------------------\n\nTITLE: Advanced IRC15W107 Board Configuration with Custom Settings\nDESCRIPTION: Extended configuration example showing how to override default board settings like microcontroller model and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/IRC15W107.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:IRC15W107]\nplatform = intel_mcs51\nboard = IRC15W107\n\n; change microcontroller\nboard_build.mcu = irc15w107\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO Environment for Generic STC15W410S Board\nDESCRIPTION: Basic PlatformIO configuration for the Generic STC15W410S board using the intel_mcs51 platform. This configuration sets up the project environment with the required platform and board settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15W410S.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15W410S]\nplatform = intel_mcs51\nboard = STC15W410S\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic RemRam v1 Board in PlatformIO\nDESCRIPTION: Basic configuration for the RemRam v1 3D printer controller in PlatformIO's project configuration file. This snippet shows how to specify the board in the environment section.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/remram_v1.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:remram_v1]\nplatform = ststm32\nboard = remram_v1\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for ST Nucleo H723ZG\nDESCRIPTION: Basic PlatformIO configuration for setting up the ST Nucleo H723ZG board with STM32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_h723zg.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_h723zg]\nplatform = ststm32\nboard = nucleo_h723zg\n```\n\n----------------------------------------\n\nTITLE: Basic Digispark Pro Board Configuration in PlatformIO\nDESCRIPTION: Basic configuration setup for Digispark Pro board in platformio.ini file. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/digispark-pro32.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:digispark-pro32]\nplatform = atmelavr\nboard = digispark-pro32\n```\n\n----------------------------------------\n\nTITLE: Configuring ATmega324PA Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the ATmega324PA board in the PlatformIO project configuration file (platformio.ini). It sets the platform to atmelavr and specifies the board as ATmega324PA.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega324PA.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega324PA]\nplatform = atmelavr\nboard = ATmega324PA\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic STC8H3K64S4 Board in PlatformIO\nDESCRIPTION: This snippet shows how to configure the Generic STC8H3K64S4 board in a PlatformIO project's configuration file. It sets the platform and board ID, and demonstrates how to override default board settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8H3K64S4.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8H3K64S4]\nplatform = intel_mcs51\nboard = STC8H3K64S4\n\n; change microcontroller\nboard_build.mcu = stc8h3k64s4\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic STC8H04A10 Board in PlatformIO\nDESCRIPTION: This snippet shows how to configure the Generic STC8H04A10 board in the PlatformIO project configuration file. It sets the platform to intel_mcs51 and specifies the board as STC8H04A10.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8H04A10.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8H04A10]\nplatform = intel_mcs51\nboard = STC8H04A10\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic IRC15W207S Board in PlatformIO\nDESCRIPTION: This snippet shows how to configure the Generic IRC15W207S board in the PlatformIO project configuration file. It sets the platform and board ID, and demonstrates how to override default microcontroller and frequency settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/IRC15W207S.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:IRC15W207S]\nplatform = intel_mcs51\nboard = IRC15W207S\n\n; change microcontroller\nboard_build.mcu = irc15w207s\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Protocol for unPhone 7\nDESCRIPTION: Configuration example showing how to specify a custom upload protocol for the unPhone 7 board. This example uses the default 'esptool' protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/unphone7.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:unphone7]\nplatform = espressif32\nboard = unphone7\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration for MS51XB9BE\nDESCRIPTION: Basic PlatformIO configuration for setting up an MS51XB9BE board project. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/MS51XB9BE.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:MS51XB9BE]\nplatform = intel_mcs51\nboard = MS51XB9BE\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration with Custom MCU Settings for IAP15F413AD\nDESCRIPTION: Extended configuration for the Generic IAP15F413AD board with custom microcontroller settings. This example demonstrates how to override default board settings such as the microcontroller model and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/IAP15F413AD.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:IAP15F413AD]\nplatform = intel_mcs51\nboard = IAP15F413AD\n\n; change microcontroller\nboard_build.mcu = iap15f413ad\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic PlatformIO Project for ST Nucleo F303RE\nDESCRIPTION: Basic configuration for setting up a PlatformIO project targeting the ST Nucleo F303RE board. Uses the STM32 platform with default board settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f303re.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f303re]\nplatform = ststm32\nboard = nucleo_f303re\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic STC8F2K32S2 Board in PlatformIO\nDESCRIPTION: This code snippet shows how to configure the Generic STC8F2K32S2 board in the PlatformIO project configuration file. It sets the platform to intel_mcs51 and specifies the board as STC8F2K32S2.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8F2K32S2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8F2K32S2]\nplatform = intel_mcs51\nboard = STC8F2K32S2\n```\n\n----------------------------------------\n\nTITLE: Customizing NUCLEO-8S207K8 Board Settings\nDESCRIPTION: Example of overriding default board settings in platformio.ini. It demonstrates how to change the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm8/nucleo_8s207k8.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_8s207k8]\nplatform = ststm8\nboard = nucleo_8s207k8\n\n; change microcontroller\nboard_build.mcu = stm8s207k8t6\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Basic microS2 Board Configuration in PlatformIO\nDESCRIPTION: Basic configuration for setting up a microS2 board project using the espressif32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/micros2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:micros2]\nplatform = espressif32\nboard = micros2\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for ATmega48P\nDESCRIPTION: Basic configuration setup for ATmega48P board in platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega48P.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega48P]\nplatform = atmelavr\nboard = ATmega48P\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic N79E825 Board in platformio.ini\nDESCRIPTION: Basic configuration for using the Generic N79E825 board in the PlatformIO project configuration file. This defines the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/N79E825.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:N79E825]\nplatform = intel_mcs51\nboard = N79E825\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration with Custom Settings\nDESCRIPTION: Extended configuration example showing how to override default board settings like microcontroller model and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC89C53RC.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC89C53RC]\nplatform = intel_mcs51\nboard = STC89C53RC\n\n; change microcontroller\nboard_build.mcu = stc89c53rc\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Configuring LilyGo T3-S3 Board in PlatformIO\nDESCRIPTION: This snippet shows how to configure the LilyGo T3-S3 board in the PlatformIO project configuration file. It sets the platform to espressif32 and specifies the board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/lilygo-t3-s3.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:lilygo-t3-s3]\nplatform = espressif32\nboard = lilygo-t3-s3\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic STC8C2K16S2 Board in PlatformIO\nDESCRIPTION: Basic configuration for setting up the Generic STC8C2K16S2 board in platformio.ini. This establishes the Intel MCS-51 platform and selects the STC8C2K16S2 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8C2K16S2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8C2K16S2]\nplatform = intel_mcs51\nboard = STC8C2K16S2\n```\n\n----------------------------------------\n\nTITLE: Customizing MXChip AZ3166 Board Parameters\nDESCRIPTION: Example showing how to override default board settings for the Microsoft Azure IoT Development Kit, such as changing the microcontroller and CPU frequency in the PlatformIO project configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/mxchip_az3166.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:mxchip_az3166]\nplatform = ststm32\nboard = mxchip_az3166\n\n; change microcontroller\nboard_build.mcu = stm32f412zgt6\n\n; change MCU frequency\nboard_build.f_cpu = 100000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Protocol for ST STM32F0308DISCOVERY\nDESCRIPTION: Shows how to set a specific upload protocol for the ST STM32F0308DISCOVERY board. This example sets the protocol to 'stlink', which is the default, but can be changed to other supported protocols like blackmagic, cmsis-dap, or jlink.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_f030r8.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_f030r8]\nplatform = ststm32\nboard = disco_f030r8\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Configuring SparkFun ESP8266 Thing Dev Board in PlatformIO\nDESCRIPTION: This snippet shows how to configure the SparkFun ESP8266 Thing Dev board in the PlatformIO project configuration file. It sets the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/thingdev.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:thingdev]\nplatform = espressif8266\nboard = thingdev\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Arduino Portenta H7 (M4 core) in PlatformIO\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the Arduino Portenta H7 (M4 core) board. This demonstrates using the DFU protocol which is the default for this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/portenta_h7_m4.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:portenta_h7_m4]\nplatform = ststm32\nboard = portenta_h7_m4\n\nupload_protocol = dfu\n```\n\n----------------------------------------\n\nTITLE: Custom ATtiny1616 Configuration with Modified MCU Parameters\nDESCRIPTION: Advanced configuration for ATtiny1616 in platformio.ini that overrides default settings, including microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/ATtiny1616.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATtiny1616]\nplatform = atmelmegaavr\nboard = ATtiny1616\n\n; change microcontroller\nboard_build.mcu = attiny1616\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring HiFive Unleashed Board in PlatformIO\nDESCRIPTION: Basic PlatformIO configuration for the HiFive Unleashed board using the SiFive platform. This snippet shows how to specify the board in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/sifive/hifive-unleashed.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:hifive-unleashed]\nplatform = sifive\nboard = hifive-unleashed\n```\n\n----------------------------------------\n\nTITLE: Customizing M5Stack FIRE Board Settings in PlatformIO\nDESCRIPTION: This snippet demonstrates how to override default M5Stack FIRE settings in the PlatformIO configuration. It shows examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/m5stack-fire.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:m5stack-fire]\nplatform = espressif32\nboard = m5stack-fire\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced IAP15W413S Board Configuration with Custom Settings\nDESCRIPTION: Extended PlatformIO configuration demonstrating how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/IAP15W413S.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:IAP15W413S]\nplatform = intel_mcs51\nboard = IAP15W413S\n\n; change microcontroller\nboard_build.mcu = iap15w413s\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic STC8F1K17S2 Board in PlatformIO\nDESCRIPTION: This snippet demonstrates how to configure the Generic STC8F1K17S2 board in the platformio.ini file. It sets the platform to intel_mcs51 and specifies the board as STC8F1K17S2.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8F1K17S2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8F1K17S2]\nplatform = intel_mcs51\nboard = STC8F1K17S2\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO Environment for Adafruit pyBadge M4 Express\nDESCRIPTION: Basic PlatformIO configuration for the Adafruit pyBadge M4 Express board. It sets the platform to atmelsam and the board to adafruit_pybadge_m4.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_pybadge_m4.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_pybadge_m4]\nplatform = atmelsam\nboard = adafruit_pybadge_m4\n```\n\n----------------------------------------\n\nTITLE: Customizing VAkE v1.0 Board Configuration in PlatformIO\nDESCRIPTION: Advanced configuration example that demonstrates how to override default settings for the VAkE v1.0 board, including microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/vake_v1.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:vake_v1]\nplatform = ststm32\nboard = vake_v1\n\n; change microcontroller\nboard_build.mcu = stm32f446ret6\n\n; change MCU frequency\nboard_build.f_cpu = 180000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing ML56LD1AE Board Configuration in PlatformIO\nDESCRIPTION: Advanced PlatformIO project configuration for the Generic ML56LD1AE board with custom microcontroller and frequency settings. This example demonstrates how to override default board settings using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/ML56LD1AE.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ML56LD1AE]\nplatform = intel_mcs51\nboard = ML56LD1AE\n\n; change microcontroller\nboard_build.mcu = ml56ld1ae\n\n; change MCU frequency\nboard_build.f_cpu = 24000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration with Custom Settings\nDESCRIPTION: Extended configuration for ATmega48P with custom microcontroller and frequency settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega48P.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega48P]\nplatform = atmelavr\nboard = ATmega48P\n\n; change microcontroller\nboard_build.mcu = atmega48p\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Framework Documentation Index\nDESCRIPTION: ReStructuredText markup defining the frameworks documentation table of contents, listing all supported frameworks as child pages.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/frameworks/index.rst#2025-04-10_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n\n    arduino\n    cmsis\n    energia\n    esp8266-nonos-sdk\n    esp8266-rtos-sdk\n    espidf\n    freedom-e-sdk\n    freertos\n    fsp\n    libopencm3\n    mbed\n    pulp-os\n    pulp-runtime\n    pulp-sdk\n    shakti-sdk\n    spl\n    stm32cube\n    wd-riscv-sdk\n    wiringpi\n    zephyr\n```\n\n----------------------------------------\n\nTITLE: Configuring ST 32F469IDISCOVERY Board in PlatformIO\nDESCRIPTION: Basic PlatformIO configuration for the ST 32F469IDISCOVERY board using the STM32 platform. Specifies the board ID to use in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_f469ni.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_f469ni]\nplatform = ststm32\nboard = disco_f469ni\n```\n\n----------------------------------------\n\nTITLE: Customizing STC8F2K64S2 Board Settings in PlatformIO\nDESCRIPTION: Extended PlatformIO configuration showing how to override default board settings like microcontroller type and CPU frequency. This allows for customization of the build environment beyond default board parameters.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8F2K64S2.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8F2K64S2]\nplatform = intel_mcs51\nboard = STC8F2K64S2\n\n; change microcontroller\nboard_build.mcu = stc8f2k64s2\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Customizing FRDM-K64F Board Settings\nDESCRIPTION: Example of overriding default board settings, such as microcontroller and CPU frequency, in the PlatformIO configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/freescalekinetis/frdm_k64f.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:frdm_k64f]\nplatform = freescalekinetis\nboard = frdm_k64f\n\n; change microcontroller\nboard_build.mcu = mk64fn1m0vll12\n\n; change MCU frequency\nboard_build.f_cpu = 120000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring ATmega3250 Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the ATmega3250 board in the PlatformIO project configuration file. It sets the platform and board name.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega3250.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega3250]\nplatform = atmelavr\nboard = ATmega3250\n```\n\n----------------------------------------\n\nTITLE: Configuring STM32F417VG Board in PlatformIO\nDESCRIPTION: Basic PlatformIO configuration for the STM32F417VG board, including platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F417VG.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F417VG]\nplatform = ststm32\nboard = genericSTM32F417VG\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic ATtiny441 Board in PlatformIO\nDESCRIPTION: This snippet shows how to configure the Generic ATtiny441 board in a PlatformIO project's configuration file. It sets the platform to atmelavr and specifies the board as attiny441.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/attiny441.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:attiny441]\nplatform = atmelavr\nboard = attiny441\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration - PlatformIO INI\nDESCRIPTION: Configuration example for setting the upload protocol for the LilyGo T-Display-S3 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/lilygo-t-display-s3.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:lilygo-t-display-s3]\nplatform = espressif32\nboard = lilygo-t-display-s3\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Customizing IAP15F2K61S Board Settings in PlatformIO\nDESCRIPTION: Extended PlatformIO configuration demonstrating how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/IAP15F2K61S.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:IAP15F2K61S]\nplatform = intel_mcs51\nboard = IAP15F2K61S\n\n; change microcontroller\nboard_build.mcu = iap15f2k61s\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Configuring Arduino Duemilanove or Diecimila ATmega168 in PlatformIO INI file\nDESCRIPTION: This snippet shows how to configure the Arduino Duemilanove or Diecimila ATmega168 board in the PlatformIO project configuration file. It sets the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/diecimilaatmega168.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:diecimilaatmega168]\nplatform = atmelavr\nboard = diecimilaatmega168\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Metro nRF52840 Express Board in PlatformIO\nDESCRIPTION: Basic configuration for the Metro nRF52840 Express board in the project's platformio.ini file. This defines the board and platform to use for the build environment.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/adafruit_metro_nrf52840.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_metro_nrf52840]\nplatform = nordicnrf52\nboard = adafruit_metro_nrf52840\n```\n\n----------------------------------------\n\nTITLE: Overriding Default ESPectro Core Settings in PlatformIO Configuration\nDESCRIPTION: Example showing how to override default board settings such as microcontroller type and CPU frequency using board_*** options in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/espectro.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:espectro]\nplatform = espressif8266\nboard = espectro\n\n; change microcontroller\nboard_build.mcu = esp8266\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Arduino Nano RP2040 Connect\nDESCRIPTION: This code snippet demonstrates how to set the upload protocol for the Arduino Nano RP2040 Connect board in the PlatformIO configuration. It uses the 'picotool' protocol, which is the default for this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/raspberrypi/nanorp2040connect.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nanorp2040connect]\nplatform = raspberrypi\nboard = nanorp2040connect\n\nupload_protocol = picotool\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for BBC micro:bit V2\nDESCRIPTION: Configuration example for specifying the upload protocol for the BBC micro:bit V2 board. Uses the CMSIS-DAP protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/bbcmicrobit_v2.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:bbcmicrobit_v2]\nplatform = nordicnrf52\nboard = bbcmicrobit_v2\n\nupload_protocol = cmsis-dap\n```\n\n----------------------------------------\n\nTITLE: Basic N79E815 Board Configuration in PlatformIO\nDESCRIPTION: Basic configuration setup for the N79E815 board using the intel_mcs51 platform in platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/N79E815.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:N79E815]\nplatform = intel_mcs51\nboard = N79E815\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO Environment for DevEBox H750VBTX\nDESCRIPTION: Basic PlatformIO configuration for the DevEBox H750VBTX board. This snippet shows how to specify the board in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/devebox_h750vbtx.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:devebox_h750vbtx]\nplatform = ststm32\nboard = devebox_h750vbtx\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic PlatformIO Environment for AVR64DD28\nDESCRIPTION: Basic configuration for a PlatformIO project targeting the AVR64DD28 board. This snippet defines an environment that uses the atmelmegaavr platform with the AVR64DD28 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/AVR64DD28.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:AVR64DD28]\nplatform = atmelmegaavr\nboard = AVR64DD28\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for Digilent chipKIT Pro MX4\nDESCRIPTION: Basic configuration for setting up a PlatformIO project targeting the Digilent chipKIT Pro MX4 board. This defines the minimum required parameters in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/microchippic32/chipkit_pro_mx4.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:chipkit_pro_mx4]\nplatform = microchippic32\nboard = chipkit_pro_mx4\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for ML51PB9AE Board\nDESCRIPTION: Basic configuration for setting up a PlatformIO project for the Generic ML51PB9AE board. This snippet shows the minimum required settings in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/ML51PB9AE.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ML51PB9AE]\nplatform = intel_mcs51\nboard = ML51PB9AE\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Protocol for Blues Swan R5\nDESCRIPTION: PlatformIO configuration that specifies the upload protocol for the Blues Swan R5 board. This example uses the ST-Link protocol, which is also the default option for this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/blues_swan_r5.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:blues_swan_r5]\nplatform = ststm32\nboard = blues_swan_r5\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Setting Teensy 3.5 Upload Protocol\nDESCRIPTION: Configuration example showing how to specify the upload protocol for Teensy 3.5 in PlatformIO.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/teensy/teensy35.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:teensy35]\nplatform = teensy\nboard = teensy35\n\nupload_protocol = teensy-gui\n```\n\n----------------------------------------\n\nTITLE: Customizing ML51XB9AE Board Configuration in PlatformIO\nDESCRIPTION: Advanced configuration for the ML51XB9AE board that demonstrates how to override default settings such as microcontroller type and CPU frequency in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/ML51XB9AE.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ML51XB9AE]\nplatform = intel_mcs51\nboard = ML51XB9AE\n\n; change microcontroller\nboard_build.mcu = ml51xb9ae\n\n; change MCU frequency\nboard_build.f_cpu = 24000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic PlatformIO Environment for Onehorse ESP32 Dev Module\nDESCRIPTION: Basic configuration for setting up a PlatformIO environment for the Onehorse ESP32 Dev Module board. This snippet shows the minimal required configuration in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/onehorse32dev.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:onehorse32dev]\nplatform = espressif32\nboard = onehorse32dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic IAP15W4K63S4 Board Settings\nDESCRIPTION: Basic PlatformIO configuration for the IAP15W4K63S4 board using the intel_mcs51 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/IAP15W4K63S4.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:IAP15W4K63S4]\nplatform = intel_mcs51\nboard = IAP15W4K63S4\n```\n\n----------------------------------------\n\nTITLE: Configuring ST Sensor Node Board in PlatformIO\nDESCRIPTION: This snippet demonstrates how to configure the ST Sensor Node board in a PlatformIO project's configuration file. It specifies the platform, board, and provides examples of overriding default board settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/silica_sensor_node.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:silica_sensor_node]\nplatform = ststm32\nboard = silica_sensor_node\n\n; change microcontroller\nboard_build.mcu = stm32l476jg\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring ST DISCO-L072CZ-LRWAN1 Board in PlatformIO INI File\nDESCRIPTION: Basic configuration for the ST DISCO-L072CZ-LRWAN1 board in the PlatformIO project configuration file. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_l072cz_lrwan1.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_l072cz_lrwan1]\nplatform = ststm32\nboard = disco_l072cz_lrwan1\n```\n\n----------------------------------------\n\nTITLE: Customizing ATmega3250 Board Settings in PlatformIO INI File\nDESCRIPTION: This snippet demonstrates how to override default settings for the ATmega3250 board, such as changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega3250.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega3250]\nplatform = atmelavr\nboard = ATmega3250\n\n; change microcontroller\nboard_build.mcu = atmega3250\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic AVR64DA28 Board Settings in PlatformIO\nDESCRIPTION: Basic PlatformIO configuration for the AVR64DA28 board using the atmelmegaavr platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/AVR64DA28.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:AVR64DA28]\nplatform = atmelmegaavr\nboard = AVR64DA28\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic STC8C2K64S2 Board Settings in platformio.ini\nDESCRIPTION: Basic configuration for Generic STC8C2K64S2 board in the PlatformIO project configuration file. This sets up the Intel MCS-51 platform with the STC8C2K64S2 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8C2K64S2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8C2K64S2]\nplatform = intel_mcs51\nboard = STC8C2K64S2\n```\n\n----------------------------------------\n\nTITLE: Advanced STC89C58RD+ Board Configuration with Custom Settings\nDESCRIPTION: Extended configuration example showing how to override default board settings like microcontroller type and CPU frequency using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC89C58RD+.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC89C58RD+]\nplatform = intel_mcs51\nboard = STC89C58RD+\n\n; change microcontroller\nboard_build.mcu = stc89c58rd+\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Customizing Digilent chipKIT MX3 Configuration in PlatformIO\nDESCRIPTION: Advanced configuration for Digilent chipKIT MX3 board that overrides default settings such as the microcontroller and CPU frequency. This demonstrates how to customize board settings in the PlatformIO project configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/microchippic32/chipkit_mx3.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:chipkit_mx3]\nplatform = microchippic32\nboard = chipkit_mx3\n\n; change microcontroller\nboard_build.mcu = 32MX320F128H\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Adafruit pyCamera S3\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the Adafruit pyCamera S3 board. This sets the upload protocol to 'esptool', which is also the default protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/adafruit_camera_esp32s3.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_camera_esp32s3]\nplatform = espressif32\nboard = adafruit_camera_esp32s3\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Customizing SpellFoundry Sleepy Pi 2 Board Parameters in PlatformIO\nDESCRIPTION: Advanced configuration for SpellFoundry Sleepy Pi 2 showing how to override default board settings. This example demonstrates changing the microcontroller type and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/sleepypi.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:sleepypi]\nplatform = atmelavr\nboard = sleepypi\n\n; change microcontroller\nboard_build.mcu = atmega328p\n\n; change MCU frequency\nboard_build.f_cpu = 8000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring FYSETC S6 Board in PlatformIO\nDESCRIPTION: This snippet shows how to configure the FYSETC S6 board in a PlatformIO project's configuration file. It sets the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/fysetc_s6.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:fysetc_s6]\nplatform = ststm32\nboard = fysetc_s6\n```\n\n----------------------------------------\n\nTITLE: Configuring MGBOT IOTIK 32B Board in PlatformIO\nDESCRIPTION: Sets up the build environment for the MGBOT IOTIK 32B board using the Espressif32 platform in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/mgbot-iotik32b.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:mgbot-iotik32b]\nplatform = espressif32\nboard = mgbot-iotik32b\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for AVR128DB48 Board\nDESCRIPTION: Basic configuration for setting up an AVR128DB48 board in the PlatformIO project configuration file. This snippet defines the platform and board ID required for a project.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/AVR128DB48.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:AVR128DB48]\nplatform = atmelmegaavr\nboard = AVR128DB48\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for ST STM32L4+ Discovery kit IoT node\nDESCRIPTION: Configuration to specify the upload protocol for the ST STM32L4+ Discovery kit IoT node. In this example, it's set to the default 'stlink' protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_l4s5i_iot01a.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_l4s5i_iot01a]\nplatform = ststm32\nboard = disco_l4s5i_iot01a\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Customizing ATmega1609 Board Settings in PlatformIO INI File\nDESCRIPTION: This snippet demonstrates how to override default ATmega1609 settings in the PlatformIO project configuration file. It includes examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/ATmega1609.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega1609]\nplatform = atmelmegaavr\nboard = ATmega1609\n\n; change microcontroller\nboard_build.mcu = atmega1609\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring M5Stack Core ESP32 16M Board in PlatformIO\nDESCRIPTION: This snippet shows how to set up the M5Stack Core ESP32 16M board in the PlatformIO project configuration file. It specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/m5stack-core-esp32-16M.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:m5stack-core-esp32-16M]\nplatform = espressif32\nboard = m5stack-core-esp32-16M\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for Fubarino Mini\nDESCRIPTION: Basic environment configuration in platformio.ini file to set up a project for Fubarino Mini board using the microchippic32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/microchippic32/fubarino_mini.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:fubarino_mini]\nplatform = microchippic32\nboard = fubarino_mini\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic ML54MD1AE Environment in platformio.ini\nDESCRIPTION: Basic configuration for the Generic ML54MD1AE board in the platformio.ini project configuration file. Sets up the environment with the Intel MCS-51 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/ML54MD1AE.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ML54MD1AE]\nplatform = intel_mcs51\nboard = ML54MD1AE\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: PlatformIO configuration showing how to specify the upload protocol for the Smart Bee Motion Mini board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/bee_motion_mini.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:bee_motion_mini]\nplatform = espressif32\nboard = bee_motion_mini\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Customizing Board Configuration Settings\nDESCRIPTION: Extended PlatformIO configuration showing how to override default board settings like microcontroller model and CPU frequency using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/timsp430/lpmsp430fr2433.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:lpmsp430fr2433]\nplatform = timsp430\nboard = lpmsp430fr2433\n\n; change microcontroller\nboard_build.mcu = msp430fr2433\n\n; change MCU frequency\nboard_build.f_cpu = 8000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic PlatformIO Environment for W79E659 Board\nDESCRIPTION: Basic configuration for setting up a PlatformIO environment for the Generic W79E659 board using the intel_mcs51 platform. This snippet shows the minimal required settings in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/W79E659.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:W79E659]\nplatform = intel_mcs51\nboard = W79E659\n```\n\n----------------------------------------\n\nTITLE: Customizing Qchip Board Settings in PlatformIO\nDESCRIPTION: This code demonstrates how to override default Qchip board settings in the PlatformIO configuration. It shows examples of changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/qchip.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:qchip]\nplatform = espressif32\nboard = qchip\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Customized Teensy 3.6 Configuration with MCU and CPU Frequency Override\nDESCRIPTION: Extended configuration for Teensy 3.6 that overrides the default microcontroller and CPU frequency settings. This example changes the MCU to mk66fx1m0 and sets the CPU frequency to 180MHz.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/teensy/teensy36.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:teensy36]\nplatform = teensy\nboard = teensy36\n\n; change microcontroller\nboard_build.mcu = mk66fx1m0\n\n; change MCU frequency\nboard_build.f_cpu = 180000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic STC8A8K32D4 Environment in PlatformIO\nDESCRIPTION: Basic PlatformIO project configuration for STC8A8K32D4 board using the intel_mcs51 platform. This configuration sets up the minimal required parameters for building projects for this microcontroller.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8A8K32D4.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8A8K32D4]\nplatform = intel_mcs51\nboard = STC8A8K32D4\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic STC8H1K08 Board in PlatformIO\nDESCRIPTION: This snippet shows how to configure the Generic STC8H1K08 board in a PlatformIO project's configuration file. It sets the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8H1K08.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8H1K08]\nplatform = intel_mcs51\nboard = STC8H1K08\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration in PlatformIO\nDESCRIPTION: Basic environment configuration for the ST Nucleo F031K6 board using the ststm32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f031k6.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f031k6]\nplatform = ststm32\nboard = nucleo_f031k6\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic STC15F101 Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the Generic STC15F101 board in the PlatformIO project configuration file. It sets the platform to intel_mcs51 and specifies the board as STC15F101.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15F101.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15F101]\nplatform = intel_mcs51\nboard = STC15F101\n```\n\n----------------------------------------\n\nTITLE: Configuring Arduino Ethernet Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the Arduino Ethernet board in the PlatformIO project configuration file. It sets the platform to atmelavr and the board to ethernet.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ethernet.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ethernet]\nplatform = atmelavr\nboard = ethernet\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Protocol for Holyiot YJ-16019\nDESCRIPTION: Example configuration showing how to specify the upload protocol for the Holyiot YJ-16019 board in a PlatformIO project. The board supports multiple protocols with JLink as default.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/holyiot_yj16019.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:holyiot_yj16019]\nplatform = nordicnrf52\nboard = holyiot_yj16019\n\nupload_protocol = jlink\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Protocol for MultiTech mDot F411\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the MultiTech mDot F411 board. This sets the upload protocol to mbed, which is the default for this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/mts_mdot_f411re.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:mts_mdot_f411re]\nplatform = ststm32\nboard = mts_mdot_f411re\n\nupload_protocol = mbed\n```\n\n----------------------------------------\n\nTITLE: Customizing Generic ML51BB9AE Board Settings in PlatformIO\nDESCRIPTION: Advanced configuration for overriding default settings of the Generic ML51BB9AE board in a PlatformIO project. This example demonstrates how to change the microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/ML51BB9AE.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ML51BB9AE]\nplatform = intel_mcs51\nboard = ML51BB9AE\n\n; change microcontroller\nboard_build.mcu = ml51bb9ae\n\n; change MCU frequency\nboard_build.f_cpu = 24000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic AVR32DA48 Environment in PlatformIO\nDESCRIPTION: Basic configuration for the AVR32DA48 board in the platformio.ini file. This snippet shows how to set up a project environment for the AVR32DA48 board using the atmelmegaavr platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/AVR32DA48.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:AVR32DA48]\nplatform = atmelmegaavr\nboard = AVR32DA48\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the Gnat-L082CZ board using DFU as the selected protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/gnat_l082cz.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:gnat_l082cz]\nplatform = ststm32\nboard = gnat_l082cz\n\nupload_protocol = dfu\n```\n\n----------------------------------------\n\nTITLE: Basic AVR64DB28 Board Configuration in PlatformIO\nDESCRIPTION: Basic configuration example for setting up an AVR64DB28 board project in PlatformIO using the atmelmegaavr platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/AVR64DB28.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:AVR64DB28]\nplatform = atmelmegaavr\nboard = AVR64DB28\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Controllino Maxi Automation Board in PlatformIO\nDESCRIPTION: Basic configuration for the Controllino Maxi Automation board in the PlatformIO project configuration file. This snippet specifies the platform and board to use.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/controllino_maxi_automation.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:controllino_maxi_automation]\nplatform = atmelavr\nboard = controllino_maxi_automation\n```\n\n----------------------------------------\n\nTITLE: Advanced STM32F103RE Board Configuration\nDESCRIPTION: Extended PlatformIO configuration demonstrating how to override default MCU and frequency settings for the STM32F103RE board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103RE.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103RE]\nplatform = ststm32\nboard = genericSTM32F103RE\n\n; change microcontroller\nboard_build.mcu = stm32f103ret6\n\n; change MCU frequency\nboard_build.f_cpu = 72000000L\n```\n\n----------------------------------------\n\nTITLE: Reverting to PlatformIO Stable Version\nDESCRIPTION: These commands uninstall the development version of PlatformIO and then install the latest stable version from PyPI using pip.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/installation/development-version.rst#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip uninstall platformio\npython -m pip install -U platformio\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Freescale Kinetis FRDM-KW41Z in PlatformIO\nDESCRIPTION: This configuration demonstrates how to set the upload protocol for the Freescale Kinetis FRDM-KW41Z board in the PlatformIO project file. The default protocol is 'mbed', but it can be explicitly specified.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/freescalekinetis/frdm_kw41z.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:frdm_kw41z]\nplatform = freescalekinetis\nboard = frdm_kw41z\n\nupload_protocol = mbed\n```\n\n----------------------------------------\n\nTITLE: Customizing Generic W79E658 Board Settings in PlatformIO\nDESCRIPTION: This INI configuration demonstrates how to override default settings for the Generic W79E658 board in a PlatformIO project. It includes examples of changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/W79E658.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:W79E658]\nplatform = intel_mcs51\nboard = W79E658\n\n; change microcontroller\nboard_build.mcu = w79e658\n\n; change MCU frequency\nboard_build.f_cpu = 22118400L\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for Minitronics v2.0\nDESCRIPTION: The minimal configuration required in the platformio.ini file to use the Minitronics v2.0 board. This sets up the atmelsam platform with the board identifier.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/minitronics20.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:minitronics20]\nplatform = atmelsam\nboard = minitronics20\n```\n\n----------------------------------------\n\nTITLE: Configuring TI LaunchPad MSP-EXP430FR2476LP Board in PlatformIO\nDESCRIPTION: This code snippet shows how to configure the TI LaunchPad MSP-EXP430FR2476LP board in the PlatformIO project configuration file. It sets the platform and board, and demonstrates how to override default settings like microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/timsp430/lpmsp430fr2476.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:lpmsp430fr2476]\nplatform = timsp430\nboard = lpmsp430fr2476\n\n; change microcontroller\nboard_build.mcu = msp430fr2476\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing ST STM32L4+ Discovery kit IoT node MCU and Frequency\nDESCRIPTION: Example of overriding default board settings to change the microcontroller and MCU frequency for the ST STM32L4+ Discovery kit IoT node.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_l4s5i_iot01a.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_l4s5i_iot01a]\nplatform = ststm32\nboard = disco_l4s5i_iot01a\n\n; change microcontroller\nboard_build.mcu = stm32l4s5vit6\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Protocol for STM32F401RD\nDESCRIPTION: PlatformIO configuration showing how to specify the upload protocol for STM32F401RD boards. The board supports multiple protocols including blackmagic, dfu, jlink, serial, and stlink, with serial being the default.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F401RD.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F401RD]\nplatform = ststm32\nboard = genericSTM32F401RD\n\nupload_protocol = serial\n```\n\n----------------------------------------\n\nTITLE: Configuring Arduino Opta (M4 core) in PlatformIO\nDESCRIPTION: This code snippet shows how to configure the Arduino Opta (M4 core) board in the PlatformIO project configuration file. It sets the platform, board, and provides examples of how to override default board settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/opta_m4.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:opta_m4]\nplatform = ststm32\nboard = opta_m4\n\n; change microcontroller\nboard_build.mcu = stm32h747xih6\n\n; change MCU frequency\nboard_build.f_cpu = 480000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic STC15W4K40S4 Board in PlatformIO\nDESCRIPTION: This code snippet shows how to configure the Generic STC15W4K40S4 board in the PlatformIO project configuration file (platformio.ini). It sets the platform to intel_mcs51 and specifies the board as STC15W4K40S4.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15W4K40S4.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15W4K40S4]\nplatform = intel_mcs51\nboard = STC15W4K40S4\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration with Custom Settings\nDESCRIPTION: Extended configuration showing how to override default board settings such as microcontroller model and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15W1K24S.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15W1K24S]\nplatform = intel_mcs51\nboard = STC15W1K24S\n\n; change microcontroller\nboard_build.mcu = stc15w1k24s\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Configuring ThunderPack v1.0 in PlatformIO Project\nDESCRIPTION: Basic configuration for using ThunderPack v1.0 board in PlatformIO projects. This snippet shows how to specify the board in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/thunder_pack.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:thunder_pack]\nplatform = ststm32\nboard = thunder_pack\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic ML51PC0AE Board in PlatformIO\nDESCRIPTION: This snippet shows how to configure the Generic ML51PC0AE board in a PlatformIO project's configuration file. It sets the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/ML51PC0AE.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ML51PC0AE]\nplatform = intel_mcs51\nboard = ML51PC0AE\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for STM32F401CE in PlatformIO\nDESCRIPTION: Configuration example demonstrating how to specify the upload protocol for the STM32F401CE board. This example uses serial protocol which is the default.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F401CE.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F401CE]\nplatform = ststm32\nboard = genericSTM32F401CE\n\nupload_protocol = serial\n```\n\n----------------------------------------\n\nTITLE: Customizing Element14 chipKIT Pi Board Configuration\nDESCRIPTION: Advanced PlatformIO configuration showing how to override default settings for the Element14 chipKIT Pi board. This example demonstrates changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/microchippic32/chipkit_pi.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:chipkit_pi]\nplatform = microchippic32\nboard = chipkit_pi\n\n; change microcontroller\nboard_build.mcu = 32MX250F128B\n\n; change MCU frequency\nboard_build.f_cpu = 40000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Seeed Studio Edgebox-ESP-100 Board Settings\nDESCRIPTION: Example of overriding default board settings in platformio.ini, including changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/edgebox-esp-100.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:edgebox-esp-100]\nplatform = espressif32\nboard = edgebox-esp-100\n\n; change microcontroller\nboard_build.mcu = esp32s3\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for CubeCell-Board-V2\nDESCRIPTION: Basic configuration settings in platformio.ini for setting up a project with the Heltec CubeCell-Board-V2. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/heltec-cubecell/cubecell_board_v2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:cubecell_board_v2]\nplatform = heltec-cubecell\nboard = cubecell_board_v2\n```\n\n----------------------------------------\n\nTITLE: Customizing Arduino Mini ATmega328 Settings in PlatformIO INI File\nDESCRIPTION: This snippet demonstrates how to override default board settings for the Arduino Mini ATmega328. It shows examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/miniatmega328.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:miniatmega328]\nplatform = atmelavr\nboard = miniatmega328\n\n; change microcontroller\nboard_build.mcu = atmega328p\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Flash Execution Without Bridge Interaction\nDESCRIPTION: PlatformIO configuration for running code from HyperFlash without bridge interaction. This setup uses only the start command in the upload process with jtag_hyper boot mode.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/riscv_gap_extra.rst#2025-04-10_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[env:gapuino]\nplatform = riscv_gap\nboard = gapuino\nframework = ...\nboard_upload.boot_mode = jtag_hyper\nboard_upload.commands = start\n```\n\n----------------------------------------\n\nTITLE: Configuring N79E823 Board in platformio.ini\nDESCRIPTION: Basic configuration for the Generic N79E823 board in the platformio.ini file. This sets up an environment targeting the Intel MCS-51 platform with the N79E823 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/N79E823.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:N79E823]\nplatform = intel_mcs51\nboard = N79E823\n```\n\n----------------------------------------\n\nTITLE: Customizing Hardware Settings for Lion:Bit Dev Board\nDESCRIPTION: Advanced configuration example showing how to override default hardware settings for the Lion:Bit Dev Board, including changing the microcontroller type and adjusting the CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/lionbit.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:lionbit]\nplatform = espressif32\nboard = lionbit\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing ML51UC0AE Board Configuration in PlatformIO\nDESCRIPTION: Extended configuration for the Generic ML51UC0AE board with custom microcontroller and frequency settings. This demonstrates how to override default board settings in the PlatformIO configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/ML51UC0AE.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ML51UC0AE]\nplatform = intel_mcs51\nboard = ML51UC0AE\n\n; change microcontroller\nboard_build.mcu = ml51uc0ae\n\n; change MCU frequency\nboard_build.f_cpu = 24000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing ST Nucleo F410RB Board Settings in PlatformIO\nDESCRIPTION: Example of overriding default board settings in platformio.ini, including changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f410rb.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f410rb]\nplatform = ststm32\nboard = nucleo_f410rb\n\n; change microcontroller\nboard_build.mcu = stm32f410rbt6\n\n; change MCU frequency\nboard_build.f_cpu = 100000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Smart Bee Data Logger Board Settings\nDESCRIPTION: Example of overriding default board settings in platformio.ini, such as changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/bee_data_logger.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:bee_data_logger]\nplatform = espressif32\nboard = bee_data_logger\n\n; change microcontroller\nboard_build.mcu = esp32s3\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO Project for ST Nucleo L053R8 Board\nDESCRIPTION: Basic INI configuration for setting up a PlatformIO project targeting the ST Nucleo L053R8 board with the STM32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_l053r8.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_l053r8]\nplatform = ststm32\nboard = nucleo_l053r8\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Protocol for VAkE v1.0 Board\nDESCRIPTION: Example showing how to specify the upload protocol for the VAkE v1.0 board. This sets the protocol to ST-Link, though the board supports multiple protocols including blackmagic, cmsis-dap, jlink, and serial.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/vake_v1.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:vake_v1]\nplatform = ststm32\nboard = vake_v1\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic IRC15F2K63S2 Board in PlatformIO Project\nDESCRIPTION: Basic configuration for using the Generic IRC15F2K63S2 board in a PlatformIO project file. This sets up the Intel MCS-51 platform with the IRC15F2K63S2 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/IRC15F2K63S2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:IRC15F2K63S2]\nplatform = intel_mcs51\nboard = IRC15F2K63S2\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic PlatformIO Environment for NIBO 2 Robot\nDESCRIPTION: This configuration sets up a basic PlatformIO environment for the nicai-systems NIBO 2 robot. It defines the target platform as atmelavr and specifies the board as nibo2.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/nibo2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nibo2]\nplatform = atmelavr\nboard = nibo2\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for BL653 Development Kit\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the BL653 Development Kit. This board supports multiple protocols including blackmagic, cmsis-dap, jlink, mbed, nrfjprog, and stlink, with jlink being the default.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/laird_bl653_dvk.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:laird_bl653_dvk]\nplatform = nordicnrf52\nboard = laird_bl653_dvk\n\nupload_protocol = jlink\n```\n\n----------------------------------------\n\nTITLE: Basic STC8H1K16S2 Board Configuration in PlatformIO\nDESCRIPTION: Basic configuration example showing how to set up the STC8H1K16S2 board in a PlatformIO project's configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8H1K16S2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8H1K16S2]\nplatform = intel_mcs51\nboard = STC8H1K16S2\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration for STM8S105K4T6\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the board, with serial being the default option.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm8/stm8sblack.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:stm8sblack]\nplatform = ststm8\nboard = stm8sblack\n\nupload_protocol = serial\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for chipKIT DP32\nDESCRIPTION: Minimal configuration for using a Digilent chipKIT DP32 board in a PlatformIO project. This snippet shows the required settings in the platformio.ini file to target this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/microchippic32/chipkit_dp32.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:chipkit_dp32]\nplatform = microchippic32\nboard = chipkit_dp32\n```\n\n----------------------------------------\n\nTITLE: Customizing Widora AIR Board Settings\nDESCRIPTION: Example of overriding default board settings in platformio.ini. Demonstrates changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/widora-air.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:widora-air]\nplatform = espressif32\nboard = widora-air\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Espressif 8266 Boards\nDESCRIPTION: This RST code defines a table of contents for Espressif 8266 board configurations in PlatformIO documentation.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/index.rst#2025-04-10_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\nEspressif 8266\n--------------\n\n.. toctree::\n    :maxdepth: 1\n        \n    espressif8266/gen4iod\n    espressif8266/huzzah\n    espressif8266/oak\n    espressif8266/espmxdevkit\n    espressif8266/espduino\n    espressif8266/espectro\n    espressif8266/espino\n    espressif8266/espresso_lite_v1\n    espressif8266/espresso_lite_v2\n    espressif8266/esp_wroom_02\n    espressif8266/esp12e\n    espressif8266/esp01_1m\n    espressif8266/esp01\n    espressif8266/esp07\n    espressif8266/esp07s\n    espressif8266/esp8285\n```\n\n----------------------------------------\n\nTITLE: Customizing Smart Bee Motion Board Configuration in PlatformIO\nDESCRIPTION: Advanced configuration that demonstrates how to override default board settings such as microcontroller type and CPU frequency in a PlatformIO project for the Smart Bee Motion board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/bee_motion.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:bee_motion]\nplatform = espressif32\nboard = bee_motion\n\n; change microcontroller\nboard_build.mcu = esp32s2\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Parashu Board Settings in PlatformIO INI File\nDESCRIPTION: This snippet demonstrates how to override default Parashu board settings in the PlatformIO configuration. It includes changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/shakti/parashu.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:parashu]\nplatform = shakti\nboard = parashu\n\n; change microcontroller\nboard_build.mcu = E-Class\n\n; change MCU frequency\nboard_build.f_cpu = 50000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for AZ-Delivery ESP-32 Dev Kit C V4\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the board in the PlatformIO environment settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/az-delivery-devkit-v4.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:az-delivery-devkit-v4]\nplatform = espressif32\nboard = az-delivery-devkit-v4\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Customizing Atmel AT90PWM216 Settings in platformio.ini\nDESCRIPTION: Advanced configuration showing how to override default board settings in PlatformIO. This example demonstrates how to change the microcontroller type and CPU frequency for an Atmel AT90PWM216 project.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/at90pwm216.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:at90pwm216]\nplatform = atmelavr\nboard = at90pwm216\n\n; change microcontroller\nboard_build.mcu = at90pwm216\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for ArtronShop ATD1.47-S3 Board\nDESCRIPTION: Basic PlatformIO configuration for the ArtronShop ATD1.47-S3 board in the project's platformio.ini file. This sets up the environment to use the Espressif32 platform with the ATD1.47-S3 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/atd147_s3.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:atd147_s3]\nplatform = espressif32\nboard = atd147_s3\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for STC8H4K60TLR in platformio.ini\nDESCRIPTION: Basic configuration for the STC8H4K60TLR board in the platformio.ini file. This snippet sets up the essential parameters needed to build projects for this board using the Intel MCS-51 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8H4K60TLR.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8H4K60TLR]\nplatform = intel_mcs51\nboard = STC8H4K60TLR\n```\n\n----------------------------------------\n\nTITLE: STM32F401RC Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to set the upload protocol for the STM32F401RC board. Sets serial as the upload protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F401RC.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F401RC]\nplatform = ststm32\nboard = genericSTM32F401RC\n\nupload_protocol = serial\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for CH559 Board (INI)\nDESCRIPTION: This snippet shows how to configure a PlatformIO project for the CH559 board using the intel_mcs51 platform. It includes the basic configuration and examples of how to override default board settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/CH559.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:CH559]\nplatform = intel_mcs51\nboard = CH559\n\n; change microcontroller\nboard_build.mcu = ch559\n\n; change MCU frequency\nboard_build.f_cpu = 12000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Adafruit QT Py ESP32-S3 No PSRAM in platformio.ini\nDESCRIPTION: Basic configuration for the Adafruit QT Py ESP32-S3 No PSRAM board in the PlatformIO project configuration file. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/adafruit_qtpy_esp32s3_nopsram.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_qtpy_esp32s3_nopsram]\nplatform = espressif32\nboard = adafruit_qtpy_esp32s3_nopsram\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the Tiny STM103T board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/hy_tinystm103tb.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:hy_tinystm103tb]\nplatform = ststm32\nboard = hy_tinystm103tb\n\nupload_protocol = dfu\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration in PlatformIO\nDESCRIPTION: Basic INI configuration for setting up a PlatformIO project with the Leafony AP03 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/leafony_ap03.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:leafony_ap03]\nplatform = ststm32\nboard = leafony_ap03\n```\n\n----------------------------------------\n\nTITLE: Customizing sduino UNO Board Configuration in PlatformIO\nDESCRIPTION: Advanced configuration for the sduino UNO board that demonstrates how to override default settings such as microcontroller model and CPU frequency in platformio.ini.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm8/s8uno.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:s8uno]\nplatform = ststm8\nboard = s8uno\n\n; change microcontroller\nboard_build.mcu = stm8s105k6t6\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Teensy 3.5 Board Settings\nDESCRIPTION: Basic PlatformIO configuration for Teensy 3.5 board setup in the project's configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/teensy/teensy35.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:teensy35]\nplatform = teensy\nboard = teensy35\n```\n\n----------------------------------------\n\nTITLE: Configuring Unexpected Maker FeatherS3 Board in platformio.ini\nDESCRIPTION: Basic configuration for using the Unexpected Maker FeatherS3 board in a PlatformIO project. Specifies the board ID and platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/um_feathers3.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:um_feathers3]\nplatform = espressif32\nboard = um_feathers3\n```\n\n----------------------------------------\n\nTITLE: Configuring MakerAsia Nano32 Board in PlatformIO\nDESCRIPTION: Basic configuration for MakerAsia Nano32 board in platformio.ini file. Sets the environment to use the espressif32 platform with the nano32 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/nano32.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nano32]\nplatform = espressif32\nboard = nano32\n```\n\n----------------------------------------\n\nTITLE: Configuring Sanguino ATmega644 Board in PlatformIO INI\nDESCRIPTION: This snippet shows how to configure the Sanguino ATmega644 board in a PlatformIO project configuration file. It sets the platform to atmelavr and the board to sanguino_atmega644.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/sanguino_atmega644.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:sanguino_atmega644]\nplatform = atmelavr\nboard = sanguino_atmega644\n```\n\n----------------------------------------\n\nTITLE: Configuring Digilent Cerebot 32MX7 Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the Digilent Cerebot 32MX7 board in the PlatformIO project configuration file. It includes the basic setup and examples of how to override default settings like the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/microchippic32/cerebot32mx7.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:cerebot32mx7]\nplatform = microchippic32\nboard = cerebot32mx7\n\n; change microcontroller\nboard_build.mcu = 32MX795F512L\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic DataStation Mini Board Settings\nDESCRIPTION: Basic configuration for the DataStation Mini board using PlatformIO's project configuration file. Specifies the platform and board selection.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/microchippic32/dsmini.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:dsmini]\nplatform = microchippic32\nboard = dsmini\n```\n\n----------------------------------------\n\nTITLE: Advanced STC15F101E Board Configuration with Custom Settings\nDESCRIPTION: Extended PlatformIO configuration showing how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15F101E.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15F101E]\nplatform = intel_mcs51\nboard = STC15F101E\n\n; change microcontroller\nboard_build.mcu = stc15f101e\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic N79E845 Board in PlatformIO\nDESCRIPTION: Basic PlatformIO configuration for the Generic N79E845 board using the intel_mcs51 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/N79E845.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:N79E845]\nplatform = intel_mcs51\nboard = N79E845\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic ATtiny24 Board in PlatformIO\nDESCRIPTION: This snippet shows how to configure the Generic ATtiny24 board in the PlatformIO project configuration file. It sets the platform to atmelavr and the board to attiny24.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/attiny24.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:attiny24]\nplatform = atmelavr\nboard = attiny24\n```\n\n----------------------------------------\n\nTITLE: Advanced Configuration for Heltec CubeCell-Module-V2 with Custom Settings\nDESCRIPTION: Advanced configuration example demonstrating how to override default board settings in platformio.ini. This snippet shows how to change the microcontroller and MCU frequency for the Heltec CubeCell-Module-V2 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/heltec-cubecell/cubecell_module_v2.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:cubecell_module_v2]\nplatform = heltec-cubecell\nboard = cubecell_module_v2\n\n; change microcontroller\nboard_build.mcu = asr6501\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic VNG VBLUNO51 Board Settings in PlatformIO\nDESCRIPTION: Basic configuration for setting up the VNG VBLUNO51 board in PlatformIO's project configuration file. Specifies the platform and board type.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf51/vbluno51.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:vbluno51]\nplatform = nordicnrf51\nboard = vbluno51\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for NXP i.MX RT1010 Evaluation Kit\nDESCRIPTION: Configuration to change the upload protocol to 'mbed' for the NXP i.MX RT1010 Evaluation Kit in platformio.ini.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nxpimxrt/mimxrt1010_evk.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:mimxrt1010_evk]\nplatform = nxpimxrt\nboard = mimxrt1010_evk\n\nupload_protocol = mbed\n```\n\n----------------------------------------\n\nTITLE: Basic ESP8266 ESP-07S Board Configuration\nDESCRIPTION: Minimal configuration required to use the ESP-07S board with PlatformIO build system\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/esp07s.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp07s]\nplatform = espressif8266\nboard = esp07s\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for STM8S003F3\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the board, using stlinkv2 as the protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm8/stm8s003f3.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:stm8s003f3]\nplatform = ststm8\nboard = stm8s003f3\n\nupload_protocol = stlinkv2\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for SparkFun MicroMod Teensy in PlatformIO INI\nDESCRIPTION: Configuration to specify the upload protocol for the SparkFun MicroMod Teensy board. Sets the upload protocol to teensy-gui, which is the default option.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/teensy/teensymm.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:teensymm]\nplatform = teensy\nboard = teensymm\n\nupload_protocol = teensy-gui\n```\n\n----------------------------------------\n\nTITLE: Configuring Upstream Version of Silicon Labs EFM32 Platform in platformio.ini\nDESCRIPTION: Example platformio.ini configuration for using the latest upstream development version of the Silicon Labs EFM32 platform from GitHub.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/siliconlabsefm32.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:upstream_develop]\nplatform = https://github.com/platformio/platform-siliconlabsefm32.git\nboard = ...\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for ST Nucleo L010RB\nDESCRIPTION: Configuration to set the upload protocol for the ST Nucleo L010RB board. In this example, the ST-Link protocol is specified.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_l010rb.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_l010rb]\nplatform = ststm32\nboard = nucleo_l010rb\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration for PYBStick 26 Pro\nDESCRIPTION: Basic PlatformIO configuration for PYBStick 26 Pro board using STM32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/pybstick26_pro.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:pybstick26_pro]\nplatform = ststm32\nboard = pybstick26_pro\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for Cicada-L082CZ\nDESCRIPTION: Basic environment configuration in platformio.ini for Cicada-L082CZ board using the STM32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/cicada_l082cz.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:cicada_l082cz]\nplatform = ststm32\nboard = cicada_l082cz\n```\n\n----------------------------------------\n\nTITLE: Customizing Heltec CubeCell-Capsule Board Settings in PlatformIO\nDESCRIPTION: Advanced configuration example showing how to override default board settings such as microcontroller type and CPU frequency in a PlatformIO project.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/heltec-cubecell/cubecell_capsule.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:cubecell_capsule]\nplatform = heltec-cubecell\nboard = cubecell_capsule\n\n; change microcontroller\nboard_build.mcu = asr6501\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Arduino Nano ATmega328 (New Bootloader) in INI\nDESCRIPTION: Basic PlatformIO configuration for using the Arduino Nano ATmega328 board with new bootloader. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/nanoatmega328new.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nanoatmega328new]\nplatform = atmelavr\nboard = nanoatmega328new\n```\n\n----------------------------------------\n\nTITLE: Configuring Arduino NG or older ATmega168 in platformio.ini\nDESCRIPTION: Basic configuration for using the Arduino NG or older ATmega168 board in a PlatformIO project. This snippet sets up the environment with the appropriate platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/atmegangatmega168.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:atmegangatmega168]\nplatform = atmelavr\nboard = atmegangatmega168\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Board Settings for Blinker WiFiduino32S3\nDESCRIPTION: Basic PlatformIO configuration for Blinker WiFiduino32S3 board using espressif32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/wifiduino32s3.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:wifiduino32s3]\nplatform = espressif32\nboard = wifiduino32s3\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with Custom Settings\nDESCRIPTION: Extended PlatformIO configuration demonstrating how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/itsybitsy32u4_3V.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:itsybitsy32u4_3V]\nplatform = atmelavr\nboard = itsybitsy32u4_3V\n\n; change microcontroller\nboard_build.mcu = atmega32u4\n\n; change MCU frequency\nboard_build.f_cpu = 8000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring ATmega8515 Board in PlatformIO Project Configuration\nDESCRIPTION: Basic configuration for an ATmega8515 board in the platformio.ini file. This sets up the minimal required configuration to use this board with the atmelavr platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega8515.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega8515]\nplatform = atmelavr\nboard = ATmega8515\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Teensy 2.0 in PlatformIO INI File\nDESCRIPTION: This snippet shows how to set the upload protocol for Teensy 2.0 in the PlatformIO project configuration file. It sets the upload protocol to 'teensy-gui'.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/teensy/teensy2.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:teensy2]\nplatform = teensy\nboard = teensy2\n\nupload_protocol = teensy-gui\n```\n\n----------------------------------------\n\nTITLE: Customizing nRF51 DK MCU Settings\nDESCRIPTION: Example showing how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf51/nrf51_dk.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nrf51_dk]\nplatform = nordicnrf51\nboard = nrf51_dk\n\n; change microcontroller\nboard_build.mcu = nrf51822\n\n; change MCU frequency\nboard_build.f_cpu = 32000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for ST B-G431B-ESC1 Discovery Board\nDESCRIPTION: Configuration for specifying the upload protocol for the ST B-G431B-ESC1 Discovery board. This example sets the upload protocol to ST-Link, which is the default for this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_b_g431b_esc1.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_b_g431b_esc1]\nplatform = ststm32\nboard = disco_b_g431b_esc1\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Configuring Stable ST STM8 Platform Version in PlatformIO\nDESCRIPTION: This INI code snippet shows how to configure the stable version of the ST STM8 platform in a PlatformIO project. It includes options for using the latest stable version or a specific version.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/ststm8.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n; Latest stable version, NOT recommended\n; Pin the version as shown below\n[env:latest_stable]\nplatform = ststm8\nboard = ...\n\n; Specific version\n[env:custom_stable]\nplatform = ststm8@x.y.z\nboard = ...\n```\n\n----------------------------------------\n\nTITLE: Customizing BOB3 Board Parameters in PlatformIO\nDESCRIPTION: Advanced PlatformIO configuration demonstrating how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/bob3.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:bob3]\nplatform = atmelavr\nboard = bob3\n\n; change microcontroller\nboard_build.mcu = atmega88\n\n; change MCU frequency\nboard_build.f_cpu = 8000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing FRDM-KL46Z Board Settings in PlatformIO\nDESCRIPTION: Advanced configuration for the Freescale Kinetis FRDM-KL46Z board with custom microcontroller and frequency settings. This snippet demonstrates how to override default board settings using the board_build.mcu and board_build.f_cpu options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/freescalekinetis/frdm_kl46z.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:frdm_kl46z]\nplatform = freescalekinetis\nboard = frdm_kl46z\n\n; change microcontroller\nboard_build.mcu = mkl46z256vll4\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Board Parameters\nDESCRIPTION: Example showing how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_pygamer_advance_m4.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_pygamer_advance_m4]\nplatform = atmelsam\nboard = adafruit_pygamer_advance_m4\n\n; change microcontroller\nboard_build.mcu = samd51j20a\n\n; change MCU frequency\nboard_build.f_cpu = 120000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Seeed Studio Edgebox-ESP-100 Board in PlatformIO\nDESCRIPTION: Basic configuration for the Seeed Studio Edgebox-ESP-100 board in the project's platformio.ini file. It specifies the platform and board to use.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/edgebox-esp-100.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:edgebox-esp-100]\nplatform = espressif32\nboard = edgebox-esp-100\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the board. The board supports both espota and esptool protocols.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/modwifi.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:modwifi]\nplatform = espressif8266\nboard = modwifi\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with Custom Settings\nDESCRIPTION: Extended configuration example showing how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/heltec-cubecell/cubecell_gps.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:cubecell_gps]\nplatform = heltec-cubecell\nboard = cubecell_gps\n\n; change microcontroller\nboard_build.mcu = asr6502\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Generic ML51UC0AE Board\nDESCRIPTION: Basic configuration for the Generic ML51UC0AE board in the PlatformIO project configuration file. This sets up the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/ML51UC0AE.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ML51UC0AE]\nplatform = intel_mcs51\nboard = ML51UC0AE\n```\n\n----------------------------------------\n\nTITLE: Customizing Seeed Arch Pro Board Settings\nDESCRIPTION: This snippet demonstrates how to override default board settings for the Seeed Arch Pro. It changes the microcontroller to lpc1768 and sets the MCU frequency to 96MHz.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nxplpc/seeedArchPro.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:seeedArchPro]\nplatform = nxplpc\nboard = seeedArchPro\n\n; change microcontroller\nboard_build.mcu = lpc1768\n\n; change MCU frequency\nboard_build.f_cpu = 96000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for STC8H3K48S2 Board\nDESCRIPTION: Basic configuration for using the Generic STC8H3K48S2 board in a PlatformIO project. This snippet shows how to specify the board in the platformio.ini configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8H3K48S2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8H3K48S2]\nplatform = intel_mcs51\nboard = STC8H3K48S2\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO Project for Heltec CubeCell-Capsule Board\nDESCRIPTION: Basic project configuration for using the Heltec CubeCell-Capsule board in PlatformIO. This snippet shows how to specify the board in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/heltec-cubecell/cubecell_capsule.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:cubecell_capsule]\nplatform = heltec-cubecell\nboard = cubecell_capsule\n```\n\n----------------------------------------\n\nTITLE: Configuring TI LaunchPad (Stellaris) Board in PlatformIO\nDESCRIPTION: This snippet shows how to configure the TI LaunchPad (Stellaris) board with LM4F120 microcontroller in a PlatformIO project's configuration file. It sets the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/titiva/lplm4f120h5qr.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:lplm4f120h5qr]\nplatform = titiva\nboard = lplm4f120h5qr\n```\n\n----------------------------------------\n\nTITLE: ESP32 Board Configuration Table in RST format\nDESCRIPTION: Table entries defining different ESP32 development boards with their specifications including platform, connection type, processor, clock speed, flash memory and RAM sizes. The table uses RST formatting with bullet points for each board entry.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/plus/debug-tools/minimodule.rst#2025-04-10_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n* - :ref:`board_espressif32_lionbit`\n  - :ref:`platform_espressif32`\n  - External\n  - ESP32\n  - 240MHz\n  - 4MB\n  - 320KB\n```\n\n----------------------------------------\n\nTITLE: Advanced ATmega328 Configuration with Custom Settings\nDESCRIPTION: Extended PlatformIO configuration demonstrating how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega328.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega328]\nplatform = atmelavr\nboard = ATmega328\n\n; change microcontroller\nboard_build.mcu = atmega328\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Franzininho WiFi Board in platformio.ini\nDESCRIPTION: Basic configuration for using the Franzininho WiFi Board in a PlatformIO project. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32-s2-franzininho.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32-s2-franzininho]\nplatform = espressif32\nboard = esp32-s2-franzininho\n```\n\n----------------------------------------\n\nTITLE: Customizing STC8A8K64D4 Board Settings in PlatformIO INI File\nDESCRIPTION: This code snippet demonstrates how to override default settings for the Generic STC8A8K64D4 board in the PlatformIO project configuration file. It shows how to change the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8A8K64D4.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8A8K64D4]\nplatform = intel_mcs51\nboard = STC8A8K64D4\n\n; change microcontroller\nboard_build.mcu = stc8a8k64d4\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Teensy 3.6 Configuration with Upload Protocol Specification\nDESCRIPTION: Configuration for Teensy 3.6 that explicitly sets the upload protocol to teensy-gui. This configuration demonstrates how to specify which method PlatformIO should use to flash the firmware to the board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/teensy/teensy36.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:teensy36]\nplatform = teensy\nboard = teensy36\n\nupload_protocol = teensy-gui\n```\n\n----------------------------------------\n\nTITLE: Configuring Arduino NG or older ATmega8 in PlatformIO\nDESCRIPTION: This snippet shows how to configure the Arduino NG or older ATmega8 board in a PlatformIO project's configuration file. It sets the platform to atmelavr and the board to atmegangatmega8.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/atmegangatmega8.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:atmegangatmega8]\nplatform = atmelavr\nboard = atmegangatmega8\n```\n\n----------------------------------------\n\nTITLE: Configuring Dongsen Tech Pocket 32 Board in PlatformIO\nDESCRIPTION: This snippet shows how to configure the Dongsen Tech Pocket 32 board in the PlatformIO project configuration file. It sets the platform to espressif32 and the board to pocket_32.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/pocket_32.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:pocket_32]\nplatform = espressif32\nboard = pocket_32\n```\n\n----------------------------------------\n\nTITLE: Customizing ESP32-C6-DevKitM-1 MCU Settings\nDESCRIPTION: Example showing how to override default microcontroller and frequency settings for the ESP32-C6-DevKitM-1 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32-c6-devkitm-1.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32-c6-devkitm-1]\nplatform = espressif32\nboard = esp32-c6-devkitm-1\n\n; change microcontroller\nboard_build.mcu = esp32c6\n\n; change MCU frequency\nboard_build.f_cpu = 160000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for ThunderPack v1.0\nDESCRIPTION: Configuration example showing how to specify the upload protocol for ThunderPack v1.0. The default protocol is 'stlink', but this can be changed to other supported protocols.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/thunder_pack.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:thunder_pack]\nplatform = ststm32\nboard = thunder_pack\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration for PlatformIO\nDESCRIPTION: Basic configuration setup for the SparkFun ESP8266 Thing board in platformio.ini file\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/thing.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:thing]\nplatform = espressif8266\nboard = thing\n```\n\n----------------------------------------\n\nTITLE: Customizing Lattice iCEstick FPGA Evaluation Kit Settings\nDESCRIPTION: This example shows how to override default board settings in PlatformIO. It demonstrates changing the microcontroller and MCU frequency for the Lattice iCEstick FPGA Evaluation Kit.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/lattice_ice40/icestick.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:icestick]\nplatform = lattice_ice40\nboard = icestick\n\n; change microcontroller\nboard_build.mcu = iCE40-HX1K-TQ144\n\n; change MCU frequency\nboard_build.f_cpu = 12000000L\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/siliconlabsefm32/efm32wg_stk3800.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:efm32wg_stk3800]\nplatform = siliconlabsefm32\nboard = efm32wg_stk3800\n\nupload_protocol = mbed\n```\n\n----------------------------------------\n\nTITLE: Configuring AT90CAN64 Board in PlatformIO Project Configuration\nDESCRIPTION: Basic configuration snippet for setting up an AT90CAN64 board in the PlatformIO project configuration file. This defines the board and platform required for compilation.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/AT90CAN64.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:AT90CAN64]\nplatform = atmelavr\nboard = AT90CAN64\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Board Settings for Arty A7-100 in PlatformIO\nDESCRIPTION: Basic configuration for the Arty A7-100 FPGA board in the PlatformIO project configuration file. It specifies the Shakti platform and the artix7_100t board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/shakti/artix7_100t.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:artix7_100t]\nplatform = shakti\nboard = artix7_100t\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO Environment with Custom MCU Settings\nDESCRIPTION: PlatformIO configuration with custom microcontroller and frequency settings for the Elektor LoRa Node Core F072C8 board. This demonstrates how to override the default board settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/elektor_f072cb.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:elektor_f072cb]\nplatform = ststm32\nboard = elektor_f072cb\n\n; change microcontroller\nboard_build.mcu = stm32f072c8t6\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Basic ESP32-PICO-DevKitM-2 Board Configuration in PlatformIO\nDESCRIPTION: Basic configuration for initializing an ESP32-PICO-DevKitM-2 board project in PlatformIO. Sets the platform to espressif32 and specifies the board type.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32-pico-devkitm-2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32-pico-devkitm-2]\nplatform = espressif32\nboard = esp32-pico-devkitm-2\n```\n\n----------------------------------------\n\nTITLE: Configuring TTGO LoRa32-OLED V2 Board in PlatformIO\nDESCRIPTION: Basic configuration for the TTGO LoRa32-OLED V2 board in the PlatformIO project configuration file. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/ttgo-lora32-v2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ttgo-lora32-v2]\nplatform = espressif32\nboard = ttgo-lora32-v2\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU Options\nDESCRIPTION: Extended configuration example showing how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f722ze.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f722ze]\nplatform = ststm32\nboard = nucleo_f722ze\n\n; change microcontroller\nboard_build.mcu = stm32f722zet6\n\n; change MCU frequency\nboard_build.f_cpu = 216000000L\n```\n\n----------------------------------------\n\nTITLE: ESP32 Dev Module Upload Protocol Configuration\nDESCRIPTION: Example showing how to configure the upload protocol for ESP32 Dev Module.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32dev.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32dev]\nplatform = espressif32\nboard = esp32dev\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic PlatformIO Environment for Heltec CubeCell-Module Plus in INI\nDESCRIPTION: Basic platformio.ini configuration for setting up a project with the Heltec CubeCell-Module Plus board. This defines the platform and board ID required for PlatformIO to recognize and properly configure the development environment.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/heltec-cubecell/cubecell_module_plus.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:cubecell_module_plus]\nplatform = heltec-cubecell\nboard = cubecell_module_plus\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic STC15F2K56S2 Board in PlatformIO\nDESCRIPTION: This snippet shows how to configure the Generic STC15F2K56S2 board in a PlatformIO project's configuration file (platformio.ini). It sets the platform and board, and demonstrates how to override default settings such as the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15F2K56S2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15F2K56S2]\nplatform = intel_mcs51\nboard = STC15F2K56S2\n\n; change microcontroller\nboard_build.mcu = stc15f2k56s2\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for SLSTK3400A Board\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the SLSTK3400A board. The board supports blackmagic, jlink, and mbed protocols with mbed as default.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/siliconlabsefm32/efm32hg_stk3400.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:efm32hg_stk3400]\nplatform = siliconlabsefm32\nboard = efm32hg_stk3400\n\nupload_protocol = mbed\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Generic IAP15F413AD Board in platformio.ini\nDESCRIPTION: Basic configuration for the Generic IAP15F413AD board in the platformio.ini project configuration file. This sets up the essential parameters needed to build projects for this Intel MCS-51 microcontroller.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/IAP15F413AD.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:IAP15F413AD]\nplatform = intel_mcs51\nboard = IAP15F413AD\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Aceinna OpenIMU 300ZA\nDESCRIPTION: This snippet shows how to set the upload protocol for the Aceinna OpenIMU 300ZA board in PlatformIO. It demonstrates setting the upload protocol to ST-Link.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/aceinna_imu/OpenIMU300ZA.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:OpenIMU300ZA]\nplatform = aceinna_imu\nboard = OpenIMU300ZA\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU and Frequency Settings\nDESCRIPTION: Extended PlatformIO configuration showing how to override default MCU and frequency settings for Arduino Uno R4 WiFi board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/renesas-ra/uno_r4_wifi.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:uno_r4_wifi]\nplatform = renesas-ra\nboard = uno_r4_wifi\n\n; change microcontroller\nboard_build.mcu = ra4m1\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for 3D Printer Controller\nDESCRIPTION: Configuration to specify the upload protocol for the 3D Printer Controller board, using ST-Link as an example.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/armed_v1.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:armed_v1]\nplatform = ststm32\nboard = armed_v1\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Arduino Due (USB Native Port) in PlatformIO INI\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the Arduino Due (USB Native Port) board. In this case, it's set to 'sam-ba'.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/dueUSB.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:dueUSB]\nplatform = atmelsam\nboard = dueUSB\n\nupload_protocol = sam-ba\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration for FRDM-KL25Z\nDESCRIPTION: Configuration example showing how to set the upload protocol for the FRDM-KL25Z board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/freescalekinetis/frdm_kl25z.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:frdm_kl25z]\nplatform = freescalekinetis\nboard = frdm_kl25z\n\nupload_protocol = mbed\n```\n\n----------------------------------------\n\nTITLE: Configuring ESPectro32 Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the ESPectro32 board in the PlatformIO project configuration file. It sets the platform and board name.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/espectro32.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:espectro32]\nplatform = espressif32\nboard = espectro32\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Particle Boron Project in platformio.ini\nDESCRIPTION: Basic configuration for setting up a Particle Boron board project in PlatformIO. Specifies the Nordic nRF52 platform and the Particle Boron board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/particle_boron.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:particle_boron]\nplatform = nordicnrf52\nboard = particle_boron\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Thunderboard Sense 2\nDESCRIPTION: Configuration to change the upload protocol for the Thunderboard Sense 2 board to 'mbed' in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/siliconlabsefm32/tb_sense_12.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:tb_sense_12]\nplatform = siliconlabsefm32\nboard = tb_sense_12\n\nupload_protocol = mbed\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration for RoboHeart Hercules\nDESCRIPTION: Basic PlatformIO configuration for RoboHeart Hercules board using espressif32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/roboheart_hercules.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:roboheart_hercules]\nplatform = espressif32\nboard = roboheart_hercules\n```\n\n----------------------------------------\n\nTITLE: Configuring BBC micro:bit V2 Board in platformio.ini\nDESCRIPTION: Basic configuration for the BBC micro:bit V2 board in the PlatformIO project configuration file. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/bbcmicrobit_v2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:bbcmicrobit_v2]\nplatform = nordicnrf52\nboard = bbcmicrobit_v2\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for ST Nucleo L433RC-P\nDESCRIPTION: Basic configuration setup for ST Nucleo L433RC-P board in platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_l433rc_p.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_l433rc_p]\nplatform = ststm32\nboard = nucleo_l433rc_p\n```\n\n----------------------------------------\n\nTITLE: Overriding Default STC12C5A32S2 Settings in PlatformIO\nDESCRIPTION: This example demonstrates how to override default board settings for the Generic STC12C5A32S2 in a PlatformIO environment. It shows how to change the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC12C5A32S2.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC12C5A32S2]\nplatform = intel_mcs51\nboard = STC12C5A32S2\n\n; change microcontroller\nboard_build.mcu = stc12c5a32s2\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Configuring ATtiny1617 Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the ATtiny1617 board in a PlatformIO project's configuration file. It sets the platform and board, and demonstrates how to override default board settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/ATtiny1617.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATtiny1617]\nplatform = atmelmegaavr\nboard = ATtiny1617\n\n; change microcontroller\nboard_build.mcu = attiny1617\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration in PlatformIO\nDESCRIPTION: Configures the basic environment settings for STM32F103RD board in platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103RD.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103RD]\nplatform = ststm32\nboard = genericSTM32F103RD\n```\n\n----------------------------------------\n\nTITLE: Customizing MCU Parameters for ST 32F401CDISCOVERY\nDESCRIPTION: Demonstrates how to override default microcontroller settings for the ST 32F401CDISCOVERY board in a PlatformIO environment, including changing the microcontroller model and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_f401vc.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_f401vc]\nplatform = ststm32\nboard = disco_f401vc\n\n; change microcontroller\nboard_build.mcu = stm32f401vct6\n\n; change MCU frequency\nboard_build.f_cpu = 84000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic PlatformIO Environment for Espotel LoRa Module\nDESCRIPTION: Basic configuration for setting up a PlatformIO environment for the Espotel LoRa Module. This snippet shows the minimal required configuration using the board ID 'elmo_f411re' with the STM32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/elmo_f411re.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:elmo_f411re]\nplatform = ststm32\nboard = elmo_f411re\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Generic STC15W4K16S4 Board\nDESCRIPTION: Basic configuration for setting up a PlatformIO project with the STC15W4K16S4 board using the intel_mcs51 platform. This snippet shows the minimal required configuration in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15W4K16S4.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15W4K16S4]\nplatform = intel_mcs51\nboard = STC15W4K16S4\n```\n\n----------------------------------------\n\nTITLE: Customizing 32F412GDISCOVERY Board Settings in PlatformIO\nDESCRIPTION: Configuration for overriding default board settings like microcontroller type and CPU frequency in the PlatformIO project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_f412zg.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_f412zg]\nplatform = ststm32\nboard = disco_f412zg\n\n; change microcontroller\nboard_build.mcu = stm32f412zgt6\n\n; change MCU frequency\nboard_build.f_cpu = 100000000L\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration in PlatformIO\nDESCRIPTION: Basic configuration for setting up the ST Nucleo L552ZE-Q board in PlatformIO's project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_l552ze_q.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_l552ze_q]\nplatform = ststm32\nboard = nucleo_l552ze_q\n```\n\n----------------------------------------\n\nTITLE: Advanced STC8C2K60S2 Board Configuration with Custom Settings\nDESCRIPTION: Extended configuration example showing how to override default board settings such as microcontroller type and CPU frequency in PlatformIO.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8C2K60S2.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8C2K60S2]\nplatform = intel_mcs51\nboard = STC8C2K60S2\n\n; change microcontroller\nboard_build.mcu = stc8c2k60s2\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for STM32F423CH in PlatformIO\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the STM32F423CH board. The default protocol is serial, but this can be explicitly set or changed to alternatives like blackmagic, dfu, jlink, or stlink.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F423CH.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F423CH]\nplatform = ststm32\nboard = genericSTM32F423CH\n\nupload_protocol = serial\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for PYBStick Lite 26\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the PYBStick Lite 26 board. The default protocol is stlink, but other protocols are supported.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/pybstick26_lite.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:pybstick26_lite]\nplatform = ststm32\nboard = pybstick26_lite\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f031k6.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f031k6]\nplatform = ststm32\nboard = nucleo_f031k6\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic STC89C51RC Board Settings in PlatformIO\nDESCRIPTION: Base configuration for setting up an STC89C51RC board project in PlatformIO's project configuration file (platformio.ini). Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC89C51RC.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC89C51RC]\nplatform = intel_mcs51\nboard = STC89C51RC\n```\n\n----------------------------------------\n\nTITLE: Customizing Digispark Pro Board Settings in PlatformIO\nDESCRIPTION: Advanced configuration for the Digispark Pro board, demonstrating how to override default settings like microcontroller type and CPU frequency using board-specific options in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/digispark-pro.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:digispark-pro]\nplatform = atmelavr\nboard = digispark-pro\n\n; change microcontroller\nboard_build.mcu = attiny167\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing LowPowerLab MightyHat Board Settings in PlatformIO\nDESCRIPTION: This snippet demonstrates how to override default settings for the LowPowerLab MightyHat board in the PlatformIO configuration. It shows examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/mightyhat.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:mightyhat]\nplatform = atmelavr\nboard = mightyhat\n\n; change microcontroller\nboard_build.mcu = atmega328p\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic PlatformIO Environment for ST 32F401CDISCOVERY\nDESCRIPTION: Sets up a basic PlatformIO environment configuration for the ST 32F401CDISCOVERY board. This snippet shows the minimal required settings in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_f401vc.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_f401vc]\nplatform = ststm32\nboard = disco_f401vc\n```\n\n----------------------------------------\n\nTITLE: Configuring STC8G2K64S2 Board in PlatformIO Project Configuration\nDESCRIPTION: Basic configuration for the Generic STC8G2K64S2 board in the project's platformio.ini file. This sets up the minimum required configuration specifying the Intel MCS-51 platform and STC8G2K64S2 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8G2K64S2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8G2K64S2]\nplatform = intel_mcs51\nboard = STC8G2K64S2\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for SparkFun ESP32 MicroMod\nDESCRIPTION: This configuration snippet shows how to set the upload protocol for the SparkFun ESP32 MicroMod board. In this example, it's set to use the 'esptool' protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/sparkfun_esp32micromod.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:sparkfun_esp32micromod]\nplatform = espressif32\nboard = sparkfun_esp32micromod\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for M200 V2 Board\nDESCRIPTION: Configuration example showing how to specify an upload protocol for the M200 V2 board. The board supports blackmagic, cmsis-dap, jlink, serial, and stlink protocols, with stlink being the default.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/malyanm200_f070cb.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:malyanm200_f070cb]\nplatform = ststm32\nboard = malyanm200_f070cb\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Basic STM32F103RF Board Configuration\nDESCRIPTION: Basic PlatformIO configuration for STM32F103RF board using the ststm32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103RF.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103RF]\nplatform = ststm32\nboard = genericSTM32F103RF\n```\n\n----------------------------------------\n\nTITLE: Customizing M300 Board Settings\nDESCRIPTION: Example of overriding default M300 settings in platformio.ini. It demonstrates how to change the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/malyanm300_f070cb.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:malyanm300_f070cb]\nplatform = ststm32\nboard = malyanm300_f070cb\n\n; change microcontroller\nboard_build.mcu = stm32f070cbt6\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO environment for PONTECH UAV100 Board\nDESCRIPTION: Basic configuration for setting up a PlatformIO project for the PONTECH UAV100 board. This snippet defines the platform and board ID in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/microchippic32/usbono_pic32.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:usbono_pic32]\nplatform = microchippic32\nboard = usbono_pic32\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for ST 32L496GDISCOVERY in PlatformIO\nDESCRIPTION: Configuration to specify the upload protocol for the ST 32L496GDISCOVERY board. This example explicitly sets the upload protocol to stlink, which is the default for this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_l496ag.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_l496ag]\nplatform = ststm32\nboard = disco_l496ag\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Basic STC15W104 Board Configuration\nDESCRIPTION: Basic PlatformIO configuration for the STC15W104 board specifying the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15W104.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15W104]\nplatform = intel_mcs51\nboard = STC15W104\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic STC8H1K16S2A10 Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the Generic STC8H1K16S2A10 board in a PlatformIO project's configuration file. It sets the platform to intel_mcs51 and specifies the board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8H1K16S2A10.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8H1K16S2A10]\nplatform = intel_mcs51\nboard = STC8H1K16S2A10\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration in PlatformIO\nDESCRIPTION: Basic configuration example for setting up the Gnat-L082CZ board in PlatformIO's project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/gnat_l082cz.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:gnat_l082cz]\nplatform = ststm32\nboard = gnat_l082cz\n```\n\n----------------------------------------\n\nTITLE: Configuring NXP i.MX RT1015 Evaluation Kit in platformio.ini\nDESCRIPTION: Basic configuration for the NXP i.MX RT1015 Evaluation Kit board in the project's platformio.ini file. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nxpimxrt/mimxrt1015_evk.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:mimxrt1015_evk]\nplatform = nxpimxrt\nboard = mimxrt1015_evk\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic PlatformIO Environment for ST Nucleo F103RB\nDESCRIPTION: Basic PlatformIO configuration for the ST Nucleo F103RB board. This snippet shows how to specify the board in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f103rb.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f103rb]\nplatform = ststm32\nboard = nucleo_f103rb\n```\n\n----------------------------------------\n\nTITLE: Configuring Munich Labs RedPill ESP32-S3 in PlatformIO\nDESCRIPTION: Basic PlatformIO configuration for the Munich Labs RedPill ESP32-S3 board using the espressif32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/redpill_esp32s3.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:redpill_esp32s3]\nplatform = espressif32\nboard = redpill_esp32s3\n```\n\n----------------------------------------\n\nTITLE: Customizing TTGO T1 Board Settings in PlatformIO\nDESCRIPTION: Advanced PlatformIO configuration that overrides the default microcontroller type and CPU frequency for the TTGO T1 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/ttgo-t1.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ttgo-t1]\nplatform = espressif32\nboard = ttgo-t1\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Adafruit pIRkey Board in PlatformIO\nDESCRIPTION: Basic configuration for the Adafruit pIRkey board in the project's platformio.ini file. It sets the platform to atmelsam and specifies the board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_pirkey.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_pirkey]\nplatform = atmelsam\nboard = adafruit_pirkey\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic PlatformIO Environment for Phoenix 2.0 ESP8266 Board\nDESCRIPTION: Basic configuration for a PlatformIO project targeting the Phoenix 2.0 ESP8266 board. This snippet sets up the build environment with the required platform and board identifier.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/phoenix_v2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:phoenix_v2]\nplatform = espressif8266\nboard = phoenix_v2\n```\n\n----------------------------------------\n\nTITLE: Basic ATmega2561 Board Configuration\nDESCRIPTION: Basic PlatformIO configuration for ATmega2561 board setup. Specifies the platform and board type.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega2561.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega2561]\nplatform = atmelavr\nboard = ATmega2561\n```\n\n----------------------------------------\n\nTITLE: Basic Arduino Tian Board Configuration in PlatformIO\nDESCRIPTION: Basic configuration setup for Arduino Tian board in PlatformIO's project configuration file. Specifies the platform and board type.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/tian.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:tian]\nplatform = atmelsam\nboard = tian\n```\n\n----------------------------------------\n\nTITLE: Customizing STC8H4K64TLR Board Configuration in PlatformIO\nDESCRIPTION: Extended configuration for the STC8H4K64TLR board that demonstrates how to override default settings like the microcontroller type and CPU frequency using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8H4K64TLR.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8H4K64TLR]\nplatform = intel_mcs51\nboard = STC8H4K64TLR\n\n; change microcontroller\nboard_build.mcu = stc8h4k64tlr\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration for Cicada-L082CZ\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the Cicada-L082CZ board using DFU protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/cicada_l082cz.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:cicada_l082cz]\nplatform = ststm32\nboard = cicada_l082cz\n\nupload_protocol = dfu\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration with MCU Settings\nDESCRIPTION: Extended configuration example showing how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/heltec-cubecell/cubecell_capsule_solar_sensor.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:cubecell_capsule_solar_sensor]\nplatform = heltec-cubecell\nboard = cubecell_capsule_solar_sensor\n\n; change microcontroller\nboard_build.mcu = asr6051\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring N79E844 Board in platformio.ini\nDESCRIPTION: Basic PlatformIO project configuration for the N79E844 board. This snippet demonstrates how to set up the environment with intel_mcs51 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/N79E844.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:N79E844]\nplatform = intel_mcs51\nboard = N79E844\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for STM32F103T8\nDESCRIPTION: Example of changing the upload protocol for the STM32F103T8 board. The default protocol is stlink, but this can be changed using the upload_protocol option.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103T8.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103T8]\nplatform = ststm32\nboard = genericSTM32F103T8\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Board Settings in PlatformIO\nDESCRIPTION: Basic PlatformIO configuration for TI LaunchPad MSP-EXP430F5529LP board using the timsp430 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/timsp430/lpmsp430f5529.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:lpmsp430f5529]\nplatform = timsp430\nboard = lpmsp430f5529\n```\n\n----------------------------------------\n\nTITLE: Basic STM32F103RE Board Configuration\nDESCRIPTION: Minimal PlatformIO configuration for STM32F103RE board setup using the ststm32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103RE.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103RE]\nplatform = ststm32\nboard = genericSTM32F103RE\n```\n\n----------------------------------------\n\nTITLE: Configuring AfroFlight Rev5 (8MHz) in platformio.ini\nDESCRIPTION: Basic configuration for the AfroFlight Rev5 (8MHz) board in a PlatformIO project. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/afroflight_f103cb.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:afroflight_f103cb]\nplatform = ststm32\nboard = afroflight_f103cb\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO Environment for Unexpected Maker PROS3\nDESCRIPTION: Basic configuration for setting up a PlatformIO environment for the Unexpected Maker PROS3 board. This snippet defines the essential parameters in the platformio.ini file, specifying the espressif32 platform and um_pros3 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/um_pros3.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:um_pros3]\nplatform = espressif32\nboard = um_pros3\n```\n\n----------------------------------------\n\nTITLE: Configuring ATmega88P Board in PlatformIO Project Configuration\nDESCRIPTION: Basic configuration for an ATmega88P board in the platformio.ini file. This establishes the platform as atmelavr and selects the ATmega88P board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega88P.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega88P]\nplatform = atmelavr\nboard = ATmega88P\n```\n\n----------------------------------------\n\nTITLE: Configuring TTGO T-Beam Board in platformio.ini\nDESCRIPTION: Basic configuration for using the TTGO T-Beam board in a PlatformIO project. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/ttgo-t-beam.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ttgo-t-beam]\nplatform = espressif32\nboard = ttgo-t-beam\n```\n\n----------------------------------------\n\nTITLE: Customizing PYBStick Lite 26 Hardware Settings\nDESCRIPTION: Example showing how to override default board settings in platformio.ini, including changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/pybstick26_lite.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:pybstick26_lite]\nplatform = ststm32\nboard = pybstick26_lite\n\n; change microcontroller\nboard_build.mcu = stm32f401ceu6\n\n; change MCU frequency\nboard_build.f_cpu = 84000000L\n```\n\n----------------------------------------\n\nTITLE: Basic ATmega645 Board Configuration in PlatformIO\nDESCRIPTION: Basic configuration snippet for setting up an ATmega645 board in the PlatformIO project configuration file. Specifies the platform and board type.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega645.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega645]\nplatform = atmelavr\nboard = ATmega645\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic STC8A4K16S2A12 Environment in platformio.ini\nDESCRIPTION: Basic configuration for a PlatformIO project targeting the Generic STC8A4K16S2A12 board. Sets up the platform and board ID in the project's configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8A4K16S2A12.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8A4K16S2A12]\nplatform = intel_mcs51\nboard = STC8A4K16S2A12\n```\n\n----------------------------------------\n\nTITLE: Customizing Microduino Core (Atmega168PA@8M,3.3V) Settings in INI\nDESCRIPTION: This snippet demonstrates how to override default board settings in the PlatformIO configuration. It shows examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/168pa8m.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:168pa8m]\nplatform = atmelavr\nboard = 168pa8m\n\n; change microcontroller\nboard_build.mcu = atmega168p\n\n; change MCU frequency\nboard_build.f_cpu = 8000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO Environment for SparkFun RedBoard\nDESCRIPTION: Basic configuration for setting up a PlatformIO environment to work with the SparkFun RedBoard. This snippet defines the platform as atmelavr and selects the sparkfun_redboard board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/sparkfun_redboard.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:sparkfun_redboard]\nplatform = atmelavr\nboard = sparkfun_redboard\n```\n\n----------------------------------------\n\nTITLE: Configuring Aceinna Low Cost RTK Board in PlatformIO\nDESCRIPTION: Basic configuration for the Aceinna Low Cost RTK board in the PlatformIO project configuration file. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/aceinna_imu/LowCostRTK.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:LowCostRTK]\nplatform = aceinna_imu\nboard = LowCostRTK\n```\n\n----------------------------------------\n\nTITLE: Configuring Adafruit ItsyBitsy M0 Basic Setup in PlatformIO\nDESCRIPTION: Basic configuration for Adafruit ItsyBitsy M0 in platformio.ini file. This setup specifies the atmelsam platform and the board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_itsybitsy_m0.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_itsybitsy_m0]\nplatform = atmelsam\nboard = adafruit_itsybitsy_m0\n```\n\n----------------------------------------\n\nTITLE: Customizing STM32F103ZC Board Settings\nDESCRIPTION: Example of overriding default board settings like microcontroller and CPU frequency in the PlatformIO configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103ZC.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103ZC]\nplatform = ststm32\nboard = genericSTM32F103ZC\n\n; change microcontroller\nboard_build.mcu = stm32f103zct6\n\n; change MCU frequency\nboard_build.f_cpu = 72000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Generic ML51LD1AE Settings in PlatformIO\nDESCRIPTION: Advanced configuration example showing how to override default board settings in a PlatformIO project. This includes changing the microcontroller type and clock frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/ML51LD1AE.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ML51LD1AE]\nplatform = intel_mcs51\nboard = ML51LD1AE\n\n; change microcontroller\nboard_build.mcu = ml51ld1ae\n\n; change MCU frequency\nboard_build.f_cpu = 24000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing ST Nucleo F401RE Hardware Parameters in PlatformIO\nDESCRIPTION: Advanced configuration for the ST Nucleo F401RE board, showing how to override default settings like the microcontroller model and CPU frequency in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f401re.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f401re]\nplatform = ststm32\nboard = nucleo_f401re\n\n; change microcontroller\nboard_build.mcu = stm32f401ret6\n\n; change MCU frequency\nboard_build.f_cpu = 84000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing MCU and Clock Settings\nDESCRIPTION: Example showing how to override default board settings like microcontroller model and CPU frequency\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/elektor_f072c8.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:elektor_f072c8]\nplatform = ststm32\nboard = elektor_f072c8\n\n; change microcontroller\nboard_build.mcu = stm32f072c8t6\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Example showing how to configure the upload protocol for the ESP32-C3-DevKitC-02 board using esptool.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32-c3-devkitc-02.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32-c3-devkitc-02]\nplatform = espressif32\nboard = esp32-c3-devkitc-02\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring M5Stack FIRE Board in PlatformIO\nDESCRIPTION: This snippet shows how to configure the M5Stack FIRE board in the PlatformIO project configuration file. It sets the platform to espressif32 and the board to m5stack-fire.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/m5stack-fire.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:m5stack-fire]\nplatform = espressif32\nboard = m5stack-fire\n```\n\n----------------------------------------\n\nTITLE: Configuring Arduino Leonardo ETH in PlatformIO Project\nDESCRIPTION: Basic configuration for using Arduino Leonardo ETH board in a PlatformIO project. This snippet defines the environment, platform, and board ID in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/leonardoeth.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:leonardoeth]\nplatform = atmelavr\nboard = leonardoeth\n```\n\n----------------------------------------\n\nTITLE: Customizing Generic IRC15F2K63S2 Board Settings in PlatformIO\nDESCRIPTION: Extended configuration example showing how to override default board settings such as the microcontroller type and CPU frequency in a PlatformIO project.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/IRC15F2K63S2.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:IRC15F2K63S2]\nplatform = intel_mcs51\nboard = IRC15F2K63S2\n\n; change microcontroller\nboard_build.mcu = irc15f2k63s2\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration for STM32 BlackPill\nDESCRIPTION: Basic PlatformIO configuration for initializing the BlackPill F411CE board with STM32 platform\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/blackpill_f411ce.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:blackpill_f411ce]\nplatform = ststm32\nboard = blackpill_f411ce\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Smart Bee S3 in PlatformIO\nDESCRIPTION: Configuration example demonstrating how to specify the upload protocol (esptool in this case) for the Smart Bee S3 board in a PlatformIO project.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/bee_s3.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:bee_s3]\nplatform = espressif32\nboard = bee_s3\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration for STM32F407VE Mini\nDESCRIPTION: Configuration example showing how to set the upload protocol for the board, using ST-Link as the specified protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/blue_f407ve_mini.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:blue_f407ve_mini]\nplatform = ststm32\nboard = blue_f407ve_mini\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration\nDESCRIPTION: Basic PlatformIO configuration for Deneyap Kart board using espressif32 platform\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/deneyapkart.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:deneyapkart]\nplatform = espressif32\nboard = deneyapkart\n```\n\n----------------------------------------\n\nTITLE: Custom MCU Configuration\nDESCRIPTION: PlatformIO configuration with custom microcontroller and frequency settings for Olimex STM32-H103\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/olimex_f103.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:olimex_f103]\nplatform = ststm32\nboard = olimex_f103\n\n; change microcontroller\nboard_build.mcu = stm32f103rbt6\n\n; change MCU frequency\nboard_build.f_cpu = 72000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for SimAVR Testing (INI)\nDESCRIPTION: This snippet shows the configuration in platformio.ini for integrating SimAVR with a PlatformIO project. It includes platform package addition, test speed setting, and the testing command for an Arduino Uno board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/advanced/unit-testing/simulators/simavr.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:uno]\nplatform = atmelavr\nframework = arduino\nboard = uno\n\nplatform_packages =\n    platformio/tool-simavr\ntest_speed = 9600\ntest_testing_command =\n    ${platformio.packages_dir}/tool-simavr/bin/simavr\n    -m\n    atmega328p\n    -f\n    16000000L\n    ${platformio.build_dir}/${this.__env__}/firmware.elf\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO Environment for ATmega165/A Board\nDESCRIPTION: Basic configuration for setting up a PlatformIO project environment targeting the ATmega165/A microcontroller. This defines the platform as atmelavr and specifies the board as ATmega165.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega165.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega165]\nplatform = atmelavr\nboard = ATmega165\n```\n\n----------------------------------------\n\nTITLE: Customizing STM32F410C8 MCU Settings\nDESCRIPTION: Advanced configuration showing how to override default microcontroller settings like MCU model and frequency in platformio.ini.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F410C8.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F410C8]\nplatform = ststm32\nboard = genericSTM32F410C8\n\n; change microcontroller\nboard_build.mcu = stm32f410c8t6\n\n; change MCU frequency\nboard_build.f_cpu = 100000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Generic N79E824 Board in platformio.ini\nDESCRIPTION: Basic configuration example for setting up a PlatformIO project environment for the Generic N79E824 board. Specifies the platform and board ID required in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/N79E824.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:N79E824]\nplatform = intel_mcs51\nboard = N79E824\n```\n\n----------------------------------------\n\nTITLE: Customizing ST Nucleo F411RE Board Parameters in PlatformIO\nDESCRIPTION: Advanced configuration for PlatformIO projects that demonstrates how to override default board settings such as microcontroller model and CPU frequency for the ST Nucleo F411RE board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f411re.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f411re]\nplatform = ststm32\nboard = nucleo_f411re\n\n; change microcontroller\nboard_build.mcu = stm32f411ret6\n\n; change MCU frequency\nboard_build.f_cpu = 100000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing STC8F1K08S2 Board Settings\nDESCRIPTION: Advanced configuration example showing how to override default board settings like microcontroller type and CPU frequency in PlatformIO.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8F1K08S2.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8F1K08S2]\nplatform = intel_mcs51\nboard = STC8F1K08S2\n\n; change microcontroller\nboard_build.mcu = stc8f1k08s2\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic PlatformIO Environment for M5Stack GREY ESP32\nDESCRIPTION: Basic PlatformIO configuration for M5Stack GREY ESP32 board using the espressif32 platform. This sets up the fundamental project environment with the correct board identifier.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/m5stack-grey.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:m5stack-grey]\nplatform = espressif32\nboard = m5stack-grey\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for STM32F303CB\nDESCRIPTION: Basic configuration example for STM32F303CB board in platformio.ini file. This defines the minimum required settings for a project targeting this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F303CB.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F303CB]\nplatform = ststm32\nboard = genericSTM32F303CB\n```\n\n----------------------------------------\n\nTITLE: Customizing NXP i.MX RT1050 Evaluation Kit settings\nDESCRIPTION: This code snippet demonstrates how to override default board settings in platformio.ini. It includes changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nxpimxrt/mimxrt1050_evk.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:mimxrt1050_evk]\nplatform = nxpimxrt\nboard = mimxrt1050_evk\n\n; change microcontroller\nboard_build.mcu = mimxrt1052dvl6b\n\n; change MCU frequency\nboard_build.f_cpu = 600000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration with Custom Settings\nDESCRIPTION: Extended configuration example showing how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8A4K32S2A12.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8A4K32S2A12]\nplatform = intel_mcs51\nboard = STC8A4K32S2A12\n\n; change microcontroller\nboard_build.mcu = stc8a4k32s2a12\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Teensy 4.0\nDESCRIPTION: Configuration for specifying the upload protocol for Teensy 4.0 in platformio.ini. Default is teensy-gui, but jlink and teensy-cli are also supported.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/teensy/teensy40.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:teensy40]\nplatform = teensy\nboard = teensy40\n\nupload_protocol = teensy-gui\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for Linino One\nDESCRIPTION: Basic environment configuration for the Linino One board using the atmelavr platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/one.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:one]\nplatform = atmelavr\nboard = one\n```\n\n----------------------------------------\n\nTITLE: Advanced STM32F413RG Configuration with MCU and Frequency Settings\nDESCRIPTION: Extended PlatformIO configuration demonstrating how to override default microcontroller and frequency settings for the STM32F413RG board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F413RG.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F413RG]\nplatform = ststm32\nboard = genericSTM32F413RG\n\n; change microcontroller\nboard_build.mcu = stm32f413rgt6\n\n; change MCU frequency\nboard_build.f_cpu = 100000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Board Settings in PlatformIO\nDESCRIPTION: Basic configuration for Adafruit ItsyBitsy ESP32 board in platformio.ini file, specifying the platform and board name.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/adafruit_itsybitsy_esp32.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_itsybitsy_esp32]\nplatform = espressif32\nboard = adafruit_itsybitsy_esp32\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for Sparky V1 F303\nDESCRIPTION: Basic board configuration for Sparky V1 F303 in platformio.ini file, specifying the STM32 platform and board type.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/sparky_v1.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:sparky_v1]\nplatform = ststm32\nboard = sparky_v1\n```\n\n----------------------------------------\n\nTITLE: Basic LPCXpresso55S16 Board Configuration in PlatformIO\nDESCRIPTION: Basic configuration for setting up an LPCXpresso55S16 board project in PlatformIO platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nxplpc/lpcxpresso55s16.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:lpcxpresso55s16]\nplatform = nxplpc\nboard = lpcxpresso55s16\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration for STC8A8K32S4A12\nDESCRIPTION: Basic PlatformIO configuration for setting up the STC8A8K32S4A12 board with the intel_mcs51 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8A8K32S4A12.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8A8K32S4A12]\nplatform = intel_mcs51\nboard = STC8A8K32S4A12\n```\n\n----------------------------------------\n\nTITLE: Custom MCU Configuration\nDESCRIPTION: Example showing how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/st3dp001_eval.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:st3dp001_eval]\nplatform = ststm32\nboard = st3dp001_eval\n\n; change microcontroller\nboard_build.mcu = stm32f401vet6\n\n; change MCU frequency\nboard_build.f_cpu = 84000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for SODAQ Autonomo\nDESCRIPTION: Configuration to specify the upload protocol for the SODAQ Autonomo board, with sam-ba as the default option.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/sodaq_autonomo.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:sodaq_autonomo]\nplatform = atmelsam\nboard = sodaq_autonomo\n\nupload_protocol = sam-ba\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with Custom Settings\nDESCRIPTION: Extended configuration showing how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/IAP15W413AS.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:IAP15W413AS]\nplatform = intel_mcs51\nboard = IAP15W413AS\n\n; change microcontroller\nboard_build.mcu = iap15w413as\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for Adafruit Pro Trinket\nDESCRIPTION: Basic board configuration for PlatformIO project using the Adafruit Pro Trinket 5V/16MHz board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/protrinket5.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:protrinket5]\nplatform = atmelavr\nboard = protrinket5\n```\n\n----------------------------------------\n\nTITLE: Basic Moteino Board Configuration\nDESCRIPTION: Basic PlatformIO configuration for Moteino board using the atmelavr platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/moteino.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:moteino]\nplatform = atmelavr\nboard = moteino\n```\n\n----------------------------------------\n\nTITLE: Overriding Default STM32F446RE Settings in PlatformIO\nDESCRIPTION: Example showing how to override default board settings such as microcontroller type and CPU frequency using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F446RE.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F446RE]\nplatform = ststm32\nboard = genericSTM32F446RE\n\n; change microcontroller\nboard_build.mcu = stm32f446ret6\n\n; change MCU frequency\nboard_build.f_cpu = 180000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing L476DMW1K Board Configuration\nDESCRIPTION: Advanced PlatformIO configuration showing how to override default board settings like microcontroller type and CPU frequency for the L476DMW1K board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/rhombio_l476dmw1k.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:rhombio_l476dmw1k]\nplatform = ststm32\nboard = rhombio_l476dmw1k\n\n; change microcontroller\nboard_build.mcu = stm32l476vgt6\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Basic HONEYLemon Board Configuration\nDESCRIPTION: Basic PlatformIO configuration for HONEYLemon ESP32 board setup\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/honeylemon.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:honeylemon]\nplatform = espressif32\nboard = honeylemon\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example demonstrating how to specify the upload protocol for the board\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_l432kc.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_l432kc]\nplatform = ststm32\nboard = nucleo_l432kc\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration for PlatformIO\nDESCRIPTION: Basic configuration setup for WeMos D1 ESP-WROOM-02 board in platformio.ini file\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/d1_wroom_02.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:d1_wroom_02]\nplatform = espressif8266\nboard = d1_wroom_02\n```\n\n----------------------------------------\n\nTITLE: STM32F415RG Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to set the upload protocol for the STM32F415RG board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F415RG.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F415RG]\nplatform = ststm32\nboard = genericSTM32F415RG\n\nupload_protocol = serial\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic ML51SD1AE Board in platformio.ini\nDESCRIPTION: Basic configuration to set up a PlatformIO project for the Generic ML51SD1AE board using the intel_mcs51 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/ML51SD1AE.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ML51SD1AE]\nplatform = intel_mcs51\nboard = ML51SD1AE\n```\n\n----------------------------------------\n\nTITLE: Customizing N79E845 Board Settings in PlatformIO\nDESCRIPTION: Extended PlatformIO configuration with custom microcontroller and frequency settings for the N79E845 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/N79E845.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:N79E845]\nplatform = intel_mcs51\nboard = N79E845\n\n; change microcontroller\nboard_build.mcu = n79e845\n\n; change MCU frequency\nboard_build.f_cpu = 22118400L\n```\n\n----------------------------------------\n\nTITLE: Customizing Adafruit Pro Trinket 5V/16MHz (FTDI) settings in PlatformIO INI file\nDESCRIPTION: This code snippet demonstrates how to override default settings for the Adafruit Pro Trinket 5V/16MHz (FTDI) board in the PlatformIO project configuration file. It shows how to change the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/protrinket5ftdi.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:protrinket5ftdi]\nplatform = atmelavr\nboard = protrinket5ftdi\n\n; change microcontroller\nboard_build.mcu = atmega328p\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring ST B-U585I-IOT02A Discovery Board in PlatformIO\nDESCRIPTION: This snippet shows how to configure the ST B-U585I-IOT02A Discovery board in a PlatformIO project's configuration file. It sets the platform and board name.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_b_u585i_iot02a.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_b_u585i_iot02a]\nplatform = ststm32\nboard = disco_b_u585i_iot02a\n```\n\n----------------------------------------\n\nTITLE: Overriding Default ST Nucleo F302R8 Settings\nDESCRIPTION: Example of overriding default board settings such as microcontroller and CPU frequency in the project configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f302r8.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f302r8]\nplatform = ststm32\nboard = nucleo_f302r8\n\n; change microcontroller\nboard_build.mcu = stm32f302r8t6\n\n; change MCU frequency\nboard_build.f_cpu = 72000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Armstrap Eagle 2048 Board Settings\nDESCRIPTION: This snippet demonstrates how to override default board settings in the PlatformIO configuration. It shows examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/armstrap_eagle2048.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:armstrap_eagle2048]\nplatform = ststm32\nboard = armstrap_eagle2048\n\n; change microcontroller\nboard_build.mcu = stm32f427vit6\n\n; change MCU frequency\nboard_build.f_cpu = 168000000L\n```\n\n----------------------------------------\n\nTITLE: Basic STC8A8K16D4 Board Configuration in PlatformIO\nDESCRIPTION: Basic configuration for setting up a project with the STC8A8K16D4 board using the intel_mcs51 platform in platformio.ini\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8A8K16D4.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8A8K16D4]\nplatform = intel_mcs51\nboard = STC8A8K16D4\n```\n\n----------------------------------------\n\nTITLE: Advanced Sonoff S20 Board Configuration\nDESCRIPTION: Extended configuration for Sonoff S20 board with custom microcontroller and frequency settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/sonoff_s20.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:sonoff_s20]\nplatform = espressif8266\nboard = sonoff_s20\n\n; change microcontroller\nboard_build.mcu = esp8266\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for u-blox C030-U201 IoT Starter Kit\nDESCRIPTION: Basic configuration in platformio.ini for setting up a project with the u-blox C030-U201 IoT Starter Kit board using the STM32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/ublox_c030_u201.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ublox_c030_u201]\nplatform = ststm32\nboard = ublox_c030_u201\n```\n\n----------------------------------------\n\nTITLE: Configuring ST 32L496GDISCOVERY Board in PlatformIO\nDESCRIPTION: Basic configuration for the ST 32L496GDISCOVERY board in the platformio.ini project configuration file. This sets up the ststm32 platform with the disco_l496ag board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_l496ag.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_l496ag]\nplatform = ststm32\nboard = disco_l496ag\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration with Custom Settings\nDESCRIPTION: Extended platformio.ini configuration demonstrating how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/raspduino.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:raspduino]\nplatform = atmelavr\nboard = raspduino\n\n; change microcontroller\nboard_build.mcu = atmega328p\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the ST Nucleo H743ZI board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_h743zi.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_h743zi]\nplatform = ststm32\nboard = nucleo_h743zi\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration with MCU Options\nDESCRIPTION: Extended configuration for STC8H8K48U board including custom microcontroller settings and CPU frequency adjustments.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8H8K48U.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8H8K48U]\nplatform = intel_mcs51\nboard = STC8H8K48U\n\n; change microcontroller\nboard_build.mcu = stc8h8k48u\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for M300\nDESCRIPTION: Configuration to change the upload protocol for the M300 board. This example sets it to 'stlink', which is also the default protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/malyanm300_f070cb.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:malyanm300_f070cb]\nplatform = ststm32\nboard = malyanm300_f070cb\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Configuring SparkFun MicroView Board in PlatformIO\nDESCRIPTION: This snippet shows how to configure the SparkFun MicroView board in the PlatformIO project configuration file. It sets the platform to ATmega AVR and specifies the board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/uview.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:uview]\nplatform = atmelavr\nboard = uview\n```\n\n----------------------------------------\n\nTITLE: Customizing Digilent chipKIT UNO32 Board Settings\nDESCRIPTION: This example demonstrates how to override default board settings in PlatformIO. It shows changing the microcontroller and MCU frequency for the Digilent chipKIT UNO32 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/microchippic32/uno_pic32.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:uno_pic32]\nplatform = microchippic32\nboard = uno_pic32\n\n; change microcontroller\nboard_build.mcu = 32MX320F128H\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring ATmega328PB Board in PlatformIO's projectconf\nDESCRIPTION: This snippet shows how to configure the ATmega328PB board in the PlatformIO project configuration file. It sets the platform to atmelavr and specifies the board as ATmega328PB.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega328PB.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega328PB]\nplatform = atmelavr\nboard = ATmega328PB\n```\n\n----------------------------------------\n\nTITLE: Customizing Hornbill ESP32 Minima Board Settings\nDESCRIPTION: Example of overriding default board settings in PlatformIO, including changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/hornbill32minima.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:hornbill32minima]\nplatform = espressif32\nboard = hornbill32minima\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for Feather 32u4\nDESCRIPTION: Base configuration for setting up a PlatformIO project with Adafruit Feather 32u4 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/feather32u4.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:feather32u4]\nplatform = atmelavr\nboard = feather32u4\n```\n\n----------------------------------------\n\nTITLE: PlatformIO Configuration with Custom Upload Protocol\nDESCRIPTION: Configuration example showing how to specify a custom upload protocol for the Minitronics v2.0 board. The board supports various protocols with sam-ba as the default.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/minitronics20.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:minitronics20]\nplatform = atmelsam\nboard = minitronics20\n\nupload_protocol = sam-ba\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO Environment for ST Nucleo H753ZI Board\nDESCRIPTION: Basic PlatformIO configuration for ST Nucleo H753ZI board in the project's platformio.ini file. This configuration specifies the STM32 platform and the target board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_h753zi.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_h753zi]\nplatform = ststm32\nboard = nucleo_h753zi\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic STC8G1K08A Board in PlatformIO Environment\nDESCRIPTION: Basic platformio.ini configuration for using the STC8G1K08A board with the Intel MCS-51 platform. This configuration specifies the platform and board ID required for building projects for this microcontroller.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8G1K08A.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8G1K08A]\nplatform = intel_mcs51\nboard = STC8G1K08A\n```\n\n----------------------------------------\n\nTITLE: Configuring Connaxio Espoir Board in PlatformIO Project\nDESCRIPTION: Basic configuration for setting up a PlatformIO project environment for the Connaxio Espoir board using the Espressif32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/connaxio_espoir.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:connaxio_espoir]\nplatform = espressif32\nboard = connaxio_espoir\n```\n\n----------------------------------------\n\nTITLE: Configuring Seeed Tiny BLE Board in platformio.ini\nDESCRIPTION: Basic configuration for the Seeed Tiny BLE board in the PlatformIO project configuration file. Sets the platform to nordicnrf51 and the board to seeedTinyBLE.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf51/seeedTinyBLE.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:seeedTinyBLE]\nplatform = nordicnrf51\nboard = seeedTinyBLE\n```\n\n----------------------------------------\n\nTITLE: Advanced STC8G2K32S4 Board Configuration with Custom Settings\nDESCRIPTION: Extended configuration showing how to override default board settings like microcontroller model and CPU frequency in platformio.ini.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8G2K32S4.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8G2K32S4]\nplatform = intel_mcs51\nboard = STC8G2K32S4\n\n; change microcontroller\nboard_build.mcu = stc8g2k32s4\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with Custom Settings\nDESCRIPTION: Extended PlatformIO configuration demonstrating how to override default board settings including microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/MS51IA9AE.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:MS51IA9AE]\nplatform = intel_mcs51\nboard = MS51IA9AE\n\n; change microcontroller\nboard_build.mcu = ms51ia9ae\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for STM32-H407 in PlatformIO\nDESCRIPTION: Shows how to specify the upload protocol to use with the Olimex STM32-H407 board, setting it to stlink which is also the default option.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/olimex_h407.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:olimex_h407]\nplatform = ststm32\nboard = olimex_h407\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Protocol for Seeeduino Wio Lite MG126\nDESCRIPTION: PlatformIO configuration that specifies the upload protocol for Seeeduino Wio Lite MG126. This example uses the sam-ba protocol which is the default upload method.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/seeed_wio_lite_mg126.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:seeed_wio_lite_mg126]\nplatform = atmelsam\nboard = seeed_wio_lite_mg126\n\nupload_protocol = sam-ba\n```\n\n----------------------------------------\n\nTITLE: Customizing ST Nucleo F072RB Board Settings\nDESCRIPTION: Advanced configuration for ST Nucleo F072RB showing how to override default settings like microcontroller type and CPU frequency in platformio.ini.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f072rb.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f072rb]\nplatform = ststm32\nboard = nucleo_f072rb\n\n; change microcontroller\nboard_build.mcu = stm32f072rbt6\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring RYMCU ESP32-C3-DevKitM-1 Board in PlatformIO\nDESCRIPTION: Basic PlatformIO configuration for the RYMCU ESP32-C3-DevKitM-1 board. Specifies the board ID and platform to use in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/rymcu-esp32-c3-devkitm-1.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:rymcu-esp32-c3-devkitm-1]\nplatform = espressif32\nboard = rymcu-esp32-c3-devkitm-1\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for SparkFun ESP32-S2 Thing Plus\nDESCRIPTION: Configuration to change the upload protocol for the SparkFun ESP32-S2 Thing Plus board. The example uses the default 'esptool' protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/sparkfun_esp32s2_thing_plus.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:sparkfun_esp32s2_thing_plus]\nplatform = espressif32\nboard = sparkfun_esp32s2_thing_plus\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Customizing ATmega325 Board Settings in PlatformIO\nDESCRIPTION: Extended configuration for ATmega325 that demonstrates how to override default board settings like microcontroller type and CPU frequency in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega325.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega325]\nplatform = atmelavr\nboard = ATmega325\n\n; change microcontroller\nboard_build.mcu = atmega325\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Malyan M200 V1 Board Settings in PlatformIO INI\nDESCRIPTION: Example of overriding default board settings in platformio.ini, such as changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/malyanm200_f103cb.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:malyanm200_f103cb]\nplatform = ststm32\nboard = malyanm200_f103cb\n\n; change microcontroller\nboard_build.mcu = stm32f103cbt6\n\n; change MCU frequency\nboard_build.f_cpu = 72000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced GAPuino Board Configuration with Custom Settings\nDESCRIPTION: Extended configuration for GAPuino board with custom microcontroller and frequency settings. Demonstrates how to override default board settings using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/riscv_gap/gapuino.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:gapuino]\nplatform = riscv_gap\nboard = gapuino\n\n; change microcontroller\nboard_build.mcu = gap8\n\n; change MCU frequency\nboard_build.f_cpu = 250000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration with Custom MCU Settings\nDESCRIPTION: Extended configuration for Seeeduino XIAO that overrides default board settings. Demonstrates how to customize the microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/seeed_xiao.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:seeed_xiao]\nplatform = atmelsam\nboard = seeed_xiao\n\n; change microcontroller\nboard_build.mcu = samd21g18a\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the ST Nucleo L073RZ board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_l073rz.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_l073rz]\nplatform = ststm32\nboard = nucleo_l073rz\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Configuring RAM Execution Without Bridge Interaction\nDESCRIPTION: PlatformIO configuration for GAPuino board to run code from RAM without bridge interaction. This modified upload process uses only load and start commands.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/riscv_gap_extra.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:gapuino]\nplatform = riscv_gap\nboard = gapuino\nframework = ...\nboard_upload.commands = load start\n```\n\n----------------------------------------\n\nTITLE: Configuring STC12C5A56S2 Board in PlatformIO\nDESCRIPTION: Basic configuration for the Generic STC12C5A56S2 board in the PlatformIO project configuration file (platformio.ini). This sets up the intel_mcs51 platform with the STC12C5A56S2 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC12C5A56S2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC12C5A56S2]\nplatform = intel_mcs51\nboard = STC12C5A56S2\n```\n\n----------------------------------------\n\nTITLE: Custom Board Settings Configuration\nDESCRIPTION: Example showing how to override default board settings like microcontroller and CPU frequency\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/deneyapkart.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:deneyapkart]\nplatform = espressif32\nboard = deneyapkart\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Basic N78E366 Board Configuration in PlatformIO\nDESCRIPTION: Basic configuration for setting up the N78E366 board in platformio.ini project file. Specifies the platform and board type.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/N78E366.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:N78E366]\nplatform = intel_mcs51\nboard = N78E366\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for ST Nucleo L4R5ZI in PlatformIO\nDESCRIPTION: Configuration to specify the upload protocol for the ST Nucleo L4R5ZI board in platformio.ini. This example uses the default 'stlink' protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_l4r5zi.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_l4r5zi]\nplatform = ststm32\nboard = nucleo_l4r5zi\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic PlatformIO Environment for Arduino LilyPad ATmega328\nDESCRIPTION: Basic configuration for setting up a PlatformIO environment for the Arduino LilyPad ATmega328 board. This snippet defines the platform and board parameters needed in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/lilypadatmega328.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:lilypadatmega328]\nplatform = atmelavr\nboard = lilypadatmega328\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic PlatformIO Environment for STC8G1K12A\nDESCRIPTION: A simple configuration example for the projectconf file to set up a build environment for the STC8G1K12A board using the intel_mcs51 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8G1K12A.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8G1K12A]\nplatform = intel_mcs51\nboard = STC8G1K12A\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Digilent chipKIT Pro MX7 in platformio.ini\nDESCRIPTION: Basic configuration for using the Digilent chipKIT Pro MX7 board in a PlatformIO project. Sets the platform to microchippic32 and the board to chipkit_pro_mx7.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/microchippic32/chipkit_pro_mx7.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:chipkit_pro_mx7]\nplatform = microchippic32\nboard = chipkit_pro_mx7\n```\n\n----------------------------------------\n\nTITLE: Customizing LightBlue Bean+ Board Settings in PlatformIO\nDESCRIPTION: Advanced configuration for the LightBlue Bean+ board, showing how to override default settings such as microcontroller type and clock frequency in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/lightblue-beanplus.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:lightblue-beanplus]\nplatform = atmelavr\nboard = lightblue-beanplus\n\n; change microcontroller\nboard_build.mcu = atmega328p\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the ST Nucleo F334R8 board, using STLink as the upload method.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f334r8.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f334r8]\nplatform = ststm32\nboard = nucleo_f334r8\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Configuring Arduino Fio Board in PlatformIO Project\nDESCRIPTION: Basic configuration for using the Arduino Fio board in a PlatformIO project configuration file. This snippet shows how to specify the atmelavr platform and the fio board in the project's environment settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/fio.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:fio]\nplatform = atmelavr\nboard = fio\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the ST Nucleo L412RB-P board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_l412rb_p.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_l412rb_p]\nplatform = ststm32\nboard = nucleo_l412rb_p\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Configuring VAkE v1.0 Board in PlatformIO Environment\nDESCRIPTION: Basic configuration for using VAkE v1.0 board with STM32 platform in PlatformIO. Sets up the environment with the basic board identifier.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/vake_v1.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:vake_v1]\nplatform = ststm32\nboard = vake_v1\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU Settings\nDESCRIPTION: PlatformIO configuration demonstrating how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32-c3-devkitc-02.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32-c3-devkitc-02]\nplatform = espressif32\nboard = esp32-c3-devkitc-02\n\n; change microcontroller\nboard_build.mcu = esp32c3\n\n; change MCU frequency\nboard_build.f_cpu = 160000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic IAP15F2K61S Board Settings in PlatformIO\nDESCRIPTION: Basic PlatformIO configuration for the IAP15F2K61S board using the intel_mcs51 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/IAP15F2K61S.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:IAP15F2K61S]\nplatform = intel_mcs51\nboard = IAP15F2K61S\n```\n\n----------------------------------------\n\nTITLE: Customizing PlatformIO Configuration for chipKIT WF32\nDESCRIPTION: Advanced configuration example for the Digilent chipKIT WF32 board that demonstrates how to override default board settings such as microcontroller type and CPU frequency through board_*** options in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/microchippic32/chipkit_wf32.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:chipkit_wf32]\nplatform = microchippic32\nboard = chipkit_wf32\n\n; change microcontroller\nboard_build.mcu = 32MX695F512L\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for ST Nucleo F439ZI\nDESCRIPTION: Minimal configuration needed to set up a PlatformIO project for the ST Nucleo F439ZI board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f439zi.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f439zi]\nplatform = ststm32\nboard = nucleo_f439zi\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Generic STC8G2K60S2 Board\nDESCRIPTION: Basic configuration for using the Generic STC8G2K60S2 board with the intel_mcs51 platform in PlatformIO's project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8G2K60S2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8G2K60S2]\nplatform = intel_mcs51\nboard = STC8G2K60S2\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents for PlatformIO Installation Methods in reStructuredText\nDESCRIPTION: Creates a table of contents for the three available installation methods for PlatformIO. References separate documentation pages for the installer script, PyPI package installation, and Homebrew installation methods.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/installation/methods/index.rst#2025-04-10_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n    :maxdepth: 2\n\n    installer-script\n    pypi\n    brew\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for STC8F2K16S2 Board\nDESCRIPTION: Basic configuration for using the STC8F2K16S2 board in PlatformIO's project configuration file. Sets up the platform and board parameters.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8F2K16S2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8F2K16S2]\nplatform = intel_mcs51\nboard = STC8F2K16S2\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Generic STC8G2K60S2 Board\nDESCRIPTION: Basic configuration for using the Generic STC8G2K60S2 board with the intel_mcs51 platform in PlatformIO's project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8G2K60S2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8G2K60S2]\nplatform = intel_mcs51\nboard = STC8G2K60S2\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for Microduino Core\nDESCRIPTION: Base configuration for setting up a PlatformIO project targeting the Microduino Core board\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/168pa16m.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:168pa16m]\nplatform = atmelavr\nboard = 168pa16m\n```\n\n----------------------------------------\n\nTITLE: Customizing Digilent Nexys A7 Board Settings in PlatformIO\nDESCRIPTION: Advanced configuration for customizing the Digilent Nexys A7 board settings in PlatformIO. This snippet shows how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/openhw/nexys_a7.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nexys_a7]\nplatform = openhw\nboard = nexys_a7\n\n; change microcontroller\nboard_build.mcu = \n\n; change MCU frequency\nboard_build.f_cpu = 320000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Deneyap Kart 1A in PlatformIO\nDESCRIPTION: Shows how to specify the upload protocol for the Deneyap Kart 1A board in the PlatformIO configuration, using esptool as an example.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/deneyapkart1A.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:deneyapkart1A]\nplatform = espressif32\nboard = deneyapkart1A\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO Environment for Raspberry Pi Zero\nDESCRIPTION: Basic configuration for setting up a PlatformIO project environment for Raspberry Pi Zero. This snippet defines the platform and board in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/linux_arm/raspberrypi_zero.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:raspberrypi_zero]\nplatform = linux_arm\nboard = raspberrypi_zero\n```\n\n----------------------------------------\n\nTITLE: PlatformIO Check Severity Example\nDESCRIPTION: Example showing how to specify severity levels for defect reporting.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/cmd_check.rst#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npio check --severity=high\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Pontech Quick240 Settings in PlatformIO INI File\nDESCRIPTION: This snippet demonstrates how to override default settings for the Pontech Quick240 board in the PlatformIO project configuration file. It includes examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/microchippic32/quick240_usb.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:quick240_usb]\nplatform = microchippic32\nboard = quick240_usb\n\n; change microcontroller\nboard_build.mcu = 32MX795F512L\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic PlatformIO Environment for STM32 Nucleo G474RE\nDESCRIPTION: Sets up a basic PlatformIO environment for the Nucleo G474RE board using the STM32 platform. This configuration specifies the board ID for use in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_g474re.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_g474re]\nplatform = ststm32\nboard = nucleo_g474re\n```\n\n----------------------------------------\n\nTITLE: Overriding Default ESP32-S2-Kaluga-1 Settings in PlatformIO\nDESCRIPTION: Example of overriding default board settings in platformio.ini by changing the microcontroller and CPU frequency. These settings are based on the board's JSON manifest.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32-s2-kaluga-1.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32-s2-kaluga-1]\nplatform = espressif32\nboard = esp32-s2-kaluga-1\n\n; change microcontroller\nboard_build.mcu = esp32s2\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic WT32-ETH01 Board Settings\nDESCRIPTION: Basic PlatformIO configuration for the WT32-ETH01 board specifying the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/wt32-eth01.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:wt32-eth01]\nplatform = espressif32\nboard = wt32-eth01\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Settings for Generic STC8G2K64S4\nDESCRIPTION: This snippet demonstrates how to override default settings for the Generic STC8G2K64S4 board in the PlatformIO configuration. It shows how to change the microcontroller and MCU frequency using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8G2K64S4.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8G2K64S4]\nplatform = intel_mcs51\nboard = STC8G2K64S4\n\n; change microcontroller\nboard_build.mcu = stc8g2k64s4\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Customizing Hardware Settings for Heltec Wireless Stick\nDESCRIPTION: Advanced configuration for customizing hardware settings of the Heltec Wireless Stick in PlatformIO. This example demonstrates how to override the default microcontroller and CPU frequency settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/heltec_wireless_stick.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:heltec_wireless_stick]\nplatform = espressif32\nboard = heltec_wireless_stick\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Heltec WiFi LoRa 32 (V3)\nDESCRIPTION: Basic PlatformIO configuration for the Heltec WiFi LoRa 32 (V3) board using the Espressif32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/heltec_wifi_lora_32_V3.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:heltec_wifi_lora_32_V3]\nplatform = espressif32\nboard = heltec_wifi_lora_32_V3\n```\n\n----------------------------------------\n\nTITLE: Customizing ST Nucleo F042K6 Board Settings\nDESCRIPTION: Example of overriding default board settings such as microcontroller model and CPU frequency using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f042k6.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f042k6]\nplatform = ststm32\nboard = nucleo_f042k6\n\n; change microcontroller\nboard_build.mcu = stm32f042k6t6\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic ST Nucleo L452RE Project in PlatformIO\nDESCRIPTION: Basic configuration for an ST Nucleo L452RE project in PlatformIO's project configuration file. This sets up the platform and board for development.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_l452re.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_l452re]\nplatform = ststm32\nboard = nucleo_l452re\n```\n\n----------------------------------------\n\nTITLE: Advanced Clang-Tidy Configuration with Custom Checks\nDESCRIPTION: Extended configuration example showing how to enable specific Clang-Tidy checks and enable automatic code fixing.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/advanced/static-code-analysis/tools/clang-tidy.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nplatform = ...\nboard = ...\ncheck_tool = clangtidy\ncheck_flags =\n  clangtidy: --checks=-*,cert-*,clang-analyzer-* --fix\n```\n\n----------------------------------------\n\nTITLE: Basic STM32F103V8 Board Configuration\nDESCRIPTION: Minimal configuration required to set up an STM32F103V8 board environment in PlatformIO.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103V8.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103V8]\nplatform = ststm32\nboard = genericSTM32F103V8\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Arduino Nano 33 BLE\nDESCRIPTION: Configuration to change the upload protocol for the Arduino Nano 33 BLE board. In this example, it's set to use the sam-ba protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/nano33ble.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:nano33ble]\nplatform = nordicnrf52\nboard = nano33ble\n\nupload_protocol = sam-ba\n```\n\n----------------------------------------\n\nTITLE: Configuring ATmega325 Board in PlatformIO Project Configuration\nDESCRIPTION: Basic configuration for setting up an ATmega325 board in a PlatformIO project. This defines the environment, platform, and board type in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega325.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega325]\nplatform = atmelavr\nboard = ATmega325\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for ESPino in PlatformIO INI File\nDESCRIPTION: This snippet illustrates how to set the upload protocol for the ESPino board in the PlatformIO configuration. It uses the 'esptool' protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/espino.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:espino]\nplatform = espressif8266\nboard = espino\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Customizing Sanguino ATmega1284p (8MHz) Settings in PlatformIO Configuration\nDESCRIPTION: Extended PlatformIO configuration that overrides default settings for the Sanguino ATmega1284p (8MHz) board. It demonstrates how to change the microcontroller type and the MCU frequency using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/sanguino_atmega1284_8m.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:sanguino_atmega1284_8m]\nplatform = atmelavr\nboard = sanguino_atmega1284_8m\n\n; change microcontroller\nboard_build.mcu = atmega1284p\n\n; change MCU frequency\nboard_build.f_cpu = 8000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU Settings\nDESCRIPTION: Extended PlatformIO configuration demonstrating how to override default microcontroller and frequency settings for the ST Nucleo F091RC board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f091rc.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f091rc]\nplatform = ststm32\nboard = nucleo_f091rc\n\n; change microcontroller\nboard_build.mcu = stm32f091rct6\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Example showing how to configure the upload protocol for the board\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/sparkfun_micromod_f405.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:sparkfun_micromod_f405]\nplatform = ststm32\nboard = sparkfun_micromod_f405\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Customizing Microduino Core+ Board Settings in PlatformIO\nDESCRIPTION: Advanced PlatformIO configuration showing how to override default settings for the Microduino Core+ board. This example demonstrates changing the microcontroller type and CPU frequency in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/1284p16m.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:1284p16m]\nplatform = atmelavr\nboard = 1284p16m\n\n; change microcontroller\nboard_build.mcu = atmega1284p\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU Settings\nDESCRIPTION: Extended PlatformIO configuration demonstrating how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/bee_motion_mini.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:bee_motion_mini]\nplatform = espressif32\nboard = bee_motion_mini\n\n; change microcontroller\nboard_build.mcu = esp32c3\n\n; change MCU frequency\nboard_build.f_cpu = 160000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Generic N79E843 Board Settings in PlatformIO\nDESCRIPTION: This code demonstrates how to override default board settings in the PlatformIO configuration. It includes examples of changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/N79E843.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:N79E843]\nplatform = intel_mcs51\nboard = N79E843\n\n; change microcontroller\nboard_build.mcu = n79e843\n\n; change MCU frequency\nboard_build.f_cpu = 22118400L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Sonoff Board Environment in PlatformIO\nDESCRIPTION: Basic configuration for setting up a PlatformIO environment for Sonoff Basic board using the espressif8266 platform. This defines the minimal required settings in the project's platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/sonoff_basic.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:sonoff_basic]\nplatform = espressif8266\nboard = sonoff_basic\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with Custom Settings\nDESCRIPTION: Extended PlatformIO configuration demonstrating how to override default board settings such as microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/ML51UB9AE.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ML51UB9AE]\nplatform = intel_mcs51\nboard = ML51UB9AE\n\n; change microcontroller\nboard_build.mcu = ml51ub9ae\n\n; change MCU frequency\nboard_build.f_cpu = 24000000L\n```\n\n----------------------------------------\n\nTITLE: Setting upload protocol for Raytac MDBT50Q-RX Dongle in PlatformIO INI file\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the Raytac MDBT50Q-RX Dongle. Uses the 'nrfutil' protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/raytac_mdbt50q_rx.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:raytac_mdbt50q_rx]\nplatform = nordicnrf52\nboard = raytac_mdbt50q_rx\n\nupload_protocol = nrfutil\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic STM32F412CG Board Environment\nDESCRIPTION: Basic PlatformIO environment configuration for STM32F412CG board using the ststm32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F412CG.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F412CG]\nplatform = ststm32\nboard = genericSTM32F412CG\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU Settings\nDESCRIPTION: Extended configuration for STM32F373RC board with custom microcontroller and frequency settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F373RC.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F373RC]\nplatform = ststm32\nboard = genericSTM32F373RC\n\n; change microcontroller\nboard_build.mcu = stm32f373rct6\n\n; change MCU frequency\nboard_build.f_cpu = 72000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring WeAct Studio MiniSTM32H750VBTX in PlatformIO\nDESCRIPTION: Basic configuration for the WeAct Studio MiniSTM32H750VBTX board in the PlatformIO project configuration file (platformio.ini). This sets up the board using the ststm32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/weact_mini_h750vbtx.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:weact_mini_h750vbtx]\nplatform = ststm32\nboard = weact_mini_h750vbtx\n```\n\n----------------------------------------\n\nTITLE: Configuring M5Stack AtomS3 Board in PlatformIO\nDESCRIPTION: Basic PlatformIO configuration for the M5Stack AtomS3 board using the Espressif32 platform. Includes board ID and platform specification.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/m5stack-atoms3.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:m5stack-atoms3]\nplatform = espressif32\nboard = m5stack-atoms3\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for ST Nucleo F042K6\nDESCRIPTION: Configuration example for specifying the upload protocol. The default protocol is stlink, but this can be changed using the upload_protocol option.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f042k6.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f042k6]\nplatform = ststm32\nboard = nucleo_f042k6\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Customizing VNG VBLUNO51 Board Settings in PlatformIO\nDESCRIPTION: Advanced configuration showing how to override default board settings like microcontroller type and CPU frequency in the PlatformIO project configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf51/vbluno51.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:vbluno51]\nplatform = nordicnrf51\nboard = vbluno51\n\n; change microcontroller\nboard_build.mcu = nrf51822\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic STC15F2K24AS Board in PlatformIO\nDESCRIPTION: This snippet demonstrates how to configure the Generic STC15F2K24AS board in a PlatformIO project's configuration file. It sets the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15F2K24AS.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15F2K24AS]\nplatform = intel_mcs51\nboard = STC15F2K24AS\n```\n\n----------------------------------------\n\nTITLE: Customizing Board Settings in PlatformIO\nDESCRIPTION: Advanced configuration showing how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/pro8MHzatmega168.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:pro8MHzatmega168]\nplatform = atmelavr\nboard = pro8MHzatmega168\n\n; change microcontroller\nboard_build.mcu = atmega168\n\n; change MCU frequency\nboard_build.f_cpu = 8000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with Custom Settings\nDESCRIPTION: Extended configuration example showing how to override default board settings like microcontroller type and CPU frequency in the PlatformIO environment.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/N79E875.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:N79E875]\nplatform = intel_mcs51\nboard = N79E875\n\n; change microcontroller\nboard_build.mcu = n79e875\n\n; change MCU frequency\nboard_build.f_cpu = 22118400L\n```\n\n----------------------------------------\n\nTITLE: Advanced LPCXpresso55S16 Configuration with MCU and Frequency Settings\nDESCRIPTION: Configuration showing how to override default board settings including microcontroller and CPU frequency specifications.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nxplpc/lpcxpresso55s16.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:lpcxpresso55s16]\nplatform = nxplpc\nboard = lpcxpresso55s16\n\n; change microcontroller\nboard_build.mcu = lpc55s16\n\n; change MCU frequency\nboard_build.f_cpu = 150000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Big Tree Tech EBB42 V1.1 Board Settings\nDESCRIPTION: Example of overriding default board settings in PlatformIO configuration. Shows how to change the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/btt_ebb42_v1_1.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:btt_ebb42_v1_1]\nplatform = ststm32\nboard = btt_ebb42_v1_1\n\n; change microcontroller\nboard_build.mcu = stm32g0b1ret6\n\n; change MCU frequency\nboard_build.f_cpu = 64000000L\n```\n\n----------------------------------------\n\nTITLE: PlatformIO Configuration with Custom MCU Settings for Namino Arancio\nDESCRIPTION: Extended configuration for the Namino Arancio board that overrides default board settings such as microcontroller type and CPU frequency using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/namino_arancio.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:namino_arancio]\nplatform = espressif32\nboard = namino_arancio\n\n; change microcontroller\nboard_build.mcu = esp32s3\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring STM32F401CC Board in platformio.ini\nDESCRIPTION: Basic PlatformIO configuration for STM32F401CC board using the STM32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F401CC.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F401CC]\nplatform = ststm32\nboard = genericSTM32F401CC\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic ATtiny212 Environment in PlatformIO\nDESCRIPTION: A basic configuration for using ATtiny212 board with the atmelmegaavr platform in PlatformIO's project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/ATtiny212.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATtiny212]\nplatform = atmelmegaavr\nboard = ATtiny212\n```\n\n----------------------------------------\n\nTITLE: Basic ATmega645P Board Configuration in PlatformIO\nDESCRIPTION: Basic configuration for setting up an ATmega645P board in the PlatformIO project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega645P.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega645P]\nplatform = atmelavr\nboard = ATmega645P\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for PHYTEC reel board\nDESCRIPTION: Basic PlatformIO configuration for the PHYTEC reel board using the nordicnrf52 platform. This snippet shows how to set up the board in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/reel_board.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:reel_board]\nplatform = nordicnrf52\nboard = reel_board\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration in PlatformIO\nDESCRIPTION: Basic configuration for Smart Bee Motion S3 board using PlatformIO's project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/bee_motion_s3.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:bee_motion_s3]\nplatform = espressif32\nboard = bee_motion_s3\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with Custom Settings\nDESCRIPTION: Extended PlatformIO configuration demonstrating how to override default board settings like microcontroller model and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC12C5A40S2.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC12C5A40S2]\nplatform = intel_mcs51\nboard = STC12C5A40S2\n\n; change microcontroller\nboard_build.mcu = stc12c5a40s2\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU Settings\nDESCRIPTION: Extended configuration example showing how to override default board settings like microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/nrf52840_dk_adafruit.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nrf52840_dk_adafruit]\nplatform = nordicnrf52\nboard = nrf52840_dk_adafruit\n\n; change microcontroller\nboard_build.mcu = nrf52840\n\n; change MCU frequency\nboard_build.f_cpu = 64000000L\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for LoRa-E5 mini\nDESCRIPTION: Basic environment configuration in platformio.ini for the LoRa-E5 mini board using the STM32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/lora_e5_mini.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:lora_e5_mini]\nplatform = ststm32\nboard = lora_e5_mini\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for ST STM32F4DISCOVERY\nDESCRIPTION: Configuration to change the upload protocol for the ST STM32F4DISCOVERY board to ST-Link in PlatformIO.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_f407vg.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_f407vg]\nplatform = ststm32\nboard = disco_f407vg\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Configuring ST Nucleo F302R8 Board in platformio.ini\nDESCRIPTION: Basic configuration for using the ST Nucleo F302R8 board in a PlatformIO project. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f302r8.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f302r8]\nplatform = ststm32\nboard = nucleo_f302r8\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Nucleo G431RB Board Settings in PlatformIO\nDESCRIPTION: Basic configuration for setting up a PlatformIO project with the Nucleo G431RB board using the STM32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_g431rb.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_g431rb]\nplatform = ststm32\nboard = nucleo_g431rb\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for STM32F446RE\nDESCRIPTION: Basic project configuration for STM32F446RE board in PlatformIO. This snippet defines the minimum required settings including platform and board name.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F446RE.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F446RE]\nplatform = ststm32\nboard = genericSTM32F446RE\n```\n\n----------------------------------------\n\nTITLE: Customizing STM32F103TB Board Parameters in PlatformIO.ini\nDESCRIPTION: Example showing how to override default board settings such as microcontroller type and CPU frequency for the STM32F103TB board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103TB.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103TB]\nplatform = ststm32\nboard = genericSTM32F103TB\n\n; change microcontroller\nboard_build.mcu = stm32f103tbu6\n\n; change MCU frequency\nboard_build.f_cpu = 72000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration with Custom MCU Settings\nDESCRIPTION: Extended configuration for the MTS Dragonfly board, demonstrating how to override default board settings like the microcontroller model and CPU frequency using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/mts_dragonfly_f411re.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:mts_dragonfly_f411re]\nplatform = ststm32\nboard = mts_dragonfly_f411re\n\n; change microcontroller\nboard_build.mcu = stm32f411ret6\n\n; change MCU frequency\nboard_build.f_cpu = 100000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring SainSmart Due in PlatformIO Project\nDESCRIPTION: Basic PlatformIO project configuration for the SainSmart Due board using the atmelsam platform. This snippet shows the minimal required configuration in the project's platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/sainSmartDue.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:sainSmartDue]\nplatform = atmelsam\nboard = sainSmartDue\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration in PlatformIO\nDESCRIPTION: Basic INI configuration for setting up an Adafruit Feather nRF52840 Express board project in PlatformIO.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/adafruit_feather_nrf52840.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_feather_nrf52840]\nplatform = nordicnrf52\nboard = adafruit_feather_nrf52840\n```\n\n----------------------------------------\n\nTITLE: Configuring RHF76 052 Board in platformio.ini\nDESCRIPTION: Basic configuration for the RHF76 052 board in the project's platformio.ini file. It specifies the platform and board to use.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/rhf76_052.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:rhf76_052]\nplatform = ststm32\nboard = rhf76_052\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for STC8H1K32S2A10\nDESCRIPTION: Basic configuration setup for the STC8H1K32S2A10 board in platformio.ini file. Specifies the platform and board settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8H1K32S2A10.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8H1K32S2A10]\nplatform = intel_mcs51\nboard = STC8H1K32S2A10\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration with Custom MCU Settings\nDESCRIPTION: Extended configuration for the STC15W4K16S4 board that demonstrates how to override default board settings such as microcontroller type and CPU frequency. This allows for more customized builds for specific project requirements.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15W4K16S4.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15W4K16S4]\nplatform = intel_mcs51\nboard = STC15W4K16S4\n\n; change microcontroller\nboard_build.mcu = stc15w4k16s4\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the MultiTech xDot board\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/xdot_l151cc.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:xdot_l151cc]\nplatform = ststm32\nboard = xdot_l151cc\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for uPesy ESP32 Wroom DevKit\nDESCRIPTION: Basic PlatformIO configuration for the uPesy ESP32 Wroom DevKit board in the project configuration file. This sets up the project to use the ESP32 platform with the specific board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/upesy_wroom.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:upesy_wroom]\nplatform = espressif32\nboard = upesy_wroom\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration for IoTaaP Magnolia\nDESCRIPTION: Basic PlatformIO configuration for IoTaaP Magnolia board using ESP32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/iotaap_magnolia.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:iotaap_magnolia]\nplatform = espressif32\nboard = iotaap_magnolia\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Smart Bee Data Logger\nDESCRIPTION: Example of specifying the upload protocol in platformio.ini. The default protocol is esptool, but this can be changed as needed.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/bee_data_logger.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:bee_data_logger]\nplatform = espressif32\nboard = bee_data_logger\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration with Custom Settings\nDESCRIPTION: Extended configuration example demonstrating how to customize microcontroller and frequency settings for the STC8G1K17 board in PlatformIO.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8G1K17.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8G1K17]\nplatform = intel_mcs51\nboard = STC8G1K17\n\n; change microcontroller\nboard_build.mcu = stc8g1k17\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic STC15W101 Board in PlatformIO\nDESCRIPTION: Basic PlatformIO configuration for the Generic STC15W101 board using the intel_mcs51 platform. This snippet shows how to specify the board in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15W101.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15W101]\nplatform = intel_mcs51\nboard = STC15W101\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic PlatformIO Environment for Microduino Core\nDESCRIPTION: Basic PlatformIO configuration for Microduino Core (Atmega328P@8M,3.3V) board. This snippet shows how to specify the board in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/328p8m.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:328p8m]\nplatform = atmelavr\nboard = 328p8m\n```\n\n----------------------------------------\n\nTITLE: Customizing Bluey nRF52832 IoT Board Settings\nDESCRIPTION: Example of overriding default board settings in platformio.ini, such as changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/bluey.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:bluey]\nplatform = nordicnrf52\nboard = bluey\n\n; change microcontroller\nboard_build.mcu = nrf52832\n\n; change MCU frequency\nboard_build.f_cpu = 64000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring NUCLEO-8S207K8 Board in PlatformIO\nDESCRIPTION: Basic configuration for the NUCLEO-8S207K8 board in the project's platformio.ini file. It specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm8/nucleo_8s207k8.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_8s207k8]\nplatform = ststm8\nboard = nucleo_8s207k8\n```\n\n----------------------------------------\n\nTITLE: Customizing STM32F103VB Board Settings\nDESCRIPTION: Example of overriding default board settings such as microcontroller and CPU frequency in the PlatformIO configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103VB.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103VB]\nplatform = ststm32\nboard = genericSTM32F103VB\n\n; change microcontroller\nboard_build.mcu = stm32f103vbt6\n\n; change MCU frequency\nboard_build.f_cpu = 72000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing ST Nucleo L496ZG-P Board Settings\nDESCRIPTION: Example of overriding default board settings in platformio.ini, including changing the microcontroller and CPU frequency for the ST Nucleo L496ZG-P board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_l496zg_p.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_l496zg_p]\nplatform = ststm32\nboard = nucleo_l496zg_p\n\n; change microcontroller\nboard_build.mcu = stm32l496zgt6p\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for WEMOS LOLIN S2 PICO\nDESCRIPTION: Minimal configuration for using the WEMOS LOLIN S2 PICO board in a PlatformIO project. This snippet specifies the Espressif32 platform and the board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/lolin_s2_pico.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:lolin_s2_pico]\nplatform = espressif32\nboard = lolin_s2_pico\n```\n\n----------------------------------------\n\nTITLE: Custom ESP32 Dev Module MCU Configuration\nDESCRIPTION: Configuration example showing how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32dev.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32dev]\nplatform = espressif32\nboard = esp32dev\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing MS51PC0AE Board Settings in platformio.ini\nDESCRIPTION: Advanced configuration example demonstrating how to override default board settings such as microcontroller type and CPU frequency in a PlatformIO project.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/MS51PC0AE.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:MS51PC0AE]\nplatform = intel_mcs51\nboard = MS51PC0AE\n\n; change microcontroller\nboard_build.mcu = ms51pc0ae\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring TI LaunchPad MSP-EXP430G2 w/ MSP430G2231 in platformio.ini\nDESCRIPTION: Basic configuration for the TI LaunchPad MSP-EXP430G2 w/ MSP430G2231 board in the project's platformio.ini file. This sets up the board and platform for use with PlatformIO.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/timsp430/lpmsp430g2231.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:lpmsp430g2231]\nplatform = timsp430\nboard = lpmsp430g2231\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for ATmega48\nDESCRIPTION: Basic configuration setup for ATmega48/A board in platformio.ini file. Sets the platform to atmelavr and specifies the board type.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega48.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega48]\nplatform = atmelavr\nboard = ATmega48\n```\n\n----------------------------------------\n\nTITLE: microS2 Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the microS2 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/micros2.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:micros2]\nplatform = espressif32\nboard = micros2\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Customizing STM32F401RB Board Settings\nDESCRIPTION: Example of overriding default board settings in the PlatformIO configuration. Demonstrates changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F401RB.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F401RB]\nplatform = ststm32\nboard = genericSTM32F401RB\n\n; change microcontroller\nboard_build.mcu = stm32f401rbt6\n\n; change MCU frequency\nboard_build.f_cpu = 84000000L\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for Armstrap Eagle 512\nDESCRIPTION: Basic configuration for the Armstrap Eagle 512 board in the platformio.ini file. This sets up the board with the ststm32 platform using default settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/armstrap_eagle512.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:armstrap_eagle512]\nplatform = ststm32\nboard = armstrap_eagle512\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for TTGO T-OI PLUS Board in PlatformIO\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the TTGO T-OI PLUS board. The default protocol is esptool, but this can be explicitly set in the project configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/ttgo-t-oi-plus.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:ttgo-t-oi-plus]\nplatform = espressif32\nboard = ttgo-t-oi-plus\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Configuring STM32F401CE in PlatformIO Project Configuration\nDESCRIPTION: Basic configuration for STM32F401CE board in platformio.ini file. Specifies the platform and board ID needed to work with this STM32F401CE microcontroller.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F401CE.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F401CE]\nplatform = ststm32\nboard = genericSTM32F401CE\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for RushUp Cloud-JAM\nDESCRIPTION: This snippet shows how to specify the upload protocol for the RushUp Cloud-JAM board in the PlatformIO configuration. It sets the protocol to 'stlink'.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/cloud_jam.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:cloud_jam]\nplatform = ststm32\nboard = cloud_jam\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Adafruit Trinket M0\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the Adafruit Trinket M0 board. In this case, using the SAM-BA bootloader protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_trinket_m0.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_trinket_m0]\nplatform = atmelsam\nboard = adafruit_trinket_m0\n\nupload_protocol = sam-ba\n```\n\n----------------------------------------\n\nTITLE: Basic ATtiny827 Board Configuration in PlatformIO\nDESCRIPTION: Basic configuration setup for ATtiny827 board in platformio.ini file. Specifies the platform and board type.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/ATtiny827.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATtiny827]\nplatform = atmelmegaavr\nboard = ATtiny827\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for FRDM-KL25Z\nDESCRIPTION: Basic environment configuration for FRDM-KL25Z board using PlatformIO.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/freescalekinetis/frdm_kl25z.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:frdm_kl25z]\nplatform = freescalekinetis\nboard = frdm_kl25z\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration for SG-O AirMon ESP32\nDESCRIPTION: Basic PlatformIO configuration for setting up an SG-O AirMon board project using the espressif32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/sg-o_airMon.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:sg-o_airMon]\nplatform = espressif32\nboard = sg-o_airMon\n```\n\n----------------------------------------\n\nTITLE: Configuring P-Nucleo WB55RG Board in PlatformIO\nDESCRIPTION: Basic configuration for using the P-Nucleo WB55RG board in a PlatformIO project. This snippet shows how to select the board in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_wb55rg_p.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_wb55rg_p]\nplatform = ststm32\nboard = nucleo_wb55rg_p\n```\n\n----------------------------------------\n\nTITLE: Advanced CurrentRanger Board Configuration with Custom Settings\nDESCRIPTION: Extended configuration example showing how to override default board settings like microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/current_ranger.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:current_ranger]\nplatform = atmelsam\nboard = current_ranger\n\n; change microcontroller\nboard_build.mcu = samd21g18a\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Basic HelvePic32 Board Configuration\nDESCRIPTION: Basic PlatformIO configuration for the HelvePic32 board using the microchippic32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/microchippic32/helvepic32_smd.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:helvepic32_smd]\nplatform = microchippic32\nboard = helvepic32_smd\n```\n\n----------------------------------------\n\nTITLE: Advanced OLIMEXINO-STM32 Configuration with MCU Settings\nDESCRIPTION: Extended configuration showing how to override default microcontroller and frequency settings for the OLIMEXINO-STM32 board\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/olimexino.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:olimexino]\nplatform = ststm32\nboard = olimexino\n\n; change microcontroller\nboard_build.mcu = stm32f103rbt6\n\n; change MCU frequency\nboard_build.f_cpu = 72000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced Configuration for ATtiny1624 with Custom Settings\nDESCRIPTION: Extended project configuration for the ATtiny1624 board with customized microcontroller and frequency settings. This example demonstrates how to override default board settings in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/ATtiny1624.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATtiny1624]\nplatform = atmelmegaavr\nboard = ATtiny1624\n\n; change microcontroller\nboard_build.mcu = attiny1624\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Department of Alchemy MiniMain ESP32-S2\nDESCRIPTION: This snippet shows how to set the upload protocol for the Department of Alchemy MiniMain ESP32-S2 board in a PlatformIO project. The default protocol is 'esptool'.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/minimain_esp32s2.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:minimain_esp32s2]\nplatform = espressif32\nboard = minimain_esp32s2\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Basic DigiX Board Configuration with PlatformIO\nDESCRIPTION: Basic PlatformIO configuration for Digistump DigiX board using the atmelsam platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/digix.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:digix]\nplatform = atmelsam\nboard = digix\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration with Custom Settings\nDESCRIPTION: Extended configuration example showing how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/curiosity_nano_4809.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:curiosity_nano_4809]\nplatform = atmelmegaavr\nboard = curiosity_nano_4809\n\n; change microcontroller\nboard_build.mcu = atmega4809\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for SQFMI Watchy v2.0\nDESCRIPTION: Configuration example for specifying the upload protocol for a SQFMI Watchy v2.0 board in PlatformIO. This example uses the default esptool protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/watchy.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:watchy]\nplatform = espressif32\nboard = watchy\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Customizing ATmega3290P Board Configuration in PlatformIO\nDESCRIPTION: Advanced configuration example for the ATmega3290P board that demonstrates how to override default settings such as the microcontroller type and MCU frequency using board_build options in platformio.ini.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega3290P.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega3290P]\nplatform = atmelavr\nboard = ATmega3290P\n\n; change microcontroller\nboard_build.mcu = atmega3290p\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Freescale Kinetis FRDM-K64F\nDESCRIPTION: Basic PlatformIO configuration for the FRDM-K64F board, specifying the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/freescalekinetis/frdm_k64f.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:frdm_k64f]\nplatform = freescalekinetis\nboard = frdm_k64f\n```\n\n----------------------------------------\n\nTITLE: Customizing Black STM32F407VE Board Settings\nDESCRIPTION: Example of overriding default board settings such as microcontroller and CPU frequency using board_*** options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/black_f407ve.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:black_f407ve]\nplatform = ststm32\nboard = black_f407ve\n\n; change microcontroller\nboard_build.mcu = stm32f407vet6\n\n; change MCU frequency\nboard_build.f_cpu = 168000000L\n```\n\n----------------------------------------\n\nTITLE: STM32 F407VG Upload Protocol Configuration\nDESCRIPTION: PlatformIO configuration showing how to specify the upload protocol for the F407VG board, using ST-Link as the default upload method.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/diymore_f407vgt.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:diymore_f407vgt]\nplatform = ststm32\nboard = diymore_f407vgt\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Arduino MKRZERO\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the MKRZERO board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/mkrzero.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:mkrzero]\nplatform = atmelsam\nboard = mkrzero\n\nupload_protocol = sam-ba\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Protocol for RUMBA32 F446VE Board\nDESCRIPTION: PlatformIO configuration example showing how to set a specific upload protocol for the RUMBA32 F446VE board. This example uses the ST-Link protocol, though the board supports multiple protocols.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/rumba32_f446ve.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:rumba32_f446ve]\nplatform = ststm32\nboard = rumba32_f446ve\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU and Frequency Settings\nDESCRIPTION: Extended configuration showing how to override default board settings like microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/gen4iod.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:gen4iod]\nplatform = espressif8266\nboard = gen4iod\n\n; change microcontroller\nboard_build.mcu = esp8266\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration in PlatformIO\nDESCRIPTION: Basic configuration for using the MAX32630FTHR board with the maxim32 platform in PlatformIO's project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/maxim32/max32630fthr.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:max32630fthr]\nplatform = maxim32\nboard = max32630fthr\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for ESP32-S2-Saola-1 in PlatformIO INI File\nDESCRIPTION: This code snippet demonstrates how to set the upload protocol for the Espressif ESP32-S2-Saola-1 board in the PlatformIO project configuration file. It uses the 'esptool' protocol as an example.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32-s2-saola-1.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32-s2-saola-1]\nplatform = espressif32\nboard = esp32-s2-saola-1\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Customizing Adafruit pIRkey Board Settings\nDESCRIPTION: Example of overriding default board settings in platformio.ini. It demonstrates changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_pirkey.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_pirkey]\nplatform = atmelsam\nboard = adafruit_pirkey\n\n; change microcontroller\nboard_build.mcu = samd21e18a\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing TI LaunchPad (Stellaris) Board Settings in PlatformIO\nDESCRIPTION: This snippet demonstrates how to override default settings for the TI LaunchPad (Stellaris) board in a PlatformIO project. It shows how to change the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/titiva/lplm4f120h5qr.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:lplm4f120h5qr]\nplatform = titiva\nboard = lplm4f120h5qr\n\n; change microcontroller\nboard_build.mcu = lplm4f120h5qr\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Invent One Board Settings in PlatformIO\nDESCRIPTION: This example demonstrates how to override default board settings such as microcontroller and CPU frequency in the PlatformIO configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/inventone.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:inventone]\nplatform = espressif8266\nboard = inventone\n\n; change microcontroller\nboard_build.mcu = esp8266\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing WEMOS D1 R1 Board Settings\nDESCRIPTION: Example of overriding default board settings in the project configuration. Demonstrates changing the microcontroller and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/d1.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:d1]\nplatform = espressif8266\nboard = d1\n\n; change microcontroller\nboard_build.mcu = esp8266\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Moteino M0 in PlatformIO INI File\nDESCRIPTION: This code snippet shows how to set the upload protocol for the Moteino M0 board in the PlatformIO project configuration file. The default protocol is 'sam-ba', but this example demonstrates how to explicitly set it.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/moteino_zero.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:moteino_zero]\nplatform = atmelsam\nboard = moteino_zero\n\nupload_protocol = sam-ba\n```\n\n----------------------------------------\n\nTITLE: ESP32-S3 Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the DFRobot Romeo ESP32-S3 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/dfrobot_romeo_esp32s3.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:dfrobot_romeo_esp32s3]\nplatform = espressif32\nboard = dfrobot_romeo_esp32s3\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Customizing ATtiny3226 Build Parameters in PlatformIO\nDESCRIPTION: Advanced configuration for an ATtiny3226 project with custom microcontroller and frequency settings. This snippet demonstrates how to override default board settings like the microcontroller model and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/ATtiny3226.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATtiny3226]\nplatform = atmelmegaavr\nboard = ATtiny3226\n\n; change microcontroller\nboard_build.mcu = attiny3226\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for NANO 33 IoT in PlatformIO INI File\nDESCRIPTION: This snippet demonstrates how to set the upload protocol for the NANO 33 IoT board in the PlatformIO project configuration file. It uses the 'sam-ba' protocol as an example.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/nano_33_iot.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nano_33_iot]\nplatform = atmelsam\nboard = nano_33_iot\n\nupload_protocol = sam-ba\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic STC8G2K16S4 in PlatformIO with Custom MCU and Clock Settings\nDESCRIPTION: Advanced configuration for the Generic STC8G2K16S4 board with custom microcontroller and frequency settings in the PlatformIO project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8G2K16S4.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8G2K16S4]\nplatform = intel_mcs51\nboard = STC8G2K16S4\n\n; change microcontroller\nboard_build.mcu = stc8g2k16s4\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: PlatformIO configuration demonstrating how to specify the upload protocol for the Artix-7 35T board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/shakti/artix7_35t.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:artix7_35t]\nplatform = shakti\nboard = artix7_35t\n\nupload_protocol = ftdi\n```\n\n----------------------------------------\n\nTITLE: Configuring NXP i.MX RT1050 Evaluation Kit in platformio.ini\nDESCRIPTION: This code snippet shows how to configure the NXP i.MX RT1050 Evaluation Kit in the platformio.ini file. It includes setting the board ID and platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nxpimxrt/mimxrt1050_evk.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:mimxrt1050_evk]\nplatform = nxpimxrt\nboard = mimxrt1050_evk\n```\n\n----------------------------------------\n\nTITLE: Overriding Default ATtiny1614 Settings in PlatformIO Configuration\nDESCRIPTION: Extended configuration for ATtiny1614 that demonstrates how to override default board settings such as microcontroller model and CPU frequency in a PlatformIO project file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/ATtiny1614.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATtiny1614]\nplatform = atmelmegaavr\nboard = ATtiny1614\n\n; change microcontroller\nboard_build.mcu = attiny1614\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration for SparkFun Qwiic Micro\nDESCRIPTION: Basic PlatformIO environment configuration for the SparkFun Qwiic Micro board using the atmelsam platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/sparkfun_qwiic_micro_samd21e.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:sparkfun_qwiic_micro_samd21e]\nplatform = atmelsam\nboard = sparkfun_qwiic_micro_samd21e\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Board Settings in PlatformIO\nDESCRIPTION: This example illustrates how to override default board settings for the Generic STC8H2K48T in a PlatformIO project. It shows how to change the microcontroller and MCU frequency using board-specific options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8H2K48T.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8H2K48T]\nplatform = intel_mcs51\nboard = STC8H2K48T\n\n; change microcontroller\nboard_build.mcu = stc8h2k48t\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU and Frequency Override\nDESCRIPTION: Extended configuration example showing how to override default microcontroller and frequency settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/heltec_wifi_kit_8.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:heltec_wifi_kit_8]\nplatform = espressif8266\nboard = heltec_wifi_kit_8\n\n; change microcontroller\nboard_build.mcu = esp8266\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration for hackaBLE\nDESCRIPTION: Example showing how to specify the upload protocol (JLink) for the hackaBLE board in PlatformIO.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/hackaBLE.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:hackaBLE]\nplatform = nordicnrf52\nboard = hackaBLE\n\nupload_protocol = jlink\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration for PlatformIO\nDESCRIPTION: Basic configuration for using the BluesWireless Swan R5 board with the STM32 platform in PlatformIO.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/bw_swan_r5.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:bw_swan_r5]\nplatform = ststm32\nboard = bw_swan_r5\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the Adafruit Rotary Trinkey board using sam-ba protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_rotarytrinkey_m0.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_rotarytrinkey_m0]\nplatform = atmelsam\nboard = adafruit_rotarytrinkey_m0\n\nupload_protocol = sam-ba\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the board. The board supports serial and stlinkv2 protocols.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm8/mb208.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:mb208]\nplatform = ststm8\nboard = mb208\n\nupload_protocol = serial\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the board\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/valtrack_v4_mfw_esp32_c3.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:valtrack_v4_mfw_esp32_c3]\nplatform = espressif32\nboard = valtrack_v4_mfw_esp32_c3\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Customizing ATtiny44 Board Parameters in PlatformIO\nDESCRIPTION: Extended PlatformIO configuration demonstrating how to override default board settings such as microcontroller model and CPU frequency for the Generic ATtiny44.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/attiny44.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:attiny44]\nplatform = atmelavr\nboard = attiny44\n\n; change microcontroller\nboard_build.mcu = attiny44\n\n; change MCU frequency\nboard_build.f_cpu = 8000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing MCU and Clock Settings for EFM32GG-STK3700\nDESCRIPTION: Example showing how to override default board settings such as microcontroller model and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/siliconlabsefm32/efm32gg_stk3700.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:efm32gg_stk3700]\nplatform = siliconlabsefm32\nboard = efm32gg_stk3700\n\n; change microcontroller\nboard_build.mcu = efm32gg990f1024\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing MCU and Frequency Settings\nDESCRIPTION: Advanced board configuration showing how to override default microcontroller and frequency settings for the Portenta H7 M7 core.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/portenta_h7_m7.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:portenta_h7_m7]\nplatform = ststm32\nboard = portenta_h7_m7\n\n; change microcontroller\nboard_build.mcu = stm32h747xih6\n\n; change MCU frequency\nboard_build.f_cpu = 480000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring ATtiny406 in PlatformIO Project Configuration\nDESCRIPTION: Basic configuration for using the ATtiny406 board in a PlatformIO project. This sets up the platform as atmelmegaavr and specifies the board type as ATtiny406.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/ATtiny406.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATtiny406]\nplatform = atmelmegaavr\nboard = ATtiny406\n```\n\n----------------------------------------\n\nTITLE: Customizing ATtiny861 Board Settings in platformio.ini\nDESCRIPTION: This example demonstrates how to override default settings for the Generic ATtiny861 board. It shows how to change the microcontroller and MCU frequency using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/attiny861.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:attiny861]\nplatform = atmelavr\nboard = attiny861\n\n; change microcontroller\nboard_build.mcu = attiny861\n\n; change MCU frequency\nboard_build.f_cpu = 8000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing NodeMCU 1.0 (ESP-12E Module) Settings in PlatformIO\nDESCRIPTION: Advanced configuration showing how to override default board settings such as microcontroller type and CPU frequency in platformio.ini. This allows for customized builds with specific hardware parameters.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/nodemcuv2.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nodemcuv2]\nplatform = espressif8266\nboard = nodemcuv2\n\n; change microcontroller\nboard_build.mcu = esp8266\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration for PlatformIO\nDESCRIPTION: Basic configuration settings for using the SLSTK3701A Giant Gecko S1 board in a PlatformIO project environment.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/siliconlabsefm32/efm32gg11_stk3701.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:efm32gg11_stk3701]\nplatform = siliconlabsefm32\nboard = efm32gg11_stk3701\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic PlatformIO Environment for Pro Trinket\nDESCRIPTION: Basic PlatformIO configuration for the Adafruit Pro Trinket 3V/12MHz board using the atmelavr platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/protrinket3ftdi.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:protrinket3ftdi]\nplatform = atmelavr\nboard = protrinket3ftdi\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for VCCGND F407ZGT6 Mini\nDESCRIPTION: This code snippet demonstrates how to set the upload protocol for the VCCGND F407ZGT6 Mini board in the PlatformIO configuration. It uses the 'stlink' protocol as an example.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/vccgnd_f407zg_mini.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:vccgnd_f407zg_mini]\nplatform = ststm32\nboard = vccgnd_f407zg_mini\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic ATmega16 Board Settings in PlatformIO\nDESCRIPTION: Basic configuration for ATmega16 board in platformio.ini file. Sets up the platform and board type.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega16.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega16]\nplatform = atmelavr\nboard = ATmega16\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for WT32-ETH01\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the WT32-ETH01 board using esptool as the default option.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/wt32-eth01.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:wt32-eth01]\nplatform = espressif32\nboard = wt32-eth01\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration in PlatformIO\nDESCRIPTION: Basic INI configuration for setting up an EFM32WG-STK3800 Wonder Gecko board project in PlatformIO.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/siliconlabsefm32/efm32wg_stk3800.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:efm32wg_stk3800]\nplatform = siliconlabsefm32\nboard = efm32wg_stk3800\n```\n\n----------------------------------------\n\nTITLE: Customizing ESP32-C6-DevKitC-1 Board Settings\nDESCRIPTION: Advanced configuration for ESP32-C6-DevKitC-1 that demonstrates how to override default board settings like microcontroller type and CPU frequency in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32-c6-devkitc-1.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32-c6-devkitc-1]\nplatform = espressif32\nboard = esp32-c6-devkitc-1\n\n; change microcontroller\nboard_build.mcu = esp32c6\n\n; change MCU frequency\nboard_build.f_cpu = 160000000L\n```\n\n----------------------------------------\n\nTITLE: Basic ESP32-PRO Board Configuration\nDESCRIPTION: Minimal PlatformIO configuration for setting up an ESP32-PRO board project using the espressif32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/esp32-pro.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:esp32-pro]\nplatform = espressif32\nboard = esp32-pro\n```\n\n----------------------------------------\n\nTITLE: Configuring ATmega324A Board in PlatformIO\nDESCRIPTION: Basic configuration for setting up an ATmega324A board in the platformio.ini configuration file. This defines the platform (atmelavr) and board type.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega324A.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega324A]\nplatform = atmelavr\nboard = ATmega324A\n```\n\n----------------------------------------\n\nTITLE: Configuring Pinoccio Scout in platformio.ini\nDESCRIPTION: Basic configuration for the Pinoccio Scout board in a PlatformIO project configuration file. This snippet shows how to set up the environment with the atmelavr platform and pinoccio board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/pinoccio.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:pinoccio]\nplatform = atmelavr\nboard = pinoccio\n```\n\n----------------------------------------\n\nTITLE: STM32F103VG Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to set the upload protocol for the STM32F103VG board to serial communication.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103VG.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103VG]\nplatform = ststm32\nboard = genericSTM32F103VG\n\nupload_protocol = serial\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU Settings\nDESCRIPTION: Configuration example showing how to override default microcontroller and frequency settings for the BluesWireless Swan R5 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/bw_swan_r5.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:bw_swan_r5]\nplatform = ststm32\nboard = bw_swan_r5\n\n; change microcontroller\nboard_build.mcu = stm32l4r5ziy6\n\n; change MCU frequency\nboard_build.f_cpu = 120000000L\n```\n\n----------------------------------------\n\nTITLE: Basic ATmega3250P Board Configuration in PlatformIO\nDESCRIPTION: Basic configuration setup for ATmega3250P board in platformio.ini file\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega3250P.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega3250P]\nplatform = atmelavr\nboard = ATmega3250P\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration for TAMC Termod S3\nDESCRIPTION: Basic PlatformIO configuration setup for TAMC Termod S3 board using the espressif32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/tamc_termod_s3.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:tamc_termod_s3]\nplatform = espressif32\nboard = tamc_termod_s3\n```\n\n----------------------------------------\n\nTITLE: Advanced STM32F103V8 Board Configuration\nDESCRIPTION: Extended configuration showing how to customize MCU and frequency settings for the STM32F103V8 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103V8.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103V8]\nplatform = ststm32\nboard = genericSTM32F103V8\n\n; change microcontroller\nboard_build.mcu = stm32f103v8t6\n\n; change MCU frequency\nboard_build.f_cpu = 72000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Arduboy Board Settings in PlatformIO INI File\nDESCRIPTION: This snippet demonstrates how to override default Arduboy settings in the PlatformIO configuration. It shows examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/arduboy.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:arduboy]\nplatform = atmelavr\nboard = arduboy\n\n; change microcontroller\nboard_build.mcu = atmega32u4\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration in PlatformIO\nDESCRIPTION: Basic configuration example for setting up a project with the sduino MB board using the ststm8 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm8/mb208.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:mb208]\nplatform = ststm8\nboard = mb208\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration with Custom Settings\nDESCRIPTION: Extended configuration for ATmega6490 board with custom microcontroller and frequency settings\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega6490.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega6490]\nplatform = atmelavr\nboard = ATmega6490\n\n; change microcontroller\nboard_build.mcu = atmega6490\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for STM32F401RD Board\nDESCRIPTION: Basic PlatformIO configuration for setting up a project targeting the STM32F401RD board using the ststm32 platform. This snippet defines the minimal required configuration in the project's platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F401RD.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F401RD]\nplatform = ststm32\nboard = genericSTM32F401RD\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Adafruit QT Py ESP32-S3 No PSRAM\nDESCRIPTION: Configuration to specify the upload protocol for the Adafruit QT Py ESP32-S3 No PSRAM board. The example uses the default 'esptool' protocol.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/adafruit_qtpy_esp32s3_nopsram.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_qtpy_esp32s3_nopsram]\nplatform = espressif32\nboard = adafruit_qtpy_esp32s3_nopsram\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Basic ATtiny13 Board Configuration in PlatformIO\nDESCRIPTION: Basic configuration for setting up an ATtiny13 board environment in PlatformIO's project configuration file. Specifies the platform as atmelavr and board as attiny13.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/attiny13.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:attiny13]\nplatform = atmelavr\nboard = attiny13\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic PlatformIO Environment for CubeCell Board Plus\nDESCRIPTION: Basic PlatformIO configuration for setting up a project with the Heltec CubeCell-Board Plus using the heltec-cubecell platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/heltec-cubecell/cubecell_board_plus.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:cubecell_board_plus]\nplatform = heltec-cubecell\nboard = cubecell_board_plus\n```\n\n----------------------------------------\n\nTITLE: Overriding Default ATtiny85 Settings in PlatformIO INI File\nDESCRIPTION: This snippet demonstrates how to override default settings for the Generic ATtiny85 board in the PlatformIO configuration. It shows how to change the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/attiny85.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:attiny85]\nplatform = atmelavr\nboard = attiny85\n\n; change microcontroller\nboard_build.mcu = attiny85\n\n; change MCU frequency\nboard_build.f_cpu = 8000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for ItsyBitsy 3V/8MHz Board\nDESCRIPTION: Basic PlatformIO configuration for using the ItsyBitsy 3V/8MHz board. Sets the platform to atmelavr and specifies the board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/itsybitsy32u4_3V.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:itsybitsy32u4_3V]\nplatform = atmelavr\nboard = itsybitsy32u4_3V\n```\n\n----------------------------------------\n\nTITLE: Customizing SparkFun SAMD21 Pro RF Board Settings\nDESCRIPTION: Example of overriding default board settings in the PlatformIO configuration. Demonstrates changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/sparkfun_samd21_proRF.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:sparkfun_samd21_proRF]\nplatform = atmelsam\nboard = sparkfun_samd21_proRF\n\n; change microcontroller\nboard_build.mcu = samd21g18a\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring AVR64DB32 Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the AVR64DB32 board in the PlatformIO project configuration file. It sets the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/AVR64DB32.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:AVR64DB32]\nplatform = atmelmegaavr\nboard = AVR64DB32\n```\n\n----------------------------------------\n\nTITLE: Customizing AVR128DA48 Board Settings in PlatformIO\nDESCRIPTION: Example of overriding default board settings including microcontroller type and CPU frequency in PlatformIO configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/AVR128DA48.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:AVR128DA48]\nplatform = atmelmegaavr\nboard = AVR128DA48\n\n; change microcontroller\nboard_build.mcu = avr128da48\n\n; change MCU frequency\nboard_build.f_cpu = 24000000L\n```\n\n----------------------------------------\n\nTITLE: Using Platform Show Command in PlatformIO CLI\nDESCRIPTION: Command syntax for showing platform details. This command is deprecated and will be removed in future releases.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/platforms/cmd_show.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio platform show PLATFORM\n```\n\n----------------------------------------\n\nTITLE: Configuring PanStamp AVR Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the PanStamp AVR board in the PlatformIO project configuration file. It sets the platform to atmelavr and specifies the board as panStampAVR.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/panStampAVR.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:panStampAVR]\nplatform = atmelavr\nboard = panStampAVR\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic ATmega3290 Project in PlatformIO\nDESCRIPTION: Basic configuration for the ATmega3290 board in a PlatformIO project's configuration file. This specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega3290.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega3290]\nplatform = atmelavr\nboard = ATmega3290\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Wraith V1 ESC Board\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the Wraith V1 ESC board. The board supports multiple protocols including blackmagic, dfu, jlink, serial, and stlink, with stlink being the default.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/wraith32_v1.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:wraith32_v1]\nplatform = ststm32\nboard = wraith32_v1\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic ATtiny402 Board Settings in PlatformIO\nDESCRIPTION: Basic PlatformIO configuration for ATtiny402 board using the atmelmegaavr platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/ATtiny402.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATtiny402]\nplatform = atmelmegaavr\nboard = ATtiny402\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic STC8G2K16S4 in PlatformIO with Basic Settings\nDESCRIPTION: Basic configuration for the Generic STC8G2K16S4 board in the PlatformIO project configuration file (platformio.ini).\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8G2K16S4.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8G2K16S4]\nplatform = intel_mcs51\nboard = STC8G2K16S4\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic WildFire V2 Board Settings\nDESCRIPTION: Basic PlatformIO configuration for setting up a project with the WildFire V2 board using the atmelavr platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/wildfirev2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:wildfirev2]\nplatform = atmelavr\nboard = wildfirev2\n```\n\n----------------------------------------\n\nTITLE: Customizing AVR64DD32 Board Settings in PlatformIO\nDESCRIPTION: This snippet demonstrates how to override default AVR64DD32 settings in a PlatformIO project. It shows examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/AVR64DD32.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:AVR64DD32]\nplatform = atmelmegaavr\nboard = AVR64DD32\n\n; change microcontroller\nboard_build.mcu = avr64dd32\n\n; change MCU frequency\nboard_build.f_cpu = 24000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for ESP32 FM DevKit\nDESCRIPTION: This snippet demonstrates how to set the upload protocol for the ESP32 FM DevKit board in the platformio.ini file. The default protocol is 'esptool'.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/fm-devkit.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:fm-devkit]\nplatform = espressif32\nboard = fm-devkit\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for AVR128DB32\nDESCRIPTION: Basic configuration setup for AVR128DB32 board in platformio.ini file. Sets the platform to atmelmegaavr and specifies the board type.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/AVR128DB32.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:AVR128DB32]\nplatform = atmelmegaavr\nboard = AVR128DB32\n```\n\n----------------------------------------\n\nTITLE: Customizing unPhone 9 Board Settings\nDESCRIPTION: Example of overriding default unPhone 9 settings in the PlatformIO configuration. It demonstrates changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/unphone9.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:unphone9]\nplatform = espressif32\nboard = unphone9\n\n; change microcontroller\nboard_build.mcu = esp32s3\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced STM32 Board Configuration\nDESCRIPTION: Extended PlatformIO configuration showing how to override default microcontroller and frequency settings for the ST Nucleo F334R8 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f334r8.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f334r8]\nplatform = ststm32\nboard = nucleo_f334r8\n\n; change microcontroller\nboard_build.mcu = stm32f334r8t6\n\n; change MCU frequency\nboard_build.f_cpu = 72000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing ftDuino Board Settings in PlatformIO\nDESCRIPTION: Advanced configuration for the ftDuino board with custom microcontroller and frequency settings. This demonstrates how to override default board options in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ftduino.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ftduino]\nplatform = atmelavr\nboard = ftduino\n\n; change microcontroller\nboard_build.mcu = atmega32u4\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Setting the upload protocol for IoT-Bus Proteus board using esptool\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/iotbusproteus.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:iotbusproteus]\nplatform = espressif32\nboard = iotbusproteus\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for ST 32F429IDISCOVERY\nDESCRIPTION: Configuration example for changing the upload protocol to ST-Link for the ST 32F429IDISCOVERY board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_f429zi.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_f429zi]\nplatform = ststm32\nboard = disco_f429zi\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/nscreen-32.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:nscreen-32]\nplatform = espressif32\nboard = nscreen-32\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Customizing STM32F401RE Board Settings in PlatformIO INI File\nDESCRIPTION: This snippet demonstrates how to override default board settings such as microcontroller type and CPU frequency in the PlatformIO INI file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F401RE.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F401RE]\nplatform = ststm32\nboard = genericSTM32F401RE\n\n; change microcontroller\nboard_build.mcu = stm32f401ret6\n\n; change MCU frequency\nboard_build.f_cpu = 84000000L\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Context Options for Doctest\nDESCRIPTION: Example of a custom main() function with additional Doctest context options. This implementation shows how to configure test execution behavior such as aborting after a specific number of failed assertions and sorting test cases by name.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/advanced/unit-testing/frameworks/doctest.rst#2025-04-10_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nint main(int argc, char **argv)\n{\n  doctest::Context context;\n\n  // BEGIN:: PLATFORMIO REQUIRED OPTIONS\n  context.setOption(\"success\", true);     // Reports successful tests\n  context.setOption(\"no-exitcode\", true); // Do not return non-zero code on failed test case\n  // END:: PLATFORMIO REQUIRED OPTIONS\n\n  // YOUR CUSTOM DOCTEST OPTIONS\n  context.setOption(\"abort-after\", 5);    // stop test execution after 5 failed assertions\n  context.setOption(\"order-by\", \"name\");  // sort the test cases by their name\n\n  context.applyCommandLine(argc, argv);\n  return context.run();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ATmega4808 Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to set up the ATmega4808 board in the PlatformIO project configuration file. It specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/ATmega4808.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega4808]\nplatform = atmelmegaavr\nboard = ATmega4808\n```\n\n----------------------------------------\n\nTITLE: Accessing Shell Completion Help Commands\nDESCRIPTION: Commands to display help information for PlatformIO shell completion system and its specific commands.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/system/completion/index.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio system completion --help\npio system completion COMMAND --help\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Protocol Settings\nDESCRIPTION: Configuration example for specifying the upload protocol (mbed) for the Maxim Health Sensor Platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/maxim32/max32620hsp.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:max32620hsp]\nplatform = maxim32\nboard = max32620hsp\n\nupload_protocol = mbed\n```\n\n----------------------------------------\n\nTITLE: Using pio pkg search command in Bash\nDESCRIPTION: Basic usage of the 'pio pkg search' command to search for packages in the PlatformIO Registry. The command supports various options and can be used with search queries.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/pkg/cmd_search.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio pkg search [OPTIONS] [QUERY]\n```\n\n----------------------------------------\n\nTITLE: Configuring NodeMCU 1.0 (ESP-12E Module) in PlatformIO\nDESCRIPTION: Basic project configuration for NodeMCU 1.0 (ESP-12E Module) in platformio.ini file. This sets up the board with default settings for the Espressif8266 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/nodemcuv2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nodemcuv2]\nplatform = espressif8266\nboard = nodemcuv2\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic PlatformIO Environment for ST Nucleo F411RE\nDESCRIPTION: Basic configuration for PlatformIO project targeting the ST Nucleo F411RE board. This snippet sets up the minimum required environment configuration using the STM32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_f411re.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_f411re]\nplatform = ststm32\nboard = nucleo_f411re\n```\n\n----------------------------------------\n\nTITLE: PlatformIO Configuration with Custom Upload Protocol\nDESCRIPTION: This configuration example demonstrates how to specify a custom upload protocol for the DFRobot Firebeetle 2 ESP32-S3 board. The board supports multiple protocols with esptool being the default.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/dfrobot_firebeetle2_esp32s3.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:dfrobot_firebeetle2_esp32s3]\nplatform = espressif32\nboard = dfrobot_firebeetle2_esp32s3\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Legacy Extra Libraries Directory Configuration in PlatformIO\nDESCRIPTION: Demonstrates how to specify multiple external library directories using the deprecated lib_extra_dirs option.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/env/options/library/lib_extra_dirs.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:myenv]\nlib_extra_dirs =\n    /common/libraries\n    /iot/libraries\n```\n\n----------------------------------------\n\nTITLE: Configuring Phoenix 1.0 Board in PlatformIO INI File\nDESCRIPTION: This snippet shows how to configure the Phoenix 1.0 board in the PlatformIO project configuration file. It sets the platform to espressif8266 and the board to phoenix_v1.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/phoenix_v1.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:phoenix_v1]\nplatform = espressif8266\nboard = phoenix_v1\n```\n\n----------------------------------------\n\nTITLE: Advanced STC8A8K16D4 Board Configuration with Custom Settings\nDESCRIPTION: Extended configuration showing how to override default board settings like microcontroller type and CPU frequency in platformio.ini\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8A8K16D4.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8A8K16D4]\nplatform = intel_mcs51\nboard = STC8A8K16D4\n\n; change microcontroller\nboard_build.mcu = stc8a8k16d4\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Build Directory Path Configuration\nDESCRIPTION: Specifies the directory path configuration for PlatformIO's build system cache. Stores compiled object files, static libraries, firmwares and cached build information. Default location is in the workspace directory under /build.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/platformio/options/directory/build_dir.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nbuild_dir\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU Settings\nDESCRIPTION: Extended configuration with custom microcontroller and frequency settings for the Adafruit Feather Bluefruit Sense board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/adafruit_feather_nrf52840_sense.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_feather_nrf52840_sense]\nplatform = nordicnrf52\nboard = adafruit_feather_nrf52840_sense\n\n; change microcontroller\nboard_build.mcu = nrf52840\n\n; change MCU frequency\nboard_build.f_cpu = 64000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring LPCXpresso11U68 Board in platformio.ini\nDESCRIPTION: Basic configuration for the LPCXpresso11U68 board in the project's platformio.ini file. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nxplpc/lpc11u68.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:lpc11u68]\nplatform = nxplpc\nboard = lpc11u68\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU Settings\nDESCRIPTION: Extended PlatformIO configuration showing how to override default board settings like microcontroller type and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif8266/modwifi.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:modwifi]\nplatform = espressif8266\nboard = modwifi\n\n; change microcontroller\nboard_build.mcu = esp8266\n\n; change MCU frequency\nboard_build.f_cpu = 80000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Curiosity Nano AVR128DA48 Board Settings\nDESCRIPTION: Advanced configuration showing how to override default board settings such as microcontroller type and CPU frequency in the platformio.ini file. This example demonstrates customizing the MCU and clock frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/curiosity_nano_da.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:curiosity_nano_da]\nplatform = atmelmegaavr\nboard = curiosity_nano_da\n\n; change microcontroller\nboard_build.mcu = avr128da48\n\n; change MCU frequency\nboard_build.f_cpu = 24000000L\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for ST Nucleo L476RG\nDESCRIPTION: Basic configuration example for setting up a PlatformIO project for the ST Nucleo L476RG board using the STM32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/nucleo_l476rg.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nucleo_l476rg]\nplatform = ststm32\nboard = nucleo_l476rg\n```\n\n----------------------------------------\n\nTITLE: Overriding Default STC15W4K40S4 Settings in PlatformIO\nDESCRIPTION: This code snippet demonstrates how to override default settings for the Generic STC15W4K40S4 board in the PlatformIO configuration. It shows examples of changing the microcontroller and MCU frequency using board-specific options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15W4K40S4.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15W4K40S4]\nplatform = intel_mcs51\nboard = STC15W4K40S4\n\n; change microcontroller\nboard_build.mcu = stc15w4k40s4\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Defining Library Keywords in PlatformIO\nDESCRIPTION: Keywords help make libraries discoverable through search. They must be lowercase and can contain letters (a-z), digits, periods, underscores, plus symbols, and dashes. Keywords can be specified as a comma-separated string or array, with a maximum length of 255 characters.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/manifests/library-json/fields/keywords.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nkeywords = arduino, esp8266, wifi\n```\n\nLANGUAGE: ini\nCODE:\n```\nkeywords = [\n    \"arduino\",\n    \"esp8266\",\n    \"wifi\"\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring ProtoCentral HealthyPi 4 Board in platformio.ini\nDESCRIPTION: This snippet shows how to configure the ProtoCentral HealthyPi 4 board in the PlatformIO project configuration file. It sets the platform to espressif32 and the board to healthypi4.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/healthypi4.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:healthypi4]\nplatform = espressif32\nboard = healthypi4\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Protocol for Adafruit NeoPixel Trinkey\nDESCRIPTION: PlatformIO configuration specifying the upload protocol for the Adafruit NeoPixel Trinkey. Sets the protocol to sam-ba, which is also the default protocol for this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_neotrinkey_m0.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_neotrinkey_m0]\nplatform = atmelsam\nboard = adafruit_neotrinkey_m0\n\nupload_protocol = sam-ba\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic PlatformIO Environment for Adafruit ItsyBitsy M4\nDESCRIPTION: Sets up a basic PlatformIO project environment for the Adafruit ItsyBitsy M4 board using the atmelsam platform. This configuration uses default board settings.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_itsybitsy_m4.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_itsybitsy_m4]\nplatform = atmelsam\nboard = adafruit_itsybitsy_m4\n```\n\n----------------------------------------\n\nTITLE: Using pio platform frameworks Command in Bash\nDESCRIPTION: Demonstrates the basic usage syntax for the 'pio platform frameworks' command with an optional QUERY parameter and OPTIONS. This command is used to list supported frameworks and SDKs in PlatformIO.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/platforms/cmd_frameworks.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npio platform frameworks QUERY [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: PlatformIO Configuration with Custom Upload Protocol\nDESCRIPTION: Configuration demonstrating how to set a specific upload protocol for the MTS Dragonfly board. In this example, the 'mbed' protocol is explicitly specified though it's already the default.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/mts_dragonfly_f411re.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:mts_dragonfly_f411re]\nplatform = ststm32\nboard = mts_dragonfly_f411re\n\nupload_protocol = mbed\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for N79E8132\nDESCRIPTION: Basic configuration setup for the N79E8132 board in platformio.ini file, specifying the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/N79E8132.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:N79E8132]\nplatform = intel_mcs51\nboard = N79E8132\n```\n\n----------------------------------------\n\nTITLE: Customizing STC15F105W Board Configuration\nDESCRIPTION: Extended platformio.ini configuration showing how to override default board settings like microcontroller model and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15F105W.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15F105W]\nplatform = intel_mcs51\nboard = STC15F105W\n\n; change microcontroller\nboard_build.mcu = stc15f105w\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Generic N78E055 Board\nDESCRIPTION: This snippet shows how to configure a PlatformIO project for the Generic N78E055 board using the intel_mcs51 platform. It demonstrates setting the board ID in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/N78E055.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:N78E055]\nplatform = intel_mcs51\nboard = N78E055\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Configuration with MCU Settings\nDESCRIPTION: Extended environment configuration demonstrating how to override default microcontroller and frequency settings for the Elektor Uno R4 board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/elektor_uno_r4.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:elektor_uno_r4]\nplatform = atmelavr\nboard = elektor_uno_r4\n\n; change microcontroller\nboard_build.mcu = atmega328pb\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Custom MCU Configuration for STM32F103RB\nDESCRIPTION: Advanced board configuration showing how to override default microcontroller settings including MCU model and frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103RB.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103RB]\nplatform = ststm32\nboard = genericSTM32F103RB\n\n; change microcontroller\nboard_build.mcu = stm32f103rbt6\n\n; change MCU frequency\nboard_build.f_cpu = 72000000L\n```\n\n----------------------------------------\n\nTITLE: RST Copyright and License Declaration\nDESCRIPTION: License and copyright declaration for PlatformIO documentation in reStructuredText format.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/home/index.rst#2025-04-10_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n..  Copyright (c) 2014-present PlatformIO <contact@platformio.org>\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n       http://www.apache.org/licenses/LICENSE-2.0\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Board Settings in PlatformIO\nDESCRIPTION: Basic PlatformIO configuration for TI LaunchPad MSP-EXP430FR2433LP board using platform timsp430. This configuration sets up the basic environment for the board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/timsp430/lpmsp430fr2433.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:lpmsp430fr2433]\nplatform = timsp430\nboard = lpmsp430fr2433\n```\n\n----------------------------------------\n\nTITLE: Advanced N79E822 Board Configuration with Custom Settings\nDESCRIPTION: Extended configuration example showing how to override default board settings such as microcontroller model and CPU frequency in PlatformIO.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/N79E822.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:N79E822]\nplatform = intel_mcs51\nboard = N79E822\n\n; change microcontroller\nboard_build.mcu = n79e822\n\n; change MCU frequency\nboard_build.f_cpu = 6000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Adafruit BLM Badge Hardware Settings in PlatformIO\nDESCRIPTION: Example of how to override default microcontroller and frequency settings for the Adafruit BLM Badge board in the PlatformIO configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_blm_badge.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_blm_badge]\nplatform = atmelsam\nboard = adafruit_blm_badge\n\n; change microcontroller\nboard_build.mcu = samd21e18a\n\n; change MCU frequency\nboard_build.f_cpu = 48000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced PlatformIO Board Configuration with Custom Settings\nDESCRIPTION: Extended configuration for STC8H3K64S2 board with custom microcontroller and frequency settings using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8H3K64S2.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8H3K64S2]\nplatform = intel_mcs51\nboard = STC8H3K64S2\n\n; change microcontroller\nboard_build.mcu = stc8h3k64s2\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the ST STM32LDISCOVERY board using the stlink option.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_l152rb.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_l152rb]\nplatform = ststm32\nboard = disco_l152rb\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for Trueverit ESP32 Universal IoT Driver MK II\nDESCRIPTION: This snippet shows how to configure the PlatformIO environment for the Trueverit ESP32 Universal IoT Driver MK II board. It sets the platform and board options in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/trueverit-iot-driver-mk2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:trueverit-iot-driver-mk2]\nplatform = espressif32\nboard = trueverit-iot-driver-mk2\n```\n\n----------------------------------------\n\nTITLE: Filtering Boards by Platform in PlatformIO\nDESCRIPTION: Example showing how to filter boards by platform name, specifically displaying boards from the 'timsp430' platform, which includes various MSP430 microcontroller variants.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/cmd_boards.rst#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n> pio boards timsp430\n\nPlatform: timsp430\n---------------------------------------------------------------------------\nID                    MCU           Frequency  Flash   RAM    Name\n---------------------------------------------------------------------------\nlpmsp430fr5739        msp430fr5739  16MHz     15K    1K    FraunchPad w/ msp430fr5739\nlpmsp430f5529         msp430f5529   16MHz     128K   1K    LaunchPad w/ msp430f5529 (16MHz)\nlpmsp430f5529_25      msp430f5529   25MHz     128K   1K    LaunchPad w/ msp430f5529 (25MHz)\nlpmsp430fr5969        msp430fr5969  8MHz      64K    1K    LaunchPad w/ msp430fr5969\nlpmsp430g2231         msp430g2231   1MHz      2K     128B   LaunchPad w/ msp430g2231 (1MHz)\nlpmsp430g2452         msp430g2452   16MHz     8K     256B   LaunchPad w/ msp430g2452 (16MHz)\nlpmsp430g2553         msp430g2553   16MHz     16K    512B   LaunchPad w/ msp430g2553 (16MHz)\n```\n\n----------------------------------------\n\nTITLE: Configuring Black STM32F407ZE Board in PlatformIO\nDESCRIPTION: Basic configuration for the Black STM32F407ZE board in the project's platformio.ini file. Specifies the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/black_f407ze.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:black_f407ze]\nplatform = ststm32\nboard = black_f407ze\n```\n\n----------------------------------------\n\nTITLE: Customizing Seeed Wio 3G Hardware Settings in PlatformIO\nDESCRIPTION: Advanced configuration that overrides default microcontroller and frequency settings for the Seeed Wio 3G board. This demonstrates how to customize the MCU type and clock frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/wio_3g.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:wio_3g]\nplatform = ststm32\nboard = wio_3g\n\n; change microcontroller\nboard_build.mcu = stm32f439vi\n\n; change MCU frequency\nboard_build.f_cpu = 180000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Arduino Esplora Board Configuration in PlatformIO\nDESCRIPTION: Advanced configuration for Arduino Esplora showing how to override default board settings such as microcontroller type and CPU frequency in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/esplora.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:esplora]\nplatform = atmelavr\nboard = esplora\n\n; change microcontroller\nboard_build.mcu = atmega32u4\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Protocol for ArtronShop ATD1.47-S3 in PlatformIO\nDESCRIPTION: PlatformIO configuration showing how to set a specific upload protocol for the ArtronShop ATD1.47-S3 board. The example uses the default 'esptool' protocol, but the board supports multiple other protocols as well.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/atd147_s3.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:atd147_s3]\nplatform = espressif32\nboard = atd147_s3\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for SensorTile.box in PlatformIO INI File\nDESCRIPTION: Configuration example for specifying the upload protocol for the SensorTile.box board. The default protocol is 'stlink'.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/steval_mksboxv1.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:steval_mksboxv1]\nplatform = ststm32\nboard = steval_mksboxv1\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Upload Protocol Configuration for OpenIMU300\nDESCRIPTION: PlatformIO configuration specifying the upload protocol for the OpenIMU300 board using STLink.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/aceinna_imu/OpenIMU300.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:OpenIMU300]\nplatform = aceinna_imu\nboard = OpenIMU300\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO Environment for Smart Bee Motion Board\nDESCRIPTION: Basic configuration for setting up a PlatformIO project environment for the Smart Bee Motion board. This defines the platform as espressif32 and sets the board to bee_motion.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/bee_motion.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:bee_motion]\nplatform = espressif32\nboard = bee_motion\n```\n\n----------------------------------------\n\nTITLE: Customizing STM32F411RC Board Settings\nDESCRIPTION: Example of overriding default board settings in platformio.ini. Shows how to change the microcontroller model and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F411RC.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F411RC]\nplatform = ststm32\nboard = genericSTM32F411RC\n\n; change microcontroller\nboard_build.mcu = stm32f411rct6\n\n; change MCU frequency\nboard_build.f_cpu = 100000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing Maple Board Settings in platformio.ini\nDESCRIPTION: Example of overriding default Maple board settings in platformio.ini. It demonstrates how to change the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/maple.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:maple]\nplatform = ststm32\nboard = maple\n\n; change microcontroller\nboard_build.mcu = stm32f103rbt6\n\n; change MCU frequency\nboard_build.f_cpu = 72000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO Environment for Smart Bee S3 Board\nDESCRIPTION: Basic configuration for using the Smart Bee S3 board in a PlatformIO project environment file (platformio.ini). This defines the board and platform to be used.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/bee_s3.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:bee_s3]\nplatform = espressif32\nboard = bee_s3\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic N79E813 Environment in platformio.ini\nDESCRIPTION: Basic configuration for setting up a PlatformIO project environment for the Generic N79E813 board using the Intel MCS-51 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/N79E813.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:N79E813]\nplatform = intel_mcs51\nboard = N79E813\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for RYMCU ESP32-S3-DevKitC-1\nDESCRIPTION: Basic PlatformIO configuration for the RYMCU ESP32-S3-DevKitC-1-N8R2 board in the project's platformio.ini file. Specifies the platform and board to use.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/rymcu-esp32-s3-devkitc-1.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:rymcu-esp32-s3-devkitc-1]\nplatform = espressif32\nboard = rymcu-esp32-s3-devkitc-1\n```\n\n----------------------------------------\n\nTITLE: Custom MCU and Frequency Configuration for FRDM-K82F\nDESCRIPTION: Extended PlatformIO configuration that demonstrates how to override default board settings like microcontroller type and CPU frequency for the Freescale Kinetis FRDM-K82F board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/freescalekinetis/frdm_k82f.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:frdm_k82f]\nplatform = freescalekinetis\nboard = frdm_k82f\n\n; change microcontroller\nboard_build.mcu = mk82fn256vll15\n\n; change MCU frequency\nboard_build.f_cpu = 150000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced ATtiny3224 Board Configuration with Custom Settings\nDESCRIPTION: Demonstrates how to override default board settings by customizing microcontroller type and CPU frequency in platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/ATtiny3224.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATtiny3224]\nplatform = atmelmegaavr\nboard = ATtiny3224\n\n; change microcontroller\nboard_build.mcu = attiny3224\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring PYBSTICK26 Duino in PlatformIO.ini\nDESCRIPTION: Basic configuration for using the PYBSTICK26 Duino board in a PlatformIO project. This sets up the platform and board ID in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/pybstick26_duino.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:pybstick26_duino]\nplatform = ststm32\nboard = pybstick26_duino\n```\n\n----------------------------------------\n\nTITLE: Basic PlatformIO Configuration for MTS Dragonfly\nDESCRIPTION: Basic configuration for the MTS Dragonfly board in the platformio.ini file. This sets up the environment with the ststm32 platform and selects the mts_dragonfly_f411re board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/mts_dragonfly_f411re.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:mts_dragonfly_f411re]\nplatform = ststm32\nboard = mts_dragonfly_f411re\n```\n\n----------------------------------------\n\nTITLE: Basic ATtiny461 Board Configuration\nDESCRIPTION: Basic board configuration for the ATtiny461 in platformio.ini file, specifying the platform and board type.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/attiny461.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:attiny461]\nplatform = atmelavr\nboard = attiny461\n```\n\n----------------------------------------\n\nTITLE: Generating Compilation Database Command\nDESCRIPTION: Command line instruction for generating the compile_commands.json file using PlatformIO CLI.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/integration/compile_commands.rst#2025-04-10_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n> pio run -t compiledb\n```\n\n----------------------------------------\n\nTITLE: Customizing Adafruit Feather M4 CAN Board Settings in PlatformIO\nDESCRIPTION: Example of how to override default board settings in PlatformIO configuration. This shows how to change the microcontroller and CPU frequency for the Adafruit Feather M4 CAN board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_feather_m4_can.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_feather_m4_can]\nplatform = atmelsam\nboard = adafruit_feather_m4_can\n\n; change microcontroller\nboard_build.mcu = same51j19a\n\n; change MCU frequency\nboard_build.f_cpu = 120000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing IAP15W4K63S4 Board Parameters\nDESCRIPTION: Advanced PlatformIO configuration demonstrating how to override default board settings such as microcontroller model and CPU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/IAP15W4K63S4.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:IAP15W4K63S4]\nplatform = intel_mcs51\nboard = IAP15W4K63S4\n\n; change microcontroller\nboard_build.mcu = iap15w4k63s4\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic ATtiny3226 Project in PlatformIO\nDESCRIPTION: Basic configuration for setting up an ATtiny3226 project in platformio.ini. This snippet defines the environment, platform, and board settings required for a PlatformIO project targeting the ATtiny3226 microcontroller.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelmegaavr/ATtiny3226.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATtiny3226]\nplatform = atmelmegaavr\nboard = ATtiny3226\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for LPCXpresso11U68\nDESCRIPTION: Configuration to change the upload protocol for the LPCXpresso11U68 board to mbed in platformio.ini.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nxplpc/lpc11u68.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:lpc11u68]\nplatform = nxplpc\nboard = lpc11u68\n\nupload_protocol = mbed\n```\n\n----------------------------------------\n\nTITLE: Advanced HONEYLemon Board Configuration\nDESCRIPTION: Extended PlatformIO configuration demonstrating how to override default board settings including microcontroller and CPU frequency\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/honeylemon.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:honeylemon]\nplatform = espressif32\nboard = honeylemon\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Basic OpenIMU300 Board Configuration\nDESCRIPTION: Basic PlatformIO configuration for Aceinna OpenIMU 300 board setup specifying the platform and board type.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/aceinna_imu/OpenIMU300.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:OpenIMU300]\nplatform = aceinna_imu\nboard = OpenIMU300\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO Environment for Adafruit NeoPixel Trinkey\nDESCRIPTION: Basic PlatformIO configuration for setting up the Adafruit NeoPixel Trinkey development environment. Uses the atmelsam platform with the board's specific identifier.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_neotrinkey_m0.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_neotrinkey_m0]\nplatform = atmelsam\nboard = adafruit_neotrinkey_m0\n```\n\n----------------------------------------\n\nTITLE: Unity Configuration in PlatformIO INI\nDESCRIPTION: Example of configuring Unity options through PlatformIO's build flags in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/advanced/unit-testing/frameworks/unity.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:extra_unity_options]\nplatform = native\nbuild_flags =\n    -D UNITY_INT_WIDTH=16\n    -D UNITY_FLOAT_TYPE=float16_t\n```\n\n----------------------------------------\n\nTITLE: Configuring STM32F423CH Board in PlatformIO Configuration File\nDESCRIPTION: Basic configuration for the STM32F423CH board in the platformio.ini project configuration file. This sets up the environment with the ststm32 platform and the genericSTM32F423CH board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F423CH.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F423CH]\nplatform = ststm32\nboard = genericSTM32F423CH\n```\n\n----------------------------------------\n\nTITLE: Customizing Alorium XLR8 Board Settings in PlatformIO (INI)\nDESCRIPTION: This snippet demonstrates how to override default Alorium XLR8 settings in a PlatformIO environment. It shows examples of changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/alorium_xlr8.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:alorium_xlr8]\nplatform = atmelavr\nboard = alorium_xlr8\n\n; change microcontroller\nboard_build.mcu = atmega328p\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Stable SiFive Platform Version in PlatformIO\nDESCRIPTION: PlatformIO configuration for using the stable version of the SiFive development platform. Shows how to pin to the latest stable version or specify a particular version.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/platforms/sifive.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n; Latest stable version, NOT recommended\n; Pin the version as shown below\n[env:latest_stable]\nplatform = sifive\nboard = ...\n\n; Specific version\n[env:custom_stable]\nplatform = sifive@x.y.z\nboard = ...\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration in platformio.ini\nDESCRIPTION: Default configuration settings for Valetron Systems VALTRACK-V4MVF board using espressif32 platform\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/valtrack_v4_mfw_esp32_c3.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:valtrack_v4_mfw_esp32_c3]\nplatform = espressif32\nboard = valtrack_v4_mfw_esp32_c3\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for ST 32F411EDISCOVERY\nDESCRIPTION: Configuration for specifying the upload protocol for ST 32F411EDISCOVERY board. This example sets the upload protocol to stlink, which is the default option for this board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/disco_f411ve.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:disco_f411ve]\nplatform = ststm32\nboard = disco_f411ve\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Configuring RAK811 LoRa Tracker Board in platformio.ini\nDESCRIPTION: Basic configuration for the RAK811 LoRa Tracker board in the PlatformIO project configuration file. Sets the platform to STM32 and specifies the board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/rak811_tracker_32.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:rak811_tracker_32]\nplatform = ststm32\nboard = rak811_tracker_32\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Protocol for Adafruit BLM Badge\nDESCRIPTION: Example of how to specify the upload protocol for the Adafruit BLM Badge board in PlatformIO. The board supports atmel-ice, blackmagic, jlink, and sam-ba protocols, with sam-ba as the default.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_blm_badge.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_blm_badge]\nplatform = atmelsam\nboard = adafruit_blm_badge\n\nupload_protocol = sam-ba\n```\n\n----------------------------------------\n\nTITLE: Customizing ETBoard settings in PlatformIO projectconf\nDESCRIPTION: This example demonstrates how to override default ETBoard settings in the PlatformIO project configuration. It shows how to change the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/etboard.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:etboard]\nplatform = espressif32\nboard = etboard\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring EspinalLab ATMegaZero ESP32-S2 Board in PlatformIO\nDESCRIPTION: Basic PlatformIO configuration for the EspinalLab ATMegaZero ESP32-S2 board. Specifies the board ID and platform to use in the project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/atmegazero_esp32s2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:atmegazero_esp32s2]\nplatform = espressif32\nboard = atmegazero_esp32s2\n```\n\n----------------------------------------\n\nTITLE: Customizing NXP mbed LPC1768 Board Parameters in PlatformIO\nDESCRIPTION: Advanced configuration for the NXP mbed LPC1768 board that overrides default settings like microcontroller model and CPU frequency using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nxplpc/lpc1768.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:lpc1768]\nplatform = nxplpc\nboard = lpc1768\n\n; change microcontroller\nboard_build.mcu = lpc1768\n\n; change MCU frequency\nboard_build.f_cpu = 96000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU Settings\nDESCRIPTION: PlatformIO configuration with custom microcontroller and frequency settings for the Electrosmith Daisy Petal SM board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/electrosmith_daisy_petal_sm.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:electrosmith_daisy_petal_sm]\nplatform = ststm32\nboard = electrosmith_daisy_petal_sm\n\n; change microcontroller\nboard_build.mcu = stm32h750ibk6\n\n; change MCU frequency\nboard_build.f_cpu = 400000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing IceZUM Alhambra FPGA Configuration in PlatformIO\nDESCRIPTION: Extended configuration that demonstrates how to override default settings for the IceZUM Alhambra FPGA board, including changing the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/lattice_ice40/icezum.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:icezum]\nplatform = lattice_ice40\nboard = icezum\n\n; change microcontroller\nboard_build.mcu = iCE40-HX1K-TQ144\n\n; change MCU frequency\nboard_build.f_cpu = 12000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing ATmega329 Configuration with Board Options in PlatformIO\nDESCRIPTION: Extended configuration for an ATmega329 project that demonstrates how to override default board settings such as microcontroller model and CPU frequency in the PlatformIO project configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/ATmega329.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:ATmega329]\nplatform = atmelavr\nboard = ATmega329\n\n; change microcontroller\nboard_build.mcu = atmega329\n\n; change MCU frequency\nboard_build.f_cpu = 16000000L\n```\n\n----------------------------------------\n\nTITLE: Customizing BlackPill F103C8 Hardware Settings in PlatformIO.ini\nDESCRIPTION: Advanced configuration showing how to override default board settings such as the microcontroller and CPU frequency in a PlatformIO project.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/blackpill_f103c8.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:blackpill_f103c8]\nplatform = ststm32\nboard = blackpill_f103c8\n\n; change microcontroller\nboard_build.mcu = stm32f103c8t6\n\n; change MCU frequency\nboard_build.f_cpu = 72000000L\n```\n\n----------------------------------------\n\nTITLE: Advanced Board Configuration with MCU Settings\nDESCRIPTION: Extended PlatformIO configuration demonstrating how to override default microcontroller and frequency settings for the SG-O AirMon board.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/sg-o_airMon.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:sg-o_airMon]\nplatform = espressif32\nboard = sg-o_airMon\n\n; change microcontroller\nboard_build.mcu = esp32\n\n; change MCU frequency\nboard_build.f_cpu = 240000000L\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic PlatformIO Environment for Adafruit Metro M0 Express\nDESCRIPTION: Basic configuration for setting up a PlatformIO environment for the Adafruit Metro M0 Express board. This snippet defines the platform as atmelsam and the board as adafruit_metro_m0.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_metro_m0.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_metro_m0]\nplatform = atmelsam\nboard = adafruit_metro_m0\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic PlatformIO Environment for nRF52840-MDK Board\nDESCRIPTION: Basic configuration for setting up a PlatformIO environment for the Makerdiary nRF52840-MDK board. This defines the platform as nordicnrf52 and specifies the board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/nordicnrf52/nrf52840_mdk.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:nrf52840_mdk]\nplatform = nordicnrf52\nboard = nrf52840_mdk\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic STC8H4K48TLCD Board in PlatformIO\nDESCRIPTION: This code snippet shows how to configure the Generic STC8H4K48TLCD board in a PlatformIO project's configuration file (platformio.ini). It sets the platform to intel_mcs51 and the board to STC8H4K48TLCD.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8H4K48TLCD.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8H4K48TLCD]\nplatform = intel_mcs51\nboard = STC8H4K48TLCD\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Framework in PlatformIO\nDESCRIPTION: Configuration setting that specifies the unit testing framework to be used in a PlatformIO project. The setting accepts a string value and defaults to 'unity' if not specified. Only one framework can be specified at a time.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/projectconf/sections/env/options/test/test_framework.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\ntest_framework = unity\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for STM32F410CB in PlatformIO\nDESCRIPTION: Configuration example demonstrating how to specify the upload protocol for the STM32F410CB board. This board supports multiple protocols with 'serial' as the default.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F410CB.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F410CB]\nplatform = ststm32\nboard = genericSTM32F410CB\n\nupload_protocol = serial\n```\n\n----------------------------------------\n\nTITLE: Configuring 3D Printer Controller Board in PlatformIO\nDESCRIPTION: Basic configuration for using the 3D Printer Controller board in a PlatformIO project. Sets the platform to STM32 and specifies the board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/armed_v1.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:armed_v1]\nplatform = ststm32\nboard = armed_v1\n```\n\n----------------------------------------\n\nTITLE: Customizing IAP15W205S Board Configuration\nDESCRIPTION: Advanced configuration for the IAP15W205S board with custom microcontroller and frequency settings. This example shows how to override default board settings in the platformio.ini file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/IAP15W205S.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:IAP15W205S]\nplatform = intel_mcs51\nboard = IAP15W205S\n\n; change microcontroller\nboard_build.mcu = iap15w205s\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration for Freescale Kinetis FRDM-K82F\nDESCRIPTION: Simple PlatformIO configuration for setting up a project using the Freescale Kinetis FRDM-K82F board. Defines the platform and board ID in the project's configuration file.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/freescalekinetis/frdm_k82f.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:frdm_k82f]\nplatform = freescalekinetis\nboard = frdm_k82f\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for MagicBit in PlatformIO INI File\nDESCRIPTION: This snippet shows how to set the upload protocol for the MagicBit board in the PlatformIO project configuration file. It sets the upload protocol to esptool.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/espressif32/magicbit.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:magicbit]\nplatform = espressif32\nboard = magicbit\n\nupload_protocol = esptool\n```\n\n----------------------------------------\n\nTITLE: Basic STM32F410R8 Board Configuration in PlatformIO\nDESCRIPTION: Basic configuration for setting up an STM32F410R8 board project in PlatformIO.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F410R8.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F410R8]\nplatform = ststm32\nboard = genericSTM32F410R8\n```\n\n----------------------------------------\n\nTITLE: Advanced STC8G2K60S4 Board Configuration with Custom Settings\nDESCRIPTION: Shows how to override default board settings by specifying custom microcontroller and frequency values in the PlatformIO configuration.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8G2K60S4.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8G2K60S4]\nplatform = intel_mcs51\nboard = STC8G2K60S4\n\n; change microcontroller\nboard_build.mcu = stc8g2k60s4\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Customizing Sanguino ATmega644P Board Settings in PlatformIO.ini\nDESCRIPTION: Extended configuration for the Sanguino ATmega644P board with custom microcontroller and frequency settings. Demonstrates how to override default board settings using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelavr/sanguino_atmega644p_8m.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:sanguino_atmega644p_8m]\nplatform = atmelavr\nboard = sanguino_atmega644p_8m\n\n; change microcontroller\nboard_build.mcu = atmega644p\n\n; change MCU frequency\nboard_build.f_cpu = 8000000L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for MXChip AZ3166\nDESCRIPTION: Configuration example showing how to specify the upload protocol for the Microsoft Azure IoT Development Kit. The board supports blackmagic, cmsis-dap, jlink, and stlink protocols, with stlink as the default.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/mxchip_az3166.rst#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[env:mxchip_az3166]\nplatform = ststm32\nboard = mxchip_az3166\n\nupload_protocol = stlink\n```\n\n----------------------------------------\n\nTITLE: Configuring PlatformIO for STM32F103C6 Board in platformio.ini\nDESCRIPTION: Basic configuration for the STM32F103C6 board in the project's platformio.ini file. This sets up the essential environment using the ststm32 platform.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/genericSTM32F103C6.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:genericSTM32F103C6]\nplatform = ststm32\nboard = genericSTM32F103C6\n```\n\n----------------------------------------\n\nTITLE: Customizing Generic STC8F2K16S4 Board Settings in PlatformIO\nDESCRIPTION: This snippet demonstrates how to override default settings for the Generic STC8F2K16S4 board in a PlatformIO project. It shows how to change the microcontroller and MCU frequency.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC8F2K16S4.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC8F2K16S4]\nplatform = intel_mcs51\nboard = STC8F2K16S4\n\n; change microcontroller\nboard_build.mcu = stc8f2k16s4\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Example Output of Platform Update Command\nDESCRIPTION: Sample output when running the 'pio platform update' command showing the status of various platforms and their components. The output shows platform names, versions, and update status for each component.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/core/userguide/platforms/cmd_update.rst#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> pio platform update\n\nPlatform atmelavr\n--------\nUpdating atmelavr @ 0.0.0:  [Up-to-date]\nUpdating framework-arduinoavr @ 1.10608.1:  [Up-to-date]\nUpdating tool-avrdude @ 1.60001.1:  [Up-to-date]\nUpdating toolchain-atmelavr @ 1.40801.0:    [Up-to-date]\nUpdating tool-scons @ 2.4.1:    [Up-to-date]\n\nPlatform espressif8266\n--------\nUpdating espressif @ 0.0.0:     [Up-to-date]\nUpdating tool-scons @ 2.4.1:    [Up-to-date]\nUpdating toolchain-xtensa @ 1.40802.0:  [Up-to-date]\nUpdating tool-esptool @ 1.409.0:    [Up-to-date]\nUpdating tool-mkspiffs @ 1.102.0:   [Up-to-date]\nUpdating framework-arduinoespressif8266 @ 1.20300.0:    [Up-to-date]\nUpdating sdk-esp8266 @ 1.10502.0:   [Up-to-date]\n\nPlatform teensy\n--------\nUpdating teensy @ 0.0.0:    [Up-to-date]\nUpdating framework-arduinoteensy @ 1.128.0:     [Up-to-date]\nUpdating tool-teensy @ 1.1.0:   [Up-to-date]\nUpdating framework-mbed @ 1.121.0:  [Up-to-date]\nUpdating tool-scons @ 2.4.1:    [Up-to-date]\nUpdating toolchain-atmelavr @ 1.40801.0:    [Up-to-date]\nUpdating toolchain-gccarmnoneeabi @ 1.40804.0:  [Up-to-date]\n\n...\n```\n\n----------------------------------------\n\nTITLE: Basic ThunderPack Board Configuration\nDESCRIPTION: Basic PlatformIO configuration for ThunderPack v1.1+ board using the STM32 platform\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/ststm32/thunder_pack_f411.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:thunder_pack_f411]\nplatform = ststm32\nboard = thunder_pack_f411\n```\n\n----------------------------------------\n\nTITLE: Configuring Adafruit Hallowing M4 Board in PlatformIO\nDESCRIPTION: This snippet shows how to configure the Adafruit Hallowing M4 board in a PlatformIO project's configuration file. It sets the platform and board ID.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_hallowing_m4.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_hallowing_m4]\nplatform = atmelsam\nboard = adafruit_hallowing_m4\n```\n\n----------------------------------------\n\nTITLE: Basic Board Configuration for PlatformIO\nDESCRIPTION: Basic configuration setup for MikroElektronika Clicker 2 board in platformio.ini file\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/microchippic32/clicker2.rst#2025-04-10_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[env:clicker2]\nplatform = microchippic32\nboard = clicker2\n```\n\n----------------------------------------\n\nTITLE: Overriding Default STC15F102W Board Settings in PlatformIO\nDESCRIPTION: This code snippet demonstrates how to override default settings for the Generic STC15F102W board in a PlatformIO project. It shows how to change the microcontroller and MCU frequency using board_build options.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/intel_mcs51/STC15F102W.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:STC15F102W]\nplatform = intel_mcs51\nboard = STC15F102W\n\n; change microcontroller\nboard_build.mcu = stc15f102w\n\n; change MCU frequency\nboard_build.f_cpu = 11059200L\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Protocol for Adafruit Hallowing M0 in PlatformIO INI\nDESCRIPTION: This snippet demonstrates how to set the upload protocol for the Adafruit Hallowing M0 board in the PlatformIO project configuration file. The default protocol is 'sam-ba'.\nSOURCE: https://github.com/platformio/platformio-docs/blob/develop/boards/atmelsam/adafruit_hallowing.rst#2025-04-10_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[env:adafruit_hallowing]\nplatform = atmelsam\nboard = adafruit_hallowing\n\nupload_protocol = sam-ba\n```"
  }
]