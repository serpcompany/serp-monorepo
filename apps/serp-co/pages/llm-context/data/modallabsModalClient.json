[
  {
    "owner": "modal-labs",
    "repo": "modal-client",
    "content": "TITLE: Batched Function and Class Method Decorator Python\nDESCRIPTION: This snippet demonstrates the usage of the `@modal.batched` decorator for automatically batching invocations of functions and class methods. The batching behavior is configured with `max_batch_size` and `wait_ms` parameters.  It shows how to use both batched function and a batched class method, and how to call a batched function.\nSOURCE: https://github.com/modal-labs/modal-client/blob/main/CHANGELOG.md#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n@app.function()\n@modal.batched(max_batch_size=4, wait_ms=1000)\nasync def batched_multiply(xs: list[int], ys: list[int]) -> list[int]:\n    return [x * y for x, y in zip(xs, xs)]\n\n@app.cls()\nclass BatchedClass():\n    @modal.batched(max_batch_size=4, wait_ms=1000)\n    async def batched_multiply(xs: list[int], ys: list[int]) -> list[int]:\n        return [x * y for x, y in zip(xs, xs)]\n```\n\nLANGUAGE: python\nCODE:\n```\nawait batched_multiply.remote.aio(2, 3)\n```\n\n----------------------------------------\n\nTITLE: Defining GPU Workloads in Modal with Python\nDESCRIPTION: This snippet illustrates how to define a function that uses an Nvidia L40S GPU in Modal. It decorates the `my_gpu_fn` function with `@app.function(gpu=\"L40S\")`, specifying the desired GPU type. The `app` object is assumed to be a pre-existing `modal.App` instance.  The function definition is intentionally left empty (ellipsis) for brevity.\nSOURCE: https://github.com/modal-labs/modal-client/blob/main/CHANGELOG.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@app.function(gpu=\"L40S\")\ndef my_gpu_fn():\n    ...\n```\n\n----------------------------------------\n\nTITLE: Dataclass-style Class Parametrization Python\nDESCRIPTION: This snippet illustrates the new dataclass-style syntax for class parametrization in Modal. It demonstrates how to define a class with parameters using type hints and `modal.parameter()`. It enforces types on the parameters and supports web endpoint parametrization through query parameters.\nSOURCE: https://github.com/modal-labs/modal-client/blob/main/CHANGELOG.md#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n@app.cls()\nclass MyCls:\n    param_a: str = modal.parameter()\n\nMyCls(param_a=\"hello\")  # synthesized constructor\n```\n\n----------------------------------------\n\nTITLE: Deploying Apps Programmatically in Python\nDESCRIPTION: This snippet demonstrates how to deploy Modal Apps programmatically using the `app.deploy()` method. It shows the basic structure of defining an app and then deploying it. It depends on the `modal` library.\nSOURCE: https://github.com/modal-labs/modal-client/blob/main/CHANGELOG.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\napp = modal.App(\"programmatic-deploy\")\n...\napp.deploy()\n```\n\n----------------------------------------\n\nTITLE: Secret from_dotenv Usage\nDESCRIPTION: Demonstrates how to use `Secret.from_dotenv` with an optional filename to load secrets from a specific .env file within a Modal function.\nSOURCE: https://github.com/modal-labs/modal-client/blob/main/CHANGELOG.md#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n@app.function(secrets=[modal.Secret.from_dotenv(filename=\".env-dev\")])\ndef run():\n    ...\n\n```\n\n----------------------------------------\n\nTITLE: Variable-Length Arguments in Modal Functions\nDESCRIPTION: Demonstrates how to use variable-length arguments in Modal functions to bypass Modal's default CLI parsing, enabling custom argument parsing with libraries like `argparse`. This allows users to invoke Modal functions with custom arguments.\nSOURCE: https://github.com/modal-labs/modal-client/blob/main/CHANGELOG.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport argparse\n\n@app.function()\ndef train(*arglist):\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--foo\", type=int)\n    parser.add_argument(\"--bar\", type=str)\n    args = parser.parse_args(args = arglist)\n```\n\n----------------------------------------\n\nTITLE: Sandbox Executing Command with Output Streaming Python\nDESCRIPTION: This snippet shows how to use the `exec()` method to execute a command inside a sandbox container and stream the output. It creates a sandbox, executes a bash command that prints lines to stdout, and then iterates over the `stdout` stream to print each line. This involves using the `ContainerProcess` handle to access the output stream.\nSOURCE: https://github.com/modal-labs/modal-client/blob/main/CHANGELOG.md#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nsandbox = modal.Sandbox.create(\"sleep\", \"infinity\")\n\nprocess = sandbox.exec(\"bash\", \"-c\", \"for i in $(seq 1 10); do echo foo $i; sleep 0.5; done\")\n\nfor line in process.stdout:\n    print(line)\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies with Version Constraints\nDESCRIPTION: Requirements file listing required Python packages and their version specifications for the modal-client project. Includes async networking libraries, HTTP/2 implementation packages, and protocol buffer support.\nSOURCE: https://github.com/modal-labs/modal-client/blob/main/modal/requirements/2024.10.txt#2025-04-22_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\naiohappyeyeballs==2.4.3\naiohttp==3.10.8\naiosignal==1.3.1\nasync-timeout==4.0.3 ; python_version < \"3.11\"\nattrs==24.2.0\ncertifi==2024.8.30\nfrozenlist==1.4.1\ngrpclib==0.4.7\nh2==4.1.0\nhpack==4.0.0\nhyperframe==6.0.1\nidna==3.10\nmultidict==6.1.0\nprotobuf>=3.20,<6\ntyping_extensions==4.12.2\nyarl==1.13.1\n```\n\n----------------------------------------\n\nTITLE: Defining Modal Client Python Dependencies\nDESCRIPTION: Specifies exact and minimum version requirements for Python packages needed by the Modal client. Includes core dependencies like aiohttp for async HTTP, FastAPI for API functionality, protobuf for serialization, and various utility packages.\nSOURCE: https://github.com/modal-labs/modal-client/blob/main/modal/requirements/2023.12.312.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\naiohttp==3.9.1\naiostream==0.4.4\nasgiref==3.5.2\ncertifi>=2022.12.07\ncloudpickle==2.2.0\nfastapi==0.88.0\nfastprogress==1.0.0\ngrpclib==0.4.7\nimportlib_metadata==4.8.1\nipython>=7.34.0\nprotobuf>=3.19.0\npython-multipart>=0.0.5\nrich==12.3.0\ntblib==1.7.0\ntoml==0.10.2\ntyper==0.6.1\ntypes-certifi==2021.10.8.3\ntypes-toml==0.10.4\ntypeguard>=3.0.0\n```\n\n----------------------------------------\n\nTITLE: Sandbox File I/O operations in Modal with Python\nDESCRIPTION: This snippet demonstrates file I/O operations within a Modal Sandbox using the `open()` method. It looks up a Modal App, creates a Sandbox, writes to a file, and then reads from the same file. It relies on the `modal` library and specifically the `Sandbox` and `App` classes. Requires a Modal App to be defined or looked up.\nSOURCE: https://github.com/modal-labs/modal-client/blob/main/CHANGELOG.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\napp = modal.App.lookup(\"sandbox-fs\", create_if_missing=True)\nsb = modal.Sandbox.create(app=app)\n\nwith sb.open(\"test.txt\", \"w\") as f:\n  f.write(\"Hello World\\n\")\n\nf = sb.open(\"test.txt\", \"rb\")\nprint(f.read())\n```\n\n----------------------------------------\n\nTITLE: Sandbox File System Operations in Modal with Python\nDESCRIPTION: This code snippet demonstrates file system operations within a Modal Sandbox. It looks up a Modal App, creates a Sandbox, creates a directory, writes data to a file, and then lists the contents of the directory. It relies on the `modal` library and specifically the `Sandbox` and `App` classes. Requires a Modal App to be defined or looked up.\nSOURCE: https://github.com/modal-labs/modal-client/blob/main/CHANGELOG.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\napp = modal.App.lookup(\"sandbox-fs\", create_if_missing=True)\nsb = modal.Sandbox.create(app=app)\nsb.mkdir(\"/foo\")\nwith sb.open(\"/foo/bar.txt\", \"w\") as f:\n    f.write(\"baz\")\nprint(sb.ls(\"/foo\"))\n```\n\n----------------------------------------\n\nTITLE: Sandbox Creation with App Lookup Python\nDESCRIPTION: This snippet demonstrates how to create a Sandbox and associate it with an App by looking up the App by name. It uses the `modal.App.lookup` function to retrieve the App, creating it if it doesn't exist, and then passes it to `modal.Sandbox.create`.\nSOURCE: https://github.com/modal-labs/modal-client/blob/main/CHANGELOG.md#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\napp = modal.App.lookup('my-app', create_if_missing=True)\nmodal.Sandbox.create('echo', 'hi', app=app)\n```\n\n----------------------------------------\n\nTITLE: File Watching in Modal Sandbox with Python\nDESCRIPTION: This snippet demonstrates how to use the file watching API in a Modal Sandbox. It creates a sandbox, watches a directory for events, and prints the paths of modified files.  It relies on the `modal` library and specifically the `FileWatchEventType` enum from `modal.file_io`.  Requires a Modal App to be defined or looked up.\nSOURCE: https://github.com/modal-labs/modal-client/blob/main/CHANGELOG.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom modal.file_io import FileWatchEventType\n\napp = modal.App.lookup(\"file-watch\", create_if_missing=True)\nsb = modal.Sandbox.create(app=app)\nevents = sb.watch(\"/foo\")\nfor event in events:\n    if event.type == FileWatchEventType.Modify:\n        print(event.paths)\n```\n\n----------------------------------------\n\nTITLE: Adding Local Directory to Image with Ignore Patterns in Modal\nDESCRIPTION: This set of snippets demonstrates how to use the `ignore` parameter with `Image.add_local_dir` in Modal to exclude files when adding a local directory to an image. It showcases using `FilePatternMatcher` with include and exclude patterns, inverting a `FilePatternMatcher`, providing a list of string patterns, and using a custom callable function. Requires the `FilePatternMatcher` class from `modal` and an existing `img` object representing a Modal Image.\nSOURCE: https://github.com/modal-labs/modal-client/blob/main/CHANGELOG.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimg.add_local_dir(\n  \"./local-dir\", \n  remote_path=\"/remote-path\", \n  ignore=FilePatternMatcher(\"**/*\", \"!*.txt\") # ignore everything except files ending with .txt\n)\n```\n\nLANGUAGE: python\nCODE:\n```\nimg.add_local_dir(\n  ...,\n  ignore=~FilePatternMatcher(\"**/*.py\") # can be inverted for when inclusion filters are simpler to write\n)\n```\n\nLANGUAGE: python\nCODE:\n```\nimg.add_local_dir(\n  ...,\n  ignore=[\"**/*.py\", \"!module/*.py\"] # ignore all .py files except those in the module directory\n)\n```\n\nLANGUAGE: python\nCODE:\n```\nimg.add_local_dir(\n  ...,\n  ignore=lambda fp: fp.is_relative_to(\"somewhere\") # use a custom callable\n)\n```\n\n----------------------------------------\n\nTITLE: Interactive Mode with modal.interact()\nDESCRIPTION: Shows how to use `modal.interact()` to enable interactive mode in Modal functions, allowing remote code to connect to the user's local terminal. Also mentions automatic breakpoint interaction.\nSOURCE: https://github.com/modal-labs/modal-client/blob/main/CHANGELOG.md#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n@stub.function()\ndef my_fn(x):\n    modal.interact()\n\n    x = input()\n    print(f\"Your number is {x}\")\n\n```\n\nLANGUAGE: python\nCODE:\n```\n@stub.function()\ndef my_fn(x):\n    modal.interact()\n\n    from IPython import embed\n    embed()\n\n```\n\nLANGUAGE: python\nCODE:\n```\n@stub.function()\ndef my_fn(x):\n    breakpoint()\n\n```\n\n----------------------------------------\n\nTITLE: Installing Modal Python Library with pip\nDESCRIPTION: Command to install the Modal Python library using pip package manager. The library provides serverless cloud compute access and requires Python 3.9 - 3.13.\nSOURCE: https://github.com/modal-labs/modal-client/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install modal\n```\n\n----------------------------------------\n\nTITLE: Using Cls.with_options on Unhydrated Cls\nDESCRIPTION: This snippet shows how to use `Cls.with_options` on an unhydrated `Cls` object, allowing to modify options like `gpu` before the class is fully initialized. This is useful for dynamically configuring class instances. Depends on the `modal` library.\nSOURCE: https://github.com/modal-labs/modal-client/blob/main/CHANGELOG.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nModelWithGPU = modal.Cls.from_name(\"my-app\", \"Model\").with_options(gpu=\"H100\")\n```\n\n----------------------------------------\n\nTITLE: Sandbox LogsReader Asynchronous Iteration\nDESCRIPTION: Shows how to use `async for` to stream data from a Sandbox's `stdout/stderr` in Modal, demonstrating asynchronous iteration over the `LogsReader`.\nSOURCE: https://github.com/modal-labs/modal-client/blob/main/CHANGELOG.md#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n@stub.function()\nasync def my_fn():\n    sandbox = stub.spawn_sandbox(\n      \"bash\", \n      \"-c\", \n      \"while true; do echo foo; sleep 1; done\"\n    )\n    async for message in sandbox.stdout:\n        print(f\"Message: {message}\")\n\n```\n\n----------------------------------------\n\nTITLE: Sandbox stdin StreamWriter Usage\nDESCRIPTION: Demonstrates writing to a Sandbox's `stdin` using `StreamWriter` in Modal, including writing data and sending an end-of-file signal.\nSOURCE: https://github.com/modal-labs/modal-client/blob/main/CHANGELOG.md#_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n@stub.function()\ndef my_fn():\n    sandbox = stub.spawn_sandbox(\n        \"bash\",\n        \"-c\",\n        \"while read line; do echo $line; done\",\n    )\n    sandbox.stdin.write(b\"foo\\\\n\")\n    sandbox.stdin.write(b\"bar\\\\n\")\n    sandbox.stdin.write_eof()\n    sandbox.stdin.drain()\n    sandbox.wait()\n\n```\n\n----------------------------------------\n\nTITLE: Image.run_function with Args and Kwargs\nDESCRIPTION: Illustrates how to use `Image.run_function` to run a function during image building, passing both positional and keyword arguments to the function.\nSOURCE: https://github.com/modal-labs/modal-client/blob/main/CHANGELOG.md#_snippet_22\n\nLANGUAGE: python\nCODE:\n```\ndef my_build_function(name, size, *, variant=None):\n    print(f\"Building {name} {size} {variant}\")\n\n\nimage = modal.Image.debian_slim().run_function(\n    my_build_function, args=(\"foo\", 10), kwargs={\"variant\": \"bar\"}\n)\n\n```\n\n----------------------------------------\n\nTITLE: Defining Modal Class with Bytes Parameter\nDESCRIPTION: This code demonstrates defining a Modal class with a `bytes` type parameter using `modal.parameter`. It includes a default value and shows how to use it within a method.  Requires the `modal` library and utilizes `@app.cls()` and `@app.local_entrypoint()` decorators.\nSOURCE: https://github.com/modal-labs/modal-client/blob/main/CHANGELOG.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport typing\nimport modal\n\napp = modal.App()\n\n\n@app.cls()\nclass Foo:\n    a: bytes = modal.parameter(default=b\"hello\")\n\n    @modal.method()\n    def bar(self):\n        return f\"hello {self.a}\"\n\n\n@app.local_entrypoint()\ndef main():\n    foo = Foo(a=b\"world\")\n    foo.bar.remote()\n```\n\n----------------------------------------\n\nTITLE: Setting up Modal account via command line\nDESCRIPTION: Command to create a new Modal account or link an existing one through the command line interface. This is run after installing the library to configure your Modal credentials.\nSOURCE: https://github.com/modal-labs/modal-client/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m modal setup\n```\n\n----------------------------------------\n\nTITLE: Installing Modal Client Dependencies with Version Constraints\nDESCRIPTION: Requirements file that specifies exact versions and version constraints for Python packages required by the Modal client. Includes conditional dependencies based on Python version and essential packages for networking, serialization, and development.\nSOURCE: https://github.com/modal-labs/modal-client/blob/main/modal/requirements/2023.12.txt#2025-04-22_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\naiohttp==3.8.3\naiostream==0.4.4\nasgiref==3.5.2\ncertifi>=2022.12.07\ncloudpickle==2.0.0;python_version<'3.11'\ncloudpickle==2.2.0;python_version>='3.11'\nddtrace==1.5.2;python_version<'3.11'\nfastapi==0.88.0\nfastprogress==1.0.0\ngrpclib==0.4.3\nimportlib_metadata==4.8.1\nipython>=7.34.0\nprotobuf>=3.19.0\npython-multipart>=0.0.5\nrich==12.3.0\ntblib==1.7.0\ntoml==0.10.2\ntyper==0.6.1\ntypes-certifi==2021.10.8.3\ntypes-toml==0.10.4\ntypeguard>=3.0.0\n```\n\n----------------------------------------\n\nTITLE: ASGI Lifespan Protocol Implementation Python\nDESCRIPTION: This snippet showcases the implementation of the ASGI lifespan protocol within a Modal function. It defines a lifespan function that is passed to FastAPI. The lifespan function can be used to execute code during application startup and shutdown, as demonstrated in this example with the \"Starting\" and \"Shutting down\" prints.\nSOURCE: https://github.com/modal-labs/modal-client/blob/main/CHANGELOG.md#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n@app.function()\n@modal.asgi_app()\ndef func():\n    from fastapi import FastAPI, Request\n\n    def lifespan(wapp: FastAPI):\n        print(\"Starting\")\n        yield {\"foo\": \"bar\"}\n        print(\"Shutting down\")\n\n    web_app = FastAPI(lifespan=lifespan)\n\n    @web_app.get(\"/\")\n    def get_state(request: Request):\n        return {\"message\": f\"This is the state: {request.state.foo}\"}\n\n    return web_app\n```\n\n----------------------------------------\n\nTITLE: Using IPython Magic for Modal Functions\nDESCRIPTION: This snippet shows how to load the `modal.experimental.ipython` module in a Jupyter notebook and use the `%modal` line magic to import and use functions from a Modal app. This requires the `modal` library and `ipython` to be installed.\nSOURCE: https://github.com/modal-labs/modal-client/blob/main/CHANGELOG.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n%modal from main/my-app import my_function, MyClass as Foo\n\n# Now you can use my_function() and Foo in your notebook.\nmy_function.remote()\nFoo().my_method.remote()\n```\n\n----------------------------------------\n\nTITLE: Dict and Queue Delete API Usage\nDESCRIPTION: Illustrates how to delete named storage objects (Dict and Queue) using the new `delete` API methods in Modal.\nSOURCE: https://github.com/modal-labs/modal-client/blob/main/CHANGELOG.md#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nimport modal\nmodal.Queue.delete(\"my-job-queue\")\n\n```\n\n----------------------------------------\n\nTITLE: Modal Run CLI Example\nDESCRIPTION: Illustrates the change in syntax for the `modal run` command, introducing the `-m` flag to specify Python modules instead of file paths. It shows the old and new ways to execute Modal apps or functions.\nSOURCE: https://github.com/modal-labs/modal-client/blob/main/CHANGELOG.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nmodal run my_package/modal_main.py\nmodal run my_package.modal_main\n```\n\n----------------------------------------\n\nTITLE: Modal Run CLI Example with -m flag\nDESCRIPTION: Illustrates the change in syntax for the `modal run` command, introducing the `-m` flag to specify Python modules instead of file paths. It shows the old and new ways to execute Modal apps or functions.\nSOURCE: https://github.com/modal-labs/modal-client/blob/main/CHANGELOG.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nmodal run my_package/modal_main.py\nmodal run -m my_package.modal_main\n```\n\n----------------------------------------\n\nTITLE: Explaining Modal Image Builder Configuration in Markdown\nDESCRIPTION: This snippet describes the structure and purpose of the Modal Image builder configuration directory. It explains the contents of base-images.json, the nature of versioned requirements files, and the approach to dependency management for Modal containers.\nSOURCE: https://github.com/modal-labs/modal-client/blob/main/modal/requirements/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Modal Image builder configuration\n\nThis directory contains `modal.Image` specifications that vary across\n\"image builder\" versions.\n\nThe `base-images.json` file specifies the versions used for Modal's\nvarious `Image` constructor methods.\n\nThe versioned requirements files enumerate the dependencies needed by\nthe Modal client library when it is running inside a Modal container.\n\nThe container requirements are a subset of the dependencies required by the\nclient for local operation (i.e., to run or deploy Modal apps). Additionally,\nwe aim to pin specific versions rather than allowing a range as we do for the\ninstallation dependencies.\n\nFrom version `2024.04`, the requirements specify the entire dependency tree,\nand not just the first-order dependencies.\n\nNote that for `2023.12`, there is a separate requirements file that is used for\nPython 3.12.\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies with Version Constraints and Git Source\nDESCRIPTION: This requirements specification lists four dependencies: banana with approximate version 1.2.3, apple without version constraint, blueberry with version 0.0.0 for Python 3.7+, and synchronicity installed directly from a GitHub repository.\nSOURCE: https://github.com/modal-labs/modal-client/blob/main/test/supports/test-requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# some comment\nbanana~=1.2.3\napple # another comment\nblueberry~=0.0.0; python_version >= '3.7'\ngit+https://github.com/modal-com/synchronicity.git#egg=synchronicity\n\n\n# more\n# comments\n\n```\n\n----------------------------------------\n\nTITLE: Usage Example for funky Function\nDESCRIPTION: Demonstrates how to import the foo module and call the funky function. The function outputs some result when called.\nSOURCE: https://github.com/modal-labs/modal-client/blob/main/test/mdmd_data/foo-expected.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport foo\nfoo.funky()  # outputs something\n```\n\n----------------------------------------\n\nTITLE: Defining Foo Class in Python\nDESCRIPTION: Defines a Foo class that inherits from object. This class provides foo functionality.\nSOURCE: https://github.com/modal-labs/modal-client/blob/main/test/mdmd_data/foo-expected.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Foo(object)\n```\n\n----------------------------------------\n\nTITLE: Implementing bar Method in Foo Class\nDESCRIPTION: Defines the bar method for the Foo class. This method is part of the Foo class functionality.\nSOURCE: https://github.com/modal-labs/modal-client/blob/main/test/mdmd_data/foo-expected.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef bar(self):\n```\n\n----------------------------------------\n\nTITLE: Implementing funky Function\nDESCRIPTION: Defines the funky function that funks the baz. This is a standalone function in the foo module.\nSOURCE: https://github.com/modal-labs/modal-client/blob/main/test/mdmd_data/foo-expected.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef funky():\n```"
  }
]