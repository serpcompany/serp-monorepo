[
  {
    "owner": "luisfun",
    "repo": "discord-hono-docs",
    "content": "TITLE: Registering Commands with DiscordHono\nDESCRIPTION: This snippet shows how to register multiple commands with a DiscordHono app. It creates command objects using `new Command()` and then uses `.command()` to register each command with a corresponding handler. The handler function receives a context object `c` and returns a response using `c.res()`. The first argument of `Command()` must match the first argument of `.command()`.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/interactions/discord-hono.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst commands = [\n  new Command('ping', 'response Pong'),\n  new Command('image', 'response Image'),\n]\nconst app = new DiscordHono()\n  .command('ping', c => c.res('Pong!!'))\n  .command('image', c => c.res('Image!!'))\n```\n\n----------------------------------------\n\nTITLE: Implementing Autocomplete with DiscordHono\nDESCRIPTION: This snippet illustrates how to implement autocomplete functionality for command options using DiscordHono. It defines a command with an option that has autocomplete enabled using `.autocomplete()`.  The `.autocomplete()` function takes the command name and two handlers: one for generating autocomplete choices and another for executing the command. Add `.autocomplete()` to `Option()` of the command. The first argument of `Command()` must match the first argument of `.autocomplete()`.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/interactions/discord-hono.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst commands = [\n  new Command('hello', 'command').options(\n    new Option('option', 'selector').autocomplete().required(),\n  ),\n]\nconst app = new DiscordHono().autocomplete(\n  'hello',\n  c =>\n    c.resAutocomplete(\n      new Autocomplete(c.focused?.value).choices(\n        { name: 'world', value: 'world!!!' },\n        { name: 'hi', value: 'hi!' },\n      ),\n    ),\n  c => c.res(c.var.option),\n)\n```\n\n----------------------------------------\n\nTITLE: Registering Discord Commands Globally\nDESCRIPTION: This snippet demonstrates how to register Discord commands globally using the `register` function from the `discord-hono` library. It creates an array of `Command` objects, each with a name, description, and optional `Option` objects. The `register` function is called with the commands array, the application ID, and the Discord token.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/helpers/register.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// register.ts\nimport { Command, Option, register } from 'discord-hono'\n\nconst commands = [\n  new Command('ping', 'response pong'),\n  new Command('image', 'response image file').options(\n    new Option('text', 'with text').required(),\n  ),\n]\n\nregister(\n  commands,\n  process.env.DISCORD_APPLICATION_ID,\n  process.env.DISCORD_TOKEN,\n  //process.env.DISCORD_TEST_GUILD_ID,\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Autocomplete in DiscordHono (Typescript)\nDESCRIPTION: This snippet demonstrates how to implement autocomplete functionality for command options in a DiscordHono app using the `.autocomplete()` method. It defines a command 'hello' with an autocompleted option.  The first handler in `.autocomplete()` generates autocomplete choices, and the second handler executes the command with the selected option. The command name used in `.autocomplete()` should match `Command()`'s first argument.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/interactions/discord-hono.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst commands = [\n  new Command('hello', 'command').options(\n    new Option('option', 'selector').autocomplete().required(),\n  ),\n]\nconst app = new DiscordHono().autocomplete(\n  'hello',\n  c =>\n    c.resAutocomplete(\n      new Autocomplete(c.focused?.value).choices(\n        { name: 'world', value: 'world!!!' },\n        { name: 'hi', value: 'hi!' },\n      ),\n    ),\n  c => c.res(c.var.option),\n)\n```\n\n----------------------------------------\n\nTITLE: Handling Component Interactions with DiscordHono\nDESCRIPTION: This snippet demonstrates how to handle component interactions, such as button clicks, using DiscordHono. It creates a command that sends a message with buttons using `Components` and `Button` classes.  It then registers handlers for each button click using `.component()`. The first argument of the component element `Button()` must match the first argument of `.component()`.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/interactions/discord-hono.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new DiscordHono()\n  .command('components', c =>\n    c.res({\n      content: 'No button clicked yet',\n      components: new Components().row(\n        new Button('button-1', 'Button'),\n        new Button('button-2', 'Second'),\n      ),\n    }),\n  )\n  .component('button-1', c => c.resUpdate('Button clicked'))\n  .component('button-2', c => c.resUpdate('Second clicked'))\n```\n\n----------------------------------------\n\nTITLE: Responding to Commands with .res() (TypeScript)\nDESCRIPTION: This snippet demonstrates how to respond to Discord commands using the `.res()` method. It shows how to send both a simple text response and a response with a JSON payload containing content. Requires 'discord-hono'.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/interactions/context.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new DiscordHono()\n  .command('ping', c => c.res('Pong!!'))\n  .command('hello', c => c.res({ content: 'World!!' }))\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple TextInput Rows to Modal - Typescript\nDESCRIPTION: This snippet illustrates how to add multiple rows of text inputs to a modal using the `row()` method. It creates a modal and then chains multiple calls to `.row()` each with a `TextInput` instance. This example showcases how to create a modal form with multiple input fields.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/builders/modal.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst modal = new Modal('unique-id', 'Modal Title')\n  .row(new TextInput('text-1', 'Label'))\n  .row(new TextInput('text-2', 'MultiInput', 'Multi'))\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Rows of Buttons in DiscordHono\nDESCRIPTION: This example showcases how to use the `.row()` method to create multiple rows of buttons within a DiscordHono component. Each `.row()` call adds a new row with the specified buttons, which will be displayed in the Discord message.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/builders/components.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst components = new Components()\n  .row(new Button('button-1', '1'), new Button('button-2', '22'))\n  .row(new Button('button-3', '333'), new Button('button-4', '4444'))\n```\n\n----------------------------------------\n\nTITLE: Deferring Command Responses with .resDefer() (TypeScript)\nDESCRIPTION: This example shows how to defer a command response using `.resDefer()`. This is useful for time-consuming tasks that might exceed the 3-second interaction timeout.  The `.followup()` method is used to send the actual response after the deferred acknowledgement. Requires 'discord-hono'.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/interactions/context.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new DiscordHono().command('ping', c =>\n  c.resDefer(async c => await c.followup('Followup Text')),\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Message Flags (Ephemeral) (TypeScript)\nDESCRIPTION: This snippet demonstrates setting the `ephemeral` flag for a message. This makes the message visible only to the user who initiated the interaction. Requires 'discord-hono'.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/interactions/context.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new DiscordHono()\napp.command('ping', c => c.ephemeral().res('Pong!!'))\n```\n\n----------------------------------------\n\nTITLE: Sending Follow-up Messages with .followup() (TypeScript)\nDESCRIPTION: This snippet demonstrates how to send follow-up messages after deferring a response using `.followup()`. This is used to send the actual response after acknowledging the interaction with `.resDefer()`. The first argument can be text or data, and the second can be files. Requires 'discord-hono'.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/interactions/context.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new DiscordHono().command('ping', c =>\n  c.resDefer(\n    async c =>\n      await c.followup('Followup Text or Data', {\n        blob: Blob,\n        name: 'image-blob.png',\n      }),\n  ),\n)\n```\n\n----------------------------------------\n\nTITLE: Customizing Select Menus with Methods in DiscordHono\nDESCRIPTION: This snippet demonstrates how to customize select menu elements using methods such as `.custom_id()`, `.options()`, `.channel_types()`, `.placeholder()`, `.default_values()`, `.min_values()`, `.max_values()`, and `.disabled()` in DiscordHono.  The availability of certain methods depends on the select type. The `custom_id` combined with `unique-id` is limited to 99 characters.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/builders/components.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst components = new Components().row(\n  new Select('unique-id')\n    .custom_id()\n    .options() // required: String\n    .channel_types() // Channel\n    .placeholder()\n    .default_values() // User, Role, Mentionable, Channel\n    .min_values()\n    .max_values()\n    .disabled(),\n)\n```\n\n----------------------------------------\n\nTITLE: Select Method Chaining in Discord Hono (TS)\nDESCRIPTION: This snippet demonstrates method chaining for configuring a Select element in Discord Hono. It uses methods like .custom_id(), .options(), .channel_types(), .placeholder(), .default_values(), .min_values(), .max_values(), and .disabled() to modify the select element's properties. Some methods are type-dependent. The .custom_id() method has a length limit of 99 characters including the unique ID.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/builders/components.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst components = new Components().row(\n  new Select('unique-id')\n    .custom_id()\n    .options() // required: String\n    .channel_types() // Channel\n    .placeholder()\n    .default_values() // User, Role, Mentionable, Channel\n    .min_values()\n    .max_values()\n    .disabled(),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Modal with TextInput - Typescript\nDESCRIPTION: This snippet demonstrates how to create a basic modal with a single text input using the `Modal` and `TextInput` classes from the `discord-hono` library. It initializes a new modal with a unique ID and title, and then adds a text input field to the modal using the `row()` method. The text input is configured with a custom ID and label.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/builders/modal.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Modal, TextInput } from 'discord-hono'\n\nconst modal = new Modal('unique-id', 'Title').row(\n  new TextInput('custom_id', 'Label'),\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Components and Buttons in DiscordHono\nDESCRIPTION: This snippet demonstrates how to initialize DiscordHono, define a command, and include components such as buttons within the response. It creates a command named 'component' that, when triggered, responds with a message containing a row of two buttons.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/builders/components.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DiscordHono, Components, Button } from 'discord-hono'\n\nconst app = new DiscordHono().command('component', c =>\n  c.res({\n    content: 'components',\n    components: new Components().row(\n      new Button('button-1', 'button'),\n      new Button('button-2', 'second'),\n    ),\n  }),\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a Command with Options and Components in DiscordHono (TypeScript)\nDESCRIPTION: This snippet defines a more complex 'help' command using `factory.command` in DiscordHono. It includes an option ('text') and a component (a button). The command responds with the provided text and a button that links to the DiscordHono documentation and a delete button.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/helpers/create-factory.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// src/handlers/help.ts\nimport { Command, Option, Components, Button } from 'discord-hono'\nimport { factory } from '../init.js'\n\ntype Var = { text?: string }\n\nexport const command_help = factory.command<Var>(\n  new Command('help', 'response help').options(new Option('text', 'with text')),\n  c =>\n    c.res({\n      content: `text: ${c.var.text}`,\n      components: new Components().row(\n        new Button('https://discord-hono.luis.fun', ['📑', 'Docs'], 'Link'),\n        component_delete.component,\n      ),\n    }),\n)\n\nexport const component_delete = factory.component(\n  new Button('delete', ['🗑️', 'Delete'], 'Secondary'),\n  c => c.resDeferUpdate(c.followupDelete),\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring TextInput Methods - Typescript\nDESCRIPTION: This snippet showcases how to use methods such as `min_length()`, `max_length()`, `required()`, `value()`, and `placeholder()` to configure a `TextInput` instance. These methods allow for setting constraints and default values to improve user input. Consult Discord's official documentation for details.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/builders/modal.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst modal = new Modal('unique-id', 'Modal Title').row(\n  new TextInput('custom_id', 'Label')\n    .min_length()\n    .max_length()\n    .required()\n    .value()\n    .placeholder(),\n)\n```\n\n----------------------------------------\n\nTITLE: Command Option Method Chaining - DiscordHono (TS)\nDESCRIPTION: This snippet demonstrates method chaining available in the `Option` class for configuring various properties of an option. It shows how to set name localizations, description localizations, required status, choices, channel types, min/max values, min/max lengths, and autocomplete for a command option using DiscordHono.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/builders/command.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst commands = [\n  new Command('ping', 'response pong').options(\n    new Option('name', 'description')\n      .name_localizations()\n      .description_localizations()\n      .required() // .required(true) = .required()\n      .choices(\n        { name: 'choice 1', value: 'string 1' },\n        { name: 'choice 2', value: 'string 2' },\n      ) // STRING, INTEGER, NUMBER\n      .channel_types() // CHANNEL\n      .min_value() // INTEGER, NUMBER\n      .max_value() // INTEGER, NUMBER\n      .min_length() // STRING\n      .max_length() // STRING\n      .autocomplete(), // STRING, INTEGER, NUMBER\n  ),\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Option Properties with Methods in Discord Hono (TypeScript)\nDESCRIPTION: Illustrates how to configure option properties such as name localizations, description localizations, required status, choices, channel types, min/max values, min/max length, and autocompletion using methods on the `Option` object.  Not all fields (methods) are applicable for every option type.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/builders/command.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst commands = [\n  new Command('ping', 'pong を返答').options(\n    new Option('name', 'description')\n      .name_localizations()\n      .description_localizations()\n      .required() // .required(true) = .required()\n      .choices(\n        { name: '選択肢1', value: 'string 1' },\n        { name: '選択肢2', value: 'string 2' },\n      ) // STRING, INTEGER, NUMBER\n      .channel_types() // CHANNEL\n      .min_value() // INTEGER, NUMBER\n      .max_value() // INTEGER, NUMBER\n      .min_length() // STRING\n      .max_length() // STRING\n      .autocomplete(), // STRING, INTEGER, NUMBER\n  ),\n]\n```\n\n----------------------------------------\n\nTITLE: Initializing DiscordHono App with Commands (TypeScript)\nDESCRIPTION: This snippet demonstrates how to initialize a DiscordHono application and register two simple commands, 'ping' and 'hello', each responding with a basic text message. The context object `c` is used to send the response using the `.res()` method. No external dependencies beyond 'discord-hono' are required.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/interactions/context.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DiscordHono } from 'discord-hono'\n\nconst app = new DiscordHono()\n  .command('ping', c => c.res('Pong!!'))\n  .command('hello', c => c.res('world!!'))\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Types for DiscordHono\nDESCRIPTION: This snippet shows how to define an environment type `Env` for a DiscordHono application. It includes bindings such as a D1Database and demonstrates accessing the database within a command handler.  The `c.env` property provides access to the environment variables.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/interactions/typescript.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DiscordHono } from 'discord-hono'\n\ntype Env = {\n  Bindings: {\n    DB: D1Database\n  }\n}\n\nconst app = new DiscordHono<Env>()\napp.command('hello', async c => {\n  const db = c.env.DB\n  /* Perform some operation */\n  return c.res('world!!')\n})\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Scheduling Cron Jobs with DiscordHono\nDESCRIPTION: This snippet shows how to schedule cron jobs using DiscordHono's `.cron()` method. It registers two cron jobs: one that runs daily at midnight and another that runs based on other triggers. It sends a message to a specific channel using the Discord API. The first argument of `.cron()` must match the toml file crons.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/interactions/discord-hono.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new DiscordHono()\n  .cron('0 0 * * *', async c => {\n    await c.rest.post(_channels_$_messages, ['CHANNEL_ID'], {\n      content: 'Daily Post',\n    })\n  })\n  .cron('', async c => {\n    await c.rest.post(_channels_$_messages, ['CHANNEL_ID'], {\n      content: 'Other Cron Triggers Post',\n    })\n  })\n```\n\n----------------------------------------\n\nTITLE: Context Types in DiscordHono\nDESCRIPTION: This snippet demonstrates various context types available in DiscordHono, including `CommandContext`, `ComponentContext`, `ModalContext`, `AutocompleteContext`, and `CronContext`. It defines an `Env` type with database bindings and shows how to access the database within each context handler.  It also shows the construction of different response types like modals, components and autocomplete responses.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/interactions/typescript.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {\n  CommandContext,\n  ComponentContext,\n  AutocompleteContext,\n  ModalContext,\n  CronContext,\n} from 'discord-hono'\nimport {\n  DiscordHono,\n  Components,\n  Button,\n  Modal,\n  TextInput,\n  Autocomplete,\n} from 'discord-hono'\n\ntype Env = {\n  Bindings: {\n    DB: D1Database\n  }\n}\n\nconst commandHandler = async (c: CommandContext<Env>) => {\n  const db = c.env.DB\n  /* Perform some operation */\n  return c.res({\n    components: new Components().row(new Button('button', 'Yo!!')),\n  })\n}\n\nconst componentHandler = async (c: ComponentContext<Env>) => {\n  const db = c.env.DB\n  /* Perform some operation */\n  return c.resModal(\n    new Modal('modal', 'This is Modal').row(\n      new TextInput('id', 'Type something'),\n    ),\n  )\n}\n\nconst modalHandler = async (c: ModalContext<Env>) => {\n  const db = c.env.DB\n  /* Perform some operation */\n  return c.res('Modal Submit')\n}\n\nconst autocompleteHandler = async (c: AutocompleteContext<Env>) => {\n  const db = c.env.DB\n  /* Perform some operation */\n  return c.resAutocomplete(new Autocomplete().choices())\n}\n\nconst autocompleteCommandHandler = async (c: CommandContext<Env>) => {\n  const db = c.env.DB\n  /* Perform some operation */\n  return c.res('Autocomplete Command')\n}\n\nconst cronHandler = async (c: CronContext<Env>) => {\n  const db = c.env.DB\n  /* Perform some operation */\n}\n\nconst app = new DiscordHono<Env>()\n  .command('hey', commandHandler)\n  .component('button', componentHandler)\n  .modal('modal', modalHandler)\n  .autocomplete('autocomplete', autocompleteHandler, autocompleteCommandHandler)\n  .cron('', cronHandler)\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Accessing Variables from Context (TypeScript)\nDESCRIPTION: This snippet showcases how to access predefined variables within the DiscordHono context object (`c.var`).  These variables include command option values, custom IDs from components and modals, and text input values from modals. This allows for dynamic responses based on user input and interaction triggers. Requires 'discord-hono'.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/interactions/context.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new DiscordHono()\n  .command('ping', c => c.res(c.var.OPTION_NAME))\n  .component('button', c => c.res(c.var.custom_id))\n  .modal('modal', c => c.res(c.var.custom_id + c.var.TEXTINPUT_CUSTOM_ID))\n```\n\n----------------------------------------\n\nTITLE: Accessing Context Variables\nDESCRIPTION: This example demonstrates accessing predefined variables within the DiscordHono context (`c.var`). It shows how to retrieve command option values, custom IDs from components and modals, and text input values from modals.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/interactions/context.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new DiscordHono()\n  .command('ping', c => c.res(c.var.OPTION_NAME))\n  .component('button', c => c.res(c.var.custom_id))\n  .modal('modal', c => c.res(c.var.custom_id + c.var.TEXTINPUT_CUSTOM_ID))\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination with Reusable Components in DiscordHono (TypeScript)\nDESCRIPTION: This snippet implements pagination using reusable components and `factory.component` in DiscordHono. It defines a `pageContent` function that generates the embed and components for a given page. The buttons for navigating between pages are created and their states (disabled/enabled) are managed depending on the current page. The `toJSON()` method is used to ensure that each component is a unique instance, avoiding errors when reusing the same component elements.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/helpers/create-factory.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// src/handlers/pagination.ts\nimport {\n  Button,\n  Command,\n  type CommandContext,\n  type ComponentContext,\n  Components,\n  Embed,\n  Option,\n} from 'discord-hono'\nimport { type Env, factory } from '../init.js'\n\ntype Var = { content: string }\n\nconst pageContent = (\n  c: CommandContext<Env> | ComponentContext<Env, 'Button'>,\n  page: number,\n  content: string,\n) => {\n  ///// Process /////\n  const db = c.env.DB\n  ///// Response Build /////\n  const maxPage = 3\n  const embed = new Embed()\n    .title('Title')\n    .description(`${content}\\nPage: ${page}`)\n  const components = new Components().row(\n    component_page.component\n      .emoji('⬅️')\n      .label('Previous')\n      .custom_id(JSON.stringify([page - 1, content]))\n      .disabled(page <= 1)\n      .toJSON(),\n    component_page.component\n      .emoji('➡️')\n      .label('Next')\n      .custom_id(JSON.stringify([page + 1, content]))\n      .disabled(maxPage <= page)\n      .toJSON(),\n  )\n  return { embeds: [embed], components }\n}\n\nexport const command_page = factory.command<Var>(\n  new Command('page', 'pagination').options(\n    new Option('content', 'page content').required(),\n  ),\n  c => c.res(pageContent(c, 1, c.var.content)),\n)\n\nexport const component_page = factory.component(new Button('page', ''), c => {\n  const arr: [number, string] = JSON.parse(c.var.custom_id ?? '')\n  return c.resUpdate(pageContent(c, ...arr))\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Modals with DiscordHono\nDESCRIPTION: This snippet demonstrates how to handle modals in DiscordHono. It creates a command that sends a modal to the user using `c.resModal()`.  The modal is defined using the `Modal` class, which includes text input fields.  A handler for the modal submission is registered using `.modal()`. The first argument of `Modal()` must match the first argument of `.modal()`.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/interactions/discord-hono.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new DiscordHono()\n  .command('modal', c =>\n    c.resModal(\n      new Modal('modal-1', 'Modal Title')\n        .row(new TextInput('text-1', 'Text'))\n        .row(new TextInput('text-2', 'Second')),\n    ),\n  )\n  .modal('modal-1', c => c.res('Modal submitted'))\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Type with D1 Database\nDESCRIPTION: This code snippet demonstrates defining an environment type `Env` that includes bindings for a D1 database. It shows how to access the database within a command handler and return a response. The `DiscordHono` instance is parameterized with the `Env` type.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/interactions/typescript.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DiscordHono } from 'discord-hono'\n\ntype Env = {\n  Bindings: {\n    DB: D1Database\n  }\n}\n\nconst app = new DiscordHono<Env>()\napp.command('hello', async c => {\n  const db = c.env.DB\n  /* 何かしらの処理 */\n  return c.res('world!!')\n})\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Returning Autocomplete Choices - TypeScript\nDESCRIPTION: This code snippet demonstrates how to return autocomplete choices in a DiscordHono application. It initializes an `Autocomplete` object with the user's input (`c.focused?.value`) and then filters the provided choices to only include those that partially match the input. The result is then returned using `c.resAutocomplete()`. Requires the DiscordHono library and a context object `c` with the user's input available in `c.focused?.value`. The `.choices()` method accepts an array of objects, where each object contains a `name` and `value` property representing the display name and the actual value of the autocomplete choice, respectively.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/builders/autocomplete.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreturn c.resAutocomplete(\n  new Autocomplete(c.focused?.value).choices(\n    { name: 'world', value: 'world!!!' },\n    { name: 'hi', value: 'hi!' },\n  ),\n)\n```\n\n----------------------------------------\n\nTITLE: Handling Modals in DiscordHono (Typescript)\nDESCRIPTION: This snippet shows how to handle modals in a DiscordHono app using the `.modal()` method. It defines a command 'modal' that sends a modal to the user. The `.modal()` method handles the submission of the modal and responds with a message. The modal ID used in `.modal()` should match the first argument of the `Modal()` constructor.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/interactions/discord-hono.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new DiscordHono()\n  .command('modal', c =>\n    c.resModal(\n      new Modal('modal-1', 'モーダル タイトル')\n        .row(new TextInput('text-1', 'テキスト'))\n        .row(new TextInput('text-2', '2つ目')),\n    ),\n  )\n  .modal('modal-1', c => c.res('モーダルが送信された'))\n```\n\n----------------------------------------\n\nTITLE: Styling Buttons with Different Styles in DiscordHono\nDESCRIPTION: This snippet demonstrates how to create buttons with different styles using the `Button` class in DiscordHono.  It illustrates setting the style as 'Primary', 'Secondary', 'Success', 'Danger', or 'Link', with 'Primary' being the default.  For 'Link' style, the first argument should be a valid URL.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/builders/components.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Components, Button } from 'discord-hono'\n\ntype Style = 'Primary' | 'Secondary' | 'Success' | 'Danger' | 'Link' | 'SKU'\n\nconst style: Style = 'Secondary' // defaul: 'Primary'\n\nconst components = new Components().row(\n  new Button('unique-id', 'label'),\n  new Button('button', 'button', style),\n  new Button('https://example.com', 'Link button', 'Link'),\n)\n```\n\n----------------------------------------\n\nTITLE: Scheduling Cron Jobs in DiscordHono (Typescript)\nDESCRIPTION: This snippet demonstrates how to schedule cron jobs in a DiscordHono app using the `.cron()` method. It defines two cron jobs that send messages to a channel at specific times. The cron expressions must match the entries in the wrangler.toml file. When an empty cron expression is provided, it catches all cron triggers. Requires specifying `CHANNEL_ID` env variable.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/interactions/discord-hono.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new DiscordHono()\n  .cron('0 0 * * *', async c => {\n    await c.rest.post(_channels_$_messages, ['CHANNEL_ID'], {\n      content: '毎日投稿',\n    })\n  })\n  .cron('', async c => {\n    await c.rest.post(_channels_$_messages, ['CHANNEL_ID'], {\n      content: '他のCronトリガーの投稿',\n    })\n  })\n```\n\n----------------------------------------\n\nTITLE: Initializing createFactory in DiscordHono (TypeScript)\nDESCRIPTION: This snippet initializes the `createFactory` function from `discord-hono` to enable file separation. It defines an `Env` type for environment variables and creates a `factory` instance using `createFactory<Env>()`. The `Env` type is used to specify the structure of the environment bindings.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/helpers/create-factory.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// src/init.ts\nimport { createFactory } from 'discord-hono'\n\nexport type Env = {\n  Bindings: {\n    DB: any\n  }\n}\n\nexport const factory = createFactory<Env>()\n```\n\n----------------------------------------\n\nTITLE: Sending Message to Discord Webhook with discord-hono\nDESCRIPTION: This snippet demonstrates how to send a message to a Discord webhook using the `webhook` function from the `discord-hono` library. It requires the `discord-hono` package to be installed. The function takes the webhook URL and the message as input.  The retry429 config enables automatic retries when hitting rate limits.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/helpers/webhook.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { webhook } from 'discord-hono'\n\nawait webhook('https://discord.com/api/webhooks/123/abc', 'Message')\n```\n\n----------------------------------------\n\nTITLE: Posting Message to Channel with c.rest (Variables)\nDESCRIPTION: This snippet demonstrates how to post a message to a Discord channel using `c.rest` and predefined path variables from the `discord-hono` library. It requires importing `_channels_$_messages` from `discord-hono`. The first argument specifies the HTTP method ('POST'), the second the API endpoint, the third an array of variable parameters for the endpoint, and the fourth is the message content.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/interactions/rest.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { _channels_$_messages } from 'discord-hono'\n\nawait c.rest('POST', _channels_$_messages, [channel_id], {\n  content: 'this is rest',\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing DiscordHono App (Base)\nDESCRIPTION: This snippet demonstrates the basic initialization of a DiscordHono application and registers a simple 'ping' command that responds with 'Pong!!'. It imports the DiscordHono class and creates a new instance. The command is defined using the `.command()` method, which takes the command name ('ping') and a callback function as arguments.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/interactions/discord-hono.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DiscordHono } from 'discord-hono'\n\nconst app = new DiscordHono()\napp.command('ping', c => c.res('Pong!!'))\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Creating an Embed in DiscordHono (TypeScript)\nDESCRIPTION: This snippet demonstrates how to create a basic embed message using DiscordHono. It imports the DiscordHono and Embed classes, creates a DiscordHono app, and defines a command that returns an embed with a title and description. This example shows a simple way to integrate embeds within a Discord command.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/builders/embed.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DiscordHono, Embed } from 'discord-hono'\n\nconst app = new DiscordHono().command('embed', c =>\n  c.res({\n    embeds: [new Embed().title('Title').description('description')],\n  }),\n)\n```\n\n----------------------------------------\n\nTITLE: Customizing TextInput Style - Typescript\nDESCRIPTION: This snippet demonstrates how to customize the style of a text input using the third argument of the `TextInput` constructor. It shows how to explicitly define the `Style` type, defaulting to 'Single' if unspecified. The code then creates a modal with two text inputs, with the second input set to the 'Multi' style for multiline input.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/builders/modal.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Modal, TextInput } from 'discord-hono'\n\ntype Style = 'Single' | 'Multi'\n\nconst modal = new Modal('unique-id', 'Modal Title')\n  .row(new TextInput('text-1', 'Label'))\n  .row(new TextInput('custom_id', 'MultiInput', 'Multi' as Style))\n```\n\n----------------------------------------\n\nTITLE: Deferring Responses with .resDefer()\nDESCRIPTION: This snippet demonstrates using the `.resDefer()` method to defer responding to a Discord interaction.  This is useful for long-running tasks.  A followup message is sent after the deferred processing is complete.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/interactions/context.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new DiscordHono().command('ping', c =>\n  c.resDefer(async c => await c.followup('Followup テキスト')),\n)\n```\n\n----------------------------------------\n\nTITLE: Registering Discord Commands with Hono\nDESCRIPTION: This code snippet demonstrates how to register Discord commands using the `discord-hono` library. It imports `Command`, `Option`, and `register` from the library.  It defines two commands: 'ping' and 'image'. The 'image' command takes an option 'text'. Finally, it registers the commands using the `register` function with the application ID and token, and optionally a guild ID.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/helpers/register.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// register.ts\nimport { Command, Option, register } from 'discord-hono'\n\nconst commands = [\n  new Command('ping', 'pong を返答'),\n  new Command('image', '画像ファイルを返答').options(\n    new Option('text', 'テキスト付で').required(),\n  ),\n]\n\nregister(\n  commands,\n  process.env.DISCORD_APPLICATION_ID,\n  process.env.DISCORD_TOKEN,\n  //process.env.DISCORD_TEST_GUILD_ID,\n)\n```\n\n----------------------------------------\n\nTITLE: Deferring Component Updates with .resDeferUpdate()\nDESCRIPTION: This snippet demonstrates using `.resDeferUpdate()` to defer updating a component's message, allowing for asynchronous processing before the update.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/interactions/context.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new DiscordHono().component('button', c =>\n  c.resDeferUpdate(async c => await c.followup('Followup テキスト')),\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Component Messages with .resUpdate() (TypeScript)\nDESCRIPTION: This snippet demonstrates how to update an existing message when handling a component interaction using `.resUpdate()`.  It allows for overwriting the original message with new content. Requires 'discord-hono'.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/interactions/context.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new DiscordHono().component('button', c =>\n  c.resUpdate('text or data'),\n)\n```\n\n----------------------------------------\n\nTITLE: Handling Subcommands and Subgroups (TypeScript)\nDESCRIPTION: This code demonstrates how to handle subcommands and subgroups within a DiscordHono command using `c.sub`. It uses a `switch` statement to determine which subcommand or subgroup was invoked and responds accordingly.  The `c.values` property is used to access option values. Requires 'discord-hono'.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/interactions/context.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst commands = [\n  new Command('slash', 'slash description').options(\n    new SubCommand('sub1', 'Subcommand 1'),\n    new SubGroup('group', 'group description').options(\n      new SubCommand('sub2', 'Subcommand 2').options(\n        new Option('text', 'text'),\n      ),\n      new SubCommand('sub3', 'Subcommand 3'),\n    ),\n  ),\n]\nconst app = new DiscordHono().command('slash', c => {\n  switch (c.sub.string) {\n    case 'sub1':\n      return c.res('sub1')\n    case 'group sub2':\n      return c.res('g-sub2: ' + c.values.text)\n    default:\n      return c.res(c.sub.group + '-' + c.sub.command)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Responding to Autocomplete Interactions with .resAutocomplete() (TypeScript)\nDESCRIPTION: This snippet shows how to respond to autocomplete interactions using `.resAutocomplete()`. It creates an `Autocomplete` instance with choices based on the focused option's value. Requires 'discord-hono'.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/interactions/context.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new DiscordHono().autocomplete(\n  'hello',\n  c =>\n    c.resAutocomplete(\n      new Autocomplete(c.focused?.value).choices(\n        { name: 'world', value: 'world!!!' },\n        { name: 'hi', value: 'hi!' },\n      ),\n    ),\n  c => c.res(c.var.option),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Complex Command with Options and Components\nDESCRIPTION: This code defines a more complex \"help\" command with an option and interactive components. It uses `discord-hono`'s `Command`, `Option`, `Components`, and `Button` classes.  The command allows specifying text via an option and includes a button that links to documentation and another button to delete the message. It uses `factory.command` and `factory.component` to associate the command and component handlers with their respective definitions.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/helpers/create-factory.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// src/handlers/help.ts\nimport { Command, Option, Components, Button } from 'discord-hono'\nimport { factory } from '../init.js'\n\ntype Var = { text?: string }\n\nexport const command_help = factory.command<Var>(\n  new Command('help', 'response help').options(new Option('text', 'with text')),\n  c =>\n    c.res({\n      content: `text: ${c.var.text}`,\n      components: new Components().row(\n        new Button('https://discord-hono.luis.fun', ['📑', 'Docs'], 'Link'),\n        component_delete.component,\n      ),\n    }),\n)\n\nexport const component_delete = factory.component(\n  new Button('delete', ['🗑️', 'Delete'], 'Secondary'),\n  c => c.resDeferUpdate(c.followupDelete),\n)\n```\n\n----------------------------------------\n\nTITLE: Handling Rate Limits with retry429 in DiscordHono\nDESCRIPTION: This code snippet demonstrates how to use the `retry429` function from the `discord-hono` library to handle rate limits when sending multiple messages to a Discord channel. It imports `retry429`, `Rest`, and `_channels_$_messages` from the library and defines an asynchronous function `manyPosts` that sends 1000 messages. The `retry429` function is used to wrap the `rest.post` call, automatically retrying the request if it encounters a rate limit.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/helpers/retry429.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { retry429, Rest, _channels_$_messages } from 'discord-hono'\n\nconst manyPosts = async () => {\n  const rest = new Rest(token)\n  for (let i = 0; i < 1000; i++) {\n    await retry429(\n      () =>\n        rest.post(_channels_$_messages, [channel_id], {\n          content: 'this is rest',\n        }),\n      3,\n      5000,\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Subcommands with DiscordHono\nDESCRIPTION: This snippet demonstrates how to handle subcommands and subcommand groups in DiscordHono. It defines a command with subcommands and uses `c.sub` to determine which subcommand was triggered and respond accordingly.  It accesses option values via `c.values`.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/interactions/context.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst commands = [\n  new Command('slash', 'slash description').options(\n    new SubCommand('sub1', 'サブコマンド 1'),\n    new SubGroup('group', 'サブコマンドグループ description').options(\n      new SubCommand('sub2', 'サブコマンド 2').options(\n        new Option('text', 'テキスト'),\n      ),\n      new SubCommand('sub3', 'サブコマンド 3'),\n    ),\n  ),\n]\nconst app = new DiscordHono().command('slash', c => {\n  switch (c.sub.string) {\n    case 'sub1':\n      return c.res('sub1')\n    case 'group sub2':\n      return c.res('g-sub2: ' + c.values.text)\n    default:\n      return c.res(c.sub.group + '-' + c.sub.command)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Registering Commands in DiscordHono (Typescript)\nDESCRIPTION: This snippet demonstrates how to register multiple commands with a DiscordHono app. It uses the `.command()` method to associate command names ('ping', 'image') with corresponding handlers that return simple text responses. Command names in `.command()` should match the first argument of the `Command()` constructor.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/interactions/discord-hono.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst commands = [\n  new Command('ping', 'Pong を返答'),\n  new Command('image', 'Image を返答'),\n]\nconst app = new DiscordHono()\n  .command('ping', c => c.res('Pong!!'))\n  .command('image', c => c.res('Image!!'))\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Text Input Rows to a Modal in Discord Hono\nDESCRIPTION: This snippet shows how to add multiple rows of text inputs to a modal using the `.row()` method. Each `.row()` call adds a new `TextInput` to the modal. The second `TextInput` demonstrates the usage of multi-line input.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/builders/modal.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst modal = new Modal('unique-id', 'モーダルタイトル')\n  .row(new TextInput('text-1', 'テキストラベル'))\n  .row(new TextInput('text-2', '複数行入力', 'Multi'))\n```\n\n----------------------------------------\n\nTITLE: Exporting handlers in DiscordHono (TypeScript)\nDESCRIPTION: This snippet demonstrates exporting all handlers from './hello-world.js' and './help.js'. This allows to import all handlers from a single `index.ts` file.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/helpers/create-factory.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/handlers/index.ts\nexport * from './hello-world.js'\nexport * from './help.js'\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination with Reusable Components\nDESCRIPTION: This code demonstrates implementing pagination using reusable components. It defines a `pageContent` function to generate embeds and components for a specific page of content.  The `component_page` component is used to create \"Previous\" and \"Next\" buttons. Critically, the `.toJSON()` method is used on the component instances before they are passed to the `Components` object.  The `factory.command` and `factory.component` methods are used to define the command and component handlers.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/helpers/create-factory.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// src/handlers/pagination.ts\nimport {\n  Button,\n  Command,\n  type CommandContext,\n  type ComponentContext,\n  Components,\n  Embed,\n  Option,\n} from 'discord-hono'\nimport { type Env, factory } from '../init.js'\n\ntype Var = { content: string }\n\nconst pageContent = (\n  c: CommandContext<Env> | ComponentContext<Env, 'Button'>,\n  page: number,\n  content: string,\n) => {\n  ///// Process /////\n  const db = c.env.DB\n  ///// Response Build /////\n  const maxPage = 3\n  const embed = new Embed()\n    .title('Title')\n    .description(`${content}\\nPage: ${page}`)\n  const components = new Components().row(\n    component_page.component\n      .emoji('⬅️')\n      .label('Previous')\n      .custom_id(JSON.stringify([page - 1, content]))\n      .disabled(page <= 1)\n      .toJSON(),\n    component_page.component\n      .emoji('➡️')\n      .label('Next')\n      .custom_id(JSON.stringify([page + 1, content]))\n      .disabled(maxPage <= page)\n      .toJSON(),\n  )\n  return { embeds: [embed], components }\n}\n\nexport const command_page = factory.command<Var>(\n  new Command('page', 'pagination').options(\n    new Option('content', 'page content').required(),\n  ),\n  c => c.res(pageContent(c, 1, c.var.content)),\n)\n\nexport const component_page = factory.component(new Button('page', ''), c => {\n  const arr: [number, string] = JSON.parse(c.var.custom_id ?? '')\n  return c.resUpdate(pageContent(c, ...arr))\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Select Menus in DiscordHono\nDESCRIPTION: This snippet demonstrates how to create a select menu using the `Select` class in DiscordHono. It allows specifying the type of select menu (String, User, Role, Mentionable, Channel), with 'String' being the default. `unique-id` is used to identify `app.component()`.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/builders/components.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Components, Select } from 'discord-hono'\n\ntype Type = 'String' | 'User' | 'Role' | 'Mentionable' | 'Channel'\n\nconst selectType: Type = 'Channel' // defaul: 'String'\n\nconst components = new Components().row(new Select('unique-id', selectType))\n```\n\n----------------------------------------\n\nTITLE: Defining a simple command in DiscordHono (TypeScript)\nDESCRIPTION: This snippet defines a simple 'hello' command using `factory.command` in DiscordHono. It imports `Command` and `factory`. The command responds with the string 'world' when executed.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/helpers/create-factory.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/handlers/hello-world.ts\nimport { Command } from 'discord-hono'\nimport { factory } from '../init.js'\n\nexport const command_hello = factory.command(\n  new Command('hello', 'response world'),\n  c => c.res('world'),\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing DiscordHono with verification key\nDESCRIPTION: This snippet shows how to initialize DiscordHono with verification using `discord-interactions` library. This is needed when not using Cloudflare environment.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/interactions/discord-hono.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { verifyKey } from 'discord-interactions'\nconst app = new DiscordHono({ verify: verifyKey })\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Context Types\nDESCRIPTION: This extensive snippet covers defining and using various context types within a Discord Hono application, including `CommandContext`, `ComponentContext`, `ModalContext`, `AutocompleteContext`, and `CronContext`. It shows how to handle different interaction types and utilize features like components, modals, and autocomplete responses. The D1 Database is accessed through each context's environment.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/interactions/typescript.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {\n  CommandContext,\n  ComponentContext,\n  AutocompleteContext,\n  ModalContext,\n  CronContext,\n} from 'discord-hono'\nimport {\n  DiscordHono,\n  Components,\n  Button,\n  Modal,\n  TextInput,\n  Autocomplete,\n} from 'discord-hono'\n\ntype Env = {\n  Bindings: {\n    DB: D1Database\n  }\n}\n\nconst commandHandler = async (c: CommandContext<Env>) => {\n  const db = c.env.DB\n  /* 何かしらの処理 */\n  return c.res({\n    components: new Components().row(new Button('button', 'Yo!!')),\n  })\n}\n\nconst componentHandler = async (c: ComponentContext<Env>) => {\n  const db = c.env.DB\n  /* 何かしらの処理 */\n  return c.resModal(\n    new Modal('modal', 'これはモーダル').row(\n      new TextInput('id', '何か入力して'),\n    ),\n  )\n}\n\nconst modalHandler = async (c: ModalContext<Env>) => {\n  const db = c.env.DB\n  /* 何かしらの処理 */\n  return c.res('モーダルが送信された')\n}\n\nconst autocompleteHandler = async (c: AutocompleteContext<Env>) => {\n  const db = c.env.DB\n  /* 何かしらの処理 */\n  return c.resAutocomplete(new Autocomplete().choices())\n}\n\nconst autocompleteCommandHandler = async (c: CommandContext<Env>) => {\n  const db = c.env.DB\n  /* 何かしらの処理 */\n  return c.res('オートコンプリートコマンド')\n}\n\nconst cronHandler = async (c: CronContext<Env>) => {\n  const db = c.env.DB\n  /* 何かしらの処理 */\n}\n\nconst app = new DiscordHono<Env>()\n  .command('hey', commandHandler)\n  .component('button', componentHandler)\n  .modal('modal', modalHandler)\n  .autocomplete('autocomplete', autocompleteHandler, autocompleteCommandHandler)\n  .cron('', cronHandler)\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Defining Variable Types for DiscordHono\nDESCRIPTION: This snippet demonstrates how to define variable types within the `Env` type for a DiscordHono application, allowing access to variables using `c.var`. It shows examples for command and modal handlers, accessing `OPTION_NAME` and `TEXTINPUT_CUSTOM_ID` respectively.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/interactions/typescript.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype Env = {\n  Variables: {\n    OPTION_NAME?: string\n    TEXTINPUT_CUSTOM_ID?: string\n  }\n}\n\nconst app = new DiscordHono<Env>()\n  .command('ping', c => c.res(c.var.OPTION_NAME))\n  .modal('modal', c => c.res(c.var.TEXTINPUT_CUSTOM_ID))\n```\n\n----------------------------------------\n\nTITLE: TextInput Methods in Discord Hono\nDESCRIPTION: This snippet illustrates the usage of various methods to configure a `TextInput` within a Discord Hono modal. These methods include `min_length()`, `max_length()`, `required()`, `value()`, and `placeholder()`, which allow for customization of the text input's behavior and appearance.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/builders/modal.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst modal = new Modal('unique-id', 'モーダルタイトル').row(\n  new TextInput('custom_id', 'テキストラベル')\n    .min_length()\n    .max_length()\n    .required()\n    .value()\n    .placeholder(),\n)\n```\n\n----------------------------------------\n\nTITLE: Loading Discord Handlers with createFactory\nDESCRIPTION: This code snippet demonstrates how to load Discord command handlers using the `factory.discord().loader()` method. It imports handler modules from the `./handlers` directory and the pre-initialized `factory` from `./init`.  The `loader` function then registers these handlers with the Discord bot.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/helpers/create-factory.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// src/index.ts\nimport * as handlers from './handlers'\nimport { factory } from './init'\n\nexport default factory.discord().loader(Object.values(handlers))\n```\n\n----------------------------------------\n\nTITLE: Launching Activity with .resActivity() (TypeScript)\nDESCRIPTION: This code snippet shows how to launch a Discord activity using `.resActivity()`. This is only available for apps with activities enabled. Requires 'discord-hono'.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/interactions/context.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new DiscordHono().command('activity', c => c.resActivity())\n```\n\n----------------------------------------\n\nTITLE: Registering Slash Commands with DiscordHono\nDESCRIPTION: This code snippet demonstrates how to register slash commands created using Discord.js's SlashCommandBuilder with DiscordHono. It imports SlashCommandBuilder and register, creates a command, and registers it. The `.toJSON()` method is implicitly used when registering the command.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/migration-guides/discordjs.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SlashCommandBuilder } from '@discordjs/builders'\nimport { register } from 'discord-hono'\n\nconst commands = [\n  new SlashCommandBuilder()\n    .setName('ping')\n    .setDescription('Check if this interaction is responsive')\n]\n\nregister(commands, ...)\n```\n\n----------------------------------------\n\nTITLE: Verifying Requests with discord-interactions (Typescript)\nDESCRIPTION: This snippet demonstrates how to verify incoming requests using the `discord-interactions` library. The `verifyKey` function is used to verify the request signature. This is a crucial step for security in a Discord bot application. Requires `discord-interactions` package.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/interactions/discord-hono.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { verifyKey } from 'discord-interactions'\nconst app = new DiscordHono({ verify: verifyKey })\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Command with createFactory\nDESCRIPTION: This code defines a simple \"hello\" command using the `createFactory` pattern in `discord-hono`. It creates a `Command` object and a handler function that responds with the string \"world\". The `factory.command()` method is used to associate the command with its handler, providing type safety and organization.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/helpers/create-factory.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/handlers/hello-world.ts\nimport { Command } from 'discord-hono'\nimport { factory } from '../init.js'\n\nexport const command_hello = factory.command(\n  new Command('hello', 'response world'),\n  c => c.res('world'),\n)\n```\n\n----------------------------------------\n\nTITLE: Sending Embed Messages with DiscordHono\nDESCRIPTION: This snippet shows how to send an embed message using Discord.js's EmbedBuilder within a DiscordHono command. It imports EmbedBuilder and DiscordHono, creates an app, defines a command that constructs an embed and sends it as a response. The `.toJSON()` method is implicitly used when responding with the embed.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/migration-guides/discordjs.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EmbedBuilder } from '@discordjs/builders'\nimport { DiscordHono } from 'discord-hono'\n\nconst app = new DiscordHono().command('embed', c =>\n  c.res({\n    embeds: [\n      new EmbedBuilder().setTitle('Title').setDescription('Description'),\n    ],\n  }),\n)\n```\n\n----------------------------------------\n\nTITLE: Registering Commands in Discord Hono\nDESCRIPTION: This snippet showcases how to register commands with Discord using `discord-hono`. It imports the `register` function, command handlers, and the initialized `factory`. The `factory.getCommands()` method extracts commands from the handlers, and then the `register` function is called with the commands, application ID, and bot token to register them with Discord.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/helpers/create-factory.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/register.ts\n// src/register.ts\nimport { register } from 'discord-hono'\nimport * as handlers from './handlers/index.js'\nimport { factory } from './init.js'\n\nregister(\n  factory.getCommands(Object.values(handlers)),\n  process.env.DISCORD_APPLICATION_ID,\n  process.env.DISCORD_TOKEN,\n  //process.env.DISCORD_TEST_GUILD_ID,\n)\n```\n\n----------------------------------------\n\nTITLE: Loading handlers using factory.discord() in DiscordHono (TypeScript)\nDESCRIPTION: This snippet demonstrates how to load handlers into a DiscordHono application using the `factory.discord().loader()` method. It imports handler functions from './handlers' and the `factory` instance from './init'. The `Object.values(handlers)` argument passes all handler functions to the loader.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/helpers/create-factory.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// src/index.ts\nimport * as handlers from './handlers'\nimport { factory } from './init'\n\nexport default factory.discord().loader(Object.values(handlers))\n```\n\n----------------------------------------\n\nTITLE: Verifying Requests with discord-verify (Typescript)\nDESCRIPTION: This snippet demonstrates how to verify incoming requests using the `discord-verify` library.  It requires providing a subtle crypto implementation for verification.  This is an alternative to `discord-interactions`. Requires `discord-verify` package.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/interactions/discord-hono.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { verify, PlatformAlgorithm } from 'discord-verify'\nconst app = new DiscordHono({\n  verify: (...args) =>\n    verify(...args, crypto.webcrypto.subtle, PlatformAlgorithm.OldNode),\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Command Options - DiscordHono (TS)\nDESCRIPTION: This snippet shows how to define options for a Discord command using DiscordHono's `Option` class. It demonstrates creating options of different types (String and Channel) and setting their descriptions. It relies on discord-hono's provided classes to create the options.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/builders/command.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Command, Option } from 'discord-hono'\n\ntype OptionType =\n  | 'String'\n  | 'Integer'\n  | 'Number'\n  | 'Boolean'\n  | 'User'\n  | 'Channel'\n  | 'Role'\n  | 'Mentionable'\n  | 'Attachment'\n\nconst optionType: OptionType = 'Channel' // default: 'String'\n\nconst commands = [\n  new Command('hello', 'response world').options(\n    new Option('text', 'text input'), // String option\n    new Option('channel', 'channel select', optionType), // Channel option\n  ),\n]\n```\n\n----------------------------------------\n\nTITLE: Responding with Modals using .resModal()\nDESCRIPTION: This snippet demonstrates using the `.resModal()` method to send a modal to the user in response to a command. The modal contains a single text input field.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/interactions/context.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new DiscordHono().command('ping', c =>\n  c.resModal(\n    new Modal('unique-id', 'タイトル').row(\n      new TextInput('text-id', 'テキストラベル'),\n    ),\n  ),\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing Focused Autocomplete Option\nDESCRIPTION: This snippet shows how to access the currently focused autocomplete option using `c.focused` within an autocomplete handler. It logs the option's name and value to the console.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/interactions/context.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new DiscordHono().autocomplete('hello', c => {\n  console.log(c.focused?.name) // オプション名\n  console.log(c.focused?.value) // オプションの値\n  return c.resAutocomplete(...)\n})\n```\n\n----------------------------------------\n\nTITLE: Embed Method Chaining (TypeScript)\nDESCRIPTION: This snippet showcases the method chaining capabilities of the Embed class in DiscordHono. It creates an Embed object and then calls various methods to set different properties of the embed, such as title, type, description, URL, timestamp, color, footer, image, thumbnail, video, provider, author, and fields. This demonstrates how to fluently configure the attributes of the embed.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/builders/embed.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst embed = new Embed()\n  .title()\n  .type()\n  .description()\n  .url()\n  .timestamp()\n  .color()\n  .footer()\n  .image()\n  .thumbnail()\n  .video()\n  .provider()\n  .author()\n  .fields()\n```\n\n----------------------------------------\n\nTITLE: Initializing DiscordHono with verification using discord-verify\nDESCRIPTION: This snippet shows how to initialize DiscordHono with verification using `discord-verify` library. This is needed when not using Cloudflare environment.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/interactions/discord-hono.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { verify, PlatformAlgorithm } from 'discord-verify'\nconst app = new DiscordHono({\n  verify: (...args) =>\n    verify(...args, crypto.webcrypto.subtle, PlatformAlgorithm.OldNode),\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing DiscordHono with Options\nDESCRIPTION: This snippet illustrates initializing a `DiscordHono` instance with an `InitOptions` object. It shows the basic structure of `InitOptions` and how to pass it during the creation of the `DiscordHono` instance, also using an `Env` type with D1 Database.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/interactions/typescript.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { InitOptions } from 'discord-hono'\nimport { DiscordHono } from 'discord-hono'\n\ntype Env = {\n  Bindings: {\n    DB: D1Database\n  }\n}\n\nconst options: InitOptions<Env> = {\n  /***/\n}\nconst app = new DiscordHono<Env>(options)\n```\n\n----------------------------------------\n\nTITLE: Updating Component Messages with .resUpdate()\nDESCRIPTION: This example shows how to use the `.resUpdate()` method to update the message associated with a component interaction (e.g., button click).\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/interactions/context.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new DiscordHono().component('button', c =>\n  c.resUpdate('text or data'),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Discord Embed Message with Hono\nDESCRIPTION: This code snippet demonstrates how to create a Discord command that responds with an embedded message.  It uses the `DiscordHono` class to define a command named 'embed', and within the command handler, it constructs an `Embed` object, sets the title and description, and returns it as part of the response. This requires the `discord-hono` package.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/builders/embed.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DiscordHono, Embed } from 'discord-hono'\n\nconst app = new DiscordHono().command('embed', c =>\n  c.res({\n    embeds: [new Embed().title('タイトル').description('内容')],\n  }),\n)\n```\n\n----------------------------------------\n\nTITLE: Command Class Method Chaining - DiscordHono (TS)\nDESCRIPTION: This snippet showcases method chaining available in the `Command` class to configure various properties. It demonstrates how to set the id, type, application_id, guild_id, localizations, options, permissions, and other properties of a Discord command using DiscordHono.  Refer to Discord API documentation for valid values.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/builders/command.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst commands = [\n  new Command('name', 'description')\n    .id()\n    .type(2) // 1,2,3 default 1 --- 1: CHAT_INPUT, 2: USER, 3: MESSAGE\n    .application_id()\n    .guild_id()\n    .name_localizations()\n    .description_localizations()\n    .options(\n      new Option('text', 'first text'),\n      new Option('second', 'second text'),\n    )\n    .default_member_permissions()\n    .dm_permission()\n    .default_permission()\n    .nsfw()\n    .integration_types()\n    .contexts()\n    .version()\n    .handler(),\n]\n```\n\n----------------------------------------\n\nTITLE: Handling Components in DiscordHono (Typescript)\nDESCRIPTION: This snippet shows how to handle component interactions in a DiscordHono app using the `.component()` method.  It defines a command 'components' that sends a message with two buttons.  The `.component()` methods are used to handle button clicks and update the message accordingly. Component IDs in `.component()` should match the first argument of the `Button()` constructor.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/interactions/discord-hono.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new DiscordHono()\n  .command('components', c =>\n    c.res({\n      content: 'まだボタンはクリックされていない',\n      components: new Components().row(\n        new Button('button-1', 'ボタン'),\n        new Button('button-2', '2つ目'),\n      ),\n    }),\n  )\n  .component('button-1', c => c.resUpdate('ボタン がクリックされた'))\n  .component('button-2', c => c.resUpdate('2つ目 がクリックされた'))\n```\n\n----------------------------------------\n\nTITLE: Initializing Components with Button in Discord Hono (TS)\nDESCRIPTION: This snippet initializes a Discord Hono app and creates a command that responds with components, specifically buttons. It imports necessary modules, creates a new DiscordHono instance, defines a command called 'component', and sets up a response with a message and a row of two buttons. The buttons are created using the Button class with unique IDs and labels.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/builders/components.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DiscordHono, Components, Button } from 'discord-hono'\n\nconst app = new DiscordHono().command('component', c =>\n  c.res({\n    content: 'components',\n    components: new Components().row(\n      new Button('button-1', 'ボタン'),\n      new Button('button-2', '2つ目'),\n    ),\n  }),\n)\n```\n\n----------------------------------------\n\nTITLE: Discord Hono Pagination Logic (index.ts)\nDESCRIPTION: This snippet defines the core pagination logic within a Discord Hono application. It creates a `pageContent` function that generates an embed with content and navigation buttons.  It handles both command and component interactions for displaying different pages based on button clicks. Dependencies include `discord-hono` library, and an environment variable `DB`.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/examples/pagination.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// index.ts\nimport {\n  type CommandContext,\n  type ComponentContext,\n  Button,\n  Components,\n  DiscordHono,\n  Embed,\n} from 'discord-hono'\n\ntype Env = {\n  Variables: {\n    content?: string\n  }\n}\n\nconst pageContent = (\n  c: CommandContext<Env> | ComponentContext<Env, Button>,\n  page: number,\n  content: string,\n) => {\n  ///// Process /////\n  const db = c.env.DB\n  ///// Response Build /////\n  const maxPage = 3\n  const embed = new Embed()\n    .title('Title')\n    .description(`${content}\\nPage: ${page}`)\n  const components = new Components().row(\n    new Button('page', ['⬅️', 'Previous'])\n      .custom_id(JSON.stringify([page - 1, content]))\n      .disabled(page <= 1),\n    new Button('page', ['➡️', 'Next'])\n      .custom_id(JSON.stringify([page + 1, content]))\n      .disabled(maxPage <= page),\n  )\n  return { embeds: [embed], components }\n}\n\nconst app = new DiscordHono<Env>()\n  .command('page', c => c.res(pageContent(c, 1, c.var.content)))\n  .component('page', c => {\n    const arr: [number, string] = JSON.parse(c.var.custom_id ?? '')\n    return c.resUpdate(pageContent(c, ...arr))\n  })\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Setting Emoji for Buttons in Discord Hono (TS)\nDESCRIPTION: This snippet demonstrates setting an emoji along with the label for a button in Discord Hono. It passes an array containing the emoji and the button label to the Button constructor. The first element of array is emoji, second one is label.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/builders/components.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Components, Button } from 'discord-hono'\n\nconst components = new Components().row(new Button('button', ['✅', 'ボタン']))\n```\n\n----------------------------------------\n\nTITLE: Deleting All Discord Commands\nDESCRIPTION: This snippet demonstrates how to delete all registered Discord commands by passing an empty array to the `register` function. It requires the application ID and Discord token for authentication. The commented-out guild ID argument indicates that this operation can be performed globally or on a specific guild by uncommenting the argument.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/helpers/register.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nregister(\n  [],\n  process.env.DISCORD_APPLICATION_ID,\n  process.env.DISCORD_TOKEN,\n  //process.env.DISCORD_TEST_GUILD_ID,\n)\n```\n\n----------------------------------------\n\nTITLE: Registering Slash Command with Option\nDESCRIPTION: This snippet shows how to register a slash command named 'page' with an option named 'content' using DiscordHono. The 'content' option is required for the command execution.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/examples/pagination.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// register.ts\nconst commands = [\n  new Command('page', 'pagination').options(\n    new Option('content', 'page content').required(),\n  ),\n]\n```\n\n----------------------------------------\n\nTITLE: Deploying DiscordHono with Deno Deploy\nDESCRIPTION: This code snippet demonstrates how to deploy a Discord bot using DiscordHono on Deno Deploy. It creates a DiscordHono instance, registers a simple 'ping' command, and then uses Deno.serve to handle incoming requests with the DiscordHono fetch handler. This is a basic setup for deploying a bot to Deno Deploy.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/guides/tips.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DiscordHono } from 'npm:discord-hono'\n\nconst app = new DiscordHono()\napp.command('ping', c => c.res('Pong!!'))\n\nDeno.serve(app.fetch)\n```\n\n----------------------------------------\n\nTITLE: Initializing DiscordHono with InitOptions\nDESCRIPTION: This snippet showcases the usage of `InitOptions` for configuring a DiscordHono application. It defines an `Env` type and demonstrates how to create an `options` object of type `InitOptions<Env>` to be passed to the `DiscordHono` constructor.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/interactions/typescript.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { InitOptions } from 'discord-hono'\nimport { DiscordHono } from 'discord-hono'\n\ntype Env = {\n  Bindings: {\n    DB: D1Database\n  }\n}\n\nconst options: InitOptions<Env> = {\n  /***/\n}\nconst app = new DiscordHono<Env>(options)\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Styles in Discord Hono (TS)\nDESCRIPTION: This snippet shows how to configure different button styles in Discord Hono. It imports Components and Button, defines a type Style for button styles, and creates buttons with specified styles such as 'Secondary' and 'Link'. The 'Link' style requires a URL instead of a unique ID.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/builders/components.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Components, Button } from 'discord-hono'\n\ntype Style = 'Primary' | 'Secondary' | 'Success' | 'Danger' | 'Link' | 'SKU'\n\nconst style: Style = 'Secondary' // デフォルト: 'Primary'\n\nconst components = new Components().row(\n  new Button('unique-id', 'label'),\n  new Button('button', 'ボタン', style),\n  new Button('https://example.com', 'リンク', 'Link'),\n)\n```\n\n----------------------------------------\n\nTITLE: Responding to Interactions with .res()\nDESCRIPTION: This example demonstrates using the `.res()` method to respond to a Discord interaction. It shows how to send a simple text message and how to send a more complex response using the `APIInteractionResponseCallbackData` type.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/interactions/context.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new DiscordHono()\n  .command('ping', c => c.res('Pong!!'))\n  .command('hello', c => c.res({ content: 'World!!' }))\n```\n\n----------------------------------------\n\nTITLE: Regex Routing in Discord Hono (TypeScript)\nDESCRIPTION: This code demonstrates how to implement regex-based routing for component handlers in Discord Hono using a custom `CustomMap` class. The `CustomMap` class overrides the `get` method to allow matching keys against regular expressions. It depends on the `discord-hono` library and requires an environment type `Env`.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/examples/regex-routing.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// index.ts\nimport type { ComponentHandler, ModalHandler } from 'discord-hono'\nimport { DiscordHono } from 'discord-hono'\n\nclass CustomMap<\n  E extends Env,\n  H extends ComponentHandler<E, any> | ModalHandler<E>,\n> extends Map<string | RegExp, H> {\n  override get = (key: string) => {\n    if (super.has(key)) return super.get(key)!\n    ///// your custom logic /////\n    for (const [k, v] of this) if (k instanceof RegExp && k.test(key)) return v!\n    ///// your custom logic /////\n    if (super.has('')) return super.get('')!\n    throw new Error('Handler is missing')\n  }\n}\n\nconst app = new DiscordHono()\n\napp.component('', c => {\n  const map = new CustomMap<Env, ComponentHandler<Env, any>>()\n\n  map.set('string', c => c.res('string'))\n  map.set(/regex/, c => c.res('regex'))\n  map.set('', c => c.res('error'))\n\n  return map.get(c.key)(c)\n})\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination with DiscordHono\nDESCRIPTION: This snippet demonstrates implementing pagination logic using DiscordHono. It defines a `pageContent` function to generate embeds and components with navigation buttons. It handles both command and component interactions, updating the message content dynamically based on the selected page.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/examples/pagination.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// index.ts\nimport {\n  type CommandContext,\n  type ComponentContext,\n  Button,\n  Components,\n  DiscordHono,\n  Embed,\n} from 'discord-hono'\n\ntype Env = {\n  Variables: {\n    content?: string\n  }\n}\n\nconst pageContent = (\n  c: CommandContext<Env> | ComponentContext<Env, Button>,\n  page: number,\n  content: string,\n) => {\n  ///// Process /////\n  const db = c.env.DB\n  ///// Response Build /////\n  const maxPage = 3\n  const embed = new Embed()\n    .title('Title')\n    .description(`${content}\\nPage: ${page}`)\n  const components = new Components().row(\n    new Button('page', ['⬅️', 'Previous'])\n      .custom_id(JSON.stringify([page - 1, content]))\n      .disabled(page <= 1),\n    new Button('page', ['➡️', 'Next'])\n      .custom_id(JSON.stringify([page + 1, content]))\n      .disabled(maxPage <= page),\n  )\n  return { embeds: [embed], components }\n}\n\nconst app = new DiscordHono<Env>()\n  .command('page', c => c.res(pageContent(c, 1, c.var.content)))\n  .component('page', c => {\n    const arr: [number, string] = JSON.parse(c.var.custom_id ?? '')\n    return c.resUpdate(pageContent(c, ...arr))\n  })\n\nexport default app\n\n```\n\n----------------------------------------\n\nTITLE: Defining Subcommands and Subcommand Groups in Discord Hono (TypeScript)\nDESCRIPTION: Shows how to define subcommands and subcommand groups using `SubCommand` and `SubGroup` within a `Command` object. Subcommands and groups can be nested to create a hierarchical command structure in Discord.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/builders/command.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Command, SubGroup, SubCommand } from 'discord-hono'\n\nconst commands = [\n  new Command('slash', 'slash description').options(\n    new SubCommand('sub1', 'サブコマンド 1'),\n    new SubGroup('group', 'サブコマンドグループ description').options(\n      new SubCommand('sub2', 'サブコマンド 2'),\n      new SubCommand('sub3', 'サブコマンド 3'),\n    ),\n  ),\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Select Elements in Discord Hono (TS)\nDESCRIPTION: This snippet shows how to create a Select element in Discord Hono. It imports Components and Select, defines a type Type for the select element type, and creates a Select element with a unique ID and specified type. The unique ID is used to identify the component in app.component().\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/builders/components.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Components, Select } from 'discord-hono'\n\ntype Type = 'String' | 'User' | 'Role' | 'Mentionable' | 'Channel'\n\nconst selectType: Type = 'Channel' // デフォルト: 'String'\n\nconst components = new Components().row(new Select('unique-id', selectType))\n```\n\n----------------------------------------\n\nTITLE: Accessing Focused Autocomplete Option (TypeScript)\nDESCRIPTION: This snippet shows how to access the currently focused autocomplete option using `c.focused`. It logs the name and value of the focused option. This allows you to provide dynamic autocomplete suggestions based on the user's input. Requires 'discord-hono'.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/interactions/context.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new DiscordHono().autocomplete('hello', c => {\n  console.log(c.focused?.name) // option name\n  console.log(c.focused?.value) // option value\n  return c.resAutocomplete(...)\n})\n```\n\n----------------------------------------\n\nTITLE: Registering Pagination Command (register.ts)\nDESCRIPTION: This snippet registers the `page` command with Discord. It defines the command's name, description, and options. Specifically, it creates an option for providing the initial content of the page. Requires `discord-hono` library.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/examples/pagination.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// register.ts\nconst commands = [\n  new Command('page', 'pagination').options(\n    new Option('content', 'page content').required(),\n  ),\n]\n```\n\n----------------------------------------\n\nTITLE: Adding Type and Scripts to package.json\nDESCRIPTION: This snippet adds \"type\" and \"scripts\" fields to the `package.json` file. `type: module` enables ES module syntax.  The `register` script compiles the TypeScript code and executes the register.js file using Node.js with environment variables loaded from .env file.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/guides/start.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n// package.json\n   \"type\": \"module\",\n   \"scripts\": {\n     \"register\": \"tsc && node --env-file=.env dist/register.js\",\n   },\n```\n\n----------------------------------------\n\nTITLE: Button Methods Customization in DiscordHono\nDESCRIPTION: This snippet demonstrates how to customize button elements using methods such as `.custom_id()`, `.emoji()`, and `.disabled()` in DiscordHono.  It is important to note that the `custom_id` combined with the `unique-id` is limited to 99 characters.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/builders/components.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// prettier-ignore\nconst components = new Components().row(\n  new Button('unique-id', 'label', 'Primary')\n    .custom_id()\n    .emoji()\n    .disabled(),\n)\n```\n\n----------------------------------------\n\nTITLE: Registering Commands in DiscordHono (TypeScript)\nDESCRIPTION: This snippet registers commands using the `register` function from `discord-hono`. It imports handler functions, the `factory` instance, and uses `factory.getCommands()` to retrieve commands. The function then calls `register` with the command list, application ID, and token, which are retrieved from environment variables.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/helpers/create-factory.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/register.ts\nimport { register } from 'discord-hono'\nimport * as handlers from './handlers/index.js'\nimport { factory } from './init.js'\n\nregister(\n  factory.getCommands(Object.values(handlers)),\n  process.env.DISCORD_APPLICATION_ID,\n  process.env.DISCORD_TOKEN,\n  //process.env.DISCORD_TEST_GUILD_ID,\n)\n```\n\n----------------------------------------\n\nTITLE: Responding to Autocomplete with .resAutocomplete()\nDESCRIPTION: This example demonstrates using the `.resAutocomplete()` method to respond to an autocomplete interaction. It creates an `Autocomplete` instance with choices based on the focused option's value.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/interactions/context.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new DiscordHono().autocomplete(\n  'hello',\n  c =>\n    c.resAutocomplete(\n      new Autocomplete(c.focused?.value).choices(\n        { name: 'world', value: 'world!!!' },\n        { name: 'hi', value: 'hi!' },\n      ),\n    ),\n  c => c.res(c.var.option),\n)\n```\n\n----------------------------------------\n\nTITLE: Storing secrets using wrangler\nDESCRIPTION: These commands use the Cloudflare Wrangler CLI to securely store the Discord application ID, public key, and token as secrets. This is a secure way to manage sensitive information required for the Discord bot to function correctly.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/guides/start.mdx#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpx wrangler secret put DISCORD_APPLICATION_ID\nnpx wrangler secret put DISCORD_PUBLIC_KEY\nnpx wrangler secret put DISCORD_TOKEN\n```\n\n----------------------------------------\n\nTITLE: Regular Expression Routing in Discord Hono\nDESCRIPTION: This code snippet demonstrates how to implement regular expression routing in a Discord Hono application. It defines a `CustomMap` class that extends the built-in `Map` to allow for regular expression keys. The `get` method is overridden to check if a given key matches any of the regular expression keys in the map. This allows for flexible routing based on patterns in the component's custom ID.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/examples/regex-routing.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// index.ts\nimport type { ComponentHandler, ModalHandler } from 'discord-hono'\nimport { DiscordHono } from 'discord-hono'\n\nclass CustomMap<\n  E extends Env,\n  H extends ComponentHandler<E, any> | ModalHandler<E>,\n> extends Map<string | RegExp, H> {\n  override get = (key: string) => {\n    if (super.has(key)) return super.get(key)!\n    ///// your custom logic /////\n    for (const [k, v] of this) if (k instanceof RegExp && k.test(key)) return v!\n    ///// your custom logic /////\n    if (super.has('')) return super.get('')!\n    throw new Error('Handler is missing')\n  }\n}\n\nconst app = new DiscordHono()\n\napp.component('', c => {\n  const map = new CustomMap<Env, ComponentHandler<Env, any>>()\n\n  map.set('string', c => c.res('string'))\n  map.set(/regex/, c => c.res('regex'))\n  map.set('', c => c.res('error'))\n\n  return map.get(c.key)(c)\n})\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Embed Class Methods\nDESCRIPTION: This code snippet illustrates the available methods of the `Embed` class in the `discord-hono` library for customizing Discord embed messages. Each method corresponds to a specific property of the embed, such as title, type, description, URL, timestamp, color, footer, image, thumbnail, video, provider, author, and fields. These methods allow developers to define the content and appearance of the embed.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/builders/embed.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst embed = new Embed()\n  .title()\n  .type()\n  .description()\n  .url()\n  .timestamp()\n  .color()\n  .footer()\n  .image()\n  .thumbnail()\n  .video()\n  .provider()\n  .author()\n  .fields()\n```\n\n----------------------------------------\n\nTITLE: Initializing createFactory in Discord Hono\nDESCRIPTION: This code snippet initializes the `createFactory` function from the `discord-hono` library. It also defines an `Env` type for environment variables, including a `DB` binding, and exports the instantiated factory for use throughout the application. The `Env` type allows strongly typing environment variables for the Discord bot.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/helpers/create-factory.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// src/init.ts\nimport { createFactory } from 'discord-hono'\n\nexport type Env = {\n  Bindings: {\n    DB: any\n  }\n}\n\nexport const factory = createFactory<Env>()\n```\n\n----------------------------------------\n\nTITLE: Starlight Project File Structure\nDESCRIPTION: Illustrates the directory structure of a typical Astro + Starlight project. It shows where to place documentation files (`src/content/docs`), static assets (`public`), and configuration files (`astro.config.mjs`). Understanding this structure is important for organizing and maintaining the documentation site.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/README.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n.\n├── public/\n├── src/\n│   ├── assets/\n│   ├── content/\n│   │   ├── docs/\n│   │   └── config.ts\n│   └── env.d.ts\n├── astro.config.mjs\n├── package.json\n└── tsconfig.json\n```\n\n----------------------------------------\n\nTITLE: Deleting All Discord Commands with Hono\nDESCRIPTION: This code snippet shows how to delete all registered Discord commands. It uses the `register` function from the `discord-hono` library with an empty array of commands. It requires the application ID and token to authenticate with Discord. Optionally, a guild ID can be provided to delete commands from a specific guild.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/helpers/register.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nregister(\n  [],\n  process.env.DISCORD_APPLICATION_ID,\n  process.env.DISCORD_TOKEN,\n  //process.env.DISCORD_TEST_GUILD_ID,\n)\n```\n\n----------------------------------------\n\nTITLE: Posting Message to Channel with c.rest (Docs Path)\nDESCRIPTION: This snippet shows how to post a message to a Discord channel using `c.rest` with the endpoint path directly from the Discord API documentation. The first argument is the HTTP method ('POST'), the second the API endpoint path, the third an array containing the channel ID, and the fourth is the message content.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/interactions/rest.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait c.rest('POST', '/channels/{channel.id}/messages', [channel_id], {\n  content: 'this is rest',\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Command Class - DiscordHono (TS)\nDESCRIPTION: This snippet demonstrates the basic initialization of the `Command` class in DiscordHono. It creates two commands, 'name' and 'ping', with their respective descriptions. This is the simplest way to define a Discord command using DiscordHono.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/builders/command.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Command } from 'discord-hono'\n\nconst commands = [\n  new Command('name', 'description'),\n  new Command('ping', 'response pong'),\n]\n```\n\n----------------------------------------\n\nTITLE: Initializing Command Objects in Discord Hono (TypeScript)\nDESCRIPTION: Demonstrates how to create basic `Command` objects with a name and description using the `discord-hono` library.  This snippet shows how to import the `Command` class and instantiate it to define a simple Discord command.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/builders/command.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Command } from 'discord-hono'\n\nconst commands = [\n  new Command('name', 'description'),\n  new Command('ping', 'pong を返答'),\n]\n```\n\n----------------------------------------\n\nTITLE: Mounting DiscordHono with Hono\nDESCRIPTION: This code snippet demonstrates how to mount a DiscordHono instance as a sub-route within a Hono application. It defines a simple Discord command and a basic Hono route, then mounts the DiscordHono handler at the `/interaction` path. This allows handling both regular web requests and Discord interactions within the same application.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/guides/tips.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst discord = new DiscordHono()\ndiscord.command('hello', c => c.res('Discord World'))\n\nconst hono = new Hono()\nhono.get('/', c => c.text('Hono World'))\nhono.mount('/interaction', discord.fetch)\n```\n\n----------------------------------------\n\nTITLE: Sending Followup Messages with .followup()\nDESCRIPTION: This snippet shows how to use the `.followup()` method to send a followup message after deferring a response. It demonstrates sending text or data as a followup.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/interactions/context.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new DiscordHono().command('ping', c =>\n  c.resDefer(\n    async c =>\n      await c.followup('Followup テキスト or Data', {\n        blob: Blob,\n        name: 'image-blob.png',\n      }),\n  ),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a new Astro project with Starlight template\nDESCRIPTION: This command initializes a new Astro project using the Starlight template. It leverages the npm package manager and the `create astro@latest` command to set up the project with the necessary configurations and dependencies for a Starlight-based documentation site.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm create astro@latest -- --template starlight\n```\n\n----------------------------------------\n\nTITLE: Creating Embeds with EmbedBuilder in Discord Hono\nDESCRIPTION: This example illustrates how to use Discord.js's `EmbedBuilder` to create an embed and send it as a response in Discord Hono. It showcases the creation of an `EmbedBuilder` instance, setting the title and description, and including it within the `embeds` array in the response.  Requires `@discordjs/builders` and `discord-hono`. The ellipsis in the DiscordHono constructor arguments has been removed for clarity, although it does not affect the functionality of the code.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/migration-guides/discordjs.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EmbedBuilder } from '@discordjs/builders'\nimport { DiscordHono } from 'discord-hono'\n\nconst app = new DiscordHono().command('embed', c =>\n  c.res({\n    embeds: [new EmbedBuilder().setTitle('タイトル').setDescription('内容')],\n  }),\n)\n```\n\n----------------------------------------\n\nTITLE: Handling Discord Rate Limits with retry429 in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the `retry429` function to handle rate limits when making multiple requests to the Discord API using the Discord Hono library. It imports `retry429`, `Rest`, and `_channels_$_messages` from the `discord-hono` package. The `manyPosts` function attempts to send 1000 messages to a specified channel, retrying the request up to 3 times with a 5000ms delay if a 429 error is encountered.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/helpers/retry429.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { retry429, Rest, _channels_$_messages } from 'discord-hono'\n\nconst manyPosts = async () => {\n  const rest = new Rest(token)\n  for (let i = 0; i < 1000; i++) {\n    await retry429(\n      () =>\n        rest.post(_channels_$_messages, [channel_id], {\n          content: 'this is rest',\n        }),\n      3,\n      5000,\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Commands and Deploying\nDESCRIPTION: These commands execute the `register` and `deploy` scripts defined in `package.json`. `npm run register` registers the Discord bot commands. `npm run deploy` deploys the application to Cloudflare Workers.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/guides/start.mdx#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm run register\nnpm run deploy\n```\n\n----------------------------------------\n\nTITLE: Registering commands and deploying the bot\nDESCRIPTION: These commands execute the 'register' and 'deploy' scripts defined in the `package.json` file. The 'register' script typically registers the bot's commands with Discord, and the 'deploy' script deploys the bot's code to the Cloudflare Workers environment.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/guides/start.mdx#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm run register\nnpm run deploy\n```\n\n----------------------------------------\n\nTITLE: Configuring Command Properties with Methods in Discord Hono (TypeScript)\nDESCRIPTION: Illustrates how to use methods on the `Command` object to configure various properties such as ID, type, application ID, guild ID, localizations, options, permissions, NSFW status, integration types, contexts, version, and handler.  This snippet references the Discord API documentation for available options.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/builders/command.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst commands = [\n  new Command('name', 'description')\n    .id()\n    .type(2) // 1,2,3 デフォルト 1 --- 1: CHAT_INPUT, 2: USER, 3: MESSAGE\n    .application_id()\n    .guild_id()\n    .name_localizations()\n    .description_localizations()\n    .options(\n      new Option('text', 'テキスト1つ目'),\n      new Option('second', 'テキスト2つ目'),\n    )\n    .default_member_permissions()\n    .dm_permission()\n    .default_permission()\n    .nsfw()\n    .integration_types()\n    .contexts()\n    .version()\n    .handler(),\n]\n```\n\n----------------------------------------\n\nTITLE: Launching Activities with .resActivity()\nDESCRIPTION: This example demonstrates using the `.resActivity()` method to launch an activity in Discord (only applicable for apps with enabled activities).\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/interactions/context.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new DiscordHono().command('activity', c => c.resActivity())\n```\n\n----------------------------------------\n\nTITLE: Registering Commands with Discord Hono using SlashCommandBuilder\nDESCRIPTION: This code snippet demonstrates how to use Discord.js's `SlashCommandBuilder` to create commands and then register them with Discord Hono.  It shows how to create a `SlashCommandBuilder` instance, define command attributes like name and description, and then pass the resulting array of commands to the `register` function (assumed to be part of Discord Hono). Requires `@discordjs/builders` and `discord-hono`.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/migration-guides/discordjs.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SlashCommandBuilder } from '@discordjs/builders'\nimport { register } from 'discord-hono'\n\nconst commands = [\n  new SlashCommandBuilder()\n    .setName('ping')\n    .setDescription('Check if this interaction is responsive')\n]\n\nregister(commands, ...)\n```\n\n----------------------------------------\n\nTITLE: Mounting DiscordHono with Hono\nDESCRIPTION: This code snippet demonstrates how to integrate DiscordHono with a standard Hono application. It defines a simple Hono route and mounts the DiscordHono instance to a specific endpoint, allowing the bot to handle Discord interactions through that route. It showcases setting up both a standard HTTP endpoint and a Discord interaction endpoint.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/guides/tips.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst discord = new DiscordHono()\ndiscord.command('hello', c => c.res('Discord World'))\n\nconst hono = new Hono()\nhono.get('/', c => c.text('Hono World'))\nhono.mount('/interaction', discord.fetch)\n```\n\n----------------------------------------\n\nTITLE: Creating Command Options with Specific Types in Discord Hono (TypeScript)\nDESCRIPTION: Demonstrates how to create command options with different data types using the `Option` class. The code defines an `OptionType` and shows how to specify the type when creating an option. Default option type is `String` if not specified.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/builders/command.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Command, Option } from 'discord-hono'\n\ntype OptionType =\n  | 'String'\n  | 'Integer'\n  | 'Number'\n  | 'Boolean'\n  | 'User'\n  | 'Channel'\n  | 'Role'\n  | 'Mentionable'\n  | 'Attachment'\n\nconst optionType: OptionType = 'Channel' // デフォルト: 'String'\n\nconst commands = [\n  new Command('hello', 'world を返答').options(\n    new Option('text', 'テキスト入力'), // String オプション\n    new Option('channel', 'チャンネル選択', optionType), // Channel オプション\n  ),\n]\n```\n\n----------------------------------------\n\nTITLE: DiscordHono with Fastly Compute\nDESCRIPTION: This snippet demonstrates setting up DiscordHono within a Fastly Compute environment. It retrieves environment variables for Discord application ID, public key, and token using `fastly:env`. It defines a 'ping' command and registers an event listener to handle fetch events, passing the request to DiscordHono's `fetch` method for processing.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/guides/tips.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { env } from 'fastly:env'\nimport { DiscordHono } from 'discord-hono'\n\nconst app = new DiscordHono({\n  discordEnv: () => ({\n    APPLICATION_ID: env('DISCORD_APPLICATION_ID'),\n    PUBLIC_KEY: env('DISCORD_PUBLIC_KEY'),\n    TOKEN: env('DISCORD_TOKEN'),\n  }),\n}).command('ping', c => c.res('Pong!!'))\n\naddEventListener('fetch', event =>\n  event.respondWith(app.fetch(event.request, undefined, event)),\n)\n```\n\n----------------------------------------\n\nTITLE: Using c.rest with predefined path constants\nDESCRIPTION: This code snippet demonstrates how to use `c.rest` with a predefined path constant (`_channels_$_messages`) from the `discord-hono` library to send a message to a Discord channel. It requires the `channel_id` and a content object.  The first argument is the HTTP method, the second is the path constant, the third is an array of path parameters, and the fourth is the request body.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/interactions/rest.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { _channels_$_messages } from 'discord-hono'\n\nawait c.rest('POST', _channels_$_messages, [channel_id], {\n  content: 'this is rest',\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Subcommands and Subgroups - DiscordHono (TS)\nDESCRIPTION: This snippet illustrates how to define subcommands and subcommand groups within a Discord command using DiscordHono. It showcases the `SubCommand` and `SubGroup` classes, which allow organizing commands into a hierarchical structure, and are added as options to the main `Command` object.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/builders/command.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Command, SubGroup, SubCommand } from 'discord-hono'\n\nconst commands = [\n  new Command('slash', 'slash description').options(\n    new SubCommand('sub1', 'Subcommand 1'),\n    new SubGroup('group', 'group description').options(\n      new SubCommand('sub2', 'Subcommand 2'),\n      new SubCommand('sub3', 'Subcommand 3'),\n    ),\n  ),\n]\n```\n\n----------------------------------------\n\nTITLE: Deploying DiscordHono with Fastly Compute\nDESCRIPTION: This code snippet demonstrates how to deploy a Discord bot using DiscordHono on Fastly Compute. It utilizes the `fastly:env` module to retrieve environment variables for the Discord application ID, public key, and token. It then initializes DiscordHono with these environment variables and registers a simple 'ping' command. The `fetch` event listener is used to handle incoming requests with the DiscordHono fetch handler, passing the event request and context.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/guides/tips.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { env } from 'fastly:env'\nimport { DiscordHono } from 'discord-hono'\n\nconst app = new DiscordHono({\n  discordEnv: () => ({\n    APPLICATION_ID: env('DISCORD_APPLICATION_ID'),\n    PUBLIC_KEY: env('DISCORD_PUBLIC_KEY'),\n    TOKEN: env('DISCORD_TOKEN'),\n  }),\n}).command('ping', c => c.res('Pong!!'))\n\naddEventListener('fetch', event =>\n  event.respondWith(app.fetch(event.request, undefined, event)),\n)\n```\n\n----------------------------------------\n\nTITLE: Using c.rest with a document path\nDESCRIPTION: This code snippet illustrates using `c.rest` with a raw API path string to send a message to a Discord channel.  It mirrors the functionality of using predefined constants but uses the path directly from the Discord API documentation.  The first argument is the HTTP method, the second is the API path, the third is an array of path parameters, and the fourth is the request body.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/interactions/rest.mdx#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nawait c.rest('POST', '/channels/{channel.id}/messages', [channel_id], {\n  content: 'this is rest',\n})\n```\n\n----------------------------------------\n\nTITLE: Modifying package.json for module type and register script\nDESCRIPTION: This JSON snippet modifies the `package.json` file to set the module type to 'module' and adds a 'register' script. The 'register' script compiles the TypeScript code and then executes the register.js file using Node.js with environment variables loaded from the .env file.  This prepares the project for command registration.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/guides/start.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n// package.json\n\"type\": \"module\",\n\"scripts\": {\n  \"register\": \"tsc && node --env-file=.env dist/register.js\",\n},\n```\n\n----------------------------------------\n\nTITLE: Creating Rows of Buttons using Components in Discord Hono (TS)\nDESCRIPTION: This snippet demonstrates how to create multiple rows of buttons using the Components class in Discord Hono. It initializes a new Components instance and uses the .row() method to add two rows, each containing two buttons with different unique IDs and labels. This mirrors the functionality of Action Rows in the Discord API.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/builders/components.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst components = new Components()\n  .row(new Button('button-1', '1'), new Button('button-2', '22'))\n  .row(new Button('button-3', '333'), new Button('button-4', '4444'))\n```\n\n----------------------------------------\n\nTITLE: Storing Secrets using Wrangler\nDESCRIPTION: These commands use `wrangler secret put` to store Discord application ID, public key, and bot token as secrets in the Cloudflare Workers environment.  This prevents sensitive information from being stored directly in the code repository.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/guides/start.mdx#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpx wrangler secret put DISCORD_APPLICATION_ID\nnpx wrangler secret put DISCORD_PUBLIC_KEY\nnpx wrangler secret put DISCORD_TOKEN\n```\n\n----------------------------------------\n\nTITLE: Autocomplete Response in Discord Hono (Typescript)\nDESCRIPTION: This code snippet demonstrates how to return an autocomplete response in a Discord Hono application. It initializes an `Autocomplete` instance with the focused value from the context, adds choices to it, and returns the result using `c.resAutocomplete`.  The `Autocomplete` class filters the choices based on the search word (focused value).\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/builders/autocomplete.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreturn c.resAutocomplete(\n  new Autocomplete(c.focused?.value).choices(\n    { name: 'world', value: 'world!!!' },\n    { name: 'hi', value: 'hi!' },\n  ),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a New Project using Cloudflare CLI\nDESCRIPTION: This command initializes a new Cloudflare Workers project, navigates into the project directory, and installs necessary dependencies: discord-hono and discord-api-types. discord-api-types is installed as a dev dependency specifically when using TypeScript. Optionally installs @types/node if needed.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/guides/start.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm create cloudflare@latest\ncd YOUER_PROJECT\nnpm i discord-hono\nnpm i -D discord-api-types # TypeScript を使うとき\n# npm i -D @types/node # 必要に応じて\n```\n\n----------------------------------------\n\nTITLE: Customizing Discord Environment Variables (Typescript)\nDESCRIPTION: This snippet shows how to customize the environment variables used by DiscordHono if your environment variables have different names than the default expected by DiscordHono. This is useful when deploying to environments other than Cloudflare or when the default names for APPLICATION_ID, PUBLIC_KEY and TOKEN are not appropriate.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/interactions/discord-hono.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new DiscordHono({\n  discordEnv: env => ({\n    APPLICATION_ID: env.DISCORD_APPLICATION_ID,\n    PUBLIC_KEY: env.DISCORD_PUBLIC_KEY,\n    TOKEN: env.DISCORD_TOKEN,\n  }),\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Variable Types in Environment\nDESCRIPTION: This snippet shows how to define variable types within the `Env` type using the `Variables` property. It demonstrates accessing these variables using `c.var` inside command and modal handlers. This allows type-safe access to environment variables.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/interactions/typescript.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype Env = {\n  Variables: {\n    OPTION_NAME?: string\n    TEXTINPUT_CUSTOM_ID?: string\n  }\n}\n\nconst app = new DiscordHono<Env>()\n  .command('ping', c => c.res(c.var.OPTION_NAME))\n  .modal('modal', c => c.res(c.var.TEXTINPUT_CUSTOM_ID))\n```\n\n----------------------------------------\n\nTITLE: Sending Message to Discord Webhook (discord-hono)\nDESCRIPTION: This code snippet demonstrates how to send a message to a Discord Webhook using the `webhook` function from the `discord-hono` library. The function takes the webhook URL and the message content as parameters. It can be used to send application logs or notifications to a Discord channel without requiring a full Discord Bot implementation.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/helpers/webhook.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { webhook } from 'discord-hono'\n\nawait webhook('https://discord.com/api/webhooks/123/abc', 'メッセージ')\n```\n\n----------------------------------------\n\nTITLE: Button Method Chaining in Discord Hono (TS)\nDESCRIPTION: This snippet demonstrates method chaining for configuring a Button in Discord Hono. It uses methods like .custom_id(), .emoji(), and .disabled() to modify the button's properties.  Note that .custom_id() has a length limit of 99 characters including the unique ID.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/builders/components.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// prettier-ignore\nconst components = new Components().row(\n  new Button('unique-id', 'label', 'Primary')\n    .custom_id()\n    .emoji()\n    .disabled(),\n)\n```\n\n----------------------------------------\n\nTITLE: DiscordHono with Deno Deploy\nDESCRIPTION: This code snippet shows how to create a Discord bot using DiscordHono and deploy it with Deno Deploy. It defines a simple 'ping' command and uses `Deno.serve` to start the server, handling incoming requests through the DiscordHono's `fetch` method.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/guides/tips.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DiscordHono } from 'npm:discord-hono'\n\nconst app = new DiscordHono()\napp.command('ping', c => c.res('Pong!!'))\n\nDeno.serve(app.fetch)\n```\n\n----------------------------------------\n\nTITLE: Configuring Cron Triggers in wrangler.toml\nDESCRIPTION: This snippet shows an example configuration for cron triggers inside the `wrangler.toml` file. It defines the name of the project, the entrypoint, the compatibility date and the cron triggers in the `triggers.crons` array. The first argument of `.cron()` must match the toml file crons.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/interactions/discord-hono.md#_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n// wrangler.toml\nname = \"example\"\nmain = \"src/index.ts\"\ncompatibility_date = \"2024-02-08\"\n[triggers]\ncrons = [ \"0 * * * *\", \"0 0 * * *\" ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Cron Triggers in wrangler.toml (TOML)\nDESCRIPTION: This snippet shows how to configure cron triggers in the `wrangler.toml` file.  The `crons` array specifies the cron expressions that will trigger the corresponding `.cron()` handlers in the DiscordHono app. The cron expressions in `wrangler.toml` must match the first argument of the `.cron()` method.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/interactions/discord-hono.md#_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n// wrangler.toml\nname = \"example\"\nmain = \"src/index.ts\"\ncompatibility_date = \"2024-02-08\"\n[triggers]\ncrons = [ \"0 * * * *\", \"0 0 * * *\" ]\n```\n\n----------------------------------------\n\nTITLE: Creating a new Cloudflare project with discord-hono\nDESCRIPTION: This command creates a new Cloudflare project, navigates into it, and installs the necessary dependencies: discord-hono for Discord bot interactions, discord-api-types for TypeScript support, and optionally @types/node if needed. This sets up the basic environment for building the Discord bot.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/guides/start.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm create cloudflare@latest\ncd YOUER_PROJECT\nnpm i discord-hono\nnpm i -D discord-api-types # When using TypeScript\n# npm i -D @types/node # As needed\n```\n\n----------------------------------------\n\nTITLE: Creating a Modal with TextInput in Discord Hono\nDESCRIPTION: This snippet demonstrates how to create a basic modal with a single text input using the `Modal` and `TextInput` classes from the `discord-hono` library. It initializes a modal with a unique ID and title, and then adds a text input to it using the `row()` method.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/builders/modal.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Modal, TextInput } from 'discord-hono'\n\nconst modal = new Modal('unique-id', 'モーダルタイトル').row(\n  new TextInput('custom_id', 'テキストラベル'),\n)\n```\n\n----------------------------------------\n\nTITLE: Styling TextInput in Discord Hono\nDESCRIPTION: This code demonstrates how to specify the style of a `TextInput` within a Discord Hono modal. The third argument of the `TextInput` constructor defines the style, defaulting to 'Single' if not specified. Styles can be 'Single' or 'Multi'.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/builders/modal.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Modal, TextInput } from 'discord-hono'\n\ntype Style = 'Single' | 'Multi'\n\nconst modal = new Modal('unique-id', 'モーダルタイトル')\n  .row(new TextInput('text-1', 'テキストラベル'))\n  .row(new TextInput('custom_id', '複数行入力', 'Multi' as Style))\n```\n\n----------------------------------------\n\nTITLE: Initializing DiscordHono App in Typescript\nDESCRIPTION: This snippet initializes a DiscordHono application and defines a simple 'ping' command that responds with 'Pong!!'. It demonstrates the basic structure of a Discord Hono application.  No specific dependencies beyond 'discord-hono' are required.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/interactions/discord-hono.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DiscordHono } from 'discord-hono'\n\nconst app = new DiscordHono()\napp.command('ping', c => c.res('Pong!!'))\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Accessing Cron Event Data\nDESCRIPTION: This snippet demonstrates accessing cron event data within a cron job handler using `c.cronEvent`. It logs the cron schedule string to the console.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/interactions/context.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new DiscordHono().cron('', c => console.log(c.cronEvent.cron))\n```\n\n----------------------------------------\n\nTITLE: Initializing DiscordHono with Commands\nDESCRIPTION: This snippet initializes a DiscordHono application and registers two simple commands: 'ping' and 'hello'. Each command responds with a basic text message when triggered in Discord.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/interactions/context.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DiscordHono } from 'discord-hono'\n\nconst app = new DiscordHono()\n  .command('ping', c => c.res('Pong!!'))\n  .command('hello', c => c.res('world!!'))\n```\n\n----------------------------------------\n\nTITLE: Deferring Component Updates with .resDeferUpdate() (TypeScript)\nDESCRIPTION: This example demonstrates how to defer an update to an existing message after a component interaction using `.resDeferUpdate()`.  This is useful for asynchronous updates. Requires 'discord-hono'.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/interactions/context.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new DiscordHono().component('button', c =>\n  c.resDeferUpdate(async c => await c.followup('Followup Text')),\n)\n```\n\n----------------------------------------\n\nTITLE: Discord Bot Components Response Example\nDESCRIPTION: This snippet shows an example output of the Discord bot's component response.  Each line represents a row of buttons, with button labels enclosed in square brackets.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/builders/components.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n[1][22]\n[333][4444]\n```\n\n----------------------------------------\n\nTITLE: Responding with Modals using .resModal() (TypeScript)\nDESCRIPTION: This example demonstrates how to send a modal to the user using `.resModal()`. It creates a `Modal` instance with a text input field. Requires 'discord-hono'.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/interactions/context.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new DiscordHono().command('ping', c =>\n  c.resModal(\n    new Modal('unique-id', 'Title').row(new TextInput('text-id', 'Label')),\n  ),\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing DiscordHono with custom discordEnv\nDESCRIPTION: This snippet shows how to initialize DiscordHono with custom discordEnv. Use it when you save the environment variable with a different name or when it's an environment other than Cloudflare.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/interactions/discord-hono.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new DiscordHono({\n  discordEnv: env => ({\n    APPLICATION_ID: env.DISCORD_APPLICATION_ID,\n    PUBLIC_KEY: env.DISCORD_PUBLIC_KEY,\n    TOKEN: env.DISCORD_TOKEN,\n  }),\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Cron Event Data (TypeScript)\nDESCRIPTION: This example demonstrates how to access the cron event data within a DiscordHono cron job using `c.cronEvent`. It logs the cron expression that triggered the job. Requires 'discord-hono'.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/interactions/context.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new DiscordHono().cron('', c => console.log(c.cronEvent.cron))\n```\n\n----------------------------------------\n\nTITLE: Example Discord Bot Component Response (Bash)\nDESCRIPTION: This is an example output showcasing the structure of a Discord bot component response. It depicts two rows of buttons, each row containing button labels, formatted as plain text.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/builders/components.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n[1][22]\n[333][4444]\n```\n\n----------------------------------------\n\nTITLE: Adding Emojis to Buttons in DiscordHono\nDESCRIPTION: This example shows how to add a simple emoji to a button within a DiscordHono component. The emoji is included as the first element of an array, followed by the button label.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/builders/components.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Components, Button } from 'discord-hono'\n\nconst components = new Components().row(new Button('button', ['✅', 'button']))\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Flag\nDESCRIPTION: This snippet shows how to set the ephemeral flag to make the response only visible to the user who triggered the command.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/interactions/context.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new DiscordHono()\napp.command('ping', c => c.ephemeral().res('Pong!!'))\n```\n\n----------------------------------------\n\nTITLE: Exporting Command Handlers\nDESCRIPTION: This code snippet exports all command handlers from individual modules within the `./handlers` directory. This allows a central import point for all command definitions, simplifying registration and management.  It assumes that individual handler files export specific command implementations.\nSOURCE: https://github.com/luisfun/discord-hono-docs/blob/main/src/content/docs/ja/helpers/create-factory.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/handlers/index.ts\nexport * from './hello-world.js'\nexport * from './help.js'\n```"
  }
]